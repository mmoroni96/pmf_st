
SD_USB_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000155c8  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  08015860  08015860  00025860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015dd0  08015dd0  00030254  2**0
                  CONTENTS
  4 .ARM          00000008  08015dd0  08015dd0  00025dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015dd8  08015dd8  00030254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015dd8  08015dd8  00025dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015ddc  08015ddc  00025ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  24000000  08015de0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000194  08015f74  00030194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240001f4  08015fd4  000301f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00007dec  24000258  08016034  00030258  2**3
                  ALLOC
 12 ._user_heap_stack 00006004  24008044  08016034  00038044  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030254  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004139a  00000000  00000000  00030282  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 0000688e  00000000  00000000  0007161c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 000021d0  00000000  00000000  00077eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001f60  00000000  00000000  0007a080  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00040d27  00000000  00000000  0007bfe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00024577  00000000  00000000  000bcd07  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    0017948f  00000000  00000000  000e127e  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0025a70d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008fe0  00000000  00000000  0025a788  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000258 	.word	0x24000258
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08015848 	.word	0x08015848

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400025c 	.word	0x2400025c
 80002d4:	08015848 	.word	0x08015848

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f000 ff07 	bl	80013f0 <HAL_Init>

  /* USER CODE BEGIN Init */
  int i=0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f887 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 fa93 	bl	8000b14 <MX_GPIO_Init>
  MX_ETH_Init();
 80005ee:	f000 f94d 	bl	800088c <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005f2:	f000 fa43 	bl	8000a7c <MX_USART3_UART_Init>
  MX_SDMMC1_SD_Init();
 80005f6:	f000 f9f7 	bl	80009e8 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80005fa:	f00c fe65 	bl	800d2c8 <MX_FATFS_Init>
  MX_RTC_Init();
 80005fe:	f000 f997 	bl	8000930 <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 8000602:	f014 fb1f 	bl	8014c44 <MX_USB_DEVICE_Init>
  MX_TIM17_Init();
 8000606:	f000 fa11 	bl	8000a2c <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  //HAL_SD_Init(&hsd1);
  //HAL_SD_GetCardInfo(&hsd1, &SDCardInfo);
  //HAL_SD_Init(&hsd1);
  FRESULT res;
  res=f_mount(&myFatFS, SDPath, 1);
 800060a:	2201      	movs	r2, #1
 800060c:	4931      	ldr	r1, [pc, #196]	; (80006d4 <main+0xfc>)
 800060e:	4832      	ldr	r0, [pc, #200]	; (80006d8 <main+0x100>)
 8000610:	f012 fe9e 	bl	8013350 <f_mount>
 8000614:	4603      	mov	r3, r0
 8000616:	71fb      	strb	r3, [r7, #7]
  HAL_TIM_Base_Start_IT(&htim17);
 8000618:	4830      	ldr	r0, [pc, #192]	; (80006dc <main+0x104>)
 800061a:	f007 febb 	bl	8008394 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port,USER_Btn_Pin)==GPIO_PIN_SET){
 800061e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000622:	482f      	ldr	r0, [pc, #188]	; (80006e0 <main+0x108>)
 8000624:	f001 fe8e 	bl	8002344 <HAL_GPIO_ReadPin>
 8000628:	4603      	mov	r3, r0
 800062a:	2b01      	cmp	r3, #1
 800062c:	d1f7      	bne.n	800061e <main+0x46>
		  if(i==0){
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d13f      	bne.n	80006b4 <main+0xdc>
			  HAL_TIM_Base_Stop_IT(&htim17);
 8000634:	4829      	ldr	r0, [pc, #164]	; (80006dc <main+0x104>)
 8000636:	f007 fed7 	bl	80083e8 <HAL_TIM_Base_Stop_IT>
			  //NVIC_DisableIRQ(OTG_FS_IRQn);
			  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, GPIO_PIN_SET);
 800063a:	2201      	movs	r2, #1
 800063c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000640:	4828      	ldr	r0, [pc, #160]	; (80006e4 <main+0x10c>)
 8000642:	f001 fe97 	bl	8002374 <HAL_GPIO_WritePin>
			  if(USBD_Stop(&hUsbDeviceFS)!= USBD_OK) {
 8000646:	4828      	ldr	r0, [pc, #160]	; (80006e8 <main+0x110>)
 8000648:	f00e fa5a 	bl	800eb00 <USBD_Stop>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <main+0x7e>
								Error_Handler();
 8000652:	f000 fbd3 	bl	8000dfc <Error_Handler>
							  }
			  res = f_open(&writeFile, &path1, FA_CREATE_ALWAYS);
 8000656:	2208      	movs	r2, #8
 8000658:	4924      	ldr	r1, [pc, #144]	; (80006ec <main+0x114>)
 800065a:	4825      	ldr	r0, [pc, #148]	; (80006f0 <main+0x118>)
 800065c:	f012 febe 	bl	80133dc <f_open>
 8000660:	4603      	mov	r3, r0
 8000662:	71fb      	strb	r3, [r7, #7]
			  res = f_close(&writeFile);
 8000664:	4822      	ldr	r0, [pc, #136]	; (80006f0 <main+0x118>)
 8000666:	f013 ff08 	bl	801447a <f_close>
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
			  res = f_open(&writeFile, &path1, FA_WRITE | FA_OPEN_ALWAYS);
 800066e:	2212      	movs	r2, #18
 8000670:	491e      	ldr	r1, [pc, #120]	; (80006ec <main+0x114>)
 8000672:	481f      	ldr	r0, [pc, #124]	; (80006f0 <main+0x118>)
 8000674:	f012 feb2 	bl	80133dc <f_open>
 8000678:	4603      	mov	r3, r0
 800067a:	71fb      	strb	r3, [r7, #7]
			  for(int e=0;e<100000;e++){
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	e004      	b.n	800068c <main+0xb4>
				  scrivi_speed();
 8000682:	f000 fb77 	bl	8000d74 <scrivi_speed>
			  for(int e=0;e<100000;e++){
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	3301      	adds	r3, #1
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	4a19      	ldr	r2, [pc, #100]	; (80006f4 <main+0x11c>)
 8000690:	4293      	cmp	r3, r2
 8000692:	ddf6      	ble.n	8000682 <main+0xaa>
			  }

			  res = f_close(&writeFile);
 8000694:	4816      	ldr	r0, [pc, #88]	; (80006f0 <main+0x118>)
 8000696:	f013 fef0 	bl	801447a <f_close>
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
			  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006a4:	480f      	ldr	r0, [pc, #60]	; (80006e4 <main+0x10c>)
 80006a6:	f001 fe65 	bl	8002374 <HAL_GPIO_WritePin>
		      i=0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
		      HAL_Delay(200);}
 80006ae:	20c8      	movs	r0, #200	; 0xc8
 80006b0:	f000 ff30 	bl	8001514 <HAL_Delay>


			  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ba:	480a      	ldr	r0, [pc, #40]	; (80006e4 <main+0x10c>)
 80006bc:	f001 fe5a 	bl	8002374 <HAL_GPIO_WritePin>
			  MX_USB_DEVICE_Init();
 80006c0:	f014 fac0 	bl	8014c44 <MX_USB_DEVICE_Init>
			  /*if(USBD_Start(&hUsbDeviceFS)!= USBD_OK) {
			 			  				    Error_Handler();
			 			  				  }*/
			  //NVIC_EnableIRQ(OTG_FS_IRQn);
			  HAL_TIM_Base_Start_IT(&htim17);			  HAL_Delay(200);
 80006c4:	4805      	ldr	r0, [pc, #20]	; (80006dc <main+0x104>)
 80006c6:	f007 fe65 	bl	8008394 <HAL_TIM_Base_Start_IT>
 80006ca:	20c8      	movs	r0, #200	; 0xc8
 80006cc:	f000 ff22 	bl	8001514 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port,USER_Btn_Pin)==GPIO_PIN_SET){
 80006d0:	e7a5      	b.n	800061e <main+0x46>
 80006d2:	bf00      	nop
 80006d4:	240056dc 	.word	0x240056dc
 80006d8:	24003560 	.word	0x24003560
 80006dc:	24001494 	.word	0x24001494
 80006e0:	58020800 	.word	0x58020800
 80006e4:	58020400 	.word	0x58020400
 80006e8:	24007774 	.word	0x24007774
 80006ec:	24000000 	.word	0x24000000
 80006f0:	240014d8 	.word	0x240014d8
 80006f4:	0001869f 	.word	0x0001869f

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b0cc      	sub	sp, #304	; 0x130
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000702:	224c      	movs	r2, #76	; 0x4c
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f014 ffdc 	bl	80156c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000710:	2220      	movs	r2, #32
 8000712:	2100      	movs	r1, #0
 8000714:	4618      	mov	r0, r3
 8000716:	f014 ffd5 	bl	80156c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800071a:	f107 0308 	add.w	r3, r7, #8
 800071e:	4618      	mov	r0, r3
 8000720:	23bc      	movs	r3, #188	; 0xbc
 8000722:	461a      	mov	r2, r3
 8000724:	2100      	movs	r1, #0
 8000726:	f014 ffcd 	bl	80156c4 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800072a:	2002      	movs	r0, #2
 800072c:	f003 f8b4 	bl	8003898 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	4b52      	ldr	r3, [pc, #328]	; (8000880 <SystemClock_Config+0x188>)
 8000738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800073a:	4a51      	ldr	r2, [pc, #324]	; (8000880 <SystemClock_Config+0x188>)
 800073c:	f023 0301 	bic.w	r3, r3, #1
 8000740:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000742:	4b4f      	ldr	r3, [pc, #316]	; (8000880 <SystemClock_Config+0x188>)
 8000744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000746:	f003 0201 	and.w	r2, r3, #1
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	4b4d      	ldr	r3, [pc, #308]	; (8000884 <SystemClock_Config+0x18c>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	4a4c      	ldr	r2, [pc, #304]	; (8000884 <SystemClock_Config+0x18c>)
 8000754:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000758:	6193      	str	r3, [r2, #24]
 800075a:	4b4a      	ldr	r3, [pc, #296]	; (8000884 <SystemClock_Config+0x18c>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800076a:	bf00      	nop
 800076c:	4b45      	ldr	r3, [pc, #276]	; (8000884 <SystemClock_Config+0x18c>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000778:	d1f8      	bne.n	800076c <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 800077a:	2329      	movs	r3, #41	; 0x29
 800077c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000780:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000784:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000788:	2301      	movs	r3, #1
 800078a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800078e:	2301      	movs	r3, #1
 8000790:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000794:	2302      	movs	r3, #2
 8000796:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079a:	2302      	movs	r3, #2
 800079c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007a0:	2301      	movs	r3, #1
 80007a2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 32;
 80007a6:	2320      	movs	r3, #32
 80007a8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007ac:	2302      	movs	r3, #2
 80007ae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007b8:	2302      	movs	r3, #2
 80007ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007be:	230c      	movs	r3, #12
 80007c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80007d4:	4618      	mov	r0, r3
 80007d6:	f003 f8a9 	bl	800392c <HAL_RCC_OscConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0xec>
  {
    Error_Handler();
 80007e0:	f000 fb0c 	bl	8000dfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e4:	233f      	movs	r3, #63	; 0x3f
 80007e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ea:	2303      	movs	r3, #3
 80007ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007fc:	2340      	movs	r3, #64	; 0x40
 80007fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000802:	2340      	movs	r3, #64	; 0x40
 8000804:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800080c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000810:	2340      	movs	r3, #64	; 0x40
 8000812:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000816:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800081a:	2101      	movs	r1, #1
 800081c:	4618      	mov	r0, r3
 800081e:	f003 fc5d 	bl	80040dc <HAL_RCC_ClockConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0x134>
  {
    Error_Handler();
 8000828:	f000 fae8 	bl	8000dfc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 800082c:	f107 0308 	add.w	r3, r7, #8
 8000830:	4a15      	ldr	r2, [pc, #84]	; (8000888 <SystemClock_Config+0x190>)
 8000832:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000834:	f107 0308 	add.w	r3, r7, #8
 8000838:	2200      	movs	r2, #0
 800083a:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800083c:	f107 0308 	add.w	r3, r7, #8
 8000840:	2200      	movs	r2, #0
 8000842:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000844:	f107 0308 	add.w	r3, r7, #8
 8000848:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800084c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000850:	f107 0308 	add.w	r3, r7, #8
 8000854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000858:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800085c:	f107 0308 	add.w	r3, r7, #8
 8000860:	4618      	mov	r0, r3
 8000862:	f003 ffbf 	bl	80047e4 <HAL_RCCEx_PeriphCLKConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0x178>
  {
    Error_Handler();
 800086c:	f000 fac6 	bl	8000dfc <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000870:	f003 f84c 	bl	800390c <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000874:	bf00      	nop
 8000876:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	58000400 	.word	0x58000400
 8000884:	58024800 	.word	0x58024800
 8000888:	00450002 	.word	0x00450002

0800088c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000890:	4b22      	ldr	r3, [pc, #136]	; (800091c <MX_ETH_Init+0x90>)
 8000892:	4a23      	ldr	r2, [pc, #140]	; (8000920 <MX_ETH_Init+0x94>)
 8000894:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8000896:	4b21      	ldr	r3, [pc, #132]	; (800091c <MX_ETH_Init+0x90>)
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	2200      	movs	r2, #0
 800089c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 800089e:	4b1f      	ldr	r3, [pc, #124]	; (800091c <MX_ETH_Init+0x90>)
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	3301      	adds	r3, #1
 80008a4:	2280      	movs	r2, #128	; 0x80
 80008a6:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80008a8:	4b1c      	ldr	r3, [pc, #112]	; (800091c <MX_ETH_Init+0x90>)
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	3302      	adds	r3, #2
 80008ae:	22e1      	movs	r2, #225	; 0xe1
 80008b0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80008b2:	4b1a      	ldr	r3, [pc, #104]	; (800091c <MX_ETH_Init+0x90>)
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	3303      	adds	r3, #3
 80008b8:	2200      	movs	r2, #0
 80008ba:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80008bc:	4b17      	ldr	r3, [pc, #92]	; (800091c <MX_ETH_Init+0x90>)
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	3304      	adds	r3, #4
 80008c2:	2200      	movs	r2, #0
 80008c4:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <MX_ETH_Init+0x90>)
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	3305      	adds	r3, #5
 80008cc:	2200      	movs	r2, #0
 80008ce:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_ETH_Init+0x90>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_ETH_Init+0x90>)
 80008d8:	4a12      	ldr	r2, [pc, #72]	; (8000924 <MX_ETH_Init+0x98>)
 80008da:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_ETH_Init+0x90>)
 80008de:	4a12      	ldr	r2, [pc, #72]	; (8000928 <MX_ETH_Init+0x9c>)
 80008e0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_ETH_Init+0x90>)
 80008e4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008e8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008ea:	480c      	ldr	r0, [pc, #48]	; (800091c <MX_ETH_Init+0x90>)
 80008ec:	f000 ff64 	bl	80017b8 <HAL_ETH_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 80008f6:	f000 fa81 	bl	8000dfc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008fa:	2234      	movs	r2, #52	; 0x34
 80008fc:	2100      	movs	r1, #0
 80008fe:	480b      	ldr	r0, [pc, #44]	; (800092c <MX_ETH_Init+0xa0>)
 8000900:	f014 fee0 	bl	80156c4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_ETH_Init+0xa0>)
 8000906:	2221      	movs	r2, #33	; 0x21
 8000908:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <MX_ETH_Init+0xa0>)
 800090c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000910:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_ETH_Init+0xa0>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	240045d4 	.word	0x240045d4
 8000920:	40028000 	.word	0x40028000
 8000924:	240001f4 	.word	0x240001f4
 8000928:	24000194 	.word	0x24000194
 800092c:	2400464c 	.word	0x2400464c

08000930 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000944:	2300      	movs	r3, #0
 8000946:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000948:	4b25      	ldr	r3, [pc, #148]	; (80009e0 <MX_RTC_Init+0xb0>)
 800094a:	4a26      	ldr	r2, [pc, #152]	; (80009e4 <MX_RTC_Init+0xb4>)
 800094c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800094e:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <MX_RTC_Init+0xb0>)
 8000950:	2200      	movs	r2, #0
 8000952:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000954:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <MX_RTC_Init+0xb0>)
 8000956:	227f      	movs	r2, #127	; 0x7f
 8000958:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800095a:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <MX_RTC_Init+0xb0>)
 800095c:	22ff      	movs	r2, #255	; 0xff
 800095e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000960:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <MX_RTC_Init+0xb0>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000966:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <MX_RTC_Init+0xb0>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800096c:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <MX_RTC_Init+0xb0>)
 800096e:	2200      	movs	r2, #0
 8000970:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000972:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <MX_RTC_Init+0xb0>)
 8000974:	2200      	movs	r2, #0
 8000976:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000978:	4819      	ldr	r0, [pc, #100]	; (80009e0 <MX_RTC_Init+0xb0>)
 800097a:	f005 fde7 	bl	800654c <HAL_RTC_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000984:	f000 fa3a 	bl	8000dfc <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8000988:	2300      	movs	r3, #0
 800098a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800098c:	2300      	movs	r3, #0
 800098e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000990:	2300      	movs	r3, #0
 8000992:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000994:	2300      	movs	r3, #0
 8000996:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	2201      	movs	r2, #1
 80009a0:	4619      	mov	r1, r3
 80009a2:	480f      	ldr	r0, [pc, #60]	; (80009e0 <MX_RTC_Init+0xb0>)
 80009a4:	f005 fe6e 	bl	8006684 <HAL_RTC_SetTime>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80009ae:	f000 fa25 	bl	8000dfc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80009b2:	2301      	movs	r3, #1
 80009b4:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80009b6:	2301      	movs	r3, #1
 80009b8:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80009ba:	2301      	movs	r3, #1
 80009bc:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80009be:	2300      	movs	r3, #0
 80009c0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80009c2:	463b      	mov	r3, r7
 80009c4:	2201      	movs	r2, #1
 80009c6:	4619      	mov	r1, r3
 80009c8:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_RTC_Init+0xb0>)
 80009ca:	f005 ff7b 	bl	80068c4 <HAL_RTC_SetDate>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80009d4:	f000 fa12 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	3718      	adds	r7, #24
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	240045a0 	.word	0x240045a0
 80009e4:	58004000 	.word	0x58004000

080009e8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80009ec:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <MX_SDMMC1_SD_Init+0x3c>)
 80009ee:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <MX_SDMMC1_SD_Init+0x40>)
 80009f0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80009f2:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_SDMMC1_SD_Init+0x3c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80009f8:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <MX_SDMMC1_SD_Init+0x3c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_SDMMC1_SD_Init+0x3c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8000a04:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <MX_SDMMC1_SD_Init+0x3c>)
 8000a06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a0a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <MX_SDMMC1_SD_Init+0x3c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8000a12:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <MX_SDMMC1_SD_Init+0x3c>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	24001410 	.word	0x24001410
 8000a28:	52007000 	.word	0x52007000

08000a2c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000a30:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <MX_TIM17_Init+0x48>)
 8000a32:	4a11      	ldr	r2, [pc, #68]	; (8000a78 <MX_TIM17_Init+0x4c>)
 8000a34:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 63999;
 8000a36:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <MX_TIM17_Init+0x48>)
 8000a38:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000a3c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3e:	4b0d      	ldr	r3, [pc, #52]	; (8000a74 <MX_TIM17_Init+0x48>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 2000;
 8000a44:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <MX_TIM17_Init+0x48>)
 8000a46:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000a4a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <MX_TIM17_Init+0x48>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000a52:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <MX_TIM17_Init+0x48>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <MX_TIM17_Init+0x48>)
 8000a5a:	2280      	movs	r2, #128	; 0x80
 8000a5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000a5e:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MX_TIM17_Init+0x48>)
 8000a60:	f007 fc6c 	bl	800833c <HAL_TIM_Base_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8000a6a:	f000 f9c7 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	24001494 	.word	0x24001494
 8000a78:	40014800 	.word	0x40014800

08000a7c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a80:	4b22      	ldr	r3, [pc, #136]	; (8000b0c <MX_USART3_UART_Init+0x90>)
 8000a82:	4a23      	ldr	r2, [pc, #140]	; (8000b10 <MX_USART3_UART_Init+0x94>)
 8000a84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a86:	4b21      	ldr	r3, [pc, #132]	; (8000b0c <MX_USART3_UART_Init+0x90>)
 8000a88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8e:	4b1f      	ldr	r3, [pc, #124]	; (8000b0c <MX_USART3_UART_Init+0x90>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a94:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <MX_USART3_UART_Init+0x90>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a9a:	4b1c      	ldr	r3, [pc, #112]	; (8000b0c <MX_USART3_UART_Init+0x90>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000aa0:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <MX_USART3_UART_Init+0x90>)
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa6:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <MX_USART3_UART_Init+0x90>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aac:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <MX_USART3_UART_Init+0x90>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab2:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <MX_USART3_UART_Init+0x90>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ab8:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <MX_USART3_UART_Init+0x90>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000abe:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <MX_USART3_UART_Init+0x90>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ac4:	4811      	ldr	r0, [pc, #68]	; (8000b0c <MX_USART3_UART_Init+0x90>)
 8000ac6:	f007 feb9 	bl	800883c <HAL_UART_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ad0:	f000 f994 	bl	8000dfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	480d      	ldr	r0, [pc, #52]	; (8000b0c <MX_USART3_UART_Init+0x90>)
 8000ad8:	f00a fa23 	bl	800af22 <HAL_UARTEx_SetTxFifoThreshold>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ae2:	f000 f98b 	bl	8000dfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4808      	ldr	r0, [pc, #32]	; (8000b0c <MX_USART3_UART_Init+0x90>)
 8000aea:	f00a fa58 	bl	800af9e <HAL_UARTEx_SetRxFifoThreshold>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000af4:	f000 f982 	bl	8000dfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000af8:	4804      	ldr	r0, [pc, #16]	; (8000b0c <MX_USART3_UART_Init+0x90>)
 8000afa:	f00a f9d9 	bl	800aeb0 <HAL_UARTEx_DisableFifoMode>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b04:	f000 f97a 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	24001340 	.word	0x24001340
 8000b10:	40004800 	.word	0x40004800

08000b14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08c      	sub	sp, #48	; 0x30
 8000b18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2a:	4b59      	ldr	r3, [pc, #356]	; (8000c90 <MX_GPIO_Init+0x17c>)
 8000b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b30:	4a57      	ldr	r2, [pc, #348]	; (8000c90 <MX_GPIO_Init+0x17c>)
 8000b32:	f043 0304 	orr.w	r3, r3, #4
 8000b36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b3a:	4b55      	ldr	r3, [pc, #340]	; (8000c90 <MX_GPIO_Init+0x17c>)
 8000b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b40:	f003 0304 	and.w	r3, r3, #4
 8000b44:	61bb      	str	r3, [r7, #24]
 8000b46:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b48:	4b51      	ldr	r3, [pc, #324]	; (8000c90 <MX_GPIO_Init+0x17c>)
 8000b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4e:	4a50      	ldr	r2, [pc, #320]	; (8000c90 <MX_GPIO_Init+0x17c>)
 8000b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b58:	4b4d      	ldr	r3, [pc, #308]	; (8000c90 <MX_GPIO_Init+0x17c>)
 8000b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	4b4a      	ldr	r3, [pc, #296]	; (8000c90 <MX_GPIO_Init+0x17c>)
 8000b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6c:	4a48      	ldr	r2, [pc, #288]	; (8000c90 <MX_GPIO_Init+0x17c>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b76:	4b46      	ldr	r3, [pc, #280]	; (8000c90 <MX_GPIO_Init+0x17c>)
 8000b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b84:	4b42      	ldr	r3, [pc, #264]	; (8000c90 <MX_GPIO_Init+0x17c>)
 8000b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8a:	4a41      	ldr	r2, [pc, #260]	; (8000c90 <MX_GPIO_Init+0x17c>)
 8000b8c:	f043 0302 	orr.w	r3, r3, #2
 8000b90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b94:	4b3e      	ldr	r3, [pc, #248]	; (8000c90 <MX_GPIO_Init+0x17c>)
 8000b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9a:	f003 0302 	and.w	r3, r3, #2
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba2:	4b3b      	ldr	r3, [pc, #236]	; (8000c90 <MX_GPIO_Init+0x17c>)
 8000ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba8:	4a39      	ldr	r2, [pc, #228]	; (8000c90 <MX_GPIO_Init+0x17c>)
 8000baa:	f043 0308 	orr.w	r3, r3, #8
 8000bae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb2:	4b37      	ldr	r3, [pc, #220]	; (8000c90 <MX_GPIO_Init+0x17c>)
 8000bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb8:	f003 0308 	and.w	r3, r3, #8
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bc0:	4b33      	ldr	r3, [pc, #204]	; (8000c90 <MX_GPIO_Init+0x17c>)
 8000bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc6:	4a32      	ldr	r2, [pc, #200]	; (8000c90 <MX_GPIO_Init+0x17c>)
 8000bc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd0:	4b2f      	ldr	r3, [pc, #188]	; (8000c90 <MX_GPIO_Init+0x17c>)
 8000bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000be4:	482b      	ldr	r0, [pc, #172]	; (8000c94 <MX_GPIO_Init+0x180>)
 8000be6:	f001 fbc5 	bl	8002374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2140      	movs	r1, #64	; 0x40
 8000bee:	482a      	ldr	r0, [pc, #168]	; (8000c98 <MX_GPIO_Init+0x184>)
 8000bf0:	f001 fbc0 	bl	8002374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000bf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bfa:	4b28      	ldr	r3, [pc, #160]	; (8000c9c <MX_GPIO_Init+0x188>)
 8000bfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c02:	f107 031c 	add.w	r3, r7, #28
 8000c06:	4619      	mov	r1, r3
 8000c08:	4825      	ldr	r0, [pc, #148]	; (8000ca0 <MX_GPIO_Init+0x18c>)
 8000c0a:	f001 f9eb 	bl	8001fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000c0e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c14:	2301      	movs	r3, #1
 8000c16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c20:	f107 031c 	add.w	r3, r7, #28
 8000c24:	4619      	mov	r1, r3
 8000c26:	481b      	ldr	r0, [pc, #108]	; (8000c94 <MX_GPIO_Init+0x180>)
 8000c28:	f001 f9dc 	bl	8001fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c2c:	2320      	movs	r3, #32
 8000c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c34:	2302      	movs	r3, #2
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c38:	f107 031c 	add.w	r3, r7, #28
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4816      	ldr	r0, [pc, #88]	; (8000c98 <MX_GPIO_Init+0x184>)
 8000c40:	f001 f9d0 	bl	8001fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c44:	2340      	movs	r3, #64	; 0x40
 8000c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 031c 	add.w	r3, r7, #28
 8000c58:	4619      	mov	r1, r3
 8000c5a:	480f      	ldr	r0, [pc, #60]	; (8000c98 <MX_GPIO_Init+0x184>)
 8000c5c:	f001 f9c2 	bl	8001fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c60:	2380      	movs	r3, #128	; 0x80
 8000c62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c64:	2300      	movs	r3, #0
 8000c66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c6c:	f107 031c 	add.w	r3, r7, #28
 8000c70:	4619      	mov	r1, r3
 8000c72:	4809      	ldr	r0, [pc, #36]	; (8000c98 <MX_GPIO_Init+0x184>)
 8000c74:	f001 f9b6 	bl	8001fe4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	2028      	movs	r0, #40	; 0x28
 8000c7e:	f000 fd66 	bl	800174e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c82:	2028      	movs	r0, #40	; 0x28
 8000c84:	f000 fd7d 	bl	8001782 <HAL_NVIC_EnableIRQ>

}
 8000c88:	bf00      	nop
 8000c8a:	3730      	adds	r7, #48	; 0x30
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	58024400 	.word	0x58024400
 8000c94:	58020400 	.word	0x58020400
 8000c98:	58021800 	.word	0x58021800
 8000c9c:	11110000 	.word	0x11110000
 8000ca0:	58020800 	.word	0x58020800

08000ca4 <HAL_TIM_PeriodElapsedCallback>:
 LD2_GPIO_Port -> ODR ^= LD2_Pin; // toggle LD2 LED
 }

}*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
    if (htim->Instance==TIM17) //check if the interrupt comes from TIM2
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a06      	ldr	r2, [pc, #24]	; (8000ccc <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d105      	bne.n	8000cc2 <HAL_TIM_PeriodElapsedCallback+0x1e>
        {
    	HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000cb6:	2180      	movs	r1, #128	; 0x80
 8000cb8:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000cba:	f001 fb74 	bl	80023a6 <HAL_GPIO_TogglePin>
    	leggi();
 8000cbe:	f000 f809 	bl	8000cd4 <leggi>

        }}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40014800 	.word	0x40014800
 8000cd0:	58020400 	.word	0x58020400

08000cd4 <leggi>:
		indox=indox+f_printf(&writeFile,"%d:%d.%d,%d,%d\n",Time[0],Time[1],Time[2],curr,indox);}
		res = f_close(&writeFile);

	return res;
}
FRESULT leggi(){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	f5ad 5d83 	sub.w	sp, sp, #4192	; 0x1060
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
    	FIL readFile;       /* File  object for USER */
    		   /* File system object for USER logical drive */
    		//FIL USERFile;     /* File  object for USER */
    	char USERPath[4];
    	uint8_t bytesWrote;
    	uint8_t pat[] = "current.txt";
 8000cde:	4b20      	ldr	r3, [pc, #128]	; (8000d60 <leggi+0x8c>)
 8000ce0:	f241 0270 	movw	r2, #4208	; 0x1070
 8000ce4:	443a      	add	r2, r7
 8000ce6:	4413      	add	r3, r2
 8000ce8:	4a1e      	ldr	r2, [pc, #120]	; (8000d64 <leggi+0x90>)
 8000cea:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    	res = f_open(&readFile, &pat, FA_READ);
 8000cf0:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <leggi+0x8c>)
 8000cf2:	f241 0270 	movw	r2, #4208	; 0x1070
 8000cf6:	443a      	add	r2, r7
 8000cf8:	4413      	add	r3, r2
 8000cfa:	f107 0010 	add.w	r0, r7, #16
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4619      	mov	r1, r3
 8000d02:	f012 fb6b 	bl	80133dc <f_open>
 8000d06:	4603      	mov	r3, r0
 8000d08:	f241 026f 	movw	r2, #4207	; 0x106f
 8000d0c:	443a      	add	r2, r7
 8000d0e:	7013      	strb	r3, [r2, #0]
    	res = f_read(&readFile,readBuff,1, &br);
 8000d10:	f107 0010 	add.w	r0, r7, #16
 8000d14:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <leggi+0x94>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	4914      	ldr	r1, [pc, #80]	; (8000d6c <leggi+0x98>)
 8000d1a:	f012 fee3 	bl	8013ae4 <f_read>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	f241 026f 	movw	r2, #4207	; 0x106f
 8000d24:	443a      	add	r2, r7
 8000d26:	7013      	strb	r3, [r2, #0]
    	if(readBuff[0]=='1'){flag++;}
 8000d28:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <leggi+0x98>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b31      	cmp	r3, #49	; 0x31
 8000d2e:	d105      	bne.n	8000d3c <leggi+0x68>
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <leggi+0x9c>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	3301      	adds	r3, #1
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <leggi+0x9c>)
 8000d3a:	701a      	strb	r2, [r3, #0]
    	res = f_close(&readFile);
 8000d3c:	f107 0310 	add.w	r3, r7, #16
 8000d40:	4618      	mov	r0, r3
 8000d42:	f013 fb9a 	bl	801447a <f_close>
 8000d46:	4603      	mov	r3, r0
 8000d48:	f241 026f 	movw	r2, #4207	; 0x106f
 8000d4c:	443a      	add	r2, r7
 8000d4e:	7013      	strb	r3, [r2, #0]





    	}
 8000d50:	bf00      	nop
 8000d52:	4618      	mov	r0, r3
 8000d54:	f507 5783 	add.w	r7, r7, #4192	; 0x1060
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	ffffef90 	.word	0xffffef90
 8000d64:	0801587c 	.word	0x0801587c
 8000d68:	240014d4 	.word	0x240014d4
 8000d6c:	240013d0 	.word	0x240013d0
 8000d70:	24000278 	.word	0x24000278

08000d74 <scrivi_speed>:
FRESULT scrivi_speed(){
 8000d74:	b590      	push	{r4, r7, lr}
 8000d76:	b087      	sub	sp, #28
 8000d78:	af04      	add	r7, sp, #16
	   /* File system object for USER logical drive */
	//FIL USERFile;     /* File  object for USER */



		HAL_RTC_GetTime(&hrtc, &stimeststuctureget, RTC_FORMAT_BIN);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	4917      	ldr	r1, [pc, #92]	; (8000ddc <scrivi_speed+0x68>)
 8000d7e:	4818      	ldr	r0, [pc, #96]	; (8000de0 <scrivi_speed+0x6c>)
 8000d80:	f005 fd44 	bl	800680c <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &Data, RTC_FORMAT_BIN);
 8000d84:	2200      	movs	r2, #0
 8000d86:	4917      	ldr	r1, [pc, #92]	; (8000de4 <scrivi_speed+0x70>)
 8000d88:	4815      	ldr	r0, [pc, #84]	; (8000de0 <scrivi_speed+0x6c>)
 8000d8a:	f005 fe49 	bl	8006a20 <HAL_RTC_GetDate>
		Time[0] = stimeststuctureget.Hours;
 8000d8e:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <scrivi_speed+0x68>)
 8000d90:	781a      	ldrb	r2, [r3, #0]
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <scrivi_speed+0x74>)
 8000d94:	701a      	strb	r2, [r3, #0]
		Time[1] = stimeststuctureget.Minutes;
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <scrivi_speed+0x68>)
 8000d98:	785a      	ldrb	r2, [r3, #1]
 8000d9a:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <scrivi_speed+0x74>)
 8000d9c:	705a      	strb	r2, [r3, #1]
		Time[2] = stimeststuctureget.Seconds;
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <scrivi_speed+0x68>)
 8000da0:	789a      	ldrb	r2, [r3, #2]
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <scrivi_speed+0x74>)
 8000da4:	709a      	strb	r2, [r3, #2]

	f_printf(&writeFile,"%d:%d.%d,%d,%d\n",Time[0],Time[1],Time[2],curr,indox);
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <scrivi_speed+0x74>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	4618      	mov	r0, r3
 8000dac:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <scrivi_speed+0x74>)
 8000dae:	785b      	ldrb	r3, [r3, #1]
 8000db0:	461c      	mov	r4, r3
 8000db2:	4b0d      	ldr	r3, [pc, #52]	; (8000de8 <scrivi_speed+0x74>)
 8000db4:	789b      	ldrb	r3, [r3, #2]
 8000db6:	4619      	mov	r1, r3
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <scrivi_speed+0x78>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a0c      	ldr	r2, [pc, #48]	; (8000df0 <scrivi_speed+0x7c>)
 8000dbe:	6812      	ldr	r2, [r2, #0]
 8000dc0:	9202      	str	r2, [sp, #8]
 8000dc2:	9301      	str	r3, [sp, #4]
 8000dc4:	9100      	str	r1, [sp, #0]
 8000dc6:	4623      	mov	r3, r4
 8000dc8:	4602      	mov	r2, r0
 8000dca:	490a      	ldr	r1, [pc, #40]	; (8000df4 <scrivi_speed+0x80>)
 8000dcc:	480a      	ldr	r0, [pc, #40]	; (8000df8 <scrivi_speed+0x84>)
 8000dce:	f013 fbf7 	bl	80145c0 <f_printf>


	return res;
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd90      	pop	{r4, r7, pc}
 8000ddc:	240056bc 	.word	0x240056bc
 8000de0:	240045a0 	.word	0x240045a0
 8000de4:	2400459c 	.word	0x2400459c
 8000de8:	240045d0 	.word	0x240045d0
 8000dec:	24002530 	.word	0x24002530
 8000df0:	24000274 	.word	0x24000274
 8000df4:	08015860 	.word	0x08015860
 8000df8:	240014d8 	.word	0x240014d8

08000dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
	...

08000e0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e12:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <HAL_MspInit+0x30>)
 8000e14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e18:	4a08      	ldr	r2, [pc, #32]	; (8000e3c <HAL_MspInit+0x30>)
 8000e1a:	f043 0302 	orr.w	r3, r3, #2
 8000e1e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_MspInit+0x30>)
 8000e24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e28:	f003 0302 	and.w	r3, r3, #2
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	58024400 	.word	0x58024400

08000e40 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08e      	sub	sp, #56	; 0x38
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a59      	ldr	r2, [pc, #356]	; (8000fc4 <HAL_ETH_MspInit+0x184>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	f040 80ab 	bne.w	8000fba <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000e64:	4b58      	ldr	r3, [pc, #352]	; (8000fc8 <HAL_ETH_MspInit+0x188>)
 8000e66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e6a:	4a57      	ldr	r2, [pc, #348]	; (8000fc8 <HAL_ETH_MspInit+0x188>)
 8000e6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e70:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e74:	4b54      	ldr	r3, [pc, #336]	; (8000fc8 <HAL_ETH_MspInit+0x188>)
 8000e76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e7e:	623b      	str	r3, [r7, #32]
 8000e80:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000e82:	4b51      	ldr	r3, [pc, #324]	; (8000fc8 <HAL_ETH_MspInit+0x188>)
 8000e84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e88:	4a4f      	ldr	r2, [pc, #316]	; (8000fc8 <HAL_ETH_MspInit+0x188>)
 8000e8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e8e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e92:	4b4d      	ldr	r3, [pc, #308]	; (8000fc8 <HAL_ETH_MspInit+0x188>)
 8000e94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e9c:	61fb      	str	r3, [r7, #28]
 8000e9e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000ea0:	4b49      	ldr	r3, [pc, #292]	; (8000fc8 <HAL_ETH_MspInit+0x188>)
 8000ea2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ea6:	4a48      	ldr	r2, [pc, #288]	; (8000fc8 <HAL_ETH_MspInit+0x188>)
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000eb0:	4b45      	ldr	r3, [pc, #276]	; (8000fc8 <HAL_ETH_MspInit+0x188>)
 8000eb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eba:	61bb      	str	r3, [r7, #24]
 8000ebc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ebe:	4b42      	ldr	r3, [pc, #264]	; (8000fc8 <HAL_ETH_MspInit+0x188>)
 8000ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec4:	4a40      	ldr	r2, [pc, #256]	; (8000fc8 <HAL_ETH_MspInit+0x188>)
 8000ec6:	f043 0304 	orr.w	r3, r3, #4
 8000eca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ece:	4b3e      	ldr	r3, [pc, #248]	; (8000fc8 <HAL_ETH_MspInit+0x188>)
 8000ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed4:	f003 0304 	and.w	r3, r3, #4
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000edc:	4b3a      	ldr	r3, [pc, #232]	; (8000fc8 <HAL_ETH_MspInit+0x188>)
 8000ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee2:	4a39      	ldr	r2, [pc, #228]	; (8000fc8 <HAL_ETH_MspInit+0x188>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eec:	4b36      	ldr	r3, [pc, #216]	; (8000fc8 <HAL_ETH_MspInit+0x188>)
 8000eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efa:	4b33      	ldr	r3, [pc, #204]	; (8000fc8 <HAL_ETH_MspInit+0x188>)
 8000efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f00:	4a31      	ldr	r2, [pc, #196]	; (8000fc8 <HAL_ETH_MspInit+0x188>)
 8000f02:	f043 0302 	orr.w	r3, r3, #2
 8000f06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f0a:	4b2f      	ldr	r3, [pc, #188]	; (8000fc8 <HAL_ETH_MspInit+0x188>)
 8000f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f18:	4b2b      	ldr	r3, [pc, #172]	; (8000fc8 <HAL_ETH_MspInit+0x188>)
 8000f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1e:	4a2a      	ldr	r2, [pc, #168]	; (8000fc8 <HAL_ETH_MspInit+0x188>)
 8000f20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f28:	4b27      	ldr	r3, [pc, #156]	; (8000fc8 <HAL_ETH_MspInit+0x188>)
 8000f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f36:	2332      	movs	r3, #50	; 0x32
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2300      	movs	r3, #0
 8000f44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f46:	230b      	movs	r3, #11
 8000f48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4e:	4619      	mov	r1, r3
 8000f50:	481e      	ldr	r0, [pc, #120]	; (8000fcc <HAL_ETH_MspInit+0x18c>)
 8000f52:	f001 f847 	bl	8001fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f56:	2386      	movs	r3, #134	; 0x86
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	2300      	movs	r3, #0
 8000f64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f66:	230b      	movs	r3, #11
 8000f68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4817      	ldr	r0, [pc, #92]	; (8000fd0 <HAL_ETH_MspInit+0x190>)
 8000f72:	f001 f837 	bl	8001fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f84:	2300      	movs	r3, #0
 8000f86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f88:	230b      	movs	r3, #11
 8000f8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f90:	4619      	mov	r1, r3
 8000f92:	4810      	ldr	r0, [pc, #64]	; (8000fd4 <HAL_ETH_MspInit+0x194>)
 8000f94:	f001 f826 	bl	8001fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f98:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000faa:	230b      	movs	r3, #11
 8000fac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4808      	ldr	r0, [pc, #32]	; (8000fd8 <HAL_ETH_MspInit+0x198>)
 8000fb6:	f001 f815 	bl	8001fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000fba:	bf00      	nop
 8000fbc:	3738      	adds	r7, #56	; 0x38
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40028000 	.word	0x40028000
 8000fc8:	58024400 	.word	0x58024400
 8000fcc:	58020800 	.word	0x58020800
 8000fd0:	58020000 	.word	0x58020000
 8000fd4:	58020400 	.word	0x58020400
 8000fd8:	58021800 	.word	0x58021800

08000fdc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a07      	ldr	r2, [pc, #28]	; (8001008 <HAL_RTC_MspInit+0x2c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d105      	bne.n	8000ffa <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000fee:	4b07      	ldr	r3, [pc, #28]	; (800100c <HAL_RTC_MspInit+0x30>)
 8000ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ff2:	4a06      	ldr	r2, [pc, #24]	; (800100c <HAL_RTC_MspInit+0x30>)
 8000ff4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ff8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	58004000 	.word	0x58004000
 800100c:	58024400 	.word	0x58024400

08001010 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	; 0x28
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a32      	ldr	r2, [pc, #200]	; (80010f8 <HAL_SD_MspInit+0xe8>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d15e      	bne.n	80010f0 <HAL_SD_MspInit+0xe0>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001032:	4b32      	ldr	r3, [pc, #200]	; (80010fc <HAL_SD_MspInit+0xec>)
 8001034:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001038:	4a30      	ldr	r2, [pc, #192]	; (80010fc <HAL_SD_MspInit+0xec>)
 800103a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800103e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001042:	4b2e      	ldr	r3, [pc, #184]	; (80010fc <HAL_SD_MspInit+0xec>)
 8001044:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001050:	4b2a      	ldr	r3, [pc, #168]	; (80010fc <HAL_SD_MspInit+0xec>)
 8001052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001056:	4a29      	ldr	r2, [pc, #164]	; (80010fc <HAL_SD_MspInit+0xec>)
 8001058:	f043 0304 	orr.w	r3, r3, #4
 800105c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001060:	4b26      	ldr	r3, [pc, #152]	; (80010fc <HAL_SD_MspInit+0xec>)
 8001062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001066:	f003 0304 	and.w	r3, r3, #4
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800106e:	4b23      	ldr	r3, [pc, #140]	; (80010fc <HAL_SD_MspInit+0xec>)
 8001070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001074:	4a21      	ldr	r2, [pc, #132]	; (80010fc <HAL_SD_MspInit+0xec>)
 8001076:	f043 0308 	orr.w	r3, r3, #8
 800107a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800107e:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <HAL_SD_MspInit+0xec>)
 8001080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001084:	f003 0308 	and.w	r3, r3, #8
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration    
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800108c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001096:	2301      	movs	r3, #1
 8001098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109a:	2303      	movs	r3, #3
 800109c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800109e:	230c      	movs	r3, #12
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	4619      	mov	r1, r3
 80010a8:	4815      	ldr	r0, [pc, #84]	; (8001100 <HAL_SD_MspInit+0xf0>)
 80010aa:	f000 ff9b 	bl	8001fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80010ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010bc:	2303      	movs	r3, #3
 80010be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80010c0:	230c      	movs	r3, #12
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	4619      	mov	r1, r3
 80010ca:	480d      	ldr	r0, [pc, #52]	; (8001100 <HAL_SD_MspInit+0xf0>)
 80010cc:	f000 ff8a 	bl	8001fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010d0:	2304      	movs	r3, #4
 80010d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d8:	2301      	movs	r3, #1
 80010da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010dc:	2303      	movs	r3, #3
 80010de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80010e0:	230c      	movs	r3, #12
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	4619      	mov	r1, r3
 80010ea:	4806      	ldr	r0, [pc, #24]	; (8001104 <HAL_SD_MspInit+0xf4>)
 80010ec:	f000 ff7a 	bl	8001fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80010f0:	bf00      	nop
 80010f2:	3728      	adds	r7, #40	; 0x28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	52007000 	.word	0x52007000
 80010fc:	58024400 	.word	0x58024400
 8001100:	58020800 	.word	0x58020800
 8001104:	58020c00 	.word	0x58020c00

08001108 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a0e      	ldr	r2, [pc, #56]	; (8001150 <HAL_TIM_Base_MspInit+0x48>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d116      	bne.n	8001148 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <HAL_TIM_Base_MspInit+0x4c>)
 800111c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001120:	4a0c      	ldr	r2, [pc, #48]	; (8001154 <HAL_TIM_Base_MspInit+0x4c>)
 8001122:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001126:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800112a:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <HAL_TIM_Base_MspInit+0x4c>)
 800112c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001130:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8001138:	2200      	movs	r2, #0
 800113a:	2100      	movs	r1, #0
 800113c:	2076      	movs	r0, #118	; 0x76
 800113e:	f000 fb06 	bl	800174e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001142:	2076      	movs	r0, #118	; 0x76
 8001144:	f000 fb1d 	bl	8001782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001148:	bf00      	nop
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40014800 	.word	0x40014800
 8001154:	58024400 	.word	0x58024400

08001158 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	; 0x28
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a1a      	ldr	r2, [pc, #104]	; (80011e0 <HAL_UART_MspInit+0x88>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d12e      	bne.n	80011d8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800117a:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <HAL_UART_MspInit+0x8c>)
 800117c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001180:	4a18      	ldr	r2, [pc, #96]	; (80011e4 <HAL_UART_MspInit+0x8c>)
 8001182:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001186:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800118a:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <HAL_UART_MspInit+0x8c>)
 800118c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001190:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <HAL_UART_MspInit+0x8c>)
 800119a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800119e:	4a11      	ldr	r2, [pc, #68]	; (80011e4 <HAL_UART_MspInit+0x8c>)
 80011a0:	f043 0308 	orr.w	r3, r3, #8
 80011a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011a8:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <HAL_UART_MspInit+0x8c>)
 80011aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ae:	f003 0308 	and.w	r3, r3, #8
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80011b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011c8:	2307      	movs	r3, #7
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	4619      	mov	r1, r3
 80011d2:	4805      	ldr	r0, [pc, #20]	; (80011e8 <HAL_UART_MspInit+0x90>)
 80011d4:	f000 ff06 	bl	8001fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011d8:	bf00      	nop
 80011da:	3728      	adds	r7, #40	; 0x28
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40004800 	.word	0x40004800
 80011e4:	58024400 	.word	0x58024400
 80011e8:	58020c00 	.word	0x58020c00

080011ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fe:	e7fe      	b.n	80011fe <HardFault_Handler+0x4>

08001200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <MemManage_Handler+0x4>

08001206 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120a:	e7fe      	b.n	800120a <BusFault_Handler+0x4>

0800120c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <UsageFault_Handler+0x4>

08001212 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001240:	f000 f948 	bl	80014d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}

08001248 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800124c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001250:	f001 f8c4 	bl	80023dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}

08001258 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800125c:	4802      	ldr	r0, [pc, #8]	; (8001268 <OTG_FS_IRQHandler+0x10>)
 800125e:	f001 fa69 	bl	8002734 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	24007c38 	.word	0x24007c38

0800126c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <TIM17_IRQHandler+0x10>)
 8001272:	f007 f8e4 	bl	800843e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	24001494 	.word	0x24001494

08001280 <_sbrk>:
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <_sbrk+0x50>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d102      	bne.n	8001296 <_sbrk+0x16>
 8001290:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <_sbrk+0x50>)
 8001292:	4a10      	ldr	r2, [pc, #64]	; (80012d4 <_sbrk+0x54>)
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <_sbrk+0x50>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <_sbrk+0x50>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4413      	add	r3, r2
 80012a4:	466a      	mov	r2, sp
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d907      	bls.n	80012ba <_sbrk+0x3a>
 80012aa:	f014 f9d1 	bl	8015650 <__errno>
 80012ae:	4602      	mov	r2, r0
 80012b0:	230c      	movs	r3, #12
 80012b2:	6013      	str	r3, [r2, #0]
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295
 80012b8:	e006      	b.n	80012c8 <_sbrk+0x48>
 80012ba:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <_sbrk+0x50>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	4a03      	ldr	r2, [pc, #12]	; (80012d0 <_sbrk+0x50>)
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4618      	mov	r0, r3
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	2400027c 	.word	0x2400027c
 80012d4:	24008048 	.word	0x24008048

080012d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012dc:	4b29      	ldr	r3, [pc, #164]	; (8001384 <SystemInit+0xac>)
 80012de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012e2:	4a28      	ldr	r2, [pc, #160]	; (8001384 <SystemInit+0xac>)
 80012e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80012ec:	4b26      	ldr	r3, [pc, #152]	; (8001388 <SystemInit+0xb0>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a25      	ldr	r2, [pc, #148]	; (8001388 <SystemInit+0xb0>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012f8:	4b23      	ldr	r3, [pc, #140]	; (8001388 <SystemInit+0xb0>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80012fe:	4b22      	ldr	r3, [pc, #136]	; (8001388 <SystemInit+0xb0>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	4921      	ldr	r1, [pc, #132]	; (8001388 <SystemInit+0xb0>)
 8001304:	4b21      	ldr	r3, [pc, #132]	; (800138c <SystemInit+0xb4>)
 8001306:	4013      	ands	r3, r2
 8001308:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800130a:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <SystemInit+0xb0>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001310:	4b1d      	ldr	r3, [pc, #116]	; (8001388 <SystemInit+0xb0>)
 8001312:	2200      	movs	r2, #0
 8001314:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001316:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <SystemInit+0xb0>)
 8001318:	2200      	movs	r2, #0
 800131a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800131c:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <SystemInit+0xb0>)
 800131e:	2200      	movs	r2, #0
 8001320:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8001322:	4b19      	ldr	r3, [pc, #100]	; (8001388 <SystemInit+0xb0>)
 8001324:	2200      	movs	r2, #0
 8001326:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001328:	4b17      	ldr	r3, [pc, #92]	; (8001388 <SystemInit+0xb0>)
 800132a:	2200      	movs	r2, #0
 800132c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800132e:	4b16      	ldr	r3, [pc, #88]	; (8001388 <SystemInit+0xb0>)
 8001330:	2200      	movs	r2, #0
 8001332:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001334:	4b14      	ldr	r3, [pc, #80]	; (8001388 <SystemInit+0xb0>)
 8001336:	2200      	movs	r2, #0
 8001338:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800133a:	4b13      	ldr	r3, [pc, #76]	; (8001388 <SystemInit+0xb0>)
 800133c:	2200      	movs	r2, #0
 800133e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <SystemInit+0xb0>)
 8001342:	2200      	movs	r2, #0
 8001344:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <SystemInit+0xb0>)
 8001348:	2200      	movs	r2, #0
 800134a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800134c:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <SystemInit+0xb0>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a0d      	ldr	r2, [pc, #52]	; (8001388 <SystemInit+0xb0>)
 8001352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001356:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001358:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <SystemInit+0xb0>)
 800135a:	2200      	movs	r2, #0
 800135c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <SystemInit+0xb8>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <SystemInit+0xbc>)
 8001364:	4013      	ands	r3, r2
 8001366:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800136a:	d202      	bcs.n	8001372 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800136c:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <SystemInit+0xc0>)
 800136e:	2201      	movs	r2, #1
 8001370:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001372:	4b04      	ldr	r3, [pc, #16]	; (8001384 <SystemInit+0xac>)
 8001374:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001378:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000ed00 	.word	0xe000ed00
 8001388:	58024400 	.word	0x58024400
 800138c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001390:	5c001000 	.word	0x5c001000
 8001394:	ffff0000 	.word	0xffff0000
 8001398:	51008108 	.word	0x51008108

0800139c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800139c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80013a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80013a2:	e003      	b.n	80013ac <LoopCopyDataInit>

080013a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80013a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80013a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80013aa:	3104      	adds	r1, #4

080013ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80013ac:	480b      	ldr	r0, [pc, #44]	; (80013dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80013b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80013b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80013b4:	d3f6      	bcc.n	80013a4 <CopyDataInit>
  ldr  r2, =_sbss
 80013b6:	4a0b      	ldr	r2, [pc, #44]	; (80013e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80013b8:	e002      	b.n	80013c0 <LoopFillZerobss>

080013ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80013ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80013bc:	f842 3b04 	str.w	r3, [r2], #4

080013c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80013c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80013c4:	d3f9      	bcc.n	80013ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013c6:	f7ff ff87 	bl	80012d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ca:	f014 f947 	bl	801565c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ce:	f7ff f903 	bl	80005d8 <main>
  bx  lr    
 80013d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013d4:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80013d8:	08015de0 	.word	0x08015de0
  ldr  r0, =_sdata
 80013dc:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80013e0:	24000194 	.word	0x24000194
  ldr  r2, =_sbss
 80013e4:	24000258 	.word	0x24000258
  ldr  r3, = _ebss
 80013e8:	24008044 	.word	0x24008044

080013ec <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013ec:	e7fe      	b.n	80013ec <ADC3_IRQHandler>
	...

080013f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f6:	2003      	movs	r0, #3
 80013f8:	f000 f99e 	bl	8001738 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013fc:	f003 f824 	bl	8004448 <HAL_RCC_GetSysClockFreq>
 8001400:	4601      	mov	r1, r0
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <HAL_Init+0x68>)
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	0a1b      	lsrs	r3, r3, #8
 8001408:	f003 030f 	and.w	r3, r3, #15
 800140c:	4a13      	ldr	r2, [pc, #76]	; (800145c <HAL_Init+0x6c>)
 800140e:	5cd3      	ldrb	r3, [r2, r3]
 8001410:	f003 031f 	and.w	r3, r3, #31
 8001414:	fa21 f303 	lsr.w	r3, r1, r3
 8001418:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800141a:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <HAL_Init+0x68>)
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	f003 030f 	and.w	r3, r3, #15
 8001422:	4a0e      	ldr	r2, [pc, #56]	; (800145c <HAL_Init+0x6c>)
 8001424:	5cd3      	ldrb	r3, [r2, r3]
 8001426:	f003 031f 	and.w	r3, r3, #31
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	fa22 f303 	lsr.w	r3, r2, r3
 8001430:	4a0b      	ldr	r2, [pc, #44]	; (8001460 <HAL_Init+0x70>)
 8001432:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001434:	4a0b      	ldr	r2, [pc, #44]	; (8001464 <HAL_Init+0x74>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800143a:	2000      	movs	r0, #0
 800143c:	f000 f814 	bl	8001468 <HAL_InitTick>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e002      	b.n	8001450 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800144a:	f7ff fcdf 	bl	8000e0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	58024400 	.word	0x58024400
 800145c:	08015930 	.word	0x08015930
 8001460:	24000010 	.word	0x24000010
 8001464:	2400000c 	.word	0x2400000c

08001468 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001470:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <HAL_InitTick+0x60>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d101      	bne.n	800147c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e021      	b.n	80014c0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800147c:	4b13      	ldr	r3, [pc, #76]	; (80014cc <HAL_InitTick+0x64>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <HAL_InitTick+0x60>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	4619      	mov	r1, r3
 8001486:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800148a:	fbb3 f3f1 	udiv	r3, r3, r1
 800148e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001492:	4618      	mov	r0, r3
 8001494:	f000 f983 	bl	800179e <HAL_SYSTICK_Config>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e00e      	b.n	80014c0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b0f      	cmp	r3, #15
 80014a6:	d80a      	bhi.n	80014be <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a8:	2200      	movs	r2, #0
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	f04f 30ff 	mov.w	r0, #4294967295
 80014b0:	f000 f94d 	bl	800174e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b4:	4a06      	ldr	r2, [pc, #24]	; (80014d0 <HAL_InitTick+0x68>)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ba:	2300      	movs	r3, #0
 80014bc:	e000      	b.n	80014c0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	24000018 	.word	0x24000018
 80014cc:	2400000c 	.word	0x2400000c
 80014d0:	24000014 	.word	0x24000014

080014d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_IncTick+0x20>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	461a      	mov	r2, r3
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <HAL_IncTick+0x24>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4413      	add	r3, r2
 80014e4:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <HAL_IncTick+0x24>)
 80014e6:	6013      	str	r3, [r2, #0]
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	24000018 	.word	0x24000018
 80014f8:	240056d0 	.word	0x240056d0

080014fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001500:	4b03      	ldr	r3, [pc, #12]	; (8001510 <HAL_GetTick+0x14>)
 8001502:	681b      	ldr	r3, [r3, #0]
}
 8001504:	4618      	mov	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	240056d0 	.word	0x240056d0

08001514 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800151c:	f7ff ffee 	bl	80014fc <HAL_GetTick>
 8001520:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800152c:	d005      	beq.n	800153a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800152e:	4b09      	ldr	r3, [pc, #36]	; (8001554 <HAL_Delay+0x40>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	461a      	mov	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4413      	add	r3, r2
 8001538:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800153a:	bf00      	nop
 800153c:	f7ff ffde 	bl	80014fc <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	429a      	cmp	r2, r3
 800154a:	d8f7      	bhi.n	800153c <HAL_Delay+0x28>
  {
  }
}
 800154c:	bf00      	nop
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	24000018 	.word	0x24000018

08001558 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800155c:	4b03      	ldr	r3, [pc, #12]	; (800156c <HAL_GetREVID+0x14>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	0c1b      	lsrs	r3, r3, #16
}
 8001562:	4618      	mov	r0, r3
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	5c001000 	.word	0x5c001000

08001570 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001580:	4904      	ldr	r1, [pc, #16]	; (8001594 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4313      	orrs	r3, r2
 8001586:	604b      	str	r3, [r1, #4]
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	58000400 	.word	0x58000400

08001598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <__NVIC_SetPriorityGrouping+0x40>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015b4:	4013      	ands	r3, r2
 80015b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <__NVIC_SetPriorityGrouping+0x44>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015c6:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <__NVIC_SetPriorityGrouping+0x40>)
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	60d3      	str	r3, [r2, #12]
}
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000ed00 	.word	0xe000ed00
 80015dc:	05fa0000 	.word	0x05fa0000

080015e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e4:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <__NVIC_GetPriorityGrouping+0x18>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	0a1b      	lsrs	r3, r3, #8
 80015ea:	f003 0307 	and.w	r3, r3, #7
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800160a:	2b00      	cmp	r3, #0
 800160c:	db0b      	blt.n	8001626 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800160e:	88fb      	ldrh	r3, [r7, #6]
 8001610:	f003 021f 	and.w	r2, r3, #31
 8001614:	4907      	ldr	r1, [pc, #28]	; (8001634 <__NVIC_EnableIRQ+0x38>)
 8001616:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800161a:	095b      	lsrs	r3, r3, #5
 800161c:	2001      	movs	r0, #1
 800161e:	fa00 f202 	lsl.w	r2, r0, r2
 8001622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000e100 	.word	0xe000e100

08001638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	6039      	str	r1, [r7, #0]
 8001642:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001644:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001648:	2b00      	cmp	r3, #0
 800164a:	db0a      	blt.n	8001662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	b2da      	uxtb	r2, r3
 8001650:	490c      	ldr	r1, [pc, #48]	; (8001684 <__NVIC_SetPriority+0x4c>)
 8001652:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001656:	0112      	lsls	r2, r2, #4
 8001658:	b2d2      	uxtb	r2, r2
 800165a:	440b      	add	r3, r1
 800165c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001660:	e00a      	b.n	8001678 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4908      	ldr	r1, [pc, #32]	; (8001688 <__NVIC_SetPriority+0x50>)
 8001668:	88fb      	ldrh	r3, [r7, #6]
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	3b04      	subs	r3, #4
 8001670:	0112      	lsls	r2, r2, #4
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	440b      	add	r3, r1
 8001676:	761a      	strb	r2, [r3, #24]
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	e000e100 	.word	0xe000e100
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800168c:	b480      	push	{r7}
 800168e:	b089      	sub	sp, #36	; 0x24
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f1c3 0307 	rsb	r3, r3, #7
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	bf28      	it	cs
 80016aa:	2304      	movcs	r3, #4
 80016ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3304      	adds	r3, #4
 80016b2:	2b06      	cmp	r3, #6
 80016b4:	d902      	bls.n	80016bc <NVIC_EncodePriority+0x30>
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3b03      	subs	r3, #3
 80016ba:	e000      	b.n	80016be <NVIC_EncodePriority+0x32>
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c0:	f04f 32ff 	mov.w	r2, #4294967295
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43da      	mvns	r2, r3
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	401a      	ands	r2, r3
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d4:	f04f 31ff 	mov.w	r1, #4294967295
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	fa01 f303 	lsl.w	r3, r1, r3
 80016de:	43d9      	mvns	r1, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e4:	4313      	orrs	r3, r2
         );
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3724      	adds	r7, #36	; 0x24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
	...

080016f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3b01      	subs	r3, #1
 8001700:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001704:	d301      	bcc.n	800170a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001706:	2301      	movs	r3, #1
 8001708:	e00f      	b.n	800172a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800170a:	4a0a      	ldr	r2, [pc, #40]	; (8001734 <SysTick_Config+0x40>)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3b01      	subs	r3, #1
 8001710:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001712:	210f      	movs	r1, #15
 8001714:	f04f 30ff 	mov.w	r0, #4294967295
 8001718:	f7ff ff8e 	bl	8001638 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800171c:	4b05      	ldr	r3, [pc, #20]	; (8001734 <SysTick_Config+0x40>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001722:	4b04      	ldr	r3, [pc, #16]	; (8001734 <SysTick_Config+0x40>)
 8001724:	2207      	movs	r2, #7
 8001726:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	e000e010 	.word	0xe000e010

08001738 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff ff29 	bl	8001598 <__NVIC_SetPriorityGrouping>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b086      	sub	sp, #24
 8001752:	af00      	add	r7, sp, #0
 8001754:	4603      	mov	r3, r0
 8001756:	60b9      	str	r1, [r7, #8]
 8001758:	607a      	str	r2, [r7, #4]
 800175a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800175c:	f7ff ff40 	bl	80015e0 <__NVIC_GetPriorityGrouping>
 8001760:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	68b9      	ldr	r1, [r7, #8]
 8001766:	6978      	ldr	r0, [r7, #20]
 8001768:	f7ff ff90 	bl	800168c <NVIC_EncodePriority>
 800176c:	4602      	mov	r2, r0
 800176e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001772:	4611      	mov	r1, r2
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff5f 	bl	8001638 <__NVIC_SetPriority>
}
 800177a:	bf00      	nop
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800178c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff ff33 	bl	80015fc <__NVIC_EnableIRQ>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff ffa4 	bl	80016f4 <SysTick_Config>
 80017ac:	4603      	mov	r3, r0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e0c6      	b.n	8001958 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d102      	bne.n	80017d8 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff fb34 	bl	8000e40 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2223      	movs	r2, #35	; 0x23
 80017dc:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017de:	4b60      	ldr	r3, [pc, #384]	; (8001960 <HAL_ETH_Init+0x1a8>)
 80017e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017e4:	4a5e      	ldr	r2, [pc, #376]	; (8001960 <HAL_ETH_Init+0x1a8>)
 80017e6:	f043 0302 	orr.w	r3, r3, #2
 80017ea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80017ee:	4b5c      	ldr	r3, [pc, #368]	; (8001960 <HAL_ETH_Init+0x1a8>)
 80017f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	7a1b      	ldrb	r3, [r3, #8]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d103      	bne.n	800180c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001804:	2000      	movs	r0, #0
 8001806:	f7ff feb3 	bl	8001570 <HAL_SYSCFG_ETHInterfaceSelect>
 800180a:	e003      	b.n	8001814 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800180c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001810:	f7ff feae 	bl	8001570 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f042 0201 	orr.w	r2, r2, #1
 8001826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800182a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800182c:	f7ff fe66 	bl	80014fc <HAL_GetTick>
 8001830:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001832:	e00f      	b.n	8001854 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001834:	f7ff fe62 	bl	80014fc <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001842:	d907      	bls.n	8001854 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2204      	movs	r2, #4
 8001848:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	22e0      	movs	r2, #224	; 0xe0
 800184e:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e081      	b.n	8001958 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1e6      	bne.n	8001834 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 fac0 	bl	8001dec <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800186c:	f002 ff5e 	bl	800472c <HAL_RCC_GetHCLKFreq>
 8001870:	4602      	mov	r2, r0
 8001872:	4b3c      	ldr	r3, [pc, #240]	; (8001964 <HAL_ETH_Init+0x1ac>)
 8001874:	fba3 2302 	umull	r2, r3, r3, r2
 8001878:	0c9a      	lsrs	r2, r3, #18
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	3a01      	subs	r2, #1
 8001880:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 fa13 	bl	8001cb0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80018a0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80018a4:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	f003 0303 	and.w	r3, r3, #3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d007      	beq.n	80018c2 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2201      	movs	r2, #1
 80018b6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	22e0      	movs	r2, #224	; 0xe0
 80018bc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e04a      	b.n	8001958 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	f241 1308 	movw	r3, #4360	; 0x1108
 80018ca:	4413      	add	r3, r2
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	4b26      	ldr	r3, [pc, #152]	; (8001968 <HAL_ETH_Init+0x1b0>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	6952      	ldr	r2, [r2, #20]
 80018d6:	0052      	lsls	r2, r2, #1
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	6809      	ldr	r1, [r1, #0]
 80018dc:	431a      	orrs	r2, r3
 80018de:	f241 1308 	movw	r3, #4360	; 0x1108
 80018e2:	440b      	add	r3, r1
 80018e4:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 fad8 	bl	8001e9c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 fb1c 	bl	8001f2a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	3305      	adds	r3, #5
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	021a      	lsls	r2, r3, #8
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	3304      	adds	r3, #4
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	4619      	mov	r1, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	3303      	adds	r3, #3
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	061a      	lsls	r2, r3, #24
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	3302      	adds	r3, #2
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	041b      	lsls	r3, r3, #16
 8001924:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	3301      	adds	r3, #1
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001930:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800193e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001940:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2210      	movs	r2, #16
 800194e:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2210      	movs	r2, #16
 8001954:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	58024400 	.word	0x58024400
 8001964:	431bde83 	.word	0x431bde83
 8001968:	ffff8001 	.word	0xffff8001

0800196c <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800197e:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	791b      	ldrb	r3, [r3, #4]
 8001984:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001986:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	7b1b      	ldrb	r3, [r3, #12]
 800198c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800198e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	7b5b      	ldrb	r3, [r3, #13]
 8001994:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001996:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	7b9b      	ldrb	r3, [r3, #14]
 800199c:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800199e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	7bdb      	ldrb	r3, [r3, #15]
 80019a4:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80019a6:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	7c12      	ldrb	r2, [r2, #16]
 80019ac:	2a00      	cmp	r2, #0
 80019ae:	d102      	bne.n	80019b6 <ETH_SetMACConfig+0x4a>
 80019b0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80019b4:	e000      	b.n	80019b8 <ETH_SetMACConfig+0x4c>
 80019b6:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80019b8:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	7c52      	ldrb	r2, [r2, #17]
 80019be:	2a00      	cmp	r2, #0
 80019c0:	d102      	bne.n	80019c8 <ETH_SetMACConfig+0x5c>
 80019c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019c6:	e000      	b.n	80019ca <ETH_SetMACConfig+0x5e>
 80019c8:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80019ca:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	7c9b      	ldrb	r3, [r3, #18]
 80019d0:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80019d2:	431a      	orrs	r2, r3
                                macconf->Speed |
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80019d8:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80019de:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	7f1b      	ldrb	r3, [r3, #28]
 80019e4:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80019e6:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	7f5b      	ldrb	r3, [r3, #29]
 80019ec:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80019ee:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	7f92      	ldrb	r2, [r2, #30]
 80019f4:	2a00      	cmp	r2, #0
 80019f6:	d102      	bne.n	80019fe <ETH_SetMACConfig+0x92>
 80019f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019fc:	e000      	b.n	8001a00 <ETH_SetMACConfig+0x94>
 80019fe:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001a00:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	7fdb      	ldrb	r3, [r3, #31]
 8001a06:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001a08:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001a10:	2a00      	cmp	r2, #0
 8001a12:	d102      	bne.n	8001a1a <ETH_SetMACConfig+0xae>
 8001a14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a18:	e000      	b.n	8001a1c <ETH_SetMACConfig+0xb0>
 8001a1a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001a1c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001a22:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001a2a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001a2c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8001a32:	4313      	orrs	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b56      	ldr	r3, [pc, #344]	; (8001b98 <ETH_SetMACConfig+0x22c>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6812      	ldr	r2, [r2, #0]
 8001a44:	68f9      	ldr	r1, [r7, #12]
 8001a46:	430b      	orrs	r3, r1
 8001a48:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a4e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a56:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001a58:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a60:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001a62:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001a6a:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001a6c:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001a74:	2a00      	cmp	r2, #0
 8001a76:	d102      	bne.n	8001a7e <ETH_SetMACConfig+0x112>
 8001a78:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a7c:	e000      	b.n	8001a80 <ETH_SetMACConfig+0x114>
 8001a7e:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001a80:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001a86:	4313      	orrs	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	4b42      	ldr	r3, [pc, #264]	; (8001b9c <ETH_SetMACConfig+0x230>)
 8001a92:	4013      	ands	r3, r2
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	6812      	ldr	r2, [r2, #0]
 8001a98:	68f9      	ldr	r1, [r7, #12]
 8001a9a:	430b      	orrs	r3, r1
 8001a9c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001aa4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68da      	ldr	r2, [r3, #12]
 8001ab4:	4b3a      	ldr	r3, [pc, #232]	; (8001ba0 <ETH_SetMACConfig+0x234>)
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	68f9      	ldr	r1, [r7, #12]
 8001abe:	430b      	orrs	r3, r1
 8001ac0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001ac8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001ace:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001ad6:	2a00      	cmp	r2, #0
 8001ad8:	d101      	bne.n	8001ade <ETH_SetMACConfig+0x172>
 8001ada:	2280      	movs	r2, #128	; 0x80
 8001adc:	e000      	b.n	8001ae0 <ETH_SetMACConfig+0x174>
 8001ade:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001ae0:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ae6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001af2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001af6:	4013      	ands	r3, r2
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	6812      	ldr	r2, [r2, #0]
 8001afc:	68f9      	ldr	r1, [r7, #12]
 8001afe:	430b      	orrs	r3, r1
 8001b00:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001b08:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001b10:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001b12:	4313      	orrs	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b1e:	f023 0103 	bic.w	r1, r3, #3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001b36:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001b52:	2a00      	cmp	r2, #0
 8001b54:	d101      	bne.n	8001b5a <ETH_SetMACConfig+0x1ee>
 8001b56:	2240      	movs	r2, #64	; 0x40
 8001b58:	e000      	b.n	8001b5c <ETH_SetMACConfig+0x1f0>
 8001b5a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001b5c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001b64:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001b66:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001b6e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001b70:	4313      	orrs	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001b7c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001b8c:	bf00      	nop
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	00048083 	.word	0x00048083
 8001b9c:	c0f88000 	.word	0xc0f88000
 8001ba0:	fffffef0 	.word	0xfffffef0

08001ba4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b38      	ldr	r3, [pc, #224]	; (8001c9c <ETH_SetDMAConfig+0xf8>)
 8001bba:	4013      	ands	r3, r2
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	6812      	ldr	r2, [r2, #0]
 8001bc0:	6879      	ldr	r1, [r7, #4]
 8001bc2:	6809      	ldr	r1, [r1, #0]
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001bca:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	791b      	ldrb	r3, [r3, #4]
 8001bd0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001bd6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	7b1b      	ldrb	r3, [r3, #12]
 8001bdc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001bde:	4313      	orrs	r3, r2
 8001be0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	f241 0304 	movw	r3, #4100	; 0x1004
 8001bea:	4413      	add	r3, r2
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	4b2c      	ldr	r3, [pc, #176]	; (8001ca0 <ETH_SetDMAConfig+0xfc>)
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6811      	ldr	r1, [r2, #0]
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	f241 0304 	movw	r3, #4100	; 0x1004
 8001bfe:	440b      	add	r3, r1
 8001c00:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	7b5b      	ldrb	r3, [r3, #13]
 8001c06:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	4b22      	ldr	r3, [pc, #136]	; (8001ca4 <ETH_SetDMAConfig+0x100>)
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	6811      	ldr	r1, [r2, #0]
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	431a      	orrs	r2, r3
 8001c26:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001c2a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	7d1b      	ldrb	r3, [r3, #20]
 8001c34:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c36:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	7f5b      	ldrb	r3, [r3, #29]
 8001c3c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	f241 1304 	movw	r3, #4356	; 0x1104
 8001c4a:	4413      	add	r3, r2
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	4b16      	ldr	r3, [pc, #88]	; (8001ca8 <ETH_SetDMAConfig+0x104>)
 8001c50:	4013      	ands	r3, r2
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6811      	ldr	r1, [r2, #0]
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	f241 1304 	movw	r3, #4356	; 0x1104
 8001c5e:	440b      	add	r3, r1
 8001c60:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	7f1b      	ldrb	r3, [r3, #28]
 8001c66:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	f241 1308 	movw	r3, #4360	; 0x1108
 8001c78:	4413      	add	r3, r2
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <ETH_SetDMAConfig+0x108>)
 8001c7e:	4013      	ands	r3, r2
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	6811      	ldr	r1, [r2, #0]
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	431a      	orrs	r2, r3
 8001c88:	f241 1308 	movw	r3, #4360	; 0x1108
 8001c8c:	440b      	add	r3, r1
 8001c8e:	601a      	str	r2, [r3, #0]
}
 8001c90:	bf00      	nop
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	ffff87fd 	.word	0xffff87fd
 8001ca0:	ffff2ffe 	.word	0xffff2ffe
 8001ca4:	fffec000 	.word	0xfffec000
 8001ca8:	ffc0efef 	.word	0xffc0efef
 8001cac:	7fc0ffff 	.word	0x7fc0ffff

08001cb0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b0a4      	sub	sp, #144	; 0x90
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001cec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cf0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001d02:	2300      	movs	r3, #0
 8001d04:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001d08:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001d0c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001d14:	2300      	movs	r3, #0
 8001d16:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001d24:	2300      	movs	r3, #0
 8001d26:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001d32:	2300      	movs	r3, #0
 8001d34:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001d42:	2301      	movs	r3, #1
 8001d44:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001d48:	2320      	movs	r3, #32
 8001d4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001d54:	2300      	movs	r3, #0
 8001d56:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001d5a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001d60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d64:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001d72:	2300      	movs	r3, #0
 8001d74:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001d84:	2301      	movs	r3, #1
 8001d86:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001d94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d98:	4619      	mov	r1, r3
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff fde6 	bl	800196c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001da0:	2301      	movs	r3, #1
 8001da2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001da4:	2301      	movs	r3, #1
 8001da6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001dac:	2300      	movs	r3, #0
 8001dae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001db2:	2300      	movs	r3, #0
 8001db4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001db6:	2300      	movs	r3, #0
 8001db8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001dba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001dbe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001dc4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001dc8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001dd0:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001dd4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001dd6:	f107 0308 	add.w	r3, r7, #8
 8001dda:	4619      	mov	r1, r3
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff fee1 	bl	8001ba4 <ETH_SetDMAConfig>
}
 8001de2:	bf00      	nop
 8001de4:	3790      	adds	r7, #144	; 0x90
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
	...

08001dec <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001dfc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e04:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001e06:	f002 fc91 	bl	800472c <HAL_RCC_GetHCLKFreq>
 8001e0a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	4a1e      	ldr	r2, [pc, #120]	; (8001e88 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d908      	bls.n	8001e26 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	4a1d      	ldr	r2, [pc, #116]	; (8001e8c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d804      	bhi.n	8001e26 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	e027      	b.n	8001e76 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	4a18      	ldr	r2, [pc, #96]	; (8001e8c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d908      	bls.n	8001e40 <ETH_MAC_MDIO_ClkConfig+0x54>
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	4a17      	ldr	r2, [pc, #92]	; (8001e90 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d804      	bhi.n	8001e40 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	e01a      	b.n	8001e76 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	4a13      	ldr	r2, [pc, #76]	; (8001e90 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d903      	bls.n	8001e50 <ETH_MAC_MDIO_ClkConfig+0x64>
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	4a12      	ldr	r2, [pc, #72]	; (8001e94 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d911      	bls.n	8001e74 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	4a10      	ldr	r2, [pc, #64]	; (8001e94 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d908      	bls.n	8001e6a <ETH_MAC_MDIO_ClkConfig+0x7e>
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	4a0f      	ldr	r2, [pc, #60]	; (8001e98 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d804      	bhi.n	8001e6a <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	e005      	b.n	8001e76 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	e000      	b.n	8001e76 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001e74:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001e80:	bf00      	nop
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	01312cff 	.word	0x01312cff
 8001e8c:	02160ebf 	.word	0x02160ebf
 8001e90:	039386ff 	.word	0x039386ff
 8001e94:	05f5e0ff 	.word	0x05f5e0ff
 8001e98:	08f0d17f 	.word	0x08f0d17f

08001e9c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	e01d      	b.n	8001ee6 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68d9      	ldr	r1, [r3, #12]
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	4413      	add	r3, r2
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	440b      	add	r3, r1
 8001eba:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001ed4:	68b9      	ldr	r1, [r7, #8]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	3206      	adds	r2, #6
 8001edc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2b03      	cmp	r3, #3
 8001eea:	d9de      	bls.n	8001eaa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	f241 132c 	movw	r3, #4396	; 0x112c
 8001efa:	4413      	add	r3, r2
 8001efc:	2203      	movs	r2, #3
 8001efe:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68d9      	ldr	r1, [r3, #12]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	f241 1314 	movw	r3, #4372	; 0x1114
 8001f0c:	4413      	add	r3, r2
 8001f0e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68da      	ldr	r2, [r3, #12]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001f1c:	601a      	str	r2, [r3, #0]
}
 8001f1e:	bf00      	nop
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b085      	sub	sp, #20
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	e024      	b.n	8001f82 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6919      	ldr	r1, [r3, #16]
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	4413      	add	r3, r2
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	440b      	add	r3, r1
 8001f48:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	2200      	movs	r2, #0
 8001f54:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2200      	movs	r2, #0
 8001f66:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	330a      	adds	r3, #10
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2b03      	cmp	r3, #3
 8001f86:	d9d7      	bls.n	8001f38 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	f241 1330 	movw	r3, #4400	; 0x1130
 8001fae:	4413      	add	r3, r2
 8001fb0:	2203      	movs	r2, #3
 8001fb2:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6919      	ldr	r1, [r3, #16]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	f241 131c 	movw	r3, #4380	; 0x111c
 8001fc0:	4413      	add	r3, r2
 8001fc2:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	f241 1328 	movw	r3, #4392	; 0x1128
 8001fd4:	4413      	add	r3, r2
 8001fd6:	6019      	str	r1, [r3, #0]
}
 8001fd8:	bf00      	nop
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b089      	sub	sp, #36	; 0x24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001ff2:	4b89      	ldr	r3, [pc, #548]	; (8002218 <HAL_GPIO_Init+0x234>)
 8001ff4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ff6:	e194      	b.n	8002322 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	fa01 f303 	lsl.w	r3, r1, r3
 8002004:	4013      	ands	r3, r2
 8002006:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 8186 	beq.w	800231c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d00b      	beq.n	8002030 <HAL_GPIO_Init+0x4c>
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	2b02      	cmp	r3, #2
 800201e:	d007      	beq.n	8002030 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002024:	2b11      	cmp	r3, #17
 8002026:	d003      	beq.n	8002030 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b12      	cmp	r3, #18
 800202e:	d130      	bne.n	8002092 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	2203      	movs	r2, #3
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	68da      	ldr	r2, [r3, #12]
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002066:	2201      	movs	r2, #1
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4013      	ands	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	091b      	lsrs	r3, r3, #4
 800207c:	f003 0201 	and.w	r2, r3, #1
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4313      	orrs	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	2203      	movs	r2, #3
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4013      	ands	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_Init+0xee>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b12      	cmp	r3, #18
 80020d0:	d123      	bne.n	800211a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	08da      	lsrs	r2, r3, #3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	3208      	adds	r2, #8
 80020da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	220f      	movs	r2, #15
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4013      	ands	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	691a      	ldr	r2, [r3, #16]
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	08da      	lsrs	r2, r3, #3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3208      	adds	r2, #8
 8002114:	69b9      	ldr	r1, [r7, #24]
 8002116:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	2203      	movs	r2, #3
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43db      	mvns	r3, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4013      	ands	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f003 0203 	and.w	r2, r3, #3
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 80e0 	beq.w	800231c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800215c:	4b2f      	ldr	r3, [pc, #188]	; (800221c <HAL_GPIO_Init+0x238>)
 800215e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002162:	4a2e      	ldr	r2, [pc, #184]	; (800221c <HAL_GPIO_Init+0x238>)
 8002164:	f043 0302 	orr.w	r3, r3, #2
 8002168:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800216c:	4b2b      	ldr	r3, [pc, #172]	; (800221c <HAL_GPIO_Init+0x238>)
 800216e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800217a:	4a29      	ldr	r2, [pc, #164]	; (8002220 <HAL_GPIO_Init+0x23c>)
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	089b      	lsrs	r3, r3, #2
 8002180:	3302      	adds	r3, #2
 8002182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002186:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f003 0303 	and.w	r3, r3, #3
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	220f      	movs	r2, #15
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43db      	mvns	r3, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4013      	ands	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a20      	ldr	r2, [pc, #128]	; (8002224 <HAL_GPIO_Init+0x240>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d052      	beq.n	800224c <HAL_GPIO_Init+0x268>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a1f      	ldr	r2, [pc, #124]	; (8002228 <HAL_GPIO_Init+0x244>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d031      	beq.n	8002212 <HAL_GPIO_Init+0x22e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a1e      	ldr	r2, [pc, #120]	; (800222c <HAL_GPIO_Init+0x248>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d02b      	beq.n	800220e <HAL_GPIO_Init+0x22a>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a1d      	ldr	r2, [pc, #116]	; (8002230 <HAL_GPIO_Init+0x24c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d025      	beq.n	800220a <HAL_GPIO_Init+0x226>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a1c      	ldr	r2, [pc, #112]	; (8002234 <HAL_GPIO_Init+0x250>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d01f      	beq.n	8002206 <HAL_GPIO_Init+0x222>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a1b      	ldr	r2, [pc, #108]	; (8002238 <HAL_GPIO_Init+0x254>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d019      	beq.n	8002202 <HAL_GPIO_Init+0x21e>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a1a      	ldr	r2, [pc, #104]	; (800223c <HAL_GPIO_Init+0x258>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d013      	beq.n	80021fe <HAL_GPIO_Init+0x21a>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a19      	ldr	r2, [pc, #100]	; (8002240 <HAL_GPIO_Init+0x25c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d00d      	beq.n	80021fa <HAL_GPIO_Init+0x216>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a18      	ldr	r2, [pc, #96]	; (8002244 <HAL_GPIO_Init+0x260>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d007      	beq.n	80021f6 <HAL_GPIO_Init+0x212>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a17      	ldr	r2, [pc, #92]	; (8002248 <HAL_GPIO_Init+0x264>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d101      	bne.n	80021f2 <HAL_GPIO_Init+0x20e>
 80021ee:	2309      	movs	r3, #9
 80021f0:	e02d      	b.n	800224e <HAL_GPIO_Init+0x26a>
 80021f2:	230a      	movs	r3, #10
 80021f4:	e02b      	b.n	800224e <HAL_GPIO_Init+0x26a>
 80021f6:	2308      	movs	r3, #8
 80021f8:	e029      	b.n	800224e <HAL_GPIO_Init+0x26a>
 80021fa:	2307      	movs	r3, #7
 80021fc:	e027      	b.n	800224e <HAL_GPIO_Init+0x26a>
 80021fe:	2306      	movs	r3, #6
 8002200:	e025      	b.n	800224e <HAL_GPIO_Init+0x26a>
 8002202:	2305      	movs	r3, #5
 8002204:	e023      	b.n	800224e <HAL_GPIO_Init+0x26a>
 8002206:	2304      	movs	r3, #4
 8002208:	e021      	b.n	800224e <HAL_GPIO_Init+0x26a>
 800220a:	2303      	movs	r3, #3
 800220c:	e01f      	b.n	800224e <HAL_GPIO_Init+0x26a>
 800220e:	2302      	movs	r3, #2
 8002210:	e01d      	b.n	800224e <HAL_GPIO_Init+0x26a>
 8002212:	2301      	movs	r3, #1
 8002214:	e01b      	b.n	800224e <HAL_GPIO_Init+0x26a>
 8002216:	bf00      	nop
 8002218:	58000080 	.word	0x58000080
 800221c:	58024400 	.word	0x58024400
 8002220:	58000400 	.word	0x58000400
 8002224:	58020000 	.word	0x58020000
 8002228:	58020400 	.word	0x58020400
 800222c:	58020800 	.word	0x58020800
 8002230:	58020c00 	.word	0x58020c00
 8002234:	58021000 	.word	0x58021000
 8002238:	58021400 	.word	0x58021400
 800223c:	58021800 	.word	0x58021800
 8002240:	58021c00 	.word	0x58021c00
 8002244:	58022000 	.word	0x58022000
 8002248:	58022400 	.word	0x58022400
 800224c:	2300      	movs	r3, #0
 800224e:	69fa      	ldr	r2, [r7, #28]
 8002250:	f002 0203 	and.w	r2, r2, #3
 8002254:	0092      	lsls	r2, r2, #2
 8002256:	4093      	lsls	r3, r2
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800225e:	4938      	ldr	r1, [pc, #224]	; (8002340 <HAL_GPIO_Init+0x35c>)
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	089b      	lsrs	r3, r3, #2
 8002264:	3302      	adds	r3, #2
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	43db      	mvns	r3, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	43db      	mvns	r3, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4013      	ands	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	43db      	mvns	r3, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80022e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80022ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002314:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	3301      	adds	r3, #1
 8002320:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	fa22 f303 	lsr.w	r3, r2, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	f47f ae63 	bne.w	8001ff8 <HAL_GPIO_Init+0x14>
  }
}
 8002332:	bf00      	nop
 8002334:	3724      	adds	r7, #36	; 0x24
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	58000400 	.word	0x58000400

08002344 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	460b      	mov	r3, r1
 800234e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691a      	ldr	r2, [r3, #16]
 8002354:	887b      	ldrh	r3, [r7, #2]
 8002356:	4013      	ands	r3, r2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d002      	beq.n	8002362 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800235c:	2301      	movs	r3, #1
 800235e:	73fb      	strb	r3, [r7, #15]
 8002360:	e001      	b.n	8002366 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002362:	2300      	movs	r3, #0
 8002364:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002366:	7bfb      	ldrb	r3, [r7, #15]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	807b      	strh	r3, [r7, #2]
 8002380:	4613      	mov	r3, r2
 8002382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002384:	787b      	ldrb	r3, [r7, #1]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800238a:	887a      	ldrh	r2, [r7, #2]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002390:	e003      	b.n	800239a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002392:	887b      	ldrh	r3, [r7, #2]
 8002394:	041a      	lsls	r2, r3, #16
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	619a      	str	r2, [r3, #24]
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
 80023ae:	460b      	mov	r3, r1
 80023b0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695a      	ldr	r2, [r3, #20]
 80023b6:	887b      	ldrh	r3, [r7, #2]
 80023b8:	401a      	ands	r2, r3
 80023ba:	887b      	ldrh	r3, [r7, #2]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d104      	bne.n	80023ca <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80023c0:	887b      	ldrh	r3, [r7, #2]
 80023c2:	041a      	lsls	r2, r3, #16
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80023c8:	e002      	b.n	80023d0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80023ca:	887a      	ldrh	r2, [r7, #2]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	619a      	str	r2, [r3, #24]
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80023e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80023ee:	88fb      	ldrh	r3, [r7, #6]
 80023f0:	4013      	ands	r3, r2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d008      	beq.n	8002408 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023fa:	88fb      	ldrh	r3, [r7, #6]
 80023fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002400:	88fb      	ldrh	r3, [r7, #6]
 8002402:	4618      	mov	r0, r3
 8002404:	f000 f804 	bl	8002410 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002408:	bf00      	nop
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002426:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002428:	b08f      	sub	sp, #60	; 0x3c
 800242a:	af0a      	add	r7, sp, #40	; 0x28
 800242c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e116      	b.n	8002666 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d106      	bne.n	8002458 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f012 fdc0 	bl	8014fd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2203      	movs	r2, #3
 800245c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002468:	2b00      	cmp	r3, #0
 800246a:	d102      	bne.n	8002472 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f009 fd29 	bl	800bece <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	603b      	str	r3, [r7, #0]
 8002482:	687e      	ldr	r6, [r7, #4]
 8002484:	466d      	mov	r5, sp
 8002486:	f106 0410 	add.w	r4, r6, #16
 800248a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800248c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800248e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002490:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002492:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002496:	e885 0003 	stmia.w	r5, {r0, r1}
 800249a:	1d33      	adds	r3, r6, #4
 800249c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800249e:	6838      	ldr	r0, [r7, #0]
 80024a0:	f009 fc00 	bl	800bca4 <USB_CoreInit>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d005      	beq.n	80024b6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2202      	movs	r2, #2
 80024ae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e0d7      	b.n	8002666 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2100      	movs	r1, #0
 80024bc:	4618      	mov	r0, r3
 80024be:	f009 fd17 	bl	800bef0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024c2:	2300      	movs	r3, #0
 80024c4:	73fb      	strb	r3, [r7, #15]
 80024c6:	e04a      	b.n	800255e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024c8:	7bfa      	ldrb	r2, [r7, #15]
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	1a9b      	subs	r3, r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	333d      	adds	r3, #61	; 0x3d
 80024d8:	2201      	movs	r2, #1
 80024da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024dc:	7bfa      	ldrb	r2, [r7, #15]
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	1a9b      	subs	r3, r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	333c      	adds	r3, #60	; 0x3c
 80024ec:	7bfa      	ldrb	r2, [r7, #15]
 80024ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024f0:	7bfa      	ldrb	r2, [r7, #15]
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
 80024f4:	b298      	uxth	r0, r3
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	3342      	adds	r3, #66	; 0x42
 8002504:	4602      	mov	r2, r0
 8002506:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002508:	7bfa      	ldrb	r2, [r7, #15]
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	4613      	mov	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	1a9b      	subs	r3, r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	333f      	adds	r3, #63	; 0x3f
 8002518:	2200      	movs	r2, #0
 800251a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800251c:	7bfa      	ldrb	r2, [r7, #15]
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	1a9b      	subs	r3, r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	3344      	adds	r3, #68	; 0x44
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002530:	7bfa      	ldrb	r2, [r7, #15]
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	1a9b      	subs	r3, r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	3348      	adds	r3, #72	; 0x48
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002544:	7bfa      	ldrb	r2, [r7, #15]
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	1a9b      	subs	r3, r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	3350      	adds	r3, #80	; 0x50
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002558:	7bfb      	ldrb	r3, [r7, #15]
 800255a:	3301      	adds	r3, #1
 800255c:	73fb      	strb	r3, [r7, #15]
 800255e:	7bfa      	ldrb	r2, [r7, #15]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	429a      	cmp	r2, r3
 8002566:	d3af      	bcc.n	80024c8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002568:	2300      	movs	r3, #0
 800256a:	73fb      	strb	r3, [r7, #15]
 800256c:	e044      	b.n	80025f8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800256e:	7bfa      	ldrb	r2, [r7, #15]
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	1a9b      	subs	r3, r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	440b      	add	r3, r1
 800257c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002580:	2200      	movs	r2, #0
 8002582:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002584:	7bfa      	ldrb	r2, [r7, #15]
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	1a9b      	subs	r3, r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002596:	7bfa      	ldrb	r2, [r7, #15]
 8002598:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800259a:	7bfa      	ldrb	r2, [r7, #15]
 800259c:	6879      	ldr	r1, [r7, #4]
 800259e:	4613      	mov	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	1a9b      	subs	r3, r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	440b      	add	r3, r1
 80025a8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80025ac:	2200      	movs	r2, #0
 80025ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025b0:	7bfa      	ldrb	r2, [r7, #15]
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	1a9b      	subs	r3, r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025c6:	7bfa      	ldrb	r2, [r7, #15]
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	1a9b      	subs	r3, r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	440b      	add	r3, r1
 80025d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025dc:	7bfa      	ldrb	r2, [r7, #15]
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	1a9b      	subs	r3, r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025f2:	7bfb      	ldrb	r3, [r7, #15]
 80025f4:	3301      	adds	r3, #1
 80025f6:	73fb      	strb	r3, [r7, #15]
 80025f8:	7bfa      	ldrb	r2, [r7, #15]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d3b5      	bcc.n	800256e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	603b      	str	r3, [r7, #0]
 8002608:	687e      	ldr	r6, [r7, #4]
 800260a:	466d      	mov	r5, sp
 800260c:	f106 0410 	add.w	r4, r6, #16
 8002610:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002612:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002614:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002616:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002618:	e894 0003 	ldmia.w	r4, {r0, r1}
 800261c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002620:	1d33      	adds	r3, r6, #4
 8002622:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002624:	6838      	ldr	r0, [r7, #0]
 8002626:	f009 fc8d 	bl	800bf44 <USB_DevInit>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d005      	beq.n	800263c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2202      	movs	r2, #2
 8002634:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e014      	b.n	8002666 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	2b01      	cmp	r3, #1
 8002652:	d102      	bne.n	800265a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f001 f8ef 	bl	8003838 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f00a fcc3 	bl	800cfea <USB_DevDisconnect>

  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800266e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b084      	sub	sp, #16
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002682:	2b01      	cmp	r3, #1
 8002684:	d101      	bne.n	800268a <HAL_PCD_Start+0x1c>
 8002686:	2302      	movs	r3, #2
 8002688:	e020      	b.n	80026cc <HAL_PCD_Start+0x5e>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002696:	2b01      	cmp	r3, #1
 8002698:	d109      	bne.n	80026ae <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d005      	beq.n	80026ae <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f00a fc81 	bl	800cfba <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f009 fbf5 	bl	800beac <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d101      	bne.n	80026ea <HAL_PCD_Stop+0x16>
 80026e6:	2302      	movs	r3, #2
 80026e8:	e020      	b.n	800272c <HAL_PCD_Stop+0x58>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f009 fbe9 	bl	800bece <USB_DisableGlobalInt>

  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f00a fbe5 	bl	800ced0 <USB_StopDevice>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d005      	beq.n	8002718 <HAL_PCD_Stop+0x44>
  {
    __HAL_UNLOCK(hpcd);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e009      	b.n	800272c <HAL_PCD_Stop+0x58>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4618      	mov	r0, r3
 800271e:	f00a fc64 	bl	800cfea <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002734:	b590      	push	{r4, r7, lr}
 8002736:	b08d      	sub	sp, #52	; 0x34
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f00a fcf8 	bl	800d140 <USB_GetMode>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	f040 83ca 	bne.w	8002eec <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f00a fc5c 	bl	800d01a <USB_ReadInterrupts>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 83c0 	beq.w	8002eea <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f00a fc53 	bl	800d01a <USB_ReadInterrupts>
 8002774:	4603      	mov	r3, r0
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b02      	cmp	r3, #2
 800277c:	d107      	bne.n	800278e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695a      	ldr	r2, [r3, #20]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f002 0202 	and.w	r2, r2, #2
 800278c:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f00a fc41 	bl	800d01a <USB_ReadInterrupts>
 8002798:	4603      	mov	r3, r0
 800279a:	f003 0310 	and.w	r3, r3, #16
 800279e:	2b10      	cmp	r3, #16
 80027a0:	d161      	bne.n	8002866 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	699a      	ldr	r2, [r3, #24]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 0210 	bic.w	r2, r2, #16
 80027b0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	f003 020f 	and.w	r2, r3, #15
 80027be:	4613      	mov	r3, r2
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	1a9b      	subs	r3, r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	4413      	add	r3, r2
 80027ce:	3304      	adds	r3, #4
 80027d0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	0c5b      	lsrs	r3, r3, #17
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d124      	bne.n	8002828 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80027e4:	4013      	ands	r3, r2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d035      	beq.n	8002856 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	091b      	lsrs	r3, r3, #4
 80027f2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	461a      	mov	r2, r3
 80027fc:	6a38      	ldr	r0, [r7, #32]
 80027fe:	f00a fa6a 	bl	800ccd6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	091b      	lsrs	r3, r3, #4
 800280a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800280e:	441a      	add	r2, r3
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	699a      	ldr	r2, [r3, #24]
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	091b      	lsrs	r3, r3, #4
 800281c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002820:	441a      	add	r2, r3
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	619a      	str	r2, [r3, #24]
 8002826:	e016      	b.n	8002856 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	0c5b      	lsrs	r3, r3, #17
 800282c:	f003 030f 	and.w	r3, r3, #15
 8002830:	2b06      	cmp	r3, #6
 8002832:	d110      	bne.n	8002856 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800283a:	2208      	movs	r2, #8
 800283c:	4619      	mov	r1, r3
 800283e:	6a38      	ldr	r0, [r7, #32]
 8002840:	f00a fa49 	bl	800ccd6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	699a      	ldr	r2, [r3, #24]
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	091b      	lsrs	r3, r3, #4
 800284c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002850:	441a      	add	r2, r3
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	699a      	ldr	r2, [r3, #24]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f042 0210 	orr.w	r2, r2, #16
 8002864:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f00a fbd5 	bl	800d01a <USB_ReadInterrupts>
 8002870:	4603      	mov	r3, r0
 8002872:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002876:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800287a:	d16e      	bne.n	800295a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f00a fbdb 	bl	800d040 <USB_ReadDevAllOutEpInterrupt>
 800288a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800288c:	e062      	b.n	8002954 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800288e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b00      	cmp	r3, #0
 8002896:	d057      	beq.n	8002948 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	4611      	mov	r1, r2
 80028a2:	4618      	mov	r0, r3
 80028a4:	f00a fc00 	bl	800d0a8 <USB_ReadDevOutEPInterrupt>
 80028a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00c      	beq.n	80028ce <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	015a      	lsls	r2, r3, #5
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	4413      	add	r3, r2
 80028bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028c0:	461a      	mov	r2, r3
 80028c2:	2301      	movs	r3, #1
 80028c4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80028c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 fe0b 	bl	80034e4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	f003 0308 	and.w	r3, r3, #8
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00c      	beq.n	80028f2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	015a      	lsls	r2, r3, #5
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	4413      	add	r3, r2
 80028e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028e4:	461a      	mov	r2, r3
 80028e6:	2308      	movs	r3, #8
 80028e8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80028ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 ff05 	bl	80036fc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	f003 0310 	and.w	r3, r3, #16
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d008      	beq.n	800290e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	015a      	lsls	r2, r3, #5
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	4413      	add	r3, r2
 8002904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002908:	461a      	mov	r2, r3
 800290a:	2310      	movs	r3, #16
 800290c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	f003 0320 	and.w	r3, r3, #32
 8002914:	2b00      	cmp	r3, #0
 8002916:	d008      	beq.n	800292a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	015a      	lsls	r2, r3, #5
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	4413      	add	r3, r2
 8002920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002924:	461a      	mov	r2, r3
 8002926:	2320      	movs	r3, #32
 8002928:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d009      	beq.n	8002948 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	015a      	lsls	r2, r3, #5
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	4413      	add	r3, r2
 800293c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002940:	461a      	mov	r2, r3
 8002942:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002946:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	3301      	adds	r3, #1
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800294e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002950:	085b      	lsrs	r3, r3, #1
 8002952:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002956:	2b00      	cmp	r3, #0
 8002958:	d199      	bne.n	800288e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f00a fb5b 	bl	800d01a <USB_ReadInterrupts>
 8002964:	4603      	mov	r3, r0
 8002966:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800296a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800296e:	f040 80c0 	bne.w	8002af2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f00a fb7c 	bl	800d074 <USB_ReadDevAllInEpInterrupt>
 800297c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800297e:	2300      	movs	r3, #0
 8002980:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002982:	e0b2      	b.n	8002aea <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 80a7 	beq.w	8002ade <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	4611      	mov	r1, r2
 800299a:	4618      	mov	r0, r3
 800299c:	f00a fba2 	bl	800d0e4 <USB_ReadDevInEPInterrupt>
 80029a0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d057      	beq.n	8002a5c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	2201      	movs	r2, #1
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69f9      	ldr	r1, [r7, #28]
 80029c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80029cc:	4013      	ands	r3, r2
 80029ce:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	015a      	lsls	r2, r3, #5
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029dc:	461a      	mov	r2, r3
 80029de:	2301      	movs	r3, #1
 80029e0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d132      	bne.n	8002a50 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ee:	4613      	mov	r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	1a9b      	subs	r3, r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	440b      	add	r3, r1
 80029f8:	3348      	adds	r3, #72	; 0x48
 80029fa:	6819      	ldr	r1, [r3, #0]
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a00:	4613      	mov	r3, r2
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	1a9b      	subs	r3, r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4403      	add	r3, r0
 8002a0a:	3344      	adds	r3, #68	; 0x44
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4419      	add	r1, r3
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a14:	4613      	mov	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	1a9b      	subs	r3, r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4403      	add	r3, r0
 8002a1e:	3348      	adds	r3, #72	; 0x48
 8002a20:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d113      	bne.n	8002a50 <HAL_PCD_IRQHandler+0x31c>
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	1a9b      	subs	r3, r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	3350      	adds	r3, #80	; 0x50
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d108      	bne.n	8002a50 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a48:	461a      	mov	r2, r3
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	f00a fbaa 	bl	800d1a4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	4619      	mov	r1, r3
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f012 fb3d 	bl	80150d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	f003 0308 	and.w	r3, r3, #8
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d008      	beq.n	8002a78 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	015a      	lsls	r2, r3, #5
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a72:	461a      	mov	r2, r3
 8002a74:	2308      	movs	r3, #8
 8002a76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	f003 0310 	and.w	r3, r3, #16
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d008      	beq.n	8002a94 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	015a      	lsls	r2, r3, #5
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	4413      	add	r3, r2
 8002a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a8e:	461a      	mov	r2, r3
 8002a90:	2310      	movs	r3, #16
 8002a92:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d008      	beq.n	8002ab0 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	015a      	lsls	r2, r3, #5
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002aaa:	461a      	mov	r2, r3
 8002aac:	2340      	movs	r3, #64	; 0x40
 8002aae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d008      	beq.n	8002acc <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	015a      	lsls	r2, r3, #5
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	2302      	movs	r3, #2
 8002aca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002ad6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 fc75 	bl	80033c8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae6:	085b      	lsrs	r3, r3, #1
 8002ae8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f47f af49 	bne.w	8002984 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f00a fa8f 	bl	800d01a <USB_ReadInterrupts>
 8002afc:	4603      	mov	r3, r0
 8002afe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b06:	d122      	bne.n	8002b4e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	69fa      	ldr	r2, [r7, #28]
 8002b12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b16:	f023 0301 	bic.w	r3, r3, #1
 8002b1a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d108      	bne.n	8002b38 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b2e:	2100      	movs	r1, #0
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 fea5 	bl	8003880 <HAL_PCDEx_LPM_Callback>
 8002b36:	e002      	b.n	8002b3e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f012 fb43 	bl	80151c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	695a      	ldr	r2, [r3, #20]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002b4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f00a fa61 	bl	800d01a <USB_ReadInterrupts>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b62:	d112      	bne.n	8002b8a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d102      	bne.n	8002b7a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f012 faff 	bl	8015178 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	695a      	ldr	r2, [r3, #20]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002b88:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f00a fa43 	bl	800d01a <USB_ReadInterrupts>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b9e:	d121      	bne.n	8002be4 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695a      	ldr	r2, [r3, #20]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002bae:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d111      	bne.n	8002bde <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc8:	089b      	lsrs	r3, r3, #2
 8002bca:	f003 020f 	and.w	r2, r3, #15
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 fe52 	bl	8003880 <HAL_PCDEx_LPM_Callback>
 8002bdc:	e002      	b.n	8002be4 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f012 faca 	bl	8015178 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f00a fa16 	bl	800d01a <USB_ReadInterrupts>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bf8:	f040 80c7 	bne.w	8002d8a <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	69fa      	ldr	r2, [r7, #28]
 8002c06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c0a:	f023 0301 	bic.w	r3, r3, #1
 8002c0e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2110      	movs	r1, #16
 8002c16:	4618      	mov	r0, r3
 8002c18:	f009 faf2 	bl	800c200 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c20:	e056      	b.n	8002cd0 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c24:	015a      	lsls	r2, r3, #5
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	4413      	add	r3, r2
 8002c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c2e:	461a      	mov	r2, r3
 8002c30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c34:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c38:	015a      	lsls	r2, r3, #5
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c46:	0151      	lsls	r1, r2, #5
 8002c48:	69fa      	ldr	r2, [r7, #28]
 8002c4a:	440a      	add	r2, r1
 8002c4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c50:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c54:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c58:	015a      	lsls	r2, r3, #5
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c66:	0151      	lsls	r1, r2, #5
 8002c68:	69fa      	ldr	r2, [r7, #28]
 8002c6a:	440a      	add	r2, r1
 8002c6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c74:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c78:	015a      	lsls	r2, r3, #5
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c82:	461a      	mov	r2, r3
 8002c84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c88:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8c:	015a      	lsls	r2, r3, #5
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	4413      	add	r3, r2
 8002c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c9a:	0151      	lsls	r1, r2, #5
 8002c9c:	69fa      	ldr	r2, [r7, #28]
 8002c9e:	440a      	add	r2, r1
 8002ca0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ca4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ca8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cac:	015a      	lsls	r2, r3, #5
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cba:	0151      	lsls	r1, r2, #5
 8002cbc:	69fa      	ldr	r2, [r7, #28]
 8002cbe:	440a      	add	r2, r1
 8002cc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002cc4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002cc8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ccc:	3301      	adds	r3, #1
 8002cce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d3a3      	bcc.n	8002c22 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	69fa      	ldr	r2, [r7, #28]
 8002ce4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ce8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002cec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d016      	beq.n	8002d24 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d00:	69fa      	ldr	r2, [r7, #28]
 8002d02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d06:	f043 030b 	orr.w	r3, r3, #11
 8002d0a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	69fa      	ldr	r2, [r7, #28]
 8002d18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d1c:	f043 030b 	orr.w	r3, r3, #11
 8002d20:	6453      	str	r3, [r2, #68]	; 0x44
 8002d22:	e015      	b.n	8002d50 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d2a:	695a      	ldr	r2, [r3, #20]
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d32:	4619      	mov	r1, r3
 8002d34:	f242 032b 	movw	r3, #8235	; 0x202b
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	69fa      	ldr	r2, [r7, #28]
 8002d46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d4a:	f043 030b 	orr.w	r3, r3, #11
 8002d4e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	69fa      	ldr	r2, [r7, #28]
 8002d5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d5e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002d62:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6818      	ldr	r0, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d74:	461a      	mov	r2, r3
 8002d76:	f00a fa15 	bl	800d1a4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695a      	ldr	r2, [r3, #20]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002d88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f00a f943 	bl	800d01a <USB_ReadInterrupts>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d9e:	d124      	bne.n	8002dea <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f00a f9d9 	bl	800d15c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f009 fa87 	bl	800c2c2 <USB_GetDevSpeed>
 8002db4:	4603      	mov	r3, r0
 8002db6:	461a      	mov	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681c      	ldr	r4, [r3, #0]
 8002dc0:	f001 fcb4 	bl	800472c <HAL_RCC_GetHCLKFreq>
 8002dc4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	461a      	mov	r2, r3
 8002dce:	4620      	mov	r0, r4
 8002dd0:	f008 ffca 	bl	800bd68 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f012 f9a6 	bl	8015126 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695a      	ldr	r2, [r3, #20]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002de8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f00a f913 	bl	800d01a <USB_ReadInterrupts>
 8002df4:	4603      	mov	r3, r0
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	2b08      	cmp	r3, #8
 8002dfc:	d10a      	bne.n	8002e14 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f012 f983 	bl	801510a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	695a      	ldr	r2, [r3, #20]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f002 0208 	and.w	r2, r2, #8
 8002e12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f00a f8fe 	bl	800d01a <USB_ReadInterrupts>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e28:	d10f      	bne.n	8002e4a <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	4619      	mov	r1, r3
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f012 f9e5 	bl	8015204 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	695a      	ldr	r2, [r3, #20]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002e48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f00a f8e3 	bl	800d01a <USB_ReadInterrupts>
 8002e54:	4603      	mov	r3, r0
 8002e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e5e:	d10f      	bne.n	8002e80 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	4619      	mov	r1, r3
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f012 f9b8 	bl	80151e0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	695a      	ldr	r2, [r3, #20]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002e7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f00a f8c8 	bl	800d01a <USB_ReadInterrupts>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e94:	d10a      	bne.n	8002eac <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f012 f9c6 	bl	8015228 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	695a      	ldr	r2, [r3, #20]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002eaa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f00a f8b2 	bl	800d01a <USB_ReadInterrupts>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b04      	cmp	r3, #4
 8002ebe:	d115      	bne.n	8002eec <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	f003 0304 	and.w	r3, r3, #4
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d002      	beq.n	8002ed8 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f012 f9b6 	bl	8015244 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6859      	ldr	r1, [r3, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	605a      	str	r2, [r3, #4]
 8002ee8:	e000      	b.n	8002eec <HAL_PCD_IRQHandler+0x7b8>
      return;
 8002eea:	bf00      	nop
    }
  }
}
 8002eec:	3734      	adds	r7, #52	; 0x34
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd90      	pop	{r4, r7, pc}

08002ef2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b082      	sub	sp, #8
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
 8002efa:	460b      	mov	r3, r1
 8002efc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <HAL_PCD_SetAddress+0x1a>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e013      	b.n	8002f34 <HAL_PCD_SetAddress+0x42>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	78fa      	ldrb	r2, [r7, #3]
 8002f18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	78fa      	ldrb	r2, [r7, #3]
 8002f22:	4611      	mov	r1, r2
 8002f24:	4618      	mov	r0, r3
 8002f26:	f00a f822 	bl	800cf6e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	4608      	mov	r0, r1
 8002f46:	4611      	mov	r1, r2
 8002f48:	461a      	mov	r2, r3
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	70fb      	strb	r3, [r7, #3]
 8002f4e:	460b      	mov	r3, r1
 8002f50:	803b      	strh	r3, [r7, #0]
 8002f52:	4613      	mov	r3, r2
 8002f54:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f56:	2300      	movs	r3, #0
 8002f58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	da0f      	bge.n	8002f82 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f62:	78fb      	ldrb	r3, [r7, #3]
 8002f64:	f003 020f 	and.w	r2, r3, #15
 8002f68:	4613      	mov	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	1a9b      	subs	r3, r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	3338      	adds	r3, #56	; 0x38
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	4413      	add	r3, r2
 8002f76:	3304      	adds	r3, #4
 8002f78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	705a      	strb	r2, [r3, #1]
 8002f80:	e00f      	b.n	8002fa2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f82:	78fb      	ldrb	r3, [r7, #3]
 8002f84:	f003 020f 	and.w	r2, r3, #15
 8002f88:	4613      	mov	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	1a9b      	subs	r3, r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	4413      	add	r3, r2
 8002f98:	3304      	adds	r3, #4
 8002f9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002fa2:	78fb      	ldrb	r3, [r7, #3]
 8002fa4:	f003 030f 	and.w	r3, r3, #15
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002fae:	883a      	ldrh	r2, [r7, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	78ba      	ldrb	r2, [r7, #2]
 8002fb8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	785b      	ldrb	r3, [r3, #1]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d004      	beq.n	8002fcc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002fcc:	78bb      	ldrb	r3, [r7, #2]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d102      	bne.n	8002fd8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d101      	bne.n	8002fe6 <HAL_PCD_EP_Open+0xaa>
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	e00e      	b.n	8003004 <HAL_PCD_EP_Open+0xc8>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68f9      	ldr	r1, [r7, #12]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f009 f989 	bl	800c30c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003002:	7afb      	ldrb	r3, [r7, #11]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003018:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800301c:	2b00      	cmp	r3, #0
 800301e:	da0f      	bge.n	8003040 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003020:	78fb      	ldrb	r3, [r7, #3]
 8003022:	f003 020f 	and.w	r2, r3, #15
 8003026:	4613      	mov	r3, r2
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	1a9b      	subs	r3, r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	3338      	adds	r3, #56	; 0x38
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	4413      	add	r3, r2
 8003034:	3304      	adds	r3, #4
 8003036:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2201      	movs	r2, #1
 800303c:	705a      	strb	r2, [r3, #1]
 800303e:	e00f      	b.n	8003060 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003040:	78fb      	ldrb	r3, [r7, #3]
 8003042:	f003 020f 	and.w	r2, r3, #15
 8003046:	4613      	mov	r3, r2
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	1a9b      	subs	r3, r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	4413      	add	r3, r2
 8003056:	3304      	adds	r3, #4
 8003058:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003060:	78fb      	ldrb	r3, [r7, #3]
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	b2da      	uxtb	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003072:	2b01      	cmp	r3, #1
 8003074:	d101      	bne.n	800307a <HAL_PCD_EP_Close+0x6e>
 8003076:	2302      	movs	r3, #2
 8003078:	e00e      	b.n	8003098 <HAL_PCD_EP_Close+0x8c>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68f9      	ldr	r1, [r7, #12]
 8003088:	4618      	mov	r0, r3
 800308a:	f009 f9c7 	bl	800c41c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	607a      	str	r2, [r7, #4]
 80030aa:	603b      	str	r3, [r7, #0]
 80030ac:	460b      	mov	r3, r1
 80030ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030b0:	7afb      	ldrb	r3, [r7, #11]
 80030b2:	f003 020f 	and.w	r2, r3, #15
 80030b6:	4613      	mov	r3, r2
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	1a9b      	subs	r3, r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	4413      	add	r3, r2
 80030c6:	3304      	adds	r3, #4
 80030c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	2200      	movs	r2, #0
 80030da:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	2200      	movs	r2, #0
 80030e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030e2:	7afb      	ldrb	r3, [r7, #11]
 80030e4:	f003 030f 	and.w	r3, r3, #15
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d102      	bne.n	80030fc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030fc:	7afb      	ldrb	r3, [r7, #11]
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	2b00      	cmp	r3, #0
 8003104:	d109      	bne.n	800311a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6818      	ldr	r0, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	b2db      	uxtb	r3, r3
 8003110:	461a      	mov	r2, r3
 8003112:	6979      	ldr	r1, [r7, #20]
 8003114:	f009 fc52 	bl	800c9bc <USB_EP0StartXfer>
 8003118:	e008      	b.n	800312c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6818      	ldr	r0, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	b2db      	uxtb	r3, r3
 8003124:	461a      	mov	r2, r3
 8003126:	6979      	ldr	r1, [r7, #20]
 8003128:	f009 f9fc 	bl	800c524 <USB_EPStartXfer>
  }

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3718      	adds	r7, #24
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
 800313e:	460b      	mov	r3, r1
 8003140:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003142:	78fb      	ldrb	r3, [r7, #3]
 8003144:	f003 020f 	and.w	r2, r3, #15
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	1a9b      	subs	r3, r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003158:	681b      	ldr	r3, [r3, #0]
}
 800315a:	4618      	mov	r0, r3
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b086      	sub	sp, #24
 800316a:	af00      	add	r7, sp, #0
 800316c:	60f8      	str	r0, [r7, #12]
 800316e:	607a      	str	r2, [r7, #4]
 8003170:	603b      	str	r3, [r7, #0]
 8003172:	460b      	mov	r3, r1
 8003174:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003176:	7afb      	ldrb	r3, [r7, #11]
 8003178:	f003 020f 	and.w	r2, r3, #15
 800317c:	4613      	mov	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	1a9b      	subs	r3, r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	3338      	adds	r3, #56	; 0x38
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	4413      	add	r3, r2
 800318a:	3304      	adds	r3, #4
 800318c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2200      	movs	r2, #0
 800319e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	2201      	movs	r2, #1
 80031a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031a6:	7afb      	ldrb	r3, [r7, #11]
 80031a8:	f003 030f 	and.w	r3, r3, #15
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d102      	bne.n	80031c0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031c0:	7afb      	ldrb	r3, [r7, #11]
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d109      	bne.n	80031de <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6818      	ldr	r0, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	461a      	mov	r2, r3
 80031d6:	6979      	ldr	r1, [r7, #20]
 80031d8:	f009 fbf0 	bl	800c9bc <USB_EP0StartXfer>
 80031dc:	e008      	b.n	80031f0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6818      	ldr	r0, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	461a      	mov	r2, r3
 80031ea:	6979      	ldr	r1, [r7, #20]
 80031ec:	f009 f99a 	bl	800c524 <USB_EPStartXfer>
  }

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b084      	sub	sp, #16
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
 8003202:	460b      	mov	r3, r1
 8003204:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003206:	78fb      	ldrb	r3, [r7, #3]
 8003208:	f003 020f 	and.w	r2, r3, #15
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	429a      	cmp	r2, r3
 8003212:	d901      	bls.n	8003218 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e050      	b.n	80032ba <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003218:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800321c:	2b00      	cmp	r3, #0
 800321e:	da0f      	bge.n	8003240 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003220:	78fb      	ldrb	r3, [r7, #3]
 8003222:	f003 020f 	and.w	r2, r3, #15
 8003226:	4613      	mov	r3, r2
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	1a9b      	subs	r3, r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	3338      	adds	r3, #56	; 0x38
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	4413      	add	r3, r2
 8003234:	3304      	adds	r3, #4
 8003236:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2201      	movs	r2, #1
 800323c:	705a      	strb	r2, [r3, #1]
 800323e:	e00d      	b.n	800325c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003240:	78fa      	ldrb	r2, [r7, #3]
 8003242:	4613      	mov	r3, r2
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	1a9b      	subs	r3, r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	4413      	add	r3, r2
 8003252:	3304      	adds	r3, #4
 8003254:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2201      	movs	r2, #1
 8003260:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003262:	78fb      	ldrb	r3, [r7, #3]
 8003264:	f003 030f 	and.w	r3, r3, #15
 8003268:	b2da      	uxtb	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <HAL_PCD_EP_SetStall+0x82>
 8003278:	2302      	movs	r3, #2
 800327a:	e01e      	b.n	80032ba <HAL_PCD_EP_SetStall+0xc0>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68f9      	ldr	r1, [r7, #12]
 800328a:	4618      	mov	r0, r3
 800328c:	f009 fd4c 	bl	800cd28 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003290:	78fb      	ldrb	r3, [r7, #3]
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10a      	bne.n	80032b0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6818      	ldr	r0, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	b2d9      	uxtb	r1, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80032aa:	461a      	mov	r2, r3
 80032ac:	f009 ff7a 	bl	800d1a4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b084      	sub	sp, #16
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
 80032ca:	460b      	mov	r3, r1
 80032cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80032ce:	78fb      	ldrb	r3, [r7, #3]
 80032d0:	f003 020f 	and.w	r2, r3, #15
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d901      	bls.n	80032e0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e042      	b.n	8003366 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	da0f      	bge.n	8003308 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032e8:	78fb      	ldrb	r3, [r7, #3]
 80032ea:	f003 020f 	and.w	r2, r3, #15
 80032ee:	4613      	mov	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	3338      	adds	r3, #56	; 0x38
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	4413      	add	r3, r2
 80032fc:	3304      	adds	r3, #4
 80032fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2201      	movs	r2, #1
 8003304:	705a      	strb	r2, [r3, #1]
 8003306:	e00f      	b.n	8003328 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003308:	78fb      	ldrb	r3, [r7, #3]
 800330a:	f003 020f 	and.w	r2, r3, #15
 800330e:	4613      	mov	r3, r2
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	1a9b      	subs	r3, r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	4413      	add	r3, r2
 800331e:	3304      	adds	r3, #4
 8003320:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800332e:	78fb      	ldrb	r3, [r7, #3]
 8003330:	f003 030f 	and.w	r3, r3, #15
 8003334:	b2da      	uxtb	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003340:	2b01      	cmp	r3, #1
 8003342:	d101      	bne.n	8003348 <HAL_PCD_EP_ClrStall+0x86>
 8003344:	2302      	movs	r3, #2
 8003346:	e00e      	b.n	8003366 <HAL_PCD_EP_ClrStall+0xa4>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68f9      	ldr	r1, [r7, #12]
 8003356:	4618      	mov	r0, r3
 8003358:	f009 fd54 	bl	800ce04 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b082      	sub	sp, #8
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	460b      	mov	r3, r1
 8003378:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003380:	2b01      	cmp	r3, #1
 8003382:	d101      	bne.n	8003388 <HAL_PCD_EP_Flush+0x1a>
 8003384:	2302      	movs	r3, #2
 8003386:	e01b      	b.n	80033c0 <HAL_PCD_EP_Flush+0x52>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8003390:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003394:	2b00      	cmp	r3, #0
 8003396:	da09      	bge.n	80033ac <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	78fb      	ldrb	r3, [r7, #3]
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	4619      	mov	r1, r3
 80033a4:	4610      	mov	r0, r2
 80033a6:	f008 ff2b 	bl	800c200 <USB_FlushTxFifo>
 80033aa:	e004      	b.n	80033b6 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f008 ff4b 	bl	800c24c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b08a      	sub	sp, #40	; 0x28
 80033cc:	af02      	add	r7, sp, #8
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	4613      	mov	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	1a9b      	subs	r3, r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	3338      	adds	r3, #56	; 0x38
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	4413      	add	r3, r2
 80033ec:	3304      	adds	r3, #4
 80033ee:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	699a      	ldr	r2, [r3, #24]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d901      	bls.n	8003400 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e06c      	b.n	80034da <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	695a      	ldr	r2, [r3, #20]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	69fa      	ldr	r2, [r7, #28]
 8003412:	429a      	cmp	r2, r3
 8003414:	d902      	bls.n	800341c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	3303      	adds	r3, #3
 8003420:	089b      	lsrs	r3, r3, #2
 8003422:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003424:	e02b      	b.n	800347e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	695a      	ldr	r2, [r3, #20]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	69fa      	ldr	r2, [r7, #28]
 8003438:	429a      	cmp	r2, r3
 800343a:	d902      	bls.n	8003442 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	3303      	adds	r3, #3
 8003446:	089b      	lsrs	r3, r3, #2
 8003448:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	68d9      	ldr	r1, [r3, #12]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	b2da      	uxtb	r2, r3
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800345a:	b2db      	uxtb	r3, r3
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	4603      	mov	r3, r0
 8003460:	6978      	ldr	r0, [r7, #20]
 8003462:	f009 fc03 	bl	800cc6c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	441a      	add	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	699a      	ldr	r2, [r3, #24]
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	441a      	add	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	015a      	lsls	r2, r3, #5
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	4413      	add	r3, r2
 8003486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	b29b      	uxth	r3, r3
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	429a      	cmp	r2, r3
 8003492:	d809      	bhi.n	80034a8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	699a      	ldr	r2, [r3, #24]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800349c:	429a      	cmp	r2, r3
 800349e:	d203      	bcs.n	80034a8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1be      	bne.n	8003426 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	695a      	ldr	r2, [r3, #20]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d811      	bhi.n	80034d8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	2201      	movs	r2, #1
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	43db      	mvns	r3, r3
 80034ce:	6939      	ldr	r1, [r7, #16]
 80034d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034d4:	4013      	ands	r3, r2
 80034d6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3720      	adds	r7, #32
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
	...

080034e4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	333c      	adds	r3, #60	; 0x3c
 80034fc:	3304      	adds	r3, #4
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	015a      	lsls	r2, r3, #5
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	4413      	add	r3, r2
 800350a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	2b01      	cmp	r3, #1
 8003518:	f040 80a0 	bne.w	800365c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	f003 0308 	and.w	r3, r3, #8
 8003522:	2b00      	cmp	r3, #0
 8003524:	d015      	beq.n	8003552 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	4a72      	ldr	r2, [pc, #456]	; (80036f4 <PCD_EP_OutXfrComplete_int+0x210>)
 800352a:	4293      	cmp	r3, r2
 800352c:	f240 80dd 	bls.w	80036ea <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 80d7 	beq.w	80036ea <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	015a      	lsls	r2, r3, #5
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	4413      	add	r3, r2
 8003544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003548:	461a      	mov	r2, r3
 800354a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800354e:	6093      	str	r3, [r2, #8]
 8003550:	e0cb      	b.n	80036ea <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	f003 0320 	and.w	r3, r3, #32
 8003558:	2b00      	cmp	r3, #0
 800355a:	d009      	beq.n	8003570 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	015a      	lsls	r2, r3, #5
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	4413      	add	r3, r2
 8003564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003568:	461a      	mov	r2, r3
 800356a:	2320      	movs	r3, #32
 800356c:	6093      	str	r3, [r2, #8]
 800356e:	e0bc      	b.n	80036ea <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003576:	2b00      	cmp	r3, #0
 8003578:	f040 80b7 	bne.w	80036ea <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4a5d      	ldr	r2, [pc, #372]	; (80036f4 <PCD_EP_OutXfrComplete_int+0x210>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d90f      	bls.n	80035a4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00a      	beq.n	80035a4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	015a      	lsls	r2, r3, #5
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	4413      	add	r3, r2
 8003596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800359a:	461a      	mov	r2, r3
 800359c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035a0:	6093      	str	r3, [r2, #8]
 80035a2:	e0a2      	b.n	80036ea <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	4613      	mov	r3, r2
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	1a9b      	subs	r3, r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80035b6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	0159      	lsls	r1, r3, #5
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	440b      	add	r3, r1
 80035c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80035ca:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	4613      	mov	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	1a9b      	subs	r3, r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4403      	add	r3, r0
 80035da:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80035de:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80035e0:	6879      	ldr	r1, [r7, #4]
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	4613      	mov	r3, r2
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	1a9b      	subs	r3, r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80035f2:	6819      	ldr	r1, [r3, #0]
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	4613      	mov	r3, r2
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	1a9b      	subs	r3, r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4403      	add	r3, r0
 8003602:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4419      	add	r1, r3
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	4613      	mov	r3, r2
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	1a9b      	subs	r3, r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4403      	add	r3, r0
 8003618:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800361c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d114      	bne.n	800364e <PCD_EP_OutXfrComplete_int+0x16a>
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	4613      	mov	r3, r2
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	1a9b      	subs	r3, r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d108      	bne.n	800364e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6818      	ldr	r0, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003646:	461a      	mov	r2, r3
 8003648:	2101      	movs	r1, #1
 800364a:	f009 fdab 	bl	800d1a4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	b2db      	uxtb	r3, r3
 8003652:	4619      	mov	r1, r3
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f011 fd23 	bl	80150a0 <HAL_PCD_DataOutStageCallback>
 800365a:	e046      	b.n	80036ea <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4a26      	ldr	r2, [pc, #152]	; (80036f8 <PCD_EP_OutXfrComplete_int+0x214>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d124      	bne.n	80036ae <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00a      	beq.n	8003684 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	015a      	lsls	r2, r3, #5
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	4413      	add	r3, r2
 8003676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800367a:	461a      	mov	r2, r3
 800367c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003680:	6093      	str	r3, [r2, #8]
 8003682:	e032      	b.n	80036ea <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	f003 0320 	and.w	r3, r3, #32
 800368a:	2b00      	cmp	r3, #0
 800368c:	d008      	beq.n	80036a0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	015a      	lsls	r2, r3, #5
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	4413      	add	r3, r2
 8003696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800369a:	461a      	mov	r2, r3
 800369c:	2320      	movs	r3, #32
 800369e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	4619      	mov	r1, r3
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f011 fcfa 	bl	80150a0 <HAL_PCD_DataOutStageCallback>
 80036ac:	e01d      	b.n	80036ea <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d114      	bne.n	80036de <PCD_EP_OutXfrComplete_int+0x1fa>
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	4613      	mov	r3, r2
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	1a9b      	subs	r3, r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d108      	bne.n	80036de <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6818      	ldr	r0, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80036d6:	461a      	mov	r2, r3
 80036d8:	2100      	movs	r1, #0
 80036da:	f009 fd63 	bl	800d1a4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	4619      	mov	r1, r3
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f011 fcdb 	bl	80150a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	4f54300a 	.word	0x4f54300a
 80036f8:	4f54310a 	.word	0x4f54310a

080036fc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	333c      	adds	r3, #60	; 0x3c
 8003714:	3304      	adds	r3, #4
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	015a      	lsls	r2, r3, #5
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	4413      	add	r3, r2
 8003722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	4a15      	ldr	r2, [pc, #84]	; (8003784 <PCD_EP_OutSetupPacket_int+0x88>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d90e      	bls.n	8003750 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003738:	2b00      	cmp	r3, #0
 800373a:	d009      	beq.n	8003750 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	015a      	lsls	r2, r3, #5
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	4413      	add	r3, r2
 8003744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003748:	461a      	mov	r2, r3
 800374a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800374e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f011 fc93 	bl	801507c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	4a0a      	ldr	r2, [pc, #40]	; (8003784 <PCD_EP_OutSetupPacket_int+0x88>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d90c      	bls.n	8003778 <PCD_EP_OutSetupPacket_int+0x7c>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d108      	bne.n	8003778 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6818      	ldr	r0, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003770:	461a      	mov	r2, r3
 8003772:	2101      	movs	r1, #1
 8003774:	f009 fd16 	bl	800d1a4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	4f54300a 	.word	0x4f54300a

08003788 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	460b      	mov	r3, r1
 8003792:	70fb      	strb	r3, [r7, #3]
 8003794:	4613      	mov	r3, r2
 8003796:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80037a0:	78fb      	ldrb	r3, [r7, #3]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d107      	bne.n	80037b6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80037a6:	883b      	ldrh	r3, [r7, #0]
 80037a8:	0419      	lsls	r1, r3, #16
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	629a      	str	r2, [r3, #40]	; 0x28
 80037b4:	e028      	b.n	8003808 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037bc:	0c1b      	lsrs	r3, r3, #16
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	4413      	add	r3, r2
 80037c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80037c4:	2300      	movs	r3, #0
 80037c6:	73fb      	strb	r3, [r7, #15]
 80037c8:	e00d      	b.n	80037e6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
 80037d0:	3340      	adds	r3, #64	; 0x40
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	0c1b      	lsrs	r3, r3, #16
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	4413      	add	r3, r2
 80037de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80037e0:	7bfb      	ldrb	r3, [r7, #15]
 80037e2:	3301      	adds	r3, #1
 80037e4:	73fb      	strb	r3, [r7, #15]
 80037e6:	7bfa      	ldrb	r2, [r7, #15]
 80037e8:	78fb      	ldrb	r3, [r7, #3]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d3ec      	bcc.n	80037ca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80037f0:	883b      	ldrh	r3, [r7, #0]
 80037f2:	0418      	lsls	r0, r3, #16
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6819      	ldr	r1, [r3, #0]
 80037f8:	78fb      	ldrb	r3, [r7, #3]
 80037fa:	3b01      	subs	r3, #1
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	4302      	orrs	r2, r0
 8003800:	3340      	adds	r3, #64	; 0x40
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
 800381e:	460b      	mov	r3, r1
 8003820:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	887a      	ldrh	r2, [r7, #2]
 8003828:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003866:	4b05      	ldr	r3, [pc, #20]	; (800387c <HAL_PCDEx_ActivateLPM+0x44>)
 8003868:	4313      	orrs	r3, r2
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	10000003 	.word	0x10000003

08003880 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	460b      	mov	r3, r1
 800388a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80038a0:	4b19      	ldr	r3, [pc, #100]	; (8003908 <HAL_PWREx_ConfigSupply+0x70>)
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	d00a      	beq.n	80038c2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80038ac:	4b16      	ldr	r3, [pc, #88]	; (8003908 <HAL_PWREx_ConfigSupply+0x70>)
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d001      	beq.n	80038be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e01f      	b.n	80038fe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80038be:	2300      	movs	r3, #0
 80038c0:	e01d      	b.n	80038fe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80038c2:	4b11      	ldr	r3, [pc, #68]	; (8003908 <HAL_PWREx_ConfigSupply+0x70>)
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	f023 0207 	bic.w	r2, r3, #7
 80038ca:	490f      	ldr	r1, [pc, #60]	; (8003908 <HAL_PWREx_ConfigSupply+0x70>)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80038d2:	f7fd fe13 	bl	80014fc <HAL_GetTick>
 80038d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80038d8:	e009      	b.n	80038ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80038da:	f7fd fe0f 	bl	80014fc <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038e8:	d901      	bls.n	80038ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e007      	b.n	80038fe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80038ee:	4b06      	ldr	r3, [pc, #24]	; (8003908 <HAL_PWREx_ConfigSupply+0x70>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038fa:	d1ee      	bne.n	80038da <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	58024800 	.word	0x58024800

0800390c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003910:	4b05      	ldr	r3, [pc, #20]	; (8003928 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	4a04      	ldr	r2, [pc, #16]	; (8003928 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003916:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800391a:	60d3      	str	r3, [r2, #12]
}
 800391c:	bf00      	nop
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	58024800 	.word	0x58024800

0800392c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b08c      	sub	sp, #48	; 0x30
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e3c4      	b.n	80040c8 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 8087 	beq.w	8003a5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800394c:	4ba2      	ldr	r3, [pc, #648]	; (8003bd8 <HAL_RCC_OscConfig+0x2ac>)
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003954:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003956:	4ba0      	ldr	r3, [pc, #640]	; (8003bd8 <HAL_RCC_OscConfig+0x2ac>)
 8003958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800395c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395e:	2b10      	cmp	r3, #16
 8003960:	d007      	beq.n	8003972 <HAL_RCC_OscConfig+0x46>
 8003962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003964:	2b18      	cmp	r3, #24
 8003966:	d110      	bne.n	800398a <HAL_RCC_OscConfig+0x5e>
 8003968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d10b      	bne.n	800398a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003972:	4b99      	ldr	r3, [pc, #612]	; (8003bd8 <HAL_RCC_OscConfig+0x2ac>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d06c      	beq.n	8003a58 <HAL_RCC_OscConfig+0x12c>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d168      	bne.n	8003a58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e39e      	b.n	80040c8 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003992:	d106      	bne.n	80039a2 <HAL_RCC_OscConfig+0x76>
 8003994:	4b90      	ldr	r3, [pc, #576]	; (8003bd8 <HAL_RCC_OscConfig+0x2ac>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a8f      	ldr	r2, [pc, #572]	; (8003bd8 <HAL_RCC_OscConfig+0x2ac>)
 800399a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800399e:	6013      	str	r3, [r2, #0]
 80039a0:	e02e      	b.n	8003a00 <HAL_RCC_OscConfig+0xd4>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10c      	bne.n	80039c4 <HAL_RCC_OscConfig+0x98>
 80039aa:	4b8b      	ldr	r3, [pc, #556]	; (8003bd8 <HAL_RCC_OscConfig+0x2ac>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a8a      	ldr	r2, [pc, #552]	; (8003bd8 <HAL_RCC_OscConfig+0x2ac>)
 80039b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	4b88      	ldr	r3, [pc, #544]	; (8003bd8 <HAL_RCC_OscConfig+0x2ac>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a87      	ldr	r2, [pc, #540]	; (8003bd8 <HAL_RCC_OscConfig+0x2ac>)
 80039bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039c0:	6013      	str	r3, [r2, #0]
 80039c2:	e01d      	b.n	8003a00 <HAL_RCC_OscConfig+0xd4>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039cc:	d10c      	bne.n	80039e8 <HAL_RCC_OscConfig+0xbc>
 80039ce:	4b82      	ldr	r3, [pc, #520]	; (8003bd8 <HAL_RCC_OscConfig+0x2ac>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a81      	ldr	r2, [pc, #516]	; (8003bd8 <HAL_RCC_OscConfig+0x2ac>)
 80039d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	4b7f      	ldr	r3, [pc, #508]	; (8003bd8 <HAL_RCC_OscConfig+0x2ac>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a7e      	ldr	r2, [pc, #504]	; (8003bd8 <HAL_RCC_OscConfig+0x2ac>)
 80039e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	e00b      	b.n	8003a00 <HAL_RCC_OscConfig+0xd4>
 80039e8:	4b7b      	ldr	r3, [pc, #492]	; (8003bd8 <HAL_RCC_OscConfig+0x2ac>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a7a      	ldr	r2, [pc, #488]	; (8003bd8 <HAL_RCC_OscConfig+0x2ac>)
 80039ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f2:	6013      	str	r3, [r2, #0]
 80039f4:	4b78      	ldr	r3, [pc, #480]	; (8003bd8 <HAL_RCC_OscConfig+0x2ac>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a77      	ldr	r2, [pc, #476]	; (8003bd8 <HAL_RCC_OscConfig+0x2ac>)
 80039fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d013      	beq.n	8003a30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a08:	f7fd fd78 	bl	80014fc <HAL_GetTick>
 8003a0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a10:	f7fd fd74 	bl	80014fc <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b64      	cmp	r3, #100	; 0x64
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e352      	b.n	80040c8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a22:	4b6d      	ldr	r3, [pc, #436]	; (8003bd8 <HAL_RCC_OscConfig+0x2ac>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0f0      	beq.n	8003a10 <HAL_RCC_OscConfig+0xe4>
 8003a2e:	e014      	b.n	8003a5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a30:	f7fd fd64 	bl	80014fc <HAL_GetTick>
 8003a34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a38:	f7fd fd60 	bl	80014fc <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b64      	cmp	r3, #100	; 0x64
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e33e      	b.n	80040c8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a4a:	4b63      	ldr	r3, [pc, #396]	; (8003bd8 <HAL_RCC_OscConfig+0x2ac>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1f0      	bne.n	8003a38 <HAL_RCC_OscConfig+0x10c>
 8003a56:	e000      	b.n	8003a5a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 8092 	beq.w	8003b8c <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a68:	4b5b      	ldr	r3, [pc, #364]	; (8003bd8 <HAL_RCC_OscConfig+0x2ac>)
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a70:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a72:	4b59      	ldr	r3, [pc, #356]	; (8003bd8 <HAL_RCC_OscConfig+0x2ac>)
 8003a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a76:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003a78:	6a3b      	ldr	r3, [r7, #32]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d007      	beq.n	8003a8e <HAL_RCC_OscConfig+0x162>
 8003a7e:	6a3b      	ldr	r3, [r7, #32]
 8003a80:	2b18      	cmp	r3, #24
 8003a82:	d12d      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x1b4>
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d128      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a8e:	4b52      	ldr	r3, [pc, #328]	; (8003bd8 <HAL_RCC_OscConfig+0x2ac>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0304 	and.w	r3, r3, #4
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d005      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x17a>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e310      	b.n	80040c8 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa6:	f7fd fd57 	bl	8001558 <HAL_GetREVID>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	f241 0303 	movw	r3, #4099	; 0x1003
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d80a      	bhi.n	8003aca <HAL_RCC_OscConfig+0x19e>
 8003ab4:	4b48      	ldr	r3, [pc, #288]	; (8003bd8 <HAL_RCC_OscConfig+0x2ac>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	031b      	lsls	r3, r3, #12
 8003ac2:	4945      	ldr	r1, [pc, #276]	; (8003bd8 <HAL_RCC_OscConfig+0x2ac>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ac8:	e060      	b.n	8003b8c <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aca:	4b43      	ldr	r3, [pc, #268]	; (8003bd8 <HAL_RCC_OscConfig+0x2ac>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	061b      	lsls	r3, r3, #24
 8003ad8:	493f      	ldr	r1, [pc, #252]	; (8003bd8 <HAL_RCC_OscConfig+0x2ac>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ade:	e055      	b.n	8003b8c <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d038      	beq.n	8003b5a <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003ae8:	4b3b      	ldr	r3, [pc, #236]	; (8003bd8 <HAL_RCC_OscConfig+0x2ac>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f023 0219 	bic.w	r2, r3, #25
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	4938      	ldr	r1, [pc, #224]	; (8003bd8 <HAL_RCC_OscConfig+0x2ac>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afa:	f7fd fcff 	bl	80014fc <HAL_GetTick>
 8003afe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b00:	e008      	b.n	8003b14 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b02:	f7fd fcfb 	bl	80014fc <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e2d9      	b.n	80040c8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b14:	4b30      	ldr	r3, [pc, #192]	; (8003bd8 <HAL_RCC_OscConfig+0x2ac>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d0f0      	beq.n	8003b02 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b20:	f7fd fd1a 	bl	8001558 <HAL_GetREVID>
 8003b24:	4602      	mov	r2, r0
 8003b26:	f241 0303 	movw	r3, #4099	; 0x1003
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d80a      	bhi.n	8003b44 <HAL_RCC_OscConfig+0x218>
 8003b2e:	4b2a      	ldr	r3, [pc, #168]	; (8003bd8 <HAL_RCC_OscConfig+0x2ac>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	031b      	lsls	r3, r3, #12
 8003b3c:	4926      	ldr	r1, [pc, #152]	; (8003bd8 <HAL_RCC_OscConfig+0x2ac>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	604b      	str	r3, [r1, #4]
 8003b42:	e023      	b.n	8003b8c <HAL_RCC_OscConfig+0x260>
 8003b44:	4b24      	ldr	r3, [pc, #144]	; (8003bd8 <HAL_RCC_OscConfig+0x2ac>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	061b      	lsls	r3, r3, #24
 8003b52:	4921      	ldr	r1, [pc, #132]	; (8003bd8 <HAL_RCC_OscConfig+0x2ac>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	604b      	str	r3, [r1, #4]
 8003b58:	e018      	b.n	8003b8c <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b5a:	4b1f      	ldr	r3, [pc, #124]	; (8003bd8 <HAL_RCC_OscConfig+0x2ac>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a1e      	ldr	r2, [pc, #120]	; (8003bd8 <HAL_RCC_OscConfig+0x2ac>)
 8003b60:	f023 0301 	bic.w	r3, r3, #1
 8003b64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b66:	f7fd fcc9 	bl	80014fc <HAL_GetTick>
 8003b6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b6e:	f7fd fcc5 	bl	80014fc <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e2a3      	b.n	80040c8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b80:	4b15      	ldr	r3, [pc, #84]	; (8003bd8 <HAL_RCC_OscConfig+0x2ac>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1f0      	bne.n	8003b6e <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0310 	and.w	r3, r3, #16
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 8091 	beq.w	8003cbc <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b9a:	4b0f      	ldr	r3, [pc, #60]	; (8003bd8 <HAL_RCC_OscConfig+0x2ac>)
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ba2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ba4:	4b0c      	ldr	r3, [pc, #48]	; (8003bd8 <HAL_RCC_OscConfig+0x2ac>)
 8003ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	2b08      	cmp	r3, #8
 8003bae:	d007      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x294>
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	2b18      	cmp	r3, #24
 8003bb4:	d12f      	bne.n	8003c16 <HAL_RCC_OscConfig+0x2ea>
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f003 0303 	and.w	r3, r3, #3
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d12a      	bne.n	8003c16 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bc0:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <HAL_RCC_OscConfig+0x2ac>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d007      	beq.n	8003bdc <HAL_RCC_OscConfig+0x2b0>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	69db      	ldr	r3, [r3, #28]
 8003bd0:	2b80      	cmp	r3, #128	; 0x80
 8003bd2:	d003      	beq.n	8003bdc <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e277      	b.n	80040c8 <HAL_RCC_OscConfig+0x79c>
 8003bd8:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bdc:	f7fd fcbc 	bl	8001558 <HAL_GetREVID>
 8003be0:	4602      	mov	r2, r0
 8003be2:	f241 0303 	movw	r3, #4099	; 0x1003
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d80a      	bhi.n	8003c00 <HAL_RCC_OscConfig+0x2d4>
 8003bea:	4ba2      	ldr	r3, [pc, #648]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	069b      	lsls	r3, r3, #26
 8003bf8:	499e      	ldr	r1, [pc, #632]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bfe:	e05d      	b.n	8003cbc <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c00:	4b9c      	ldr	r3, [pc, #624]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	061b      	lsls	r3, r3, #24
 8003c0e:	4999      	ldr	r1, [pc, #612]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c14:	e052      	b.n	8003cbc <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d035      	beq.n	8003c8a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003c1e:	4b95      	ldr	r3, [pc, #596]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a94      	ldr	r2, [pc, #592]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2a:	f7fd fc67 	bl	80014fc <HAL_GetTick>
 8003c2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c30:	e008      	b.n	8003c44 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003c32:	f7fd fc63 	bl	80014fc <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e241      	b.n	80040c8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c44:	4b8b      	ldr	r3, [pc, #556]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0f0      	beq.n	8003c32 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c50:	f7fd fc82 	bl	8001558 <HAL_GetREVID>
 8003c54:	4602      	mov	r2, r0
 8003c56:	f241 0303 	movw	r3, #4099	; 0x1003
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d80a      	bhi.n	8003c74 <HAL_RCC_OscConfig+0x348>
 8003c5e:	4b85      	ldr	r3, [pc, #532]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	069b      	lsls	r3, r3, #26
 8003c6c:	4981      	ldr	r1, [pc, #516]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	604b      	str	r3, [r1, #4]
 8003c72:	e023      	b.n	8003cbc <HAL_RCC_OscConfig+0x390>
 8003c74:	4b7f      	ldr	r3, [pc, #508]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	061b      	lsls	r3, r3, #24
 8003c82:	497c      	ldr	r1, [pc, #496]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	60cb      	str	r3, [r1, #12]
 8003c88:	e018      	b.n	8003cbc <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003c8a:	4b7a      	ldr	r3, [pc, #488]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a79      	ldr	r2, [pc, #484]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003c90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c96:	f7fd fc31 	bl	80014fc <HAL_GetTick>
 8003c9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003c9e:	f7fd fc2d 	bl	80014fc <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e20b      	b.n	80040c8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003cb0:	4b70      	ldr	r3, [pc, #448]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1f0      	bne.n	8003c9e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0308 	and.w	r3, r3, #8
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d036      	beq.n	8003d36 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d019      	beq.n	8003d04 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cd0:	4b68      	ldr	r3, [pc, #416]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd4:	4a67      	ldr	r2, [pc, #412]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003cd6:	f043 0301 	orr.w	r3, r3, #1
 8003cda:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cdc:	f7fd fc0e 	bl	80014fc <HAL_GetTick>
 8003ce0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ce4:	f7fd fc0a 	bl	80014fc <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e1e8      	b.n	80040c8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cf6:	4b5f      	ldr	r3, [pc, #380]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0f0      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x3b8>
 8003d02:	e018      	b.n	8003d36 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d04:	4b5b      	ldr	r3, [pc, #364]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d08:	4a5a      	ldr	r2, [pc, #360]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003d0a:	f023 0301 	bic.w	r3, r3, #1
 8003d0e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d10:	f7fd fbf4 	bl	80014fc <HAL_GetTick>
 8003d14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d18:	f7fd fbf0 	bl	80014fc <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e1ce      	b.n	80040c8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d2a:	4b52      	ldr	r3, [pc, #328]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1f0      	bne.n	8003d18 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0320 	and.w	r3, r3, #32
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d036      	beq.n	8003db0 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d019      	beq.n	8003d7e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d4a:	4b4a      	ldr	r3, [pc, #296]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a49      	ldr	r2, [pc, #292]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003d50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d54:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d56:	f7fd fbd1 	bl	80014fc <HAL_GetTick>
 8003d5a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d5c:	e008      	b.n	8003d70 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003d5e:	f7fd fbcd 	bl	80014fc <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e1ab      	b.n	80040c8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d70:	4b40      	ldr	r3, [pc, #256]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d0f0      	beq.n	8003d5e <HAL_RCC_OscConfig+0x432>
 8003d7c:	e018      	b.n	8003db0 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d7e:	4b3d      	ldr	r3, [pc, #244]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a3c      	ldr	r2, [pc, #240]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003d84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d88:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d8a:	f7fd fbb7 	bl	80014fc <HAL_GetTick>
 8003d8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d90:	e008      	b.n	8003da4 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003d92:	f7fd fbb3 	bl	80014fc <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e191      	b.n	80040c8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003da4:	4b33      	ldr	r3, [pc, #204]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1f0      	bne.n	8003d92 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 8086 	beq.w	8003eca <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003dbe:	4b2e      	ldr	r3, [pc, #184]	; (8003e78 <HAL_RCC_OscConfig+0x54c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a2d      	ldr	r2, [pc, #180]	; (8003e78 <HAL_RCC_OscConfig+0x54c>)
 8003dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dca:	f7fd fb97 	bl	80014fc <HAL_GetTick>
 8003dce:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003dd2:	f7fd fb93 	bl	80014fc <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b64      	cmp	r3, #100	; 0x64
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e171      	b.n	80040c8 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003de4:	4b24      	ldr	r3, [pc, #144]	; (8003e78 <HAL_RCC_OscConfig+0x54c>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0f0      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d106      	bne.n	8003e06 <HAL_RCC_OscConfig+0x4da>
 8003df8:	4b1e      	ldr	r3, [pc, #120]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfc:	4a1d      	ldr	r2, [pc, #116]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003dfe:	f043 0301 	orr.w	r3, r3, #1
 8003e02:	6713      	str	r3, [r2, #112]	; 0x70
 8003e04:	e02d      	b.n	8003e62 <HAL_RCC_OscConfig+0x536>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10c      	bne.n	8003e28 <HAL_RCC_OscConfig+0x4fc>
 8003e0e:	4b19      	ldr	r3, [pc, #100]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e12:	4a18      	ldr	r2, [pc, #96]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003e14:	f023 0301 	bic.w	r3, r3, #1
 8003e18:	6713      	str	r3, [r2, #112]	; 0x70
 8003e1a:	4b16      	ldr	r3, [pc, #88]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1e:	4a15      	ldr	r2, [pc, #84]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003e20:	f023 0304 	bic.w	r3, r3, #4
 8003e24:	6713      	str	r3, [r2, #112]	; 0x70
 8003e26:	e01c      	b.n	8003e62 <HAL_RCC_OscConfig+0x536>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	2b05      	cmp	r3, #5
 8003e2e:	d10c      	bne.n	8003e4a <HAL_RCC_OscConfig+0x51e>
 8003e30:	4b10      	ldr	r3, [pc, #64]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e34:	4a0f      	ldr	r2, [pc, #60]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003e36:	f043 0304 	orr.w	r3, r3, #4
 8003e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e3c:	4b0d      	ldr	r3, [pc, #52]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e40:	4a0c      	ldr	r2, [pc, #48]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003e42:	f043 0301 	orr.w	r3, r3, #1
 8003e46:	6713      	str	r3, [r2, #112]	; 0x70
 8003e48:	e00b      	b.n	8003e62 <HAL_RCC_OscConfig+0x536>
 8003e4a:	4b0a      	ldr	r3, [pc, #40]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4e:	4a09      	ldr	r2, [pc, #36]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003e50:	f023 0301 	bic.w	r3, r3, #1
 8003e54:	6713      	str	r3, [r2, #112]	; 0x70
 8003e56:	4b07      	ldr	r3, [pc, #28]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5a:	4a06      	ldr	r2, [pc, #24]	; (8003e74 <HAL_RCC_OscConfig+0x548>)
 8003e5c:	f023 0304 	bic.w	r3, r3, #4
 8003e60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d01a      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6a:	f7fd fb47 	bl	80014fc <HAL_GetTick>
 8003e6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e70:	e00f      	b.n	8003e92 <HAL_RCC_OscConfig+0x566>
 8003e72:	bf00      	nop
 8003e74:	58024400 	.word	0x58024400
 8003e78:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e7c:	f7fd fb3e 	bl	80014fc <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e11a      	b.n	80040c8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e92:	4b8f      	ldr	r3, [pc, #572]	; (80040d0 <HAL_RCC_OscConfig+0x7a4>)
 8003e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0ee      	beq.n	8003e7c <HAL_RCC_OscConfig+0x550>
 8003e9e:	e014      	b.n	8003eca <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea0:	f7fd fb2c 	bl	80014fc <HAL_GetTick>
 8003ea4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ea6:	e00a      	b.n	8003ebe <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ea8:	f7fd fb28 	bl	80014fc <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e104      	b.n	80040c8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ebe:	4b84      	ldr	r3, [pc, #528]	; (80040d0 <HAL_RCC_OscConfig+0x7a4>)
 8003ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1ee      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 80f9 	beq.w	80040c6 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003ed4:	4b7e      	ldr	r3, [pc, #504]	; (80040d0 <HAL_RCC_OscConfig+0x7a4>)
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003edc:	2b18      	cmp	r3, #24
 8003ede:	f000 80b4 	beq.w	800404a <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	f040 8095 	bne.w	8004016 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eec:	4b78      	ldr	r3, [pc, #480]	; (80040d0 <HAL_RCC_OscConfig+0x7a4>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a77      	ldr	r2, [pc, #476]	; (80040d0 <HAL_RCC_OscConfig+0x7a4>)
 8003ef2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef8:	f7fd fb00 	bl	80014fc <HAL_GetTick>
 8003efc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f00:	f7fd fafc 	bl	80014fc <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e0da      	b.n	80040c8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f12:	4b6f      	ldr	r3, [pc, #444]	; (80040d0 <HAL_RCC_OscConfig+0x7a4>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1f0      	bne.n	8003f00 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f1e:	4b6c      	ldr	r3, [pc, #432]	; (80040d0 <HAL_RCC_OscConfig+0x7a4>)
 8003f20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f22:	4b6c      	ldr	r3, [pc, #432]	; (80040d4 <HAL_RCC_OscConfig+0x7a8>)
 8003f24:	4013      	ands	r3, r2
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003f2e:	0112      	lsls	r2, r2, #4
 8003f30:	430a      	orrs	r2, r1
 8003f32:	4967      	ldr	r1, [pc, #412]	; (80040d0 <HAL_RCC_OscConfig+0x7a4>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	628b      	str	r3, [r1, #40]	; 0x28
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f46:	3b01      	subs	r3, #1
 8003f48:	025b      	lsls	r3, r3, #9
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f52:	3b01      	subs	r3, #1
 8003f54:	041b      	lsls	r3, r3, #16
 8003f56:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f60:	3b01      	subs	r3, #1
 8003f62:	061b      	lsls	r3, r3, #24
 8003f64:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003f68:	4959      	ldr	r1, [pc, #356]	; (80040d0 <HAL_RCC_OscConfig+0x7a4>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003f6e:	4b58      	ldr	r3, [pc, #352]	; (80040d0 <HAL_RCC_OscConfig+0x7a4>)
 8003f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f72:	4a57      	ldr	r2, [pc, #348]	; (80040d0 <HAL_RCC_OscConfig+0x7a4>)
 8003f74:	f023 0301 	bic.w	r3, r3, #1
 8003f78:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f7a:	4b55      	ldr	r3, [pc, #340]	; (80040d0 <HAL_RCC_OscConfig+0x7a4>)
 8003f7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f7e:	4b56      	ldr	r3, [pc, #344]	; (80040d8 <HAL_RCC_OscConfig+0x7ac>)
 8003f80:	4013      	ands	r3, r2
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003f86:	00d2      	lsls	r2, r2, #3
 8003f88:	4951      	ldr	r1, [pc, #324]	; (80040d0 <HAL_RCC_OscConfig+0x7a4>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003f8e:	4b50      	ldr	r3, [pc, #320]	; (80040d0 <HAL_RCC_OscConfig+0x7a4>)
 8003f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f92:	f023 020c 	bic.w	r2, r3, #12
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	494d      	ldr	r1, [pc, #308]	; (80040d0 <HAL_RCC_OscConfig+0x7a4>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003fa0:	4b4b      	ldr	r3, [pc, #300]	; (80040d0 <HAL_RCC_OscConfig+0x7a4>)
 8003fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa4:	f023 0202 	bic.w	r2, r3, #2
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fac:	4948      	ldr	r1, [pc, #288]	; (80040d0 <HAL_RCC_OscConfig+0x7a4>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003fb2:	4b47      	ldr	r3, [pc, #284]	; (80040d0 <HAL_RCC_OscConfig+0x7a4>)
 8003fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb6:	4a46      	ldr	r2, [pc, #280]	; (80040d0 <HAL_RCC_OscConfig+0x7a4>)
 8003fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fbc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fbe:	4b44      	ldr	r3, [pc, #272]	; (80040d0 <HAL_RCC_OscConfig+0x7a4>)
 8003fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc2:	4a43      	ldr	r2, [pc, #268]	; (80040d0 <HAL_RCC_OscConfig+0x7a4>)
 8003fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fc8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003fca:	4b41      	ldr	r3, [pc, #260]	; (80040d0 <HAL_RCC_OscConfig+0x7a4>)
 8003fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fce:	4a40      	ldr	r2, [pc, #256]	; (80040d0 <HAL_RCC_OscConfig+0x7a4>)
 8003fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fd4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003fd6:	4b3e      	ldr	r3, [pc, #248]	; (80040d0 <HAL_RCC_OscConfig+0x7a4>)
 8003fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fda:	4a3d      	ldr	r2, [pc, #244]	; (80040d0 <HAL_RCC_OscConfig+0x7a4>)
 8003fdc:	f043 0301 	orr.w	r3, r3, #1
 8003fe0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fe2:	4b3b      	ldr	r3, [pc, #236]	; (80040d0 <HAL_RCC_OscConfig+0x7a4>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a3a      	ldr	r2, [pc, #232]	; (80040d0 <HAL_RCC_OscConfig+0x7a4>)
 8003fe8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fee:	f7fd fa85 	bl	80014fc <HAL_GetTick>
 8003ff2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ff4:	e008      	b.n	8004008 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ff6:	f7fd fa81 	bl	80014fc <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b02      	cmp	r3, #2
 8004002:	d901      	bls.n	8004008 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e05f      	b.n	80040c8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004008:	4b31      	ldr	r3, [pc, #196]	; (80040d0 <HAL_RCC_OscConfig+0x7a4>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d0f0      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x6ca>
 8004014:	e057      	b.n	80040c6 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004016:	4b2e      	ldr	r3, [pc, #184]	; (80040d0 <HAL_RCC_OscConfig+0x7a4>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a2d      	ldr	r2, [pc, #180]	; (80040d0 <HAL_RCC_OscConfig+0x7a4>)
 800401c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004020:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004022:	f7fd fa6b 	bl	80014fc <HAL_GetTick>
 8004026:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004028:	e008      	b.n	800403c <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800402a:	f7fd fa67 	bl	80014fc <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e045      	b.n	80040c8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800403c:	4b24      	ldr	r3, [pc, #144]	; (80040d0 <HAL_RCC_OscConfig+0x7a4>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1f0      	bne.n	800402a <HAL_RCC_OscConfig+0x6fe>
 8004048:	e03d      	b.n	80040c6 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800404a:	4b21      	ldr	r3, [pc, #132]	; (80040d0 <HAL_RCC_OscConfig+0x7a4>)
 800404c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004050:	4b1f      	ldr	r3, [pc, #124]	; (80040d0 <HAL_RCC_OscConfig+0x7a4>)
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004054:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	2b01      	cmp	r3, #1
 800405c:	d031      	beq.n	80040c2 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	f003 0203 	and.w	r2, r3, #3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004068:	429a      	cmp	r2, r3
 800406a:	d12a      	bne.n	80040c2 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	091b      	lsrs	r3, r3, #4
 8004070:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004078:	429a      	cmp	r2, r3
 800407a:	d122      	bne.n	80040c2 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004086:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004088:	429a      	cmp	r2, r3
 800408a:	d11a      	bne.n	80040c2 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	0a5b      	lsrs	r3, r3, #9
 8004090:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004098:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800409a:	429a      	cmp	r2, r3
 800409c:	d111      	bne.n	80040c2 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	0c1b      	lsrs	r3, r3, #16
 80040a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040aa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d108      	bne.n	80040c2 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	0e1b      	lsrs	r3, r3, #24
 80040b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040bc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040be:	429a      	cmp	r2, r3
 80040c0:	d001      	beq.n	80040c6 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3730      	adds	r7, #48	; 0x30
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	58024400 	.word	0x58024400
 80040d4:	fffffc0c 	.word	0xfffffc0c
 80040d8:	ffff0007 	.word	0xffff0007

080040dc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e19c      	b.n	800442a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040f0:	4b8a      	ldr	r3, [pc, #552]	; (800431c <HAL_RCC_ClockConfig+0x240>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 030f 	and.w	r3, r3, #15
 80040f8:	683a      	ldr	r2, [r7, #0]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d910      	bls.n	8004120 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040fe:	4b87      	ldr	r3, [pc, #540]	; (800431c <HAL_RCC_ClockConfig+0x240>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f023 020f 	bic.w	r2, r3, #15
 8004106:	4985      	ldr	r1, [pc, #532]	; (800431c <HAL_RCC_ClockConfig+0x240>)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	4313      	orrs	r3, r2
 800410c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800410e:	4b83      	ldr	r3, [pc, #524]	; (800431c <HAL_RCC_ClockConfig+0x240>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 030f 	and.w	r3, r3, #15
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	429a      	cmp	r2, r3
 800411a:	d001      	beq.n	8004120 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e184      	b.n	800442a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b00      	cmp	r3, #0
 800412a:	d010      	beq.n	800414e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	691a      	ldr	r2, [r3, #16]
 8004130:	4b7b      	ldr	r3, [pc, #492]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004138:	429a      	cmp	r2, r3
 800413a:	d908      	bls.n	800414e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800413c:	4b78      	ldr	r3, [pc, #480]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	4975      	ldr	r1, [pc, #468]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 800414a:	4313      	orrs	r3, r2
 800414c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0308 	and.w	r3, r3, #8
 8004156:	2b00      	cmp	r3, #0
 8004158:	d010      	beq.n	800417c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	695a      	ldr	r2, [r3, #20]
 800415e:	4b70      	ldr	r3, [pc, #448]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004166:	429a      	cmp	r2, r3
 8004168:	d908      	bls.n	800417c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800416a:	4b6d      	ldr	r3, [pc, #436]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	496a      	ldr	r1, [pc, #424]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 8004178:	4313      	orrs	r3, r2
 800417a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0310 	and.w	r3, r3, #16
 8004184:	2b00      	cmp	r3, #0
 8004186:	d010      	beq.n	80041aa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	699a      	ldr	r2, [r3, #24]
 800418c:	4b64      	ldr	r3, [pc, #400]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004194:	429a      	cmp	r2, r3
 8004196:	d908      	bls.n	80041aa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004198:	4b61      	ldr	r3, [pc, #388]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 800419a:	69db      	ldr	r3, [r3, #28]
 800419c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	495e      	ldr	r1, [pc, #376]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0320 	and.w	r3, r3, #32
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d010      	beq.n	80041d8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	69da      	ldr	r2, [r3, #28]
 80041ba:	4b59      	ldr	r3, [pc, #356]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d908      	bls.n	80041d8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80041c6:	4b56      	ldr	r3, [pc, #344]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	4953      	ldr	r1, [pc, #332]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d010      	beq.n	8004206 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	4b4d      	ldr	r3, [pc, #308]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	f003 030f 	and.w	r3, r3, #15
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d908      	bls.n	8004206 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041f4:	4b4a      	ldr	r3, [pc, #296]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	f023 020f 	bic.w	r2, r3, #15
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	4947      	ldr	r1, [pc, #284]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 8004202:	4313      	orrs	r3, r2
 8004204:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	d055      	beq.n	80042be <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004212:	4b43      	ldr	r3, [pc, #268]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	4940      	ldr	r1, [pc, #256]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 8004220:	4313      	orrs	r3, r2
 8004222:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	2b02      	cmp	r3, #2
 800422a:	d107      	bne.n	800423c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800422c:	4b3c      	ldr	r3, [pc, #240]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d121      	bne.n	800427c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e0f6      	b.n	800442a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	2b03      	cmp	r3, #3
 8004242:	d107      	bne.n	8004254 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004244:	4b36      	ldr	r3, [pc, #216]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d115      	bne.n	800427c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e0ea      	b.n	800442a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d107      	bne.n	800426c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800425c:	4b30      	ldr	r3, [pc, #192]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004264:	2b00      	cmp	r3, #0
 8004266:	d109      	bne.n	800427c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e0de      	b.n	800442a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800426c:	4b2c      	ldr	r3, [pc, #176]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	d101      	bne.n	800427c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e0d6      	b.n	800442a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800427c:	4b28      	ldr	r3, [pc, #160]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	f023 0207 	bic.w	r2, r3, #7
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	4925      	ldr	r1, [pc, #148]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 800428a:	4313      	orrs	r3, r2
 800428c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428e:	f7fd f935 	bl	80014fc <HAL_GetTick>
 8004292:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004294:	e00a      	b.n	80042ac <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004296:	f7fd f931 	bl	80014fc <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d901      	bls.n	80042ac <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e0be      	b.n	800442a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ac:	4b1c      	ldr	r3, [pc, #112]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d1eb      	bne.n	8004296 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d010      	beq.n	80042ec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68da      	ldr	r2, [r3, #12]
 80042ce:	4b14      	ldr	r3, [pc, #80]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d208      	bcs.n	80042ec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042da:	4b11      	ldr	r3, [pc, #68]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	f023 020f 	bic.w	r2, r3, #15
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	490e      	ldr	r1, [pc, #56]	; (8004320 <HAL_RCC_ClockConfig+0x244>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042ec:	4b0b      	ldr	r3, [pc, #44]	; (800431c <HAL_RCC_ClockConfig+0x240>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 030f 	and.w	r3, r3, #15
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d214      	bcs.n	8004324 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042fa:	4b08      	ldr	r3, [pc, #32]	; (800431c <HAL_RCC_ClockConfig+0x240>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f023 020f 	bic.w	r2, r3, #15
 8004302:	4906      	ldr	r1, [pc, #24]	; (800431c <HAL_RCC_ClockConfig+0x240>)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	4313      	orrs	r3, r2
 8004308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800430a:	4b04      	ldr	r3, [pc, #16]	; (800431c <HAL_RCC_ClockConfig+0x240>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 030f 	and.w	r3, r3, #15
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	429a      	cmp	r2, r3
 8004316:	d005      	beq.n	8004324 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e086      	b.n	800442a <HAL_RCC_ClockConfig+0x34e>
 800431c:	52002000 	.word	0x52002000
 8004320:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b00      	cmp	r3, #0
 800432e:	d010      	beq.n	8004352 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	4b3f      	ldr	r3, [pc, #252]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800433c:	429a      	cmp	r2, r3
 800433e:	d208      	bcs.n	8004352 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004340:	4b3c      	ldr	r3, [pc, #240]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	4939      	ldr	r1, [pc, #228]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 800434e:	4313      	orrs	r3, r2
 8004350:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	2b00      	cmp	r3, #0
 800435c:	d010      	beq.n	8004380 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	695a      	ldr	r2, [r3, #20]
 8004362:	4b34      	ldr	r3, [pc, #208]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800436a:	429a      	cmp	r2, r3
 800436c:	d208      	bcs.n	8004380 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800436e:	4b31      	ldr	r3, [pc, #196]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	492e      	ldr	r1, [pc, #184]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 800437c:	4313      	orrs	r3, r2
 800437e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0310 	and.w	r3, r3, #16
 8004388:	2b00      	cmp	r3, #0
 800438a:	d010      	beq.n	80043ae <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	699a      	ldr	r2, [r3, #24]
 8004390:	4b28      	ldr	r3, [pc, #160]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004398:	429a      	cmp	r2, r3
 800439a:	d208      	bcs.n	80043ae <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800439c:	4b25      	ldr	r3, [pc, #148]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	4922      	ldr	r1, [pc, #136]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0320 	and.w	r3, r3, #32
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d010      	beq.n	80043dc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	69da      	ldr	r2, [r3, #28]
 80043be:	4b1d      	ldr	r3, [pc, #116]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d208      	bcs.n	80043dc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80043ca:	4b1a      	ldr	r3, [pc, #104]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	4917      	ldr	r1, [pc, #92]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80043dc:	f000 f834 	bl	8004448 <HAL_RCC_GetSysClockFreq>
 80043e0:	4601      	mov	r1, r0
 80043e2:	4b14      	ldr	r3, [pc, #80]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	0a1b      	lsrs	r3, r3, #8
 80043e8:	f003 030f 	and.w	r3, r3, #15
 80043ec:	4a12      	ldr	r2, [pc, #72]	; (8004438 <HAL_RCC_ClockConfig+0x35c>)
 80043ee:	5cd3      	ldrb	r3, [r2, r3]
 80043f0:	f003 031f 	and.w	r3, r3, #31
 80043f4:	fa21 f303 	lsr.w	r3, r1, r3
 80043f8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043fa:	4b0e      	ldr	r3, [pc, #56]	; (8004434 <HAL_RCC_ClockConfig+0x358>)
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	4a0d      	ldr	r2, [pc, #52]	; (8004438 <HAL_RCC_ClockConfig+0x35c>)
 8004404:	5cd3      	ldrb	r3, [r2, r3]
 8004406:	f003 031f 	and.w	r3, r3, #31
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	fa22 f303 	lsr.w	r3, r2, r3
 8004410:	4a0a      	ldr	r2, [pc, #40]	; (800443c <HAL_RCC_ClockConfig+0x360>)
 8004412:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004414:	4a0a      	ldr	r2, [pc, #40]	; (8004440 <HAL_RCC_ClockConfig+0x364>)
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800441a:	4b0a      	ldr	r3, [pc, #40]	; (8004444 <HAL_RCC_ClockConfig+0x368>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f7fd f822 	bl	8001468 <HAL_InitTick>
 8004424:	4603      	mov	r3, r0
 8004426:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004428:	7bfb      	ldrb	r3, [r7, #15]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3718      	adds	r7, #24
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	58024400 	.word	0x58024400
 8004438:	08015930 	.word	0x08015930
 800443c:	24000010 	.word	0x24000010
 8004440:	2400000c 	.word	0x2400000c
 8004444:	24000014 	.word	0x24000014

08004448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004448:	b480      	push	{r7}
 800444a:	b089      	sub	sp, #36	; 0x24
 800444c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800444e:	4baf      	ldr	r3, [pc, #700]	; (800470c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004456:	2b18      	cmp	r3, #24
 8004458:	f200 814e 	bhi.w	80046f8 <HAL_RCC_GetSysClockFreq+0x2b0>
 800445c:	a201      	add	r2, pc, #4	; (adr r2, 8004464 <HAL_RCC_GetSysClockFreq+0x1c>)
 800445e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004462:	bf00      	nop
 8004464:	080044c9 	.word	0x080044c9
 8004468:	080046f9 	.word	0x080046f9
 800446c:	080046f9 	.word	0x080046f9
 8004470:	080046f9 	.word	0x080046f9
 8004474:	080046f9 	.word	0x080046f9
 8004478:	080046f9 	.word	0x080046f9
 800447c:	080046f9 	.word	0x080046f9
 8004480:	080046f9 	.word	0x080046f9
 8004484:	080044ef 	.word	0x080044ef
 8004488:	080046f9 	.word	0x080046f9
 800448c:	080046f9 	.word	0x080046f9
 8004490:	080046f9 	.word	0x080046f9
 8004494:	080046f9 	.word	0x080046f9
 8004498:	080046f9 	.word	0x080046f9
 800449c:	080046f9 	.word	0x080046f9
 80044a0:	080046f9 	.word	0x080046f9
 80044a4:	080044f5 	.word	0x080044f5
 80044a8:	080046f9 	.word	0x080046f9
 80044ac:	080046f9 	.word	0x080046f9
 80044b0:	080046f9 	.word	0x080046f9
 80044b4:	080046f9 	.word	0x080046f9
 80044b8:	080046f9 	.word	0x080046f9
 80044bc:	080046f9 	.word	0x080046f9
 80044c0:	080046f9 	.word	0x080046f9
 80044c4:	080044fb 	.word	0x080044fb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044c8:	4b90      	ldr	r3, [pc, #576]	; (800470c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0320 	and.w	r3, r3, #32
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d009      	beq.n	80044e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80044d4:	4b8d      	ldr	r3, [pc, #564]	; (800470c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	08db      	lsrs	r3, r3, #3
 80044da:	f003 0303 	and.w	r3, r3, #3
 80044de:	4a8c      	ldr	r2, [pc, #560]	; (8004710 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80044e0:	fa22 f303 	lsr.w	r3, r2, r3
 80044e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80044e6:	e10a      	b.n	80046fe <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80044e8:	4b89      	ldr	r3, [pc, #548]	; (8004710 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80044ea:	61bb      	str	r3, [r7, #24]
    break;
 80044ec:	e107      	b.n	80046fe <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80044ee:	4b89      	ldr	r3, [pc, #548]	; (8004714 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80044f0:	61bb      	str	r3, [r7, #24]
    break;
 80044f2:	e104      	b.n	80046fe <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80044f4:	4b88      	ldr	r3, [pc, #544]	; (8004718 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80044f6:	61bb      	str	r3, [r7, #24]
    break;
 80044f8:	e101      	b.n	80046fe <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044fa:	4b84      	ldr	r3, [pc, #528]	; (800470c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80044fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004504:	4b81      	ldr	r3, [pc, #516]	; (800470c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004508:	091b      	lsrs	r3, r3, #4
 800450a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800450e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004510:	4b7e      	ldr	r3, [pc, #504]	; (800470c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800451a:	4b7c      	ldr	r3, [pc, #496]	; (800470c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800451c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451e:	08db      	lsrs	r3, r3, #3
 8004520:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	fb02 f303 	mul.w	r3, r2, r3
 800452a:	ee07 3a90 	vmov	s15, r3
 800452e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004532:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 80da 	beq.w	80046f2 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d05a      	beq.n	80045fa <HAL_RCC_GetSysClockFreq+0x1b2>
 8004544:	2b01      	cmp	r3, #1
 8004546:	d302      	bcc.n	800454e <HAL_RCC_GetSysClockFreq+0x106>
 8004548:	2b02      	cmp	r3, #2
 800454a:	d078      	beq.n	800463e <HAL_RCC_GetSysClockFreq+0x1f6>
 800454c:	e099      	b.n	8004682 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800454e:	4b6f      	ldr	r3, [pc, #444]	; (800470c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0320 	and.w	r3, r3, #32
 8004556:	2b00      	cmp	r3, #0
 8004558:	d02d      	beq.n	80045b6 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800455a:	4b6c      	ldr	r3, [pc, #432]	; (800470c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	08db      	lsrs	r3, r3, #3
 8004560:	f003 0303 	and.w	r3, r3, #3
 8004564:	4a6a      	ldr	r2, [pc, #424]	; (8004710 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004566:	fa22 f303 	lsr.w	r3, r2, r3
 800456a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	ee07 3a90 	vmov	s15, r3
 8004572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	ee07 3a90 	vmov	s15, r3
 800457c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004580:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004584:	4b61      	ldr	r3, [pc, #388]	; (800470c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800458c:	ee07 3a90 	vmov	s15, r3
 8004590:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004594:	ed97 6a02 	vldr	s12, [r7, #8]
 8004598:	eddf 5a60 	vldr	s11, [pc, #384]	; 800471c <HAL_RCC_GetSysClockFreq+0x2d4>
 800459c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045b0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80045b4:	e087      	b.n	80046c6 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	ee07 3a90 	vmov	s15, r3
 80045bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045c0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004720 <HAL_RCC_GetSysClockFreq+0x2d8>
 80045c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045c8:	4b50      	ldr	r3, [pc, #320]	; (800470c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80045ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045d0:	ee07 3a90 	vmov	s15, r3
 80045d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80045dc:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800471c <HAL_RCC_GetSysClockFreq+0x2d4>
 80045e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045f8:	e065      	b.n	80046c6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	ee07 3a90 	vmov	s15, r3
 8004600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004604:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004724 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004608:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800460c:	4b3f      	ldr	r3, [pc, #252]	; (800470c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800460e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004614:	ee07 3a90 	vmov	s15, r3
 8004618:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800461c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004620:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800471c <HAL_RCC_GetSysClockFreq+0x2d4>
 8004624:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004628:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800462c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004630:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004638:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800463c:	e043      	b.n	80046c6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	ee07 3a90 	vmov	s15, r3
 8004644:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004648:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004728 <HAL_RCC_GetSysClockFreq+0x2e0>
 800464c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004650:	4b2e      	ldr	r3, [pc, #184]	; (800470c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004658:	ee07 3a90 	vmov	s15, r3
 800465c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004660:	ed97 6a02 	vldr	s12, [r7, #8]
 8004664:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800471c <HAL_RCC_GetSysClockFreq+0x2d4>
 8004668:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800466c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004670:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004674:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800467c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004680:	e021      	b.n	80046c6 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	ee07 3a90 	vmov	s15, r3
 8004688:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800468c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004724 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004690:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004694:	4b1d      	ldr	r3, [pc, #116]	; (800470c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800469c:	ee07 3a90 	vmov	s15, r3
 80046a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046a4:	ed97 6a02 	vldr	s12, [r7, #8]
 80046a8:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800471c <HAL_RCC_GetSysClockFreq+0x2d4>
 80046ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046c4:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80046c6:	4b11      	ldr	r3, [pc, #68]	; (800470c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80046c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ca:	0a5b      	lsrs	r3, r3, #9
 80046cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046d0:	3301      	adds	r3, #1
 80046d2:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	ee07 3a90 	vmov	s15, r3
 80046da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046de:	edd7 6a07 	vldr	s13, [r7, #28]
 80046e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046ea:	ee17 3a90 	vmov	r3, s15
 80046ee:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80046f0:	e005      	b.n	80046fe <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80046f2:	2300      	movs	r3, #0
 80046f4:	61bb      	str	r3, [r7, #24]
    break;
 80046f6:	e002      	b.n	80046fe <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80046f8:	4b06      	ldr	r3, [pc, #24]	; (8004714 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80046fa:	61bb      	str	r3, [r7, #24]
    break;
 80046fc:	bf00      	nop
  }

  return sysclockfreq;
 80046fe:	69bb      	ldr	r3, [r7, #24]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3724      	adds	r7, #36	; 0x24
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	58024400 	.word	0x58024400
 8004710:	03d09000 	.word	0x03d09000
 8004714:	003d0900 	.word	0x003d0900
 8004718:	007a1200 	.word	0x007a1200
 800471c:	46000000 	.word	0x46000000
 8004720:	4c742400 	.word	0x4c742400
 8004724:	4a742400 	.word	0x4a742400
 8004728:	4af42400 	.word	0x4af42400

0800472c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004732:	f7ff fe89 	bl	8004448 <HAL_RCC_GetSysClockFreq>
 8004736:	4601      	mov	r1, r0
 8004738:	4b10      	ldr	r3, [pc, #64]	; (800477c <HAL_RCC_GetHCLKFreq+0x50>)
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	0a1b      	lsrs	r3, r3, #8
 800473e:	f003 030f 	and.w	r3, r3, #15
 8004742:	4a0f      	ldr	r2, [pc, #60]	; (8004780 <HAL_RCC_GetHCLKFreq+0x54>)
 8004744:	5cd3      	ldrb	r3, [r2, r3]
 8004746:	f003 031f 	and.w	r3, r3, #31
 800474a:	fa21 f303 	lsr.w	r3, r1, r3
 800474e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004750:	4b0a      	ldr	r3, [pc, #40]	; (800477c <HAL_RCC_GetHCLKFreq+0x50>)
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	f003 030f 	and.w	r3, r3, #15
 8004758:	4a09      	ldr	r2, [pc, #36]	; (8004780 <HAL_RCC_GetHCLKFreq+0x54>)
 800475a:	5cd3      	ldrb	r3, [r2, r3]
 800475c:	f003 031f 	and.w	r3, r3, #31
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	fa22 f303 	lsr.w	r3, r2, r3
 8004766:	4a07      	ldr	r2, [pc, #28]	; (8004784 <HAL_RCC_GetHCLKFreq+0x58>)
 8004768:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800476a:	4a07      	ldr	r2, [pc, #28]	; (8004788 <HAL_RCC_GetHCLKFreq+0x5c>)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004770:	4b04      	ldr	r3, [pc, #16]	; (8004784 <HAL_RCC_GetHCLKFreq+0x58>)
 8004772:	681b      	ldr	r3, [r3, #0]
}
 8004774:	4618      	mov	r0, r3
 8004776:	3708      	adds	r7, #8
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	58024400 	.word	0x58024400
 8004780:	08015930 	.word	0x08015930
 8004784:	24000010 	.word	0x24000010
 8004788:	2400000c 	.word	0x2400000c

0800478c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004790:	f7ff ffcc 	bl	800472c <HAL_RCC_GetHCLKFreq>
 8004794:	4601      	mov	r1, r0
 8004796:	4b06      	ldr	r3, [pc, #24]	; (80047b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	091b      	lsrs	r3, r3, #4
 800479c:	f003 0307 	and.w	r3, r3, #7
 80047a0:	4a04      	ldr	r2, [pc, #16]	; (80047b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047a2:	5cd3      	ldrb	r3, [r2, r3]
 80047a4:	f003 031f 	and.w	r3, r3, #31
 80047a8:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	58024400 	.word	0x58024400
 80047b4:	08015930 	.word	0x08015930

080047b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80047bc:	f7ff ffb6 	bl	800472c <HAL_RCC_GetHCLKFreq>
 80047c0:	4601      	mov	r1, r0
 80047c2:	4b06      	ldr	r3, [pc, #24]	; (80047dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	0a1b      	lsrs	r3, r3, #8
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	4a04      	ldr	r2, [pc, #16]	; (80047e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80047ce:	5cd3      	ldrb	r3, [r2, r3]
 80047d0:	f003 031f 	and.w	r3, r3, #31
 80047d4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80047d8:	4618      	mov	r0, r3
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	58024400 	.word	0x58024400
 80047e0:	08015930 	.word	0x08015930

080047e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047ec:	2300      	movs	r3, #0
 80047ee:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047f0:	2300      	movs	r3, #0
 80047f2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d03d      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004804:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004808:	d013      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800480a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800480e:	d802      	bhi.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004810:	2b00      	cmp	r3, #0
 8004812:	d007      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004814:	e01f      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004816:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800481a:	d013      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800481c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004820:	d01c      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004822:	e018      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004824:	4baf      	ldr	r3, [pc, #700]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004828:	4aae      	ldr	r2, [pc, #696]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800482a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800482e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004830:	e015      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	3304      	adds	r3, #4
 8004836:	2102      	movs	r1, #2
 8004838:	4618      	mov	r0, r3
 800483a:	f001 fd23 	bl	8006284 <RCCEx_PLL2_Config>
 800483e:	4603      	mov	r3, r0
 8004840:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004842:	e00c      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	3324      	adds	r3, #36	; 0x24
 8004848:	2102      	movs	r1, #2
 800484a:	4618      	mov	r0, r3
 800484c:	f001 fdcc 	bl	80063e8 <RCCEx_PLL3_Config>
 8004850:	4603      	mov	r3, r0
 8004852:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004854:	e003      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	75fb      	strb	r3, [r7, #23]
      break;
 800485a:	e000      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800485c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800485e:	7dfb      	ldrb	r3, [r7, #23]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d109      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004864:	4b9f      	ldr	r3, [pc, #636]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004868:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004870:	499c      	ldr	r1, [pc, #624]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004872:	4313      	orrs	r3, r2
 8004874:	650b      	str	r3, [r1, #80]	; 0x50
 8004876:	e001      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004878:	7dfb      	ldrb	r3, [r7, #23]
 800487a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004884:	2b00      	cmp	r3, #0
 8004886:	d03d      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800488c:	2b04      	cmp	r3, #4
 800488e:	d826      	bhi.n	80048de <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8004890:	a201      	add	r2, pc, #4	; (adr r2, 8004898 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8004892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004896:	bf00      	nop
 8004898:	080048ad 	.word	0x080048ad
 800489c:	080048bb 	.word	0x080048bb
 80048a0:	080048cd 	.word	0x080048cd
 80048a4:	080048e5 	.word	0x080048e5
 80048a8:	080048e5 	.word	0x080048e5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048ac:	4b8d      	ldr	r3, [pc, #564]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80048ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b0:	4a8c      	ldr	r2, [pc, #560]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80048b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80048b8:	e015      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	3304      	adds	r3, #4
 80048be:	2100      	movs	r1, #0
 80048c0:	4618      	mov	r0, r3
 80048c2:	f001 fcdf 	bl	8006284 <RCCEx_PLL2_Config>
 80048c6:	4603      	mov	r3, r0
 80048c8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80048ca:	e00c      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	3324      	adds	r3, #36	; 0x24
 80048d0:	2100      	movs	r1, #0
 80048d2:	4618      	mov	r0, r3
 80048d4:	f001 fd88 	bl	80063e8 <RCCEx_PLL3_Config>
 80048d8:	4603      	mov	r3, r0
 80048da:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80048dc:	e003      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	75fb      	strb	r3, [r7, #23]
      break;
 80048e2:	e000      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80048e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048e6:	7dfb      	ldrb	r3, [r7, #23]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d109      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048ec:	4b7d      	ldr	r3, [pc, #500]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80048ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f0:	f023 0207 	bic.w	r2, r3, #7
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f8:	497a      	ldr	r1, [pc, #488]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	650b      	str	r3, [r1, #80]	; 0x50
 80048fe:	e001      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004900:	7dfb      	ldrb	r3, [r7, #23]
 8004902:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800490c:	2b00      	cmp	r3, #0
 800490e:	d03e      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004914:	2b80      	cmp	r3, #128	; 0x80
 8004916:	d01c      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004918:	2b80      	cmp	r3, #128	; 0x80
 800491a:	d804      	bhi.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800491c:	2b00      	cmp	r3, #0
 800491e:	d008      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004920:	2b40      	cmp	r3, #64	; 0x40
 8004922:	d00d      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004924:	e01e      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004926:	2bc0      	cmp	r3, #192	; 0xc0
 8004928:	d01f      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800492a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800492e:	d01e      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004930:	e018      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004932:	4b6c      	ldr	r3, [pc, #432]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004936:	4a6b      	ldr	r2, [pc, #428]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800493c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800493e:	e017      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	3304      	adds	r3, #4
 8004944:	2100      	movs	r1, #0
 8004946:	4618      	mov	r0, r3
 8004948:	f001 fc9c 	bl	8006284 <RCCEx_PLL2_Config>
 800494c:	4603      	mov	r3, r0
 800494e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004950:	e00e      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	3324      	adds	r3, #36	; 0x24
 8004956:	2100      	movs	r1, #0
 8004958:	4618      	mov	r0, r3
 800495a:	f001 fd45 	bl	80063e8 <RCCEx_PLL3_Config>
 800495e:	4603      	mov	r3, r0
 8004960:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004962:	e005      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	75fb      	strb	r3, [r7, #23]
      break;
 8004968:	e002      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800496a:	bf00      	nop
 800496c:	e000      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800496e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004970:	7dfb      	ldrb	r3, [r7, #23]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d109      	bne.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004976:	4b5b      	ldr	r3, [pc, #364]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800497a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004982:	4958      	ldr	r1, [pc, #352]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004984:	4313      	orrs	r3, r2
 8004986:	650b      	str	r3, [r1, #80]	; 0x50
 8004988:	e001      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800498a:	7dfb      	ldrb	r3, [r7, #23]
 800498c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004996:	2b00      	cmp	r3, #0
 8004998:	d044      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80049a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049a4:	d01f      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80049a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049aa:	d805      	bhi.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00a      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80049b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049b4:	d00e      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80049b6:	e01f      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80049b8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80049bc:	d01f      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80049be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049c2:	d01e      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80049c4:	e018      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049c6:	4b47      	ldr	r3, [pc, #284]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80049c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ca:	4a46      	ldr	r2, [pc, #280]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80049cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80049d2:	e017      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	3304      	adds	r3, #4
 80049d8:	2100      	movs	r1, #0
 80049da:	4618      	mov	r0, r3
 80049dc:	f001 fc52 	bl	8006284 <RCCEx_PLL2_Config>
 80049e0:	4603      	mov	r3, r0
 80049e2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80049e4:	e00e      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	3324      	adds	r3, #36	; 0x24
 80049ea:	2100      	movs	r1, #0
 80049ec:	4618      	mov	r0, r3
 80049ee:	f001 fcfb 	bl	80063e8 <RCCEx_PLL3_Config>
 80049f2:	4603      	mov	r3, r0
 80049f4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80049f6:	e005      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	75fb      	strb	r3, [r7, #23]
      break;
 80049fc:	e002      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80049fe:	bf00      	nop
 8004a00:	e000      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004a02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a04:	7dfb      	ldrb	r3, [r7, #23]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10a      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004a0a:	4b36      	ldr	r3, [pc, #216]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a0e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a18:	4932      	ldr	r1, [pc, #200]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	658b      	str	r3, [r1, #88]	; 0x58
 8004a1e:	e001      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a20:	7dfb      	ldrb	r3, [r7, #23]
 8004a22:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d044      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a3a:	d01f      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004a3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a40:	d805      	bhi.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00a      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8004a46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a4a:	d00e      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004a4c:	e01f      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8004a4e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a52:	d01f      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004a54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a58:	d01e      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004a5a:	e018      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a5c:	4b21      	ldr	r3, [pc, #132]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a60:	4a20      	ldr	r2, [pc, #128]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a68:	e017      	b.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	3304      	adds	r3, #4
 8004a6e:	2100      	movs	r1, #0
 8004a70:	4618      	mov	r0, r3
 8004a72:	f001 fc07 	bl	8006284 <RCCEx_PLL2_Config>
 8004a76:	4603      	mov	r3, r0
 8004a78:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004a7a:	e00e      	b.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3324      	adds	r3, #36	; 0x24
 8004a80:	2100      	movs	r1, #0
 8004a82:	4618      	mov	r0, r3
 8004a84:	f001 fcb0 	bl	80063e8 <RCCEx_PLL3_Config>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a8c:	e005      	b.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	75fb      	strb	r3, [r7, #23]
      break;
 8004a92:	e002      	b.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004a94:	bf00      	nop
 8004a96:	e000      	b.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004a98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a9a:	7dfb      	ldrb	r3, [r7, #23]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10a      	bne.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004aa0:	4b10      	ldr	r3, [pc, #64]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004aae:	490d      	ldr	r1, [pc, #52]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	658b      	str	r3, [r1, #88]	; 0x58
 8004ab4:	e001      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ab6:	7dfb      	ldrb	r3, [r7, #23]
 8004ab8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d035      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aca:	2b10      	cmp	r3, #16
 8004acc:	d00c      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8004ace:	2b10      	cmp	r3, #16
 8004ad0:	d802      	bhi.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d01b      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8004ad6:	e017      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004ad8:	2b20      	cmp	r3, #32
 8004ada:	d00c      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004adc:	2b30      	cmp	r3, #48	; 0x30
 8004ade:	d018      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8004ae0:	e012      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004ae2:	bf00      	nop
 8004ae4:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ae8:	4baf      	ldr	r3, [pc, #700]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aec:	4aae      	ldr	r2, [pc, #696]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004aee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004af2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004af4:	e00e      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	3304      	adds	r3, #4
 8004afa:	2102      	movs	r1, #2
 8004afc:	4618      	mov	r0, r3
 8004afe:	f001 fbc1 	bl	8006284 <RCCEx_PLL2_Config>
 8004b02:	4603      	mov	r3, r0
 8004b04:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004b06:	e005      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	75fb      	strb	r3, [r7, #23]
      break;
 8004b0c:	e002      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004b0e:	bf00      	nop
 8004b10:	e000      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004b12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b14:	7dfb      	ldrb	r3, [r7, #23]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d109      	bne.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004b1a:	4ba3      	ldr	r3, [pc, #652]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b1e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b26:	49a0      	ldr	r1, [pc, #640]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004b2c:	e001      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b2e:	7dfb      	ldrb	r3, [r7, #23]
 8004b30:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d042      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b46:	d01f      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004b48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b4c:	d805      	bhi.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00a      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8004b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b56:	d00e      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8004b58:	e01f      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8004b5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b5e:	d01f      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004b60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b64:	d01e      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004b66:	e018      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b68:	4b8f      	ldr	r3, [pc, #572]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6c:	4a8e      	ldr	r2, [pc, #568]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004b74:	e017      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	3304      	adds	r3, #4
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f001 fb81 	bl	8006284 <RCCEx_PLL2_Config>
 8004b82:	4603      	mov	r3, r0
 8004b84:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004b86:	e00e      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	3324      	adds	r3, #36	; 0x24
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f001 fc2a 	bl	80063e8 <RCCEx_PLL3_Config>
 8004b94:	4603      	mov	r3, r0
 8004b96:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004b98:	e005      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	75fb      	strb	r3, [r7, #23]
      break;
 8004b9e:	e002      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004ba0:	bf00      	nop
 8004ba2:	e000      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004ba4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ba6:	7dfb      	ldrb	r3, [r7, #23]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d109      	bne.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004bac:	4b7e      	ldr	r3, [pc, #504]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bb8:	497b      	ldr	r1, [pc, #492]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	650b      	str	r3, [r1, #80]	; 0x50
 8004bbe:	e001      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bc0:	7dfb      	ldrb	r3, [r7, #23]
 8004bc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d042      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bd8:	d01b      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004bda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bde:	d805      	bhi.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d022      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x446>
 8004be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be8:	d00a      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004bea:	e01b      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8004bec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004bf0:	d01d      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8004bf2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bf6:	d01c      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8004bf8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004bfc:	d01b      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8004bfe:	e011      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	3304      	adds	r3, #4
 8004c04:	2101      	movs	r1, #1
 8004c06:	4618      	mov	r0, r3
 8004c08:	f001 fb3c 	bl	8006284 <RCCEx_PLL2_Config>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004c10:	e012      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	3324      	adds	r3, #36	; 0x24
 8004c16:	2101      	movs	r1, #1
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f001 fbe5 	bl	80063e8 <RCCEx_PLL3_Config>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004c22:	e009      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	75fb      	strb	r3, [r7, #23]
      break;
 8004c28:	e006      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004c2a:	bf00      	nop
 8004c2c:	e004      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004c2e:	bf00      	nop
 8004c30:	e002      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004c32:	bf00      	nop
 8004c34:	e000      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004c36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c38:	7dfb      	ldrb	r3, [r7, #23]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d109      	bne.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004c3e:	4b5a      	ldr	r3, [pc, #360]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c42:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c4a:	4957      	ldr	r1, [pc, #348]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	650b      	str	r3, [r1, #80]	; 0x50
 8004c50:	e001      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c52:	7dfb      	ldrb	r3, [r7, #23]
 8004c54:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d044      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004c68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c6c:	d01b      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004c6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c72:	d805      	bhi.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d022      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004c78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c7c:	d00a      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004c7e:	e01b      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8004c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c84:	d01d      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004c86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c8a:	d01c      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8004c8c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c90:	d01b      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004c92:	e011      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	3304      	adds	r3, #4
 8004c98:	2101      	movs	r1, #1
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f001 faf2 	bl	8006284 <RCCEx_PLL2_Config>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004ca4:	e012      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	3324      	adds	r3, #36	; 0x24
 8004caa:	2101      	movs	r1, #1
 8004cac:	4618      	mov	r0, r3
 8004cae:	f001 fb9b 	bl	80063e8 <RCCEx_PLL3_Config>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004cb6:	e009      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	75fb      	strb	r3, [r7, #23]
      break;
 8004cbc:	e006      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004cbe:	bf00      	nop
 8004cc0:	e004      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004cc2:	bf00      	nop
 8004cc4:	e002      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004cc6:	bf00      	nop
 8004cc8:	e000      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004cca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ccc:	7dfb      	ldrb	r3, [r7, #23]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10a      	bne.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004cd2:	4b35      	ldr	r3, [pc, #212]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004ce0:	4931      	ldr	r1, [pc, #196]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	658b      	str	r3, [r1, #88]	; 0x58
 8004ce6:	e001      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce8:	7dfb      	ldrb	r3, [r7, #23]
 8004cea:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d02d      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d00:	d005      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004d02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d06:	d009      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x538>
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d013      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004d0c:	e00f      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d0e:	4b26      	ldr	r3, [pc, #152]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d12:	4a25      	ldr	r2, [pc, #148]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004d1a:	e00c      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	3304      	adds	r3, #4
 8004d20:	2101      	movs	r1, #1
 8004d22:	4618      	mov	r0, r3
 8004d24:	f001 faae 	bl	8006284 <RCCEx_PLL2_Config>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004d2c:	e003      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	75fb      	strb	r3, [r7, #23]
      break;
 8004d32:	e000      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8004d34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d36:	7dfb      	ldrb	r3, [r7, #23]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d109      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004d3c:	4b1a      	ldr	r3, [pc, #104]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d40:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d48:	4917      	ldr	r1, [pc, #92]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	650b      	str	r3, [r1, #80]	; 0x50
 8004d4e:	e001      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d50:	7dfb      	ldrb	r3, [r7, #23]
 8004d52:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d035      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d64:	2b03      	cmp	r3, #3
 8004d66:	d81b      	bhi.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004d68:	a201      	add	r2, pc, #4	; (adr r2, 8004d70 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8004d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6e:	bf00      	nop
 8004d70:	08004dad 	.word	0x08004dad
 8004d74:	08004d81 	.word	0x08004d81
 8004d78:	08004d8f 	.word	0x08004d8f
 8004d7c:	08004dad 	.word	0x08004dad
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d80:	4b09      	ldr	r3, [pc, #36]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d84:	4a08      	ldr	r2, [pc, #32]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004d8c:	e00f      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	3304      	adds	r3, #4
 8004d92:	2102      	movs	r1, #2
 8004d94:	4618      	mov	r0, r3
 8004d96:	f001 fa75 	bl	8006284 <RCCEx_PLL2_Config>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004d9e:	e006      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	75fb      	strb	r3, [r7, #23]
      break;
 8004da4:	e003      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8004da6:	bf00      	nop
 8004da8:	58024400 	.word	0x58024400
      break;
 8004dac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dae:	7dfb      	ldrb	r3, [r7, #23]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d109      	bne.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004db4:	4bba      	ldr	r3, [pc, #744]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004db8:	f023 0203 	bic.w	r2, r3, #3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc0:	49b7      	ldr	r1, [pc, #732]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004dc6:	e001      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc8:	7dfb      	ldrb	r3, [r7, #23]
 8004dca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 8086 	beq.w	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dda:	4bb2      	ldr	r3, [pc, #712]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4ab1      	ldr	r2, [pc, #708]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004de4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004de6:	f7fc fb89 	bl	80014fc <HAL_GetTick>
 8004dea:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004dec:	e009      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dee:	f7fc fb85 	bl	80014fc <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b64      	cmp	r3, #100	; 0x64
 8004dfa:	d902      	bls.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	75fb      	strb	r3, [r7, #23]
        break;
 8004e00:	e005      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e02:	4ba8      	ldr	r3, [pc, #672]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d0ef      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8004e0e:	7dfb      	ldrb	r3, [r7, #23]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d166      	bne.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004e14:	4ba2      	ldr	r3, [pc, #648]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004e16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e1e:	4053      	eors	r3, r2
 8004e20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d013      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e28:	4b9d      	ldr	r3, [pc, #628]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e30:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e32:	4b9b      	ldr	r3, [pc, #620]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e36:	4a9a      	ldr	r2, [pc, #616]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e3c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e3e:	4b98      	ldr	r3, [pc, #608]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e42:	4a97      	ldr	r2, [pc, #604]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004e44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e48:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004e4a:	4a95      	ldr	r2, [pc, #596]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e5a:	d115      	bne.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5c:	f7fc fb4e 	bl	80014fc <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e62:	e00b      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e64:	f7fc fb4a 	bl	80014fc <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d902      	bls.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	75fb      	strb	r3, [r7, #23]
            break;
 8004e7a:	e005      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e7c:	4b88      	ldr	r3, [pc, #544]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d0ed      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8004e88:	7dfb      	ldrb	r3, [r7, #23]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d126      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e9c:	d10d      	bne.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8004e9e:	4b80      	ldr	r3, [pc, #512]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004eac:	0919      	lsrs	r1, r3, #4
 8004eae:	4b7e      	ldr	r3, [pc, #504]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8004eb0:	400b      	ands	r3, r1
 8004eb2:	497b      	ldr	r1, [pc, #492]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	610b      	str	r3, [r1, #16]
 8004eb8:	e005      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8004eba:	4b79      	ldr	r3, [pc, #484]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	4a78      	ldr	r2, [pc, #480]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004ec0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004ec4:	6113      	str	r3, [r2, #16]
 8004ec6:	4b76      	ldr	r3, [pc, #472]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004ec8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ed4:	4972      	ldr	r1, [pc, #456]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	670b      	str	r3, [r1, #112]	; 0x70
 8004eda:	e004      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004edc:	7dfb      	ldrb	r3, [r7, #23]
 8004ede:	75bb      	strb	r3, [r7, #22]
 8004ee0:	e001      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee2:	7dfb      	ldrb	r3, [r7, #23]
 8004ee4:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d07d      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ef6:	2b28      	cmp	r3, #40	; 0x28
 8004ef8:	d866      	bhi.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8004efa:	a201      	add	r2, pc, #4	; (adr r2, 8004f00 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f00:	08004fcf 	.word	0x08004fcf
 8004f04:	08004fc9 	.word	0x08004fc9
 8004f08:	08004fc9 	.word	0x08004fc9
 8004f0c:	08004fc9 	.word	0x08004fc9
 8004f10:	08004fc9 	.word	0x08004fc9
 8004f14:	08004fc9 	.word	0x08004fc9
 8004f18:	08004fc9 	.word	0x08004fc9
 8004f1c:	08004fc9 	.word	0x08004fc9
 8004f20:	08004fa5 	.word	0x08004fa5
 8004f24:	08004fc9 	.word	0x08004fc9
 8004f28:	08004fc9 	.word	0x08004fc9
 8004f2c:	08004fc9 	.word	0x08004fc9
 8004f30:	08004fc9 	.word	0x08004fc9
 8004f34:	08004fc9 	.word	0x08004fc9
 8004f38:	08004fc9 	.word	0x08004fc9
 8004f3c:	08004fc9 	.word	0x08004fc9
 8004f40:	08004fb7 	.word	0x08004fb7
 8004f44:	08004fc9 	.word	0x08004fc9
 8004f48:	08004fc9 	.word	0x08004fc9
 8004f4c:	08004fc9 	.word	0x08004fc9
 8004f50:	08004fc9 	.word	0x08004fc9
 8004f54:	08004fc9 	.word	0x08004fc9
 8004f58:	08004fc9 	.word	0x08004fc9
 8004f5c:	08004fc9 	.word	0x08004fc9
 8004f60:	08004fcf 	.word	0x08004fcf
 8004f64:	08004fc9 	.word	0x08004fc9
 8004f68:	08004fc9 	.word	0x08004fc9
 8004f6c:	08004fc9 	.word	0x08004fc9
 8004f70:	08004fc9 	.word	0x08004fc9
 8004f74:	08004fc9 	.word	0x08004fc9
 8004f78:	08004fc9 	.word	0x08004fc9
 8004f7c:	08004fc9 	.word	0x08004fc9
 8004f80:	08004fcf 	.word	0x08004fcf
 8004f84:	08004fc9 	.word	0x08004fc9
 8004f88:	08004fc9 	.word	0x08004fc9
 8004f8c:	08004fc9 	.word	0x08004fc9
 8004f90:	08004fc9 	.word	0x08004fc9
 8004f94:	08004fc9 	.word	0x08004fc9
 8004f98:	08004fc9 	.word	0x08004fc9
 8004f9c:	08004fc9 	.word	0x08004fc9
 8004fa0:	08004fcf 	.word	0x08004fcf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3304      	adds	r3, #4
 8004fa8:	2101      	movs	r1, #1
 8004faa:	4618      	mov	r0, r3
 8004fac:	f001 f96a 	bl	8006284 <RCCEx_PLL2_Config>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004fb4:	e00c      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	3324      	adds	r3, #36	; 0x24
 8004fba:	2101      	movs	r1, #1
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f001 fa13 	bl	80063e8 <RCCEx_PLL3_Config>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004fc6:	e003      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	75fb      	strb	r3, [r7, #23]
      break;
 8004fcc:	e000      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8004fce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fd0:	7dfb      	ldrb	r3, [r7, #23]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d109      	bne.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004fd6:	4b32      	ldr	r3, [pc, #200]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fda:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fe2:	492f      	ldr	r1, [pc, #188]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	654b      	str	r3, [r1, #84]	; 0x54
 8004fe8:	e001      	b.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fea:	7dfb      	ldrb	r3, [r7, #23]
 8004fec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d037      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ffe:	2b05      	cmp	r3, #5
 8005000:	d820      	bhi.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8005002:	a201      	add	r2, pc, #4	; (adr r2, 8005008 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005008:	0800504b 	.word	0x0800504b
 800500c:	08005021 	.word	0x08005021
 8005010:	08005033 	.word	0x08005033
 8005014:	0800504b 	.word	0x0800504b
 8005018:	0800504b 	.word	0x0800504b
 800501c:	0800504b 	.word	0x0800504b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	3304      	adds	r3, #4
 8005024:	2101      	movs	r1, #1
 8005026:	4618      	mov	r0, r3
 8005028:	f001 f92c 	bl	8006284 <RCCEx_PLL2_Config>
 800502c:	4603      	mov	r3, r0
 800502e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005030:	e00c      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	3324      	adds	r3, #36	; 0x24
 8005036:	2101      	movs	r1, #1
 8005038:	4618      	mov	r0, r3
 800503a:	f001 f9d5 	bl	80063e8 <RCCEx_PLL3_Config>
 800503e:	4603      	mov	r3, r0
 8005040:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005042:	e003      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	75fb      	strb	r3, [r7, #23]
      break;
 8005048:	e000      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800504a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800504c:	7dfb      	ldrb	r3, [r7, #23]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d109      	bne.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005052:	4b13      	ldr	r3, [pc, #76]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005056:	f023 0207 	bic.w	r2, r3, #7
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800505e:	4910      	ldr	r1, [pc, #64]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005060:	4313      	orrs	r3, r2
 8005062:	654b      	str	r3, [r1, #84]	; 0x54
 8005064:	e001      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005066:	7dfb      	ldrb	r3, [r7, #23]
 8005068:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0304 	and.w	r3, r3, #4
 8005072:	2b00      	cmp	r3, #0
 8005074:	d040      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800507c:	2b05      	cmp	r3, #5
 800507e:	d827      	bhi.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8005080:	a201      	add	r2, pc, #4	; (adr r2, 8005088 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8005082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005086:	bf00      	nop
 8005088:	080050d7 	.word	0x080050d7
 800508c:	080050ad 	.word	0x080050ad
 8005090:	080050bf 	.word	0x080050bf
 8005094:	080050d7 	.word	0x080050d7
 8005098:	080050d7 	.word	0x080050d7
 800509c:	080050d7 	.word	0x080050d7
 80050a0:	58024400 	.word	0x58024400
 80050a4:	58024800 	.word	0x58024800
 80050a8:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3304      	adds	r3, #4
 80050b0:	2101      	movs	r1, #1
 80050b2:	4618      	mov	r0, r3
 80050b4:	f001 f8e6 	bl	8006284 <RCCEx_PLL2_Config>
 80050b8:	4603      	mov	r3, r0
 80050ba:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80050bc:	e00c      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	3324      	adds	r3, #36	; 0x24
 80050c2:	2101      	movs	r1, #1
 80050c4:	4618      	mov	r0, r3
 80050c6:	f001 f98f 	bl	80063e8 <RCCEx_PLL3_Config>
 80050ca:	4603      	mov	r3, r0
 80050cc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80050ce:	e003      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	75fb      	strb	r3, [r7, #23]
      break;
 80050d4:	e000      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80050d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050d8:	7dfb      	ldrb	r3, [r7, #23]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10a      	bne.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050de:	4bb2      	ldr	r3, [pc, #712]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80050e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e2:	f023 0207 	bic.w	r2, r3, #7
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ec:	49ae      	ldr	r1, [pc, #696]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	658b      	str	r3, [r1, #88]	; 0x58
 80050f2:	e001      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f4:	7dfb      	ldrb	r3, [r7, #23]
 80050f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0320 	and.w	r3, r3, #32
 8005100:	2b00      	cmp	r3, #0
 8005102:	d044      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800510a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800510e:	d01b      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8005110:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005114:	d805      	bhi.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8005116:	2b00      	cmp	r3, #0
 8005118:	d022      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800511a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800511e:	d00a      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8005120:	e01b      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005126:	d01d      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8005128:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800512c:	d01c      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800512e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005132:	d01b      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8005134:	e011      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	3304      	adds	r3, #4
 800513a:	2100      	movs	r1, #0
 800513c:	4618      	mov	r0, r3
 800513e:	f001 f8a1 	bl	8006284 <RCCEx_PLL2_Config>
 8005142:	4603      	mov	r3, r0
 8005144:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005146:	e012      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	3324      	adds	r3, #36	; 0x24
 800514c:	2102      	movs	r1, #2
 800514e:	4618      	mov	r0, r3
 8005150:	f001 f94a 	bl	80063e8 <RCCEx_PLL3_Config>
 8005154:	4603      	mov	r3, r0
 8005156:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005158:	e009      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	75fb      	strb	r3, [r7, #23]
      break;
 800515e:	e006      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005160:	bf00      	nop
 8005162:	e004      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005164:	bf00      	nop
 8005166:	e002      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005168:	bf00      	nop
 800516a:	e000      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800516c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800516e:	7dfb      	ldrb	r3, [r7, #23]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10a      	bne.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005174:	4b8c      	ldr	r3, [pc, #560]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005178:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005182:	4989      	ldr	r1, [pc, #548]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005184:	4313      	orrs	r3, r2
 8005186:	654b      	str	r3, [r1, #84]	; 0x54
 8005188:	e001      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800518a:	7dfb      	ldrb	r3, [r7, #23]
 800518c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005196:	2b00      	cmp	r3, #0
 8005198:	d044      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051a4:	d01b      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80051a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051aa:	d805      	bhi.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d022      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80051b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051b4:	d00a      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80051b6:	e01b      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80051b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051bc:	d01d      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80051be:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80051c2:	d01c      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80051c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051c8:	d01b      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80051ca:	e011      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	3304      	adds	r3, #4
 80051d0:	2100      	movs	r1, #0
 80051d2:	4618      	mov	r0, r3
 80051d4:	f001 f856 	bl	8006284 <RCCEx_PLL2_Config>
 80051d8:	4603      	mov	r3, r0
 80051da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80051dc:	e012      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	3324      	adds	r3, #36	; 0x24
 80051e2:	2102      	movs	r1, #2
 80051e4:	4618      	mov	r0, r3
 80051e6:	f001 f8ff 	bl	80063e8 <RCCEx_PLL3_Config>
 80051ea:	4603      	mov	r3, r0
 80051ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80051ee:	e009      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	75fb      	strb	r3, [r7, #23]
      break;
 80051f4:	e006      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80051f6:	bf00      	nop
 80051f8:	e004      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80051fa:	bf00      	nop
 80051fc:	e002      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80051fe:	bf00      	nop
 8005200:	e000      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005202:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005204:	7dfb      	ldrb	r3, [r7, #23]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10a      	bne.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800520a:	4b67      	ldr	r3, [pc, #412]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800520c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800520e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005218:	4963      	ldr	r1, [pc, #396]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800521a:	4313      	orrs	r3, r2
 800521c:	658b      	str	r3, [r1, #88]	; 0x58
 800521e:	e001      	b.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005220:	7dfb      	ldrb	r3, [r7, #23]
 8005222:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800522c:	2b00      	cmp	r3, #0
 800522e:	d044      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005236:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800523a:	d01b      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800523c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005240:	d805      	bhi.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8005242:	2b00      	cmp	r3, #0
 8005244:	d022      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005246:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800524a:	d00a      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800524c:	e01b      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800524e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005252:	d01d      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005254:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005258:	d01c      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800525a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800525e:	d01b      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8005260:	e011      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	3304      	adds	r3, #4
 8005266:	2100      	movs	r1, #0
 8005268:	4618      	mov	r0, r3
 800526a:	f001 f80b 	bl	8006284 <RCCEx_PLL2_Config>
 800526e:	4603      	mov	r3, r0
 8005270:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005272:	e012      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	3324      	adds	r3, #36	; 0x24
 8005278:	2102      	movs	r1, #2
 800527a:	4618      	mov	r0, r3
 800527c:	f001 f8b4 	bl	80063e8 <RCCEx_PLL3_Config>
 8005280:	4603      	mov	r3, r0
 8005282:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005284:	e009      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	75fb      	strb	r3, [r7, #23]
      break;
 800528a:	e006      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800528c:	bf00      	nop
 800528e:	e004      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005290:	bf00      	nop
 8005292:	e002      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005294:	bf00      	nop
 8005296:	e000      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005298:	bf00      	nop
    }

    if(ret == HAL_OK)
 800529a:	7dfb      	ldrb	r3, [r7, #23]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10a      	bne.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80052a0:	4b41      	ldr	r3, [pc, #260]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80052a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052ae:	493e      	ldr	r1, [pc, #248]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	658b      	str	r3, [r1, #88]	; 0x58
 80052b4:	e001      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b6:	7dfb      	ldrb	r3, [r7, #23]
 80052b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0308 	and.w	r3, r3, #8
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d01a      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052d0:	d10a      	bne.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	3324      	adds	r3, #36	; 0x24
 80052d6:	2102      	movs	r1, #2
 80052d8:	4618      	mov	r0, r3
 80052da:	f001 f885 	bl	80063e8 <RCCEx_PLL3_Config>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d001      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80052e8:	4b2f      	ldr	r3, [pc, #188]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80052ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052f6:	492c      	ldr	r1, [pc, #176]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0310 	and.w	r3, r3, #16
 8005304:	2b00      	cmp	r3, #0
 8005306:	d01a      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800530e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005312:	d10a      	bne.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	3324      	adds	r3, #36	; 0x24
 8005318:	2102      	movs	r1, #2
 800531a:	4618      	mov	r0, r3
 800531c:	f001 f864 	bl	80063e8 <RCCEx_PLL3_Config>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800532a:	4b1f      	ldr	r3, [pc, #124]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800532c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800532e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005338:	491b      	ldr	r1, [pc, #108]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800533a:	4313      	orrs	r3, r2
 800533c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d032      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005354:	d00d      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8005356:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800535a:	d016      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xba6>
 800535c:	2b00      	cmp	r3, #0
 800535e:	d111      	bne.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	3304      	adds	r3, #4
 8005364:	2100      	movs	r1, #0
 8005366:	4618      	mov	r0, r3
 8005368:	f000 ff8c 	bl	8006284 <RCCEx_PLL2_Config>
 800536c:	4603      	mov	r3, r0
 800536e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005370:	e00c      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	3324      	adds	r3, #36	; 0x24
 8005376:	2102      	movs	r1, #2
 8005378:	4618      	mov	r0, r3
 800537a:	f001 f835 	bl	80063e8 <RCCEx_PLL3_Config>
 800537e:	4603      	mov	r3, r0
 8005380:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005382:	e003      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	75fb      	strb	r3, [r7, #23]
      break;
 8005388:	e000      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800538a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800538c:	7dfb      	ldrb	r3, [r7, #23]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10c      	bne.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005392:	4b05      	ldr	r3, [pc, #20]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005396:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80053a0:	4901      	ldr	r1, [pc, #4]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	658b      	str	r3, [r1, #88]	; 0x58
 80053a6:	e003      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80053a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ac:	7dfb      	ldrb	r3, [r7, #23]
 80053ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d02f      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053c6:	d00c      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80053c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80053cc:	d015      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80053ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053d2:	d10f      	bne.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053d4:	4b71      	ldr	r3, [pc, #452]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80053d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d8:	4a70      	ldr	r2, [pc, #448]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80053da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80053e0:	e00c      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	3324      	adds	r3, #36	; 0x24
 80053e6:	2101      	movs	r1, #1
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 fffd 	bl	80063e8 <RCCEx_PLL3_Config>
 80053ee:	4603      	mov	r3, r0
 80053f0:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80053f2:	e003      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	75fb      	strb	r3, [r7, #23]
      break;
 80053f8:	e000      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80053fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053fc:	7dfb      	ldrb	r3, [r7, #23]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10a      	bne.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005402:	4b66      	ldr	r3, [pc, #408]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005406:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005410:	4962      	ldr	r1, [pc, #392]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005412:	4313      	orrs	r3, r2
 8005414:	654b      	str	r3, [r1, #84]	; 0x54
 8005416:	e001      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005418:	7dfb      	ldrb	r3, [r7, #23]
 800541a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d029      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800542c:	2b00      	cmp	r3, #0
 800542e:	d003      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005434:	d007      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8005436:	e00f      	b.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005438:	4b58      	ldr	r3, [pc, #352]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800543a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543c:	4a57      	ldr	r2, [pc, #348]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800543e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005442:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005444:	e00b      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	3304      	adds	r3, #4
 800544a:	2102      	movs	r1, #2
 800544c:	4618      	mov	r0, r3
 800544e:	f000 ff19 	bl	8006284 <RCCEx_PLL2_Config>
 8005452:	4603      	mov	r3, r0
 8005454:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005456:	e002      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	75fb      	strb	r3, [r7, #23]
      break;
 800545c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800545e:	7dfb      	ldrb	r3, [r7, #23]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d109      	bne.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005464:	4b4d      	ldr	r3, [pc, #308]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005468:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005470:	494a      	ldr	r1, [pc, #296]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005472:	4313      	orrs	r3, r2
 8005474:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005476:	e001      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005478:	7dfb      	ldrb	r3, [r7, #23]
 800547a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00a      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	3324      	adds	r3, #36	; 0x24
 800548c:	2102      	movs	r1, #2
 800548e:	4618      	mov	r0, r3
 8005490:	f000 ffaa 	bl	80063e8 <RCCEx_PLL3_Config>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d02f      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054b2:	d00c      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80054b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054b8:	d802      	bhi.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d011      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80054be:	e00d      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80054c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054c4:	d00f      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80054c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054ca:	d00e      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80054cc:	e006      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054ce:	4b33      	ldr	r3, [pc, #204]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80054d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d2:	4a32      	ldr	r2, [pc, #200]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80054d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80054da:	e007      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	75fb      	strb	r3, [r7, #23]
      break;
 80054e0:	e004      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80054e2:	bf00      	nop
 80054e4:	e002      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80054e6:	bf00      	nop
 80054e8:	e000      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80054ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054ec:	7dfb      	ldrb	r3, [r7, #23]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d109      	bne.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054f2:	4b2a      	ldr	r3, [pc, #168]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80054f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054fe:	4927      	ldr	r1, [pc, #156]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005500:	4313      	orrs	r3, r2
 8005502:	654b      	str	r3, [r1, #84]	; 0x54
 8005504:	e001      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005506:	7dfb      	ldrb	r3, [r7, #23]
 8005508:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d008      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005516:	4b21      	ldr	r3, [pc, #132]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800551a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005522:	491e      	ldr	r1, [pc, #120]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005524:	4313      	orrs	r3, r2
 8005526:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d008      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005534:	4b19      	ldr	r3, [pc, #100]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005538:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005540:	4916      	ldr	r1, [pc, #88]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005542:	4313      	orrs	r3, r2
 8005544:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00d      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005552:	4b12      	ldr	r3, [pc, #72]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	4a11      	ldr	r2, [pc, #68]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005558:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800555c:	6113      	str	r3, [r2, #16]
 800555e:	4b0f      	ldr	r3, [pc, #60]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005560:	691a      	ldr	r2, [r3, #16]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005568:	490c      	ldr	r1, [pc, #48]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800556a:	4313      	orrs	r3, r2
 800556c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	da08      	bge.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005576:	4b09      	ldr	r3, [pc, #36]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800557a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005582:	4906      	ldr	r1, [pc, #24]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005584:	4313      	orrs	r3, r2
 8005586:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005588:	7dbb      	ldrb	r3, [r7, #22]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 800558e:	2300      	movs	r3, #0
 8005590:	e000      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
}
 8005594:	4618      	mov	r0, r3
 8005596:	3718      	adds	r7, #24
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	58024400 	.word	0x58024400

080055a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b090      	sub	sp, #64	; 0x40
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ae:	d150      	bne.n	8005652 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80055b0:	4ba1      	ldr	r3, [pc, #644]	; (8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80055b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055b4:	f003 0307 	and.w	r3, r3, #7
 80055b8:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80055ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055bc:	2b04      	cmp	r3, #4
 80055be:	d844      	bhi.n	800564a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 80055c0:	a201      	add	r2, pc, #4	; (adr r2, 80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80055c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c6:	bf00      	nop
 80055c8:	080055dd 	.word	0x080055dd
 80055cc:	080055ed 	.word	0x080055ed
 80055d0:	080055fd 	.word	0x080055fd
 80055d4:	08005645 	.word	0x08005645
 80055d8:	0800560d 	.word	0x0800560d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055e0:	4618      	mov	r0, r3
 80055e2:	f000 fd03 	bl	8005fec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80055e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055ea:	e241      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055ec:	f107 0318 	add.w	r3, r7, #24
 80055f0:	4618      	mov	r0, r3
 80055f2:	f000 fa63 	bl	8005abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055fa:	e239      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055fc:	f107 030c 	add.w	r3, r7, #12
 8005600:	4618      	mov	r0, r3
 8005602:	f000 fba7 	bl	8005d54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800560a:	e231      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800560c:	4b8a      	ldr	r3, [pc, #552]	; (8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800560e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005610:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005614:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005618:	2b00      	cmp	r3, #0
 800561a:	d102      	bne.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800561c:	4b87      	ldr	r3, [pc, #540]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800561e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005620:	e226      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005624:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005628:	d102      	bne.n	8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800562a:	4b85      	ldr	r3, [pc, #532]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800562c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800562e:	e21f      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005632:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005636:	d102      	bne.n	800563e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8005638:	4b82      	ldr	r3, [pc, #520]	; (8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800563a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800563c:	e218      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800563e:	2300      	movs	r3, #0
 8005640:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005642:	e215      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005644:	4b80      	ldr	r3, [pc, #512]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8005646:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005648:	e212      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800564a:	2300      	movs	r3, #0
 800564c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800564e:	bf00      	nop
 8005650:	e20e      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005658:	d14f      	bne.n	80056fa <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800565a:	4b77      	ldr	r3, [pc, #476]	; (8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800565c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800565e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005662:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005666:	2b80      	cmp	r3, #128	; 0x80
 8005668:	d01c      	beq.n	80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800566a:	2b80      	cmp	r3, #128	; 0x80
 800566c:	d804      	bhi.n	8005678 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800566e:	2b00      	cmp	r3, #0
 8005670:	d008      	beq.n	8005684 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8005672:	2b40      	cmp	r3, #64	; 0x40
 8005674:	d00e      	beq.n	8005694 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8005676:	e03c      	b.n	80056f2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8005678:	2bc0      	cmp	r3, #192	; 0xc0
 800567a:	d037      	beq.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800567c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005680:	d018      	beq.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8005682:	e036      	b.n	80056f2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005688:	4618      	mov	r0, r3
 800568a:	f000 fcaf 	bl	8005fec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800568e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005690:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005692:	e1ed      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005694:	f107 0318 	add.w	r3, r7, #24
 8005698:	4618      	mov	r0, r3
 800569a:	f000 fa0f 	bl	8005abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056a2:	e1e5      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056a4:	f107 030c 	add.w	r3, r7, #12
 80056a8:	4618      	mov	r0, r3
 80056aa:	f000 fb53 	bl	8005d54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056b2:	e1dd      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80056b4:	4b60      	ldr	r3, [pc, #384]	; (8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80056b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80056bc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80056be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d102      	bne.n	80056ca <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80056c4:	4b5d      	ldr	r3, [pc, #372]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80056c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80056c8:	e1d2      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80056ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056d0:	d102      	bne.n	80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 80056d2:	4b5b      	ldr	r3, [pc, #364]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80056d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056d6:	e1cb      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80056d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056de:	d102      	bne.n	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 80056e0:	4b58      	ldr	r3, [pc, #352]	; (8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80056e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056e4:	e1c4      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80056e6:	2300      	movs	r3, #0
 80056e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056ea:	e1c1      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80056ec:	4b56      	ldr	r3, [pc, #344]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80056ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056f0:	e1be      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80056f2:	2300      	movs	r3, #0
 80056f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056f6:	bf00      	nop
 80056f8:	e1ba      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005700:	d153      	bne.n	80057aa <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8005702:	4b4d      	ldr	r3, [pc, #308]	; (8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005706:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800570a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800570c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005712:	d01f      	beq.n	8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8005714:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005718:	d805      	bhi.n	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00a      	beq.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800571e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005722:	d00f      	beq.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8005724:	e03d      	b.n	80057a2 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8005726:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800572a:	d037      	beq.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800572c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005730:	d018      	beq.n	8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8005732:	e036      	b.n	80057a2 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005738:	4618      	mov	r0, r3
 800573a:	f000 fc57 	bl	8005fec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800573e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005740:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005742:	e195      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005744:	f107 0318 	add.w	r3, r7, #24
 8005748:	4618      	mov	r0, r3
 800574a:	f000 f9b7 	bl	8005abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005752:	e18d      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005754:	f107 030c 	add.w	r3, r7, #12
 8005758:	4618      	mov	r0, r3
 800575a:	f000 fafb 	bl	8005d54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005762:	e185      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005764:	4b34      	ldr	r3, [pc, #208]	; (8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005768:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800576c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800576e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005770:	2b00      	cmp	r3, #0
 8005772:	d102      	bne.n	800577a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005774:	4b31      	ldr	r3, [pc, #196]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005776:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005778:	e17a      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800577a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800577c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005780:	d102      	bne.n	8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8005782:	4b2f      	ldr	r3, [pc, #188]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005784:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005786:	e173      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800578a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800578e:	d102      	bne.n	8005796 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8005790:	4b2c      	ldr	r3, [pc, #176]	; (8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005792:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005794:	e16c      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005796:	2300      	movs	r3, #0
 8005798:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800579a:	e169      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800579c:	4b2a      	ldr	r3, [pc, #168]	; (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800579e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057a0:	e166      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80057a2:	2300      	movs	r3, #0
 80057a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057a6:	bf00      	nop
 80057a8:	e162      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057b0:	d15d      	bne.n	800586e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80057b2:	4b21      	ldr	r3, [pc, #132]	; (8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80057b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80057ba:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80057bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057c2:	d01f      	beq.n	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80057c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057c8:	d805      	bhi.n	80057d6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00a      	beq.n	80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80057ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057d2:	d00f      	beq.n	80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80057d4:	e047      	b.n	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 80057d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80057da:	d041      	beq.n	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 80057dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057e0:	d018      	beq.n	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80057e2:	e040      	b.n	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057e8:	4618      	mov	r0, r3
 80057ea:	f000 fbff 	bl	8005fec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80057ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057f2:	e13d      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057f4:	f107 0318 	add.w	r3, r7, #24
 80057f8:	4618      	mov	r0, r3
 80057fa:	f000 f95f 	bl	8005abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005802:	e135      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005804:	f107 030c 	add.w	r3, r7, #12
 8005808:	4618      	mov	r0, r3
 800580a:	f000 faa3 	bl	8005d54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005812:	e12d      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005814:	4b08      	ldr	r3, [pc, #32]	; (8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005818:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800581c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800581e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005820:	2b00      	cmp	r3, #0
 8005822:	d102      	bne.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005824:	4b05      	ldr	r3, [pc, #20]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005826:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005828:	e122      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800582a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800582c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005830:	d10c      	bne.n	800584c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8005832:	4b03      	ldr	r3, [pc, #12]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005834:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005836:	e11b      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8005838:	58024400 	.word	0x58024400
 800583c:	03d09000 	.word	0x03d09000
 8005840:	003d0900 	.word	0x003d0900
 8005844:	007a1200 	.word	0x007a1200
 8005848:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800584c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800584e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005852:	d102      	bne.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8005854:	4b89      	ldr	r3, [pc, #548]	; (8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8005856:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005858:	e10a      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800585a:	2300      	movs	r3, #0
 800585c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800585e:	e107      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005860:	4b87      	ldr	r3, [pc, #540]	; (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8005862:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005864:	e104      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8005866:	2300      	movs	r3, #0
 8005868:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800586a:	bf00      	nop
 800586c:	e100      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005874:	d153      	bne.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005876:	4b83      	ldr	r3, [pc, #524]	; (8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800587a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800587e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005886:	d01f      	beq.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8005888:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800588c:	d805      	bhi.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00a      	beq.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8005892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005896:	d00f      	beq.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8005898:	e03d      	b.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800589a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800589e:	d037      	beq.n	8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80058a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058a4:	d018      	beq.n	80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80058a6:	e036      	b.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80058a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058ac:	4618      	mov	r0, r3
 80058ae:	f000 fb9d 	bl	8005fec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80058b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058b6:	e0db      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058b8:	f107 0318 	add.w	r3, r7, #24
 80058bc:	4618      	mov	r0, r3
 80058be:	f000 f8fd 	bl	8005abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058c6:	e0d3      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058c8:	f107 030c 	add.w	r3, r7, #12
 80058cc:	4618      	mov	r0, r3
 80058ce:	f000 fa41 	bl	8005d54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058d6:	e0cb      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80058d8:	4b6a      	ldr	r3, [pc, #424]	; (8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80058da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80058e0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80058e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d102      	bne.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80058e8:	4b67      	ldr	r3, [pc, #412]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80058ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80058ec:	e0c0      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80058ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058f4:	d102      	bne.n	80058fc <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 80058f6:	4b65      	ldr	r3, [pc, #404]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80058f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058fa:	e0b9      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80058fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005902:	d102      	bne.n	800590a <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8005904:	4b5d      	ldr	r3, [pc, #372]	; (8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8005906:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005908:	e0b2      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800590a:	2300      	movs	r3, #0
 800590c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800590e:	e0af      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005910:	4b5b      	ldr	r3, [pc, #364]	; (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8005912:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005914:	e0ac      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8005916:	2300      	movs	r3, #0
 8005918:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800591a:	bf00      	nop
 800591c:	e0a8      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005924:	d13d      	bne.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005926:	4b57      	ldr	r3, [pc, #348]	; (8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800592a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800592e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005936:	d00c      	beq.n	8005952 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8005938:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800593c:	d011      	beq.n	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800593e:	2b00      	cmp	r3, #0
 8005940:	d12b      	bne.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005942:	f107 0318 	add.w	r3, r7, #24
 8005946:	4618      	mov	r0, r3
 8005948:	f000 f8b8 	bl	8005abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005950:	e08e      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005952:	f107 030c 	add.w	r3, r7, #12
 8005956:	4618      	mov	r0, r3
 8005958:	f000 f9fc 	bl	8005d54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005960:	e086      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005962:	4b48      	ldr	r3, [pc, #288]	; (8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005966:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800596a:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800596c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800596e:	2b00      	cmp	r3, #0
 8005970:	d102      	bne.n	8005978 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005972:	4b45      	ldr	r3, [pc, #276]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005974:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005976:	e07b      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800597e:	d102      	bne.n	8005986 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8005980:	4b42      	ldr	r3, [pc, #264]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005982:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005984:	e074      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005988:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800598c:	d102      	bne.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800598e:	4b3b      	ldr	r3, [pc, #236]	; (8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8005990:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005992:	e06d      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005994:	2300      	movs	r3, #0
 8005996:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005998:	e06a      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800599a:	2300      	movs	r3, #0
 800599c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800599e:	bf00      	nop
 80059a0:	e066      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059a8:	d11f      	bne.n	80059ea <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80059aa:	4b36      	ldr	r3, [pc, #216]	; (8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80059ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059b2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80059b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d003      	beq.n	80059c2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80059ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059be:	d008      	beq.n	80059d2 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80059c0:	e00f      	b.n	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 fb10 	bl	8005fec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80059cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059d0:	e04e      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059d2:	f107 0318 	add.w	r3, r7, #24
 80059d6:	4618      	mov	r0, r3
 80059d8:	f000 f870 	bl	8005abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80059dc:	6a3b      	ldr	r3, [r7, #32]
 80059de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059e0:	e046      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80059e2:	2300      	movs	r3, #0
 80059e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059e6:	bf00      	nop
 80059e8:	e042      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059f0:	d13c      	bne.n	8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80059f2:	4b24      	ldr	r3, [pc, #144]	; (8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80059f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059f6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80059fa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80059fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a02:	d01e      	beq.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8005a04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a08:	d805      	bhi.n	8005a16 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00d      	beq.n	8005a2a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8005a0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a12:	d00e      	beq.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8005a14:	e026      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8005a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a1a:	d01d      	beq.n	8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8005a1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a20:	d01d      	beq.n	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8005a22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005a26:	d014      	beq.n	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8005a28:	e01c      	b.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005a2a:	f000 f831 	bl	8005a90 <HAL_RCCEx_GetD3PCLK1Freq>
 8005a2e:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005a30:	e01e      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a32:	f107 0318 	add.w	r3, r7, #24
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 f840 	bl	8005abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a40:	e016      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a42:	f107 030c 	add.w	r3, r7, #12
 8005a46:	4618      	mov	r0, r3
 8005a48:	f000 f984 	bl	8005d54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a50:	e00e      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8005a52:	4b0d      	ldr	r3, [pc, #52]	; (8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005a54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a56:	e00b      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8005a58:	4b0c      	ldr	r3, [pc, #48]	; (8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a5c:	e008      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8005a5e:	4b07      	ldr	r3, [pc, #28]	; (8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8005a60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a62:	e005      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005a64:	2300      	movs	r3, #0
 8005a66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a68:	bf00      	nop
 8005a6a:	e001      	b.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3740      	adds	r7, #64	; 0x40
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	007a1200 	.word	0x007a1200
 8005a80:	00bb8000 	.word	0x00bb8000
 8005a84:	58024400 	.word	0x58024400
 8005a88:	03d09000 	.word	0x03d09000
 8005a8c:	003d0900 	.word	0x003d0900

08005a90 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005a94:	f7fe fe4a 	bl	800472c <HAL_RCC_GetHCLKFreq>
 8005a98:	4601      	mov	r1, r0
 8005a9a:	4b06      	ldr	r3, [pc, #24]	; (8005ab4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	091b      	lsrs	r3, r3, #4
 8005aa0:	f003 0307 	and.w	r3, r3, #7
 8005aa4:	4a04      	ldr	r2, [pc, #16]	; (8005ab8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005aa6:	5cd3      	ldrb	r3, [r2, r3]
 8005aa8:	f003 031f 	and.w	r3, r3, #31
 8005aac:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	58024400 	.word	0x58024400
 8005ab8:	08015930 	.word	0x08015930

08005abc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b089      	sub	sp, #36	; 0x24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ac4:	4b9d      	ldr	r3, [pc, #628]	; (8005d3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac8:	f003 0303 	and.w	r3, r3, #3
 8005acc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005ace:	4b9b      	ldr	r3, [pc, #620]	; (8005d3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad2:	0b1b      	lsrs	r3, r3, #12
 8005ad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ad8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005ada:	4b98      	ldr	r3, [pc, #608]	; (8005d3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ade:	091b      	lsrs	r3, r3, #4
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005ae6:	4b95      	ldr	r3, [pc, #596]	; (8005d3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aea:	08db      	lsrs	r3, r3, #3
 8005aec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	fb02 f303 	mul.w	r3, r2, r3
 8005af6:	ee07 3a90 	vmov	s15, r3
 8005afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005afe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f000 810a 	beq.w	8005d1e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d05a      	beq.n	8005bc6 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d302      	bcc.n	8005b1a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d078      	beq.n	8005c0a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8005b18:	e099      	b.n	8005c4e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b1a:	4b88      	ldr	r3, [pc, #544]	; (8005d3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0320 	and.w	r3, r3, #32
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d02d      	beq.n	8005b82 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b26:	4b85      	ldr	r3, [pc, #532]	; (8005d3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	08db      	lsrs	r3, r3, #3
 8005b2c:	f003 0303 	and.w	r3, r3, #3
 8005b30:	4a83      	ldr	r2, [pc, #524]	; (8005d40 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8005b32:	fa22 f303 	lsr.w	r3, r2, r3
 8005b36:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	ee07 3a90 	vmov	s15, r3
 8005b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	ee07 3a90 	vmov	s15, r3
 8005b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b50:	4b7a      	ldr	r3, [pc, #488]	; (8005d3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b58:	ee07 3a90 	vmov	s15, r3
 8005b5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b60:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b64:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005d44 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005b68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b7c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005b80:	e087      	b.n	8005c92 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	ee07 3a90 	vmov	s15, r3
 8005b88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b8c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005d48 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8005b90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b94:	4b69      	ldr	r3, [pc, #420]	; (8005d3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b9c:	ee07 3a90 	vmov	s15, r3
 8005ba0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ba4:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ba8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005d44 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005bac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bc0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005bc4:	e065      	b.n	8005c92 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	ee07 3a90 	vmov	s15, r3
 8005bcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bd0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005bd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bd8:	4b58      	ldr	r3, [pc, #352]	; (8005d3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005be0:	ee07 3a90 	vmov	s15, r3
 8005be4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005be8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bec:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005d44 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005bf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bf8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c04:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c08:	e043      	b.n	8005c92 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	ee07 3a90 	vmov	s15, r3
 8005c10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c14:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005d50 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8005c18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c1c:	4b47      	ldr	r3, [pc, #284]	; (8005d3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c24:	ee07 3a90 	vmov	s15, r3
 8005c28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c2c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c30:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005d44 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005c34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c48:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c4c:	e021      	b.n	8005c92 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	ee07 3a90 	vmov	s15, r3
 8005c54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c58:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005c5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c60:	4b36      	ldr	r3, [pc, #216]	; (8005d3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c68:	ee07 3a90 	vmov	s15, r3
 8005c6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c70:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c74:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005d44 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005c78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c8c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c90:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005c92:	4b2a      	ldr	r3, [pc, #168]	; (8005d3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c96:	0a5b      	lsrs	r3, r3, #9
 8005c98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c9c:	ee07 3a90 	vmov	s15, r3
 8005ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ca4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ca8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cac:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cb8:	ee17 2a90 	vmov	r2, s15
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005cc0:	4b1e      	ldr	r3, [pc, #120]	; (8005d3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc4:	0c1b      	lsrs	r3, r3, #16
 8005cc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cca:	ee07 3a90 	vmov	s15, r3
 8005cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cda:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ce2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ce6:	ee17 2a90 	vmov	r2, s15
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005cee:	4b13      	ldr	r3, [pc, #76]	; (8005d3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf2:	0e1b      	lsrs	r3, r3, #24
 8005cf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cf8:	ee07 3a90 	vmov	s15, r3
 8005cfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d08:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d14:	ee17 2a90 	vmov	r2, s15
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005d1c:	e008      	b.n	8005d30 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	609a      	str	r2, [r3, #8]
}
 8005d30:	bf00      	nop
 8005d32:	3724      	adds	r7, #36	; 0x24
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	58024400 	.word	0x58024400
 8005d40:	03d09000 	.word	0x03d09000
 8005d44:	46000000 	.word	0x46000000
 8005d48:	4c742400 	.word	0x4c742400
 8005d4c:	4a742400 	.word	0x4a742400
 8005d50:	4af42400 	.word	0x4af42400

08005d54 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b089      	sub	sp, #36	; 0x24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d5c:	4b9d      	ldr	r3, [pc, #628]	; (8005fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d60:	f003 0303 	and.w	r3, r3, #3
 8005d64:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005d66:	4b9b      	ldr	r3, [pc, #620]	; (8005fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6a:	0d1b      	lsrs	r3, r3, #20
 8005d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d70:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005d72:	4b98      	ldr	r3, [pc, #608]	; (8005fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d76:	0a1b      	lsrs	r3, r3, #8
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005d7e:	4b95      	ldr	r3, [pc, #596]	; (8005fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d82:	08db      	lsrs	r3, r3, #3
 8005d84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	fb02 f303 	mul.w	r3, r2, r3
 8005d8e:	ee07 3a90 	vmov	s15, r3
 8005d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 810a 	beq.w	8005fb6 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d05a      	beq.n	8005e5e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d302      	bcc.n	8005db2 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d078      	beq.n	8005ea2 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8005db0:	e099      	b.n	8005ee6 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005db2:	4b88      	ldr	r3, [pc, #544]	; (8005fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0320 	and.w	r3, r3, #32
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d02d      	beq.n	8005e1a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005dbe:	4b85      	ldr	r3, [pc, #532]	; (8005fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	08db      	lsrs	r3, r3, #3
 8005dc4:	f003 0303 	and.w	r3, r3, #3
 8005dc8:	4a83      	ldr	r2, [pc, #524]	; (8005fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8005dca:	fa22 f303 	lsr.w	r3, r2, r3
 8005dce:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	ee07 3a90 	vmov	s15, r3
 8005dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	ee07 3a90 	vmov	s15, r3
 8005de0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005de4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005de8:	4b7a      	ldr	r3, [pc, #488]	; (8005fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005df0:	ee07 3a90 	vmov	s15, r3
 8005df4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005df8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dfc:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005fdc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005e00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e14:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005e18:	e087      	b.n	8005f2a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	ee07 3a90 	vmov	s15, r3
 8005e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e24:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8005e28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e2c:	4b69      	ldr	r3, [pc, #420]	; (8005fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e34:	ee07 3a90 	vmov	s15, r3
 8005e38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e40:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005fdc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005e44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e58:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e5c:	e065      	b.n	8005f2a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	ee07 3a90 	vmov	s15, r3
 8005e64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e68:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005e6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e70:	4b58      	ldr	r3, [pc, #352]	; (8005fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e78:	ee07 3a90 	vmov	s15, r3
 8005e7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e80:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e84:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005fdc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005e88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e9c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ea0:	e043      	b.n	8005f2a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	ee07 3a90 	vmov	s15, r3
 8005ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eac:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8005eb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eb4:	4b47      	ldr	r3, [pc, #284]	; (8005fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ebc:	ee07 3a90 	vmov	s15, r3
 8005ec0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ec4:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ec8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005fdc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005ecc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ed0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ed4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ed8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ee0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ee4:	e021      	b.n	8005f2a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	ee07 3a90 	vmov	s15, r3
 8005eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ef0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005ef4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ef8:	4b36      	ldr	r3, [pc, #216]	; (8005fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f00:	ee07 3a90 	vmov	s15, r3
 8005f04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f08:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f0c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005fdc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005f10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f24:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f28:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005f2a:	4b2a      	ldr	r3, [pc, #168]	; (8005fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	0a5b      	lsrs	r3, r3, #9
 8005f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f34:	ee07 3a90 	vmov	s15, r3
 8005f38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f44:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f50:	ee17 2a90 	vmov	r2, s15
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005f58:	4b1e      	ldr	r3, [pc, #120]	; (8005fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5c:	0c1b      	lsrs	r3, r3, #16
 8005f5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f62:	ee07 3a90 	vmov	s15, r3
 8005f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f72:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f7e:	ee17 2a90 	vmov	r2, s15
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005f86:	4b13      	ldr	r3, [pc, #76]	; (8005fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8a:	0e1b      	lsrs	r3, r3, #24
 8005f8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f90:	ee07 3a90 	vmov	s15, r3
 8005f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fa0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fac:	ee17 2a90 	vmov	r2, s15
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005fb4:	e008      	b.n	8005fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	609a      	str	r2, [r3, #8]
}
 8005fc8:	bf00      	nop
 8005fca:	3724      	adds	r7, #36	; 0x24
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	58024400 	.word	0x58024400
 8005fd8:	03d09000 	.word	0x03d09000
 8005fdc:	46000000 	.word	0x46000000
 8005fe0:	4c742400 	.word	0x4c742400
 8005fe4:	4a742400 	.word	0x4a742400
 8005fe8:	4af42400 	.word	0x4af42400

08005fec <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b089      	sub	sp, #36	; 0x24
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ff4:	4b9d      	ldr	r3, [pc, #628]	; (800626c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff8:	f003 0303 	and.w	r3, r3, #3
 8005ffc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005ffe:	4b9b      	ldr	r3, [pc, #620]	; (800626c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006002:	091b      	lsrs	r3, r3, #4
 8006004:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006008:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800600a:	4b98      	ldr	r3, [pc, #608]	; (800626c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800600c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006014:	4b95      	ldr	r3, [pc, #596]	; (800626c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006018:	08db      	lsrs	r3, r3, #3
 800601a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	fb02 f303 	mul.w	r3, r2, r3
 8006024:	ee07 3a90 	vmov	s15, r3
 8006028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800602c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	2b00      	cmp	r3, #0
 8006034:	f000 810a 	beq.w	800624c <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	2b01      	cmp	r3, #1
 800603c:	d05a      	beq.n	80060f4 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800603e:	2b01      	cmp	r3, #1
 8006040:	d302      	bcc.n	8006048 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8006042:	2b02      	cmp	r3, #2
 8006044:	d078      	beq.n	8006138 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8006046:	e099      	b.n	800617c <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006048:	4b88      	ldr	r3, [pc, #544]	; (800626c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0320 	and.w	r3, r3, #32
 8006050:	2b00      	cmp	r3, #0
 8006052:	d02d      	beq.n	80060b0 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006054:	4b85      	ldr	r3, [pc, #532]	; (800626c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	08db      	lsrs	r3, r3, #3
 800605a:	f003 0303 	and.w	r3, r3, #3
 800605e:	4a84      	ldr	r2, [pc, #528]	; (8006270 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8006060:	fa22 f303 	lsr.w	r3, r2, r3
 8006064:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	ee07 3a90 	vmov	s15, r3
 800606c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	ee07 3a90 	vmov	s15, r3
 8006076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800607a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800607e:	4b7b      	ldr	r3, [pc, #492]	; (800626c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006086:	ee07 3a90 	vmov	s15, r3
 800608a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800608e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006092:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006274 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8006096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800609a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800609e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060aa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80060ae:	e087      	b.n	80061c0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	ee07 3a90 	vmov	s15, r3
 80060b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006278 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 80060be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060c2:	4b6a      	ldr	r3, [pc, #424]	; (800626c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80060c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ca:	ee07 3a90 	vmov	s15, r3
 80060ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80060d6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006274 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80060da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060f2:	e065      	b.n	80061c0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	ee07 3a90 	vmov	s15, r3
 80060fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060fe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800627c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8006102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006106:	4b59      	ldr	r3, [pc, #356]	; (800626c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800610e:	ee07 3a90 	vmov	s15, r3
 8006112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006116:	ed97 6a03 	vldr	s12, [r7, #12]
 800611a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006274 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800611e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800612a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800612e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006132:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006136:	e043      	b.n	80061c0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	ee07 3a90 	vmov	s15, r3
 800613e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006142:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006280 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800614a:	4b48      	ldr	r3, [pc, #288]	; (800626c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800614c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006152:	ee07 3a90 	vmov	s15, r3
 8006156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800615a:	ed97 6a03 	vldr	s12, [r7, #12]
 800615e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006274 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8006162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800616a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800616e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006176:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800617a:	e021      	b.n	80061c0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	ee07 3a90 	vmov	s15, r3
 8006182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006186:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800627c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800618a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800618e:	4b37      	ldr	r3, [pc, #220]	; (800626c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006196:	ee07 3a90 	vmov	s15, r3
 800619a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800619e:	ed97 6a03 	vldr	s12, [r7, #12]
 80061a2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006274 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80061a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061be:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80061c0:	4b2a      	ldr	r3, [pc, #168]	; (800626c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80061c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c4:	0a5b      	lsrs	r3, r3, #9
 80061c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ca:	ee07 3a90 	vmov	s15, r3
 80061ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061da:	edd7 6a07 	vldr	s13, [r7, #28]
 80061de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061e6:	ee17 2a90 	vmov	r2, s15
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80061ee:	4b1f      	ldr	r3, [pc, #124]	; (800626c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80061f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f2:	0c1b      	lsrs	r3, r3, #16
 80061f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061f8:	ee07 3a90 	vmov	s15, r3
 80061fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006200:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006204:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006208:	edd7 6a07 	vldr	s13, [r7, #28]
 800620c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006214:	ee17 2a90 	vmov	r2, s15
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800621c:	4b13      	ldr	r3, [pc, #76]	; (800626c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800621e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006220:	0e1b      	lsrs	r3, r3, #24
 8006222:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006226:	ee07 3a90 	vmov	s15, r3
 800622a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800622e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006232:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006236:	edd7 6a07 	vldr	s13, [r7, #28]
 800623a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800623e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006242:	ee17 2a90 	vmov	r2, s15
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800624a:	e008      	b.n	800625e <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	609a      	str	r2, [r3, #8]
}
 800625e:	bf00      	nop
 8006260:	3724      	adds	r7, #36	; 0x24
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	58024400 	.word	0x58024400
 8006270:	03d09000 	.word	0x03d09000
 8006274:	46000000 	.word	0x46000000
 8006278:	4c742400 	.word	0x4c742400
 800627c:	4a742400 	.word	0x4a742400
 8006280:	4af42400 	.word	0x4af42400

08006284 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800628e:	2300      	movs	r3, #0
 8006290:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006292:	4b53      	ldr	r3, [pc, #332]	; (80063e0 <RCCEx_PLL2_Config+0x15c>)
 8006294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006296:	f003 0303 	and.w	r3, r3, #3
 800629a:	2b03      	cmp	r3, #3
 800629c:	d101      	bne.n	80062a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e099      	b.n	80063d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80062a2:	4b4f      	ldr	r3, [pc, #316]	; (80063e0 <RCCEx_PLL2_Config+0x15c>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a4e      	ldr	r2, [pc, #312]	; (80063e0 <RCCEx_PLL2_Config+0x15c>)
 80062a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80062ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062ae:	f7fb f925 	bl	80014fc <HAL_GetTick>
 80062b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80062b4:	e008      	b.n	80062c8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80062b6:	f7fb f921 	bl	80014fc <HAL_GetTick>
 80062ba:	4602      	mov	r2, r0
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d901      	bls.n	80062c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e086      	b.n	80063d6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80062c8:	4b45      	ldr	r3, [pc, #276]	; (80063e0 <RCCEx_PLL2_Config+0x15c>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1f0      	bne.n	80062b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80062d4:	4b42      	ldr	r3, [pc, #264]	; (80063e0 <RCCEx_PLL2_Config+0x15c>)
 80062d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	031b      	lsls	r3, r3, #12
 80062e2:	493f      	ldr	r1, [pc, #252]	; (80063e0 <RCCEx_PLL2_Config+0x15c>)
 80062e4:	4313      	orrs	r3, r2
 80062e6:	628b      	str	r3, [r1, #40]	; 0x28
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	3b01      	subs	r3, #1
 80062ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	3b01      	subs	r3, #1
 80062f8:	025b      	lsls	r3, r3, #9
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	431a      	orrs	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	3b01      	subs	r3, #1
 8006304:	041b      	lsls	r3, r3, #16
 8006306:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800630a:	431a      	orrs	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	3b01      	subs	r3, #1
 8006312:	061b      	lsls	r3, r3, #24
 8006314:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006318:	4931      	ldr	r1, [pc, #196]	; (80063e0 <RCCEx_PLL2_Config+0x15c>)
 800631a:	4313      	orrs	r3, r2
 800631c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800631e:	4b30      	ldr	r3, [pc, #192]	; (80063e0 <RCCEx_PLL2_Config+0x15c>)
 8006320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006322:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	492d      	ldr	r1, [pc, #180]	; (80063e0 <RCCEx_PLL2_Config+0x15c>)
 800632c:	4313      	orrs	r3, r2
 800632e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006330:	4b2b      	ldr	r3, [pc, #172]	; (80063e0 <RCCEx_PLL2_Config+0x15c>)
 8006332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006334:	f023 0220 	bic.w	r2, r3, #32
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	4928      	ldr	r1, [pc, #160]	; (80063e0 <RCCEx_PLL2_Config+0x15c>)
 800633e:	4313      	orrs	r3, r2
 8006340:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006342:	4b27      	ldr	r3, [pc, #156]	; (80063e0 <RCCEx_PLL2_Config+0x15c>)
 8006344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006346:	4a26      	ldr	r2, [pc, #152]	; (80063e0 <RCCEx_PLL2_Config+0x15c>)
 8006348:	f023 0310 	bic.w	r3, r3, #16
 800634c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800634e:	4b24      	ldr	r3, [pc, #144]	; (80063e0 <RCCEx_PLL2_Config+0x15c>)
 8006350:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006352:	4b24      	ldr	r3, [pc, #144]	; (80063e4 <RCCEx_PLL2_Config+0x160>)
 8006354:	4013      	ands	r3, r2
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	69d2      	ldr	r2, [r2, #28]
 800635a:	00d2      	lsls	r2, r2, #3
 800635c:	4920      	ldr	r1, [pc, #128]	; (80063e0 <RCCEx_PLL2_Config+0x15c>)
 800635e:	4313      	orrs	r3, r2
 8006360:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006362:	4b1f      	ldr	r3, [pc, #124]	; (80063e0 <RCCEx_PLL2_Config+0x15c>)
 8006364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006366:	4a1e      	ldr	r2, [pc, #120]	; (80063e0 <RCCEx_PLL2_Config+0x15c>)
 8006368:	f043 0310 	orr.w	r3, r3, #16
 800636c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d106      	bne.n	8006382 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006374:	4b1a      	ldr	r3, [pc, #104]	; (80063e0 <RCCEx_PLL2_Config+0x15c>)
 8006376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006378:	4a19      	ldr	r2, [pc, #100]	; (80063e0 <RCCEx_PLL2_Config+0x15c>)
 800637a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800637e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006380:	e00f      	b.n	80063a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d106      	bne.n	8006396 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006388:	4b15      	ldr	r3, [pc, #84]	; (80063e0 <RCCEx_PLL2_Config+0x15c>)
 800638a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638c:	4a14      	ldr	r2, [pc, #80]	; (80063e0 <RCCEx_PLL2_Config+0x15c>)
 800638e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006392:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006394:	e005      	b.n	80063a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006396:	4b12      	ldr	r3, [pc, #72]	; (80063e0 <RCCEx_PLL2_Config+0x15c>)
 8006398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639a:	4a11      	ldr	r2, [pc, #68]	; (80063e0 <RCCEx_PLL2_Config+0x15c>)
 800639c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80063a2:	4b0f      	ldr	r3, [pc, #60]	; (80063e0 <RCCEx_PLL2_Config+0x15c>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a0e      	ldr	r2, [pc, #56]	; (80063e0 <RCCEx_PLL2_Config+0x15c>)
 80063a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80063ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063ae:	f7fb f8a5 	bl	80014fc <HAL_GetTick>
 80063b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80063b4:	e008      	b.n	80063c8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80063b6:	f7fb f8a1 	bl	80014fc <HAL_GetTick>
 80063ba:	4602      	mov	r2, r0
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d901      	bls.n	80063c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e006      	b.n	80063d6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80063c8:	4b05      	ldr	r3, [pc, #20]	; (80063e0 <RCCEx_PLL2_Config+0x15c>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d0f0      	beq.n	80063b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80063d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	58024400 	.word	0x58024400
 80063e4:	ffff0007 	.word	0xffff0007

080063e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063f2:	2300      	movs	r3, #0
 80063f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80063f6:	4b53      	ldr	r3, [pc, #332]	; (8006544 <RCCEx_PLL3_Config+0x15c>)
 80063f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fa:	f003 0303 	and.w	r3, r3, #3
 80063fe:	2b03      	cmp	r3, #3
 8006400:	d101      	bne.n	8006406 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e099      	b.n	800653a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006406:	4b4f      	ldr	r3, [pc, #316]	; (8006544 <RCCEx_PLL3_Config+0x15c>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a4e      	ldr	r2, [pc, #312]	; (8006544 <RCCEx_PLL3_Config+0x15c>)
 800640c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006410:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006412:	f7fb f873 	bl	80014fc <HAL_GetTick>
 8006416:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006418:	e008      	b.n	800642c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800641a:	f7fb f86f 	bl	80014fc <HAL_GetTick>
 800641e:	4602      	mov	r2, r0
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	2b02      	cmp	r3, #2
 8006426:	d901      	bls.n	800642c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e086      	b.n	800653a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800642c:	4b45      	ldr	r3, [pc, #276]	; (8006544 <RCCEx_PLL3_Config+0x15c>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1f0      	bne.n	800641a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006438:	4b42      	ldr	r3, [pc, #264]	; (8006544 <RCCEx_PLL3_Config+0x15c>)
 800643a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	051b      	lsls	r3, r3, #20
 8006446:	493f      	ldr	r1, [pc, #252]	; (8006544 <RCCEx_PLL3_Config+0x15c>)
 8006448:	4313      	orrs	r3, r2
 800644a:	628b      	str	r3, [r1, #40]	; 0x28
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	3b01      	subs	r3, #1
 8006452:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	3b01      	subs	r3, #1
 800645c:	025b      	lsls	r3, r3, #9
 800645e:	b29b      	uxth	r3, r3
 8006460:	431a      	orrs	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	3b01      	subs	r3, #1
 8006468:	041b      	lsls	r3, r3, #16
 800646a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800646e:	431a      	orrs	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	3b01      	subs	r3, #1
 8006476:	061b      	lsls	r3, r3, #24
 8006478:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800647c:	4931      	ldr	r1, [pc, #196]	; (8006544 <RCCEx_PLL3_Config+0x15c>)
 800647e:	4313      	orrs	r3, r2
 8006480:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006482:	4b30      	ldr	r3, [pc, #192]	; (8006544 <RCCEx_PLL3_Config+0x15c>)
 8006484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006486:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	492d      	ldr	r1, [pc, #180]	; (8006544 <RCCEx_PLL3_Config+0x15c>)
 8006490:	4313      	orrs	r3, r2
 8006492:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006494:	4b2b      	ldr	r3, [pc, #172]	; (8006544 <RCCEx_PLL3_Config+0x15c>)
 8006496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006498:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	4928      	ldr	r1, [pc, #160]	; (8006544 <RCCEx_PLL3_Config+0x15c>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80064a6:	4b27      	ldr	r3, [pc, #156]	; (8006544 <RCCEx_PLL3_Config+0x15c>)
 80064a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064aa:	4a26      	ldr	r2, [pc, #152]	; (8006544 <RCCEx_PLL3_Config+0x15c>)
 80064ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80064b2:	4b24      	ldr	r3, [pc, #144]	; (8006544 <RCCEx_PLL3_Config+0x15c>)
 80064b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064b6:	4b24      	ldr	r3, [pc, #144]	; (8006548 <RCCEx_PLL3_Config+0x160>)
 80064b8:	4013      	ands	r3, r2
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	69d2      	ldr	r2, [r2, #28]
 80064be:	00d2      	lsls	r2, r2, #3
 80064c0:	4920      	ldr	r1, [pc, #128]	; (8006544 <RCCEx_PLL3_Config+0x15c>)
 80064c2:	4313      	orrs	r3, r2
 80064c4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80064c6:	4b1f      	ldr	r3, [pc, #124]	; (8006544 <RCCEx_PLL3_Config+0x15c>)
 80064c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ca:	4a1e      	ldr	r2, [pc, #120]	; (8006544 <RCCEx_PLL3_Config+0x15c>)
 80064cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d106      	bne.n	80064e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80064d8:	4b1a      	ldr	r3, [pc, #104]	; (8006544 <RCCEx_PLL3_Config+0x15c>)
 80064da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064dc:	4a19      	ldr	r2, [pc, #100]	; (8006544 <RCCEx_PLL3_Config+0x15c>)
 80064de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80064e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80064e4:	e00f      	b.n	8006506 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d106      	bne.n	80064fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80064ec:	4b15      	ldr	r3, [pc, #84]	; (8006544 <RCCEx_PLL3_Config+0x15c>)
 80064ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f0:	4a14      	ldr	r2, [pc, #80]	; (8006544 <RCCEx_PLL3_Config+0x15c>)
 80064f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80064f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80064f8:	e005      	b.n	8006506 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80064fa:	4b12      	ldr	r3, [pc, #72]	; (8006544 <RCCEx_PLL3_Config+0x15c>)
 80064fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fe:	4a11      	ldr	r2, [pc, #68]	; (8006544 <RCCEx_PLL3_Config+0x15c>)
 8006500:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006504:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006506:	4b0f      	ldr	r3, [pc, #60]	; (8006544 <RCCEx_PLL3_Config+0x15c>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a0e      	ldr	r2, [pc, #56]	; (8006544 <RCCEx_PLL3_Config+0x15c>)
 800650c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006510:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006512:	f7fa fff3 	bl	80014fc <HAL_GetTick>
 8006516:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006518:	e008      	b.n	800652c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800651a:	f7fa ffef 	bl	80014fc <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	2b02      	cmp	r3, #2
 8006526:	d901      	bls.n	800652c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e006      	b.n	800653a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800652c:	4b05      	ldr	r3, [pc, #20]	; (8006544 <RCCEx_PLL3_Config+0x15c>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d0f0      	beq.n	800651a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006538:	7bfb      	ldrb	r3, [r7, #15]
}
 800653a:	4618      	mov	r0, r3
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	58024400 	.word	0x58024400
 8006548:	ffff0007 	.word	0xffff0007

0800654c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	f000 808a 	beq.w	8006674 <HAL_RTC_Init+0x128>
  {
    status = HAL_OK;
 8006560:	2300      	movs	r3, #0
 8006562:	73fb      	strb	r3, [r7, #15]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2b00      	cmp	r3, #0
 800656e:	d106      	bne.n	800657e <HAL_RTC_Init+0x32>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f7fa fd2f 	bl	8000fdc <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2202      	movs	r2, #2
 8006582:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	22ca      	movs	r2, #202	; 0xca
 800658c:	625a      	str	r2, [r3, #36]	; 0x24
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2253      	movs	r2, #83	; 0x53
 8006594:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 fab6 	bl	8006b08 <RTC_EnterInitMode>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00a      	beq.n	80065b8 <HAL_RTC_Init+0x6c>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	22ff      	movs	r2, #255	; 0xff
 80065a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2204      	movs	r2, #4
 80065ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	73fb      	strb	r3, [r7, #15]
 80065b6:	e05d      	b.n	8006674 <HAL_RTC_Init+0x128>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6899      	ldr	r1, [r3, #8]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	4b2f      	ldr	r3, [pc, #188]	; (8006680 <HAL_RTC_Init+0x134>)
 80065c4:	400b      	ands	r3, r1
 80065c6:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	6899      	ldr	r1, [r3, #8]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	431a      	orrs	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	431a      	orrs	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	0419      	lsls	r1, r3, #16
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	68da      	ldr	r2, [r3, #12]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	430a      	orrs	r2, r1
 80065f6:	611a      	str	r2, [r3, #16]
      /* Exit Initialization mode */
#if defined(RTC_ICSR_INIT)
      CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
#endif /* RTC_ICSR_INIT */
#if defined(RTC_ISR_INIT)
      CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68da      	ldr	r2, [r3, #12]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006606:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_INIT */

      /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f003 0320 	and.w	r3, r3, #32
 8006612:	2b00      	cmp	r3, #0
 8006614:	d10f      	bne.n	8006636 <HAL_RTC_Init+0xea>
      {
        if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fa50 	bl	8006abc <HAL_RTC_WaitForSynchro>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d009      	beq.n	8006636 <HAL_RTC_Init+0xea>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	22ff      	movs	r2, #255	; 0xff
 8006628:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2204      	movs	r2, #4
 800662e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          status = HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	73fb      	strb	r3, [r7, #15]
        }
      }

      if(status == HAL_OK)
 8006636:	7bfb      	ldrb	r3, [r7, #15]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d11b      	bne.n	8006674 <HAL_RTC_Init+0x128>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f022 0203 	bic.w	r2, r2, #3
 800664a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	69da      	ldr	r2, [r3, #28]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	431a      	orrs	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	430a      	orrs	r2, r1
 8006662:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	22ff      	movs	r2, #255	; 0xff
 800666a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  /* return status */
  return status;
 8006674:	7bfb      	ldrb	r3, [r7, #15]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	ff8fffbf 	.word	0xff8fffbf

08006684 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006684:	b590      	push	{r4, r7, lr}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d101      	bne.n	800669e <HAL_RTC_SetTime+0x1a>
 800669a:	2302      	movs	r3, #2
 800669c:	e0b0      	b.n	8006800 <HAL_RTC_SetTime+0x17c>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2202      	movs	r2, #2
 80066aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	22ca      	movs	r2, #202	; 0xca
 80066b4:	625a      	str	r2, [r3, #36]	; 0x24
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2253      	movs	r2, #83	; 0x53
 80066bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	f000 fa22 	bl	8006b08 <RTC_EnterInitMode>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00d      	beq.n	80066e6 <HAL_RTC_SetTime+0x62>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	22ff      	movs	r2, #255	; 0xff
 80066d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2204      	movs	r2, #4
 80066d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e08c      	b.n	8006800 <HAL_RTC_SetTime+0x17c>
  }
  else
  {
    if(Format == RTC_FORMAT_BIN)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d126      	bne.n	800673a <HAL_RTC_SetTime+0xb6>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d102      	bne.n	8006700 <HAL_RTC_SetTime+0x7c>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	2200      	movs	r2, #0
 80066fe:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	4618      	mov	r0, r3
 8006706:	f000 fa29 	bl	8006b5c <RTC_ByteToBcd2>
 800670a:	4603      	mov	r3, r0
 800670c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	785b      	ldrb	r3, [r3, #1]
 8006712:	4618      	mov	r0, r3
 8006714:	f000 fa22 	bl	8006b5c <RTC_ByteToBcd2>
 8006718:	4603      	mov	r3, r0
 800671a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800671c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	789b      	ldrb	r3, [r3, #2]
 8006722:	4618      	mov	r0, r3
 8006724:	f000 fa1a 	bl	8006b5c <RTC_ByteToBcd2>
 8006728:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800672a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	78db      	ldrb	r3, [r3, #3]
 8006732:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006734:	4313      	orrs	r3, r2
 8006736:	617b      	str	r3, [r7, #20]
 8006738:	e018      	b.n	800676c <HAL_RTC_SetTime+0xe8>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006744:	2b00      	cmp	r3, #0
 8006746:	d102      	bne.n	800674e <HAL_RTC_SetTime+0xca>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	2200      	movs	r2, #0
 800674c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	785b      	ldrb	r3, [r3, #1]
 8006758:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800675a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006760:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	78db      	ldrb	r3, [r3, #3]
 8006766:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006768:	4313      	orrs	r3, r2
 800676a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	6979      	ldr	r1, [r7, #20]
 8006772:	4b25      	ldr	r3, [pc, #148]	; (8006808 <HAL_RTC_SetTime+0x184>)
 8006774:	400b      	ands	r3, r1
 8006776:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	689a      	ldr	r2, [r3, #8]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006786:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6899      	ldr	r1, [r3, #8]
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	68da      	ldr	r2, [r3, #12]
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	431a      	orrs	r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	430a      	orrs	r2, r1
 800679e:	609a      	str	r2, [r3, #8]
    /* Exit Initialization mode */
#if defined(RTC_ICSR_INIT)
    CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
#endif /* RTC_ICSR_INIT */
#if defined(RTC_ISR_INIT)
    CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68da      	ldr	r2, [r3, #12]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067ae:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_INIT */

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	f003 0320 	and.w	r3, r3, #32
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d113      	bne.n	80067e6 <HAL_RTC_SetTime+0x162>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f000 f97c 	bl	8006abc <HAL_RTC_WaitForSynchro>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00d      	beq.n	80067e6 <HAL_RTC_SetTime+0x162>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	22ff      	movs	r2, #255	; 0xff
 80067d0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2204      	movs	r2, #4
 80067d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e00c      	b.n	8006800 <HAL_RTC_SetTime+0x17c>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	22ff      	movs	r2, #255	; 0xff
 80067ec:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    __HAL_UNLOCK(hrtc);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 80067fe:	2300      	movs	r3, #0
  }
}
 8006800:	4618      	mov	r0, r3
 8006802:	371c      	adds	r7, #28
 8006804:	46bd      	mov	sp, r7
 8006806:	bd90      	pop	{r4, r7, pc}
 8006808:	007f7f7f 	.word	0x007f7f7f

0800680c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b086      	sub	sp, #24
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	4b22      	ldr	r3, [pc, #136]	; (80068c0 <HAL_RTC_GetTime+0xb4>)
 8006838:	4013      	ands	r3, r2
 800683a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	0c1b      	lsrs	r3, r3, #16
 8006840:	b2db      	uxtb	r3, r3
 8006842:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006846:	b2da      	uxtb	r2, r3
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	0a1b      	lsrs	r3, r3, #8
 8006850:	b2db      	uxtb	r3, r3
 8006852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006856:	b2da      	uxtb	r2, r3
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	b2db      	uxtb	r3, r3
 8006860:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006864:	b2da      	uxtb	r2, r3
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	0d9b      	lsrs	r3, r3, #22
 800686e:	b2db      	uxtb	r3, r3
 8006870:	f003 0301 	and.w	r3, r3, #1
 8006874:	b2da      	uxtb	r2, r3
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d11a      	bne.n	80068b6 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	4618      	mov	r0, r3
 8006886:	f000 f989 	bl	8006b9c <RTC_Bcd2ToByte>
 800688a:	4603      	mov	r3, r0
 800688c:	461a      	mov	r2, r3
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	785b      	ldrb	r3, [r3, #1]
 8006896:	4618      	mov	r0, r3
 8006898:	f000 f980 	bl	8006b9c <RTC_Bcd2ToByte>
 800689c:	4603      	mov	r3, r0
 800689e:	461a      	mov	r2, r3
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	789b      	ldrb	r3, [r3, #2]
 80068a8:	4618      	mov	r0, r3
 80068aa:	f000 f977 	bl	8006b9c <RTC_Bcd2ToByte>
 80068ae:	4603      	mov	r3, r0
 80068b0:	461a      	mov	r2, r3
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3718      	adds	r7, #24
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	007f7f7f 	.word	0x007f7f7f

080068c4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80068c4:	b590      	push	{r4, r7, lr}
 80068c6:	b087      	sub	sp, #28
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d101      	bne.n	80068de <HAL_RTC_SetDate+0x1a>
 80068da:	2302      	movs	r3, #2
 80068dc:	e09a      	b.n	8006a14 <HAL_RTC_SetDate+0x150>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2202      	movs	r2, #2
 80068ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10e      	bne.n	8006912 <HAL_RTC_SetDate+0x4e>
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	785b      	ldrb	r3, [r3, #1]
 80068f8:	f003 0310 	and.w	r3, r3, #16
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d008      	beq.n	8006912 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	785b      	ldrb	r3, [r3, #1]
 8006904:	f023 0310 	bic.w	r3, r3, #16
 8006908:	b2db      	uxtb	r3, r3
 800690a:	330a      	adds	r3, #10
 800690c:	b2da      	uxtb	r2, r3
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d11c      	bne.n	8006952 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	78db      	ldrb	r3, [r3, #3]
 800691c:	4618      	mov	r0, r3
 800691e:	f000 f91d 	bl	8006b5c <RTC_ByteToBcd2>
 8006922:	4603      	mov	r3, r0
 8006924:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	785b      	ldrb	r3, [r3, #1]
 800692a:	4618      	mov	r0, r3
 800692c:	f000 f916 	bl	8006b5c <RTC_ByteToBcd2>
 8006930:	4603      	mov	r3, r0
 8006932:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006934:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	789b      	ldrb	r3, [r3, #2]
 800693a:	4618      	mov	r0, r3
 800693c:	f000 f90e 	bl	8006b5c <RTC_ByteToBcd2>
 8006940:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006942:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800694c:	4313      	orrs	r3, r2
 800694e:	617b      	str	r3, [r7, #20]
 8006950:	e00e      	b.n	8006970 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	78db      	ldrb	r3, [r3, #3]
 8006956:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	785b      	ldrb	r3, [r3, #1]
 800695c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800695e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8006960:	68ba      	ldr	r2, [r7, #8]
 8006962:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006964:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800696c:	4313      	orrs	r3, r2
 800696e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	22ca      	movs	r2, #202	; 0xca
 8006976:	625a      	str	r2, [r3, #36]	; 0x24
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2253      	movs	r2, #83	; 0x53
 800697e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f000 f8c1 	bl	8006b08 <RTC_EnterInitMode>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00d      	beq.n	80069a8 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	22ff      	movs	r2, #255	; 0xff
 8006992:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2204      	movs	r2, #4
 8006998:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e035      	b.n	8006a14 <HAL_RTC_SetDate+0x150>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	6979      	ldr	r1, [r7, #20]
 80069ae:	4b1b      	ldr	r3, [pc, #108]	; (8006a1c <HAL_RTC_SetDate+0x158>)
 80069b0:	400b      	ands	r3, r1
 80069b2:	6053      	str	r3, [r2, #4]
    /* Exit Initialization mode */
#if defined(RTC_ICSR_INIT)
    CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
#endif /* RTC_ISR_INIT */
#if defined(RTC_ISR_INIT)
    CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68da      	ldr	r2, [r3, #12]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069c2:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_INIT */

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	f003 0320 	and.w	r3, r3, #32
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d113      	bne.n	80069fa <HAL_RTC_SetDate+0x136>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	f000 f872 	bl	8006abc <HAL_RTC_WaitForSynchro>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00d      	beq.n	80069fa <HAL_RTC_SetDate+0x136>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	22ff      	movs	r2, #255	; 0xff
 80069e4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2204      	movs	r2, #4
 80069ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e00c      	b.n	8006a14 <HAL_RTC_SetDate+0x150>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	22ff      	movs	r2, #255	; 0xff
 8006a00:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8006a12:	2300      	movs	r3, #0
  }
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	371c      	adds	r7, #28
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd90      	pop	{r4, r7, pc}
 8006a1c:	00ffff3f 	.word	0x00ffff3f

08006a20 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b086      	sub	sp, #24
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	685a      	ldr	r2, [r3, #4]
 8006a32:	4b21      	ldr	r3, [pc, #132]	; (8006ab8 <HAL_RTC_GetDate+0x98>)
 8006a34:	4013      	ands	r3, r2
 8006a36:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	0c1b      	lsrs	r3, r3, #16
 8006a3c:	b2da      	uxtb	r2, r3
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	0a1b      	lsrs	r3, r3, #8
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	f003 031f 	and.w	r3, r3, #31
 8006a4c:	b2da      	uxtb	r2, r3
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	0b5b      	lsrs	r3, r3, #13
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	f003 0307 	and.w	r3, r3, #7
 8006a6a:	b2da      	uxtb	r2, r3
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d11a      	bne.n	8006aac <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	78db      	ldrb	r3, [r3, #3]
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f000 f88e 	bl	8006b9c <RTC_Bcd2ToByte>
 8006a80:	4603      	mov	r3, r0
 8006a82:	461a      	mov	r2, r3
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	785b      	ldrb	r3, [r3, #1]
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f000 f885 	bl	8006b9c <RTC_Bcd2ToByte>
 8006a92:	4603      	mov	r3, r0
 8006a94:	461a      	mov	r2, r3
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	789b      	ldrb	r3, [r3, #2]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f000 f87c 	bl	8006b9c <RTC_Bcd2ToByte>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3718      	adds	r7, #24
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	00ffff3f 	.word	0x00ffff3f

08006abc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68da      	ldr	r2, [r3, #12]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006ad2:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8006ad4:	f7fa fd12 	bl	80014fc <HAL_GetTick>
 8006ad8:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006ada:	e009      	b.n	8006af0 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006adc:	f7fa fd0e 	bl	80014fc <HAL_GetTick>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006aea:	d901      	bls.n	8006af0 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8006aec:	2303      	movs	r3, #3
 8006aee:	e007      	b.n	8006b00 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	f003 0320 	and.w	r3, r3, #32
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d0ee      	beq.n	8006adc <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3710      	adds	r7, #16
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d119      	bne.n	8006b52 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f04f 32ff 	mov.w	r2, #4294967295
 8006b26:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006b28:	f7fa fce8 	bl	80014fc <HAL_GetTick>
 8006b2c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006b2e:	e009      	b.n	8006b44 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006b30:	f7fa fce4 	bl	80014fc <HAL_GetTick>
 8006b34:	4602      	mov	r2, r0
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b3e:	d901      	bls.n	8006b44 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006b40:	2303      	movs	r3, #3
 8006b42:	e007      	b.n	8006b54 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d0ee      	beq.n	8006b30 <RTC_EnterInitMode+0x28>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	4603      	mov	r3, r0
 8006b64:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006b66:	2300      	movs	r3, #0
 8006b68:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8006b6a:	79fb      	ldrb	r3, [r7, #7]
 8006b6c:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8006b6e:	e005      	b.n	8006b7c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	3301      	adds	r3, #1
 8006b74:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8006b76:	7afb      	ldrb	r3, [r7, #11]
 8006b78:	3b0a      	subs	r3, #10
 8006b7a:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8006b7c:	7afb      	ldrb	r3, [r7, #11]
 8006b7e:	2b09      	cmp	r3, #9
 8006b80:	d8f6      	bhi.n	8006b70 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	011b      	lsls	r3, r3, #4
 8006b88:	b2da      	uxtb	r2, r3
 8006b8a:	7afb      	ldrb	r3, [r7, #11]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	b2db      	uxtb	r3, r3
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3714      	adds	r7, #20
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b085      	sub	sp, #20
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8006ba6:	79fb      	ldrb	r3, [r7, #7]
 8006ba8:	091b      	lsrs	r3, r3, #4
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	461a      	mov	r2, r3
 8006bae:	0092      	lsls	r2, r2, #2
 8006bb0:	4413      	add	r3, r2
 8006bb2:	005b      	lsls	r3, r3, #1
 8006bb4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8006bb6:	79fb      	ldrb	r3, [r7, #7]
 8006bb8:	f003 030f 	and.w	r3, r3, #15
 8006bbc:	b2da      	uxtb	r2, r3
 8006bbe:	7bfb      	ldrb	r3, [r7, #15]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	b2db      	uxtb	r3, r3
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3714      	adds	r7, #20
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b08a      	sub	sp, #40	; 0x28
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d101      	bne.n	8006be2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e07c      	b.n	8006cdc <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10c      	bne.n	8006c08 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d102      	bne.n	8006c02 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2202      	movs	r2, #2
 8006c00:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7fa fa04 	bl	8001010 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2203      	movs	r2, #3
 8006c0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 f867 	bl	8006ce4 <HAL_SD_InitCard>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d001      	beq.n	8006c20 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e05d      	b.n	8006cdc <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8006c20:	f107 0308 	add.w	r3, r7, #8
 8006c24:	4619      	mov	r1, r3
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 fdb8 	bl	800779c <HAL_SD_GetCardStatus>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d001      	beq.n	8006c36 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e052      	b.n	8006cdc <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8006c36:	7e3b      	ldrb	r3, [r7, #24]
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8006c3c:	7e7b      	ldrb	r3, [r7, #25]
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d10a      	bne.n	8006c60 <HAL_SD_Init+0x90>
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d102      	bne.n	8006c56 <HAL_SD_Init+0x86>
 8006c50:	6a3b      	ldr	r3, [r7, #32]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d004      	beq.n	8006c60 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8006c5e:	e00b      	b.n	8006c78 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d104      	bne.n	8006c72 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c6e:	65da      	str	r2, [r3, #92]	; 0x5c
 8006c70:	e002      	b.n	8006c78 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fe6e 	bl	8007960 <HAL_SD_ConfigWideBusOperation>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d001      	beq.n	8006c8e <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e026      	b.n	8006cdc <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006c8e:	f7fa fc35 	bl	80014fc <HAL_GetTick>
 8006c92:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006c94:	e011      	b.n	8006cba <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8006c96:	f7fa fc31 	bl	80014fc <HAL_GetTick>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca4:	d109      	bne.n	8006cba <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006cac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e010      	b.n	8006cdc <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 fefa 	bl	8007ab4 <HAL_SD_GetCardState>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b04      	cmp	r3, #4
 8006cc4:	d1e7      	bne.n	8006c96 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3728      	adds	r7, #40	; 0x28
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006ce4:	b5b0      	push	{r4, r5, r7, lr}
 8006ce6:	b08e      	sub	sp, #56	; 0x38
 8006ce8:	af04      	add	r7, sp, #16
 8006cea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006cec:	2300      	movs	r3, #0
 8006cee:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	617b      	str	r3, [r7, #20]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8006cfc:	23fa      	movs	r3, #250	; 0xfa
 8006cfe:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d107      	bne.n	8006d18 <HAL_SD_InitCard+0x34>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f042 0210 	orr.w	r2, r2, #16
 8006d16:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681d      	ldr	r5, [r3, #0]
 8006d1c:	466c      	mov	r4, sp
 8006d1e:	f107 0314 	add.w	r3, r7, #20
 8006d22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006d26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006d2a:	f107 0308 	add.w	r3, r7, #8
 8006d2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d30:	4628      	mov	r0, r5
 8006d32:	f004 f9db 	bl	800b0ec <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f004 fa1e 	bl	800b17c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting 
     the SD initialization sequence */
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC)/(2U*SDMMC_INIT_CLK_DIV);
 8006d40:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006d44:	f7fe fc2c 	bl	80055a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	4b2d      	ldr	r3, [pc, #180]	; (8006e00 <HAL_SD_InitCard+0x11c>)
 8006d4c:	fba3 2302 	umull	r2, r3, r3, r2
 8006d50:	095b      	lsrs	r3, r3, #5
 8006d52:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d008      	beq.n	8006d6c <HAL_SD_InitCard+0x88>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8006d5a:	4a2a      	ldr	r2, [pc, #168]	; (8006e04 <HAL_SD_InitCard+0x120>)
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d62:	3301      	adds	r3, #1
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7fa fbd5 	bl	8001514 <HAL_Delay>
 8006d6a:	e002      	b.n	8006d72 <HAL_SD_InitCard+0x8e>
  }
  else
  {
    HAL_Delay(2U);
 8006d6c:	2002      	movs	r0, #2
 8006d6e:	f7fa fbd1 	bl	8001514 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 ff7c 	bl	8007c70 <SD_PowerON>
 8006d78:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d7a:	6a3b      	ldr	r3, [r7, #32]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00b      	beq.n	8006d98 <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d8c:	6a3b      	ldr	r3, [r7, #32]
 8006d8e:	431a      	orrs	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e02e      	b.n	8006df6 <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 feab 	bl	8007af4 <SD_InitCard>
 8006d9e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006da0:	6a3b      	ldr	r3, [r7, #32]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00b      	beq.n	8006dbe <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006db2:	6a3b      	ldr	r3, [r7, #32]
 8006db4:	431a      	orrs	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e01b      	b.n	8006df6 <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f004 fa6e 	bl	800b2a8 <SDMMC_CmdBlockLength>
 8006dcc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006dce:	6a3b      	ldr	r3, [r7, #32]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00f      	beq.n	8006df4 <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a0b      	ldr	r2, [pc, #44]	; (8006e08 <HAL_SD_InitCard+0x124>)
 8006dda:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006de0:	6a3b      	ldr	r3, [r7, #32]
 8006de2:	431a      	orrs	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	e000      	b.n	8006df6 <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3728      	adds	r7, #40	; 0x28
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bdb0      	pop	{r4, r5, r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	10624dd3 	.word	0x10624dd3
 8006e04:	00012110 	.word	0x00012110
 8006e08:	1fe00fff 	.word	0x1fe00fff

08006e0c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b092      	sub	sp, #72	; 0x48
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
 8006e18:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006e1a:	f7fa fb6f 	bl	80014fc <HAL_GetTick>
 8006e1e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d107      	bne.n	8006e3e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e32:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e167      	b.n	800710e <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	f040 815a 	bne.w	8007100 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006e52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	441a      	add	r2, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d907      	bls.n	8006e70 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e64:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e14e      	b.n	800710e <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2203      	movs	r2, #3
 8006e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d002      	beq.n	8006e8e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8006e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8a:	025b      	lsls	r3, r3, #9
 8006e8c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e92:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	025b      	lsls	r3, r3, #9
 8006e98:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006e9a:	2390      	movs	r3, #144	; 0x90
 8006e9c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006e9e:	2302      	movs	r3, #2
 8006ea0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f107 0214 	add.w	r2, r7, #20
 8006eb2:	4611      	mov	r1, r2
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f004 f9cb 	bl	800b250 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68da      	ldr	r2, [r3, #12]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ec8:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d90a      	bls.n	8006ee6 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006edc:	4618      	mov	r0, r3
 8006ede:	f004 fa29 	bl	800b334 <SDMMC_CmdReadMultiBlock>
 8006ee2:	6478      	str	r0, [r7, #68]	; 0x44
 8006ee4:	e009      	b.n	8006efa <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f004 f9fb 	bl	800b2ee <SDMMC_CmdReadSingleBlock>
 8006ef8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006efa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d012      	beq.n	8006f26 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a84      	ldr	r2, [pc, #528]	; (8007118 <HAL_SD_ReadBlocks+0x30c>)
 8006f06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f0e:	431a      	orrs	r2, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e0f3      	b.n	800710e <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006f2a:	e058      	b.n	8006fde <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d033      	beq.n	8006fa2 <HAL_SD_ReadBlocks+0x196>
 8006f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f3c:	2b1f      	cmp	r3, #31
 8006f3e:	d930      	bls.n	8006fa2 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8006f40:	2300      	movs	r3, #0
 8006f42:	643b      	str	r3, [r7, #64]	; 0x40
 8006f44:	e027      	b.n	8006f96 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f004 f8f8 	bl	800b140 <SDMMC_ReadFIFO>
 8006f50:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f54:	b2da      	uxtb	r2, r3
 8006f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f58:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f62:	0a1b      	lsrs	r3, r3, #8
 8006f64:	b2da      	uxtb	r2, r3
 8006f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f68:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f72:	0c1b      	lsrs	r3, r3, #16
 8006f74:	b2da      	uxtb	r2, r3
 8006f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f78:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f82:	0e1b      	lsrs	r3, r3, #24
 8006f84:	b2da      	uxtb	r2, r3
 8006f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f88:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 8006f90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f92:	3301      	adds	r3, #1
 8006f94:	643b      	str	r3, [r7, #64]	; 0x40
 8006f96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f98:	2b07      	cmp	r3, #7
 8006f9a:	d9d4      	bls.n	8006f46 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8006f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f9e:	3b20      	subs	r3, #32
 8006fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006fa2:	f7fa faab 	bl	80014fc <HAL_GetTick>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d902      	bls.n	8006fb8 <HAL_SD_ReadBlocks+0x1ac>
 8006fb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d112      	bne.n	8006fde <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a56      	ldr	r2, [pc, #344]	; (8007118 <HAL_SD_ReadBlocks+0x30c>)
 8006fbe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e097      	b.n	800710e <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fe4:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d09f      	beq.n	8006f2c <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68da      	ldr	r2, [r3, #12]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ffa:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007006:	2b00      	cmp	r3, #0
 8007008:	d022      	beq.n	8007050 <HAL_SD_ReadBlocks+0x244>
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2b01      	cmp	r3, #1
 800700e:	d91f      	bls.n	8007050 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007014:	2b03      	cmp	r3, #3
 8007016:	d01b      	beq.n	8007050 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4618      	mov	r0, r3
 800701e:	f004 f9f3 	bl	800b408 <SDMMC_CmdStopTransfer>
 8007022:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007026:	2b00      	cmp	r3, #0
 8007028:	d012      	beq.n	8007050 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a3a      	ldr	r2, [pc, #232]	; (8007118 <HAL_SD_ReadBlocks+0x30c>)
 8007030:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007036:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007038:	431a      	orrs	r2, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2201      	movs	r2, #1
 8007042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2200      	movs	r2, #0
 800704a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e05e      	b.n	800710e <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007056:	f003 0308 	and.w	r3, r3, #8
 800705a:	2b00      	cmp	r3, #0
 800705c:	d012      	beq.n	8007084 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a2d      	ldr	r2, [pc, #180]	; (8007118 <HAL_SD_ReadBlocks+0x30c>)
 8007064:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706a:	f043 0208 	orr.w	r2, r3, #8
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2201      	movs	r2, #1
 8007076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	e044      	b.n	800710e <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800708a:	f003 0302 	and.w	r3, r3, #2
 800708e:	2b00      	cmp	r3, #0
 8007090:	d012      	beq.n	80070b8 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a20      	ldr	r2, [pc, #128]	; (8007118 <HAL_SD_ReadBlocks+0x30c>)
 8007098:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709e:	f043 0202 	orr.w	r2, r3, #2
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2200      	movs	r2, #0
 80070b2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e02a      	b.n	800710e <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070be:	f003 0320 	and.w	r3, r3, #32
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d012      	beq.n	80070ec <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a13      	ldr	r2, [pc, #76]	; (8007118 <HAL_SD_ReadBlocks+0x30c>)
 80070cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d2:	f043 0220 	orr.w	r2, r3, #32
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2201      	movs	r2, #1
 80070de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	e010      	b.n	800710e <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a0a      	ldr	r2, [pc, #40]	; (800711c <HAL_SD_ReadBlocks+0x310>)
 80070f2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80070fc:	2300      	movs	r3, #0
 80070fe:	e006      	b.n	800710e <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007104:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
  }
}
 800710e:	4618      	mov	r0, r3
 8007110:	3748      	adds	r7, #72	; 0x48
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	1fe00fff 	.word	0x1fe00fff
 800711c:	18000f3a 	.word	0x18000f3a

08007120 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b092      	sub	sp, #72	; 0x48
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
 800712c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800712e:	f7fa f9e5 	bl	80014fc <HAL_GetTick>
 8007132:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d107      	bne.n	8007152 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007146:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e16b      	b.n	800742a <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b01      	cmp	r3, #1
 800715c:	f040 815e 	bne.w	800741c <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007166:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	441a      	add	r2, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007170:	429a      	cmp	r2, r3
 8007172:	d907      	bls.n	8007184 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007178:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	e152      	b.n	800742a <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2203      	movs	r2, #3
 8007188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2200      	movs	r2, #0
 8007192:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007198:	2b01      	cmp	r3, #1
 800719a:	d002      	beq.n	80071a2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800719c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719e:	025b      	lsls	r3, r3, #9
 80071a0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80071a2:	f04f 33ff 	mov.w	r3, #4294967295
 80071a6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	025b      	lsls	r3, r3, #9
 80071ac:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80071ae:	2390      	movs	r3, #144	; 0x90
 80071b0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80071b2:	2300      	movs	r3, #0
 80071b4:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80071b6:	2300      	movs	r3, #0
 80071b8:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80071ba:	2300      	movs	r3, #0
 80071bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f107 0218 	add.w	r2, r7, #24
 80071c6:	4611      	mov	r1, r2
 80071c8:	4618      	mov	r0, r3
 80071ca:	f004 f841 	bl	800b250 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68da      	ldr	r2, [r3, #12]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071dc:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d90a      	bls.n	80071fa <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2220      	movs	r2, #32
 80071e8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80071f0:	4618      	mov	r0, r3
 80071f2:	f004 f8e5 	bl	800b3c0 <SDMMC_CmdWriteMultiBlock>
 80071f6:	6478      	str	r0, [r7, #68]	; 0x44
 80071f8:	e009      	b.n	800720e <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2210      	movs	r2, #16
 80071fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007206:	4618      	mov	r0, r3
 8007208:	f004 f8b7 	bl	800b37a <SDMMC_CmdWriteSingleBlock>
 800720c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800720e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007210:	2b00      	cmp	r3, #0
 8007212:	d012      	beq.n	800723a <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a86      	ldr	r2, [pc, #536]	; (8007434 <HAL_SD_WriteBlocks+0x314>)
 800721a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007222:	431a      	orrs	r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2200      	movs	r2, #0
 8007234:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e0f7      	b.n	800742a <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800723e:	e05c      	b.n	80072fa <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800724a:	2b00      	cmp	r3, #0
 800724c:	d037      	beq.n	80072be <HAL_SD_WriteBlocks+0x19e>
 800724e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007250:	2b1f      	cmp	r3, #31
 8007252:	d934      	bls.n	80072be <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8007254:	2300      	movs	r3, #0
 8007256:	643b      	str	r3, [r7, #64]	; 0x40
 8007258:	e02b      	b.n	80072b2 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800725a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007262:	3301      	adds	r3, #1
 8007264:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8007266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	021a      	lsls	r2, r3, #8
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	4313      	orrs	r3, r2
 8007270:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007274:	3301      	adds	r3, #1
 8007276:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	041a      	lsls	r2, r3, #16
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	4313      	orrs	r3, r2
 8007282:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007286:	3301      	adds	r3, #1
 8007288:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800728a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	061a      	lsls	r2, r3, #24
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	4313      	orrs	r3, r2
 8007294:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007298:	3301      	adds	r3, #1
 800729a:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f107 0214 	add.w	r2, r7, #20
 80072a4:	4611      	mov	r1, r2
 80072a6:	4618      	mov	r0, r3
 80072a8:	f003 ff57 	bl	800b15a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80072ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072ae:	3301      	adds	r3, #1
 80072b0:	643b      	str	r3, [r7, #64]	; 0x40
 80072b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072b4:	2b07      	cmp	r3, #7
 80072b6:	d9d0      	bls.n	800725a <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 80072b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ba:	3b20      	subs	r3, #32
 80072bc:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80072be:	f7fa f91d 	bl	80014fc <HAL_GetTick>
 80072c2:	4602      	mov	r2, r0
 80072c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d902      	bls.n	80072d4 <HAL_SD_WriteBlocks+0x1b4>
 80072ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d112      	bne.n	80072fa <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a56      	ldr	r2, [pc, #344]	; (8007434 <HAL_SD_WriteBlocks+0x314>)
 80072da:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072e2:	431a      	orrs	r2, r3
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2200      	movs	r2, #0
 80072f4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	e097      	b.n	800742a <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007300:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8007304:	2b00      	cmp	r3, #0
 8007306:	d09b      	beq.n	8007240 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	68da      	ldr	r2, [r3, #12]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007316:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800731e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007322:	2b00      	cmp	r3, #0
 8007324:	d022      	beq.n	800736c <HAL_SD_WriteBlocks+0x24c>
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	2b01      	cmp	r3, #1
 800732a:	d91f      	bls.n	800736c <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007330:	2b03      	cmp	r3, #3
 8007332:	d01b      	beq.n	800736c <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4618      	mov	r0, r3
 800733a:	f004 f865 	bl	800b408 <SDMMC_CmdStopTransfer>
 800733e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007342:	2b00      	cmp	r3, #0
 8007344:	d012      	beq.n	800736c <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a3a      	ldr	r2, [pc, #232]	; (8007434 <HAL_SD_WriteBlocks+0x314>)
 800734c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007354:	431a      	orrs	r2, r3
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2201      	movs	r2, #1
 800735e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e05e      	b.n	800742a <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007372:	f003 0308 	and.w	r3, r3, #8
 8007376:	2b00      	cmp	r3, #0
 8007378:	d012      	beq.n	80073a0 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a2d      	ldr	r2, [pc, #180]	; (8007434 <HAL_SD_WriteBlocks+0x314>)
 8007380:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007386:	f043 0208 	orr.w	r2, r3, #8
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2201      	movs	r2, #1
 8007392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	e044      	b.n	800742a <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073a6:	f003 0302 	and.w	r3, r3, #2
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d012      	beq.n	80073d4 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a20      	ldr	r2, [pc, #128]	; (8007434 <HAL_SD_WriteBlocks+0x314>)
 80073b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ba:	f043 0202 	orr.w	r2, r3, #2
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2201      	movs	r2, #1
 80073c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	e02a      	b.n	800742a <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073da:	f003 0310 	and.w	r3, r3, #16
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d012      	beq.n	8007408 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a13      	ldr	r2, [pc, #76]	; (8007434 <HAL_SD_WriteBlocks+0x314>)
 80073e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ee:	f043 0210 	orr.w	r2, r3, #16
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e010      	b.n	800742a <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a0a      	ldr	r2, [pc, #40]	; (8007438 <HAL_SD_WriteBlocks+0x318>)
 800740e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007418:	2300      	movs	r3, #0
 800741a:	e006      	b.n	800742a <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007420:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007428:	2301      	movs	r3, #1
  }
}
 800742a:	4618      	mov	r0, r3
 800742c:	3748      	adds	r7, #72	; 0x48
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	1fe00fff 	.word	0x1fe00fff
 8007438:	18000f3a 	.word	0x18000f3a

0800743c <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	4603      	mov	r3, r0
 8007444:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 8007446:	bf00      	nop
 8007448:	370c      	adds	r7, #12
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
	...

08007454 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007462:	0f9b      	lsrs	r3, r3, #30
 8007464:	b2da      	uxtb	r2, r3
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800746e:	0e9b      	lsrs	r3, r3, #26
 8007470:	b2db      	uxtb	r3, r3
 8007472:	f003 030f 	and.w	r3, r3, #15
 8007476:	b2da      	uxtb	r2, r3
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007480:	0e1b      	lsrs	r3, r3, #24
 8007482:	b2db      	uxtb	r3, r3
 8007484:	f003 0303 	and.w	r3, r3, #3
 8007488:	b2da      	uxtb	r2, r3
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007492:	0c1b      	lsrs	r3, r3, #16
 8007494:	b2da      	uxtb	r2, r3
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800749e:	0a1b      	lsrs	r3, r3, #8
 80074a0:	b2da      	uxtb	r2, r3
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074aa:	b2da      	uxtb	r2, r3
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074b4:	0d1b      	lsrs	r3, r3, #20
 80074b6:	b29a      	uxth	r2, r3
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074c0:	0c1b      	lsrs	r3, r3, #16
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	f003 030f 	and.w	r3, r3, #15
 80074c8:	b2da      	uxtb	r2, r3
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074d2:	0bdb      	lsrs	r3, r3, #15
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	f003 0301 	and.w	r3, r3, #1
 80074da:	b2da      	uxtb	r2, r3
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074e4:	0b9b      	lsrs	r3, r3, #14
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	f003 0301 	and.w	r3, r3, #1
 80074ec:	b2da      	uxtb	r2, r3
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074f6:	0b5b      	lsrs	r3, r3, #13
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	f003 0301 	and.w	r3, r3, #1
 80074fe:	b2da      	uxtb	r2, r3
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007508:	0b1b      	lsrs	r3, r3, #12
 800750a:	b2db      	uxtb	r3, r3
 800750c:	f003 0301 	and.w	r3, r3, #1
 8007510:	b2da      	uxtb	r2, r3
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	2200      	movs	r2, #0
 800751a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007520:	2b00      	cmp	r3, #0
 8007522:	d163      	bne.n	80075ec <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007528:	009a      	lsls	r2, r3, #2
 800752a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800752e:	4013      	ands	r3, r2
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007534:	0f92      	lsrs	r2, r2, #30
 8007536:	431a      	orrs	r2, r3
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007540:	0edb      	lsrs	r3, r3, #27
 8007542:	b2db      	uxtb	r3, r3
 8007544:	f003 0307 	and.w	r3, r3, #7
 8007548:	b2da      	uxtb	r2, r3
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007552:	0e1b      	lsrs	r3, r3, #24
 8007554:	b2db      	uxtb	r3, r3
 8007556:	f003 0307 	and.w	r3, r3, #7
 800755a:	b2da      	uxtb	r2, r3
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007564:	0d5b      	lsrs	r3, r3, #21
 8007566:	b2db      	uxtb	r3, r3
 8007568:	f003 0307 	and.w	r3, r3, #7
 800756c:	b2da      	uxtb	r2, r3
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007576:	0c9b      	lsrs	r3, r3, #18
 8007578:	b2db      	uxtb	r3, r3
 800757a:	f003 0307 	and.w	r3, r3, #7
 800757e:	b2da      	uxtb	r2, r3
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007588:	0bdb      	lsrs	r3, r3, #15
 800758a:	b2db      	uxtb	r3, r3
 800758c:	f003 0307 	and.w	r3, r3, #7
 8007590:	b2da      	uxtb	r2, r3
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	1c5a      	adds	r2, r3, #1
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	7e1b      	ldrb	r3, [r3, #24]
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	f003 0307 	and.w	r3, r3, #7
 80075aa:	3302      	adds	r3, #2
 80075ac:	2201      	movs	r2, #1
 80075ae:	fa02 f303 	lsl.w	r3, r2, r3
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80075b6:	fb02 f203 	mul.w	r2, r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	7a1b      	ldrb	r3, [r3, #8]
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	f003 030f 	and.w	r3, r3, #15
 80075c8:	2201      	movs	r2, #1
 80075ca:	409a      	lsls	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80075d8:	0a52      	lsrs	r2, r2, #9
 80075da:	fb02 f203 	mul.w	r2, r2, r3
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075e8:	659a      	str	r2, [r3, #88]	; 0x58
 80075ea:	e031      	b.n	8007650 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d11d      	bne.n	8007630 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075f8:	041b      	lsls	r3, r3, #16
 80075fa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007602:	0c1b      	lsrs	r3, r3, #16
 8007604:	431a      	orrs	r2, r3
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	3301      	adds	r3, #1
 8007610:	029a      	lsls	r2, r3, #10
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007624:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	659a      	str	r2, [r3, #88]	; 0x58
 800762e:	e00f      	b.n	8007650 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a58      	ldr	r2, [pc, #352]	; (8007798 <HAL_SD_GetCardCSD+0x344>)
 8007636:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e09d      	b.n	800778c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007654:	0b9b      	lsrs	r3, r3, #14
 8007656:	b2db      	uxtb	r3, r3
 8007658:	f003 0301 	and.w	r3, r3, #1
 800765c:	b2da      	uxtb	r2, r3
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007666:	09db      	lsrs	r3, r3, #7
 8007668:	b2db      	uxtb	r3, r3
 800766a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800766e:	b2da      	uxtb	r2, r3
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007678:	b2db      	uxtb	r3, r3
 800767a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800767e:	b2da      	uxtb	r2, r3
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007688:	0fdb      	lsrs	r3, r3, #31
 800768a:	b2da      	uxtb	r2, r3
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007694:	0f5b      	lsrs	r3, r3, #29
 8007696:	b2db      	uxtb	r3, r3
 8007698:	f003 0303 	and.w	r3, r3, #3
 800769c:	b2da      	uxtb	r2, r3
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076a6:	0e9b      	lsrs	r3, r3, #26
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	f003 0307 	and.w	r3, r3, #7
 80076ae:	b2da      	uxtb	r2, r3
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076b8:	0d9b      	lsrs	r3, r3, #22
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	f003 030f 	and.w	r3, r3, #15
 80076c0:	b2da      	uxtb	r2, r3
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076ca:	0d5b      	lsrs	r3, r3, #21
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	f003 0301 	and.w	r3, r3, #1
 80076d2:	b2da      	uxtb	r2, r3
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	2200      	movs	r2, #0
 80076de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076e6:	0c1b      	lsrs	r3, r3, #16
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	f003 0301 	and.w	r3, r3, #1
 80076ee:	b2da      	uxtb	r2, r3
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076fa:	0bdb      	lsrs	r3, r3, #15
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	f003 0301 	and.w	r3, r3, #1
 8007702:	b2da      	uxtb	r2, r3
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800770e:	0b9b      	lsrs	r3, r3, #14
 8007710:	b2db      	uxtb	r3, r3
 8007712:	f003 0301 	and.w	r3, r3, #1
 8007716:	b2da      	uxtb	r2, r3
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007722:	0b5b      	lsrs	r3, r3, #13
 8007724:	b2db      	uxtb	r3, r3
 8007726:	f003 0301 	and.w	r3, r3, #1
 800772a:	b2da      	uxtb	r2, r3
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007736:	0b1b      	lsrs	r3, r3, #12
 8007738:	b2db      	uxtb	r3, r3
 800773a:	f003 0301 	and.w	r3, r3, #1
 800773e:	b2da      	uxtb	r2, r3
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800774a:	0a9b      	lsrs	r3, r3, #10
 800774c:	b2db      	uxtb	r3, r3
 800774e:	f003 0303 	and.w	r3, r3, #3
 8007752:	b2da      	uxtb	r2, r3
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800775e:	0a1b      	lsrs	r3, r3, #8
 8007760:	b2db      	uxtb	r3, r3
 8007762:	f003 0303 	and.w	r3, r3, #3
 8007766:	b2da      	uxtb	r2, r3
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007772:	085b      	lsrs	r3, r3, #1
 8007774:	b2db      	uxtb	r3, r3
 8007776:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800777a:	b2da      	uxtb	r2, r3
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800778a:	2300      	movs	r3, #0
}
 800778c:	4618      	mov	r0, r3
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr
 8007798:	1fe00fff 	.word	0x1fe00fff

0800779c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that 
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b094      	sub	sp, #80	; 0x50
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80077ac:	f107 0308 	add.w	r3, r7, #8
 80077b0:	4619      	mov	r1, r3
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 fb64 	bl	8007e80 <SD_SendSDStatus>
 80077b8:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80077ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d011      	beq.n	80077e4 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a4f      	ldr	r2, [pc, #316]	; (8007904 <HAL_SD_GetCardStatus+0x168>)
 80077c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077ce:	431a      	orrs	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80077e2:	e070      	b.n	80078c6 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	099b      	lsrs	r3, r3, #6
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	f003 0303 	and.w	r3, r3, #3
 80077ee:	b2da      	uxtb	r2, r3
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	095b      	lsrs	r3, r3, #5
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	f003 0301 	and.w	r3, r3, #1
 80077fe:	b2da      	uxtb	r2, r3
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	0a1b      	lsrs	r3, r3, #8
 8007808:	b29b      	uxth	r3, r3
 800780a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800780e:	b29a      	uxth	r2, r3
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	0e1b      	lsrs	r3, r3, #24
 8007814:	b29b      	uxth	r3, r3
 8007816:	4313      	orrs	r3, r2
 8007818:	b29a      	uxth	r2, r3
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	061a      	lsls	r2, r3, #24
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	021b      	lsls	r3, r3, #8
 8007826:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800782a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	0a1b      	lsrs	r3, r3, #8
 8007830:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007834:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	0e1b      	lsrs	r3, r3, #24
 800783a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	b2da      	uxtb	r2, r3
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	0a1b      	lsrs	r3, r3, #8
 800784c:	b2da      	uxtb	r2, r3
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	0d1b      	lsrs	r3, r3, #20
 8007856:	b2db      	uxtb	r3, r3
 8007858:	f003 030f 	and.w	r3, r3, #15
 800785c:	b2da      	uxtb	r2, r3
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	0c1b      	lsrs	r3, r3, #16
 8007866:	b29b      	uxth	r3, r3
 8007868:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800786c:	b29a      	uxth	r2, r3
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	b29b      	uxth	r3, r3
 8007872:	b2db      	uxtb	r3, r3
 8007874:	b29b      	uxth	r3, r3
 8007876:	4313      	orrs	r3, r2
 8007878:	b29a      	uxth	r2, r3
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	0a9b      	lsrs	r3, r3, #10
 8007882:	b2db      	uxtb	r3, r3
 8007884:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007888:	b2da      	uxtb	r2, r3
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	0a1b      	lsrs	r3, r3, #8
 8007892:	b2db      	uxtb	r3, r3
 8007894:	f003 0303 	and.w	r3, r3, #3
 8007898:	b2da      	uxtb	r2, r3
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	091b      	lsrs	r3, r3, #4
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	f003 030f 	and.w	r3, r3, #15
 80078a8:	b2da      	uxtb	r2, r3
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	f003 030f 	and.w	r3, r3, #15
 80078b6:	b2da      	uxtb	r2, r3
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	0e1b      	lsrs	r3, r3, #24
 80078c0:	b2da      	uxtb	r2, r3
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80078ce:	4618      	mov	r0, r3
 80078d0:	f003 fcea 	bl	800b2a8 <SDMMC_CmdBlockLength>
 80078d4:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80078d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00d      	beq.n	80078f8 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a08      	ldr	r2, [pc, #32]	; (8007904 <HAL_SD_GetCardStatus+0x168>)
 80078e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078e8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2201      	movs	r2, #1
 80078ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 80078f8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3750      	adds	r7, #80	; 0x50
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	1fe00fff 	.word	0x1fe00fff

08007908 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007960:	b5b0      	push	{r4, r5, r7, lr}
 8007962:	b08e      	sub	sp, #56	; 0x38
 8007964:	af04      	add	r7, sp, #16
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800796a:	2300      	movs	r3, #0
 800796c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2203      	movs	r2, #3
 8007974:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800797c:	2b03      	cmp	r3, #3
 800797e:	d02e      	beq.n	80079de <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007986:	d106      	bne.n	8007996 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800798c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	639a      	str	r2, [r3, #56]	; 0x38
 8007994:	e029      	b.n	80079ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800799c:	d10a      	bne.n	80079b4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 fb66 	bl	8008070 <SD_WideBus_Enable>
 80079a4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079aa:	6a3b      	ldr	r3, [r7, #32]
 80079ac:	431a      	orrs	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	639a      	str	r2, [r3, #56]	; 0x38
 80079b2:	e01a      	b.n	80079ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10a      	bne.n	80079d0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 fba3 	bl	8008106 <SD_WideBus_Disable>
 80079c0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079c6:	6a3b      	ldr	r3, [r7, #32]
 80079c8:	431a      	orrs	r2, r3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	639a      	str	r2, [r3, #56]	; 0x38
 80079ce:	e00c      	b.n	80079ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	639a      	str	r2, [r3, #56]	; 0x38
 80079dc:	e005      	b.n	80079ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d007      	beq.n	8007a02 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a2e      	ldr	r2, [pc, #184]	; (8007ab0 <HAL_SD_ConfigWideBusOperation+0x150>)
 80079f8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007a00:	e034      	b.n	8007a6c <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	695b      	ldr	r3, [r3, #20]
 8007a1c:	2b03      	cmp	r3, #3
 8007a1e:	d903      	bls.n	8007a28 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	695b      	ldr	r3, [r3, #20]
 8007a24:	61bb      	str	r3, [r7, #24]
 8007a26:	e012      	b.n	8007a4e <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a30:	d103      	bne.n	8007a3a <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	695b      	ldr	r3, [r3, #20]
 8007a36:	61bb      	str	r3, [r7, #24]
 8007a38:	e009      	b.n	8007a4e <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a42:	d102      	bne.n	8007a4a <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8007a44:	2302      	movs	r3, #2
 8007a46:	61bb      	str	r3, [r7, #24]
 8007a48:	e001      	b.n	8007a4e <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8007a4a:	2304      	movs	r3, #4
 8007a4c:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681d      	ldr	r5, [r3, #0]
 8007a52:	466c      	mov	r4, sp
 8007a54:	f107 0314 	add.w	r3, r7, #20
 8007a58:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007a5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007a60:	f107 0308 	add.w	r3, r7, #8
 8007a64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a66:	4628      	mov	r0, r5
 8007a68:	f003 fb40 	bl	800b0ec <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007a74:	4618      	mov	r0, r3
 8007a76:	f003 fc17 	bl	800b2a8 <SDMMC_CmdBlockLength>
 8007a7a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a7c:	6a3b      	ldr	r3, [r7, #32]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00c      	beq.n	8007a9c <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a0a      	ldr	r2, [pc, #40]	; (8007ab0 <HAL_SD_ConfigWideBusOperation+0x150>)
 8007a88:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a8e:	6a3b      	ldr	r3, [r7, #32]
 8007a90:	431a      	orrs	r2, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8007aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3728      	adds	r7, #40	; 0x28
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bdb0      	pop	{r4, r5, r7, pc}
 8007ab0:	1fe00fff 	.word	0x1fe00fff

08007ab4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b086      	sub	sp, #24
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007abc:	2300      	movs	r3, #0
 8007abe:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007ac0:	f107 030c 	add.w	r3, r7, #12
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 faaa 	bl	8008020 <SD_SendStatus>
 8007acc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d005      	beq.n	8007ae0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	431a      	orrs	r2, r3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	0a5b      	lsrs	r3, r3, #9
 8007ae4:	f003 030f 	and.w	r3, r3, #15
 8007ae8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007aea:	693b      	ldr	r3, [r7, #16]
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3718      	adds	r7, #24
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007af4:	b590      	push	{r4, r7, lr}
 8007af6:	b091      	sub	sp, #68	; 0x44
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007afc:	2301      	movs	r3, #1
 8007afe:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4618      	mov	r0, r3
 8007b06:	f003 fb4a 	bl	800b19e <SDMMC_GetPowerState>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d102      	bne.n	8007b16 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007b10:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007b14:	e0a8      	b.n	8007c68 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b1a:	2b03      	cmp	r3, #3
 8007b1c:	d02e      	beq.n	8007b7c <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4618      	mov	r0, r3
 8007b24:	f003 fd96 	bl	800b654 <SDMMC_CmdSendCID>
 8007b28:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d001      	beq.n	8007b34 <SD_InitCard+0x40>
    {
      return errorstate;
 8007b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b32:	e099      	b.n	8007c68 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2100      	movs	r1, #0
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f003 fb75 	bl	800b22a <SDMMC_GetResponse>
 8007b40:	4602      	mov	r2, r0
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2104      	movs	r1, #4
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f003 fb6c 	bl	800b22a <SDMMC_GetResponse>
 8007b52:	4602      	mov	r2, r0
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2108      	movs	r1, #8
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f003 fb63 	bl	800b22a <SDMMC_GetResponse>
 8007b64:	4602      	mov	r2, r0
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	210c      	movs	r1, #12
 8007b70:	4618      	mov	r0, r3
 8007b72:	f003 fb5a 	bl	800b22a <SDMMC_GetResponse>
 8007b76:	4602      	mov	r2, r0
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b80:	2b03      	cmp	r3, #3
 8007b82:	d00d      	beq.n	8007ba0 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f107 020e 	add.w	r2, r7, #14
 8007b8c:	4611      	mov	r1, r2
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f003 fd9f 	bl	800b6d2 <SDMMC_CmdSetRelAdd>
 8007b94:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d001      	beq.n	8007ba0 <SD_InitCard+0xac>
    {
      return errorstate;
 8007b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b9e:	e063      	b.n	8007c68 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba4:	2b03      	cmp	r3, #3
 8007ba6:	d036      	beq.n	8007c16 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007ba8:	89fb      	ldrh	r3, [r7, #14]
 8007baa:	461a      	mov	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bb8:	041b      	lsls	r3, r3, #16
 8007bba:	4619      	mov	r1, r3
 8007bbc:	4610      	mov	r0, r2
 8007bbe:	f003 fd68 	bl	800b692 <SDMMC_CmdSendCSD>
 8007bc2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d001      	beq.n	8007bce <SD_InitCard+0xda>
    {
      return errorstate;
 8007bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bcc:	e04c      	b.n	8007c68 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2100      	movs	r1, #0
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f003 fb28 	bl	800b22a <SDMMC_GetResponse>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2104      	movs	r1, #4
 8007be6:	4618      	mov	r0, r3
 8007be8:	f003 fb1f 	bl	800b22a <SDMMC_GetResponse>
 8007bec:	4602      	mov	r2, r0
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2108      	movs	r1, #8
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f003 fb16 	bl	800b22a <SDMMC_GetResponse>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	210c      	movs	r1, #12
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f003 fb0d 	bl	800b22a <SDMMC_GetResponse>
 8007c10:	4602      	mov	r2, r0
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2104      	movs	r1, #4
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f003 fb04 	bl	800b22a <SDMMC_GetResponse>
 8007c22:	4603      	mov	r3, r0
 8007c24:	0d1a      	lsrs	r2, r3, #20
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007c2a:	f107 0310 	add.w	r3, r7, #16
 8007c2e:	4619      	mov	r1, r3
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f7ff fc0f 	bl	8007454 <HAL_SD_GetCardCSD>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d002      	beq.n	8007c42 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007c3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007c40:	e012      	b.n	8007c68 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6819      	ldr	r1, [r3, #0]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c4a:	041b      	lsls	r3, r3, #16
 8007c4c:	f04f 0400 	mov.w	r4, #0
 8007c50:	461a      	mov	r2, r3
 8007c52:	4623      	mov	r3, r4
 8007c54:	4608      	mov	r0, r1
 8007c56:	f003 fc13 	bl	800b480 <SDMMC_CmdSelDesel>
 8007c5a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d001      	beq.n	8007c66 <SD_InitCard+0x172>
  {
    return errorstate;
 8007c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c64:	e000      	b.n	8007c68 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007c66:	2300      	movs	r3, #0
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3744      	adds	r7, #68	; 0x44
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd90      	pop	{r4, r7, pc}

08007c70 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b088      	sub	sp, #32
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	61fb      	str	r3, [r7, #28]
 8007c80:	2300      	movs	r3, #0
 8007c82:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8007c84:	f7f9 fc3a 	bl	80014fc <HAL_GetTick>
 8007c88:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f003 fc1a 	bl	800b4c8 <SDMMC_CmdGoIdleState>
 8007c94:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d001      	beq.n	8007ca0 <SD_PowerON+0x30>
  {
    return errorstate;
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	e0e9      	b.n	8007e74 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f003 fc2d 	bl	800b504 <SDMMC_CmdOperCond>
 8007caa:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00d      	beq.n	8007cce <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f003 fc03 	bl	800b4c8 <SDMMC_CmdGoIdleState>
 8007cc2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d004      	beq.n	8007cd4 <SD_PowerON+0x64>
    {
      return errorstate;
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	e0d2      	b.n	8007e74 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d137      	bne.n	8007d4c <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f003 fc2e 	bl	800b544 <SDMMC_CmdAppCommand>
 8007ce8:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d02d      	beq.n	8007d4c <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007cf0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007cf4:	e0be      	b.n	8007e74 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2100      	movs	r1, #0
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f003 fc21 	bl	800b544 <SDMMC_CmdAppCommand>
 8007d02:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d001      	beq.n	8007d0e <SD_PowerON+0x9e>
    {
      return errorstate;
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	e0b2      	b.n	8007e74 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	495a      	ldr	r1, [pc, #360]	; (8007e7c <SD_PowerON+0x20c>)
 8007d14:	4618      	mov	r0, r3
 8007d16:	f003 fc38 	bl	800b58a <SDMMC_CmdAppOperCommand>
 8007d1a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d002      	beq.n	8007d28 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007d26:	e0a5      	b.n	8007e74 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f003 fa7b 	bl	800b22a <SDMMC_GetResponse>
 8007d34:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	0fdb      	lsrs	r3, r3, #31
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d101      	bne.n	8007d42 <SD_PowerON+0xd2>
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e000      	b.n	8007d44 <SD_PowerON+0xd4>
 8007d42:	2300      	movs	r3, #0
 8007d44:	61bb      	str	r3, [r7, #24]

    count++;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d802      	bhi.n	8007d5c <SD_PowerON+0xec>
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d0cc      	beq.n	8007cf6 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d902      	bls.n	8007d6c <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007d66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d6a:	e083      	b.n	8007e74 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d07d      	beq.n	8007e72 <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	699b      	ldr	r3, [r3, #24]
 8007d80:	2b02      	cmp	r3, #2
 8007d82:	d176      	bne.n	8007e72 <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d071      	beq.n	8007e72 <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d94:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f042 0208 	orr.w	r2, r2, #8
 8007da4:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f003 fcf8 	bl	800b7a0 <SDMMC_CmdVoltageSwitch>
 8007db0:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d00c      	beq.n	8007dd2 <SD_PowerON+0x162>
        {
          return errorstate;
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	e05b      	b.n	8007e74 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007dbc:	f7f9 fb9e 	bl	80014fc <HAL_GetTick>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	1ad3      	subs	r3, r2, r3
 8007dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dca:	d102      	bne.n	8007dd2 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8007dcc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007dd0:	e050      	b.n	8007e74 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ddc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007de0:	d1ec      	bne.n	8007dbc <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8007dea:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007df6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dfa:	d002      	beq.n	8007e02 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8007dfc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007e00:	e038      	b.n	8007e74 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8007e02:	2001      	movs	r0, #1
 8007e04:	f7ff fb1a 	bl	800743c <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f042 0204 	orr.w	r2, r2, #4
 8007e16:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8007e18:	e00a      	b.n	8007e30 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007e1a:	f7f9 fb6f 	bl	80014fc <HAL_GetTick>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	1ad3      	subs	r3, r2, r3
 8007e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e28:	d102      	bne.n	8007e30 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8007e2a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e2e:	e021      	b.n	8007e74 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e3e:	d1ec      	bne.n	8007e1a <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007e48:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e58:	d102      	bne.n	8007e60 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007e5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e5e:	e009      	b.n	8007e74 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2213      	movs	r2, #19
 8007e66:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007e70:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8007e72:	2300      	movs	r3, #0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3720      	adds	r7, #32
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	c1100000 	.word	0xc1100000

08007e80 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b08c      	sub	sp, #48	; 0x30
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007e8a:	f7f9 fb37 	bl	80014fc <HAL_GetTick>
 8007e8e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2100      	movs	r1, #0
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f003 f9c5 	bl	800b22a <SDMMC_GetResponse>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ea6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007eaa:	d102      	bne.n	8007eb2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007eac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007eb0:	e0b0      	b.n	8008014 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2140      	movs	r1, #64	; 0x40
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f003 f9f5 	bl	800b2a8 <SDMMC_CmdBlockLength>
 8007ebe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ec0:	6a3b      	ldr	r3, [r7, #32]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d005      	beq.n	8007ed2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007ece:	6a3b      	ldr	r3, [r7, #32]
 8007ed0:	e0a0      	b.n	8008014 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eda:	041b      	lsls	r3, r3, #16
 8007edc:	4619      	mov	r1, r3
 8007ede:	4610      	mov	r0, r2
 8007ee0:	f003 fb30 	bl	800b544 <SDMMC_CmdAppCommand>
 8007ee4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ee6:	6a3b      	ldr	r3, [r7, #32]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d005      	beq.n	8007ef8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007ef4:	6a3b      	ldr	r3, [r7, #32]
 8007ef6:	e08d      	b.n	8008014 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8007efc:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8007efe:	2340      	movs	r3, #64	; 0x40
 8007f00:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007f02:	2360      	movs	r3, #96	; 0x60
 8007f04:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007f06:	2302      	movs	r3, #2
 8007f08:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f107 0208 	add.w	r2, r7, #8
 8007f1a:	4611      	mov	r1, r2
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f003 f997 	bl	800b250 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4618      	mov	r0, r3
 8007f28:	f003 fc18 	bl	800b75c <SDMMC_CmdStatusRegister>
 8007f2c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f2e:	6a3b      	ldr	r3, [r7, #32]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d02b      	beq.n	8007f8c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007f3c:	6a3b      	ldr	r3, [r7, #32]
 8007f3e:	e069      	b.n	8008014 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d013      	beq.n	8007f76 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8007f4e:	2300      	movs	r3, #0
 8007f50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f52:	e00d      	b.n	8007f70 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f003 f8f1 	bl	800b140 <SDMMC_ReadFIFO>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f62:	601a      	str	r2, [r3, #0]
        pData++;
 8007f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f66:	3304      	adds	r3, #4
 8007f68:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8007f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f72:	2b07      	cmp	r3, #7
 8007f74:	d9ee      	bls.n	8007f54 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007f76:	f7f9 fac1 	bl	80014fc <HAL_GetTick>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7e:	1ad3      	subs	r3, r2, r3
 8007f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f84:	d102      	bne.n	8007f8c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007f86:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007f8a:	e043      	b.n	8008014 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f92:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d0d2      	beq.n	8007f40 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fa0:	f003 0308 	and.w	r3, r3, #8
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d001      	beq.n	8007fac <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007fa8:	2308      	movs	r3, #8
 8007faa:	e033      	b.n	8008014 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fb2:	f003 0302 	and.w	r3, r3, #2
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d001      	beq.n	8007fbe <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007fba:	2302      	movs	r3, #2
 8007fbc:	e02a      	b.n	8008014 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fc4:	f003 0320 	and.w	r3, r3, #32
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d017      	beq.n	8007ffc <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007fcc:	2320      	movs	r3, #32
 8007fce:	e021      	b.n	8008014 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f003 f8b3 	bl	800b140 <SDMMC_ReadFIFO>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fde:	601a      	str	r2, [r3, #0]
    pData++;
 8007fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe2:	3304      	adds	r3, #4
 8007fe4:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007fe6:	f7f9 fa89 	bl	80014fc <HAL_GetTick>
 8007fea:	4602      	mov	r2, r0
 8007fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fee:	1ad3      	subs	r3, r2, r3
 8007ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ff4:	d102      	bne.n	8007ffc <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007ff6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ffa:	e00b      	b.n	8008014 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008002:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1e2      	bne.n	8007fd0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a03      	ldr	r2, [pc, #12]	; (800801c <SD_SendSDStatus+0x19c>)
 8008010:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3730      	adds	r7, #48	; 0x30
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	18000f3a 	.word	0x18000f3a

08008020 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d102      	bne.n	8008036 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008030:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008034:	e018      	b.n	8008068 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800803e:	041b      	lsls	r3, r3, #16
 8008040:	4619      	mov	r1, r3
 8008042:	4610      	mov	r0, r2
 8008044:	f003 fb67 	bl	800b716 <SDMMC_CmdSendStatus>
 8008048:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d001      	beq.n	8008054 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	e009      	b.n	8008068 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	2100      	movs	r1, #0
 800805a:	4618      	mov	r0, r3
 800805c:	f003 f8e5 	bl	800b22a <SDMMC_GetResponse>
 8008060:	4602      	mov	r2, r0
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	3710      	adds	r7, #16
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b086      	sub	sp, #24
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008078:	2300      	movs	r3, #0
 800807a:	60fb      	str	r3, [r7, #12]
 800807c:	2300      	movs	r3, #0
 800807e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2100      	movs	r1, #0
 8008086:	4618      	mov	r0, r3
 8008088:	f003 f8cf 	bl	800b22a <SDMMC_GetResponse>
 800808c:	4603      	mov	r3, r0
 800808e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008092:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008096:	d102      	bne.n	800809e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008098:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800809c:	e02f      	b.n	80080fe <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800809e:	f107 030c 	add.w	r3, r7, #12
 80080a2:	4619      	mov	r1, r3
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 f879 	bl	800819c <SD_FindSCR>
 80080aa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d001      	beq.n	80080b6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	e023      	b.n	80080fe <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d01c      	beq.n	80080fa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080c8:	041b      	lsls	r3, r3, #16
 80080ca:	4619      	mov	r1, r3
 80080cc:	4610      	mov	r0, r2
 80080ce:	f003 fa39 	bl	800b544 <SDMMC_CmdAppCommand>
 80080d2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d001      	beq.n	80080de <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	e00f      	b.n	80080fe <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2102      	movs	r1, #2
 80080e4:	4618      	mov	r0, r3
 80080e6:	f003 fa70 	bl	800b5ca <SDMMC_CmdBusWidth>
 80080ea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d001      	beq.n	80080f6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	e003      	b.n	80080fe <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80080f6:	2300      	movs	r3, #0
 80080f8:	e001      	b.n	80080fe <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80080fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3718      	adds	r7, #24
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b086      	sub	sp, #24
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800810e:	2300      	movs	r3, #0
 8008110:	60fb      	str	r3, [r7, #12]
 8008112:	2300      	movs	r3, #0
 8008114:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2100      	movs	r1, #0
 800811c:	4618      	mov	r0, r3
 800811e:	f003 f884 	bl	800b22a <SDMMC_GetResponse>
 8008122:	4603      	mov	r3, r0
 8008124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008128:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800812c:	d102      	bne.n	8008134 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800812e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008132:	e02f      	b.n	8008194 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008134:	f107 030c 	add.w	r3, r7, #12
 8008138:	4619      	mov	r1, r3
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 f82e 	bl	800819c <SD_FindSCR>
 8008140:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d001      	beq.n	800814c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	e023      	b.n	8008194 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008152:	2b00      	cmp	r3, #0
 8008154:	d01c      	beq.n	8008190 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800815e:	041b      	lsls	r3, r3, #16
 8008160:	4619      	mov	r1, r3
 8008162:	4610      	mov	r0, r2
 8008164:	f003 f9ee 	bl	800b544 <SDMMC_CmdAppCommand>
 8008168:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d001      	beq.n	8008174 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	e00f      	b.n	8008194 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2100      	movs	r1, #0
 800817a:	4618      	mov	r0, r3
 800817c:	f003 fa25 	bl	800b5ca <SDMMC_CmdBusWidth>
 8008180:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d001      	beq.n	800818c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	e003      	b.n	8008194 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800818c:	2300      	movs	r3, #0
 800818e:	e001      	b.n	8008194 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008190:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008194:	4618      	mov	r0, r3
 8008196:	3718      	adds	r7, #24
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b08e      	sub	sp, #56	; 0x38
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80081a6:	f7f9 f9a9 	bl	80014fc <HAL_GetTick>
 80081aa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80081ac:	2300      	movs	r3, #0
 80081ae:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80081b0:	2300      	movs	r3, #0
 80081b2:	60bb      	str	r3, [r7, #8]
 80081b4:	2300      	movs	r3, #0
 80081b6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2108      	movs	r1, #8
 80081c2:	4618      	mov	r0, r3
 80081c4:	f003 f870 	bl	800b2a8 <SDMMC_CmdBlockLength>
 80081c8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80081ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d001      	beq.n	80081d4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80081d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d2:	e0ad      	b.n	8008330 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081dc:	041b      	lsls	r3, r3, #16
 80081de:	4619      	mov	r1, r3
 80081e0:	4610      	mov	r0, r2
 80081e2:	f003 f9af 	bl	800b544 <SDMMC_CmdAppCommand>
 80081e6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80081e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d001      	beq.n	80081f2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80081ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f0:	e09e      	b.n	8008330 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80081f2:	f04f 33ff 	mov.w	r3, #4294967295
 80081f6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80081f8:	2308      	movs	r3, #8
 80081fa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80081fc:	2330      	movs	r3, #48	; 0x30
 80081fe:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008200:	2302      	movs	r3, #2
 8008202:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008204:	2300      	movs	r3, #0
 8008206:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008208:	2301      	movs	r3, #1
 800820a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f107 0210 	add.w	r2, r7, #16
 8008214:	4611      	mov	r1, r2
 8008216:	4618      	mov	r0, r3
 8008218:	f003 f81a 	bl	800b250 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4618      	mov	r0, r3
 8008222:	f003 f9f5 	bl	800b610 <SDMMC_CmdSendSCR>
 8008226:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822a:	2b00      	cmp	r3, #0
 800822c:	d027      	beq.n	800827e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800822e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008230:	e07e      	b.n	8008330 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008238:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800823c:	2b00      	cmp	r3, #0
 800823e:	d113      	bne.n	8008268 <SD_FindSCR+0xcc>
 8008240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008242:	2b00      	cmp	r3, #0
 8008244:	d110      	bne.n	8008268 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4618      	mov	r0, r3
 800824c:	f002 ff78 	bl	800b140 <SDMMC_ReadFIFO>
 8008250:	4603      	mov	r3, r0
 8008252:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4618      	mov	r0, r3
 800825a:	f002 ff71 	bl	800b140 <SDMMC_ReadFIFO>
 800825e:	4603      	mov	r3, r0
 8008260:	60fb      	str	r3, [r7, #12]
      index++;
 8008262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008264:	3301      	adds	r3, #1
 8008266:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008268:	f7f9 f948 	bl	80014fc <HAL_GetTick>
 800826c:	4602      	mov	r2, r0
 800826e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008276:	d102      	bne.n	800827e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008278:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800827c:	e058      	b.n	8008330 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008284:	f240 532a 	movw	r3, #1322	; 0x52a
 8008288:	4013      	ands	r3, r2
 800828a:	2b00      	cmp	r3, #0
 800828c:	d0d1      	beq.n	8008232 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008294:	f003 0308 	and.w	r3, r3, #8
 8008298:	2b00      	cmp	r3, #0
 800829a:	d005      	beq.n	80082a8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2208      	movs	r2, #8
 80082a2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80082a4:	2308      	movs	r3, #8
 80082a6:	e043      	b.n	8008330 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082ae:	f003 0302 	and.w	r3, r3, #2
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d005      	beq.n	80082c2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2202      	movs	r2, #2
 80082bc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80082be:	2302      	movs	r3, #2
 80082c0:	e036      	b.n	8008330 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082c8:	f003 0320 	and.w	r3, r3, #32
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d005      	beq.n	80082dc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	2220      	movs	r2, #32
 80082d6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80082d8:	2320      	movs	r3, #32
 80082da:	e029      	b.n	8008330 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a15      	ldr	r2, [pc, #84]	; (8008338 <SD_FindSCR+0x19c>)
 80082e2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	061a      	lsls	r2, r3, #24
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	021b      	lsls	r3, r3, #8
 80082ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80082f0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	0a1b      	lsrs	r3, r3, #8
 80082f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80082fa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	0e1b      	lsrs	r3, r3, #24
 8008300:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008304:	601a      	str	r2, [r3, #0]
    scr++;
 8008306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008308:	3304      	adds	r3, #4
 800830a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	061a      	lsls	r2, r3, #24
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	021b      	lsls	r3, r3, #8
 8008314:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008318:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	0a1b      	lsrs	r3, r3, #8
 800831e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008322:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	0e1b      	lsrs	r3, r3, #24
 8008328:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800832a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800832c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3738      	adds	r7, #56	; 0x38
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	18000f3a 	.word	0x18000f3a

0800833c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d101      	bne.n	800834e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	e01d      	b.n	800838a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008354:	b2db      	uxtb	r3, r3
 8008356:	2b00      	cmp	r3, #0
 8008358:	d106      	bne.n	8008368 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f7f8 fed0 	bl	8001108 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2202      	movs	r2, #2
 800836c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	3304      	adds	r3, #4
 8008378:	4619      	mov	r1, r3
 800837a:	4610      	mov	r0, r2
 800837c:	f000 f9a6 	bl	80086cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	3708      	adds	r7, #8
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
	...

08008394 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008394:	b480      	push	{r7}
 8008396:	b085      	sub	sp, #20
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	68da      	ldr	r2, [r3, #12]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f042 0201 	orr.w	r2, r2, #1
 80083aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	689a      	ldr	r2, [r3, #8]
 80083b2:	4b0c      	ldr	r3, [pc, #48]	; (80083e4 <HAL_TIM_Base_Start_IT+0x50>)
 80083b4:	4013      	ands	r3, r2
 80083b6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2b06      	cmp	r3, #6
 80083bc:	d00b      	beq.n	80083d6 <HAL_TIM_Base_Start_IT+0x42>
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083c4:	d007      	beq.n	80083d6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f042 0201 	orr.w	r2, r2, #1
 80083d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80083d6:	2300      	movs	r3, #0
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3714      	adds	r7, #20
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr
 80083e4:	00010007 	.word	0x00010007

080083e8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	68da      	ldr	r2, [r3, #12]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f022 0201 	bic.w	r2, r2, #1
 80083fe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	6a1a      	ldr	r2, [r3, #32]
 8008406:	f241 1311 	movw	r3, #4369	; 0x1111
 800840a:	4013      	ands	r3, r2
 800840c:	2b00      	cmp	r3, #0
 800840e:	d10f      	bne.n	8008430 <HAL_TIM_Base_Stop_IT+0x48>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	6a1a      	ldr	r2, [r3, #32]
 8008416:	f240 4344 	movw	r3, #1092	; 0x444
 800841a:	4013      	ands	r3, r2
 800841c:	2b00      	cmp	r3, #0
 800841e:	d107      	bne.n	8008430 <HAL_TIM_Base_Stop_IT+0x48>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f022 0201 	bic.w	r2, r2, #1
 800842e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	370c      	adds	r7, #12
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr

0800843e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800843e:	b580      	push	{r7, lr}
 8008440:	b082      	sub	sp, #8
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	f003 0302 	and.w	r3, r3, #2
 8008450:	2b02      	cmp	r3, #2
 8008452:	d122      	bne.n	800849a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	f003 0302 	and.w	r3, r3, #2
 800845e:	2b02      	cmp	r3, #2
 8008460:	d11b      	bne.n	800849a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f06f 0202 	mvn.w	r2, #2
 800846a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2201      	movs	r2, #1
 8008470:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	699b      	ldr	r3, [r3, #24]
 8008478:	f003 0303 	and.w	r3, r3, #3
 800847c:	2b00      	cmp	r3, #0
 800847e:	d003      	beq.n	8008488 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 f905 	bl	8008690 <HAL_TIM_IC_CaptureCallback>
 8008486:	e005      	b.n	8008494 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 f8f7 	bl	800867c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f908 	bl	80086a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	691b      	ldr	r3, [r3, #16]
 80084a0:	f003 0304 	and.w	r3, r3, #4
 80084a4:	2b04      	cmp	r3, #4
 80084a6:	d122      	bne.n	80084ee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	f003 0304 	and.w	r3, r3, #4
 80084b2:	2b04      	cmp	r3, #4
 80084b4:	d11b      	bne.n	80084ee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f06f 0204 	mvn.w	r2, #4
 80084be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2202      	movs	r2, #2
 80084c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	699b      	ldr	r3, [r3, #24]
 80084cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d003      	beq.n	80084dc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 f8db 	bl	8008690 <HAL_TIM_IC_CaptureCallback>
 80084da:	e005      	b.n	80084e8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 f8cd 	bl	800867c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 f8de 	bl	80086a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	f003 0308 	and.w	r3, r3, #8
 80084f8:	2b08      	cmp	r3, #8
 80084fa:	d122      	bne.n	8008542 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	f003 0308 	and.w	r3, r3, #8
 8008506:	2b08      	cmp	r3, #8
 8008508:	d11b      	bne.n	8008542 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f06f 0208 	mvn.w	r2, #8
 8008512:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2204      	movs	r2, #4
 8008518:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	69db      	ldr	r3, [r3, #28]
 8008520:	f003 0303 	and.w	r3, r3, #3
 8008524:	2b00      	cmp	r3, #0
 8008526:	d003      	beq.n	8008530 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 f8b1 	bl	8008690 <HAL_TIM_IC_CaptureCallback>
 800852e:	e005      	b.n	800853c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 f8a3 	bl	800867c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 f8b4 	bl	80086a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	691b      	ldr	r3, [r3, #16]
 8008548:	f003 0310 	and.w	r3, r3, #16
 800854c:	2b10      	cmp	r3, #16
 800854e:	d122      	bne.n	8008596 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	f003 0310 	and.w	r3, r3, #16
 800855a:	2b10      	cmp	r3, #16
 800855c:	d11b      	bne.n	8008596 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f06f 0210 	mvn.w	r2, #16
 8008566:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2208      	movs	r2, #8
 800856c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	69db      	ldr	r3, [r3, #28]
 8008574:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008578:	2b00      	cmp	r3, #0
 800857a:	d003      	beq.n	8008584 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 f887 	bl	8008690 <HAL_TIM_IC_CaptureCallback>
 8008582:	e005      	b.n	8008590 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 f879 	bl	800867c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 f88a 	bl	80086a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	691b      	ldr	r3, [r3, #16]
 800859c:	f003 0301 	and.w	r3, r3, #1
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d10e      	bne.n	80085c2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	f003 0301 	and.w	r3, r3, #1
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d107      	bne.n	80085c2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f06f 0201 	mvn.w	r2, #1
 80085ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f7f8 fb71 	bl	8000ca4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085cc:	2b80      	cmp	r3, #128	; 0x80
 80085ce:	d10e      	bne.n	80085ee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	68db      	ldr	r3, [r3, #12]
 80085d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085da:	2b80      	cmp	r3, #128	; 0x80
 80085dc:	d107      	bne.n	80085ee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80085e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 f913 	bl	8008814 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	691b      	ldr	r3, [r3, #16]
 80085f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085fc:	d10e      	bne.n	800861c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008608:	2b80      	cmp	r3, #128	; 0x80
 800860a:	d107      	bne.n	800861c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 f906 	bl	8008828 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	691b      	ldr	r3, [r3, #16]
 8008622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008626:	2b40      	cmp	r3, #64	; 0x40
 8008628:	d10e      	bne.n	8008648 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008634:	2b40      	cmp	r3, #64	; 0x40
 8008636:	d107      	bne.n	8008648 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 f838 	bl	80086b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	f003 0320 	and.w	r3, r3, #32
 8008652:	2b20      	cmp	r3, #32
 8008654:	d10e      	bne.n	8008674 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	f003 0320 	and.w	r3, r3, #32
 8008660:	2b20      	cmp	r3, #32
 8008662:	d107      	bne.n	8008674 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f06f 0220 	mvn.w	r2, #32
 800866c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 f8c6 	bl	8008800 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008674:	bf00      	nop
 8008676:	3708      	adds	r7, #8
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800867c:	b480      	push	{r7}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008684:	bf00      	nop
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008698:	bf00      	nop
 800869a:	370c      	adds	r7, #12
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b083      	sub	sp, #12
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086ac:	bf00      	nop
 80086ae:	370c      	adds	r7, #12
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr

080086b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086c0:	bf00      	nop
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b085      	sub	sp, #20
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4a40      	ldr	r2, [pc, #256]	; (80087e0 <TIM_Base_SetConfig+0x114>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d013      	beq.n	800870c <TIM_Base_SetConfig+0x40>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086ea:	d00f      	beq.n	800870c <TIM_Base_SetConfig+0x40>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4a3d      	ldr	r2, [pc, #244]	; (80087e4 <TIM_Base_SetConfig+0x118>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d00b      	beq.n	800870c <TIM_Base_SetConfig+0x40>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a3c      	ldr	r2, [pc, #240]	; (80087e8 <TIM_Base_SetConfig+0x11c>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d007      	beq.n	800870c <TIM_Base_SetConfig+0x40>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a3b      	ldr	r2, [pc, #236]	; (80087ec <TIM_Base_SetConfig+0x120>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d003      	beq.n	800870c <TIM_Base_SetConfig+0x40>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	4a3a      	ldr	r2, [pc, #232]	; (80087f0 <TIM_Base_SetConfig+0x124>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d108      	bne.n	800871e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	68fa      	ldr	r2, [r7, #12]
 800871a:	4313      	orrs	r3, r2
 800871c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4a2f      	ldr	r2, [pc, #188]	; (80087e0 <TIM_Base_SetConfig+0x114>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d01f      	beq.n	8008766 <TIM_Base_SetConfig+0x9a>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800872c:	d01b      	beq.n	8008766 <TIM_Base_SetConfig+0x9a>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a2c      	ldr	r2, [pc, #176]	; (80087e4 <TIM_Base_SetConfig+0x118>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d017      	beq.n	8008766 <TIM_Base_SetConfig+0x9a>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a2b      	ldr	r2, [pc, #172]	; (80087e8 <TIM_Base_SetConfig+0x11c>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d013      	beq.n	8008766 <TIM_Base_SetConfig+0x9a>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a2a      	ldr	r2, [pc, #168]	; (80087ec <TIM_Base_SetConfig+0x120>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d00f      	beq.n	8008766 <TIM_Base_SetConfig+0x9a>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4a29      	ldr	r2, [pc, #164]	; (80087f0 <TIM_Base_SetConfig+0x124>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d00b      	beq.n	8008766 <TIM_Base_SetConfig+0x9a>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4a28      	ldr	r2, [pc, #160]	; (80087f4 <TIM_Base_SetConfig+0x128>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d007      	beq.n	8008766 <TIM_Base_SetConfig+0x9a>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4a27      	ldr	r2, [pc, #156]	; (80087f8 <TIM_Base_SetConfig+0x12c>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d003      	beq.n	8008766 <TIM_Base_SetConfig+0x9a>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4a26      	ldr	r2, [pc, #152]	; (80087fc <TIM_Base_SetConfig+0x130>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d108      	bne.n	8008778 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800876c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	68fa      	ldr	r2, [r7, #12]
 8008774:	4313      	orrs	r3, r2
 8008776:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	695b      	ldr	r3, [r3, #20]
 8008782:	4313      	orrs	r3, r2
 8008784:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	689a      	ldr	r2, [r3, #8]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4a10      	ldr	r2, [pc, #64]	; (80087e0 <TIM_Base_SetConfig+0x114>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d00f      	beq.n	80087c4 <TIM_Base_SetConfig+0xf8>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4a12      	ldr	r2, [pc, #72]	; (80087f0 <TIM_Base_SetConfig+0x124>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d00b      	beq.n	80087c4 <TIM_Base_SetConfig+0xf8>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a11      	ldr	r2, [pc, #68]	; (80087f4 <TIM_Base_SetConfig+0x128>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d007      	beq.n	80087c4 <TIM_Base_SetConfig+0xf8>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a10      	ldr	r2, [pc, #64]	; (80087f8 <TIM_Base_SetConfig+0x12c>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d003      	beq.n	80087c4 <TIM_Base_SetConfig+0xf8>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4a0f      	ldr	r2, [pc, #60]	; (80087fc <TIM_Base_SetConfig+0x130>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d103      	bne.n	80087cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	691a      	ldr	r2, [r3, #16]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	615a      	str	r2, [r3, #20]
}
 80087d2:	bf00      	nop
 80087d4:	3714      	adds	r7, #20
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr
 80087de:	bf00      	nop
 80087e0:	40010000 	.word	0x40010000
 80087e4:	40000400 	.word	0x40000400
 80087e8:	40000800 	.word	0x40000800
 80087ec:	40000c00 	.word	0x40000c00
 80087f0:	40010400 	.word	0x40010400
 80087f4:	40014000 	.word	0x40014000
 80087f8:	40014400 	.word	0x40014400
 80087fc:	40014800 	.word	0x40014800

08008800 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008808:	bf00      	nop
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008830:	bf00      	nop
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d101      	bne.n	800884e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	e042      	b.n	80088d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008854:	2b00      	cmp	r3, #0
 8008856:	d106      	bne.n	8008866 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f7f8 fc79 	bl	8001158 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2224      	movs	r2, #36	; 0x24
 800886a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f022 0201 	bic.w	r2, r2, #1
 800887c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 f82e 	bl	80088e0 <UART_SetConfig>
 8008884:	4603      	mov	r3, r0
 8008886:	2b01      	cmp	r3, #1
 8008888:	d101      	bne.n	800888e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	e022      	b.n	80088d4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008892:	2b00      	cmp	r3, #0
 8008894:	d002      	beq.n	800889c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f002 f9a0 	bl	800abdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	685a      	ldr	r2, [r3, #4]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80088aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	689a      	ldr	r2, [r3, #8]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80088ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f042 0201 	orr.w	r2, r2, #1
 80088ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f002 fa27 	bl	800ad20 <UART_CheckIdleState>
 80088d2:	4603      	mov	r3, r0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}
 80088dc:	0000      	movs	r0, r0
	...

080088e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088e0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80088e4:	b090      	sub	sp, #64	; 0x40
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80088ea:	2300      	movs	r3, #0
 80088ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 80088ee:	2300      	movs	r3, #0
 80088f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80088f4:	2300      	movs	r3, #0
 80088f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	689a      	ldr	r2, [r3, #8]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	431a      	orrs	r2, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	695b      	ldr	r3, [r3, #20]
 8008906:	431a      	orrs	r2, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	69db      	ldr	r3, [r3, #28]
 800890c:	4313      	orrs	r3, r2
 800890e:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008914:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008916:	4313      	orrs	r3, r2
 8008918:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	4bc1      	ldr	r3, [pc, #772]	; (8008c28 <UART_SetConfig+0x348>)
 8008922:	4013      	ands	r3, r2
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	6812      	ldr	r2, [r2, #0]
 8008928:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800892a:	430b      	orrs	r3, r1
 800892c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	68da      	ldr	r2, [r3, #12]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	430a      	orrs	r2, r1
 8008942:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	699b      	ldr	r3, [r3, #24]
 8008948:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4ab7      	ldr	r2, [pc, #732]	; (8008c2c <UART_SetConfig+0x34c>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d004      	beq.n	800895e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6a1b      	ldr	r3, [r3, #32]
 8008958:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800895a:	4313      	orrs	r3, r2
 800895c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	689a      	ldr	r2, [r3, #8]
 8008964:	4bb2      	ldr	r3, [pc, #712]	; (8008c30 <UART_SetConfig+0x350>)
 8008966:	4013      	ands	r3, r2
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	6812      	ldr	r2, [r2, #0]
 800896c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800896e:	430b      	orrs	r3, r1
 8008970:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008978:	f023 010f 	bic.w	r1, r3, #15
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	430a      	orrs	r2, r1
 8008986:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4aa9      	ldr	r2, [pc, #676]	; (8008c34 <UART_SetConfig+0x354>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d177      	bne.n	8008a82 <UART_SetConfig+0x1a2>
 8008992:	4ba9      	ldr	r3, [pc, #676]	; (8008c38 <UART_SetConfig+0x358>)
 8008994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008996:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800899a:	2b28      	cmp	r3, #40	; 0x28
 800899c:	d86c      	bhi.n	8008a78 <UART_SetConfig+0x198>
 800899e:	a201      	add	r2, pc, #4	; (adr r2, 80089a4 <UART_SetConfig+0xc4>)
 80089a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a4:	08008a49 	.word	0x08008a49
 80089a8:	08008a79 	.word	0x08008a79
 80089ac:	08008a79 	.word	0x08008a79
 80089b0:	08008a79 	.word	0x08008a79
 80089b4:	08008a79 	.word	0x08008a79
 80089b8:	08008a79 	.word	0x08008a79
 80089bc:	08008a79 	.word	0x08008a79
 80089c0:	08008a79 	.word	0x08008a79
 80089c4:	08008a51 	.word	0x08008a51
 80089c8:	08008a79 	.word	0x08008a79
 80089cc:	08008a79 	.word	0x08008a79
 80089d0:	08008a79 	.word	0x08008a79
 80089d4:	08008a79 	.word	0x08008a79
 80089d8:	08008a79 	.word	0x08008a79
 80089dc:	08008a79 	.word	0x08008a79
 80089e0:	08008a79 	.word	0x08008a79
 80089e4:	08008a59 	.word	0x08008a59
 80089e8:	08008a79 	.word	0x08008a79
 80089ec:	08008a79 	.word	0x08008a79
 80089f0:	08008a79 	.word	0x08008a79
 80089f4:	08008a79 	.word	0x08008a79
 80089f8:	08008a79 	.word	0x08008a79
 80089fc:	08008a79 	.word	0x08008a79
 8008a00:	08008a79 	.word	0x08008a79
 8008a04:	08008a61 	.word	0x08008a61
 8008a08:	08008a79 	.word	0x08008a79
 8008a0c:	08008a79 	.word	0x08008a79
 8008a10:	08008a79 	.word	0x08008a79
 8008a14:	08008a79 	.word	0x08008a79
 8008a18:	08008a79 	.word	0x08008a79
 8008a1c:	08008a79 	.word	0x08008a79
 8008a20:	08008a79 	.word	0x08008a79
 8008a24:	08008a69 	.word	0x08008a69
 8008a28:	08008a79 	.word	0x08008a79
 8008a2c:	08008a79 	.word	0x08008a79
 8008a30:	08008a79 	.word	0x08008a79
 8008a34:	08008a79 	.word	0x08008a79
 8008a38:	08008a79 	.word	0x08008a79
 8008a3c:	08008a79 	.word	0x08008a79
 8008a40:	08008a79 	.word	0x08008a79
 8008a44:	08008a71 	.word	0x08008a71
 8008a48:	2301      	movs	r3, #1
 8008a4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008a4e:	e233      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008a50:	2304      	movs	r3, #4
 8008a52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008a56:	e22f      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008a58:	2308      	movs	r3, #8
 8008a5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008a5e:	e22b      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008a60:	2310      	movs	r3, #16
 8008a62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008a66:	e227      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008a68:	2320      	movs	r3, #32
 8008a6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008a6e:	e223      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008a70:	2340      	movs	r3, #64	; 0x40
 8008a72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008a76:	e21f      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008a78:	2380      	movs	r3, #128	; 0x80
 8008a7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008a7e:	bf00      	nop
 8008a80:	e21a      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a6d      	ldr	r2, [pc, #436]	; (8008c3c <UART_SetConfig+0x35c>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d132      	bne.n	8008af2 <UART_SetConfig+0x212>
 8008a8c:	4b6a      	ldr	r3, [pc, #424]	; (8008c38 <UART_SetConfig+0x358>)
 8008a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a90:	f003 0307 	and.w	r3, r3, #7
 8008a94:	2b05      	cmp	r3, #5
 8008a96:	d827      	bhi.n	8008ae8 <UART_SetConfig+0x208>
 8008a98:	a201      	add	r2, pc, #4	; (adr r2, 8008aa0 <UART_SetConfig+0x1c0>)
 8008a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a9e:	bf00      	nop
 8008aa0:	08008ab9 	.word	0x08008ab9
 8008aa4:	08008ac1 	.word	0x08008ac1
 8008aa8:	08008ac9 	.word	0x08008ac9
 8008aac:	08008ad1 	.word	0x08008ad1
 8008ab0:	08008ad9 	.word	0x08008ad9
 8008ab4:	08008ae1 	.word	0x08008ae1
 8008ab8:	2300      	movs	r3, #0
 8008aba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008abe:	e1fb      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008ac0:	2304      	movs	r3, #4
 8008ac2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008ac6:	e1f7      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008ac8:	2308      	movs	r3, #8
 8008aca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008ace:	e1f3      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008ad0:	2310      	movs	r3, #16
 8008ad2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008ad6:	e1ef      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008ad8:	2320      	movs	r3, #32
 8008ada:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008ade:	e1eb      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008ae0:	2340      	movs	r3, #64	; 0x40
 8008ae2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008ae6:	e1e7      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008ae8:	2380      	movs	r3, #128	; 0x80
 8008aea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008aee:	bf00      	nop
 8008af0:	e1e2      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a52      	ldr	r2, [pc, #328]	; (8008c40 <UART_SetConfig+0x360>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d132      	bne.n	8008b62 <UART_SetConfig+0x282>
 8008afc:	4b4e      	ldr	r3, [pc, #312]	; (8008c38 <UART_SetConfig+0x358>)
 8008afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b00:	f003 0307 	and.w	r3, r3, #7
 8008b04:	2b05      	cmp	r3, #5
 8008b06:	d827      	bhi.n	8008b58 <UART_SetConfig+0x278>
 8008b08:	a201      	add	r2, pc, #4	; (adr r2, 8008b10 <UART_SetConfig+0x230>)
 8008b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b0e:	bf00      	nop
 8008b10:	08008b29 	.word	0x08008b29
 8008b14:	08008b31 	.word	0x08008b31
 8008b18:	08008b39 	.word	0x08008b39
 8008b1c:	08008b41 	.word	0x08008b41
 8008b20:	08008b49 	.word	0x08008b49
 8008b24:	08008b51 	.word	0x08008b51
 8008b28:	2300      	movs	r3, #0
 8008b2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008b2e:	e1c3      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008b30:	2304      	movs	r3, #4
 8008b32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008b36:	e1bf      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008b38:	2308      	movs	r3, #8
 8008b3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008b3e:	e1bb      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008b40:	2310      	movs	r3, #16
 8008b42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008b46:	e1b7      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008b48:	2320      	movs	r3, #32
 8008b4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008b4e:	e1b3      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008b50:	2340      	movs	r3, #64	; 0x40
 8008b52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008b56:	e1af      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008b58:	2380      	movs	r3, #128	; 0x80
 8008b5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008b5e:	bf00      	nop
 8008b60:	e1aa      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a37      	ldr	r2, [pc, #220]	; (8008c44 <UART_SetConfig+0x364>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d132      	bne.n	8008bd2 <UART_SetConfig+0x2f2>
 8008b6c:	4b32      	ldr	r3, [pc, #200]	; (8008c38 <UART_SetConfig+0x358>)
 8008b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b70:	f003 0307 	and.w	r3, r3, #7
 8008b74:	2b05      	cmp	r3, #5
 8008b76:	d827      	bhi.n	8008bc8 <UART_SetConfig+0x2e8>
 8008b78:	a201      	add	r2, pc, #4	; (adr r2, 8008b80 <UART_SetConfig+0x2a0>)
 8008b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b7e:	bf00      	nop
 8008b80:	08008b99 	.word	0x08008b99
 8008b84:	08008ba1 	.word	0x08008ba1
 8008b88:	08008ba9 	.word	0x08008ba9
 8008b8c:	08008bb1 	.word	0x08008bb1
 8008b90:	08008bb9 	.word	0x08008bb9
 8008b94:	08008bc1 	.word	0x08008bc1
 8008b98:	2300      	movs	r3, #0
 8008b9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008b9e:	e18b      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008ba0:	2304      	movs	r3, #4
 8008ba2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008ba6:	e187      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008ba8:	2308      	movs	r3, #8
 8008baa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008bae:	e183      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008bb0:	2310      	movs	r3, #16
 8008bb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008bb6:	e17f      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008bb8:	2320      	movs	r3, #32
 8008bba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008bbe:	e17b      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008bc0:	2340      	movs	r3, #64	; 0x40
 8008bc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008bc6:	e177      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008bc8:	2380      	movs	r3, #128	; 0x80
 8008bca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008bce:	bf00      	nop
 8008bd0:	e172      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a1c      	ldr	r2, [pc, #112]	; (8008c48 <UART_SetConfig+0x368>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d144      	bne.n	8008c66 <UART_SetConfig+0x386>
 8008bdc:	4b16      	ldr	r3, [pc, #88]	; (8008c38 <UART_SetConfig+0x358>)
 8008bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008be0:	f003 0307 	and.w	r3, r3, #7
 8008be4:	2b05      	cmp	r3, #5
 8008be6:	d839      	bhi.n	8008c5c <UART_SetConfig+0x37c>
 8008be8:	a201      	add	r2, pc, #4	; (adr r2, 8008bf0 <UART_SetConfig+0x310>)
 8008bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bee:	bf00      	nop
 8008bf0:	08008c09 	.word	0x08008c09
 8008bf4:	08008c11 	.word	0x08008c11
 8008bf8:	08008c19 	.word	0x08008c19
 8008bfc:	08008c21 	.word	0x08008c21
 8008c00:	08008c4d 	.word	0x08008c4d
 8008c04:	08008c55 	.word	0x08008c55
 8008c08:	2300      	movs	r3, #0
 8008c0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008c0e:	e153      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008c10:	2304      	movs	r3, #4
 8008c12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008c16:	e14f      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008c18:	2308      	movs	r3, #8
 8008c1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008c1e:	e14b      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008c20:	2310      	movs	r3, #16
 8008c22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008c26:	e147      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008c28:	cfff69f3 	.word	0xcfff69f3
 8008c2c:	58000c00 	.word	0x58000c00
 8008c30:	11fff4ff 	.word	0x11fff4ff
 8008c34:	40011000 	.word	0x40011000
 8008c38:	58024400 	.word	0x58024400
 8008c3c:	40004400 	.word	0x40004400
 8008c40:	40004800 	.word	0x40004800
 8008c44:	40004c00 	.word	0x40004c00
 8008c48:	40005000 	.word	0x40005000
 8008c4c:	2320      	movs	r3, #32
 8008c4e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008c52:	e131      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008c54:	2340      	movs	r3, #64	; 0x40
 8008c56:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008c5a:	e12d      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008c5c:	2380      	movs	r3, #128	; 0x80
 8008c5e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008c62:	bf00      	nop
 8008c64:	e128      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4ac3      	ldr	r2, [pc, #780]	; (8008f78 <UART_SetConfig+0x698>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d178      	bne.n	8008d62 <UART_SetConfig+0x482>
 8008c70:	4bc2      	ldr	r3, [pc, #776]	; (8008f7c <UART_SetConfig+0x69c>)
 8008c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c78:	2b28      	cmp	r3, #40	; 0x28
 8008c7a:	d86d      	bhi.n	8008d58 <UART_SetConfig+0x478>
 8008c7c:	a201      	add	r2, pc, #4	; (adr r2, 8008c84 <UART_SetConfig+0x3a4>)
 8008c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c82:	bf00      	nop
 8008c84:	08008d29 	.word	0x08008d29
 8008c88:	08008d59 	.word	0x08008d59
 8008c8c:	08008d59 	.word	0x08008d59
 8008c90:	08008d59 	.word	0x08008d59
 8008c94:	08008d59 	.word	0x08008d59
 8008c98:	08008d59 	.word	0x08008d59
 8008c9c:	08008d59 	.word	0x08008d59
 8008ca0:	08008d59 	.word	0x08008d59
 8008ca4:	08008d31 	.word	0x08008d31
 8008ca8:	08008d59 	.word	0x08008d59
 8008cac:	08008d59 	.word	0x08008d59
 8008cb0:	08008d59 	.word	0x08008d59
 8008cb4:	08008d59 	.word	0x08008d59
 8008cb8:	08008d59 	.word	0x08008d59
 8008cbc:	08008d59 	.word	0x08008d59
 8008cc0:	08008d59 	.word	0x08008d59
 8008cc4:	08008d39 	.word	0x08008d39
 8008cc8:	08008d59 	.word	0x08008d59
 8008ccc:	08008d59 	.word	0x08008d59
 8008cd0:	08008d59 	.word	0x08008d59
 8008cd4:	08008d59 	.word	0x08008d59
 8008cd8:	08008d59 	.word	0x08008d59
 8008cdc:	08008d59 	.word	0x08008d59
 8008ce0:	08008d59 	.word	0x08008d59
 8008ce4:	08008d41 	.word	0x08008d41
 8008ce8:	08008d59 	.word	0x08008d59
 8008cec:	08008d59 	.word	0x08008d59
 8008cf0:	08008d59 	.word	0x08008d59
 8008cf4:	08008d59 	.word	0x08008d59
 8008cf8:	08008d59 	.word	0x08008d59
 8008cfc:	08008d59 	.word	0x08008d59
 8008d00:	08008d59 	.word	0x08008d59
 8008d04:	08008d49 	.word	0x08008d49
 8008d08:	08008d59 	.word	0x08008d59
 8008d0c:	08008d59 	.word	0x08008d59
 8008d10:	08008d59 	.word	0x08008d59
 8008d14:	08008d59 	.word	0x08008d59
 8008d18:	08008d59 	.word	0x08008d59
 8008d1c:	08008d59 	.word	0x08008d59
 8008d20:	08008d59 	.word	0x08008d59
 8008d24:	08008d51 	.word	0x08008d51
 8008d28:	2301      	movs	r3, #1
 8008d2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d2e:	e0c3      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008d30:	2304      	movs	r3, #4
 8008d32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d36:	e0bf      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008d38:	2308      	movs	r3, #8
 8008d3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d3e:	e0bb      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008d40:	2310      	movs	r3, #16
 8008d42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d46:	e0b7      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008d48:	2320      	movs	r3, #32
 8008d4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d4e:	e0b3      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008d50:	2340      	movs	r3, #64	; 0x40
 8008d52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d56:	e0af      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008d58:	2380      	movs	r3, #128	; 0x80
 8008d5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d5e:	bf00      	nop
 8008d60:	e0aa      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a86      	ldr	r2, [pc, #536]	; (8008f80 <UART_SetConfig+0x6a0>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d132      	bne.n	8008dd2 <UART_SetConfig+0x4f2>
 8008d6c:	4b83      	ldr	r3, [pc, #524]	; (8008f7c <UART_SetConfig+0x69c>)
 8008d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d70:	f003 0307 	and.w	r3, r3, #7
 8008d74:	2b05      	cmp	r3, #5
 8008d76:	d827      	bhi.n	8008dc8 <UART_SetConfig+0x4e8>
 8008d78:	a201      	add	r2, pc, #4	; (adr r2, 8008d80 <UART_SetConfig+0x4a0>)
 8008d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d7e:	bf00      	nop
 8008d80:	08008d99 	.word	0x08008d99
 8008d84:	08008da1 	.word	0x08008da1
 8008d88:	08008da9 	.word	0x08008da9
 8008d8c:	08008db1 	.word	0x08008db1
 8008d90:	08008db9 	.word	0x08008db9
 8008d94:	08008dc1 	.word	0x08008dc1
 8008d98:	2300      	movs	r3, #0
 8008d9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008d9e:	e08b      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008da0:	2304      	movs	r3, #4
 8008da2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008da6:	e087      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008da8:	2308      	movs	r3, #8
 8008daa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008dae:	e083      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008db0:	2310      	movs	r3, #16
 8008db2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008db6:	e07f      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008db8:	2320      	movs	r3, #32
 8008dba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008dbe:	e07b      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008dc0:	2340      	movs	r3, #64	; 0x40
 8008dc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008dc6:	e077      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008dc8:	2380      	movs	r3, #128	; 0x80
 8008dca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008dce:	bf00      	nop
 8008dd0:	e072      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a6b      	ldr	r2, [pc, #428]	; (8008f84 <UART_SetConfig+0x6a4>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d132      	bne.n	8008e42 <UART_SetConfig+0x562>
 8008ddc:	4b67      	ldr	r3, [pc, #412]	; (8008f7c <UART_SetConfig+0x69c>)
 8008dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008de0:	f003 0307 	and.w	r3, r3, #7
 8008de4:	2b05      	cmp	r3, #5
 8008de6:	d827      	bhi.n	8008e38 <UART_SetConfig+0x558>
 8008de8:	a201      	add	r2, pc, #4	; (adr r2, 8008df0 <UART_SetConfig+0x510>)
 8008dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dee:	bf00      	nop
 8008df0:	08008e09 	.word	0x08008e09
 8008df4:	08008e11 	.word	0x08008e11
 8008df8:	08008e19 	.word	0x08008e19
 8008dfc:	08008e21 	.word	0x08008e21
 8008e00:	08008e29 	.word	0x08008e29
 8008e04:	08008e31 	.word	0x08008e31
 8008e08:	2300      	movs	r3, #0
 8008e0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008e0e:	e053      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008e10:	2304      	movs	r3, #4
 8008e12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008e16:	e04f      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008e18:	2308      	movs	r3, #8
 8008e1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008e1e:	e04b      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008e20:	2310      	movs	r3, #16
 8008e22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008e26:	e047      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008e28:	2320      	movs	r3, #32
 8008e2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008e2e:	e043      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008e30:	2340      	movs	r3, #64	; 0x40
 8008e32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008e36:	e03f      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008e38:	2380      	movs	r3, #128	; 0x80
 8008e3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008e3e:	bf00      	nop
 8008e40:	e03a      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a50      	ldr	r2, [pc, #320]	; (8008f88 <UART_SetConfig+0x6a8>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d132      	bne.n	8008eb2 <UART_SetConfig+0x5d2>
 8008e4c:	4b4b      	ldr	r3, [pc, #300]	; (8008f7c <UART_SetConfig+0x69c>)
 8008e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e50:	f003 0307 	and.w	r3, r3, #7
 8008e54:	2b05      	cmp	r3, #5
 8008e56:	d827      	bhi.n	8008ea8 <UART_SetConfig+0x5c8>
 8008e58:	a201      	add	r2, pc, #4	; (adr r2, 8008e60 <UART_SetConfig+0x580>)
 8008e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e5e:	bf00      	nop
 8008e60:	08008e79 	.word	0x08008e79
 8008e64:	08008e81 	.word	0x08008e81
 8008e68:	08008e89 	.word	0x08008e89
 8008e6c:	08008e91 	.word	0x08008e91
 8008e70:	08008e99 	.word	0x08008e99
 8008e74:	08008ea1 	.word	0x08008ea1
 8008e78:	2302      	movs	r3, #2
 8008e7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008e7e:	e01b      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008e80:	2304      	movs	r3, #4
 8008e82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008e86:	e017      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008e88:	2308      	movs	r3, #8
 8008e8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008e8e:	e013      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008e90:	2310      	movs	r3, #16
 8008e92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008e96:	e00f      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008e98:	2320      	movs	r3, #32
 8008e9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008e9e:	e00b      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008ea0:	2340      	movs	r3, #64	; 0x40
 8008ea2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008ea6:	e007      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008ea8:	2380      	movs	r3, #128	; 0x80
 8008eaa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008eae:	bf00      	nop
 8008eb0:	e002      	b.n	8008eb8 <UART_SetConfig+0x5d8>
 8008eb2:	2380      	movs	r3, #128	; 0x80
 8008eb4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a32      	ldr	r2, [pc, #200]	; (8008f88 <UART_SetConfig+0x6a8>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	f040 86f7 	bne.w	8009cb2 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008ec4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008ec8:	2b08      	cmp	r3, #8
 8008eca:	f000 80c0 	beq.w	800904e <UART_SetConfig+0x76e>
 8008ece:	2b08      	cmp	r3, #8
 8008ed0:	dc04      	bgt.n	8008edc <UART_SetConfig+0x5fc>
 8008ed2:	2b02      	cmp	r3, #2
 8008ed4:	d00c      	beq.n	8008ef0 <UART_SetConfig+0x610>
 8008ed6:	2b04      	cmp	r3, #4
 8008ed8:	d065      	beq.n	8008fa6 <UART_SetConfig+0x6c6>
 8008eda:	e27a      	b.n	80093d2 <UART_SetConfig+0xaf2>
 8008edc:	2b20      	cmp	r3, #32
 8008ede:	f000 81b0 	beq.w	8009242 <UART_SetConfig+0x962>
 8008ee2:	2b40      	cmp	r3, #64	; 0x40
 8008ee4:	f000 821e 	beq.w	8009324 <UART_SetConfig+0xa44>
 8008ee8:	2b10      	cmp	r3, #16
 8008eea:	f000 8104 	beq.w	80090f6 <UART_SetConfig+0x816>
 8008eee:	e270      	b.n	80093d2 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008ef0:	f7fc fdce 	bl	8005a90 <HAL_RCCEx_GetD3PCLK1Freq>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d04e      	beq.n	8008f9c <UART_SetConfig+0x6bc>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d048      	beq.n	8008f98 <UART_SetConfig+0x6b8>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0a:	2b02      	cmp	r3, #2
 8008f0c:	d042      	beq.n	8008f94 <UART_SetConfig+0x6b4>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f12:	2b03      	cmp	r3, #3
 8008f14:	d03c      	beq.n	8008f90 <UART_SetConfig+0x6b0>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1a:	2b04      	cmp	r3, #4
 8008f1c:	d036      	beq.n	8008f8c <UART_SetConfig+0x6ac>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f22:	2b05      	cmp	r3, #5
 8008f24:	d026      	beq.n	8008f74 <UART_SetConfig+0x694>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f2a:	2b06      	cmp	r3, #6
 8008f2c:	d020      	beq.n	8008f70 <UART_SetConfig+0x690>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f32:	2b07      	cmp	r3, #7
 8008f34:	d01a      	beq.n	8008f6c <UART_SetConfig+0x68c>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3a:	2b08      	cmp	r3, #8
 8008f3c:	d014      	beq.n	8008f68 <UART_SetConfig+0x688>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f42:	2b09      	cmp	r3, #9
 8008f44:	d00e      	beq.n	8008f64 <UART_SetConfig+0x684>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f4a:	2b0a      	cmp	r3, #10
 8008f4c:	d008      	beq.n	8008f60 <UART_SetConfig+0x680>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f52:	2b0b      	cmp	r3, #11
 8008f54:	d102      	bne.n	8008f5c <UART_SetConfig+0x67c>
 8008f56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f5a:	e020      	b.n	8008f9e <UART_SetConfig+0x6be>
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	e01e      	b.n	8008f9e <UART_SetConfig+0x6be>
 8008f60:	2380      	movs	r3, #128	; 0x80
 8008f62:	e01c      	b.n	8008f9e <UART_SetConfig+0x6be>
 8008f64:	2340      	movs	r3, #64	; 0x40
 8008f66:	e01a      	b.n	8008f9e <UART_SetConfig+0x6be>
 8008f68:	2320      	movs	r3, #32
 8008f6a:	e018      	b.n	8008f9e <UART_SetConfig+0x6be>
 8008f6c:	2310      	movs	r3, #16
 8008f6e:	e016      	b.n	8008f9e <UART_SetConfig+0x6be>
 8008f70:	230c      	movs	r3, #12
 8008f72:	e014      	b.n	8008f9e <UART_SetConfig+0x6be>
 8008f74:	230a      	movs	r3, #10
 8008f76:	e012      	b.n	8008f9e <UART_SetConfig+0x6be>
 8008f78:	40011400 	.word	0x40011400
 8008f7c:	58024400 	.word	0x58024400
 8008f80:	40007800 	.word	0x40007800
 8008f84:	40007c00 	.word	0x40007c00
 8008f88:	58000c00 	.word	0x58000c00
 8008f8c:	2308      	movs	r3, #8
 8008f8e:	e006      	b.n	8008f9e <UART_SetConfig+0x6be>
 8008f90:	2306      	movs	r3, #6
 8008f92:	e004      	b.n	8008f9e <UART_SetConfig+0x6be>
 8008f94:	2304      	movs	r3, #4
 8008f96:	e002      	b.n	8008f9e <UART_SetConfig+0x6be>
 8008f98:	2302      	movs	r3, #2
 8008f9a:	e000      	b.n	8008f9e <UART_SetConfig+0x6be>
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008fa4:	e219      	b.n	80093da <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fa6:	f107 0318 	add.w	r3, r7, #24
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7fc fd86 	bl	8005abc <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008fb0:	69fa      	ldr	r2, [r7, #28]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d044      	beq.n	8009044 <UART_SetConfig+0x764>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d03e      	beq.n	8009040 <UART_SetConfig+0x760>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc6:	2b02      	cmp	r3, #2
 8008fc8:	d038      	beq.n	800903c <UART_SetConfig+0x75c>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fce:	2b03      	cmp	r3, #3
 8008fd0:	d032      	beq.n	8009038 <UART_SetConfig+0x758>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd6:	2b04      	cmp	r3, #4
 8008fd8:	d02c      	beq.n	8009034 <UART_SetConfig+0x754>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fde:	2b05      	cmp	r3, #5
 8008fe0:	d026      	beq.n	8009030 <UART_SetConfig+0x750>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe6:	2b06      	cmp	r3, #6
 8008fe8:	d020      	beq.n	800902c <UART_SetConfig+0x74c>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fee:	2b07      	cmp	r3, #7
 8008ff0:	d01a      	beq.n	8009028 <UART_SetConfig+0x748>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff6:	2b08      	cmp	r3, #8
 8008ff8:	d014      	beq.n	8009024 <UART_SetConfig+0x744>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffe:	2b09      	cmp	r3, #9
 8009000:	d00e      	beq.n	8009020 <UART_SetConfig+0x740>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009006:	2b0a      	cmp	r3, #10
 8009008:	d008      	beq.n	800901c <UART_SetConfig+0x73c>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800900e:	2b0b      	cmp	r3, #11
 8009010:	d102      	bne.n	8009018 <UART_SetConfig+0x738>
 8009012:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009016:	e016      	b.n	8009046 <UART_SetConfig+0x766>
 8009018:	2301      	movs	r3, #1
 800901a:	e014      	b.n	8009046 <UART_SetConfig+0x766>
 800901c:	2380      	movs	r3, #128	; 0x80
 800901e:	e012      	b.n	8009046 <UART_SetConfig+0x766>
 8009020:	2340      	movs	r3, #64	; 0x40
 8009022:	e010      	b.n	8009046 <UART_SetConfig+0x766>
 8009024:	2320      	movs	r3, #32
 8009026:	e00e      	b.n	8009046 <UART_SetConfig+0x766>
 8009028:	2310      	movs	r3, #16
 800902a:	e00c      	b.n	8009046 <UART_SetConfig+0x766>
 800902c:	230c      	movs	r3, #12
 800902e:	e00a      	b.n	8009046 <UART_SetConfig+0x766>
 8009030:	230a      	movs	r3, #10
 8009032:	e008      	b.n	8009046 <UART_SetConfig+0x766>
 8009034:	2308      	movs	r3, #8
 8009036:	e006      	b.n	8009046 <UART_SetConfig+0x766>
 8009038:	2306      	movs	r3, #6
 800903a:	e004      	b.n	8009046 <UART_SetConfig+0x766>
 800903c:	2304      	movs	r3, #4
 800903e:	e002      	b.n	8009046 <UART_SetConfig+0x766>
 8009040:	2302      	movs	r3, #2
 8009042:	e000      	b.n	8009046 <UART_SetConfig+0x766>
 8009044:	2301      	movs	r3, #1
 8009046:	fbb2 f3f3 	udiv	r3, r2, r3
 800904a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800904c:	e1c5      	b.n	80093da <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800904e:	f107 030c 	add.w	r3, r7, #12
 8009052:	4618      	mov	r0, r3
 8009054:	f7fc fe7e 	bl	8005d54 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009058:	693a      	ldr	r2, [r7, #16]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800905e:	2b00      	cmp	r3, #0
 8009060:	d044      	beq.n	80090ec <UART_SetConfig+0x80c>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009066:	2b01      	cmp	r3, #1
 8009068:	d03e      	beq.n	80090e8 <UART_SetConfig+0x808>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906e:	2b02      	cmp	r3, #2
 8009070:	d038      	beq.n	80090e4 <UART_SetConfig+0x804>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009076:	2b03      	cmp	r3, #3
 8009078:	d032      	beq.n	80090e0 <UART_SetConfig+0x800>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907e:	2b04      	cmp	r3, #4
 8009080:	d02c      	beq.n	80090dc <UART_SetConfig+0x7fc>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009086:	2b05      	cmp	r3, #5
 8009088:	d026      	beq.n	80090d8 <UART_SetConfig+0x7f8>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908e:	2b06      	cmp	r3, #6
 8009090:	d020      	beq.n	80090d4 <UART_SetConfig+0x7f4>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009096:	2b07      	cmp	r3, #7
 8009098:	d01a      	beq.n	80090d0 <UART_SetConfig+0x7f0>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909e:	2b08      	cmp	r3, #8
 80090a0:	d014      	beq.n	80090cc <UART_SetConfig+0x7ec>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a6:	2b09      	cmp	r3, #9
 80090a8:	d00e      	beq.n	80090c8 <UART_SetConfig+0x7e8>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ae:	2b0a      	cmp	r3, #10
 80090b0:	d008      	beq.n	80090c4 <UART_SetConfig+0x7e4>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b6:	2b0b      	cmp	r3, #11
 80090b8:	d102      	bne.n	80090c0 <UART_SetConfig+0x7e0>
 80090ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090be:	e016      	b.n	80090ee <UART_SetConfig+0x80e>
 80090c0:	2301      	movs	r3, #1
 80090c2:	e014      	b.n	80090ee <UART_SetConfig+0x80e>
 80090c4:	2380      	movs	r3, #128	; 0x80
 80090c6:	e012      	b.n	80090ee <UART_SetConfig+0x80e>
 80090c8:	2340      	movs	r3, #64	; 0x40
 80090ca:	e010      	b.n	80090ee <UART_SetConfig+0x80e>
 80090cc:	2320      	movs	r3, #32
 80090ce:	e00e      	b.n	80090ee <UART_SetConfig+0x80e>
 80090d0:	2310      	movs	r3, #16
 80090d2:	e00c      	b.n	80090ee <UART_SetConfig+0x80e>
 80090d4:	230c      	movs	r3, #12
 80090d6:	e00a      	b.n	80090ee <UART_SetConfig+0x80e>
 80090d8:	230a      	movs	r3, #10
 80090da:	e008      	b.n	80090ee <UART_SetConfig+0x80e>
 80090dc:	2308      	movs	r3, #8
 80090de:	e006      	b.n	80090ee <UART_SetConfig+0x80e>
 80090e0:	2306      	movs	r3, #6
 80090e2:	e004      	b.n	80090ee <UART_SetConfig+0x80e>
 80090e4:	2304      	movs	r3, #4
 80090e6:	e002      	b.n	80090ee <UART_SetConfig+0x80e>
 80090e8:	2302      	movs	r3, #2
 80090ea:	e000      	b.n	80090ee <UART_SetConfig+0x80e>
 80090ec:	2301      	movs	r3, #1
 80090ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80090f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80090f4:	e171      	b.n	80093da <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090f6:	4b7a      	ldr	r3, [pc, #488]	; (80092e0 <UART_SetConfig+0xa00>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f003 0320 	and.w	r3, r3, #32
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d054      	beq.n	80091ac <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009102:	4b77      	ldr	r3, [pc, #476]	; (80092e0 <UART_SetConfig+0xa00>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	08db      	lsrs	r3, r3, #3
 8009108:	f003 0303 	and.w	r3, r3, #3
 800910c:	4a75      	ldr	r2, [pc, #468]	; (80092e4 <UART_SetConfig+0xa04>)
 800910e:	40da      	lsrs	r2, r3
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009114:	2b00      	cmp	r3, #0
 8009116:	d044      	beq.n	80091a2 <UART_SetConfig+0x8c2>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911c:	2b01      	cmp	r3, #1
 800911e:	d03e      	beq.n	800919e <UART_SetConfig+0x8be>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009124:	2b02      	cmp	r3, #2
 8009126:	d038      	beq.n	800919a <UART_SetConfig+0x8ba>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912c:	2b03      	cmp	r3, #3
 800912e:	d032      	beq.n	8009196 <UART_SetConfig+0x8b6>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009134:	2b04      	cmp	r3, #4
 8009136:	d02c      	beq.n	8009192 <UART_SetConfig+0x8b2>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913c:	2b05      	cmp	r3, #5
 800913e:	d026      	beq.n	800918e <UART_SetConfig+0x8ae>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009144:	2b06      	cmp	r3, #6
 8009146:	d020      	beq.n	800918a <UART_SetConfig+0x8aa>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914c:	2b07      	cmp	r3, #7
 800914e:	d01a      	beq.n	8009186 <UART_SetConfig+0x8a6>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009154:	2b08      	cmp	r3, #8
 8009156:	d014      	beq.n	8009182 <UART_SetConfig+0x8a2>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915c:	2b09      	cmp	r3, #9
 800915e:	d00e      	beq.n	800917e <UART_SetConfig+0x89e>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009164:	2b0a      	cmp	r3, #10
 8009166:	d008      	beq.n	800917a <UART_SetConfig+0x89a>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916c:	2b0b      	cmp	r3, #11
 800916e:	d102      	bne.n	8009176 <UART_SetConfig+0x896>
 8009170:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009174:	e016      	b.n	80091a4 <UART_SetConfig+0x8c4>
 8009176:	2301      	movs	r3, #1
 8009178:	e014      	b.n	80091a4 <UART_SetConfig+0x8c4>
 800917a:	2380      	movs	r3, #128	; 0x80
 800917c:	e012      	b.n	80091a4 <UART_SetConfig+0x8c4>
 800917e:	2340      	movs	r3, #64	; 0x40
 8009180:	e010      	b.n	80091a4 <UART_SetConfig+0x8c4>
 8009182:	2320      	movs	r3, #32
 8009184:	e00e      	b.n	80091a4 <UART_SetConfig+0x8c4>
 8009186:	2310      	movs	r3, #16
 8009188:	e00c      	b.n	80091a4 <UART_SetConfig+0x8c4>
 800918a:	230c      	movs	r3, #12
 800918c:	e00a      	b.n	80091a4 <UART_SetConfig+0x8c4>
 800918e:	230a      	movs	r3, #10
 8009190:	e008      	b.n	80091a4 <UART_SetConfig+0x8c4>
 8009192:	2308      	movs	r3, #8
 8009194:	e006      	b.n	80091a4 <UART_SetConfig+0x8c4>
 8009196:	2306      	movs	r3, #6
 8009198:	e004      	b.n	80091a4 <UART_SetConfig+0x8c4>
 800919a:	2304      	movs	r3, #4
 800919c:	e002      	b.n	80091a4 <UART_SetConfig+0x8c4>
 800919e:	2302      	movs	r3, #2
 80091a0:	e000      	b.n	80091a4 <UART_SetConfig+0x8c4>
 80091a2:	2301      	movs	r3, #1
 80091a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80091a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 80091aa:	e116      	b.n	80093da <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d043      	beq.n	800923c <UART_SetConfig+0x95c>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d03d      	beq.n	8009238 <UART_SetConfig+0x958>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c0:	2b02      	cmp	r3, #2
 80091c2:	d037      	beq.n	8009234 <UART_SetConfig+0x954>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c8:	2b03      	cmp	r3, #3
 80091ca:	d031      	beq.n	8009230 <UART_SetConfig+0x950>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d0:	2b04      	cmp	r3, #4
 80091d2:	d02b      	beq.n	800922c <UART_SetConfig+0x94c>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d8:	2b05      	cmp	r3, #5
 80091da:	d025      	beq.n	8009228 <UART_SetConfig+0x948>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e0:	2b06      	cmp	r3, #6
 80091e2:	d01f      	beq.n	8009224 <UART_SetConfig+0x944>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e8:	2b07      	cmp	r3, #7
 80091ea:	d019      	beq.n	8009220 <UART_SetConfig+0x940>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f0:	2b08      	cmp	r3, #8
 80091f2:	d013      	beq.n	800921c <UART_SetConfig+0x93c>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f8:	2b09      	cmp	r3, #9
 80091fa:	d00d      	beq.n	8009218 <UART_SetConfig+0x938>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009200:	2b0a      	cmp	r3, #10
 8009202:	d007      	beq.n	8009214 <UART_SetConfig+0x934>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009208:	2b0b      	cmp	r3, #11
 800920a:	d101      	bne.n	8009210 <UART_SetConfig+0x930>
 800920c:	4b36      	ldr	r3, [pc, #216]	; (80092e8 <UART_SetConfig+0xa08>)
 800920e:	e016      	b.n	800923e <UART_SetConfig+0x95e>
 8009210:	4b34      	ldr	r3, [pc, #208]	; (80092e4 <UART_SetConfig+0xa04>)
 8009212:	e014      	b.n	800923e <UART_SetConfig+0x95e>
 8009214:	4b35      	ldr	r3, [pc, #212]	; (80092ec <UART_SetConfig+0xa0c>)
 8009216:	e012      	b.n	800923e <UART_SetConfig+0x95e>
 8009218:	4b35      	ldr	r3, [pc, #212]	; (80092f0 <UART_SetConfig+0xa10>)
 800921a:	e010      	b.n	800923e <UART_SetConfig+0x95e>
 800921c:	4b35      	ldr	r3, [pc, #212]	; (80092f4 <UART_SetConfig+0xa14>)
 800921e:	e00e      	b.n	800923e <UART_SetConfig+0x95e>
 8009220:	4b35      	ldr	r3, [pc, #212]	; (80092f8 <UART_SetConfig+0xa18>)
 8009222:	e00c      	b.n	800923e <UART_SetConfig+0x95e>
 8009224:	4b35      	ldr	r3, [pc, #212]	; (80092fc <UART_SetConfig+0xa1c>)
 8009226:	e00a      	b.n	800923e <UART_SetConfig+0x95e>
 8009228:	4b35      	ldr	r3, [pc, #212]	; (8009300 <UART_SetConfig+0xa20>)
 800922a:	e008      	b.n	800923e <UART_SetConfig+0x95e>
 800922c:	4b35      	ldr	r3, [pc, #212]	; (8009304 <UART_SetConfig+0xa24>)
 800922e:	e006      	b.n	800923e <UART_SetConfig+0x95e>
 8009230:	4b35      	ldr	r3, [pc, #212]	; (8009308 <UART_SetConfig+0xa28>)
 8009232:	e004      	b.n	800923e <UART_SetConfig+0x95e>
 8009234:	4b35      	ldr	r3, [pc, #212]	; (800930c <UART_SetConfig+0xa2c>)
 8009236:	e002      	b.n	800923e <UART_SetConfig+0x95e>
 8009238:	4b35      	ldr	r3, [pc, #212]	; (8009310 <UART_SetConfig+0xa30>)
 800923a:	e000      	b.n	800923e <UART_SetConfig+0x95e>
 800923c:	4b29      	ldr	r3, [pc, #164]	; (80092e4 <UART_SetConfig+0xa04>)
 800923e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009240:	e0cb      	b.n	80093da <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009246:	2b00      	cmp	r3, #0
 8009248:	d046      	beq.n	80092d8 <UART_SetConfig+0x9f8>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800924e:	2b01      	cmp	r3, #1
 8009250:	d040      	beq.n	80092d4 <UART_SetConfig+0x9f4>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009256:	2b02      	cmp	r3, #2
 8009258:	d03a      	beq.n	80092d0 <UART_SetConfig+0x9f0>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800925e:	2b03      	cmp	r3, #3
 8009260:	d034      	beq.n	80092cc <UART_SetConfig+0x9ec>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009266:	2b04      	cmp	r3, #4
 8009268:	d02e      	beq.n	80092c8 <UART_SetConfig+0x9e8>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800926e:	2b05      	cmp	r3, #5
 8009270:	d028      	beq.n	80092c4 <UART_SetConfig+0x9e4>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009276:	2b06      	cmp	r3, #6
 8009278:	d022      	beq.n	80092c0 <UART_SetConfig+0x9e0>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800927e:	2b07      	cmp	r3, #7
 8009280:	d01c      	beq.n	80092bc <UART_SetConfig+0x9dc>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009286:	2b08      	cmp	r3, #8
 8009288:	d016      	beq.n	80092b8 <UART_SetConfig+0x9d8>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800928e:	2b09      	cmp	r3, #9
 8009290:	d00f      	beq.n	80092b2 <UART_SetConfig+0x9d2>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009296:	2b0a      	cmp	r3, #10
 8009298:	d008      	beq.n	80092ac <UART_SetConfig+0x9cc>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929e:	2b0b      	cmp	r3, #11
 80092a0:	d102      	bne.n	80092a8 <UART_SetConfig+0x9c8>
 80092a2:	f643 5309 	movw	r3, #15625	; 0x3d09
 80092a6:	e018      	b.n	80092da <UART_SetConfig+0x9fa>
 80092a8:	4b13      	ldr	r3, [pc, #76]	; (80092f8 <UART_SetConfig+0xa18>)
 80092aa:	e016      	b.n	80092da <UART_SetConfig+0x9fa>
 80092ac:	f647 2312 	movw	r3, #31250	; 0x7a12
 80092b0:	e013      	b.n	80092da <UART_SetConfig+0x9fa>
 80092b2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80092b6:	e010      	b.n	80092da <UART_SetConfig+0x9fa>
 80092b8:	4b16      	ldr	r3, [pc, #88]	; (8009314 <UART_SetConfig+0xa34>)
 80092ba:	e00e      	b.n	80092da <UART_SetConfig+0x9fa>
 80092bc:	4b0a      	ldr	r3, [pc, #40]	; (80092e8 <UART_SetConfig+0xa08>)
 80092be:	e00c      	b.n	80092da <UART_SetConfig+0x9fa>
 80092c0:	4b15      	ldr	r3, [pc, #84]	; (8009318 <UART_SetConfig+0xa38>)
 80092c2:	e00a      	b.n	80092da <UART_SetConfig+0x9fa>
 80092c4:	4b15      	ldr	r3, [pc, #84]	; (800931c <UART_SetConfig+0xa3c>)
 80092c6:	e008      	b.n	80092da <UART_SetConfig+0x9fa>
 80092c8:	4b08      	ldr	r3, [pc, #32]	; (80092ec <UART_SetConfig+0xa0c>)
 80092ca:	e006      	b.n	80092da <UART_SetConfig+0x9fa>
 80092cc:	4b14      	ldr	r3, [pc, #80]	; (8009320 <UART_SetConfig+0xa40>)
 80092ce:	e004      	b.n	80092da <UART_SetConfig+0x9fa>
 80092d0:	4b07      	ldr	r3, [pc, #28]	; (80092f0 <UART_SetConfig+0xa10>)
 80092d2:	e002      	b.n	80092da <UART_SetConfig+0x9fa>
 80092d4:	4b07      	ldr	r3, [pc, #28]	; (80092f4 <UART_SetConfig+0xa14>)
 80092d6:	e000      	b.n	80092da <UART_SetConfig+0x9fa>
 80092d8:	4b07      	ldr	r3, [pc, #28]	; (80092f8 <UART_SetConfig+0xa18>)
 80092da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80092dc:	e07d      	b.n	80093da <UART_SetConfig+0xafa>
 80092de:	bf00      	nop
 80092e0:	58024400 	.word	0x58024400
 80092e4:	03d09000 	.word	0x03d09000
 80092e8:	0003d090 	.word	0x0003d090
 80092ec:	0007a120 	.word	0x0007a120
 80092f0:	000f4240 	.word	0x000f4240
 80092f4:	001e8480 	.word	0x001e8480
 80092f8:	003d0900 	.word	0x003d0900
 80092fc:	00516155 	.word	0x00516155
 8009300:	0061a800 	.word	0x0061a800
 8009304:	007a1200 	.word	0x007a1200
 8009308:	00a2c2aa 	.word	0x00a2c2aa
 800930c:	00f42400 	.word	0x00f42400
 8009310:	01e84800 	.word	0x01e84800
 8009314:	0001e848 	.word	0x0001e848
 8009318:	00051615 	.word	0x00051615
 800931c:	00061a80 	.word	0x00061a80
 8009320:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009328:	2b00      	cmp	r3, #0
 800932a:	d04e      	beq.n	80093ca <UART_SetConfig+0xaea>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009330:	2b01      	cmp	r3, #1
 8009332:	d047      	beq.n	80093c4 <UART_SetConfig+0xae4>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009338:	2b02      	cmp	r3, #2
 800933a:	d040      	beq.n	80093be <UART_SetConfig+0xade>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009340:	2b03      	cmp	r3, #3
 8009342:	d039      	beq.n	80093b8 <UART_SetConfig+0xad8>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009348:	2b04      	cmp	r3, #4
 800934a:	d032      	beq.n	80093b2 <UART_SetConfig+0xad2>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009350:	2b05      	cmp	r3, #5
 8009352:	d02b      	beq.n	80093ac <UART_SetConfig+0xacc>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009358:	2b06      	cmp	r3, #6
 800935a:	d024      	beq.n	80093a6 <UART_SetConfig+0xac6>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009360:	2b07      	cmp	r3, #7
 8009362:	d01d      	beq.n	80093a0 <UART_SetConfig+0xac0>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009368:	2b08      	cmp	r3, #8
 800936a:	d016      	beq.n	800939a <UART_SetConfig+0xaba>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009370:	2b09      	cmp	r3, #9
 8009372:	d00f      	beq.n	8009394 <UART_SetConfig+0xab4>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009378:	2b0a      	cmp	r3, #10
 800937a:	d008      	beq.n	800938e <UART_SetConfig+0xaae>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009380:	2b0b      	cmp	r3, #11
 8009382:	d101      	bne.n	8009388 <UART_SetConfig+0xaa8>
 8009384:	2380      	movs	r3, #128	; 0x80
 8009386:	e022      	b.n	80093ce <UART_SetConfig+0xaee>
 8009388:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800938c:	e01f      	b.n	80093ce <UART_SetConfig+0xaee>
 800938e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009392:	e01c      	b.n	80093ce <UART_SetConfig+0xaee>
 8009394:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009398:	e019      	b.n	80093ce <UART_SetConfig+0xaee>
 800939a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800939e:	e016      	b.n	80093ce <UART_SetConfig+0xaee>
 80093a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80093a4:	e013      	b.n	80093ce <UART_SetConfig+0xaee>
 80093a6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80093aa:	e010      	b.n	80093ce <UART_SetConfig+0xaee>
 80093ac:	f640 43cc 	movw	r3, #3276	; 0xccc
 80093b0:	e00d      	b.n	80093ce <UART_SetConfig+0xaee>
 80093b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093b6:	e00a      	b.n	80093ce <UART_SetConfig+0xaee>
 80093b8:	f241 5355 	movw	r3, #5461	; 0x1555
 80093bc:	e007      	b.n	80093ce <UART_SetConfig+0xaee>
 80093be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80093c2:	e004      	b.n	80093ce <UART_SetConfig+0xaee>
 80093c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80093c8:	e001      	b.n	80093ce <UART_SetConfig+0xaee>
 80093ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80093d0:	e003      	b.n	80093da <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 80093d2:	2301      	movs	r3, #1
 80093d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 80093d8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80093da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093dc:	2b00      	cmp	r3, #0
 80093de:	f001 83e8 	beq.w	800abb2 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	685a      	ldr	r2, [r3, #4]
 80093e6:	4613      	mov	r3, r2
 80093e8:	005b      	lsls	r3, r3, #1
 80093ea:	4413      	add	r3, r2
 80093ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d305      	bcc.n	80093fe <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80093f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d904      	bls.n	8009408 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009404:	f001 bbd5 	b.w	800abb2 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8009408:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800940c:	2b08      	cmp	r3, #8
 800940e:	f000 8154 	beq.w	80096ba <UART_SetConfig+0xdda>
 8009412:	2b08      	cmp	r3, #8
 8009414:	dc06      	bgt.n	8009424 <UART_SetConfig+0xb44>
 8009416:	2b02      	cmp	r3, #2
 8009418:	d00f      	beq.n	800943a <UART_SetConfig+0xb5a>
 800941a:	2b04      	cmp	r3, #4
 800941c:	f000 80ac 	beq.w	8009578 <UART_SetConfig+0xc98>
 8009420:	f000 bc30 	b.w	8009c84 <UART_SetConfig+0x13a4>
 8009424:	2b20      	cmp	r3, #32
 8009426:	f000 832d 	beq.w	8009a84 <UART_SetConfig+0x11a4>
 800942a:	2b40      	cmp	r3, #64	; 0x40
 800942c:	f000 83a5 	beq.w	8009b7a <UART_SetConfig+0x129a>
 8009430:	2b10      	cmp	r3, #16
 8009432:	f000 81e3 	beq.w	80097fc <UART_SetConfig+0xf1c>
 8009436:	f000 bc25 	b.w	8009c84 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800943a:	f7fc fb29 	bl	8005a90 <HAL_RCCEx_GetD3PCLK1Freq>
 800943e:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009442:	4618      	mov	r0, r3
 8009444:	f04f 0100 	mov.w	r1, #0
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800944c:	2b00      	cmp	r3, #0
 800944e:	d067      	beq.n	8009520 <UART_SetConfig+0xc40>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009454:	2b01      	cmp	r3, #1
 8009456:	d05e      	beq.n	8009516 <UART_SetConfig+0xc36>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945c:	2b02      	cmp	r3, #2
 800945e:	d055      	beq.n	800950c <UART_SetConfig+0xc2c>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009464:	2b03      	cmp	r3, #3
 8009466:	d04c      	beq.n	8009502 <UART_SetConfig+0xc22>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946c:	2b04      	cmp	r3, #4
 800946e:	d043      	beq.n	80094f8 <UART_SetConfig+0xc18>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009474:	2b05      	cmp	r3, #5
 8009476:	d03a      	beq.n	80094ee <UART_SetConfig+0xc0e>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800947c:	2b06      	cmp	r3, #6
 800947e:	d031      	beq.n	80094e4 <UART_SetConfig+0xc04>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009484:	2b07      	cmp	r3, #7
 8009486:	d028      	beq.n	80094da <UART_SetConfig+0xbfa>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800948c:	2b08      	cmp	r3, #8
 800948e:	d01f      	beq.n	80094d0 <UART_SetConfig+0xbf0>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009494:	2b09      	cmp	r3, #9
 8009496:	d016      	beq.n	80094c6 <UART_SetConfig+0xbe6>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800949c:	2b0a      	cmp	r3, #10
 800949e:	d00d      	beq.n	80094bc <UART_SetConfig+0xbdc>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a4:	2b0b      	cmp	r3, #11
 80094a6:	d104      	bne.n	80094b2 <UART_SetConfig+0xbd2>
 80094a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80094ac:	f04f 0400 	mov.w	r4, #0
 80094b0:	e03a      	b.n	8009528 <UART_SetConfig+0xc48>
 80094b2:	f04f 0301 	mov.w	r3, #1
 80094b6:	f04f 0400 	mov.w	r4, #0
 80094ba:	e035      	b.n	8009528 <UART_SetConfig+0xc48>
 80094bc:	f04f 0380 	mov.w	r3, #128	; 0x80
 80094c0:	f04f 0400 	mov.w	r4, #0
 80094c4:	e030      	b.n	8009528 <UART_SetConfig+0xc48>
 80094c6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80094ca:	f04f 0400 	mov.w	r4, #0
 80094ce:	e02b      	b.n	8009528 <UART_SetConfig+0xc48>
 80094d0:	f04f 0320 	mov.w	r3, #32
 80094d4:	f04f 0400 	mov.w	r4, #0
 80094d8:	e026      	b.n	8009528 <UART_SetConfig+0xc48>
 80094da:	f04f 0310 	mov.w	r3, #16
 80094de:	f04f 0400 	mov.w	r4, #0
 80094e2:	e021      	b.n	8009528 <UART_SetConfig+0xc48>
 80094e4:	f04f 030c 	mov.w	r3, #12
 80094e8:	f04f 0400 	mov.w	r4, #0
 80094ec:	e01c      	b.n	8009528 <UART_SetConfig+0xc48>
 80094ee:	f04f 030a 	mov.w	r3, #10
 80094f2:	f04f 0400 	mov.w	r4, #0
 80094f6:	e017      	b.n	8009528 <UART_SetConfig+0xc48>
 80094f8:	f04f 0308 	mov.w	r3, #8
 80094fc:	f04f 0400 	mov.w	r4, #0
 8009500:	e012      	b.n	8009528 <UART_SetConfig+0xc48>
 8009502:	f04f 0306 	mov.w	r3, #6
 8009506:	f04f 0400 	mov.w	r4, #0
 800950a:	e00d      	b.n	8009528 <UART_SetConfig+0xc48>
 800950c:	f04f 0304 	mov.w	r3, #4
 8009510:	f04f 0400 	mov.w	r4, #0
 8009514:	e008      	b.n	8009528 <UART_SetConfig+0xc48>
 8009516:	f04f 0302 	mov.w	r3, #2
 800951a:	f04f 0400 	mov.w	r4, #0
 800951e:	e003      	b.n	8009528 <UART_SetConfig+0xc48>
 8009520:	f04f 0301 	mov.w	r3, #1
 8009524:	f04f 0400 	mov.w	r4, #0
 8009528:	461a      	mov	r2, r3
 800952a:	4623      	mov	r3, r4
 800952c:	f7f6 fed4 	bl	80002d8 <__aeabi_uldivmod>
 8009530:	4603      	mov	r3, r0
 8009532:	460c      	mov	r4, r1
 8009534:	4619      	mov	r1, r3
 8009536:	4622      	mov	r2, r4
 8009538:	f04f 0300 	mov.w	r3, #0
 800953c:	f04f 0400 	mov.w	r4, #0
 8009540:	0214      	lsls	r4, r2, #8
 8009542:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009546:	020b      	lsls	r3, r1, #8
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	6852      	ldr	r2, [r2, #4]
 800954c:	0852      	lsrs	r2, r2, #1
 800954e:	4611      	mov	r1, r2
 8009550:	f04f 0200 	mov.w	r2, #0
 8009554:	eb13 0b01 	adds.w	fp, r3, r1
 8009558:	eb44 0c02 	adc.w	ip, r4, r2
 800955c:	4658      	mov	r0, fp
 800955e:	4661      	mov	r1, ip
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	f04f 0400 	mov.w	r4, #0
 8009568:	461a      	mov	r2, r3
 800956a:	4623      	mov	r3, r4
 800956c:	f7f6 feb4 	bl	80002d8 <__aeabi_uldivmod>
 8009570:	4603      	mov	r3, r0
 8009572:	460c      	mov	r4, r1
 8009574:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009576:	e389      	b.n	8009c8c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009578:	f107 0318 	add.w	r3, r7, #24
 800957c:	4618      	mov	r0, r3
 800957e:	f7fc fa9d 	bl	8005abc <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009582:	69fb      	ldr	r3, [r7, #28]
 8009584:	4618      	mov	r0, r3
 8009586:	f04f 0100 	mov.w	r1, #0
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800958e:	2b00      	cmp	r3, #0
 8009590:	d067      	beq.n	8009662 <UART_SetConfig+0xd82>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009596:	2b01      	cmp	r3, #1
 8009598:	d05e      	beq.n	8009658 <UART_SetConfig+0xd78>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959e:	2b02      	cmp	r3, #2
 80095a0:	d055      	beq.n	800964e <UART_SetConfig+0xd6e>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a6:	2b03      	cmp	r3, #3
 80095a8:	d04c      	beq.n	8009644 <UART_SetConfig+0xd64>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ae:	2b04      	cmp	r3, #4
 80095b0:	d043      	beq.n	800963a <UART_SetConfig+0xd5a>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b6:	2b05      	cmp	r3, #5
 80095b8:	d03a      	beq.n	8009630 <UART_SetConfig+0xd50>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095be:	2b06      	cmp	r3, #6
 80095c0:	d031      	beq.n	8009626 <UART_SetConfig+0xd46>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c6:	2b07      	cmp	r3, #7
 80095c8:	d028      	beq.n	800961c <UART_SetConfig+0xd3c>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ce:	2b08      	cmp	r3, #8
 80095d0:	d01f      	beq.n	8009612 <UART_SetConfig+0xd32>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d6:	2b09      	cmp	r3, #9
 80095d8:	d016      	beq.n	8009608 <UART_SetConfig+0xd28>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095de:	2b0a      	cmp	r3, #10
 80095e0:	d00d      	beq.n	80095fe <UART_SetConfig+0xd1e>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e6:	2b0b      	cmp	r3, #11
 80095e8:	d104      	bne.n	80095f4 <UART_SetConfig+0xd14>
 80095ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095ee:	f04f 0400 	mov.w	r4, #0
 80095f2:	e03a      	b.n	800966a <UART_SetConfig+0xd8a>
 80095f4:	f04f 0301 	mov.w	r3, #1
 80095f8:	f04f 0400 	mov.w	r4, #0
 80095fc:	e035      	b.n	800966a <UART_SetConfig+0xd8a>
 80095fe:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009602:	f04f 0400 	mov.w	r4, #0
 8009606:	e030      	b.n	800966a <UART_SetConfig+0xd8a>
 8009608:	f04f 0340 	mov.w	r3, #64	; 0x40
 800960c:	f04f 0400 	mov.w	r4, #0
 8009610:	e02b      	b.n	800966a <UART_SetConfig+0xd8a>
 8009612:	f04f 0320 	mov.w	r3, #32
 8009616:	f04f 0400 	mov.w	r4, #0
 800961a:	e026      	b.n	800966a <UART_SetConfig+0xd8a>
 800961c:	f04f 0310 	mov.w	r3, #16
 8009620:	f04f 0400 	mov.w	r4, #0
 8009624:	e021      	b.n	800966a <UART_SetConfig+0xd8a>
 8009626:	f04f 030c 	mov.w	r3, #12
 800962a:	f04f 0400 	mov.w	r4, #0
 800962e:	e01c      	b.n	800966a <UART_SetConfig+0xd8a>
 8009630:	f04f 030a 	mov.w	r3, #10
 8009634:	f04f 0400 	mov.w	r4, #0
 8009638:	e017      	b.n	800966a <UART_SetConfig+0xd8a>
 800963a:	f04f 0308 	mov.w	r3, #8
 800963e:	f04f 0400 	mov.w	r4, #0
 8009642:	e012      	b.n	800966a <UART_SetConfig+0xd8a>
 8009644:	f04f 0306 	mov.w	r3, #6
 8009648:	f04f 0400 	mov.w	r4, #0
 800964c:	e00d      	b.n	800966a <UART_SetConfig+0xd8a>
 800964e:	f04f 0304 	mov.w	r3, #4
 8009652:	f04f 0400 	mov.w	r4, #0
 8009656:	e008      	b.n	800966a <UART_SetConfig+0xd8a>
 8009658:	f04f 0302 	mov.w	r3, #2
 800965c:	f04f 0400 	mov.w	r4, #0
 8009660:	e003      	b.n	800966a <UART_SetConfig+0xd8a>
 8009662:	f04f 0301 	mov.w	r3, #1
 8009666:	f04f 0400 	mov.w	r4, #0
 800966a:	461a      	mov	r2, r3
 800966c:	4623      	mov	r3, r4
 800966e:	f7f6 fe33 	bl	80002d8 <__aeabi_uldivmod>
 8009672:	4603      	mov	r3, r0
 8009674:	460c      	mov	r4, r1
 8009676:	4619      	mov	r1, r3
 8009678:	4622      	mov	r2, r4
 800967a:	f04f 0300 	mov.w	r3, #0
 800967e:	f04f 0400 	mov.w	r4, #0
 8009682:	0214      	lsls	r4, r2, #8
 8009684:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009688:	020b      	lsls	r3, r1, #8
 800968a:	687a      	ldr	r2, [r7, #4]
 800968c:	6852      	ldr	r2, [r2, #4]
 800968e:	0852      	lsrs	r2, r2, #1
 8009690:	4611      	mov	r1, r2
 8009692:	f04f 0200 	mov.w	r2, #0
 8009696:	eb13 0b01 	adds.w	fp, r3, r1
 800969a:	eb44 0c02 	adc.w	ip, r4, r2
 800969e:	4658      	mov	r0, fp
 80096a0:	4661      	mov	r1, ip
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	f04f 0400 	mov.w	r4, #0
 80096aa:	461a      	mov	r2, r3
 80096ac:	4623      	mov	r3, r4
 80096ae:	f7f6 fe13 	bl	80002d8 <__aeabi_uldivmod>
 80096b2:	4603      	mov	r3, r0
 80096b4:	460c      	mov	r4, r1
 80096b6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80096b8:	e2e8      	b.n	8009c8c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096ba:	f107 030c 	add.w	r3, r7, #12
 80096be:	4618      	mov	r0, r3
 80096c0:	f7fc fb48 	bl	8005d54 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	4618      	mov	r0, r3
 80096c8:	f04f 0100 	mov.w	r1, #0
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d067      	beq.n	80097a4 <UART_SetConfig+0xec4>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d05e      	beq.n	800979a <UART_SetConfig+0xeba>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e0:	2b02      	cmp	r3, #2
 80096e2:	d055      	beq.n	8009790 <UART_SetConfig+0xeb0>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e8:	2b03      	cmp	r3, #3
 80096ea:	d04c      	beq.n	8009786 <UART_SetConfig+0xea6>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f0:	2b04      	cmp	r3, #4
 80096f2:	d043      	beq.n	800977c <UART_SetConfig+0xe9c>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f8:	2b05      	cmp	r3, #5
 80096fa:	d03a      	beq.n	8009772 <UART_SetConfig+0xe92>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009700:	2b06      	cmp	r3, #6
 8009702:	d031      	beq.n	8009768 <UART_SetConfig+0xe88>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009708:	2b07      	cmp	r3, #7
 800970a:	d028      	beq.n	800975e <UART_SetConfig+0xe7e>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009710:	2b08      	cmp	r3, #8
 8009712:	d01f      	beq.n	8009754 <UART_SetConfig+0xe74>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009718:	2b09      	cmp	r3, #9
 800971a:	d016      	beq.n	800974a <UART_SetConfig+0xe6a>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009720:	2b0a      	cmp	r3, #10
 8009722:	d00d      	beq.n	8009740 <UART_SetConfig+0xe60>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009728:	2b0b      	cmp	r3, #11
 800972a:	d104      	bne.n	8009736 <UART_SetConfig+0xe56>
 800972c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009730:	f04f 0400 	mov.w	r4, #0
 8009734:	e03a      	b.n	80097ac <UART_SetConfig+0xecc>
 8009736:	f04f 0301 	mov.w	r3, #1
 800973a:	f04f 0400 	mov.w	r4, #0
 800973e:	e035      	b.n	80097ac <UART_SetConfig+0xecc>
 8009740:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009744:	f04f 0400 	mov.w	r4, #0
 8009748:	e030      	b.n	80097ac <UART_SetConfig+0xecc>
 800974a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800974e:	f04f 0400 	mov.w	r4, #0
 8009752:	e02b      	b.n	80097ac <UART_SetConfig+0xecc>
 8009754:	f04f 0320 	mov.w	r3, #32
 8009758:	f04f 0400 	mov.w	r4, #0
 800975c:	e026      	b.n	80097ac <UART_SetConfig+0xecc>
 800975e:	f04f 0310 	mov.w	r3, #16
 8009762:	f04f 0400 	mov.w	r4, #0
 8009766:	e021      	b.n	80097ac <UART_SetConfig+0xecc>
 8009768:	f04f 030c 	mov.w	r3, #12
 800976c:	f04f 0400 	mov.w	r4, #0
 8009770:	e01c      	b.n	80097ac <UART_SetConfig+0xecc>
 8009772:	f04f 030a 	mov.w	r3, #10
 8009776:	f04f 0400 	mov.w	r4, #0
 800977a:	e017      	b.n	80097ac <UART_SetConfig+0xecc>
 800977c:	f04f 0308 	mov.w	r3, #8
 8009780:	f04f 0400 	mov.w	r4, #0
 8009784:	e012      	b.n	80097ac <UART_SetConfig+0xecc>
 8009786:	f04f 0306 	mov.w	r3, #6
 800978a:	f04f 0400 	mov.w	r4, #0
 800978e:	e00d      	b.n	80097ac <UART_SetConfig+0xecc>
 8009790:	f04f 0304 	mov.w	r3, #4
 8009794:	f04f 0400 	mov.w	r4, #0
 8009798:	e008      	b.n	80097ac <UART_SetConfig+0xecc>
 800979a:	f04f 0302 	mov.w	r3, #2
 800979e:	f04f 0400 	mov.w	r4, #0
 80097a2:	e003      	b.n	80097ac <UART_SetConfig+0xecc>
 80097a4:	f04f 0301 	mov.w	r3, #1
 80097a8:	f04f 0400 	mov.w	r4, #0
 80097ac:	461a      	mov	r2, r3
 80097ae:	4623      	mov	r3, r4
 80097b0:	f7f6 fd92 	bl	80002d8 <__aeabi_uldivmod>
 80097b4:	4603      	mov	r3, r0
 80097b6:	460c      	mov	r4, r1
 80097b8:	4619      	mov	r1, r3
 80097ba:	4622      	mov	r2, r4
 80097bc:	f04f 0300 	mov.w	r3, #0
 80097c0:	f04f 0400 	mov.w	r4, #0
 80097c4:	0214      	lsls	r4, r2, #8
 80097c6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80097ca:	020b      	lsls	r3, r1, #8
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	6852      	ldr	r2, [r2, #4]
 80097d0:	0852      	lsrs	r2, r2, #1
 80097d2:	4611      	mov	r1, r2
 80097d4:	f04f 0200 	mov.w	r2, #0
 80097d8:	eb13 0b01 	adds.w	fp, r3, r1
 80097dc:	eb44 0c02 	adc.w	ip, r4, r2
 80097e0:	4658      	mov	r0, fp
 80097e2:	4661      	mov	r1, ip
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	f04f 0400 	mov.w	r4, #0
 80097ec:	461a      	mov	r2, r3
 80097ee:	4623      	mov	r3, r4
 80097f0:	f7f6 fd72 	bl	80002d8 <__aeabi_uldivmod>
 80097f4:	4603      	mov	r3, r0
 80097f6:	460c      	mov	r4, r1
 80097f8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80097fa:	e247      	b.n	8009c8c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097fc:	4b96      	ldr	r3, [pc, #600]	; (8009a58 <UART_SetConfig+0x1178>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f003 0320 	and.w	r3, r3, #32
 8009804:	2b00      	cmp	r3, #0
 8009806:	f000 80a3 	beq.w	8009950 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800980a:	4b93      	ldr	r3, [pc, #588]	; (8009a58 <UART_SetConfig+0x1178>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	08db      	lsrs	r3, r3, #3
 8009810:	f003 0303 	and.w	r3, r3, #3
 8009814:	4a91      	ldr	r2, [pc, #580]	; (8009a5c <UART_SetConfig+0x117c>)
 8009816:	fa22 f303 	lsr.w	r3, r2, r3
 800981a:	4618      	mov	r0, r3
 800981c:	f04f 0100 	mov.w	r1, #0
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009824:	2b00      	cmp	r3, #0
 8009826:	d067      	beq.n	80098f8 <UART_SetConfig+0x1018>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982c:	2b01      	cmp	r3, #1
 800982e:	d05e      	beq.n	80098ee <UART_SetConfig+0x100e>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009834:	2b02      	cmp	r3, #2
 8009836:	d055      	beq.n	80098e4 <UART_SetConfig+0x1004>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800983c:	2b03      	cmp	r3, #3
 800983e:	d04c      	beq.n	80098da <UART_SetConfig+0xffa>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009844:	2b04      	cmp	r3, #4
 8009846:	d043      	beq.n	80098d0 <UART_SetConfig+0xff0>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800984c:	2b05      	cmp	r3, #5
 800984e:	d03a      	beq.n	80098c6 <UART_SetConfig+0xfe6>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009854:	2b06      	cmp	r3, #6
 8009856:	d031      	beq.n	80098bc <UART_SetConfig+0xfdc>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800985c:	2b07      	cmp	r3, #7
 800985e:	d028      	beq.n	80098b2 <UART_SetConfig+0xfd2>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009864:	2b08      	cmp	r3, #8
 8009866:	d01f      	beq.n	80098a8 <UART_SetConfig+0xfc8>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986c:	2b09      	cmp	r3, #9
 800986e:	d016      	beq.n	800989e <UART_SetConfig+0xfbe>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009874:	2b0a      	cmp	r3, #10
 8009876:	d00d      	beq.n	8009894 <UART_SetConfig+0xfb4>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800987c:	2b0b      	cmp	r3, #11
 800987e:	d104      	bne.n	800988a <UART_SetConfig+0xfaa>
 8009880:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009884:	f04f 0400 	mov.w	r4, #0
 8009888:	e03a      	b.n	8009900 <UART_SetConfig+0x1020>
 800988a:	f04f 0301 	mov.w	r3, #1
 800988e:	f04f 0400 	mov.w	r4, #0
 8009892:	e035      	b.n	8009900 <UART_SetConfig+0x1020>
 8009894:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009898:	f04f 0400 	mov.w	r4, #0
 800989c:	e030      	b.n	8009900 <UART_SetConfig+0x1020>
 800989e:	f04f 0340 	mov.w	r3, #64	; 0x40
 80098a2:	f04f 0400 	mov.w	r4, #0
 80098a6:	e02b      	b.n	8009900 <UART_SetConfig+0x1020>
 80098a8:	f04f 0320 	mov.w	r3, #32
 80098ac:	f04f 0400 	mov.w	r4, #0
 80098b0:	e026      	b.n	8009900 <UART_SetConfig+0x1020>
 80098b2:	f04f 0310 	mov.w	r3, #16
 80098b6:	f04f 0400 	mov.w	r4, #0
 80098ba:	e021      	b.n	8009900 <UART_SetConfig+0x1020>
 80098bc:	f04f 030c 	mov.w	r3, #12
 80098c0:	f04f 0400 	mov.w	r4, #0
 80098c4:	e01c      	b.n	8009900 <UART_SetConfig+0x1020>
 80098c6:	f04f 030a 	mov.w	r3, #10
 80098ca:	f04f 0400 	mov.w	r4, #0
 80098ce:	e017      	b.n	8009900 <UART_SetConfig+0x1020>
 80098d0:	f04f 0308 	mov.w	r3, #8
 80098d4:	f04f 0400 	mov.w	r4, #0
 80098d8:	e012      	b.n	8009900 <UART_SetConfig+0x1020>
 80098da:	f04f 0306 	mov.w	r3, #6
 80098de:	f04f 0400 	mov.w	r4, #0
 80098e2:	e00d      	b.n	8009900 <UART_SetConfig+0x1020>
 80098e4:	f04f 0304 	mov.w	r3, #4
 80098e8:	f04f 0400 	mov.w	r4, #0
 80098ec:	e008      	b.n	8009900 <UART_SetConfig+0x1020>
 80098ee:	f04f 0302 	mov.w	r3, #2
 80098f2:	f04f 0400 	mov.w	r4, #0
 80098f6:	e003      	b.n	8009900 <UART_SetConfig+0x1020>
 80098f8:	f04f 0301 	mov.w	r3, #1
 80098fc:	f04f 0400 	mov.w	r4, #0
 8009900:	461a      	mov	r2, r3
 8009902:	4623      	mov	r3, r4
 8009904:	f7f6 fce8 	bl	80002d8 <__aeabi_uldivmod>
 8009908:	4603      	mov	r3, r0
 800990a:	460c      	mov	r4, r1
 800990c:	4619      	mov	r1, r3
 800990e:	4622      	mov	r2, r4
 8009910:	f04f 0300 	mov.w	r3, #0
 8009914:	f04f 0400 	mov.w	r4, #0
 8009918:	0214      	lsls	r4, r2, #8
 800991a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800991e:	020b      	lsls	r3, r1, #8
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	6852      	ldr	r2, [r2, #4]
 8009924:	0852      	lsrs	r2, r2, #1
 8009926:	4611      	mov	r1, r2
 8009928:	f04f 0200 	mov.w	r2, #0
 800992c:	eb13 0b01 	adds.w	fp, r3, r1
 8009930:	eb44 0c02 	adc.w	ip, r4, r2
 8009934:	4658      	mov	r0, fp
 8009936:	4661      	mov	r1, ip
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	f04f 0400 	mov.w	r4, #0
 8009940:	461a      	mov	r2, r3
 8009942:	4623      	mov	r3, r4
 8009944:	f7f6 fcc8 	bl	80002d8 <__aeabi_uldivmod>
 8009948:	4603      	mov	r3, r0
 800994a:	460c      	mov	r4, r1
 800994c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800994e:	e19d      	b.n	8009c8c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009954:	2b00      	cmp	r3, #0
 8009956:	d05b      	beq.n	8009a10 <UART_SetConfig+0x1130>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800995c:	2b01      	cmp	r3, #1
 800995e:	d053      	beq.n	8009a08 <UART_SetConfig+0x1128>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009964:	2b02      	cmp	r3, #2
 8009966:	d04b      	beq.n	8009a00 <UART_SetConfig+0x1120>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996c:	2b03      	cmp	r3, #3
 800996e:	d043      	beq.n	80099f8 <UART_SetConfig+0x1118>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009974:	2b04      	cmp	r3, #4
 8009976:	d03b      	beq.n	80099f0 <UART_SetConfig+0x1110>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800997c:	2b05      	cmp	r3, #5
 800997e:	d033      	beq.n	80099e8 <UART_SetConfig+0x1108>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009984:	2b06      	cmp	r3, #6
 8009986:	d02b      	beq.n	80099e0 <UART_SetConfig+0x1100>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800998c:	2b07      	cmp	r3, #7
 800998e:	d023      	beq.n	80099d8 <UART_SetConfig+0x10f8>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009994:	2b08      	cmp	r3, #8
 8009996:	d01b      	beq.n	80099d0 <UART_SetConfig+0x10f0>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999c:	2b09      	cmp	r3, #9
 800999e:	d013      	beq.n	80099c8 <UART_SetConfig+0x10e8>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a4:	2b0a      	cmp	r3, #10
 80099a6:	d00b      	beq.n	80099c0 <UART_SetConfig+0x10e0>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ac:	2b0b      	cmp	r3, #11
 80099ae:	d103      	bne.n	80099b8 <UART_SetConfig+0x10d8>
 80099b0:	4b2a      	ldr	r3, [pc, #168]	; (8009a5c <UART_SetConfig+0x117c>)
 80099b2:	f04f 0400 	mov.w	r4, #0
 80099b6:	e02e      	b.n	8009a16 <UART_SetConfig+0x1136>
 80099b8:	4b29      	ldr	r3, [pc, #164]	; (8009a60 <UART_SetConfig+0x1180>)
 80099ba:	f04f 0403 	mov.w	r4, #3
 80099be:	e02a      	b.n	8009a16 <UART_SetConfig+0x1136>
 80099c0:	4b28      	ldr	r3, [pc, #160]	; (8009a64 <UART_SetConfig+0x1184>)
 80099c2:	f04f 0400 	mov.w	r4, #0
 80099c6:	e026      	b.n	8009a16 <UART_SetConfig+0x1136>
 80099c8:	4b27      	ldr	r3, [pc, #156]	; (8009a68 <UART_SetConfig+0x1188>)
 80099ca:	f04f 0400 	mov.w	r4, #0
 80099ce:	e022      	b.n	8009a16 <UART_SetConfig+0x1136>
 80099d0:	4b26      	ldr	r3, [pc, #152]	; (8009a6c <UART_SetConfig+0x118c>)
 80099d2:	f04f 0400 	mov.w	r4, #0
 80099d6:	e01e      	b.n	8009a16 <UART_SetConfig+0x1136>
 80099d8:	4b25      	ldr	r3, [pc, #148]	; (8009a70 <UART_SetConfig+0x1190>)
 80099da:	f04f 0400 	mov.w	r4, #0
 80099de:	e01a      	b.n	8009a16 <UART_SetConfig+0x1136>
 80099e0:	a419      	add	r4, pc, #100	; (adr r4, 8009a48 <UART_SetConfig+0x1168>)
 80099e2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80099e6:	e016      	b.n	8009a16 <UART_SetConfig+0x1136>
 80099e8:	4b22      	ldr	r3, [pc, #136]	; (8009a74 <UART_SetConfig+0x1194>)
 80099ea:	f04f 0400 	mov.w	r4, #0
 80099ee:	e012      	b.n	8009a16 <UART_SetConfig+0x1136>
 80099f0:	4b21      	ldr	r3, [pc, #132]	; (8009a78 <UART_SetConfig+0x1198>)
 80099f2:	f04f 0400 	mov.w	r4, #0
 80099f6:	e00e      	b.n	8009a16 <UART_SetConfig+0x1136>
 80099f8:	a415      	add	r4, pc, #84	; (adr r4, 8009a50 <UART_SetConfig+0x1170>)
 80099fa:	e9d4 3400 	ldrd	r3, r4, [r4]
 80099fe:	e00a      	b.n	8009a16 <UART_SetConfig+0x1136>
 8009a00:	4b1e      	ldr	r3, [pc, #120]	; (8009a7c <UART_SetConfig+0x119c>)
 8009a02:	f04f 0400 	mov.w	r4, #0
 8009a06:	e006      	b.n	8009a16 <UART_SetConfig+0x1136>
 8009a08:	4b1d      	ldr	r3, [pc, #116]	; (8009a80 <UART_SetConfig+0x11a0>)
 8009a0a:	f04f 0401 	mov.w	r4, #1
 8009a0e:	e002      	b.n	8009a16 <UART_SetConfig+0x1136>
 8009a10:	4b13      	ldr	r3, [pc, #76]	; (8009a60 <UART_SetConfig+0x1180>)
 8009a12:	f04f 0403 	mov.w	r4, #3
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	6852      	ldr	r2, [r2, #4]
 8009a1a:	0852      	lsrs	r2, r2, #1
 8009a1c:	4611      	mov	r1, r2
 8009a1e:	f04f 0200 	mov.w	r2, #0
 8009a22:	eb13 0b01 	adds.w	fp, r3, r1
 8009a26:	eb44 0c02 	adc.w	ip, r4, r2
 8009a2a:	4658      	mov	r0, fp
 8009a2c:	4661      	mov	r1, ip
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	f04f 0400 	mov.w	r4, #0
 8009a36:	461a      	mov	r2, r3
 8009a38:	4623      	mov	r3, r4
 8009a3a:	f7f6 fc4d 	bl	80002d8 <__aeabi_uldivmod>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	460c      	mov	r4, r1
 8009a42:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009a44:	e122      	b.n	8009c8c <UART_SetConfig+0x13ac>
 8009a46:	bf00      	nop
 8009a48:	51615500 	.word	0x51615500
 8009a4c:	00000000 	.word	0x00000000
 8009a50:	a2c2aa00 	.word	0xa2c2aa00
 8009a54:	00000000 	.word	0x00000000
 8009a58:	58024400 	.word	0x58024400
 8009a5c:	03d09000 	.word	0x03d09000
 8009a60:	d0900000 	.word	0xd0900000
 8009a64:	07a12000 	.word	0x07a12000
 8009a68:	0f424000 	.word	0x0f424000
 8009a6c:	1e848000 	.word	0x1e848000
 8009a70:	3d090000 	.word	0x3d090000
 8009a74:	61a80000 	.word	0x61a80000
 8009a78:	7a120000 	.word	0x7a120000
 8009a7c:	f4240000 	.word	0xf4240000
 8009a80:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d05b      	beq.n	8009b44 <UART_SetConfig+0x1264>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d053      	beq.n	8009b3c <UART_SetConfig+0x125c>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a98:	2b02      	cmp	r3, #2
 8009a9a:	d04b      	beq.n	8009b34 <UART_SetConfig+0x1254>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa0:	2b03      	cmp	r3, #3
 8009aa2:	d043      	beq.n	8009b2c <UART_SetConfig+0x124c>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa8:	2b04      	cmp	r3, #4
 8009aaa:	d03b      	beq.n	8009b24 <UART_SetConfig+0x1244>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab0:	2b05      	cmp	r3, #5
 8009ab2:	d033      	beq.n	8009b1c <UART_SetConfig+0x123c>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab8:	2b06      	cmp	r3, #6
 8009aba:	d02b      	beq.n	8009b14 <UART_SetConfig+0x1234>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac0:	2b07      	cmp	r3, #7
 8009ac2:	d023      	beq.n	8009b0c <UART_SetConfig+0x122c>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac8:	2b08      	cmp	r3, #8
 8009aca:	d01b      	beq.n	8009b04 <UART_SetConfig+0x1224>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad0:	2b09      	cmp	r3, #9
 8009ad2:	d013      	beq.n	8009afc <UART_SetConfig+0x121c>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad8:	2b0a      	cmp	r3, #10
 8009ada:	d00b      	beq.n	8009af4 <UART_SetConfig+0x1214>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae0:	2b0b      	cmp	r3, #11
 8009ae2:	d103      	bne.n	8009aec <UART_SetConfig+0x120c>
 8009ae4:	4bc0      	ldr	r3, [pc, #768]	; (8009de8 <UART_SetConfig+0x1508>)
 8009ae6:	f04f 0400 	mov.w	r4, #0
 8009aea:	e02e      	b.n	8009b4a <UART_SetConfig+0x126a>
 8009aec:	4bbf      	ldr	r3, [pc, #764]	; (8009dec <UART_SetConfig+0x150c>)
 8009aee:	f04f 0400 	mov.w	r4, #0
 8009af2:	e02a      	b.n	8009b4a <UART_SetConfig+0x126a>
 8009af4:	4bbe      	ldr	r3, [pc, #760]	; (8009df0 <UART_SetConfig+0x1510>)
 8009af6:	f04f 0400 	mov.w	r4, #0
 8009afa:	e026      	b.n	8009b4a <UART_SetConfig+0x126a>
 8009afc:	4bbd      	ldr	r3, [pc, #756]	; (8009df4 <UART_SetConfig+0x1514>)
 8009afe:	f04f 0400 	mov.w	r4, #0
 8009b02:	e022      	b.n	8009b4a <UART_SetConfig+0x126a>
 8009b04:	4bbc      	ldr	r3, [pc, #752]	; (8009df8 <UART_SetConfig+0x1518>)
 8009b06:	f04f 0400 	mov.w	r4, #0
 8009b0a:	e01e      	b.n	8009b4a <UART_SetConfig+0x126a>
 8009b0c:	4bbb      	ldr	r3, [pc, #748]	; (8009dfc <UART_SetConfig+0x151c>)
 8009b0e:	f04f 0400 	mov.w	r4, #0
 8009b12:	e01a      	b.n	8009b4a <UART_SetConfig+0x126a>
 8009b14:	a4b0      	add	r4, pc, #704	; (adr r4, 8009dd8 <UART_SetConfig+0x14f8>)
 8009b16:	e9d4 3400 	ldrd	r3, r4, [r4]
 8009b1a:	e016      	b.n	8009b4a <UART_SetConfig+0x126a>
 8009b1c:	4bb8      	ldr	r3, [pc, #736]	; (8009e00 <UART_SetConfig+0x1520>)
 8009b1e:	f04f 0400 	mov.w	r4, #0
 8009b22:	e012      	b.n	8009b4a <UART_SetConfig+0x126a>
 8009b24:	4bb7      	ldr	r3, [pc, #732]	; (8009e04 <UART_SetConfig+0x1524>)
 8009b26:	f04f 0400 	mov.w	r4, #0
 8009b2a:	e00e      	b.n	8009b4a <UART_SetConfig+0x126a>
 8009b2c:	a4ac      	add	r4, pc, #688	; (adr r4, 8009de0 <UART_SetConfig+0x1500>)
 8009b2e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8009b32:	e00a      	b.n	8009b4a <UART_SetConfig+0x126a>
 8009b34:	4bb4      	ldr	r3, [pc, #720]	; (8009e08 <UART_SetConfig+0x1528>)
 8009b36:	f04f 0400 	mov.w	r4, #0
 8009b3a:	e006      	b.n	8009b4a <UART_SetConfig+0x126a>
 8009b3c:	4bb3      	ldr	r3, [pc, #716]	; (8009e0c <UART_SetConfig+0x152c>)
 8009b3e:	f04f 0400 	mov.w	r4, #0
 8009b42:	e002      	b.n	8009b4a <UART_SetConfig+0x126a>
 8009b44:	4ba9      	ldr	r3, [pc, #676]	; (8009dec <UART_SetConfig+0x150c>)
 8009b46:	f04f 0400 	mov.w	r4, #0
 8009b4a:	687a      	ldr	r2, [r7, #4]
 8009b4c:	6852      	ldr	r2, [r2, #4]
 8009b4e:	0852      	lsrs	r2, r2, #1
 8009b50:	4611      	mov	r1, r2
 8009b52:	f04f 0200 	mov.w	r2, #0
 8009b56:	eb13 0b01 	adds.w	fp, r3, r1
 8009b5a:	eb44 0c02 	adc.w	ip, r4, r2
 8009b5e:	4658      	mov	r0, fp
 8009b60:	4661      	mov	r1, ip
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	f04f 0400 	mov.w	r4, #0
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	4623      	mov	r3, r4
 8009b6e:	f7f6 fbb3 	bl	80002d8 <__aeabi_uldivmod>
 8009b72:	4603      	mov	r3, r0
 8009b74:	460c      	mov	r4, r1
 8009b76:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009b78:	e088      	b.n	8009c8c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d064      	beq.n	8009c4c <UART_SetConfig+0x136c>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d05b      	beq.n	8009c42 <UART_SetConfig+0x1362>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8e:	2b02      	cmp	r3, #2
 8009b90:	d052      	beq.n	8009c38 <UART_SetConfig+0x1358>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b96:	2b03      	cmp	r3, #3
 8009b98:	d04a      	beq.n	8009c30 <UART_SetConfig+0x1350>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9e:	2b04      	cmp	r3, #4
 8009ba0:	d041      	beq.n	8009c26 <UART_SetConfig+0x1346>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba6:	2b05      	cmp	r3, #5
 8009ba8:	d039      	beq.n	8009c1e <UART_SetConfig+0x133e>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bae:	2b06      	cmp	r3, #6
 8009bb0:	d031      	beq.n	8009c16 <UART_SetConfig+0x1336>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb6:	2b07      	cmp	r3, #7
 8009bb8:	d028      	beq.n	8009c0c <UART_SetConfig+0x132c>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bbe:	2b08      	cmp	r3, #8
 8009bc0:	d01f      	beq.n	8009c02 <UART_SetConfig+0x1322>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc6:	2b09      	cmp	r3, #9
 8009bc8:	d016      	beq.n	8009bf8 <UART_SetConfig+0x1318>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bce:	2b0a      	cmp	r3, #10
 8009bd0:	d00d      	beq.n	8009bee <UART_SetConfig+0x130e>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd6:	2b0b      	cmp	r3, #11
 8009bd8:	d104      	bne.n	8009be4 <UART_SetConfig+0x1304>
 8009bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bde:	f04f 0400 	mov.w	r4, #0
 8009be2:	e037      	b.n	8009c54 <UART_SetConfig+0x1374>
 8009be4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009be8:	f04f 0400 	mov.w	r4, #0
 8009bec:	e032      	b.n	8009c54 <UART_SetConfig+0x1374>
 8009bee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009bf2:	f04f 0400 	mov.w	r4, #0
 8009bf6:	e02d      	b.n	8009c54 <UART_SetConfig+0x1374>
 8009bf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009bfc:	f04f 0400 	mov.w	r4, #0
 8009c00:	e028      	b.n	8009c54 <UART_SetConfig+0x1374>
 8009c02:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009c06:	f04f 0400 	mov.w	r4, #0
 8009c0a:	e023      	b.n	8009c54 <UART_SetConfig+0x1374>
 8009c0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009c10:	f04f 0400 	mov.w	r4, #0
 8009c14:	e01e      	b.n	8009c54 <UART_SetConfig+0x1374>
 8009c16:	4b7e      	ldr	r3, [pc, #504]	; (8009e10 <UART_SetConfig+0x1530>)
 8009c18:	f04f 0400 	mov.w	r4, #0
 8009c1c:	e01a      	b.n	8009c54 <UART_SetConfig+0x1374>
 8009c1e:	4b7d      	ldr	r3, [pc, #500]	; (8009e14 <UART_SetConfig+0x1534>)
 8009c20:	f04f 0400 	mov.w	r4, #0
 8009c24:	e016      	b.n	8009c54 <UART_SetConfig+0x1374>
 8009c26:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009c2a:	f04f 0400 	mov.w	r4, #0
 8009c2e:	e011      	b.n	8009c54 <UART_SetConfig+0x1374>
 8009c30:	4b79      	ldr	r3, [pc, #484]	; (8009e18 <UART_SetConfig+0x1538>)
 8009c32:	f04f 0400 	mov.w	r4, #0
 8009c36:	e00d      	b.n	8009c54 <UART_SetConfig+0x1374>
 8009c38:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009c3c:	f04f 0400 	mov.w	r4, #0
 8009c40:	e008      	b.n	8009c54 <UART_SetConfig+0x1374>
 8009c42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009c46:	f04f 0400 	mov.w	r4, #0
 8009c4a:	e003      	b.n	8009c54 <UART_SetConfig+0x1374>
 8009c4c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009c50:	f04f 0400 	mov.w	r4, #0
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	6852      	ldr	r2, [r2, #4]
 8009c58:	0852      	lsrs	r2, r2, #1
 8009c5a:	4611      	mov	r1, r2
 8009c5c:	f04f 0200 	mov.w	r2, #0
 8009c60:	eb13 0b01 	adds.w	fp, r3, r1
 8009c64:	eb44 0c02 	adc.w	ip, r4, r2
 8009c68:	4658      	mov	r0, fp
 8009c6a:	4661      	mov	r1, ip
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	f04f 0400 	mov.w	r4, #0
 8009c74:	461a      	mov	r2, r3
 8009c76:	4623      	mov	r3, r4
 8009c78:	f7f6 fb2e 	bl	80002d8 <__aeabi_uldivmod>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	460c      	mov	r4, r1
 8009c80:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009c82:	e003      	b.n	8009c8c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8009c84:	2301      	movs	r3, #1
 8009c86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8009c8a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c92:	d309      	bcc.n	8009ca8 <UART_SetConfig+0x13c8>
 8009c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c9a:	d205      	bcs.n	8009ca8 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ca2:	60da      	str	r2, [r3, #12]
 8009ca4:	f000 bf85 	b.w	800abb2 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cae:	f000 bf80 	b.w	800abb2 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	69db      	ldr	r3, [r3, #28]
 8009cb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cba:	f040 83da 	bne.w	800a472 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 8009cbe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009cc2:	2b40      	cmp	r3, #64	; 0x40
 8009cc4:	f200 83b3 	bhi.w	800a42e <UART_SetConfig+0x1b4e>
 8009cc8:	a201      	add	r2, pc, #4	; (adr r2, 8009cd0 <UART_SetConfig+0x13f0>)
 8009cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cce:	bf00      	nop
 8009cd0:	08009e1d 	.word	0x08009e1d
 8009cd4:	08009ed5 	.word	0x08009ed5
 8009cd8:	0800a42f 	.word	0x0800a42f
 8009cdc:	0800a42f 	.word	0x0800a42f
 8009ce0:	08009f8d 	.word	0x08009f8d
 8009ce4:	0800a42f 	.word	0x0800a42f
 8009ce8:	0800a42f 	.word	0x0800a42f
 8009cec:	0800a42f 	.word	0x0800a42f
 8009cf0:	0800a049 	.word	0x0800a049
 8009cf4:	0800a42f 	.word	0x0800a42f
 8009cf8:	0800a42f 	.word	0x0800a42f
 8009cfc:	0800a42f 	.word	0x0800a42f
 8009d00:	0800a42f 	.word	0x0800a42f
 8009d04:	0800a42f 	.word	0x0800a42f
 8009d08:	0800a42f 	.word	0x0800a42f
 8009d0c:	0800a42f 	.word	0x0800a42f
 8009d10:	0800a105 	.word	0x0800a105
 8009d14:	0800a42f 	.word	0x0800a42f
 8009d18:	0800a42f 	.word	0x0800a42f
 8009d1c:	0800a42f 	.word	0x0800a42f
 8009d20:	0800a42f 	.word	0x0800a42f
 8009d24:	0800a42f 	.word	0x0800a42f
 8009d28:	0800a42f 	.word	0x0800a42f
 8009d2c:	0800a42f 	.word	0x0800a42f
 8009d30:	0800a42f 	.word	0x0800a42f
 8009d34:	0800a42f 	.word	0x0800a42f
 8009d38:	0800a42f 	.word	0x0800a42f
 8009d3c:	0800a42f 	.word	0x0800a42f
 8009d40:	0800a42f 	.word	0x0800a42f
 8009d44:	0800a42f 	.word	0x0800a42f
 8009d48:	0800a42f 	.word	0x0800a42f
 8009d4c:	0800a42f 	.word	0x0800a42f
 8009d50:	0800a277 	.word	0x0800a277
 8009d54:	0800a42f 	.word	0x0800a42f
 8009d58:	0800a42f 	.word	0x0800a42f
 8009d5c:	0800a42f 	.word	0x0800a42f
 8009d60:	0800a42f 	.word	0x0800a42f
 8009d64:	0800a42f 	.word	0x0800a42f
 8009d68:	0800a42f 	.word	0x0800a42f
 8009d6c:	0800a42f 	.word	0x0800a42f
 8009d70:	0800a42f 	.word	0x0800a42f
 8009d74:	0800a42f 	.word	0x0800a42f
 8009d78:	0800a42f 	.word	0x0800a42f
 8009d7c:	0800a42f 	.word	0x0800a42f
 8009d80:	0800a42f 	.word	0x0800a42f
 8009d84:	0800a42f 	.word	0x0800a42f
 8009d88:	0800a42f 	.word	0x0800a42f
 8009d8c:	0800a42f 	.word	0x0800a42f
 8009d90:	0800a42f 	.word	0x0800a42f
 8009d94:	0800a42f 	.word	0x0800a42f
 8009d98:	0800a42f 	.word	0x0800a42f
 8009d9c:	0800a42f 	.word	0x0800a42f
 8009da0:	0800a42f 	.word	0x0800a42f
 8009da4:	0800a42f 	.word	0x0800a42f
 8009da8:	0800a42f 	.word	0x0800a42f
 8009dac:	0800a42f 	.word	0x0800a42f
 8009db0:	0800a42f 	.word	0x0800a42f
 8009db4:	0800a42f 	.word	0x0800a42f
 8009db8:	0800a42f 	.word	0x0800a42f
 8009dbc:	0800a42f 	.word	0x0800a42f
 8009dc0:	0800a42f 	.word	0x0800a42f
 8009dc4:	0800a42f 	.word	0x0800a42f
 8009dc8:	0800a42f 	.word	0x0800a42f
 8009dcc:	0800a42f 	.word	0x0800a42f
 8009dd0:	0800a36d 	.word	0x0800a36d
 8009dd4:	f3af 8000 	nop.w
 8009dd8:	05161500 	.word	0x05161500
 8009ddc:	00000000 	.word	0x00000000
 8009de0:	0a2c2a00 	.word	0x0a2c2a00
 8009de4:	00000000 	.word	0x00000000
 8009de8:	003d0900 	.word	0x003d0900
 8009dec:	3d090000 	.word	0x3d090000
 8009df0:	007a1200 	.word	0x007a1200
 8009df4:	00f42400 	.word	0x00f42400
 8009df8:	01e84800 	.word	0x01e84800
 8009dfc:	03d09000 	.word	0x03d09000
 8009e00:	061a8000 	.word	0x061a8000
 8009e04:	07a12000 	.word	0x07a12000
 8009e08:	0f424000 	.word	0x0f424000
 8009e0c:	1e848000 	.word	0x1e848000
 8009e10:	000aaa00 	.word	0x000aaa00
 8009e14:	000ccc00 	.word	0x000ccc00
 8009e18:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e1c:	f7fa fcb6 	bl	800478c <HAL_RCC_GetPCLK1Freq>
 8009e20:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d044      	beq.n	8009eb4 <UART_SetConfig+0x15d4>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d03e      	beq.n	8009eb0 <UART_SetConfig+0x15d0>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e36:	2b02      	cmp	r3, #2
 8009e38:	d038      	beq.n	8009eac <UART_SetConfig+0x15cc>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e3e:	2b03      	cmp	r3, #3
 8009e40:	d032      	beq.n	8009ea8 <UART_SetConfig+0x15c8>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e46:	2b04      	cmp	r3, #4
 8009e48:	d02c      	beq.n	8009ea4 <UART_SetConfig+0x15c4>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e4e:	2b05      	cmp	r3, #5
 8009e50:	d026      	beq.n	8009ea0 <UART_SetConfig+0x15c0>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e56:	2b06      	cmp	r3, #6
 8009e58:	d020      	beq.n	8009e9c <UART_SetConfig+0x15bc>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5e:	2b07      	cmp	r3, #7
 8009e60:	d01a      	beq.n	8009e98 <UART_SetConfig+0x15b8>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e66:	2b08      	cmp	r3, #8
 8009e68:	d014      	beq.n	8009e94 <UART_SetConfig+0x15b4>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e6e:	2b09      	cmp	r3, #9
 8009e70:	d00e      	beq.n	8009e90 <UART_SetConfig+0x15b0>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e76:	2b0a      	cmp	r3, #10
 8009e78:	d008      	beq.n	8009e8c <UART_SetConfig+0x15ac>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7e:	2b0b      	cmp	r3, #11
 8009e80:	d102      	bne.n	8009e88 <UART_SetConfig+0x15a8>
 8009e82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e86:	e016      	b.n	8009eb6 <UART_SetConfig+0x15d6>
 8009e88:	2301      	movs	r3, #1
 8009e8a:	e014      	b.n	8009eb6 <UART_SetConfig+0x15d6>
 8009e8c:	2380      	movs	r3, #128	; 0x80
 8009e8e:	e012      	b.n	8009eb6 <UART_SetConfig+0x15d6>
 8009e90:	2340      	movs	r3, #64	; 0x40
 8009e92:	e010      	b.n	8009eb6 <UART_SetConfig+0x15d6>
 8009e94:	2320      	movs	r3, #32
 8009e96:	e00e      	b.n	8009eb6 <UART_SetConfig+0x15d6>
 8009e98:	2310      	movs	r3, #16
 8009e9a:	e00c      	b.n	8009eb6 <UART_SetConfig+0x15d6>
 8009e9c:	230c      	movs	r3, #12
 8009e9e:	e00a      	b.n	8009eb6 <UART_SetConfig+0x15d6>
 8009ea0:	230a      	movs	r3, #10
 8009ea2:	e008      	b.n	8009eb6 <UART_SetConfig+0x15d6>
 8009ea4:	2308      	movs	r3, #8
 8009ea6:	e006      	b.n	8009eb6 <UART_SetConfig+0x15d6>
 8009ea8:	2306      	movs	r3, #6
 8009eaa:	e004      	b.n	8009eb6 <UART_SetConfig+0x15d6>
 8009eac:	2304      	movs	r3, #4
 8009eae:	e002      	b.n	8009eb6 <UART_SetConfig+0x15d6>
 8009eb0:	2302      	movs	r3, #2
 8009eb2:	e000      	b.n	8009eb6 <UART_SetConfig+0x15d6>
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ebc:	005a      	lsls	r2, r3, #1
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	085b      	lsrs	r3, r3, #1
 8009ec4:	441a      	add	r2, r3
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ece:	b29b      	uxth	r3, r3
 8009ed0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009ed2:	e2b0      	b.n	800a436 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ed4:	f7fa fc70 	bl	80047b8 <HAL_RCC_GetPCLK2Freq>
 8009ed8:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d044      	beq.n	8009f6c <UART_SetConfig+0x168c>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee6:	2b01      	cmp	r3, #1
 8009ee8:	d03e      	beq.n	8009f68 <UART_SetConfig+0x1688>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eee:	2b02      	cmp	r3, #2
 8009ef0:	d038      	beq.n	8009f64 <UART_SetConfig+0x1684>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef6:	2b03      	cmp	r3, #3
 8009ef8:	d032      	beq.n	8009f60 <UART_SetConfig+0x1680>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009efe:	2b04      	cmp	r3, #4
 8009f00:	d02c      	beq.n	8009f5c <UART_SetConfig+0x167c>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f06:	2b05      	cmp	r3, #5
 8009f08:	d026      	beq.n	8009f58 <UART_SetConfig+0x1678>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f0e:	2b06      	cmp	r3, #6
 8009f10:	d020      	beq.n	8009f54 <UART_SetConfig+0x1674>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f16:	2b07      	cmp	r3, #7
 8009f18:	d01a      	beq.n	8009f50 <UART_SetConfig+0x1670>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1e:	2b08      	cmp	r3, #8
 8009f20:	d014      	beq.n	8009f4c <UART_SetConfig+0x166c>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f26:	2b09      	cmp	r3, #9
 8009f28:	d00e      	beq.n	8009f48 <UART_SetConfig+0x1668>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f2e:	2b0a      	cmp	r3, #10
 8009f30:	d008      	beq.n	8009f44 <UART_SetConfig+0x1664>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f36:	2b0b      	cmp	r3, #11
 8009f38:	d102      	bne.n	8009f40 <UART_SetConfig+0x1660>
 8009f3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f3e:	e016      	b.n	8009f6e <UART_SetConfig+0x168e>
 8009f40:	2301      	movs	r3, #1
 8009f42:	e014      	b.n	8009f6e <UART_SetConfig+0x168e>
 8009f44:	2380      	movs	r3, #128	; 0x80
 8009f46:	e012      	b.n	8009f6e <UART_SetConfig+0x168e>
 8009f48:	2340      	movs	r3, #64	; 0x40
 8009f4a:	e010      	b.n	8009f6e <UART_SetConfig+0x168e>
 8009f4c:	2320      	movs	r3, #32
 8009f4e:	e00e      	b.n	8009f6e <UART_SetConfig+0x168e>
 8009f50:	2310      	movs	r3, #16
 8009f52:	e00c      	b.n	8009f6e <UART_SetConfig+0x168e>
 8009f54:	230c      	movs	r3, #12
 8009f56:	e00a      	b.n	8009f6e <UART_SetConfig+0x168e>
 8009f58:	230a      	movs	r3, #10
 8009f5a:	e008      	b.n	8009f6e <UART_SetConfig+0x168e>
 8009f5c:	2308      	movs	r3, #8
 8009f5e:	e006      	b.n	8009f6e <UART_SetConfig+0x168e>
 8009f60:	2306      	movs	r3, #6
 8009f62:	e004      	b.n	8009f6e <UART_SetConfig+0x168e>
 8009f64:	2304      	movs	r3, #4
 8009f66:	e002      	b.n	8009f6e <UART_SetConfig+0x168e>
 8009f68:	2302      	movs	r3, #2
 8009f6a:	e000      	b.n	8009f6e <UART_SetConfig+0x168e>
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f74:	005a      	lsls	r2, r3, #1
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	085b      	lsrs	r3, r3, #1
 8009f7c:	441a      	add	r2, r3
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009f8a:	e254      	b.n	800a436 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f8c:	f107 0318 	add.w	r3, r7, #24
 8009f90:	4618      	mov	r0, r3
 8009f92:	f7fb fd93 	bl	8005abc <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f96:	69fa      	ldr	r2, [r7, #28]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d044      	beq.n	800a02a <UART_SetConfig+0x174a>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d03e      	beq.n	800a026 <UART_SetConfig+0x1746>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fac:	2b02      	cmp	r3, #2
 8009fae:	d038      	beq.n	800a022 <UART_SetConfig+0x1742>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb4:	2b03      	cmp	r3, #3
 8009fb6:	d032      	beq.n	800a01e <UART_SetConfig+0x173e>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fbc:	2b04      	cmp	r3, #4
 8009fbe:	d02c      	beq.n	800a01a <UART_SetConfig+0x173a>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc4:	2b05      	cmp	r3, #5
 8009fc6:	d026      	beq.n	800a016 <UART_SetConfig+0x1736>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fcc:	2b06      	cmp	r3, #6
 8009fce:	d020      	beq.n	800a012 <UART_SetConfig+0x1732>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd4:	2b07      	cmp	r3, #7
 8009fd6:	d01a      	beq.n	800a00e <UART_SetConfig+0x172e>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fdc:	2b08      	cmp	r3, #8
 8009fde:	d014      	beq.n	800a00a <UART_SetConfig+0x172a>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe4:	2b09      	cmp	r3, #9
 8009fe6:	d00e      	beq.n	800a006 <UART_SetConfig+0x1726>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fec:	2b0a      	cmp	r3, #10
 8009fee:	d008      	beq.n	800a002 <UART_SetConfig+0x1722>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff4:	2b0b      	cmp	r3, #11
 8009ff6:	d102      	bne.n	8009ffe <UART_SetConfig+0x171e>
 8009ff8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ffc:	e016      	b.n	800a02c <UART_SetConfig+0x174c>
 8009ffe:	2301      	movs	r3, #1
 800a000:	e014      	b.n	800a02c <UART_SetConfig+0x174c>
 800a002:	2380      	movs	r3, #128	; 0x80
 800a004:	e012      	b.n	800a02c <UART_SetConfig+0x174c>
 800a006:	2340      	movs	r3, #64	; 0x40
 800a008:	e010      	b.n	800a02c <UART_SetConfig+0x174c>
 800a00a:	2320      	movs	r3, #32
 800a00c:	e00e      	b.n	800a02c <UART_SetConfig+0x174c>
 800a00e:	2310      	movs	r3, #16
 800a010:	e00c      	b.n	800a02c <UART_SetConfig+0x174c>
 800a012:	230c      	movs	r3, #12
 800a014:	e00a      	b.n	800a02c <UART_SetConfig+0x174c>
 800a016:	230a      	movs	r3, #10
 800a018:	e008      	b.n	800a02c <UART_SetConfig+0x174c>
 800a01a:	2308      	movs	r3, #8
 800a01c:	e006      	b.n	800a02c <UART_SetConfig+0x174c>
 800a01e:	2306      	movs	r3, #6
 800a020:	e004      	b.n	800a02c <UART_SetConfig+0x174c>
 800a022:	2304      	movs	r3, #4
 800a024:	e002      	b.n	800a02c <UART_SetConfig+0x174c>
 800a026:	2302      	movs	r3, #2
 800a028:	e000      	b.n	800a02c <UART_SetConfig+0x174c>
 800a02a:	2301      	movs	r3, #1
 800a02c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a030:	005a      	lsls	r2, r3, #1
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	085b      	lsrs	r3, r3, #1
 800a038:	441a      	add	r2, r3
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a042:	b29b      	uxth	r3, r3
 800a044:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a046:	e1f6      	b.n	800a436 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a048:	f107 030c 	add.w	r3, r7, #12
 800a04c:	4618      	mov	r0, r3
 800a04e:	f7fb fe81 	bl	8005d54 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a052:	693a      	ldr	r2, [r7, #16]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d044      	beq.n	800a0e6 <UART_SetConfig+0x1806>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a060:	2b01      	cmp	r3, #1
 800a062:	d03e      	beq.n	800a0e2 <UART_SetConfig+0x1802>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a068:	2b02      	cmp	r3, #2
 800a06a:	d038      	beq.n	800a0de <UART_SetConfig+0x17fe>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a070:	2b03      	cmp	r3, #3
 800a072:	d032      	beq.n	800a0da <UART_SetConfig+0x17fa>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a078:	2b04      	cmp	r3, #4
 800a07a:	d02c      	beq.n	800a0d6 <UART_SetConfig+0x17f6>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a080:	2b05      	cmp	r3, #5
 800a082:	d026      	beq.n	800a0d2 <UART_SetConfig+0x17f2>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a088:	2b06      	cmp	r3, #6
 800a08a:	d020      	beq.n	800a0ce <UART_SetConfig+0x17ee>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a090:	2b07      	cmp	r3, #7
 800a092:	d01a      	beq.n	800a0ca <UART_SetConfig+0x17ea>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a098:	2b08      	cmp	r3, #8
 800a09a:	d014      	beq.n	800a0c6 <UART_SetConfig+0x17e6>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a0:	2b09      	cmp	r3, #9
 800a0a2:	d00e      	beq.n	800a0c2 <UART_SetConfig+0x17e2>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a8:	2b0a      	cmp	r3, #10
 800a0aa:	d008      	beq.n	800a0be <UART_SetConfig+0x17de>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b0:	2b0b      	cmp	r3, #11
 800a0b2:	d102      	bne.n	800a0ba <UART_SetConfig+0x17da>
 800a0b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0b8:	e016      	b.n	800a0e8 <UART_SetConfig+0x1808>
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	e014      	b.n	800a0e8 <UART_SetConfig+0x1808>
 800a0be:	2380      	movs	r3, #128	; 0x80
 800a0c0:	e012      	b.n	800a0e8 <UART_SetConfig+0x1808>
 800a0c2:	2340      	movs	r3, #64	; 0x40
 800a0c4:	e010      	b.n	800a0e8 <UART_SetConfig+0x1808>
 800a0c6:	2320      	movs	r3, #32
 800a0c8:	e00e      	b.n	800a0e8 <UART_SetConfig+0x1808>
 800a0ca:	2310      	movs	r3, #16
 800a0cc:	e00c      	b.n	800a0e8 <UART_SetConfig+0x1808>
 800a0ce:	230c      	movs	r3, #12
 800a0d0:	e00a      	b.n	800a0e8 <UART_SetConfig+0x1808>
 800a0d2:	230a      	movs	r3, #10
 800a0d4:	e008      	b.n	800a0e8 <UART_SetConfig+0x1808>
 800a0d6:	2308      	movs	r3, #8
 800a0d8:	e006      	b.n	800a0e8 <UART_SetConfig+0x1808>
 800a0da:	2306      	movs	r3, #6
 800a0dc:	e004      	b.n	800a0e8 <UART_SetConfig+0x1808>
 800a0de:	2304      	movs	r3, #4
 800a0e0:	e002      	b.n	800a0e8 <UART_SetConfig+0x1808>
 800a0e2:	2302      	movs	r3, #2
 800a0e4:	e000      	b.n	800a0e8 <UART_SetConfig+0x1808>
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0ec:	005a      	lsls	r2, r3, #1
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	085b      	lsrs	r3, r3, #1
 800a0f4:	441a      	add	r2, r3
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a102:	e198      	b.n	800a436 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a104:	4b87      	ldr	r3, [pc, #540]	; (800a324 <UART_SetConfig+0x1a44>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f003 0320 	and.w	r3, r3, #32
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d05e      	beq.n	800a1ce <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a110:	4b84      	ldr	r3, [pc, #528]	; (800a324 <UART_SetConfig+0x1a44>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	08db      	lsrs	r3, r3, #3
 800a116:	f003 0303 	and.w	r3, r3, #3
 800a11a:	4a83      	ldr	r2, [pc, #524]	; (800a328 <UART_SetConfig+0x1a48>)
 800a11c:	40da      	lsrs	r2, r3
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a122:	2b00      	cmp	r3, #0
 800a124:	d044      	beq.n	800a1b0 <UART_SetConfig+0x18d0>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d03e      	beq.n	800a1ac <UART_SetConfig+0x18cc>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a132:	2b02      	cmp	r3, #2
 800a134:	d038      	beq.n	800a1a8 <UART_SetConfig+0x18c8>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a13a:	2b03      	cmp	r3, #3
 800a13c:	d032      	beq.n	800a1a4 <UART_SetConfig+0x18c4>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a142:	2b04      	cmp	r3, #4
 800a144:	d02c      	beq.n	800a1a0 <UART_SetConfig+0x18c0>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a14a:	2b05      	cmp	r3, #5
 800a14c:	d026      	beq.n	800a19c <UART_SetConfig+0x18bc>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a152:	2b06      	cmp	r3, #6
 800a154:	d020      	beq.n	800a198 <UART_SetConfig+0x18b8>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a15a:	2b07      	cmp	r3, #7
 800a15c:	d01a      	beq.n	800a194 <UART_SetConfig+0x18b4>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a162:	2b08      	cmp	r3, #8
 800a164:	d014      	beq.n	800a190 <UART_SetConfig+0x18b0>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a16a:	2b09      	cmp	r3, #9
 800a16c:	d00e      	beq.n	800a18c <UART_SetConfig+0x18ac>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a172:	2b0a      	cmp	r3, #10
 800a174:	d008      	beq.n	800a188 <UART_SetConfig+0x18a8>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a17a:	2b0b      	cmp	r3, #11
 800a17c:	d102      	bne.n	800a184 <UART_SetConfig+0x18a4>
 800a17e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a182:	e016      	b.n	800a1b2 <UART_SetConfig+0x18d2>
 800a184:	2301      	movs	r3, #1
 800a186:	e014      	b.n	800a1b2 <UART_SetConfig+0x18d2>
 800a188:	2380      	movs	r3, #128	; 0x80
 800a18a:	e012      	b.n	800a1b2 <UART_SetConfig+0x18d2>
 800a18c:	2340      	movs	r3, #64	; 0x40
 800a18e:	e010      	b.n	800a1b2 <UART_SetConfig+0x18d2>
 800a190:	2320      	movs	r3, #32
 800a192:	e00e      	b.n	800a1b2 <UART_SetConfig+0x18d2>
 800a194:	2310      	movs	r3, #16
 800a196:	e00c      	b.n	800a1b2 <UART_SetConfig+0x18d2>
 800a198:	230c      	movs	r3, #12
 800a19a:	e00a      	b.n	800a1b2 <UART_SetConfig+0x18d2>
 800a19c:	230a      	movs	r3, #10
 800a19e:	e008      	b.n	800a1b2 <UART_SetConfig+0x18d2>
 800a1a0:	2308      	movs	r3, #8
 800a1a2:	e006      	b.n	800a1b2 <UART_SetConfig+0x18d2>
 800a1a4:	2306      	movs	r3, #6
 800a1a6:	e004      	b.n	800a1b2 <UART_SetConfig+0x18d2>
 800a1a8:	2304      	movs	r3, #4
 800a1aa:	e002      	b.n	800a1b2 <UART_SetConfig+0x18d2>
 800a1ac:	2302      	movs	r3, #2
 800a1ae:	e000      	b.n	800a1b2 <UART_SetConfig+0x18d2>
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1b6:	005a      	lsls	r2, r3, #1
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	085b      	lsrs	r3, r3, #1
 800a1be:	441a      	add	r2, r3
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800a1cc:	e133      	b.n	800a436 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d043      	beq.n	800a25e <UART_SetConfig+0x197e>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d03d      	beq.n	800a25a <UART_SetConfig+0x197a>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e2:	2b02      	cmp	r3, #2
 800a1e4:	d037      	beq.n	800a256 <UART_SetConfig+0x1976>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ea:	2b03      	cmp	r3, #3
 800a1ec:	d031      	beq.n	800a252 <UART_SetConfig+0x1972>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f2:	2b04      	cmp	r3, #4
 800a1f4:	d02b      	beq.n	800a24e <UART_SetConfig+0x196e>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1fa:	2b05      	cmp	r3, #5
 800a1fc:	d025      	beq.n	800a24a <UART_SetConfig+0x196a>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a202:	2b06      	cmp	r3, #6
 800a204:	d01f      	beq.n	800a246 <UART_SetConfig+0x1966>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a20a:	2b07      	cmp	r3, #7
 800a20c:	d019      	beq.n	800a242 <UART_SetConfig+0x1962>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a212:	2b08      	cmp	r3, #8
 800a214:	d013      	beq.n	800a23e <UART_SetConfig+0x195e>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21a:	2b09      	cmp	r3, #9
 800a21c:	d00d      	beq.n	800a23a <UART_SetConfig+0x195a>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a222:	2b0a      	cmp	r3, #10
 800a224:	d007      	beq.n	800a236 <UART_SetConfig+0x1956>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a22a:	2b0b      	cmp	r3, #11
 800a22c:	d101      	bne.n	800a232 <UART_SetConfig+0x1952>
 800a22e:	4b3f      	ldr	r3, [pc, #252]	; (800a32c <UART_SetConfig+0x1a4c>)
 800a230:	e016      	b.n	800a260 <UART_SetConfig+0x1980>
 800a232:	4b3f      	ldr	r3, [pc, #252]	; (800a330 <UART_SetConfig+0x1a50>)
 800a234:	e014      	b.n	800a260 <UART_SetConfig+0x1980>
 800a236:	4b3f      	ldr	r3, [pc, #252]	; (800a334 <UART_SetConfig+0x1a54>)
 800a238:	e012      	b.n	800a260 <UART_SetConfig+0x1980>
 800a23a:	4b3f      	ldr	r3, [pc, #252]	; (800a338 <UART_SetConfig+0x1a58>)
 800a23c:	e010      	b.n	800a260 <UART_SetConfig+0x1980>
 800a23e:	4b3f      	ldr	r3, [pc, #252]	; (800a33c <UART_SetConfig+0x1a5c>)
 800a240:	e00e      	b.n	800a260 <UART_SetConfig+0x1980>
 800a242:	4b3f      	ldr	r3, [pc, #252]	; (800a340 <UART_SetConfig+0x1a60>)
 800a244:	e00c      	b.n	800a260 <UART_SetConfig+0x1980>
 800a246:	4b3f      	ldr	r3, [pc, #252]	; (800a344 <UART_SetConfig+0x1a64>)
 800a248:	e00a      	b.n	800a260 <UART_SetConfig+0x1980>
 800a24a:	4b3f      	ldr	r3, [pc, #252]	; (800a348 <UART_SetConfig+0x1a68>)
 800a24c:	e008      	b.n	800a260 <UART_SetConfig+0x1980>
 800a24e:	4b3f      	ldr	r3, [pc, #252]	; (800a34c <UART_SetConfig+0x1a6c>)
 800a250:	e006      	b.n	800a260 <UART_SetConfig+0x1980>
 800a252:	4b3f      	ldr	r3, [pc, #252]	; (800a350 <UART_SetConfig+0x1a70>)
 800a254:	e004      	b.n	800a260 <UART_SetConfig+0x1980>
 800a256:	4b3f      	ldr	r3, [pc, #252]	; (800a354 <UART_SetConfig+0x1a74>)
 800a258:	e002      	b.n	800a260 <UART_SetConfig+0x1980>
 800a25a:	4b33      	ldr	r3, [pc, #204]	; (800a328 <UART_SetConfig+0x1a48>)
 800a25c:	e000      	b.n	800a260 <UART_SetConfig+0x1980>
 800a25e:	4b34      	ldr	r3, [pc, #208]	; (800a330 <UART_SetConfig+0x1a50>)
 800a260:	687a      	ldr	r2, [r7, #4]
 800a262:	6852      	ldr	r2, [r2, #4]
 800a264:	0852      	lsrs	r2, r2, #1
 800a266:	441a      	add	r2, r3
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a270:	b29b      	uxth	r3, r3
 800a272:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a274:	e0df      	b.n	800a436 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d045      	beq.n	800a30a <UART_SetConfig+0x1a2a>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a282:	2b01      	cmp	r3, #1
 800a284:	d03f      	beq.n	800a306 <UART_SetConfig+0x1a26>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28a:	2b02      	cmp	r3, #2
 800a28c:	d039      	beq.n	800a302 <UART_SetConfig+0x1a22>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a292:	2b03      	cmp	r3, #3
 800a294:	d033      	beq.n	800a2fe <UART_SetConfig+0x1a1e>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29a:	2b04      	cmp	r3, #4
 800a29c:	d02d      	beq.n	800a2fa <UART_SetConfig+0x1a1a>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a2:	2b05      	cmp	r3, #5
 800a2a4:	d027      	beq.n	800a2f6 <UART_SetConfig+0x1a16>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2aa:	2b06      	cmp	r3, #6
 800a2ac:	d021      	beq.n	800a2f2 <UART_SetConfig+0x1a12>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b2:	2b07      	cmp	r3, #7
 800a2b4:	d01b      	beq.n	800a2ee <UART_SetConfig+0x1a0e>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ba:	2b08      	cmp	r3, #8
 800a2bc:	d015      	beq.n	800a2ea <UART_SetConfig+0x1a0a>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c2:	2b09      	cmp	r3, #9
 800a2c4:	d00f      	beq.n	800a2e6 <UART_SetConfig+0x1a06>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ca:	2b0a      	cmp	r3, #10
 800a2cc:	d008      	beq.n	800a2e0 <UART_SetConfig+0x1a00>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d2:	2b0b      	cmp	r3, #11
 800a2d4:	d102      	bne.n	800a2dc <UART_SetConfig+0x19fc>
 800a2d6:	f647 2312 	movw	r3, #31250	; 0x7a12
 800a2da:	e017      	b.n	800a30c <UART_SetConfig+0x1a2c>
 800a2dc:	4b18      	ldr	r3, [pc, #96]	; (800a340 <UART_SetConfig+0x1a60>)
 800a2de:	e015      	b.n	800a30c <UART_SetConfig+0x1a2c>
 800a2e0:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a2e4:	e012      	b.n	800a30c <UART_SetConfig+0x1a2c>
 800a2e6:	4b1c      	ldr	r3, [pc, #112]	; (800a358 <UART_SetConfig+0x1a78>)
 800a2e8:	e010      	b.n	800a30c <UART_SetConfig+0x1a2c>
 800a2ea:	4b1c      	ldr	r3, [pc, #112]	; (800a35c <UART_SetConfig+0x1a7c>)
 800a2ec:	e00e      	b.n	800a30c <UART_SetConfig+0x1a2c>
 800a2ee:	4b0f      	ldr	r3, [pc, #60]	; (800a32c <UART_SetConfig+0x1a4c>)
 800a2f0:	e00c      	b.n	800a30c <UART_SetConfig+0x1a2c>
 800a2f2:	4b1b      	ldr	r3, [pc, #108]	; (800a360 <UART_SetConfig+0x1a80>)
 800a2f4:	e00a      	b.n	800a30c <UART_SetConfig+0x1a2c>
 800a2f6:	4b1b      	ldr	r3, [pc, #108]	; (800a364 <UART_SetConfig+0x1a84>)
 800a2f8:	e008      	b.n	800a30c <UART_SetConfig+0x1a2c>
 800a2fa:	4b0e      	ldr	r3, [pc, #56]	; (800a334 <UART_SetConfig+0x1a54>)
 800a2fc:	e006      	b.n	800a30c <UART_SetConfig+0x1a2c>
 800a2fe:	4b1a      	ldr	r3, [pc, #104]	; (800a368 <UART_SetConfig+0x1a88>)
 800a300:	e004      	b.n	800a30c <UART_SetConfig+0x1a2c>
 800a302:	4b0d      	ldr	r3, [pc, #52]	; (800a338 <UART_SetConfig+0x1a58>)
 800a304:	e002      	b.n	800a30c <UART_SetConfig+0x1a2c>
 800a306:	4b0d      	ldr	r3, [pc, #52]	; (800a33c <UART_SetConfig+0x1a5c>)
 800a308:	e000      	b.n	800a30c <UART_SetConfig+0x1a2c>
 800a30a:	4b0d      	ldr	r3, [pc, #52]	; (800a340 <UART_SetConfig+0x1a60>)
 800a30c:	687a      	ldr	r2, [r7, #4]
 800a30e:	6852      	ldr	r2, [r2, #4]
 800a310:	0852      	lsrs	r2, r2, #1
 800a312:	441a      	add	r2, r3
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	fbb2 f3f3 	udiv	r3, r2, r3
 800a31c:	b29b      	uxth	r3, r3
 800a31e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a320:	e089      	b.n	800a436 <UART_SetConfig+0x1b56>
 800a322:	bf00      	nop
 800a324:	58024400 	.word	0x58024400
 800a328:	03d09000 	.word	0x03d09000
 800a32c:	0007a120 	.word	0x0007a120
 800a330:	07a12000 	.word	0x07a12000
 800a334:	000f4240 	.word	0x000f4240
 800a338:	001e8480 	.word	0x001e8480
 800a33c:	003d0900 	.word	0x003d0900
 800a340:	007a1200 	.word	0x007a1200
 800a344:	00a2c2aa 	.word	0x00a2c2aa
 800a348:	00c35000 	.word	0x00c35000
 800a34c:	00f42400 	.word	0x00f42400
 800a350:	01458554 	.word	0x01458554
 800a354:	01e84800 	.word	0x01e84800
 800a358:	0001e848 	.word	0x0001e848
 800a35c:	0003d090 	.word	0x0003d090
 800a360:	000a2c2a 	.word	0x000a2c2a
 800a364:	000c3500 	.word	0x000c3500
 800a368:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a370:	2b00      	cmp	r3, #0
 800a372:	d04f      	beq.n	800a414 <UART_SetConfig+0x1b34>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d048      	beq.n	800a40e <UART_SetConfig+0x1b2e>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a380:	2b02      	cmp	r3, #2
 800a382:	d041      	beq.n	800a408 <UART_SetConfig+0x1b28>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a388:	2b03      	cmp	r3, #3
 800a38a:	d03a      	beq.n	800a402 <UART_SetConfig+0x1b22>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a390:	2b04      	cmp	r3, #4
 800a392:	d033      	beq.n	800a3fc <UART_SetConfig+0x1b1c>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a398:	2b05      	cmp	r3, #5
 800a39a:	d02c      	beq.n	800a3f6 <UART_SetConfig+0x1b16>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a0:	2b06      	cmp	r3, #6
 800a3a2:	d025      	beq.n	800a3f0 <UART_SetConfig+0x1b10>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a8:	2b07      	cmp	r3, #7
 800a3aa:	d01e      	beq.n	800a3ea <UART_SetConfig+0x1b0a>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b0:	2b08      	cmp	r3, #8
 800a3b2:	d017      	beq.n	800a3e4 <UART_SetConfig+0x1b04>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b8:	2b09      	cmp	r3, #9
 800a3ba:	d010      	beq.n	800a3de <UART_SetConfig+0x1afe>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c0:	2b0a      	cmp	r3, #10
 800a3c2:	d009      	beq.n	800a3d8 <UART_SetConfig+0x1af8>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c8:	2b0b      	cmp	r3, #11
 800a3ca:	d102      	bne.n	800a3d2 <UART_SetConfig+0x1af2>
 800a3cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a3d0:	e022      	b.n	800a418 <UART_SetConfig+0x1b38>
 800a3d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a3d6:	e01f      	b.n	800a418 <UART_SetConfig+0x1b38>
 800a3d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3dc:	e01c      	b.n	800a418 <UART_SetConfig+0x1b38>
 800a3de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3e2:	e019      	b.n	800a418 <UART_SetConfig+0x1b38>
 800a3e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a3e8:	e016      	b.n	800a418 <UART_SetConfig+0x1b38>
 800a3ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a3ee:	e013      	b.n	800a418 <UART_SetConfig+0x1b38>
 800a3f0:	f241 5354 	movw	r3, #5460	; 0x1554
 800a3f4:	e010      	b.n	800a418 <UART_SetConfig+0x1b38>
 800a3f6:	f641 1398 	movw	r3, #6552	; 0x1998
 800a3fa:	e00d      	b.n	800a418 <UART_SetConfig+0x1b38>
 800a3fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a400:	e00a      	b.n	800a418 <UART_SetConfig+0x1b38>
 800a402:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800a406:	e007      	b.n	800a418 <UART_SetConfig+0x1b38>
 800a408:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a40c:	e004      	b.n	800a418 <UART_SetConfig+0x1b38>
 800a40e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a412:	e001      	b.n	800a418 <UART_SetConfig+0x1b38>
 800a414:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	6852      	ldr	r2, [r2, #4]
 800a41c:	0852      	lsrs	r2, r2, #1
 800a41e:	441a      	add	r2, r3
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	fbb2 f3f3 	udiv	r3, r2, r3
 800a428:	b29b      	uxth	r3, r3
 800a42a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a42c:	e003      	b.n	800a436 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800a42e:	2301      	movs	r3, #1
 800a430:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800a434:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a438:	2b0f      	cmp	r3, #15
 800a43a:	d916      	bls.n	800a46a <UART_SetConfig+0x1b8a>
 800a43c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a43e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a442:	d212      	bcs.n	800a46a <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a446:	b29b      	uxth	r3, r3
 800a448:	f023 030f 	bic.w	r3, r3, #15
 800a44c:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a44e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a450:	085b      	lsrs	r3, r3, #1
 800a452:	b29b      	uxth	r3, r3
 800a454:	f003 0307 	and.w	r3, r3, #7
 800a458:	b29a      	uxth	r2, r3
 800a45a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a45c:	4313      	orrs	r3, r2
 800a45e:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a466:	60da      	str	r2, [r3, #12]
 800a468:	e3a3      	b.n	800abb2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800a46a:	2301      	movs	r3, #1
 800a46c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a470:	e39f      	b.n	800abb2 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800a472:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a476:	2b40      	cmp	r3, #64	; 0x40
 800a478:	f200 8388 	bhi.w	800ab8c <UART_SetConfig+0x22ac>
 800a47c:	a201      	add	r2, pc, #4	; (adr r2, 800a484 <UART_SetConfig+0x1ba4>)
 800a47e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a482:	bf00      	nop
 800a484:	0800a589 	.word	0x0800a589
 800a488:	0800a63f 	.word	0x0800a63f
 800a48c:	0800ab8d 	.word	0x0800ab8d
 800a490:	0800ab8d 	.word	0x0800ab8d
 800a494:	0800a6f5 	.word	0x0800a6f5
 800a498:	0800ab8d 	.word	0x0800ab8d
 800a49c:	0800ab8d 	.word	0x0800ab8d
 800a4a0:	0800ab8d 	.word	0x0800ab8d
 800a4a4:	0800a7af 	.word	0x0800a7af
 800a4a8:	0800ab8d 	.word	0x0800ab8d
 800a4ac:	0800ab8d 	.word	0x0800ab8d
 800a4b0:	0800ab8d 	.word	0x0800ab8d
 800a4b4:	0800ab8d 	.word	0x0800ab8d
 800a4b8:	0800ab8d 	.word	0x0800ab8d
 800a4bc:	0800ab8d 	.word	0x0800ab8d
 800a4c0:	0800ab8d 	.word	0x0800ab8d
 800a4c4:	0800a869 	.word	0x0800a869
 800a4c8:	0800ab8d 	.word	0x0800ab8d
 800a4cc:	0800ab8d 	.word	0x0800ab8d
 800a4d0:	0800ab8d 	.word	0x0800ab8d
 800a4d4:	0800ab8d 	.word	0x0800ab8d
 800a4d8:	0800ab8d 	.word	0x0800ab8d
 800a4dc:	0800ab8d 	.word	0x0800ab8d
 800a4e0:	0800ab8d 	.word	0x0800ab8d
 800a4e4:	0800ab8d 	.word	0x0800ab8d
 800a4e8:	0800ab8d 	.word	0x0800ab8d
 800a4ec:	0800ab8d 	.word	0x0800ab8d
 800a4f0:	0800ab8d 	.word	0x0800ab8d
 800a4f4:	0800ab8d 	.word	0x0800ab8d
 800a4f8:	0800ab8d 	.word	0x0800ab8d
 800a4fc:	0800ab8d 	.word	0x0800ab8d
 800a500:	0800ab8d 	.word	0x0800ab8d
 800a504:	0800a9d9 	.word	0x0800a9d9
 800a508:	0800ab8d 	.word	0x0800ab8d
 800a50c:	0800ab8d 	.word	0x0800ab8d
 800a510:	0800ab8d 	.word	0x0800ab8d
 800a514:	0800ab8d 	.word	0x0800ab8d
 800a518:	0800ab8d 	.word	0x0800ab8d
 800a51c:	0800ab8d 	.word	0x0800ab8d
 800a520:	0800ab8d 	.word	0x0800ab8d
 800a524:	0800ab8d 	.word	0x0800ab8d
 800a528:	0800ab8d 	.word	0x0800ab8d
 800a52c:	0800ab8d 	.word	0x0800ab8d
 800a530:	0800ab8d 	.word	0x0800ab8d
 800a534:	0800ab8d 	.word	0x0800ab8d
 800a538:	0800ab8d 	.word	0x0800ab8d
 800a53c:	0800ab8d 	.word	0x0800ab8d
 800a540:	0800ab8d 	.word	0x0800ab8d
 800a544:	0800ab8d 	.word	0x0800ab8d
 800a548:	0800ab8d 	.word	0x0800ab8d
 800a54c:	0800ab8d 	.word	0x0800ab8d
 800a550:	0800ab8d 	.word	0x0800ab8d
 800a554:	0800ab8d 	.word	0x0800ab8d
 800a558:	0800ab8d 	.word	0x0800ab8d
 800a55c:	0800ab8d 	.word	0x0800ab8d
 800a560:	0800ab8d 	.word	0x0800ab8d
 800a564:	0800ab8d 	.word	0x0800ab8d
 800a568:	0800ab8d 	.word	0x0800ab8d
 800a56c:	0800ab8d 	.word	0x0800ab8d
 800a570:	0800ab8d 	.word	0x0800ab8d
 800a574:	0800ab8d 	.word	0x0800ab8d
 800a578:	0800ab8d 	.word	0x0800ab8d
 800a57c:	0800ab8d 	.word	0x0800ab8d
 800a580:	0800ab8d 	.word	0x0800ab8d
 800a584:	0800aacd 	.word	0x0800aacd
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a588:	f7fa f900 	bl	800478c <HAL_RCC_GetPCLK1Freq>
 800a58c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a592:	2b00      	cmp	r3, #0
 800a594:	d044      	beq.n	800a620 <UART_SetConfig+0x1d40>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d03e      	beq.n	800a61c <UART_SetConfig+0x1d3c>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a2:	2b02      	cmp	r3, #2
 800a5a4:	d038      	beq.n	800a618 <UART_SetConfig+0x1d38>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5aa:	2b03      	cmp	r3, #3
 800a5ac:	d032      	beq.n	800a614 <UART_SetConfig+0x1d34>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b2:	2b04      	cmp	r3, #4
 800a5b4:	d02c      	beq.n	800a610 <UART_SetConfig+0x1d30>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ba:	2b05      	cmp	r3, #5
 800a5bc:	d026      	beq.n	800a60c <UART_SetConfig+0x1d2c>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c2:	2b06      	cmp	r3, #6
 800a5c4:	d020      	beq.n	800a608 <UART_SetConfig+0x1d28>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ca:	2b07      	cmp	r3, #7
 800a5cc:	d01a      	beq.n	800a604 <UART_SetConfig+0x1d24>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d2:	2b08      	cmp	r3, #8
 800a5d4:	d014      	beq.n	800a600 <UART_SetConfig+0x1d20>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5da:	2b09      	cmp	r3, #9
 800a5dc:	d00e      	beq.n	800a5fc <UART_SetConfig+0x1d1c>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e2:	2b0a      	cmp	r3, #10
 800a5e4:	d008      	beq.n	800a5f8 <UART_SetConfig+0x1d18>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ea:	2b0b      	cmp	r3, #11
 800a5ec:	d102      	bne.n	800a5f4 <UART_SetConfig+0x1d14>
 800a5ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a5f2:	e016      	b.n	800a622 <UART_SetConfig+0x1d42>
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	e014      	b.n	800a622 <UART_SetConfig+0x1d42>
 800a5f8:	2380      	movs	r3, #128	; 0x80
 800a5fa:	e012      	b.n	800a622 <UART_SetConfig+0x1d42>
 800a5fc:	2340      	movs	r3, #64	; 0x40
 800a5fe:	e010      	b.n	800a622 <UART_SetConfig+0x1d42>
 800a600:	2320      	movs	r3, #32
 800a602:	e00e      	b.n	800a622 <UART_SetConfig+0x1d42>
 800a604:	2310      	movs	r3, #16
 800a606:	e00c      	b.n	800a622 <UART_SetConfig+0x1d42>
 800a608:	230c      	movs	r3, #12
 800a60a:	e00a      	b.n	800a622 <UART_SetConfig+0x1d42>
 800a60c:	230a      	movs	r3, #10
 800a60e:	e008      	b.n	800a622 <UART_SetConfig+0x1d42>
 800a610:	2308      	movs	r3, #8
 800a612:	e006      	b.n	800a622 <UART_SetConfig+0x1d42>
 800a614:	2306      	movs	r3, #6
 800a616:	e004      	b.n	800a622 <UART_SetConfig+0x1d42>
 800a618:	2304      	movs	r3, #4
 800a61a:	e002      	b.n	800a622 <UART_SetConfig+0x1d42>
 800a61c:	2302      	movs	r3, #2
 800a61e:	e000      	b.n	800a622 <UART_SetConfig+0x1d42>
 800a620:	2301      	movs	r3, #1
 800a622:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a624:	fbb2 f2f3 	udiv	r2, r2, r3
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	085b      	lsrs	r3, r3, #1
 800a62e:	441a      	add	r2, r3
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	fbb2 f3f3 	udiv	r3, r2, r3
 800a638:	b29b      	uxth	r3, r3
 800a63a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a63c:	e2aa      	b.n	800ab94 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a63e:	f7fa f8bb 	bl	80047b8 <HAL_RCC_GetPCLK2Freq>
 800a642:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d044      	beq.n	800a6d6 <UART_SetConfig+0x1df6>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a650:	2b01      	cmp	r3, #1
 800a652:	d03e      	beq.n	800a6d2 <UART_SetConfig+0x1df2>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a658:	2b02      	cmp	r3, #2
 800a65a:	d038      	beq.n	800a6ce <UART_SetConfig+0x1dee>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a660:	2b03      	cmp	r3, #3
 800a662:	d032      	beq.n	800a6ca <UART_SetConfig+0x1dea>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a668:	2b04      	cmp	r3, #4
 800a66a:	d02c      	beq.n	800a6c6 <UART_SetConfig+0x1de6>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a670:	2b05      	cmp	r3, #5
 800a672:	d026      	beq.n	800a6c2 <UART_SetConfig+0x1de2>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a678:	2b06      	cmp	r3, #6
 800a67a:	d020      	beq.n	800a6be <UART_SetConfig+0x1dde>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a680:	2b07      	cmp	r3, #7
 800a682:	d01a      	beq.n	800a6ba <UART_SetConfig+0x1dda>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a688:	2b08      	cmp	r3, #8
 800a68a:	d014      	beq.n	800a6b6 <UART_SetConfig+0x1dd6>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a690:	2b09      	cmp	r3, #9
 800a692:	d00e      	beq.n	800a6b2 <UART_SetConfig+0x1dd2>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a698:	2b0a      	cmp	r3, #10
 800a69a:	d008      	beq.n	800a6ae <UART_SetConfig+0x1dce>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a0:	2b0b      	cmp	r3, #11
 800a6a2:	d102      	bne.n	800a6aa <UART_SetConfig+0x1dca>
 800a6a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6a8:	e016      	b.n	800a6d8 <UART_SetConfig+0x1df8>
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	e014      	b.n	800a6d8 <UART_SetConfig+0x1df8>
 800a6ae:	2380      	movs	r3, #128	; 0x80
 800a6b0:	e012      	b.n	800a6d8 <UART_SetConfig+0x1df8>
 800a6b2:	2340      	movs	r3, #64	; 0x40
 800a6b4:	e010      	b.n	800a6d8 <UART_SetConfig+0x1df8>
 800a6b6:	2320      	movs	r3, #32
 800a6b8:	e00e      	b.n	800a6d8 <UART_SetConfig+0x1df8>
 800a6ba:	2310      	movs	r3, #16
 800a6bc:	e00c      	b.n	800a6d8 <UART_SetConfig+0x1df8>
 800a6be:	230c      	movs	r3, #12
 800a6c0:	e00a      	b.n	800a6d8 <UART_SetConfig+0x1df8>
 800a6c2:	230a      	movs	r3, #10
 800a6c4:	e008      	b.n	800a6d8 <UART_SetConfig+0x1df8>
 800a6c6:	2308      	movs	r3, #8
 800a6c8:	e006      	b.n	800a6d8 <UART_SetConfig+0x1df8>
 800a6ca:	2306      	movs	r3, #6
 800a6cc:	e004      	b.n	800a6d8 <UART_SetConfig+0x1df8>
 800a6ce:	2304      	movs	r3, #4
 800a6d0:	e002      	b.n	800a6d8 <UART_SetConfig+0x1df8>
 800a6d2:	2302      	movs	r3, #2
 800a6d4:	e000      	b.n	800a6d8 <UART_SetConfig+0x1df8>
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6da:	fbb2 f2f3 	udiv	r2, r2, r3
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	085b      	lsrs	r3, r3, #1
 800a6e4:	441a      	add	r2, r3
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	685b      	ldr	r3, [r3, #4]
 800a6ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6ee:	b29b      	uxth	r3, r3
 800a6f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a6f2:	e24f      	b.n	800ab94 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6f4:	f107 0318 	add.w	r3, r7, #24
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f7fb f9df 	bl	8005abc <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a6fe:	69fa      	ldr	r2, [r7, #28]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a704:	2b00      	cmp	r3, #0
 800a706:	d044      	beq.n	800a792 <UART_SetConfig+0x1eb2>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d03e      	beq.n	800a78e <UART_SetConfig+0x1eae>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a714:	2b02      	cmp	r3, #2
 800a716:	d038      	beq.n	800a78a <UART_SetConfig+0x1eaa>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a71c:	2b03      	cmp	r3, #3
 800a71e:	d032      	beq.n	800a786 <UART_SetConfig+0x1ea6>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a724:	2b04      	cmp	r3, #4
 800a726:	d02c      	beq.n	800a782 <UART_SetConfig+0x1ea2>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a72c:	2b05      	cmp	r3, #5
 800a72e:	d026      	beq.n	800a77e <UART_SetConfig+0x1e9e>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a734:	2b06      	cmp	r3, #6
 800a736:	d020      	beq.n	800a77a <UART_SetConfig+0x1e9a>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a73c:	2b07      	cmp	r3, #7
 800a73e:	d01a      	beq.n	800a776 <UART_SetConfig+0x1e96>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a744:	2b08      	cmp	r3, #8
 800a746:	d014      	beq.n	800a772 <UART_SetConfig+0x1e92>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74c:	2b09      	cmp	r3, #9
 800a74e:	d00e      	beq.n	800a76e <UART_SetConfig+0x1e8e>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a754:	2b0a      	cmp	r3, #10
 800a756:	d008      	beq.n	800a76a <UART_SetConfig+0x1e8a>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75c:	2b0b      	cmp	r3, #11
 800a75e:	d102      	bne.n	800a766 <UART_SetConfig+0x1e86>
 800a760:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a764:	e016      	b.n	800a794 <UART_SetConfig+0x1eb4>
 800a766:	2301      	movs	r3, #1
 800a768:	e014      	b.n	800a794 <UART_SetConfig+0x1eb4>
 800a76a:	2380      	movs	r3, #128	; 0x80
 800a76c:	e012      	b.n	800a794 <UART_SetConfig+0x1eb4>
 800a76e:	2340      	movs	r3, #64	; 0x40
 800a770:	e010      	b.n	800a794 <UART_SetConfig+0x1eb4>
 800a772:	2320      	movs	r3, #32
 800a774:	e00e      	b.n	800a794 <UART_SetConfig+0x1eb4>
 800a776:	2310      	movs	r3, #16
 800a778:	e00c      	b.n	800a794 <UART_SetConfig+0x1eb4>
 800a77a:	230c      	movs	r3, #12
 800a77c:	e00a      	b.n	800a794 <UART_SetConfig+0x1eb4>
 800a77e:	230a      	movs	r3, #10
 800a780:	e008      	b.n	800a794 <UART_SetConfig+0x1eb4>
 800a782:	2308      	movs	r3, #8
 800a784:	e006      	b.n	800a794 <UART_SetConfig+0x1eb4>
 800a786:	2306      	movs	r3, #6
 800a788:	e004      	b.n	800a794 <UART_SetConfig+0x1eb4>
 800a78a:	2304      	movs	r3, #4
 800a78c:	e002      	b.n	800a794 <UART_SetConfig+0x1eb4>
 800a78e:	2302      	movs	r3, #2
 800a790:	e000      	b.n	800a794 <UART_SetConfig+0x1eb4>
 800a792:	2301      	movs	r3, #1
 800a794:	fbb2 f2f3 	udiv	r2, r2, r3
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	085b      	lsrs	r3, r3, #1
 800a79e:	441a      	add	r2, r3
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a7ac:	e1f2      	b.n	800ab94 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7ae:	f107 030c 	add.w	r3, r7, #12
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7fb face 	bl	8005d54 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7b8:	693a      	ldr	r2, [r7, #16]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d044      	beq.n	800a84c <UART_SetConfig+0x1f6c>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c6:	2b01      	cmp	r3, #1
 800a7c8:	d03e      	beq.n	800a848 <UART_SetConfig+0x1f68>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ce:	2b02      	cmp	r3, #2
 800a7d0:	d038      	beq.n	800a844 <UART_SetConfig+0x1f64>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d6:	2b03      	cmp	r3, #3
 800a7d8:	d032      	beq.n	800a840 <UART_SetConfig+0x1f60>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7de:	2b04      	cmp	r3, #4
 800a7e0:	d02c      	beq.n	800a83c <UART_SetConfig+0x1f5c>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e6:	2b05      	cmp	r3, #5
 800a7e8:	d026      	beq.n	800a838 <UART_SetConfig+0x1f58>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ee:	2b06      	cmp	r3, #6
 800a7f0:	d020      	beq.n	800a834 <UART_SetConfig+0x1f54>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f6:	2b07      	cmp	r3, #7
 800a7f8:	d01a      	beq.n	800a830 <UART_SetConfig+0x1f50>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7fe:	2b08      	cmp	r3, #8
 800a800:	d014      	beq.n	800a82c <UART_SetConfig+0x1f4c>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a806:	2b09      	cmp	r3, #9
 800a808:	d00e      	beq.n	800a828 <UART_SetConfig+0x1f48>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a80e:	2b0a      	cmp	r3, #10
 800a810:	d008      	beq.n	800a824 <UART_SetConfig+0x1f44>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a816:	2b0b      	cmp	r3, #11
 800a818:	d102      	bne.n	800a820 <UART_SetConfig+0x1f40>
 800a81a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a81e:	e016      	b.n	800a84e <UART_SetConfig+0x1f6e>
 800a820:	2301      	movs	r3, #1
 800a822:	e014      	b.n	800a84e <UART_SetConfig+0x1f6e>
 800a824:	2380      	movs	r3, #128	; 0x80
 800a826:	e012      	b.n	800a84e <UART_SetConfig+0x1f6e>
 800a828:	2340      	movs	r3, #64	; 0x40
 800a82a:	e010      	b.n	800a84e <UART_SetConfig+0x1f6e>
 800a82c:	2320      	movs	r3, #32
 800a82e:	e00e      	b.n	800a84e <UART_SetConfig+0x1f6e>
 800a830:	2310      	movs	r3, #16
 800a832:	e00c      	b.n	800a84e <UART_SetConfig+0x1f6e>
 800a834:	230c      	movs	r3, #12
 800a836:	e00a      	b.n	800a84e <UART_SetConfig+0x1f6e>
 800a838:	230a      	movs	r3, #10
 800a83a:	e008      	b.n	800a84e <UART_SetConfig+0x1f6e>
 800a83c:	2308      	movs	r3, #8
 800a83e:	e006      	b.n	800a84e <UART_SetConfig+0x1f6e>
 800a840:	2306      	movs	r3, #6
 800a842:	e004      	b.n	800a84e <UART_SetConfig+0x1f6e>
 800a844:	2304      	movs	r3, #4
 800a846:	e002      	b.n	800a84e <UART_SetConfig+0x1f6e>
 800a848:	2302      	movs	r3, #2
 800a84a:	e000      	b.n	800a84e <UART_SetConfig+0x1f6e>
 800a84c:	2301      	movs	r3, #1
 800a84e:	fbb2 f2f3 	udiv	r2, r2, r3
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	085b      	lsrs	r3, r3, #1
 800a858:	441a      	add	r2, r3
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a862:	b29b      	uxth	r3, r3
 800a864:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a866:	e195      	b.n	800ab94 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a868:	4b87      	ldr	r3, [pc, #540]	; (800aa88 <UART_SetConfig+0x21a8>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f003 0320 	and.w	r3, r3, #32
 800a870:	2b00      	cmp	r3, #0
 800a872:	d05d      	beq.n	800a930 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a874:	4b84      	ldr	r3, [pc, #528]	; (800aa88 <UART_SetConfig+0x21a8>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	08db      	lsrs	r3, r3, #3
 800a87a:	f003 0303 	and.w	r3, r3, #3
 800a87e:	4a83      	ldr	r2, [pc, #524]	; (800aa8c <UART_SetConfig+0x21ac>)
 800a880:	40da      	lsrs	r2, r3
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a886:	2b00      	cmp	r3, #0
 800a888:	d044      	beq.n	800a914 <UART_SetConfig+0x2034>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a88e:	2b01      	cmp	r3, #1
 800a890:	d03e      	beq.n	800a910 <UART_SetConfig+0x2030>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a896:	2b02      	cmp	r3, #2
 800a898:	d038      	beq.n	800a90c <UART_SetConfig+0x202c>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a89e:	2b03      	cmp	r3, #3
 800a8a0:	d032      	beq.n	800a908 <UART_SetConfig+0x2028>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a6:	2b04      	cmp	r3, #4
 800a8a8:	d02c      	beq.n	800a904 <UART_SetConfig+0x2024>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ae:	2b05      	cmp	r3, #5
 800a8b0:	d026      	beq.n	800a900 <UART_SetConfig+0x2020>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b6:	2b06      	cmp	r3, #6
 800a8b8:	d020      	beq.n	800a8fc <UART_SetConfig+0x201c>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8be:	2b07      	cmp	r3, #7
 800a8c0:	d01a      	beq.n	800a8f8 <UART_SetConfig+0x2018>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c6:	2b08      	cmp	r3, #8
 800a8c8:	d014      	beq.n	800a8f4 <UART_SetConfig+0x2014>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ce:	2b09      	cmp	r3, #9
 800a8d0:	d00e      	beq.n	800a8f0 <UART_SetConfig+0x2010>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d6:	2b0a      	cmp	r3, #10
 800a8d8:	d008      	beq.n	800a8ec <UART_SetConfig+0x200c>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8de:	2b0b      	cmp	r3, #11
 800a8e0:	d102      	bne.n	800a8e8 <UART_SetConfig+0x2008>
 800a8e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8e6:	e016      	b.n	800a916 <UART_SetConfig+0x2036>
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	e014      	b.n	800a916 <UART_SetConfig+0x2036>
 800a8ec:	2380      	movs	r3, #128	; 0x80
 800a8ee:	e012      	b.n	800a916 <UART_SetConfig+0x2036>
 800a8f0:	2340      	movs	r3, #64	; 0x40
 800a8f2:	e010      	b.n	800a916 <UART_SetConfig+0x2036>
 800a8f4:	2320      	movs	r3, #32
 800a8f6:	e00e      	b.n	800a916 <UART_SetConfig+0x2036>
 800a8f8:	2310      	movs	r3, #16
 800a8fa:	e00c      	b.n	800a916 <UART_SetConfig+0x2036>
 800a8fc:	230c      	movs	r3, #12
 800a8fe:	e00a      	b.n	800a916 <UART_SetConfig+0x2036>
 800a900:	230a      	movs	r3, #10
 800a902:	e008      	b.n	800a916 <UART_SetConfig+0x2036>
 800a904:	2308      	movs	r3, #8
 800a906:	e006      	b.n	800a916 <UART_SetConfig+0x2036>
 800a908:	2306      	movs	r3, #6
 800a90a:	e004      	b.n	800a916 <UART_SetConfig+0x2036>
 800a90c:	2304      	movs	r3, #4
 800a90e:	e002      	b.n	800a916 <UART_SetConfig+0x2036>
 800a910:	2302      	movs	r3, #2
 800a912:	e000      	b.n	800a916 <UART_SetConfig+0x2036>
 800a914:	2301      	movs	r3, #1
 800a916:	fbb2 f2f3 	udiv	r2, r2, r3
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	085b      	lsrs	r3, r3, #1
 800a920:	441a      	add	r2, r3
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	fbb2 f3f3 	udiv	r3, r2, r3
 800a92a:	b29b      	uxth	r3, r3
 800a92c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800a92e:	e131      	b.n	800ab94 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a934:	2b00      	cmp	r3, #0
 800a936:	d043      	beq.n	800a9c0 <UART_SetConfig+0x20e0>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	d03d      	beq.n	800a9bc <UART_SetConfig+0x20dc>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a944:	2b02      	cmp	r3, #2
 800a946:	d037      	beq.n	800a9b8 <UART_SetConfig+0x20d8>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a94c:	2b03      	cmp	r3, #3
 800a94e:	d031      	beq.n	800a9b4 <UART_SetConfig+0x20d4>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a954:	2b04      	cmp	r3, #4
 800a956:	d02b      	beq.n	800a9b0 <UART_SetConfig+0x20d0>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a95c:	2b05      	cmp	r3, #5
 800a95e:	d025      	beq.n	800a9ac <UART_SetConfig+0x20cc>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a964:	2b06      	cmp	r3, #6
 800a966:	d01f      	beq.n	800a9a8 <UART_SetConfig+0x20c8>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a96c:	2b07      	cmp	r3, #7
 800a96e:	d019      	beq.n	800a9a4 <UART_SetConfig+0x20c4>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a974:	2b08      	cmp	r3, #8
 800a976:	d013      	beq.n	800a9a0 <UART_SetConfig+0x20c0>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a97c:	2b09      	cmp	r3, #9
 800a97e:	d00d      	beq.n	800a99c <UART_SetConfig+0x20bc>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a984:	2b0a      	cmp	r3, #10
 800a986:	d007      	beq.n	800a998 <UART_SetConfig+0x20b8>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a98c:	2b0b      	cmp	r3, #11
 800a98e:	d101      	bne.n	800a994 <UART_SetConfig+0x20b4>
 800a990:	4b3f      	ldr	r3, [pc, #252]	; (800aa90 <UART_SetConfig+0x21b0>)
 800a992:	e016      	b.n	800a9c2 <UART_SetConfig+0x20e2>
 800a994:	4b3d      	ldr	r3, [pc, #244]	; (800aa8c <UART_SetConfig+0x21ac>)
 800a996:	e014      	b.n	800a9c2 <UART_SetConfig+0x20e2>
 800a998:	4b3e      	ldr	r3, [pc, #248]	; (800aa94 <UART_SetConfig+0x21b4>)
 800a99a:	e012      	b.n	800a9c2 <UART_SetConfig+0x20e2>
 800a99c:	4b3e      	ldr	r3, [pc, #248]	; (800aa98 <UART_SetConfig+0x21b8>)
 800a99e:	e010      	b.n	800a9c2 <UART_SetConfig+0x20e2>
 800a9a0:	4b3e      	ldr	r3, [pc, #248]	; (800aa9c <UART_SetConfig+0x21bc>)
 800a9a2:	e00e      	b.n	800a9c2 <UART_SetConfig+0x20e2>
 800a9a4:	4b3e      	ldr	r3, [pc, #248]	; (800aaa0 <UART_SetConfig+0x21c0>)
 800a9a6:	e00c      	b.n	800a9c2 <UART_SetConfig+0x20e2>
 800a9a8:	4b3e      	ldr	r3, [pc, #248]	; (800aaa4 <UART_SetConfig+0x21c4>)
 800a9aa:	e00a      	b.n	800a9c2 <UART_SetConfig+0x20e2>
 800a9ac:	4b3e      	ldr	r3, [pc, #248]	; (800aaa8 <UART_SetConfig+0x21c8>)
 800a9ae:	e008      	b.n	800a9c2 <UART_SetConfig+0x20e2>
 800a9b0:	4b3e      	ldr	r3, [pc, #248]	; (800aaac <UART_SetConfig+0x21cc>)
 800a9b2:	e006      	b.n	800a9c2 <UART_SetConfig+0x20e2>
 800a9b4:	4b3e      	ldr	r3, [pc, #248]	; (800aab0 <UART_SetConfig+0x21d0>)
 800a9b6:	e004      	b.n	800a9c2 <UART_SetConfig+0x20e2>
 800a9b8:	4b3e      	ldr	r3, [pc, #248]	; (800aab4 <UART_SetConfig+0x21d4>)
 800a9ba:	e002      	b.n	800a9c2 <UART_SetConfig+0x20e2>
 800a9bc:	4b3e      	ldr	r3, [pc, #248]	; (800aab8 <UART_SetConfig+0x21d8>)
 800a9be:	e000      	b.n	800a9c2 <UART_SetConfig+0x20e2>
 800a9c0:	4b32      	ldr	r3, [pc, #200]	; (800aa8c <UART_SetConfig+0x21ac>)
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	6852      	ldr	r2, [r2, #4]
 800a9c6:	0852      	lsrs	r2, r2, #1
 800a9c8:	441a      	add	r2, r3
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a9d6:	e0dd      	b.n	800ab94 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d046      	beq.n	800aa6e <UART_SetConfig+0x218e>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d040      	beq.n	800aa6a <UART_SetConfig+0x218a>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ec:	2b02      	cmp	r3, #2
 800a9ee:	d03a      	beq.n	800aa66 <UART_SetConfig+0x2186>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f4:	2b03      	cmp	r3, #3
 800a9f6:	d034      	beq.n	800aa62 <UART_SetConfig+0x2182>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fc:	2b04      	cmp	r3, #4
 800a9fe:	d02e      	beq.n	800aa5e <UART_SetConfig+0x217e>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa04:	2b05      	cmp	r3, #5
 800aa06:	d028      	beq.n	800aa5a <UART_SetConfig+0x217a>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa0c:	2b06      	cmp	r3, #6
 800aa0e:	d022      	beq.n	800aa56 <UART_SetConfig+0x2176>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa14:	2b07      	cmp	r3, #7
 800aa16:	d01c      	beq.n	800aa52 <UART_SetConfig+0x2172>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa1c:	2b08      	cmp	r3, #8
 800aa1e:	d016      	beq.n	800aa4e <UART_SetConfig+0x216e>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa24:	2b09      	cmp	r3, #9
 800aa26:	d00f      	beq.n	800aa48 <UART_SetConfig+0x2168>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa2c:	2b0a      	cmp	r3, #10
 800aa2e:	d008      	beq.n	800aa42 <UART_SetConfig+0x2162>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa34:	2b0b      	cmp	r3, #11
 800aa36:	d102      	bne.n	800aa3e <UART_SetConfig+0x215e>
 800aa38:	f643 5309 	movw	r3, #15625	; 0x3d09
 800aa3c:	e018      	b.n	800aa70 <UART_SetConfig+0x2190>
 800aa3e:	4b18      	ldr	r3, [pc, #96]	; (800aaa0 <UART_SetConfig+0x21c0>)
 800aa40:	e016      	b.n	800aa70 <UART_SetConfig+0x2190>
 800aa42:	f647 2312 	movw	r3, #31250	; 0x7a12
 800aa46:	e013      	b.n	800aa70 <UART_SetConfig+0x2190>
 800aa48:	f24f 4324 	movw	r3, #62500	; 0xf424
 800aa4c:	e010      	b.n	800aa70 <UART_SetConfig+0x2190>
 800aa4e:	4b1b      	ldr	r3, [pc, #108]	; (800aabc <UART_SetConfig+0x21dc>)
 800aa50:	e00e      	b.n	800aa70 <UART_SetConfig+0x2190>
 800aa52:	4b0f      	ldr	r3, [pc, #60]	; (800aa90 <UART_SetConfig+0x21b0>)
 800aa54:	e00c      	b.n	800aa70 <UART_SetConfig+0x2190>
 800aa56:	4b1a      	ldr	r3, [pc, #104]	; (800aac0 <UART_SetConfig+0x21e0>)
 800aa58:	e00a      	b.n	800aa70 <UART_SetConfig+0x2190>
 800aa5a:	4b1a      	ldr	r3, [pc, #104]	; (800aac4 <UART_SetConfig+0x21e4>)
 800aa5c:	e008      	b.n	800aa70 <UART_SetConfig+0x2190>
 800aa5e:	4b0d      	ldr	r3, [pc, #52]	; (800aa94 <UART_SetConfig+0x21b4>)
 800aa60:	e006      	b.n	800aa70 <UART_SetConfig+0x2190>
 800aa62:	4b19      	ldr	r3, [pc, #100]	; (800aac8 <UART_SetConfig+0x21e8>)
 800aa64:	e004      	b.n	800aa70 <UART_SetConfig+0x2190>
 800aa66:	4b0c      	ldr	r3, [pc, #48]	; (800aa98 <UART_SetConfig+0x21b8>)
 800aa68:	e002      	b.n	800aa70 <UART_SetConfig+0x2190>
 800aa6a:	4b0c      	ldr	r3, [pc, #48]	; (800aa9c <UART_SetConfig+0x21bc>)
 800aa6c:	e000      	b.n	800aa70 <UART_SetConfig+0x2190>
 800aa6e:	4b0c      	ldr	r3, [pc, #48]	; (800aaa0 <UART_SetConfig+0x21c0>)
 800aa70:	687a      	ldr	r2, [r7, #4]
 800aa72:	6852      	ldr	r2, [r2, #4]
 800aa74:	0852      	lsrs	r2, r2, #1
 800aa76:	441a      	add	r2, r3
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa80:	b29b      	uxth	r3, r3
 800aa82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aa84:	e086      	b.n	800ab94 <UART_SetConfig+0x22b4>
 800aa86:	bf00      	nop
 800aa88:	58024400 	.word	0x58024400
 800aa8c:	03d09000 	.word	0x03d09000
 800aa90:	0003d090 	.word	0x0003d090
 800aa94:	0007a120 	.word	0x0007a120
 800aa98:	000f4240 	.word	0x000f4240
 800aa9c:	001e8480 	.word	0x001e8480
 800aaa0:	003d0900 	.word	0x003d0900
 800aaa4:	00516155 	.word	0x00516155
 800aaa8:	0061a800 	.word	0x0061a800
 800aaac:	007a1200 	.word	0x007a1200
 800aab0:	00a2c2aa 	.word	0x00a2c2aa
 800aab4:	00f42400 	.word	0x00f42400
 800aab8:	01e84800 	.word	0x01e84800
 800aabc:	0001e848 	.word	0x0001e848
 800aac0:	00051615 	.word	0x00051615
 800aac4:	00061a80 	.word	0x00061a80
 800aac8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d04e      	beq.n	800ab72 <UART_SetConfig+0x2292>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad8:	2b01      	cmp	r3, #1
 800aada:	d047      	beq.n	800ab6c <UART_SetConfig+0x228c>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae0:	2b02      	cmp	r3, #2
 800aae2:	d040      	beq.n	800ab66 <UART_SetConfig+0x2286>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae8:	2b03      	cmp	r3, #3
 800aaea:	d039      	beq.n	800ab60 <UART_SetConfig+0x2280>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf0:	2b04      	cmp	r3, #4
 800aaf2:	d032      	beq.n	800ab5a <UART_SetConfig+0x227a>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf8:	2b05      	cmp	r3, #5
 800aafa:	d02b      	beq.n	800ab54 <UART_SetConfig+0x2274>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab00:	2b06      	cmp	r3, #6
 800ab02:	d024      	beq.n	800ab4e <UART_SetConfig+0x226e>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab08:	2b07      	cmp	r3, #7
 800ab0a:	d01d      	beq.n	800ab48 <UART_SetConfig+0x2268>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab10:	2b08      	cmp	r3, #8
 800ab12:	d016      	beq.n	800ab42 <UART_SetConfig+0x2262>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab18:	2b09      	cmp	r3, #9
 800ab1a:	d00f      	beq.n	800ab3c <UART_SetConfig+0x225c>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab20:	2b0a      	cmp	r3, #10
 800ab22:	d008      	beq.n	800ab36 <UART_SetConfig+0x2256>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab28:	2b0b      	cmp	r3, #11
 800ab2a:	d101      	bne.n	800ab30 <UART_SetConfig+0x2250>
 800ab2c:	2380      	movs	r3, #128	; 0x80
 800ab2e:	e022      	b.n	800ab76 <UART_SetConfig+0x2296>
 800ab30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab34:	e01f      	b.n	800ab76 <UART_SetConfig+0x2296>
 800ab36:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab3a:	e01c      	b.n	800ab76 <UART_SetConfig+0x2296>
 800ab3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab40:	e019      	b.n	800ab76 <UART_SetConfig+0x2296>
 800ab42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab46:	e016      	b.n	800ab76 <UART_SetConfig+0x2296>
 800ab48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab4c:	e013      	b.n	800ab76 <UART_SetConfig+0x2296>
 800ab4e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800ab52:	e010      	b.n	800ab76 <UART_SetConfig+0x2296>
 800ab54:	f640 43cc 	movw	r3, #3276	; 0xccc
 800ab58:	e00d      	b.n	800ab76 <UART_SetConfig+0x2296>
 800ab5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab5e:	e00a      	b.n	800ab76 <UART_SetConfig+0x2296>
 800ab60:	f241 5355 	movw	r3, #5461	; 0x1555
 800ab64:	e007      	b.n	800ab76 <UART_SetConfig+0x2296>
 800ab66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ab6a:	e004      	b.n	800ab76 <UART_SetConfig+0x2296>
 800ab6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ab70:	e001      	b.n	800ab76 <UART_SetConfig+0x2296>
 800ab72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab76:	687a      	ldr	r2, [r7, #4]
 800ab78:	6852      	ldr	r2, [r2, #4]
 800ab7a:	0852      	lsrs	r2, r2, #1
 800ab7c:	441a      	add	r2, r3
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ab8a:	e003      	b.n	800ab94 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800ab92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab96:	2b0f      	cmp	r3, #15
 800ab98:	d908      	bls.n	800abac <UART_SetConfig+0x22cc>
 800ab9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aba0:	d204      	bcs.n	800abac <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aba8:	60da      	str	r2, [r3, #12]
 800abaa:	e002      	b.n	800abb2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800abac:	2301      	movs	r3, #1
 800abae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2201      	movs	r2, #1
 800abb6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2201      	movs	r2, #1
 800abbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2200      	movs	r2, #0
 800abc6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2200      	movs	r2, #0
 800abcc:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800abce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3740      	adds	r7, #64	; 0x40
 800abd6:	46bd      	mov	sp, r7
 800abd8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800abdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800abdc:	b480      	push	{r7}
 800abde:	b083      	sub	sp, #12
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abe8:	f003 0301 	and.w	r3, r3, #1
 800abec:	2b00      	cmp	r3, #0
 800abee:	d00a      	beq.n	800ac06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	430a      	orrs	r2, r1
 800ac04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac0a:	f003 0302 	and.w	r3, r3, #2
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d00a      	beq.n	800ac28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	430a      	orrs	r2, r1
 800ac26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac2c:	f003 0304 	and.w	r3, r3, #4
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d00a      	beq.n	800ac4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	430a      	orrs	r2, r1
 800ac48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac4e:	f003 0308 	and.w	r3, r3, #8
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d00a      	beq.n	800ac6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	430a      	orrs	r2, r1
 800ac6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac70:	f003 0310 	and.w	r3, r3, #16
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d00a      	beq.n	800ac8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	689b      	ldr	r3, [r3, #8]
 800ac7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	430a      	orrs	r2, r1
 800ac8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac92:	f003 0320 	and.w	r3, r3, #32
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d00a      	beq.n	800acb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	689b      	ldr	r3, [r3, #8]
 800aca0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	430a      	orrs	r2, r1
 800acae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d01a      	beq.n	800acf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	430a      	orrs	r2, r1
 800acd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800acda:	d10a      	bne.n	800acf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	430a      	orrs	r2, r1
 800acf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d00a      	beq.n	800ad14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	430a      	orrs	r2, r1
 800ad12:	605a      	str	r2, [r3, #4]
  }
}
 800ad14:	bf00      	nop
 800ad16:	370c      	adds	r7, #12
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr

0800ad20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b086      	sub	sp, #24
 800ad24:	af02      	add	r7, sp, #8
 800ad26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800ad30:	f7f6 fbe4 	bl	80014fc <HAL_GetTick>
 800ad34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f003 0308 	and.w	r3, r3, #8
 800ad40:	2b08      	cmp	r3, #8
 800ad42:	d10e      	bne.n	800ad62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ad48:	9300      	str	r3, [sp, #0]
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 f82c 	bl	800adb0 <UART_WaitOnFlagUntilTimeout>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d001      	beq.n	800ad62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad5e:	2303      	movs	r3, #3
 800ad60:	e022      	b.n	800ada8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f003 0304 	and.w	r3, r3, #4
 800ad6c:	2b04      	cmp	r3, #4
 800ad6e:	d10e      	bne.n	800ad8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ad74:	9300      	str	r3, [sp, #0]
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 f816 	bl	800adb0 <UART_WaitOnFlagUntilTimeout>
 800ad84:	4603      	mov	r3, r0
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d001      	beq.n	800ad8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad8a:	2303      	movs	r3, #3
 800ad8c:	e00c      	b.n	800ada8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2220      	movs	r2, #32
 800ad92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2220      	movs	r2, #32
 800ad9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2200      	movs	r2, #0
 800ada2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ada6:	2300      	movs	r3, #0
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3710      	adds	r7, #16
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b084      	sub	sp, #16
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	60b9      	str	r1, [r7, #8]
 800adba:	603b      	str	r3, [r7, #0]
 800adbc:	4613      	mov	r3, r2
 800adbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800adc0:	e062      	b.n	800ae88 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800adc2:	69bb      	ldr	r3, [r7, #24]
 800adc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adc8:	d05e      	beq.n	800ae88 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800adca:	f7f6 fb97 	bl	80014fc <HAL_GetTick>
 800adce:	4602      	mov	r2, r0
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	1ad3      	subs	r3, r2, r3
 800add4:	69ba      	ldr	r2, [r7, #24]
 800add6:	429a      	cmp	r2, r3
 800add8:	d302      	bcc.n	800ade0 <UART_WaitOnFlagUntilTimeout+0x30>
 800adda:	69bb      	ldr	r3, [r7, #24]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d11d      	bne.n	800ae1c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	681a      	ldr	r2, [r3, #0]
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800adee:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	689a      	ldr	r2, [r3, #8]
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f022 0201 	bic.w	r2, r2, #1
 800adfe:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2220      	movs	r2, #32
 800ae04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	2220      	movs	r2, #32
 800ae0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2200      	movs	r2, #0
 800ae14:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800ae18:	2303      	movs	r3, #3
 800ae1a:	e045      	b.n	800aea8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f003 0304 	and.w	r3, r3, #4
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d02e      	beq.n	800ae88 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	69db      	ldr	r3, [r3, #28]
 800ae30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae38:	d126      	bne.n	800ae88 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ae42:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	681a      	ldr	r2, [r3, #0]
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ae52:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	689a      	ldr	r2, [r3, #8]
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f022 0201 	bic.w	r2, r2, #1
 800ae62:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	2220      	movs	r2, #32
 800ae68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2220      	movs	r2, #32
 800ae70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	2220      	movs	r2, #32
 800ae78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800ae84:	2303      	movs	r3, #3
 800ae86:	e00f      	b.n	800aea8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	69da      	ldr	r2, [r3, #28]
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	4013      	ands	r3, r2
 800ae92:	68ba      	ldr	r2, [r7, #8]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	bf0c      	ite	eq
 800ae98:	2301      	moveq	r3, #1
 800ae9a:	2300      	movne	r3, #0
 800ae9c:	b2db      	uxtb	r3, r3
 800ae9e:	461a      	mov	r2, r3
 800aea0:	79fb      	ldrb	r3, [r7, #7]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d08d      	beq.n	800adc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aea6:	2300      	movs	r3, #0
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3710      	adds	r7, #16
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b085      	sub	sp, #20
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800aebe:	2b01      	cmp	r3, #1
 800aec0:	d101      	bne.n	800aec6 <HAL_UARTEx_DisableFifoMode+0x16>
 800aec2:	2302      	movs	r3, #2
 800aec4:	e027      	b.n	800af16 <HAL_UARTEx_DisableFifoMode+0x66>
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2201      	movs	r2, #1
 800aeca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2224      	movs	r2, #36	; 0x24
 800aed2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	681a      	ldr	r2, [r3, #0]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f022 0201 	bic.w	r2, r2, #1
 800aeec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800aef4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2200      	movs	r2, #0
 800aefa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	68fa      	ldr	r2, [r7, #12]
 800af02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2220      	movs	r2, #32
 800af08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2200      	movs	r2, #0
 800af10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800af14:	2300      	movs	r3, #0
}
 800af16:	4618      	mov	r0, r3
 800af18:	3714      	adds	r7, #20
 800af1a:	46bd      	mov	sp, r7
 800af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af20:	4770      	bx	lr

0800af22 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af22:	b580      	push	{r7, lr}
 800af24:	b084      	sub	sp, #16
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
 800af2a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800af32:	2b01      	cmp	r3, #1
 800af34:	d101      	bne.n	800af3a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800af36:	2302      	movs	r3, #2
 800af38:	e02d      	b.n	800af96 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2201      	movs	r2, #1
 800af3e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2224      	movs	r2, #36	; 0x24
 800af46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	681a      	ldr	r2, [r3, #0]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f022 0201 	bic.w	r2, r2, #1
 800af60:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	689b      	ldr	r3, [r3, #8]
 800af68:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	683a      	ldr	r2, [r7, #0]
 800af72:	430a      	orrs	r2, r1
 800af74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f000 f850 	bl	800b01c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	68fa      	ldr	r2, [r7, #12]
 800af82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2220      	movs	r2, #32
 800af88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2200      	movs	r2, #0
 800af90:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800af94:	2300      	movs	r3, #0
}
 800af96:	4618      	mov	r0, r3
 800af98:	3710      	adds	r7, #16
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}

0800af9e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af9e:	b580      	push	{r7, lr}
 800afa0:	b084      	sub	sp, #16
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
 800afa6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800afae:	2b01      	cmp	r3, #1
 800afb0:	d101      	bne.n	800afb6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800afb2:	2302      	movs	r3, #2
 800afb4:	e02d      	b.n	800b012 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2201      	movs	r2, #1
 800afba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2224      	movs	r2, #36	; 0x24
 800afc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	681a      	ldr	r2, [r3, #0]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f022 0201 	bic.w	r2, r2, #1
 800afdc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	689b      	ldr	r3, [r3, #8]
 800afe4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	683a      	ldr	r2, [r7, #0]
 800afee:	430a      	orrs	r2, r1
 800aff0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 f812 	bl	800b01c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	68fa      	ldr	r2, [r7, #12]
 800affe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2220      	movs	r2, #32
 800b004:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2200      	movs	r2, #0
 800b00c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b010:	2300      	movs	r3, #0
}
 800b012:	4618      	mov	r0, r3
 800b014:	3710      	adds	r7, #16
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}
	...

0800b01c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b01c:	b480      	push	{r7}
 800b01e:	b089      	sub	sp, #36	; 0x24
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800b024:	4a2f      	ldr	r2, [pc, #188]	; (800b0e4 <UARTEx_SetNbDataToProcess+0xc8>)
 800b026:	f107 0314 	add.w	r3, r7, #20
 800b02a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b02e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800b032:	4a2d      	ldr	r2, [pc, #180]	; (800b0e8 <UARTEx_SetNbDataToProcess+0xcc>)
 800b034:	f107 030c 	add.w	r3, r7, #12
 800b038:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b03c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b044:	2b00      	cmp	r3, #0
 800b046:	d108      	bne.n	800b05a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2201      	movs	r2, #1
 800b04c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2201      	movs	r2, #1
 800b054:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b058:	e03d      	b.n	800b0d6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b05a:	2308      	movs	r3, #8
 800b05c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b05e:	2308      	movs	r3, #8
 800b060:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	689b      	ldr	r3, [r3, #8]
 800b068:	0e5b      	lsrs	r3, r3, #25
 800b06a:	b2db      	uxtb	r3, r3
 800b06c:	f003 0307 	and.w	r3, r3, #7
 800b070:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	689b      	ldr	r3, [r3, #8]
 800b078:	0f5b      	lsrs	r3, r3, #29
 800b07a:	b2db      	uxtb	r3, r3
 800b07c:	f003 0307 	and.w	r3, r3, #7
 800b080:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800b082:	7fbb      	ldrb	r3, [r7, #30]
 800b084:	7f3a      	ldrb	r2, [r7, #28]
 800b086:	f107 0120 	add.w	r1, r7, #32
 800b08a:	440a      	add	r2, r1
 800b08c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b090:	fb02 f303 	mul.w	r3, r2, r3
 800b094:	7f3a      	ldrb	r2, [r7, #28]
 800b096:	f107 0120 	add.w	r1, r7, #32
 800b09a:	440a      	add	r2, r1
 800b09c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b0a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0a4:	b29a      	uxth	r2, r3
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800b0ac:	7ffb      	ldrb	r3, [r7, #31]
 800b0ae:	7f7a      	ldrb	r2, [r7, #29]
 800b0b0:	f107 0120 	add.w	r1, r7, #32
 800b0b4:	440a      	add	r2, r1
 800b0b6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b0ba:	fb02 f303 	mul.w	r3, r2, r3
 800b0be:	7f7a      	ldrb	r2, [r7, #29]
 800b0c0:	f107 0120 	add.w	r1, r7, #32
 800b0c4:	440a      	add	r2, r1
 800b0c6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b0ca:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0ce:	b29a      	uxth	r2, r3
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b0d6:	bf00      	nop
 800b0d8:	3724      	adds	r7, #36	; 0x24
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr
 800b0e2:	bf00      	nop
 800b0e4:	08015888 	.word	0x08015888
 800b0e8:	08015890 	.word	0x08015890

0800b0ec <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b0ec:	b084      	sub	sp, #16
 800b0ee:	b480      	push	{r7}
 800b0f0:	b085      	sub	sp, #20
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	6078      	str	r0, [r7, #4]
 800b0f6:	f107 001c 	add.w	r0, r7, #28
 800b0fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b0fe:	2300      	movs	r3, #0
 800b100:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b102:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800b104:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b106:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800b10a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800b10e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800b112:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b114:	68fa      	ldr	r2, [r7, #12]
 800b116:	4313      	orrs	r3, r2
 800b118:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	685a      	ldr	r2, [r3, #4]
 800b11e:	4b07      	ldr	r3, [pc, #28]	; (800b13c <SDMMC_Init+0x50>)
 800b120:	4013      	ands	r3, r2
 800b122:	68fa      	ldr	r2, [r7, #12]
 800b124:	431a      	orrs	r2, r3
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b12a:	2300      	movs	r3, #0
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3714      	adds	r7, #20
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	b004      	add	sp, #16
 800b138:	4770      	bx	lr
 800b13a:	bf00      	nop
 800b13c:	ffc02c00 	.word	0xffc02c00

0800b140 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b140:	b480      	push	{r7}
 800b142:	b083      	sub	sp, #12
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b14e:	4618      	mov	r0, r3
 800b150:	370c      	adds	r7, #12
 800b152:	46bd      	mov	sp, r7
 800b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b158:	4770      	bx	lr

0800b15a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b15a:	b480      	push	{r7}
 800b15c:	b083      	sub	sp, #12
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
 800b162:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	681a      	ldr	r2, [r3, #0]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b16e:	2300      	movs	r3, #0
}
 800b170:	4618      	mov	r0, r3
 800b172:	370c      	adds	r7, #12
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr

0800b17c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b083      	sub	sp, #12
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f043 0203 	orr.w	r2, r3, #3
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b190:	2300      	movs	r3, #0
}
 800b192:	4618      	mov	r0, r3
 800b194:	370c      	adds	r7, #12
 800b196:	46bd      	mov	sp, r7
 800b198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19c:	4770      	bx	lr

0800b19e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b19e:	b480      	push	{r7}
 800b1a0:	b083      	sub	sp, #12
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f003 0303 	and.w	r3, r3, #3
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	370c      	adds	r7, #12
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b8:	4770      	bx	lr
	...

0800b1bc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b085      	sub	sp, #20
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	681a      	ldr	r2, [r3, #0]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b1da:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b1e0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b1e6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b1e8:	68fa      	ldr	r2, [r7, #12]
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	68da      	ldr	r2, [r3, #12]
 800b1f2:	4b06      	ldr	r3, [pc, #24]	; (800b20c <SDMMC_SendCommand+0x50>)
 800b1f4:	4013      	ands	r3, r2
 800b1f6:	68fa      	ldr	r2, [r7, #12]
 800b1f8:	431a      	orrs	r2, r3
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b1fe:	2300      	movs	r3, #0
}
 800b200:	4618      	mov	r0, r3
 800b202:	3714      	adds	r7, #20
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr
 800b20c:	fffee0c0 	.word	0xfffee0c0

0800b210 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b210:	b480      	push	{r7}
 800b212:	b083      	sub	sp, #12
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	691b      	ldr	r3, [r3, #16]
 800b21c:	b2db      	uxtb	r3, r3
}
 800b21e:	4618      	mov	r0, r3
 800b220:	370c      	adds	r7, #12
 800b222:	46bd      	mov	sp, r7
 800b224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b228:	4770      	bx	lr

0800b22a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b22a:	b480      	push	{r7}
 800b22c:	b085      	sub	sp, #20
 800b22e:	af00      	add	r7, sp, #0
 800b230:	6078      	str	r0, [r7, #4]
 800b232:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	3314      	adds	r3, #20
 800b238:	461a      	mov	r2, r3
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	4413      	add	r3, r2
 800b23e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	681b      	ldr	r3, [r3, #0]
}
 800b244:	4618      	mov	r0, r3
 800b246:	3714      	adds	r7, #20
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr

0800b250 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b250:	b480      	push	{r7}
 800b252:	b085      	sub	sp, #20
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b25a:	2300      	movs	r3, #0
 800b25c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	681a      	ldr	r2, [r3, #0]
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	685a      	ldr	r2, [r3, #4]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b276:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b27c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b282:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b284:	68fa      	ldr	r2, [r7, #12]
 800b286:	4313      	orrs	r3, r2
 800b288:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b28e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	431a      	orrs	r2, r3
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b29a:	2300      	movs	r3, #0

}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3714      	adds	r7, #20
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr

0800b2a8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b088      	sub	sp, #32
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b2b6:	2310      	movs	r3, #16
 800b2b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b2ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2ca:	f107 0308 	add.w	r3, r7, #8
 800b2ce:	4619      	mov	r1, r3
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f7ff ff73 	bl	800b1bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b2d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2da:	2110      	movs	r1, #16
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f000 faab 	bl	800b838 <SDMMC_GetCmdResp1>
 800b2e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2e4:	69fb      	ldr	r3, [r7, #28]
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3720      	adds	r7, #32
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}

0800b2ee <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b2ee:	b580      	push	{r7, lr}
 800b2f0:	b088      	sub	sp, #32
 800b2f2:	af00      	add	r7, sp, #0
 800b2f4:	6078      	str	r0, [r7, #4]
 800b2f6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b2fc:	2311      	movs	r3, #17
 800b2fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b300:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b304:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b306:	2300      	movs	r3, #0
 800b308:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b30a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b30e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b310:	f107 0308 	add.w	r3, r7, #8
 800b314:	4619      	mov	r1, r3
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f7ff ff50 	bl	800b1bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b31c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b320:	2111      	movs	r1, #17
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f000 fa88 	bl	800b838 <SDMMC_GetCmdResp1>
 800b328:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b32a:	69fb      	ldr	r3, [r7, #28]
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3720      	adds	r7, #32
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b088      	sub	sp, #32
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b342:	2312      	movs	r3, #18
 800b344:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b346:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b34a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b34c:	2300      	movs	r3, #0
 800b34e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b354:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b356:	f107 0308 	add.w	r3, r7, #8
 800b35a:	4619      	mov	r1, r3
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f7ff ff2d 	bl	800b1bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b362:	f241 3288 	movw	r2, #5000	; 0x1388
 800b366:	2112      	movs	r1, #18
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f000 fa65 	bl	800b838 <SDMMC_GetCmdResp1>
 800b36e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b370:	69fb      	ldr	r3, [r7, #28]
}
 800b372:	4618      	mov	r0, r3
 800b374:	3720      	adds	r7, #32
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}

0800b37a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b37a:	b580      	push	{r7, lr}
 800b37c:	b088      	sub	sp, #32
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
 800b382:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b388:	2318      	movs	r3, #24
 800b38a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b38c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b390:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b392:	2300      	movs	r3, #0
 800b394:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b39a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b39c:	f107 0308 	add.w	r3, r7, #8
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f7ff ff0a 	bl	800b1bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b3a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3ac:	2118      	movs	r1, #24
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f000 fa42 	bl	800b838 <SDMMC_GetCmdResp1>
 800b3b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3b6:	69fb      	ldr	r3, [r7, #28]
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3720      	adds	r7, #32
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}

0800b3c0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b088      	sub	sp, #32
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b3ce:	2319      	movs	r3, #25
 800b3d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b3e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3e2:	f107 0308 	add.w	r3, r7, #8
 800b3e6:	4619      	mov	r1, r3
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f7ff fee7 	bl	800b1bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b3ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3f2:	2119      	movs	r1, #25
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f000 fa1f 	bl	800b838 <SDMMC_GetCmdResp1>
 800b3fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3fc:	69fb      	ldr	r3, [r7, #28]
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3720      	adds	r7, #32
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}
	...

0800b408 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b088      	sub	sp, #32
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b410:	2300      	movs	r3, #0
 800b412:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b414:	230c      	movs	r3, #12
 800b416:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b418:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b41c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b41e:	2300      	movs	r3, #0
 800b420:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b422:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b426:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b440:	f107 0308 	add.w	r3, r7, #8
 800b444:	4619      	mov	r1, r3
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f7ff feb8 	bl	800b1bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b44c:	4a0b      	ldr	r2, [pc, #44]	; (800b47c <SDMMC_CmdStopTransfer+0x74>)
 800b44e:	210c      	movs	r1, #12
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f000 f9f1 	bl	800b838 <SDMMC_GetCmdResp1>
 800b456:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	68db      	ldr	r3, [r3, #12]
 800b45c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800b464:	69fb      	ldr	r3, [r7, #28]
 800b466:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b46a:	d101      	bne.n	800b470 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800b46c:	2300      	movs	r3, #0
 800b46e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800b470:	69fb      	ldr	r3, [r7, #28]
}
 800b472:	4618      	mov	r0, r3
 800b474:	3720      	adds	r7, #32
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop
 800b47c:	05f5e100 	.word	0x05f5e100

0800b480 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b08a      	sub	sp, #40	; 0x28
 800b484:	af00      	add	r7, sp, #0
 800b486:	60f8      	str	r0, [r7, #12]
 800b488:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b490:	2307      	movs	r3, #7
 800b492:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b494:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b498:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b49a:	2300      	movs	r3, #0
 800b49c:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b49e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4a2:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4a4:	f107 0310 	add.w	r3, r7, #16
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	68f8      	ldr	r0, [r7, #12]
 800b4ac:	f7ff fe86 	bl	800b1bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b4b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4b4:	2107      	movs	r1, #7
 800b4b6:	68f8      	ldr	r0, [r7, #12]
 800b4b8:	f000 f9be 	bl	800b838 <SDMMC_GetCmdResp1>
 800b4bc:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3728      	adds	r7, #40	; 0x28
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}

0800b4c8 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b088      	sub	sp, #32
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4e6:	f107 0308 	add.w	r3, r7, #8
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f7ff fe65 	bl	800b1bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 f976 	bl	800b7e4 <SDMMC_GetCmdError>
 800b4f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4fa:	69fb      	ldr	r3, [r7, #28]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3720      	adds	r7, #32
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b088      	sub	sp, #32
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b50c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b510:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b512:	2308      	movs	r3, #8
 800b514:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b516:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b51a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b51c:	2300      	movs	r3, #0
 800b51e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b524:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b526:	f107 0308 	add.w	r3, r7, #8
 800b52a:	4619      	mov	r1, r3
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f7ff fe45 	bl	800b1bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f000 fb6a 	bl	800bc0c <SDMMC_GetCmdResp7>
 800b538:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b53a:	69fb      	ldr	r3, [r7, #28]
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3720      	adds	r7, #32
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}

0800b544 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b088      	sub	sp, #32
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b552:	2337      	movs	r3, #55	; 0x37
 800b554:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b556:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b55a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b55c:	2300      	movs	r3, #0
 800b55e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b560:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b564:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b566:	f107 0308 	add.w	r3, r7, #8
 800b56a:	4619      	mov	r1, r3
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f7ff fe25 	bl	800b1bc <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b572:	f241 3288 	movw	r2, #5000	; 0x1388
 800b576:	2137      	movs	r1, #55	; 0x37
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f000 f95d 	bl	800b838 <SDMMC_GetCmdResp1>
 800b57e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b580:	69fb      	ldr	r3, [r7, #28]
}
 800b582:	4618      	mov	r0, r3
 800b584:	3720      	adds	r7, #32
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}

0800b58a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b58a:	b580      	push	{r7, lr}
 800b58c:	b088      	sub	sp, #32
 800b58e:	af00      	add	r7, sp, #0
 800b590:	6078      	str	r0, [r7, #4]
 800b592:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b598:	2329      	movs	r3, #41	; 0x29
 800b59a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b59c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5ac:	f107 0308 	add.w	r3, r7, #8
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f7ff fe02 	bl	800b1bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f000 fa75 	bl	800baa8 <SDMMC_GetCmdResp3>
 800b5be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5c0:	69fb      	ldr	r3, [r7, #28]
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3720      	adds	r7, #32
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}

0800b5ca <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b5ca:	b580      	push	{r7, lr}
 800b5cc:	b088      	sub	sp, #32
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	6078      	str	r0, [r7, #4]
 800b5d2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b5d8:	2306      	movs	r3, #6
 800b5da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5ec:	f107 0308 	add.w	r3, r7, #8
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f7ff fde2 	bl	800b1bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b5f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5fc:	2106      	movs	r1, #6
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f000 f91a 	bl	800b838 <SDMMC_GetCmdResp1>
 800b604:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b606:	69fb      	ldr	r3, [r7, #28]
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3720      	adds	r7, #32
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b088      	sub	sp, #32
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b618:	2300      	movs	r3, #0
 800b61a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b61c:	2333      	movs	r3, #51	; 0x33
 800b61e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b620:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b624:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b626:	2300      	movs	r3, #0
 800b628:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b62a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b62e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b630:	f107 0308 	add.w	r3, r7, #8
 800b634:	4619      	mov	r1, r3
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f7ff fdc0 	bl	800b1bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b63c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b640:	2133      	movs	r1, #51	; 0x33
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 f8f8 	bl	800b838 <SDMMC_GetCmdResp1>
 800b648:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b64a:	69fb      	ldr	r3, [r7, #28]
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3720      	adds	r7, #32
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b088      	sub	sp, #32
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b65c:	2300      	movs	r3, #0
 800b65e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b660:	2302      	movs	r3, #2
 800b662:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b664:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b668:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b66a:	2300      	movs	r3, #0
 800b66c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b66e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b672:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b674:	f107 0308 	add.w	r3, r7, #8
 800b678:	4619      	mov	r1, r3
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f7ff fd9e 	bl	800b1bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f000 f9c9 	bl	800ba18 <SDMMC_GetCmdResp2>
 800b686:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b688:	69fb      	ldr	r3, [r7, #28]
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3720      	adds	r7, #32
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}

0800b692 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b692:	b580      	push	{r7, lr}
 800b694:	b088      	sub	sp, #32
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
 800b69a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b6a0:	2309      	movs	r3, #9
 800b6a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b6a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b6a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6b4:	f107 0308 	add.w	r3, r7, #8
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f7ff fd7e 	bl	800b1bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f000 f9a9 	bl	800ba18 <SDMMC_GetCmdResp2>
 800b6c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6c8:	69fb      	ldr	r3, [r7, #28]
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3720      	adds	r7, #32
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}

0800b6d2 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b6d2:	b580      	push	{r7, lr}
 800b6d4:	b088      	sub	sp, #32
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6078      	str	r0, [r7, #4]
 800b6da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b6e0:	2303      	movs	r3, #3
 800b6e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6f4:	f107 0308 	add.w	r3, r7, #8
 800b6f8:	4619      	mov	r1, r3
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f7ff fd5e 	bl	800b1bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b700:	683a      	ldr	r2, [r7, #0]
 800b702:	2103      	movs	r1, #3
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f000 fa0b 	bl	800bb20 <SDMMC_GetCmdResp6>
 800b70a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b70c:	69fb      	ldr	r3, [r7, #28]
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3720      	adds	r7, #32
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}

0800b716 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b716:	b580      	push	{r7, lr}
 800b718:	b088      	sub	sp, #32
 800b71a:	af00      	add	r7, sp, #0
 800b71c:	6078      	str	r0, [r7, #4]
 800b71e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b724:	230d      	movs	r3, #13
 800b726:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b728:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b72c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b72e:	2300      	movs	r3, #0
 800b730:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b736:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b738:	f107 0308 	add.w	r3, r7, #8
 800b73c:	4619      	mov	r1, r3
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f7ff fd3c 	bl	800b1bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b744:	f241 3288 	movw	r2, #5000	; 0x1388
 800b748:	210d      	movs	r1, #13
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f000 f874 	bl	800b838 <SDMMC_GetCmdResp1>
 800b750:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b752:	69fb      	ldr	r3, [r7, #28]
}
 800b754:	4618      	mov	r0, r3
 800b756:	3720      	adds	r7, #32
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b088      	sub	sp, #32
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b764:	2300      	movs	r3, #0
 800b766:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b768:	230d      	movs	r3, #13
 800b76a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b76c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b770:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b772:	2300      	movs	r3, #0
 800b774:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b77a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b77c:	f107 0308 	add.w	r3, r7, #8
 800b780:	4619      	mov	r1, r3
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f7ff fd1a 	bl	800b1bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b788:	f241 3288 	movw	r2, #5000	; 0x1388
 800b78c:	210d      	movs	r1, #13
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 f852 	bl	800b838 <SDMMC_GetCmdResp1>
 800b794:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b796:	69fb      	ldr	r3, [r7, #28]
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3720      	adds	r7, #32
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b088      	sub	sp, #32
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800b7ac:	230b      	movs	r3, #11
 800b7ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7c0:	f107 0308 	add.w	r3, r7, #8
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f7ff fcf8 	bl	800b1bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800b7cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7d0:	210b      	movs	r1, #11
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 f830 	bl	800b838 <SDMMC_GetCmdResp1>
 800b7d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7da:	69fb      	ldr	r3, [r7, #28]
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3720      	adds	r7, #32
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}

0800b7e4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b7e4:	b490      	push	{r4, r7}
 800b7e6:	b082      	sub	sp, #8
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b7ec:	4b0f      	ldr	r3, [pc, #60]	; (800b82c <SDMMC_GetCmdError+0x48>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	4a0f      	ldr	r2, [pc, #60]	; (800b830 <SDMMC_GetCmdError+0x4c>)
 800b7f2:	fba2 2303 	umull	r2, r3, r2, r3
 800b7f6:	0a5b      	lsrs	r3, r3, #9
 800b7f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7fc:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800b800:	4623      	mov	r3, r4
 800b802:	1e5c      	subs	r4, r3, #1
 800b804:	2b00      	cmp	r3, #0
 800b806:	d102      	bne.n	800b80e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b808:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b80c:	e009      	b.n	800b822 <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b816:	2b00      	cmp	r3, #0
 800b818:	d0f2      	beq.n	800b800 <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	4a05      	ldr	r2, [pc, #20]	; (800b834 <SDMMC_GetCmdError+0x50>)
 800b81e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800b820:	2300      	movs	r3, #0
}
 800b822:	4618      	mov	r0, r3
 800b824:	3708      	adds	r7, #8
 800b826:	46bd      	mov	sp, r7
 800b828:	bc90      	pop	{r4, r7}
 800b82a:	4770      	bx	lr
 800b82c:	2400000c 	.word	0x2400000c
 800b830:	10624dd3 	.word	0x10624dd3
 800b834:	002000c5 	.word	0x002000c5

0800b838 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b838:	b590      	push	{r4, r7, lr}
 800b83a:	b087      	sub	sp, #28
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	460b      	mov	r3, r1
 800b842:	607a      	str	r2, [r7, #4]
 800b844:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b846:	4b6f      	ldr	r3, [pc, #444]	; (800ba04 <SDMMC_GetCmdResp1+0x1cc>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4a6f      	ldr	r2, [pc, #444]	; (800ba08 <SDMMC_GetCmdResp1+0x1d0>)
 800b84c:	fba2 2303 	umull	r2, r3, r2, r3
 800b850:	0a5b      	lsrs	r3, r3, #9
 800b852:	687a      	ldr	r2, [r7, #4]
 800b854:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800b858:	4623      	mov	r3, r4
 800b85a:	1e5c      	subs	r4, r3, #1
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d102      	bne.n	800b866 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b860:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b864:	e0c9      	b.n	800b9fa <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b86a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b86c:	697a      	ldr	r2, [r7, #20]
 800b86e:	4b67      	ldr	r3, [pc, #412]	; (800ba0c <SDMMC_GetCmdResp1+0x1d4>)
 800b870:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b872:	2b00      	cmp	r3, #0
 800b874:	d0f0      	beq.n	800b858 <SDMMC_GetCmdResp1+0x20>
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d1eb      	bne.n	800b858 <SDMMC_GetCmdResp1+0x20>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b884:	f003 0304 	and.w	r3, r3, #4
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d004      	beq.n	800b896 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2204      	movs	r2, #4
 800b890:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b892:	2304      	movs	r3, #4
 800b894:	e0b1      	b.n	800b9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b89a:	f003 0301 	and.w	r3, r3, #1
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d004      	beq.n	800b8ac <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	2201      	movs	r2, #1
 800b8a6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	e0a6      	b.n	800b9fa <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	4a58      	ldr	r2, [pc, #352]	; (800ba10 <SDMMC_GetCmdResp1+0x1d8>)
 800b8b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b8b2:	68f8      	ldr	r0, [r7, #12]
 800b8b4:	f7ff fcac 	bl	800b210 <SDMMC_GetCommandResponse>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	461a      	mov	r2, r3
 800b8bc:	7afb      	ldrb	r3, [r7, #11]
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d001      	beq.n	800b8c6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	e099      	b.n	800b9fa <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b8c6:	2100      	movs	r1, #0
 800b8c8:	68f8      	ldr	r0, [r7, #12]
 800b8ca:	f7ff fcae 	bl	800b22a <SDMMC_GetResponse>
 800b8ce:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b8d0:	693a      	ldr	r2, [r7, #16]
 800b8d2:	4b50      	ldr	r3, [pc, #320]	; (800ba14 <SDMMC_GetCmdResp1+0x1dc>)
 800b8d4:	4013      	ands	r3, r2
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d101      	bne.n	800b8de <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	e08d      	b.n	800b9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	da02      	bge.n	800b8ea <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b8e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b8e8:	e087      	b.n	800b9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d001      	beq.n	800b8f8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b8f4:	2340      	movs	r3, #64	; 0x40
 800b8f6:	e080      	b.n	800b9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d001      	beq.n	800b906 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b902:	2380      	movs	r3, #128	; 0x80
 800b904:	e079      	b.n	800b9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d002      	beq.n	800b916 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b910:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b914:	e071      	b.n	800b9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d002      	beq.n	800b926 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b920:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b924:	e069      	b.n	800b9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d002      	beq.n	800b936 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b930:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b934:	e061      	b.n	800b9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d002      	beq.n	800b946 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b940:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b944:	e059      	b.n	800b9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d002      	beq.n	800b956 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b954:	e051      	b.n	800b9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d002      	beq.n	800b966 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b960:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b964:	e049      	b.n	800b9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d002      	beq.n	800b976 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b970:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b974:	e041      	b.n	800b9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d002      	beq.n	800b986 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800b980:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b984:	e039      	b.n	800b9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d002      	beq.n	800b996 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b990:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b994:	e031      	b.n	800b9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d002      	beq.n	800b9a6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b9a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b9a4:	e029      	b.n	800b9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d002      	beq.n	800b9b6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b9b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b9b4:	e021      	b.n	800b9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d002      	beq.n	800b9c6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b9c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b9c4:	e019      	b.n	800b9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d002      	beq.n	800b9d6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b9d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b9d4:	e011      	b.n	800b9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d002      	beq.n	800b9e6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b9e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b9e4:	e009      	b.n	800b9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	f003 0308 	and.w	r3, r3, #8
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d002      	beq.n	800b9f6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b9f0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b9f4:	e001      	b.n	800b9fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b9f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	371c      	adds	r7, #28
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd90      	pop	{r4, r7, pc}
 800ba02:	bf00      	nop
 800ba04:	2400000c 	.word	0x2400000c
 800ba08:	10624dd3 	.word	0x10624dd3
 800ba0c:	00200045 	.word	0x00200045
 800ba10:	002000c5 	.word	0x002000c5
 800ba14:	fdffe008 	.word	0xfdffe008

0800ba18 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ba18:	b490      	push	{r4, r7}
 800ba1a:	b084      	sub	sp, #16
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ba20:	4b1e      	ldr	r3, [pc, #120]	; (800ba9c <SDMMC_GetCmdResp2+0x84>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	4a1e      	ldr	r2, [pc, #120]	; (800baa0 <SDMMC_GetCmdResp2+0x88>)
 800ba26:	fba2 2303 	umull	r2, r3, r2, r3
 800ba2a:	0a5b      	lsrs	r3, r3, #9
 800ba2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba30:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800ba34:	4623      	mov	r3, r4
 800ba36:	1e5c      	subs	r4, r3, #1
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d102      	bne.n	800ba42 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba40:	e026      	b.n	800ba90 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba46:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d0f0      	beq.n	800ba34 <SDMMC_GetCmdResp2+0x1c>
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d1eb      	bne.n	800ba34 <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba60:	f003 0304 	and.w	r3, r3, #4
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d004      	beq.n	800ba72 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2204      	movs	r2, #4
 800ba6c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba6e:	2304      	movs	r3, #4
 800ba70:	e00e      	b.n	800ba90 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba76:	f003 0301 	and.w	r3, r3, #1
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d004      	beq.n	800ba88 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2201      	movs	r2, #1
 800ba82:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba84:	2301      	movs	r3, #1
 800ba86:	e003      	b.n	800ba90 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	4a06      	ldr	r2, [pc, #24]	; (800baa4 <SDMMC_GetCmdResp2+0x8c>)
 800ba8c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ba8e:	2300      	movs	r3, #0
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3710      	adds	r7, #16
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bc90      	pop	{r4, r7}
 800ba98:	4770      	bx	lr
 800ba9a:	bf00      	nop
 800ba9c:	2400000c 	.word	0x2400000c
 800baa0:	10624dd3 	.word	0x10624dd3
 800baa4:	002000c5 	.word	0x002000c5

0800baa8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800baa8:	b490      	push	{r4, r7}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bab0:	4b18      	ldr	r3, [pc, #96]	; (800bb14 <SDMMC_GetCmdResp3+0x6c>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	4a18      	ldr	r2, [pc, #96]	; (800bb18 <SDMMC_GetCmdResp3+0x70>)
 800bab6:	fba2 2303 	umull	r2, r3, r2, r3
 800baba:	0a5b      	lsrs	r3, r3, #9
 800babc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bac0:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800bac4:	4623      	mov	r3, r4
 800bac6:	1e5c      	subs	r4, r3, #1
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d102      	bne.n	800bad2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bacc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bad0:	e01b      	b.n	800bb0a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bad6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d0f0      	beq.n	800bac4 <SDMMC_GetCmdResp3+0x1c>
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d1eb      	bne.n	800bac4 <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baf0:	f003 0304 	and.w	r3, r3, #4
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d004      	beq.n	800bb02 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2204      	movs	r2, #4
 800bafc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bafe:	2304      	movs	r3, #4
 800bb00:	e003      	b.n	800bb0a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	4a05      	ldr	r2, [pc, #20]	; (800bb1c <SDMMC_GetCmdResp3+0x74>)
 800bb06:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bb08:	2300      	movs	r3, #0
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3710      	adds	r7, #16
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bc90      	pop	{r4, r7}
 800bb12:	4770      	bx	lr
 800bb14:	2400000c 	.word	0x2400000c
 800bb18:	10624dd3 	.word	0x10624dd3
 800bb1c:	002000c5 	.word	0x002000c5

0800bb20 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bb20:	b590      	push	{r4, r7, lr}
 800bb22:	b087      	sub	sp, #28
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	60f8      	str	r0, [r7, #12]
 800bb28:	460b      	mov	r3, r1
 800bb2a:	607a      	str	r2, [r7, #4]
 800bb2c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bb2e:	4b34      	ldr	r3, [pc, #208]	; (800bc00 <SDMMC_GetCmdResp6+0xe0>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	4a34      	ldr	r2, [pc, #208]	; (800bc04 <SDMMC_GetCmdResp6+0xe4>)
 800bb34:	fba2 2303 	umull	r2, r3, r2, r3
 800bb38:	0a5b      	lsrs	r3, r3, #9
 800bb3a:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb3e:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800bb42:	4623      	mov	r3, r4
 800bb44:	1e5c      	subs	r4, r3, #1
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d102      	bne.n	800bb50 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb4a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb4e:	e052      	b.n	800bbf6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb54:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d0f0      	beq.n	800bb42 <SDMMC_GetCmdResp6+0x22>
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d1eb      	bne.n	800bb42 <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb6e:	f003 0304 	and.w	r3, r3, #4
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d004      	beq.n	800bb80 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	2204      	movs	r2, #4
 800bb7a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb7c:	2304      	movs	r3, #4
 800bb7e:	e03a      	b.n	800bbf6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb84:	f003 0301 	and.w	r3, r3, #1
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d004      	beq.n	800bb96 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	2201      	movs	r2, #1
 800bb90:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb92:	2301      	movs	r3, #1
 800bb94:	e02f      	b.n	800bbf6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bb96:	68f8      	ldr	r0, [r7, #12]
 800bb98:	f7ff fb3a 	bl	800b210 <SDMMC_GetCommandResponse>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	461a      	mov	r2, r3
 800bba0:	7afb      	ldrb	r3, [r7, #11]
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d001      	beq.n	800bbaa <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bba6:	2301      	movs	r3, #1
 800bba8:	e025      	b.n	800bbf6 <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	4a16      	ldr	r2, [pc, #88]	; (800bc08 <SDMMC_GetCmdResp6+0xe8>)
 800bbae:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bbb0:	2100      	movs	r1, #0
 800bbb2:	68f8      	ldr	r0, [r7, #12]
 800bbb4:	f7ff fb39 	bl	800b22a <SDMMC_GetResponse>
 800bbb8:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d106      	bne.n	800bbd2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	0c1b      	lsrs	r3, r3, #16
 800bbc8:	b29a      	uxth	r2, r3
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	e011      	b.n	800bbf6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d002      	beq.n	800bbe2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bbdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bbe0:	e009      	b.n	800bbf6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d002      	beq.n	800bbf2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bbec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bbf0:	e001      	b.n	800bbf6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bbf2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	371c      	adds	r7, #28
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd90      	pop	{r4, r7, pc}
 800bbfe:	bf00      	nop
 800bc00:	2400000c 	.word	0x2400000c
 800bc04:	10624dd3 	.word	0x10624dd3
 800bc08:	002000c5 	.word	0x002000c5

0800bc0c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bc0c:	b490      	push	{r4, r7}
 800bc0e:	b084      	sub	sp, #16
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bc14:	4b21      	ldr	r3, [pc, #132]	; (800bc9c <SDMMC_GetCmdResp7+0x90>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	4a21      	ldr	r2, [pc, #132]	; (800bca0 <SDMMC_GetCmdResp7+0x94>)
 800bc1a:	fba2 2303 	umull	r2, r3, r2, r3
 800bc1e:	0a5b      	lsrs	r3, r3, #9
 800bc20:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc24:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800bc28:	4623      	mov	r3, r4
 800bc2a:	1e5c      	subs	r4, r3, #1
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d102      	bne.n	800bc36 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc34:	e02c      	b.n	800bc90 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc3a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d0f0      	beq.n	800bc28 <SDMMC_GetCmdResp7+0x1c>
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d1eb      	bne.n	800bc28 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc54:	f003 0304 	and.w	r3, r3, #4
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d004      	beq.n	800bc66 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2204      	movs	r2, #4
 800bc60:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc62:	2304      	movs	r3, #4
 800bc64:	e014      	b.n	800bc90 <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc6a:	f003 0301 	and.w	r3, r3, #1
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d004      	beq.n	800bc7c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2201      	movs	r2, #1
 800bc76:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc78:	2301      	movs	r3, #1
 800bc7a:	e009      	b.n	800bc90 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d002      	beq.n	800bc8e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2240      	movs	r2, #64	; 0x40
 800bc8c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bc8e:	2300      	movs	r3, #0

}
 800bc90:	4618      	mov	r0, r3
 800bc92:	3710      	adds	r7, #16
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bc90      	pop	{r4, r7}
 800bc98:	4770      	bx	lr
 800bc9a:	bf00      	nop
 800bc9c:	2400000c 	.word	0x2400000c
 800bca0:	10624dd3 	.word	0x10624dd3

0800bca4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bca4:	b084      	sub	sp, #16
 800bca6:	b580      	push	{r7, lr}
 800bca8:	b084      	sub	sp, #16
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
 800bcae:	f107 001c 	add.w	r0, r7, #28
 800bcb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bcb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcb8:	2b01      	cmp	r3, #1
 800bcba:	d120      	bne.n	800bcfe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	68da      	ldr	r2, [r3, #12]
 800bccc:	4b25      	ldr	r3, [pc, #148]	; (800bd64 <USB_CoreInit+0xc0>)
 800bcce:	4013      	ands	r3, r2
 800bcd0:	687a      	ldr	r2, [r7, #4]
 800bcd2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	68db      	ldr	r3, [r3, #12]
 800bcd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bce2:	2b01      	cmp	r3, #1
 800bce4:	d105      	bne.n	800bcf2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	68db      	ldr	r3, [r3, #12]
 800bcea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f001 fab4 	bl	800d260 <USB_CoreReset>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	73fb      	strb	r3, [r7, #15]
 800bcfc:	e01a      	b.n	800bd34 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	68db      	ldr	r3, [r3, #12]
 800bd02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f001 faa8 	bl	800d260 <USB_CoreReset>
 800bd10:	4603      	mov	r3, r0
 800bd12:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bd14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d106      	bne.n	800bd28 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd1e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	639a      	str	r2, [r3, #56]	; 0x38
 800bd26:	e005      	b.n	800bd34 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd36:	2b01      	cmp	r3, #1
 800bd38:	d10b      	bne.n	800bd52 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	689b      	ldr	r3, [r3, #8]
 800bd3e:	f043 0206 	orr.w	r2, r3, #6
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	689b      	ldr	r3, [r3, #8]
 800bd4a:	f043 0220 	orr.w	r2, r3, #32
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bd52:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3710      	adds	r7, #16
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bd5e:	b004      	add	sp, #16
 800bd60:	4770      	bx	lr
 800bd62:	bf00      	nop
 800bd64:	ffbdffbf 	.word	0xffbdffbf

0800bd68 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b087      	sub	sp, #28
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	60f8      	str	r0, [r7, #12]
 800bd70:	60b9      	str	r1, [r7, #8]
 800bd72:	4613      	mov	r3, r2
 800bd74:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800bd76:	79fb      	ldrb	r3, [r7, #7]
 800bd78:	2b02      	cmp	r3, #2
 800bd7a:	d165      	bne.n	800be48 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	4a41      	ldr	r2, [pc, #260]	; (800be84 <USB_SetTurnaroundTime+0x11c>)
 800bd80:	4293      	cmp	r3, r2
 800bd82:	d906      	bls.n	800bd92 <USB_SetTurnaroundTime+0x2a>
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	4a40      	ldr	r2, [pc, #256]	; (800be88 <USB_SetTurnaroundTime+0x120>)
 800bd88:	4293      	cmp	r3, r2
 800bd8a:	d802      	bhi.n	800bd92 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800bd8c:	230f      	movs	r3, #15
 800bd8e:	617b      	str	r3, [r7, #20]
 800bd90:	e062      	b.n	800be58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	4a3c      	ldr	r2, [pc, #240]	; (800be88 <USB_SetTurnaroundTime+0x120>)
 800bd96:	4293      	cmp	r3, r2
 800bd98:	d906      	bls.n	800bda8 <USB_SetTurnaroundTime+0x40>
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	4a3b      	ldr	r2, [pc, #236]	; (800be8c <USB_SetTurnaroundTime+0x124>)
 800bd9e:	4293      	cmp	r3, r2
 800bda0:	d802      	bhi.n	800bda8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800bda2:	230e      	movs	r3, #14
 800bda4:	617b      	str	r3, [r7, #20]
 800bda6:	e057      	b.n	800be58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	4a38      	ldr	r2, [pc, #224]	; (800be8c <USB_SetTurnaroundTime+0x124>)
 800bdac:	4293      	cmp	r3, r2
 800bdae:	d906      	bls.n	800bdbe <USB_SetTurnaroundTime+0x56>
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	4a37      	ldr	r2, [pc, #220]	; (800be90 <USB_SetTurnaroundTime+0x128>)
 800bdb4:	4293      	cmp	r3, r2
 800bdb6:	d802      	bhi.n	800bdbe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800bdb8:	230d      	movs	r3, #13
 800bdba:	617b      	str	r3, [r7, #20]
 800bdbc:	e04c      	b.n	800be58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	4a33      	ldr	r2, [pc, #204]	; (800be90 <USB_SetTurnaroundTime+0x128>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d906      	bls.n	800bdd4 <USB_SetTurnaroundTime+0x6c>
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	4a32      	ldr	r2, [pc, #200]	; (800be94 <USB_SetTurnaroundTime+0x12c>)
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	d802      	bhi.n	800bdd4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800bdce:	230c      	movs	r3, #12
 800bdd0:	617b      	str	r3, [r7, #20]
 800bdd2:	e041      	b.n	800be58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	4a2f      	ldr	r2, [pc, #188]	; (800be94 <USB_SetTurnaroundTime+0x12c>)
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	d906      	bls.n	800bdea <USB_SetTurnaroundTime+0x82>
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	4a2e      	ldr	r2, [pc, #184]	; (800be98 <USB_SetTurnaroundTime+0x130>)
 800bde0:	4293      	cmp	r3, r2
 800bde2:	d802      	bhi.n	800bdea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800bde4:	230b      	movs	r3, #11
 800bde6:	617b      	str	r3, [r7, #20]
 800bde8:	e036      	b.n	800be58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	4a2a      	ldr	r2, [pc, #168]	; (800be98 <USB_SetTurnaroundTime+0x130>)
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	d906      	bls.n	800be00 <USB_SetTurnaroundTime+0x98>
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	4a29      	ldr	r2, [pc, #164]	; (800be9c <USB_SetTurnaroundTime+0x134>)
 800bdf6:	4293      	cmp	r3, r2
 800bdf8:	d802      	bhi.n	800be00 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800bdfa:	230a      	movs	r3, #10
 800bdfc:	617b      	str	r3, [r7, #20]
 800bdfe:	e02b      	b.n	800be58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	4a26      	ldr	r2, [pc, #152]	; (800be9c <USB_SetTurnaroundTime+0x134>)
 800be04:	4293      	cmp	r3, r2
 800be06:	d906      	bls.n	800be16 <USB_SetTurnaroundTime+0xae>
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	4a25      	ldr	r2, [pc, #148]	; (800bea0 <USB_SetTurnaroundTime+0x138>)
 800be0c:	4293      	cmp	r3, r2
 800be0e:	d802      	bhi.n	800be16 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800be10:	2309      	movs	r3, #9
 800be12:	617b      	str	r3, [r7, #20]
 800be14:	e020      	b.n	800be58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	4a21      	ldr	r2, [pc, #132]	; (800bea0 <USB_SetTurnaroundTime+0x138>)
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d906      	bls.n	800be2c <USB_SetTurnaroundTime+0xc4>
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	4a20      	ldr	r2, [pc, #128]	; (800bea4 <USB_SetTurnaroundTime+0x13c>)
 800be22:	4293      	cmp	r3, r2
 800be24:	d802      	bhi.n	800be2c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800be26:	2308      	movs	r3, #8
 800be28:	617b      	str	r3, [r7, #20]
 800be2a:	e015      	b.n	800be58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	4a1d      	ldr	r2, [pc, #116]	; (800bea4 <USB_SetTurnaroundTime+0x13c>)
 800be30:	4293      	cmp	r3, r2
 800be32:	d906      	bls.n	800be42 <USB_SetTurnaroundTime+0xda>
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	4a1c      	ldr	r2, [pc, #112]	; (800bea8 <USB_SetTurnaroundTime+0x140>)
 800be38:	4293      	cmp	r3, r2
 800be3a:	d802      	bhi.n	800be42 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800be3c:	2307      	movs	r3, #7
 800be3e:	617b      	str	r3, [r7, #20]
 800be40:	e00a      	b.n	800be58 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800be42:	2306      	movs	r3, #6
 800be44:	617b      	str	r3, [r7, #20]
 800be46:	e007      	b.n	800be58 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800be48:	79fb      	ldrb	r3, [r7, #7]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d102      	bne.n	800be54 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800be4e:	2309      	movs	r3, #9
 800be50:	617b      	str	r3, [r7, #20]
 800be52:	e001      	b.n	800be58 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800be54:	2309      	movs	r3, #9
 800be56:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	68db      	ldr	r3, [r3, #12]
 800be5c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	68da      	ldr	r2, [r3, #12]
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	029b      	lsls	r3, r3, #10
 800be6c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800be70:	431a      	orrs	r2, r3
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800be76:	2300      	movs	r3, #0
}
 800be78:	4618      	mov	r0, r3
 800be7a:	371c      	adds	r7, #28
 800be7c:	46bd      	mov	sp, r7
 800be7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be82:	4770      	bx	lr
 800be84:	00d8acbf 	.word	0x00d8acbf
 800be88:	00e4e1bf 	.word	0x00e4e1bf
 800be8c:	00f423ff 	.word	0x00f423ff
 800be90:	0106737f 	.word	0x0106737f
 800be94:	011a499f 	.word	0x011a499f
 800be98:	01312cff 	.word	0x01312cff
 800be9c:	014ca43f 	.word	0x014ca43f
 800bea0:	016e35ff 	.word	0x016e35ff
 800bea4:	01a6ab1f 	.word	0x01a6ab1f
 800bea8:	01e847ff 	.word	0x01e847ff

0800beac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800beac:	b480      	push	{r7}
 800beae:	b083      	sub	sp, #12
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	689b      	ldr	r3, [r3, #8]
 800beb8:	f043 0201 	orr.w	r2, r3, #1
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bec0:	2300      	movs	r3, #0
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	370c      	adds	r7, #12
 800bec6:	46bd      	mov	sp, r7
 800bec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800becc:	4770      	bx	lr

0800bece <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bece:	b480      	push	{r7}
 800bed0:	b083      	sub	sp, #12
 800bed2:	af00      	add	r7, sp, #0
 800bed4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	689b      	ldr	r3, [r3, #8]
 800beda:	f023 0201 	bic.w	r2, r3, #1
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bee2:	2300      	movs	r3, #0
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	370c      	adds	r7, #12
 800bee8:	46bd      	mov	sp, r7
 800beea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beee:	4770      	bx	lr

0800bef0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b082      	sub	sp, #8
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	460b      	mov	r3, r1
 800befa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	68db      	ldr	r3, [r3, #12]
 800bf00:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bf08:	78fb      	ldrb	r3, [r7, #3]
 800bf0a:	2b01      	cmp	r3, #1
 800bf0c:	d106      	bne.n	800bf1c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	68db      	ldr	r3, [r3, #12]
 800bf12:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	60da      	str	r2, [r3, #12]
 800bf1a:	e00b      	b.n	800bf34 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800bf1c:	78fb      	ldrb	r3, [r7, #3]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d106      	bne.n	800bf30 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	68db      	ldr	r3, [r3, #12]
 800bf26:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	60da      	str	r2, [r3, #12]
 800bf2e:	e001      	b.n	800bf34 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800bf30:	2301      	movs	r3, #1
 800bf32:	e003      	b.n	800bf3c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800bf34:	2032      	movs	r0, #50	; 0x32
 800bf36:	f7f5 faed 	bl	8001514 <HAL_Delay>

  return HAL_OK;
 800bf3a:	2300      	movs	r3, #0
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3708      	adds	r7, #8
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bf44:	b084      	sub	sp, #16
 800bf46:	b580      	push	{r7, lr}
 800bf48:	b086      	sub	sp, #24
 800bf4a:	af00      	add	r7, sp, #0
 800bf4c:	6078      	str	r0, [r7, #4]
 800bf4e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bf52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bf56:	2300      	movs	r3, #0
 800bf58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bf5e:	2300      	movs	r3, #0
 800bf60:	613b      	str	r3, [r7, #16]
 800bf62:	e009      	b.n	800bf78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	3340      	adds	r3, #64	; 0x40
 800bf6a:	009b      	lsls	r3, r3, #2
 800bf6c:	4413      	add	r3, r2
 800bf6e:	2200      	movs	r2, #0
 800bf70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	3301      	adds	r3, #1
 800bf76:	613b      	str	r3, [r7, #16]
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	2b0e      	cmp	r3, #14
 800bf7c:	d9f2      	bls.n	800bf64 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bf7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d11c      	bne.n	800bfbe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf8a:	685b      	ldr	r3, [r3, #4]
 800bf8c:	68fa      	ldr	r2, [r7, #12]
 800bf8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf92:	f043 0302 	orr.w	r3, r3, #2
 800bf96:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf9c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	601a      	str	r2, [r3, #0]
 800bfbc:	e005      	b.n	800bfca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfc2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bfd0:	461a      	mov	r2, r3
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfdc:	4619      	mov	r1, r3
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfe4:	461a      	mov	r2, r3
 800bfe6:	680b      	ldr	r3, [r1, #0]
 800bfe8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bfea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfec:	2b01      	cmp	r3, #1
 800bfee:	d10c      	bne.n	800c00a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d104      	bne.n	800c000 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bff6:	2100      	movs	r1, #0
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f000 f949 	bl	800c290 <USB_SetDevSpeed>
 800bffe:	e008      	b.n	800c012 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c000:	2101      	movs	r1, #1
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f000 f944 	bl	800c290 <USB_SetDevSpeed>
 800c008:	e003      	b.n	800c012 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c00a:	2103      	movs	r1, #3
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f000 f93f 	bl	800c290 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c012:	2110      	movs	r1, #16
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f000 f8f3 	bl	800c200 <USB_FlushTxFifo>
 800c01a:	4603      	mov	r3, r0
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d001      	beq.n	800c024 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c020:	2301      	movs	r3, #1
 800c022:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f000 f911 	bl	800c24c <USB_FlushRxFifo>
 800c02a:	4603      	mov	r3, r0
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d001      	beq.n	800c034 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c030:	2301      	movs	r3, #1
 800c032:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c03a:	461a      	mov	r2, r3
 800c03c:	2300      	movs	r3, #0
 800c03e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c046:	461a      	mov	r2, r3
 800c048:	2300      	movs	r3, #0
 800c04a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c052:	461a      	mov	r2, r3
 800c054:	2300      	movs	r3, #0
 800c056:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c058:	2300      	movs	r3, #0
 800c05a:	613b      	str	r3, [r7, #16]
 800c05c:	e043      	b.n	800c0e6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	015a      	lsls	r2, r3, #5
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	4413      	add	r3, r2
 800c066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c070:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c074:	d118      	bne.n	800c0a8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d10a      	bne.n	800c092 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	015a      	lsls	r2, r3, #5
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	4413      	add	r3, r2
 800c084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c088:	461a      	mov	r2, r3
 800c08a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c08e:	6013      	str	r3, [r2, #0]
 800c090:	e013      	b.n	800c0ba <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	015a      	lsls	r2, r3, #5
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	4413      	add	r3, r2
 800c09a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c09e:	461a      	mov	r2, r3
 800c0a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c0a4:	6013      	str	r3, [r2, #0]
 800c0a6:	e008      	b.n	800c0ba <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c0a8:	693b      	ldr	r3, [r7, #16]
 800c0aa:	015a      	lsls	r2, r3, #5
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	4413      	add	r3, r2
 800c0b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0b4:	461a      	mov	r2, r3
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	015a      	lsls	r2, r3, #5
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	4413      	add	r3, r2
 800c0c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0c6:	461a      	mov	r2, r3
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	015a      	lsls	r2, r3, #5
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	4413      	add	r3, r2
 800c0d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0d8:	461a      	mov	r2, r3
 800c0da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c0de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c0e0:	693b      	ldr	r3, [r7, #16]
 800c0e2:	3301      	adds	r3, #1
 800c0e4:	613b      	str	r3, [r7, #16]
 800c0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e8:	693a      	ldr	r2, [r7, #16]
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d3b7      	bcc.n	800c05e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	613b      	str	r3, [r7, #16]
 800c0f2:	e043      	b.n	800c17c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	015a      	lsls	r2, r3, #5
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	4413      	add	r3, r2
 800c0fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c106:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c10a:	d118      	bne.n	800c13e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d10a      	bne.n	800c128 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	015a      	lsls	r2, r3, #5
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	4413      	add	r3, r2
 800c11a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c11e:	461a      	mov	r2, r3
 800c120:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c124:	6013      	str	r3, [r2, #0]
 800c126:	e013      	b.n	800c150 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	015a      	lsls	r2, r3, #5
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	4413      	add	r3, r2
 800c130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c134:	461a      	mov	r2, r3
 800c136:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c13a:	6013      	str	r3, [r2, #0]
 800c13c:	e008      	b.n	800c150 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	015a      	lsls	r2, r3, #5
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	4413      	add	r3, r2
 800c146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c14a:	461a      	mov	r2, r3
 800c14c:	2300      	movs	r3, #0
 800c14e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	015a      	lsls	r2, r3, #5
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	4413      	add	r3, r2
 800c158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c15c:	461a      	mov	r2, r3
 800c15e:	2300      	movs	r3, #0
 800c160:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	015a      	lsls	r2, r3, #5
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	4413      	add	r3, r2
 800c16a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c16e:	461a      	mov	r2, r3
 800c170:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c174:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	3301      	adds	r3, #1
 800c17a:	613b      	str	r3, [r7, #16]
 800c17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c17e:	693a      	ldr	r2, [r7, #16]
 800c180:	429a      	cmp	r2, r3
 800c182:	d3b7      	bcc.n	800c0f4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c18a:	691b      	ldr	r3, [r3, #16]
 800c18c:	68fa      	ldr	r2, [r7, #12]
 800c18e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c192:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c196:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2200      	movs	r2, #0
 800c19c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c1a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d105      	bne.n	800c1b8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	699b      	ldr	r3, [r3, #24]
 800c1b0:	f043 0210 	orr.w	r2, r3, #16
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	699a      	ldr	r2, [r3, #24]
 800c1bc:	4b0e      	ldr	r3, [pc, #56]	; (800c1f8 <USB_DevInit+0x2b4>)
 800c1be:	4313      	orrs	r3, r2
 800c1c0:	687a      	ldr	r2, [r7, #4]
 800c1c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c1c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d005      	beq.n	800c1d6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	699b      	ldr	r3, [r3, #24]
 800c1ce:	f043 0208 	orr.w	r2, r3, #8
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c1d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1d8:	2b01      	cmp	r3, #1
 800c1da:	d105      	bne.n	800c1e8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	699a      	ldr	r2, [r3, #24]
 800c1e0:	4b06      	ldr	r3, [pc, #24]	; (800c1fc <USB_DevInit+0x2b8>)
 800c1e2:	4313      	orrs	r3, r2
 800c1e4:	687a      	ldr	r2, [r7, #4]
 800c1e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c1e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3718      	adds	r7, #24
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c1f4:	b004      	add	sp, #16
 800c1f6:	4770      	bx	lr
 800c1f8:	803c3800 	.word	0x803c3800
 800c1fc:	40000004 	.word	0x40000004

0800c200 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c200:	b480      	push	{r7}
 800c202:	b085      	sub	sp, #20
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c20a:	2300      	movs	r3, #0
 800c20c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	019b      	lsls	r3, r3, #6
 800c212:	f043 0220 	orr.w	r2, r3, #32
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	3301      	adds	r3, #1
 800c21e:	60fb      	str	r3, [r7, #12]
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	4a09      	ldr	r2, [pc, #36]	; (800c248 <USB_FlushTxFifo+0x48>)
 800c224:	4293      	cmp	r3, r2
 800c226:	d901      	bls.n	800c22c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c228:	2303      	movs	r3, #3
 800c22a:	e006      	b.n	800c23a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	691b      	ldr	r3, [r3, #16]
 800c230:	f003 0320 	and.w	r3, r3, #32
 800c234:	2b20      	cmp	r3, #32
 800c236:	d0f0      	beq.n	800c21a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c238:	2300      	movs	r3, #0
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3714      	adds	r7, #20
 800c23e:	46bd      	mov	sp, r7
 800c240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c244:	4770      	bx	lr
 800c246:	bf00      	nop
 800c248:	00030d40 	.word	0x00030d40

0800c24c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b085      	sub	sp, #20
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c254:	2300      	movs	r3, #0
 800c256:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2210      	movs	r2, #16
 800c25c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	3301      	adds	r3, #1
 800c262:	60fb      	str	r3, [r7, #12]
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	4a09      	ldr	r2, [pc, #36]	; (800c28c <USB_FlushRxFifo+0x40>)
 800c268:	4293      	cmp	r3, r2
 800c26a:	d901      	bls.n	800c270 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c26c:	2303      	movs	r3, #3
 800c26e:	e006      	b.n	800c27e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	691b      	ldr	r3, [r3, #16]
 800c274:	f003 0310 	and.w	r3, r3, #16
 800c278:	2b10      	cmp	r3, #16
 800c27a:	d0f0      	beq.n	800c25e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c27c:	2300      	movs	r3, #0
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3714      	adds	r7, #20
 800c282:	46bd      	mov	sp, r7
 800c284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c288:	4770      	bx	lr
 800c28a:	bf00      	nop
 800c28c:	00030d40 	.word	0x00030d40

0800c290 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c290:	b480      	push	{r7}
 800c292:	b085      	sub	sp, #20
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	460b      	mov	r3, r1
 800c29a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2a6:	681a      	ldr	r2, [r3, #0]
 800c2a8:	78fb      	ldrb	r3, [r7, #3]
 800c2aa:	68f9      	ldr	r1, [r7, #12]
 800c2ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c2b0:	4313      	orrs	r3, r2
 800c2b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c2b4:	2300      	movs	r3, #0
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	3714      	adds	r7, #20
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c0:	4770      	bx	lr

0800c2c2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c2c2:	b480      	push	{r7}
 800c2c4:	b087      	sub	sp, #28
 800c2c6:	af00      	add	r7, sp, #0
 800c2c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2d4:	689b      	ldr	r3, [r3, #8]
 800c2d6:	f003 0306 	and.w	r3, r3, #6
 800c2da:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d102      	bne.n	800c2e8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	75fb      	strb	r3, [r7, #23]
 800c2e6:	e00a      	b.n	800c2fe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	2b02      	cmp	r3, #2
 800c2ec:	d002      	beq.n	800c2f4 <USB_GetDevSpeed+0x32>
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	2b06      	cmp	r3, #6
 800c2f2:	d102      	bne.n	800c2fa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c2f4:	2302      	movs	r3, #2
 800c2f6:	75fb      	strb	r3, [r7, #23]
 800c2f8:	e001      	b.n	800c2fe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c2fa:	230f      	movs	r3, #15
 800c2fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c2fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800c300:	4618      	mov	r0, r3
 800c302:	371c      	adds	r7, #28
 800c304:	46bd      	mov	sp, r7
 800c306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30a:	4770      	bx	lr

0800c30c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b085      	sub	sp, #20
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	781b      	ldrb	r3, [r3, #0]
 800c31e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	785b      	ldrb	r3, [r3, #1]
 800c324:	2b01      	cmp	r3, #1
 800c326:	d139      	bne.n	800c39c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c32e:	69da      	ldr	r2, [r3, #28]
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	781b      	ldrb	r3, [r3, #0]
 800c334:	f003 030f 	and.w	r3, r3, #15
 800c338:	2101      	movs	r1, #1
 800c33a:	fa01 f303 	lsl.w	r3, r1, r3
 800c33e:	b29b      	uxth	r3, r3
 800c340:	68f9      	ldr	r1, [r7, #12]
 800c342:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c346:	4313      	orrs	r3, r2
 800c348:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	015a      	lsls	r2, r3, #5
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	4413      	add	r3, r2
 800c352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d153      	bne.n	800c408 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	015a      	lsls	r2, r3, #5
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	4413      	add	r3, r2
 800c368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c36c:	681a      	ldr	r2, [r3, #0]
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	689b      	ldr	r3, [r3, #8]
 800c372:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	78db      	ldrb	r3, [r3, #3]
 800c37a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c37c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	059b      	lsls	r3, r3, #22
 800c382:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c384:	431a      	orrs	r2, r3
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	0159      	lsls	r1, r3, #5
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	440b      	add	r3, r1
 800c38e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c392:	4619      	mov	r1, r3
 800c394:	4b20      	ldr	r3, [pc, #128]	; (800c418 <USB_ActivateEndpoint+0x10c>)
 800c396:	4313      	orrs	r3, r2
 800c398:	600b      	str	r3, [r1, #0]
 800c39a:	e035      	b.n	800c408 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3a2:	69da      	ldr	r2, [r3, #28]
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	781b      	ldrb	r3, [r3, #0]
 800c3a8:	f003 030f 	and.w	r3, r3, #15
 800c3ac:	2101      	movs	r1, #1
 800c3ae:	fa01 f303 	lsl.w	r3, r1, r3
 800c3b2:	041b      	lsls	r3, r3, #16
 800c3b4:	68f9      	ldr	r1, [r7, #12]
 800c3b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c3ba:	4313      	orrs	r3, r2
 800c3bc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	015a      	lsls	r2, r3, #5
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	4413      	add	r3, r2
 800c3c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d119      	bne.n	800c408 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	015a      	lsls	r2, r3, #5
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	4413      	add	r3, r2
 800c3dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3e0:	681a      	ldr	r2, [r3, #0]
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	689b      	ldr	r3, [r3, #8]
 800c3e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	78db      	ldrb	r3, [r3, #3]
 800c3ee:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c3f0:	430b      	orrs	r3, r1
 800c3f2:	431a      	orrs	r2, r3
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	0159      	lsls	r1, r3, #5
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	440b      	add	r3, r1
 800c3fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c400:	4619      	mov	r1, r3
 800c402:	4b05      	ldr	r3, [pc, #20]	; (800c418 <USB_ActivateEndpoint+0x10c>)
 800c404:	4313      	orrs	r3, r2
 800c406:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c408:	2300      	movs	r3, #0
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3714      	adds	r7, #20
 800c40e:	46bd      	mov	sp, r7
 800c410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c414:	4770      	bx	lr
 800c416:	bf00      	nop
 800c418:	10008000 	.word	0x10008000

0800c41c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c41c:	b480      	push	{r7}
 800c41e:	b085      	sub	sp, #20
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	781b      	ldrb	r3, [r3, #0]
 800c42e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	785b      	ldrb	r3, [r3, #1]
 800c434:	2b01      	cmp	r3, #1
 800c436:	d135      	bne.n	800c4a4 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c43e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	781b      	ldrb	r3, [r3, #0]
 800c444:	f003 030f 	and.w	r3, r3, #15
 800c448:	2101      	movs	r1, #1
 800c44a:	fa01 f303 	lsl.w	r3, r1, r3
 800c44e:	b29b      	uxth	r3, r3
 800c450:	43db      	mvns	r3, r3
 800c452:	68f9      	ldr	r1, [r7, #12]
 800c454:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c458:	4013      	ands	r3, r2
 800c45a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c462:	69da      	ldr	r2, [r3, #28]
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	781b      	ldrb	r3, [r3, #0]
 800c468:	f003 030f 	and.w	r3, r3, #15
 800c46c:	2101      	movs	r1, #1
 800c46e:	fa01 f303 	lsl.w	r3, r1, r3
 800c472:	b29b      	uxth	r3, r3
 800c474:	43db      	mvns	r3, r3
 800c476:	68f9      	ldr	r1, [r7, #12]
 800c478:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c47c:	4013      	ands	r3, r2
 800c47e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	015a      	lsls	r2, r3, #5
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	4413      	add	r3, r2
 800c488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c48c:	681a      	ldr	r2, [r3, #0]
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	0159      	lsls	r1, r3, #5
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	440b      	add	r3, r1
 800c496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c49a:	4619      	mov	r1, r3
 800c49c:	4b1f      	ldr	r3, [pc, #124]	; (800c51c <USB_DeactivateEndpoint+0x100>)
 800c49e:	4013      	ands	r3, r2
 800c4a0:	600b      	str	r3, [r1, #0]
 800c4a2:	e034      	b.n	800c50e <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	781b      	ldrb	r3, [r3, #0]
 800c4b0:	f003 030f 	and.w	r3, r3, #15
 800c4b4:	2101      	movs	r1, #1
 800c4b6:	fa01 f303 	lsl.w	r3, r1, r3
 800c4ba:	041b      	lsls	r3, r3, #16
 800c4bc:	43db      	mvns	r3, r3
 800c4be:	68f9      	ldr	r1, [r7, #12]
 800c4c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c4c4:	4013      	ands	r3, r2
 800c4c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4ce:	69da      	ldr	r2, [r3, #28]
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	781b      	ldrb	r3, [r3, #0]
 800c4d4:	f003 030f 	and.w	r3, r3, #15
 800c4d8:	2101      	movs	r1, #1
 800c4da:	fa01 f303 	lsl.w	r3, r1, r3
 800c4de:	041b      	lsls	r3, r3, #16
 800c4e0:	43db      	mvns	r3, r3
 800c4e2:	68f9      	ldr	r1, [r7, #12]
 800c4e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c4e8:	4013      	ands	r3, r2
 800c4ea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	015a      	lsls	r2, r3, #5
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	4413      	add	r3, r2
 800c4f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4f8:	681a      	ldr	r2, [r3, #0]
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	0159      	lsls	r1, r3, #5
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	440b      	add	r3, r1
 800c502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c506:	4619      	mov	r1, r3
 800c508:	4b05      	ldr	r3, [pc, #20]	; (800c520 <USB_DeactivateEndpoint+0x104>)
 800c50a:	4013      	ands	r3, r2
 800c50c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c50e:	2300      	movs	r3, #0
}
 800c510:	4618      	mov	r0, r3
 800c512:	3714      	adds	r7, #20
 800c514:	46bd      	mov	sp, r7
 800c516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51a:	4770      	bx	lr
 800c51c:	ec337800 	.word	0xec337800
 800c520:	eff37800 	.word	0xeff37800

0800c524 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b08a      	sub	sp, #40	; 0x28
 800c528:	af02      	add	r7, sp, #8
 800c52a:	60f8      	str	r0, [r7, #12]
 800c52c:	60b9      	str	r1, [r7, #8]
 800c52e:	4613      	mov	r3, r2
 800c530:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	781b      	ldrb	r3, [r3, #0]
 800c53a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	785b      	ldrb	r3, [r3, #1]
 800c540:	2b01      	cmp	r3, #1
 800c542:	f040 8163 	bne.w	800c80c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	695b      	ldr	r3, [r3, #20]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d132      	bne.n	800c5b4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c54e:	69bb      	ldr	r3, [r7, #24]
 800c550:	015a      	lsls	r2, r3, #5
 800c552:	69fb      	ldr	r3, [r7, #28]
 800c554:	4413      	add	r3, r2
 800c556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c55a:	691a      	ldr	r2, [r3, #16]
 800c55c:	69bb      	ldr	r3, [r7, #24]
 800c55e:	0159      	lsls	r1, r3, #5
 800c560:	69fb      	ldr	r3, [r7, #28]
 800c562:	440b      	add	r3, r1
 800c564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c568:	4619      	mov	r1, r3
 800c56a:	4ba5      	ldr	r3, [pc, #660]	; (800c800 <USB_EPStartXfer+0x2dc>)
 800c56c:	4013      	ands	r3, r2
 800c56e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c570:	69bb      	ldr	r3, [r7, #24]
 800c572:	015a      	lsls	r2, r3, #5
 800c574:	69fb      	ldr	r3, [r7, #28]
 800c576:	4413      	add	r3, r2
 800c578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c57c:	691b      	ldr	r3, [r3, #16]
 800c57e:	69ba      	ldr	r2, [r7, #24]
 800c580:	0151      	lsls	r1, r2, #5
 800c582:	69fa      	ldr	r2, [r7, #28]
 800c584:	440a      	add	r2, r1
 800c586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c58a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c58e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c590:	69bb      	ldr	r3, [r7, #24]
 800c592:	015a      	lsls	r2, r3, #5
 800c594:	69fb      	ldr	r3, [r7, #28]
 800c596:	4413      	add	r3, r2
 800c598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c59c:	691a      	ldr	r2, [r3, #16]
 800c59e:	69bb      	ldr	r3, [r7, #24]
 800c5a0:	0159      	lsls	r1, r3, #5
 800c5a2:	69fb      	ldr	r3, [r7, #28]
 800c5a4:	440b      	add	r3, r1
 800c5a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5aa:	4619      	mov	r1, r3
 800c5ac:	4b95      	ldr	r3, [pc, #596]	; (800c804 <USB_EPStartXfer+0x2e0>)
 800c5ae:	4013      	ands	r3, r2
 800c5b0:	610b      	str	r3, [r1, #16]
 800c5b2:	e074      	b.n	800c69e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c5b4:	69bb      	ldr	r3, [r7, #24]
 800c5b6:	015a      	lsls	r2, r3, #5
 800c5b8:	69fb      	ldr	r3, [r7, #28]
 800c5ba:	4413      	add	r3, r2
 800c5bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5c0:	691a      	ldr	r2, [r3, #16]
 800c5c2:	69bb      	ldr	r3, [r7, #24]
 800c5c4:	0159      	lsls	r1, r3, #5
 800c5c6:	69fb      	ldr	r3, [r7, #28]
 800c5c8:	440b      	add	r3, r1
 800c5ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5ce:	4619      	mov	r1, r3
 800c5d0:	4b8c      	ldr	r3, [pc, #560]	; (800c804 <USB_EPStartXfer+0x2e0>)
 800c5d2:	4013      	ands	r3, r2
 800c5d4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c5d6:	69bb      	ldr	r3, [r7, #24]
 800c5d8:	015a      	lsls	r2, r3, #5
 800c5da:	69fb      	ldr	r3, [r7, #28]
 800c5dc:	4413      	add	r3, r2
 800c5de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5e2:	691a      	ldr	r2, [r3, #16]
 800c5e4:	69bb      	ldr	r3, [r7, #24]
 800c5e6:	0159      	lsls	r1, r3, #5
 800c5e8:	69fb      	ldr	r3, [r7, #28]
 800c5ea:	440b      	add	r3, r1
 800c5ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5f0:	4619      	mov	r1, r3
 800c5f2:	4b83      	ldr	r3, [pc, #524]	; (800c800 <USB_EPStartXfer+0x2dc>)
 800c5f4:	4013      	ands	r3, r2
 800c5f6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c5f8:	69bb      	ldr	r3, [r7, #24]
 800c5fa:	015a      	lsls	r2, r3, #5
 800c5fc:	69fb      	ldr	r3, [r7, #28]
 800c5fe:	4413      	add	r3, r2
 800c600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c604:	691a      	ldr	r2, [r3, #16]
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	6959      	ldr	r1, [r3, #20]
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	689b      	ldr	r3, [r3, #8]
 800c60e:	440b      	add	r3, r1
 800c610:	1e59      	subs	r1, r3, #1
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	689b      	ldr	r3, [r3, #8]
 800c616:	fbb1 f3f3 	udiv	r3, r1, r3
 800c61a:	04d9      	lsls	r1, r3, #19
 800c61c:	4b7a      	ldr	r3, [pc, #488]	; (800c808 <USB_EPStartXfer+0x2e4>)
 800c61e:	400b      	ands	r3, r1
 800c620:	69b9      	ldr	r1, [r7, #24]
 800c622:	0148      	lsls	r0, r1, #5
 800c624:	69f9      	ldr	r1, [r7, #28]
 800c626:	4401      	add	r1, r0
 800c628:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c62c:	4313      	orrs	r3, r2
 800c62e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c630:	69bb      	ldr	r3, [r7, #24]
 800c632:	015a      	lsls	r2, r3, #5
 800c634:	69fb      	ldr	r3, [r7, #28]
 800c636:	4413      	add	r3, r2
 800c638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c63c:	691a      	ldr	r2, [r3, #16]
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	695b      	ldr	r3, [r3, #20]
 800c642:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c646:	69b9      	ldr	r1, [r7, #24]
 800c648:	0148      	lsls	r0, r1, #5
 800c64a:	69f9      	ldr	r1, [r7, #28]
 800c64c:	4401      	add	r1, r0
 800c64e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c652:	4313      	orrs	r3, r2
 800c654:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	78db      	ldrb	r3, [r3, #3]
 800c65a:	2b01      	cmp	r3, #1
 800c65c:	d11f      	bne.n	800c69e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c65e:	69bb      	ldr	r3, [r7, #24]
 800c660:	015a      	lsls	r2, r3, #5
 800c662:	69fb      	ldr	r3, [r7, #28]
 800c664:	4413      	add	r3, r2
 800c666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c66a:	691b      	ldr	r3, [r3, #16]
 800c66c:	69ba      	ldr	r2, [r7, #24]
 800c66e:	0151      	lsls	r1, r2, #5
 800c670:	69fa      	ldr	r2, [r7, #28]
 800c672:	440a      	add	r2, r1
 800c674:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c678:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c67c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c67e:	69bb      	ldr	r3, [r7, #24]
 800c680:	015a      	lsls	r2, r3, #5
 800c682:	69fb      	ldr	r3, [r7, #28]
 800c684:	4413      	add	r3, r2
 800c686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c68a:	691b      	ldr	r3, [r3, #16]
 800c68c:	69ba      	ldr	r2, [r7, #24]
 800c68e:	0151      	lsls	r1, r2, #5
 800c690:	69fa      	ldr	r2, [r7, #28]
 800c692:	440a      	add	r2, r1
 800c694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c698:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c69c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c69e:	79fb      	ldrb	r3, [r7, #7]
 800c6a0:	2b01      	cmp	r3, #1
 800c6a2:	d14b      	bne.n	800c73c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	691b      	ldr	r3, [r3, #16]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d009      	beq.n	800c6c0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c6ac:	69bb      	ldr	r3, [r7, #24]
 800c6ae:	015a      	lsls	r2, r3, #5
 800c6b0:	69fb      	ldr	r3, [r7, #28]
 800c6b2:	4413      	add	r3, r2
 800c6b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6b8:	461a      	mov	r2, r3
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	691b      	ldr	r3, [r3, #16]
 800c6be:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	78db      	ldrb	r3, [r3, #3]
 800c6c4:	2b01      	cmp	r3, #1
 800c6c6:	d128      	bne.n	800c71a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c6c8:	69fb      	ldr	r3, [r7, #28]
 800c6ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6ce:	689b      	ldr	r3, [r3, #8]
 800c6d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d110      	bne.n	800c6fa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c6d8:	69bb      	ldr	r3, [r7, #24]
 800c6da:	015a      	lsls	r2, r3, #5
 800c6dc:	69fb      	ldr	r3, [r7, #28]
 800c6de:	4413      	add	r3, r2
 800c6e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	69ba      	ldr	r2, [r7, #24]
 800c6e8:	0151      	lsls	r1, r2, #5
 800c6ea:	69fa      	ldr	r2, [r7, #28]
 800c6ec:	440a      	add	r2, r1
 800c6ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c6f6:	6013      	str	r3, [r2, #0]
 800c6f8:	e00f      	b.n	800c71a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c6fa:	69bb      	ldr	r3, [r7, #24]
 800c6fc:	015a      	lsls	r2, r3, #5
 800c6fe:	69fb      	ldr	r3, [r7, #28]
 800c700:	4413      	add	r3, r2
 800c702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	69ba      	ldr	r2, [r7, #24]
 800c70a:	0151      	lsls	r1, r2, #5
 800c70c:	69fa      	ldr	r2, [r7, #28]
 800c70e:	440a      	add	r2, r1
 800c710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c718:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c71a:	69bb      	ldr	r3, [r7, #24]
 800c71c:	015a      	lsls	r2, r3, #5
 800c71e:	69fb      	ldr	r3, [r7, #28]
 800c720:	4413      	add	r3, r2
 800c722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	69ba      	ldr	r2, [r7, #24]
 800c72a:	0151      	lsls	r1, r2, #5
 800c72c:	69fa      	ldr	r2, [r7, #28]
 800c72e:	440a      	add	r2, r1
 800c730:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c734:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c738:	6013      	str	r3, [r2, #0]
 800c73a:	e133      	b.n	800c9a4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c73c:	69bb      	ldr	r3, [r7, #24]
 800c73e:	015a      	lsls	r2, r3, #5
 800c740:	69fb      	ldr	r3, [r7, #28]
 800c742:	4413      	add	r3, r2
 800c744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	69ba      	ldr	r2, [r7, #24]
 800c74c:	0151      	lsls	r1, r2, #5
 800c74e:	69fa      	ldr	r2, [r7, #28]
 800c750:	440a      	add	r2, r1
 800c752:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c756:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c75a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	78db      	ldrb	r3, [r3, #3]
 800c760:	2b01      	cmp	r3, #1
 800c762:	d015      	beq.n	800c790 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	695b      	ldr	r3, [r3, #20]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	f000 811b 	beq.w	800c9a4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c76e:	69fb      	ldr	r3, [r7, #28]
 800c770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c774:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	781b      	ldrb	r3, [r3, #0]
 800c77a:	f003 030f 	and.w	r3, r3, #15
 800c77e:	2101      	movs	r1, #1
 800c780:	fa01 f303 	lsl.w	r3, r1, r3
 800c784:	69f9      	ldr	r1, [r7, #28]
 800c786:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c78a:	4313      	orrs	r3, r2
 800c78c:	634b      	str	r3, [r1, #52]	; 0x34
 800c78e:	e109      	b.n	800c9a4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c790:	69fb      	ldr	r3, [r7, #28]
 800c792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c796:	689b      	ldr	r3, [r3, #8]
 800c798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d110      	bne.n	800c7c2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c7a0:	69bb      	ldr	r3, [r7, #24]
 800c7a2:	015a      	lsls	r2, r3, #5
 800c7a4:	69fb      	ldr	r3, [r7, #28]
 800c7a6:	4413      	add	r3, r2
 800c7a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	69ba      	ldr	r2, [r7, #24]
 800c7b0:	0151      	lsls	r1, r2, #5
 800c7b2:	69fa      	ldr	r2, [r7, #28]
 800c7b4:	440a      	add	r2, r1
 800c7b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c7be:	6013      	str	r3, [r2, #0]
 800c7c0:	e00f      	b.n	800c7e2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c7c2:	69bb      	ldr	r3, [r7, #24]
 800c7c4:	015a      	lsls	r2, r3, #5
 800c7c6:	69fb      	ldr	r3, [r7, #28]
 800c7c8:	4413      	add	r3, r2
 800c7ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	69ba      	ldr	r2, [r7, #24]
 800c7d2:	0151      	lsls	r1, r2, #5
 800c7d4:	69fa      	ldr	r2, [r7, #28]
 800c7d6:	440a      	add	r2, r1
 800c7d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c7e0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	68d9      	ldr	r1, [r3, #12]
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	781a      	ldrb	r2, [r3, #0]
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	695b      	ldr	r3, [r3, #20]
 800c7ee:	b298      	uxth	r0, r3
 800c7f0:	79fb      	ldrb	r3, [r7, #7]
 800c7f2:	9300      	str	r3, [sp, #0]
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	68f8      	ldr	r0, [r7, #12]
 800c7f8:	f000 fa38 	bl	800cc6c <USB_WritePacket>
 800c7fc:	e0d2      	b.n	800c9a4 <USB_EPStartXfer+0x480>
 800c7fe:	bf00      	nop
 800c800:	e007ffff 	.word	0xe007ffff
 800c804:	fff80000 	.word	0xfff80000
 800c808:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c80c:	69bb      	ldr	r3, [r7, #24]
 800c80e:	015a      	lsls	r2, r3, #5
 800c810:	69fb      	ldr	r3, [r7, #28]
 800c812:	4413      	add	r3, r2
 800c814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c818:	691a      	ldr	r2, [r3, #16]
 800c81a:	69bb      	ldr	r3, [r7, #24]
 800c81c:	0159      	lsls	r1, r3, #5
 800c81e:	69fb      	ldr	r3, [r7, #28]
 800c820:	440b      	add	r3, r1
 800c822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c826:	4619      	mov	r1, r3
 800c828:	4b61      	ldr	r3, [pc, #388]	; (800c9b0 <USB_EPStartXfer+0x48c>)
 800c82a:	4013      	ands	r3, r2
 800c82c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c82e:	69bb      	ldr	r3, [r7, #24]
 800c830:	015a      	lsls	r2, r3, #5
 800c832:	69fb      	ldr	r3, [r7, #28]
 800c834:	4413      	add	r3, r2
 800c836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c83a:	691a      	ldr	r2, [r3, #16]
 800c83c:	69bb      	ldr	r3, [r7, #24]
 800c83e:	0159      	lsls	r1, r3, #5
 800c840:	69fb      	ldr	r3, [r7, #28]
 800c842:	440b      	add	r3, r1
 800c844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c848:	4619      	mov	r1, r3
 800c84a:	4b5a      	ldr	r3, [pc, #360]	; (800c9b4 <USB_EPStartXfer+0x490>)
 800c84c:	4013      	ands	r3, r2
 800c84e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	695b      	ldr	r3, [r3, #20]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d123      	bne.n	800c8a0 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c858:	69bb      	ldr	r3, [r7, #24]
 800c85a:	015a      	lsls	r2, r3, #5
 800c85c:	69fb      	ldr	r3, [r7, #28]
 800c85e:	4413      	add	r3, r2
 800c860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c864:	691a      	ldr	r2, [r3, #16]
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	689b      	ldr	r3, [r3, #8]
 800c86a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c86e:	69b9      	ldr	r1, [r7, #24]
 800c870:	0148      	lsls	r0, r1, #5
 800c872:	69f9      	ldr	r1, [r7, #28]
 800c874:	4401      	add	r1, r0
 800c876:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c87a:	4313      	orrs	r3, r2
 800c87c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c87e:	69bb      	ldr	r3, [r7, #24]
 800c880:	015a      	lsls	r2, r3, #5
 800c882:	69fb      	ldr	r3, [r7, #28]
 800c884:	4413      	add	r3, r2
 800c886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c88a:	691b      	ldr	r3, [r3, #16]
 800c88c:	69ba      	ldr	r2, [r7, #24]
 800c88e:	0151      	lsls	r1, r2, #5
 800c890:	69fa      	ldr	r2, [r7, #28]
 800c892:	440a      	add	r2, r1
 800c894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c898:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c89c:	6113      	str	r3, [r2, #16]
 800c89e:	e033      	b.n	800c908 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	695a      	ldr	r2, [r3, #20]
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	689b      	ldr	r3, [r3, #8]
 800c8a8:	4413      	add	r3, r2
 800c8aa:	1e5a      	subs	r2, r3, #1
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	689b      	ldr	r3, [r3, #8]
 800c8b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8b4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c8b6:	69bb      	ldr	r3, [r7, #24]
 800c8b8:	015a      	lsls	r2, r3, #5
 800c8ba:	69fb      	ldr	r3, [r7, #28]
 800c8bc:	4413      	add	r3, r2
 800c8be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8c2:	691a      	ldr	r2, [r3, #16]
 800c8c4:	8afb      	ldrh	r3, [r7, #22]
 800c8c6:	04d9      	lsls	r1, r3, #19
 800c8c8:	4b3b      	ldr	r3, [pc, #236]	; (800c9b8 <USB_EPStartXfer+0x494>)
 800c8ca:	400b      	ands	r3, r1
 800c8cc:	69b9      	ldr	r1, [r7, #24]
 800c8ce:	0148      	lsls	r0, r1, #5
 800c8d0:	69f9      	ldr	r1, [r7, #28]
 800c8d2:	4401      	add	r1, r0
 800c8d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c8d8:	4313      	orrs	r3, r2
 800c8da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800c8dc:	69bb      	ldr	r3, [r7, #24]
 800c8de:	015a      	lsls	r2, r3, #5
 800c8e0:	69fb      	ldr	r3, [r7, #28]
 800c8e2:	4413      	add	r3, r2
 800c8e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8e8:	691a      	ldr	r2, [r3, #16]
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	689b      	ldr	r3, [r3, #8]
 800c8ee:	8af9      	ldrh	r1, [r7, #22]
 800c8f0:	fb01 f303 	mul.w	r3, r1, r3
 800c8f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c8f8:	69b9      	ldr	r1, [r7, #24]
 800c8fa:	0148      	lsls	r0, r1, #5
 800c8fc:	69f9      	ldr	r1, [r7, #28]
 800c8fe:	4401      	add	r1, r0
 800c900:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c904:	4313      	orrs	r3, r2
 800c906:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c908:	79fb      	ldrb	r3, [r7, #7]
 800c90a:	2b01      	cmp	r3, #1
 800c90c:	d10d      	bne.n	800c92a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	68db      	ldr	r3, [r3, #12]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d009      	beq.n	800c92a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	68d9      	ldr	r1, [r3, #12]
 800c91a:	69bb      	ldr	r3, [r7, #24]
 800c91c:	015a      	lsls	r2, r3, #5
 800c91e:	69fb      	ldr	r3, [r7, #28]
 800c920:	4413      	add	r3, r2
 800c922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c926:	460a      	mov	r2, r1
 800c928:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	78db      	ldrb	r3, [r3, #3]
 800c92e:	2b01      	cmp	r3, #1
 800c930:	d128      	bne.n	800c984 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c932:	69fb      	ldr	r3, [r7, #28]
 800c934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c938:	689b      	ldr	r3, [r3, #8]
 800c93a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d110      	bne.n	800c964 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c942:	69bb      	ldr	r3, [r7, #24]
 800c944:	015a      	lsls	r2, r3, #5
 800c946:	69fb      	ldr	r3, [r7, #28]
 800c948:	4413      	add	r3, r2
 800c94a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	69ba      	ldr	r2, [r7, #24]
 800c952:	0151      	lsls	r1, r2, #5
 800c954:	69fa      	ldr	r2, [r7, #28]
 800c956:	440a      	add	r2, r1
 800c958:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c95c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c960:	6013      	str	r3, [r2, #0]
 800c962:	e00f      	b.n	800c984 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c964:	69bb      	ldr	r3, [r7, #24]
 800c966:	015a      	lsls	r2, r3, #5
 800c968:	69fb      	ldr	r3, [r7, #28]
 800c96a:	4413      	add	r3, r2
 800c96c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	69ba      	ldr	r2, [r7, #24]
 800c974:	0151      	lsls	r1, r2, #5
 800c976:	69fa      	ldr	r2, [r7, #28]
 800c978:	440a      	add	r2, r1
 800c97a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c97e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c982:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c984:	69bb      	ldr	r3, [r7, #24]
 800c986:	015a      	lsls	r2, r3, #5
 800c988:	69fb      	ldr	r3, [r7, #28]
 800c98a:	4413      	add	r3, r2
 800c98c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	69ba      	ldr	r2, [r7, #24]
 800c994:	0151      	lsls	r1, r2, #5
 800c996:	69fa      	ldr	r2, [r7, #28]
 800c998:	440a      	add	r2, r1
 800c99a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c99e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c9a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c9a4:	2300      	movs	r3, #0
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3720      	adds	r7, #32
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}
 800c9ae:	bf00      	nop
 800c9b0:	fff80000 	.word	0xfff80000
 800c9b4:	e007ffff 	.word	0xe007ffff
 800c9b8:	1ff80000 	.word	0x1ff80000

0800c9bc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b087      	sub	sp, #28
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	60f8      	str	r0, [r7, #12]
 800c9c4:	60b9      	str	r1, [r7, #8]
 800c9c6:	4613      	mov	r3, r2
 800c9c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	781b      	ldrb	r3, [r3, #0]
 800c9d2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	785b      	ldrb	r3, [r3, #1]
 800c9d8:	2b01      	cmp	r3, #1
 800c9da:	f040 80cd 	bne.w	800cb78 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	695b      	ldr	r3, [r3, #20]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d132      	bne.n	800ca4c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	015a      	lsls	r2, r3, #5
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	4413      	add	r3, r2
 800c9ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9f2:	691a      	ldr	r2, [r3, #16]
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	0159      	lsls	r1, r3, #5
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	440b      	add	r3, r1
 800c9fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca00:	4619      	mov	r1, r3
 800ca02:	4b98      	ldr	r3, [pc, #608]	; (800cc64 <USB_EP0StartXfer+0x2a8>)
 800ca04:	4013      	ands	r3, r2
 800ca06:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ca08:	693b      	ldr	r3, [r7, #16]
 800ca0a:	015a      	lsls	r2, r3, #5
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	4413      	add	r3, r2
 800ca10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca14:	691b      	ldr	r3, [r3, #16]
 800ca16:	693a      	ldr	r2, [r7, #16]
 800ca18:	0151      	lsls	r1, r2, #5
 800ca1a:	697a      	ldr	r2, [r7, #20]
 800ca1c:	440a      	add	r2, r1
 800ca1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ca26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	015a      	lsls	r2, r3, #5
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	4413      	add	r3, r2
 800ca30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca34:	691a      	ldr	r2, [r3, #16]
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	0159      	lsls	r1, r3, #5
 800ca3a:	697b      	ldr	r3, [r7, #20]
 800ca3c:	440b      	add	r3, r1
 800ca3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca42:	4619      	mov	r1, r3
 800ca44:	4b88      	ldr	r3, [pc, #544]	; (800cc68 <USB_EP0StartXfer+0x2ac>)
 800ca46:	4013      	ands	r3, r2
 800ca48:	610b      	str	r3, [r1, #16]
 800ca4a:	e04e      	b.n	800caea <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	015a      	lsls	r2, r3, #5
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	4413      	add	r3, r2
 800ca54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca58:	691a      	ldr	r2, [r3, #16]
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	0159      	lsls	r1, r3, #5
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	440b      	add	r3, r1
 800ca62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca66:	4619      	mov	r1, r3
 800ca68:	4b7f      	ldr	r3, [pc, #508]	; (800cc68 <USB_EP0StartXfer+0x2ac>)
 800ca6a:	4013      	ands	r3, r2
 800ca6c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ca6e:	693b      	ldr	r3, [r7, #16]
 800ca70:	015a      	lsls	r2, r3, #5
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	4413      	add	r3, r2
 800ca76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca7a:	691a      	ldr	r2, [r3, #16]
 800ca7c:	693b      	ldr	r3, [r7, #16]
 800ca7e:	0159      	lsls	r1, r3, #5
 800ca80:	697b      	ldr	r3, [r7, #20]
 800ca82:	440b      	add	r3, r1
 800ca84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca88:	4619      	mov	r1, r3
 800ca8a:	4b76      	ldr	r3, [pc, #472]	; (800cc64 <USB_EP0StartXfer+0x2a8>)
 800ca8c:	4013      	ands	r3, r2
 800ca8e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	695a      	ldr	r2, [r3, #20]
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	689b      	ldr	r3, [r3, #8]
 800ca98:	429a      	cmp	r2, r3
 800ca9a:	d903      	bls.n	800caa4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	689a      	ldr	r2, [r3, #8]
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800caa4:	693b      	ldr	r3, [r7, #16]
 800caa6:	015a      	lsls	r2, r3, #5
 800caa8:	697b      	ldr	r3, [r7, #20]
 800caaa:	4413      	add	r3, r2
 800caac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cab0:	691b      	ldr	r3, [r3, #16]
 800cab2:	693a      	ldr	r2, [r7, #16]
 800cab4:	0151      	lsls	r1, r2, #5
 800cab6:	697a      	ldr	r2, [r7, #20]
 800cab8:	440a      	add	r2, r1
 800caba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cabe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cac2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800cac4:	693b      	ldr	r3, [r7, #16]
 800cac6:	015a      	lsls	r2, r3, #5
 800cac8:	697b      	ldr	r3, [r7, #20]
 800caca:	4413      	add	r3, r2
 800cacc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cad0:	691a      	ldr	r2, [r3, #16]
 800cad2:	68bb      	ldr	r3, [r7, #8]
 800cad4:	695b      	ldr	r3, [r3, #20]
 800cad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cada:	6939      	ldr	r1, [r7, #16]
 800cadc:	0148      	lsls	r0, r1, #5
 800cade:	6979      	ldr	r1, [r7, #20]
 800cae0:	4401      	add	r1, r0
 800cae2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cae6:	4313      	orrs	r3, r2
 800cae8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800caea:	79fb      	ldrb	r3, [r7, #7]
 800caec:	2b01      	cmp	r3, #1
 800caee:	d11e      	bne.n	800cb2e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	691b      	ldr	r3, [r3, #16]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d009      	beq.n	800cb0c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800caf8:	693b      	ldr	r3, [r7, #16]
 800cafa:	015a      	lsls	r2, r3, #5
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	4413      	add	r3, r2
 800cb00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb04:	461a      	mov	r2, r3
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	691b      	ldr	r3, [r3, #16]
 800cb0a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cb0c:	693b      	ldr	r3, [r7, #16]
 800cb0e:	015a      	lsls	r2, r3, #5
 800cb10:	697b      	ldr	r3, [r7, #20]
 800cb12:	4413      	add	r3, r2
 800cb14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	693a      	ldr	r2, [r7, #16]
 800cb1c:	0151      	lsls	r1, r2, #5
 800cb1e:	697a      	ldr	r2, [r7, #20]
 800cb20:	440a      	add	r2, r1
 800cb22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb26:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cb2a:	6013      	str	r3, [r2, #0]
 800cb2c:	e092      	b.n	800cc54 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cb2e:	693b      	ldr	r3, [r7, #16]
 800cb30:	015a      	lsls	r2, r3, #5
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	4413      	add	r3, r2
 800cb36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	693a      	ldr	r2, [r7, #16]
 800cb3e:	0151      	lsls	r1, r2, #5
 800cb40:	697a      	ldr	r2, [r7, #20]
 800cb42:	440a      	add	r2, r1
 800cb44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cb4c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	695b      	ldr	r3, [r3, #20]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d07e      	beq.n	800cc54 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	f003 030f 	and.w	r3, r3, #15
 800cb66:	2101      	movs	r1, #1
 800cb68:	fa01 f303 	lsl.w	r3, r1, r3
 800cb6c:	6979      	ldr	r1, [r7, #20]
 800cb6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cb72:	4313      	orrs	r3, r2
 800cb74:	634b      	str	r3, [r1, #52]	; 0x34
 800cb76:	e06d      	b.n	800cc54 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800cb78:	693b      	ldr	r3, [r7, #16]
 800cb7a:	015a      	lsls	r2, r3, #5
 800cb7c:	697b      	ldr	r3, [r7, #20]
 800cb7e:	4413      	add	r3, r2
 800cb80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb84:	691a      	ldr	r2, [r3, #16]
 800cb86:	693b      	ldr	r3, [r7, #16]
 800cb88:	0159      	lsls	r1, r3, #5
 800cb8a:	697b      	ldr	r3, [r7, #20]
 800cb8c:	440b      	add	r3, r1
 800cb8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb92:	4619      	mov	r1, r3
 800cb94:	4b34      	ldr	r3, [pc, #208]	; (800cc68 <USB_EP0StartXfer+0x2ac>)
 800cb96:	4013      	ands	r3, r2
 800cb98:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	015a      	lsls	r2, r3, #5
 800cb9e:	697b      	ldr	r3, [r7, #20]
 800cba0:	4413      	add	r3, r2
 800cba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cba6:	691a      	ldr	r2, [r3, #16]
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	0159      	lsls	r1, r3, #5
 800cbac:	697b      	ldr	r3, [r7, #20]
 800cbae:	440b      	add	r3, r1
 800cbb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbb4:	4619      	mov	r1, r3
 800cbb6:	4b2b      	ldr	r3, [pc, #172]	; (800cc64 <USB_EP0StartXfer+0x2a8>)
 800cbb8:	4013      	ands	r3, r2
 800cbba:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	695b      	ldr	r3, [r3, #20]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d003      	beq.n	800cbcc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	689a      	ldr	r2, [r3, #8]
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cbcc:	693b      	ldr	r3, [r7, #16]
 800cbce:	015a      	lsls	r2, r3, #5
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	4413      	add	r3, r2
 800cbd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbd8:	691b      	ldr	r3, [r3, #16]
 800cbda:	693a      	ldr	r2, [r7, #16]
 800cbdc:	0151      	lsls	r1, r2, #5
 800cbde:	697a      	ldr	r2, [r7, #20]
 800cbe0:	440a      	add	r2, r1
 800cbe2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbe6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cbea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	015a      	lsls	r2, r3, #5
 800cbf0:	697b      	ldr	r3, [r7, #20]
 800cbf2:	4413      	add	r3, r2
 800cbf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbf8:	691a      	ldr	r2, [r3, #16]
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	689b      	ldr	r3, [r3, #8]
 800cbfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cc02:	6939      	ldr	r1, [r7, #16]
 800cc04:	0148      	lsls	r0, r1, #5
 800cc06:	6979      	ldr	r1, [r7, #20]
 800cc08:	4401      	add	r1, r0
 800cc0a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cc0e:	4313      	orrs	r3, r2
 800cc10:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800cc12:	79fb      	ldrb	r3, [r7, #7]
 800cc14:	2b01      	cmp	r3, #1
 800cc16:	d10d      	bne.n	800cc34 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	68db      	ldr	r3, [r3, #12]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d009      	beq.n	800cc34 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	68d9      	ldr	r1, [r3, #12]
 800cc24:	693b      	ldr	r3, [r7, #16]
 800cc26:	015a      	lsls	r2, r3, #5
 800cc28:	697b      	ldr	r3, [r7, #20]
 800cc2a:	4413      	add	r3, r2
 800cc2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc30:	460a      	mov	r2, r1
 800cc32:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cc34:	693b      	ldr	r3, [r7, #16]
 800cc36:	015a      	lsls	r2, r3, #5
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	4413      	add	r3, r2
 800cc3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	693a      	ldr	r2, [r7, #16]
 800cc44:	0151      	lsls	r1, r2, #5
 800cc46:	697a      	ldr	r2, [r7, #20]
 800cc48:	440a      	add	r2, r1
 800cc4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cc52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cc54:	2300      	movs	r3, #0
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	371c      	adds	r7, #28
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc60:	4770      	bx	lr
 800cc62:	bf00      	nop
 800cc64:	e007ffff 	.word	0xe007ffff
 800cc68:	fff80000 	.word	0xfff80000

0800cc6c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b089      	sub	sp, #36	; 0x24
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	60f8      	str	r0, [r7, #12]
 800cc74:	60b9      	str	r1, [r7, #8]
 800cc76:	4611      	mov	r1, r2
 800cc78:	461a      	mov	r2, r3
 800cc7a:	460b      	mov	r3, r1
 800cc7c:	71fb      	strb	r3, [r7, #7]
 800cc7e:	4613      	mov	r3, r2
 800cc80:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800cc8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d11a      	bne.n	800ccc8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800cc92:	88bb      	ldrh	r3, [r7, #4]
 800cc94:	3303      	adds	r3, #3
 800cc96:	089b      	lsrs	r3, r3, #2
 800cc98:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	61bb      	str	r3, [r7, #24]
 800cc9e:	e00f      	b.n	800ccc0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cca0:	79fb      	ldrb	r3, [r7, #7]
 800cca2:	031a      	lsls	r2, r3, #12
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	4413      	add	r3, r2
 800cca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccac:	461a      	mov	r2, r3
 800ccae:	69fb      	ldr	r3, [r7, #28]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ccb4:	69fb      	ldr	r3, [r7, #28]
 800ccb6:	3304      	adds	r3, #4
 800ccb8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ccba:	69bb      	ldr	r3, [r7, #24]
 800ccbc:	3301      	adds	r3, #1
 800ccbe:	61bb      	str	r3, [r7, #24]
 800ccc0:	69ba      	ldr	r2, [r7, #24]
 800ccc2:	693b      	ldr	r3, [r7, #16]
 800ccc4:	429a      	cmp	r2, r3
 800ccc6:	d3eb      	bcc.n	800cca0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ccc8:	2300      	movs	r3, #0
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3724      	adds	r7, #36	; 0x24
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd4:	4770      	bx	lr

0800ccd6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ccd6:	b480      	push	{r7}
 800ccd8:	b089      	sub	sp, #36	; 0x24
 800ccda:	af00      	add	r7, sp, #0
 800ccdc:	60f8      	str	r0, [r7, #12]
 800ccde:	60b9      	str	r1, [r7, #8]
 800cce0:	4613      	mov	r3, r2
 800cce2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800ccec:	88fb      	ldrh	r3, [r7, #6]
 800ccee:	3303      	adds	r3, #3
 800ccf0:	089b      	lsrs	r3, r3, #2
 800ccf2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	61bb      	str	r3, [r7, #24]
 800ccf8:	e00b      	b.n	800cd12 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd00:	681a      	ldr	r2, [r3, #0]
 800cd02:	69fb      	ldr	r3, [r7, #28]
 800cd04:	601a      	str	r2, [r3, #0]
    pDest++;
 800cd06:	69fb      	ldr	r3, [r7, #28]
 800cd08:	3304      	adds	r3, #4
 800cd0a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800cd0c:	69bb      	ldr	r3, [r7, #24]
 800cd0e:	3301      	adds	r3, #1
 800cd10:	61bb      	str	r3, [r7, #24]
 800cd12:	69ba      	ldr	r2, [r7, #24]
 800cd14:	693b      	ldr	r3, [r7, #16]
 800cd16:	429a      	cmp	r2, r3
 800cd18:	d3ef      	bcc.n	800ccfa <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800cd1a:	69fb      	ldr	r3, [r7, #28]
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3724      	adds	r7, #36	; 0x24
 800cd20:	46bd      	mov	sp, r7
 800cd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd26:	4770      	bx	lr

0800cd28 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cd28:	b480      	push	{r7}
 800cd2a:	b085      	sub	sp, #20
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
 800cd30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	785b      	ldrb	r3, [r3, #1]
 800cd40:	2b01      	cmp	r3, #1
 800cd42:	d12c      	bne.n	800cd9e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	015a      	lsls	r2, r3, #5
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	4413      	add	r3, r2
 800cd4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	db12      	blt.n	800cd7c <USB_EPSetStall+0x54>
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d00f      	beq.n	800cd7c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	015a      	lsls	r2, r3, #5
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	4413      	add	r3, r2
 800cd64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	68ba      	ldr	r2, [r7, #8]
 800cd6c:	0151      	lsls	r1, r2, #5
 800cd6e:	68fa      	ldr	r2, [r7, #12]
 800cd70:	440a      	add	r2, r1
 800cd72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cd7a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	015a      	lsls	r2, r3, #5
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	4413      	add	r3, r2
 800cd84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	68ba      	ldr	r2, [r7, #8]
 800cd8c:	0151      	lsls	r1, r2, #5
 800cd8e:	68fa      	ldr	r2, [r7, #12]
 800cd90:	440a      	add	r2, r1
 800cd92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cd9a:	6013      	str	r3, [r2, #0]
 800cd9c:	e02b      	b.n	800cdf6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	015a      	lsls	r2, r3, #5
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	4413      	add	r3, r2
 800cda6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	db12      	blt.n	800cdd6 <USB_EPSetStall+0xae>
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d00f      	beq.n	800cdd6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	015a      	lsls	r2, r3, #5
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	4413      	add	r3, r2
 800cdbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	68ba      	ldr	r2, [r7, #8]
 800cdc6:	0151      	lsls	r1, r2, #5
 800cdc8:	68fa      	ldr	r2, [r7, #12]
 800cdca:	440a      	add	r2, r1
 800cdcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cdd0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cdd4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	015a      	lsls	r2, r3, #5
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	4413      	add	r3, r2
 800cdde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	68ba      	ldr	r2, [r7, #8]
 800cde6:	0151      	lsls	r1, r2, #5
 800cde8:	68fa      	ldr	r2, [r7, #12]
 800cdea:	440a      	add	r2, r1
 800cdec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cdf0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cdf4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cdf6:	2300      	movs	r3, #0
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3714      	adds	r7, #20
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce02:	4770      	bx	lr

0800ce04 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ce04:	b480      	push	{r7}
 800ce06:	b085      	sub	sp, #20
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
 800ce0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	781b      	ldrb	r3, [r3, #0]
 800ce16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	785b      	ldrb	r3, [r3, #1]
 800ce1c:	2b01      	cmp	r3, #1
 800ce1e:	d128      	bne.n	800ce72 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	015a      	lsls	r2, r3, #5
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	4413      	add	r3, r2
 800ce28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	68ba      	ldr	r2, [r7, #8]
 800ce30:	0151      	lsls	r1, r2, #5
 800ce32:	68fa      	ldr	r2, [r7, #12]
 800ce34:	440a      	add	r2, r1
 800ce36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ce3e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	78db      	ldrb	r3, [r3, #3]
 800ce44:	2b03      	cmp	r3, #3
 800ce46:	d003      	beq.n	800ce50 <USB_EPClearStall+0x4c>
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	78db      	ldrb	r3, [r3, #3]
 800ce4c:	2b02      	cmp	r3, #2
 800ce4e:	d138      	bne.n	800cec2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	015a      	lsls	r2, r3, #5
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	4413      	add	r3, r2
 800ce58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	68ba      	ldr	r2, [r7, #8]
 800ce60:	0151      	lsls	r1, r2, #5
 800ce62:	68fa      	ldr	r2, [r7, #12]
 800ce64:	440a      	add	r2, r1
 800ce66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ce6e:	6013      	str	r3, [r2, #0]
 800ce70:	e027      	b.n	800cec2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	015a      	lsls	r2, r3, #5
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	4413      	add	r3, r2
 800ce7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	68ba      	ldr	r2, [r7, #8]
 800ce82:	0151      	lsls	r1, r2, #5
 800ce84:	68fa      	ldr	r2, [r7, #12]
 800ce86:	440a      	add	r2, r1
 800ce88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ce90:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	78db      	ldrb	r3, [r3, #3]
 800ce96:	2b03      	cmp	r3, #3
 800ce98:	d003      	beq.n	800cea2 <USB_EPClearStall+0x9e>
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	78db      	ldrb	r3, [r3, #3]
 800ce9e:	2b02      	cmp	r3, #2
 800cea0:	d10f      	bne.n	800cec2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	015a      	lsls	r2, r3, #5
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	4413      	add	r3, r2
 800ceaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	68ba      	ldr	r2, [r7, #8]
 800ceb2:	0151      	lsls	r1, r2, #5
 800ceb4:	68fa      	ldr	r2, [r7, #12]
 800ceb6:	440a      	add	r2, r1
 800ceb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cec0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800cec2:	2300      	movs	r3, #0
}
 800cec4:	4618      	mov	r0, r3
 800cec6:	3714      	adds	r7, #20
 800cec8:	46bd      	mov	sp, r7
 800ceca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cece:	4770      	bx	lr

0800ced0 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b086      	sub	sp, #24
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	613b      	str	r3, [r7, #16]
  uint32_t i;

  /* Clear Pending interrupt */
  for (i = 0U; i < 15U; i++)
 800cedc:	2300      	movs	r3, #0
 800cede:	617b      	str	r3, [r7, #20]
 800cee0:	e016      	b.n	800cf10 <USB_StopDevice+0x40>
  {
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800cee2:	697b      	ldr	r3, [r7, #20]
 800cee4:	015a      	lsls	r2, r3, #5
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	4413      	add	r3, r2
 800ceea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ceee:	461a      	mov	r2, r3
 800cef0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cef4:	6093      	str	r3, [r2, #8]
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	015a      	lsls	r2, r3, #5
 800cefa:	693b      	ldr	r3, [r7, #16]
 800cefc:	4413      	add	r3, r2
 800cefe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf02:	461a      	mov	r2, r3
 800cf04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cf08:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < 15U; i++)
 800cf0a:	697b      	ldr	r3, [r7, #20]
 800cf0c:	3301      	adds	r3, #1
 800cf0e:	617b      	str	r3, [r7, #20]
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	2b0e      	cmp	r3, #14
 800cf14:	d9e5      	bls.n	800cee2 <USB_StopDevice+0x12>
  }

  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf1c:	461a      	mov	r2, r3
 800cf1e:	2300      	movs	r3, #0
 800cf20:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK  = 0U;
 800cf22:	693b      	ldr	r3, [r7, #16]
 800cf24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf28:	461a      	mov	r2, r3
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cf2e:	693b      	ldr	r3, [r7, #16]
 800cf30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf34:	461a      	mov	r2, r3
 800cf36:	2300      	movs	r3, #0
 800cf38:	61d3      	str	r3, [r2, #28]

  /* Flush the FIFO */
  ret = USB_FlushRxFifo(USBx);
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f7ff f986 	bl	800c24c <USB_FlushRxFifo>
 800cf40:	4603      	mov	r3, r0
 800cf42:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800cf44:	7bfb      	ldrb	r3, [r7, #15]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d001      	beq.n	800cf4e <USB_StopDevice+0x7e>
  {
    return ret;
 800cf4a:	7bfb      	ldrb	r3, [r7, #15]
 800cf4c:	e00b      	b.n	800cf66 <USB_StopDevice+0x96>
  }

  ret = USB_FlushTxFifo(USBx,  0x10U);
 800cf4e:	2110      	movs	r1, #16
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	f7ff f955 	bl	800c200 <USB_FlushTxFifo>
 800cf56:	4603      	mov	r3, r0
 800cf58:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800cf5a:	7bfb      	ldrb	r3, [r7, #15]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d001      	beq.n	800cf64 <USB_StopDevice+0x94>
  {
    return ret;
 800cf60:	7bfb      	ldrb	r3, [r7, #15]
 800cf62:	e000      	b.n	800cf66 <USB_StopDevice+0x96>
  }

  return ret;
 800cf64:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	3718      	adds	r7, #24
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd80      	pop	{r7, pc}

0800cf6e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800cf6e:	b480      	push	{r7}
 800cf70:	b085      	sub	sp, #20
 800cf72:	af00      	add	r7, sp, #0
 800cf74:	6078      	str	r0, [r7, #4]
 800cf76:	460b      	mov	r3, r1
 800cf78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	68fa      	ldr	r2, [r7, #12]
 800cf88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf8c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cf90:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf98:	681a      	ldr	r2, [r3, #0]
 800cf9a:	78fb      	ldrb	r3, [r7, #3]
 800cf9c:	011b      	lsls	r3, r3, #4
 800cf9e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800cfa2:	68f9      	ldr	r1, [r7, #12]
 800cfa4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cfa8:	4313      	orrs	r3, r2
 800cfaa:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cfac:	2300      	movs	r3, #0
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3714      	adds	r7, #20
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb8:	4770      	bx	lr

0800cfba <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cfba:	b580      	push	{r7, lr}
 800cfbc:	b084      	sub	sp, #16
 800cfbe:	af00      	add	r7, sp, #0
 800cfc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfcc:	685b      	ldr	r3, [r3, #4]
 800cfce:	68fa      	ldr	r2, [r7, #12]
 800cfd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cfd4:	f023 0302 	bic.w	r3, r3, #2
 800cfd8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800cfda:	2003      	movs	r0, #3
 800cfdc:	f7f4 fa9a 	bl	8001514 <HAL_Delay>

  return HAL_OK;
 800cfe0:	2300      	movs	r3, #0
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3710      	adds	r7, #16
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}

0800cfea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cfea:	b580      	push	{r7, lr}
 800cfec:	b084      	sub	sp, #16
 800cfee:	af00      	add	r7, sp, #0
 800cff0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cffc:	685b      	ldr	r3, [r3, #4]
 800cffe:	68fa      	ldr	r2, [r7, #12]
 800d000:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d004:	f043 0302 	orr.w	r3, r3, #2
 800d008:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d00a:	2003      	movs	r0, #3
 800d00c:	f7f4 fa82 	bl	8001514 <HAL_Delay>

  return HAL_OK;
 800d010:	2300      	movs	r3, #0
}
 800d012:	4618      	mov	r0, r3
 800d014:	3710      	adds	r7, #16
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}

0800d01a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d01a:	b480      	push	{r7}
 800d01c:	b085      	sub	sp, #20
 800d01e:	af00      	add	r7, sp, #0
 800d020:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	695b      	ldr	r3, [r3, #20]
 800d026:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	699b      	ldr	r3, [r3, #24]
 800d02c:	68fa      	ldr	r2, [r7, #12]
 800d02e:	4013      	ands	r3, r2
 800d030:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d032:	68fb      	ldr	r3, [r7, #12]
}
 800d034:	4618      	mov	r0, r3
 800d036:	3714      	adds	r7, #20
 800d038:	46bd      	mov	sp, r7
 800d03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03e:	4770      	bx	lr

0800d040 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d040:	b480      	push	{r7}
 800d042:	b085      	sub	sp, #20
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d052:	699b      	ldr	r3, [r3, #24]
 800d054:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d05c:	69db      	ldr	r3, [r3, #28]
 800d05e:	68ba      	ldr	r2, [r7, #8]
 800d060:	4013      	ands	r3, r2
 800d062:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	0c1b      	lsrs	r3, r3, #16
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3714      	adds	r7, #20
 800d06c:	46bd      	mov	sp, r7
 800d06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d072:	4770      	bx	lr

0800d074 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d074:	b480      	push	{r7}
 800d076:	b085      	sub	sp, #20
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d086:	699b      	ldr	r3, [r3, #24]
 800d088:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d090:	69db      	ldr	r3, [r3, #28]
 800d092:	68ba      	ldr	r2, [r7, #8]
 800d094:	4013      	ands	r3, r2
 800d096:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d098:	68bb      	ldr	r3, [r7, #8]
 800d09a:	b29b      	uxth	r3, r3
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3714      	adds	r7, #20
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a6:	4770      	bx	lr

0800d0a8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d0a8:	b480      	push	{r7}
 800d0aa:	b085      	sub	sp, #20
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
 800d0b0:	460b      	mov	r3, r1
 800d0b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d0b8:	78fb      	ldrb	r3, [r7, #3]
 800d0ba:	015a      	lsls	r2, r3, #5
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	4413      	add	r3, r2
 800d0c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0c4:	689b      	ldr	r3, [r3, #8]
 800d0c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0ce:	695b      	ldr	r3, [r3, #20]
 800d0d0:	68ba      	ldr	r2, [r7, #8]
 800d0d2:	4013      	ands	r3, r2
 800d0d4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d0d6:	68bb      	ldr	r3, [r7, #8]
}
 800d0d8:	4618      	mov	r0, r3
 800d0da:	3714      	adds	r7, #20
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e2:	4770      	bx	lr

0800d0e4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	b087      	sub	sp, #28
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
 800d0ec:	460b      	mov	r3, r1
 800d0ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d0f4:	697b      	ldr	r3, [r7, #20]
 800d0f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0fa:	691b      	ldr	r3, [r3, #16]
 800d0fc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d106:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d108:	78fb      	ldrb	r3, [r7, #3]
 800d10a:	f003 030f 	and.w	r3, r3, #15
 800d10e:	68fa      	ldr	r2, [r7, #12]
 800d110:	fa22 f303 	lsr.w	r3, r2, r3
 800d114:	01db      	lsls	r3, r3, #7
 800d116:	b2db      	uxtb	r3, r3
 800d118:	693a      	ldr	r2, [r7, #16]
 800d11a:	4313      	orrs	r3, r2
 800d11c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d11e:	78fb      	ldrb	r3, [r7, #3]
 800d120:	015a      	lsls	r2, r3, #5
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	4413      	add	r3, r2
 800d126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d12a:	689b      	ldr	r3, [r3, #8]
 800d12c:	693a      	ldr	r2, [r7, #16]
 800d12e:	4013      	ands	r3, r2
 800d130:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d132:	68bb      	ldr	r3, [r7, #8]
}
 800d134:	4618      	mov	r0, r3
 800d136:	371c      	adds	r7, #28
 800d138:	46bd      	mov	sp, r7
 800d13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13e:	4770      	bx	lr

0800d140 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d140:	b480      	push	{r7}
 800d142:	b083      	sub	sp, #12
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	695b      	ldr	r3, [r3, #20]
 800d14c:	f003 0301 	and.w	r3, r3, #1
}
 800d150:	4618      	mov	r0, r3
 800d152:	370c      	adds	r7, #12
 800d154:	46bd      	mov	sp, r7
 800d156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15a:	4770      	bx	lr

0800d15c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d15c:	b480      	push	{r7}
 800d15e:	b085      	sub	sp, #20
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d16e:	681a      	ldr	r2, [r3, #0]
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d176:	4619      	mov	r1, r3
 800d178:	4b09      	ldr	r3, [pc, #36]	; (800d1a0 <USB_ActivateSetup+0x44>)
 800d17a:	4013      	ands	r3, r2
 800d17c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d184:	685b      	ldr	r3, [r3, #4]
 800d186:	68fa      	ldr	r2, [r7, #12]
 800d188:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d18c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d190:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d192:	2300      	movs	r3, #0
}
 800d194:	4618      	mov	r0, r3
 800d196:	3714      	adds	r7, #20
 800d198:	46bd      	mov	sp, r7
 800d19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19e:	4770      	bx	lr
 800d1a0:	fffff800 	.word	0xfffff800

0800d1a4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d1a4:	b480      	push	{r7}
 800d1a6:	b087      	sub	sp, #28
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	60f8      	str	r0, [r7, #12]
 800d1ac:	460b      	mov	r3, r1
 800d1ae:	607a      	str	r2, [r7, #4]
 800d1b0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	333c      	adds	r3, #60	; 0x3c
 800d1ba:	3304      	adds	r3, #4
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d1c0:	693b      	ldr	r3, [r7, #16]
 800d1c2:	4a26      	ldr	r2, [pc, #152]	; (800d25c <USB_EP0_OutStart+0xb8>)
 800d1c4:	4293      	cmp	r3, r2
 800d1c6:	d90a      	bls.n	800d1de <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d1d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d1d8:	d101      	bne.n	800d1de <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	e037      	b.n	800d24e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1e4:	461a      	mov	r2, r3
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d1ea:	697b      	ldr	r3, [r7, #20]
 800d1ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1f0:	691b      	ldr	r3, [r3, #16]
 800d1f2:	697a      	ldr	r2, [r7, #20]
 800d1f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d1fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d1fe:	697b      	ldr	r3, [r7, #20]
 800d200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d204:	691b      	ldr	r3, [r3, #16]
 800d206:	697a      	ldr	r2, [r7, #20]
 800d208:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d20c:	f043 0318 	orr.w	r3, r3, #24
 800d210:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d218:	691b      	ldr	r3, [r3, #16]
 800d21a:	697a      	ldr	r2, [r7, #20]
 800d21c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d220:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d224:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d226:	7afb      	ldrb	r3, [r7, #11]
 800d228:	2b01      	cmp	r3, #1
 800d22a:	d10f      	bne.n	800d24c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d22c:	697b      	ldr	r3, [r7, #20]
 800d22e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d232:	461a      	mov	r2, r3
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	697a      	ldr	r2, [r7, #20]
 800d242:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d246:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d24a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d24c:	2300      	movs	r3, #0
}
 800d24e:	4618      	mov	r0, r3
 800d250:	371c      	adds	r7, #28
 800d252:	46bd      	mov	sp, r7
 800d254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d258:	4770      	bx	lr
 800d25a:	bf00      	nop
 800d25c:	4f54300a 	.word	0x4f54300a

0800d260 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d260:	b480      	push	{r7}
 800d262:	b085      	sub	sp, #20
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d268:	2300      	movs	r3, #0
 800d26a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	3301      	adds	r3, #1
 800d270:	60fb      	str	r3, [r7, #12]
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	4a13      	ldr	r2, [pc, #76]	; (800d2c4 <USB_CoreReset+0x64>)
 800d276:	4293      	cmp	r3, r2
 800d278:	d901      	bls.n	800d27e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d27a:	2303      	movs	r3, #3
 800d27c:	e01b      	b.n	800d2b6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	691b      	ldr	r3, [r3, #16]
 800d282:	2b00      	cmp	r3, #0
 800d284:	daf2      	bge.n	800d26c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d286:	2300      	movs	r3, #0
 800d288:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	691b      	ldr	r3, [r3, #16]
 800d28e:	f043 0201 	orr.w	r2, r3, #1
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	3301      	adds	r3, #1
 800d29a:	60fb      	str	r3, [r7, #12]
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	4a09      	ldr	r2, [pc, #36]	; (800d2c4 <USB_CoreReset+0x64>)
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	d901      	bls.n	800d2a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d2a4:	2303      	movs	r3, #3
 800d2a6:	e006      	b.n	800d2b6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	691b      	ldr	r3, [r3, #16]
 800d2ac:	f003 0301 	and.w	r3, r3, #1
 800d2b0:	2b01      	cmp	r3, #1
 800d2b2:	d0f0      	beq.n	800d296 <USB_CoreReset+0x36>

  return HAL_OK;
 800d2b4:	2300      	movs	r3, #0
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	3714      	adds	r7, #20
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c0:	4770      	bx	lr
 800d2c2:	bf00      	nop
 800d2c4:	00030d40 	.word	0x00030d40

0800d2c8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d2cc:	4904      	ldr	r1, [pc, #16]	; (800d2e0 <MX_FATFS_Init+0x18>)
 800d2ce:	4805      	ldr	r0, [pc, #20]	; (800d2e4 <MX_FATFS_Init+0x1c>)
 800d2d0:	f007 fbe2 	bl	8014a98 <FATFS_LinkDriver>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	4b03      	ldr	r3, [pc, #12]	; (800d2e8 <MX_FATFS_Init+0x20>)
 800d2da:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800d2dc:	bf00      	nop
 800d2de:	bd80      	pop	{r7, pc}
 800d2e0:	240056dc 	.word	0x240056dc
 800d2e4:	08015940 	.word	0x08015940
 800d2e8:	240056d8 	.word	0x240056d8

0800d2ec <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d2ec:	b480      	push	{r7}
 800d2ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d2f0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fa:	4770      	bx	lr

0800d2fc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b082      	sub	sp, #8
 800d300:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d302:	2300      	movs	r3, #0
 800d304:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d306:	f000 f86b 	bl	800d3e0 <BSP_SD_IsDetected>
 800d30a:	4603      	mov	r3, r0
 800d30c:	2b01      	cmp	r3, #1
 800d30e:	d001      	beq.n	800d314 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d310:	2302      	movs	r3, #2
 800d312:	e005      	b.n	800d320 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d314:	4804      	ldr	r0, [pc, #16]	; (800d328 <BSP_SD_Init+0x2c>)
 800d316:	f7f9 fc5b 	bl	8006bd0 <HAL_SD_Init>
 800d31a:	4603      	mov	r3, r0
 800d31c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800d31e:	79fb      	ldrb	r3, [r7, #7]
}
 800d320:	4618      	mov	r0, r3
 800d322:	3708      	adds	r7, #8
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}
 800d328:	24001410 	.word	0x24001410

0800d32c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b088      	sub	sp, #32
 800d330:	af02      	add	r7, sp, #8
 800d332:	60f8      	str	r0, [r7, #12]
 800d334:	60b9      	str	r1, [r7, #8]
 800d336:	607a      	str	r2, [r7, #4]
 800d338:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d33a:	2300      	movs	r3, #0
 800d33c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	9300      	str	r3, [sp, #0]
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	68ba      	ldr	r2, [r7, #8]
 800d346:	68f9      	ldr	r1, [r7, #12]
 800d348:	4806      	ldr	r0, [pc, #24]	; (800d364 <BSP_SD_ReadBlocks+0x38>)
 800d34a:	f7f9 fd5f 	bl	8006e0c <HAL_SD_ReadBlocks>
 800d34e:	4603      	mov	r3, r0
 800d350:	2b00      	cmp	r3, #0
 800d352:	d001      	beq.n	800d358 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d354:	2301      	movs	r3, #1
 800d356:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800d358:	7dfb      	ldrb	r3, [r7, #23]
}
 800d35a:	4618      	mov	r0, r3
 800d35c:	3718      	adds	r7, #24
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd80      	pop	{r7, pc}
 800d362:	bf00      	nop
 800d364:	24001410 	.word	0x24001410

0800d368 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b088      	sub	sp, #32
 800d36c:	af02      	add	r7, sp, #8
 800d36e:	60f8      	str	r0, [r7, #12]
 800d370:	60b9      	str	r1, [r7, #8]
 800d372:	607a      	str	r2, [r7, #4]
 800d374:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d376:	2300      	movs	r3, #0
 800d378:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	9300      	str	r3, [sp, #0]
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	68ba      	ldr	r2, [r7, #8]
 800d382:	68f9      	ldr	r1, [r7, #12]
 800d384:	4806      	ldr	r0, [pc, #24]	; (800d3a0 <BSP_SD_WriteBlocks+0x38>)
 800d386:	f7f9 fecb 	bl	8007120 <HAL_SD_WriteBlocks>
 800d38a:	4603      	mov	r3, r0
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d001      	beq.n	800d394 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d390:	2301      	movs	r3, #1
 800d392:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800d394:	7dfb      	ldrb	r3, [r7, #23]
}
 800d396:	4618      	mov	r0, r3
 800d398:	3718      	adds	r7, #24
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd80      	pop	{r7, pc}
 800d39e:	bf00      	nop
 800d3a0:	24001410 	.word	0x24001410

0800d3a4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d3a8:	4805      	ldr	r0, [pc, #20]	; (800d3c0 <BSP_SD_GetCardState+0x1c>)
 800d3aa:	f7fa fb83 	bl	8007ab4 <HAL_SD_GetCardState>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	2b04      	cmp	r3, #4
 800d3b2:	bf14      	ite	ne
 800d3b4:	2301      	movne	r3, #1
 800d3b6:	2300      	moveq	r3, #0
 800d3b8:	b2db      	uxtb	r3, r3
}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	bd80      	pop	{r7, pc}
 800d3be:	bf00      	nop
 800d3c0:	24001410 	.word	0x24001410

0800d3c4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b082      	sub	sp, #8
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d3cc:	6879      	ldr	r1, [r7, #4]
 800d3ce:	4803      	ldr	r0, [pc, #12]	; (800d3dc <BSP_SD_GetCardInfo+0x18>)
 800d3d0:	f7fa fa9a 	bl	8007908 <HAL_SD_GetCardInfo>
}
 800d3d4:	bf00      	nop
 800d3d6:	3708      	adds	r7, #8
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}
 800d3dc:	24001410 	.word	0x24001410

0800d3e0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b082      	sub	sp, #8
 800d3e4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800d3ea:	f000 f80b 	bl	800d404 <BSP_PlatformIsDetected>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d101      	bne.n	800d3f8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d3f8:	79fb      	ldrb	r3, [r7, #7]
 800d3fa:	b2db      	uxtb	r3, r3
}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	3708      	adds	r7, #8
 800d400:	46bd      	mov	sp, r7
 800d402:	bd80      	pop	{r7, pc}

0800d404 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d404:	b580      	push	{r7, lr}
 800d406:	b082      	sub	sp, #8
 800d408:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d40a:	2301      	movs	r3, #1
 800d40c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d40e:	2120      	movs	r1, #32
 800d410:	4806      	ldr	r0, [pc, #24]	; (800d42c <BSP_PlatformIsDetected+0x28>)
 800d412:	f7f4 ff97 	bl	8002344 <HAL_GPIO_ReadPin>
 800d416:	4603      	mov	r3, r0
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d001      	beq.n	800d420 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800d41c:	2300      	movs	r3, #0
 800d41e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800d420:	79fb      	ldrb	r3, [r7, #7]
}  
 800d422:	4618      	mov	r0, r3
 800d424:	3708      	adds	r7, #8
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}
 800d42a:	bf00      	nop
 800d42c:	58021800 	.word	0x58021800

0800d430 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b082      	sub	sp, #8
 800d434:	af00      	add	r7, sp, #0
 800d436:	4603      	mov	r3, r0
 800d438:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d43a:	4b0b      	ldr	r3, [pc, #44]	; (800d468 <SD_CheckStatus+0x38>)
 800d43c:	2201      	movs	r2, #1
 800d43e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d440:	f7ff ffb0 	bl	800d3a4 <BSP_SD_GetCardState>
 800d444:	4603      	mov	r3, r0
 800d446:	2b00      	cmp	r3, #0
 800d448:	d107      	bne.n	800d45a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d44a:	4b07      	ldr	r3, [pc, #28]	; (800d468 <SD_CheckStatus+0x38>)
 800d44c:	781b      	ldrb	r3, [r3, #0]
 800d44e:	b2db      	uxtb	r3, r3
 800d450:	f023 0301 	bic.w	r3, r3, #1
 800d454:	b2da      	uxtb	r2, r3
 800d456:	4b04      	ldr	r3, [pc, #16]	; (800d468 <SD_CheckStatus+0x38>)
 800d458:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d45a:	4b03      	ldr	r3, [pc, #12]	; (800d468 <SD_CheckStatus+0x38>)
 800d45c:	781b      	ldrb	r3, [r3, #0]
 800d45e:	b2db      	uxtb	r3, r3
}
 800d460:	4618      	mov	r0, r3
 800d462:	3708      	adds	r7, #8
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}
 800d468:	24000019 	.word	0x24000019

0800d46c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b082      	sub	sp, #8
 800d470:	af00      	add	r7, sp, #0
 800d472:	4603      	mov	r3, r0
 800d474:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800d476:	4b0b      	ldr	r3, [pc, #44]	; (800d4a4 <SD_initialize+0x38>)
 800d478:	2201      	movs	r2, #1
 800d47a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d47c:	f7ff ff3e 	bl	800d2fc <BSP_SD_Init>
 800d480:	4603      	mov	r3, r0
 800d482:	2b00      	cmp	r3, #0
 800d484:	d107      	bne.n	800d496 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800d486:	79fb      	ldrb	r3, [r7, #7]
 800d488:	4618      	mov	r0, r3
 800d48a:	f7ff ffd1 	bl	800d430 <SD_CheckStatus>
 800d48e:	4603      	mov	r3, r0
 800d490:	461a      	mov	r2, r3
 800d492:	4b04      	ldr	r3, [pc, #16]	; (800d4a4 <SD_initialize+0x38>)
 800d494:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d496:	4b03      	ldr	r3, [pc, #12]	; (800d4a4 <SD_initialize+0x38>)
 800d498:	781b      	ldrb	r3, [r3, #0]
 800d49a:	b2db      	uxtb	r3, r3
}
 800d49c:	4618      	mov	r0, r3
 800d49e:	3708      	adds	r7, #8
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bd80      	pop	{r7, pc}
 800d4a4:	24000019 	.word	0x24000019

0800d4a8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b082      	sub	sp, #8
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d4b2:	79fb      	ldrb	r3, [r7, #7]
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f7ff ffbb 	bl	800d430 <SD_CheckStatus>
 800d4ba:	4603      	mov	r3, r0
}
 800d4bc:	4618      	mov	r0, r3
 800d4be:	3708      	adds	r7, #8
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bd80      	pop	{r7, pc}

0800d4c4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b086      	sub	sp, #24
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	60b9      	str	r1, [r7, #8]
 800d4cc:	607a      	str	r2, [r7, #4]
 800d4ce:	603b      	str	r3, [r7, #0]
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800d4d8:	f04f 33ff 	mov.w	r3, #4294967295
 800d4dc:	683a      	ldr	r2, [r7, #0]
 800d4de:	6879      	ldr	r1, [r7, #4]
 800d4e0:	68b8      	ldr	r0, [r7, #8]
 800d4e2:	f7ff ff23 	bl	800d32c <BSP_SD_ReadBlocks>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d107      	bne.n	800d4fc <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800d4ec:	bf00      	nop
 800d4ee:	f7ff ff59 	bl	800d3a4 <BSP_SD_GetCardState>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d1fa      	bne.n	800d4ee <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d4fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	3718      	adds	r7, #24
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}

0800d506 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d506:	b580      	push	{r7, lr}
 800d508:	b086      	sub	sp, #24
 800d50a:	af00      	add	r7, sp, #0
 800d50c:	60b9      	str	r1, [r7, #8]
 800d50e:	607a      	str	r2, [r7, #4]
 800d510:	603b      	str	r3, [r7, #0]
 800d512:	4603      	mov	r3, r0
 800d514:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d516:	2301      	movs	r3, #1
 800d518:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800d51a:	f04f 33ff 	mov.w	r3, #4294967295
 800d51e:	683a      	ldr	r2, [r7, #0]
 800d520:	6879      	ldr	r1, [r7, #4]
 800d522:	68b8      	ldr	r0, [r7, #8]
 800d524:	f7ff ff20 	bl	800d368 <BSP_SD_WriteBlocks>
 800d528:	4603      	mov	r3, r0
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d107      	bne.n	800d53e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800d52e:	bf00      	nop
 800d530:	f7ff ff38 	bl	800d3a4 <BSP_SD_GetCardState>
 800d534:	4603      	mov	r3, r0
 800d536:	2b00      	cmp	r3, #0
 800d538:	d1fa      	bne.n	800d530 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800d53a:	2300      	movs	r3, #0
 800d53c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d53e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d540:	4618      	mov	r0, r3
 800d542:	3718      	adds	r7, #24
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}

0800d548 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b08c      	sub	sp, #48	; 0x30
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	4603      	mov	r3, r0
 800d550:	603a      	str	r2, [r7, #0]
 800d552:	71fb      	strb	r3, [r7, #7]
 800d554:	460b      	mov	r3, r1
 800d556:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d558:	2301      	movs	r3, #1
 800d55a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d55e:	4b25      	ldr	r3, [pc, #148]	; (800d5f4 <SD_ioctl+0xac>)
 800d560:	781b      	ldrb	r3, [r3, #0]
 800d562:	b2db      	uxtb	r3, r3
 800d564:	f003 0301 	and.w	r3, r3, #1
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d001      	beq.n	800d570 <SD_ioctl+0x28>
 800d56c:	2303      	movs	r3, #3
 800d56e:	e03c      	b.n	800d5ea <SD_ioctl+0xa2>

  switch (cmd)
 800d570:	79bb      	ldrb	r3, [r7, #6]
 800d572:	2b03      	cmp	r3, #3
 800d574:	d834      	bhi.n	800d5e0 <SD_ioctl+0x98>
 800d576:	a201      	add	r2, pc, #4	; (adr r2, 800d57c <SD_ioctl+0x34>)
 800d578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d57c:	0800d58d 	.word	0x0800d58d
 800d580:	0800d595 	.word	0x0800d595
 800d584:	0800d5ad 	.word	0x0800d5ad
 800d588:	0800d5c7 	.word	0x0800d5c7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d58c:	2300      	movs	r3, #0
 800d58e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d592:	e028      	b.n	800d5e6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d594:	f107 0308 	add.w	r3, r7, #8
 800d598:	4618      	mov	r0, r3
 800d59a:	f7ff ff13 	bl	800d3c4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d59e:	6a3a      	ldr	r2, [r7, #32]
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d5aa:	e01c      	b.n	800d5e6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d5ac:	f107 0308 	add.w	r3, r7, #8
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f7ff ff07 	bl	800d3c4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b8:	b29a      	uxth	r2, r3
 800d5ba:	683b      	ldr	r3, [r7, #0]
 800d5bc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d5c4:	e00f      	b.n	800d5e6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d5c6:	f107 0308 	add.w	r3, r7, #8
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	f7ff fefa 	bl	800d3c4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d2:	0a5a      	lsrs	r2, r3, #9
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d5d8:	2300      	movs	r3, #0
 800d5da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d5de:	e002      	b.n	800d5e6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d5e0:	2304      	movs	r3, #4
 800d5e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d5e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	3730      	adds	r7, #48	; 0x30
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}
 800d5f2:	bf00      	nop
 800d5f4:	24000019 	.word	0x24000019

0800d5f8 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b082      	sub	sp, #8
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
 800d600:	460b      	mov	r3, r1
 800d602:	70fb      	strb	r3, [r7, #3]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	7c1b      	ldrb	r3, [r3, #16]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d115      	bne.n	800d638 <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800d60c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d610:	2202      	movs	r2, #2
 800d612:	2101      	movs	r1, #1
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f007 fea9 	bl	801536c <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2201      	movs	r2, #1
 800d61e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800d622:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d626:	2202      	movs	r2, #2
 800d628:	2181      	movs	r1, #129	; 0x81
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f007 fe9e 	bl	801536c <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2201      	movs	r2, #1
 800d634:	62da      	str	r2, [r3, #44]	; 0x2c
 800d636:	e012      	b.n	800d65e <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800d638:	2340      	movs	r3, #64	; 0x40
 800d63a:	2202      	movs	r2, #2
 800d63c:	2101      	movs	r1, #1
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f007 fe94 	bl	801536c <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2201      	movs	r2, #1
 800d648:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800d64c:	2340      	movs	r3, #64	; 0x40
 800d64e:	2202      	movs	r2, #2
 800d650:	2181      	movs	r1, #129	; 0x81
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f007 fe8a 	bl	801536c <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2201      	movs	r2, #1
 800d65c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800d65e:	f44f 701b 	mov.w	r0, #620	; 0x26c
 800d662:	f008 f81f 	bl	80156a4 <malloc>
 800d666:	4603      	mov	r3, r0
 800d668:	461a      	mov	r2, r3
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d676:	2b00      	cmp	r3, #0
 800d678:	d101      	bne.n	800d67e <USBD_MSC_Init+0x86>
  {
    return USBD_FAIL;
 800d67a:	2302      	movs	r3, #2
 800d67c:	e003      	b.n	800d686 <USBD_MSC_Init+0x8e>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f000 f9db 	bl	800da3a <MSC_BOT_Init>

  return USBD_OK;
 800d684:	2300      	movs	r3, #0
}
 800d686:	4618      	mov	r0, r3
 800d688:	3708      	adds	r7, #8
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}

0800d68e <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 800d68e:	b580      	push	{r7, lr}
 800d690:	b082      	sub	sp, #8
 800d692:	af00      	add	r7, sp, #0
 800d694:	6078      	str	r0, [r7, #4]
 800d696:	460b      	mov	r3, r1
 800d698:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800d69a:	2101      	movs	r1, #1
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f007 fe8b 	bl	80153b8 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800d6aa:	2181      	movs	r1, #129	; 0x81
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f007 fe83 	bl	80153b8 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	f000 fa08 	bl	800dace <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d009      	beq.n	800d6dc <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	f007 fff0 	bl	80156b4 <free>
    pdev->pClassData  = NULL;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 800d6dc:	2300      	movs	r3, #0
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	3708      	adds	r7, #8
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}
	...

0800d6e8 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b086      	sub	sp, #24
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
 800d6f0:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6f8:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800d6fe:	2300      	movs	r3, #0
 800d700:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	781b      	ldrb	r3, [r3, #0]
 800d706:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d04d      	beq.n	800d7aa <USBD_MSC_Setup+0xc2>
 800d70e:	2b20      	cmp	r3, #32
 800d710:	f040 8113 	bne.w	800d93a <USBD_MSC_Setup+0x252>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	785b      	ldrb	r3, [r3, #1]
 800d718:	2bfe      	cmp	r3, #254	; 0xfe
 800d71a:	d002      	beq.n	800d722 <USBD_MSC_Setup+0x3a>
 800d71c:	2bff      	cmp	r3, #255	; 0xff
 800d71e:	d024      	beq.n	800d76a <USBD_MSC_Setup+0x82>
 800d720:	e03b      	b.n	800d79a <USBD_MSC_Setup+0xb2>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	885b      	ldrh	r3, [r3, #2]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d118      	bne.n	800d75c <USBD_MSC_Setup+0x74>
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	88db      	ldrh	r3, [r3, #6]
 800d72e:	2b01      	cmp	r3, #1
 800d730:	d114      	bne.n	800d75c <USBD_MSC_Setup+0x74>
              ((req->bmRequest & 0x80U) == 0x80U))
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	781b      	ldrb	r3, [r3, #0]
 800d736:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800d738:	2b00      	cmp	r3, #0
 800d73a:	da0f      	bge.n	800d75c <USBD_MSC_Setup+0x74>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d742:	699b      	ldr	r3, [r3, #24]
 800d744:	4798      	blx	r3
 800d746:	4603      	mov	r3, r0
 800d748:	461a      	mov	r2, r3
 800d74a:	693b      	ldr	r3, [r7, #16]
 800d74c:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 800d74e:	693b      	ldr	r3, [r7, #16]
 800d750:	2201      	movs	r2, #1
 800d752:	4619      	mov	r1, r3
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f002 f9e3 	bl	800fb20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d75a:	e025      	b.n	800d7a8 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 800d75c:	6839      	ldr	r1, [r7, #0]
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f002 f973 	bl	800fa4a <USBD_CtlError>
            ret = USBD_FAIL;
 800d764:	2302      	movs	r3, #2
 800d766:	75fb      	strb	r3, [r7, #23]
          break;
 800d768:	e01e      	b.n	800d7a8 <USBD_MSC_Setup+0xc0>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	885b      	ldrh	r3, [r3, #2]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d10c      	bne.n	800d78c <USBD_MSC_Setup+0xa4>
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	88db      	ldrh	r3, [r3, #6]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d108      	bne.n	800d78c <USBD_MSC_Setup+0xa4>
              ((req->bmRequest & 0x80U) != 0x80U))
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	781b      	ldrb	r3, [r3, #0]
 800d77e:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800d780:	2b00      	cmp	r3, #0
 800d782:	db03      	blt.n	800d78c <USBD_MSC_Setup+0xa4>
          {
            MSC_BOT_Reset(pdev);
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f000 f988 	bl	800da9a <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d78a:	e00d      	b.n	800d7a8 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 800d78c:	6839      	ldr	r1, [r7, #0]
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f002 f95b 	bl	800fa4a <USBD_CtlError>
            ret = USBD_FAIL;
 800d794:	2302      	movs	r3, #2
 800d796:	75fb      	strb	r3, [r7, #23]
          break;
 800d798:	e006      	b.n	800d7a8 <USBD_MSC_Setup+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d79a:	6839      	ldr	r1, [r7, #0]
 800d79c:	6878      	ldr	r0, [r7, #4]
 800d79e:	f002 f954 	bl	800fa4a <USBD_CtlError>
          ret = USBD_FAIL;
 800d7a2:	2302      	movs	r3, #2
 800d7a4:	75fb      	strb	r3, [r7, #23]
          break;
 800d7a6:	bf00      	nop
      }
      break;
 800d7a8:	e0ce      	b.n	800d948 <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	785b      	ldrb	r3, [r3, #1]
 800d7ae:	2b0b      	cmp	r3, #11
 800d7b0:	f200 80bb 	bhi.w	800d92a <USBD_MSC_Setup+0x242>
 800d7b4:	a201      	add	r2, pc, #4	; (adr r2, 800d7bc <USBD_MSC_Setup+0xd4>)
 800d7b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7ba:	bf00      	nop
 800d7bc:	0800d7ed 	.word	0x0800d7ed
 800d7c0:	0800d863 	.word	0x0800d863
 800d7c4:	0800d92b 	.word	0x0800d92b
 800d7c8:	0800d92b 	.word	0x0800d92b
 800d7cc:	0800d92b 	.word	0x0800d92b
 800d7d0:	0800d92b 	.word	0x0800d92b
 800d7d4:	0800d92b 	.word	0x0800d92b
 800d7d8:	0800d92b 	.word	0x0800d92b
 800d7dc:	0800d92b 	.word	0x0800d92b
 800d7e0:	0800d92b 	.word	0x0800d92b
 800d7e4:	0800d815 	.word	0x0800d815
 800d7e8:	0800d83d 	.word	0x0800d83d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7f2:	2b03      	cmp	r3, #3
 800d7f4:	d107      	bne.n	800d806 <USBD_MSC_Setup+0x11e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800d7f6:	f107 030e 	add.w	r3, r7, #14
 800d7fa:	2202      	movs	r2, #2
 800d7fc:	4619      	mov	r1, r3
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f002 f98e 	bl	800fb20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d804:	e098      	b.n	800d938 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 800d806:	6839      	ldr	r1, [r7, #0]
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	f002 f91e 	bl	800fa4a <USBD_CtlError>
            ret = USBD_FAIL;
 800d80e:	2302      	movs	r3, #2
 800d810:	75fb      	strb	r3, [r7, #23]
          break;
 800d812:	e091      	b.n	800d938 <USBD_MSC_Setup+0x250>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d81a:	2b03      	cmp	r3, #3
 800d81c:	d107      	bne.n	800d82e <USBD_MSC_Setup+0x146>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	3304      	adds	r3, #4
 800d822:	2201      	movs	r2, #1
 800d824:	4619      	mov	r1, r3
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f002 f97a 	bl	800fb20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d82c:	e084      	b.n	800d938 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 800d82e:	6839      	ldr	r1, [r7, #0]
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f002 f90a 	bl	800fa4a <USBD_CtlError>
            ret = USBD_FAIL;
 800d836:	2302      	movs	r3, #2
 800d838:	75fb      	strb	r3, [r7, #23]
          break;
 800d83a:	e07d      	b.n	800d938 <USBD_MSC_Setup+0x250>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d842:	2b03      	cmp	r3, #3
 800d844:	d106      	bne.n	800d854 <USBD_MSC_Setup+0x16c>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	885b      	ldrh	r3, [r3, #2]
 800d84a:	b2db      	uxtb	r3, r3
 800d84c:	461a      	mov	r2, r3
 800d84e:	693b      	ldr	r3, [r7, #16]
 800d850:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d852:	e071      	b.n	800d938 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 800d854:	6839      	ldr	r1, [r7, #0]
 800d856:	6878      	ldr	r0, [r7, #4]
 800d858:	f002 f8f7 	bl	800fa4a <USBD_CtlError>
            ret = USBD_FAIL;
 800d85c:	2302      	movs	r3, #2
 800d85e:	75fb      	strb	r3, [r7, #23]
          break;
 800d860:	e06a      	b.n	800d938 <USBD_MSC_Setup+0x250>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	889b      	ldrh	r3, [r3, #4]
 800d866:	b2db      	uxtb	r3, r3
 800d868:	4619      	mov	r1, r3
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f007 fdc3 	bl	80153f6 <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	889b      	ldrh	r3, [r3, #4]
 800d874:	b2db      	uxtb	r3, r3
 800d876:	4619      	mov	r1, r3
 800d878:	6878      	ldr	r0, [r7, #4]
 800d87a:	f007 fd9d 	bl	80153b8 <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	889b      	ldrh	r3, [r3, #4]
 800d882:	b25b      	sxtb	r3, r3
 800d884:	2b00      	cmp	r3, #0
 800d886:	da23      	bge.n	800d8d0 <USBD_MSC_Setup+0x1e8>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	889b      	ldrh	r3, [r3, #4]
 800d88c:	b2db      	uxtb	r3, r3
 800d88e:	f003 020f 	and.w	r2, r3, #15
 800d892:	6879      	ldr	r1, [r7, #4]
 800d894:	4613      	mov	r3, r2
 800d896:	009b      	lsls	r3, r3, #2
 800d898:	4413      	add	r3, r2
 800d89a:	009b      	lsls	r3, r3, #2
 800d89c:	440b      	add	r3, r1
 800d89e:	3318      	adds	r3, #24
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	7c1b      	ldrb	r3, [r3, #16]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d107      	bne.n	800d8bc <USBD_MSC_Setup+0x1d4>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 800d8ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d8b0:	2202      	movs	r2, #2
 800d8b2:	2181      	movs	r1, #129	; 0x81
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f007 fd59 	bl	801536c <USBD_LL_OpenEP>
 800d8ba:	e005      	b.n	800d8c8 <USBD_MSC_Setup+0x1e0>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 800d8bc:	2340      	movs	r3, #64	; 0x40
 800d8be:	2202      	movs	r2, #2
 800d8c0:	2181      	movs	r1, #129	; 0x81
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	f007 fd52 	bl	801536c <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2201      	movs	r2, #1
 800d8cc:	62da      	str	r2, [r3, #44]	; 0x2c
 800d8ce:	e024      	b.n	800d91a <USBD_MSC_Setup+0x232>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	889b      	ldrh	r3, [r3, #4]
 800d8d4:	b2db      	uxtb	r3, r3
 800d8d6:	f003 020f 	and.w	r2, r3, #15
 800d8da:	6879      	ldr	r1, [r7, #4]
 800d8dc:	4613      	mov	r3, r2
 800d8de:	009b      	lsls	r3, r3, #2
 800d8e0:	4413      	add	r3, r2
 800d8e2:	009b      	lsls	r3, r3, #2
 800d8e4:	440b      	add	r3, r1
 800d8e6:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	7c1b      	ldrb	r3, [r3, #16]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d107      	bne.n	800d906 <USBD_MSC_Setup+0x21e>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 800d8f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d8fa:	2202      	movs	r2, #2
 800d8fc:	2101      	movs	r1, #1
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f007 fd34 	bl	801536c <USBD_LL_OpenEP>
 800d904:	e005      	b.n	800d912 <USBD_MSC_Setup+0x22a>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 800d906:	2340      	movs	r3, #64	; 0x40
 800d908:	2202      	movs	r2, #2
 800d90a:	2101      	movs	r1, #1
 800d90c:	6878      	ldr	r0, [r7, #4]
 800d90e:	f007 fd2d 	bl	801536c <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2201      	movs	r2, #1
 800d916:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	889b      	ldrh	r3, [r3, #4]
 800d91e:	b2db      	uxtb	r3, r3
 800d920:	4619      	mov	r1, r3
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	f000 fa52 	bl	800ddcc <MSC_BOT_CplClrFeature>
          break;
 800d928:	e006      	b.n	800d938 <USBD_MSC_Setup+0x250>

        default:
          USBD_CtlError(pdev, req);
 800d92a:	6839      	ldr	r1, [r7, #0]
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f002 f88c 	bl	800fa4a <USBD_CtlError>
          ret = USBD_FAIL;
 800d932:	2302      	movs	r3, #2
 800d934:	75fb      	strb	r3, [r7, #23]
          break;
 800d936:	bf00      	nop
      }
      break;
 800d938:	e006      	b.n	800d948 <USBD_MSC_Setup+0x260>

    default:
      USBD_CtlError(pdev, req);
 800d93a:	6839      	ldr	r1, [r7, #0]
 800d93c:	6878      	ldr	r0, [r7, #4]
 800d93e:	f002 f884 	bl	800fa4a <USBD_CtlError>
      ret = USBD_FAIL;
 800d942:	2302      	movs	r3, #2
 800d944:	75fb      	strb	r3, [r7, #23]
      break;
 800d946:	bf00      	nop
  }

  return ret;
 800d948:	7dfb      	ldrb	r3, [r7, #23]
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	3718      	adds	r7, #24
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}
 800d952:	bf00      	nop

0800d954 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b082      	sub	sp, #8
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
 800d95c:	460b      	mov	r3, r1
 800d95e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800d960:	78fb      	ldrb	r3, [r7, #3]
 800d962:	4619      	mov	r1, r3
 800d964:	6878      	ldr	r0, [r7, #4]
 800d966:	f000 f8c3 	bl	800daf0 <MSC_BOT_DataIn>

  return USBD_OK;
 800d96a:	2300      	movs	r3, #0
}
 800d96c:	4618      	mov	r0, r3
 800d96e:	3708      	adds	r7, #8
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}

0800d974 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b082      	sub	sp, #8
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
 800d97c:	460b      	mov	r3, r1
 800d97e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800d980:	78fb      	ldrb	r3, [r7, #3]
 800d982:	4619      	mov	r1, r3
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	f000 f8e4 	bl	800db52 <MSC_BOT_DataOut>

  return USBD_OK;
 800d98a:	2300      	movs	r3, #0
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	3708      	adds	r7, #8
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}

0800d994 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800d994:	b480      	push	{r7}
 800d996:	b083      	sub	sp, #12
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2220      	movs	r2, #32
 800d9a0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800d9a2:	4b03      	ldr	r3, [pc, #12]	; (800d9b0 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	370c      	adds	r7, #12
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ae:	4770      	bx	lr
 800d9b0:	24000054 	.word	0x24000054

0800d9b4 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800d9b4:	b480      	push	{r7}
 800d9b6:	b083      	sub	sp, #12
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2220      	movs	r2, #32
 800d9c0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800d9c2:	4b03      	ldr	r3, [pc, #12]	; (800d9d0 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	370c      	adds	r7, #12
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ce:	4770      	bx	lr
 800d9d0:	24000074 	.word	0x24000074

0800d9d4 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d9d4:	b480      	push	{r7}
 800d9d6:	b083      	sub	sp, #12
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2220      	movs	r2, #32
 800d9e0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800d9e2:	4b03      	ldr	r3, [pc, #12]	; (800d9f0 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	370c      	adds	r7, #12
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	4770      	bx	lr
 800d9f0:	24000094 	.word	0x24000094

0800d9f4 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	b083      	sub	sp, #12
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	220a      	movs	r2, #10
 800da00:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800da02:	4b03      	ldr	r3, [pc, #12]	; (800da10 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800da04:	4618      	mov	r0, r3
 800da06:	370c      	adds	r7, #12
 800da08:	46bd      	mov	sp, r7
 800da0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0e:	4770      	bx	lr
 800da10:	240000b4 	.word	0x240000b4

0800da14 <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 800da14:	b480      	push	{r7}
 800da16:	b083      	sub	sp, #12
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
 800da1c:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d003      	beq.n	800da2c <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	683a      	ldr	r2, [r7, #0]
 800da28:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 800da2c:	2300      	movs	r3, #0
}
 800da2e:	4618      	mov	r0, r3
 800da30:	370c      	adds	r7, #12
 800da32:	46bd      	mov	sp, r7
 800da34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da38:	4770      	bx	lr

0800da3a <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 800da3a:	b580      	push	{r7, lr}
 800da3c:	b084      	sub	sp, #16
 800da3e:	af00      	add	r7, sp, #0
 800da40:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da48:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	2200      	movs	r2, #0
 800da4e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	2200      	movs	r2, #0
 800da54:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	2200      	movs	r2, #0
 800da5a:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	2200      	movs	r2, #0
 800da62:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	2000      	movs	r0, #0
 800da70:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800da72:	2101      	movs	r1, #1
 800da74:	6878      	ldr	r0, [r7, #4]
 800da76:	f007 fcbe 	bl	80153f6 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800da7a:	2181      	movs	r1, #129	; 0x81
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	f007 fcba 	bl	80153f6 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800da88:	231f      	movs	r3, #31
 800da8a:	2101      	movs	r1, #1
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f007 fd7d 	bl	801558c <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 800da92:	bf00      	nop
 800da94:	3710      	adds	r7, #16
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}

0800da9a <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 800da9a:	b580      	push	{r7, lr}
 800da9c:	b084      	sub	sp, #16
 800da9e:	af00      	add	r7, sp, #0
 800daa0:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800daa8:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	2200      	movs	r2, #0
 800daae:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	2201      	movs	r2, #1
 800dab4:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800dabc:	231f      	movs	r3, #31
 800dabe:	2101      	movs	r1, #1
 800dac0:	6878      	ldr	r0, [r7, #4]
 800dac2:	f007 fd63 	bl	801558c <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 800dac6:	bf00      	nop
 800dac8:	3710      	adds	r7, #16
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}

0800dace <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800dace:	b480      	push	{r7}
 800dad0:	b085      	sub	sp, #20
 800dad2:	af00      	add	r7, sp, #0
 800dad4:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dadc:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	2200      	movs	r2, #0
 800dae2:	721a      	strb	r2, [r3, #8]
}
 800dae4:	bf00      	nop
 800dae6:	3714      	adds	r7, #20
 800dae8:	46bd      	mov	sp, r7
 800daea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daee:	4770      	bx	lr

0800daf0 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b084      	sub	sp, #16
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
 800daf8:	460b      	mov	r3, r1
 800dafa:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db02:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	7a1b      	ldrb	r3, [r3, #8]
 800db08:	2b02      	cmp	r3, #2
 800db0a:	d004      	beq.n	800db16 <MSC_BOT_DataIn+0x26>
 800db0c:	2b02      	cmp	r3, #2
 800db0e:	db19      	blt.n	800db44 <MSC_BOT_DataIn+0x54>
 800db10:	2b04      	cmp	r3, #4
 800db12:	dc17      	bgt.n	800db44 <MSC_BOT_DataIn+0x54>
 800db14:	e011      	b.n	800db3a <MSC_BOT_DataIn+0x4a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800db22:	461a      	mov	r2, r3
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	f000 f979 	bl	800de1c <SCSI_ProcessCmd>
 800db2a:	4603      	mov	r3, r0
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	da0b      	bge.n	800db48 <MSC_BOT_DataIn+0x58>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800db30:	2101      	movs	r1, #1
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f000 f8f0 	bl	800dd18 <MSC_BOT_SendCSW>
      }
      break;
 800db38:	e006      	b.n	800db48 <MSC_BOT_DataIn+0x58>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800db3a:	2100      	movs	r1, #0
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f000 f8eb 	bl	800dd18 <MSC_BOT_SendCSW>
      break;
 800db42:	e002      	b.n	800db4a <MSC_BOT_DataIn+0x5a>

    default:
      break;
 800db44:	bf00      	nop
 800db46:	e000      	b.n	800db4a <MSC_BOT_DataIn+0x5a>
      break;
 800db48:	bf00      	nop
  }
}
 800db4a:	bf00      	nop
 800db4c:	3710      	adds	r7, #16
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}

0800db52 <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 800db52:	b580      	push	{r7, lr}
 800db54:	b084      	sub	sp, #16
 800db56:	af00      	add	r7, sp, #0
 800db58:	6078      	str	r0, [r7, #4]
 800db5a:	460b      	mov	r3, r1
 800db5c:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db64:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	7a1b      	ldrb	r3, [r3, #8]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d002      	beq.n	800db74 <MSC_BOT_DataOut+0x22>
 800db6e:	2b01      	cmp	r3, #1
 800db70:	d004      	beq.n	800db7c <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800db72:	e015      	b.n	800dba0 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 800db74:	6878      	ldr	r0, [r7, #4]
 800db76:	f000 f817 	bl	800dba8 <MSC_BOT_CBW_Decode>
      break;
 800db7a:	e011      	b.n	800dba0 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800db88:	461a      	mov	r2, r3
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f000 f946 	bl	800de1c <SCSI_ProcessCmd>
 800db90:	4603      	mov	r3, r0
 800db92:	2b00      	cmp	r3, #0
 800db94:	da03      	bge.n	800db9e <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800db96:	2101      	movs	r1, #1
 800db98:	6878      	ldr	r0, [r7, #4]
 800db9a:	f000 f8bd 	bl	800dd18 <MSC_BOT_SendCSW>
      break;
 800db9e:	bf00      	nop
  }
}
 800dba0:	bf00      	nop
 800dba2:	3710      	adds	r7, #16
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}

0800dba8 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b084      	sub	sp, #16
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbb6:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800dbd0:	2101      	movs	r1, #1
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	f007 fcfd 	bl	80155d2 <USBD_LL_GetRxDataSize>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	2b1f      	cmp	r3, #31
 800dbdc:	d114      	bne.n	800dc08 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800dbe4:	4a32      	ldr	r2, [pc, #200]	; (800dcb0 <MSC_BOT_CBW_Decode+0x108>)
 800dbe6:	4293      	cmp	r3, r2
 800dbe8:	d10e      	bne.n	800dc08 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) ||
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800dbf0:	2b01      	cmp	r3, #1
 800dbf2:	d809      	bhi.n	800dc08 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
      (hmsc->cbw.bLUN > 1U) ||
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d004      	beq.n	800dc08 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 800dc04:	2b10      	cmp	r3, #16
 800dc06:	d90e      	bls.n	800dc26 <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800dc0e:	2320      	movs	r3, #32
 800dc10:	2205      	movs	r2, #5
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f000 fc4b 	bl	800e4ae <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	2202      	movs	r2, #2
 800dc1c:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f000 f8a6 	bl	800dd70 <MSC_BOT_Abort>
 800dc24:	e041      	b.n	800dcaa <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800dc32:	461a      	mov	r2, r3
 800dc34:	6878      	ldr	r0, [r7, #4]
 800dc36:	f000 f8f1 	bl	800de1c <SCSI_ProcessCmd>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	da0c      	bge.n	800dc5a <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	7a1b      	ldrb	r3, [r3, #8]
 800dc44:	2b05      	cmp	r3, #5
 800dc46:	d104      	bne.n	800dc52 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800dc48:	2101      	movs	r1, #1
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f000 f864 	bl	800dd18 <MSC_BOT_SendCSW>
 800dc50:	e02b      	b.n	800dcaa <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f000 f88c 	bl	800dd70 <MSC_BOT_Abort>
 800dc58:	e027      	b.n	800dcaa <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	7a1b      	ldrb	r3, [r3, #8]
 800dc5e:	2b02      	cmp	r3, #2
 800dc60:	d022      	beq.n	800dca8 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800dc66:	2b01      	cmp	r3, #1
 800dc68:	d01e      	beq.n	800dca8 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800dc6e:	2b03      	cmp	r3, #3
 800dc70:	d01a      	beq.n	800dca8 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	895b      	ldrh	r3, [r3, #10]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d009      	beq.n	800dc8e <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	f103 010c 	add.w	r1, r3, #12
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	895b      	ldrh	r3, [r3, #10]
 800dc84:	461a      	mov	r2, r3
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f000 f814 	bl	800dcb4 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800dc8c:	e00d      	b.n	800dcaa <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	895b      	ldrh	r3, [r3, #10]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d104      	bne.n	800dca0 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800dc96:	2100      	movs	r1, #0
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f000 f83d 	bl	800dd18 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800dc9e:	e004      	b.n	800dcaa <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800dca0:	6878      	ldr	r0, [r7, #4]
 800dca2:	f000 f865 	bl	800dd70 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800dca6:	e000      	b.n	800dcaa <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 800dca8:	bf00      	nop
    }
  }
}
 800dcaa:	3710      	adds	r7, #16
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bd80      	pop	{r7, pc}
 800dcb0:	43425355 	.word	0x43425355

0800dcb4 <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b086      	sub	sp, #24
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	60f8      	str	r0, [r7, #12]
 800dcbc:	60b9      	str	r1, [r7, #8]
 800dcbe:	4613      	mov	r3, r2
 800dcc0:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcc8:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 800dcca:	697b      	ldr	r3, [r7, #20]
 800dccc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800dcd0:	88fb      	ldrh	r3, [r7, #6]
 800dcd2:	429a      	cmp	r2, r3
 800dcd4:	d204      	bcs.n	800dce0 <MSC_BOT_SendData+0x2c>
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dcdc:	b29b      	uxth	r3, r3
 800dcde:	e000      	b.n	800dce2 <MSC_BOT_SendData+0x2e>
 800dce0:	88fb      	ldrh	r3, [r7, #6]
 800dce2:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 800dce4:	697b      	ldr	r3, [r7, #20]
 800dce6:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800dcea:	88fb      	ldrh	r3, [r7, #6]
 800dcec:	1ad2      	subs	r2, r2, r3
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800dcf4:	697b      	ldr	r3, [r7, #20]
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800dcfc:	697b      	ldr	r3, [r7, #20]
 800dcfe:	2204      	movs	r2, #4
 800dd00:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800dd02:	8a7b      	ldrh	r3, [r7, #18]
 800dd04:	68ba      	ldr	r2, [r7, #8]
 800dd06:	2181      	movs	r1, #129	; 0x81
 800dd08:	68f8      	ldr	r0, [r7, #12]
 800dd0a:	f007 fc1c 	bl	8015546 <USBD_LL_Transmit>
}
 800dd0e:	bf00      	nop
 800dd10:	3718      	adds	r7, #24
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}
	...

0800dd18 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b084      	sub	sp, #16
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
 800dd20:	460b      	mov	r3, r1
 800dd22:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd2a:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	4a0f      	ldr	r2, [pc, #60]	; (800dd6c <MSC_BOT_SendCSW+0x54>)
 800dd30:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	78fa      	ldrb	r2, [r7, #3]
 800dd38:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	2200      	movs	r2, #0
 800dd40:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 800dd48:	230d      	movs	r3, #13
 800dd4a:	2181      	movs	r1, #129	; 0x81
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	f007 fbfa 	bl	8015546 <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800dd58:	231f      	movs	r3, #31
 800dd5a:	2101      	movs	r1, #1
 800dd5c:	6878      	ldr	r0, [r7, #4]
 800dd5e:	f007 fc15 	bl	801558c <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 800dd62:	bf00      	nop
 800dd64:	3710      	adds	r7, #16
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}
 800dd6a:	bf00      	nop
 800dd6c:	53425355 	.word	0x53425355

0800dd70 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b084      	sub	sp, #16
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd7e:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d10c      	bne.n	800dda4 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d007      	beq.n	800dda4 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d103      	bne.n	800dda4 <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800dd9c:	2101      	movs	r1, #1
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f007 fb48 	bl	8015434 <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800dda4:	2181      	movs	r1, #129	; 0x81
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	f007 fb44 	bl	8015434 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	7a5b      	ldrb	r3, [r3, #9]
 800ddb0:	2b02      	cmp	r3, #2
 800ddb2:	d107      	bne.n	800ddc4 <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800ddba:	231f      	movs	r3, #31
 800ddbc:	2101      	movs	r1, #1
 800ddbe:	6878      	ldr	r0, [r7, #4]
 800ddc0:	f007 fbe4 	bl	801558c <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 800ddc4:	bf00      	nop
 800ddc6:	3710      	adds	r7, #16
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}

0800ddcc <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b084      	sub	sp, #16
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
 800ddd4:	460b      	mov	r3, r1
 800ddd6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddde:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	7a5b      	ldrb	r3, [r3, #9]
 800dde4:	2b02      	cmp	r3, #2
 800dde6:	d107      	bne.n	800ddf8 <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800dde8:	2181      	movs	r1, #129	; 0x81
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f007 fb22 	bl	8015434 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	725a      	strb	r2, [r3, #9]
 800ddf6:	e00d      	b.n	800de14 <MSC_BOT_CplClrFeature+0x48>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800ddf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	da08      	bge.n	800de12 <MSC_BOT_CplClrFeature+0x46>
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	7a5b      	ldrb	r3, [r3, #9]
 800de04:	2b01      	cmp	r3, #1
 800de06:	d004      	beq.n	800de12 <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800de08:	2101      	movs	r1, #1
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f7ff ff84 	bl	800dd18 <MSC_BOT_SendCSW>
 800de10:	e000      	b.n	800de14 <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 800de12:	bf00      	nop
  }
}
 800de14:	3710      	adds	r7, #16
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}
	...

0800de1c <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b084      	sub	sp, #16
 800de20:	af00      	add	r7, sp, #0
 800de22:	60f8      	str	r0, [r7, #12]
 800de24:	460b      	mov	r3, r1
 800de26:	607a      	str	r2, [r7, #4]
 800de28:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	781b      	ldrb	r3, [r3, #0]
 800de2e:	2b5a      	cmp	r3, #90	; 0x5a
 800de30:	f200 810e 	bhi.w	800e050 <SCSI_ProcessCmd+0x234>
 800de34:	a201      	add	r2, pc, #4	; (adr r2, 800de3c <SCSI_ProcessCmd+0x20>)
 800de36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de3a:	bf00      	nop
 800de3c:	0800dfa9 	.word	0x0800dfa9
 800de40:	0800e051 	.word	0x0800e051
 800de44:	0800e051 	.word	0x0800e051
 800de48:	0800dfb7 	.word	0x0800dfb7
 800de4c:	0800e051 	.word	0x0800e051
 800de50:	0800e051 	.word	0x0800e051
 800de54:	0800e051 	.word	0x0800e051
 800de58:	0800e051 	.word	0x0800e051
 800de5c:	0800e051 	.word	0x0800e051
 800de60:	0800e051 	.word	0x0800e051
 800de64:	0800e051 	.word	0x0800e051
 800de68:	0800e051 	.word	0x0800e051
 800de6c:	0800e051 	.word	0x0800e051
 800de70:	0800e051 	.word	0x0800e051
 800de74:	0800e051 	.word	0x0800e051
 800de78:	0800e051 	.word	0x0800e051
 800de7c:	0800e051 	.word	0x0800e051
 800de80:	0800e051 	.word	0x0800e051
 800de84:	0800dfc5 	.word	0x0800dfc5
 800de88:	0800e051 	.word	0x0800e051
 800de8c:	0800e051 	.word	0x0800e051
 800de90:	0800e051 	.word	0x0800e051
 800de94:	0800e051 	.word	0x0800e051
 800de98:	0800e051 	.word	0x0800e051
 800de9c:	0800e051 	.word	0x0800e051
 800dea0:	0800e051 	.word	0x0800e051
 800dea4:	0800dfef 	.word	0x0800dfef
 800dea8:	0800dfd3 	.word	0x0800dfd3
 800deac:	0800e051 	.word	0x0800e051
 800deb0:	0800e051 	.word	0x0800e051
 800deb4:	0800dfe1 	.word	0x0800dfe1
 800deb8:	0800e051 	.word	0x0800e051
 800debc:	0800e051 	.word	0x0800e051
 800dec0:	0800e051 	.word	0x0800e051
 800dec4:	0800e051 	.word	0x0800e051
 800dec8:	0800e00b 	.word	0x0800e00b
 800decc:	0800e051 	.word	0x0800e051
 800ded0:	0800e019 	.word	0x0800e019
 800ded4:	0800e051 	.word	0x0800e051
 800ded8:	0800e051 	.word	0x0800e051
 800dedc:	0800e027 	.word	0x0800e027
 800dee0:	0800e051 	.word	0x0800e051
 800dee4:	0800e035 	.word	0x0800e035
 800dee8:	0800e051 	.word	0x0800e051
 800deec:	0800e051 	.word	0x0800e051
 800def0:	0800e051 	.word	0x0800e051
 800def4:	0800e051 	.word	0x0800e051
 800def8:	0800e043 	.word	0x0800e043
 800defc:	0800e051 	.word	0x0800e051
 800df00:	0800e051 	.word	0x0800e051
 800df04:	0800e051 	.word	0x0800e051
 800df08:	0800e051 	.word	0x0800e051
 800df0c:	0800e051 	.word	0x0800e051
 800df10:	0800e051 	.word	0x0800e051
 800df14:	0800e051 	.word	0x0800e051
 800df18:	0800e051 	.word	0x0800e051
 800df1c:	0800e051 	.word	0x0800e051
 800df20:	0800e051 	.word	0x0800e051
 800df24:	0800e051 	.word	0x0800e051
 800df28:	0800e051 	.word	0x0800e051
 800df2c:	0800e051 	.word	0x0800e051
 800df30:	0800e051 	.word	0x0800e051
 800df34:	0800e051 	.word	0x0800e051
 800df38:	0800e051 	.word	0x0800e051
 800df3c:	0800e051 	.word	0x0800e051
 800df40:	0800e051 	.word	0x0800e051
 800df44:	0800e051 	.word	0x0800e051
 800df48:	0800e051 	.word	0x0800e051
 800df4c:	0800e051 	.word	0x0800e051
 800df50:	0800e051 	.word	0x0800e051
 800df54:	0800e051 	.word	0x0800e051
 800df58:	0800e051 	.word	0x0800e051
 800df5c:	0800e051 	.word	0x0800e051
 800df60:	0800e051 	.word	0x0800e051
 800df64:	0800e051 	.word	0x0800e051
 800df68:	0800e051 	.word	0x0800e051
 800df6c:	0800e051 	.word	0x0800e051
 800df70:	0800e051 	.word	0x0800e051
 800df74:	0800e051 	.word	0x0800e051
 800df78:	0800e051 	.word	0x0800e051
 800df7c:	0800e051 	.word	0x0800e051
 800df80:	0800e051 	.word	0x0800e051
 800df84:	0800e051 	.word	0x0800e051
 800df88:	0800e051 	.word	0x0800e051
 800df8c:	0800e051 	.word	0x0800e051
 800df90:	0800e051 	.word	0x0800e051
 800df94:	0800e051 	.word	0x0800e051
 800df98:	0800e051 	.word	0x0800e051
 800df9c:	0800e051 	.word	0x0800e051
 800dfa0:	0800e051 	.word	0x0800e051
 800dfa4:	0800dffd 	.word	0x0800dffd
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 800dfa8:	7afb      	ldrb	r3, [r7, #11]
 800dfaa:	687a      	ldr	r2, [r7, #4]
 800dfac:	4619      	mov	r1, r3
 800dfae:	68f8      	ldr	r0, [r7, #12]
 800dfb0:	f000 f85c 	bl	800e06c <SCSI_TestUnitReady>
      break;
 800dfb4:	e055      	b.n	800e062 <SCSI_ProcessCmd+0x246>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 800dfb6:	7afb      	ldrb	r3, [r7, #11]
 800dfb8:	687a      	ldr	r2, [r7, #4]
 800dfba:	4619      	mov	r1, r3
 800dfbc:	68f8      	ldr	r0, [r7, #12]
 800dfbe:	f000 fa0b 	bl	800e3d8 <SCSI_RequestSense>
      break;
 800dfc2:	e04e      	b.n	800e062 <SCSI_ProcessCmd+0x246>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 800dfc4:	7afb      	ldrb	r3, [r7, #11]
 800dfc6:	687a      	ldr	r2, [r7, #4]
 800dfc8:	4619      	mov	r1, r3
 800dfca:	68f8      	ldr	r0, [r7, #12]
 800dfcc:	f000 f888 	bl	800e0e0 <SCSI_Inquiry>
      break;
 800dfd0:	e047      	b.n	800e062 <SCSI_ProcessCmd+0x246>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 800dfd2:	7afb      	ldrb	r3, [r7, #11]
 800dfd4:	687a      	ldr	r2, [r7, #4]
 800dfd6:	4619      	mov	r1, r3
 800dfd8:	68f8      	ldr	r0, [r7, #12]
 800dfda:	f000 faa2 	bl	800e522 <SCSI_StartStopUnit>
      break;
 800dfde:	e040      	b.n	800e062 <SCSI_ProcessCmd+0x246>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 800dfe0:	7afb      	ldrb	r3, [r7, #11]
 800dfe2:	687a      	ldr	r2, [r7, #4]
 800dfe4:	4619      	mov	r1, r3
 800dfe6:	68f8      	ldr	r0, [r7, #12]
 800dfe8:	f000 fa9b 	bl	800e522 <SCSI_StartStopUnit>
      break;
 800dfec:	e039      	b.n	800e062 <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 800dfee:	7afb      	ldrb	r3, [r7, #11]
 800dff0:	687a      	ldr	r2, [r7, #4]
 800dff2:	4619      	mov	r1, r3
 800dff4:	68f8      	ldr	r0, [r7, #12]
 800dff6:	f000 f99f 	bl	800e338 <SCSI_ModeSense6>
      break;
 800dffa:	e032      	b.n	800e062 <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 800dffc:	7afb      	ldrb	r3, [r7, #11]
 800dffe:	687a      	ldr	r2, [r7, #4]
 800e000:	4619      	mov	r1, r3
 800e002:	68f8      	ldr	r0, [r7, #12]
 800e004:	f000 f9c0 	bl	800e388 <SCSI_ModeSense10>
      break;
 800e008:	e02b      	b.n	800e062 <SCSI_ProcessCmd+0x246>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800e00a:	7afb      	ldrb	r3, [r7, #11]
 800e00c:	687a      	ldr	r2, [r7, #4]
 800e00e:	4619      	mov	r1, r3
 800e010:	68f8      	ldr	r0, [r7, #12]
 800e012:	f000 f92c 	bl	800e26e <SCSI_ReadFormatCapacity>
      break;
 800e016:	e024      	b.n	800e062 <SCSI_ProcessCmd+0x246>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 800e018:	7afb      	ldrb	r3, [r7, #11]
 800e01a:	687a      	ldr	r2, [r7, #4]
 800e01c:	4619      	mov	r1, r3
 800e01e:	68f8      	ldr	r0, [r7, #12]
 800e020:	f000 f8be 	bl	800e1a0 <SCSI_ReadCapacity10>
      break;
 800e024:	e01d      	b.n	800e062 <SCSI_ProcessCmd+0x246>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 800e026:	7afb      	ldrb	r3, [r7, #11]
 800e028:	687a      	ldr	r2, [r7, #4]
 800e02a:	4619      	mov	r1, r3
 800e02c:	68f8      	ldr	r0, [r7, #12]
 800e02e:	f000 fa8d 	bl	800e54c <SCSI_Read10>
      break;
 800e032:	e016      	b.n	800e062 <SCSI_ProcessCmd+0x246>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 800e034:	7afb      	ldrb	r3, [r7, #11]
 800e036:	687a      	ldr	r2, [r7, #4]
 800e038:	4619      	mov	r1, r3
 800e03a:	68f8      	ldr	r0, [r7, #12]
 800e03c:	f000 fb12 	bl	800e664 <SCSI_Write10>
      break;
 800e040:	e00f      	b.n	800e062 <SCSI_ProcessCmd+0x246>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 800e042:	7afb      	ldrb	r3, [r7, #11]
 800e044:	687a      	ldr	r2, [r7, #4]
 800e046:	4619      	mov	r1, r3
 800e048:	68f8      	ldr	r0, [r7, #12]
 800e04a:	f000 fbbb 	bl	800e7c4 <SCSI_Verify10>
      break;
 800e04e:	e008      	b.n	800e062 <SCSI_ProcessCmd+0x246>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800e050:	7af9      	ldrb	r1, [r7, #11]
 800e052:	2320      	movs	r3, #32
 800e054:	2205      	movs	r2, #5
 800e056:	68f8      	ldr	r0, [r7, #12]
 800e058:	f000 fa29 	bl	800e4ae <SCSI_SenseCode>
      return -1;
 800e05c:	f04f 33ff 	mov.w	r3, #4294967295
 800e060:	e000      	b.n	800e064 <SCSI_ProcessCmd+0x248>
  }

  return 0;
 800e062:	2300      	movs	r3, #0
}
 800e064:	4618      	mov	r0, r3
 800e066:	3710      	adds	r7, #16
 800e068:	46bd      	mov	sp, r7
 800e06a:	bd80      	pop	{r7, pc}

0800e06c <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b086      	sub	sp, #24
 800e070:	af00      	add	r7, sp, #0
 800e072:	60f8      	str	r0, [r7, #12]
 800e074:	460b      	mov	r3, r1
 800e076:	607a      	str	r2, [r7, #4]
 800e078:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e080:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800e082:	697b      	ldr	r3, [r7, #20]
 800e084:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d00a      	beq.n	800e0a2 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800e092:	2320      	movs	r3, #32
 800e094:	2205      	movs	r2, #5
 800e096:	68f8      	ldr	r0, [r7, #12]
 800e098:	f000 fa09 	bl	800e4ae <SCSI_SenseCode>

    return -1;
 800e09c:	f04f 33ff 	mov.w	r3, #4294967295
 800e0a0:	e019      	b.n	800e0d6 <SCSI_TestUnitReady+0x6a>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e0a8:	689b      	ldr	r3, [r3, #8]
 800e0aa:	7afa      	ldrb	r2, [r7, #11]
 800e0ac:	4610      	mov	r0, r2
 800e0ae:	4798      	blx	r3
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d00b      	beq.n	800e0ce <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e0b6:	7af9      	ldrb	r1, [r7, #11]
 800e0b8:	233a      	movs	r3, #58	; 0x3a
 800e0ba:	2202      	movs	r2, #2
 800e0bc:	68f8      	ldr	r0, [r7, #12]
 800e0be:	f000 f9f6 	bl	800e4ae <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800e0c2:	697b      	ldr	r3, [r7, #20]
 800e0c4:	2205      	movs	r2, #5
 800e0c6:	721a      	strb	r2, [r3, #8]

    return -1;
 800e0c8:	f04f 33ff 	mov.w	r3, #4294967295
 800e0cc:	e003      	b.n	800e0d6 <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 800e0ce:	697b      	ldr	r3, [r7, #20]
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	815a      	strh	r2, [r3, #10]

  return 0;
 800e0d4:	2300      	movs	r3, #0
}
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	3718      	adds	r7, #24
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	bd80      	pop	{r7, pc}
	...

0800e0e0 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800e0e0:	b480      	push	{r7}
 800e0e2:	b089      	sub	sp, #36	; 0x24
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	60f8      	str	r0, [r7, #12]
 800e0e8:	460b      	mov	r3, r1
 800e0ea:	607a      	str	r2, [r7, #4]
 800e0ec:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0f4:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	3301      	adds	r3, #1
 800e0fa:	781b      	ldrb	r3, [r3, #0]
 800e0fc:	f003 0301 	and.w	r3, r3, #1
 800e100:	2b00      	cmp	r3, #0
 800e102:	d014      	beq.n	800e12e <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 800e104:	2307      	movs	r3, #7
 800e106:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 800e108:	69bb      	ldr	r3, [r7, #24]
 800e10a:	8bfa      	ldrh	r2, [r7, #30]
 800e10c:	815a      	strh	r2, [r3, #10]

    while (len)
 800e10e:	e00a      	b.n	800e126 <SCSI_Inquiry+0x46>
    {
      len--;
 800e110:	8bfb      	ldrh	r3, [r7, #30]
 800e112:	3b01      	subs	r3, #1
 800e114:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 800e116:	8bfa      	ldrh	r2, [r7, #30]
 800e118:	8bfb      	ldrh	r3, [r7, #30]
 800e11a:	4920      	ldr	r1, [pc, #128]	; (800e19c <SCSI_Inquiry+0xbc>)
 800e11c:	5c89      	ldrb	r1, [r1, r2]
 800e11e:	69ba      	ldr	r2, [r7, #24]
 800e120:	4413      	add	r3, r2
 800e122:	460a      	mov	r2, r1
 800e124:	731a      	strb	r2, [r3, #12]
    while (len)
 800e126:	8bfb      	ldrh	r3, [r7, #30]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d1f1      	bne.n	800e110 <SCSI_Inquiry+0x30>
 800e12c:	e02e      	b.n	800e18c <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e134:	69d9      	ldr	r1, [r3, #28]
 800e136:	7afa      	ldrb	r2, [r7, #11]
 800e138:	4613      	mov	r3, r2
 800e13a:	00db      	lsls	r3, r3, #3
 800e13c:	4413      	add	r3, r2
 800e13e:	009b      	lsls	r3, r3, #2
 800e140:	440b      	add	r3, r1
 800e142:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800e144:	697b      	ldr	r3, [r7, #20]
 800e146:	3304      	adds	r3, #4
 800e148:	781b      	ldrb	r3, [r3, #0]
 800e14a:	b29b      	uxth	r3, r3
 800e14c:	3305      	adds	r3, #5
 800e14e:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	3304      	adds	r3, #4
 800e154:	781b      	ldrb	r3, [r3, #0]
 800e156:	b29b      	uxth	r3, r3
 800e158:	8bfa      	ldrh	r2, [r7, #30]
 800e15a:	429a      	cmp	r2, r3
 800e15c:	d303      	bcc.n	800e166 <SCSI_Inquiry+0x86>
    {
      len = params[4];
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	3304      	adds	r3, #4
 800e162:	781b      	ldrb	r3, [r3, #0]
 800e164:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 800e166:	69bb      	ldr	r3, [r7, #24]
 800e168:	8bfa      	ldrh	r2, [r7, #30]
 800e16a:	815a      	strh	r2, [r3, #10]

    while (len)
 800e16c:	e00b      	b.n	800e186 <SCSI_Inquiry+0xa6>
    {
      len--;
 800e16e:	8bfb      	ldrh	r3, [r7, #30]
 800e170:	3b01      	subs	r3, #1
 800e172:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 800e174:	8bfb      	ldrh	r3, [r7, #30]
 800e176:	697a      	ldr	r2, [r7, #20]
 800e178:	441a      	add	r2, r3
 800e17a:	8bfb      	ldrh	r3, [r7, #30]
 800e17c:	7811      	ldrb	r1, [r2, #0]
 800e17e:	69ba      	ldr	r2, [r7, #24]
 800e180:	4413      	add	r3, r2
 800e182:	460a      	mov	r2, r1
 800e184:	731a      	strb	r2, [r3, #12]
    while (len)
 800e186:	8bfb      	ldrh	r3, [r7, #30]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d1f0      	bne.n	800e16e <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 800e18c:	2300      	movs	r3, #0
}
 800e18e:	4618      	mov	r0, r3
 800e190:	3724      	adds	r7, #36	; 0x24
 800e192:	46bd      	mov	sp, r7
 800e194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e198:	4770      	bx	lr
 800e19a:	bf00      	nop
 800e19c:	08015954 	.word	0x08015954

0800e1a0 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b086      	sub	sp, #24
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	60f8      	str	r0, [r7, #12]
 800e1a8:	460b      	mov	r3, r1
 800e1aa:	607a      	str	r2, [r7, #4]
 800e1ac:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1b4:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e1bc:	685b      	ldr	r3, [r3, #4]
 800e1be:	697a      	ldr	r2, [r7, #20]
 800e1c0:	f502 7118 	add.w	r1, r2, #608	; 0x260
 800e1c4:	697a      	ldr	r2, [r7, #20]
 800e1c6:	f202 225e 	addw	r2, r2, #606	; 0x25e
 800e1ca:	7af8      	ldrb	r0, [r7, #11]
 800e1cc:	4798      	blx	r3
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d008      	beq.n	800e1e6 <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e1d4:	7af9      	ldrb	r1, [r7, #11]
 800e1d6:	233a      	movs	r3, #58	; 0x3a
 800e1d8:	2202      	movs	r2, #2
 800e1da:	68f8      	ldr	r0, [r7, #12]
 800e1dc:	f000 f967 	bl	800e4ae <SCSI_SenseCode>
    return -1;
 800e1e0:	f04f 33ff 	mov.w	r3, #4294967295
 800e1e4:	e03f      	b.n	800e266 <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800e1e6:	697b      	ldr	r3, [r7, #20]
 800e1e8:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800e1ec:	3b01      	subs	r3, #1
 800e1ee:	0e1b      	lsrs	r3, r3, #24
 800e1f0:	b2da      	uxtb	r2, r3
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800e1f6:	697b      	ldr	r3, [r7, #20]
 800e1f8:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800e1fc:	3b01      	subs	r3, #1
 800e1fe:	0c1b      	lsrs	r3, r3, #16
 800e200:	b2da      	uxtb	r2, r3
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800e20c:	3b01      	subs	r3, #1
 800e20e:	0a1b      	lsrs	r3, r3, #8
 800e210:	b2da      	uxtb	r2, r3
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800e216:	697b      	ldr	r3, [r7, #20]
 800e218:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800e21c:	b2db      	uxtb	r3, r3
 800e21e:	3b01      	subs	r3, #1
 800e220:	b2da      	uxtb	r2, r3
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800e226:	697b      	ldr	r3, [r7, #20]
 800e228:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800e22c:	161b      	asrs	r3, r3, #24
 800e22e:	b2da      	uxtb	r2, r3
 800e230:	697b      	ldr	r3, [r7, #20]
 800e232:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800e23a:	141b      	asrs	r3, r3, #16
 800e23c:	b2da      	uxtb	r2, r3
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800e242:	697b      	ldr	r3, [r7, #20]
 800e244:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800e248:	0a1b      	lsrs	r3, r3, #8
 800e24a:	b29b      	uxth	r3, r3
 800e24c:	b2da      	uxtb	r2, r3
 800e24e:	697b      	ldr	r3, [r7, #20]
 800e250:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800e252:	697b      	ldr	r3, [r7, #20]
 800e254:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800e258:	b2da      	uxtb	r2, r3
 800e25a:	697b      	ldr	r3, [r7, #20]
 800e25c:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	2208      	movs	r2, #8
 800e262:	815a      	strh	r2, [r3, #10]
    return 0;
 800e264:	2300      	movs	r3, #0
  }
}
 800e266:	4618      	mov	r0, r3
 800e268:	3718      	adds	r7, #24
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd80      	pop	{r7, pc}

0800e26e <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800e26e:	b580      	push	{r7, lr}
 800e270:	b088      	sub	sp, #32
 800e272:	af00      	add	r7, sp, #0
 800e274:	60f8      	str	r0, [r7, #12]
 800e276:	460b      	mov	r3, r1
 800e278:	607a      	str	r2, [r7, #4]
 800e27a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e282:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 800e284:	2300      	movs	r3, #0
 800e286:	83fb      	strh	r3, [r7, #30]
 800e288:	e007      	b.n	800e29a <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 800e28a:	8bfb      	ldrh	r3, [r7, #30]
 800e28c:	69ba      	ldr	r2, [r7, #24]
 800e28e:	4413      	add	r3, r2
 800e290:	2200      	movs	r2, #0
 800e292:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 800e294:	8bfb      	ldrh	r3, [r7, #30]
 800e296:	3301      	adds	r3, #1
 800e298:	83fb      	strh	r3, [r7, #30]
 800e29a:	8bfb      	ldrh	r3, [r7, #30]
 800e29c:	2b0b      	cmp	r3, #11
 800e29e:	d9f4      	bls.n	800e28a <SCSI_ReadFormatCapacity+0x1c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e2a6:	685b      	ldr	r3, [r3, #4]
 800e2a8:	f107 0216 	add.w	r2, r7, #22
 800e2ac:	f107 0110 	add.w	r1, r7, #16
 800e2b0:	7af8      	ldrb	r0, [r7, #11]
 800e2b2:	4798      	blx	r3
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d008      	beq.n	800e2cc <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e2ba:	7af9      	ldrb	r1, [r7, #11]
 800e2bc:	233a      	movs	r3, #58	; 0x3a
 800e2be:	2202      	movs	r2, #2
 800e2c0:	68f8      	ldr	r0, [r7, #12]
 800e2c2:	f000 f8f4 	bl	800e4ae <SCSI_SenseCode>
    return -1;
 800e2c6:	f04f 33ff 	mov.w	r3, #4294967295
 800e2ca:	e030      	b.n	800e32e <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 800e2cc:	69bb      	ldr	r3, [r7, #24]
 800e2ce:	2208      	movs	r2, #8
 800e2d0:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800e2d2:	693b      	ldr	r3, [r7, #16]
 800e2d4:	3b01      	subs	r3, #1
 800e2d6:	0e1b      	lsrs	r3, r3, #24
 800e2d8:	b2da      	uxtb	r2, r3
 800e2da:	69bb      	ldr	r3, [r7, #24]
 800e2dc:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800e2de:	693b      	ldr	r3, [r7, #16]
 800e2e0:	3b01      	subs	r3, #1
 800e2e2:	0c1b      	lsrs	r3, r3, #16
 800e2e4:	b2da      	uxtb	r2, r3
 800e2e6:	69bb      	ldr	r3, [r7, #24]
 800e2e8:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800e2ea:	693b      	ldr	r3, [r7, #16]
 800e2ec:	3b01      	subs	r3, #1
 800e2ee:	0a1b      	lsrs	r3, r3, #8
 800e2f0:	b2da      	uxtb	r2, r3
 800e2f2:	69bb      	ldr	r3, [r7, #24]
 800e2f4:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800e2f6:	693b      	ldr	r3, [r7, #16]
 800e2f8:	b2db      	uxtb	r3, r3
 800e2fa:	3b01      	subs	r3, #1
 800e2fc:	b2da      	uxtb	r2, r3
 800e2fe:	69bb      	ldr	r3, [r7, #24]
 800e300:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 800e302:	69bb      	ldr	r3, [r7, #24]
 800e304:	2202      	movs	r2, #2
 800e306:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800e308:	8afb      	ldrh	r3, [r7, #22]
 800e30a:	141b      	asrs	r3, r3, #16
 800e30c:	b2da      	uxtb	r2, r3
 800e30e:	69bb      	ldr	r3, [r7, #24]
 800e310:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800e312:	8afb      	ldrh	r3, [r7, #22]
 800e314:	0a1b      	lsrs	r3, r3, #8
 800e316:	b29b      	uxth	r3, r3
 800e318:	b2da      	uxtb	r2, r3
 800e31a:	69bb      	ldr	r3, [r7, #24]
 800e31c:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 800e31e:	8afb      	ldrh	r3, [r7, #22]
 800e320:	b2da      	uxtb	r2, r3
 800e322:	69bb      	ldr	r3, [r7, #24]
 800e324:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 800e326:	69bb      	ldr	r3, [r7, #24]
 800e328:	220c      	movs	r2, #12
 800e32a:	815a      	strh	r2, [r3, #10]
    return 0;
 800e32c:	2300      	movs	r3, #0
  }
}
 800e32e:	4618      	mov	r0, r3
 800e330:	3720      	adds	r7, #32
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}
	...

0800e338 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800e338:	b480      	push	{r7}
 800e33a:	b087      	sub	sp, #28
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	60f8      	str	r0, [r7, #12]
 800e340:	460b      	mov	r3, r1
 800e342:	607a      	str	r2, [r7, #4]
 800e344:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e34c:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 800e34e:	2308      	movs	r3, #8
 800e350:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 800e352:	693b      	ldr	r3, [r7, #16]
 800e354:	8afa      	ldrh	r2, [r7, #22]
 800e356:	815a      	strh	r2, [r3, #10]

  while (len)
 800e358:	e00a      	b.n	800e370 <SCSI_ModeSense6+0x38>
  {
    len--;
 800e35a:	8afb      	ldrh	r3, [r7, #22]
 800e35c:	3b01      	subs	r3, #1
 800e35e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 800e360:	8afa      	ldrh	r2, [r7, #22]
 800e362:	8afb      	ldrh	r3, [r7, #22]
 800e364:	4907      	ldr	r1, [pc, #28]	; (800e384 <SCSI_ModeSense6+0x4c>)
 800e366:	5c89      	ldrb	r1, [r1, r2]
 800e368:	693a      	ldr	r2, [r7, #16]
 800e36a:	4413      	add	r3, r2
 800e36c:	460a      	mov	r2, r1
 800e36e:	731a      	strb	r2, [r3, #12]
  while (len)
 800e370:	8afb      	ldrh	r3, [r7, #22]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d1f1      	bne.n	800e35a <SCSI_ModeSense6+0x22>
  }
  return 0;
 800e376:	2300      	movs	r3, #0
}
 800e378:	4618      	mov	r0, r3
 800e37a:	371c      	adds	r7, #28
 800e37c:	46bd      	mov	sp, r7
 800e37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e382:	4770      	bx	lr
 800e384:	0801595c 	.word	0x0801595c

0800e388 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800e388:	b480      	push	{r7}
 800e38a:	b087      	sub	sp, #28
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	60f8      	str	r0, [r7, #12]
 800e390:	460b      	mov	r3, r1
 800e392:	607a      	str	r2, [r7, #4]
 800e394:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 800e396:	2308      	movs	r3, #8
 800e398:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3a0:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 800e3a2:	693b      	ldr	r3, [r7, #16]
 800e3a4:	8afa      	ldrh	r2, [r7, #22]
 800e3a6:	815a      	strh	r2, [r3, #10]

  while (len)
 800e3a8:	e00a      	b.n	800e3c0 <SCSI_ModeSense10+0x38>
  {
    len--;
 800e3aa:	8afb      	ldrh	r3, [r7, #22]
 800e3ac:	3b01      	subs	r3, #1
 800e3ae:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 800e3b0:	8afa      	ldrh	r2, [r7, #22]
 800e3b2:	8afb      	ldrh	r3, [r7, #22]
 800e3b4:	4907      	ldr	r1, [pc, #28]	; (800e3d4 <SCSI_ModeSense10+0x4c>)
 800e3b6:	5c89      	ldrb	r1, [r1, r2]
 800e3b8:	693a      	ldr	r2, [r7, #16]
 800e3ba:	4413      	add	r3, r2
 800e3bc:	460a      	mov	r2, r1
 800e3be:	731a      	strb	r2, [r3, #12]
  while (len)
 800e3c0:	8afb      	ldrh	r3, [r7, #22]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d1f1      	bne.n	800e3aa <SCSI_ModeSense10+0x22>
  }

  return 0;
 800e3c6:	2300      	movs	r3, #0
}
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	371c      	adds	r7, #28
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d2:	4770      	bx	lr
 800e3d4:	08015964 	.word	0x08015964

0800e3d8 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800e3d8:	b480      	push	{r7}
 800e3da:	b087      	sub	sp, #28
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	60f8      	str	r0, [r7, #12]
 800e3e0:	460b      	mov	r3, r1
 800e3e2:	607a      	str	r2, [r7, #4]
 800e3e4:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3ec:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	75fb      	strb	r3, [r7, #23]
 800e3f2:	e007      	b.n	800e404 <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 800e3f4:	7dfb      	ldrb	r3, [r7, #23]
 800e3f6:	693a      	ldr	r2, [r7, #16]
 800e3f8:	4413      	add	r3, r2
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 800e3fe:	7dfb      	ldrb	r3, [r7, #23]
 800e400:	3301      	adds	r3, #1
 800e402:	75fb      	strb	r3, [r7, #23]
 800e404:	7dfb      	ldrb	r3, [r7, #23]
 800e406:	2b11      	cmp	r3, #17
 800e408:	d9f4      	bls.n	800e3f4 <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0] = 0x70U;
 800e40a:	693b      	ldr	r3, [r7, #16]
 800e40c:	2270      	movs	r2, #112	; 0x70
 800e40e:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800e410:	693b      	ldr	r3, [r7, #16]
 800e412:	220c      	movs	r2, #12
 800e414:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800e416:	693b      	ldr	r3, [r7, #16]
 800e418:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 800e41c:	693b      	ldr	r3, [r7, #16]
 800e41e:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800e422:	429a      	cmp	r2, r3
 800e424:	d02e      	beq.n	800e484 <SCSI_RequestSense+0xac>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800e426:	693b      	ldr	r3, [r7, #16]
 800e428:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800e42c:	693a      	ldr	r2, [r7, #16]
 800e42e:	3347      	adds	r3, #71	; 0x47
 800e430:	00db      	lsls	r3, r3, #3
 800e432:	4413      	add	r3, r2
 800e434:	791a      	ldrb	r2, [r3, #4]
 800e436:	693b      	ldr	r3, [r7, #16]
 800e438:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800e43a:	693b      	ldr	r3, [r7, #16]
 800e43c:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800e440:	693a      	ldr	r2, [r7, #16]
 800e442:	3347      	adds	r3, #71	; 0x47
 800e444:	00db      	lsls	r3, r3, #3
 800e446:	4413      	add	r3, r2
 800e448:	7a5a      	ldrb	r2, [r3, #9]
 800e44a:	693b      	ldr	r3, [r7, #16]
 800e44c:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800e44e:	693b      	ldr	r3, [r7, #16]
 800e450:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800e454:	693a      	ldr	r2, [r7, #16]
 800e456:	3347      	adds	r3, #71	; 0x47
 800e458:	00db      	lsls	r3, r3, #3
 800e45a:	4413      	add	r3, r2
 800e45c:	7a1a      	ldrb	r2, [r3, #8]
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 800e462:	693b      	ldr	r3, [r7, #16]
 800e464:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800e468:	3301      	adds	r3, #1
 800e46a:	b2da      	uxtb	r2, r3
 800e46c:	693b      	ldr	r3, [r7, #16]
 800e46e:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800e472:	693b      	ldr	r3, [r7, #16]
 800e474:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800e478:	2b04      	cmp	r3, #4
 800e47a:	d103      	bne.n	800e484 <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 800e47c:	693b      	ldr	r3, [r7, #16]
 800e47e:	2200      	movs	r2, #0
 800e480:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800e484:	693b      	ldr	r3, [r7, #16]
 800e486:	2212      	movs	r2, #18
 800e488:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	3304      	adds	r3, #4
 800e48e:	781b      	ldrb	r3, [r3, #0]
 800e490:	2b12      	cmp	r3, #18
 800e492:	d805      	bhi.n	800e4a0 <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	3304      	adds	r3, #4
 800e498:	781b      	ldrb	r3, [r3, #0]
 800e49a:	b29a      	uxth	r2, r3
 800e49c:	693b      	ldr	r3, [r7, #16]
 800e49e:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 800e4a0:	2300      	movs	r3, #0
}
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	371c      	adds	r7, #28
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ac:	4770      	bx	lr

0800e4ae <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800e4ae:	b480      	push	{r7}
 800e4b0:	b085      	sub	sp, #20
 800e4b2:	af00      	add	r7, sp, #0
 800e4b4:	6078      	str	r0, [r7, #4]
 800e4b6:	4608      	mov	r0, r1
 800e4b8:	4611      	mov	r1, r2
 800e4ba:	461a      	mov	r2, r3
 800e4bc:	4603      	mov	r3, r0
 800e4be:	70fb      	strb	r3, [r7, #3]
 800e4c0:	460b      	mov	r3, r1
 800e4c2:	70bb      	strb	r3, [r7, #2]
 800e4c4:	4613      	mov	r3, r2
 800e4c6:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4ce:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800e4d6:	68fa      	ldr	r2, [r7, #12]
 800e4d8:	3347      	adds	r3, #71	; 0x47
 800e4da:	00db      	lsls	r3, r3, #3
 800e4dc:	4413      	add	r3, r2
 800e4de:	78ba      	ldrb	r2, [r7, #2]
 800e4e0:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800e4e8:	68fa      	ldr	r2, [r7, #12]
 800e4ea:	3347      	adds	r3, #71	; 0x47
 800e4ec:	00db      	lsls	r3, r3, #3
 800e4ee:	4413      	add	r3, r2
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800e4fa:	3301      	adds	r3, #1
 800e4fc:	b2da      	uxtb	r2, r3
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800e50a:	2b04      	cmp	r3, #4
 800e50c:	d103      	bne.n	800e516 <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	2200      	movs	r2, #0
 800e512:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 800e516:	bf00      	nop
 800e518:	3714      	adds	r7, #20
 800e51a:	46bd      	mov	sp, r7
 800e51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e520:	4770      	bx	lr

0800e522 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800e522:	b480      	push	{r7}
 800e524:	b087      	sub	sp, #28
 800e526:	af00      	add	r7, sp, #0
 800e528:	60f8      	str	r0, [r7, #12]
 800e52a:	460b      	mov	r3, r1
 800e52c:	607a      	str	r2, [r7, #4]
 800e52e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e536:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 800e538:	697b      	ldr	r3, [r7, #20]
 800e53a:	2200      	movs	r2, #0
 800e53c:	815a      	strh	r2, [r3, #10]
  return 0;
 800e53e:	2300      	movs	r3, #0
}
 800e540:	4618      	mov	r0, r3
 800e542:	371c      	adds	r7, #28
 800e544:	46bd      	mov	sp, r7
 800e546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54a:	4770      	bx	lr

0800e54c <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b086      	sub	sp, #24
 800e550:	af00      	add	r7, sp, #0
 800e552:	60f8      	str	r0, [r7, #12]
 800e554:	460b      	mov	r3, r1
 800e556:	607a      	str	r2, [r7, #4]
 800e558:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e560:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	7a1b      	ldrb	r3, [r3, #8]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d16e      	bne.n	800e648 <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800e56a:	697b      	ldr	r3, [r7, #20]
 800e56c:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800e570:	b25b      	sxtb	r3, r3
 800e572:	2b00      	cmp	r3, #0
 800e574:	db0a      	blt.n	800e58c <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e576:	697b      	ldr	r3, [r7, #20]
 800e578:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800e57c:	2320      	movs	r3, #32
 800e57e:	2205      	movs	r2, #5
 800e580:	68f8      	ldr	r0, [r7, #12]
 800e582:	f7ff ff94 	bl	800e4ae <SCSI_SenseCode>
      return -1;
 800e586:	f04f 33ff 	mov.w	r3, #4294967295
 800e58a:	e067      	b.n	800e65c <SCSI_Read10+0x110>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e592:	689b      	ldr	r3, [r3, #8]
 800e594:	7afa      	ldrb	r2, [r7, #11]
 800e596:	4610      	mov	r0, r2
 800e598:	4798      	blx	r3
 800e59a:	4603      	mov	r3, r0
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d008      	beq.n	800e5b2 <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e5a0:	7af9      	ldrb	r1, [r7, #11]
 800e5a2:	233a      	movs	r3, #58	; 0x3a
 800e5a4:	2202      	movs	r2, #2
 800e5a6:	68f8      	ldr	r0, [r7, #12]
 800e5a8:	f7ff ff81 	bl	800e4ae <SCSI_SenseCode>
      return -1;
 800e5ac:	f04f 33ff 	mov.w	r3, #4294967295
 800e5b0:	e054      	b.n	800e65c <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	3302      	adds	r3, #2
 800e5b6:	781b      	ldrb	r3, [r3, #0]
 800e5b8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	3303      	adds	r3, #3
 800e5be:	781b      	ldrb	r3, [r3, #0]
 800e5c0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e5c2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	3304      	adds	r3, #4
 800e5c8:	781b      	ldrb	r3, [r3, #0]
 800e5ca:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e5cc:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e5ce:	687a      	ldr	r2, [r7, #4]
 800e5d0:	3205      	adds	r2, #5
 800e5d2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800e5d4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e5d6:	697b      	ldr	r3, [r7, #20]
 800e5d8:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	3307      	adds	r3, #7
 800e5e0:	781b      	ldrb	r3, [r3, #0]
 800e5e2:	021b      	lsls	r3, r3, #8
 800e5e4:	687a      	ldr	r2, [r7, #4]
 800e5e6:	3208      	adds	r2, #8
 800e5e8:	7812      	ldrb	r2, [r2, #0]
 800e5ea:	431a      	orrs	r2, r3
 800e5ec:	697b      	ldr	r3, [r7, #20]
 800e5ee:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e5f2:	697b      	ldr	r3, [r7, #20]
 800e5f4:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800e5f8:	697b      	ldr	r3, [r7, #20]
 800e5fa:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e5fe:	7af9      	ldrb	r1, [r7, #11]
 800e600:	68f8      	ldr	r0, [r7, #12]
 800e602:	f000 f912 	bl	800e82a <SCSI_CheckAddressRange>
 800e606:	4603      	mov	r3, r0
 800e608:	2b00      	cmp	r3, #0
 800e60a:	da02      	bge.n	800e612 <SCSI_Read10+0xc6>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e60c:	f04f 33ff 	mov.w	r3, #4294967295
 800e610:	e024      	b.n	800e65c <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	2202      	movs	r2, #2
 800e616:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800e618:	697b      	ldr	r3, [r7, #20]
 800e61a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800e61e:	697b      	ldr	r3, [r7, #20]
 800e620:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e624:	6979      	ldr	r1, [r7, #20]
 800e626:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
 800e62a:	fb01 f303 	mul.w	r3, r1, r3
 800e62e:	429a      	cmp	r2, r3
 800e630:	d00a      	beq.n	800e648 <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e632:	697b      	ldr	r3, [r7, #20]
 800e634:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800e638:	2320      	movs	r3, #32
 800e63a:	2205      	movs	r2, #5
 800e63c:	68f8      	ldr	r0, [r7, #12]
 800e63e:	f7ff ff36 	bl	800e4ae <SCSI_SenseCode>
      return -1;
 800e642:	f04f 33ff 	mov.w	r3, #4294967295
 800e646:	e009      	b.n	800e65c <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800e648:	697b      	ldr	r3, [r7, #20]
 800e64a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e64e:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 800e650:	7afb      	ldrb	r3, [r7, #11]
 800e652:	4619      	mov	r1, r3
 800e654:	68f8      	ldr	r0, [r7, #12]
 800e656:	f000 f90a 	bl	800e86e <SCSI_ProcessRead>
 800e65a:	4603      	mov	r3, r0
}
 800e65c:	4618      	mov	r0, r3
 800e65e:	3718      	adds	r7, #24
 800e660:	46bd      	mov	sp, r7
 800e662:	bd80      	pop	{r7, pc}

0800e664 <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b086      	sub	sp, #24
 800e668:	af00      	add	r7, sp, #0
 800e66a:	60f8      	str	r0, [r7, #12]
 800e66c:	460b      	mov	r3, r1
 800e66e:	607a      	str	r2, [r7, #4]
 800e670:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e678:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800e67a:	697b      	ldr	r3, [r7, #20]
 800e67c:	7a1b      	ldrb	r3, [r3, #8]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	f040 8096 	bne.w	800e7b0 <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800e684:	697b      	ldr	r3, [r7, #20]
 800e686:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800e68a:	b25b      	sxtb	r3, r3
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	da0a      	bge.n	800e6a6 <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e690:	697b      	ldr	r3, [r7, #20]
 800e692:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800e696:	2320      	movs	r3, #32
 800e698:	2205      	movs	r2, #5
 800e69a:	68f8      	ldr	r0, [r7, #12]
 800e69c:	f7ff ff07 	bl	800e4ae <SCSI_SenseCode>
      return -1;
 800e6a0:	f04f 33ff 	mov.w	r3, #4294967295
 800e6a4:	e08a      	b.n	800e7bc <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e6ac:	689b      	ldr	r3, [r3, #8]
 800e6ae:	7afa      	ldrb	r2, [r7, #11]
 800e6b0:	4610      	mov	r0, r2
 800e6b2:	4798      	blx	r3
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d008      	beq.n	800e6cc <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e6ba:	7af9      	ldrb	r1, [r7, #11]
 800e6bc:	233a      	movs	r3, #58	; 0x3a
 800e6be:	2202      	movs	r2, #2
 800e6c0:	68f8      	ldr	r0, [r7, #12]
 800e6c2:	f7ff fef4 	bl	800e4ae <SCSI_SenseCode>
      return -1;
 800e6c6:	f04f 33ff 	mov.w	r3, #4294967295
 800e6ca:	e077      	b.n	800e7bc <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e6d2:	68db      	ldr	r3, [r3, #12]
 800e6d4:	7afa      	ldrb	r2, [r7, #11]
 800e6d6:	4610      	mov	r0, r2
 800e6d8:	4798      	blx	r3
 800e6da:	4603      	mov	r3, r0
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d008      	beq.n	800e6f2 <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800e6e0:	7af9      	ldrb	r1, [r7, #11]
 800e6e2:	2327      	movs	r3, #39	; 0x27
 800e6e4:	2202      	movs	r2, #2
 800e6e6:	68f8      	ldr	r0, [r7, #12]
 800e6e8:	f7ff fee1 	bl	800e4ae <SCSI_SenseCode>
      return -1;
 800e6ec:	f04f 33ff 	mov.w	r3, #4294967295
 800e6f0:	e064      	b.n	800e7bc <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	3302      	adds	r3, #2
 800e6f6:	781b      	ldrb	r3, [r3, #0]
 800e6f8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	3303      	adds	r3, #3
 800e6fe:	781b      	ldrb	r3, [r3, #0]
 800e700:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e702:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	3304      	adds	r3, #4
 800e708:	781b      	ldrb	r3, [r3, #0]
 800e70a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e70c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e70e:	687a      	ldr	r2, [r7, #4]
 800e710:	3205      	adds	r2, #5
 800e712:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800e714:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e716:	697b      	ldr	r3, [r7, #20]
 800e718:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	3307      	adds	r3, #7
 800e720:	781b      	ldrb	r3, [r3, #0]
 800e722:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800e724:	687a      	ldr	r2, [r7, #4]
 800e726:	3208      	adds	r2, #8
 800e728:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800e72a:	431a      	orrs	r2, r3
 800e72c:	697b      	ldr	r3, [r7, #20]
 800e72e:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e732:	697b      	ldr	r3, [r7, #20]
 800e734:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800e738:	697b      	ldr	r3, [r7, #20]
 800e73a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e73e:	7af9      	ldrb	r1, [r7, #11]
 800e740:	68f8      	ldr	r0, [r7, #12]
 800e742:	f000 f872 	bl	800e82a <SCSI_CheckAddressRange>
 800e746:	4603      	mov	r3, r0
 800e748:	2b00      	cmp	r3, #0
 800e74a:	da02      	bge.n	800e752 <SCSI_Write10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e74c:	f04f 33ff 	mov.w	r3, #4294967295
 800e750:	e034      	b.n	800e7bc <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e752:	697b      	ldr	r3, [r7, #20]
 800e754:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e758:	697a      	ldr	r2, [r7, #20]
 800e75a:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800e75e:	fb02 f303 	mul.w	r3, r2, r3
 800e762:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800e764:	697b      	ldr	r3, [r7, #20]
 800e766:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e76a:	693a      	ldr	r2, [r7, #16]
 800e76c:	429a      	cmp	r2, r3
 800e76e:	d00a      	beq.n	800e786 <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e770:	697b      	ldr	r3, [r7, #20]
 800e772:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800e776:	2320      	movs	r3, #32
 800e778:	2205      	movs	r2, #5
 800e77a:	68f8      	ldr	r0, [r7, #12]
 800e77c:	f7ff fe97 	bl	800e4ae <SCSI_SenseCode>
      return -1;
 800e780:	f04f 33ff 	mov.w	r3, #4294967295
 800e784:	e01a      	b.n	800e7bc <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800e786:	693b      	ldr	r3, [r7, #16]
 800e788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e78c:	bf28      	it	cs
 800e78e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e792:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	2201      	movs	r2, #1
 800e798:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800e79a:	697b      	ldr	r3, [r7, #20]
 800e79c:	f103 020c 	add.w	r2, r3, #12
 800e7a0:	693b      	ldr	r3, [r7, #16]
 800e7a2:	b29b      	uxth	r3, r3
 800e7a4:	2101      	movs	r1, #1
 800e7a6:	68f8      	ldr	r0, [r7, #12]
 800e7a8:	f006 fef0 	bl	801558c <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	e005      	b.n	800e7bc <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 800e7b0:	7afb      	ldrb	r3, [r7, #11]
 800e7b2:	4619      	mov	r1, r3
 800e7b4:	68f8      	ldr	r0, [r7, #12]
 800e7b6:	f000 f8ce 	bl	800e956 <SCSI_ProcessWrite>
 800e7ba:	4603      	mov	r3, r0
}
 800e7bc:	4618      	mov	r0, r3
 800e7be:	3718      	adds	r7, #24
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}

0800e7c4 <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b086      	sub	sp, #24
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	60f8      	str	r0, [r7, #12]
 800e7cc:	460b      	mov	r3, r1
 800e7ce:	607a      	str	r2, [r7, #4]
 800e7d0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7d8:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	3301      	adds	r3, #1
 800e7de:	781b      	ldrb	r3, [r3, #0]
 800e7e0:	f003 0302 	and.w	r3, r3, #2
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d008      	beq.n	800e7fa <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800e7e8:	7af9      	ldrb	r1, [r7, #11]
 800e7ea:	2324      	movs	r3, #36	; 0x24
 800e7ec:	2205      	movs	r2, #5
 800e7ee:	68f8      	ldr	r0, [r7, #12]
 800e7f0:	f7ff fe5d 	bl	800e4ae <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800e7f4:	f04f 33ff 	mov.w	r3, #4294967295
 800e7f8:	e013      	b.n	800e822 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e7fa:	697b      	ldr	r3, [r7, #20]
 800e7fc:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800e800:	697b      	ldr	r3, [r7, #20]
 800e802:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e806:	7af9      	ldrb	r1, [r7, #11]
 800e808:	68f8      	ldr	r0, [r7, #12]
 800e80a:	f000 f80e 	bl	800e82a <SCSI_CheckAddressRange>
 800e80e:	4603      	mov	r3, r0
 800e810:	2b00      	cmp	r3, #0
 800e812:	da02      	bge.n	800e81a <SCSI_Verify10+0x56>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 800e814:	f04f 33ff 	mov.w	r3, #4294967295
 800e818:	e003      	b.n	800e822 <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 800e81a:	697b      	ldr	r3, [r7, #20]
 800e81c:	2200      	movs	r2, #0
 800e81e:	815a      	strh	r2, [r3, #10]
  return 0;
 800e820:	2300      	movs	r3, #0
}
 800e822:	4618      	mov	r0, r3
 800e824:	3718      	adds	r7, #24
 800e826:	46bd      	mov	sp, r7
 800e828:	bd80      	pop	{r7, pc}

0800e82a <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800e82a:	b580      	push	{r7, lr}
 800e82c:	b086      	sub	sp, #24
 800e82e:	af00      	add	r7, sp, #0
 800e830:	60f8      	str	r0, [r7, #12]
 800e832:	607a      	str	r2, [r7, #4]
 800e834:	603b      	str	r3, [r7, #0]
 800e836:	460b      	mov	r3, r1
 800e838:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e840:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800e842:	687a      	ldr	r2, [r7, #4]
 800e844:	683b      	ldr	r3, [r7, #0]
 800e846:	441a      	add	r2, r3
 800e848:	697b      	ldr	r3, [r7, #20]
 800e84a:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800e84e:	429a      	cmp	r2, r3
 800e850:	d908      	bls.n	800e864 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800e852:	7af9      	ldrb	r1, [r7, #11]
 800e854:	2321      	movs	r3, #33	; 0x21
 800e856:	2205      	movs	r2, #5
 800e858:	68f8      	ldr	r0, [r7, #12]
 800e85a:	f7ff fe28 	bl	800e4ae <SCSI_SenseCode>
    return -1;
 800e85e:	f04f 33ff 	mov.w	r3, #4294967295
 800e862:	e000      	b.n	800e866 <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 800e864:	2300      	movs	r3, #0
}
 800e866:	4618      	mov	r0, r3
 800e868:	3718      	adds	r7, #24
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}

0800e86e <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 800e86e:	b590      	push	{r4, r7, lr}
 800e870:	b085      	sub	sp, #20
 800e872:	af00      	add	r7, sp, #0
 800e874:	6078      	str	r0, [r7, #4]
 800e876:	460b      	mov	r3, r1
 800e878:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e880:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e888:	68fa      	ldr	r2, [r7, #12]
 800e88a:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800e88e:	fb02 f303 	mul.w	r3, r2, r3
 800e892:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800e894:	68bb      	ldr	r3, [r7, #8]
 800e896:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e89a:	bf28      	it	cs
 800e89c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e8a0:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e8a8:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	f103 010c 	add.w	r1, r3, #12
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800e8bc:	4618      	mov	r0, r3
 800e8be:	68bb      	ldr	r3, [r7, #8]
 800e8c0:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800e8c4:	b29b      	uxth	r3, r3
 800e8c6:	78f8      	ldrb	r0, [r7, #3]
 800e8c8:	47a0      	blx	r4
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	da08      	bge.n	800e8e2 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800e8d0:	78f9      	ldrb	r1, [r7, #3]
 800e8d2:	2311      	movs	r3, #17
 800e8d4:	2204      	movs	r2, #4
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	f7ff fde9 	bl	800e4ae <SCSI_SenseCode>
    return -1;
 800e8dc:	f04f 33ff 	mov.w	r3, #4294967295
 800e8e0:	e035      	b.n	800e94e <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	f103 020c 	add.w	r2, r3, #12
 800e8e8:	68bb      	ldr	r3, [r7, #8]
 800e8ea:	b29b      	uxth	r3, r3
 800e8ec:	2181      	movs	r1, #129	; 0x81
 800e8ee:	6878      	ldr	r0, [r7, #4]
 800e8f0:	f006 fe29 	bl	8015546 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800e900:	4619      	mov	r1, r3
 800e902:	68bb      	ldr	r3, [r7, #8]
 800e904:	fbb3 f3f1 	udiv	r3, r3, r1
 800e908:	441a      	add	r2, r3
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800e91c:	4619      	mov	r1, r3
 800e91e:	68bb      	ldr	r3, [r7, #8]
 800e920:	fbb3 f3f1 	udiv	r3, r3, r1
 800e924:	1ad2      	subs	r2, r2, r3
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	1ad2      	subs	r2, r2, r3
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e942:	2b00      	cmp	r3, #0
 800e944:	d102      	bne.n	800e94c <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	2203      	movs	r2, #3
 800e94a:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 800e94c:	2300      	movs	r3, #0
}
 800e94e:	4618      	mov	r0, r3
 800e950:	3714      	adds	r7, #20
 800e952:	46bd      	mov	sp, r7
 800e954:	bd90      	pop	{r4, r7, pc}

0800e956 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 800e956:	b590      	push	{r4, r7, lr}
 800e958:	b085      	sub	sp, #20
 800e95a:	af00      	add	r7, sp, #0
 800e95c:	6078      	str	r0, [r7, #4]
 800e95e:	460b      	mov	r3, r1
 800e960:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e968:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e970:	68fa      	ldr	r2, [r7, #12]
 800e972:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800e976:	fb02 f303 	mul.w	r3, r2, r3
 800e97a:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800e97c:	68bb      	ldr	r3, [r7, #8]
 800e97e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e982:	bf28      	it	cs
 800e984:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e988:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e990:	695c      	ldr	r4, [r3, #20]
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	f103 010c 	add.w	r1, r3, #12
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800e9ac:	b29b      	uxth	r3, r3
 800e9ae:	78f8      	ldrb	r0, [r7, #3]
 800e9b0:	47a0      	blx	r4
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	da08      	bge.n	800e9ca <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800e9b8:	78f9      	ldrb	r1, [r7, #3]
 800e9ba:	2303      	movs	r3, #3
 800e9bc:	2204      	movs	r2, #4
 800e9be:	6878      	ldr	r0, [r7, #4]
 800e9c0:	f7ff fd75 	bl	800e4ae <SCSI_SenseCode>

    return -1;
 800e9c4:	f04f 33ff 	mov.w	r3, #4294967295
 800e9c8:	e045      	b.n	800ea56 <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800e9d6:	4619      	mov	r1, r3
 800e9d8:	68bb      	ldr	r3, [r7, #8]
 800e9da:	fbb3 f3f1 	udiv	r3, r3, r1
 800e9de:	441a      	add	r2, r3
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800e9f2:	4619      	mov	r1, r3
 800e9f4:	68bb      	ldr	r3, [r7, #8]
 800e9f6:	fbb3 f3f1 	udiv	r3, r3, r1
 800e9fa:	1ad2      	subs	r2, r2, r3
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800ea08:	68bb      	ldr	r3, [r7, #8]
 800ea0a:	1ad2      	subs	r2, r2, r3
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d104      	bne.n	800ea26 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800ea1c:	2100      	movs	r1, #0
 800ea1e:	6878      	ldr	r0, [r7, #4]
 800ea20:	f7ff f97a 	bl	800dd18 <MSC_BOT_SendCSW>
 800ea24:	e016      	b.n	800ea54 <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ea2c:	68fa      	ldr	r2, [r7, #12]
 800ea2e:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800ea32:	fb02 f303 	mul.w	r3, r2, r3
 800ea36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea3a:	bf28      	it	cs
 800ea3c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800ea40:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	f103 020c 	add.w	r2, r3, #12
 800ea48:	68bb      	ldr	r3, [r7, #8]
 800ea4a:	b29b      	uxth	r3, r3
 800ea4c:	2101      	movs	r1, #1
 800ea4e:	6878      	ldr	r0, [r7, #4]
 800ea50:	f006 fd9c 	bl	801558c <USBD_LL_PrepareReceive>
  }

  return 0;
 800ea54:	2300      	movs	r3, #0
}
 800ea56:	4618      	mov	r0, r3
 800ea58:	3714      	adds	r7, #20
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd90      	pop	{r4, r7, pc}

0800ea5e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ea5e:	b580      	push	{r7, lr}
 800ea60:	b084      	sub	sp, #16
 800ea62:	af00      	add	r7, sp, #0
 800ea64:	60f8      	str	r0, [r7, #12]
 800ea66:	60b9      	str	r1, [r7, #8]
 800ea68:	4613      	mov	r3, r2
 800ea6a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d101      	bne.n	800ea76 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ea72:	2302      	movs	r3, #2
 800ea74:	e01a      	b.n	800eaac <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d003      	beq.n	800ea88 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	2200      	movs	r2, #0
 800ea84:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ea88:	68bb      	ldr	r3, [r7, #8]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d003      	beq.n	800ea96 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	68ba      	ldr	r2, [r7, #8]
 800ea92:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	2201      	movs	r2, #1
 800ea9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	79fa      	ldrb	r2, [r7, #7]
 800eaa2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800eaa4:	68f8      	ldr	r0, [r7, #12]
 800eaa6:	f006 fbdb 	bl	8015260 <USBD_LL_Init>

  return USBD_OK;
 800eaaa:	2300      	movs	r3, #0
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	3710      	adds	r7, #16
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}

0800eab4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800eab4:	b480      	push	{r7}
 800eab6:	b085      	sub	sp, #20
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
 800eabc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800eabe:	2300      	movs	r3, #0
 800eac0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d006      	beq.n	800ead6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	683a      	ldr	r2, [r7, #0]
 800eacc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800ead0:	2300      	movs	r3, #0
 800ead2:	73fb      	strb	r3, [r7, #15]
 800ead4:	e001      	b.n	800eada <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800ead6:	2302      	movs	r3, #2
 800ead8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800eada:	7bfb      	ldrb	r3, [r7, #15]
}
 800eadc:	4618      	mov	r0, r3
 800eade:	3714      	adds	r7, #20
 800eae0:	46bd      	mov	sp, r7
 800eae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae6:	4770      	bx	lr

0800eae8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b082      	sub	sp, #8
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f006 fc05 	bl	8015300 <USBD_LL_Start>

  return USBD_OK;
 800eaf6:	2300      	movs	r3, #0
}
 800eaf8:	4618      	mov	r0, r3
 800eafa:	3708      	adds	r7, #8
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}

0800eb00 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop(USBD_HandleTypeDef *pdev)
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b082      	sub	sp, #8
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb0e:	685b      	ldr	r3, [r3, #4]
 800eb10:	687a      	ldr	r2, [r7, #4]
 800eb12:	6852      	ldr	r2, [r2, #4]
 800eb14:	b2d2      	uxtb	r2, r2
 800eb16:	4611      	mov	r1, r2
 800eb18:	6878      	ldr	r0, [r7, #4]
 800eb1a:	4798      	blx	r3

  /* Stop the low level driver */
  USBD_LL_Stop(pdev);
 800eb1c:	6878      	ldr	r0, [r7, #4]
 800eb1e:	f006 fc0a 	bl	8015336 <USBD_LL_Stop>

  return USBD_OK;
 800eb22:	2300      	movs	r3, #0
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	3708      	adds	r7, #8
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}

0800eb2c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800eb2c:	b480      	push	{r7}
 800eb2e:	b083      	sub	sp, #12
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800eb34:	2300      	movs	r3, #0
}
 800eb36:	4618      	mov	r0, r3
 800eb38:	370c      	adds	r7, #12
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb40:	4770      	bx	lr

0800eb42 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800eb42:	b580      	push	{r7, lr}
 800eb44:	b084      	sub	sp, #16
 800eb46:	af00      	add	r7, sp, #0
 800eb48:	6078      	str	r0, [r7, #4]
 800eb4a:	460b      	mov	r3, r1
 800eb4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800eb4e:	2302      	movs	r3, #2
 800eb50:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d00c      	beq.n	800eb76 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	78fa      	ldrb	r2, [r7, #3]
 800eb66:	4611      	mov	r1, r2
 800eb68:	6878      	ldr	r0, [r7, #4]
 800eb6a:	4798      	blx	r3
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d101      	bne.n	800eb76 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800eb72:	2300      	movs	r3, #0
 800eb74:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800eb76:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb78:	4618      	mov	r0, r3
 800eb7a:	3710      	adds	r7, #16
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	bd80      	pop	{r7, pc}

0800eb80 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b082      	sub	sp, #8
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
 800eb88:	460b      	mov	r3, r1
 800eb8a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb92:	685b      	ldr	r3, [r3, #4]
 800eb94:	78fa      	ldrb	r2, [r7, #3]
 800eb96:	4611      	mov	r1, r2
 800eb98:	6878      	ldr	r0, [r7, #4]
 800eb9a:	4798      	blx	r3

  return USBD_OK;
 800eb9c:	2300      	movs	r3, #0
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	3708      	adds	r7, #8
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}

0800eba6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800eba6:	b580      	push	{r7, lr}
 800eba8:	b082      	sub	sp, #8
 800ebaa:	af00      	add	r7, sp, #0
 800ebac:	6078      	str	r0, [r7, #4]
 800ebae:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ebb6:	6839      	ldr	r1, [r7, #0]
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f000 ff09 	bl	800f9d0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	2201      	movs	r2, #1
 800ebc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ebcc:	461a      	mov	r2, r3
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ebda:	f003 031f 	and.w	r3, r3, #31
 800ebde:	2b01      	cmp	r3, #1
 800ebe0:	d00c      	beq.n	800ebfc <USBD_LL_SetupStage+0x56>
 800ebe2:	2b01      	cmp	r3, #1
 800ebe4:	d302      	bcc.n	800ebec <USBD_LL_SetupStage+0x46>
 800ebe6:	2b02      	cmp	r3, #2
 800ebe8:	d010      	beq.n	800ec0c <USBD_LL_SetupStage+0x66>
 800ebea:	e017      	b.n	800ec1c <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ebf2:	4619      	mov	r1, r3
 800ebf4:	6878      	ldr	r0, [r7, #4]
 800ebf6:	f000 fa09 	bl	800f00c <USBD_StdDevReq>
      break;
 800ebfa:	e01a      	b.n	800ec32 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ec02:	4619      	mov	r1, r3
 800ec04:	6878      	ldr	r0, [r7, #4]
 800ec06:	f000 fa6b 	bl	800f0e0 <USBD_StdItfReq>
      break;
 800ec0a:	e012      	b.n	800ec32 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ec12:	4619      	mov	r1, r3
 800ec14:	6878      	ldr	r0, [r7, #4]
 800ec16:	f000 faa9 	bl	800f16c <USBD_StdEPReq>
      break;
 800ec1a:	e00a      	b.n	800ec32 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ec22:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ec26:	b2db      	uxtb	r3, r3
 800ec28:	4619      	mov	r1, r3
 800ec2a:	6878      	ldr	r0, [r7, #4]
 800ec2c:	f006 fc02 	bl	8015434 <USBD_LL_StallEP>
      break;
 800ec30:	bf00      	nop
  }

  return USBD_OK;
 800ec32:	2300      	movs	r3, #0
}
 800ec34:	4618      	mov	r0, r3
 800ec36:	3708      	adds	r7, #8
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	bd80      	pop	{r7, pc}

0800ec3c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b086      	sub	sp, #24
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	60f8      	str	r0, [r7, #12]
 800ec44:	460b      	mov	r3, r1
 800ec46:	607a      	str	r2, [r7, #4]
 800ec48:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ec4a:	7afb      	ldrb	r3, [r7, #11]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d14b      	bne.n	800ece8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ec56:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ec5e:	2b03      	cmp	r3, #3
 800ec60:	d134      	bne.n	800eccc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	68da      	ldr	r2, [r3, #12]
 800ec66:	697b      	ldr	r3, [r7, #20]
 800ec68:	691b      	ldr	r3, [r3, #16]
 800ec6a:	429a      	cmp	r2, r3
 800ec6c:	d919      	bls.n	800eca2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	68da      	ldr	r2, [r3, #12]
 800ec72:	697b      	ldr	r3, [r7, #20]
 800ec74:	691b      	ldr	r3, [r3, #16]
 800ec76:	1ad2      	subs	r2, r2, r3
 800ec78:	697b      	ldr	r3, [r7, #20]
 800ec7a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ec7c:	697b      	ldr	r3, [r7, #20]
 800ec7e:	68da      	ldr	r2, [r3, #12]
 800ec80:	697b      	ldr	r3, [r7, #20]
 800ec82:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ec84:	429a      	cmp	r2, r3
 800ec86:	d203      	bcs.n	800ec90 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ec88:	697b      	ldr	r3, [r7, #20]
 800ec8a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800ec8c:	b29b      	uxth	r3, r3
 800ec8e:	e002      	b.n	800ec96 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ec90:	697b      	ldr	r3, [r7, #20]
 800ec92:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ec94:	b29b      	uxth	r3, r3
 800ec96:	461a      	mov	r2, r3
 800ec98:	6879      	ldr	r1, [r7, #4]
 800ec9a:	68f8      	ldr	r0, [r7, #12]
 800ec9c:	f000 ff6e 	bl	800fb7c <USBD_CtlContinueRx>
 800eca0:	e038      	b.n	800ed14 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eca8:	691b      	ldr	r3, [r3, #16]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d00a      	beq.n	800ecc4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ecb4:	2b03      	cmp	r3, #3
 800ecb6:	d105      	bne.n	800ecc4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ecbe:	691b      	ldr	r3, [r3, #16]
 800ecc0:	68f8      	ldr	r0, [r7, #12]
 800ecc2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800ecc4:	68f8      	ldr	r0, [r7, #12]
 800ecc6:	f000 ff6b 	bl	800fba0 <USBD_CtlSendStatus>
 800ecca:	e023      	b.n	800ed14 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ecd2:	2b05      	cmp	r3, #5
 800ecd4:	d11e      	bne.n	800ed14 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	2200      	movs	r2, #0
 800ecda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800ecde:	2100      	movs	r1, #0
 800ece0:	68f8      	ldr	r0, [r7, #12]
 800ece2:	f006 fba7 	bl	8015434 <USBD_LL_StallEP>
 800ece6:	e015      	b.n	800ed14 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ecee:	699b      	ldr	r3, [r3, #24]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d00d      	beq.n	800ed10 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800ecfa:	2b03      	cmp	r3, #3
 800ecfc:	d108      	bne.n	800ed10 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ed04:	699b      	ldr	r3, [r3, #24]
 800ed06:	7afa      	ldrb	r2, [r7, #11]
 800ed08:	4611      	mov	r1, r2
 800ed0a:	68f8      	ldr	r0, [r7, #12]
 800ed0c:	4798      	blx	r3
 800ed0e:	e001      	b.n	800ed14 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ed10:	2302      	movs	r3, #2
 800ed12:	e000      	b.n	800ed16 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800ed14:	2300      	movs	r3, #0
}
 800ed16:	4618      	mov	r0, r3
 800ed18:	3718      	adds	r7, #24
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	bd80      	pop	{r7, pc}

0800ed1e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ed1e:	b580      	push	{r7, lr}
 800ed20:	b086      	sub	sp, #24
 800ed22:	af00      	add	r7, sp, #0
 800ed24:	60f8      	str	r0, [r7, #12]
 800ed26:	460b      	mov	r3, r1
 800ed28:	607a      	str	r2, [r7, #4]
 800ed2a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ed2c:	7afb      	ldrb	r3, [r7, #11]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d17f      	bne.n	800ee32 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	3314      	adds	r3, #20
 800ed36:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ed3e:	2b02      	cmp	r3, #2
 800ed40:	d15c      	bne.n	800edfc <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800ed42:	697b      	ldr	r3, [r7, #20]
 800ed44:	68da      	ldr	r2, [r3, #12]
 800ed46:	697b      	ldr	r3, [r7, #20]
 800ed48:	691b      	ldr	r3, [r3, #16]
 800ed4a:	429a      	cmp	r2, r3
 800ed4c:	d915      	bls.n	800ed7a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800ed4e:	697b      	ldr	r3, [r7, #20]
 800ed50:	68da      	ldr	r2, [r3, #12]
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	691b      	ldr	r3, [r3, #16]
 800ed56:	1ad2      	subs	r2, r2, r3
 800ed58:	697b      	ldr	r3, [r7, #20]
 800ed5a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800ed5c:	697b      	ldr	r3, [r7, #20]
 800ed5e:	68db      	ldr	r3, [r3, #12]
 800ed60:	b29b      	uxth	r3, r3
 800ed62:	461a      	mov	r2, r3
 800ed64:	6879      	ldr	r1, [r7, #4]
 800ed66:	68f8      	ldr	r0, [r7, #12]
 800ed68:	f000 fef6 	bl	800fb58 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	2200      	movs	r2, #0
 800ed70:	2100      	movs	r1, #0
 800ed72:	68f8      	ldr	r0, [r7, #12]
 800ed74:	f006 fc0a 	bl	801558c <USBD_LL_PrepareReceive>
 800ed78:	e04e      	b.n	800ee18 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ed7a:	697b      	ldr	r3, [r7, #20]
 800ed7c:	689b      	ldr	r3, [r3, #8]
 800ed7e:	697a      	ldr	r2, [r7, #20]
 800ed80:	6912      	ldr	r2, [r2, #16]
 800ed82:	fbb3 f1f2 	udiv	r1, r3, r2
 800ed86:	fb02 f201 	mul.w	r2, r2, r1
 800ed8a:	1a9b      	subs	r3, r3, r2
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d11c      	bne.n	800edca <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800ed90:	697b      	ldr	r3, [r7, #20]
 800ed92:	689a      	ldr	r2, [r3, #8]
 800ed94:	697b      	ldr	r3, [r7, #20]
 800ed96:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ed98:	429a      	cmp	r2, r3
 800ed9a:	d316      	bcc.n	800edca <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800ed9c:	697b      	ldr	r3, [r7, #20]
 800ed9e:	689a      	ldr	r2, [r3, #8]
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800eda6:	429a      	cmp	r2, r3
 800eda8:	d20f      	bcs.n	800edca <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800edaa:	2200      	movs	r2, #0
 800edac:	2100      	movs	r1, #0
 800edae:	68f8      	ldr	r0, [r7, #12]
 800edb0:	f000 fed2 	bl	800fb58 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	2200      	movs	r2, #0
 800edb8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800edbc:	2300      	movs	r3, #0
 800edbe:	2200      	movs	r2, #0
 800edc0:	2100      	movs	r1, #0
 800edc2:	68f8      	ldr	r0, [r7, #12]
 800edc4:	f006 fbe2 	bl	801558c <USBD_LL_PrepareReceive>
 800edc8:	e026      	b.n	800ee18 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800edd0:	68db      	ldr	r3, [r3, #12]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d00a      	beq.n	800edec <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800eddc:	2b03      	cmp	r3, #3
 800edde:	d105      	bne.n	800edec <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ede6:	68db      	ldr	r3, [r3, #12]
 800ede8:	68f8      	ldr	r0, [r7, #12]
 800edea:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800edec:	2180      	movs	r1, #128	; 0x80
 800edee:	68f8      	ldr	r0, [r7, #12]
 800edf0:	f006 fb20 	bl	8015434 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800edf4:	68f8      	ldr	r0, [r7, #12]
 800edf6:	f000 fee6 	bl	800fbc6 <USBD_CtlReceiveStatus>
 800edfa:	e00d      	b.n	800ee18 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ee02:	2b04      	cmp	r3, #4
 800ee04:	d004      	beq.n	800ee10 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d103      	bne.n	800ee18 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800ee10:	2180      	movs	r1, #128	; 0x80
 800ee12:	68f8      	ldr	r0, [r7, #12]
 800ee14:	f006 fb0e 	bl	8015434 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ee1e:	2b01      	cmp	r3, #1
 800ee20:	d11d      	bne.n	800ee5e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800ee22:	68f8      	ldr	r0, [r7, #12]
 800ee24:	f7ff fe82 	bl	800eb2c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ee30:	e015      	b.n	800ee5e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee38:	695b      	ldr	r3, [r3, #20]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d00d      	beq.n	800ee5a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ee44:	2b03      	cmp	r3, #3
 800ee46:	d108      	bne.n	800ee5a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee4e:	695b      	ldr	r3, [r3, #20]
 800ee50:	7afa      	ldrb	r2, [r7, #11]
 800ee52:	4611      	mov	r1, r2
 800ee54:	68f8      	ldr	r0, [r7, #12]
 800ee56:	4798      	blx	r3
 800ee58:	e001      	b.n	800ee5e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ee5a:	2302      	movs	r3, #2
 800ee5c:	e000      	b.n	800ee60 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800ee5e:	2300      	movs	r3, #0
}
 800ee60:	4618      	mov	r0, r3
 800ee62:	3718      	adds	r7, #24
 800ee64:	46bd      	mov	sp, r7
 800ee66:	bd80      	pop	{r7, pc}

0800ee68 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b082      	sub	sp, #8
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ee70:	2340      	movs	r3, #64	; 0x40
 800ee72:	2200      	movs	r2, #0
 800ee74:	2100      	movs	r1, #0
 800ee76:	6878      	ldr	r0, [r7, #4]
 800ee78:	f006 fa78 	bl	801536c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2201      	movs	r2, #1
 800ee80:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	2240      	movs	r2, #64	; 0x40
 800ee88:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ee8c:	2340      	movs	r3, #64	; 0x40
 800ee8e:	2200      	movs	r2, #0
 800ee90:	2180      	movs	r1, #128	; 0x80
 800ee92:	6878      	ldr	r0, [r7, #4]
 800ee94:	f006 fa6a 	bl	801536c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	2201      	movs	r2, #1
 800ee9c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	2240      	movs	r2, #64	; 0x40
 800eea2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2201      	movs	r2, #1
 800eea8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2200      	movs	r2, #0
 800eeb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	2200      	movs	r2, #0
 800eebe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d009      	beq.n	800eee0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eed2:	685b      	ldr	r3, [r3, #4]
 800eed4:	687a      	ldr	r2, [r7, #4]
 800eed6:	6852      	ldr	r2, [r2, #4]
 800eed8:	b2d2      	uxtb	r2, r2
 800eeda:	4611      	mov	r1, r2
 800eedc:	6878      	ldr	r0, [r7, #4]
 800eede:	4798      	blx	r3
  }

  return USBD_OK;
 800eee0:	2300      	movs	r3, #0
}
 800eee2:	4618      	mov	r0, r3
 800eee4:	3708      	adds	r7, #8
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bd80      	pop	{r7, pc}

0800eeea <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800eeea:	b480      	push	{r7}
 800eeec:	b083      	sub	sp, #12
 800eeee:	af00      	add	r7, sp, #0
 800eef0:	6078      	str	r0, [r7, #4]
 800eef2:	460b      	mov	r3, r1
 800eef4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	78fa      	ldrb	r2, [r7, #3]
 800eefa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800eefc:	2300      	movs	r3, #0
}
 800eefe:	4618      	mov	r0, r3
 800ef00:	370c      	adds	r7, #12
 800ef02:	46bd      	mov	sp, r7
 800ef04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef08:	4770      	bx	lr

0800ef0a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ef0a:	b480      	push	{r7}
 800ef0c:	b083      	sub	sp, #12
 800ef0e:	af00      	add	r7, sp, #0
 800ef10:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	2204      	movs	r2, #4
 800ef22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ef26:	2300      	movs	r3, #0
}
 800ef28:	4618      	mov	r0, r3
 800ef2a:	370c      	adds	r7, #12
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef32:	4770      	bx	lr

0800ef34 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ef34:	b480      	push	{r7}
 800ef36:	b083      	sub	sp, #12
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef42:	2b04      	cmp	r3, #4
 800ef44:	d105      	bne.n	800ef52 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ef52:	2300      	movs	r3, #0
}
 800ef54:	4618      	mov	r0, r3
 800ef56:	370c      	adds	r7, #12
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5e:	4770      	bx	lr

0800ef60 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b082      	sub	sp, #8
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef6e:	2b03      	cmp	r3, #3
 800ef70:	d10b      	bne.n	800ef8a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef78:	69db      	ldr	r3, [r3, #28]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d005      	beq.n	800ef8a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef84:	69db      	ldr	r3, [r3, #28]
 800ef86:	6878      	ldr	r0, [r7, #4]
 800ef88:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ef8a:	2300      	movs	r3, #0
}
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	3708      	adds	r7, #8
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}

0800ef94 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ef94:	b480      	push	{r7}
 800ef96:	b083      	sub	sp, #12
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
 800ef9c:	460b      	mov	r3, r1
 800ef9e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800efa0:	2300      	movs	r3, #0
}
 800efa2:	4618      	mov	r0, r3
 800efa4:	370c      	adds	r7, #12
 800efa6:	46bd      	mov	sp, r7
 800efa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efac:	4770      	bx	lr

0800efae <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800efae:	b480      	push	{r7}
 800efb0:	b083      	sub	sp, #12
 800efb2:	af00      	add	r7, sp, #0
 800efb4:	6078      	str	r0, [r7, #4]
 800efb6:	460b      	mov	r3, r1
 800efb8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800efba:	2300      	movs	r3, #0
}
 800efbc:	4618      	mov	r0, r3
 800efbe:	370c      	adds	r7, #12
 800efc0:	46bd      	mov	sp, r7
 800efc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc6:	4770      	bx	lr

0800efc8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800efc8:	b480      	push	{r7}
 800efca:	b083      	sub	sp, #12
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800efd0:	2300      	movs	r3, #0
}
 800efd2:	4618      	mov	r0, r3
 800efd4:	370c      	adds	r7, #12
 800efd6:	46bd      	mov	sp, r7
 800efd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efdc:	4770      	bx	lr

0800efde <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800efde:	b580      	push	{r7, lr}
 800efe0:	b082      	sub	sp, #8
 800efe2:	af00      	add	r7, sp, #0
 800efe4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	2201      	movs	r2, #1
 800efea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eff4:	685b      	ldr	r3, [r3, #4]
 800eff6:	687a      	ldr	r2, [r7, #4]
 800eff8:	6852      	ldr	r2, [r2, #4]
 800effa:	b2d2      	uxtb	r2, r2
 800effc:	4611      	mov	r1, r2
 800effe:	6878      	ldr	r0, [r7, #4]
 800f000:	4798      	blx	r3

  return USBD_OK;
 800f002:	2300      	movs	r3, #0
}
 800f004:	4618      	mov	r0, r3
 800f006:	3708      	adds	r7, #8
 800f008:	46bd      	mov	sp, r7
 800f00a:	bd80      	pop	{r7, pc}

0800f00c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b084      	sub	sp, #16
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
 800f014:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f016:	2300      	movs	r3, #0
 800f018:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	781b      	ldrb	r3, [r3, #0]
 800f01e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f022:	2b20      	cmp	r3, #32
 800f024:	d004      	beq.n	800f030 <USBD_StdDevReq+0x24>
 800f026:	2b40      	cmp	r3, #64	; 0x40
 800f028:	d002      	beq.n	800f030 <USBD_StdDevReq+0x24>
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d008      	beq.n	800f040 <USBD_StdDevReq+0x34>
 800f02e:	e04c      	b.n	800f0ca <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f036:	689b      	ldr	r3, [r3, #8]
 800f038:	6839      	ldr	r1, [r7, #0]
 800f03a:	6878      	ldr	r0, [r7, #4]
 800f03c:	4798      	blx	r3
      break;
 800f03e:	e049      	b.n	800f0d4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f040:	683b      	ldr	r3, [r7, #0]
 800f042:	785b      	ldrb	r3, [r3, #1]
 800f044:	2b09      	cmp	r3, #9
 800f046:	d83a      	bhi.n	800f0be <USBD_StdDevReq+0xb2>
 800f048:	a201      	add	r2, pc, #4	; (adr r2, 800f050 <USBD_StdDevReq+0x44>)
 800f04a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f04e:	bf00      	nop
 800f050:	0800f0a1 	.word	0x0800f0a1
 800f054:	0800f0b5 	.word	0x0800f0b5
 800f058:	0800f0bf 	.word	0x0800f0bf
 800f05c:	0800f0ab 	.word	0x0800f0ab
 800f060:	0800f0bf 	.word	0x0800f0bf
 800f064:	0800f083 	.word	0x0800f083
 800f068:	0800f079 	.word	0x0800f079
 800f06c:	0800f0bf 	.word	0x0800f0bf
 800f070:	0800f097 	.word	0x0800f097
 800f074:	0800f08d 	.word	0x0800f08d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f078:	6839      	ldr	r1, [r7, #0]
 800f07a:	6878      	ldr	r0, [r7, #4]
 800f07c:	f000 f9d4 	bl	800f428 <USBD_GetDescriptor>
          break;
 800f080:	e022      	b.n	800f0c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f082:	6839      	ldr	r1, [r7, #0]
 800f084:	6878      	ldr	r0, [r7, #4]
 800f086:	f000 fb37 	bl	800f6f8 <USBD_SetAddress>
          break;
 800f08a:	e01d      	b.n	800f0c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800f08c:	6839      	ldr	r1, [r7, #0]
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f000 fb74 	bl	800f77c <USBD_SetConfig>
          break;
 800f094:	e018      	b.n	800f0c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f096:	6839      	ldr	r1, [r7, #0]
 800f098:	6878      	ldr	r0, [r7, #4]
 800f09a:	f000 fbfd 	bl	800f898 <USBD_GetConfig>
          break;
 800f09e:	e013      	b.n	800f0c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f0a0:	6839      	ldr	r1, [r7, #0]
 800f0a2:	6878      	ldr	r0, [r7, #4]
 800f0a4:	f000 fc2c 	bl	800f900 <USBD_GetStatus>
          break;
 800f0a8:	e00e      	b.n	800f0c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f0aa:	6839      	ldr	r1, [r7, #0]
 800f0ac:	6878      	ldr	r0, [r7, #4]
 800f0ae:	f000 fc5a 	bl	800f966 <USBD_SetFeature>
          break;
 800f0b2:	e009      	b.n	800f0c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f0b4:	6839      	ldr	r1, [r7, #0]
 800f0b6:	6878      	ldr	r0, [r7, #4]
 800f0b8:	f000 fc69 	bl	800f98e <USBD_ClrFeature>
          break;
 800f0bc:	e004      	b.n	800f0c8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800f0be:	6839      	ldr	r1, [r7, #0]
 800f0c0:	6878      	ldr	r0, [r7, #4]
 800f0c2:	f000 fcc2 	bl	800fa4a <USBD_CtlError>
          break;
 800f0c6:	bf00      	nop
      }
      break;
 800f0c8:	e004      	b.n	800f0d4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800f0ca:	6839      	ldr	r1, [r7, #0]
 800f0cc:	6878      	ldr	r0, [r7, #4]
 800f0ce:	f000 fcbc 	bl	800fa4a <USBD_CtlError>
      break;
 800f0d2:	bf00      	nop
  }

  return ret;
 800f0d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	3710      	adds	r7, #16
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	bd80      	pop	{r7, pc}
 800f0de:	bf00      	nop

0800f0e0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b084      	sub	sp, #16
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
 800f0e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	781b      	ldrb	r3, [r3, #0]
 800f0f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f0f6:	2b20      	cmp	r3, #32
 800f0f8:	d003      	beq.n	800f102 <USBD_StdItfReq+0x22>
 800f0fa:	2b40      	cmp	r3, #64	; 0x40
 800f0fc:	d001      	beq.n	800f102 <USBD_StdItfReq+0x22>
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d12a      	bne.n	800f158 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f108:	3b01      	subs	r3, #1
 800f10a:	2b02      	cmp	r3, #2
 800f10c:	d81d      	bhi.n	800f14a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f10e:	683b      	ldr	r3, [r7, #0]
 800f110:	889b      	ldrh	r3, [r3, #4]
 800f112:	b2db      	uxtb	r3, r3
 800f114:	2b01      	cmp	r3, #1
 800f116:	d813      	bhi.n	800f140 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f11e:	689b      	ldr	r3, [r3, #8]
 800f120:	6839      	ldr	r1, [r7, #0]
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	4798      	blx	r3
 800f126:	4603      	mov	r3, r0
 800f128:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	88db      	ldrh	r3, [r3, #6]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d110      	bne.n	800f154 <USBD_StdItfReq+0x74>
 800f132:	7bfb      	ldrb	r3, [r7, #15]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d10d      	bne.n	800f154 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	f000 fd31 	bl	800fba0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f13e:	e009      	b.n	800f154 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800f140:	6839      	ldr	r1, [r7, #0]
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	f000 fc81 	bl	800fa4a <USBD_CtlError>
          break;
 800f148:	e004      	b.n	800f154 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800f14a:	6839      	ldr	r1, [r7, #0]
 800f14c:	6878      	ldr	r0, [r7, #4]
 800f14e:	f000 fc7c 	bl	800fa4a <USBD_CtlError>
          break;
 800f152:	e000      	b.n	800f156 <USBD_StdItfReq+0x76>
          break;
 800f154:	bf00      	nop
      }
      break;
 800f156:	e004      	b.n	800f162 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800f158:	6839      	ldr	r1, [r7, #0]
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f000 fc75 	bl	800fa4a <USBD_CtlError>
      break;
 800f160:	bf00      	nop
  }

  return USBD_OK;
 800f162:	2300      	movs	r3, #0
}
 800f164:	4618      	mov	r0, r3
 800f166:	3710      	adds	r7, #16
 800f168:	46bd      	mov	sp, r7
 800f16a:	bd80      	pop	{r7, pc}

0800f16c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b084      	sub	sp, #16
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
 800f174:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f176:	2300      	movs	r3, #0
 800f178:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	889b      	ldrh	r3, [r3, #4]
 800f17e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	781b      	ldrb	r3, [r3, #0]
 800f184:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f188:	2b20      	cmp	r3, #32
 800f18a:	d004      	beq.n	800f196 <USBD_StdEPReq+0x2a>
 800f18c:	2b40      	cmp	r3, #64	; 0x40
 800f18e:	d002      	beq.n	800f196 <USBD_StdEPReq+0x2a>
 800f190:	2b00      	cmp	r3, #0
 800f192:	d008      	beq.n	800f1a6 <USBD_StdEPReq+0x3a>
 800f194:	e13d      	b.n	800f412 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f19c:	689b      	ldr	r3, [r3, #8]
 800f19e:	6839      	ldr	r1, [r7, #0]
 800f1a0:	6878      	ldr	r0, [r7, #4]
 800f1a2:	4798      	blx	r3
      break;
 800f1a4:	e13a      	b.n	800f41c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800f1a6:	683b      	ldr	r3, [r7, #0]
 800f1a8:	781b      	ldrb	r3, [r3, #0]
 800f1aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f1ae:	2b20      	cmp	r3, #32
 800f1b0:	d10a      	bne.n	800f1c8 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1b8:	689b      	ldr	r3, [r3, #8]
 800f1ba:	6839      	ldr	r1, [r7, #0]
 800f1bc:	6878      	ldr	r0, [r7, #4]
 800f1be:	4798      	blx	r3
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	73fb      	strb	r3, [r7, #15]

        return ret;
 800f1c4:	7bfb      	ldrb	r3, [r7, #15]
 800f1c6:	e12a      	b.n	800f41e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	785b      	ldrb	r3, [r3, #1]
 800f1cc:	2b01      	cmp	r3, #1
 800f1ce:	d03e      	beq.n	800f24e <USBD_StdEPReq+0xe2>
 800f1d0:	2b03      	cmp	r3, #3
 800f1d2:	d002      	beq.n	800f1da <USBD_StdEPReq+0x6e>
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d070      	beq.n	800f2ba <USBD_StdEPReq+0x14e>
 800f1d8:	e115      	b.n	800f406 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f1e0:	2b02      	cmp	r3, #2
 800f1e2:	d002      	beq.n	800f1ea <USBD_StdEPReq+0x7e>
 800f1e4:	2b03      	cmp	r3, #3
 800f1e6:	d015      	beq.n	800f214 <USBD_StdEPReq+0xa8>
 800f1e8:	e02b      	b.n	800f242 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f1ea:	7bbb      	ldrb	r3, [r7, #14]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d00c      	beq.n	800f20a <USBD_StdEPReq+0x9e>
 800f1f0:	7bbb      	ldrb	r3, [r7, #14]
 800f1f2:	2b80      	cmp	r3, #128	; 0x80
 800f1f4:	d009      	beq.n	800f20a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800f1f6:	7bbb      	ldrb	r3, [r7, #14]
 800f1f8:	4619      	mov	r1, r3
 800f1fa:	6878      	ldr	r0, [r7, #4]
 800f1fc:	f006 f91a 	bl	8015434 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800f200:	2180      	movs	r1, #128	; 0x80
 800f202:	6878      	ldr	r0, [r7, #4]
 800f204:	f006 f916 	bl	8015434 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f208:	e020      	b.n	800f24c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800f20a:	6839      	ldr	r1, [r7, #0]
 800f20c:	6878      	ldr	r0, [r7, #4]
 800f20e:	f000 fc1c 	bl	800fa4a <USBD_CtlError>
              break;
 800f212:	e01b      	b.n	800f24c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	885b      	ldrh	r3, [r3, #2]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d10e      	bne.n	800f23a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800f21c:	7bbb      	ldrb	r3, [r7, #14]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d00b      	beq.n	800f23a <USBD_StdEPReq+0xce>
 800f222:	7bbb      	ldrb	r3, [r7, #14]
 800f224:	2b80      	cmp	r3, #128	; 0x80
 800f226:	d008      	beq.n	800f23a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f228:	683b      	ldr	r3, [r7, #0]
 800f22a:	88db      	ldrh	r3, [r3, #6]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d104      	bne.n	800f23a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800f230:	7bbb      	ldrb	r3, [r7, #14]
 800f232:	4619      	mov	r1, r3
 800f234:	6878      	ldr	r0, [r7, #4]
 800f236:	f006 f8fd 	bl	8015434 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800f23a:	6878      	ldr	r0, [r7, #4]
 800f23c:	f000 fcb0 	bl	800fba0 <USBD_CtlSendStatus>

              break;
 800f240:	e004      	b.n	800f24c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800f242:	6839      	ldr	r1, [r7, #0]
 800f244:	6878      	ldr	r0, [r7, #4]
 800f246:	f000 fc00 	bl	800fa4a <USBD_CtlError>
              break;
 800f24a:	bf00      	nop
          }
          break;
 800f24c:	e0e0      	b.n	800f410 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f254:	2b02      	cmp	r3, #2
 800f256:	d002      	beq.n	800f25e <USBD_StdEPReq+0xf2>
 800f258:	2b03      	cmp	r3, #3
 800f25a:	d015      	beq.n	800f288 <USBD_StdEPReq+0x11c>
 800f25c:	e026      	b.n	800f2ac <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f25e:	7bbb      	ldrb	r3, [r7, #14]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d00c      	beq.n	800f27e <USBD_StdEPReq+0x112>
 800f264:	7bbb      	ldrb	r3, [r7, #14]
 800f266:	2b80      	cmp	r3, #128	; 0x80
 800f268:	d009      	beq.n	800f27e <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800f26a:	7bbb      	ldrb	r3, [r7, #14]
 800f26c:	4619      	mov	r1, r3
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	f006 f8e0 	bl	8015434 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800f274:	2180      	movs	r1, #128	; 0x80
 800f276:	6878      	ldr	r0, [r7, #4]
 800f278:	f006 f8dc 	bl	8015434 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f27c:	e01c      	b.n	800f2b8 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800f27e:	6839      	ldr	r1, [r7, #0]
 800f280:	6878      	ldr	r0, [r7, #4]
 800f282:	f000 fbe2 	bl	800fa4a <USBD_CtlError>
              break;
 800f286:	e017      	b.n	800f2b8 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	885b      	ldrh	r3, [r3, #2]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d112      	bne.n	800f2b6 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f290:	7bbb      	ldrb	r3, [r7, #14]
 800f292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f296:	2b00      	cmp	r3, #0
 800f298:	d004      	beq.n	800f2a4 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800f29a:	7bbb      	ldrb	r3, [r7, #14]
 800f29c:	4619      	mov	r1, r3
 800f29e:	6878      	ldr	r0, [r7, #4]
 800f2a0:	f006 f8e7 	bl	8015472 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800f2a4:	6878      	ldr	r0, [r7, #4]
 800f2a6:	f000 fc7b 	bl	800fba0 <USBD_CtlSendStatus>
              }
              break;
 800f2aa:	e004      	b.n	800f2b6 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800f2ac:	6839      	ldr	r1, [r7, #0]
 800f2ae:	6878      	ldr	r0, [r7, #4]
 800f2b0:	f000 fbcb 	bl	800fa4a <USBD_CtlError>
              break;
 800f2b4:	e000      	b.n	800f2b8 <USBD_StdEPReq+0x14c>
              break;
 800f2b6:	bf00      	nop
          }
          break;
 800f2b8:	e0aa      	b.n	800f410 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2c0:	2b02      	cmp	r3, #2
 800f2c2:	d002      	beq.n	800f2ca <USBD_StdEPReq+0x15e>
 800f2c4:	2b03      	cmp	r3, #3
 800f2c6:	d032      	beq.n	800f32e <USBD_StdEPReq+0x1c2>
 800f2c8:	e097      	b.n	800f3fa <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f2ca:	7bbb      	ldrb	r3, [r7, #14]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d007      	beq.n	800f2e0 <USBD_StdEPReq+0x174>
 800f2d0:	7bbb      	ldrb	r3, [r7, #14]
 800f2d2:	2b80      	cmp	r3, #128	; 0x80
 800f2d4:	d004      	beq.n	800f2e0 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800f2d6:	6839      	ldr	r1, [r7, #0]
 800f2d8:	6878      	ldr	r0, [r7, #4]
 800f2da:	f000 fbb6 	bl	800fa4a <USBD_CtlError>
                break;
 800f2de:	e091      	b.n	800f404 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f2e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	da0b      	bge.n	800f300 <USBD_StdEPReq+0x194>
 800f2e8:	7bbb      	ldrb	r3, [r7, #14]
 800f2ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f2ee:	4613      	mov	r3, r2
 800f2f0:	009b      	lsls	r3, r3, #2
 800f2f2:	4413      	add	r3, r2
 800f2f4:	009b      	lsls	r3, r3, #2
 800f2f6:	3310      	adds	r3, #16
 800f2f8:	687a      	ldr	r2, [r7, #4]
 800f2fa:	4413      	add	r3, r2
 800f2fc:	3304      	adds	r3, #4
 800f2fe:	e00b      	b.n	800f318 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f300:	7bbb      	ldrb	r3, [r7, #14]
 800f302:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f306:	4613      	mov	r3, r2
 800f308:	009b      	lsls	r3, r3, #2
 800f30a:	4413      	add	r3, r2
 800f30c:	009b      	lsls	r3, r3, #2
 800f30e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f312:	687a      	ldr	r2, [r7, #4]
 800f314:	4413      	add	r3, r2
 800f316:	3304      	adds	r3, #4
 800f318:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f31a:	68bb      	ldr	r3, [r7, #8]
 800f31c:	2200      	movs	r2, #0
 800f31e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800f320:	68bb      	ldr	r3, [r7, #8]
 800f322:	2202      	movs	r2, #2
 800f324:	4619      	mov	r1, r3
 800f326:	6878      	ldr	r0, [r7, #4]
 800f328:	f000 fbfa 	bl	800fb20 <USBD_CtlSendData>
              break;
 800f32c:	e06a      	b.n	800f404 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f32e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f332:	2b00      	cmp	r3, #0
 800f334:	da11      	bge.n	800f35a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f336:	7bbb      	ldrb	r3, [r7, #14]
 800f338:	f003 020f 	and.w	r2, r3, #15
 800f33c:	6879      	ldr	r1, [r7, #4]
 800f33e:	4613      	mov	r3, r2
 800f340:	009b      	lsls	r3, r3, #2
 800f342:	4413      	add	r3, r2
 800f344:	009b      	lsls	r3, r3, #2
 800f346:	440b      	add	r3, r1
 800f348:	3318      	adds	r3, #24
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d117      	bne.n	800f380 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800f350:	6839      	ldr	r1, [r7, #0]
 800f352:	6878      	ldr	r0, [r7, #4]
 800f354:	f000 fb79 	bl	800fa4a <USBD_CtlError>
                  break;
 800f358:	e054      	b.n	800f404 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f35a:	7bbb      	ldrb	r3, [r7, #14]
 800f35c:	f003 020f 	and.w	r2, r3, #15
 800f360:	6879      	ldr	r1, [r7, #4]
 800f362:	4613      	mov	r3, r2
 800f364:	009b      	lsls	r3, r3, #2
 800f366:	4413      	add	r3, r2
 800f368:	009b      	lsls	r3, r3, #2
 800f36a:	440b      	add	r3, r1
 800f36c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d104      	bne.n	800f380 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800f376:	6839      	ldr	r1, [r7, #0]
 800f378:	6878      	ldr	r0, [r7, #4]
 800f37a:	f000 fb66 	bl	800fa4a <USBD_CtlError>
                  break;
 800f37e:	e041      	b.n	800f404 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f380:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f384:	2b00      	cmp	r3, #0
 800f386:	da0b      	bge.n	800f3a0 <USBD_StdEPReq+0x234>
 800f388:	7bbb      	ldrb	r3, [r7, #14]
 800f38a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f38e:	4613      	mov	r3, r2
 800f390:	009b      	lsls	r3, r3, #2
 800f392:	4413      	add	r3, r2
 800f394:	009b      	lsls	r3, r3, #2
 800f396:	3310      	adds	r3, #16
 800f398:	687a      	ldr	r2, [r7, #4]
 800f39a:	4413      	add	r3, r2
 800f39c:	3304      	adds	r3, #4
 800f39e:	e00b      	b.n	800f3b8 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f3a0:	7bbb      	ldrb	r3, [r7, #14]
 800f3a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f3a6:	4613      	mov	r3, r2
 800f3a8:	009b      	lsls	r3, r3, #2
 800f3aa:	4413      	add	r3, r2
 800f3ac:	009b      	lsls	r3, r3, #2
 800f3ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f3b2:	687a      	ldr	r2, [r7, #4]
 800f3b4:	4413      	add	r3, r2
 800f3b6:	3304      	adds	r3, #4
 800f3b8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f3ba:	7bbb      	ldrb	r3, [r7, #14]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d002      	beq.n	800f3c6 <USBD_StdEPReq+0x25a>
 800f3c0:	7bbb      	ldrb	r3, [r7, #14]
 800f3c2:	2b80      	cmp	r3, #128	; 0x80
 800f3c4:	d103      	bne.n	800f3ce <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800f3c6:	68bb      	ldr	r3, [r7, #8]
 800f3c8:	2200      	movs	r2, #0
 800f3ca:	601a      	str	r2, [r3, #0]
 800f3cc:	e00e      	b.n	800f3ec <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800f3ce:	7bbb      	ldrb	r3, [r7, #14]
 800f3d0:	4619      	mov	r1, r3
 800f3d2:	6878      	ldr	r0, [r7, #4]
 800f3d4:	f006 f86c 	bl	80154b0 <USBD_LL_IsStallEP>
 800f3d8:	4603      	mov	r3, r0
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d003      	beq.n	800f3e6 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800f3de:	68bb      	ldr	r3, [r7, #8]
 800f3e0:	2201      	movs	r2, #1
 800f3e2:	601a      	str	r2, [r3, #0]
 800f3e4:	e002      	b.n	800f3ec <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800f3e6:	68bb      	ldr	r3, [r7, #8]
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800f3ec:	68bb      	ldr	r3, [r7, #8]
 800f3ee:	2202      	movs	r2, #2
 800f3f0:	4619      	mov	r1, r3
 800f3f2:	6878      	ldr	r0, [r7, #4]
 800f3f4:	f000 fb94 	bl	800fb20 <USBD_CtlSendData>
              break;
 800f3f8:	e004      	b.n	800f404 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800f3fa:	6839      	ldr	r1, [r7, #0]
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f000 fb24 	bl	800fa4a <USBD_CtlError>
              break;
 800f402:	bf00      	nop
          }
          break;
 800f404:	e004      	b.n	800f410 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800f406:	6839      	ldr	r1, [r7, #0]
 800f408:	6878      	ldr	r0, [r7, #4]
 800f40a:	f000 fb1e 	bl	800fa4a <USBD_CtlError>
          break;
 800f40e:	bf00      	nop
      }
      break;
 800f410:	e004      	b.n	800f41c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800f412:	6839      	ldr	r1, [r7, #0]
 800f414:	6878      	ldr	r0, [r7, #4]
 800f416:	f000 fb18 	bl	800fa4a <USBD_CtlError>
      break;
 800f41a:	bf00      	nop
  }

  return ret;
 800f41c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f41e:	4618      	mov	r0, r3
 800f420:	3710      	adds	r7, #16
 800f422:	46bd      	mov	sp, r7
 800f424:	bd80      	pop	{r7, pc}
	...

0800f428 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b084      	sub	sp, #16
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
 800f430:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f432:	2300      	movs	r3, #0
 800f434:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f436:	2300      	movs	r3, #0
 800f438:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f43a:	2300      	movs	r3, #0
 800f43c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	885b      	ldrh	r3, [r3, #2]
 800f442:	0a1b      	lsrs	r3, r3, #8
 800f444:	b29b      	uxth	r3, r3
 800f446:	3b01      	subs	r3, #1
 800f448:	2b06      	cmp	r3, #6
 800f44a:	f200 8128 	bhi.w	800f69e <USBD_GetDescriptor+0x276>
 800f44e:	a201      	add	r2, pc, #4	; (adr r2, 800f454 <USBD_GetDescriptor+0x2c>)
 800f450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f454:	0800f471 	.word	0x0800f471
 800f458:	0800f489 	.word	0x0800f489
 800f45c:	0800f4c9 	.word	0x0800f4c9
 800f460:	0800f69f 	.word	0x0800f69f
 800f464:	0800f69f 	.word	0x0800f69f
 800f468:	0800f63f 	.word	0x0800f63f
 800f46c:	0800f66b 	.word	0x0800f66b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	687a      	ldr	r2, [r7, #4]
 800f47a:	7c12      	ldrb	r2, [r2, #16]
 800f47c:	f107 0108 	add.w	r1, r7, #8
 800f480:	4610      	mov	r0, r2
 800f482:	4798      	blx	r3
 800f484:	60f8      	str	r0, [r7, #12]
      break;
 800f486:	e112      	b.n	800f6ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	7c1b      	ldrb	r3, [r3, #16]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d10d      	bne.n	800f4ac <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f498:	f107 0208 	add.w	r2, r7, #8
 800f49c:	4610      	mov	r0, r2
 800f49e:	4798      	blx	r3
 800f4a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	3301      	adds	r3, #1
 800f4a6:	2202      	movs	r2, #2
 800f4a8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f4aa:	e100      	b.n	800f6ae <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4b4:	f107 0208 	add.w	r2, r7, #8
 800f4b8:	4610      	mov	r0, r2
 800f4ba:	4798      	blx	r3
 800f4bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	3301      	adds	r3, #1
 800f4c2:	2202      	movs	r2, #2
 800f4c4:	701a      	strb	r2, [r3, #0]
      break;
 800f4c6:	e0f2      	b.n	800f6ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f4c8:	683b      	ldr	r3, [r7, #0]
 800f4ca:	885b      	ldrh	r3, [r3, #2]
 800f4cc:	b2db      	uxtb	r3, r3
 800f4ce:	2b05      	cmp	r3, #5
 800f4d0:	f200 80ac 	bhi.w	800f62c <USBD_GetDescriptor+0x204>
 800f4d4:	a201      	add	r2, pc, #4	; (adr r2, 800f4dc <USBD_GetDescriptor+0xb4>)
 800f4d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4da:	bf00      	nop
 800f4dc:	0800f4f5 	.word	0x0800f4f5
 800f4e0:	0800f529 	.word	0x0800f529
 800f4e4:	0800f55d 	.word	0x0800f55d
 800f4e8:	0800f591 	.word	0x0800f591
 800f4ec:	0800f5c5 	.word	0x0800f5c5
 800f4f0:	0800f5f9 	.word	0x0800f5f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f4fa:	685b      	ldr	r3, [r3, #4]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d00b      	beq.n	800f518 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f506:	685b      	ldr	r3, [r3, #4]
 800f508:	687a      	ldr	r2, [r7, #4]
 800f50a:	7c12      	ldrb	r2, [r2, #16]
 800f50c:	f107 0108 	add.w	r1, r7, #8
 800f510:	4610      	mov	r0, r2
 800f512:	4798      	blx	r3
 800f514:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f516:	e091      	b.n	800f63c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f518:	6839      	ldr	r1, [r7, #0]
 800f51a:	6878      	ldr	r0, [r7, #4]
 800f51c:	f000 fa95 	bl	800fa4a <USBD_CtlError>
            err++;
 800f520:	7afb      	ldrb	r3, [r7, #11]
 800f522:	3301      	adds	r3, #1
 800f524:	72fb      	strb	r3, [r7, #11]
          break;
 800f526:	e089      	b.n	800f63c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f52e:	689b      	ldr	r3, [r3, #8]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d00b      	beq.n	800f54c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f53a:	689b      	ldr	r3, [r3, #8]
 800f53c:	687a      	ldr	r2, [r7, #4]
 800f53e:	7c12      	ldrb	r2, [r2, #16]
 800f540:	f107 0108 	add.w	r1, r7, #8
 800f544:	4610      	mov	r0, r2
 800f546:	4798      	blx	r3
 800f548:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f54a:	e077      	b.n	800f63c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f54c:	6839      	ldr	r1, [r7, #0]
 800f54e:	6878      	ldr	r0, [r7, #4]
 800f550:	f000 fa7b 	bl	800fa4a <USBD_CtlError>
            err++;
 800f554:	7afb      	ldrb	r3, [r7, #11]
 800f556:	3301      	adds	r3, #1
 800f558:	72fb      	strb	r3, [r7, #11]
          break;
 800f55a:	e06f      	b.n	800f63c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f562:	68db      	ldr	r3, [r3, #12]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d00b      	beq.n	800f580 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f56e:	68db      	ldr	r3, [r3, #12]
 800f570:	687a      	ldr	r2, [r7, #4]
 800f572:	7c12      	ldrb	r2, [r2, #16]
 800f574:	f107 0108 	add.w	r1, r7, #8
 800f578:	4610      	mov	r0, r2
 800f57a:	4798      	blx	r3
 800f57c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f57e:	e05d      	b.n	800f63c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f580:	6839      	ldr	r1, [r7, #0]
 800f582:	6878      	ldr	r0, [r7, #4]
 800f584:	f000 fa61 	bl	800fa4a <USBD_CtlError>
            err++;
 800f588:	7afb      	ldrb	r3, [r7, #11]
 800f58a:	3301      	adds	r3, #1
 800f58c:	72fb      	strb	r3, [r7, #11]
          break;
 800f58e:	e055      	b.n	800f63c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f596:	691b      	ldr	r3, [r3, #16]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d00b      	beq.n	800f5b4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f5a2:	691b      	ldr	r3, [r3, #16]
 800f5a4:	687a      	ldr	r2, [r7, #4]
 800f5a6:	7c12      	ldrb	r2, [r2, #16]
 800f5a8:	f107 0108 	add.w	r1, r7, #8
 800f5ac:	4610      	mov	r0, r2
 800f5ae:	4798      	blx	r3
 800f5b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f5b2:	e043      	b.n	800f63c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f5b4:	6839      	ldr	r1, [r7, #0]
 800f5b6:	6878      	ldr	r0, [r7, #4]
 800f5b8:	f000 fa47 	bl	800fa4a <USBD_CtlError>
            err++;
 800f5bc:	7afb      	ldrb	r3, [r7, #11]
 800f5be:	3301      	adds	r3, #1
 800f5c0:	72fb      	strb	r3, [r7, #11]
          break;
 800f5c2:	e03b      	b.n	800f63c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f5ca:	695b      	ldr	r3, [r3, #20]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d00b      	beq.n	800f5e8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f5d6:	695b      	ldr	r3, [r3, #20]
 800f5d8:	687a      	ldr	r2, [r7, #4]
 800f5da:	7c12      	ldrb	r2, [r2, #16]
 800f5dc:	f107 0108 	add.w	r1, r7, #8
 800f5e0:	4610      	mov	r0, r2
 800f5e2:	4798      	blx	r3
 800f5e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f5e6:	e029      	b.n	800f63c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f5e8:	6839      	ldr	r1, [r7, #0]
 800f5ea:	6878      	ldr	r0, [r7, #4]
 800f5ec:	f000 fa2d 	bl	800fa4a <USBD_CtlError>
            err++;
 800f5f0:	7afb      	ldrb	r3, [r7, #11]
 800f5f2:	3301      	adds	r3, #1
 800f5f4:	72fb      	strb	r3, [r7, #11]
          break;
 800f5f6:	e021      	b.n	800f63c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f5fe:	699b      	ldr	r3, [r3, #24]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d00b      	beq.n	800f61c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f60a:	699b      	ldr	r3, [r3, #24]
 800f60c:	687a      	ldr	r2, [r7, #4]
 800f60e:	7c12      	ldrb	r2, [r2, #16]
 800f610:	f107 0108 	add.w	r1, r7, #8
 800f614:	4610      	mov	r0, r2
 800f616:	4798      	blx	r3
 800f618:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f61a:	e00f      	b.n	800f63c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f61c:	6839      	ldr	r1, [r7, #0]
 800f61e:	6878      	ldr	r0, [r7, #4]
 800f620:	f000 fa13 	bl	800fa4a <USBD_CtlError>
            err++;
 800f624:	7afb      	ldrb	r3, [r7, #11]
 800f626:	3301      	adds	r3, #1
 800f628:	72fb      	strb	r3, [r7, #11]
          break;
 800f62a:	e007      	b.n	800f63c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800f62c:	6839      	ldr	r1, [r7, #0]
 800f62e:	6878      	ldr	r0, [r7, #4]
 800f630:	f000 fa0b 	bl	800fa4a <USBD_CtlError>
          err++;
 800f634:	7afb      	ldrb	r3, [r7, #11]
 800f636:	3301      	adds	r3, #1
 800f638:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800f63a:	e038      	b.n	800f6ae <USBD_GetDescriptor+0x286>
 800f63c:	e037      	b.n	800f6ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	7c1b      	ldrb	r3, [r3, #16]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d109      	bne.n	800f65a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f64c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f64e:	f107 0208 	add.w	r2, r7, #8
 800f652:	4610      	mov	r0, r2
 800f654:	4798      	blx	r3
 800f656:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f658:	e029      	b.n	800f6ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f65a:	6839      	ldr	r1, [r7, #0]
 800f65c:	6878      	ldr	r0, [r7, #4]
 800f65e:	f000 f9f4 	bl	800fa4a <USBD_CtlError>
        err++;
 800f662:	7afb      	ldrb	r3, [r7, #11]
 800f664:	3301      	adds	r3, #1
 800f666:	72fb      	strb	r3, [r7, #11]
      break;
 800f668:	e021      	b.n	800f6ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	7c1b      	ldrb	r3, [r3, #16]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d10d      	bne.n	800f68e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f67a:	f107 0208 	add.w	r2, r7, #8
 800f67e:	4610      	mov	r0, r2
 800f680:	4798      	blx	r3
 800f682:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	3301      	adds	r3, #1
 800f688:	2207      	movs	r2, #7
 800f68a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f68c:	e00f      	b.n	800f6ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f68e:	6839      	ldr	r1, [r7, #0]
 800f690:	6878      	ldr	r0, [r7, #4]
 800f692:	f000 f9da 	bl	800fa4a <USBD_CtlError>
        err++;
 800f696:	7afb      	ldrb	r3, [r7, #11]
 800f698:	3301      	adds	r3, #1
 800f69a:	72fb      	strb	r3, [r7, #11]
      break;
 800f69c:	e007      	b.n	800f6ae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f69e:	6839      	ldr	r1, [r7, #0]
 800f6a0:	6878      	ldr	r0, [r7, #4]
 800f6a2:	f000 f9d2 	bl	800fa4a <USBD_CtlError>
      err++;
 800f6a6:	7afb      	ldrb	r3, [r7, #11]
 800f6a8:	3301      	adds	r3, #1
 800f6aa:	72fb      	strb	r3, [r7, #11]
      break;
 800f6ac:	bf00      	nop
  }

  if (err != 0U)
 800f6ae:	7afb      	ldrb	r3, [r7, #11]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d11c      	bne.n	800f6ee <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800f6b4:	893b      	ldrh	r3, [r7, #8]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d011      	beq.n	800f6de <USBD_GetDescriptor+0x2b6>
 800f6ba:	683b      	ldr	r3, [r7, #0]
 800f6bc:	88db      	ldrh	r3, [r3, #6]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d00d      	beq.n	800f6de <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800f6c2:	683b      	ldr	r3, [r7, #0]
 800f6c4:	88da      	ldrh	r2, [r3, #6]
 800f6c6:	893b      	ldrh	r3, [r7, #8]
 800f6c8:	4293      	cmp	r3, r2
 800f6ca:	bf28      	it	cs
 800f6cc:	4613      	movcs	r3, r2
 800f6ce:	b29b      	uxth	r3, r3
 800f6d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f6d2:	893b      	ldrh	r3, [r7, #8]
 800f6d4:	461a      	mov	r2, r3
 800f6d6:	68f9      	ldr	r1, [r7, #12]
 800f6d8:	6878      	ldr	r0, [r7, #4]
 800f6da:	f000 fa21 	bl	800fb20 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800f6de:	683b      	ldr	r3, [r7, #0]
 800f6e0:	88db      	ldrh	r3, [r3, #6]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d104      	bne.n	800f6f0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800f6e6:	6878      	ldr	r0, [r7, #4]
 800f6e8:	f000 fa5a 	bl	800fba0 <USBD_CtlSendStatus>
 800f6ec:	e000      	b.n	800f6f0 <USBD_GetDescriptor+0x2c8>
    return;
 800f6ee:	bf00      	nop
    }
  }
}
 800f6f0:	3710      	adds	r7, #16
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}
 800f6f6:	bf00      	nop

0800f6f8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b084      	sub	sp, #16
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
 800f700:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f702:	683b      	ldr	r3, [r7, #0]
 800f704:	889b      	ldrh	r3, [r3, #4]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d130      	bne.n	800f76c <USBD_SetAddress+0x74>
 800f70a:	683b      	ldr	r3, [r7, #0]
 800f70c:	88db      	ldrh	r3, [r3, #6]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d12c      	bne.n	800f76c <USBD_SetAddress+0x74>
 800f712:	683b      	ldr	r3, [r7, #0]
 800f714:	885b      	ldrh	r3, [r3, #2]
 800f716:	2b7f      	cmp	r3, #127	; 0x7f
 800f718:	d828      	bhi.n	800f76c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f71a:	683b      	ldr	r3, [r7, #0]
 800f71c:	885b      	ldrh	r3, [r3, #2]
 800f71e:	b2db      	uxtb	r3, r3
 800f720:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f724:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f72c:	2b03      	cmp	r3, #3
 800f72e:	d104      	bne.n	800f73a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800f730:	6839      	ldr	r1, [r7, #0]
 800f732:	6878      	ldr	r0, [r7, #4]
 800f734:	f000 f989 	bl	800fa4a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f738:	e01c      	b.n	800f774 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	7bfa      	ldrb	r2, [r7, #15]
 800f73e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f742:	7bfb      	ldrb	r3, [r7, #15]
 800f744:	4619      	mov	r1, r3
 800f746:	6878      	ldr	r0, [r7, #4]
 800f748:	f005 fede 	bl	8015508 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800f74c:	6878      	ldr	r0, [r7, #4]
 800f74e:	f000 fa27 	bl	800fba0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f752:	7bfb      	ldrb	r3, [r7, #15]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d004      	beq.n	800f762 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	2202      	movs	r2, #2
 800f75c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f760:	e008      	b.n	800f774 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	2201      	movs	r2, #1
 800f766:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f76a:	e003      	b.n	800f774 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f76c:	6839      	ldr	r1, [r7, #0]
 800f76e:	6878      	ldr	r0, [r7, #4]
 800f770:	f000 f96b 	bl	800fa4a <USBD_CtlError>
  }
}
 800f774:	bf00      	nop
 800f776:	3710      	adds	r7, #16
 800f778:	46bd      	mov	sp, r7
 800f77a:	bd80      	pop	{r7, pc}

0800f77c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b082      	sub	sp, #8
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
 800f784:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f786:	683b      	ldr	r3, [r7, #0]
 800f788:	885b      	ldrh	r3, [r3, #2]
 800f78a:	b2da      	uxtb	r2, r3
 800f78c:	4b41      	ldr	r3, [pc, #260]	; (800f894 <USBD_SetConfig+0x118>)
 800f78e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f790:	4b40      	ldr	r3, [pc, #256]	; (800f894 <USBD_SetConfig+0x118>)
 800f792:	781b      	ldrb	r3, [r3, #0]
 800f794:	2b01      	cmp	r3, #1
 800f796:	d904      	bls.n	800f7a2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800f798:	6839      	ldr	r1, [r7, #0]
 800f79a:	6878      	ldr	r0, [r7, #4]
 800f79c:	f000 f955 	bl	800fa4a <USBD_CtlError>
 800f7a0:	e075      	b.n	800f88e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f7a8:	2b02      	cmp	r3, #2
 800f7aa:	d002      	beq.n	800f7b2 <USBD_SetConfig+0x36>
 800f7ac:	2b03      	cmp	r3, #3
 800f7ae:	d023      	beq.n	800f7f8 <USBD_SetConfig+0x7c>
 800f7b0:	e062      	b.n	800f878 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800f7b2:	4b38      	ldr	r3, [pc, #224]	; (800f894 <USBD_SetConfig+0x118>)
 800f7b4:	781b      	ldrb	r3, [r3, #0]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d01a      	beq.n	800f7f0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800f7ba:	4b36      	ldr	r3, [pc, #216]	; (800f894 <USBD_SetConfig+0x118>)
 800f7bc:	781b      	ldrb	r3, [r3, #0]
 800f7be:	461a      	mov	r2, r3
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2203      	movs	r2, #3
 800f7c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800f7cc:	4b31      	ldr	r3, [pc, #196]	; (800f894 <USBD_SetConfig+0x118>)
 800f7ce:	781b      	ldrb	r3, [r3, #0]
 800f7d0:	4619      	mov	r1, r3
 800f7d2:	6878      	ldr	r0, [r7, #4]
 800f7d4:	f7ff f9b5 	bl	800eb42 <USBD_SetClassConfig>
 800f7d8:	4603      	mov	r3, r0
 800f7da:	2b02      	cmp	r3, #2
 800f7dc:	d104      	bne.n	800f7e8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800f7de:	6839      	ldr	r1, [r7, #0]
 800f7e0:	6878      	ldr	r0, [r7, #4]
 800f7e2:	f000 f932 	bl	800fa4a <USBD_CtlError>
            return;
 800f7e6:	e052      	b.n	800f88e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800f7e8:	6878      	ldr	r0, [r7, #4]
 800f7ea:	f000 f9d9 	bl	800fba0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800f7ee:	e04e      	b.n	800f88e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800f7f0:	6878      	ldr	r0, [r7, #4]
 800f7f2:	f000 f9d5 	bl	800fba0 <USBD_CtlSendStatus>
        break;
 800f7f6:	e04a      	b.n	800f88e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800f7f8:	4b26      	ldr	r3, [pc, #152]	; (800f894 <USBD_SetConfig+0x118>)
 800f7fa:	781b      	ldrb	r3, [r3, #0]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d112      	bne.n	800f826 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	2202      	movs	r2, #2
 800f804:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800f808:	4b22      	ldr	r3, [pc, #136]	; (800f894 <USBD_SetConfig+0x118>)
 800f80a:	781b      	ldrb	r3, [r3, #0]
 800f80c:	461a      	mov	r2, r3
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800f812:	4b20      	ldr	r3, [pc, #128]	; (800f894 <USBD_SetConfig+0x118>)
 800f814:	781b      	ldrb	r3, [r3, #0]
 800f816:	4619      	mov	r1, r3
 800f818:	6878      	ldr	r0, [r7, #4]
 800f81a:	f7ff f9b1 	bl	800eb80 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800f81e:	6878      	ldr	r0, [r7, #4]
 800f820:	f000 f9be 	bl	800fba0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800f824:	e033      	b.n	800f88e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800f826:	4b1b      	ldr	r3, [pc, #108]	; (800f894 <USBD_SetConfig+0x118>)
 800f828:	781b      	ldrb	r3, [r3, #0]
 800f82a:	461a      	mov	r2, r3
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	685b      	ldr	r3, [r3, #4]
 800f830:	429a      	cmp	r2, r3
 800f832:	d01d      	beq.n	800f870 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	685b      	ldr	r3, [r3, #4]
 800f838:	b2db      	uxtb	r3, r3
 800f83a:	4619      	mov	r1, r3
 800f83c:	6878      	ldr	r0, [r7, #4]
 800f83e:	f7ff f99f 	bl	800eb80 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800f842:	4b14      	ldr	r3, [pc, #80]	; (800f894 <USBD_SetConfig+0x118>)
 800f844:	781b      	ldrb	r3, [r3, #0]
 800f846:	461a      	mov	r2, r3
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800f84c:	4b11      	ldr	r3, [pc, #68]	; (800f894 <USBD_SetConfig+0x118>)
 800f84e:	781b      	ldrb	r3, [r3, #0]
 800f850:	4619      	mov	r1, r3
 800f852:	6878      	ldr	r0, [r7, #4]
 800f854:	f7ff f975 	bl	800eb42 <USBD_SetClassConfig>
 800f858:	4603      	mov	r3, r0
 800f85a:	2b02      	cmp	r3, #2
 800f85c:	d104      	bne.n	800f868 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800f85e:	6839      	ldr	r1, [r7, #0]
 800f860:	6878      	ldr	r0, [r7, #4]
 800f862:	f000 f8f2 	bl	800fa4a <USBD_CtlError>
            return;
 800f866:	e012      	b.n	800f88e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800f868:	6878      	ldr	r0, [r7, #4]
 800f86a:	f000 f999 	bl	800fba0 <USBD_CtlSendStatus>
        break;
 800f86e:	e00e      	b.n	800f88e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800f870:	6878      	ldr	r0, [r7, #4]
 800f872:	f000 f995 	bl	800fba0 <USBD_CtlSendStatus>
        break;
 800f876:	e00a      	b.n	800f88e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800f878:	6839      	ldr	r1, [r7, #0]
 800f87a:	6878      	ldr	r0, [r7, #4]
 800f87c:	f000 f8e5 	bl	800fa4a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800f880:	4b04      	ldr	r3, [pc, #16]	; (800f894 <USBD_SetConfig+0x118>)
 800f882:	781b      	ldrb	r3, [r3, #0]
 800f884:	4619      	mov	r1, r3
 800f886:	6878      	ldr	r0, [r7, #4]
 800f888:	f7ff f97a 	bl	800eb80 <USBD_ClrClassConfig>
        break;
 800f88c:	bf00      	nop
    }
  }
}
 800f88e:	3708      	adds	r7, #8
 800f890:	46bd      	mov	sp, r7
 800f892:	bd80      	pop	{r7, pc}
 800f894:	24000280 	.word	0x24000280

0800f898 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f898:	b580      	push	{r7, lr}
 800f89a:	b082      	sub	sp, #8
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
 800f8a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	88db      	ldrh	r3, [r3, #6]
 800f8a6:	2b01      	cmp	r3, #1
 800f8a8:	d004      	beq.n	800f8b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f8aa:	6839      	ldr	r1, [r7, #0]
 800f8ac:	6878      	ldr	r0, [r7, #4]
 800f8ae:	f000 f8cc 	bl	800fa4a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f8b2:	e021      	b.n	800f8f8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f8ba:	2b01      	cmp	r3, #1
 800f8bc:	db17      	blt.n	800f8ee <USBD_GetConfig+0x56>
 800f8be:	2b02      	cmp	r3, #2
 800f8c0:	dd02      	ble.n	800f8c8 <USBD_GetConfig+0x30>
 800f8c2:	2b03      	cmp	r3, #3
 800f8c4:	d00b      	beq.n	800f8de <USBD_GetConfig+0x46>
 800f8c6:	e012      	b.n	800f8ee <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	3308      	adds	r3, #8
 800f8d2:	2201      	movs	r2, #1
 800f8d4:	4619      	mov	r1, r3
 800f8d6:	6878      	ldr	r0, [r7, #4]
 800f8d8:	f000 f922 	bl	800fb20 <USBD_CtlSendData>
        break;
 800f8dc:	e00c      	b.n	800f8f8 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	3304      	adds	r3, #4
 800f8e2:	2201      	movs	r2, #1
 800f8e4:	4619      	mov	r1, r3
 800f8e6:	6878      	ldr	r0, [r7, #4]
 800f8e8:	f000 f91a 	bl	800fb20 <USBD_CtlSendData>
        break;
 800f8ec:	e004      	b.n	800f8f8 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800f8ee:	6839      	ldr	r1, [r7, #0]
 800f8f0:	6878      	ldr	r0, [r7, #4]
 800f8f2:	f000 f8aa 	bl	800fa4a <USBD_CtlError>
        break;
 800f8f6:	bf00      	nop
}
 800f8f8:	bf00      	nop
 800f8fa:	3708      	adds	r7, #8
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	bd80      	pop	{r7, pc}

0800f900 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b082      	sub	sp, #8
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
 800f908:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f910:	3b01      	subs	r3, #1
 800f912:	2b02      	cmp	r3, #2
 800f914:	d81e      	bhi.n	800f954 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	88db      	ldrh	r3, [r3, #6]
 800f91a:	2b02      	cmp	r3, #2
 800f91c:	d004      	beq.n	800f928 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800f91e:	6839      	ldr	r1, [r7, #0]
 800f920:	6878      	ldr	r0, [r7, #4]
 800f922:	f000 f892 	bl	800fa4a <USBD_CtlError>
        break;
 800f926:	e01a      	b.n	800f95e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	2201      	movs	r2, #1
 800f92c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f934:	2b00      	cmp	r3, #0
 800f936:	d005      	beq.n	800f944 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	68db      	ldr	r3, [r3, #12]
 800f93c:	f043 0202 	orr.w	r2, r3, #2
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	330c      	adds	r3, #12
 800f948:	2202      	movs	r2, #2
 800f94a:	4619      	mov	r1, r3
 800f94c:	6878      	ldr	r0, [r7, #4]
 800f94e:	f000 f8e7 	bl	800fb20 <USBD_CtlSendData>
      break;
 800f952:	e004      	b.n	800f95e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800f954:	6839      	ldr	r1, [r7, #0]
 800f956:	6878      	ldr	r0, [r7, #4]
 800f958:	f000 f877 	bl	800fa4a <USBD_CtlError>
      break;
 800f95c:	bf00      	nop
  }
}
 800f95e:	bf00      	nop
 800f960:	3708      	adds	r7, #8
 800f962:	46bd      	mov	sp, r7
 800f964:	bd80      	pop	{r7, pc}

0800f966 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800f966:	b580      	push	{r7, lr}
 800f968:	b082      	sub	sp, #8
 800f96a:	af00      	add	r7, sp, #0
 800f96c:	6078      	str	r0, [r7, #4]
 800f96e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f970:	683b      	ldr	r3, [r7, #0]
 800f972:	885b      	ldrh	r3, [r3, #2]
 800f974:	2b01      	cmp	r3, #1
 800f976:	d106      	bne.n	800f986 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	2201      	movs	r2, #1
 800f97c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800f980:	6878      	ldr	r0, [r7, #4]
 800f982:	f000 f90d 	bl	800fba0 <USBD_CtlSendStatus>
  }
}
 800f986:	bf00      	nop
 800f988:	3708      	adds	r7, #8
 800f98a:	46bd      	mov	sp, r7
 800f98c:	bd80      	pop	{r7, pc}

0800f98e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800f98e:	b580      	push	{r7, lr}
 800f990:	b082      	sub	sp, #8
 800f992:	af00      	add	r7, sp, #0
 800f994:	6078      	str	r0, [r7, #4]
 800f996:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f99e:	3b01      	subs	r3, #1
 800f9a0:	2b02      	cmp	r3, #2
 800f9a2:	d80b      	bhi.n	800f9bc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	885b      	ldrh	r3, [r3, #2]
 800f9a8:	2b01      	cmp	r3, #1
 800f9aa:	d10c      	bne.n	800f9c6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800f9b4:	6878      	ldr	r0, [r7, #4]
 800f9b6:	f000 f8f3 	bl	800fba0 <USBD_CtlSendStatus>
      }
      break;
 800f9ba:	e004      	b.n	800f9c6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800f9bc:	6839      	ldr	r1, [r7, #0]
 800f9be:	6878      	ldr	r0, [r7, #4]
 800f9c0:	f000 f843 	bl	800fa4a <USBD_CtlError>
      break;
 800f9c4:	e000      	b.n	800f9c8 <USBD_ClrFeature+0x3a>
      break;
 800f9c6:	bf00      	nop
  }
}
 800f9c8:	bf00      	nop
 800f9ca:	3708      	adds	r7, #8
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	bd80      	pop	{r7, pc}

0800f9d0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f9d0:	b480      	push	{r7}
 800f9d2:	b083      	sub	sp, #12
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
 800f9d8:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800f9da:	683b      	ldr	r3, [r7, #0]
 800f9dc:	781a      	ldrb	r2, [r3, #0]
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800f9e2:	683b      	ldr	r3, [r7, #0]
 800f9e4:	785a      	ldrb	r2, [r3, #1]
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800f9ea:	683b      	ldr	r3, [r7, #0]
 800f9ec:	3302      	adds	r3, #2
 800f9ee:	781b      	ldrb	r3, [r3, #0]
 800f9f0:	b29a      	uxth	r2, r3
 800f9f2:	683b      	ldr	r3, [r7, #0]
 800f9f4:	3303      	adds	r3, #3
 800f9f6:	781b      	ldrb	r3, [r3, #0]
 800f9f8:	b29b      	uxth	r3, r3
 800f9fa:	021b      	lsls	r3, r3, #8
 800f9fc:	b29b      	uxth	r3, r3
 800f9fe:	4413      	add	r3, r2
 800fa00:	b29a      	uxth	r2, r3
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800fa06:	683b      	ldr	r3, [r7, #0]
 800fa08:	3304      	adds	r3, #4
 800fa0a:	781b      	ldrb	r3, [r3, #0]
 800fa0c:	b29a      	uxth	r2, r3
 800fa0e:	683b      	ldr	r3, [r7, #0]
 800fa10:	3305      	adds	r3, #5
 800fa12:	781b      	ldrb	r3, [r3, #0]
 800fa14:	b29b      	uxth	r3, r3
 800fa16:	021b      	lsls	r3, r3, #8
 800fa18:	b29b      	uxth	r3, r3
 800fa1a:	4413      	add	r3, r2
 800fa1c:	b29a      	uxth	r2, r3
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800fa22:	683b      	ldr	r3, [r7, #0]
 800fa24:	3306      	adds	r3, #6
 800fa26:	781b      	ldrb	r3, [r3, #0]
 800fa28:	b29a      	uxth	r2, r3
 800fa2a:	683b      	ldr	r3, [r7, #0]
 800fa2c:	3307      	adds	r3, #7
 800fa2e:	781b      	ldrb	r3, [r3, #0]
 800fa30:	b29b      	uxth	r3, r3
 800fa32:	021b      	lsls	r3, r3, #8
 800fa34:	b29b      	uxth	r3, r3
 800fa36:	4413      	add	r3, r2
 800fa38:	b29a      	uxth	r2, r3
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	80da      	strh	r2, [r3, #6]

}
 800fa3e:	bf00      	nop
 800fa40:	370c      	adds	r7, #12
 800fa42:	46bd      	mov	sp, r7
 800fa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa48:	4770      	bx	lr

0800fa4a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800fa4a:	b580      	push	{r7, lr}
 800fa4c:	b082      	sub	sp, #8
 800fa4e:	af00      	add	r7, sp, #0
 800fa50:	6078      	str	r0, [r7, #4]
 800fa52:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800fa54:	2180      	movs	r1, #128	; 0x80
 800fa56:	6878      	ldr	r0, [r7, #4]
 800fa58:	f005 fcec 	bl	8015434 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800fa5c:	2100      	movs	r1, #0
 800fa5e:	6878      	ldr	r0, [r7, #4]
 800fa60:	f005 fce8 	bl	8015434 <USBD_LL_StallEP>
}
 800fa64:	bf00      	nop
 800fa66:	3708      	adds	r7, #8
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	bd80      	pop	{r7, pc}

0800fa6c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b086      	sub	sp, #24
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	60f8      	str	r0, [r7, #12]
 800fa74:	60b9      	str	r1, [r7, #8]
 800fa76:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fa78:	2300      	movs	r3, #0
 800fa7a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d032      	beq.n	800fae8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800fa82:	68f8      	ldr	r0, [r7, #12]
 800fa84:	f000 f834 	bl	800faf0 <USBD_GetLen>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	3301      	adds	r3, #1
 800fa8c:	b29b      	uxth	r3, r3
 800fa8e:	005b      	lsls	r3, r3, #1
 800fa90:	b29a      	uxth	r2, r3
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800fa96:	7dfb      	ldrb	r3, [r7, #23]
 800fa98:	1c5a      	adds	r2, r3, #1
 800fa9a:	75fa      	strb	r2, [r7, #23]
 800fa9c:	461a      	mov	r2, r3
 800fa9e:	68bb      	ldr	r3, [r7, #8]
 800faa0:	4413      	add	r3, r2
 800faa2:	687a      	ldr	r2, [r7, #4]
 800faa4:	7812      	ldrb	r2, [r2, #0]
 800faa6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800faa8:	7dfb      	ldrb	r3, [r7, #23]
 800faaa:	1c5a      	adds	r2, r3, #1
 800faac:	75fa      	strb	r2, [r7, #23]
 800faae:	461a      	mov	r2, r3
 800fab0:	68bb      	ldr	r3, [r7, #8]
 800fab2:	4413      	add	r3, r2
 800fab4:	2203      	movs	r2, #3
 800fab6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800fab8:	e012      	b.n	800fae0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	1c5a      	adds	r2, r3, #1
 800fabe:	60fa      	str	r2, [r7, #12]
 800fac0:	7dfa      	ldrb	r2, [r7, #23]
 800fac2:	1c51      	adds	r1, r2, #1
 800fac4:	75f9      	strb	r1, [r7, #23]
 800fac6:	4611      	mov	r1, r2
 800fac8:	68ba      	ldr	r2, [r7, #8]
 800faca:	440a      	add	r2, r1
 800facc:	781b      	ldrb	r3, [r3, #0]
 800face:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800fad0:	7dfb      	ldrb	r3, [r7, #23]
 800fad2:	1c5a      	adds	r2, r3, #1
 800fad4:	75fa      	strb	r2, [r7, #23]
 800fad6:	461a      	mov	r2, r3
 800fad8:	68bb      	ldr	r3, [r7, #8]
 800fada:	4413      	add	r3, r2
 800fadc:	2200      	movs	r2, #0
 800fade:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	781b      	ldrb	r3, [r3, #0]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d1e8      	bne.n	800faba <USBD_GetString+0x4e>
    }
  }
}
 800fae8:	bf00      	nop
 800faea:	3718      	adds	r7, #24
 800faec:	46bd      	mov	sp, r7
 800faee:	bd80      	pop	{r7, pc}

0800faf0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800faf0:	b480      	push	{r7}
 800faf2:	b085      	sub	sp, #20
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800faf8:	2300      	movs	r3, #0
 800fafa:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800fafc:	e005      	b.n	800fb0a <USBD_GetLen+0x1a>
  {
    len++;
 800fafe:	7bfb      	ldrb	r3, [r7, #15]
 800fb00:	3301      	adds	r3, #1
 800fb02:	73fb      	strb	r3, [r7, #15]
    buf++;
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	3301      	adds	r3, #1
 800fb08:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	781b      	ldrb	r3, [r3, #0]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d1f5      	bne.n	800fafe <USBD_GetLen+0xe>
  }

  return len;
 800fb12:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb14:	4618      	mov	r0, r3
 800fb16:	3714      	adds	r7, #20
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1e:	4770      	bx	lr

0800fb20 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b084      	sub	sp, #16
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	60f8      	str	r0, [r7, #12]
 800fb28:	60b9      	str	r1, [r7, #8]
 800fb2a:	4613      	mov	r3, r2
 800fb2c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	2202      	movs	r2, #2
 800fb32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800fb36:	88fa      	ldrh	r2, [r7, #6]
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800fb3c:	88fa      	ldrh	r2, [r7, #6]
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fb42:	88fb      	ldrh	r3, [r7, #6]
 800fb44:	68ba      	ldr	r2, [r7, #8]
 800fb46:	2100      	movs	r1, #0
 800fb48:	68f8      	ldr	r0, [r7, #12]
 800fb4a:	f005 fcfc 	bl	8015546 <USBD_LL_Transmit>

  return USBD_OK;
 800fb4e:	2300      	movs	r3, #0
}
 800fb50:	4618      	mov	r0, r3
 800fb52:	3710      	adds	r7, #16
 800fb54:	46bd      	mov	sp, r7
 800fb56:	bd80      	pop	{r7, pc}

0800fb58 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b084      	sub	sp, #16
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	60f8      	str	r0, [r7, #12]
 800fb60:	60b9      	str	r1, [r7, #8]
 800fb62:	4613      	mov	r3, r2
 800fb64:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fb66:	88fb      	ldrh	r3, [r7, #6]
 800fb68:	68ba      	ldr	r2, [r7, #8]
 800fb6a:	2100      	movs	r1, #0
 800fb6c:	68f8      	ldr	r0, [r7, #12]
 800fb6e:	f005 fcea 	bl	8015546 <USBD_LL_Transmit>

  return USBD_OK;
 800fb72:	2300      	movs	r3, #0
}
 800fb74:	4618      	mov	r0, r3
 800fb76:	3710      	adds	r7, #16
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	bd80      	pop	{r7, pc}

0800fb7c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b084      	sub	sp, #16
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	60f8      	str	r0, [r7, #12]
 800fb84:	60b9      	str	r1, [r7, #8]
 800fb86:	4613      	mov	r3, r2
 800fb88:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fb8a:	88fb      	ldrh	r3, [r7, #6]
 800fb8c:	68ba      	ldr	r2, [r7, #8]
 800fb8e:	2100      	movs	r1, #0
 800fb90:	68f8      	ldr	r0, [r7, #12]
 800fb92:	f005 fcfb 	bl	801558c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fb96:	2300      	movs	r3, #0
}
 800fb98:	4618      	mov	r0, r3
 800fb9a:	3710      	adds	r7, #16
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}

0800fba0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b082      	sub	sp, #8
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	2204      	movs	r2, #4
 800fbac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	2100      	movs	r1, #0
 800fbb6:	6878      	ldr	r0, [r7, #4]
 800fbb8:	f005 fcc5 	bl	8015546 <USBD_LL_Transmit>

  return USBD_OK;
 800fbbc:	2300      	movs	r3, #0
}
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	3708      	adds	r7, #8
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	bd80      	pop	{r7, pc}

0800fbc6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fbc6:	b580      	push	{r7, lr}
 800fbc8:	b082      	sub	sp, #8
 800fbca:	af00      	add	r7, sp, #0
 800fbcc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	2205      	movs	r2, #5
 800fbd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	2200      	movs	r2, #0
 800fbda:	2100      	movs	r1, #0
 800fbdc:	6878      	ldr	r0, [r7, #4]
 800fbde:	f005 fcd5 	bl	801558c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fbe2:	2300      	movs	r3, #0
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	3708      	adds	r7, #8
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}

0800fbec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b084      	sub	sp, #16
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800fbf6:	79fb      	ldrb	r3, [r7, #7]
 800fbf8:	4a08      	ldr	r2, [pc, #32]	; (800fc1c <disk_status+0x30>)
 800fbfa:	009b      	lsls	r3, r3, #2
 800fbfc:	4413      	add	r3, r2
 800fbfe:	685b      	ldr	r3, [r3, #4]
 800fc00:	685b      	ldr	r3, [r3, #4]
 800fc02:	79fa      	ldrb	r2, [r7, #7]
 800fc04:	4905      	ldr	r1, [pc, #20]	; (800fc1c <disk_status+0x30>)
 800fc06:	440a      	add	r2, r1
 800fc08:	7a12      	ldrb	r2, [r2, #8]
 800fc0a:	4610      	mov	r0, r2
 800fc0c:	4798      	blx	r3
 800fc0e:	4603      	mov	r3, r0
 800fc10:	73fb      	strb	r3, [r7, #15]
  return stat;
 800fc12:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc14:	4618      	mov	r0, r3
 800fc16:	3710      	adds	r7, #16
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	bd80      	pop	{r7, pc}
 800fc1c:	240002cc 	.word	0x240002cc

0800fc20 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b084      	sub	sp, #16
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	4603      	mov	r3, r0
 800fc28:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800fc2e:	79fb      	ldrb	r3, [r7, #7]
 800fc30:	4a0d      	ldr	r2, [pc, #52]	; (800fc68 <disk_initialize+0x48>)
 800fc32:	5cd3      	ldrb	r3, [r2, r3]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d111      	bne.n	800fc5c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800fc38:	79fb      	ldrb	r3, [r7, #7]
 800fc3a:	4a0b      	ldr	r2, [pc, #44]	; (800fc68 <disk_initialize+0x48>)
 800fc3c:	2101      	movs	r1, #1
 800fc3e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800fc40:	79fb      	ldrb	r3, [r7, #7]
 800fc42:	4a09      	ldr	r2, [pc, #36]	; (800fc68 <disk_initialize+0x48>)
 800fc44:	009b      	lsls	r3, r3, #2
 800fc46:	4413      	add	r3, r2
 800fc48:	685b      	ldr	r3, [r3, #4]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	79fa      	ldrb	r2, [r7, #7]
 800fc4e:	4906      	ldr	r1, [pc, #24]	; (800fc68 <disk_initialize+0x48>)
 800fc50:	440a      	add	r2, r1
 800fc52:	7a12      	ldrb	r2, [r2, #8]
 800fc54:	4610      	mov	r0, r2
 800fc56:	4798      	blx	r3
 800fc58:	4603      	mov	r3, r0
 800fc5a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800fc5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc5e:	4618      	mov	r0, r3
 800fc60:	3710      	adds	r7, #16
 800fc62:	46bd      	mov	sp, r7
 800fc64:	bd80      	pop	{r7, pc}
 800fc66:	bf00      	nop
 800fc68:	240002cc 	.word	0x240002cc

0800fc6c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800fc6c:	b590      	push	{r4, r7, lr}
 800fc6e:	b087      	sub	sp, #28
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	60b9      	str	r1, [r7, #8]
 800fc74:	607a      	str	r2, [r7, #4]
 800fc76:	603b      	str	r3, [r7, #0]
 800fc78:	4603      	mov	r3, r0
 800fc7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800fc7c:	7bfb      	ldrb	r3, [r7, #15]
 800fc7e:	4a0a      	ldr	r2, [pc, #40]	; (800fca8 <disk_read+0x3c>)
 800fc80:	009b      	lsls	r3, r3, #2
 800fc82:	4413      	add	r3, r2
 800fc84:	685b      	ldr	r3, [r3, #4]
 800fc86:	689c      	ldr	r4, [r3, #8]
 800fc88:	7bfb      	ldrb	r3, [r7, #15]
 800fc8a:	4a07      	ldr	r2, [pc, #28]	; (800fca8 <disk_read+0x3c>)
 800fc8c:	4413      	add	r3, r2
 800fc8e:	7a18      	ldrb	r0, [r3, #8]
 800fc90:	683b      	ldr	r3, [r7, #0]
 800fc92:	687a      	ldr	r2, [r7, #4]
 800fc94:	68b9      	ldr	r1, [r7, #8]
 800fc96:	47a0      	blx	r4
 800fc98:	4603      	mov	r3, r0
 800fc9a:	75fb      	strb	r3, [r7, #23]
  return res;
 800fc9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc9e:	4618      	mov	r0, r3
 800fca0:	371c      	adds	r7, #28
 800fca2:	46bd      	mov	sp, r7
 800fca4:	bd90      	pop	{r4, r7, pc}
 800fca6:	bf00      	nop
 800fca8:	240002cc 	.word	0x240002cc

0800fcac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800fcac:	b590      	push	{r4, r7, lr}
 800fcae:	b087      	sub	sp, #28
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	60b9      	str	r1, [r7, #8]
 800fcb4:	607a      	str	r2, [r7, #4]
 800fcb6:	603b      	str	r3, [r7, #0]
 800fcb8:	4603      	mov	r3, r0
 800fcba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800fcbc:	7bfb      	ldrb	r3, [r7, #15]
 800fcbe:	4a0a      	ldr	r2, [pc, #40]	; (800fce8 <disk_write+0x3c>)
 800fcc0:	009b      	lsls	r3, r3, #2
 800fcc2:	4413      	add	r3, r2
 800fcc4:	685b      	ldr	r3, [r3, #4]
 800fcc6:	68dc      	ldr	r4, [r3, #12]
 800fcc8:	7bfb      	ldrb	r3, [r7, #15]
 800fcca:	4a07      	ldr	r2, [pc, #28]	; (800fce8 <disk_write+0x3c>)
 800fccc:	4413      	add	r3, r2
 800fcce:	7a18      	ldrb	r0, [r3, #8]
 800fcd0:	683b      	ldr	r3, [r7, #0]
 800fcd2:	687a      	ldr	r2, [r7, #4]
 800fcd4:	68b9      	ldr	r1, [r7, #8]
 800fcd6:	47a0      	blx	r4
 800fcd8:	4603      	mov	r3, r0
 800fcda:	75fb      	strb	r3, [r7, #23]
  return res;
 800fcdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800fcde:	4618      	mov	r0, r3
 800fce0:	371c      	adds	r7, #28
 800fce2:	46bd      	mov	sp, r7
 800fce4:	bd90      	pop	{r4, r7, pc}
 800fce6:	bf00      	nop
 800fce8:	240002cc 	.word	0x240002cc

0800fcec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b084      	sub	sp, #16
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	603a      	str	r2, [r7, #0]
 800fcf6:	71fb      	strb	r3, [r7, #7]
 800fcf8:	460b      	mov	r3, r1
 800fcfa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800fcfc:	79fb      	ldrb	r3, [r7, #7]
 800fcfe:	4a09      	ldr	r2, [pc, #36]	; (800fd24 <disk_ioctl+0x38>)
 800fd00:	009b      	lsls	r3, r3, #2
 800fd02:	4413      	add	r3, r2
 800fd04:	685b      	ldr	r3, [r3, #4]
 800fd06:	691b      	ldr	r3, [r3, #16]
 800fd08:	79fa      	ldrb	r2, [r7, #7]
 800fd0a:	4906      	ldr	r1, [pc, #24]	; (800fd24 <disk_ioctl+0x38>)
 800fd0c:	440a      	add	r2, r1
 800fd0e:	7a10      	ldrb	r0, [r2, #8]
 800fd10:	79b9      	ldrb	r1, [r7, #6]
 800fd12:	683a      	ldr	r2, [r7, #0]
 800fd14:	4798      	blx	r3
 800fd16:	4603      	mov	r3, r0
 800fd18:	73fb      	strb	r3, [r7, #15]
  return res;
 800fd1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	3710      	adds	r7, #16
 800fd20:	46bd      	mov	sp, r7
 800fd22:	bd80      	pop	{r7, pc}
 800fd24:	240002cc 	.word	0x240002cc

0800fd28 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800fd28:	b480      	push	{r7}
 800fd2a:	b085      	sub	sp, #20
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	3301      	adds	r3, #1
 800fd34:	781b      	ldrb	r3, [r3, #0]
 800fd36:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800fd38:	89fb      	ldrh	r3, [r7, #14]
 800fd3a:	021b      	lsls	r3, r3, #8
 800fd3c:	b21a      	sxth	r2, r3
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	781b      	ldrb	r3, [r3, #0]
 800fd42:	b21b      	sxth	r3, r3
 800fd44:	4313      	orrs	r3, r2
 800fd46:	b21b      	sxth	r3, r3
 800fd48:	81fb      	strh	r3, [r7, #14]
	return rv;
 800fd4a:	89fb      	ldrh	r3, [r7, #14]
}
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	3714      	adds	r7, #20
 800fd50:	46bd      	mov	sp, r7
 800fd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd56:	4770      	bx	lr

0800fd58 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800fd58:	b480      	push	{r7}
 800fd5a:	b085      	sub	sp, #20
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	3303      	adds	r3, #3
 800fd64:	781b      	ldrb	r3, [r3, #0]
 800fd66:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	021b      	lsls	r3, r3, #8
 800fd6c:	687a      	ldr	r2, [r7, #4]
 800fd6e:	3202      	adds	r2, #2
 800fd70:	7812      	ldrb	r2, [r2, #0]
 800fd72:	4313      	orrs	r3, r2
 800fd74:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	021b      	lsls	r3, r3, #8
 800fd7a:	687a      	ldr	r2, [r7, #4]
 800fd7c:	3201      	adds	r2, #1
 800fd7e:	7812      	ldrb	r2, [r2, #0]
 800fd80:	4313      	orrs	r3, r2
 800fd82:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	021b      	lsls	r3, r3, #8
 800fd88:	687a      	ldr	r2, [r7, #4]
 800fd8a:	7812      	ldrb	r2, [r2, #0]
 800fd8c:	4313      	orrs	r3, r2
 800fd8e:	60fb      	str	r3, [r7, #12]
	return rv;
 800fd90:	68fb      	ldr	r3, [r7, #12]
}
 800fd92:	4618      	mov	r0, r3
 800fd94:	3714      	adds	r7, #20
 800fd96:	46bd      	mov	sp, r7
 800fd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9c:	4770      	bx	lr

0800fd9e <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800fd9e:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800fda2:	b085      	sub	sp, #20
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
	QWORD rv;

	rv = ptr[7];
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	3307      	adds	r3, #7
 800fdac:	781b      	ldrb	r3, [r3, #0]
 800fdae:	b2db      	uxtb	r3, r3
 800fdb0:	f04f 0400 	mov.w	r4, #0
 800fdb4:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[6];
 800fdb8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800fdbc:	f04f 0b00 	mov.w	fp, #0
 800fdc0:	f04f 0c00 	mov.w	ip, #0
 800fdc4:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800fdc8:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800fdcc:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800fdd0:	687a      	ldr	r2, [r7, #4]
 800fdd2:	3206      	adds	r2, #6
 800fdd4:	7812      	ldrb	r2, [r2, #0]
 800fdd6:	b2d1      	uxtb	r1, r2
 800fdd8:	f04f 0200 	mov.w	r2, #0
 800fddc:	ea4b 0301 	orr.w	r3, fp, r1
 800fde0:	ea4c 0402 	orr.w	r4, ip, r2
 800fde4:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[5];
 800fde8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800fdec:	f04f 0b00 	mov.w	fp, #0
 800fdf0:	f04f 0c00 	mov.w	ip, #0
 800fdf4:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800fdf8:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800fdfc:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800fe00:	687a      	ldr	r2, [r7, #4]
 800fe02:	3205      	adds	r2, #5
 800fe04:	7812      	ldrb	r2, [r2, #0]
 800fe06:	b2d1      	uxtb	r1, r2
 800fe08:	f04f 0200 	mov.w	r2, #0
 800fe0c:	ea4b 0301 	orr.w	r3, fp, r1
 800fe10:	ea4c 0402 	orr.w	r4, ip, r2
 800fe14:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[4];
 800fe18:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800fe1c:	f04f 0b00 	mov.w	fp, #0
 800fe20:	f04f 0c00 	mov.w	ip, #0
 800fe24:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800fe28:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800fe2c:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800fe30:	687a      	ldr	r2, [r7, #4]
 800fe32:	3204      	adds	r2, #4
 800fe34:	7812      	ldrb	r2, [r2, #0]
 800fe36:	b2d1      	uxtb	r1, r2
 800fe38:	f04f 0200 	mov.w	r2, #0
 800fe3c:	ea4b 0301 	orr.w	r3, fp, r1
 800fe40:	ea4c 0402 	orr.w	r4, ip, r2
 800fe44:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[3];
 800fe48:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800fe4c:	f04f 0b00 	mov.w	fp, #0
 800fe50:	f04f 0c00 	mov.w	ip, #0
 800fe54:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800fe58:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800fe5c:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800fe60:	687a      	ldr	r2, [r7, #4]
 800fe62:	3203      	adds	r2, #3
 800fe64:	7812      	ldrb	r2, [r2, #0]
 800fe66:	b2d1      	uxtb	r1, r2
 800fe68:	f04f 0200 	mov.w	r2, #0
 800fe6c:	ea4b 0301 	orr.w	r3, fp, r1
 800fe70:	ea4c 0402 	orr.w	r4, ip, r2
 800fe74:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[2];
 800fe78:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800fe7c:	f04f 0b00 	mov.w	fp, #0
 800fe80:	f04f 0c00 	mov.w	ip, #0
 800fe84:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800fe88:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800fe8c:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800fe90:	687a      	ldr	r2, [r7, #4]
 800fe92:	3202      	adds	r2, #2
 800fe94:	7812      	ldrb	r2, [r2, #0]
 800fe96:	b2d1      	uxtb	r1, r2
 800fe98:	f04f 0200 	mov.w	r2, #0
 800fe9c:	ea4b 0301 	orr.w	r3, fp, r1
 800fea0:	ea4c 0402 	orr.w	r4, ip, r2
 800fea4:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[1];
 800fea8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800feac:	f04f 0b00 	mov.w	fp, #0
 800feb0:	f04f 0c00 	mov.w	ip, #0
 800feb4:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800feb8:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800febc:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800fec0:	687a      	ldr	r2, [r7, #4]
 800fec2:	3201      	adds	r2, #1
 800fec4:	7812      	ldrb	r2, [r2, #0]
 800fec6:	b2d1      	uxtb	r1, r2
 800fec8:	f04f 0200 	mov.w	r2, #0
 800fecc:	ea4b 0301 	orr.w	r3, fp, r1
 800fed0:	ea4c 0402 	orr.w	r4, ip, r2
 800fed4:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[0];
 800fed8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800fedc:	f04f 0b00 	mov.w	fp, #0
 800fee0:	f04f 0c00 	mov.w	ip, #0
 800fee4:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800fee8:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800feec:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800fef0:	687a      	ldr	r2, [r7, #4]
 800fef2:	7812      	ldrb	r2, [r2, #0]
 800fef4:	b2d1      	uxtb	r1, r2
 800fef6:	f04f 0200 	mov.w	r2, #0
 800fefa:	ea4b 0301 	orr.w	r3, fp, r1
 800fefe:	ea4c 0402 	orr.w	r4, ip, r2
 800ff02:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return rv;
 800ff06:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	4621      	mov	r1, r4
 800ff0e:	3714      	adds	r7, #20
 800ff10:	46bd      	mov	sp, r7
 800ff12:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800ff16:	4770      	bx	lr

0800ff18 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ff18:	b480      	push	{r7}
 800ff1a:	b083      	sub	sp, #12
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
 800ff20:	460b      	mov	r3, r1
 800ff22:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	1c5a      	adds	r2, r3, #1
 800ff28:	607a      	str	r2, [r7, #4]
 800ff2a:	887a      	ldrh	r2, [r7, #2]
 800ff2c:	b2d2      	uxtb	r2, r2
 800ff2e:	701a      	strb	r2, [r3, #0]
 800ff30:	887b      	ldrh	r3, [r7, #2]
 800ff32:	0a1b      	lsrs	r3, r3, #8
 800ff34:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	1c5a      	adds	r2, r3, #1
 800ff3a:	607a      	str	r2, [r7, #4]
 800ff3c:	887a      	ldrh	r2, [r7, #2]
 800ff3e:	b2d2      	uxtb	r2, r2
 800ff40:	701a      	strb	r2, [r3, #0]
}
 800ff42:	bf00      	nop
 800ff44:	370c      	adds	r7, #12
 800ff46:	46bd      	mov	sp, r7
 800ff48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4c:	4770      	bx	lr

0800ff4e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ff4e:	b480      	push	{r7}
 800ff50:	b083      	sub	sp, #12
 800ff52:	af00      	add	r7, sp, #0
 800ff54:	6078      	str	r0, [r7, #4]
 800ff56:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	1c5a      	adds	r2, r3, #1
 800ff5c:	607a      	str	r2, [r7, #4]
 800ff5e:	683a      	ldr	r2, [r7, #0]
 800ff60:	b2d2      	uxtb	r2, r2
 800ff62:	701a      	strb	r2, [r3, #0]
 800ff64:	683b      	ldr	r3, [r7, #0]
 800ff66:	0a1b      	lsrs	r3, r3, #8
 800ff68:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	1c5a      	adds	r2, r3, #1
 800ff6e:	607a      	str	r2, [r7, #4]
 800ff70:	683a      	ldr	r2, [r7, #0]
 800ff72:	b2d2      	uxtb	r2, r2
 800ff74:	701a      	strb	r2, [r3, #0]
 800ff76:	683b      	ldr	r3, [r7, #0]
 800ff78:	0a1b      	lsrs	r3, r3, #8
 800ff7a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	1c5a      	adds	r2, r3, #1
 800ff80:	607a      	str	r2, [r7, #4]
 800ff82:	683a      	ldr	r2, [r7, #0]
 800ff84:	b2d2      	uxtb	r2, r2
 800ff86:	701a      	strb	r2, [r3, #0]
 800ff88:	683b      	ldr	r3, [r7, #0]
 800ff8a:	0a1b      	lsrs	r3, r3, #8
 800ff8c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	1c5a      	adds	r2, r3, #1
 800ff92:	607a      	str	r2, [r7, #4]
 800ff94:	683a      	ldr	r2, [r7, #0]
 800ff96:	b2d2      	uxtb	r2, r2
 800ff98:	701a      	strb	r2, [r3, #0]
}
 800ff9a:	bf00      	nop
 800ff9c:	370c      	adds	r7, #12
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa4:	4770      	bx	lr

0800ffa6 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800ffa6:	b490      	push	{r4, r7}
 800ffa8:	b084      	sub	sp, #16
 800ffaa:	af00      	add	r7, sp, #0
 800ffac:	60f8      	str	r0, [r7, #12]
 800ffae:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	1c5a      	adds	r2, r3, #1
 800ffb6:	60fa      	str	r2, [r7, #12]
 800ffb8:	783a      	ldrb	r2, [r7, #0]
 800ffba:	701a      	strb	r2, [r3, #0]
 800ffbc:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ffc0:	f04f 0300 	mov.w	r3, #0
 800ffc4:	f04f 0400 	mov.w	r4, #0
 800ffc8:	0a0b      	lsrs	r3, r1, #8
 800ffca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ffce:	0a14      	lsrs	r4, r2, #8
 800ffd0:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	1c5a      	adds	r2, r3, #1
 800ffd8:	60fa      	str	r2, [r7, #12]
 800ffda:	783a      	ldrb	r2, [r7, #0]
 800ffdc:	701a      	strb	r2, [r3, #0]
 800ffde:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ffe2:	f04f 0300 	mov.w	r3, #0
 800ffe6:	f04f 0400 	mov.w	r4, #0
 800ffea:	0a0b      	lsrs	r3, r1, #8
 800ffec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fff0:	0a14      	lsrs	r4, r2, #8
 800fff2:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	1c5a      	adds	r2, r3, #1
 800fffa:	60fa      	str	r2, [r7, #12]
 800fffc:	783a      	ldrb	r2, [r7, #0]
 800fffe:	701a      	strb	r2, [r3, #0]
 8010000:	e9d7 1200 	ldrd	r1, r2, [r7]
 8010004:	f04f 0300 	mov.w	r3, #0
 8010008:	f04f 0400 	mov.w	r4, #0
 801000c:	0a0b      	lsrs	r3, r1, #8
 801000e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010012:	0a14      	lsrs	r4, r2, #8
 8010014:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	1c5a      	adds	r2, r3, #1
 801001c:	60fa      	str	r2, [r7, #12]
 801001e:	783a      	ldrb	r2, [r7, #0]
 8010020:	701a      	strb	r2, [r3, #0]
 8010022:	e9d7 1200 	ldrd	r1, r2, [r7]
 8010026:	f04f 0300 	mov.w	r3, #0
 801002a:	f04f 0400 	mov.w	r4, #0
 801002e:	0a0b      	lsrs	r3, r1, #8
 8010030:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010034:	0a14      	lsrs	r4, r2, #8
 8010036:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	1c5a      	adds	r2, r3, #1
 801003e:	60fa      	str	r2, [r7, #12]
 8010040:	783a      	ldrb	r2, [r7, #0]
 8010042:	701a      	strb	r2, [r3, #0]
 8010044:	e9d7 1200 	ldrd	r1, r2, [r7]
 8010048:	f04f 0300 	mov.w	r3, #0
 801004c:	f04f 0400 	mov.w	r4, #0
 8010050:	0a0b      	lsrs	r3, r1, #8
 8010052:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010056:	0a14      	lsrs	r4, r2, #8
 8010058:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	1c5a      	adds	r2, r3, #1
 8010060:	60fa      	str	r2, [r7, #12]
 8010062:	783a      	ldrb	r2, [r7, #0]
 8010064:	701a      	strb	r2, [r3, #0]
 8010066:	e9d7 1200 	ldrd	r1, r2, [r7]
 801006a:	f04f 0300 	mov.w	r3, #0
 801006e:	f04f 0400 	mov.w	r4, #0
 8010072:	0a0b      	lsrs	r3, r1, #8
 8010074:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010078:	0a14      	lsrs	r4, r2, #8
 801007a:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	1c5a      	adds	r2, r3, #1
 8010082:	60fa      	str	r2, [r7, #12]
 8010084:	783a      	ldrb	r2, [r7, #0]
 8010086:	701a      	strb	r2, [r3, #0]
 8010088:	e9d7 1200 	ldrd	r1, r2, [r7]
 801008c:	f04f 0300 	mov.w	r3, #0
 8010090:	f04f 0400 	mov.w	r4, #0
 8010094:	0a0b      	lsrs	r3, r1, #8
 8010096:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801009a:	0a14      	lsrs	r4, r2, #8
 801009c:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val;
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	1c5a      	adds	r2, r3, #1
 80100a4:	60fa      	str	r2, [r7, #12]
 80100a6:	783a      	ldrb	r2, [r7, #0]
 80100a8:	701a      	strb	r2, [r3, #0]
}
 80100aa:	bf00      	nop
 80100ac:	3710      	adds	r7, #16
 80100ae:	46bd      	mov	sp, r7
 80100b0:	bc90      	pop	{r4, r7}
 80100b2:	4770      	bx	lr

080100b4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80100b4:	b480      	push	{r7}
 80100b6:	b087      	sub	sp, #28
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	60f8      	str	r0, [r7, #12]
 80100bc:	60b9      	str	r1, [r7, #8]
 80100be:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80100c4:	68bb      	ldr	r3, [r7, #8]
 80100c6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d00d      	beq.n	80100ea <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80100ce:	693a      	ldr	r2, [r7, #16]
 80100d0:	1c53      	adds	r3, r2, #1
 80100d2:	613b      	str	r3, [r7, #16]
 80100d4:	697b      	ldr	r3, [r7, #20]
 80100d6:	1c59      	adds	r1, r3, #1
 80100d8:	6179      	str	r1, [r7, #20]
 80100da:	7812      	ldrb	r2, [r2, #0]
 80100dc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	3b01      	subs	r3, #1
 80100e2:	607b      	str	r3, [r7, #4]
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d1f1      	bne.n	80100ce <mem_cpy+0x1a>
	}
}
 80100ea:	bf00      	nop
 80100ec:	371c      	adds	r7, #28
 80100ee:	46bd      	mov	sp, r7
 80100f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f4:	4770      	bx	lr

080100f6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80100f6:	b480      	push	{r7}
 80100f8:	b087      	sub	sp, #28
 80100fa:	af00      	add	r7, sp, #0
 80100fc:	60f8      	str	r0, [r7, #12]
 80100fe:	60b9      	str	r1, [r7, #8]
 8010100:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8010106:	697b      	ldr	r3, [r7, #20]
 8010108:	1c5a      	adds	r2, r3, #1
 801010a:	617a      	str	r2, [r7, #20]
 801010c:	68ba      	ldr	r2, [r7, #8]
 801010e:	b2d2      	uxtb	r2, r2
 8010110:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	3b01      	subs	r3, #1
 8010116:	607b      	str	r3, [r7, #4]
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d1f3      	bne.n	8010106 <mem_set+0x10>
}
 801011e:	bf00      	nop
 8010120:	371c      	adds	r7, #28
 8010122:	46bd      	mov	sp, r7
 8010124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010128:	4770      	bx	lr

0801012a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801012a:	b480      	push	{r7}
 801012c:	b089      	sub	sp, #36	; 0x24
 801012e:	af00      	add	r7, sp, #0
 8010130:	60f8      	str	r0, [r7, #12]
 8010132:	60b9      	str	r1, [r7, #8]
 8010134:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	61fb      	str	r3, [r7, #28]
 801013a:	68bb      	ldr	r3, [r7, #8]
 801013c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801013e:	2300      	movs	r3, #0
 8010140:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010142:	69fb      	ldr	r3, [r7, #28]
 8010144:	1c5a      	adds	r2, r3, #1
 8010146:	61fa      	str	r2, [r7, #28]
 8010148:	781b      	ldrb	r3, [r3, #0]
 801014a:	4619      	mov	r1, r3
 801014c:	69bb      	ldr	r3, [r7, #24]
 801014e:	1c5a      	adds	r2, r3, #1
 8010150:	61ba      	str	r2, [r7, #24]
 8010152:	781b      	ldrb	r3, [r3, #0]
 8010154:	1acb      	subs	r3, r1, r3
 8010156:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	3b01      	subs	r3, #1
 801015c:	607b      	str	r3, [r7, #4]
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d002      	beq.n	801016a <mem_cmp+0x40>
 8010164:	697b      	ldr	r3, [r7, #20]
 8010166:	2b00      	cmp	r3, #0
 8010168:	d0eb      	beq.n	8010142 <mem_cmp+0x18>

	return r;
 801016a:	697b      	ldr	r3, [r7, #20]
}
 801016c:	4618      	mov	r0, r3
 801016e:	3724      	adds	r7, #36	; 0x24
 8010170:	46bd      	mov	sp, r7
 8010172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010176:	4770      	bx	lr

08010178 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010178:	b480      	push	{r7}
 801017a:	b083      	sub	sp, #12
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
 8010180:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010182:	e002      	b.n	801018a <chk_chr+0x12>
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	3301      	adds	r3, #1
 8010188:	607b      	str	r3, [r7, #4]
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	781b      	ldrb	r3, [r3, #0]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d005      	beq.n	801019e <chk_chr+0x26>
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	781b      	ldrb	r3, [r3, #0]
 8010196:	461a      	mov	r2, r3
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	4293      	cmp	r3, r2
 801019c:	d1f2      	bne.n	8010184 <chk_chr+0xc>
	return *str;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	781b      	ldrb	r3, [r3, #0]
}
 80101a2:	4618      	mov	r0, r3
 80101a4:	370c      	adds	r7, #12
 80101a6:	46bd      	mov	sp, r7
 80101a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ac:	4770      	bx	lr
	...

080101b0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80101b0:	b480      	push	{r7}
 80101b2:	b085      	sub	sp, #20
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
 80101b8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80101ba:	2300      	movs	r3, #0
 80101bc:	60bb      	str	r3, [r7, #8]
 80101be:	68bb      	ldr	r3, [r7, #8]
 80101c0:	60fb      	str	r3, [r7, #12]
 80101c2:	e029      	b.n	8010218 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80101c4:	4a27      	ldr	r2, [pc, #156]	; (8010264 <chk_lock+0xb4>)
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	011b      	lsls	r3, r3, #4
 80101ca:	4413      	add	r3, r2
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d01d      	beq.n	801020e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80101d2:	4a24      	ldr	r2, [pc, #144]	; (8010264 <chk_lock+0xb4>)
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	011b      	lsls	r3, r3, #4
 80101d8:	4413      	add	r3, r2
 80101da:	681a      	ldr	r2, [r3, #0]
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	429a      	cmp	r2, r3
 80101e2:	d116      	bne.n	8010212 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80101e4:	4a1f      	ldr	r2, [pc, #124]	; (8010264 <chk_lock+0xb4>)
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	011b      	lsls	r3, r3, #4
 80101ea:	4413      	add	r3, r2
 80101ec:	3304      	adds	r3, #4
 80101ee:	681a      	ldr	r2, [r3, #0]
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80101f4:	429a      	cmp	r2, r3
 80101f6:	d10c      	bne.n	8010212 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80101f8:	4a1a      	ldr	r2, [pc, #104]	; (8010264 <chk_lock+0xb4>)
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	011b      	lsls	r3, r3, #4
 80101fe:	4413      	add	r3, r2
 8010200:	3308      	adds	r3, #8
 8010202:	681a      	ldr	r2, [r3, #0]
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 8010208:	429a      	cmp	r2, r3
 801020a:	d102      	bne.n	8010212 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801020c:	e007      	b.n	801021e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801020e:	2301      	movs	r3, #1
 8010210:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	3301      	adds	r3, #1
 8010216:	60fb      	str	r3, [r7, #12]
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	2b03      	cmp	r3, #3
 801021c:	d9d2      	bls.n	80101c4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	2b04      	cmp	r3, #4
 8010222:	d109      	bne.n	8010238 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8010224:	68bb      	ldr	r3, [r7, #8]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d102      	bne.n	8010230 <chk_lock+0x80>
 801022a:	683b      	ldr	r3, [r7, #0]
 801022c:	2b02      	cmp	r3, #2
 801022e:	d101      	bne.n	8010234 <chk_lock+0x84>
 8010230:	2300      	movs	r3, #0
 8010232:	e010      	b.n	8010256 <chk_lock+0xa6>
 8010234:	2312      	movs	r3, #18
 8010236:	e00e      	b.n	8010256 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d108      	bne.n	8010250 <chk_lock+0xa0>
 801023e:	4a09      	ldr	r2, [pc, #36]	; (8010264 <chk_lock+0xb4>)
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	011b      	lsls	r3, r3, #4
 8010244:	4413      	add	r3, r2
 8010246:	330c      	adds	r3, #12
 8010248:	881b      	ldrh	r3, [r3, #0]
 801024a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801024e:	d101      	bne.n	8010254 <chk_lock+0xa4>
 8010250:	2310      	movs	r3, #16
 8010252:	e000      	b.n	8010256 <chk_lock+0xa6>
 8010254:	2300      	movs	r3, #0
}
 8010256:	4618      	mov	r0, r3
 8010258:	3714      	adds	r7, #20
 801025a:	46bd      	mov	sp, r7
 801025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010260:	4770      	bx	lr
 8010262:	bf00      	nop
 8010264:	2400028c 	.word	0x2400028c

08010268 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010268:	b480      	push	{r7}
 801026a:	b083      	sub	sp, #12
 801026c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801026e:	2300      	movs	r3, #0
 8010270:	607b      	str	r3, [r7, #4]
 8010272:	e002      	b.n	801027a <enq_lock+0x12>
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	3301      	adds	r3, #1
 8010278:	607b      	str	r3, [r7, #4]
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	2b03      	cmp	r3, #3
 801027e:	d806      	bhi.n	801028e <enq_lock+0x26>
 8010280:	4a09      	ldr	r2, [pc, #36]	; (80102a8 <enq_lock+0x40>)
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	011b      	lsls	r3, r3, #4
 8010286:	4413      	add	r3, r2
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d1f2      	bne.n	8010274 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	2b04      	cmp	r3, #4
 8010292:	bf14      	ite	ne
 8010294:	2301      	movne	r3, #1
 8010296:	2300      	moveq	r3, #0
 8010298:	b2db      	uxtb	r3, r3
}
 801029a:	4618      	mov	r0, r3
 801029c:	370c      	adds	r7, #12
 801029e:	46bd      	mov	sp, r7
 80102a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a4:	4770      	bx	lr
 80102a6:	bf00      	nop
 80102a8:	2400028c 	.word	0x2400028c

080102ac <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80102ac:	b480      	push	{r7}
 80102ae:	b085      	sub	sp, #20
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]
 80102b4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80102b6:	2300      	movs	r3, #0
 80102b8:	60fb      	str	r3, [r7, #12]
 80102ba:	e01f      	b.n	80102fc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80102bc:	4a41      	ldr	r2, [pc, #260]	; (80103c4 <inc_lock+0x118>)
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	011b      	lsls	r3, r3, #4
 80102c2:	4413      	add	r3, r2
 80102c4:	681a      	ldr	r2, [r3, #0]
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	429a      	cmp	r2, r3
 80102cc:	d113      	bne.n	80102f6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80102ce:	4a3d      	ldr	r2, [pc, #244]	; (80103c4 <inc_lock+0x118>)
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	011b      	lsls	r3, r3, #4
 80102d4:	4413      	add	r3, r2
 80102d6:	3304      	adds	r3, #4
 80102d8:	681a      	ldr	r2, [r3, #0]
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80102de:	429a      	cmp	r2, r3
 80102e0:	d109      	bne.n	80102f6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80102e2:	4a38      	ldr	r2, [pc, #224]	; (80103c4 <inc_lock+0x118>)
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	011b      	lsls	r3, r3, #4
 80102e8:	4413      	add	r3, r2
 80102ea:	3308      	adds	r3, #8
 80102ec:	681a      	ldr	r2, [r3, #0]
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 80102f2:	429a      	cmp	r2, r3
 80102f4:	d006      	beq.n	8010304 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	3301      	adds	r3, #1
 80102fa:	60fb      	str	r3, [r7, #12]
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	2b03      	cmp	r3, #3
 8010300:	d9dc      	bls.n	80102bc <inc_lock+0x10>
 8010302:	e000      	b.n	8010306 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8010304:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	2b04      	cmp	r3, #4
 801030a:	d132      	bne.n	8010372 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801030c:	2300      	movs	r3, #0
 801030e:	60fb      	str	r3, [r7, #12]
 8010310:	e002      	b.n	8010318 <inc_lock+0x6c>
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	3301      	adds	r3, #1
 8010316:	60fb      	str	r3, [r7, #12]
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	2b03      	cmp	r3, #3
 801031c:	d806      	bhi.n	801032c <inc_lock+0x80>
 801031e:	4a29      	ldr	r2, [pc, #164]	; (80103c4 <inc_lock+0x118>)
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	011b      	lsls	r3, r3, #4
 8010324:	4413      	add	r3, r2
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d1f2      	bne.n	8010312 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	2b04      	cmp	r3, #4
 8010330:	d101      	bne.n	8010336 <inc_lock+0x8a>
 8010332:	2300      	movs	r3, #0
 8010334:	e040      	b.n	80103b8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	681a      	ldr	r2, [r3, #0]
 801033a:	4922      	ldr	r1, [pc, #136]	; (80103c4 <inc_lock+0x118>)
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	011b      	lsls	r3, r3, #4
 8010340:	440b      	add	r3, r1
 8010342:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	689a      	ldr	r2, [r3, #8]
 8010348:	491e      	ldr	r1, [pc, #120]	; (80103c4 <inc_lock+0x118>)
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	011b      	lsls	r3, r3, #4
 801034e:	440b      	add	r3, r1
 8010350:	3304      	adds	r3, #4
 8010352:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010358:	491a      	ldr	r1, [pc, #104]	; (80103c4 <inc_lock+0x118>)
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	011b      	lsls	r3, r3, #4
 801035e:	440b      	add	r3, r1
 8010360:	3308      	adds	r3, #8
 8010362:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8010364:	4a17      	ldr	r2, [pc, #92]	; (80103c4 <inc_lock+0x118>)
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	011b      	lsls	r3, r3, #4
 801036a:	4413      	add	r3, r2
 801036c:	330c      	adds	r3, #12
 801036e:	2200      	movs	r2, #0
 8010370:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010372:	683b      	ldr	r3, [r7, #0]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d009      	beq.n	801038c <inc_lock+0xe0>
 8010378:	4a12      	ldr	r2, [pc, #72]	; (80103c4 <inc_lock+0x118>)
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	011b      	lsls	r3, r3, #4
 801037e:	4413      	add	r3, r2
 8010380:	330c      	adds	r3, #12
 8010382:	881b      	ldrh	r3, [r3, #0]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d001      	beq.n	801038c <inc_lock+0xe0>
 8010388:	2300      	movs	r3, #0
 801038a:	e015      	b.n	80103b8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801038c:	683b      	ldr	r3, [r7, #0]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d108      	bne.n	80103a4 <inc_lock+0xf8>
 8010392:	4a0c      	ldr	r2, [pc, #48]	; (80103c4 <inc_lock+0x118>)
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	011b      	lsls	r3, r3, #4
 8010398:	4413      	add	r3, r2
 801039a:	330c      	adds	r3, #12
 801039c:	881b      	ldrh	r3, [r3, #0]
 801039e:	3301      	adds	r3, #1
 80103a0:	b29a      	uxth	r2, r3
 80103a2:	e001      	b.n	80103a8 <inc_lock+0xfc>
 80103a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80103a8:	4906      	ldr	r1, [pc, #24]	; (80103c4 <inc_lock+0x118>)
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	011b      	lsls	r3, r3, #4
 80103ae:	440b      	add	r3, r1
 80103b0:	330c      	adds	r3, #12
 80103b2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	3301      	adds	r3, #1
}
 80103b8:	4618      	mov	r0, r3
 80103ba:	3714      	adds	r7, #20
 80103bc:	46bd      	mov	sp, r7
 80103be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c2:	4770      	bx	lr
 80103c4:	2400028c 	.word	0x2400028c

080103c8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80103c8:	b480      	push	{r7}
 80103ca:	b085      	sub	sp, #20
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	3b01      	subs	r3, #1
 80103d4:	607b      	str	r3, [r7, #4]
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	2b03      	cmp	r3, #3
 80103da:	d825      	bhi.n	8010428 <dec_lock+0x60>
		n = Files[i].ctr;
 80103dc:	4a17      	ldr	r2, [pc, #92]	; (801043c <dec_lock+0x74>)
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	011b      	lsls	r3, r3, #4
 80103e2:	4413      	add	r3, r2
 80103e4:	330c      	adds	r3, #12
 80103e6:	881b      	ldrh	r3, [r3, #0]
 80103e8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80103ea:	89fb      	ldrh	r3, [r7, #14]
 80103ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80103f0:	d101      	bne.n	80103f6 <dec_lock+0x2e>
 80103f2:	2300      	movs	r3, #0
 80103f4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80103f6:	89fb      	ldrh	r3, [r7, #14]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d002      	beq.n	8010402 <dec_lock+0x3a>
 80103fc:	89fb      	ldrh	r3, [r7, #14]
 80103fe:	3b01      	subs	r3, #1
 8010400:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8010402:	4a0e      	ldr	r2, [pc, #56]	; (801043c <dec_lock+0x74>)
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	011b      	lsls	r3, r3, #4
 8010408:	4413      	add	r3, r2
 801040a:	330c      	adds	r3, #12
 801040c:	89fa      	ldrh	r2, [r7, #14]
 801040e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010410:	89fb      	ldrh	r3, [r7, #14]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d105      	bne.n	8010422 <dec_lock+0x5a>
 8010416:	4a09      	ldr	r2, [pc, #36]	; (801043c <dec_lock+0x74>)
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	011b      	lsls	r3, r3, #4
 801041c:	4413      	add	r3, r2
 801041e:	2200      	movs	r2, #0
 8010420:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8010422:	2300      	movs	r3, #0
 8010424:	737b      	strb	r3, [r7, #13]
 8010426:	e001      	b.n	801042c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8010428:	2302      	movs	r3, #2
 801042a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801042c:	7b7b      	ldrb	r3, [r7, #13]
}
 801042e:	4618      	mov	r0, r3
 8010430:	3714      	adds	r7, #20
 8010432:	46bd      	mov	sp, r7
 8010434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010438:	4770      	bx	lr
 801043a:	bf00      	nop
 801043c:	2400028c 	.word	0x2400028c

08010440 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010440:	b480      	push	{r7}
 8010442:	b085      	sub	sp, #20
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010448:	2300      	movs	r3, #0
 801044a:	60fb      	str	r3, [r7, #12]
 801044c:	e010      	b.n	8010470 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801044e:	4a0d      	ldr	r2, [pc, #52]	; (8010484 <clear_lock+0x44>)
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	011b      	lsls	r3, r3, #4
 8010454:	4413      	add	r3, r2
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	687a      	ldr	r2, [r7, #4]
 801045a:	429a      	cmp	r2, r3
 801045c:	d105      	bne.n	801046a <clear_lock+0x2a>
 801045e:	4a09      	ldr	r2, [pc, #36]	; (8010484 <clear_lock+0x44>)
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	011b      	lsls	r3, r3, #4
 8010464:	4413      	add	r3, r2
 8010466:	2200      	movs	r2, #0
 8010468:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	3301      	adds	r3, #1
 801046e:	60fb      	str	r3, [r7, #12]
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	2b03      	cmp	r3, #3
 8010474:	d9eb      	bls.n	801044e <clear_lock+0xe>
	}
}
 8010476:	bf00      	nop
 8010478:	3714      	adds	r7, #20
 801047a:	46bd      	mov	sp, r7
 801047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010480:	4770      	bx	lr
 8010482:	bf00      	nop
 8010484:	2400028c 	.word	0x2400028c

08010488 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b086      	sub	sp, #24
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010490:	2300      	movs	r3, #0
 8010492:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	78db      	ldrb	r3, [r3, #3]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d034      	beq.n	8010506 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104a0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	7858      	ldrb	r0, [r3, #1]
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80104ac:	2301      	movs	r3, #1
 80104ae:	697a      	ldr	r2, [r7, #20]
 80104b0:	f7ff fbfc 	bl	800fcac <disk_write>
 80104b4:	4603      	mov	r3, r0
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d002      	beq.n	80104c0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80104ba:	2301      	movs	r3, #1
 80104bc:	73fb      	strb	r3, [r7, #15]
 80104be:	e022      	b.n	8010506 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	2200      	movs	r2, #0
 80104c4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104ca:	697a      	ldr	r2, [r7, #20]
 80104cc:	1ad2      	subs	r2, r2, r3
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104d2:	429a      	cmp	r2, r3
 80104d4:	d217      	bcs.n	8010506 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	789b      	ldrb	r3, [r3, #2]
 80104da:	613b      	str	r3, [r7, #16]
 80104dc:	e010      	b.n	8010500 <sync_window+0x78>
					wsect += fs->fsize;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104e2:	697a      	ldr	r2, [r7, #20]
 80104e4:	4413      	add	r3, r2
 80104e6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	7858      	ldrb	r0, [r3, #1]
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80104f2:	2301      	movs	r3, #1
 80104f4:	697a      	ldr	r2, [r7, #20]
 80104f6:	f7ff fbd9 	bl	800fcac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80104fa:	693b      	ldr	r3, [r7, #16]
 80104fc:	3b01      	subs	r3, #1
 80104fe:	613b      	str	r3, [r7, #16]
 8010500:	693b      	ldr	r3, [r7, #16]
 8010502:	2b01      	cmp	r3, #1
 8010504:	d8eb      	bhi.n	80104de <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8010506:	7bfb      	ldrb	r3, [r7, #15]
}
 8010508:	4618      	mov	r0, r3
 801050a:	3718      	adds	r7, #24
 801050c:	46bd      	mov	sp, r7
 801050e:	bd80      	pop	{r7, pc}

08010510 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b084      	sub	sp, #16
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
 8010518:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801051a:	2300      	movs	r3, #0
 801051c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010522:	683a      	ldr	r2, [r7, #0]
 8010524:	429a      	cmp	r2, r3
 8010526:	d01b      	beq.n	8010560 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8010528:	6878      	ldr	r0, [r7, #4]
 801052a:	f7ff ffad 	bl	8010488 <sync_window>
 801052e:	4603      	mov	r3, r0
 8010530:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010532:	7bfb      	ldrb	r3, [r7, #15]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d113      	bne.n	8010560 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	7858      	ldrb	r0, [r3, #1]
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010542:	2301      	movs	r3, #1
 8010544:	683a      	ldr	r2, [r7, #0]
 8010546:	f7ff fb91 	bl	800fc6c <disk_read>
 801054a:	4603      	mov	r3, r0
 801054c:	2b00      	cmp	r3, #0
 801054e:	d004      	beq.n	801055a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010550:	f04f 33ff 	mov.w	r3, #4294967295
 8010554:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010556:	2301      	movs	r3, #1
 8010558:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	683a      	ldr	r2, [r7, #0]
 801055e:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 8010560:	7bfb      	ldrb	r3, [r7, #15]
}
 8010562:	4618      	mov	r0, r3
 8010564:	3710      	adds	r7, #16
 8010566:	46bd      	mov	sp, r7
 8010568:	bd80      	pop	{r7, pc}
	...

0801056c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801056c:	b580      	push	{r7, lr}
 801056e:	b084      	sub	sp, #16
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010574:	6878      	ldr	r0, [r7, #4]
 8010576:	f7ff ff87 	bl	8010488 <sync_window>
 801057a:	4603      	mov	r3, r0
 801057c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801057e:	7bfb      	ldrb	r3, [r7, #15]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d159      	bne.n	8010638 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	781b      	ldrb	r3, [r3, #0]
 8010588:	2b03      	cmp	r3, #3
 801058a:	d149      	bne.n	8010620 <sync_fs+0xb4>
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	791b      	ldrb	r3, [r3, #4]
 8010590:	2b01      	cmp	r3, #1
 8010592:	d145      	bne.n	8010620 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	899b      	ldrh	r3, [r3, #12]
 801059e:	461a      	mov	r2, r3
 80105a0:	2100      	movs	r1, #0
 80105a2:	f7ff fda8 	bl	80100f6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	333c      	adds	r3, #60	; 0x3c
 80105aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80105ae:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80105b2:	4618      	mov	r0, r3
 80105b4:	f7ff fcb0 	bl	800ff18 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	333c      	adds	r3, #60	; 0x3c
 80105bc:	4921      	ldr	r1, [pc, #132]	; (8010644 <sync_fs+0xd8>)
 80105be:	4618      	mov	r0, r3
 80105c0:	f7ff fcc5 	bl	800ff4e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	333c      	adds	r3, #60	; 0x3c
 80105c8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80105cc:	491e      	ldr	r1, [pc, #120]	; (8010648 <sync_fs+0xdc>)
 80105ce:	4618      	mov	r0, r3
 80105d0:	f7ff fcbd 	bl	800ff4e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	333c      	adds	r3, #60	; 0x3c
 80105d8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	69db      	ldr	r3, [r3, #28]
 80105e0:	4619      	mov	r1, r3
 80105e2:	4610      	mov	r0, r2
 80105e4:	f7ff fcb3 	bl	800ff4e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	333c      	adds	r3, #60	; 0x3c
 80105ec:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	699b      	ldr	r3, [r3, #24]
 80105f4:	4619      	mov	r1, r3
 80105f6:	4610      	mov	r0, r2
 80105f8:	f7ff fca9 	bl	800ff4e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010600:	1c5a      	adds	r2, r3, #1
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	7858      	ldrb	r0, [r3, #1]
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010614:	2301      	movs	r3, #1
 8010616:	f7ff fb49 	bl	800fcac <disk_write>
			fs->fsi_flag = 0;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	2200      	movs	r2, #0
 801061e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	785b      	ldrb	r3, [r3, #1]
 8010624:	2200      	movs	r2, #0
 8010626:	2100      	movs	r1, #0
 8010628:	4618      	mov	r0, r3
 801062a:	f7ff fb5f 	bl	800fcec <disk_ioctl>
 801062e:	4603      	mov	r3, r0
 8010630:	2b00      	cmp	r3, #0
 8010632:	d001      	beq.n	8010638 <sync_fs+0xcc>
 8010634:	2301      	movs	r3, #1
 8010636:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010638:	7bfb      	ldrb	r3, [r7, #15]
}
 801063a:	4618      	mov	r0, r3
 801063c:	3710      	adds	r7, #16
 801063e:	46bd      	mov	sp, r7
 8010640:	bd80      	pop	{r7, pc}
 8010642:	bf00      	nop
 8010644:	41615252 	.word	0x41615252
 8010648:	61417272 	.word	0x61417272

0801064c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801064c:	b480      	push	{r7}
 801064e:	b083      	sub	sp, #12
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
 8010654:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010656:	683b      	ldr	r3, [r7, #0]
 8010658:	3b02      	subs	r3, #2
 801065a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	6a1b      	ldr	r3, [r3, #32]
 8010660:	3b02      	subs	r3, #2
 8010662:	683a      	ldr	r2, [r7, #0]
 8010664:	429a      	cmp	r2, r3
 8010666:	d301      	bcc.n	801066c <clust2sect+0x20>
 8010668:	2300      	movs	r3, #0
 801066a:	e008      	b.n	801067e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	895b      	ldrh	r3, [r3, #10]
 8010670:	461a      	mov	r2, r3
 8010672:	683b      	ldr	r3, [r7, #0]
 8010674:	fb03 f202 	mul.w	r2, r3, r2
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801067c:	4413      	add	r3, r2
}
 801067e:	4618      	mov	r0, r3
 8010680:	370c      	adds	r7, #12
 8010682:	46bd      	mov	sp, r7
 8010684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010688:	4770      	bx	lr
	...

0801068c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801068c:	b590      	push	{r4, r7, lr}
 801068e:	b089      	sub	sp, #36	; 0x24
 8010690:	af00      	add	r7, sp, #0
 8010692:	6078      	str	r0, [r7, #4]
 8010694:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801069c:	683b      	ldr	r3, [r7, #0]
 801069e:	2b01      	cmp	r3, #1
 80106a0:	d904      	bls.n	80106ac <get_fat+0x20>
 80106a2:	69bb      	ldr	r3, [r7, #24]
 80106a4:	6a1b      	ldr	r3, [r3, #32]
 80106a6:	683a      	ldr	r2, [r7, #0]
 80106a8:	429a      	cmp	r2, r3
 80106aa:	d302      	bcc.n	80106b2 <get_fat+0x26>
		val = 1;	/* Internal error */
 80106ac:	2301      	movs	r3, #1
 80106ae:	61fb      	str	r3, [r7, #28]
 80106b0:	e13a      	b.n	8010928 <get_fat+0x29c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80106b2:	f04f 33ff 	mov.w	r3, #4294967295
 80106b6:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 80106b8:	69bb      	ldr	r3, [r7, #24]
 80106ba:	781b      	ldrb	r3, [r3, #0]
 80106bc:	3b01      	subs	r3, #1
 80106be:	2b03      	cmp	r3, #3
 80106c0:	f200 8126 	bhi.w	8010910 <get_fat+0x284>
 80106c4:	a201      	add	r2, pc, #4	; (adr r2, 80106cc <get_fat+0x40>)
 80106c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106ca:	bf00      	nop
 80106cc:	080106dd 	.word	0x080106dd
 80106d0:	0801078b 	.word	0x0801078b
 80106d4:	080107d7 	.word	0x080107d7
 80106d8:	08010827 	.word	0x08010827
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80106dc:	683b      	ldr	r3, [r7, #0]
 80106de:	60fb      	str	r3, [r7, #12]
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	085b      	lsrs	r3, r3, #1
 80106e4:	68fa      	ldr	r2, [r7, #12]
 80106e6:	4413      	add	r3, r2
 80106e8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80106ea:	69bb      	ldr	r3, [r7, #24]
 80106ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106ee:	69bb      	ldr	r3, [r7, #24]
 80106f0:	899b      	ldrh	r3, [r3, #12]
 80106f2:	4619      	mov	r1, r3
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80106fa:	4413      	add	r3, r2
 80106fc:	4619      	mov	r1, r3
 80106fe:	69b8      	ldr	r0, [r7, #24]
 8010700:	f7ff ff06 	bl	8010510 <move_window>
 8010704:	4603      	mov	r3, r0
 8010706:	2b00      	cmp	r3, #0
 8010708:	f040 8105 	bne.w	8010916 <get_fat+0x28a>
			wc = fs->win[bc++ % SS(fs)];
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	1c5a      	adds	r2, r3, #1
 8010710:	60fa      	str	r2, [r7, #12]
 8010712:	69ba      	ldr	r2, [r7, #24]
 8010714:	8992      	ldrh	r2, [r2, #12]
 8010716:	fbb3 f1f2 	udiv	r1, r3, r2
 801071a:	fb02 f201 	mul.w	r2, r2, r1
 801071e:	1a9b      	subs	r3, r3, r2
 8010720:	69ba      	ldr	r2, [r7, #24]
 8010722:	4413      	add	r3, r2
 8010724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010728:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801072a:	69bb      	ldr	r3, [r7, #24]
 801072c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801072e:	69bb      	ldr	r3, [r7, #24]
 8010730:	899b      	ldrh	r3, [r3, #12]
 8010732:	4619      	mov	r1, r3
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	fbb3 f3f1 	udiv	r3, r3, r1
 801073a:	4413      	add	r3, r2
 801073c:	4619      	mov	r1, r3
 801073e:	69b8      	ldr	r0, [r7, #24]
 8010740:	f7ff fee6 	bl	8010510 <move_window>
 8010744:	4603      	mov	r3, r0
 8010746:	2b00      	cmp	r3, #0
 8010748:	f040 80e7 	bne.w	801091a <get_fat+0x28e>
			wc |= fs->win[bc % SS(fs)] << 8;
 801074c:	69bb      	ldr	r3, [r7, #24]
 801074e:	899b      	ldrh	r3, [r3, #12]
 8010750:	461a      	mov	r2, r3
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	fbb3 f1f2 	udiv	r1, r3, r2
 8010758:	fb02 f201 	mul.w	r2, r2, r1
 801075c:	1a9b      	subs	r3, r3, r2
 801075e:	69ba      	ldr	r2, [r7, #24]
 8010760:	4413      	add	r3, r2
 8010762:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010766:	021b      	lsls	r3, r3, #8
 8010768:	461a      	mov	r2, r3
 801076a:	68bb      	ldr	r3, [r7, #8]
 801076c:	4313      	orrs	r3, r2
 801076e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010770:	683b      	ldr	r3, [r7, #0]
 8010772:	f003 0301 	and.w	r3, r3, #1
 8010776:	2b00      	cmp	r3, #0
 8010778:	d002      	beq.n	8010780 <get_fat+0xf4>
 801077a:	68bb      	ldr	r3, [r7, #8]
 801077c:	091b      	lsrs	r3, r3, #4
 801077e:	e002      	b.n	8010786 <get_fat+0xfa>
 8010780:	68bb      	ldr	r3, [r7, #8]
 8010782:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010786:	61fb      	str	r3, [r7, #28]
			break;
 8010788:	e0ce      	b.n	8010928 <get_fat+0x29c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801078a:	69bb      	ldr	r3, [r7, #24]
 801078c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801078e:	69bb      	ldr	r3, [r7, #24]
 8010790:	899b      	ldrh	r3, [r3, #12]
 8010792:	085b      	lsrs	r3, r3, #1
 8010794:	b29b      	uxth	r3, r3
 8010796:	4619      	mov	r1, r3
 8010798:	683b      	ldr	r3, [r7, #0]
 801079a:	fbb3 f3f1 	udiv	r3, r3, r1
 801079e:	4413      	add	r3, r2
 80107a0:	4619      	mov	r1, r3
 80107a2:	69b8      	ldr	r0, [r7, #24]
 80107a4:	f7ff feb4 	bl	8010510 <move_window>
 80107a8:	4603      	mov	r3, r0
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	f040 80b7 	bne.w	801091e <get_fat+0x292>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80107b0:	69bb      	ldr	r3, [r7, #24]
 80107b2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80107b6:	683b      	ldr	r3, [r7, #0]
 80107b8:	005b      	lsls	r3, r3, #1
 80107ba:	69ba      	ldr	r2, [r7, #24]
 80107bc:	8992      	ldrh	r2, [r2, #12]
 80107be:	fbb3 f0f2 	udiv	r0, r3, r2
 80107c2:	fb02 f200 	mul.w	r2, r2, r0
 80107c6:	1a9b      	subs	r3, r3, r2
 80107c8:	440b      	add	r3, r1
 80107ca:	4618      	mov	r0, r3
 80107cc:	f7ff faac 	bl	800fd28 <ld_word>
 80107d0:	4603      	mov	r3, r0
 80107d2:	61fb      	str	r3, [r7, #28]
			break;
 80107d4:	e0a8      	b.n	8010928 <get_fat+0x29c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80107d6:	69bb      	ldr	r3, [r7, #24]
 80107d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107da:	69bb      	ldr	r3, [r7, #24]
 80107dc:	899b      	ldrh	r3, [r3, #12]
 80107de:	089b      	lsrs	r3, r3, #2
 80107e0:	b29b      	uxth	r3, r3
 80107e2:	4619      	mov	r1, r3
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80107ea:	4413      	add	r3, r2
 80107ec:	4619      	mov	r1, r3
 80107ee:	69b8      	ldr	r0, [r7, #24]
 80107f0:	f7ff fe8e 	bl	8010510 <move_window>
 80107f4:	4603      	mov	r3, r0
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	f040 8093 	bne.w	8010922 <get_fat+0x296>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80107fc:	69bb      	ldr	r3, [r7, #24]
 80107fe:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010802:	683b      	ldr	r3, [r7, #0]
 8010804:	009b      	lsls	r3, r3, #2
 8010806:	69ba      	ldr	r2, [r7, #24]
 8010808:	8992      	ldrh	r2, [r2, #12]
 801080a:	fbb3 f0f2 	udiv	r0, r3, r2
 801080e:	fb02 f200 	mul.w	r2, r2, r0
 8010812:	1a9b      	subs	r3, r3, r2
 8010814:	440b      	add	r3, r1
 8010816:	4618      	mov	r0, r3
 8010818:	f7ff fa9e 	bl	800fd58 <ld_dword>
 801081c:	4603      	mov	r3, r0
 801081e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010822:	61fb      	str	r3, [r7, #28]
			break;
 8010824:	e080      	b.n	8010928 <get_fat+0x29c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 801082c:	4323      	orrs	r3, r4
 801082e:	d06f      	beq.n	8010910 <get_fat+0x284>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	689b      	ldr	r3, [r3, #8]
 8010834:	683a      	ldr	r2, [r7, #0]
 8010836:	1ad3      	subs	r3, r2, r3
 8010838:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8010840:	f113 30ff 	adds.w	r0, r3, #4294967295
 8010844:	f144 31ff 	adc.w	r1, r4, #4294967295
 8010848:	69bb      	ldr	r3, [r7, #24]
 801084a:	899b      	ldrh	r3, [r3, #12]
 801084c:	b29b      	uxth	r3, r3
 801084e:	f04f 0400 	mov.w	r4, #0
 8010852:	461a      	mov	r2, r3
 8010854:	4623      	mov	r3, r4
 8010856:	f7ef fd3f 	bl	80002d8 <__aeabi_uldivmod>
 801085a:	4603      	mov	r3, r0
 801085c:	460c      	mov	r4, r1
 801085e:	461a      	mov	r2, r3
 8010860:	69bb      	ldr	r3, [r7, #24]
 8010862:	895b      	ldrh	r3, [r3, #10]
 8010864:	fbb2 f3f3 	udiv	r3, r2, r3
 8010868:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	79db      	ldrb	r3, [r3, #7]
 801086e:	2b02      	cmp	r3, #2
 8010870:	d10e      	bne.n	8010890 <get_fat+0x204>
					if (cofs <= clen) {
 8010872:	697a      	ldr	r2, [r7, #20]
 8010874:	693b      	ldr	r3, [r7, #16]
 8010876:	429a      	cmp	r2, r3
 8010878:	d80a      	bhi.n	8010890 <get_fat+0x204>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 801087a:	697a      	ldr	r2, [r7, #20]
 801087c:	693b      	ldr	r3, [r7, #16]
 801087e:	429a      	cmp	r2, r3
 8010880:	d002      	beq.n	8010888 <get_fat+0x1fc>
 8010882:	683b      	ldr	r3, [r7, #0]
 8010884:	3301      	adds	r3, #1
 8010886:	e001      	b.n	801088c <get_fat+0x200>
 8010888:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801088c:	61fb      	str	r3, [r7, #28]
						break;
 801088e:	e04b      	b.n	8010928 <get_fat+0x29c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	79db      	ldrb	r3, [r3, #7]
 8010894:	2b03      	cmp	r3, #3
 8010896:	d108      	bne.n	80108aa <get_fat+0x21e>
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	699b      	ldr	r3, [r3, #24]
 801089c:	697a      	ldr	r2, [r7, #20]
 801089e:	429a      	cmp	r2, r3
 80108a0:	d203      	bcs.n	80108aa <get_fat+0x21e>
					val = clst + 1; 	/* Generate the value */
 80108a2:	683b      	ldr	r3, [r7, #0]
 80108a4:	3301      	adds	r3, #1
 80108a6:	61fb      	str	r3, [r7, #28]
					break;
 80108a8:	e03e      	b.n	8010928 <get_fat+0x29c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	79db      	ldrb	r3, [r3, #7]
 80108ae:	2b02      	cmp	r3, #2
 80108b0:	d02e      	beq.n	8010910 <get_fat+0x284>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	69db      	ldr	r3, [r3, #28]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d003      	beq.n	80108c2 <get_fat+0x236>
						val = 0x7FFFFFFF;	/* Generate EOC */
 80108ba:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80108be:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 80108c0:	e032      	b.n	8010928 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80108c2:	69bb      	ldr	r3, [r7, #24]
 80108c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108c6:	69bb      	ldr	r3, [r7, #24]
 80108c8:	899b      	ldrh	r3, [r3, #12]
 80108ca:	089b      	lsrs	r3, r3, #2
 80108cc:	b29b      	uxth	r3, r3
 80108ce:	4619      	mov	r1, r3
 80108d0:	683b      	ldr	r3, [r7, #0]
 80108d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80108d6:	4413      	add	r3, r2
 80108d8:	4619      	mov	r1, r3
 80108da:	69b8      	ldr	r0, [r7, #24]
 80108dc:	f7ff fe18 	bl	8010510 <move_window>
 80108e0:	4603      	mov	r3, r0
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d11f      	bne.n	8010926 <get_fat+0x29a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 80108e6:	69bb      	ldr	r3, [r7, #24]
 80108e8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80108ec:	683b      	ldr	r3, [r7, #0]
 80108ee:	009b      	lsls	r3, r3, #2
 80108f0:	69ba      	ldr	r2, [r7, #24]
 80108f2:	8992      	ldrh	r2, [r2, #12]
 80108f4:	fbb3 f0f2 	udiv	r0, r3, r2
 80108f8:	fb02 f200 	mul.w	r2, r2, r0
 80108fc:	1a9b      	subs	r3, r3, r2
 80108fe:	440b      	add	r3, r1
 8010900:	4618      	mov	r0, r3
 8010902:	f7ff fa29 	bl	800fd58 <ld_dword>
 8010906:	4603      	mov	r3, r0
 8010908:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801090c:	61fb      	str	r3, [r7, #28]
					break;
 801090e:	e00b      	b.n	8010928 <get_fat+0x29c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010910:	2301      	movs	r3, #1
 8010912:	61fb      	str	r3, [r7, #28]
 8010914:	e008      	b.n	8010928 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010916:	bf00      	nop
 8010918:	e006      	b.n	8010928 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801091a:	bf00      	nop
 801091c:	e004      	b.n	8010928 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801091e:	bf00      	nop
 8010920:	e002      	b.n	8010928 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010922:	bf00      	nop
 8010924:	e000      	b.n	8010928 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010926:	bf00      	nop
		}
	}

	return val;
 8010928:	69fb      	ldr	r3, [r7, #28]
}
 801092a:	4618      	mov	r0, r3
 801092c:	3724      	adds	r7, #36	; 0x24
 801092e:	46bd      	mov	sp, r7
 8010930:	bd90      	pop	{r4, r7, pc}
 8010932:	bf00      	nop

08010934 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010934:	b590      	push	{r4, r7, lr}
 8010936:	b089      	sub	sp, #36	; 0x24
 8010938:	af00      	add	r7, sp, #0
 801093a:	60f8      	str	r0, [r7, #12]
 801093c:	60b9      	str	r1, [r7, #8]
 801093e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010940:	2302      	movs	r3, #2
 8010942:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010944:	68bb      	ldr	r3, [r7, #8]
 8010946:	2b01      	cmp	r3, #1
 8010948:	f240 8111 	bls.w	8010b6e <put_fat+0x23a>
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	6a1b      	ldr	r3, [r3, #32]
 8010950:	68ba      	ldr	r2, [r7, #8]
 8010952:	429a      	cmp	r2, r3
 8010954:	f080 810b 	bcs.w	8010b6e <put_fat+0x23a>
		switch (fs->fs_type) {
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	781b      	ldrb	r3, [r3, #0]
 801095c:	3b01      	subs	r3, #1
 801095e:	2b03      	cmp	r3, #3
 8010960:	f200 8105 	bhi.w	8010b6e <put_fat+0x23a>
 8010964:	a201      	add	r2, pc, #4	; (adr r2, 801096c <put_fat+0x38>)
 8010966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801096a:	bf00      	nop
 801096c:	0801097d 	.word	0x0801097d
 8010970:	08010a81 	.word	0x08010a81
 8010974:	08010ad7 	.word	0x08010ad7
 8010978:	08010ad7 	.word	0x08010ad7
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801097c:	68bb      	ldr	r3, [r7, #8]
 801097e:	61bb      	str	r3, [r7, #24]
 8010980:	69bb      	ldr	r3, [r7, #24]
 8010982:	085b      	lsrs	r3, r3, #1
 8010984:	69ba      	ldr	r2, [r7, #24]
 8010986:	4413      	add	r3, r2
 8010988:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	899b      	ldrh	r3, [r3, #12]
 8010992:	4619      	mov	r1, r3
 8010994:	69bb      	ldr	r3, [r7, #24]
 8010996:	fbb3 f3f1 	udiv	r3, r3, r1
 801099a:	4413      	add	r3, r2
 801099c:	4619      	mov	r1, r3
 801099e:	68f8      	ldr	r0, [r7, #12]
 80109a0:	f7ff fdb6 	bl	8010510 <move_window>
 80109a4:	4603      	mov	r3, r0
 80109a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80109a8:	7ffb      	ldrb	r3, [r7, #31]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	f040 80d8 	bne.w	8010b60 <put_fat+0x22c>
			p = fs->win + bc++ % SS(fs);
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80109b6:	69bb      	ldr	r3, [r7, #24]
 80109b8:	1c5a      	adds	r2, r3, #1
 80109ba:	61ba      	str	r2, [r7, #24]
 80109bc:	68fa      	ldr	r2, [r7, #12]
 80109be:	8992      	ldrh	r2, [r2, #12]
 80109c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80109c4:	fb02 f200 	mul.w	r2, r2, r0
 80109c8:	1a9b      	subs	r3, r3, r2
 80109ca:	440b      	add	r3, r1
 80109cc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80109ce:	68bb      	ldr	r3, [r7, #8]
 80109d0:	f003 0301 	and.w	r3, r3, #1
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d00d      	beq.n	80109f4 <put_fat+0xc0>
 80109d8:	697b      	ldr	r3, [r7, #20]
 80109da:	781b      	ldrb	r3, [r3, #0]
 80109dc:	b25b      	sxtb	r3, r3
 80109de:	f003 030f 	and.w	r3, r3, #15
 80109e2:	b25a      	sxtb	r2, r3
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	b2db      	uxtb	r3, r3
 80109e8:	011b      	lsls	r3, r3, #4
 80109ea:	b25b      	sxtb	r3, r3
 80109ec:	4313      	orrs	r3, r2
 80109ee:	b25b      	sxtb	r3, r3
 80109f0:	b2db      	uxtb	r3, r3
 80109f2:	e001      	b.n	80109f8 <put_fat+0xc4>
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	b2db      	uxtb	r3, r3
 80109f8:	697a      	ldr	r2, [r7, #20]
 80109fa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	2201      	movs	r2, #1
 8010a00:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	899b      	ldrh	r3, [r3, #12]
 8010a0a:	4619      	mov	r1, r3
 8010a0c:	69bb      	ldr	r3, [r7, #24]
 8010a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010a12:	4413      	add	r3, r2
 8010a14:	4619      	mov	r1, r3
 8010a16:	68f8      	ldr	r0, [r7, #12]
 8010a18:	f7ff fd7a 	bl	8010510 <move_window>
 8010a1c:	4603      	mov	r3, r0
 8010a1e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010a20:	7ffb      	ldrb	r3, [r7, #31]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	f040 809e 	bne.w	8010b64 <put_fat+0x230>
			p = fs->win + bc % SS(fs);
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	899b      	ldrh	r3, [r3, #12]
 8010a32:	461a      	mov	r2, r3
 8010a34:	69bb      	ldr	r3, [r7, #24]
 8010a36:	fbb3 f0f2 	udiv	r0, r3, r2
 8010a3a:	fb02 f200 	mul.w	r2, r2, r0
 8010a3e:	1a9b      	subs	r3, r3, r2
 8010a40:	440b      	add	r3, r1
 8010a42:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010a44:	68bb      	ldr	r3, [r7, #8]
 8010a46:	f003 0301 	and.w	r3, r3, #1
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d003      	beq.n	8010a56 <put_fat+0x122>
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	091b      	lsrs	r3, r3, #4
 8010a52:	b2db      	uxtb	r3, r3
 8010a54:	e00e      	b.n	8010a74 <put_fat+0x140>
 8010a56:	697b      	ldr	r3, [r7, #20]
 8010a58:	781b      	ldrb	r3, [r3, #0]
 8010a5a:	b25b      	sxtb	r3, r3
 8010a5c:	f023 030f 	bic.w	r3, r3, #15
 8010a60:	b25a      	sxtb	r2, r3
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	0a1b      	lsrs	r3, r3, #8
 8010a66:	b25b      	sxtb	r3, r3
 8010a68:	f003 030f 	and.w	r3, r3, #15
 8010a6c:	b25b      	sxtb	r3, r3
 8010a6e:	4313      	orrs	r3, r2
 8010a70:	b25b      	sxtb	r3, r3
 8010a72:	b2db      	uxtb	r3, r3
 8010a74:	697a      	ldr	r2, [r7, #20]
 8010a76:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	2201      	movs	r2, #1
 8010a7c:	70da      	strb	r2, [r3, #3]
			break;
 8010a7e:	e076      	b.n	8010b6e <put_fat+0x23a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	899b      	ldrh	r3, [r3, #12]
 8010a88:	085b      	lsrs	r3, r3, #1
 8010a8a:	b29b      	uxth	r3, r3
 8010a8c:	4619      	mov	r1, r3
 8010a8e:	68bb      	ldr	r3, [r7, #8]
 8010a90:	fbb3 f3f1 	udiv	r3, r3, r1
 8010a94:	4413      	add	r3, r2
 8010a96:	4619      	mov	r1, r3
 8010a98:	68f8      	ldr	r0, [r7, #12]
 8010a9a:	f7ff fd39 	bl	8010510 <move_window>
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010aa2:	7ffb      	ldrb	r3, [r7, #31]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d15f      	bne.n	8010b68 <put_fat+0x234>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010aae:	68bb      	ldr	r3, [r7, #8]
 8010ab0:	005b      	lsls	r3, r3, #1
 8010ab2:	68fa      	ldr	r2, [r7, #12]
 8010ab4:	8992      	ldrh	r2, [r2, #12]
 8010ab6:	fbb3 f0f2 	udiv	r0, r3, r2
 8010aba:	fb02 f200 	mul.w	r2, r2, r0
 8010abe:	1a9b      	subs	r3, r3, r2
 8010ac0:	440b      	add	r3, r1
 8010ac2:	687a      	ldr	r2, [r7, #4]
 8010ac4:	b292      	uxth	r2, r2
 8010ac6:	4611      	mov	r1, r2
 8010ac8:	4618      	mov	r0, r3
 8010aca:	f7ff fa25 	bl	800ff18 <st_word>
			fs->wflag = 1;
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	2201      	movs	r2, #1
 8010ad2:	70da      	strb	r2, [r3, #3]
			break;
 8010ad4:	e04b      	b.n	8010b6e <put_fat+0x23a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	899b      	ldrh	r3, [r3, #12]
 8010ade:	089b      	lsrs	r3, r3, #2
 8010ae0:	b29b      	uxth	r3, r3
 8010ae2:	4619      	mov	r1, r3
 8010ae4:	68bb      	ldr	r3, [r7, #8]
 8010ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8010aea:	4413      	add	r3, r2
 8010aec:	4619      	mov	r1, r3
 8010aee:	68f8      	ldr	r0, [r7, #12]
 8010af0:	f7ff fd0e 	bl	8010510 <move_window>
 8010af4:	4603      	mov	r3, r0
 8010af6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010af8:	7ffb      	ldrb	r3, [r7, #31]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d136      	bne.n	8010b6c <put_fat+0x238>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	781b      	ldrb	r3, [r3, #0]
 8010b02:	2b04      	cmp	r3, #4
 8010b04:	d017      	beq.n	8010b36 <put_fat+0x202>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010b12:	68bb      	ldr	r3, [r7, #8]
 8010b14:	009b      	lsls	r3, r3, #2
 8010b16:	68fa      	ldr	r2, [r7, #12]
 8010b18:	8992      	ldrh	r2, [r2, #12]
 8010b1a:	fbb3 f0f2 	udiv	r0, r3, r2
 8010b1e:	fb02 f200 	mul.w	r2, r2, r0
 8010b22:	1a9b      	subs	r3, r3, r2
 8010b24:	440b      	add	r3, r1
 8010b26:	4618      	mov	r0, r3
 8010b28:	f7ff f916 	bl	800fd58 <ld_dword>
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010b32:	4323      	orrs	r3, r4
 8010b34:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010b3c:	68bb      	ldr	r3, [r7, #8]
 8010b3e:	009b      	lsls	r3, r3, #2
 8010b40:	68fa      	ldr	r2, [r7, #12]
 8010b42:	8992      	ldrh	r2, [r2, #12]
 8010b44:	fbb3 f0f2 	udiv	r0, r3, r2
 8010b48:	fb02 f200 	mul.w	r2, r2, r0
 8010b4c:	1a9b      	subs	r3, r3, r2
 8010b4e:	440b      	add	r3, r1
 8010b50:	6879      	ldr	r1, [r7, #4]
 8010b52:	4618      	mov	r0, r3
 8010b54:	f7ff f9fb 	bl	800ff4e <st_dword>
			fs->wflag = 1;
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	2201      	movs	r2, #1
 8010b5c:	70da      	strb	r2, [r3, #3]
			break;
 8010b5e:	e006      	b.n	8010b6e <put_fat+0x23a>
			if (res != FR_OK) break;
 8010b60:	bf00      	nop
 8010b62:	e004      	b.n	8010b6e <put_fat+0x23a>
			if (res != FR_OK) break;
 8010b64:	bf00      	nop
 8010b66:	e002      	b.n	8010b6e <put_fat+0x23a>
			if (res != FR_OK) break;
 8010b68:	bf00      	nop
 8010b6a:	e000      	b.n	8010b6e <put_fat+0x23a>
			if (res != FR_OK) break;
 8010b6c:	bf00      	nop
		}
	}
	return res;
 8010b6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8010b70:	4618      	mov	r0, r3
 8010b72:	3724      	adds	r7, #36	; 0x24
 8010b74:	46bd      	mov	sp, r7
 8010b76:	bd90      	pop	{r4, r7, pc}

08010b78 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b08a      	sub	sp, #40	; 0x28
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	60f8      	str	r0, [r7, #12]
 8010b80:	60b9      	str	r1, [r7, #8]
 8010b82:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	3b02      	subs	r3, #2
 8010b88:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	6a1b      	ldr	r3, [r3, #32]
 8010b8e:	3b02      	subs	r3, #2
 8010b90:	68ba      	ldr	r2, [r7, #8]
 8010b92:	429a      	cmp	r2, r3
 8010b94:	d301      	bcc.n	8010b9a <find_bitmap+0x22>
 8010b96:	2300      	movs	r3, #0
 8010b98:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 8010b9a:	68bb      	ldr	r3, [r7, #8]
 8010b9c:	61fb      	str	r3, [r7, #28]
 8010b9e:	69fb      	ldr	r3, [r7, #28]
 8010ba0:	61bb      	str	r3, [r7, #24]
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010baa:	69fb      	ldr	r3, [r7, #28]
 8010bac:	08db      	lsrs	r3, r3, #3
 8010bae:	68f9      	ldr	r1, [r7, #12]
 8010bb0:	8989      	ldrh	r1, [r1, #12]
 8010bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8010bb6:	4413      	add	r3, r2
 8010bb8:	4619      	mov	r1, r3
 8010bba:	68f8      	ldr	r0, [r7, #12]
 8010bbc:	f7ff fca8 	bl	8010510 <move_window>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d002      	beq.n	8010bcc <find_bitmap+0x54>
 8010bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8010bca:	e058      	b.n	8010c7e <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8010bcc:	69fb      	ldr	r3, [r7, #28]
 8010bce:	08db      	lsrs	r3, r3, #3
 8010bd0:	68fa      	ldr	r2, [r7, #12]
 8010bd2:	8992      	ldrh	r2, [r2, #12]
 8010bd4:	fbb3 f1f2 	udiv	r1, r3, r2
 8010bd8:	fb02 f201 	mul.w	r2, r2, r1
 8010bdc:	1a9b      	subs	r3, r3, r2
 8010bde:	623b      	str	r3, [r7, #32]
 8010be0:	69fb      	ldr	r3, [r7, #28]
 8010be2:	f003 0307 	and.w	r3, r3, #7
 8010be6:	2201      	movs	r2, #1
 8010be8:	fa02 f303 	lsl.w	r3, r2, r3
 8010bec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8010bf0:	68fa      	ldr	r2, [r7, #12]
 8010bf2:	6a3b      	ldr	r3, [r7, #32]
 8010bf4:	4413      	add	r3, r2
 8010bf6:	333c      	adds	r3, #60	; 0x3c
 8010bf8:	781a      	ldrb	r2, [r3, #0]
 8010bfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010bfe:	4013      	ands	r3, r2
 8010c00:	74fb      	strb	r3, [r7, #19]
 8010c02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010c06:	005b      	lsls	r3, r3, #1
 8010c08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8010c0c:	69fb      	ldr	r3, [r7, #28]
 8010c0e:	3301      	adds	r3, #1
 8010c10:	61fb      	str	r3, [r7, #28]
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	6a1b      	ldr	r3, [r3, #32]
 8010c16:	3b02      	subs	r3, #2
 8010c18:	69fa      	ldr	r2, [r7, #28]
 8010c1a:	429a      	cmp	r2, r3
 8010c1c:	d307      	bcc.n	8010c2e <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 8010c1e:	2300      	movs	r3, #0
 8010c20:	61fb      	str	r3, [r7, #28]
 8010c22:	2300      	movs	r3, #0
 8010c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	899b      	ldrh	r3, [r3, #12]
 8010c2c:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 8010c2e:	7cfb      	ldrb	r3, [r7, #19]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d109      	bne.n	8010c48 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8010c34:	697b      	ldr	r3, [r7, #20]
 8010c36:	3301      	adds	r3, #1
 8010c38:	617b      	str	r3, [r7, #20]
 8010c3a:	697a      	ldr	r2, [r7, #20]
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	429a      	cmp	r2, r3
 8010c40:	d106      	bne.n	8010c50 <find_bitmap+0xd8>
 8010c42:	69bb      	ldr	r3, [r7, #24]
 8010c44:	3302      	adds	r3, #2
 8010c46:	e01a      	b.n	8010c7e <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8010c48:	69fb      	ldr	r3, [r7, #28]
 8010c4a:	61bb      	str	r3, [r7, #24]
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 8010c50:	69fa      	ldr	r2, [r7, #28]
 8010c52:	68bb      	ldr	r3, [r7, #8]
 8010c54:	429a      	cmp	r2, r3
 8010c56:	d101      	bne.n	8010c5c <find_bitmap+0xe4>
 8010c58:	2300      	movs	r3, #0
 8010c5a:	e010      	b.n	8010c7e <find_bitmap+0x106>
			} while (bm);
 8010c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d1c5      	bne.n	8010bf0 <find_bitmap+0x78>
			bm = 1;
 8010c64:	2301      	movs	r3, #1
 8010c66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 8010c6a:	6a3b      	ldr	r3, [r7, #32]
 8010c6c:	3301      	adds	r3, #1
 8010c6e:	623b      	str	r3, [r7, #32]
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	899b      	ldrh	r3, [r3, #12]
 8010c74:	461a      	mov	r2, r3
 8010c76:	6a3b      	ldr	r3, [r7, #32]
 8010c78:	4293      	cmp	r3, r2
 8010c7a:	d3b9      	bcc.n	8010bf0 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8010c7c:	e793      	b.n	8010ba6 <find_bitmap+0x2e>
	}
}
 8010c7e:	4618      	mov	r0, r3
 8010c80:	3728      	adds	r7, #40	; 0x28
 8010c82:	46bd      	mov	sp, r7
 8010c84:	bd80      	pop	{r7, pc}

08010c86 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8010c86:	b580      	push	{r7, lr}
 8010c88:	b088      	sub	sp, #32
 8010c8a:	af00      	add	r7, sp, #0
 8010c8c:	60f8      	str	r0, [r7, #12]
 8010c8e:	60b9      	str	r1, [r7, #8]
 8010c90:	607a      	str	r2, [r7, #4]
 8010c92:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8010c94:	68bb      	ldr	r3, [r7, #8]
 8010c96:	3b02      	subs	r3, #2
 8010c98:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010c9e:	68bb      	ldr	r3, [r7, #8]
 8010ca0:	08db      	lsrs	r3, r3, #3
 8010ca2:	68f9      	ldr	r1, [r7, #12]
 8010ca4:	8989      	ldrh	r1, [r1, #12]
 8010ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8010caa:	4413      	add	r3, r2
 8010cac:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8010cae:	68bb      	ldr	r3, [r7, #8]
 8010cb0:	08db      	lsrs	r3, r3, #3
 8010cb2:	68fa      	ldr	r2, [r7, #12]
 8010cb4:	8992      	ldrh	r2, [r2, #12]
 8010cb6:	fbb3 f1f2 	udiv	r1, r3, r2
 8010cba:	fb02 f201 	mul.w	r2, r2, r1
 8010cbe:	1a9b      	subs	r3, r3, r2
 8010cc0:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8010cc2:	68bb      	ldr	r3, [r7, #8]
 8010cc4:	f003 0307 	and.w	r3, r3, #7
 8010cc8:	2201      	movs	r2, #1
 8010cca:	fa02 f303 	lsl.w	r3, r2, r3
 8010cce:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8010cd0:	697b      	ldr	r3, [r7, #20]
 8010cd2:	1c5a      	adds	r2, r3, #1
 8010cd4:	617a      	str	r2, [r7, #20]
 8010cd6:	4619      	mov	r1, r3
 8010cd8:	68f8      	ldr	r0, [r7, #12]
 8010cda:	f7ff fc19 	bl	8010510 <move_window>
 8010cde:	4603      	mov	r3, r0
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d001      	beq.n	8010ce8 <change_bitmap+0x62>
 8010ce4:	2301      	movs	r3, #1
 8010ce6:	e03f      	b.n	8010d68 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8010ce8:	68fa      	ldr	r2, [r7, #12]
 8010cea:	69bb      	ldr	r3, [r7, #24]
 8010cec:	4413      	add	r3, r2
 8010cee:	333c      	adds	r3, #60	; 0x3c
 8010cf0:	781a      	ldrb	r2, [r3, #0]
 8010cf2:	7ffb      	ldrb	r3, [r7, #31]
 8010cf4:	4013      	ands	r3, r2
 8010cf6:	b2db      	uxtb	r3, r3
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	bf14      	ite	ne
 8010cfc:	2301      	movne	r3, #1
 8010cfe:	2300      	moveq	r3, #0
 8010d00:	b2db      	uxtb	r3, r3
 8010d02:	461a      	mov	r2, r3
 8010d04:	683b      	ldr	r3, [r7, #0]
 8010d06:	4293      	cmp	r3, r2
 8010d08:	d101      	bne.n	8010d0e <change_bitmap+0x88>
 8010d0a:	2302      	movs	r3, #2
 8010d0c:	e02c      	b.n	8010d68 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 8010d0e:	68fa      	ldr	r2, [r7, #12]
 8010d10:	69bb      	ldr	r3, [r7, #24]
 8010d12:	4413      	add	r3, r2
 8010d14:	333c      	adds	r3, #60	; 0x3c
 8010d16:	781a      	ldrb	r2, [r3, #0]
 8010d18:	7ffb      	ldrb	r3, [r7, #31]
 8010d1a:	4053      	eors	r3, r2
 8010d1c:	b2d9      	uxtb	r1, r3
 8010d1e:	68fa      	ldr	r2, [r7, #12]
 8010d20:	69bb      	ldr	r3, [r7, #24]
 8010d22:	4413      	add	r3, r2
 8010d24:	333c      	adds	r3, #60	; 0x3c
 8010d26:	460a      	mov	r2, r1
 8010d28:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	2201      	movs	r2, #1
 8010d2e:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	3b01      	subs	r3, #1
 8010d34:	607b      	str	r3, [r7, #4]
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d101      	bne.n	8010d40 <change_bitmap+0xba>
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	e013      	b.n	8010d68 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 8010d40:	7ffb      	ldrb	r3, [r7, #31]
 8010d42:	005b      	lsls	r3, r3, #1
 8010d44:	77fb      	strb	r3, [r7, #31]
 8010d46:	7ffb      	ldrb	r3, [r7, #31]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d1cd      	bne.n	8010ce8 <change_bitmap+0x62>
			bm = 1;
 8010d4c:	2301      	movs	r3, #1
 8010d4e:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8010d50:	69bb      	ldr	r3, [r7, #24]
 8010d52:	3301      	adds	r3, #1
 8010d54:	61bb      	str	r3, [r7, #24]
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	899b      	ldrh	r3, [r3, #12]
 8010d5a:	461a      	mov	r2, r3
 8010d5c:	69bb      	ldr	r3, [r7, #24]
 8010d5e:	4293      	cmp	r3, r2
 8010d60:	d3c2      	bcc.n	8010ce8 <change_bitmap+0x62>
		i = 0;
 8010d62:	2300      	movs	r3, #0
 8010d64:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8010d66:	e7b3      	b.n	8010cd0 <change_bitmap+0x4a>
	}
}
 8010d68:	4618      	mov	r0, r3
 8010d6a:	3720      	adds	r7, #32
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	bd80      	pop	{r7, pc}

08010d70 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b086      	sub	sp, #24
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	79db      	ldrb	r3, [r3, #7]
 8010d7c:	2b03      	cmp	r3, #3
 8010d7e:	d121      	bne.n	8010dc4 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	689b      	ldr	r3, [r3, #8]
 8010d84:	617b      	str	r3, [r7, #20]
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	699b      	ldr	r3, [r3, #24]
 8010d8a:	613b      	str	r3, [r7, #16]
 8010d8c:	e014      	b.n	8010db8 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	6818      	ldr	r0, [r3, #0]
 8010d92:	697b      	ldr	r3, [r7, #20]
 8010d94:	3301      	adds	r3, #1
 8010d96:	461a      	mov	r2, r3
 8010d98:	6979      	ldr	r1, [r7, #20]
 8010d9a:	f7ff fdcb 	bl	8010934 <put_fat>
 8010d9e:	4603      	mov	r3, r0
 8010da0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8010da2:	7bfb      	ldrb	r3, [r7, #15]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d001      	beq.n	8010dac <fill_first_frag+0x3c>
 8010da8:	7bfb      	ldrb	r3, [r7, #15]
 8010daa:	e00c      	b.n	8010dc6 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8010dac:	697b      	ldr	r3, [r7, #20]
 8010dae:	3301      	adds	r3, #1
 8010db0:	617b      	str	r3, [r7, #20]
 8010db2:	693b      	ldr	r3, [r7, #16]
 8010db4:	3b01      	subs	r3, #1
 8010db6:	613b      	str	r3, [r7, #16]
 8010db8:	693b      	ldr	r3, [r7, #16]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d1e7      	bne.n	8010d8e <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8010dc4:	2300      	movs	r3, #0
}
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	3718      	adds	r7, #24
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	bd80      	pop	{r7, pc}

08010dce <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 8010dce:	b580      	push	{r7, lr}
 8010dd0:	b086      	sub	sp, #24
 8010dd2:	af00      	add	r7, sp, #0
 8010dd4:	60f8      	str	r0, [r7, #12]
 8010dd6:	60b9      	str	r1, [r7, #8]
 8010dd8:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8010dda:	e020      	b.n	8010e1e <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	6818      	ldr	r0, [r3, #0]
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	69db      	ldr	r3, [r3, #28]
 8010de4:	68ba      	ldr	r2, [r7, #8]
 8010de6:	1ad3      	subs	r3, r2, r3
 8010de8:	1c59      	adds	r1, r3, #1
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	69db      	ldr	r3, [r3, #28]
 8010dee:	2b01      	cmp	r3, #1
 8010df0:	d905      	bls.n	8010dfe <fill_last_frag+0x30>
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	69db      	ldr	r3, [r3, #28]
 8010df6:	68ba      	ldr	r2, [r7, #8]
 8010df8:	1ad3      	subs	r3, r2, r3
 8010dfa:	3302      	adds	r3, #2
 8010dfc:	e000      	b.n	8010e00 <fill_last_frag+0x32>
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	461a      	mov	r2, r3
 8010e02:	f7ff fd97 	bl	8010934 <put_fat>
 8010e06:	4603      	mov	r3, r0
 8010e08:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8010e0a:	7dfb      	ldrb	r3, [r7, #23]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d001      	beq.n	8010e14 <fill_last_frag+0x46>
 8010e10:	7dfb      	ldrb	r3, [r7, #23]
 8010e12:	e009      	b.n	8010e28 <fill_last_frag+0x5a>
		obj->n_frag--;
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	69db      	ldr	r3, [r3, #28]
 8010e18:	1e5a      	subs	r2, r3, #1
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	69db      	ldr	r3, [r3, #28]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d1da      	bne.n	8010ddc <fill_last_frag+0xe>
	}
	return FR_OK;
 8010e26:	2300      	movs	r3, #0
}
 8010e28:	4618      	mov	r0, r3
 8010e2a:	3718      	adds	r7, #24
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	bd80      	pop	{r7, pc}

08010e30 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b08a      	sub	sp, #40	; 0x28
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	60f8      	str	r0, [r7, #12]
 8010e38:	60b9      	str	r1, [r7, #8]
 8010e3a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 8010e46:	68bb      	ldr	r3, [r7, #8]
 8010e48:	627b      	str	r3, [r7, #36]	; 0x24
 8010e4a:	68bb      	ldr	r3, [r7, #8]
 8010e4c:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010e4e:	68bb      	ldr	r3, [r7, #8]
 8010e50:	2b01      	cmp	r3, #1
 8010e52:	d904      	bls.n	8010e5e <remove_chain+0x2e>
 8010e54:	69bb      	ldr	r3, [r7, #24]
 8010e56:	6a1b      	ldr	r3, [r3, #32]
 8010e58:	68ba      	ldr	r2, [r7, #8]
 8010e5a:	429a      	cmp	r2, r3
 8010e5c:	d301      	bcc.n	8010e62 <remove_chain+0x32>
 8010e5e:	2302      	movs	r3, #2
 8010e60:	e096      	b.n	8010f90 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d014      	beq.n	8010e92 <remove_chain+0x62>
 8010e68:	69bb      	ldr	r3, [r7, #24]
 8010e6a:	781b      	ldrb	r3, [r3, #0]
 8010e6c:	2b04      	cmp	r3, #4
 8010e6e:	d103      	bne.n	8010e78 <remove_chain+0x48>
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	79db      	ldrb	r3, [r3, #7]
 8010e74:	2b02      	cmp	r3, #2
 8010e76:	d00c      	beq.n	8010e92 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010e78:	f04f 32ff 	mov.w	r2, #4294967295
 8010e7c:	6879      	ldr	r1, [r7, #4]
 8010e7e:	69b8      	ldr	r0, [r7, #24]
 8010e80:	f7ff fd58 	bl	8010934 <put_fat>
 8010e84:	4603      	mov	r3, r0
 8010e86:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010e88:	7ffb      	ldrb	r3, [r7, #31]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d001      	beq.n	8010e92 <remove_chain+0x62>
 8010e8e:	7ffb      	ldrb	r3, [r7, #31]
 8010e90:	e07e      	b.n	8010f90 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8010e92:	68b9      	ldr	r1, [r7, #8]
 8010e94:	68f8      	ldr	r0, [r7, #12]
 8010e96:	f7ff fbf9 	bl	801068c <get_fat>
 8010e9a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010e9c:	697b      	ldr	r3, [r7, #20]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d055      	beq.n	8010f4e <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8010ea2:	697b      	ldr	r3, [r7, #20]
 8010ea4:	2b01      	cmp	r3, #1
 8010ea6:	d101      	bne.n	8010eac <remove_chain+0x7c>
 8010ea8:	2302      	movs	r3, #2
 8010eaa:	e071      	b.n	8010f90 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010eac:	697b      	ldr	r3, [r7, #20]
 8010eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010eb2:	d101      	bne.n	8010eb8 <remove_chain+0x88>
 8010eb4:	2301      	movs	r3, #1
 8010eb6:	e06b      	b.n	8010f90 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8010eb8:	69bb      	ldr	r3, [r7, #24]
 8010eba:	781b      	ldrb	r3, [r3, #0]
 8010ebc:	2b04      	cmp	r3, #4
 8010ebe:	d00b      	beq.n	8010ed8 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010ec0:	2200      	movs	r2, #0
 8010ec2:	68b9      	ldr	r1, [r7, #8]
 8010ec4:	69b8      	ldr	r0, [r7, #24]
 8010ec6:	f7ff fd35 	bl	8010934 <put_fat>
 8010eca:	4603      	mov	r3, r0
 8010ecc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010ece:	7ffb      	ldrb	r3, [r7, #31]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d001      	beq.n	8010ed8 <remove_chain+0xa8>
 8010ed4:	7ffb      	ldrb	r3, [r7, #31]
 8010ed6:	e05b      	b.n	8010f90 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010ed8:	69bb      	ldr	r3, [r7, #24]
 8010eda:	69da      	ldr	r2, [r3, #28]
 8010edc:	69bb      	ldr	r3, [r7, #24]
 8010ede:	6a1b      	ldr	r3, [r3, #32]
 8010ee0:	3b02      	subs	r3, #2
 8010ee2:	429a      	cmp	r2, r3
 8010ee4:	d20b      	bcs.n	8010efe <remove_chain+0xce>
			fs->free_clst++;
 8010ee6:	69bb      	ldr	r3, [r7, #24]
 8010ee8:	69db      	ldr	r3, [r3, #28]
 8010eea:	1c5a      	adds	r2, r3, #1
 8010eec:	69bb      	ldr	r3, [r7, #24]
 8010eee:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 8010ef0:	69bb      	ldr	r3, [r7, #24]
 8010ef2:	791b      	ldrb	r3, [r3, #4]
 8010ef4:	f043 0301 	orr.w	r3, r3, #1
 8010ef8:	b2da      	uxtb	r2, r3
 8010efa:	69bb      	ldr	r3, [r7, #24]
 8010efc:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8010efe:	6a3b      	ldr	r3, [r7, #32]
 8010f00:	3301      	adds	r3, #1
 8010f02:	697a      	ldr	r2, [r7, #20]
 8010f04:	429a      	cmp	r2, r3
 8010f06:	d102      	bne.n	8010f0e <remove_chain+0xde>
			ecl = nxt;
 8010f08:	697b      	ldr	r3, [r7, #20]
 8010f0a:	623b      	str	r3, [r7, #32]
 8010f0c:	e017      	b.n	8010f3e <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8010f0e:	69bb      	ldr	r3, [r7, #24]
 8010f10:	781b      	ldrb	r3, [r3, #0]
 8010f12:	2b04      	cmp	r3, #4
 8010f14:	d10f      	bne.n	8010f36 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8010f16:	6a3a      	ldr	r2, [r7, #32]
 8010f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f1a:	1ad3      	subs	r3, r2, r3
 8010f1c:	1c5a      	adds	r2, r3, #1
 8010f1e:	2300      	movs	r3, #0
 8010f20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010f22:	69b8      	ldr	r0, [r7, #24]
 8010f24:	f7ff feaf 	bl	8010c86 <change_bitmap>
 8010f28:	4603      	mov	r3, r0
 8010f2a:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 8010f2c:	7ffb      	ldrb	r3, [r7, #31]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d001      	beq.n	8010f36 <remove_chain+0x106>
 8010f32:	7ffb      	ldrb	r3, [r7, #31]
 8010f34:	e02c      	b.n	8010f90 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 8010f36:	697b      	ldr	r3, [r7, #20]
 8010f38:	623b      	str	r3, [r7, #32]
 8010f3a:	6a3b      	ldr	r3, [r7, #32]
 8010f3c:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 8010f3e:	697b      	ldr	r3, [r7, #20]
 8010f40:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010f42:	69bb      	ldr	r3, [r7, #24]
 8010f44:	6a1b      	ldr	r3, [r3, #32]
 8010f46:	68ba      	ldr	r2, [r7, #8]
 8010f48:	429a      	cmp	r2, r3
 8010f4a:	d3a2      	bcc.n	8010e92 <remove_chain+0x62>
 8010f4c:	e000      	b.n	8010f50 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 8010f4e:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8010f50:	69bb      	ldr	r3, [r7, #24]
 8010f52:	781b      	ldrb	r3, [r3, #0]
 8010f54:	2b04      	cmp	r3, #4
 8010f56:	d11a      	bne.n	8010f8e <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d103      	bne.n	8010f66 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	2200      	movs	r2, #0
 8010f62:	71da      	strb	r2, [r3, #7]
 8010f64:	e013      	b.n	8010f8e <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	79db      	ldrb	r3, [r3, #7]
 8010f6a:	2b03      	cmp	r3, #3
 8010f6c:	d10f      	bne.n	8010f8e <remove_chain+0x15e>
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	689b      	ldr	r3, [r3, #8]
 8010f72:	687a      	ldr	r2, [r7, #4]
 8010f74:	429a      	cmp	r2, r3
 8010f76:	d30a      	bcc.n	8010f8e <remove_chain+0x15e>
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	689a      	ldr	r2, [r3, #8]
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	699b      	ldr	r3, [r3, #24]
 8010f80:	4413      	add	r3, r2
 8010f82:	687a      	ldr	r2, [r7, #4]
 8010f84:	429a      	cmp	r2, r3
 8010f86:	d802      	bhi.n	8010f8e <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	2202      	movs	r2, #2
 8010f8c:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 8010f8e:	2300      	movs	r3, #0
}
 8010f90:	4618      	mov	r0, r3
 8010f92:	3728      	adds	r7, #40	; 0x28
 8010f94:	46bd      	mov	sp, r7
 8010f96:	bd80      	pop	{r7, pc}

08010f98 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b088      	sub	sp, #32
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
 8010fa0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010fa8:	683b      	ldr	r3, [r7, #0]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d10d      	bne.n	8010fca <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8010fae:	693b      	ldr	r3, [r7, #16]
 8010fb0:	699b      	ldr	r3, [r3, #24]
 8010fb2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8010fb4:	69bb      	ldr	r3, [r7, #24]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d004      	beq.n	8010fc4 <create_chain+0x2c>
 8010fba:	693b      	ldr	r3, [r7, #16]
 8010fbc:	6a1b      	ldr	r3, [r3, #32]
 8010fbe:	69ba      	ldr	r2, [r7, #24]
 8010fc0:	429a      	cmp	r2, r3
 8010fc2:	d31b      	bcc.n	8010ffc <create_chain+0x64>
 8010fc4:	2301      	movs	r3, #1
 8010fc6:	61bb      	str	r3, [r7, #24]
 8010fc8:	e018      	b.n	8010ffc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010fca:	6839      	ldr	r1, [r7, #0]
 8010fcc:	6878      	ldr	r0, [r7, #4]
 8010fce:	f7ff fb5d 	bl	801068c <get_fat>
 8010fd2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	2b01      	cmp	r3, #1
 8010fd8:	d801      	bhi.n	8010fde <create_chain+0x46>
 8010fda:	2301      	movs	r3, #1
 8010fdc:	e0d9      	b.n	8011192 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fe4:	d101      	bne.n	8010fea <create_chain+0x52>
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	e0d3      	b.n	8011192 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8010fea:	693b      	ldr	r3, [r7, #16]
 8010fec:	6a1b      	ldr	r3, [r3, #32]
 8010fee:	68fa      	ldr	r2, [r7, #12]
 8010ff0:	429a      	cmp	r2, r3
 8010ff2:	d201      	bcs.n	8010ff8 <create_chain+0x60>
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	e0cc      	b.n	8011192 <create_chain+0x1fa>
		scl = clst;
 8010ff8:	683b      	ldr	r3, [r7, #0]
 8010ffa:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8010ffc:	693b      	ldr	r3, [r7, #16]
 8010ffe:	781b      	ldrb	r3, [r3, #0]
 8011000:	2b04      	cmp	r3, #4
 8011002:	d164      	bne.n	80110ce <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8011004:	2201      	movs	r2, #1
 8011006:	69b9      	ldr	r1, [r7, #24]
 8011008:	6938      	ldr	r0, [r7, #16]
 801100a:	f7ff fdb5 	bl	8010b78 <find_bitmap>
 801100e:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8011010:	69fb      	ldr	r3, [r7, #28]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d003      	beq.n	801101e <create_chain+0x86>
 8011016:	69fb      	ldr	r3, [r7, #28]
 8011018:	f1b3 3fff 	cmp.w	r3, #4294967295
 801101c:	d101      	bne.n	8011022 <create_chain+0x8a>
 801101e:	69fb      	ldr	r3, [r7, #28]
 8011020:	e0b7      	b.n	8011192 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8011022:	2301      	movs	r3, #1
 8011024:	2201      	movs	r2, #1
 8011026:	69f9      	ldr	r1, [r7, #28]
 8011028:	6938      	ldr	r0, [r7, #16]
 801102a:	f7ff fe2c 	bl	8010c86 <change_bitmap>
 801102e:	4603      	mov	r3, r0
 8011030:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 8011032:	7dfb      	ldrb	r3, [r7, #23]
 8011034:	2b02      	cmp	r3, #2
 8011036:	d101      	bne.n	801103c <create_chain+0xa4>
 8011038:	2301      	movs	r3, #1
 801103a:	e0aa      	b.n	8011192 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 801103c:	7dfb      	ldrb	r3, [r7, #23]
 801103e:	2b01      	cmp	r3, #1
 8011040:	d102      	bne.n	8011048 <create_chain+0xb0>
 8011042:	f04f 33ff 	mov.w	r3, #4294967295
 8011046:	e0a4      	b.n	8011192 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 8011048:	683b      	ldr	r3, [r7, #0]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d103      	bne.n	8011056 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	2202      	movs	r2, #2
 8011052:	71da      	strb	r2, [r3, #7]
 8011054:	e011      	b.n	801107a <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	79db      	ldrb	r3, [r3, #7]
 801105a:	2b02      	cmp	r3, #2
 801105c:	d10d      	bne.n	801107a <create_chain+0xe2>
 801105e:	69bb      	ldr	r3, [r7, #24]
 8011060:	3301      	adds	r3, #1
 8011062:	69fa      	ldr	r2, [r7, #28]
 8011064:	429a      	cmp	r2, r3
 8011066:	d008      	beq.n	801107a <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	689b      	ldr	r3, [r3, #8]
 801106c:	69ba      	ldr	r2, [r7, #24]
 801106e:	1ad2      	subs	r2, r2, r3
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	2203      	movs	r2, #3
 8011078:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	79db      	ldrb	r3, [r3, #7]
 801107e:	2b02      	cmp	r3, #2
 8011080:	d064      	beq.n	801114c <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8011082:	683b      	ldr	r3, [r7, #0]
 8011084:	3301      	adds	r3, #1
 8011086:	69fa      	ldr	r2, [r7, #28]
 8011088:	429a      	cmp	r2, r3
 801108a:	d10b      	bne.n	80110a4 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	69db      	ldr	r3, [r3, #28]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d003      	beq.n	801109c <create_chain+0x104>
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	69db      	ldr	r3, [r3, #28]
 8011098:	3301      	adds	r3, #1
 801109a:	e000      	b.n	801109e <create_chain+0x106>
 801109c:	2302      	movs	r3, #2
 801109e:	687a      	ldr	r2, [r7, #4]
 80110a0:	61d3      	str	r3, [r2, #28]
 80110a2:	e053      	b.n	801114c <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	69db      	ldr	r3, [r3, #28]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d102      	bne.n	80110b2 <create_chain+0x11a>
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	2201      	movs	r2, #1
 80110b0:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 80110b2:	69fa      	ldr	r2, [r7, #28]
 80110b4:	6839      	ldr	r1, [r7, #0]
 80110b6:	6878      	ldr	r0, [r7, #4]
 80110b8:	f7ff fe89 	bl	8010dce <fill_last_frag>
 80110bc:	4603      	mov	r3, r0
 80110be:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 80110c0:	7dfb      	ldrb	r3, [r7, #23]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d142      	bne.n	801114c <create_chain+0x1b4>
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	2201      	movs	r2, #1
 80110ca:	61da      	str	r2, [r3, #28]
 80110cc:	e03e      	b.n	801114c <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80110ce:	69bb      	ldr	r3, [r7, #24]
 80110d0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80110d2:	69fb      	ldr	r3, [r7, #28]
 80110d4:	3301      	adds	r3, #1
 80110d6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80110d8:	693b      	ldr	r3, [r7, #16]
 80110da:	6a1b      	ldr	r3, [r3, #32]
 80110dc:	69fa      	ldr	r2, [r7, #28]
 80110de:	429a      	cmp	r2, r3
 80110e0:	d307      	bcc.n	80110f2 <create_chain+0x15a>
				ncl = 2;
 80110e2:	2302      	movs	r3, #2
 80110e4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80110e6:	69fa      	ldr	r2, [r7, #28]
 80110e8:	69bb      	ldr	r3, [r7, #24]
 80110ea:	429a      	cmp	r2, r3
 80110ec:	d901      	bls.n	80110f2 <create_chain+0x15a>
 80110ee:	2300      	movs	r3, #0
 80110f0:	e04f      	b.n	8011192 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80110f2:	69f9      	ldr	r1, [r7, #28]
 80110f4:	6878      	ldr	r0, [r7, #4]
 80110f6:	f7ff fac9 	bl	801068c <get_fat>
 80110fa:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d00e      	beq.n	8011120 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	2b01      	cmp	r3, #1
 8011106:	d003      	beq.n	8011110 <create_chain+0x178>
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801110e:	d101      	bne.n	8011114 <create_chain+0x17c>
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	e03e      	b.n	8011192 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 8011114:	69fa      	ldr	r2, [r7, #28]
 8011116:	69bb      	ldr	r3, [r7, #24]
 8011118:	429a      	cmp	r2, r3
 801111a:	d1da      	bne.n	80110d2 <create_chain+0x13a>
 801111c:	2300      	movs	r3, #0
 801111e:	e038      	b.n	8011192 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 8011120:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011122:	f04f 32ff 	mov.w	r2, #4294967295
 8011126:	69f9      	ldr	r1, [r7, #28]
 8011128:	6938      	ldr	r0, [r7, #16]
 801112a:	f7ff fc03 	bl	8010934 <put_fat>
 801112e:	4603      	mov	r3, r0
 8011130:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011132:	7dfb      	ldrb	r3, [r7, #23]
 8011134:	2b00      	cmp	r3, #0
 8011136:	d109      	bne.n	801114c <create_chain+0x1b4>
 8011138:	683b      	ldr	r3, [r7, #0]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d006      	beq.n	801114c <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801113e:	69fa      	ldr	r2, [r7, #28]
 8011140:	6839      	ldr	r1, [r7, #0]
 8011142:	6938      	ldr	r0, [r7, #16]
 8011144:	f7ff fbf6 	bl	8010934 <put_fat>
 8011148:	4603      	mov	r3, r0
 801114a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801114c:	7dfb      	ldrb	r3, [r7, #23]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d116      	bne.n	8011180 <create_chain+0x1e8>
		fs->last_clst = ncl;
 8011152:	693b      	ldr	r3, [r7, #16]
 8011154:	69fa      	ldr	r2, [r7, #28]
 8011156:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011158:	693b      	ldr	r3, [r7, #16]
 801115a:	69da      	ldr	r2, [r3, #28]
 801115c:	693b      	ldr	r3, [r7, #16]
 801115e:	6a1b      	ldr	r3, [r3, #32]
 8011160:	3b02      	subs	r3, #2
 8011162:	429a      	cmp	r2, r3
 8011164:	d804      	bhi.n	8011170 <create_chain+0x1d8>
 8011166:	693b      	ldr	r3, [r7, #16]
 8011168:	69db      	ldr	r3, [r3, #28]
 801116a:	1e5a      	subs	r2, r3, #1
 801116c:	693b      	ldr	r3, [r7, #16]
 801116e:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 8011170:	693b      	ldr	r3, [r7, #16]
 8011172:	791b      	ldrb	r3, [r3, #4]
 8011174:	f043 0301 	orr.w	r3, r3, #1
 8011178:	b2da      	uxtb	r2, r3
 801117a:	693b      	ldr	r3, [r7, #16]
 801117c:	711a      	strb	r2, [r3, #4]
 801117e:	e007      	b.n	8011190 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011180:	7dfb      	ldrb	r3, [r7, #23]
 8011182:	2b01      	cmp	r3, #1
 8011184:	d102      	bne.n	801118c <create_chain+0x1f4>
 8011186:	f04f 33ff 	mov.w	r3, #4294967295
 801118a:	e000      	b.n	801118e <create_chain+0x1f6>
 801118c:	2301      	movs	r3, #1
 801118e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011190:	69fb      	ldr	r3, [r7, #28]
}
 8011192:	4618      	mov	r0, r3
 8011194:	3720      	adds	r7, #32
 8011196:	46bd      	mov	sp, r7
 8011198:	bd80      	pop	{r7, pc}

0801119a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801119a:	b590      	push	{r4, r7, lr}
 801119c:	b089      	sub	sp, #36	; 0x24
 801119e:	af00      	add	r7, sp, #0
 80111a0:	60f8      	str	r0, [r7, #12]
 80111a2:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80111b0:	3304      	adds	r3, #4
 80111b2:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80111b4:	697b      	ldr	r3, [r7, #20]
 80111b6:	899b      	ldrh	r3, [r3, #12]
 80111b8:	b29b      	uxth	r3, r3
 80111ba:	f04f 0400 	mov.w	r4, #0
 80111be:	461a      	mov	r2, r3
 80111c0:	4623      	mov	r3, r4
 80111c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80111c6:	f7ef f887 	bl	80002d8 <__aeabi_uldivmod>
 80111ca:	4603      	mov	r3, r0
 80111cc:	460c      	mov	r4, r1
 80111ce:	4618      	mov	r0, r3
 80111d0:	4621      	mov	r1, r4
 80111d2:	697b      	ldr	r3, [r7, #20]
 80111d4:	895b      	ldrh	r3, [r3, #10]
 80111d6:	b29b      	uxth	r3, r3
 80111d8:	f04f 0400 	mov.w	r4, #0
 80111dc:	461a      	mov	r2, r3
 80111de:	4623      	mov	r3, r4
 80111e0:	f7ef f87a 	bl	80002d8 <__aeabi_uldivmod>
 80111e4:	4603      	mov	r3, r0
 80111e6:	460c      	mov	r4, r1
 80111e8:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80111ea:	69bb      	ldr	r3, [r7, #24]
 80111ec:	1d1a      	adds	r2, r3, #4
 80111ee:	61ba      	str	r2, [r7, #24]
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80111f4:	693b      	ldr	r3, [r7, #16]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d101      	bne.n	80111fe <clmt_clust+0x64>
 80111fa:	2300      	movs	r3, #0
 80111fc:	e010      	b.n	8011220 <clmt_clust+0x86>
		if (cl < ncl) break;	/* In this fragment? */
 80111fe:	69fa      	ldr	r2, [r7, #28]
 8011200:	693b      	ldr	r3, [r7, #16]
 8011202:	429a      	cmp	r2, r3
 8011204:	d307      	bcc.n	8011216 <clmt_clust+0x7c>
		cl -= ncl; tbl++;		/* Next fragment */
 8011206:	69fa      	ldr	r2, [r7, #28]
 8011208:	693b      	ldr	r3, [r7, #16]
 801120a:	1ad3      	subs	r3, r2, r3
 801120c:	61fb      	str	r3, [r7, #28]
 801120e:	69bb      	ldr	r3, [r7, #24]
 8011210:	3304      	adds	r3, #4
 8011212:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011214:	e7e9      	b.n	80111ea <clmt_clust+0x50>
		if (cl < ncl) break;	/* In this fragment? */
 8011216:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011218:	69bb      	ldr	r3, [r7, #24]
 801121a:	681a      	ldr	r2, [r3, #0]
 801121c:	69fb      	ldr	r3, [r7, #28]
 801121e:	4413      	add	r3, r2
}
 8011220:	4618      	mov	r0, r3
 8011222:	3724      	adds	r7, #36	; 0x24
 8011224:	46bd      	mov	sp, r7
 8011226:	bd90      	pop	{r4, r7, pc}

08011228 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011228:	b580      	push	{r7, lr}
 801122a:	b086      	sub	sp, #24
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
 8011230:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011238:	693b      	ldr	r3, [r7, #16]
 801123a:	781b      	ldrb	r3, [r3, #0]
 801123c:	2b04      	cmp	r3, #4
 801123e:	d102      	bne.n	8011246 <dir_sdi+0x1e>
 8011240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011244:	e001      	b.n	801124a <dir_sdi+0x22>
 8011246:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801124a:	683b      	ldr	r3, [r7, #0]
 801124c:	429a      	cmp	r2, r3
 801124e:	d904      	bls.n	801125a <dir_sdi+0x32>
 8011250:	683b      	ldr	r3, [r7, #0]
 8011252:	f003 031f 	and.w	r3, r3, #31
 8011256:	2b00      	cmp	r3, #0
 8011258:	d001      	beq.n	801125e <dir_sdi+0x36>
		return FR_INT_ERR;
 801125a:	2302      	movs	r3, #2
 801125c:	e074      	b.n	8011348 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	683a      	ldr	r2, [r7, #0]
 8011262:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	689b      	ldr	r3, [r3, #8]
 8011268:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801126a:	697b      	ldr	r3, [r7, #20]
 801126c:	2b00      	cmp	r3, #0
 801126e:	d109      	bne.n	8011284 <dir_sdi+0x5c>
 8011270:	693b      	ldr	r3, [r7, #16]
 8011272:	781b      	ldrb	r3, [r3, #0]
 8011274:	2b02      	cmp	r3, #2
 8011276:	d905      	bls.n	8011284 <dir_sdi+0x5c>
		clst = fs->dirbase;
 8011278:	693b      	ldr	r3, [r7, #16]
 801127a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801127c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	2200      	movs	r2, #0
 8011282:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011284:	697b      	ldr	r3, [r7, #20]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d10c      	bne.n	80112a4 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801128a:	683b      	ldr	r3, [r7, #0]
 801128c:	095b      	lsrs	r3, r3, #5
 801128e:	693a      	ldr	r2, [r7, #16]
 8011290:	8912      	ldrh	r2, [r2, #8]
 8011292:	4293      	cmp	r3, r2
 8011294:	d301      	bcc.n	801129a <dir_sdi+0x72>
 8011296:	2302      	movs	r3, #2
 8011298:	e056      	b.n	8011348 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 801129a:	693b      	ldr	r3, [r7, #16]
 801129c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	639a      	str	r2, [r3, #56]	; 0x38
 80112a2:	e02d      	b.n	8011300 <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80112a4:	693b      	ldr	r3, [r7, #16]
 80112a6:	895b      	ldrh	r3, [r3, #10]
 80112a8:	461a      	mov	r2, r3
 80112aa:	693b      	ldr	r3, [r7, #16]
 80112ac:	899b      	ldrh	r3, [r3, #12]
 80112ae:	fb03 f302 	mul.w	r3, r3, r2
 80112b2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80112b4:	e019      	b.n	80112ea <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	6979      	ldr	r1, [r7, #20]
 80112ba:	4618      	mov	r0, r3
 80112bc:	f7ff f9e6 	bl	801068c <get_fat>
 80112c0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80112c2:	697b      	ldr	r3, [r7, #20]
 80112c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112c8:	d101      	bne.n	80112ce <dir_sdi+0xa6>
 80112ca:	2301      	movs	r3, #1
 80112cc:	e03c      	b.n	8011348 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80112ce:	697b      	ldr	r3, [r7, #20]
 80112d0:	2b01      	cmp	r3, #1
 80112d2:	d904      	bls.n	80112de <dir_sdi+0xb6>
 80112d4:	693b      	ldr	r3, [r7, #16]
 80112d6:	6a1b      	ldr	r3, [r3, #32]
 80112d8:	697a      	ldr	r2, [r7, #20]
 80112da:	429a      	cmp	r2, r3
 80112dc:	d301      	bcc.n	80112e2 <dir_sdi+0xba>
 80112de:	2302      	movs	r3, #2
 80112e0:	e032      	b.n	8011348 <dir_sdi+0x120>
			ofs -= csz;
 80112e2:	683a      	ldr	r2, [r7, #0]
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	1ad3      	subs	r3, r2, r3
 80112e8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80112ea:	683a      	ldr	r2, [r7, #0]
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	429a      	cmp	r2, r3
 80112f0:	d2e1      	bcs.n	80112b6 <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 80112f2:	6979      	ldr	r1, [r7, #20]
 80112f4:	6938      	ldr	r0, [r7, #16]
 80112f6:	f7ff f9a9 	bl	801064c <clust2sect>
 80112fa:	4602      	mov	r2, r0
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	697a      	ldr	r2, [r7, #20]
 8011304:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801130a:	2b00      	cmp	r3, #0
 801130c:	d101      	bne.n	8011312 <dir_sdi+0xea>
 801130e:	2302      	movs	r3, #2
 8011310:	e01a      	b.n	8011348 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011316:	693b      	ldr	r3, [r7, #16]
 8011318:	899b      	ldrh	r3, [r3, #12]
 801131a:	4619      	mov	r1, r3
 801131c:	683b      	ldr	r3, [r7, #0]
 801131e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011322:	441a      	add	r2, r3
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011328:	693b      	ldr	r3, [r7, #16]
 801132a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801132e:	693b      	ldr	r3, [r7, #16]
 8011330:	899b      	ldrh	r3, [r3, #12]
 8011332:	461a      	mov	r2, r3
 8011334:	683b      	ldr	r3, [r7, #0]
 8011336:	fbb3 f0f2 	udiv	r0, r3, r2
 801133a:	fb02 f200 	mul.w	r2, r2, r0
 801133e:	1a9b      	subs	r3, r3, r2
 8011340:	18ca      	adds	r2, r1, r3
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8011346:	2300      	movs	r3, #0
}
 8011348:	4618      	mov	r0, r3
 801134a:	3718      	adds	r7, #24
 801134c:	46bd      	mov	sp, r7
 801134e:	bd80      	pop	{r7, pc}

08011350 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011350:	b580      	push	{r7, lr}
 8011352:	b086      	sub	sp, #24
 8011354:	af00      	add	r7, sp, #0
 8011356:	6078      	str	r0, [r7, #4]
 8011358:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011364:	3320      	adds	r3, #32
 8011366:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801136c:	2b00      	cmp	r3, #0
 801136e:	d00b      	beq.n	8011388 <dir_next+0x38>
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	781b      	ldrb	r3, [r3, #0]
 8011374:	2b04      	cmp	r3, #4
 8011376:	d102      	bne.n	801137e <dir_next+0x2e>
 8011378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801137c:	e001      	b.n	8011382 <dir_next+0x32>
 801137e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8011382:	68bb      	ldr	r3, [r7, #8]
 8011384:	429a      	cmp	r2, r3
 8011386:	d801      	bhi.n	801138c <dir_next+0x3c>
 8011388:	2304      	movs	r3, #4
 801138a:	e0c3      	b.n	8011514 <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	899b      	ldrh	r3, [r3, #12]
 8011390:	461a      	mov	r2, r3
 8011392:	68bb      	ldr	r3, [r7, #8]
 8011394:	fbb3 f1f2 	udiv	r1, r3, r2
 8011398:	fb02 f201 	mul.w	r2, r2, r1
 801139c:	1a9b      	subs	r3, r3, r2
 801139e:	2b00      	cmp	r3, #0
 80113a0:	f040 80a5 	bne.w	80114ee <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113a8:	1c5a      	adds	r2, r3, #1
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d10b      	bne.n	80113ce <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80113b6:	68bb      	ldr	r3, [r7, #8]
 80113b8:	095b      	lsrs	r3, r3, #5
 80113ba:	68fa      	ldr	r2, [r7, #12]
 80113bc:	8912      	ldrh	r2, [r2, #8]
 80113be:	4293      	cmp	r3, r2
 80113c0:	f0c0 8095 	bcc.w	80114ee <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	2200      	movs	r2, #0
 80113c8:	639a      	str	r2, [r3, #56]	; 0x38
 80113ca:	2304      	movs	r3, #4
 80113cc:	e0a2      	b.n	8011514 <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	899b      	ldrh	r3, [r3, #12]
 80113d2:	461a      	mov	r2, r3
 80113d4:	68bb      	ldr	r3, [r7, #8]
 80113d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80113da:	68fa      	ldr	r2, [r7, #12]
 80113dc:	8952      	ldrh	r2, [r2, #10]
 80113de:	3a01      	subs	r2, #1
 80113e0:	4013      	ands	r3, r2
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	f040 8083 	bne.w	80114ee <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80113e8:	687a      	ldr	r2, [r7, #4]
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80113ee:	4619      	mov	r1, r3
 80113f0:	4610      	mov	r0, r2
 80113f2:	f7ff f94b 	bl	801068c <get_fat>
 80113f6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80113f8:	697b      	ldr	r3, [r7, #20]
 80113fa:	2b01      	cmp	r3, #1
 80113fc:	d801      	bhi.n	8011402 <dir_next+0xb2>
 80113fe:	2302      	movs	r3, #2
 8011400:	e088      	b.n	8011514 <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011402:	697b      	ldr	r3, [r7, #20]
 8011404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011408:	d101      	bne.n	801140e <dir_next+0xbe>
 801140a:	2301      	movs	r3, #1
 801140c:	e082      	b.n	8011514 <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	6a1b      	ldr	r3, [r3, #32]
 8011412:	697a      	ldr	r2, [r7, #20]
 8011414:	429a      	cmp	r2, r3
 8011416:	d360      	bcc.n	80114da <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011418:	683b      	ldr	r3, [r7, #0]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d104      	bne.n	8011428 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	2200      	movs	r2, #0
 8011422:	639a      	str	r2, [r3, #56]	; 0x38
 8011424:	2304      	movs	r3, #4
 8011426:	e075      	b.n	8011514 <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011428:	687a      	ldr	r2, [r7, #4]
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801142e:	4619      	mov	r1, r3
 8011430:	4610      	mov	r0, r2
 8011432:	f7ff fdb1 	bl	8010f98 <create_chain>
 8011436:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011438:	697b      	ldr	r3, [r7, #20]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d101      	bne.n	8011442 <dir_next+0xf2>
 801143e:	2307      	movs	r3, #7
 8011440:	e068      	b.n	8011514 <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011442:	697b      	ldr	r3, [r7, #20]
 8011444:	2b01      	cmp	r3, #1
 8011446:	d101      	bne.n	801144c <dir_next+0xfc>
 8011448:	2302      	movs	r3, #2
 801144a:	e063      	b.n	8011514 <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801144c:	697b      	ldr	r3, [r7, #20]
 801144e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011452:	d101      	bne.n	8011458 <dir_next+0x108>
 8011454:	2301      	movs	r3, #1
 8011456:	e05d      	b.n	8011514 <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	79db      	ldrb	r3, [r3, #7]
 801145c:	f043 0304 	orr.w	r3, r3, #4
 8011460:	b2da      	uxtb	r2, r3
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011466:	68f8      	ldr	r0, [r7, #12]
 8011468:	f7ff f80e 	bl	8010488 <sync_window>
 801146c:	4603      	mov	r3, r0
 801146e:	2b00      	cmp	r3, #0
 8011470:	d001      	beq.n	8011476 <dir_next+0x126>
 8011472:	2301      	movs	r3, #1
 8011474:	e04e      	b.n	8011514 <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	899b      	ldrh	r3, [r3, #12]
 8011480:	461a      	mov	r2, r3
 8011482:	2100      	movs	r1, #0
 8011484:	f7fe fe37 	bl	80100f6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011488:	2300      	movs	r3, #0
 801148a:	613b      	str	r3, [r7, #16]
 801148c:	6979      	ldr	r1, [r7, #20]
 801148e:	68f8      	ldr	r0, [r7, #12]
 8011490:	f7ff f8dc 	bl	801064c <clust2sect>
 8011494:	4602      	mov	r2, r0
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	639a      	str	r2, [r3, #56]	; 0x38
 801149a:	e012      	b.n	80114c2 <dir_next+0x172>
						fs->wflag = 1;
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	2201      	movs	r2, #1
 80114a0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80114a2:	68f8      	ldr	r0, [r7, #12]
 80114a4:	f7fe fff0 	bl	8010488 <sync_window>
 80114a8:	4603      	mov	r3, r0
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d001      	beq.n	80114b2 <dir_next+0x162>
 80114ae:	2301      	movs	r3, #1
 80114b0:	e030      	b.n	8011514 <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80114b2:	693b      	ldr	r3, [r7, #16]
 80114b4:	3301      	adds	r3, #1
 80114b6:	613b      	str	r3, [r7, #16]
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114bc:	1c5a      	adds	r2, r3, #1
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	639a      	str	r2, [r3, #56]	; 0x38
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	895b      	ldrh	r3, [r3, #10]
 80114c6:	461a      	mov	r2, r3
 80114c8:	693b      	ldr	r3, [r7, #16]
 80114ca:	4293      	cmp	r3, r2
 80114cc:	d3e6      	bcc.n	801149c <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80114d2:	693b      	ldr	r3, [r7, #16]
 80114d4:	1ad2      	subs	r2, r2, r3
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	697a      	ldr	r2, [r7, #20]
 80114de:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 80114e0:	6979      	ldr	r1, [r7, #20]
 80114e2:	68f8      	ldr	r0, [r7, #12]
 80114e4:	f7ff f8b2 	bl	801064c <clust2sect>
 80114e8:	4602      	mov	r2, r0
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	68ba      	ldr	r2, [r7, #8]
 80114f2:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	899b      	ldrh	r3, [r3, #12]
 80114fe:	461a      	mov	r2, r3
 8011500:	68bb      	ldr	r3, [r7, #8]
 8011502:	fbb3 f0f2 	udiv	r0, r3, r2
 8011506:	fb02 f200 	mul.w	r2, r2, r0
 801150a:	1a9b      	subs	r3, r3, r2
 801150c:	18ca      	adds	r2, r1, r3
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8011512:	2300      	movs	r3, #0
}
 8011514:	4618      	mov	r0, r3
 8011516:	3718      	adds	r7, #24
 8011518:	46bd      	mov	sp, r7
 801151a:	bd80      	pop	{r7, pc}

0801151c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801151c:	b580      	push	{r7, lr}
 801151e:	b086      	sub	sp, #24
 8011520:	af00      	add	r7, sp, #0
 8011522:	6078      	str	r0, [r7, #4]
 8011524:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801152c:	2100      	movs	r1, #0
 801152e:	6878      	ldr	r0, [r7, #4]
 8011530:	f7ff fe7a 	bl	8011228 <dir_sdi>
 8011534:	4603      	mov	r3, r0
 8011536:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011538:	7dfb      	ldrb	r3, [r7, #23]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d140      	bne.n	80115c0 <dir_alloc+0xa4>
		n = 0;
 801153e:	2300      	movs	r3, #0
 8011540:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011546:	4619      	mov	r1, r3
 8011548:	68f8      	ldr	r0, [r7, #12]
 801154a:	f7fe ffe1 	bl	8010510 <move_window>
 801154e:	4603      	mov	r3, r0
 8011550:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011552:	7dfb      	ldrb	r3, [r7, #23]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d132      	bne.n	80115be <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	781b      	ldrb	r3, [r3, #0]
 801155c:	2b04      	cmp	r3, #4
 801155e:	d108      	bne.n	8011572 <dir_alloc+0x56>
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011564:	781b      	ldrb	r3, [r3, #0]
 8011566:	b25b      	sxtb	r3, r3
 8011568:	43db      	mvns	r3, r3
 801156a:	b2db      	uxtb	r3, r3
 801156c:	09db      	lsrs	r3, r3, #7
 801156e:	b2db      	uxtb	r3, r3
 8011570:	e00f      	b.n	8011592 <dir_alloc+0x76>
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011576:	781b      	ldrb	r3, [r3, #0]
 8011578:	2be5      	cmp	r3, #229	; 0xe5
 801157a:	d004      	beq.n	8011586 <dir_alloc+0x6a>
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011580:	781b      	ldrb	r3, [r3, #0]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d101      	bne.n	801158a <dir_alloc+0x6e>
 8011586:	2301      	movs	r3, #1
 8011588:	e000      	b.n	801158c <dir_alloc+0x70>
 801158a:	2300      	movs	r3, #0
 801158c:	f003 0301 	and.w	r3, r3, #1
 8011590:	b2db      	uxtb	r3, r3
 8011592:	2b00      	cmp	r3, #0
 8011594:	d007      	beq.n	80115a6 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011596:	693b      	ldr	r3, [r7, #16]
 8011598:	3301      	adds	r3, #1
 801159a:	613b      	str	r3, [r7, #16]
 801159c:	693a      	ldr	r2, [r7, #16]
 801159e:	683b      	ldr	r3, [r7, #0]
 80115a0:	429a      	cmp	r2, r3
 80115a2:	d102      	bne.n	80115aa <dir_alloc+0x8e>
 80115a4:	e00c      	b.n	80115c0 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80115a6:	2300      	movs	r3, #0
 80115a8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80115aa:	2101      	movs	r1, #1
 80115ac:	6878      	ldr	r0, [r7, #4]
 80115ae:	f7ff fecf 	bl	8011350 <dir_next>
 80115b2:	4603      	mov	r3, r0
 80115b4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80115b6:	7dfb      	ldrb	r3, [r7, #23]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d0c2      	beq.n	8011542 <dir_alloc+0x26>
 80115bc:	e000      	b.n	80115c0 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 80115be:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80115c0:	7dfb      	ldrb	r3, [r7, #23]
 80115c2:	2b04      	cmp	r3, #4
 80115c4:	d101      	bne.n	80115ca <dir_alloc+0xae>
 80115c6:	2307      	movs	r3, #7
 80115c8:	75fb      	strb	r3, [r7, #23]
	return res;
 80115ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80115cc:	4618      	mov	r0, r3
 80115ce:	3718      	adds	r7, #24
 80115d0:	46bd      	mov	sp, r7
 80115d2:	bd80      	pop	{r7, pc}

080115d4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b084      	sub	sp, #16
 80115d8:	af00      	add	r7, sp, #0
 80115da:	6078      	str	r0, [r7, #4]
 80115dc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80115de:	683b      	ldr	r3, [r7, #0]
 80115e0:	331a      	adds	r3, #26
 80115e2:	4618      	mov	r0, r3
 80115e4:	f7fe fba0 	bl	800fd28 <ld_word>
 80115e8:	4603      	mov	r3, r0
 80115ea:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	781b      	ldrb	r3, [r3, #0]
 80115f0:	2b03      	cmp	r3, #3
 80115f2:	d109      	bne.n	8011608 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80115f4:	683b      	ldr	r3, [r7, #0]
 80115f6:	3314      	adds	r3, #20
 80115f8:	4618      	mov	r0, r3
 80115fa:	f7fe fb95 	bl	800fd28 <ld_word>
 80115fe:	4603      	mov	r3, r0
 8011600:	041b      	lsls	r3, r3, #16
 8011602:	68fa      	ldr	r2, [r7, #12]
 8011604:	4313      	orrs	r3, r2
 8011606:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011608:	68fb      	ldr	r3, [r7, #12]
}
 801160a:	4618      	mov	r0, r3
 801160c:	3710      	adds	r7, #16
 801160e:	46bd      	mov	sp, r7
 8011610:	bd80      	pop	{r7, pc}

08011612 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011612:	b580      	push	{r7, lr}
 8011614:	b084      	sub	sp, #16
 8011616:	af00      	add	r7, sp, #0
 8011618:	60f8      	str	r0, [r7, #12]
 801161a:	60b9      	str	r1, [r7, #8]
 801161c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801161e:	68bb      	ldr	r3, [r7, #8]
 8011620:	331a      	adds	r3, #26
 8011622:	687a      	ldr	r2, [r7, #4]
 8011624:	b292      	uxth	r2, r2
 8011626:	4611      	mov	r1, r2
 8011628:	4618      	mov	r0, r3
 801162a:	f7fe fc75 	bl	800ff18 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	781b      	ldrb	r3, [r3, #0]
 8011632:	2b03      	cmp	r3, #3
 8011634:	d109      	bne.n	801164a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011636:	68bb      	ldr	r3, [r7, #8]
 8011638:	f103 0214 	add.w	r2, r3, #20
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	0c1b      	lsrs	r3, r3, #16
 8011640:	b29b      	uxth	r3, r3
 8011642:	4619      	mov	r1, r3
 8011644:	4610      	mov	r0, r2
 8011646:	f7fe fc67 	bl	800ff18 <st_word>
	}
}
 801164a:	bf00      	nop
 801164c:	3710      	adds	r7, #16
 801164e:	46bd      	mov	sp, r7
 8011650:	bd80      	pop	{r7, pc}
	...

08011654 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8011654:	b590      	push	{r4, r7, lr}
 8011656:	b087      	sub	sp, #28
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
 801165c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801165e:	683b      	ldr	r3, [r7, #0]
 8011660:	331a      	adds	r3, #26
 8011662:	4618      	mov	r0, r3
 8011664:	f7fe fb60 	bl	800fd28 <ld_word>
 8011668:	4603      	mov	r3, r0
 801166a:	2b00      	cmp	r3, #0
 801166c:	d001      	beq.n	8011672 <cmp_lfn+0x1e>
 801166e:	2300      	movs	r3, #0
 8011670:	e059      	b.n	8011726 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8011672:	683b      	ldr	r3, [r7, #0]
 8011674:	781b      	ldrb	r3, [r3, #0]
 8011676:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801167a:	1e5a      	subs	r2, r3, #1
 801167c:	4613      	mov	r3, r2
 801167e:	005b      	lsls	r3, r3, #1
 8011680:	4413      	add	r3, r2
 8011682:	009b      	lsls	r3, r3, #2
 8011684:	4413      	add	r3, r2
 8011686:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011688:	2301      	movs	r3, #1
 801168a:	81fb      	strh	r3, [r7, #14]
 801168c:	2300      	movs	r3, #0
 801168e:	613b      	str	r3, [r7, #16]
 8011690:	e033      	b.n	80116fa <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8011692:	4a27      	ldr	r2, [pc, #156]	; (8011730 <cmp_lfn+0xdc>)
 8011694:	693b      	ldr	r3, [r7, #16]
 8011696:	4413      	add	r3, r2
 8011698:	781b      	ldrb	r3, [r3, #0]
 801169a:	461a      	mov	r2, r3
 801169c:	683b      	ldr	r3, [r7, #0]
 801169e:	4413      	add	r3, r2
 80116a0:	4618      	mov	r0, r3
 80116a2:	f7fe fb41 	bl	800fd28 <ld_word>
 80116a6:	4603      	mov	r3, r0
 80116a8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80116aa:	89fb      	ldrh	r3, [r7, #14]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d01a      	beq.n	80116e6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80116b0:	697b      	ldr	r3, [r7, #20]
 80116b2:	2bfe      	cmp	r3, #254	; 0xfe
 80116b4:	d812      	bhi.n	80116dc <cmp_lfn+0x88>
 80116b6:	89bb      	ldrh	r3, [r7, #12]
 80116b8:	4618      	mov	r0, r3
 80116ba:	f003 fa39 	bl	8014b30 <ff_wtoupper>
 80116be:	4603      	mov	r3, r0
 80116c0:	461c      	mov	r4, r3
 80116c2:	697b      	ldr	r3, [r7, #20]
 80116c4:	1c5a      	adds	r2, r3, #1
 80116c6:	617a      	str	r2, [r7, #20]
 80116c8:	005b      	lsls	r3, r3, #1
 80116ca:	687a      	ldr	r2, [r7, #4]
 80116cc:	4413      	add	r3, r2
 80116ce:	881b      	ldrh	r3, [r3, #0]
 80116d0:	4618      	mov	r0, r3
 80116d2:	f003 fa2d 	bl	8014b30 <ff_wtoupper>
 80116d6:	4603      	mov	r3, r0
 80116d8:	429c      	cmp	r4, r3
 80116da:	d001      	beq.n	80116e0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80116dc:	2300      	movs	r3, #0
 80116de:	e022      	b.n	8011726 <cmp_lfn+0xd2>
			}
			wc = uc;
 80116e0:	89bb      	ldrh	r3, [r7, #12]
 80116e2:	81fb      	strh	r3, [r7, #14]
 80116e4:	e006      	b.n	80116f4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80116e6:	89bb      	ldrh	r3, [r7, #12]
 80116e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80116ec:	4293      	cmp	r3, r2
 80116ee:	d001      	beq.n	80116f4 <cmp_lfn+0xa0>
 80116f0:	2300      	movs	r3, #0
 80116f2:	e018      	b.n	8011726 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80116f4:	693b      	ldr	r3, [r7, #16]
 80116f6:	3301      	adds	r3, #1
 80116f8:	613b      	str	r3, [r7, #16]
 80116fa:	693b      	ldr	r3, [r7, #16]
 80116fc:	2b0c      	cmp	r3, #12
 80116fe:	d9c8      	bls.n	8011692 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8011700:	683b      	ldr	r3, [r7, #0]
 8011702:	781b      	ldrb	r3, [r3, #0]
 8011704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011708:	2b00      	cmp	r3, #0
 801170a:	d00b      	beq.n	8011724 <cmp_lfn+0xd0>
 801170c:	89fb      	ldrh	r3, [r7, #14]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d008      	beq.n	8011724 <cmp_lfn+0xd0>
 8011712:	697b      	ldr	r3, [r7, #20]
 8011714:	005b      	lsls	r3, r3, #1
 8011716:	687a      	ldr	r2, [r7, #4]
 8011718:	4413      	add	r3, r2
 801171a:	881b      	ldrh	r3, [r3, #0]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d001      	beq.n	8011724 <cmp_lfn+0xd0>
 8011720:	2300      	movs	r3, #0
 8011722:	e000      	b.n	8011726 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8011724:	2301      	movs	r3, #1
}
 8011726:	4618      	mov	r0, r3
 8011728:	371c      	adds	r7, #28
 801172a:	46bd      	mov	sp, r7
 801172c:	bd90      	pop	{r4, r7, pc}
 801172e:	bf00      	nop
 8011730:	080159ec 	.word	0x080159ec

08011734 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8011734:	b580      	push	{r7, lr}
 8011736:	b086      	sub	sp, #24
 8011738:	af00      	add	r7, sp, #0
 801173a:	6078      	str	r0, [r7, #4]
 801173c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 801173e:	683b      	ldr	r3, [r7, #0]
 8011740:	331a      	adds	r3, #26
 8011742:	4618      	mov	r0, r3
 8011744:	f7fe faf0 	bl	800fd28 <ld_word>
 8011748:	4603      	mov	r3, r0
 801174a:	2b00      	cmp	r3, #0
 801174c:	d001      	beq.n	8011752 <pick_lfn+0x1e>
 801174e:	2300      	movs	r3, #0
 8011750:	e04d      	b.n	80117ee <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8011752:	683b      	ldr	r3, [r7, #0]
 8011754:	781b      	ldrb	r3, [r3, #0]
 8011756:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801175a:	1e5a      	subs	r2, r3, #1
 801175c:	4613      	mov	r3, r2
 801175e:	005b      	lsls	r3, r3, #1
 8011760:	4413      	add	r3, r2
 8011762:	009b      	lsls	r3, r3, #2
 8011764:	4413      	add	r3, r2
 8011766:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011768:	2301      	movs	r3, #1
 801176a:	81fb      	strh	r3, [r7, #14]
 801176c:	2300      	movs	r3, #0
 801176e:	613b      	str	r3, [r7, #16]
 8011770:	e028      	b.n	80117c4 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8011772:	4a21      	ldr	r2, [pc, #132]	; (80117f8 <pick_lfn+0xc4>)
 8011774:	693b      	ldr	r3, [r7, #16]
 8011776:	4413      	add	r3, r2
 8011778:	781b      	ldrb	r3, [r3, #0]
 801177a:	461a      	mov	r2, r3
 801177c:	683b      	ldr	r3, [r7, #0]
 801177e:	4413      	add	r3, r2
 8011780:	4618      	mov	r0, r3
 8011782:	f7fe fad1 	bl	800fd28 <ld_word>
 8011786:	4603      	mov	r3, r0
 8011788:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801178a:	89fb      	ldrh	r3, [r7, #14]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d00f      	beq.n	80117b0 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8011790:	697b      	ldr	r3, [r7, #20]
 8011792:	2bfe      	cmp	r3, #254	; 0xfe
 8011794:	d901      	bls.n	801179a <pick_lfn+0x66>
 8011796:	2300      	movs	r3, #0
 8011798:	e029      	b.n	80117ee <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801179a:	89bb      	ldrh	r3, [r7, #12]
 801179c:	81fb      	strh	r3, [r7, #14]
 801179e:	697b      	ldr	r3, [r7, #20]
 80117a0:	1c5a      	adds	r2, r3, #1
 80117a2:	617a      	str	r2, [r7, #20]
 80117a4:	005b      	lsls	r3, r3, #1
 80117a6:	687a      	ldr	r2, [r7, #4]
 80117a8:	4413      	add	r3, r2
 80117aa:	89fa      	ldrh	r2, [r7, #14]
 80117ac:	801a      	strh	r2, [r3, #0]
 80117ae:	e006      	b.n	80117be <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80117b0:	89bb      	ldrh	r3, [r7, #12]
 80117b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80117b6:	4293      	cmp	r3, r2
 80117b8:	d001      	beq.n	80117be <pick_lfn+0x8a>
 80117ba:	2300      	movs	r3, #0
 80117bc:	e017      	b.n	80117ee <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80117be:	693b      	ldr	r3, [r7, #16]
 80117c0:	3301      	adds	r3, #1
 80117c2:	613b      	str	r3, [r7, #16]
 80117c4:	693b      	ldr	r3, [r7, #16]
 80117c6:	2b0c      	cmp	r3, #12
 80117c8:	d9d3      	bls.n	8011772 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80117ca:	683b      	ldr	r3, [r7, #0]
 80117cc:	781b      	ldrb	r3, [r3, #0]
 80117ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d00a      	beq.n	80117ec <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80117d6:	697b      	ldr	r3, [r7, #20]
 80117d8:	2bfe      	cmp	r3, #254	; 0xfe
 80117da:	d901      	bls.n	80117e0 <pick_lfn+0xac>
 80117dc:	2300      	movs	r3, #0
 80117de:	e006      	b.n	80117ee <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80117e0:	697b      	ldr	r3, [r7, #20]
 80117e2:	005b      	lsls	r3, r3, #1
 80117e4:	687a      	ldr	r2, [r7, #4]
 80117e6:	4413      	add	r3, r2
 80117e8:	2200      	movs	r2, #0
 80117ea:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80117ec:	2301      	movs	r3, #1
}
 80117ee:	4618      	mov	r0, r3
 80117f0:	3718      	adds	r7, #24
 80117f2:	46bd      	mov	sp, r7
 80117f4:	bd80      	pop	{r7, pc}
 80117f6:	bf00      	nop
 80117f8:	080159ec 	.word	0x080159ec

080117fc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80117fc:	b580      	push	{r7, lr}
 80117fe:	b088      	sub	sp, #32
 8011800:	af00      	add	r7, sp, #0
 8011802:	60f8      	str	r0, [r7, #12]
 8011804:	60b9      	str	r1, [r7, #8]
 8011806:	4611      	mov	r1, r2
 8011808:	461a      	mov	r2, r3
 801180a:	460b      	mov	r3, r1
 801180c:	71fb      	strb	r3, [r7, #7]
 801180e:	4613      	mov	r3, r2
 8011810:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8011812:	68bb      	ldr	r3, [r7, #8]
 8011814:	330d      	adds	r3, #13
 8011816:	79ba      	ldrb	r2, [r7, #6]
 8011818:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801181a:	68bb      	ldr	r3, [r7, #8]
 801181c:	330b      	adds	r3, #11
 801181e:	220f      	movs	r2, #15
 8011820:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8011822:	68bb      	ldr	r3, [r7, #8]
 8011824:	330c      	adds	r3, #12
 8011826:	2200      	movs	r2, #0
 8011828:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801182a:	68bb      	ldr	r3, [r7, #8]
 801182c:	331a      	adds	r3, #26
 801182e:	2100      	movs	r1, #0
 8011830:	4618      	mov	r0, r3
 8011832:	f7fe fb71 	bl	800ff18 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8011836:	79fb      	ldrb	r3, [r7, #7]
 8011838:	1e5a      	subs	r2, r3, #1
 801183a:	4613      	mov	r3, r2
 801183c:	005b      	lsls	r3, r3, #1
 801183e:	4413      	add	r3, r2
 8011840:	009b      	lsls	r3, r3, #2
 8011842:	4413      	add	r3, r2
 8011844:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8011846:	2300      	movs	r3, #0
 8011848:	82fb      	strh	r3, [r7, #22]
 801184a:	2300      	movs	r3, #0
 801184c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801184e:	8afb      	ldrh	r3, [r7, #22]
 8011850:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011854:	4293      	cmp	r3, r2
 8011856:	d007      	beq.n	8011868 <put_lfn+0x6c>
 8011858:	69fb      	ldr	r3, [r7, #28]
 801185a:	1c5a      	adds	r2, r3, #1
 801185c:	61fa      	str	r2, [r7, #28]
 801185e:	005b      	lsls	r3, r3, #1
 8011860:	68fa      	ldr	r2, [r7, #12]
 8011862:	4413      	add	r3, r2
 8011864:	881b      	ldrh	r3, [r3, #0]
 8011866:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8011868:	4a17      	ldr	r2, [pc, #92]	; (80118c8 <put_lfn+0xcc>)
 801186a:	69bb      	ldr	r3, [r7, #24]
 801186c:	4413      	add	r3, r2
 801186e:	781b      	ldrb	r3, [r3, #0]
 8011870:	461a      	mov	r2, r3
 8011872:	68bb      	ldr	r3, [r7, #8]
 8011874:	4413      	add	r3, r2
 8011876:	8afa      	ldrh	r2, [r7, #22]
 8011878:	4611      	mov	r1, r2
 801187a:	4618      	mov	r0, r3
 801187c:	f7fe fb4c 	bl	800ff18 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011880:	8afb      	ldrh	r3, [r7, #22]
 8011882:	2b00      	cmp	r3, #0
 8011884:	d102      	bne.n	801188c <put_lfn+0x90>
 8011886:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801188a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801188c:	69bb      	ldr	r3, [r7, #24]
 801188e:	3301      	adds	r3, #1
 8011890:	61bb      	str	r3, [r7, #24]
 8011892:	69bb      	ldr	r3, [r7, #24]
 8011894:	2b0c      	cmp	r3, #12
 8011896:	d9da      	bls.n	801184e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8011898:	8afb      	ldrh	r3, [r7, #22]
 801189a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801189e:	4293      	cmp	r3, r2
 80118a0:	d006      	beq.n	80118b0 <put_lfn+0xb4>
 80118a2:	69fb      	ldr	r3, [r7, #28]
 80118a4:	005b      	lsls	r3, r3, #1
 80118a6:	68fa      	ldr	r2, [r7, #12]
 80118a8:	4413      	add	r3, r2
 80118aa:	881b      	ldrh	r3, [r3, #0]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d103      	bne.n	80118b8 <put_lfn+0xbc>
 80118b0:	79fb      	ldrb	r3, [r7, #7]
 80118b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118b6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80118b8:	68bb      	ldr	r3, [r7, #8]
 80118ba:	79fa      	ldrb	r2, [r7, #7]
 80118bc:	701a      	strb	r2, [r3, #0]
}
 80118be:	bf00      	nop
 80118c0:	3720      	adds	r7, #32
 80118c2:	46bd      	mov	sp, r7
 80118c4:	bd80      	pop	{r7, pc}
 80118c6:	bf00      	nop
 80118c8:	080159ec 	.word	0x080159ec

080118cc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b08c      	sub	sp, #48	; 0x30
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	60f8      	str	r0, [r7, #12]
 80118d4:	60b9      	str	r1, [r7, #8]
 80118d6:	607a      	str	r2, [r7, #4]
 80118d8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80118da:	220b      	movs	r2, #11
 80118dc:	68b9      	ldr	r1, [r7, #8]
 80118de:	68f8      	ldr	r0, [r7, #12]
 80118e0:	f7fe fbe8 	bl	80100b4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80118e4:	683b      	ldr	r3, [r7, #0]
 80118e6:	2b05      	cmp	r3, #5
 80118e8:	d929      	bls.n	801193e <gen_numname+0x72>
		sr = seq;
 80118ea:	683b      	ldr	r3, [r7, #0]
 80118ec:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80118ee:	e020      	b.n	8011932 <gen_numname+0x66>
			wc = *lfn++;
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	1c9a      	adds	r2, r3, #2
 80118f4:	607a      	str	r2, [r7, #4]
 80118f6:	881b      	ldrh	r3, [r3, #0]
 80118f8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80118fa:	2300      	movs	r3, #0
 80118fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80118fe:	e015      	b.n	801192c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8011900:	69fb      	ldr	r3, [r7, #28]
 8011902:	005a      	lsls	r2, r3, #1
 8011904:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011906:	f003 0301 	and.w	r3, r3, #1
 801190a:	4413      	add	r3, r2
 801190c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801190e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011910:	085b      	lsrs	r3, r3, #1
 8011912:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8011914:	69fb      	ldr	r3, [r7, #28]
 8011916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801191a:	2b00      	cmp	r3, #0
 801191c:	d003      	beq.n	8011926 <gen_numname+0x5a>
 801191e:	69fa      	ldr	r2, [r7, #28]
 8011920:	4b31      	ldr	r3, [pc, #196]	; (80119e8 <gen_numname+0x11c>)
 8011922:	4053      	eors	r3, r2
 8011924:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8011926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011928:	3301      	adds	r3, #1
 801192a:	62bb      	str	r3, [r7, #40]	; 0x28
 801192c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801192e:	2b0f      	cmp	r3, #15
 8011930:	d9e6      	bls.n	8011900 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	881b      	ldrh	r3, [r3, #0]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d1da      	bne.n	80118f0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801193a:	69fb      	ldr	r3, [r7, #28]
 801193c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801193e:	2307      	movs	r3, #7
 8011940:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8011942:	683b      	ldr	r3, [r7, #0]
 8011944:	b2db      	uxtb	r3, r3
 8011946:	f003 030f 	and.w	r3, r3, #15
 801194a:	b2db      	uxtb	r3, r3
 801194c:	3330      	adds	r3, #48	; 0x30
 801194e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8011952:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011956:	2b39      	cmp	r3, #57	; 0x39
 8011958:	d904      	bls.n	8011964 <gen_numname+0x98>
 801195a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801195e:	3307      	adds	r3, #7
 8011960:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8011964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011966:	1e5a      	subs	r2, r3, #1
 8011968:	62ba      	str	r2, [r7, #40]	; 0x28
 801196a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801196e:	4413      	add	r3, r2
 8011970:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8011974:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8011978:	683b      	ldr	r3, [r7, #0]
 801197a:	091b      	lsrs	r3, r3, #4
 801197c:	603b      	str	r3, [r7, #0]
	} while (seq);
 801197e:	683b      	ldr	r3, [r7, #0]
 8011980:	2b00      	cmp	r3, #0
 8011982:	d1de      	bne.n	8011942 <gen_numname+0x76>
	ns[i] = '~';
 8011984:	f107 0214 	add.w	r2, r7, #20
 8011988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801198a:	4413      	add	r3, r2
 801198c:	227e      	movs	r2, #126	; 0x7e
 801198e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8011990:	2300      	movs	r3, #0
 8011992:	627b      	str	r3, [r7, #36]	; 0x24
 8011994:	e002      	b.n	801199c <gen_numname+0xd0>
 8011996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011998:	3301      	adds	r3, #1
 801199a:	627b      	str	r3, [r7, #36]	; 0x24
 801199c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801199e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119a0:	429a      	cmp	r2, r3
 80119a2:	d205      	bcs.n	80119b0 <gen_numname+0xe4>
 80119a4:	68fa      	ldr	r2, [r7, #12]
 80119a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119a8:	4413      	add	r3, r2
 80119aa:	781b      	ldrb	r3, [r3, #0]
 80119ac:	2b20      	cmp	r3, #32
 80119ae:	d1f2      	bne.n	8011996 <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80119b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119b2:	2b07      	cmp	r3, #7
 80119b4:	d808      	bhi.n	80119c8 <gen_numname+0xfc>
 80119b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119b8:	1c5a      	adds	r2, r3, #1
 80119ba:	62ba      	str	r2, [r7, #40]	; 0x28
 80119bc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80119c0:	4413      	add	r3, r2
 80119c2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80119c6:	e000      	b.n	80119ca <gen_numname+0xfe>
 80119c8:	2120      	movs	r1, #32
 80119ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119cc:	1c5a      	adds	r2, r3, #1
 80119ce:	627a      	str	r2, [r7, #36]	; 0x24
 80119d0:	68fa      	ldr	r2, [r7, #12]
 80119d2:	4413      	add	r3, r2
 80119d4:	460a      	mov	r2, r1
 80119d6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80119d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119da:	2b07      	cmp	r3, #7
 80119dc:	d9e8      	bls.n	80119b0 <gen_numname+0xe4>
}
 80119de:	bf00      	nop
 80119e0:	3730      	adds	r7, #48	; 0x30
 80119e2:	46bd      	mov	sp, r7
 80119e4:	bd80      	pop	{r7, pc}
 80119e6:	bf00      	nop
 80119e8:	00011021 	.word	0x00011021

080119ec <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80119ec:	b480      	push	{r7}
 80119ee:	b085      	sub	sp, #20
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80119f4:	2300      	movs	r3, #0
 80119f6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80119f8:	230b      	movs	r3, #11
 80119fa:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80119fc:	7bfb      	ldrb	r3, [r7, #15]
 80119fe:	b2da      	uxtb	r2, r3
 8011a00:	0852      	lsrs	r2, r2, #1
 8011a02:	01db      	lsls	r3, r3, #7
 8011a04:	4313      	orrs	r3, r2
 8011a06:	b2da      	uxtb	r2, r3
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	1c59      	adds	r1, r3, #1
 8011a0c:	6079      	str	r1, [r7, #4]
 8011a0e:	781b      	ldrb	r3, [r3, #0]
 8011a10:	4413      	add	r3, r2
 8011a12:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8011a14:	68bb      	ldr	r3, [r7, #8]
 8011a16:	3b01      	subs	r3, #1
 8011a18:	60bb      	str	r3, [r7, #8]
 8011a1a:	68bb      	ldr	r3, [r7, #8]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d1ed      	bne.n	80119fc <sum_sfn+0x10>
	return sum;
 8011a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a22:	4618      	mov	r0, r3
 8011a24:	3714      	adds	r7, #20
 8011a26:	46bd      	mov	sp, r7
 8011a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a2c:	4770      	bx	lr

08011a2e <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 8011a2e:	b480      	push	{r7}
 8011a30:	b087      	sub	sp, #28
 8011a32:	af00      	add	r7, sp, #0
 8011a34:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	3301      	adds	r3, #1
 8011a3a:	781b      	ldrb	r3, [r3, #0]
 8011a3c:	3301      	adds	r3, #1
 8011a3e:	015b      	lsls	r3, r3, #5
 8011a40:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 8011a42:	2300      	movs	r3, #0
 8011a44:	827b      	strh	r3, [r7, #18]
 8011a46:	2300      	movs	r3, #0
 8011a48:	617b      	str	r3, [r7, #20]
 8011a4a:	e018      	b.n	8011a7e <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 8011a4c:	697b      	ldr	r3, [r7, #20]
 8011a4e:	2b02      	cmp	r3, #2
 8011a50:	d103      	bne.n	8011a5a <xdir_sum+0x2c>
			i++;
 8011a52:	697b      	ldr	r3, [r7, #20]
 8011a54:	3301      	adds	r3, #1
 8011a56:	617b      	str	r3, [r7, #20]
 8011a58:	e00e      	b.n	8011a78 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8011a5a:	8a7b      	ldrh	r3, [r7, #18]
 8011a5c:	03db      	lsls	r3, r3, #15
 8011a5e:	b29a      	uxth	r2, r3
 8011a60:	8a7b      	ldrh	r3, [r7, #18]
 8011a62:	085b      	lsrs	r3, r3, #1
 8011a64:	b29b      	uxth	r3, r3
 8011a66:	4413      	add	r3, r2
 8011a68:	b29a      	uxth	r2, r3
 8011a6a:	6879      	ldr	r1, [r7, #4]
 8011a6c:	697b      	ldr	r3, [r7, #20]
 8011a6e:	440b      	add	r3, r1
 8011a70:	781b      	ldrb	r3, [r3, #0]
 8011a72:	b29b      	uxth	r3, r3
 8011a74:	4413      	add	r3, r2
 8011a76:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 8011a78:	697b      	ldr	r3, [r7, #20]
 8011a7a:	3301      	adds	r3, #1
 8011a7c:	617b      	str	r3, [r7, #20]
 8011a7e:	697a      	ldr	r2, [r7, #20]
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	429a      	cmp	r2, r3
 8011a84:	d3e2      	bcc.n	8011a4c <xdir_sum+0x1e>
		}
	}
	return sum;
 8011a86:	8a7b      	ldrh	r3, [r7, #18]
}
 8011a88:	4618      	mov	r0, r3
 8011a8a:	371c      	adds	r7, #28
 8011a8c:	46bd      	mov	sp, r7
 8011a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a92:	4770      	bx	lr

08011a94 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b084      	sub	sp, #16
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 8011aa0:	e01f      	b.n	8011ae2 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 8011aa2:	89bb      	ldrh	r3, [r7, #12]
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	f003 f843 	bl	8014b30 <ff_wtoupper>
 8011aaa:	4603      	mov	r3, r0
 8011aac:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8011aae:	89fb      	ldrh	r3, [r7, #14]
 8011ab0:	03db      	lsls	r3, r3, #15
 8011ab2:	b29a      	uxth	r2, r3
 8011ab4:	89fb      	ldrh	r3, [r7, #14]
 8011ab6:	085b      	lsrs	r3, r3, #1
 8011ab8:	b29b      	uxth	r3, r3
 8011aba:	4413      	add	r3, r2
 8011abc:	b29a      	uxth	r2, r3
 8011abe:	89bb      	ldrh	r3, [r7, #12]
 8011ac0:	b2db      	uxtb	r3, r3
 8011ac2:	b29b      	uxth	r3, r3
 8011ac4:	4413      	add	r3, r2
 8011ac6:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8011ac8:	89fb      	ldrh	r3, [r7, #14]
 8011aca:	03db      	lsls	r3, r3, #15
 8011acc:	b29a      	uxth	r2, r3
 8011ace:	89fb      	ldrh	r3, [r7, #14]
 8011ad0:	085b      	lsrs	r3, r3, #1
 8011ad2:	b29b      	uxth	r3, r3
 8011ad4:	4413      	add	r3, r2
 8011ad6:	b29a      	uxth	r2, r3
 8011ad8:	89bb      	ldrh	r3, [r7, #12]
 8011ada:	0a1b      	lsrs	r3, r3, #8
 8011adc:	b29b      	uxth	r3, r3
 8011ade:	4413      	add	r3, r2
 8011ae0:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	1c9a      	adds	r2, r3, #2
 8011ae6:	607a      	str	r2, [r7, #4]
 8011ae8:	881b      	ldrh	r3, [r3, #0]
 8011aea:	81bb      	strh	r3, [r7, #12]
 8011aec:	89bb      	ldrh	r3, [r7, #12]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d1d7      	bne.n	8011aa2 <xname_sum+0xe>
	}
	return sum;
 8011af2:	89fb      	ldrh	r3, [r7, #14]
}
 8011af4:	4618      	mov	r0, r3
 8011af6:	3710      	adds	r7, #16
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bd80      	pop	{r7, pc}

08011afc <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 8011afc:	b590      	push	{r4, r7, lr}
 8011afe:	b087      	sub	sp, #28
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	695b      	ldr	r3, [r3, #20]
 8011b0a:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	681a      	ldr	r2, [r3, #0]
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b14:	4619      	mov	r1, r3
 8011b16:	4610      	mov	r0, r2
 8011b18:	f7fe fcfa 	bl	8010510 <move_window>
 8011b1c:	4603      	mov	r3, r0
 8011b1e:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8011b20:	7bfb      	ldrb	r3, [r7, #15]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d001      	beq.n	8011b2a <load_xdir+0x2e>
 8011b26:	7bfb      	ldrb	r3, [r7, #15]
 8011b28:	e09f      	b.n	8011c6a <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b2e:	781b      	ldrb	r3, [r3, #0]
 8011b30:	2b85      	cmp	r3, #133	; 0x85
 8011b32:	d001      	beq.n	8011b38 <load_xdir+0x3c>
 8011b34:	2302      	movs	r3, #2
 8011b36:	e098      	b.n	8011c6a <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b3c:	2220      	movs	r2, #32
 8011b3e:	4619      	mov	r1, r3
 8011b40:	6938      	ldr	r0, [r7, #16]
 8011b42:	f7fe fab7 	bl	80100b4 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 8011b46:	693b      	ldr	r3, [r7, #16]
 8011b48:	3301      	adds	r3, #1
 8011b4a:	781b      	ldrb	r3, [r3, #0]
 8011b4c:	3301      	adds	r3, #1
 8011b4e:	015b      	lsls	r3, r3, #5
 8011b50:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 8011b52:	68bb      	ldr	r3, [r7, #8]
 8011b54:	2b5f      	cmp	r3, #95	; 0x5f
 8011b56:	d903      	bls.n	8011b60 <load_xdir+0x64>
 8011b58:	68bb      	ldr	r3, [r7, #8]
 8011b5a:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8011b5e:	d901      	bls.n	8011b64 <load_xdir+0x68>
 8011b60:	2302      	movs	r3, #2
 8011b62:	e082      	b.n	8011c6a <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 8011b64:	2100      	movs	r1, #0
 8011b66:	6878      	ldr	r0, [r7, #4]
 8011b68:	f7ff fbf2 	bl	8011350 <dir_next>
 8011b6c:	4603      	mov	r3, r0
 8011b6e:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8011b70:	7bfb      	ldrb	r3, [r7, #15]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d001      	beq.n	8011b7a <load_xdir+0x7e>
 8011b76:	7bfb      	ldrb	r3, [r7, #15]
 8011b78:	e077      	b.n	8011c6a <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	681a      	ldr	r2, [r3, #0]
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b82:	4619      	mov	r1, r3
 8011b84:	4610      	mov	r0, r2
 8011b86:	f7fe fcc3 	bl	8010510 <move_window>
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8011b8e:	7bfb      	ldrb	r3, [r7, #15]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d001      	beq.n	8011b98 <load_xdir+0x9c>
 8011b94:	7bfb      	ldrb	r3, [r7, #15]
 8011b96:	e068      	b.n	8011c6a <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b9c:	781b      	ldrb	r3, [r3, #0]
 8011b9e:	2bc0      	cmp	r3, #192	; 0xc0
 8011ba0:	d001      	beq.n	8011ba6 <load_xdir+0xaa>
 8011ba2:	2302      	movs	r3, #2
 8011ba4:	e061      	b.n	8011c6a <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 8011ba6:	693b      	ldr	r3, [r7, #16]
 8011ba8:	f103 0020 	add.w	r0, r3, #32
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011bb0:	2220      	movs	r2, #32
 8011bb2:	4619      	mov	r1, r3
 8011bb4:	f7fe fa7e 	bl	80100b4 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8011bb8:	693b      	ldr	r3, [r7, #16]
 8011bba:	3323      	adds	r3, #35	; 0x23
 8011bbc:	781b      	ldrb	r3, [r3, #0]
 8011bbe:	332c      	adds	r3, #44	; 0x2c
 8011bc0:	4a2c      	ldr	r2, [pc, #176]	; (8011c74 <load_xdir+0x178>)
 8011bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8011bc6:	08db      	lsrs	r3, r3, #3
 8011bc8:	015b      	lsls	r3, r3, #5
 8011bca:	68ba      	ldr	r2, [r7, #8]
 8011bcc:	429a      	cmp	r2, r3
 8011bce:	d201      	bcs.n	8011bd4 <load_xdir+0xd8>
 8011bd0:	2302      	movs	r3, #2
 8011bd2:	e04a      	b.n	8011c6a <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 8011bd4:	2340      	movs	r3, #64	; 0x40
 8011bd6:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 8011bd8:	2100      	movs	r1, #0
 8011bda:	6878      	ldr	r0, [r7, #4]
 8011bdc:	f7ff fbb8 	bl	8011350 <dir_next>
 8011be0:	4603      	mov	r3, r0
 8011be2:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8011be4:	7bfb      	ldrb	r3, [r7, #15]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d001      	beq.n	8011bee <load_xdir+0xf2>
 8011bea:	7bfb      	ldrb	r3, [r7, #15]
 8011bec:	e03d      	b.n	8011c6a <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	681a      	ldr	r2, [r3, #0]
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bf6:	4619      	mov	r1, r3
 8011bf8:	4610      	mov	r0, r2
 8011bfa:	f7fe fc89 	bl	8010510 <move_window>
 8011bfe:	4603      	mov	r3, r0
 8011c00:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8011c02:	7bfb      	ldrb	r3, [r7, #15]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d001      	beq.n	8011c0c <load_xdir+0x110>
 8011c08:	7bfb      	ldrb	r3, [r7, #15]
 8011c0a:	e02e      	b.n	8011c6a <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c10:	781b      	ldrb	r3, [r3, #0]
 8011c12:	2bc1      	cmp	r3, #193	; 0xc1
 8011c14:	d001      	beq.n	8011c1a <load_xdir+0x11e>
 8011c16:	2302      	movs	r3, #2
 8011c18:	e027      	b.n	8011c6a <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 8011c1a:	697b      	ldr	r3, [r7, #20]
 8011c1c:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8011c20:	d208      	bcs.n	8011c34 <load_xdir+0x138>
 8011c22:	693a      	ldr	r2, [r7, #16]
 8011c24:	697b      	ldr	r3, [r7, #20]
 8011c26:	18d0      	adds	r0, r2, r3
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c2c:	2220      	movs	r2, #32
 8011c2e:	4619      	mov	r1, r3
 8011c30:	f7fe fa40 	bl	80100b4 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 8011c34:	697b      	ldr	r3, [r7, #20]
 8011c36:	3320      	adds	r3, #32
 8011c38:	617b      	str	r3, [r7, #20]
 8011c3a:	697a      	ldr	r2, [r7, #20]
 8011c3c:	68bb      	ldr	r3, [r7, #8]
 8011c3e:	429a      	cmp	r2, r3
 8011c40:	d3ca      	bcc.n	8011bd8 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 8011c42:	697b      	ldr	r3, [r7, #20]
 8011c44:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8011c48:	d80e      	bhi.n	8011c68 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8011c4a:	6938      	ldr	r0, [r7, #16]
 8011c4c:	f7ff feef 	bl	8011a2e <xdir_sum>
 8011c50:	4603      	mov	r3, r0
 8011c52:	461c      	mov	r4, r3
 8011c54:	693b      	ldr	r3, [r7, #16]
 8011c56:	3302      	adds	r3, #2
 8011c58:	4618      	mov	r0, r3
 8011c5a:	f7fe f865 	bl	800fd28 <ld_word>
 8011c5e:	4603      	mov	r3, r0
 8011c60:	429c      	cmp	r4, r3
 8011c62:	d001      	beq.n	8011c68 <load_xdir+0x16c>
 8011c64:	2302      	movs	r3, #2
 8011c66:	e000      	b.n	8011c6a <load_xdir+0x16e>
	}
	return FR_OK;
 8011c68:	2300      	movs	r3, #0
}
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	371c      	adds	r7, #28
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	bd90      	pop	{r4, r7, pc}
 8011c72:	bf00      	nop
 8011c74:	88888889 	.word	0x88888889

08011c78 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 8011c78:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8011c7c:	b084      	sub	sp, #16
 8011c7e:	af00      	add	r7, sp, #0
 8011c80:	6078      	str	r0, [r7, #4]
 8011c82:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 8011c84:	683b      	ldr	r3, [r7, #0]
 8011c86:	681a      	ldr	r2, [r3, #0]
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	601a      	str	r2, [r3, #0]
	dp->obj.sclust = obj->c_scl;
 8011c8c:	683b      	ldr	r3, [r7, #0]
 8011c8e:	6a1a      	ldr	r2, [r3, #32]
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	609a      	str	r2, [r3, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 8011c94:	683b      	ldr	r3, [r7, #0]
 8011c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c98:	b2da      	uxtb	r2, r3
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	71da      	strb	r2, [r3, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8011c9e:	683b      	ldr	r3, [r7, #0]
 8011ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ca2:	469b      	mov	fp, r3
 8011ca4:	f04f 0c00 	mov.w	ip, #0
 8011ca8:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8011cac:	f04f 0200 	mov.w	r2, #0
 8011cb0:	ea0b 0301 	and.w	r3, fp, r1
 8011cb4:	ea0c 0402 	and.w	r4, ip, r2
 8011cb8:	687a      	ldr	r2, [r7, #4]
 8011cba:	e9c2 3404 	strd	r3, r4, [r2, #16]
	dp->blk_ofs = obj->c_ofs;
 8011cbe:	683b      	ldr	r3, [r7, #0]
 8011cc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011cca:	4619      	mov	r1, r3
 8011ccc:	6878      	ldr	r0, [r7, #4]
 8011cce:	f7ff faab 	bl	8011228 <dir_sdi>
 8011cd2:	4603      	mov	r3, r0
 8011cd4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011cd6:	7bfb      	ldrb	r3, [r7, #15]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d104      	bne.n	8011ce6 <load_obj_dir+0x6e>
		res = load_xdir(dp);		/* Load the object's entry block */
 8011cdc:	6878      	ldr	r0, [r7, #4]
 8011cde:	f7ff ff0d 	bl	8011afc <load_xdir>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 8011ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ce8:	4618      	mov	r0, r3
 8011cea:	3710      	adds	r7, #16
 8011cec:	46bd      	mov	sp, r7
 8011cee:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08011cf2 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 8011cf2:	b590      	push	{r4, r7, lr}
 8011cf4:	b087      	sub	sp, #28
 8011cf6:	af00      	add	r7, sp, #0
 8011cf8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	695b      	ldr	r3, [r3, #20]
 8011d00:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	1c9c      	adds	r4, r3, #2
 8011d06:	68f8      	ldr	r0, [r7, #12]
 8011d08:	f7ff fe91 	bl	8011a2e <xdir_sum>
 8011d0c:	4603      	mov	r3, r0
 8011d0e:	4619      	mov	r1, r3
 8011d10:	4620      	mov	r0, r4
 8011d12:	f7fe f901 	bl	800ff18 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	3301      	adds	r3, #1
 8011d1a:	781b      	ldrb	r3, [r3, #0]
 8011d1c:	3301      	adds	r3, #1
 8011d1e:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011d24:	4619      	mov	r1, r3
 8011d26:	6878      	ldr	r0, [r7, #4]
 8011d28:	f7ff fa7e 	bl	8011228 <dir_sdi>
 8011d2c:	4603      	mov	r3, r0
 8011d2e:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8011d30:	e026      	b.n	8011d80 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	681a      	ldr	r2, [r3, #0]
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d3a:	4619      	mov	r1, r3
 8011d3c:	4610      	mov	r0, r2
 8011d3e:	f7fe fbe7 	bl	8010510 <move_window>
 8011d42:	4603      	mov	r3, r0
 8011d44:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011d46:	7dfb      	ldrb	r3, [r7, #23]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d11d      	bne.n	8011d88 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d50:	2220      	movs	r2, #32
 8011d52:	68f9      	ldr	r1, [r7, #12]
 8011d54:	4618      	mov	r0, r3
 8011d56:	f7fe f9ad 	bl	80100b4 <mem_cpy>
		dp->obj.fs->wflag = 1;
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	2201      	movs	r2, #1
 8011d60:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 8011d62:	693b      	ldr	r3, [r7, #16]
 8011d64:	3b01      	subs	r3, #1
 8011d66:	613b      	str	r3, [r7, #16]
 8011d68:	693b      	ldr	r3, [r7, #16]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d00e      	beq.n	8011d8c <store_xdir+0x9a>
		dirb += SZDIRE;
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	3320      	adds	r3, #32
 8011d72:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 8011d74:	2100      	movs	r1, #0
 8011d76:	6878      	ldr	r0, [r7, #4]
 8011d78:	f7ff faea 	bl	8011350 <dir_next>
 8011d7c:	4603      	mov	r3, r0
 8011d7e:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8011d80:	7dfb      	ldrb	r3, [r7, #23]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d0d5      	beq.n	8011d32 <store_xdir+0x40>
 8011d86:	e002      	b.n	8011d8e <store_xdir+0x9c>
		if (res != FR_OK) break;
 8011d88:	bf00      	nop
 8011d8a:	e000      	b.n	8011d8e <store_xdir+0x9c>
		if (--nent == 0) break;
 8011d8c:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 8011d8e:	7dfb      	ldrb	r3, [r7, #23]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d002      	beq.n	8011d9a <store_xdir+0xa8>
 8011d94:	7dfb      	ldrb	r3, [r7, #23]
 8011d96:	2b01      	cmp	r3, #1
 8011d98:	d101      	bne.n	8011d9e <store_xdir+0xac>
 8011d9a:	7dfb      	ldrb	r3, [r7, #23]
 8011d9c:	e000      	b.n	8011da0 <store_xdir+0xae>
 8011d9e:	2302      	movs	r3, #2
}
 8011da0:	4618      	mov	r0, r3
 8011da2:	371c      	adds	r7, #28
 8011da4:	46bd      	mov	sp, r7
 8011da6:	bd90      	pop	{r4, r7, pc}

08011da8 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 8011da8:	b590      	push	{r4, r7, lr}
 8011daa:	b085      	sub	sp, #20
 8011dac:	af00      	add	r7, sp, #0
 8011dae:	6078      	str	r0, [r7, #4]
 8011db0:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 8011db2:	2240      	movs	r2, #64	; 0x40
 8011db4:	2100      	movs	r1, #0
 8011db6:	6878      	ldr	r0, [r7, #4]
 8011db8:	f7fe f99d 	bl	80100f6 <mem_set>
	dirb[XDIR_Type] = 0x85;
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	2285      	movs	r2, #133	; 0x85
 8011dc0:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	3320      	adds	r3, #32
 8011dc6:	22c0      	movs	r2, #192	; 0xc0
 8011dc8:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 8011dca:	2300      	movs	r3, #0
 8011dcc:	72bb      	strb	r3, [r7, #10]
 8011dce:	2301      	movs	r3, #1
 8011dd0:	72fb      	strb	r3, [r7, #11]
 8011dd2:	2301      	movs	r3, #1
 8011dd4:	813b      	strh	r3, [r7, #8]
 8011dd6:	2340      	movs	r3, #64	; 0x40
 8011dd8:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	1c5a      	adds	r2, r3, #1
 8011dde:	60fa      	str	r2, [r7, #12]
 8011de0:	687a      	ldr	r2, [r7, #4]
 8011de2:	4413      	add	r3, r2
 8011de4:	22c1      	movs	r2, #193	; 0xc1
 8011de6:	701a      	strb	r2, [r3, #0]
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	1c5a      	adds	r2, r3, #1
 8011dec:	60fa      	str	r2, [r7, #12]
 8011dee:	687a      	ldr	r2, [r7, #4]
 8011df0:	4413      	add	r3, r2
 8011df2:	2200      	movs	r2, #0
 8011df4:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 8011df6:	893b      	ldrh	r3, [r7, #8]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d00b      	beq.n	8011e14 <create_xdir+0x6c>
 8011dfc:	7abb      	ldrb	r3, [r7, #10]
 8011dfe:	005b      	lsls	r3, r3, #1
 8011e00:	683a      	ldr	r2, [r7, #0]
 8011e02:	4413      	add	r3, r2
 8011e04:	881b      	ldrh	r3, [r3, #0]
 8011e06:	813b      	strh	r3, [r7, #8]
 8011e08:	893b      	ldrh	r3, [r7, #8]
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d002      	beq.n	8011e14 <create_xdir+0x6c>
 8011e0e:	7abb      	ldrb	r3, [r7, #10]
 8011e10:	3301      	adds	r3, #1
 8011e12:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 8011e14:	687a      	ldr	r2, [r7, #4]
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	4413      	add	r3, r2
 8011e1a:	893a      	ldrh	r2, [r7, #8]
 8011e1c:	4611      	mov	r1, r2
 8011e1e:	4618      	mov	r0, r3
 8011e20:	f7fe f87a 	bl	800ff18 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	3302      	adds	r3, #2
 8011e28:	60fb      	str	r3, [r7, #12]
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	f003 031f 	and.w	r3, r3, #31
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d1e0      	bne.n	8011df6 <create_xdir+0x4e>
		nb++;
 8011e34:	7afb      	ldrb	r3, [r7, #11]
 8011e36:	3301      	adds	r3, #1
 8011e38:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 8011e3a:	7abb      	ldrb	r3, [r7, #10]
 8011e3c:	005b      	lsls	r3, r3, #1
 8011e3e:	683a      	ldr	r2, [r7, #0]
 8011e40:	4413      	add	r3, r2
 8011e42:	881b      	ldrh	r3, [r3, #0]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d1c8      	bne.n	8011dda <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	3323      	adds	r3, #35	; 0x23
 8011e4c:	7aba      	ldrb	r2, [r7, #10]
 8011e4e:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	3301      	adds	r3, #1
 8011e54:	7afa      	ldrb	r2, [r7, #11]
 8011e56:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8011e5e:	6838      	ldr	r0, [r7, #0]
 8011e60:	f7ff fe18 	bl	8011a94 <xname_sum>
 8011e64:	4603      	mov	r3, r0
 8011e66:	4619      	mov	r1, r3
 8011e68:	4620      	mov	r0, r4
 8011e6a:	f7fe f855 	bl	800ff18 <st_word>
}
 8011e6e:	bf00      	nop
 8011e70:	3714      	adds	r7, #20
 8011e72:	46bd      	mov	sp, r7
 8011e74:	bd90      	pop	{r4, r7, pc}

08011e76 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8011e76:	b580      	push	{r7, lr}
 8011e78:	b086      	sub	sp, #24
 8011e7a:	af00      	add	r7, sp, #0
 8011e7c:	6078      	str	r0, [r7, #4]
 8011e7e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8011e80:	2304      	movs	r3, #4
 8011e82:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8011e8a:	23ff      	movs	r3, #255	; 0xff
 8011e8c:	757b      	strb	r3, [r7, #21]
 8011e8e:	23ff      	movs	r3, #255	; 0xff
 8011e90:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8011e92:	e09f      	b.n	8011fd4 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e98:	4619      	mov	r1, r3
 8011e9a:	6938      	ldr	r0, [r7, #16]
 8011e9c:	f7fe fb38 	bl	8010510 <move_window>
 8011ea0:	4603      	mov	r3, r0
 8011ea2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011ea4:	7dfb      	ldrb	r3, [r7, #23]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	f040 809a 	bne.w	8011fe0 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011eb0:	781b      	ldrb	r3, [r3, #0]
 8011eb2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8011eb4:	7dbb      	ldrb	r3, [r7, #22]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d102      	bne.n	8011ec0 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8011eba:	2304      	movs	r3, #4
 8011ebc:	75fb      	strb	r3, [r7, #23]
 8011ebe:	e096      	b.n	8011fee <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8011ec0:	693b      	ldr	r3, [r7, #16]
 8011ec2:	781b      	ldrb	r3, [r3, #0]
 8011ec4:	2b04      	cmp	r3, #4
 8011ec6:	d118      	bne.n	8011efa <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 8011ec8:	7dbb      	ldrb	r3, [r7, #22]
 8011eca:	2b85      	cmp	r3, #133	; 0x85
 8011ecc:	d179      	bne.n	8011fc2 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 8011ed6:	6878      	ldr	r0, [r7, #4]
 8011ed8:	f7ff fe10 	bl	8011afc <load_xdir>
 8011edc:	4603      	mov	r3, r0
 8011ede:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 8011ee0:	7dfb      	ldrb	r3, [r7, #23]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d17e      	bne.n	8011fe4 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8011ee6:	693b      	ldr	r3, [r7, #16]
 8011ee8:	695b      	ldr	r3, [r3, #20]
 8011eea:	3304      	adds	r3, #4
 8011eec:	781b      	ldrb	r3, [r3, #0]
 8011eee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011ef2:	b2da      	uxtb	r2, r3
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	719a      	strb	r2, [r3, #6]
					}
					break;
 8011ef8:	e074      	b.n	8011fe4 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011efe:	330b      	adds	r3, #11
 8011f00:	781b      	ldrb	r3, [r3, #0]
 8011f02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011f06:	73fb      	strb	r3, [r7, #15]
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	7bfa      	ldrb	r2, [r7, #15]
 8011f0c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8011f0e:	7dbb      	ldrb	r3, [r7, #22]
 8011f10:	2be5      	cmp	r3, #229	; 0xe5
 8011f12:	d00e      	beq.n	8011f32 <dir_read+0xbc>
 8011f14:	7dbb      	ldrb	r3, [r7, #22]
 8011f16:	2b2e      	cmp	r3, #46	; 0x2e
 8011f18:	d00b      	beq.n	8011f32 <dir_read+0xbc>
 8011f1a:	7bfb      	ldrb	r3, [r7, #15]
 8011f1c:	f023 0320 	bic.w	r3, r3, #32
 8011f20:	2b08      	cmp	r3, #8
 8011f22:	bf0c      	ite	eq
 8011f24:	2301      	moveq	r3, #1
 8011f26:	2300      	movne	r3, #0
 8011f28:	b2db      	uxtb	r3, r3
 8011f2a:	461a      	mov	r2, r3
 8011f2c:	683b      	ldr	r3, [r7, #0]
 8011f2e:	4293      	cmp	r3, r2
 8011f30:	d002      	beq.n	8011f38 <dir_read+0xc2>
				ord = 0xFF;
 8011f32:	23ff      	movs	r3, #255	; 0xff
 8011f34:	757b      	strb	r3, [r7, #21]
 8011f36:	e044      	b.n	8011fc2 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8011f38:	7bfb      	ldrb	r3, [r7, #15]
 8011f3a:	2b0f      	cmp	r3, #15
 8011f3c:	d12f      	bne.n	8011f9e <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8011f3e:	7dbb      	ldrb	r3, [r7, #22]
 8011f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d00d      	beq.n	8011f64 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f4c:	7b5b      	ldrb	r3, [r3, #13]
 8011f4e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8011f50:	7dbb      	ldrb	r3, [r7, #22]
 8011f52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011f56:	75bb      	strb	r3, [r7, #22]
 8011f58:	7dbb      	ldrb	r3, [r7, #22]
 8011f5a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011f64:	7dba      	ldrb	r2, [r7, #22]
 8011f66:	7d7b      	ldrb	r3, [r7, #21]
 8011f68:	429a      	cmp	r2, r3
 8011f6a:	d115      	bne.n	8011f98 <dir_read+0x122>
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f70:	330d      	adds	r3, #13
 8011f72:	781b      	ldrb	r3, [r3, #0]
 8011f74:	7d3a      	ldrb	r2, [r7, #20]
 8011f76:	429a      	cmp	r2, r3
 8011f78:	d10e      	bne.n	8011f98 <dir_read+0x122>
 8011f7a:	693b      	ldr	r3, [r7, #16]
 8011f7c:	691a      	ldr	r2, [r3, #16]
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f82:	4619      	mov	r1, r3
 8011f84:	4610      	mov	r0, r2
 8011f86:	f7ff fbd5 	bl	8011734 <pick_lfn>
 8011f8a:	4603      	mov	r3, r0
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d003      	beq.n	8011f98 <dir_read+0x122>
 8011f90:	7d7b      	ldrb	r3, [r7, #21]
 8011f92:	3b01      	subs	r3, #1
 8011f94:	b2db      	uxtb	r3, r3
 8011f96:	e000      	b.n	8011f9a <dir_read+0x124>
 8011f98:	23ff      	movs	r3, #255	; 0xff
 8011f9a:	757b      	strb	r3, [r7, #21]
 8011f9c:	e011      	b.n	8011fc2 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8011f9e:	7d7b      	ldrb	r3, [r7, #21]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d109      	bne.n	8011fb8 <dir_read+0x142>
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011fa8:	4618      	mov	r0, r3
 8011faa:	f7ff fd1f 	bl	80119ec <sum_sfn>
 8011fae:	4603      	mov	r3, r0
 8011fb0:	461a      	mov	r2, r3
 8011fb2:	7d3b      	ldrb	r3, [r7, #20]
 8011fb4:	4293      	cmp	r3, r2
 8011fb6:	d017      	beq.n	8011fe8 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	f04f 32ff 	mov.w	r2, #4294967295
 8011fbe:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 8011fc0:	e012      	b.n	8011fe8 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8011fc2:	2100      	movs	r1, #0
 8011fc4:	6878      	ldr	r0, [r7, #4]
 8011fc6:	f7ff f9c3 	bl	8011350 <dir_next>
 8011fca:	4603      	mov	r3, r0
 8011fcc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011fce:	7dfb      	ldrb	r3, [r7, #23]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d10b      	bne.n	8011fec <dir_read+0x176>
	while (dp->sect) {
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	f47f af5b 	bne.w	8011e94 <dir_read+0x1e>
 8011fde:	e006      	b.n	8011fee <dir_read+0x178>
		if (res != FR_OK) break;
 8011fe0:	bf00      	nop
 8011fe2:	e004      	b.n	8011fee <dir_read+0x178>
					break;
 8011fe4:	bf00      	nop
 8011fe6:	e002      	b.n	8011fee <dir_read+0x178>
					break;
 8011fe8:	bf00      	nop
 8011fea:	e000      	b.n	8011fee <dir_read+0x178>
		if (res != FR_OK) break;
 8011fec:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8011fee:	7dfb      	ldrb	r3, [r7, #23]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d002      	beq.n	8011ffa <dir_read+0x184>
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	2200      	movs	r2, #0
 8011ff8:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 8011ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	3718      	adds	r7, #24
 8012000:	46bd      	mov	sp, r7
 8012002:	bd80      	pop	{r7, pc}

08012004 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012004:	b590      	push	{r4, r7, lr}
 8012006:	b089      	sub	sp, #36	; 0x24
 8012008:	af00      	add	r7, sp, #0
 801200a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012012:	2100      	movs	r1, #0
 8012014:	6878      	ldr	r0, [r7, #4]
 8012016:	f7ff f907 	bl	8011228 <dir_sdi>
 801201a:	4603      	mov	r3, r0
 801201c:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 801201e:	7ffb      	ldrb	r3, [r7, #31]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d001      	beq.n	8012028 <dir_find+0x24>
 8012024:	7ffb      	ldrb	r3, [r7, #31]
 8012026:	e112      	b.n	801224e <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	781b      	ldrb	r3, [r3, #0]
 801202c:	2b04      	cmp	r3, #4
 801202e:	d164      	bne.n	80120fa <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	691b      	ldr	r3, [r3, #16]
 8012034:	4618      	mov	r0, r3
 8012036:	f7ff fd2d 	bl	8011a94 <xname_sum>
 801203a:	4603      	mov	r3, r0
 801203c:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 801203e:	e04f      	b.n	80120e0 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	695b      	ldr	r3, [r3, #20]
 8012044:	3324      	adds	r3, #36	; 0x24
 8012046:	4618      	mov	r0, r3
 8012048:	f7fd fe6e 	bl	800fd28 <ld_word>
 801204c:	4603      	mov	r3, r0
 801204e:	461a      	mov	r2, r3
 8012050:	893b      	ldrh	r3, [r7, #8]
 8012052:	4293      	cmp	r3, r2
 8012054:	d000      	beq.n	8012058 <dir_find+0x54>
 8012056:	e043      	b.n	80120e0 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	695b      	ldr	r3, [r3, #20]
 801205c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8012060:	76fb      	strb	r3, [r7, #27]
 8012062:	2340      	movs	r3, #64	; 0x40
 8012064:	617b      	str	r3, [r7, #20]
 8012066:	2300      	movs	r3, #0
 8012068:	613b      	str	r3, [r7, #16]
 801206a:	e029      	b.n	80120c0 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 801206c:	697b      	ldr	r3, [r7, #20]
 801206e:	f003 031f 	and.w	r3, r3, #31
 8012072:	2b00      	cmp	r3, #0
 8012074:	d102      	bne.n	801207c <dir_find+0x78>
 8012076:	697b      	ldr	r3, [r7, #20]
 8012078:	3302      	adds	r3, #2
 801207a:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	695a      	ldr	r2, [r3, #20]
 8012080:	697b      	ldr	r3, [r7, #20]
 8012082:	4413      	add	r3, r2
 8012084:	4618      	mov	r0, r3
 8012086:	f7fd fe4f 	bl	800fd28 <ld_word>
 801208a:	4603      	mov	r3, r0
 801208c:	4618      	mov	r0, r3
 801208e:	f002 fd4f 	bl	8014b30 <ff_wtoupper>
 8012092:	4603      	mov	r3, r0
 8012094:	461c      	mov	r4, r3
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	691a      	ldr	r2, [r3, #16]
 801209a:	693b      	ldr	r3, [r7, #16]
 801209c:	005b      	lsls	r3, r3, #1
 801209e:	4413      	add	r3, r2
 80120a0:	881b      	ldrh	r3, [r3, #0]
 80120a2:	4618      	mov	r0, r3
 80120a4:	f002 fd44 	bl	8014b30 <ff_wtoupper>
 80120a8:	4603      	mov	r3, r0
 80120aa:	429c      	cmp	r4, r3
 80120ac:	d10c      	bne.n	80120c8 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 80120ae:	7efb      	ldrb	r3, [r7, #27]
 80120b0:	3b01      	subs	r3, #1
 80120b2:	76fb      	strb	r3, [r7, #27]
 80120b4:	697b      	ldr	r3, [r7, #20]
 80120b6:	3302      	adds	r3, #2
 80120b8:	617b      	str	r3, [r7, #20]
 80120ba:	693b      	ldr	r3, [r7, #16]
 80120bc:	3301      	adds	r3, #1
 80120be:	613b      	str	r3, [r7, #16]
 80120c0:	7efb      	ldrb	r3, [r7, #27]
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d1d2      	bne.n	801206c <dir_find+0x68>
 80120c6:	e000      	b.n	80120ca <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80120c8:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 80120ca:	7efb      	ldrb	r3, [r7, #27]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d107      	bne.n	80120e0 <dir_find+0xdc>
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	691a      	ldr	r2, [r3, #16]
 80120d4:	693b      	ldr	r3, [r7, #16]
 80120d6:	005b      	lsls	r3, r3, #1
 80120d8:	4413      	add	r3, r2
 80120da:	881b      	ldrh	r3, [r3, #0]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d009      	beq.n	80120f4 <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 80120e0:	2100      	movs	r1, #0
 80120e2:	6878      	ldr	r0, [r7, #4]
 80120e4:	f7ff fec7 	bl	8011e76 <dir_read>
 80120e8:	4603      	mov	r3, r0
 80120ea:	77fb      	strb	r3, [r7, #31]
 80120ec:	7ffb      	ldrb	r3, [r7, #31]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d0a6      	beq.n	8012040 <dir_find+0x3c>
 80120f2:	e000      	b.n	80120f6 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 80120f4:	bf00      	nop
		}
		return res;
 80120f6:	7ffb      	ldrb	r3, [r7, #31]
 80120f8:	e0a9      	b.n	801224e <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80120fa:	23ff      	movs	r3, #255	; 0xff
 80120fc:	773b      	strb	r3, [r7, #28]
 80120fe:	7f3b      	ldrb	r3, [r7, #28]
 8012100:	777b      	strb	r3, [r7, #29]
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	f04f 32ff 	mov.w	r2, #4294967295
 8012108:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801210e:	4619      	mov	r1, r3
 8012110:	68f8      	ldr	r0, [r7, #12]
 8012112:	f7fe f9fd 	bl	8010510 <move_window>
 8012116:	4603      	mov	r3, r0
 8012118:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 801211a:	7ffb      	ldrb	r3, [r7, #31]
 801211c:	2b00      	cmp	r3, #0
 801211e:	f040 8090 	bne.w	8012242 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012126:	781b      	ldrb	r3, [r3, #0]
 8012128:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801212a:	7fbb      	ldrb	r3, [r7, #30]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d102      	bne.n	8012136 <dir_find+0x132>
 8012130:	2304      	movs	r3, #4
 8012132:	77fb      	strb	r3, [r7, #31]
 8012134:	e08a      	b.n	801224c <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801213a:	330b      	adds	r3, #11
 801213c:	781b      	ldrb	r3, [r3, #0]
 801213e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012142:	72fb      	strb	r3, [r7, #11]
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	7afa      	ldrb	r2, [r7, #11]
 8012148:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801214a:	7fbb      	ldrb	r3, [r7, #30]
 801214c:	2be5      	cmp	r3, #229	; 0xe5
 801214e:	d007      	beq.n	8012160 <dir_find+0x15c>
 8012150:	7afb      	ldrb	r3, [r7, #11]
 8012152:	f003 0308 	and.w	r3, r3, #8
 8012156:	2b00      	cmp	r3, #0
 8012158:	d009      	beq.n	801216e <dir_find+0x16a>
 801215a:	7afb      	ldrb	r3, [r7, #11]
 801215c:	2b0f      	cmp	r3, #15
 801215e:	d006      	beq.n	801216e <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012160:	23ff      	movs	r3, #255	; 0xff
 8012162:	777b      	strb	r3, [r7, #29]
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	f04f 32ff 	mov.w	r2, #4294967295
 801216a:	64da      	str	r2, [r3, #76]	; 0x4c
 801216c:	e05e      	b.n	801222c <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801216e:	7afb      	ldrb	r3, [r7, #11]
 8012170:	2b0f      	cmp	r3, #15
 8012172:	d136      	bne.n	80121e2 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 801217a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801217e:	2b00      	cmp	r3, #0
 8012180:	d154      	bne.n	801222c <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8012182:	7fbb      	ldrb	r3, [r7, #30]
 8012184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012188:	2b00      	cmp	r3, #0
 801218a:	d00d      	beq.n	80121a8 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012190:	7b5b      	ldrb	r3, [r3, #13]
 8012192:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8012194:	7fbb      	ldrb	r3, [r7, #30]
 8012196:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801219a:	77bb      	strb	r3, [r7, #30]
 801219c:	7fbb      	ldrb	r3, [r7, #30]
 801219e:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80121a8:	7fba      	ldrb	r2, [r7, #30]
 80121aa:	7f7b      	ldrb	r3, [r7, #29]
 80121ac:	429a      	cmp	r2, r3
 80121ae:	d115      	bne.n	80121dc <dir_find+0x1d8>
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80121b4:	330d      	adds	r3, #13
 80121b6:	781b      	ldrb	r3, [r3, #0]
 80121b8:	7f3a      	ldrb	r2, [r7, #28]
 80121ba:	429a      	cmp	r2, r3
 80121bc:	d10e      	bne.n	80121dc <dir_find+0x1d8>
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	691a      	ldr	r2, [r3, #16]
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80121c6:	4619      	mov	r1, r3
 80121c8:	4610      	mov	r0, r2
 80121ca:	f7ff fa43 	bl	8011654 <cmp_lfn>
 80121ce:	4603      	mov	r3, r0
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d003      	beq.n	80121dc <dir_find+0x1d8>
 80121d4:	7f7b      	ldrb	r3, [r7, #29]
 80121d6:	3b01      	subs	r3, #1
 80121d8:	b2db      	uxtb	r3, r3
 80121da:	e000      	b.n	80121de <dir_find+0x1da>
 80121dc:	23ff      	movs	r3, #255	; 0xff
 80121de:	777b      	strb	r3, [r7, #29]
 80121e0:	e024      	b.n	801222c <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80121e2:	7f7b      	ldrb	r3, [r7, #29]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d109      	bne.n	80121fc <dir_find+0x1f8>
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80121ec:	4618      	mov	r0, r3
 80121ee:	f7ff fbfd 	bl	80119ec <sum_sfn>
 80121f2:	4603      	mov	r3, r0
 80121f4:	461a      	mov	r2, r3
 80121f6:	7f3b      	ldrb	r3, [r7, #28]
 80121f8:	4293      	cmp	r3, r2
 80121fa:	d024      	beq.n	8012246 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8012202:	f003 0301 	and.w	r3, r3, #1
 8012206:	2b00      	cmp	r3, #0
 8012208:	d10a      	bne.n	8012220 <dir_find+0x21c>
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	3340      	adds	r3, #64	; 0x40
 8012212:	220b      	movs	r2, #11
 8012214:	4619      	mov	r1, r3
 8012216:	f7fd ff88 	bl	801012a <mem_cmp>
 801221a:	4603      	mov	r3, r0
 801221c:	2b00      	cmp	r3, #0
 801221e:	d014      	beq.n	801224a <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012220:	23ff      	movs	r3, #255	; 0xff
 8012222:	777b      	strb	r3, [r7, #29]
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	f04f 32ff 	mov.w	r2, #4294967295
 801222a:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801222c:	2100      	movs	r1, #0
 801222e:	6878      	ldr	r0, [r7, #4]
 8012230:	f7ff f88e 	bl	8011350 <dir_next>
 8012234:	4603      	mov	r3, r0
 8012236:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 8012238:	7ffb      	ldrb	r3, [r7, #31]
 801223a:	2b00      	cmp	r3, #0
 801223c:	f43f af65 	beq.w	801210a <dir_find+0x106>
 8012240:	e004      	b.n	801224c <dir_find+0x248>
		if (res != FR_OK) break;
 8012242:	bf00      	nop
 8012244:	e002      	b.n	801224c <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8012246:	bf00      	nop
 8012248:	e000      	b.n	801224c <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801224a:	bf00      	nop

	return res;
 801224c:	7ffb      	ldrb	r3, [r7, #31]
}
 801224e:	4618      	mov	r0, r3
 8012250:	3724      	adds	r7, #36	; 0x24
 8012252:	46bd      	mov	sp, r7
 8012254:	bd90      	pop	{r4, r7, pc}
	...

08012258 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012258:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 801225c:	b0a0      	sub	sp, #128	; 0x80
 801225e:	af00      	add	r7, sp, #0
 8012260:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 801226e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8012272:	2b00      	cmp	r3, #0
 8012274:	d001      	beq.n	801227a <dir_register+0x22>
 8012276:	2306      	movs	r3, #6
 8012278:	e198      	b.n	80125ac <dir_register+0x354>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801227a:	2300      	movs	r3, #0
 801227c:	677b      	str	r3, [r7, #116]	; 0x74
 801227e:	e002      	b.n	8012286 <dir_register+0x2e>
 8012280:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012282:	3301      	adds	r3, #1
 8012284:	677b      	str	r3, [r7, #116]	; 0x74
 8012286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012288:	691a      	ldr	r2, [r3, #16]
 801228a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801228c:	005b      	lsls	r3, r3, #1
 801228e:	4413      	add	r3, r2
 8012290:	881b      	ldrh	r3, [r3, #0]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d1f4      	bne.n	8012280 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8012296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012298:	781b      	ldrb	r3, [r3, #0]
 801229a:	2b04      	cmp	r3, #4
 801229c:	f040 80a9 	bne.w	80123f2 <dir_register+0x19a>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 80122a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80122a2:	330e      	adds	r3, #14
 80122a4:	4aa7      	ldr	r2, [pc, #668]	; (8012544 <dir_register+0x2ec>)
 80122a6:	fba2 2303 	umull	r2, r3, r2, r3
 80122aa:	08db      	lsrs	r3, r3, #3
 80122ac:	3302      	adds	r3, #2
 80122ae:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 80122b0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80122b2:	6878      	ldr	r0, [r7, #4]
 80122b4:	f7ff f932 	bl	801151c <dir_alloc>
 80122b8:	4603      	mov	r3, r0
 80122ba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 80122be:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d002      	beq.n	80122cc <dir_register+0x74>
 80122c6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80122ca:	e16f      	b.n	80125ac <dir_register+0x354>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80122d0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80122d2:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 80122d6:	440b      	add	r3, r1
 80122d8:	015b      	lsls	r3, r3, #5
 80122da:	1ad2      	subs	r2, r2, r3
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	689b      	ldr	r3, [r3, #8]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d07a      	beq.n	80123de <dir_register+0x186>
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	79db      	ldrb	r3, [r3, #7]
 80122ec:	f003 0304 	and.w	r3, r3, #4
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d074      	beq.n	80123de <dir_register+0x186>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 80122fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80122fc:	895b      	ldrh	r3, [r3, #10]
 80122fe:	4618      	mov	r0, r3
 8012300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012302:	899b      	ldrh	r3, [r3, #12]
 8012304:	fb03 f300 	mul.w	r3, r3, r0
 8012308:	469b      	mov	fp, r3
 801230a:	f04f 0c00 	mov.w	ip, #0
 801230e:	eb1b 0301 	adds.w	r3, fp, r1
 8012312:	eb4c 0402 	adc.w	r4, ip, r2
 8012316:	687a      	ldr	r2, [r7, #4]
 8012318:	e9c2 3404 	strd	r3, r4, [r2, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	4618      	mov	r0, r3
 8012320:	f7fe fd26 	bl	8010d70 <fill_first_frag>
 8012324:	4603      	mov	r3, r0
 8012326:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 801232a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801232e:	2b00      	cmp	r3, #0
 8012330:	d002      	beq.n	8012338 <dir_register+0xe0>
 8012332:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012336:	e139      	b.n	80125ac <dir_register+0x354>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8012338:	6878      	ldr	r0, [r7, #4]
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801233e:	f04f 32ff 	mov.w	r2, #4294967295
 8012342:	4619      	mov	r1, r3
 8012344:	f7fe fd43 	bl	8010dce <fill_last_frag>
 8012348:	4603      	mov	r3, r0
 801234a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 801234e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012352:	2b00      	cmp	r3, #0
 8012354:	d002      	beq.n	801235c <dir_register+0x104>
 8012356:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801235a:	e127      	b.n	80125ac <dir_register+0x354>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 801235c:	687a      	ldr	r2, [r7, #4]
 801235e:	f107 0308 	add.w	r3, r7, #8
 8012362:	4611      	mov	r1, r2
 8012364:	4618      	mov	r0, r3
 8012366:	f7ff fc87 	bl	8011c78 <load_obj_dir>
 801236a:	4603      	mov	r3, r0
 801236c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8012370:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012374:	2b00      	cmp	r3, #0
 8012376:	d002      	beq.n	801237e <dir_register+0x126>
 8012378:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801237c:	e116      	b.n	80125ac <dir_register+0x354>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 801237e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012380:	695b      	ldr	r3, [r3, #20]
 8012382:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 801238c:	461a      	mov	r2, r3
 801238e:	4623      	mov	r3, r4
 8012390:	4608      	mov	r0, r1
 8012392:	f7fd fe08 	bl	800ffa6 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8012396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012398:	695b      	ldr	r3, [r3, #20]
 801239a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80123a4:	461a      	mov	r2, r3
 80123a6:	4623      	mov	r3, r4
 80123a8:	4608      	mov	r0, r1
 80123aa:	f7fd fdfc 	bl	800ffa6 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	79da      	ldrb	r2, [r3, #7]
 80123b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80123b4:	695b      	ldr	r3, [r3, #20]
 80123b6:	3321      	adds	r3, #33	; 0x21
 80123b8:	f042 0201 	orr.w	r2, r2, #1
 80123bc:	b2d2      	uxtb	r2, r2
 80123be:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 80123c0:	f107 0308 	add.w	r3, r7, #8
 80123c4:	4618      	mov	r0, r3
 80123c6:	f7ff fc94 	bl	8011cf2 <store_xdir>
 80123ca:	4603      	mov	r3, r0
 80123cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 80123d0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d002      	beq.n	80123de <dir_register+0x186>
 80123d8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80123dc:	e0e6      	b.n	80125ac <dir_register+0x354>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 80123de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80123e0:	695a      	ldr	r2, [r3, #20]
 80123e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80123e4:	691b      	ldr	r3, [r3, #16]
 80123e6:	4619      	mov	r1, r3
 80123e8:	4610      	mov	r0, r2
 80123ea:	f7ff fcdd 	bl	8011da8 <create_xdir>
		return FR_OK;
 80123ee:	2300      	movs	r3, #0
 80123f0:	e0dc      	b.n	80125ac <dir_register+0x354>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80123f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80123fc:	220c      	movs	r2, #12
 80123fe:	4618      	mov	r0, r3
 8012400:	f7fd fe58 	bl	80100b4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8012404:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012408:	f003 0301 	and.w	r3, r3, #1
 801240c:	2b00      	cmp	r3, #0
 801240e:	d033      	beq.n	8012478 <dir_register+0x220>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	2240      	movs	r2, #64	; 0x40
 8012414:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 8012418:	2301      	movs	r3, #1
 801241a:	67bb      	str	r3, [r7, #120]	; 0x78
 801241c:	e016      	b.n	801244c <dir_register+0x1f4>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8012424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012426:	691a      	ldr	r2, [r3, #16]
 8012428:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 801242c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801242e:	f7ff fa4d 	bl	80118cc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8012432:	6878      	ldr	r0, [r7, #4]
 8012434:	f7ff fde6 	bl	8012004 <dir_find>
 8012438:	4603      	mov	r3, r0
 801243a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 801243e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012442:	2b00      	cmp	r3, #0
 8012444:	d106      	bne.n	8012454 <dir_register+0x1fc>
		for (n = 1; n < 100; n++) {
 8012446:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012448:	3301      	adds	r3, #1
 801244a:	67bb      	str	r3, [r7, #120]	; 0x78
 801244c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801244e:	2b63      	cmp	r3, #99	; 0x63
 8012450:	d9e5      	bls.n	801241e <dir_register+0x1c6>
 8012452:	e000      	b.n	8012456 <dir_register+0x1fe>
			if (res != FR_OK) break;
 8012454:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8012456:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012458:	2b64      	cmp	r3, #100	; 0x64
 801245a:	d101      	bne.n	8012460 <dir_register+0x208>
 801245c:	2307      	movs	r3, #7
 801245e:	e0a5      	b.n	80125ac <dir_register+0x354>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8012460:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012464:	2b04      	cmp	r3, #4
 8012466:	d002      	beq.n	801246e <dir_register+0x216>
 8012468:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801246c:	e09e      	b.n	80125ac <dir_register+0x354>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801246e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8012478:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801247c:	f003 0302 	and.w	r3, r3, #2
 8012480:	2b00      	cmp	r3, #0
 8012482:	d007      	beq.n	8012494 <dir_register+0x23c>
 8012484:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012486:	330c      	adds	r3, #12
 8012488:	4a2f      	ldr	r2, [pc, #188]	; (8012548 <dir_register+0x2f0>)
 801248a:	fba2 2303 	umull	r2, r3, r2, r3
 801248e:	089b      	lsrs	r3, r3, #2
 8012490:	3301      	adds	r3, #1
 8012492:	e000      	b.n	8012496 <dir_register+0x23e>
 8012494:	2301      	movs	r3, #1
 8012496:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8012498:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801249a:	6878      	ldr	r0, [r7, #4]
 801249c:	f7ff f83e 	bl	801151c <dir_alloc>
 80124a0:	4603      	mov	r3, r0
 80124a2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80124a6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d14f      	bne.n	801254e <dir_register+0x2f6>
 80124ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80124b0:	3b01      	subs	r3, #1
 80124b2:	673b      	str	r3, [r7, #112]	; 0x70
 80124b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d049      	beq.n	801254e <dir_register+0x2f6>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80124be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80124c0:	015b      	lsls	r3, r3, #5
 80124c2:	1ad3      	subs	r3, r2, r3
 80124c4:	4619      	mov	r1, r3
 80124c6:	6878      	ldr	r0, [r7, #4]
 80124c8:	f7fe feae 	bl	8011228 <dir_sdi>
 80124cc:	4603      	mov	r3, r0
 80124ce:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 80124d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d139      	bne.n	801254e <dir_register+0x2f6>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	3340      	adds	r3, #64	; 0x40
 80124de:	4618      	mov	r0, r3
 80124e0:	f7ff fa84 	bl	80119ec <sum_sfn>
 80124e4:	4603      	mov	r3, r0
 80124e6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124ee:	4619      	mov	r1, r3
 80124f0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80124f2:	f7fe f80d 	bl	8010510 <move_window>
 80124f6:	4603      	mov	r3, r0
 80124f8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 80124fc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012500:	2b00      	cmp	r3, #0
 8012502:	d123      	bne.n	801254c <dir_register+0x2f4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8012504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012506:	6918      	ldr	r0, [r3, #16]
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 801250c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801250e:	b2da      	uxtb	r2, r3
 8012510:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012514:	f7ff f972 	bl	80117fc <put_lfn>
				fs->wflag = 1;
 8012518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801251a:	2201      	movs	r2, #1
 801251c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801251e:	2100      	movs	r1, #0
 8012520:	6878      	ldr	r0, [r7, #4]
 8012522:	f7fe ff15 	bl	8011350 <dir_next>
 8012526:	4603      	mov	r3, r0
 8012528:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 801252c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012530:	2b00      	cmp	r3, #0
 8012532:	d10c      	bne.n	801254e <dir_register+0x2f6>
 8012534:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012536:	3b01      	subs	r3, #1
 8012538:	673b      	str	r3, [r7, #112]	; 0x70
 801253a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801253c:	2b00      	cmp	r3, #0
 801253e:	d1d4      	bne.n	80124ea <dir_register+0x292>
 8012540:	e005      	b.n	801254e <dir_register+0x2f6>
 8012542:	bf00      	nop
 8012544:	88888889 	.word	0x88888889
 8012548:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 801254c:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801254e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8012552:	2b00      	cmp	r3, #0
 8012554:	d128      	bne.n	80125a8 <dir_register+0x350>
		res = move_window(fs, dp->sect);
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801255a:	4619      	mov	r1, r3
 801255c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801255e:	f7fd ffd7 	bl	8010510 <move_window>
 8012562:	4603      	mov	r3, r0
 8012564:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8012568:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801256c:	2b00      	cmp	r3, #0
 801256e:	d11b      	bne.n	80125a8 <dir_register+0x350>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012574:	2220      	movs	r2, #32
 8012576:	2100      	movs	r1, #0
 8012578:	4618      	mov	r0, r3
 801257a:	f7fd fdbc 	bl	80100f6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	3340      	adds	r3, #64	; 0x40
 8012586:	220b      	movs	r2, #11
 8012588:	4619      	mov	r1, r3
 801258a:	f7fd fd93 	bl	80100b4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012598:	330c      	adds	r3, #12
 801259a:	f002 0218 	and.w	r2, r2, #24
 801259e:	b2d2      	uxtb	r2, r2
 80125a0:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80125a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80125a4:	2201      	movs	r2, #1
 80125a6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80125a8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80125ac:	4618      	mov	r0, r3
 80125ae:	3780      	adds	r7, #128	; 0x80
 80125b0:	46bd      	mov	sp, r7
 80125b2:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80125b6:	bf00      	nop

080125b8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b08a      	sub	sp, #40	; 0x28
 80125bc:	af00      	add	r7, sp, #0
 80125be:	6078      	str	r0, [r7, #4]
 80125c0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80125c2:	683b      	ldr	r3, [r7, #0]
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	613b      	str	r3, [r7, #16]
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	691b      	ldr	r3, [r3, #16]
 80125ce:	60fb      	str	r3, [r7, #12]
 80125d0:	2300      	movs	r3, #0
 80125d2:	617b      	str	r3, [r7, #20]
 80125d4:	697b      	ldr	r3, [r7, #20]
 80125d6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80125d8:	69bb      	ldr	r3, [r7, #24]
 80125da:	1c5a      	adds	r2, r3, #1
 80125dc:	61ba      	str	r2, [r7, #24]
 80125de:	693a      	ldr	r2, [r7, #16]
 80125e0:	4413      	add	r3, r2
 80125e2:	781b      	ldrb	r3, [r3, #0]
 80125e4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80125e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80125e8:	2b1f      	cmp	r3, #31
 80125ea:	d940      	bls.n	801266e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80125ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80125ee:	2b2f      	cmp	r3, #47	; 0x2f
 80125f0:	d006      	beq.n	8012600 <create_name+0x48>
 80125f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80125f4:	2b5c      	cmp	r3, #92	; 0x5c
 80125f6:	d110      	bne.n	801261a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80125f8:	e002      	b.n	8012600 <create_name+0x48>
 80125fa:	69bb      	ldr	r3, [r7, #24]
 80125fc:	3301      	adds	r3, #1
 80125fe:	61bb      	str	r3, [r7, #24]
 8012600:	693a      	ldr	r2, [r7, #16]
 8012602:	69bb      	ldr	r3, [r7, #24]
 8012604:	4413      	add	r3, r2
 8012606:	781b      	ldrb	r3, [r3, #0]
 8012608:	2b2f      	cmp	r3, #47	; 0x2f
 801260a:	d0f6      	beq.n	80125fa <create_name+0x42>
 801260c:	693a      	ldr	r2, [r7, #16]
 801260e:	69bb      	ldr	r3, [r7, #24]
 8012610:	4413      	add	r3, r2
 8012612:	781b      	ldrb	r3, [r3, #0]
 8012614:	2b5c      	cmp	r3, #92	; 0x5c
 8012616:	d0f0      	beq.n	80125fa <create_name+0x42>
			break;
 8012618:	e02a      	b.n	8012670 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801261a:	697b      	ldr	r3, [r7, #20]
 801261c:	2bfe      	cmp	r3, #254	; 0xfe
 801261e:	d901      	bls.n	8012624 <create_name+0x6c>
 8012620:	2306      	movs	r3, #6
 8012622:	e177      	b.n	8012914 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8012624:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012626:	b2db      	uxtb	r3, r3
 8012628:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801262a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801262c:	2101      	movs	r1, #1
 801262e:	4618      	mov	r0, r3
 8012630:	f002 fa42 	bl	8014ab8 <ff_convert>
 8012634:	4603      	mov	r3, r0
 8012636:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8012638:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801263a:	2b00      	cmp	r3, #0
 801263c:	d101      	bne.n	8012642 <create_name+0x8a>
 801263e:	2306      	movs	r3, #6
 8012640:	e168      	b.n	8012914 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8012642:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012644:	2b7f      	cmp	r3, #127	; 0x7f
 8012646:	d809      	bhi.n	801265c <create_name+0xa4>
 8012648:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801264a:	4619      	mov	r1, r3
 801264c:	48b3      	ldr	r0, [pc, #716]	; (801291c <create_name+0x364>)
 801264e:	f7fd fd93 	bl	8010178 <chk_chr>
 8012652:	4603      	mov	r3, r0
 8012654:	2b00      	cmp	r3, #0
 8012656:	d001      	beq.n	801265c <create_name+0xa4>
 8012658:	2306      	movs	r3, #6
 801265a:	e15b      	b.n	8012914 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 801265c:	697b      	ldr	r3, [r7, #20]
 801265e:	1c5a      	adds	r2, r3, #1
 8012660:	617a      	str	r2, [r7, #20]
 8012662:	005b      	lsls	r3, r3, #1
 8012664:	68fa      	ldr	r2, [r7, #12]
 8012666:	4413      	add	r3, r2
 8012668:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801266a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801266c:	e7b4      	b.n	80125d8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801266e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8012670:	693a      	ldr	r2, [r7, #16]
 8012672:	69bb      	ldr	r3, [r7, #24]
 8012674:	441a      	add	r2, r3
 8012676:	683b      	ldr	r3, [r7, #0]
 8012678:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801267a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801267c:	2b1f      	cmp	r3, #31
 801267e:	d801      	bhi.n	8012684 <create_name+0xcc>
 8012680:	2304      	movs	r3, #4
 8012682:	e000      	b.n	8012686 <create_name+0xce>
 8012684:	2300      	movs	r3, #0
 8012686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801268a:	e011      	b.n	80126b0 <create_name+0xf8>
		w = lfn[di - 1];
 801268c:	697a      	ldr	r2, [r7, #20]
 801268e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012692:	4413      	add	r3, r2
 8012694:	005b      	lsls	r3, r3, #1
 8012696:	68fa      	ldr	r2, [r7, #12]
 8012698:	4413      	add	r3, r2
 801269a:	881b      	ldrh	r3, [r3, #0]
 801269c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 801269e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80126a0:	2b20      	cmp	r3, #32
 80126a2:	d002      	beq.n	80126aa <create_name+0xf2>
 80126a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80126a6:	2b2e      	cmp	r3, #46	; 0x2e
 80126a8:	d106      	bne.n	80126b8 <create_name+0x100>
		di--;
 80126aa:	697b      	ldr	r3, [r7, #20]
 80126ac:	3b01      	subs	r3, #1
 80126ae:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80126b0:	697b      	ldr	r3, [r7, #20]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d1ea      	bne.n	801268c <create_name+0xd4>
 80126b6:	e000      	b.n	80126ba <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80126b8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80126ba:	697b      	ldr	r3, [r7, #20]
 80126bc:	005b      	lsls	r3, r3, #1
 80126be:	68fa      	ldr	r2, [r7, #12]
 80126c0:	4413      	add	r3, r2
 80126c2:	2200      	movs	r2, #0
 80126c4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80126c6:	697b      	ldr	r3, [r7, #20]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d101      	bne.n	80126d0 <create_name+0x118>
 80126cc:	2306      	movs	r3, #6
 80126ce:	e121      	b.n	8012914 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	3340      	adds	r3, #64	; 0x40
 80126d4:	220b      	movs	r2, #11
 80126d6:	2120      	movs	r1, #32
 80126d8:	4618      	mov	r0, r3
 80126da:	f7fd fd0c 	bl	80100f6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80126de:	2300      	movs	r3, #0
 80126e0:	61bb      	str	r3, [r7, #24]
 80126e2:	e002      	b.n	80126ea <create_name+0x132>
 80126e4:	69bb      	ldr	r3, [r7, #24]
 80126e6:	3301      	adds	r3, #1
 80126e8:	61bb      	str	r3, [r7, #24]
 80126ea:	69bb      	ldr	r3, [r7, #24]
 80126ec:	005b      	lsls	r3, r3, #1
 80126ee:	68fa      	ldr	r2, [r7, #12]
 80126f0:	4413      	add	r3, r2
 80126f2:	881b      	ldrh	r3, [r3, #0]
 80126f4:	2b20      	cmp	r3, #32
 80126f6:	d0f5      	beq.n	80126e4 <create_name+0x12c>
 80126f8:	69bb      	ldr	r3, [r7, #24]
 80126fa:	005b      	lsls	r3, r3, #1
 80126fc:	68fa      	ldr	r2, [r7, #12]
 80126fe:	4413      	add	r3, r2
 8012700:	881b      	ldrh	r3, [r3, #0]
 8012702:	2b2e      	cmp	r3, #46	; 0x2e
 8012704:	d0ee      	beq.n	80126e4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8012706:	69bb      	ldr	r3, [r7, #24]
 8012708:	2b00      	cmp	r3, #0
 801270a:	d009      	beq.n	8012720 <create_name+0x168>
 801270c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012710:	f043 0303 	orr.w	r3, r3, #3
 8012714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8012718:	e002      	b.n	8012720 <create_name+0x168>
 801271a:	697b      	ldr	r3, [r7, #20]
 801271c:	3b01      	subs	r3, #1
 801271e:	617b      	str	r3, [r7, #20]
 8012720:	697b      	ldr	r3, [r7, #20]
 8012722:	2b00      	cmp	r3, #0
 8012724:	d009      	beq.n	801273a <create_name+0x182>
 8012726:	697a      	ldr	r2, [r7, #20]
 8012728:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801272c:	4413      	add	r3, r2
 801272e:	005b      	lsls	r3, r3, #1
 8012730:	68fa      	ldr	r2, [r7, #12]
 8012732:	4413      	add	r3, r2
 8012734:	881b      	ldrh	r3, [r3, #0]
 8012736:	2b2e      	cmp	r3, #46	; 0x2e
 8012738:	d1ef      	bne.n	801271a <create_name+0x162>

	i = b = 0; ni = 8;
 801273a:	2300      	movs	r3, #0
 801273c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012740:	2300      	movs	r3, #0
 8012742:	623b      	str	r3, [r7, #32]
 8012744:	2308      	movs	r3, #8
 8012746:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8012748:	69bb      	ldr	r3, [r7, #24]
 801274a:	1c5a      	adds	r2, r3, #1
 801274c:	61ba      	str	r2, [r7, #24]
 801274e:	005b      	lsls	r3, r3, #1
 8012750:	68fa      	ldr	r2, [r7, #12]
 8012752:	4413      	add	r3, r2
 8012754:	881b      	ldrh	r3, [r3, #0]
 8012756:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8012758:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801275a:	2b00      	cmp	r3, #0
 801275c:	f000 8090 	beq.w	8012880 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8012760:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012762:	2b20      	cmp	r3, #32
 8012764:	d006      	beq.n	8012774 <create_name+0x1bc>
 8012766:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012768:	2b2e      	cmp	r3, #46	; 0x2e
 801276a:	d10a      	bne.n	8012782 <create_name+0x1ca>
 801276c:	69ba      	ldr	r2, [r7, #24]
 801276e:	697b      	ldr	r3, [r7, #20]
 8012770:	429a      	cmp	r2, r3
 8012772:	d006      	beq.n	8012782 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8012774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012778:	f043 0303 	orr.w	r3, r3, #3
 801277c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012780:	e07d      	b.n	801287e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8012782:	6a3a      	ldr	r2, [r7, #32]
 8012784:	69fb      	ldr	r3, [r7, #28]
 8012786:	429a      	cmp	r2, r3
 8012788:	d203      	bcs.n	8012792 <create_name+0x1da>
 801278a:	69ba      	ldr	r2, [r7, #24]
 801278c:	697b      	ldr	r3, [r7, #20]
 801278e:	429a      	cmp	r2, r3
 8012790:	d123      	bne.n	80127da <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8012792:	69fb      	ldr	r3, [r7, #28]
 8012794:	2b0b      	cmp	r3, #11
 8012796:	d106      	bne.n	80127a6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8012798:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801279c:	f043 0303 	orr.w	r3, r3, #3
 80127a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80127a4:	e06f      	b.n	8012886 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80127a6:	69ba      	ldr	r2, [r7, #24]
 80127a8:	697b      	ldr	r3, [r7, #20]
 80127aa:	429a      	cmp	r2, r3
 80127ac:	d005      	beq.n	80127ba <create_name+0x202>
 80127ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80127b2:	f043 0303 	orr.w	r3, r3, #3
 80127b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80127ba:	69ba      	ldr	r2, [r7, #24]
 80127bc:	697b      	ldr	r3, [r7, #20]
 80127be:	429a      	cmp	r2, r3
 80127c0:	d860      	bhi.n	8012884 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80127c2:	697b      	ldr	r3, [r7, #20]
 80127c4:	61bb      	str	r3, [r7, #24]
 80127c6:	2308      	movs	r3, #8
 80127c8:	623b      	str	r3, [r7, #32]
 80127ca:	230b      	movs	r3, #11
 80127cc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80127ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80127d2:	009b      	lsls	r3, r3, #2
 80127d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80127d8:	e051      	b.n	801287e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80127da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80127dc:	2b7f      	cmp	r3, #127	; 0x7f
 80127de:	d914      	bls.n	801280a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80127e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80127e2:	2100      	movs	r1, #0
 80127e4:	4618      	mov	r0, r3
 80127e6:	f002 f967 	bl	8014ab8 <ff_convert>
 80127ea:	4603      	mov	r3, r0
 80127ec:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80127ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d004      	beq.n	80127fe <create_name+0x246>
 80127f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80127f6:	3b80      	subs	r3, #128	; 0x80
 80127f8:	4a49      	ldr	r2, [pc, #292]	; (8012920 <create_name+0x368>)
 80127fa:	5cd3      	ldrb	r3, [r2, r3]
 80127fc:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80127fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012802:	f043 0302 	orr.w	r3, r3, #2
 8012806:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801280a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801280c:	2b00      	cmp	r3, #0
 801280e:	d007      	beq.n	8012820 <create_name+0x268>
 8012810:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012812:	4619      	mov	r1, r3
 8012814:	4843      	ldr	r0, [pc, #268]	; (8012924 <create_name+0x36c>)
 8012816:	f7fd fcaf 	bl	8010178 <chk_chr>
 801281a:	4603      	mov	r3, r0
 801281c:	2b00      	cmp	r3, #0
 801281e:	d008      	beq.n	8012832 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8012820:	235f      	movs	r3, #95	; 0x5f
 8012822:	84bb      	strh	r3, [r7, #36]	; 0x24
 8012824:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012828:	f043 0303 	orr.w	r3, r3, #3
 801282c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012830:	e01b      	b.n	801286a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8012832:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012834:	2b40      	cmp	r3, #64	; 0x40
 8012836:	d909      	bls.n	801284c <create_name+0x294>
 8012838:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801283a:	2b5a      	cmp	r3, #90	; 0x5a
 801283c:	d806      	bhi.n	801284c <create_name+0x294>
					b |= 2;
 801283e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012842:	f043 0302 	orr.w	r3, r3, #2
 8012846:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801284a:	e00e      	b.n	801286a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801284c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801284e:	2b60      	cmp	r3, #96	; 0x60
 8012850:	d90b      	bls.n	801286a <create_name+0x2b2>
 8012852:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012854:	2b7a      	cmp	r3, #122	; 0x7a
 8012856:	d808      	bhi.n	801286a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8012858:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801285c:	f043 0301 	orr.w	r3, r3, #1
 8012860:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012864:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012866:	3b20      	subs	r3, #32
 8012868:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801286a:	6a3b      	ldr	r3, [r7, #32]
 801286c:	1c5a      	adds	r2, r3, #1
 801286e:	623a      	str	r2, [r7, #32]
 8012870:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012872:	b2d1      	uxtb	r1, r2
 8012874:	687a      	ldr	r2, [r7, #4]
 8012876:	4413      	add	r3, r2
 8012878:	460a      	mov	r2, r1
 801287a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 801287e:	e763      	b.n	8012748 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8012880:	bf00      	nop
 8012882:	e000      	b.n	8012886 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8012884:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801288c:	2be5      	cmp	r3, #229	; 0xe5
 801288e:	d103      	bne.n	8012898 <create_name+0x2e0>
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	2205      	movs	r2, #5
 8012894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 8012898:	69fb      	ldr	r3, [r7, #28]
 801289a:	2b08      	cmp	r3, #8
 801289c:	d104      	bne.n	80128a8 <create_name+0x2f0>
 801289e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80128a2:	009b      	lsls	r3, r3, #2
 80128a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80128a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80128ac:	f003 030c 	and.w	r3, r3, #12
 80128b0:	2b0c      	cmp	r3, #12
 80128b2:	d005      	beq.n	80128c0 <create_name+0x308>
 80128b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80128b8:	f003 0303 	and.w	r3, r3, #3
 80128bc:	2b03      	cmp	r3, #3
 80128be:	d105      	bne.n	80128cc <create_name+0x314>
 80128c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80128c4:	f043 0302 	orr.w	r3, r3, #2
 80128c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80128cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80128d0:	f003 0302 	and.w	r3, r3, #2
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d117      	bne.n	8012908 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80128d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80128dc:	f003 0303 	and.w	r3, r3, #3
 80128e0:	2b01      	cmp	r3, #1
 80128e2:	d105      	bne.n	80128f0 <create_name+0x338>
 80128e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80128e8:	f043 0310 	orr.w	r3, r3, #16
 80128ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80128f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80128f4:	f003 030c 	and.w	r3, r3, #12
 80128f8:	2b04      	cmp	r3, #4
 80128fa:	d105      	bne.n	8012908 <create_name+0x350>
 80128fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012900:	f043 0308 	orr.w	r3, r3, #8
 8012904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801290e:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 8012912:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8012914:	4618      	mov	r0, r3
 8012916:	3728      	adds	r7, #40	; 0x28
 8012918:	46bd      	mov	sp, r7
 801291a:	bd80      	pop	{r7, pc}
 801291c:	08015898 	.word	0x08015898
 8012920:	0801596c 	.word	0x0801596c
 8012924:	080158a4 	.word	0x080158a4

08012928 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012928:	b590      	push	{r4, r7, lr}
 801292a:	b087      	sub	sp, #28
 801292c:	af00      	add	r7, sp, #0
 801292e:	6078      	str	r0, [r7, #4]
 8012930:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012936:	693b      	ldr	r3, [r7, #16]
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801293c:	e002      	b.n	8012944 <follow_path+0x1c>
 801293e:	683b      	ldr	r3, [r7, #0]
 8012940:	3301      	adds	r3, #1
 8012942:	603b      	str	r3, [r7, #0]
 8012944:	683b      	ldr	r3, [r7, #0]
 8012946:	781b      	ldrb	r3, [r3, #0]
 8012948:	2b2f      	cmp	r3, #47	; 0x2f
 801294a:	d0f8      	beq.n	801293e <follow_path+0x16>
 801294c:	683b      	ldr	r3, [r7, #0]
 801294e:	781b      	ldrb	r3, [r3, #0]
 8012950:	2b5c      	cmp	r3, #92	; 0x5c
 8012952:	d0f4      	beq.n	801293e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8012954:	693b      	ldr	r3, [r7, #16]
 8012956:	2200      	movs	r2, #0
 8012958:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 801295a:	693b      	ldr	r3, [r7, #16]
 801295c:	2200      	movs	r2, #0
 801295e:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012960:	683b      	ldr	r3, [r7, #0]
 8012962:	781b      	ldrb	r3, [r3, #0]
 8012964:	2b1f      	cmp	r3, #31
 8012966:	d80a      	bhi.n	801297e <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	2280      	movs	r2, #128	; 0x80
 801296c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 8012970:	2100      	movs	r1, #0
 8012972:	6878      	ldr	r0, [r7, #4]
 8012974:	f7fe fc58 	bl	8011228 <dir_sdi>
 8012978:	4603      	mov	r3, r0
 801297a:	75fb      	strb	r3, [r7, #23]
 801297c:	e07c      	b.n	8012a78 <follow_path+0x150>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801297e:	463b      	mov	r3, r7
 8012980:	4619      	mov	r1, r3
 8012982:	6878      	ldr	r0, [r7, #4]
 8012984:	f7ff fe18 	bl	80125b8 <create_name>
 8012988:	4603      	mov	r3, r0
 801298a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801298c:	7dfb      	ldrb	r3, [r7, #23]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d16d      	bne.n	8012a6e <follow_path+0x146>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012992:	6878      	ldr	r0, [r7, #4]
 8012994:	f7ff fb36 	bl	8012004 <dir_find>
 8012998:	4603      	mov	r3, r0
 801299a:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80129a2:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80129a4:	7dfb      	ldrb	r3, [r7, #23]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d00a      	beq.n	80129c0 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80129aa:	7dfb      	ldrb	r3, [r7, #23]
 80129ac:	2b04      	cmp	r3, #4
 80129ae:	d160      	bne.n	8012a72 <follow_path+0x14a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80129b0:	7afb      	ldrb	r3, [r7, #11]
 80129b2:	f003 0304 	and.w	r3, r3, #4
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d15b      	bne.n	8012a72 <follow_path+0x14a>
 80129ba:	2305      	movs	r3, #5
 80129bc:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80129be:	e058      	b.n	8012a72 <follow_path+0x14a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80129c0:	7afb      	ldrb	r3, [r7, #11]
 80129c2:	f003 0304 	and.w	r3, r3, #4
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d155      	bne.n	8012a76 <follow_path+0x14e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80129ca:	693b      	ldr	r3, [r7, #16]
 80129cc:	799b      	ldrb	r3, [r3, #6]
 80129ce:	f003 0310 	and.w	r3, r3, #16
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d102      	bne.n	80129dc <follow_path+0xb4>
				res = FR_NO_PATH; break;
 80129d6:	2305      	movs	r3, #5
 80129d8:	75fb      	strb	r3, [r7, #23]
 80129da:	e04d      	b.n	8012a78 <follow_path+0x150>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	781b      	ldrb	r3, [r3, #0]
 80129e0:	2b04      	cmp	r3, #4
 80129e2:	d12f      	bne.n	8012a44 <follow_path+0x11c>
				obj->c_scl = obj->sclust;
 80129e4:	693b      	ldr	r3, [r7, #16]
 80129e6:	689a      	ldr	r2, [r3, #8]
 80129e8:	693b      	ldr	r3, [r7, #16]
 80129ea:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 80129ec:	693b      	ldr	r3, [r7, #16]
 80129ee:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80129f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80129f6:	693a      	ldr	r2, [r7, #16]
 80129f8:	79d2      	ldrb	r2, [r2, #7]
 80129fa:	431a      	orrs	r2, r3
 80129fc:	693b      	ldr	r3, [r7, #16]
 80129fe:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012a04:	693b      	ldr	r3, [r7, #16]
 8012a06:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	695b      	ldr	r3, [r3, #20]
 8012a0c:	3334      	adds	r3, #52	; 0x34
 8012a0e:	4618      	mov	r0, r3
 8012a10:	f7fd f9a2 	bl	800fd58 <ld_dword>
 8012a14:	4602      	mov	r2, r0
 8012a16:	693b      	ldr	r3, [r7, #16]
 8012a18:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	695b      	ldr	r3, [r3, #20]
 8012a1e:	3321      	adds	r3, #33	; 0x21
 8012a20:	781b      	ldrb	r3, [r3, #0]
 8012a22:	f003 0302 	and.w	r3, r3, #2
 8012a26:	b2da      	uxtb	r2, r3
 8012a28:	693b      	ldr	r3, [r7, #16]
 8012a2a:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	695b      	ldr	r3, [r3, #20]
 8012a30:	3338      	adds	r3, #56	; 0x38
 8012a32:	4618      	mov	r0, r3
 8012a34:	f7fd f9b3 	bl	800fd9e <ld_qword>
 8012a38:	4603      	mov	r3, r0
 8012a3a:	460c      	mov	r4, r1
 8012a3c:	693a      	ldr	r2, [r7, #16]
 8012a3e:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8012a42:	e79c      	b.n	801297e <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a4e:	68fa      	ldr	r2, [r7, #12]
 8012a50:	8992      	ldrh	r2, [r2, #12]
 8012a52:	fbb3 f0f2 	udiv	r0, r3, r2
 8012a56:	fb02 f200 	mul.w	r2, r2, r0
 8012a5a:	1a9b      	subs	r3, r3, r2
 8012a5c:	440b      	add	r3, r1
 8012a5e:	4619      	mov	r1, r3
 8012a60:	68f8      	ldr	r0, [r7, #12]
 8012a62:	f7fe fdb7 	bl	80115d4 <ld_clust>
 8012a66:	4602      	mov	r2, r0
 8012a68:	693b      	ldr	r3, [r7, #16]
 8012a6a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012a6c:	e787      	b.n	801297e <follow_path+0x56>
			if (res != FR_OK) break;
 8012a6e:	bf00      	nop
 8012a70:	e002      	b.n	8012a78 <follow_path+0x150>
				break;
 8012a72:	bf00      	nop
 8012a74:	e000      	b.n	8012a78 <follow_path+0x150>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012a76:	bf00      	nop
			}
		}
	}

	return res;
 8012a78:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	371c      	adds	r7, #28
 8012a7e:	46bd      	mov	sp, r7
 8012a80:	bd90      	pop	{r4, r7, pc}

08012a82 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012a82:	b480      	push	{r7}
 8012a84:	b087      	sub	sp, #28
 8012a86:	af00      	add	r7, sp, #0
 8012a88:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8012a8e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d031      	beq.n	8012afc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	617b      	str	r3, [r7, #20]
 8012a9e:	e002      	b.n	8012aa6 <get_ldnumber+0x24>
 8012aa0:	697b      	ldr	r3, [r7, #20]
 8012aa2:	3301      	adds	r3, #1
 8012aa4:	617b      	str	r3, [r7, #20]
 8012aa6:	697b      	ldr	r3, [r7, #20]
 8012aa8:	781b      	ldrb	r3, [r3, #0]
 8012aaa:	2b1f      	cmp	r3, #31
 8012aac:	d903      	bls.n	8012ab6 <get_ldnumber+0x34>
 8012aae:	697b      	ldr	r3, [r7, #20]
 8012ab0:	781b      	ldrb	r3, [r3, #0]
 8012ab2:	2b3a      	cmp	r3, #58	; 0x3a
 8012ab4:	d1f4      	bne.n	8012aa0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012ab6:	697b      	ldr	r3, [r7, #20]
 8012ab8:	781b      	ldrb	r3, [r3, #0]
 8012aba:	2b3a      	cmp	r3, #58	; 0x3a
 8012abc:	d11c      	bne.n	8012af8 <get_ldnumber+0x76>
			tp = *path;
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	1c5a      	adds	r2, r3, #1
 8012ac8:	60fa      	str	r2, [r7, #12]
 8012aca:	781b      	ldrb	r3, [r3, #0]
 8012acc:	3b30      	subs	r3, #48	; 0x30
 8012ace:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012ad0:	68bb      	ldr	r3, [r7, #8]
 8012ad2:	2b09      	cmp	r3, #9
 8012ad4:	d80e      	bhi.n	8012af4 <get_ldnumber+0x72>
 8012ad6:	68fa      	ldr	r2, [r7, #12]
 8012ad8:	697b      	ldr	r3, [r7, #20]
 8012ada:	429a      	cmp	r2, r3
 8012adc:	d10a      	bne.n	8012af4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012ade:	68bb      	ldr	r3, [r7, #8]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d107      	bne.n	8012af4 <get_ldnumber+0x72>
					vol = (int)i;
 8012ae4:	68bb      	ldr	r3, [r7, #8]
 8012ae6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012ae8:	697b      	ldr	r3, [r7, #20]
 8012aea:	3301      	adds	r3, #1
 8012aec:	617b      	str	r3, [r7, #20]
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	697a      	ldr	r2, [r7, #20]
 8012af2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012af4:	693b      	ldr	r3, [r7, #16]
 8012af6:	e002      	b.n	8012afe <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012af8:	2300      	movs	r3, #0
 8012afa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012afc:	693b      	ldr	r3, [r7, #16]
}
 8012afe:	4618      	mov	r0, r3
 8012b00:	371c      	adds	r7, #28
 8012b02:	46bd      	mov	sp, r7
 8012b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b08:	4770      	bx	lr
	...

08012b0c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b082      	sub	sp, #8
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	6078      	str	r0, [r7, #4]
 8012b14:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	2200      	movs	r2, #0
 8012b1a:	70da      	strb	r2, [r3, #3]
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8012b22:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012b24:	6839      	ldr	r1, [r7, #0]
 8012b26:	6878      	ldr	r0, [r7, #4]
 8012b28:	f7fd fcf2 	bl	8010510 <move_window>
 8012b2c:	4603      	mov	r3, r0
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d001      	beq.n	8012b36 <check_fs+0x2a>
 8012b32:	2304      	movs	r3, #4
 8012b34:	e044      	b.n	8012bc0 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	333c      	adds	r3, #60	; 0x3c
 8012b3a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012b3e:	4618      	mov	r0, r3
 8012b40:	f7fd f8f2 	bl	800fd28 <ld_word>
 8012b44:	4603      	mov	r3, r0
 8012b46:	461a      	mov	r2, r3
 8012b48:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012b4c:	429a      	cmp	r2, r3
 8012b4e:	d001      	beq.n	8012b54 <check_fs+0x48>
 8012b50:	2303      	movs	r3, #3
 8012b52:	e035      	b.n	8012bc0 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012b5a:	2be9      	cmp	r3, #233	; 0xe9
 8012b5c:	d009      	beq.n	8012b72 <check_fs+0x66>
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012b64:	2beb      	cmp	r3, #235	; 0xeb
 8012b66:	d11e      	bne.n	8012ba6 <check_fs+0x9a>
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012b6e:	2b90      	cmp	r3, #144	; 0x90
 8012b70:	d119      	bne.n	8012ba6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	333c      	adds	r3, #60	; 0x3c
 8012b76:	3336      	adds	r3, #54	; 0x36
 8012b78:	4618      	mov	r0, r3
 8012b7a:	f7fd f8ed 	bl	800fd58 <ld_dword>
 8012b7e:	4603      	mov	r3, r0
 8012b80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012b84:	4a10      	ldr	r2, [pc, #64]	; (8012bc8 <check_fs+0xbc>)
 8012b86:	4293      	cmp	r3, r2
 8012b88:	d101      	bne.n	8012b8e <check_fs+0x82>
 8012b8a:	2300      	movs	r3, #0
 8012b8c:	e018      	b.n	8012bc0 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	333c      	adds	r3, #60	; 0x3c
 8012b92:	3352      	adds	r3, #82	; 0x52
 8012b94:	4618      	mov	r0, r3
 8012b96:	f7fd f8df 	bl	800fd58 <ld_dword>
 8012b9a:	4602      	mov	r2, r0
 8012b9c:	4b0b      	ldr	r3, [pc, #44]	; (8012bcc <check_fs+0xc0>)
 8012b9e:	429a      	cmp	r2, r3
 8012ba0:	d101      	bne.n	8012ba6 <check_fs+0x9a>
 8012ba2:	2300      	movs	r3, #0
 8012ba4:	e00c      	b.n	8012bc0 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	333c      	adds	r3, #60	; 0x3c
 8012baa:	220b      	movs	r2, #11
 8012bac:	4908      	ldr	r1, [pc, #32]	; (8012bd0 <check_fs+0xc4>)
 8012bae:	4618      	mov	r0, r3
 8012bb0:	f7fd fabb 	bl	801012a <mem_cmp>
 8012bb4:	4603      	mov	r3, r0
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d101      	bne.n	8012bbe <check_fs+0xb2>
 8012bba:	2301      	movs	r3, #1
 8012bbc:	e000      	b.n	8012bc0 <check_fs+0xb4>
#endif
	return 2;
 8012bbe:	2302      	movs	r3, #2
}
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	3708      	adds	r7, #8
 8012bc4:	46bd      	mov	sp, r7
 8012bc6:	bd80      	pop	{r7, pc}
 8012bc8:	00544146 	.word	0x00544146
 8012bcc:	33544146 	.word	0x33544146
 8012bd0:	080158ac 	.word	0x080158ac

08012bd4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012bd4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8012bd8:	b098      	sub	sp, #96	; 0x60
 8012bda:	af00      	add	r7, sp, #0
 8012bdc:	60f8      	str	r0, [r7, #12]
 8012bde:	60b9      	str	r1, [r7, #8]
 8012be0:	4613      	mov	r3, r2
 8012be2:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012be4:	68bb      	ldr	r3, [r7, #8]
 8012be6:	2200      	movs	r2, #0
 8012be8:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012bea:	68f8      	ldr	r0, [r7, #12]
 8012bec:	f7ff ff49 	bl	8012a82 <get_ldnumber>
 8012bf0:	6478      	str	r0, [r7, #68]	; 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 8012bf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	da01      	bge.n	8012bfc <find_volume+0x28>
 8012bf8:	230b      	movs	r3, #11
 8012bfa:	e368      	b.n	80132ce <find_volume+0x6fa>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012bfc:	4aaa      	ldr	r2, [pc, #680]	; (8012ea8 <find_volume+0x2d4>)
 8012bfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012c04:	643b      	str	r3, [r7, #64]	; 0x40
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d101      	bne.n	8012c10 <find_volume+0x3c>
 8012c0c:	230c      	movs	r3, #12
 8012c0e:	e35e      	b.n	80132ce <find_volume+0x6fa>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012c10:	68bb      	ldr	r3, [r7, #8]
 8012c12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012c14:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012c16:	79fb      	ldrb	r3, [r7, #7]
 8012c18:	f023 0301 	bic.w	r3, r3, #1
 8012c1c:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c20:	781b      	ldrb	r3, [r3, #0]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d01a      	beq.n	8012c5c <find_volume+0x88>
		stat = disk_status(fs->drv);
 8012c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c28:	785b      	ldrb	r3, [r3, #1]
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	f7fc ffde 	bl	800fbec <disk_status>
 8012c30:	4603      	mov	r3, r0
 8012c32:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012c36:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012c3a:	f003 0301 	and.w	r3, r3, #1
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d10c      	bne.n	8012c5c <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012c42:	79fb      	ldrb	r3, [r7, #7]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d007      	beq.n	8012c58 <find_volume+0x84>
 8012c48:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012c4c:	f003 0304 	and.w	r3, r3, #4
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d001      	beq.n	8012c58 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 8012c54:	230a      	movs	r3, #10
 8012c56:	e33a      	b.n	80132ce <find_volume+0x6fa>
			}
			return FR_OK;				/* The file system object is valid */
 8012c58:	2300      	movs	r3, #0
 8012c5a:	e338      	b.n	80132ce <find_volume+0x6fa>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c5e:	2200      	movs	r2, #0
 8012c60:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012c62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012c64:	b2da      	uxtb	r2, r3
 8012c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c68:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012c6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c6c:	785b      	ldrb	r3, [r3, #1]
 8012c6e:	4618      	mov	r0, r3
 8012c70:	f7fc ffd6 	bl	800fc20 <disk_initialize>
 8012c74:	4603      	mov	r3, r0
 8012c76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012c7a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012c7e:	f003 0301 	and.w	r3, r3, #1
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d001      	beq.n	8012c8a <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012c86:	2303      	movs	r3, #3
 8012c88:	e321      	b.n	80132ce <find_volume+0x6fa>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012c8a:	79fb      	ldrb	r3, [r7, #7]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d007      	beq.n	8012ca0 <find_volume+0xcc>
 8012c90:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012c94:	f003 0304 	and.w	r3, r3, #4
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d001      	beq.n	8012ca0 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8012c9c:	230a      	movs	r3, #10
 8012c9e:	e316      	b.n	80132ce <find_volume+0x6fa>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8012ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ca2:	7858      	ldrb	r0, [r3, #1]
 8012ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ca6:	330c      	adds	r3, #12
 8012ca8:	461a      	mov	r2, r3
 8012caa:	2102      	movs	r1, #2
 8012cac:	f7fd f81e 	bl	800fcec <disk_ioctl>
 8012cb0:	4603      	mov	r3, r0
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d001      	beq.n	8012cba <find_volume+0xe6>
 8012cb6:	2301      	movs	r3, #1
 8012cb8:	e309      	b.n	80132ce <find_volume+0x6fa>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012cbc:	899b      	ldrh	r3, [r3, #12]
 8012cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012cc2:	d80d      	bhi.n	8012ce0 <find_volume+0x10c>
 8012cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012cc6:	899b      	ldrh	r3, [r3, #12]
 8012cc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012ccc:	d308      	bcc.n	8012ce0 <find_volume+0x10c>
 8012cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012cd0:	899b      	ldrh	r3, [r3, #12]
 8012cd2:	461a      	mov	r2, r3
 8012cd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012cd6:	899b      	ldrh	r3, [r3, #12]
 8012cd8:	3b01      	subs	r3, #1
 8012cda:	4013      	ands	r3, r2
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d001      	beq.n	8012ce4 <find_volume+0x110>
 8012ce0:	2301      	movs	r3, #1
 8012ce2:	e2f4      	b.n	80132ce <find_volume+0x6fa>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	65bb      	str	r3, [r7, #88]	; 0x58
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012ce8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012cea:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012cec:	f7ff ff0e 	bl	8012b0c <check_fs>
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012cf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012cfa:	2b02      	cmp	r3, #2
 8012cfc:	d14b      	bne.n	8012d96 <find_volume+0x1c2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012cfe:	2300      	movs	r3, #0
 8012d00:	64bb      	str	r3, [r7, #72]	; 0x48
 8012d02:	e01f      	b.n	8012d44 <find_volume+0x170>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d06:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8012d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d0c:	011b      	lsls	r3, r3, #4
 8012d0e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012d12:	4413      	add	r3, r2
 8012d14:	63bb      	str	r3, [r7, #56]	; 0x38
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d18:	3304      	adds	r3, #4
 8012d1a:	781b      	ldrb	r3, [r3, #0]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d006      	beq.n	8012d2e <find_volume+0x15a>
 8012d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d22:	3308      	adds	r3, #8
 8012d24:	4618      	mov	r0, r3
 8012d26:	f7fd f817 	bl	800fd58 <ld_dword>
 8012d2a:	4602      	mov	r2, r0
 8012d2c:	e000      	b.n	8012d30 <find_volume+0x15c>
 8012d2e:	2200      	movs	r2, #0
 8012d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d32:	009b      	lsls	r3, r3, #2
 8012d34:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8012d38:	440b      	add	r3, r1
 8012d3a:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d40:	3301      	adds	r3, #1
 8012d42:	64bb      	str	r3, [r7, #72]	; 0x48
 8012d44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d46:	2b03      	cmp	r3, #3
 8012d48:	d9dc      	bls.n	8012d04 <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (i) i--;
 8012d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d002      	beq.n	8012d5a <find_volume+0x186>
 8012d54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d56:	3b01      	subs	r3, #1
 8012d58:	64bb      	str	r3, [r7, #72]	; 0x48
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012d5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d5c:	009b      	lsls	r3, r3, #2
 8012d5e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8012d62:	4413      	add	r3, r2
 8012d64:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8012d68:	65bb      	str	r3, [r7, #88]	; 0x58
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012d6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d005      	beq.n	8012d7c <find_volume+0x1a8>
 8012d70:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012d72:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012d74:	f7ff feca 	bl	8012b0c <check_fs>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	e000      	b.n	8012d7e <find_volume+0x1aa>
 8012d7c:	2303      	movs	r3, #3
 8012d7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012d82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012d86:	2b01      	cmp	r3, #1
 8012d88:	d905      	bls.n	8012d96 <find_volume+0x1c2>
 8012d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d8c:	3301      	adds	r3, #1
 8012d8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8012d90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d92:	2b03      	cmp	r3, #3
 8012d94:	d9e1      	bls.n	8012d5a <find_volume+0x186>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012d96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012d9a:	2b04      	cmp	r3, #4
 8012d9c:	d101      	bne.n	8012da2 <find_volume+0x1ce>
 8012d9e:	2301      	movs	r3, #1
 8012da0:	e295      	b.n	80132ce <find_volume+0x6fa>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012da2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012da6:	2b01      	cmp	r3, #1
 8012da8:	d901      	bls.n	8012dae <find_volume+0x1da>
 8012daa:	230d      	movs	r3, #13
 8012dac:	e28f      	b.n	80132ce <find_volume+0x6fa>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 8012dae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012db2:	2b01      	cmp	r3, #1
 8012db4:	f040 8101 	bne.w	8012fba <find_volume+0x3e6>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8012db8:	230b      	movs	r3, #11
 8012dba:	64bb      	str	r3, [r7, #72]	; 0x48
 8012dbc:	e002      	b.n	8012dc4 <find_volume+0x1f0>
 8012dbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012dc0:	3301      	adds	r3, #1
 8012dc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8012dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012dc6:	2b3f      	cmp	r3, #63	; 0x3f
 8012dc8:	d806      	bhi.n	8012dd8 <find_volume+0x204>
 8012dca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012dcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012dce:	4413      	add	r3, r2
 8012dd0:	333c      	adds	r3, #60	; 0x3c
 8012dd2:	781b      	ldrb	r3, [r3, #0]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d0f2      	beq.n	8012dbe <find_volume+0x1ea>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8012dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012dda:	2b3f      	cmp	r3, #63	; 0x3f
 8012ddc:	d801      	bhi.n	8012de2 <find_volume+0x20e>
 8012dde:	230d      	movs	r3, #13
 8012de0:	e275      	b.n	80132ce <find_volume+0x6fa>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 8012de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012de4:	333c      	adds	r3, #60	; 0x3c
 8012de6:	3368      	adds	r3, #104	; 0x68
 8012de8:	4618      	mov	r0, r3
 8012dea:	f7fc ff9d 	bl	800fd28 <ld_word>
 8012dee:	4603      	mov	r3, r0
 8012df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012df4:	d001      	beq.n	8012dfa <find_volume+0x226>
 8012df6:	230d      	movs	r3, #13
 8012df8:	e269      	b.n	80132ce <find_volume+0x6fa>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 8012dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012dfc:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8012e00:	461a      	mov	r2, r3
 8012e02:	2301      	movs	r3, #1
 8012e04:	4093      	lsls	r3, r2
 8012e06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012e08:	8992      	ldrh	r2, [r2, #12]
 8012e0a:	4293      	cmp	r3, r2
 8012e0c:	d001      	beq.n	8012e12 <find_volume+0x23e>
			return FR_NO_FILESYSTEM;
 8012e0e:	230d      	movs	r3, #13
 8012e10:	e25d      	b.n	80132ce <find_volume+0x6fa>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 8012e12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e14:	333c      	adds	r3, #60	; 0x3c
 8012e16:	3348      	adds	r3, #72	; 0x48
 8012e18:	4618      	mov	r0, r3
 8012e1a:	f7fc ffc0 	bl	800fd9e <ld_qword>
 8012e1e:	460a      	mov	r2, r1
 8012e20:	4601      	mov	r1, r0
 8012e22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012e24:	469b      	mov	fp, r3
 8012e26:	f04f 0c00 	mov.w	ip, #0
 8012e2a:	eb1b 0301 	adds.w	r3, fp, r1
 8012e2e:	eb4c 0402 	adc.w	r4, ip, r2
 8012e32:	e9c7 3408 	strd	r3, r4, [r7, #32]
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 8012e36:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8012e3a:	2c01      	cmp	r4, #1
 8012e3c:	bf08      	it	eq
 8012e3e:	2b00      	cmpeq	r3, #0
 8012e40:	d301      	bcc.n	8012e46 <find_volume+0x272>
 8012e42:	230d      	movs	r3, #13
 8012e44:	e243      	b.n	80132ce <find_volume+0x6fa>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 8012e46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e48:	333c      	adds	r3, #60	; 0x3c
 8012e4a:	3354      	adds	r3, #84	; 0x54
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	f7fc ff83 	bl	800fd58 <ld_dword>
 8012e52:	4602      	mov	r2, r0
 8012e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e56:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8012e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e5a:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8012e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e60:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8012e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e64:	789b      	ldrb	r3, [r3, #2]
 8012e66:	2b01      	cmp	r3, #1
 8012e68:	d001      	beq.n	8012e6e <find_volume+0x29a>
 8012e6a:	230d      	movs	r3, #13
 8012e6c:	e22f      	b.n	80132ce <find_volume+0x6fa>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8012e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e70:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8012e74:	461a      	mov	r2, r3
 8012e76:	2301      	movs	r3, #1
 8012e78:	4093      	lsls	r3, r2
 8012e7a:	b29a      	uxth	r2, r3
 8012e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e7e:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8012e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e82:	895b      	ldrh	r3, [r3, #10]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d101      	bne.n	8012e8c <find_volume+0x2b8>
 8012e88:	230d      	movs	r3, #13
 8012e8a:	e220      	b.n	80132ce <find_volume+0x6fa>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8012e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e8e:	333c      	adds	r3, #60	; 0x3c
 8012e90:	335c      	adds	r3, #92	; 0x5c
 8012e92:	4618      	mov	r0, r3
 8012e94:	f7fc ff60 	bl	800fd58 <ld_dword>
 8012e98:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8012e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e9c:	4a03      	ldr	r2, [pc, #12]	; (8012eac <find_volume+0x2d8>)
 8012e9e:	4293      	cmp	r3, r2
 8012ea0:	d906      	bls.n	8012eb0 <find_volume+0x2dc>
 8012ea2:	230d      	movs	r3, #13
 8012ea4:	e213      	b.n	80132ce <find_volume+0x6fa>
 8012ea6:	bf00      	nop
 8012ea8:	24000284 	.word	0x24000284
 8012eac:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 8012eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eb2:	1c9a      	adds	r2, r3, #2
 8012eb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012eb6:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 8012eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012eba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012ebc:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 8012ebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ec0:	333c      	adds	r3, #60	; 0x3c
 8012ec2:	3358      	adds	r3, #88	; 0x58
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	f7fc ff47 	bl	800fd58 <ld_dword>
 8012eca:	4602      	mov	r2, r0
 8012ecc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012ece:	441a      	add	r2, r3
 8012ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ed2:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8012ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ed6:	333c      	adds	r3, #60	; 0x3c
 8012ed8:	3350      	adds	r3, #80	; 0x50
 8012eda:	4618      	mov	r0, r3
 8012edc:	f7fc ff3c 	bl	800fd58 <ld_dword>
 8012ee0:	4602      	mov	r2, r0
 8012ee2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012ee4:	441a      	add	r2, r3
 8012ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ee8:	62da      	str	r2, [r3, #44]	; 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8012eea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012eee:	4619      	mov	r1, r3
 8012ef0:	f04f 0200 	mov.w	r2, #0
 8012ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ef6:	895b      	ldrh	r3, [r3, #10]
 8012ef8:	4618      	mov	r0, r3
 8012efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012efc:	fb03 f300 	mul.w	r3, r3, r0
 8012f00:	469b      	mov	fp, r3
 8012f02:	f04f 0c00 	mov.w	ip, #0
 8012f06:	eb1b 0301 	adds.w	r3, fp, r1
 8012f0a:	eb4c 0402 	adc.w	r4, ip, r2
 8012f0e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8012f12:	42a2      	cmp	r2, r4
 8012f14:	bf08      	it	eq
 8012f16:	4299      	cmpeq	r1, r3
 8012f18:	d201      	bcs.n	8012f1e <find_volume+0x34a>
 8012f1a:	230d      	movs	r3, #13
 8012f1c:	e1d7      	b.n	80132ce <find_volume+0x6fa>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8012f1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f20:	333c      	adds	r3, #60	; 0x3c
 8012f22:	3360      	adds	r3, #96	; 0x60
 8012f24:	4618      	mov	r0, r3
 8012f26:	f7fc ff17 	bl	800fd58 <ld_dword>
 8012f2a:	4602      	mov	r2, r0
 8012f2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f2e:	631a      	str	r2, [r3, #48]	; 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 8012f30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f34:	4619      	mov	r1, r3
 8012f36:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012f38:	f7fd fb88 	bl	801064c <clust2sect>
 8012f3c:	4603      	mov	r3, r0
 8012f3e:	4619      	mov	r1, r3
 8012f40:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012f42:	f7fd fae5 	bl	8010510 <move_window>
 8012f46:	4603      	mov	r3, r0
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d001      	beq.n	8012f50 <find_volume+0x37c>
 8012f4c:	2301      	movs	r3, #1
 8012f4e:	e1be      	b.n	80132ce <find_volume+0x6fa>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8012f50:	2300      	movs	r3, #0
 8012f52:	64bb      	str	r3, [r7, #72]	; 0x48
 8012f54:	e015      	b.n	8012f82 <find_volume+0x3ae>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8012f56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f5a:	4413      	add	r3, r2
 8012f5c:	333c      	adds	r3, #60	; 0x3c
 8012f5e:	781b      	ldrb	r3, [r3, #0]
 8012f60:	2b81      	cmp	r3, #129	; 0x81
 8012f62:	d10b      	bne.n	8012f7c <find_volume+0x3a8>
 8012f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f66:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8012f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f6c:	3314      	adds	r3, #20
 8012f6e:	4413      	add	r3, r2
 8012f70:	4618      	mov	r0, r3
 8012f72:	f7fc fef1 	bl	800fd58 <ld_dword>
 8012f76:	4603      	mov	r3, r0
 8012f78:	2b02      	cmp	r3, #2
 8012f7a:	d009      	beq.n	8012f90 <find_volume+0x3bc>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8012f7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f7e:	3320      	adds	r3, #32
 8012f80:	64bb      	str	r3, [r7, #72]	; 0x48
 8012f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f84:	899b      	ldrh	r3, [r3, #12]
 8012f86:	461a      	mov	r2, r3
 8012f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f8a:	4293      	cmp	r3, r2
 8012f8c:	d3e3      	bcc.n	8012f56 <find_volume+0x382>
 8012f8e:	e000      	b.n	8012f92 <find_volume+0x3be>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8012f90:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 8012f92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f94:	899b      	ldrh	r3, [r3, #12]
 8012f96:	461a      	mov	r2, r3
 8012f98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f9a:	4293      	cmp	r3, r2
 8012f9c:	d101      	bne.n	8012fa2 <find_volume+0x3ce>
 8012f9e:	230d      	movs	r3, #13
 8012fa0:	e195      	b.n	80132ce <find_volume+0x6fa>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012fa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8012fa8:	61da      	str	r2, [r3, #28]
 8012faa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fac:	69da      	ldr	r2, [r3, #28]
 8012fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fb0:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 8012fb2:	2304      	movs	r3, #4
 8012fb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012fb8:	e177      	b.n	80132aa <find_volume+0x6d6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fbc:	333c      	adds	r3, #60	; 0x3c
 8012fbe:	330b      	adds	r3, #11
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	f7fc feb1 	bl	800fd28 <ld_word>
 8012fc6:	4603      	mov	r3, r0
 8012fc8:	461a      	mov	r2, r3
 8012fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fcc:	899b      	ldrh	r3, [r3, #12]
 8012fce:	429a      	cmp	r2, r3
 8012fd0:	d001      	beq.n	8012fd6 <find_volume+0x402>
 8012fd2:	230d      	movs	r3, #13
 8012fd4:	e17b      	b.n	80132ce <find_volume+0x6fa>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012fd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fd8:	333c      	adds	r3, #60	; 0x3c
 8012fda:	3316      	adds	r3, #22
 8012fdc:	4618      	mov	r0, r3
 8012fde:	f7fc fea3 	bl	800fd28 <ld_word>
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	657b      	str	r3, [r7, #84]	; 0x54
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012fe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d106      	bne.n	8012ffa <find_volume+0x426>
 8012fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fee:	333c      	adds	r3, #60	; 0x3c
 8012ff0:	3324      	adds	r3, #36	; 0x24
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	f7fc feb0 	bl	800fd58 <ld_dword>
 8012ff8:	6578      	str	r0, [r7, #84]	; 0x54
		fs->fsize = fasize;
 8012ffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ffc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012ffe:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013002:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8013006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013008:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801300a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801300c:	789b      	ldrb	r3, [r3, #2]
 801300e:	2b01      	cmp	r3, #1
 8013010:	d005      	beq.n	801301e <find_volume+0x44a>
 8013012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013014:	789b      	ldrb	r3, [r3, #2]
 8013016:	2b02      	cmp	r3, #2
 8013018:	d001      	beq.n	801301e <find_volume+0x44a>
 801301a:	230d      	movs	r3, #13
 801301c:	e157      	b.n	80132ce <find_volume+0x6fa>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801301e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013020:	789b      	ldrb	r3, [r3, #2]
 8013022:	461a      	mov	r2, r3
 8013024:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013026:	fb02 f303 	mul.w	r3, r2, r3
 801302a:	657b      	str	r3, [r7, #84]	; 0x54

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801302c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801302e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8013032:	b29a      	uxth	r2, r3
 8013034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013036:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8013038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801303a:	895b      	ldrh	r3, [r3, #10]
 801303c:	2b00      	cmp	r3, #0
 801303e:	d008      	beq.n	8013052 <find_volume+0x47e>
 8013040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013042:	895b      	ldrh	r3, [r3, #10]
 8013044:	461a      	mov	r2, r3
 8013046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013048:	895b      	ldrh	r3, [r3, #10]
 801304a:	3b01      	subs	r3, #1
 801304c:	4013      	ands	r3, r2
 801304e:	2b00      	cmp	r3, #0
 8013050:	d001      	beq.n	8013056 <find_volume+0x482>
 8013052:	230d      	movs	r3, #13
 8013054:	e13b      	b.n	80132ce <find_volume+0x6fa>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013058:	333c      	adds	r3, #60	; 0x3c
 801305a:	3311      	adds	r3, #17
 801305c:	4618      	mov	r0, r3
 801305e:	f7fc fe63 	bl	800fd28 <ld_word>
 8013062:	4603      	mov	r3, r0
 8013064:	461a      	mov	r2, r3
 8013066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013068:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801306a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801306c:	891b      	ldrh	r3, [r3, #8]
 801306e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013070:	8992      	ldrh	r2, [r2, #12]
 8013072:	0952      	lsrs	r2, r2, #5
 8013074:	b292      	uxth	r2, r2
 8013076:	fbb3 f1f2 	udiv	r1, r3, r2
 801307a:	fb02 f201 	mul.w	r2, r2, r1
 801307e:	1a9b      	subs	r3, r3, r2
 8013080:	b29b      	uxth	r3, r3
 8013082:	2b00      	cmp	r3, #0
 8013084:	d001      	beq.n	801308a <find_volume+0x4b6>
 8013086:	230d      	movs	r3, #13
 8013088:	e121      	b.n	80132ce <find_volume+0x6fa>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801308a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801308c:	333c      	adds	r3, #60	; 0x3c
 801308e:	3313      	adds	r3, #19
 8013090:	4618      	mov	r0, r3
 8013092:	f7fc fe49 	bl	800fd28 <ld_word>
 8013096:	4603      	mov	r3, r0
 8013098:	653b      	str	r3, [r7, #80]	; 0x50
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801309a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801309c:	2b00      	cmp	r3, #0
 801309e:	d106      	bne.n	80130ae <find_volume+0x4da>
 80130a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80130a2:	333c      	adds	r3, #60	; 0x3c
 80130a4:	3320      	adds	r3, #32
 80130a6:	4618      	mov	r0, r3
 80130a8:	f7fc fe56 	bl	800fd58 <ld_dword>
 80130ac:	6538      	str	r0, [r7, #80]	; 0x50

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80130ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80130b0:	333c      	adds	r3, #60	; 0x3c
 80130b2:	330e      	adds	r3, #14
 80130b4:	4618      	mov	r0, r3
 80130b6:	f7fc fe37 	bl	800fd28 <ld_word>
 80130ba:	4603      	mov	r3, r0
 80130bc:	86fb      	strh	r3, [r7, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80130be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d101      	bne.n	80130c8 <find_volume+0x4f4>
 80130c4:	230d      	movs	r3, #13
 80130c6:	e102      	b.n	80132ce <find_volume+0x6fa>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80130c8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80130ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80130cc:	4413      	add	r3, r2
 80130ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80130d0:	8911      	ldrh	r1, [r2, #8]
 80130d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80130d4:	8992      	ldrh	r2, [r2, #12]
 80130d6:	0952      	lsrs	r2, r2, #5
 80130d8:	b292      	uxth	r2, r2
 80130da:	fbb1 f2f2 	udiv	r2, r1, r2
 80130de:	b292      	uxth	r2, r2
 80130e0:	4413      	add	r3, r2
 80130e2:	633b      	str	r3, [r7, #48]	; 0x30
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80130e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80130e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130e8:	429a      	cmp	r2, r3
 80130ea:	d201      	bcs.n	80130f0 <find_volume+0x51c>
 80130ec:	230d      	movs	r3, #13
 80130ee:	e0ee      	b.n	80132ce <find_volume+0x6fa>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80130f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80130f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130f4:	1ad3      	subs	r3, r2, r3
 80130f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80130f8:	8952      	ldrh	r2, [r2, #10]
 80130fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80130fe:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013102:	2b00      	cmp	r3, #0
 8013104:	d101      	bne.n	801310a <find_volume+0x536>
 8013106:	230d      	movs	r3, #13
 8013108:	e0e1      	b.n	80132ce <find_volume+0x6fa>
		fmt = FS_FAT32;
 801310a:	2303      	movs	r3, #3
 801310c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013112:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013116:	4293      	cmp	r3, r2
 8013118:	d802      	bhi.n	8013120 <find_volume+0x54c>
 801311a:	2302      	movs	r3, #2
 801311c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013122:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013126:	4293      	cmp	r3, r2
 8013128:	d802      	bhi.n	8013130 <find_volume+0x55c>
 801312a:	2301      	movs	r3, #1
 801312c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013132:	1c9a      	adds	r2, r3, #2
 8013134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013136:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8013138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801313a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801313c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801313e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013140:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013142:	441a      	add	r2, r3
 8013144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013146:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8013148:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801314a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801314c:	441a      	add	r2, r3
 801314e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013150:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 8013152:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013156:	2b03      	cmp	r3, #3
 8013158:	d11e      	bne.n	8013198 <find_volume+0x5c4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801315a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801315c:	333c      	adds	r3, #60	; 0x3c
 801315e:	332a      	adds	r3, #42	; 0x2a
 8013160:	4618      	mov	r0, r3
 8013162:	f7fc fde1 	bl	800fd28 <ld_word>
 8013166:	4603      	mov	r3, r0
 8013168:	2b00      	cmp	r3, #0
 801316a:	d001      	beq.n	8013170 <find_volume+0x59c>
 801316c:	230d      	movs	r3, #13
 801316e:	e0ae      	b.n	80132ce <find_volume+0x6fa>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013172:	891b      	ldrh	r3, [r3, #8]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d001      	beq.n	801317c <find_volume+0x5a8>
 8013178:	230d      	movs	r3, #13
 801317a:	e0a8      	b.n	80132ce <find_volume+0x6fa>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801317c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801317e:	333c      	adds	r3, #60	; 0x3c
 8013180:	332c      	adds	r3, #44	; 0x2c
 8013182:	4618      	mov	r0, r3
 8013184:	f7fc fde8 	bl	800fd58 <ld_dword>
 8013188:	4602      	mov	r2, r0
 801318a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801318c:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801318e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013190:	6a1b      	ldr	r3, [r3, #32]
 8013192:	009b      	lsls	r3, r3, #2
 8013194:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013196:	e01f      	b.n	80131d8 <find_volume+0x604>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801319a:	891b      	ldrh	r3, [r3, #8]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d101      	bne.n	80131a4 <find_volume+0x5d0>
 80131a0:	230d      	movs	r3, #13
 80131a2:	e094      	b.n	80132ce <find_volume+0x6fa>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80131a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80131a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80131aa:	441a      	add	r2, r3
 80131ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131ae:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80131b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80131b4:	2b02      	cmp	r3, #2
 80131b6:	d103      	bne.n	80131c0 <find_volume+0x5ec>
 80131b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131ba:	6a1b      	ldr	r3, [r3, #32]
 80131bc:	005b      	lsls	r3, r3, #1
 80131be:	e00a      	b.n	80131d6 <find_volume+0x602>
 80131c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131c2:	6a1a      	ldr	r2, [r3, #32]
 80131c4:	4613      	mov	r3, r2
 80131c6:	005b      	lsls	r3, r3, #1
 80131c8:	4413      	add	r3, r2
 80131ca:	085a      	lsrs	r2, r3, #1
 80131cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131ce:	6a1b      	ldr	r3, [r3, #32]
 80131d0:	f003 0301 	and.w	r3, r3, #1
 80131d4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80131d6:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80131d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80131dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131de:	899b      	ldrh	r3, [r3, #12]
 80131e0:	4619      	mov	r1, r3
 80131e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80131e4:	440b      	add	r3, r1
 80131e6:	3b01      	subs	r3, #1
 80131e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80131ea:	8989      	ldrh	r1, [r1, #12]
 80131ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80131f0:	429a      	cmp	r2, r3
 80131f2:	d201      	bcs.n	80131f8 <find_volume+0x624>
 80131f4:	230d      	movs	r3, #13
 80131f6:	e06a      	b.n	80132ce <find_volume+0x6fa>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80131f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131fa:	f04f 32ff 	mov.w	r2, #4294967295
 80131fe:	61da      	str	r2, [r3, #28]
 8013200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013202:	69da      	ldr	r2, [r3, #28]
 8013204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013206:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 8013208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801320a:	2280      	movs	r2, #128	; 0x80
 801320c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801320e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013212:	2b03      	cmp	r3, #3
 8013214:	d149      	bne.n	80132aa <find_volume+0x6d6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013218:	333c      	adds	r3, #60	; 0x3c
 801321a:	3330      	adds	r3, #48	; 0x30
 801321c:	4618      	mov	r0, r3
 801321e:	f7fc fd83 	bl	800fd28 <ld_word>
 8013222:	4603      	mov	r3, r0
 8013224:	2b01      	cmp	r3, #1
 8013226:	d140      	bne.n	80132aa <find_volume+0x6d6>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013228:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801322a:	3301      	adds	r3, #1
 801322c:	4619      	mov	r1, r3
 801322e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8013230:	f7fd f96e 	bl	8010510 <move_window>
 8013234:	4603      	mov	r3, r0
 8013236:	2b00      	cmp	r3, #0
 8013238:	d137      	bne.n	80132aa <find_volume+0x6d6>
		{
			fs->fsi_flag = 0;
 801323a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801323c:	2200      	movs	r2, #0
 801323e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013242:	333c      	adds	r3, #60	; 0x3c
 8013244:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013248:	4618      	mov	r0, r3
 801324a:	f7fc fd6d 	bl	800fd28 <ld_word>
 801324e:	4603      	mov	r3, r0
 8013250:	461a      	mov	r2, r3
 8013252:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013256:	429a      	cmp	r2, r3
 8013258:	d127      	bne.n	80132aa <find_volume+0x6d6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801325a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801325c:	333c      	adds	r3, #60	; 0x3c
 801325e:	4618      	mov	r0, r3
 8013260:	f7fc fd7a 	bl	800fd58 <ld_dword>
 8013264:	4602      	mov	r2, r0
 8013266:	4b1c      	ldr	r3, [pc, #112]	; (80132d8 <find_volume+0x704>)
 8013268:	429a      	cmp	r2, r3
 801326a:	d11e      	bne.n	80132aa <find_volume+0x6d6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801326c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801326e:	333c      	adds	r3, #60	; 0x3c
 8013270:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013274:	4618      	mov	r0, r3
 8013276:	f7fc fd6f 	bl	800fd58 <ld_dword>
 801327a:	4602      	mov	r2, r0
 801327c:	4b17      	ldr	r3, [pc, #92]	; (80132dc <find_volume+0x708>)
 801327e:	429a      	cmp	r2, r3
 8013280:	d113      	bne.n	80132aa <find_volume+0x6d6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013284:	333c      	adds	r3, #60	; 0x3c
 8013286:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801328a:	4618      	mov	r0, r3
 801328c:	f7fc fd64 	bl	800fd58 <ld_dword>
 8013290:	4602      	mov	r2, r0
 8013292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013294:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013298:	333c      	adds	r3, #60	; 0x3c
 801329a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801329e:	4618      	mov	r0, r3
 80132a0:	f7fc fd5a 	bl	800fd58 <ld_dword>
 80132a4:	4602      	mov	r2, r0
 80132a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132a8:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80132aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132ac:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80132b0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80132b2:	4b0b      	ldr	r3, [pc, #44]	; (80132e0 <find_volume+0x70c>)
 80132b4:	881b      	ldrh	r3, [r3, #0]
 80132b6:	3301      	adds	r3, #1
 80132b8:	b29a      	uxth	r2, r3
 80132ba:	4b09      	ldr	r3, [pc, #36]	; (80132e0 <find_volume+0x70c>)
 80132bc:	801a      	strh	r2, [r3, #0]
 80132be:	4b08      	ldr	r3, [pc, #32]	; (80132e0 <find_volume+0x70c>)
 80132c0:	881a      	ldrh	r2, [r3, #0]
 80132c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132c4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80132c6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80132c8:	f7fd f8ba 	bl	8010440 <clear_lock>
#endif
	return FR_OK;
 80132cc:	2300      	movs	r3, #0
}
 80132ce:	4618      	mov	r0, r3
 80132d0:	3760      	adds	r7, #96	; 0x60
 80132d2:	46bd      	mov	sp, r7
 80132d4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80132d8:	41615252 	.word	0x41615252
 80132dc:	61417272 	.word	0x61417272
 80132e0:	24000288 	.word	0x24000288

080132e4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80132e4:	b580      	push	{r7, lr}
 80132e6:	b084      	sub	sp, #16
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	6078      	str	r0, [r7, #4]
 80132ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80132ee:	2309      	movs	r3, #9
 80132f0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d01c      	beq.n	8013332 <validate+0x4e>
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d018      	beq.n	8013332 <validate+0x4e>
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	781b      	ldrb	r3, [r3, #0]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d013      	beq.n	8013332 <validate+0x4e>
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	889a      	ldrh	r2, [r3, #4]
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	88db      	ldrh	r3, [r3, #6]
 8013314:	429a      	cmp	r2, r3
 8013316:	d10c      	bne.n	8013332 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	785b      	ldrb	r3, [r3, #1]
 801331e:	4618      	mov	r0, r3
 8013320:	f7fc fc64 	bl	800fbec <disk_status>
 8013324:	4603      	mov	r3, r0
 8013326:	f003 0301 	and.w	r3, r3, #1
 801332a:	2b00      	cmp	r3, #0
 801332c:	d101      	bne.n	8013332 <validate+0x4e>
			res = FR_OK;
 801332e:	2300      	movs	r3, #0
 8013330:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013332:	7bfb      	ldrb	r3, [r7, #15]
 8013334:	2b00      	cmp	r3, #0
 8013336:	d102      	bne.n	801333e <validate+0x5a>
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	e000      	b.n	8013340 <validate+0x5c>
 801333e:	2300      	movs	r3, #0
 8013340:	683a      	ldr	r2, [r7, #0]
 8013342:	6013      	str	r3, [r2, #0]
	return res;
 8013344:	7bfb      	ldrb	r3, [r7, #15]
}
 8013346:	4618      	mov	r0, r3
 8013348:	3710      	adds	r7, #16
 801334a:	46bd      	mov	sp, r7
 801334c:	bd80      	pop	{r7, pc}
	...

08013350 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013350:	b580      	push	{r7, lr}
 8013352:	b088      	sub	sp, #32
 8013354:	af00      	add	r7, sp, #0
 8013356:	60f8      	str	r0, [r7, #12]
 8013358:	60b9      	str	r1, [r7, #8]
 801335a:	4613      	mov	r3, r2
 801335c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801335e:	68bb      	ldr	r3, [r7, #8]
 8013360:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013362:	f107 0310 	add.w	r3, r7, #16
 8013366:	4618      	mov	r0, r3
 8013368:	f7ff fb8b 	bl	8012a82 <get_ldnumber>
 801336c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801336e:	69fb      	ldr	r3, [r7, #28]
 8013370:	2b00      	cmp	r3, #0
 8013372:	da01      	bge.n	8013378 <f_mount+0x28>
 8013374:	230b      	movs	r3, #11
 8013376:	e02b      	b.n	80133d0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013378:	4a17      	ldr	r2, [pc, #92]	; (80133d8 <f_mount+0x88>)
 801337a:	69fb      	ldr	r3, [r7, #28]
 801337c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013380:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013382:	69bb      	ldr	r3, [r7, #24]
 8013384:	2b00      	cmp	r3, #0
 8013386:	d005      	beq.n	8013394 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013388:	69b8      	ldr	r0, [r7, #24]
 801338a:	f7fd f859 	bl	8010440 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801338e:	69bb      	ldr	r3, [r7, #24]
 8013390:	2200      	movs	r2, #0
 8013392:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	2b00      	cmp	r3, #0
 8013398:	d002      	beq.n	80133a0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	2200      	movs	r2, #0
 801339e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80133a0:	68fa      	ldr	r2, [r7, #12]
 80133a2:	490d      	ldr	r1, [pc, #52]	; (80133d8 <f_mount+0x88>)
 80133a4:	69fb      	ldr	r3, [r7, #28]
 80133a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d002      	beq.n	80133b6 <f_mount+0x66>
 80133b0:	79fb      	ldrb	r3, [r7, #7]
 80133b2:	2b01      	cmp	r3, #1
 80133b4:	d001      	beq.n	80133ba <f_mount+0x6a>
 80133b6:	2300      	movs	r3, #0
 80133b8:	e00a      	b.n	80133d0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80133ba:	f107 010c 	add.w	r1, r7, #12
 80133be:	f107 0308 	add.w	r3, r7, #8
 80133c2:	2200      	movs	r2, #0
 80133c4:	4618      	mov	r0, r3
 80133c6:	f7ff fc05 	bl	8012bd4 <find_volume>
 80133ca:	4603      	mov	r3, r0
 80133cc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80133ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80133d0:	4618      	mov	r0, r3
 80133d2:	3720      	adds	r7, #32
 80133d4:	46bd      	mov	sp, r7
 80133d6:	bd80      	pop	{r7, pc}
 80133d8:	24000284 	.word	0x24000284

080133dc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80133dc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80133e0:	f5ad 6d9d 	sub.w	sp, sp, #1256	; 0x4e8
 80133e4:	af00      	add	r7, sp, #0
 80133e6:	f107 030c 	add.w	r3, r7, #12
 80133ea:	6018      	str	r0, [r3, #0]
 80133ec:	f107 0308 	add.w	r3, r7, #8
 80133f0:	6019      	str	r1, [r3, #0]
 80133f2:	1dfb      	adds	r3, r7, #7
 80133f4:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80133f6:	f107 030c 	add.w	r3, r7, #12
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d101      	bne.n	8013404 <f_open+0x28>
 8013400:	2309      	movs	r3, #9
 8013402:	e369      	b.n	8013ad8 <f_open+0x6fc>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013404:	1dfb      	adds	r3, r7, #7
 8013406:	1dfa      	adds	r2, r7, #7
 8013408:	7812      	ldrb	r2, [r2, #0]
 801340a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801340e:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8013410:	1dfb      	adds	r3, r7, #7
 8013412:	781a      	ldrb	r2, [r3, #0]
 8013414:	f207 4174 	addw	r1, r7, #1140	; 0x474
 8013418:	f107 0308 	add.w	r3, r7, #8
 801341c:	4618      	mov	r0, r3
 801341e:	f7ff fbd9 	bl	8012bd4 <find_volume>
 8013422:	4603      	mov	r3, r0
 8013424:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
	if (res == FR_OK) {
 8013428:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 801342c:	2b00      	cmp	r3, #0
 801342e:	f040 8348 	bne.w	8013ac2 <f_open+0x6e6>
		dj.obj.fs = fs;
 8013432:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013436:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
		INIT_NAMBUF(fs);
 801343a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801343e:	f507 721d 	add.w	r2, r7, #628	; 0x274
 8013442:	611a      	str	r2, [r3, #16]
 8013444:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013448:	f107 0214 	add.w	r2, r7, #20
 801344c:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 801344e:	f107 0308 	add.w	r3, r7, #8
 8013452:	681a      	ldr	r2, [r3, #0]
 8013454:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8013458:	4611      	mov	r1, r2
 801345a:	4618      	mov	r0, r3
 801345c:	f7ff fa64 	bl	8012928 <follow_path>
 8013460:	4603      	mov	r3, r0
 8013462:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013466:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 801346a:	2b00      	cmp	r3, #0
 801346c:	d11b      	bne.n	80134a6 <f_open+0xca>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801346e:	f897 34c3 	ldrb.w	r3, [r7, #1219]	; 0x4c3
 8013472:	b25b      	sxtb	r3, r3
 8013474:	2b00      	cmp	r3, #0
 8013476:	da03      	bge.n	8013480 <f_open+0xa4>
				res = FR_INVALID_NAME;
 8013478:	2306      	movs	r3, #6
 801347a:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
 801347e:	e012      	b.n	80134a6 <f_open+0xca>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013480:	1dfb      	adds	r3, r7, #7
 8013482:	781b      	ldrb	r3, [r3, #0]
 8013484:	f023 0301 	bic.w	r3, r3, #1
 8013488:	2b00      	cmp	r3, #0
 801348a:	bf14      	ite	ne
 801348c:	2301      	movne	r3, #1
 801348e:	2300      	moveq	r3, #0
 8013490:	b2db      	uxtb	r3, r3
 8013492:	461a      	mov	r2, r3
 8013494:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8013498:	4611      	mov	r1, r2
 801349a:	4618      	mov	r0, r3
 801349c:	f7fc fe88 	bl	80101b0 <chk_lock>
 80134a0:	4603      	mov	r3, r0
 80134a2:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80134a6:	1dfb      	adds	r3, r7, #7
 80134a8:	781b      	ldrb	r3, [r3, #0]
 80134aa:	f003 031c 	and.w	r3, r3, #28
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	f000 8148 	beq.w	8013744 <f_open+0x368>
			if (res != FR_OK) {					/* No file, create new */
 80134b4:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d019      	beq.n	80134f0 <f_open+0x114>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80134bc:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 80134c0:	2b04      	cmp	r3, #4
 80134c2:	d10e      	bne.n	80134e2 <f_open+0x106>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80134c4:	f7fc fed0 	bl	8010268 <enq_lock>
 80134c8:	4603      	mov	r3, r0
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d006      	beq.n	80134dc <f_open+0x100>
 80134ce:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80134d2:	4618      	mov	r0, r3
 80134d4:	f7fe fec0 	bl	8012258 <dir_register>
 80134d8:	4603      	mov	r3, r0
 80134da:	e000      	b.n	80134de <f_open+0x102>
 80134dc:	2312      	movs	r3, #18
 80134de:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80134e2:	1dfb      	adds	r3, r7, #7
 80134e4:	1dfa      	adds	r2, r7, #7
 80134e6:	7812      	ldrb	r2, [r2, #0]
 80134e8:	f042 0208 	orr.w	r2, r2, #8
 80134ec:	701a      	strb	r2, [r3, #0]
 80134ee:	e012      	b.n	8013516 <f_open+0x13a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80134f0:	f897 347e 	ldrb.w	r3, [r7, #1150]	; 0x47e
 80134f4:	f003 0311 	and.w	r3, r3, #17
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d003      	beq.n	8013504 <f_open+0x128>
					res = FR_DENIED;
 80134fc:	2307      	movs	r3, #7
 80134fe:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
 8013502:	e008      	b.n	8013516 <f_open+0x13a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013504:	1dfb      	adds	r3, r7, #7
 8013506:	781b      	ldrb	r3, [r3, #0]
 8013508:	f003 0304 	and.w	r3, r3, #4
 801350c:	2b00      	cmp	r3, #0
 801350e:	d002      	beq.n	8013516 <f_open+0x13a>
 8013510:	2308      	movs	r3, #8
 8013512:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013516:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 801351a:	2b00      	cmp	r3, #0
 801351c:	f040 812f 	bne.w	801377e <f_open+0x3a2>
 8013520:	1dfb      	adds	r3, r7, #7
 8013522:	781b      	ldrb	r3, [r3, #0]
 8013524:	f003 0308 	and.w	r3, r3, #8
 8013528:	2b00      	cmp	r3, #0
 801352a:	f000 8128 	beq.w	801377e <f_open+0x3a2>
				dw = GET_FATTIME();
 801352e:	f7f9 fedd 	bl	800d2ec <get_fattime>
 8013532:	f8c7 04d4 	str.w	r0, [r7, #1236]	; 0x4d4
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8013536:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801353a:	781b      	ldrb	r3, [r3, #0]
 801353c:	2b04      	cmp	r3, #4
 801353e:	f040 80a6 	bne.w	801368e <f_open+0x2b2>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8013542:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 8013546:	f107 030c 	add.w	r3, r7, #12
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 801354e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013552:	695b      	ldr	r3, [r3, #20]
 8013554:	3334      	adds	r3, #52	; 0x34
 8013556:	4618      	mov	r0, r3
 8013558:	f7fc fbfe 	bl	800fd58 <ld_dword>
 801355c:	4602      	mov	r2, r0
 801355e:	f107 030c 	add.w	r3, r7, #12
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8013566:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801356a:	695b      	ldr	r3, [r3, #20]
 801356c:	3338      	adds	r3, #56	; 0x38
 801356e:	4618      	mov	r0, r3
 8013570:	f7fc fc15 	bl	800fd9e <ld_qword>
 8013574:	4603      	mov	r3, r0
 8013576:	460c      	mov	r4, r1
 8013578:	f107 020c 	add.w	r2, r7, #12
 801357c:	6812      	ldr	r2, [r2, #0]
 801357e:	e9c2 3404 	strd	r3, r4, [r2, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8013582:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013586:	695b      	ldr	r3, [r3, #20]
 8013588:	3321      	adds	r3, #33	; 0x21
 801358a:	781b      	ldrb	r3, [r3, #0]
 801358c:	f003 0302 	and.w	r3, r3, #2
 8013590:	b2da      	uxtb	r2, r3
 8013592:	f107 030c 	add.w	r3, r7, #12
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 801359a:	f107 030c 	add.w	r3, r7, #12
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	2200      	movs	r2, #0
 80135a2:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 80135a4:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80135a8:	695b      	ldr	r3, [r3, #20]
 80135aa:	3308      	adds	r3, #8
 80135ac:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	; 0x4d4
 80135b0:	4618      	mov	r0, r3
 80135b2:	f7fc fccc 	bl	800ff4e <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 80135b6:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80135ba:	695b      	ldr	r3, [r3, #20]
 80135bc:	3314      	adds	r3, #20
 80135be:	2200      	movs	r2, #0
 80135c0:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 80135c2:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80135c6:	695b      	ldr	r3, [r3, #20]
 80135c8:	330c      	adds	r3, #12
 80135ca:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	; 0x4d4
 80135ce:	4618      	mov	r0, r3
 80135d0:	f7fc fcbd 	bl	800ff4e <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 80135d4:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80135d8:	695b      	ldr	r3, [r3, #20]
 80135da:	3315      	adds	r3, #21
 80135dc:	2200      	movs	r2, #0
 80135de:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 80135e0:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80135e4:	695b      	ldr	r3, [r3, #20]
 80135e6:	3304      	adds	r3, #4
 80135e8:	2220      	movs	r2, #32
 80135ea:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 80135ec:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80135f0:	695b      	ldr	r3, [r3, #20]
 80135f2:	3334      	adds	r3, #52	; 0x34
 80135f4:	2100      	movs	r1, #0
 80135f6:	4618      	mov	r0, r3
 80135f8:	f7fc fca9 	bl	800ff4e <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 80135fc:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013600:	695b      	ldr	r3, [r3, #20]
 8013602:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013606:	f04f 0200 	mov.w	r2, #0
 801360a:	f04f 0300 	mov.w	r3, #0
 801360e:	4608      	mov	r0, r1
 8013610:	f7fc fcc9 	bl	800ffa6 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 8013614:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013618:	695b      	ldr	r3, [r3, #20]
 801361a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801361e:	f04f 0200 	mov.w	r2, #0
 8013622:	f04f 0300 	mov.w	r3, #0
 8013626:	4608      	mov	r0, r1
 8013628:	f7fc fcbd 	bl	800ffa6 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 801362c:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013630:	695b      	ldr	r3, [r3, #20]
 8013632:	3321      	adds	r3, #33	; 0x21
 8013634:	2201      	movs	r2, #1
 8013636:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 8013638:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 801363c:	4618      	mov	r0, r3
 801363e:	f7fe fb58 	bl	8011cf2 <store_xdir>
 8013642:	4603      	mov	r3, r0
 8013644:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 8013648:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 801364c:	2b00      	cmp	r3, #0
 801364e:	f040 8096 	bne.w	801377e <f_open+0x3a2>
 8013652:	f107 030c 	add.w	r3, r7, #12
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	689b      	ldr	r3, [r3, #8]
 801365a:	2b00      	cmp	r3, #0
 801365c:	f000 808f 	beq.w	801377e <f_open+0x3a2>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8013660:	f107 030c 	add.w	r3, r7, #12
 8013664:	6818      	ldr	r0, [r3, #0]
 8013666:	f107 030c 	add.w	r3, r7, #12
 801366a:	681b      	ldr	r3, [r3, #0]
 801366c:	689b      	ldr	r3, [r3, #8]
 801366e:	2200      	movs	r2, #0
 8013670:	4619      	mov	r1, r3
 8013672:	f7fd fbdd 	bl	8010e30 <remove_chain>
 8013676:	4603      	mov	r3, r0
 8013678:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 801367c:	f107 030c 	add.w	r3, r7, #12
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	689a      	ldr	r2, [r3, #8]
 8013684:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013688:	3a01      	subs	r2, #1
 801368a:	619a      	str	r2, [r3, #24]
 801368c:	e077      	b.n	801377e <f_open+0x3a2>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801368e:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8013692:	330e      	adds	r3, #14
 8013694:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	; 0x4d4
 8013698:	4618      	mov	r0, r3
 801369a:	f7fc fc58 	bl	800ff4e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801369e:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 80136a2:	3316      	adds	r3, #22
 80136a4:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	; 0x4d4
 80136a8:	4618      	mov	r0, r3
 80136aa:	f7fc fc50 	bl	800ff4e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80136ae:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 80136b2:	330b      	adds	r3, #11
 80136b4:	2220      	movs	r2, #32
 80136b6:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80136b8:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80136bc:	f8d7 24b4 	ldr.w	r2, [r7, #1204]	; 0x4b4
 80136c0:	4611      	mov	r1, r2
 80136c2:	4618      	mov	r0, r3
 80136c4:	f7fd ff86 	bl	80115d4 <ld_clust>
 80136c8:	f8c7 04d0 	str.w	r0, [r7, #1232]	; 0x4d0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80136cc:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80136d0:	f8d7 14b4 	ldr.w	r1, [r7, #1204]	; 0x4b4
 80136d4:	2200      	movs	r2, #0
 80136d6:	4618      	mov	r0, r3
 80136d8:	f7fd ff9b 	bl	8011612 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80136dc:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 80136e0:	331c      	adds	r3, #28
 80136e2:	2100      	movs	r1, #0
 80136e4:	4618      	mov	r0, r3
 80136e6:	f7fc fc32 	bl	800ff4e <st_dword>
					fs->wflag = 1;
 80136ea:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80136ee:	2201      	movs	r2, #1
 80136f0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80136f2:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d041      	beq.n	801377e <f_open+0x3a2>
						dw = fs->winsect;
 80136fa:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80136fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013700:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
						res = remove_chain(&dj.obj, cl, 0);
 8013704:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8013708:	2200      	movs	r2, #0
 801370a:	f8d7 14d0 	ldr.w	r1, [r7, #1232]	; 0x4d0
 801370e:	4618      	mov	r0, r3
 8013710:	f7fd fb8e 	bl	8010e30 <remove_chain>
 8013714:	4603      	mov	r3, r0
 8013716:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
						if (res == FR_OK) {
 801371a:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 801371e:	2b00      	cmp	r3, #0
 8013720:	d12d      	bne.n	801377e <f_open+0x3a2>
							res = move_window(fs, dw);
 8013722:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013726:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	; 0x4d4
 801372a:	4618      	mov	r0, r3
 801372c:	f7fc fef0 	bl	8010510 <move_window>
 8013730:	4603      	mov	r3, r0
 8013732:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013736:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801373a:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 801373e:	3a01      	subs	r2, #1
 8013740:	619a      	str	r2, [r3, #24]
 8013742:	e01c      	b.n	801377e <f_open+0x3a2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013744:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 8013748:	2b00      	cmp	r3, #0
 801374a:	d118      	bne.n	801377e <f_open+0x3a2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801374c:	f897 347e 	ldrb.w	r3, [r7, #1150]	; 0x47e
 8013750:	f003 0310 	and.w	r3, r3, #16
 8013754:	2b00      	cmp	r3, #0
 8013756:	d003      	beq.n	8013760 <f_open+0x384>
					res = FR_NO_FILE;
 8013758:	2304      	movs	r3, #4
 801375a:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
 801375e:	e00e      	b.n	801377e <f_open+0x3a2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013760:	1dfb      	adds	r3, r7, #7
 8013762:	781b      	ldrb	r3, [r3, #0]
 8013764:	f003 0302 	and.w	r3, r3, #2
 8013768:	2b00      	cmp	r3, #0
 801376a:	d008      	beq.n	801377e <f_open+0x3a2>
 801376c:	f897 347e 	ldrb.w	r3, [r7, #1150]	; 0x47e
 8013770:	f003 0301 	and.w	r3, r3, #1
 8013774:	2b00      	cmp	r3, #0
 8013776:	d002      	beq.n	801377e <f_open+0x3a2>
						res = FR_DENIED;
 8013778:	2307      	movs	r3, #7
 801377a:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
					}
				}
			}
		}
		if (res == FR_OK) {
 801377e:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 8013782:	2b00      	cmp	r3, #0
 8013784:	d136      	bne.n	80137f4 <f_open+0x418>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013786:	1dfb      	adds	r3, r7, #7
 8013788:	781b      	ldrb	r3, [r3, #0]
 801378a:	f003 0308 	and.w	r3, r3, #8
 801378e:	2b00      	cmp	r3, #0
 8013790:	d005      	beq.n	801379e <f_open+0x3c2>
				mode |= FA_MODIFIED;
 8013792:	1dfb      	adds	r3, r7, #7
 8013794:	1dfa      	adds	r2, r7, #7
 8013796:	7812      	ldrb	r2, [r2, #0]
 8013798:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801379c:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801379e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80137a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80137a4:	f107 030c 	add.w	r3, r7, #12
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 80137ac:	f8d7 24b4 	ldr.w	r2, [r7, #1204]	; 0x4b4
 80137b0:	f107 030c 	add.w	r3, r7, #12
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80137b8:	1dfb      	adds	r3, r7, #7
 80137ba:	781b      	ldrb	r3, [r3, #0]
 80137bc:	f023 0301 	bic.w	r3, r3, #1
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	bf14      	ite	ne
 80137c4:	2301      	movne	r3, #1
 80137c6:	2300      	moveq	r3, #0
 80137c8:	b2db      	uxtb	r3, r3
 80137ca:	461a      	mov	r2, r3
 80137cc:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80137d0:	4611      	mov	r1, r2
 80137d2:	4618      	mov	r0, r3
 80137d4:	f7fc fd6a 	bl	80102ac <inc_lock>
 80137d8:	4602      	mov	r2, r0
 80137da:	f107 030c 	add.w	r3, r7, #12
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80137e2:	f107 030c 	add.w	r3, r7, #12
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d102      	bne.n	80137f4 <f_open+0x418>
 80137ee:	2302      	movs	r3, #2
 80137f0:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
				}
			}
		}
#endif

		if (res == FR_OK) {
 80137f4:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	f040 8162 	bne.w	8013ac2 <f_open+0x6e6>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80137fe:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013802:	781b      	ldrb	r3, [r3, #0]
 8013804:	2b04      	cmp	r3, #4
 8013806:	d13f      	bne.n	8013888 <f_open+0x4ac>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 8013808:	f8d7 2480 	ldr.w	r2, [r7, #1152]	; 0x480
 801380c:	f107 030c 	add.w	r3, r7, #12
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 8013814:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8013818:	e9d3 3400 	ldrd	r3, r4, [r3]
 801381c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8013820:	f897 247f 	ldrb.w	r2, [r7, #1151]	; 0x47f
 8013824:	431a      	orrs	r2, r3
 8013826:	f107 030c 	add.w	r3, r7, #12
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 801382e:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	; 0x4c4
 8013832:	f107 030c 	add.w	r3, r7, #12
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 801383a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801383e:	695b      	ldr	r3, [r3, #20]
 8013840:	3334      	adds	r3, #52	; 0x34
 8013842:	4618      	mov	r0, r3
 8013844:	f7fc fa88 	bl	800fd58 <ld_dword>
 8013848:	4602      	mov	r2, r0
 801384a:	f107 030c 	add.w	r3, r7, #12
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8013852:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013856:	695b      	ldr	r3, [r3, #20]
 8013858:	3338      	adds	r3, #56	; 0x38
 801385a:	4618      	mov	r0, r3
 801385c:	f7fc fa9f 	bl	800fd9e <ld_qword>
 8013860:	4603      	mov	r3, r0
 8013862:	460c      	mov	r4, r1
 8013864:	f107 020c 	add.w	r2, r7, #12
 8013868:	6812      	ldr	r2, [r2, #0]
 801386a:	e9c2 3404 	strd	r3, r4, [r2, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 801386e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013872:	695b      	ldr	r3, [r3, #20]
 8013874:	3321      	adds	r3, #33	; 0x21
 8013876:	781b      	ldrb	r3, [r3, #0]
 8013878:	f003 0302 	and.w	r3, r3, #2
 801387c:	b2da      	uxtb	r2, r3
 801387e:	f107 030c 	add.w	r3, r7, #12
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	71da      	strb	r2, [r3, #7]
 8013886:	e01a      	b.n	80138be <f_open+0x4e2>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013888:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801388c:	f8d7 24b4 	ldr.w	r2, [r7, #1204]	; 0x4b4
 8013890:	4611      	mov	r1, r2
 8013892:	4618      	mov	r0, r3
 8013894:	f7fd fe9e 	bl	80115d4 <ld_clust>
 8013898:	4602      	mov	r2, r0
 801389a:	f107 030c 	add.w	r3, r7, #12
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80138a2:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 80138a6:	331c      	adds	r3, #28
 80138a8:	4618      	mov	r0, r3
 80138aa:	f7fc fa55 	bl	800fd58 <ld_dword>
 80138ae:	4603      	mov	r3, r0
 80138b0:	f04f 0400 	mov.w	r4, #0
 80138b4:	f107 020c 	add.w	r2, r7, #12
 80138b8:	6812      	ldr	r2, [r2, #0]
 80138ba:	e9c2 3404 	strd	r3, r4, [r2, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80138be:	f107 030c 	add.w	r3, r7, #12
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	2200      	movs	r2, #0
 80138c6:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80138c8:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 80138cc:	f107 030c 	add.w	r3, r7, #12
 80138d0:	681b      	ldr	r3, [r3, #0]
 80138d2:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80138d4:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80138d8:	88da      	ldrh	r2, [r3, #6]
 80138da:	f107 030c 	add.w	r3, r7, #12
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80138e2:	f107 030c 	add.w	r3, r7, #12
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	1dfa      	adds	r2, r7, #7
 80138ea:	7812      	ldrb	r2, [r2, #0]
 80138ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 80138f0:	f107 030c 	add.w	r3, r7, #12
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	2200      	movs	r2, #0
 80138f8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 80138fc:	f107 030c 	add.w	r3, r7, #12
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	2200      	movs	r2, #0
 8013904:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013906:	f107 030c 	add.w	r3, r7, #12
 801390a:	681a      	ldr	r2, [r3, #0]
 801390c:	f04f 0300 	mov.w	r3, #0
 8013910:	f04f 0400 	mov.w	r4, #0
 8013914:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013918:	f107 030c 	add.w	r3, r7, #12
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	3354      	adds	r3, #84	; 0x54
 8013920:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013924:	2100      	movs	r1, #0
 8013926:	4618      	mov	r0, r3
 8013928:	f7fc fbe5 	bl	80100f6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801392c:	1dfb      	adds	r3, r7, #7
 801392e:	781b      	ldrb	r3, [r3, #0]
 8013930:	f003 0320 	and.w	r3, r3, #32
 8013934:	2b00      	cmp	r3, #0
 8013936:	f000 80c4 	beq.w	8013ac2 <f_open+0x6e6>
 801393a:	f107 030c 	add.w	r3, r7, #12
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8013944:	4323      	orrs	r3, r4
 8013946:	f000 80bc 	beq.w	8013ac2 <f_open+0x6e6>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801394a:	f107 030c 	add.w	r3, r7, #12
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8013954:	f107 020c 	add.w	r2, r7, #12
 8013958:	6812      	ldr	r2, [r2, #0]
 801395a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801395e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013962:	895b      	ldrh	r3, [r3, #10]
 8013964:	461a      	mov	r2, r3
 8013966:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801396a:	899b      	ldrh	r3, [r3, #12]
 801396c:	fb03 f302 	mul.w	r3, r3, r2
 8013970:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013974:	f107 030c 	add.w	r3, r7, #12
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	689b      	ldr	r3, [r3, #8]
 801397c:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013980:	f107 030c 	add.w	r3, r7, #12
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 801398a:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 801398e:	e9c2 3400 	strd	r3, r4, [r2]
 8013992:	e02b      	b.n	80139ec <f_open+0x610>
					clst = get_fat(&fp->obj, clst);
 8013994:	f107 030c 	add.w	r3, r7, #12
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	; 0x4e0
 801399e:	4618      	mov	r0, r3
 80139a0:	f7fc fe74 	bl	801068c <get_fat>
 80139a4:	f8c7 04e0 	str.w	r0, [r7, #1248]	; 0x4e0
					if (clst <= 1) res = FR_INT_ERR;
 80139a8:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 80139ac:	2b01      	cmp	r3, #1
 80139ae:	d802      	bhi.n	80139b6 <f_open+0x5da>
 80139b0:	2302      	movs	r3, #2
 80139b2:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80139b6:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 80139ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139be:	d102      	bne.n	80139c6 <f_open+0x5ea>
 80139c0:	2301      	movs	r3, #1
 80139c2:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80139c6:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 80139ca:	469b      	mov	fp, r3
 80139cc:	f04f 0c00 	mov.w	ip, #0
 80139d0:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 80139d4:	e9d3 1200 	ldrd	r1, r2, [r3]
 80139d8:	460b      	mov	r3, r1
 80139da:	4614      	mov	r4, r2
 80139dc:	ebb3 030b 	subs.w	r3, r3, fp
 80139e0:	eb64 040c 	sbc.w	r4, r4, ip
 80139e4:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 80139e8:	e9c2 3400 	strd	r3, r4, [r2]
 80139ec:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d10c      	bne.n	8013a0e <f_open+0x632>
 80139f4:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 80139f8:	4619      	mov	r1, r3
 80139fa:	f04f 0200 	mov.w	r2, #0
 80139fe:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8013a02:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013a06:	42a2      	cmp	r2, r4
 8013a08:	bf08      	it	eq
 8013a0a:	4299      	cmpeq	r1, r3
 8013a0c:	d3c2      	bcc.n	8013994 <f_open+0x5b8>
				}
				fp->clust = clst;
 8013a0e:	f107 030c 	add.w	r3, r7, #12
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	f8d7 24e0 	ldr.w	r2, [r7, #1248]	; 0x4e0
 8013a18:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013a1a:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d14f      	bne.n	8013ac2 <f_open+0x6e6>
 8013a22:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013a26:	899b      	ldrh	r3, [r3, #12]
 8013a28:	b29b      	uxth	r3, r3
 8013a2a:	f04f 0400 	mov.w	r4, #0
 8013a2e:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 8013a32:	e9d2 0100 	ldrd	r0, r1, [r2]
 8013a36:	461a      	mov	r2, r3
 8013a38:	4623      	mov	r3, r4
 8013a3a:	f7ec fc4d 	bl	80002d8 <__aeabi_uldivmod>
 8013a3e:	461c      	mov	r4, r3
 8013a40:	4613      	mov	r3, r2
 8013a42:	4323      	orrs	r3, r4
 8013a44:	d03d      	beq.n	8013ac2 <f_open+0x6e6>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013a46:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013a4a:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	; 0x4e0
 8013a4e:	4618      	mov	r0, r3
 8013a50:	f7fc fdfc 	bl	801064c <clust2sect>
 8013a54:	f8c7 04c8 	str.w	r0, [r7, #1224]	; 0x4c8
 8013a58:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	; 0x4c8
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d103      	bne.n	8013a68 <f_open+0x68c>
						res = FR_INT_ERR;
 8013a60:	2302      	movs	r3, #2
 8013a62:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
 8013a66:	e02c      	b.n	8013ac2 <f_open+0x6e6>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013a68:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013a6c:	899b      	ldrh	r3, [r3, #12]
 8013a6e:	b29b      	uxth	r3, r3
 8013a70:	f04f 0400 	mov.w	r4, #0
 8013a74:	461a      	mov	r2, r3
 8013a76:	4623      	mov	r3, r4
 8013a78:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 8013a7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a80:	f7ec fc2a 	bl	80002d8 <__aeabi_uldivmod>
 8013a84:	4603      	mov	r3, r0
 8013a86:	460c      	mov	r4, r1
 8013a88:	461a      	mov	r2, r3
 8013a8a:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	; 0x4c8
 8013a8e:	441a      	add	r2, r3
 8013a90:	f107 030c 	add.w	r3, r7, #12
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013a98:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013a9c:	7858      	ldrb	r0, [r3, #1]
 8013a9e:	f107 030c 	add.w	r3, r7, #12
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8013aa8:	f107 030c 	add.w	r3, r7, #12
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013ab0:	2301      	movs	r3, #1
 8013ab2:	f7fc f8db 	bl	800fc6c <disk_read>
 8013ab6:	4603      	mov	r3, r0
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d002      	beq.n	8013ac2 <f_open+0x6e6>
 8013abc:	2301      	movs	r3, #1
 8013abe:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013ac2:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d004      	beq.n	8013ad4 <f_open+0x6f8>
 8013aca:	f107 030c 	add.w	r3, r7, #12
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	2200      	movs	r2, #0
 8013ad2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013ad4:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
}
 8013ad8:	4618      	mov	r0, r3
 8013ada:	f507 679d 	add.w	r7, r7, #1256	; 0x4e8
 8013ade:	46bd      	mov	sp, r7
 8013ae0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08013ae4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8013ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ae6:	b091      	sub	sp, #68	; 0x44
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	60f8      	str	r0, [r7, #12]
 8013aec:	60b9      	str	r1, [r7, #8]
 8013aee:	607a      	str	r2, [r7, #4]
 8013af0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8013af2:	68bb      	ldr	r3, [r7, #8]
 8013af4:	62fb      	str	r3, [r7, #44]	; 0x2c


	*br = 0;	/* Clear read byte counter */
 8013af6:	683b      	ldr	r3, [r7, #0]
 8013af8:	2200      	movs	r2, #0
 8013afa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	f107 0214 	add.w	r2, r7, #20
 8013b02:	4611      	mov	r1, r2
 8013b04:	4618      	mov	r0, r3
 8013b06:	f7ff fbed 	bl	80132e4 <validate>
 8013b0a:	4603      	mov	r3, r0
 8013b0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013b10:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d108      	bne.n	8013b2a <f_read+0x46>
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013b1e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8013b22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d002      	beq.n	8013b30 <f_read+0x4c>
 8013b2a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013b2e:	e16a      	b.n	8013e06 <f_read+0x322>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013b36:	f003 0301 	and.w	r3, r3, #1
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d101      	bne.n	8013b42 <f_read+0x5e>
 8013b3e:	2307      	movs	r3, #7
 8013b40:	e161      	b.n	8013e06 <f_read+0x322>
	remain = fp->obj.objsize - fp->fptr;
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	e9d3 560e 	ldrd	r5, r6, [r3, #56]	; 0x38
 8013b4e:	460b      	mov	r3, r1
 8013b50:	4614      	mov	r4, r2
 8013b52:	1b5b      	subs	r3, r3, r5
 8013b54:	eb64 0406 	sbc.w	r4, r4, r6
 8013b58:	e9c7 3408 	strd	r3, r4, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	f04f 0400 	mov.w	r4, #0
 8013b62:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8013b66:	42a2      	cmp	r2, r4
 8013b68:	bf08      	it	eq
 8013b6a:	4299      	cmpeq	r1, r3
 8013b6c:	f080 8146 	bcs.w	8013dfc <f_read+0x318>
 8013b70:	6a3b      	ldr	r3, [r7, #32]
 8013b72:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8013b74:	e142      	b.n	8013dfc <f_read+0x318>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8013b7c:	697b      	ldr	r3, [r7, #20]
 8013b7e:	899b      	ldrh	r3, [r3, #12]
 8013b80:	b29b      	uxth	r3, r3
 8013b82:	f04f 0400 	mov.w	r4, #0
 8013b86:	461a      	mov	r2, r3
 8013b88:	4623      	mov	r3, r4
 8013b8a:	f7ec fba5 	bl	80002d8 <__aeabi_uldivmod>
 8013b8e:	461c      	mov	r4, r3
 8013b90:	4613      	mov	r3, r2
 8013b92:	4323      	orrs	r3, r4
 8013b94:	f040 80eb 	bne.w	8013d6e <f_read+0x28a>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8013b9e:	697b      	ldr	r3, [r7, #20]
 8013ba0:	899b      	ldrh	r3, [r3, #12]
 8013ba2:	b29b      	uxth	r3, r3
 8013ba4:	f04f 0400 	mov.w	r4, #0
 8013ba8:	461a      	mov	r2, r3
 8013baa:	4623      	mov	r3, r4
 8013bac:	f7ec fb94 	bl	80002d8 <__aeabi_uldivmod>
 8013bb0:	4603      	mov	r3, r0
 8013bb2:	460c      	mov	r4, r1
 8013bb4:	461a      	mov	r2, r3
 8013bb6:	697b      	ldr	r3, [r7, #20]
 8013bb8:	895b      	ldrh	r3, [r3, #10]
 8013bba:	3b01      	subs	r3, #1
 8013bbc:	4013      	ands	r3, r2
 8013bbe:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8013bc0:	69fb      	ldr	r3, [r7, #28]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d134      	bne.n	8013c30 <f_read+0x14c>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8013bcc:	4323      	orrs	r3, r4
 8013bce:	d103      	bne.n	8013bd8 <f_read+0xf4>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	689b      	ldr	r3, [r3, #8]
 8013bd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8013bd6:	e015      	b.n	8013c04 <f_read+0x120>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d009      	beq.n	8013bf4 <f_read+0x110>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8013be6:	461a      	mov	r2, r3
 8013be8:	4623      	mov	r3, r4
 8013bea:	68f8      	ldr	r0, [r7, #12]
 8013bec:	f7fd fad5 	bl	801119a <clmt_clust>
 8013bf0:	63b8      	str	r0, [r7, #56]	; 0x38
 8013bf2:	e007      	b.n	8013c04 <f_read+0x120>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8013bf4:	68fa      	ldr	r2, [r7, #12]
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013bfa:	4619      	mov	r1, r3
 8013bfc:	4610      	mov	r0, r2
 8013bfe:	f7fc fd45 	bl	801068c <get_fat>
 8013c02:	63b8      	str	r0, [r7, #56]	; 0x38
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8013c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c06:	2b01      	cmp	r3, #1
 8013c08:	d805      	bhi.n	8013c16 <f_read+0x132>
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	2202      	movs	r2, #2
 8013c0e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8013c12:	2302      	movs	r3, #2
 8013c14:	e0f7      	b.n	8013e06 <f_read+0x322>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c1c:	d105      	bne.n	8013c2a <f_read+0x146>
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	2201      	movs	r2, #1
 8013c22:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8013c26:	2301      	movs	r3, #1
 8013c28:	e0ed      	b.n	8013e06 <f_read+0x322>
				fp->clust = clst;				/* Update current cluster */
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013c2e:	641a      	str	r2, [r3, #64]	; 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013c30:	697a      	ldr	r2, [r7, #20]
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c36:	4619      	mov	r1, r3
 8013c38:	4610      	mov	r0, r2
 8013c3a:	f7fc fd07 	bl	801064c <clust2sect>
 8013c3e:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013c40:	69bb      	ldr	r3, [r7, #24]
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d105      	bne.n	8013c52 <f_read+0x16e>
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	2202      	movs	r2, #2
 8013c4a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8013c4e:	2302      	movs	r3, #2
 8013c50:	e0d9      	b.n	8013e06 <f_read+0x322>
			sect += csect;
 8013c52:	69ba      	ldr	r2, [r7, #24]
 8013c54:	69fb      	ldr	r3, [r7, #28]
 8013c56:	4413      	add	r3, r2
 8013c58:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8013c5a:	697b      	ldr	r3, [r7, #20]
 8013c5c:	899b      	ldrh	r3, [r3, #12]
 8013c5e:	461a      	mov	r2, r3
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	fbb3 f3f2 	udiv	r3, r3, r2
 8013c66:	633b      	str	r3, [r7, #48]	; 0x30
			if (cc) {							/* Read maximum contiguous sectors directly */
 8013c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d043      	beq.n	8013cf6 <f_read+0x212>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013c6e:	69fa      	ldr	r2, [r7, #28]
 8013c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c72:	4413      	add	r3, r2
 8013c74:	697a      	ldr	r2, [r7, #20]
 8013c76:	8952      	ldrh	r2, [r2, #10]
 8013c78:	4293      	cmp	r3, r2
 8013c7a:	d905      	bls.n	8013c88 <f_read+0x1a4>
					cc = fs->csize - csect;
 8013c7c:	697b      	ldr	r3, [r7, #20]
 8013c7e:	895b      	ldrh	r3, [r3, #10]
 8013c80:	461a      	mov	r2, r3
 8013c82:	69fb      	ldr	r3, [r7, #28]
 8013c84:	1ad3      	subs	r3, r2, r3
 8013c86:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013c88:	697b      	ldr	r3, [r7, #20]
 8013c8a:	7858      	ldrb	r0, [r3, #1]
 8013c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c8e:	69ba      	ldr	r2, [r7, #24]
 8013c90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013c92:	f7fb ffeb 	bl	800fc6c <disk_read>
 8013c96:	4603      	mov	r3, r0
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d005      	beq.n	8013ca8 <f_read+0x1c4>
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	2201      	movs	r2, #1
 8013ca0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8013ca4:	2301      	movs	r3, #1
 8013ca6:	e0ae      	b.n	8013e06 <f_read+0x322>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013cae:	b25b      	sxtb	r3, r3
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	da18      	bge.n	8013ce6 <f_read+0x202>
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013cb8:	69bb      	ldr	r3, [r7, #24]
 8013cba:	1ad3      	subs	r3, r2, r3
 8013cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013cbe:	429a      	cmp	r2, r3
 8013cc0:	d911      	bls.n	8013ce6 <f_read+0x202>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013cc6:	69bb      	ldr	r3, [r7, #24]
 8013cc8:	1ad3      	subs	r3, r2, r3
 8013cca:	697a      	ldr	r2, [r7, #20]
 8013ccc:	8992      	ldrh	r2, [r2, #12]
 8013cce:	fb02 f303 	mul.w	r3, r2, r3
 8013cd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013cd4:	18d0      	adds	r0, r2, r3
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8013cdc:	697b      	ldr	r3, [r7, #20]
 8013cde:	899b      	ldrh	r3, [r3, #12]
 8013ce0:	461a      	mov	r2, r3
 8013ce2:	f7fc f9e7 	bl	80100b4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8013ce6:	697b      	ldr	r3, [r7, #20]
 8013ce8:	899b      	ldrh	r3, [r3, #12]
 8013cea:	461a      	mov	r2, r3
 8013cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cee:	fb02 f303 	mul.w	r3, r2, r3
 8013cf2:	637b      	str	r3, [r7, #52]	; 0x34
				continue;
 8013cf4:	e067      	b.n	8013dc6 <f_read+0x2e2>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013cfa:	69ba      	ldr	r2, [r7, #24]
 8013cfc:	429a      	cmp	r2, r3
 8013cfe:	d033      	beq.n	8013d68 <f_read+0x284>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013d06:	b25b      	sxtb	r3, r3
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	da1b      	bge.n	8013d44 <f_read+0x260>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013d0c:	697b      	ldr	r3, [r7, #20]
 8013d0e:	7858      	ldrb	r0, [r3, #1]
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013d1a:	2301      	movs	r3, #1
 8013d1c:	f7fb ffc6 	bl	800fcac <disk_write>
 8013d20:	4603      	mov	r3, r0
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d005      	beq.n	8013d32 <f_read+0x24e>
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	2201      	movs	r2, #1
 8013d2a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8013d2e:	2301      	movs	r3, #1
 8013d30:	e069      	b.n	8013e06 <f_read+0x322>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013d38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013d3c:	b2da      	uxtb	r2, r3
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013d44:	697b      	ldr	r3, [r7, #20]
 8013d46:	7858      	ldrb	r0, [r3, #1]
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8013d4e:	2301      	movs	r3, #1
 8013d50:	69ba      	ldr	r2, [r7, #24]
 8013d52:	f7fb ff8b 	bl	800fc6c <disk_read>
 8013d56:	4603      	mov	r3, r0
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d005      	beq.n	8013d68 <f_read+0x284>
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	2201      	movs	r2, #1
 8013d60:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8013d64:	2301      	movs	r3, #1
 8013d66:	e04e      	b.n	8013e06 <f_read+0x322>
			}
#endif
			fp->sect = sect;
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	69ba      	ldr	r2, [r7, #24]
 8013d6c:	645a      	str	r2, [r3, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013d6e:	697b      	ldr	r3, [r7, #20]
 8013d70:	899b      	ldrh	r3, [r3, #12]
 8013d72:	4618      	mov	r0, r3
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8013d7a:	697a      	ldr	r2, [r7, #20]
 8013d7c:	8992      	ldrh	r2, [r2, #12]
 8013d7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8013d82:	fb02 f201 	mul.w	r2, r2, r1
 8013d86:	1a9b      	subs	r3, r3, r2
 8013d88:	1ac3      	subs	r3, r0, r3
 8013d8a:	637b      	str	r3, [r7, #52]	; 0x34
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8013d8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	429a      	cmp	r2, r3
 8013d92:	d901      	bls.n	8013d98 <f_read+0x2b4>
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	637b      	str	r3, [r7, #52]	; 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	f103 0554 	add.w	r5, r3, #84	; 0x54
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8013da4:	697b      	ldr	r3, [r7, #20]
 8013da6:	899b      	ldrh	r3, [r3, #12]
 8013da8:	b29b      	uxth	r3, r3
 8013daa:	f04f 0400 	mov.w	r4, #0
 8013dae:	461a      	mov	r2, r3
 8013db0:	4623      	mov	r3, r4
 8013db2:	f7ec fa91 	bl	80002d8 <__aeabi_uldivmod>
 8013db6:	461c      	mov	r4, r3
 8013db8:	4613      	mov	r3, r2
 8013dba:	442b      	add	r3, r5
 8013dbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013dbe:	4619      	mov	r1, r3
 8013dc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013dc2:	f7fc f977 	bl	80100b4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8013dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013dca:	4413      	add	r3, r2
 8013dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8013dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013dd6:	461d      	mov	r5, r3
 8013dd8:	f04f 0600 	mov.w	r6, #0
 8013ddc:	186b      	adds	r3, r5, r1
 8013dde:	eb46 0402 	adc.w	r4, r6, r2
 8013de2:	68fa      	ldr	r2, [r7, #12]
 8013de4:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 8013de8:	683b      	ldr	r3, [r7, #0]
 8013dea:	681a      	ldr	r2, [r3, #0]
 8013dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013dee:	441a      	add	r2, r3
 8013df0:	683b      	ldr	r3, [r7, #0]
 8013df2:	601a      	str	r2, [r3, #0]
 8013df4:	687a      	ldr	r2, [r7, #4]
 8013df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013df8:	1ad3      	subs	r3, r2, r3
 8013dfa:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	f47f aeb9 	bne.w	8013b76 <f_read+0x92>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8013e04:	2300      	movs	r3, #0
}
 8013e06:	4618      	mov	r0, r3
 8013e08:	3744      	adds	r7, #68	; 0x44
 8013e0a:	46bd      	mov	sp, r7
 8013e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013e0e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013e0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e10:	b08d      	sub	sp, #52	; 0x34
 8013e12:	af00      	add	r7, sp, #0
 8013e14:	60f8      	str	r0, [r7, #12]
 8013e16:	60b9      	str	r1, [r7, #8]
 8013e18:	607a      	str	r2, [r7, #4]
 8013e1a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013e1c:	68bb      	ldr	r3, [r7, #8]
 8013e1e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013e20:	683b      	ldr	r3, [r7, #0]
 8013e22:	2200      	movs	r2, #0
 8013e24:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	f107 0210 	add.w	r2, r7, #16
 8013e2c:	4611      	mov	r1, r2
 8013e2e:	4618      	mov	r0, r3
 8013e30:	f7ff fa58 	bl	80132e4 <validate>
 8013e34:	4603      	mov	r3, r0
 8013e36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013e3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d108      	bne.n	8013e54 <f_write+0x46>
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013e48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013e4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d002      	beq.n	8013e5a <f_write+0x4c>
 8013e54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013e58:	e1ab      	b.n	80141b2 <f_write+0x3a4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013e5a:	68fb      	ldr	r3, [r7, #12]
 8013e5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013e60:	f003 0302 	and.w	r3, r3, #2
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d101      	bne.n	8013e6c <f_write+0x5e>
 8013e68:	2307      	movs	r3, #7
 8013e6a:	e1a2      	b.n	80141b2 <f_write+0x3a4>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013e6c:	693b      	ldr	r3, [r7, #16]
 8013e6e:	781b      	ldrb	r3, [r3, #0]
 8013e70:	2b04      	cmp	r3, #4
 8013e72:	f000 818e 	beq.w	8014192 <f_write+0x384>
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8013e7c:	461a      	mov	r2, r3
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	441a      	add	r2, r3
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8013e88:	429a      	cmp	r2, r3
 8013e8a:	f080 8182 	bcs.w	8014192 <f_write+0x384>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8013e94:	43db      	mvns	r3, r3
 8013e96:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013e98:	e17b      	b.n	8014192 <f_write+0x384>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8013ea0:	693b      	ldr	r3, [r7, #16]
 8013ea2:	899b      	ldrh	r3, [r3, #12]
 8013ea4:	b29b      	uxth	r3, r3
 8013ea6:	f04f 0400 	mov.w	r4, #0
 8013eaa:	461a      	mov	r2, r3
 8013eac:	4623      	mov	r3, r4
 8013eae:	f7ec fa13 	bl	80002d8 <__aeabi_uldivmod>
 8013eb2:	461c      	mov	r4, r3
 8013eb4:	4613      	mov	r3, r2
 8013eb6:	4323      	orrs	r3, r4
 8013eb8:	f040 810c 	bne.w	80140d4 <f_write+0x2c6>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8013ec2:	693b      	ldr	r3, [r7, #16]
 8013ec4:	899b      	ldrh	r3, [r3, #12]
 8013ec6:	b29b      	uxth	r3, r3
 8013ec8:	f04f 0400 	mov.w	r4, #0
 8013ecc:	461a      	mov	r2, r3
 8013ece:	4623      	mov	r3, r4
 8013ed0:	f7ec fa02 	bl	80002d8 <__aeabi_uldivmod>
 8013ed4:	4603      	mov	r3, r0
 8013ed6:	460c      	mov	r4, r1
 8013ed8:	461a      	mov	r2, r3
 8013eda:	693b      	ldr	r3, [r7, #16]
 8013edc:	895b      	ldrh	r3, [r3, #10]
 8013ede:	3b01      	subs	r3, #1
 8013ee0:	4013      	ands	r3, r2
 8013ee2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013ee4:	69bb      	ldr	r3, [r7, #24]
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d148      	bne.n	8013f7c <f_write+0x16e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8013ef0:	4323      	orrs	r3, r4
 8013ef2:	d10c      	bne.n	8013f0e <f_write+0x100>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	689b      	ldr	r3, [r3, #8]
 8013ef8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d11c      	bne.n	8013f3a <f_write+0x12c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	2100      	movs	r1, #0
 8013f04:	4618      	mov	r0, r3
 8013f06:	f7fd f847 	bl	8010f98 <create_chain>
 8013f0a:	62b8      	str	r0, [r7, #40]	; 0x28
 8013f0c:	e015      	b.n	8013f3a <f_write+0x12c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d009      	beq.n	8013f2a <f_write+0x11c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8013f1c:	461a      	mov	r2, r3
 8013f1e:	4623      	mov	r3, r4
 8013f20:	68f8      	ldr	r0, [r7, #12]
 8013f22:	f7fd f93a 	bl	801119a <clmt_clust>
 8013f26:	62b8      	str	r0, [r7, #40]	; 0x28
 8013f28:	e007      	b.n	8013f3a <f_write+0x12c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013f2a:	68fa      	ldr	r2, [r7, #12]
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f30:	4619      	mov	r1, r3
 8013f32:	4610      	mov	r0, r2
 8013f34:	f7fd f830 	bl	8010f98 <create_chain>
 8013f38:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	f000 812d 	beq.w	801419c <f_write+0x38e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f44:	2b01      	cmp	r3, #1
 8013f46:	d105      	bne.n	8013f54 <f_write+0x146>
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	2202      	movs	r2, #2
 8013f4c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8013f50:	2302      	movs	r3, #2
 8013f52:	e12e      	b.n	80141b2 <f_write+0x3a4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f5a:	d105      	bne.n	8013f68 <f_write+0x15a>
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	2201      	movs	r2, #1
 8013f60:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8013f64:	2301      	movs	r3, #1
 8013f66:	e124      	b.n	80141b2 <f_write+0x3a4>
				fp->clust = clst;			/* Update current cluster */
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013f6c:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	689b      	ldr	r3, [r3, #8]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d102      	bne.n	8013f7c <f_write+0x16e>
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013f7a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013f82:	b25b      	sxtb	r3, r3
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	da1b      	bge.n	8013fc0 <f_write+0x1b2>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013f88:	693b      	ldr	r3, [r7, #16]
 8013f8a:	7858      	ldrb	r0, [r3, #1]
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013f96:	2301      	movs	r3, #1
 8013f98:	f7fb fe88 	bl	800fcac <disk_write>
 8013f9c:	4603      	mov	r3, r0
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d005      	beq.n	8013fae <f_write+0x1a0>
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	2201      	movs	r2, #1
 8013fa6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8013faa:	2301      	movs	r3, #1
 8013fac:	e101      	b.n	80141b2 <f_write+0x3a4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013fb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013fb8:	b2da      	uxtb	r2, r3
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013fc0:	693a      	ldr	r2, [r7, #16]
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013fc6:	4619      	mov	r1, r3
 8013fc8:	4610      	mov	r0, r2
 8013fca:	f7fc fb3f 	bl	801064c <clust2sect>
 8013fce:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013fd0:	697b      	ldr	r3, [r7, #20]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d105      	bne.n	8013fe2 <f_write+0x1d4>
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	2202      	movs	r2, #2
 8013fda:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8013fde:	2302      	movs	r3, #2
 8013fe0:	e0e7      	b.n	80141b2 <f_write+0x3a4>
			sect += csect;
 8013fe2:	697a      	ldr	r2, [r7, #20]
 8013fe4:	69bb      	ldr	r3, [r7, #24]
 8013fe6:	4413      	add	r3, r2
 8013fe8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013fea:	693b      	ldr	r3, [r7, #16]
 8013fec:	899b      	ldrh	r3, [r3, #12]
 8013fee:	461a      	mov	r2, r3
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	fbb3 f3f2 	udiv	r3, r3, r2
 8013ff6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013ff8:	6a3b      	ldr	r3, [r7, #32]
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d046      	beq.n	801408c <f_write+0x27e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013ffe:	69ba      	ldr	r2, [r7, #24]
 8014000:	6a3b      	ldr	r3, [r7, #32]
 8014002:	4413      	add	r3, r2
 8014004:	693a      	ldr	r2, [r7, #16]
 8014006:	8952      	ldrh	r2, [r2, #10]
 8014008:	4293      	cmp	r3, r2
 801400a:	d905      	bls.n	8014018 <f_write+0x20a>
					cc = fs->csize - csect;
 801400c:	693b      	ldr	r3, [r7, #16]
 801400e:	895b      	ldrh	r3, [r3, #10]
 8014010:	461a      	mov	r2, r3
 8014012:	69bb      	ldr	r3, [r7, #24]
 8014014:	1ad3      	subs	r3, r2, r3
 8014016:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014018:	693b      	ldr	r3, [r7, #16]
 801401a:	7858      	ldrb	r0, [r3, #1]
 801401c:	6a3b      	ldr	r3, [r7, #32]
 801401e:	697a      	ldr	r2, [r7, #20]
 8014020:	69f9      	ldr	r1, [r7, #28]
 8014022:	f7fb fe43 	bl	800fcac <disk_write>
 8014026:	4603      	mov	r3, r0
 8014028:	2b00      	cmp	r3, #0
 801402a:	d005      	beq.n	8014038 <f_write+0x22a>
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	2201      	movs	r2, #1
 8014030:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8014034:	2301      	movs	r3, #1
 8014036:	e0bc      	b.n	80141b2 <f_write+0x3a4>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801403c:	697b      	ldr	r3, [r7, #20]
 801403e:	1ad3      	subs	r3, r2, r3
 8014040:	6a3a      	ldr	r2, [r7, #32]
 8014042:	429a      	cmp	r2, r3
 8014044:	d91a      	bls.n	801407c <f_write+0x26e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	f103 0054 	add.w	r0, r3, #84	; 0x54
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014050:	697b      	ldr	r3, [r7, #20]
 8014052:	1ad3      	subs	r3, r2, r3
 8014054:	693a      	ldr	r2, [r7, #16]
 8014056:	8992      	ldrh	r2, [r2, #12]
 8014058:	fb02 f303 	mul.w	r3, r2, r3
 801405c:	69fa      	ldr	r2, [r7, #28]
 801405e:	18d1      	adds	r1, r2, r3
 8014060:	693b      	ldr	r3, [r7, #16]
 8014062:	899b      	ldrh	r3, [r3, #12]
 8014064:	461a      	mov	r2, r3
 8014066:	f7fc f825 	bl	80100b4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014070:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014074:	b2da      	uxtb	r2, r3
 8014076:	68fb      	ldr	r3, [r7, #12]
 8014078:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801407c:	693b      	ldr	r3, [r7, #16]
 801407e:	899b      	ldrh	r3, [r3, #12]
 8014080:	461a      	mov	r2, r3
 8014082:	6a3b      	ldr	r3, [r7, #32]
 8014084:	fb02 f303 	mul.w	r3, r2, r3
 8014088:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801408a:	e058      	b.n	801413e <f_write+0x330>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014090:	697a      	ldr	r2, [r7, #20]
 8014092:	429a      	cmp	r2, r3
 8014094:	d01b      	beq.n	80140ce <f_write+0x2c0>
				fp->fptr < fp->obj.objsize &&
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80140a2:	42a2      	cmp	r2, r4
 80140a4:	bf08      	it	eq
 80140a6:	4299      	cmpeq	r1, r3
 80140a8:	d211      	bcs.n	80140ce <f_write+0x2c0>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80140aa:	693b      	ldr	r3, [r7, #16]
 80140ac:	7858      	ldrb	r0, [r3, #1]
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80140b4:	2301      	movs	r3, #1
 80140b6:	697a      	ldr	r2, [r7, #20]
 80140b8:	f7fb fdd8 	bl	800fc6c <disk_read>
 80140bc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d005      	beq.n	80140ce <f_write+0x2c0>
					ABORT(fs, FR_DISK_ERR);
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	2201      	movs	r2, #1
 80140c6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80140ca:	2301      	movs	r3, #1
 80140cc:	e071      	b.n	80141b2 <f_write+0x3a4>
			}
#endif
			fp->sect = sect;
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	697a      	ldr	r2, [r7, #20]
 80140d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80140d4:	693b      	ldr	r3, [r7, #16]
 80140d6:	899b      	ldrh	r3, [r3, #12]
 80140d8:	4618      	mov	r0, r3
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80140e0:	693a      	ldr	r2, [r7, #16]
 80140e2:	8992      	ldrh	r2, [r2, #12]
 80140e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80140e8:	fb02 f201 	mul.w	r2, r2, r1
 80140ec:	1a9b      	subs	r3, r3, r2
 80140ee:	1ac3      	subs	r3, r0, r3
 80140f0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80140f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	429a      	cmp	r2, r3
 80140f8:	d901      	bls.n	80140fe <f_write+0x2f0>
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	f103 0554 	add.w	r5, r3, #84	; 0x54
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801410a:	693b      	ldr	r3, [r7, #16]
 801410c:	899b      	ldrh	r3, [r3, #12]
 801410e:	b29b      	uxth	r3, r3
 8014110:	f04f 0400 	mov.w	r4, #0
 8014114:	461a      	mov	r2, r3
 8014116:	4623      	mov	r3, r4
 8014118:	f7ec f8de 	bl	80002d8 <__aeabi_uldivmod>
 801411c:	461c      	mov	r4, r3
 801411e:	4613      	mov	r3, r2
 8014120:	442b      	add	r3, r5
 8014122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014124:	69f9      	ldr	r1, [r7, #28]
 8014126:	4618      	mov	r0, r3
 8014128:	f7fb ffc4 	bl	80100b4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014132:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014136:	b2da      	uxtb	r2, r3
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801413e:	69fa      	ldr	r2, [r7, #28]
 8014140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014142:	4413      	add	r3, r2
 8014144:	61fb      	str	r3, [r7, #28]
 8014146:	68fb      	ldr	r3, [r7, #12]
 8014148:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 801414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801414e:	461d      	mov	r5, r3
 8014150:	f04f 0600 	mov.w	r6, #0
 8014154:	186b      	adds	r3, r5, r1
 8014156:	eb46 0402 	adc.w	r4, r6, r2
 801415a:	68fa      	ldr	r2, [r7, #12]
 801415c:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8014166:	68fa      	ldr	r2, [r7, #12]
 8014168:	e9d2 120e 	ldrd	r1, r2, [r2, #56]	; 0x38
 801416c:	4294      	cmp	r4, r2
 801416e:	bf08      	it	eq
 8014170:	428b      	cmpeq	r3, r1
 8014172:	d201      	bcs.n	8014178 <f_write+0x36a>
 8014174:	460b      	mov	r3, r1
 8014176:	4614      	mov	r4, r2
 8014178:	68fa      	ldr	r2, [r7, #12]
 801417a:	e9c2 3404 	strd	r3, r4, [r2, #16]
 801417e:	683b      	ldr	r3, [r7, #0]
 8014180:	681a      	ldr	r2, [r3, #0]
 8014182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014184:	441a      	add	r2, r3
 8014186:	683b      	ldr	r3, [r7, #0]
 8014188:	601a      	str	r2, [r3, #0]
 801418a:	687a      	ldr	r2, [r7, #4]
 801418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801418e:	1ad3      	subs	r3, r2, r3
 8014190:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	2b00      	cmp	r3, #0
 8014196:	f47f ae80 	bne.w	8013e9a <f_write+0x8c>
 801419a:	e000      	b.n	801419e <f_write+0x390>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801419c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80141a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80141a8:	b2da      	uxtb	r2, r3
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 80141b0:	2300      	movs	r3, #0
}
 80141b2:	4618      	mov	r0, r3
 80141b4:	3734      	adds	r7, #52	; 0x34
 80141b6:	46bd      	mov	sp, r7
 80141b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080141ba <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80141ba:	b590      	push	{r4, r7, lr}
 80141bc:	f2ad 4dcc 	subw	sp, sp, #1228	; 0x4cc
 80141c0:	af00      	add	r7, sp, #0
 80141c2:	1d3b      	adds	r3, r7, #4
 80141c4:	6018      	str	r0, [r3, #0]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80141c6:	1d3b      	adds	r3, r7, #4
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 80141ce:	4611      	mov	r1, r2
 80141d0:	4618      	mov	r0, r3
 80141d2:	f7ff f887 	bl	80132e4 <validate>
 80141d6:	4603      	mov	r3, r0
 80141d8:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
	if (res == FR_OK) {
 80141dc:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	f040 8143 	bne.w	801446c <f_sync+0x2b2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80141e6:	1d3b      	adds	r3, r7, #4
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80141ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	f000 813a 	beq.w	801446c <f_sync+0x2b2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80141f8:	1d3b      	adds	r3, r7, #4
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014200:	b25b      	sxtb	r3, r3
 8014202:	2b00      	cmp	r3, #0
 8014204:	da1c      	bge.n	8014240 <f_sync+0x86>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8014206:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 801420a:	7858      	ldrb	r0, [r3, #1]
 801420c:	1d3b      	adds	r3, r7, #4
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8014214:	1d3b      	adds	r3, r7, #4
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801421a:	2301      	movs	r3, #1
 801421c:	f7fb fd46 	bl	800fcac <disk_write>
 8014220:	4603      	mov	r3, r0
 8014222:	2b00      	cmp	r3, #0
 8014224:	d001      	beq.n	801422a <f_sync+0x70>
 8014226:	2301      	movs	r3, #1
 8014228:	e122      	b.n	8014470 <f_sync+0x2b6>
				fp->flag &= (BYTE)~FA_DIRTY;
 801422a:	1d3b      	adds	r3, r7, #4
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014236:	b2da      	uxtb	r2, r3
 8014238:	1d3b      	adds	r3, r7, #4
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8014240:	f7f9 f854 	bl	800d2ec <get_fattime>
 8014244:	f8c7 04c0 	str.w	r0, [r7, #1216]	; 0x4c0
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8014248:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 801424c:	781b      	ldrb	r3, [r3, #0]
 801424e:	2b04      	cmp	r3, #4
 8014250:	f040 80af 	bne.w	80143b2 <f_sync+0x1f8>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 8014254:	1d3b      	adds	r3, r7, #4
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	4618      	mov	r0, r3
 801425a:	f7fc fd89 	bl	8010d70 <fill_first_frag>
 801425e:	4603      	mov	r3, r0
 8014260:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
				if (res == FR_OK) {
 8014264:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
 8014268:	2b00      	cmp	r3, #0
 801426a:	d10c      	bne.n	8014286 <f_sync+0xcc>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 801426c:	1d3b      	adds	r3, r7, #4
 801426e:	6818      	ldr	r0, [r3, #0]
 8014270:	1d3b      	adds	r3, r7, #4
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014276:	f04f 32ff 	mov.w	r2, #4294967295
 801427a:	4619      	mov	r1, r3
 801427c:	f7fc fda7 	bl	8010dce <fill_last_frag>
 8014280:	4603      	mov	r3, r0
 8014282:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
				}
				if (res == FR_OK) {
 8014286:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
 801428a:	2b00      	cmp	r3, #0
 801428c:	f040 80ee 	bne.w	801446c <f_sync+0x2b2>
					INIT_NAMBUF(fs);
 8014290:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 8014294:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8014298:	611a      	str	r2, [r3, #16]
 801429a:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 801429e:	f107 0208 	add.w	r2, r7, #8
 80142a2:	615a      	str	r2, [r3, #20]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 80142a4:	1d3b      	adds	r3, r7, #4
 80142a6:	681a      	ldr	r2, [r3, #0]
 80142a8:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80142ac:	4611      	mov	r1, r2
 80142ae:	4618      	mov	r0, r3
 80142b0:	f7fd fce2 	bl	8011c78 <load_obj_dir>
 80142b4:	4603      	mov	r3, r0
 80142b6:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
					if (res == FR_OK) {
 80142ba:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
 80142be:	2b00      	cmp	r3, #0
 80142c0:	f040 80d4 	bne.w	801446c <f_sync+0x2b2>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 80142c4:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 80142c8:	695b      	ldr	r3, [r3, #20]
 80142ca:	3304      	adds	r3, #4
 80142cc:	781a      	ldrb	r2, [r3, #0]
 80142ce:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 80142d2:	695b      	ldr	r3, [r3, #20]
 80142d4:	3304      	adds	r3, #4
 80142d6:	f042 0220 	orr.w	r2, r2, #32
 80142da:	b2d2      	uxtb	r2, r2
 80142dc:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 80142de:	1d3b      	adds	r3, r7, #4
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	79da      	ldrb	r2, [r3, #7]
 80142e4:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 80142e8:	695b      	ldr	r3, [r3, #20]
 80142ea:	3321      	adds	r3, #33	; 0x21
 80142ec:	f042 0201 	orr.w	r2, r2, #1
 80142f0:	b2d2      	uxtb	r2, r2
 80142f2:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 80142f4:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 80142f8:	695b      	ldr	r3, [r3, #20]
 80142fa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80142fe:	1d3b      	adds	r3, r7, #4
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	689b      	ldr	r3, [r3, #8]
 8014304:	4619      	mov	r1, r3
 8014306:	4610      	mov	r0, r2
 8014308:	f7fb fe21 	bl	800ff4e <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 801430c:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 8014310:	695b      	ldr	r3, [r3, #20]
 8014312:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014316:	1d3b      	adds	r3, r7, #4
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 801431e:	461a      	mov	r2, r3
 8014320:	4623      	mov	r3, r4
 8014322:	4608      	mov	r0, r1
 8014324:	f7fb fe3f 	bl	800ffa6 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 8014328:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 801432c:	695b      	ldr	r3, [r3, #20]
 801432e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8014332:	1d3b      	adds	r3, r7, #4
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 801433a:	461a      	mov	r2, r3
 801433c:	4623      	mov	r3, r4
 801433e:	4608      	mov	r0, r1
 8014340:	f7fb fe31 	bl	800ffa6 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8014344:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 8014348:	695b      	ldr	r3, [r3, #20]
 801434a:	330c      	adds	r3, #12
 801434c:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	; 0x4c0
 8014350:	4618      	mov	r0, r3
 8014352:	f7fb fdfc 	bl	800ff4e <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 8014356:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 801435a:	695b      	ldr	r3, [r3, #20]
 801435c:	3315      	adds	r3, #21
 801435e:	2200      	movs	r2, #0
 8014360:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8014362:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 8014366:	695b      	ldr	r3, [r3, #20]
 8014368:	3310      	adds	r3, #16
 801436a:	2100      	movs	r1, #0
 801436c:	4618      	mov	r0, r3
 801436e:	f7fb fdee 	bl	800ff4e <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 8014372:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8014376:	4618      	mov	r0, r3
 8014378:	f7fd fcbb 	bl	8011cf2 <store_xdir>
 801437c:	4603      	mov	r3, r0
 801437e:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
						if (res == FR_OK) {
 8014382:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
 8014386:	2b00      	cmp	r3, #0
 8014388:	d170      	bne.n	801446c <f_sync+0x2b2>
							res = sync_fs(fs);
 801438a:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 801438e:	4618      	mov	r0, r3
 8014390:	f7fc f8ec 	bl	801056c <sync_fs>
 8014394:	4603      	mov	r3, r0
 8014396:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
							fp->flag &= (BYTE)~FA_MODIFIED;
 801439a:	1d3b      	adds	r3, r7, #4
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80143a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80143a6:	b2da      	uxtb	r2, r3
 80143a8:	1d3b      	adds	r3, r7, #4
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80143b0:	e05c      	b.n	801446c <f_sync+0x2b2>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80143b2:	f8d7 24b8 	ldr.w	r2, [r7, #1208]	; 0x4b8
 80143b6:	1d3b      	adds	r3, r7, #4
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80143bc:	4619      	mov	r1, r3
 80143be:	4610      	mov	r0, r2
 80143c0:	f7fc f8a6 	bl	8010510 <move_window>
 80143c4:	4603      	mov	r3, r0
 80143c6:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
				if (res == FR_OK) {
 80143ca:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d14c      	bne.n	801446c <f_sync+0x2b2>
					dir = fp->dir_ptr;
 80143d2:	1d3b      	adds	r3, r7, #4
 80143d4:	681b      	ldr	r3, [r3, #0]
 80143d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80143d8:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80143dc:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 80143e0:	330b      	adds	r3, #11
 80143e2:	781a      	ldrb	r2, [r3, #0]
 80143e4:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 80143e8:	330b      	adds	r3, #11
 80143ea:	f042 0220 	orr.w	r2, r2, #32
 80143ee:	b2d2      	uxtb	r2, r2
 80143f0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80143f2:	1d3b      	adds	r3, r7, #4
 80143f4:	681b      	ldr	r3, [r3, #0]
 80143f6:	6818      	ldr	r0, [r3, #0]
 80143f8:	1d3b      	adds	r3, r7, #4
 80143fa:	681b      	ldr	r3, [r3, #0]
 80143fc:	689b      	ldr	r3, [r3, #8]
 80143fe:	461a      	mov	r2, r3
 8014400:	f8d7 14bc 	ldr.w	r1, [r7, #1212]	; 0x4bc
 8014404:	f7fd f905 	bl	8011612 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014408:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 801440c:	f103 021c 	add.w	r2, r3, #28
 8014410:	1d3b      	adds	r3, r7, #4
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8014418:	4619      	mov	r1, r3
 801441a:	4610      	mov	r0, r2
 801441c:	f7fb fd97 	bl	800ff4e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8014420:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8014424:	3316      	adds	r3, #22
 8014426:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	; 0x4c0
 801442a:	4618      	mov	r0, r3
 801442c:	f7fb fd8f 	bl	800ff4e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014430:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8014434:	3312      	adds	r3, #18
 8014436:	2100      	movs	r1, #0
 8014438:	4618      	mov	r0, r3
 801443a:	f7fb fd6d 	bl	800ff18 <st_word>
					fs->wflag = 1;
 801443e:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 8014442:	2201      	movs	r2, #1
 8014444:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014446:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 801444a:	4618      	mov	r0, r3
 801444c:	f7fc f88e 	bl	801056c <sync_fs>
 8014450:	4603      	mov	r3, r0
 8014452:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014456:	1d3b      	adds	r3, r7, #4
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801445e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014462:	b2da      	uxtb	r2, r3
 8014464:	1d3b      	adds	r3, r7, #4
 8014466:	681b      	ldr	r3, [r3, #0]
 8014468:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801446c:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
}
 8014470:	4618      	mov	r0, r3
 8014472:	f207 47cc 	addw	r7, r7, #1228	; 0x4cc
 8014476:	46bd      	mov	sp, r7
 8014478:	bd90      	pop	{r4, r7, pc}

0801447a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801447a:	b580      	push	{r7, lr}
 801447c:	b084      	sub	sp, #16
 801447e:	af00      	add	r7, sp, #0
 8014480:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8014482:	6878      	ldr	r0, [r7, #4]
 8014484:	f7ff fe99 	bl	80141ba <f_sync>
 8014488:	4603      	mov	r3, r0
 801448a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801448c:	7bfb      	ldrb	r3, [r7, #15]
 801448e:	2b00      	cmp	r3, #0
 8014490:	d118      	bne.n	80144c4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	f107 0208 	add.w	r2, r7, #8
 8014498:	4611      	mov	r1, r2
 801449a:	4618      	mov	r0, r3
 801449c:	f7fe ff22 	bl	80132e4 <validate>
 80144a0:	4603      	mov	r3, r0
 80144a2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80144a4:	7bfb      	ldrb	r3, [r7, #15]
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d10c      	bne.n	80144c4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144ae:	4618      	mov	r0, r3
 80144b0:	f7fb ff8a 	bl	80103c8 <dec_lock>
 80144b4:	4603      	mov	r3, r0
 80144b6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80144b8:	7bfb      	ldrb	r3, [r7, #15]
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d102      	bne.n	80144c4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	2200      	movs	r2, #0
 80144c2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80144c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80144c6:	4618      	mov	r0, r3
 80144c8:	3710      	adds	r7, #16
 80144ca:	46bd      	mov	sp, r7
 80144cc:	bd80      	pop	{r7, pc}

080144ce <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80144ce:	b580      	push	{r7, lr}
 80144d0:	b084      	sub	sp, #16
 80144d2:	af00      	add	r7, sp, #0
 80144d4:	6078      	str	r0, [r7, #4]
 80144d6:	460b      	mov	r3, r1
 80144d8:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80144da:	78fb      	ldrb	r3, [r7, #3]
 80144dc:	2b0a      	cmp	r3, #10
 80144de:	d103      	bne.n	80144e8 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80144e0:	210d      	movs	r1, #13
 80144e2:	6878      	ldr	r0, [r7, #4]
 80144e4:	f7ff fff3 	bl	80144ce <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	685b      	ldr	r3, [r3, #4]
 80144ec:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80144ee:	68fb      	ldr	r3, [r7, #12]
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	db25      	blt.n	8014540 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	1c5a      	adds	r2, r3, #1
 80144f8:	60fa      	str	r2, [r7, #12]
 80144fa:	687a      	ldr	r2, [r7, #4]
 80144fc:	4413      	add	r3, r2
 80144fe:	78fa      	ldrb	r2, [r7, #3]
 8014500:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	2b3c      	cmp	r3, #60	; 0x3c
 8014506:	dd12      	ble.n	801452e <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	6818      	ldr	r0, [r3, #0]
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	f103 010c 	add.w	r1, r3, #12
 8014512:	68fa      	ldr	r2, [r7, #12]
 8014514:	f107 0308 	add.w	r3, r7, #8
 8014518:	f7ff fc79 	bl	8013e0e <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801451c:	68ba      	ldr	r2, [r7, #8]
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	429a      	cmp	r2, r3
 8014522:	d101      	bne.n	8014528 <putc_bfd+0x5a>
 8014524:	2300      	movs	r3, #0
 8014526:	e001      	b.n	801452c <putc_bfd+0x5e>
 8014528:	f04f 33ff 	mov.w	r3, #4294967295
 801452c:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	68fa      	ldr	r2, [r7, #12]
 8014532:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	689b      	ldr	r3, [r3, #8]
 8014538:	1c5a      	adds	r2, r3, #1
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	609a      	str	r2, [r3, #8]
 801453e:	e000      	b.n	8014542 <putc_bfd+0x74>
	if (i < 0) return;
 8014540:	bf00      	nop
}
 8014542:	3710      	adds	r7, #16
 8014544:	46bd      	mov	sp, r7
 8014546:	bd80      	pop	{r7, pc}

08014548 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8014548:	b580      	push	{r7, lr}
 801454a:	b084      	sub	sp, #16
 801454c:	af00      	add	r7, sp, #0
 801454e:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	685b      	ldr	r3, [r3, #4]
 8014554:	2b00      	cmp	r3, #0
 8014556:	db17      	blt.n	8014588 <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	6818      	ldr	r0, [r3, #0]
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	f103 010c 	add.w	r1, r3, #12
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	685b      	ldr	r3, [r3, #4]
 8014566:	461a      	mov	r2, r3
 8014568:	f107 030c 	add.w	r3, r7, #12
 801456c:	f7ff fc4f 	bl	8013e0e <f_write>
 8014570:	4603      	mov	r3, r0
 8014572:	2b00      	cmp	r3, #0
 8014574:	d108      	bne.n	8014588 <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	685b      	ldr	r3, [r3, #4]
 801457a:	461a      	mov	r2, r3
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	429a      	cmp	r2, r3
 8014580:	d102      	bne.n	8014588 <putc_flush+0x40>
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	689b      	ldr	r3, [r3, #8]
 8014586:	e001      	b.n	801458c <putc_flush+0x44>
	return EOF;
 8014588:	f04f 33ff 	mov.w	r3, #4294967295
}
 801458c:	4618      	mov	r0, r3
 801458e:	3710      	adds	r7, #16
 8014590:	46bd      	mov	sp, r7
 8014592:	bd80      	pop	{r7, pc}

08014594 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8014594:	b480      	push	{r7}
 8014596:	b083      	sub	sp, #12
 8014598:	af00      	add	r7, sp, #0
 801459a:	6078      	str	r0, [r7, #4]
 801459c:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	683a      	ldr	r2, [r7, #0]
 80145a2:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	2200      	movs	r2, #0
 80145a8:	605a      	str	r2, [r3, #4]
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	685a      	ldr	r2, [r3, #4]
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	609a      	str	r2, [r3, #8]
}
 80145b2:	bf00      	nop
 80145b4:	370c      	adds	r7, #12
 80145b6:	46bd      	mov	sp, r7
 80145b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145bc:	4770      	bx	lr
	...

080145c0 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 80145c0:	b40e      	push	{r1, r2, r3}
 80145c2:	b580      	push	{r7, lr}
 80145c4:	b0a7      	sub	sp, #156	; 0x9c
 80145c6:	af00      	add	r7, sp, #0
 80145c8:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 80145ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80145ce:	6879      	ldr	r1, [r7, #4]
 80145d0:	4618      	mov	r0, r3
 80145d2:	f7ff ffdf 	bl	8014594 <putc_init>

	va_start(arp, fmt);
 80145d6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80145da:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 80145dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80145e0:	1c5a      	adds	r2, r3, #1
 80145e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80145e6:	781b      	ldrb	r3, [r3, #0]
 80145e8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 80145ec:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	f000 81f4 	beq.w	80149de <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 80145f6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80145fa:	2b25      	cmp	r3, #37	; 0x25
 80145fc:	d008      	beq.n	8014610 <f_printf+0x50>
			putc_bfd(&pb, c);
 80145fe:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8014602:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014606:	4611      	mov	r1, r2
 8014608:	4618      	mov	r0, r3
 801460a:	f7ff ff60 	bl	80144ce <putc_bfd>
			continue;
 801460e:	e1e5      	b.n	80149dc <f_printf+0x41c>
		}
		w = f = 0;
 8014610:	2300      	movs	r3, #0
 8014612:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8014616:	2300      	movs	r3, #0
 8014618:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 801461c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014620:	1c5a      	adds	r2, r3, #1
 8014622:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8014626:	781b      	ldrb	r3, [r3, #0]
 8014628:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 801462c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8014630:	2b30      	cmp	r3, #48	; 0x30
 8014632:	d10b      	bne.n	801464c <f_printf+0x8c>
			f = 1; c = *fmt++;
 8014634:	2301      	movs	r3, #1
 8014636:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 801463a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801463e:	1c5a      	adds	r2, r3, #1
 8014640:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8014644:	781b      	ldrb	r3, [r3, #0]
 8014646:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 801464a:	e024      	b.n	8014696 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 801464c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8014650:	2b2d      	cmp	r3, #45	; 0x2d
 8014652:	d120      	bne.n	8014696 <f_printf+0xd6>
				f = 2; c = *fmt++;
 8014654:	2302      	movs	r3, #2
 8014656:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 801465a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801465e:	1c5a      	adds	r2, r3, #1
 8014660:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8014664:	781b      	ldrb	r3, [r3, #0]
 8014666:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 801466a:	e014      	b.n	8014696 <f_printf+0xd6>
			w = w * 10 + c - '0';
 801466c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8014670:	4613      	mov	r3, r2
 8014672:	009b      	lsls	r3, r3, #2
 8014674:	4413      	add	r3, r2
 8014676:	005b      	lsls	r3, r3, #1
 8014678:	461a      	mov	r2, r3
 801467a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801467e:	4413      	add	r3, r2
 8014680:	3b30      	subs	r3, #48	; 0x30
 8014682:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 8014686:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801468a:	1c5a      	adds	r2, r3, #1
 801468c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8014690:	781b      	ldrb	r3, [r3, #0]
 8014692:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 8014696:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801469a:	2b2f      	cmp	r3, #47	; 0x2f
 801469c:	d903      	bls.n	80146a6 <f_printf+0xe6>
 801469e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80146a2:	2b39      	cmp	r3, #57	; 0x39
 80146a4:	d9e2      	bls.n	801466c <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 80146a6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80146aa:	2b6c      	cmp	r3, #108	; 0x6c
 80146ac:	d003      	beq.n	80146b6 <f_printf+0xf6>
 80146ae:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80146b2:	2b4c      	cmp	r3, #76	; 0x4c
 80146b4:	d10d      	bne.n	80146d2 <f_printf+0x112>
			f |= 4; c = *fmt++;
 80146b6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80146ba:	f043 0304 	orr.w	r3, r3, #4
 80146be:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80146c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80146c6:	1c5a      	adds	r2, r3, #1
 80146c8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80146cc:	781b      	ldrb	r3, [r3, #0]
 80146ce:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 80146d2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	f000 8183 	beq.w	80149e2 <f_printf+0x422>
		d = c;
 80146dc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80146e0:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 80146e4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80146e8:	2b60      	cmp	r3, #96	; 0x60
 80146ea:	d908      	bls.n	80146fe <f_printf+0x13e>
 80146ec:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80146f0:	2b7a      	cmp	r3, #122	; 0x7a
 80146f2:	d804      	bhi.n	80146fe <f_printf+0x13e>
 80146f4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80146f8:	3b20      	subs	r3, #32
 80146fa:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 80146fe:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8014702:	3b42      	subs	r3, #66	; 0x42
 8014704:	2b16      	cmp	r3, #22
 8014706:	f200 8098 	bhi.w	801483a <f_printf+0x27a>
 801470a:	a201      	add	r2, pc, #4	; (adr r2, 8014710 <f_printf+0x150>)
 801470c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014710:	0801481b 	.word	0x0801481b
 8014714:	08014803 	.word	0x08014803
 8014718:	0801482b 	.word	0x0801482b
 801471c:	0801483b 	.word	0x0801483b
 8014720:	0801483b 	.word	0x0801483b
 8014724:	0801483b 	.word	0x0801483b
 8014728:	0801483b 	.word	0x0801483b
 801472c:	0801483b 	.word	0x0801483b
 8014730:	0801483b 	.word	0x0801483b
 8014734:	0801483b 	.word	0x0801483b
 8014738:	0801483b 	.word	0x0801483b
 801473c:	0801483b 	.word	0x0801483b
 8014740:	0801483b 	.word	0x0801483b
 8014744:	08014823 	.word	0x08014823
 8014748:	0801483b 	.word	0x0801483b
 801474c:	0801483b 	.word	0x0801483b
 8014750:	0801483b 	.word	0x0801483b
 8014754:	0801476d 	.word	0x0801476d
 8014758:	0801483b 	.word	0x0801483b
 801475c:	0801482b 	.word	0x0801482b
 8014760:	0801483b 	.word	0x0801483b
 8014764:	0801483b 	.word	0x0801483b
 8014768:	08014833 	.word	0x08014833
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 801476c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801476e:	1d1a      	adds	r2, r3, #4
 8014770:	67ba      	str	r2, [r7, #120]	; 0x78
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 8014776:	2300      	movs	r3, #0
 8014778:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801477c:	e004      	b.n	8014788 <f_printf+0x1c8>
 801477e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014782:	3301      	adds	r3, #1
 8014784:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8014788:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801478a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801478e:	4413      	add	r3, r2
 8014790:	781b      	ldrb	r3, [r3, #0]
 8014792:	2b00      	cmp	r3, #0
 8014794:	d1f3      	bne.n	801477e <f_printf+0x1be>
			if (!(f & 2)) {
 8014796:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801479a:	f003 0302 	and.w	r3, r3, #2
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d11a      	bne.n	80147d8 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 80147a2:	e005      	b.n	80147b0 <f_printf+0x1f0>
 80147a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80147a8:	2120      	movs	r1, #32
 80147aa:	4618      	mov	r0, r3
 80147ac:	f7ff fe8f 	bl	80144ce <putc_bfd>
 80147b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80147b4:	1c5a      	adds	r2, r3, #1
 80147b6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80147ba:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80147be:	429a      	cmp	r2, r3
 80147c0:	d8f0      	bhi.n	80147a4 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 80147c2:	e009      	b.n	80147d8 <f_printf+0x218>
 80147c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80147c6:	1c5a      	adds	r2, r3, #1
 80147c8:	67fa      	str	r2, [r7, #124]	; 0x7c
 80147ca:	781a      	ldrb	r2, [r3, #0]
 80147cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80147d0:	4611      	mov	r1, r2
 80147d2:	4618      	mov	r0, r3
 80147d4:	f7ff fe7b 	bl	80144ce <putc_bfd>
 80147d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80147da:	781b      	ldrb	r3, [r3, #0]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d1f1      	bne.n	80147c4 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 80147e0:	e005      	b.n	80147ee <f_printf+0x22e>
 80147e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80147e6:	2120      	movs	r1, #32
 80147e8:	4618      	mov	r0, r3
 80147ea:	f7ff fe70 	bl	80144ce <putc_bfd>
 80147ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80147f2:	1c5a      	adds	r2, r3, #1
 80147f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80147f8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80147fc:	429a      	cmp	r2, r3
 80147fe:	d8f0      	bhi.n	80147e2 <f_printf+0x222>
			continue;
 8014800:	e0ec      	b.n	80149dc <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8014802:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014804:	1d1a      	adds	r2, r3, #4
 8014806:	67ba      	str	r2, [r7, #120]	; 0x78
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	b2da      	uxtb	r2, r3
 801480c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014810:	4611      	mov	r1, r2
 8014812:	4618      	mov	r0, r3
 8014814:	f7ff fe5b 	bl	80144ce <putc_bfd>
 8014818:	e0e0      	b.n	80149dc <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 801481a:	2302      	movs	r3, #2
 801481c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8014820:	e014      	b.n	801484c <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8014822:	2308      	movs	r3, #8
 8014824:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8014828:	e010      	b.n	801484c <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 801482a:	230a      	movs	r3, #10
 801482c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8014830:	e00c      	b.n	801484c <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8014832:	2310      	movs	r3, #16
 8014834:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8014838:	e008      	b.n	801484c <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 801483a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 801483e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014842:	4611      	mov	r1, r2
 8014844:	4618      	mov	r0, r3
 8014846:	f7ff fe42 	bl	80144ce <putc_bfd>
 801484a:	e0c7      	b.n	80149dc <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 801484c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8014850:	f003 0304 	and.w	r3, r3, #4
 8014854:	2b00      	cmp	r3, #0
 8014856:	d004      	beq.n	8014862 <f_printf+0x2a2>
 8014858:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801485a:	1d1a      	adds	r2, r3, #4
 801485c:	67ba      	str	r2, [r7, #120]	; 0x78
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	e00c      	b.n	801487c <f_printf+0x2bc>
 8014862:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8014866:	2b44      	cmp	r3, #68	; 0x44
 8014868:	d104      	bne.n	8014874 <f_printf+0x2b4>
 801486a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801486c:	1d1a      	adds	r2, r3, #4
 801486e:	67ba      	str	r2, [r7, #120]	; 0x78
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	e003      	b.n	801487c <f_printf+0x2bc>
 8014874:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014876:	1d1a      	adds	r2, r3, #4
 8014878:	67ba      	str	r2, [r7, #120]	; 0x78
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8014880:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8014884:	2b44      	cmp	r3, #68	; 0x44
 8014886:	d10e      	bne.n	80148a6 <f_printf+0x2e6>
 8014888:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801488c:	2b00      	cmp	r3, #0
 801488e:	da0a      	bge.n	80148a6 <f_printf+0x2e6>
			v = 0 - v;
 8014890:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014894:	425b      	negs	r3, r3
 8014896:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 801489a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801489e:	f043 0308 	orr.w	r3, r3, #8
 80148a2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 80148a6:	2300      	movs	r3, #0
 80148a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 80148ac:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 80148b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80148b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80148b8:	fb02 f201 	mul.w	r2, r2, r1
 80148bc:	1a9b      	subs	r3, r3, r2
 80148be:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 80148c2:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80148c6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80148ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80148ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 80148d2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80148d6:	2b09      	cmp	r3, #9
 80148d8:	d90b      	bls.n	80148f2 <f_printf+0x332>
 80148da:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80148de:	2b78      	cmp	r3, #120	; 0x78
 80148e0:	d101      	bne.n	80148e6 <f_printf+0x326>
 80148e2:	2227      	movs	r2, #39	; 0x27
 80148e4:	e000      	b.n	80148e8 <f_printf+0x328>
 80148e6:	2207      	movs	r2, #7
 80148e8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80148ec:	4413      	add	r3, r2
 80148ee:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 80148f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80148f6:	1c5a      	adds	r2, r3, #1
 80148f8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80148fc:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8014900:	3230      	adds	r2, #48	; 0x30
 8014902:	b2d2      	uxtb	r2, r2
 8014904:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8014908:	440b      	add	r3, r1
 801490a:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 801490e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014912:	2b00      	cmp	r3, #0
 8014914:	d003      	beq.n	801491e <f_printf+0x35e>
 8014916:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801491a:	2b1f      	cmp	r3, #31
 801491c:	d9c6      	bls.n	80148ac <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 801491e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8014922:	f003 0308 	and.w	r3, r3, #8
 8014926:	2b00      	cmp	r3, #0
 8014928:	d00a      	beq.n	8014940 <f_printf+0x380>
 801492a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801492e:	1c5a      	adds	r2, r3, #1
 8014930:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8014934:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8014938:	4413      	add	r3, r2
 801493a:	222d      	movs	r2, #45	; 0x2d
 801493c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8014940:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014944:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8014948:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801494c:	f003 0301 	and.w	r3, r3, #1
 8014950:	2b00      	cmp	r3, #0
 8014952:	d001      	beq.n	8014958 <f_printf+0x398>
 8014954:	2330      	movs	r3, #48	; 0x30
 8014956:	e000      	b.n	801495a <f_printf+0x39a>
 8014958:	2320      	movs	r3, #32
 801495a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 801495e:	e007      	b.n	8014970 <f_printf+0x3b0>
 8014960:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8014964:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014968:	4611      	mov	r1, r2
 801496a:	4618      	mov	r0, r3
 801496c:	f7ff fdaf 	bl	80144ce <putc_bfd>
 8014970:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8014974:	f003 0302 	and.w	r3, r3, #2
 8014978:	2b00      	cmp	r3, #0
 801497a:	d108      	bne.n	801498e <f_printf+0x3ce>
 801497c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014980:	1c5a      	adds	r2, r3, #1
 8014982:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8014986:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801498a:	429a      	cmp	r2, r3
 801498c:	d8e8      	bhi.n	8014960 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 801498e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014992:	3b01      	subs	r3, #1
 8014994:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8014998:	f107 020c 	add.w	r2, r7, #12
 801499c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80149a0:	4413      	add	r3, r2
 80149a2:	781a      	ldrb	r2, [r3, #0]
 80149a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80149a8:	4611      	mov	r1, r2
 80149aa:	4618      	mov	r0, r3
 80149ac:	f7ff fd8f 	bl	80144ce <putc_bfd>
		} while (i);
 80149b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d1ea      	bne.n	801498e <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 80149b8:	e007      	b.n	80149ca <f_printf+0x40a>
 80149ba:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80149be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80149c2:	4611      	mov	r1, r2
 80149c4:	4618      	mov	r0, r3
 80149c6:	f7ff fd82 	bl	80144ce <putc_bfd>
 80149ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80149ce:	1c5a      	adds	r2, r3, #1
 80149d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80149d4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80149d8:	429a      	cmp	r2, r3
 80149da:	d8ee      	bhi.n	80149ba <f_printf+0x3fa>
		c = *fmt++;
 80149dc:	e5fe      	b.n	80145dc <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 80149de:	bf00      	nop
 80149e0:	e000      	b.n	80149e4 <f_printf+0x424>
		if (!c) break;
 80149e2:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 80149e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80149e8:	4618      	mov	r0, r3
 80149ea:	f7ff fdad 	bl	8014548 <putc_flush>
 80149ee:	4603      	mov	r3, r0
}
 80149f0:	4618      	mov	r0, r3
 80149f2:	379c      	adds	r7, #156	; 0x9c
 80149f4:	46bd      	mov	sp, r7
 80149f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80149fa:	b003      	add	sp, #12
 80149fc:	4770      	bx	lr
 80149fe:	bf00      	nop

08014a00 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014a00:	b480      	push	{r7}
 8014a02:	b087      	sub	sp, #28
 8014a04:	af00      	add	r7, sp, #0
 8014a06:	60f8      	str	r0, [r7, #12]
 8014a08:	60b9      	str	r1, [r7, #8]
 8014a0a:	4613      	mov	r3, r2
 8014a0c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014a0e:	2301      	movs	r3, #1
 8014a10:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014a12:	2300      	movs	r3, #0
 8014a14:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014a16:	4b1f      	ldr	r3, [pc, #124]	; (8014a94 <FATFS_LinkDriverEx+0x94>)
 8014a18:	7a5b      	ldrb	r3, [r3, #9]
 8014a1a:	b2db      	uxtb	r3, r3
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d131      	bne.n	8014a84 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014a20:	4b1c      	ldr	r3, [pc, #112]	; (8014a94 <FATFS_LinkDriverEx+0x94>)
 8014a22:	7a5b      	ldrb	r3, [r3, #9]
 8014a24:	b2db      	uxtb	r3, r3
 8014a26:	461a      	mov	r2, r3
 8014a28:	4b1a      	ldr	r3, [pc, #104]	; (8014a94 <FATFS_LinkDriverEx+0x94>)
 8014a2a:	2100      	movs	r1, #0
 8014a2c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014a2e:	4b19      	ldr	r3, [pc, #100]	; (8014a94 <FATFS_LinkDriverEx+0x94>)
 8014a30:	7a5b      	ldrb	r3, [r3, #9]
 8014a32:	b2db      	uxtb	r3, r3
 8014a34:	4a17      	ldr	r2, [pc, #92]	; (8014a94 <FATFS_LinkDriverEx+0x94>)
 8014a36:	009b      	lsls	r3, r3, #2
 8014a38:	4413      	add	r3, r2
 8014a3a:	68fa      	ldr	r2, [r7, #12]
 8014a3c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014a3e:	4b15      	ldr	r3, [pc, #84]	; (8014a94 <FATFS_LinkDriverEx+0x94>)
 8014a40:	7a5b      	ldrb	r3, [r3, #9]
 8014a42:	b2db      	uxtb	r3, r3
 8014a44:	461a      	mov	r2, r3
 8014a46:	4b13      	ldr	r3, [pc, #76]	; (8014a94 <FATFS_LinkDriverEx+0x94>)
 8014a48:	4413      	add	r3, r2
 8014a4a:	79fa      	ldrb	r2, [r7, #7]
 8014a4c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014a4e:	4b11      	ldr	r3, [pc, #68]	; (8014a94 <FATFS_LinkDriverEx+0x94>)
 8014a50:	7a5b      	ldrb	r3, [r3, #9]
 8014a52:	b2db      	uxtb	r3, r3
 8014a54:	1c5a      	adds	r2, r3, #1
 8014a56:	b2d1      	uxtb	r1, r2
 8014a58:	4a0e      	ldr	r2, [pc, #56]	; (8014a94 <FATFS_LinkDriverEx+0x94>)
 8014a5a:	7251      	strb	r1, [r2, #9]
 8014a5c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014a5e:	7dbb      	ldrb	r3, [r7, #22]
 8014a60:	3330      	adds	r3, #48	; 0x30
 8014a62:	b2da      	uxtb	r2, r3
 8014a64:	68bb      	ldr	r3, [r7, #8]
 8014a66:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014a68:	68bb      	ldr	r3, [r7, #8]
 8014a6a:	3301      	adds	r3, #1
 8014a6c:	223a      	movs	r2, #58	; 0x3a
 8014a6e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014a70:	68bb      	ldr	r3, [r7, #8]
 8014a72:	3302      	adds	r3, #2
 8014a74:	222f      	movs	r2, #47	; 0x2f
 8014a76:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014a78:	68bb      	ldr	r3, [r7, #8]
 8014a7a:	3303      	adds	r3, #3
 8014a7c:	2200      	movs	r2, #0
 8014a7e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014a80:	2300      	movs	r3, #0
 8014a82:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a86:	4618      	mov	r0, r3
 8014a88:	371c      	adds	r7, #28
 8014a8a:	46bd      	mov	sp, r7
 8014a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a90:	4770      	bx	lr
 8014a92:	bf00      	nop
 8014a94:	240002cc 	.word	0x240002cc

08014a98 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014a98:	b580      	push	{r7, lr}
 8014a9a:	b082      	sub	sp, #8
 8014a9c:	af00      	add	r7, sp, #0
 8014a9e:	6078      	str	r0, [r7, #4]
 8014aa0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014aa2:	2200      	movs	r2, #0
 8014aa4:	6839      	ldr	r1, [r7, #0]
 8014aa6:	6878      	ldr	r0, [r7, #4]
 8014aa8:	f7ff ffaa 	bl	8014a00 <FATFS_LinkDriverEx>
 8014aac:	4603      	mov	r3, r0
}
 8014aae:	4618      	mov	r0, r3
 8014ab0:	3708      	adds	r7, #8
 8014ab2:	46bd      	mov	sp, r7
 8014ab4:	bd80      	pop	{r7, pc}
	...

08014ab8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8014ab8:	b480      	push	{r7}
 8014aba:	b085      	sub	sp, #20
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	4603      	mov	r3, r0
 8014ac0:	6039      	str	r1, [r7, #0]
 8014ac2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8014ac4:	88fb      	ldrh	r3, [r7, #6]
 8014ac6:	2b7f      	cmp	r3, #127	; 0x7f
 8014ac8:	d802      	bhi.n	8014ad0 <ff_convert+0x18>
		c = chr;
 8014aca:	88fb      	ldrh	r3, [r7, #6]
 8014acc:	81fb      	strh	r3, [r7, #14]
 8014ace:	e025      	b.n	8014b1c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8014ad0:	683b      	ldr	r3, [r7, #0]
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d00b      	beq.n	8014aee <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8014ad6:	88fb      	ldrh	r3, [r7, #6]
 8014ad8:	2bff      	cmp	r3, #255	; 0xff
 8014ada:	d805      	bhi.n	8014ae8 <ff_convert+0x30>
 8014adc:	88fb      	ldrh	r3, [r7, #6]
 8014ade:	3b80      	subs	r3, #128	; 0x80
 8014ae0:	4a12      	ldr	r2, [pc, #72]	; (8014b2c <ff_convert+0x74>)
 8014ae2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014ae6:	e000      	b.n	8014aea <ff_convert+0x32>
 8014ae8:	2300      	movs	r3, #0
 8014aea:	81fb      	strh	r3, [r7, #14]
 8014aec:	e016      	b.n	8014b1c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8014aee:	2300      	movs	r3, #0
 8014af0:	81fb      	strh	r3, [r7, #14]
 8014af2:	e009      	b.n	8014b08 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8014af4:	89fb      	ldrh	r3, [r7, #14]
 8014af6:	4a0d      	ldr	r2, [pc, #52]	; (8014b2c <ff_convert+0x74>)
 8014af8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014afc:	88fa      	ldrh	r2, [r7, #6]
 8014afe:	429a      	cmp	r2, r3
 8014b00:	d006      	beq.n	8014b10 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8014b02:	89fb      	ldrh	r3, [r7, #14]
 8014b04:	3301      	adds	r3, #1
 8014b06:	81fb      	strh	r3, [r7, #14]
 8014b08:	89fb      	ldrh	r3, [r7, #14]
 8014b0a:	2b7f      	cmp	r3, #127	; 0x7f
 8014b0c:	d9f2      	bls.n	8014af4 <ff_convert+0x3c>
 8014b0e:	e000      	b.n	8014b12 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8014b10:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8014b12:	89fb      	ldrh	r3, [r7, #14]
 8014b14:	3380      	adds	r3, #128	; 0x80
 8014b16:	b29b      	uxth	r3, r3
 8014b18:	b2db      	uxtb	r3, r3
 8014b1a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8014b1c:	89fb      	ldrh	r3, [r7, #14]
}
 8014b1e:	4618      	mov	r0, r3
 8014b20:	3714      	adds	r7, #20
 8014b22:	46bd      	mov	sp, r7
 8014b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b28:	4770      	bx	lr
 8014b2a:	bf00      	nop
 8014b2c:	080159fc 	.word	0x080159fc

08014b30 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8014b30:	b480      	push	{r7}
 8014b32:	b087      	sub	sp, #28
 8014b34:	af00      	add	r7, sp, #0
 8014b36:	4603      	mov	r3, r0
 8014b38:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8014b3a:	88fb      	ldrh	r3, [r7, #6]
 8014b3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014b40:	d201      	bcs.n	8014b46 <ff_wtoupper+0x16>
 8014b42:	4b3e      	ldr	r3, [pc, #248]	; (8014c3c <ff_wtoupper+0x10c>)
 8014b44:	e000      	b.n	8014b48 <ff_wtoupper+0x18>
 8014b46:	4b3e      	ldr	r3, [pc, #248]	; (8014c40 <ff_wtoupper+0x110>)
 8014b48:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8014b4a:	697b      	ldr	r3, [r7, #20]
 8014b4c:	1c9a      	adds	r2, r3, #2
 8014b4e:	617a      	str	r2, [r7, #20]
 8014b50:	881b      	ldrh	r3, [r3, #0]
 8014b52:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8014b54:	8a7b      	ldrh	r3, [r7, #18]
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d068      	beq.n	8014c2c <ff_wtoupper+0xfc>
 8014b5a:	88fa      	ldrh	r2, [r7, #6]
 8014b5c:	8a7b      	ldrh	r3, [r7, #18]
 8014b5e:	429a      	cmp	r2, r3
 8014b60:	d364      	bcc.n	8014c2c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8014b62:	697b      	ldr	r3, [r7, #20]
 8014b64:	1c9a      	adds	r2, r3, #2
 8014b66:	617a      	str	r2, [r7, #20]
 8014b68:	881b      	ldrh	r3, [r3, #0]
 8014b6a:	823b      	strh	r3, [r7, #16]
 8014b6c:	8a3b      	ldrh	r3, [r7, #16]
 8014b6e:	0a1b      	lsrs	r3, r3, #8
 8014b70:	81fb      	strh	r3, [r7, #14]
 8014b72:	8a3b      	ldrh	r3, [r7, #16]
 8014b74:	b2db      	uxtb	r3, r3
 8014b76:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8014b78:	88fa      	ldrh	r2, [r7, #6]
 8014b7a:	8a79      	ldrh	r1, [r7, #18]
 8014b7c:	8a3b      	ldrh	r3, [r7, #16]
 8014b7e:	440b      	add	r3, r1
 8014b80:	429a      	cmp	r2, r3
 8014b82:	da49      	bge.n	8014c18 <ff_wtoupper+0xe8>
			switch (cmd) {
 8014b84:	89fb      	ldrh	r3, [r7, #14]
 8014b86:	2b08      	cmp	r3, #8
 8014b88:	d84f      	bhi.n	8014c2a <ff_wtoupper+0xfa>
 8014b8a:	a201      	add	r2, pc, #4	; (adr r2, 8014b90 <ff_wtoupper+0x60>)
 8014b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b90:	08014bb5 	.word	0x08014bb5
 8014b94:	08014bc7 	.word	0x08014bc7
 8014b98:	08014bdd 	.word	0x08014bdd
 8014b9c:	08014be5 	.word	0x08014be5
 8014ba0:	08014bed 	.word	0x08014bed
 8014ba4:	08014bf5 	.word	0x08014bf5
 8014ba8:	08014bfd 	.word	0x08014bfd
 8014bac:	08014c05 	.word	0x08014c05
 8014bb0:	08014c0d 	.word	0x08014c0d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8014bb4:	88fa      	ldrh	r2, [r7, #6]
 8014bb6:	8a7b      	ldrh	r3, [r7, #18]
 8014bb8:	1ad3      	subs	r3, r2, r3
 8014bba:	005b      	lsls	r3, r3, #1
 8014bbc:	697a      	ldr	r2, [r7, #20]
 8014bbe:	4413      	add	r3, r2
 8014bc0:	881b      	ldrh	r3, [r3, #0]
 8014bc2:	80fb      	strh	r3, [r7, #6]
 8014bc4:	e027      	b.n	8014c16 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8014bc6:	88fa      	ldrh	r2, [r7, #6]
 8014bc8:	8a7b      	ldrh	r3, [r7, #18]
 8014bca:	1ad3      	subs	r3, r2, r3
 8014bcc:	b29b      	uxth	r3, r3
 8014bce:	f003 0301 	and.w	r3, r3, #1
 8014bd2:	b29b      	uxth	r3, r3
 8014bd4:	88fa      	ldrh	r2, [r7, #6]
 8014bd6:	1ad3      	subs	r3, r2, r3
 8014bd8:	80fb      	strh	r3, [r7, #6]
 8014bda:	e01c      	b.n	8014c16 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8014bdc:	88fb      	ldrh	r3, [r7, #6]
 8014bde:	3b10      	subs	r3, #16
 8014be0:	80fb      	strh	r3, [r7, #6]
 8014be2:	e018      	b.n	8014c16 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8014be4:	88fb      	ldrh	r3, [r7, #6]
 8014be6:	3b20      	subs	r3, #32
 8014be8:	80fb      	strh	r3, [r7, #6]
 8014bea:	e014      	b.n	8014c16 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8014bec:	88fb      	ldrh	r3, [r7, #6]
 8014bee:	3b30      	subs	r3, #48	; 0x30
 8014bf0:	80fb      	strh	r3, [r7, #6]
 8014bf2:	e010      	b.n	8014c16 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8014bf4:	88fb      	ldrh	r3, [r7, #6]
 8014bf6:	3b1a      	subs	r3, #26
 8014bf8:	80fb      	strh	r3, [r7, #6]
 8014bfa:	e00c      	b.n	8014c16 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8014bfc:	88fb      	ldrh	r3, [r7, #6]
 8014bfe:	3308      	adds	r3, #8
 8014c00:	80fb      	strh	r3, [r7, #6]
 8014c02:	e008      	b.n	8014c16 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8014c04:	88fb      	ldrh	r3, [r7, #6]
 8014c06:	3b50      	subs	r3, #80	; 0x50
 8014c08:	80fb      	strh	r3, [r7, #6]
 8014c0a:	e004      	b.n	8014c16 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8014c0c:	88fb      	ldrh	r3, [r7, #6]
 8014c0e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8014c12:	80fb      	strh	r3, [r7, #6]
 8014c14:	bf00      	nop
			}
			break;
 8014c16:	e008      	b.n	8014c2a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8014c18:	89fb      	ldrh	r3, [r7, #14]
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d195      	bne.n	8014b4a <ff_wtoupper+0x1a>
 8014c1e:	8a3b      	ldrh	r3, [r7, #16]
 8014c20:	005b      	lsls	r3, r3, #1
 8014c22:	697a      	ldr	r2, [r7, #20]
 8014c24:	4413      	add	r3, r2
 8014c26:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8014c28:	e78f      	b.n	8014b4a <ff_wtoupper+0x1a>
			break;
 8014c2a:	bf00      	nop
	}

	return chr;
 8014c2c:	88fb      	ldrh	r3, [r7, #6]
}
 8014c2e:	4618      	mov	r0, r3
 8014c30:	371c      	adds	r7, #28
 8014c32:	46bd      	mov	sp, r7
 8014c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c38:	4770      	bx	lr
 8014c3a:	bf00      	nop
 8014c3c:	08015afc 	.word	0x08015afc
 8014c40:	08015cf0 	.word	0x08015cf0

08014c44 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8014c44:	b580      	push	{r7, lr}
 8014c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8014c48:	2200      	movs	r2, #0
 8014c4a:	4913      	ldr	r1, [pc, #76]	; (8014c98 <MX_USB_DEVICE_Init+0x54>)
 8014c4c:	4813      	ldr	r0, [pc, #76]	; (8014c9c <MX_USB_DEVICE_Init+0x58>)
 8014c4e:	f7f9 ff06 	bl	800ea5e <USBD_Init>
 8014c52:	4603      	mov	r3, r0
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d001      	beq.n	8014c5c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014c58:	f7ec f8d0 	bl	8000dfc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8014c5c:	4910      	ldr	r1, [pc, #64]	; (8014ca0 <MX_USB_DEVICE_Init+0x5c>)
 8014c5e:	480f      	ldr	r0, [pc, #60]	; (8014c9c <MX_USB_DEVICE_Init+0x58>)
 8014c60:	f7f9 ff28 	bl	800eab4 <USBD_RegisterClass>
 8014c64:	4603      	mov	r3, r0
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d001      	beq.n	8014c6e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8014c6a:	f7ec f8c7 	bl	8000dfc <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8014c6e:	490d      	ldr	r1, [pc, #52]	; (8014ca4 <MX_USB_DEVICE_Init+0x60>)
 8014c70:	480a      	ldr	r0, [pc, #40]	; (8014c9c <MX_USB_DEVICE_Init+0x58>)
 8014c72:	f7f8 fecf 	bl	800da14 <USBD_MSC_RegisterStorage>
 8014c76:	4603      	mov	r3, r0
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d001      	beq.n	8014c80 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8014c7c:	f7ec f8be 	bl	8000dfc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8014c80:	4806      	ldr	r0, [pc, #24]	; (8014c9c <MX_USB_DEVICE_Init+0x58>)
 8014c82:	f7f9 ff31 	bl	800eae8 <USBD_Start>
 8014c86:	4603      	mov	r3, r0
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d001      	beq.n	8014c90 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8014c8c:	f7ec f8b6 	bl	8000dfc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8014c90:	f7ee fe3c 	bl	800390c <HAL_PWREx_EnableUSBVoltageDetector>
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014c94:	bf00      	nop
 8014c96:	bd80      	pop	{r7, pc}
 8014c98:	240000c0 	.word	0x240000c0
 8014c9c:	24007774 	.word	0x24007774
 8014ca0:	2400001c 	.word	0x2400001c
 8014ca4:	24000110 	.word	0x24000110

08014ca8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014ca8:	b480      	push	{r7}
 8014caa:	b083      	sub	sp, #12
 8014cac:	af00      	add	r7, sp, #0
 8014cae:	4603      	mov	r3, r0
 8014cb0:	6039      	str	r1, [r7, #0]
 8014cb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8014cb4:	683b      	ldr	r3, [r7, #0]
 8014cb6:	2212      	movs	r2, #18
 8014cb8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8014cba:	4b03      	ldr	r3, [pc, #12]	; (8014cc8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	370c      	adds	r7, #12
 8014cc0:	46bd      	mov	sp, r7
 8014cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cc6:	4770      	bx	lr
 8014cc8:	240000dc 	.word	0x240000dc

08014ccc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014ccc:	b480      	push	{r7}
 8014cce:	b083      	sub	sp, #12
 8014cd0:	af00      	add	r7, sp, #0
 8014cd2:	4603      	mov	r3, r0
 8014cd4:	6039      	str	r1, [r7, #0]
 8014cd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014cd8:	683b      	ldr	r3, [r7, #0]
 8014cda:	2204      	movs	r2, #4
 8014cdc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8014cde:	4b03      	ldr	r3, [pc, #12]	; (8014cec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8014ce0:	4618      	mov	r0, r3
 8014ce2:	370c      	adds	r7, #12
 8014ce4:	46bd      	mov	sp, r7
 8014ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cea:	4770      	bx	lr
 8014cec:	240000f0 	.word	0x240000f0

08014cf0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014cf0:	b580      	push	{r7, lr}
 8014cf2:	b082      	sub	sp, #8
 8014cf4:	af00      	add	r7, sp, #0
 8014cf6:	4603      	mov	r3, r0
 8014cf8:	6039      	str	r1, [r7, #0]
 8014cfa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014cfc:	79fb      	ldrb	r3, [r7, #7]
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d105      	bne.n	8014d0e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014d02:	683a      	ldr	r2, [r7, #0]
 8014d04:	4907      	ldr	r1, [pc, #28]	; (8014d24 <USBD_FS_ProductStrDescriptor+0x34>)
 8014d06:	4808      	ldr	r0, [pc, #32]	; (8014d28 <USBD_FS_ProductStrDescriptor+0x38>)
 8014d08:	f7fa feb0 	bl	800fa6c <USBD_GetString>
 8014d0c:	e004      	b.n	8014d18 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014d0e:	683a      	ldr	r2, [r7, #0]
 8014d10:	4904      	ldr	r1, [pc, #16]	; (8014d24 <USBD_FS_ProductStrDescriptor+0x34>)
 8014d12:	4805      	ldr	r0, [pc, #20]	; (8014d28 <USBD_FS_ProductStrDescriptor+0x38>)
 8014d14:	f7fa feaa 	bl	800fa6c <USBD_GetString>
  }
  return USBD_StrDesc;
 8014d18:	4b02      	ldr	r3, [pc, #8]	; (8014d24 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8014d1a:	4618      	mov	r0, r3
 8014d1c:	3708      	adds	r7, #8
 8014d1e:	46bd      	mov	sp, r7
 8014d20:	bd80      	pop	{r7, pc}
 8014d22:	bf00      	nop
 8014d24:	24007a38 	.word	0x24007a38
 8014d28:	080158ec 	.word	0x080158ec

08014d2c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014d2c:	b580      	push	{r7, lr}
 8014d2e:	b082      	sub	sp, #8
 8014d30:	af00      	add	r7, sp, #0
 8014d32:	4603      	mov	r3, r0
 8014d34:	6039      	str	r1, [r7, #0]
 8014d36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014d38:	683a      	ldr	r2, [r7, #0]
 8014d3a:	4904      	ldr	r1, [pc, #16]	; (8014d4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8014d3c:	4804      	ldr	r0, [pc, #16]	; (8014d50 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8014d3e:	f7fa fe95 	bl	800fa6c <USBD_GetString>
  return USBD_StrDesc;
 8014d42:	4b02      	ldr	r3, [pc, #8]	; (8014d4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8014d44:	4618      	mov	r0, r3
 8014d46:	3708      	adds	r7, #8
 8014d48:	46bd      	mov	sp, r7
 8014d4a:	bd80      	pop	{r7, pc}
 8014d4c:	24007a38 	.word	0x24007a38
 8014d50:	08015900 	.word	0x08015900

08014d54 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014d54:	b580      	push	{r7, lr}
 8014d56:	b082      	sub	sp, #8
 8014d58:	af00      	add	r7, sp, #0
 8014d5a:	4603      	mov	r3, r0
 8014d5c:	6039      	str	r1, [r7, #0]
 8014d5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014d60:	683b      	ldr	r3, [r7, #0]
 8014d62:	221a      	movs	r2, #26
 8014d64:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8014d66:	f000 f843 	bl	8014df0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8014d6a:	4b02      	ldr	r3, [pc, #8]	; (8014d74 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	3708      	adds	r7, #8
 8014d70:	46bd      	mov	sp, r7
 8014d72:	bd80      	pop	{r7, pc}
 8014d74:	240000f4 	.word	0x240000f4

08014d78 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014d78:	b580      	push	{r7, lr}
 8014d7a:	b082      	sub	sp, #8
 8014d7c:	af00      	add	r7, sp, #0
 8014d7e:	4603      	mov	r3, r0
 8014d80:	6039      	str	r1, [r7, #0]
 8014d82:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014d84:	79fb      	ldrb	r3, [r7, #7]
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d105      	bne.n	8014d96 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014d8a:	683a      	ldr	r2, [r7, #0]
 8014d8c:	4907      	ldr	r1, [pc, #28]	; (8014dac <USBD_FS_ConfigStrDescriptor+0x34>)
 8014d8e:	4808      	ldr	r0, [pc, #32]	; (8014db0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014d90:	f7fa fe6c 	bl	800fa6c <USBD_GetString>
 8014d94:	e004      	b.n	8014da0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014d96:	683a      	ldr	r2, [r7, #0]
 8014d98:	4904      	ldr	r1, [pc, #16]	; (8014dac <USBD_FS_ConfigStrDescriptor+0x34>)
 8014d9a:	4805      	ldr	r0, [pc, #20]	; (8014db0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014d9c:	f7fa fe66 	bl	800fa6c <USBD_GetString>
  }
  return USBD_StrDesc;
 8014da0:	4b02      	ldr	r3, [pc, #8]	; (8014dac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8014da2:	4618      	mov	r0, r3
 8014da4:	3708      	adds	r7, #8
 8014da6:	46bd      	mov	sp, r7
 8014da8:	bd80      	pop	{r7, pc}
 8014daa:	bf00      	nop
 8014dac:	24007a38 	.word	0x24007a38
 8014db0:	08015914 	.word	0x08015914

08014db4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014db4:	b580      	push	{r7, lr}
 8014db6:	b082      	sub	sp, #8
 8014db8:	af00      	add	r7, sp, #0
 8014dba:	4603      	mov	r3, r0
 8014dbc:	6039      	str	r1, [r7, #0]
 8014dbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014dc0:	79fb      	ldrb	r3, [r7, #7]
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d105      	bne.n	8014dd2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014dc6:	683a      	ldr	r2, [r7, #0]
 8014dc8:	4907      	ldr	r1, [pc, #28]	; (8014de8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014dca:	4808      	ldr	r0, [pc, #32]	; (8014dec <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014dcc:	f7fa fe4e 	bl	800fa6c <USBD_GetString>
 8014dd0:	e004      	b.n	8014ddc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014dd2:	683a      	ldr	r2, [r7, #0]
 8014dd4:	4904      	ldr	r1, [pc, #16]	; (8014de8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014dd6:	4805      	ldr	r0, [pc, #20]	; (8014dec <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014dd8:	f7fa fe48 	bl	800fa6c <USBD_GetString>
  }
  return USBD_StrDesc;
 8014ddc:	4b02      	ldr	r3, [pc, #8]	; (8014de8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8014dde:	4618      	mov	r0, r3
 8014de0:	3708      	adds	r7, #8
 8014de2:	46bd      	mov	sp, r7
 8014de4:	bd80      	pop	{r7, pc}
 8014de6:	bf00      	nop
 8014de8:	24007a38 	.word	0x24007a38
 8014dec:	08015920 	.word	0x08015920

08014df0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8014df0:	b580      	push	{r7, lr}
 8014df2:	b084      	sub	sp, #16
 8014df4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8014df6:	4b0f      	ldr	r3, [pc, #60]	; (8014e34 <Get_SerialNum+0x44>)
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014dfc:	4b0e      	ldr	r3, [pc, #56]	; (8014e38 <Get_SerialNum+0x48>)
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8014e02:	4b0e      	ldr	r3, [pc, #56]	; (8014e3c <Get_SerialNum+0x4c>)
 8014e04:	681b      	ldr	r3, [r3, #0]
 8014e06:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014e08:	68fa      	ldr	r2, [r7, #12]
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	4413      	add	r3, r2
 8014e0e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d009      	beq.n	8014e2a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014e16:	2208      	movs	r2, #8
 8014e18:	4909      	ldr	r1, [pc, #36]	; (8014e40 <Get_SerialNum+0x50>)
 8014e1a:	68f8      	ldr	r0, [r7, #12]
 8014e1c:	f000 f814 	bl	8014e48 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8014e20:	2204      	movs	r2, #4
 8014e22:	4908      	ldr	r1, [pc, #32]	; (8014e44 <Get_SerialNum+0x54>)
 8014e24:	68b8      	ldr	r0, [r7, #8]
 8014e26:	f000 f80f 	bl	8014e48 <IntToUnicode>
  }
}
 8014e2a:	bf00      	nop
 8014e2c:	3710      	adds	r7, #16
 8014e2e:	46bd      	mov	sp, r7
 8014e30:	bd80      	pop	{r7, pc}
 8014e32:	bf00      	nop
 8014e34:	1ff1e800 	.word	0x1ff1e800
 8014e38:	1ff1e804 	.word	0x1ff1e804
 8014e3c:	1ff1e808 	.word	0x1ff1e808
 8014e40:	240000f6 	.word	0x240000f6
 8014e44:	24000106 	.word	0x24000106

08014e48 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014e48:	b480      	push	{r7}
 8014e4a:	b087      	sub	sp, #28
 8014e4c:	af00      	add	r7, sp, #0
 8014e4e:	60f8      	str	r0, [r7, #12]
 8014e50:	60b9      	str	r1, [r7, #8]
 8014e52:	4613      	mov	r3, r2
 8014e54:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014e56:	2300      	movs	r3, #0
 8014e58:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014e5a:	2300      	movs	r3, #0
 8014e5c:	75fb      	strb	r3, [r7, #23]
 8014e5e:	e027      	b.n	8014eb0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	0f1b      	lsrs	r3, r3, #28
 8014e64:	2b09      	cmp	r3, #9
 8014e66:	d80b      	bhi.n	8014e80 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	0f1b      	lsrs	r3, r3, #28
 8014e6c:	b2da      	uxtb	r2, r3
 8014e6e:	7dfb      	ldrb	r3, [r7, #23]
 8014e70:	005b      	lsls	r3, r3, #1
 8014e72:	4619      	mov	r1, r3
 8014e74:	68bb      	ldr	r3, [r7, #8]
 8014e76:	440b      	add	r3, r1
 8014e78:	3230      	adds	r2, #48	; 0x30
 8014e7a:	b2d2      	uxtb	r2, r2
 8014e7c:	701a      	strb	r2, [r3, #0]
 8014e7e:	e00a      	b.n	8014e96 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014e80:	68fb      	ldr	r3, [r7, #12]
 8014e82:	0f1b      	lsrs	r3, r3, #28
 8014e84:	b2da      	uxtb	r2, r3
 8014e86:	7dfb      	ldrb	r3, [r7, #23]
 8014e88:	005b      	lsls	r3, r3, #1
 8014e8a:	4619      	mov	r1, r3
 8014e8c:	68bb      	ldr	r3, [r7, #8]
 8014e8e:	440b      	add	r3, r1
 8014e90:	3237      	adds	r2, #55	; 0x37
 8014e92:	b2d2      	uxtb	r2, r2
 8014e94:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8014e96:	68fb      	ldr	r3, [r7, #12]
 8014e98:	011b      	lsls	r3, r3, #4
 8014e9a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014e9c:	7dfb      	ldrb	r3, [r7, #23]
 8014e9e:	005b      	lsls	r3, r3, #1
 8014ea0:	3301      	adds	r3, #1
 8014ea2:	68ba      	ldr	r2, [r7, #8]
 8014ea4:	4413      	add	r3, r2
 8014ea6:	2200      	movs	r2, #0
 8014ea8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014eaa:	7dfb      	ldrb	r3, [r7, #23]
 8014eac:	3301      	adds	r3, #1
 8014eae:	75fb      	strb	r3, [r7, #23]
 8014eb0:	7dfa      	ldrb	r2, [r7, #23]
 8014eb2:	79fb      	ldrb	r3, [r7, #7]
 8014eb4:	429a      	cmp	r2, r3
 8014eb6:	d3d3      	bcc.n	8014e60 <IntToUnicode+0x18>
  }
}
 8014eb8:	bf00      	nop
 8014eba:	371c      	adds	r7, #28
 8014ebc:	46bd      	mov	sp, r7
 8014ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ec2:	4770      	bx	lr

08014ec4 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8014ec4:	b480      	push	{r7}
 8014ec6:	b083      	sub	sp, #12
 8014ec8:	af00      	add	r7, sp, #0
 8014eca:	4603      	mov	r3, r0
 8014ecc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8014ece:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8014ed0:	4618      	mov	r0, r3
 8014ed2:	370c      	adds	r7, #12
 8014ed4:	46bd      	mov	sp, r7
 8014ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eda:	4770      	bx	lr

08014edc <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8014edc:	b580      	push	{r7, lr}
 8014ede:	b084      	sub	sp, #16
 8014ee0:	af00      	add	r7, sp, #0
 8014ee2:	4603      	mov	r3, r0
 8014ee4:	60b9      	str	r1, [r7, #8]
 8014ee6:	607a      	str	r2, [r7, #4]
 8014ee8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  if(HAL_SD_GetCardInfo(&hsd1,&SDCardInfo)==HAL_OK){
 8014eea:	490b      	ldr	r1, [pc, #44]	; (8014f18 <STORAGE_GetCapacity_FS+0x3c>)
 8014eec:	480b      	ldr	r0, [pc, #44]	; (8014f1c <STORAGE_GetCapacity_FS+0x40>)
 8014eee:	f7f2 fd0b 	bl	8007908 <HAL_SD_GetCardInfo>
 8014ef2:	4603      	mov	r3, r0
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d10a      	bne.n	8014f0e <STORAGE_GetCapacity_FS+0x32>
  *block_num  = SDCardInfo.LogBlockNbr;
 8014ef8:	4b07      	ldr	r3, [pc, #28]	; (8014f18 <STORAGE_GetCapacity_FS+0x3c>)
 8014efa:	699a      	ldr	r2, [r3, #24]
 8014efc:	68bb      	ldr	r3, [r7, #8]
 8014efe:	601a      	str	r2, [r3, #0]
  *block_size = SDCardInfo.LogBlockSize;
 8014f00:	4b05      	ldr	r3, [pc, #20]	; (8014f18 <STORAGE_GetCapacity_FS+0x3c>)
 8014f02:	69db      	ldr	r3, [r3, #28]
 8014f04:	b29a      	uxth	r2, r3
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	e7ff      	b.n	8014f0e <STORAGE_GetCapacity_FS+0x32>
  }
  /* USER CODE END 3 */
}
 8014f0e:	4618      	mov	r0, r3
 8014f10:	3710      	adds	r7, #16
 8014f12:	46bd      	mov	sp, r7
 8014f14:	bd80      	pop	{r7, pc}
 8014f16:	bf00      	nop
 8014f18:	24002538 	.word	0x24002538
 8014f1c:	24001410 	.word	0x24001410

08014f20 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8014f20:	b480      	push	{r7}
 8014f22:	b083      	sub	sp, #12
 8014f24:	af00      	add	r7, sp, #0
 8014f26:	4603      	mov	r3, r0
 8014f28:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014f2a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8014f2c:	4618      	mov	r0, r3
 8014f2e:	370c      	adds	r7, #12
 8014f30:	46bd      	mov	sp, r7
 8014f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f36:	4770      	bx	lr

08014f38 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8014f38:	b480      	push	{r7}
 8014f3a:	b083      	sub	sp, #12
 8014f3c:	af00      	add	r7, sp, #0
 8014f3e:	4603      	mov	r3, r0
 8014f40:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8014f42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014f44:	4618      	mov	r0, r3
 8014f46:	370c      	adds	r7, #12
 8014f48:	46bd      	mov	sp, r7
 8014f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f4e:	4770      	bx	lr

08014f50 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8014f50:	b580      	push	{r7, lr}
 8014f52:	b086      	sub	sp, #24
 8014f54:	af02      	add	r7, sp, #8
 8014f56:	60b9      	str	r1, [r7, #8]
 8014f58:	607a      	str	r2, [r7, #4]
 8014f5a:	461a      	mov	r2, r3
 8014f5c:	4603      	mov	r3, r0
 8014f5e:	73fb      	strb	r3, [r7, #15]
 8014f60:	4613      	mov	r3, r2
 8014f62:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
 if(HAL_SD_ReadBlocks(&hsd1,buf,blk_addr,blk_len,10)==HAL_OK){
 8014f64:	89ba      	ldrh	r2, [r7, #12]
 8014f66:	230a      	movs	r3, #10
 8014f68:	9300      	str	r3, [sp, #0]
 8014f6a:	4613      	mov	r3, r2
 8014f6c:	687a      	ldr	r2, [r7, #4]
 8014f6e:	68b9      	ldr	r1, [r7, #8]
 8014f70:	4805      	ldr	r0, [pc, #20]	; (8014f88 <STORAGE_Read_FS+0x38>)
 8014f72:	f7f1 ff4b 	bl	8006e0c <HAL_SD_ReadBlocks>
 8014f76:	4603      	mov	r3, r0
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d101      	bne.n	8014f80 <STORAGE_Read_FS+0x30>

  return (USBD_OK);
 8014f7c:	2300      	movs	r3, #0
 8014f7e:	e7ff      	b.n	8014f80 <STORAGE_Read_FS+0x30>
 }
  /* USER CODE END 6 */
}
 8014f80:	4618      	mov	r0, r3
 8014f82:	3710      	adds	r7, #16
 8014f84:	46bd      	mov	sp, r7
 8014f86:	bd80      	pop	{r7, pc}
 8014f88:	24001410 	.word	0x24001410

08014f8c <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8014f8c:	b580      	push	{r7, lr}
 8014f8e:	b086      	sub	sp, #24
 8014f90:	af02      	add	r7, sp, #8
 8014f92:	60b9      	str	r1, [r7, #8]
 8014f94:	607a      	str	r2, [r7, #4]
 8014f96:	461a      	mov	r2, r3
 8014f98:	4603      	mov	r3, r0
 8014f9a:	73fb      	strb	r3, [r7, #15]
 8014f9c:	4613      	mov	r3, r2
 8014f9e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	if(HAL_SD_WriteBlocks(&hsd1,buf,blk_addr,blk_len,10)==HAL_OK){
 8014fa0:	89ba      	ldrh	r2, [r7, #12]
 8014fa2:	230a      	movs	r3, #10
 8014fa4:	9300      	str	r3, [sp, #0]
 8014fa6:	4613      	mov	r3, r2
 8014fa8:	687a      	ldr	r2, [r7, #4]
 8014faa:	68b9      	ldr	r1, [r7, #8]
 8014fac:	4805      	ldr	r0, [pc, #20]	; (8014fc4 <STORAGE_Write_FS+0x38>)
 8014fae:	f7f2 f8b7 	bl	8007120 <HAL_SD_WriteBlocks>
 8014fb2:	4603      	mov	r3, r0
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d101      	bne.n	8014fbc <STORAGE_Write_FS+0x30>

	  return (USBD_OK);
 8014fb8:	2300      	movs	r3, #0
 8014fba:	e7ff      	b.n	8014fbc <STORAGE_Write_FS+0x30>
	 }
  /* USER CODE END 7 */
}
 8014fbc:	4618      	mov	r0, r3
 8014fbe:	3710      	adds	r7, #16
 8014fc0:	46bd      	mov	sp, r7
 8014fc2:	bd80      	pop	{r7, pc}
 8014fc4:	24001410 	.word	0x24001410

08014fc8 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8014fc8:	b480      	push	{r7}
 8014fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8014fcc:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8014fce:	4618      	mov	r0, r3
 8014fd0:	46bd      	mov	sp, r7
 8014fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fd6:	4770      	bx	lr

08014fd8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014fd8:	b580      	push	{r7, lr}
 8014fda:	b08a      	sub	sp, #40	; 0x28
 8014fdc:	af00      	add	r7, sp, #0
 8014fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014fe0:	f107 0314 	add.w	r3, r7, #20
 8014fe4:	2200      	movs	r2, #0
 8014fe6:	601a      	str	r2, [r3, #0]
 8014fe8:	605a      	str	r2, [r3, #4]
 8014fea:	609a      	str	r2, [r3, #8]
 8014fec:	60da      	str	r2, [r3, #12]
 8014fee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	4a1e      	ldr	r2, [pc, #120]	; (8015070 <HAL_PCD_MspInit+0x98>)
 8014ff6:	4293      	cmp	r3, r2
 8014ff8:	d136      	bne.n	8015068 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014ffa:	4b1e      	ldr	r3, [pc, #120]	; (8015074 <HAL_PCD_MspInit+0x9c>)
 8014ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015000:	4a1c      	ldr	r2, [pc, #112]	; (8015074 <HAL_PCD_MspInit+0x9c>)
 8015002:	f043 0301 	orr.w	r3, r3, #1
 8015006:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801500a:	4b1a      	ldr	r3, [pc, #104]	; (8015074 <HAL_PCD_MspInit+0x9c>)
 801500c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015010:	f003 0301 	and.w	r3, r3, #1
 8015014:	613b      	str	r3, [r7, #16]
 8015016:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8015018:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 801501c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801501e:	2302      	movs	r3, #2
 8015020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015022:	2300      	movs	r3, #0
 8015024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015026:	2300      	movs	r3, #0
 8015028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801502a:	230a      	movs	r3, #10
 801502c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801502e:	f107 0314 	add.w	r3, r7, #20
 8015032:	4619      	mov	r1, r3
 8015034:	4810      	ldr	r0, [pc, #64]	; (8015078 <HAL_PCD_MspInit+0xa0>)
 8015036:	f7ec ffd5 	bl	8001fe4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801503a:	4b0e      	ldr	r3, [pc, #56]	; (8015074 <HAL_PCD_MspInit+0x9c>)
 801503c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8015040:	4a0c      	ldr	r2, [pc, #48]	; (8015074 <HAL_PCD_MspInit+0x9c>)
 8015042:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8015046:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801504a:	4b0a      	ldr	r3, [pc, #40]	; (8015074 <HAL_PCD_MspInit+0x9c>)
 801504c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8015050:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8015054:	60fb      	str	r3, [r7, #12]
 8015056:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8015058:	2200      	movs	r2, #0
 801505a:	2100      	movs	r1, #0
 801505c:	2065      	movs	r0, #101	; 0x65
 801505e:	f7ec fb76 	bl	800174e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015062:	2065      	movs	r0, #101	; 0x65
 8015064:	f7ec fb8d 	bl	8001782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015068:	bf00      	nop
 801506a:	3728      	adds	r7, #40	; 0x28
 801506c:	46bd      	mov	sp, r7
 801506e:	bd80      	pop	{r7, pc}
 8015070:	40080000 	.word	0x40080000
 8015074:	58024400 	.word	0x58024400
 8015078:	58020000 	.word	0x58020000

0801507c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801507c:	b580      	push	{r7, lr}
 801507e:	b082      	sub	sp, #8
 8015080:	af00      	add	r7, sp, #0
 8015082:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8015090:	4619      	mov	r1, r3
 8015092:	4610      	mov	r0, r2
 8015094:	f7f9 fd87 	bl	800eba6 <USBD_LL_SetupStage>
}
 8015098:	bf00      	nop
 801509a:	3708      	adds	r7, #8
 801509c:	46bd      	mov	sp, r7
 801509e:	bd80      	pop	{r7, pc}

080150a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80150a0:	b580      	push	{r7, lr}
 80150a2:	b082      	sub	sp, #8
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	6078      	str	r0, [r7, #4]
 80150a8:	460b      	mov	r3, r1
 80150aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80150b2:	78fa      	ldrb	r2, [r7, #3]
 80150b4:	6879      	ldr	r1, [r7, #4]
 80150b6:	4613      	mov	r3, r2
 80150b8:	00db      	lsls	r3, r3, #3
 80150ba:	1a9b      	subs	r3, r3, r2
 80150bc:	009b      	lsls	r3, r3, #2
 80150be:	440b      	add	r3, r1
 80150c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80150c4:	681a      	ldr	r2, [r3, #0]
 80150c6:	78fb      	ldrb	r3, [r7, #3]
 80150c8:	4619      	mov	r1, r3
 80150ca:	f7f9 fdb7 	bl	800ec3c <USBD_LL_DataOutStage>
}
 80150ce:	bf00      	nop
 80150d0:	3708      	adds	r7, #8
 80150d2:	46bd      	mov	sp, r7
 80150d4:	bd80      	pop	{r7, pc}

080150d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80150d6:	b580      	push	{r7, lr}
 80150d8:	b082      	sub	sp, #8
 80150da:	af00      	add	r7, sp, #0
 80150dc:	6078      	str	r0, [r7, #4]
 80150de:	460b      	mov	r3, r1
 80150e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80150e8:	78fa      	ldrb	r2, [r7, #3]
 80150ea:	6879      	ldr	r1, [r7, #4]
 80150ec:	4613      	mov	r3, r2
 80150ee:	00db      	lsls	r3, r3, #3
 80150f0:	1a9b      	subs	r3, r3, r2
 80150f2:	009b      	lsls	r3, r3, #2
 80150f4:	440b      	add	r3, r1
 80150f6:	3348      	adds	r3, #72	; 0x48
 80150f8:	681a      	ldr	r2, [r3, #0]
 80150fa:	78fb      	ldrb	r3, [r7, #3]
 80150fc:	4619      	mov	r1, r3
 80150fe:	f7f9 fe0e 	bl	800ed1e <USBD_LL_DataInStage>
}
 8015102:	bf00      	nop
 8015104:	3708      	adds	r7, #8
 8015106:	46bd      	mov	sp, r7
 8015108:	bd80      	pop	{r7, pc}

0801510a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801510a:	b580      	push	{r7, lr}
 801510c:	b082      	sub	sp, #8
 801510e:	af00      	add	r7, sp, #0
 8015110:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015118:	4618      	mov	r0, r3
 801511a:	f7f9 ff21 	bl	800ef60 <USBD_LL_SOF>
}
 801511e:	bf00      	nop
 8015120:	3708      	adds	r7, #8
 8015122:	46bd      	mov	sp, r7
 8015124:	bd80      	pop	{r7, pc}

08015126 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8015126:	b580      	push	{r7, lr}
 8015128:	b084      	sub	sp, #16
 801512a:	af00      	add	r7, sp, #0
 801512c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801512e:	2301      	movs	r3, #1
 8015130:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	68db      	ldr	r3, [r3, #12]
 8015136:	2b00      	cmp	r3, #0
 8015138:	d102      	bne.n	8015140 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801513a:	2300      	movs	r3, #0
 801513c:	73fb      	strb	r3, [r7, #15]
 801513e:	e008      	b.n	8015152 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	68db      	ldr	r3, [r3, #12]
 8015144:	2b02      	cmp	r3, #2
 8015146:	d102      	bne.n	801514e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015148:	2301      	movs	r3, #1
 801514a:	73fb      	strb	r3, [r7, #15]
 801514c:	e001      	b.n	8015152 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801514e:	f7eb fe55 	bl	8000dfc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015158:	7bfa      	ldrb	r2, [r7, #15]
 801515a:	4611      	mov	r1, r2
 801515c:	4618      	mov	r0, r3
 801515e:	f7f9 fec4 	bl	800eeea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015168:	4618      	mov	r0, r3
 801516a:	f7f9 fe7d 	bl	800ee68 <USBD_LL_Reset>
}
 801516e:	bf00      	nop
 8015170:	3710      	adds	r7, #16
 8015172:	46bd      	mov	sp, r7
 8015174:	bd80      	pop	{r7, pc}
	...

08015178 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015178:	b580      	push	{r7, lr}
 801517a:	b082      	sub	sp, #8
 801517c:	af00      	add	r7, sp, #0
 801517e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015186:	4618      	mov	r0, r3
 8015188:	f7f9 febf 	bl	800ef0a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	681b      	ldr	r3, [r3, #0]
 8015190:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015194:	681b      	ldr	r3, [r3, #0]
 8015196:	687a      	ldr	r2, [r7, #4]
 8015198:	6812      	ldr	r2, [r2, #0]
 801519a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801519e:	f043 0301 	orr.w	r3, r3, #1
 80151a2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	6a1b      	ldr	r3, [r3, #32]
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d005      	beq.n	80151b8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80151ac:	4b04      	ldr	r3, [pc, #16]	; (80151c0 <HAL_PCD_SuspendCallback+0x48>)
 80151ae:	691b      	ldr	r3, [r3, #16]
 80151b0:	4a03      	ldr	r2, [pc, #12]	; (80151c0 <HAL_PCD_SuspendCallback+0x48>)
 80151b2:	f043 0306 	orr.w	r3, r3, #6
 80151b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80151b8:	bf00      	nop
 80151ba:	3708      	adds	r7, #8
 80151bc:	46bd      	mov	sp, r7
 80151be:	bd80      	pop	{r7, pc}
 80151c0:	e000ed00 	.word	0xe000ed00

080151c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80151c4:	b580      	push	{r7, lr}
 80151c6:	b082      	sub	sp, #8
 80151c8:	af00      	add	r7, sp, #0
 80151ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80151d2:	4618      	mov	r0, r3
 80151d4:	f7f9 feae 	bl	800ef34 <USBD_LL_Resume>
}
 80151d8:	bf00      	nop
 80151da:	3708      	adds	r7, #8
 80151dc:	46bd      	mov	sp, r7
 80151de:	bd80      	pop	{r7, pc}

080151e0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80151e0:	b580      	push	{r7, lr}
 80151e2:	b082      	sub	sp, #8
 80151e4:	af00      	add	r7, sp, #0
 80151e6:	6078      	str	r0, [r7, #4]
 80151e8:	460b      	mov	r3, r1
 80151ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80151f2:	78fa      	ldrb	r2, [r7, #3]
 80151f4:	4611      	mov	r1, r2
 80151f6:	4618      	mov	r0, r3
 80151f8:	f7f9 fed9 	bl	800efae <USBD_LL_IsoOUTIncomplete>
}
 80151fc:	bf00      	nop
 80151fe:	3708      	adds	r7, #8
 8015200:	46bd      	mov	sp, r7
 8015202:	bd80      	pop	{r7, pc}

08015204 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015204:	b580      	push	{r7, lr}
 8015206:	b082      	sub	sp, #8
 8015208:	af00      	add	r7, sp, #0
 801520a:	6078      	str	r0, [r7, #4]
 801520c:	460b      	mov	r3, r1
 801520e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015216:	78fa      	ldrb	r2, [r7, #3]
 8015218:	4611      	mov	r1, r2
 801521a:	4618      	mov	r0, r3
 801521c:	f7f9 feba 	bl	800ef94 <USBD_LL_IsoINIncomplete>
}
 8015220:	bf00      	nop
 8015222:	3708      	adds	r7, #8
 8015224:	46bd      	mov	sp, r7
 8015226:	bd80      	pop	{r7, pc}

08015228 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015228:	b580      	push	{r7, lr}
 801522a:	b082      	sub	sp, #8
 801522c:	af00      	add	r7, sp, #0
 801522e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015236:	4618      	mov	r0, r3
 8015238:	f7f9 fec6 	bl	800efc8 <USBD_LL_DevConnected>
}
 801523c:	bf00      	nop
 801523e:	3708      	adds	r7, #8
 8015240:	46bd      	mov	sp, r7
 8015242:	bd80      	pop	{r7, pc}

08015244 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015244:	b580      	push	{r7, lr}
 8015246:	b082      	sub	sp, #8
 8015248:	af00      	add	r7, sp, #0
 801524a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015252:	4618      	mov	r0, r3
 8015254:	f7f9 fec3 	bl	800efde <USBD_LL_DevDisconnected>
}
 8015258:	bf00      	nop
 801525a:	3708      	adds	r7, #8
 801525c:	46bd      	mov	sp, r7
 801525e:	bd80      	pop	{r7, pc}

08015260 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015260:	b580      	push	{r7, lr}
 8015262:	b082      	sub	sp, #8
 8015264:	af00      	add	r7, sp, #0
 8015266:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	781b      	ldrb	r3, [r3, #0]
 801526c:	2b00      	cmp	r3, #0
 801526e:	d13e      	bne.n	80152ee <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015270:	4a21      	ldr	r2, [pc, #132]	; (80152f8 <USBD_LL_Init+0x98>)
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	4a1f      	ldr	r2, [pc, #124]	; (80152f8 <USBD_LL_Init+0x98>)
 801527c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015280:	4b1d      	ldr	r3, [pc, #116]	; (80152f8 <USBD_LL_Init+0x98>)
 8015282:	4a1e      	ldr	r2, [pc, #120]	; (80152fc <USBD_LL_Init+0x9c>)
 8015284:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8015286:	4b1c      	ldr	r3, [pc, #112]	; (80152f8 <USBD_LL_Init+0x98>)
 8015288:	2209      	movs	r2, #9
 801528a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801528c:	4b1a      	ldr	r3, [pc, #104]	; (80152f8 <USBD_LL_Init+0x98>)
 801528e:	2202      	movs	r2, #2
 8015290:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015292:	4b19      	ldr	r3, [pc, #100]	; (80152f8 <USBD_LL_Init+0x98>)
 8015294:	2200      	movs	r2, #0
 8015296:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015298:	4b17      	ldr	r3, [pc, #92]	; (80152f8 <USBD_LL_Init+0x98>)
 801529a:	2202      	movs	r2, #2
 801529c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801529e:	4b16      	ldr	r3, [pc, #88]	; (80152f8 <USBD_LL_Init+0x98>)
 80152a0:	2200      	movs	r2, #0
 80152a2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80152a4:	4b14      	ldr	r3, [pc, #80]	; (80152f8 <USBD_LL_Init+0x98>)
 80152a6:	2200      	movs	r2, #0
 80152a8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80152aa:	4b13      	ldr	r3, [pc, #76]	; (80152f8 <USBD_LL_Init+0x98>)
 80152ac:	2200      	movs	r2, #0
 80152ae:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80152b0:	4b11      	ldr	r3, [pc, #68]	; (80152f8 <USBD_LL_Init+0x98>)
 80152b2:	2200      	movs	r2, #0
 80152b4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80152b6:	4b10      	ldr	r3, [pc, #64]	; (80152f8 <USBD_LL_Init+0x98>)
 80152b8:	2200      	movs	r2, #0
 80152ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80152bc:	4b0e      	ldr	r3, [pc, #56]	; (80152f8 <USBD_LL_Init+0x98>)
 80152be:	2200      	movs	r2, #0
 80152c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80152c2:	480d      	ldr	r0, [pc, #52]	; (80152f8 <USBD_LL_Init+0x98>)
 80152c4:	f7ed f8af 	bl	8002426 <HAL_PCD_Init>
 80152c8:	4603      	mov	r3, r0
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d001      	beq.n	80152d2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80152ce:	f7eb fd95 	bl	8000dfc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80152d2:	2180      	movs	r1, #128	; 0x80
 80152d4:	4808      	ldr	r0, [pc, #32]	; (80152f8 <USBD_LL_Init+0x98>)
 80152d6:	f7ee fa9e 	bl	8003816 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80152da:	2240      	movs	r2, #64	; 0x40
 80152dc:	2100      	movs	r1, #0
 80152de:	4806      	ldr	r0, [pc, #24]	; (80152f8 <USBD_LL_Init+0x98>)
 80152e0:	f7ee fa52 	bl	8003788 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80152e4:	2280      	movs	r2, #128	; 0x80
 80152e6:	2101      	movs	r1, #1
 80152e8:	4803      	ldr	r0, [pc, #12]	; (80152f8 <USBD_LL_Init+0x98>)
 80152ea:	f7ee fa4d 	bl	8003788 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80152ee:	2300      	movs	r3, #0
}
 80152f0:	4618      	mov	r0, r3
 80152f2:	3708      	adds	r7, #8
 80152f4:	46bd      	mov	sp, r7
 80152f6:	bd80      	pop	{r7, pc}
 80152f8:	24007c38 	.word	0x24007c38
 80152fc:	40080000 	.word	0x40080000

08015300 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015300:	b580      	push	{r7, lr}
 8015302:	b084      	sub	sp, #16
 8015304:	af00      	add	r7, sp, #0
 8015306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015308:	2300      	movs	r3, #0
 801530a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801530c:	2300      	movs	r3, #0
 801530e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015316:	4618      	mov	r0, r3
 8015318:	f7ed f9a9 	bl	800266e <HAL_PCD_Start>
 801531c:	4603      	mov	r3, r0
 801531e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8015320:	7bfb      	ldrb	r3, [r7, #15]
 8015322:	4618      	mov	r0, r3
 8015324:	f000 f968 	bl	80155f8 <USBD_Get_USB_Status>
 8015328:	4603      	mov	r3, r0
 801532a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801532c:	7bbb      	ldrb	r3, [r7, #14]
}
 801532e:	4618      	mov	r0, r3
 8015330:	3710      	adds	r7, #16
 8015332:	46bd      	mov	sp, r7
 8015334:	bd80      	pop	{r7, pc}

08015336 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8015336:	b580      	push	{r7, lr}
 8015338:	b084      	sub	sp, #16
 801533a:	af00      	add	r7, sp, #0
 801533c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801533e:	2300      	movs	r3, #0
 8015340:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015342:	2300      	movs	r3, #0
 8015344:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801534c:	4618      	mov	r0, r3
 801534e:	f7ed f9c1 	bl	80026d4 <HAL_PCD_Stop>
 8015352:	4603      	mov	r3, r0
 8015354:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8015356:	7bfb      	ldrb	r3, [r7, #15]
 8015358:	4618      	mov	r0, r3
 801535a:	f000 f94d 	bl	80155f8 <USBD_Get_USB_Status>
 801535e:	4603      	mov	r3, r0
 8015360:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8015362:	7bbb      	ldrb	r3, [r7, #14]
}
 8015364:	4618      	mov	r0, r3
 8015366:	3710      	adds	r7, #16
 8015368:	46bd      	mov	sp, r7
 801536a:	bd80      	pop	{r7, pc}

0801536c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801536c:	b580      	push	{r7, lr}
 801536e:	b084      	sub	sp, #16
 8015370:	af00      	add	r7, sp, #0
 8015372:	6078      	str	r0, [r7, #4]
 8015374:	4608      	mov	r0, r1
 8015376:	4611      	mov	r1, r2
 8015378:	461a      	mov	r2, r3
 801537a:	4603      	mov	r3, r0
 801537c:	70fb      	strb	r3, [r7, #3]
 801537e:	460b      	mov	r3, r1
 8015380:	70bb      	strb	r3, [r7, #2]
 8015382:	4613      	mov	r3, r2
 8015384:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015386:	2300      	movs	r3, #0
 8015388:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801538a:	2300      	movs	r3, #0
 801538c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8015394:	78bb      	ldrb	r3, [r7, #2]
 8015396:	883a      	ldrh	r2, [r7, #0]
 8015398:	78f9      	ldrb	r1, [r7, #3]
 801539a:	f7ed fdcf 	bl	8002f3c <HAL_PCD_EP_Open>
 801539e:	4603      	mov	r3, r0
 80153a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80153a2:	7bfb      	ldrb	r3, [r7, #15]
 80153a4:	4618      	mov	r0, r3
 80153a6:	f000 f927 	bl	80155f8 <USBD_Get_USB_Status>
 80153aa:	4603      	mov	r3, r0
 80153ac:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80153ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80153b0:	4618      	mov	r0, r3
 80153b2:	3710      	adds	r7, #16
 80153b4:	46bd      	mov	sp, r7
 80153b6:	bd80      	pop	{r7, pc}

080153b8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80153b8:	b580      	push	{r7, lr}
 80153ba:	b084      	sub	sp, #16
 80153bc:	af00      	add	r7, sp, #0
 80153be:	6078      	str	r0, [r7, #4]
 80153c0:	460b      	mov	r3, r1
 80153c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80153c4:	2300      	movs	r3, #0
 80153c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80153c8:	2300      	movs	r3, #0
 80153ca:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80153d2:	78fa      	ldrb	r2, [r7, #3]
 80153d4:	4611      	mov	r1, r2
 80153d6:	4618      	mov	r0, r3
 80153d8:	f7ed fe18 	bl	800300c <HAL_PCD_EP_Close>
 80153dc:	4603      	mov	r3, r0
 80153de:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 80153e0:	7bfb      	ldrb	r3, [r7, #15]
 80153e2:	4618      	mov	r0, r3
 80153e4:	f000 f908 	bl	80155f8 <USBD_Get_USB_Status>
 80153e8:	4603      	mov	r3, r0
 80153ea:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80153ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80153ee:	4618      	mov	r0, r3
 80153f0:	3710      	adds	r7, #16
 80153f2:	46bd      	mov	sp, r7
 80153f4:	bd80      	pop	{r7, pc}

080153f6 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80153f6:	b580      	push	{r7, lr}
 80153f8:	b084      	sub	sp, #16
 80153fa:	af00      	add	r7, sp, #0
 80153fc:	6078      	str	r0, [r7, #4]
 80153fe:	460b      	mov	r3, r1
 8015400:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015402:	2300      	movs	r3, #0
 8015404:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015406:	2300      	movs	r3, #0
 8015408:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015410:	78fa      	ldrb	r2, [r7, #3]
 8015412:	4611      	mov	r1, r2
 8015414:	4618      	mov	r0, r3
 8015416:	f7ed ffaa 	bl	800336e <HAL_PCD_EP_Flush>
 801541a:	4603      	mov	r3, r0
 801541c:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 801541e:	7bfb      	ldrb	r3, [r7, #15]
 8015420:	4618      	mov	r0, r3
 8015422:	f000 f8e9 	bl	80155f8 <USBD_Get_USB_Status>
 8015426:	4603      	mov	r3, r0
 8015428:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 801542a:	7bbb      	ldrb	r3, [r7, #14]
}
 801542c:	4618      	mov	r0, r3
 801542e:	3710      	adds	r7, #16
 8015430:	46bd      	mov	sp, r7
 8015432:	bd80      	pop	{r7, pc}

08015434 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015434:	b580      	push	{r7, lr}
 8015436:	b084      	sub	sp, #16
 8015438:	af00      	add	r7, sp, #0
 801543a:	6078      	str	r0, [r7, #4]
 801543c:	460b      	mov	r3, r1
 801543e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015440:	2300      	movs	r3, #0
 8015442:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015444:	2300      	movs	r3, #0
 8015446:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801544e:	78fa      	ldrb	r2, [r7, #3]
 8015450:	4611      	mov	r1, r2
 8015452:	4618      	mov	r0, r3
 8015454:	f7ed fed1 	bl	80031fa <HAL_PCD_EP_SetStall>
 8015458:	4603      	mov	r3, r0
 801545a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801545c:	7bfb      	ldrb	r3, [r7, #15]
 801545e:	4618      	mov	r0, r3
 8015460:	f000 f8ca 	bl	80155f8 <USBD_Get_USB_Status>
 8015464:	4603      	mov	r3, r0
 8015466:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8015468:	7bbb      	ldrb	r3, [r7, #14]
}
 801546a:	4618      	mov	r0, r3
 801546c:	3710      	adds	r7, #16
 801546e:	46bd      	mov	sp, r7
 8015470:	bd80      	pop	{r7, pc}

08015472 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015472:	b580      	push	{r7, lr}
 8015474:	b084      	sub	sp, #16
 8015476:	af00      	add	r7, sp, #0
 8015478:	6078      	str	r0, [r7, #4]
 801547a:	460b      	mov	r3, r1
 801547c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801547e:	2300      	movs	r3, #0
 8015480:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015482:	2300      	movs	r3, #0
 8015484:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801548c:	78fa      	ldrb	r2, [r7, #3]
 801548e:	4611      	mov	r1, r2
 8015490:	4618      	mov	r0, r3
 8015492:	f7ed ff16 	bl	80032c2 <HAL_PCD_EP_ClrStall>
 8015496:	4603      	mov	r3, r0
 8015498:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 801549a:	7bfb      	ldrb	r3, [r7, #15]
 801549c:	4618      	mov	r0, r3
 801549e:	f000 f8ab 	bl	80155f8 <USBD_Get_USB_Status>
 80154a2:	4603      	mov	r3, r0
 80154a4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 80154a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80154a8:	4618      	mov	r0, r3
 80154aa:	3710      	adds	r7, #16
 80154ac:	46bd      	mov	sp, r7
 80154ae:	bd80      	pop	{r7, pc}

080154b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80154b0:	b480      	push	{r7}
 80154b2:	b085      	sub	sp, #20
 80154b4:	af00      	add	r7, sp, #0
 80154b6:	6078      	str	r0, [r7, #4]
 80154b8:	460b      	mov	r3, r1
 80154ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80154c2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80154c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	da0b      	bge.n	80154e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80154cc:	78fb      	ldrb	r3, [r7, #3]
 80154ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80154d2:	68f9      	ldr	r1, [r7, #12]
 80154d4:	4613      	mov	r3, r2
 80154d6:	00db      	lsls	r3, r3, #3
 80154d8:	1a9b      	subs	r3, r3, r2
 80154da:	009b      	lsls	r3, r3, #2
 80154dc:	440b      	add	r3, r1
 80154de:	333e      	adds	r3, #62	; 0x3e
 80154e0:	781b      	ldrb	r3, [r3, #0]
 80154e2:	e00b      	b.n	80154fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80154e4:	78fb      	ldrb	r3, [r7, #3]
 80154e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80154ea:	68f9      	ldr	r1, [r7, #12]
 80154ec:	4613      	mov	r3, r2
 80154ee:	00db      	lsls	r3, r3, #3
 80154f0:	1a9b      	subs	r3, r3, r2
 80154f2:	009b      	lsls	r3, r3, #2
 80154f4:	440b      	add	r3, r1
 80154f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80154fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80154fc:	4618      	mov	r0, r3
 80154fe:	3714      	adds	r7, #20
 8015500:	46bd      	mov	sp, r7
 8015502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015506:	4770      	bx	lr

08015508 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015508:	b580      	push	{r7, lr}
 801550a:	b084      	sub	sp, #16
 801550c:	af00      	add	r7, sp, #0
 801550e:	6078      	str	r0, [r7, #4]
 8015510:	460b      	mov	r3, r1
 8015512:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015514:	2300      	movs	r3, #0
 8015516:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015518:	2300      	movs	r3, #0
 801551a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015522:	78fa      	ldrb	r2, [r7, #3]
 8015524:	4611      	mov	r1, r2
 8015526:	4618      	mov	r0, r3
 8015528:	f7ed fce3 	bl	8002ef2 <HAL_PCD_SetAddress>
 801552c:	4603      	mov	r3, r0
 801552e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8015530:	7bfb      	ldrb	r3, [r7, #15]
 8015532:	4618      	mov	r0, r3
 8015534:	f000 f860 	bl	80155f8 <USBD_Get_USB_Status>
 8015538:	4603      	mov	r3, r0
 801553a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 801553c:	7bbb      	ldrb	r3, [r7, #14]
}
 801553e:	4618      	mov	r0, r3
 8015540:	3710      	adds	r7, #16
 8015542:	46bd      	mov	sp, r7
 8015544:	bd80      	pop	{r7, pc}

08015546 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8015546:	b580      	push	{r7, lr}
 8015548:	b086      	sub	sp, #24
 801554a:	af00      	add	r7, sp, #0
 801554c:	60f8      	str	r0, [r7, #12]
 801554e:	607a      	str	r2, [r7, #4]
 8015550:	461a      	mov	r2, r3
 8015552:	460b      	mov	r3, r1
 8015554:	72fb      	strb	r3, [r7, #11]
 8015556:	4613      	mov	r3, r2
 8015558:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801555a:	2300      	movs	r3, #0
 801555c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801555e:	2300      	movs	r3, #0
 8015560:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015562:	68fb      	ldr	r3, [r7, #12]
 8015564:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8015568:	893b      	ldrh	r3, [r7, #8]
 801556a:	7af9      	ldrb	r1, [r7, #11]
 801556c:	687a      	ldr	r2, [r7, #4]
 801556e:	f7ed fdfa 	bl	8003166 <HAL_PCD_EP_Transmit>
 8015572:	4603      	mov	r3, r0
 8015574:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8015576:	7dfb      	ldrb	r3, [r7, #23]
 8015578:	4618      	mov	r0, r3
 801557a:	f000 f83d 	bl	80155f8 <USBD_Get_USB_Status>
 801557e:	4603      	mov	r3, r0
 8015580:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8015582:	7dbb      	ldrb	r3, [r7, #22]
}
 8015584:	4618      	mov	r0, r3
 8015586:	3718      	adds	r7, #24
 8015588:	46bd      	mov	sp, r7
 801558a:	bd80      	pop	{r7, pc}

0801558c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801558c:	b580      	push	{r7, lr}
 801558e:	b086      	sub	sp, #24
 8015590:	af00      	add	r7, sp, #0
 8015592:	60f8      	str	r0, [r7, #12]
 8015594:	607a      	str	r2, [r7, #4]
 8015596:	461a      	mov	r2, r3
 8015598:	460b      	mov	r3, r1
 801559a:	72fb      	strb	r3, [r7, #11]
 801559c:	4613      	mov	r3, r2
 801559e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80155a0:	2300      	movs	r3, #0
 80155a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80155a4:	2300      	movs	r3, #0
 80155a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80155ae:	893b      	ldrh	r3, [r7, #8]
 80155b0:	7af9      	ldrb	r1, [r7, #11]
 80155b2:	687a      	ldr	r2, [r7, #4]
 80155b4:	f7ed fd74 	bl	80030a0 <HAL_PCD_EP_Receive>
 80155b8:	4603      	mov	r3, r0
 80155ba:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 80155bc:	7dfb      	ldrb	r3, [r7, #23]
 80155be:	4618      	mov	r0, r3
 80155c0:	f000 f81a 	bl	80155f8 <USBD_Get_USB_Status>
 80155c4:	4603      	mov	r3, r0
 80155c6:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 80155c8:	7dbb      	ldrb	r3, [r7, #22]
}
 80155ca:	4618      	mov	r0, r3
 80155cc:	3718      	adds	r7, #24
 80155ce:	46bd      	mov	sp, r7
 80155d0:	bd80      	pop	{r7, pc}

080155d2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80155d2:	b580      	push	{r7, lr}
 80155d4:	b082      	sub	sp, #8
 80155d6:	af00      	add	r7, sp, #0
 80155d8:	6078      	str	r0, [r7, #4]
 80155da:	460b      	mov	r3, r1
 80155dc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80155e4:	78fa      	ldrb	r2, [r7, #3]
 80155e6:	4611      	mov	r1, r2
 80155e8:	4618      	mov	r0, r3
 80155ea:	f7ed fda4 	bl	8003136 <HAL_PCD_EP_GetRxCount>
 80155ee:	4603      	mov	r3, r0
}
 80155f0:	4618      	mov	r0, r3
 80155f2:	3708      	adds	r7, #8
 80155f4:	46bd      	mov	sp, r7
 80155f6:	bd80      	pop	{r7, pc}

080155f8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80155f8:	b480      	push	{r7}
 80155fa:	b085      	sub	sp, #20
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	4603      	mov	r3, r0
 8015600:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015602:	2300      	movs	r3, #0
 8015604:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015606:	79fb      	ldrb	r3, [r7, #7]
 8015608:	2b03      	cmp	r3, #3
 801560a:	d817      	bhi.n	801563c <USBD_Get_USB_Status+0x44>
 801560c:	a201      	add	r2, pc, #4	; (adr r2, 8015614 <USBD_Get_USB_Status+0x1c>)
 801560e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015612:	bf00      	nop
 8015614:	08015625 	.word	0x08015625
 8015618:	0801562b 	.word	0x0801562b
 801561c:	08015631 	.word	0x08015631
 8015620:	08015637 	.word	0x08015637
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015624:	2300      	movs	r3, #0
 8015626:	73fb      	strb	r3, [r7, #15]
    break;
 8015628:	e00b      	b.n	8015642 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801562a:	2302      	movs	r3, #2
 801562c:	73fb      	strb	r3, [r7, #15]
    break;
 801562e:	e008      	b.n	8015642 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015630:	2301      	movs	r3, #1
 8015632:	73fb      	strb	r3, [r7, #15]
    break;
 8015634:	e005      	b.n	8015642 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015636:	2302      	movs	r3, #2
 8015638:	73fb      	strb	r3, [r7, #15]
    break;
 801563a:	e002      	b.n	8015642 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801563c:	2302      	movs	r3, #2
 801563e:	73fb      	strb	r3, [r7, #15]
    break;
 8015640:	bf00      	nop
  }
  return usb_status;
 8015642:	7bfb      	ldrb	r3, [r7, #15]
}
 8015644:	4618      	mov	r0, r3
 8015646:	3714      	adds	r7, #20
 8015648:	46bd      	mov	sp, r7
 801564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801564e:	4770      	bx	lr

08015650 <__errno>:
 8015650:	4b01      	ldr	r3, [pc, #4]	; (8015658 <__errno+0x8>)
 8015652:	6818      	ldr	r0, [r3, #0]
 8015654:	4770      	bx	lr
 8015656:	bf00      	nop
 8015658:	24000130 	.word	0x24000130

0801565c <__libc_init_array>:
 801565c:	b570      	push	{r4, r5, r6, lr}
 801565e:	4e0d      	ldr	r6, [pc, #52]	; (8015694 <__libc_init_array+0x38>)
 8015660:	4c0d      	ldr	r4, [pc, #52]	; (8015698 <__libc_init_array+0x3c>)
 8015662:	1ba4      	subs	r4, r4, r6
 8015664:	10a4      	asrs	r4, r4, #2
 8015666:	2500      	movs	r5, #0
 8015668:	42a5      	cmp	r5, r4
 801566a:	d109      	bne.n	8015680 <__libc_init_array+0x24>
 801566c:	4e0b      	ldr	r6, [pc, #44]	; (801569c <__libc_init_array+0x40>)
 801566e:	4c0c      	ldr	r4, [pc, #48]	; (80156a0 <__libc_init_array+0x44>)
 8015670:	f000 f8ea 	bl	8015848 <_init>
 8015674:	1ba4      	subs	r4, r4, r6
 8015676:	10a4      	asrs	r4, r4, #2
 8015678:	2500      	movs	r5, #0
 801567a:	42a5      	cmp	r5, r4
 801567c:	d105      	bne.n	801568a <__libc_init_array+0x2e>
 801567e:	bd70      	pop	{r4, r5, r6, pc}
 8015680:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015684:	4798      	blx	r3
 8015686:	3501      	adds	r5, #1
 8015688:	e7ee      	b.n	8015668 <__libc_init_array+0xc>
 801568a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801568e:	4798      	blx	r3
 8015690:	3501      	adds	r5, #1
 8015692:	e7f2      	b.n	801567a <__libc_init_array+0x1e>
 8015694:	08015dd8 	.word	0x08015dd8
 8015698:	08015dd8 	.word	0x08015dd8
 801569c:	08015dd8 	.word	0x08015dd8
 80156a0:	08015ddc 	.word	0x08015ddc

080156a4 <malloc>:
 80156a4:	4b02      	ldr	r3, [pc, #8]	; (80156b0 <malloc+0xc>)
 80156a6:	4601      	mov	r1, r0
 80156a8:	6818      	ldr	r0, [r3, #0]
 80156aa:	f000 b861 	b.w	8015770 <_malloc_r>
 80156ae:	bf00      	nop
 80156b0:	24000130 	.word	0x24000130

080156b4 <free>:
 80156b4:	4b02      	ldr	r3, [pc, #8]	; (80156c0 <free+0xc>)
 80156b6:	4601      	mov	r1, r0
 80156b8:	6818      	ldr	r0, [r3, #0]
 80156ba:	f000 b80b 	b.w	80156d4 <_free_r>
 80156be:	bf00      	nop
 80156c0:	24000130 	.word	0x24000130

080156c4 <memset>:
 80156c4:	4402      	add	r2, r0
 80156c6:	4603      	mov	r3, r0
 80156c8:	4293      	cmp	r3, r2
 80156ca:	d100      	bne.n	80156ce <memset+0xa>
 80156cc:	4770      	bx	lr
 80156ce:	f803 1b01 	strb.w	r1, [r3], #1
 80156d2:	e7f9      	b.n	80156c8 <memset+0x4>

080156d4 <_free_r>:
 80156d4:	b538      	push	{r3, r4, r5, lr}
 80156d6:	4605      	mov	r5, r0
 80156d8:	2900      	cmp	r1, #0
 80156da:	d045      	beq.n	8015768 <_free_r+0x94>
 80156dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80156e0:	1f0c      	subs	r4, r1, #4
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	bfb8      	it	lt
 80156e6:	18e4      	addlt	r4, r4, r3
 80156e8:	f000 f8ac 	bl	8015844 <__malloc_lock>
 80156ec:	4a1f      	ldr	r2, [pc, #124]	; (801576c <_free_r+0x98>)
 80156ee:	6813      	ldr	r3, [r2, #0]
 80156f0:	4610      	mov	r0, r2
 80156f2:	b933      	cbnz	r3, 8015702 <_free_r+0x2e>
 80156f4:	6063      	str	r3, [r4, #4]
 80156f6:	6014      	str	r4, [r2, #0]
 80156f8:	4628      	mov	r0, r5
 80156fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80156fe:	f000 b8a2 	b.w	8015846 <__malloc_unlock>
 8015702:	42a3      	cmp	r3, r4
 8015704:	d90c      	bls.n	8015720 <_free_r+0x4c>
 8015706:	6821      	ldr	r1, [r4, #0]
 8015708:	1862      	adds	r2, r4, r1
 801570a:	4293      	cmp	r3, r2
 801570c:	bf04      	itt	eq
 801570e:	681a      	ldreq	r2, [r3, #0]
 8015710:	685b      	ldreq	r3, [r3, #4]
 8015712:	6063      	str	r3, [r4, #4]
 8015714:	bf04      	itt	eq
 8015716:	1852      	addeq	r2, r2, r1
 8015718:	6022      	streq	r2, [r4, #0]
 801571a:	6004      	str	r4, [r0, #0]
 801571c:	e7ec      	b.n	80156f8 <_free_r+0x24>
 801571e:	4613      	mov	r3, r2
 8015720:	685a      	ldr	r2, [r3, #4]
 8015722:	b10a      	cbz	r2, 8015728 <_free_r+0x54>
 8015724:	42a2      	cmp	r2, r4
 8015726:	d9fa      	bls.n	801571e <_free_r+0x4a>
 8015728:	6819      	ldr	r1, [r3, #0]
 801572a:	1858      	adds	r0, r3, r1
 801572c:	42a0      	cmp	r0, r4
 801572e:	d10b      	bne.n	8015748 <_free_r+0x74>
 8015730:	6820      	ldr	r0, [r4, #0]
 8015732:	4401      	add	r1, r0
 8015734:	1858      	adds	r0, r3, r1
 8015736:	4282      	cmp	r2, r0
 8015738:	6019      	str	r1, [r3, #0]
 801573a:	d1dd      	bne.n	80156f8 <_free_r+0x24>
 801573c:	6810      	ldr	r0, [r2, #0]
 801573e:	6852      	ldr	r2, [r2, #4]
 8015740:	605a      	str	r2, [r3, #4]
 8015742:	4401      	add	r1, r0
 8015744:	6019      	str	r1, [r3, #0]
 8015746:	e7d7      	b.n	80156f8 <_free_r+0x24>
 8015748:	d902      	bls.n	8015750 <_free_r+0x7c>
 801574a:	230c      	movs	r3, #12
 801574c:	602b      	str	r3, [r5, #0]
 801574e:	e7d3      	b.n	80156f8 <_free_r+0x24>
 8015750:	6820      	ldr	r0, [r4, #0]
 8015752:	1821      	adds	r1, r4, r0
 8015754:	428a      	cmp	r2, r1
 8015756:	bf04      	itt	eq
 8015758:	6811      	ldreq	r1, [r2, #0]
 801575a:	6852      	ldreq	r2, [r2, #4]
 801575c:	6062      	str	r2, [r4, #4]
 801575e:	bf04      	itt	eq
 8015760:	1809      	addeq	r1, r1, r0
 8015762:	6021      	streq	r1, [r4, #0]
 8015764:	605c      	str	r4, [r3, #4]
 8015766:	e7c7      	b.n	80156f8 <_free_r+0x24>
 8015768:	bd38      	pop	{r3, r4, r5, pc}
 801576a:	bf00      	nop
 801576c:	240002d8 	.word	0x240002d8

08015770 <_malloc_r>:
 8015770:	b570      	push	{r4, r5, r6, lr}
 8015772:	1ccd      	adds	r5, r1, #3
 8015774:	f025 0503 	bic.w	r5, r5, #3
 8015778:	3508      	adds	r5, #8
 801577a:	2d0c      	cmp	r5, #12
 801577c:	bf38      	it	cc
 801577e:	250c      	movcc	r5, #12
 8015780:	2d00      	cmp	r5, #0
 8015782:	4606      	mov	r6, r0
 8015784:	db01      	blt.n	801578a <_malloc_r+0x1a>
 8015786:	42a9      	cmp	r1, r5
 8015788:	d903      	bls.n	8015792 <_malloc_r+0x22>
 801578a:	230c      	movs	r3, #12
 801578c:	6033      	str	r3, [r6, #0]
 801578e:	2000      	movs	r0, #0
 8015790:	bd70      	pop	{r4, r5, r6, pc}
 8015792:	f000 f857 	bl	8015844 <__malloc_lock>
 8015796:	4a21      	ldr	r2, [pc, #132]	; (801581c <_malloc_r+0xac>)
 8015798:	6814      	ldr	r4, [r2, #0]
 801579a:	4621      	mov	r1, r4
 801579c:	b991      	cbnz	r1, 80157c4 <_malloc_r+0x54>
 801579e:	4c20      	ldr	r4, [pc, #128]	; (8015820 <_malloc_r+0xb0>)
 80157a0:	6823      	ldr	r3, [r4, #0]
 80157a2:	b91b      	cbnz	r3, 80157ac <_malloc_r+0x3c>
 80157a4:	4630      	mov	r0, r6
 80157a6:	f000 f83d 	bl	8015824 <_sbrk_r>
 80157aa:	6020      	str	r0, [r4, #0]
 80157ac:	4629      	mov	r1, r5
 80157ae:	4630      	mov	r0, r6
 80157b0:	f000 f838 	bl	8015824 <_sbrk_r>
 80157b4:	1c43      	adds	r3, r0, #1
 80157b6:	d124      	bne.n	8015802 <_malloc_r+0x92>
 80157b8:	230c      	movs	r3, #12
 80157ba:	6033      	str	r3, [r6, #0]
 80157bc:	4630      	mov	r0, r6
 80157be:	f000 f842 	bl	8015846 <__malloc_unlock>
 80157c2:	e7e4      	b.n	801578e <_malloc_r+0x1e>
 80157c4:	680b      	ldr	r3, [r1, #0]
 80157c6:	1b5b      	subs	r3, r3, r5
 80157c8:	d418      	bmi.n	80157fc <_malloc_r+0x8c>
 80157ca:	2b0b      	cmp	r3, #11
 80157cc:	d90f      	bls.n	80157ee <_malloc_r+0x7e>
 80157ce:	600b      	str	r3, [r1, #0]
 80157d0:	50cd      	str	r5, [r1, r3]
 80157d2:	18cc      	adds	r4, r1, r3
 80157d4:	4630      	mov	r0, r6
 80157d6:	f000 f836 	bl	8015846 <__malloc_unlock>
 80157da:	f104 000b 	add.w	r0, r4, #11
 80157de:	1d23      	adds	r3, r4, #4
 80157e0:	f020 0007 	bic.w	r0, r0, #7
 80157e4:	1ac3      	subs	r3, r0, r3
 80157e6:	d0d3      	beq.n	8015790 <_malloc_r+0x20>
 80157e8:	425a      	negs	r2, r3
 80157ea:	50e2      	str	r2, [r4, r3]
 80157ec:	e7d0      	b.n	8015790 <_malloc_r+0x20>
 80157ee:	428c      	cmp	r4, r1
 80157f0:	684b      	ldr	r3, [r1, #4]
 80157f2:	bf16      	itet	ne
 80157f4:	6063      	strne	r3, [r4, #4]
 80157f6:	6013      	streq	r3, [r2, #0]
 80157f8:	460c      	movne	r4, r1
 80157fa:	e7eb      	b.n	80157d4 <_malloc_r+0x64>
 80157fc:	460c      	mov	r4, r1
 80157fe:	6849      	ldr	r1, [r1, #4]
 8015800:	e7cc      	b.n	801579c <_malloc_r+0x2c>
 8015802:	1cc4      	adds	r4, r0, #3
 8015804:	f024 0403 	bic.w	r4, r4, #3
 8015808:	42a0      	cmp	r0, r4
 801580a:	d005      	beq.n	8015818 <_malloc_r+0xa8>
 801580c:	1a21      	subs	r1, r4, r0
 801580e:	4630      	mov	r0, r6
 8015810:	f000 f808 	bl	8015824 <_sbrk_r>
 8015814:	3001      	adds	r0, #1
 8015816:	d0cf      	beq.n	80157b8 <_malloc_r+0x48>
 8015818:	6025      	str	r5, [r4, #0]
 801581a:	e7db      	b.n	80157d4 <_malloc_r+0x64>
 801581c:	240002d8 	.word	0x240002d8
 8015820:	240002dc 	.word	0x240002dc

08015824 <_sbrk_r>:
 8015824:	b538      	push	{r3, r4, r5, lr}
 8015826:	4c06      	ldr	r4, [pc, #24]	; (8015840 <_sbrk_r+0x1c>)
 8015828:	2300      	movs	r3, #0
 801582a:	4605      	mov	r5, r0
 801582c:	4608      	mov	r0, r1
 801582e:	6023      	str	r3, [r4, #0]
 8015830:	f7eb fd26 	bl	8001280 <_sbrk>
 8015834:	1c43      	adds	r3, r0, #1
 8015836:	d102      	bne.n	801583e <_sbrk_r+0x1a>
 8015838:	6823      	ldr	r3, [r4, #0]
 801583a:	b103      	cbz	r3, 801583e <_sbrk_r+0x1a>
 801583c:	602b      	str	r3, [r5, #0]
 801583e:	bd38      	pop	{r3, r4, r5, pc}
 8015840:	24008040 	.word	0x24008040

08015844 <__malloc_lock>:
 8015844:	4770      	bx	lr

08015846 <__malloc_unlock>:
 8015846:	4770      	bx	lr

08015848 <_init>:
 8015848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801584a:	bf00      	nop
 801584c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801584e:	bc08      	pop	{r3}
 8015850:	469e      	mov	lr, r3
 8015852:	4770      	bx	lr

08015854 <_fini>:
 8015854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015856:	bf00      	nop
 8015858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801585a:	bc08      	pop	{r3}
 801585c:	469e      	mov	lr, r3
 801585e:	4770      	bx	lr
