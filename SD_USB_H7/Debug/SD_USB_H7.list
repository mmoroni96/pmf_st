
SD_USB_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014ac8  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  08014d60  08014d60  00024d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080152c4  080152c4  00030254  2**0
                  CONTENTS
  4 .ARM          00000008  080152c4  080152c4  000252c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080152cc  080152cc  00030254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080152cc  080152cc  000252cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080152d0  080152d0  000252d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  24000000  080152d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000194  08015468  00030194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240001f4  080154c8  000301f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00007d8c  24000258  08015528  00030258  2**3
                  ALLOC
 12 ._user_heap_stack 00006004  24007fe4  08015528  00037fe4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030254  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003c249  00000000  00000000  00030282  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00006502  00000000  00000000  0006c4cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001ca0  00000000  00000000  000729d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001a40  00000000  00000000  00074670  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0003fa38  00000000  00000000  000760b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   000219d2  00000000  00000000  000b5ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    0016e22a  00000000  00000000  000d74ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  002456e4  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000077c8  00000000  00000000  00245760  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000258 	.word	0x24000258
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08014d48 	.word	0x08014d48

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400025c 	.word	0x2400025c
 80002d4:	08014d48 	.word	0x08014d48

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80005e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	db0b      	blt.n	8000602 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	f003 021f 	and.w	r2, r3, #31
 80005f0:	4907      	ldr	r1, [pc, #28]	; (8000610 <__NVIC_EnableIRQ+0x38>)
 80005f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005f6:	095b      	lsrs	r3, r3, #5
 80005f8:	2001      	movs	r0, #1
 80005fa:	fa00 f202 	lsl.w	r2, r0, r2
 80005fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	e000e100 	.word	0xe000e100

08000614 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800061e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000622:	2b00      	cmp	r3, #0
 8000624:	db10      	blt.n	8000648 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000626:	88fb      	ldrh	r3, [r7, #6]
 8000628:	f003 021f 	and.w	r2, r3, #31
 800062c:	4909      	ldr	r1, [pc, #36]	; (8000654 <__NVIC_DisableIRQ+0x40>)
 800062e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000632:	095b      	lsrs	r3, r3, #5
 8000634:	2001      	movs	r0, #1
 8000636:	fa00 f202 	lsl.w	r2, r0, r2
 800063a:	3320      	adds	r3, #32
 800063c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000640:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000644:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8000648:	bf00      	nop
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	e000e100 	.word	0xe000e100

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065e:	f000 fe3f 	bl	80012e0 <HAL_Init>

  /* USER CODE BEGIN Init */
  int i=0;
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000666:	f000 f883 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066a:	f000 fa65 	bl	8000b38 <MX_GPIO_Init>
  MX_ETH_Init();
 800066e:	f000 f947 	bl	8000900 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000672:	f000 fa15 	bl	8000aa0 <MX_USART3_UART_Init>
  MX_SDMMC1_SD_Init();
 8000676:	f000 f9f1 	bl	8000a5c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800067a:	f00c fb01 	bl	800cc80 <MX_FATFS_Init>
  MX_RTC_Init();
 800067e:	f000 f991 	bl	80009a4 <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 8000682:	f013 fd5f 	bl	8014144 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  //HAL_SD_Init(&hsd1);
  //HAL_SD_GetCardInfo(&hsd1, &SDCardInfo);
  //HAL_SD_Init(&hsd1);
  FRESULT res;
  res=f_mount(&myFatFS, SDPath, 1);
 8000686:	2201      	movs	r2, #1
 8000688:	4931      	ldr	r1, [pc, #196]	; (8000750 <main+0xf8>)
 800068a:	4832      	ldr	r0, [pc, #200]	; (8000754 <main+0xfc>)
 800068c:	f012 fb3c 	bl	8012d08 <f_mount>
 8000690:	4603      	mov	r3, r0
 8000692:	71fb      	strb	r3, [r7, #7]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port,USER_Btn_Pin)==GPIO_PIN_SET){
 8000694:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000698:	482f      	ldr	r0, [pc, #188]	; (8000758 <main+0x100>)
 800069a:	f001 fdcb 	bl	8002234 <HAL_GPIO_ReadPin>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d1f7      	bne.n	8000694 <main+0x3c>
		  if(i==0){
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d140      	bne.n	800072c <main+0xd4>
			  NVIC_DisableIRQ(OTG_FS_IRQn);
 80006aa:	2065      	movs	r0, #101	; 0x65
 80006ac:	f7ff ffb2 	bl	8000614 <__NVIC_DisableIRQ>
			  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, GPIO_PIN_SET);
 80006b0:	2201      	movs	r2, #1
 80006b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006b6:	4829      	ldr	r0, [pc, #164]	; (800075c <main+0x104>)
 80006b8:	f001 fdd4 	bl	8002264 <HAL_GPIO_WritePin>
			  if(USBD_Stop(&hUsbDeviceFS)!= USBD_OK) {
 80006bc:	4828      	ldr	r0, [pc, #160]	; (8000760 <main+0x108>)
 80006be:	f00d fefb 	bl	800e4b8 <USBD_Stop>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <main+0x74>
								Error_Handler();
 80006c8:	f000 fb42 	bl	8000d50 <Error_Handler>
							  }
			  res = f_open(&writeFile, &path1, FA_CREATE_ALWAYS);
 80006cc:	2208      	movs	r2, #8
 80006ce:	4925      	ldr	r1, [pc, #148]	; (8000764 <main+0x10c>)
 80006d0:	4825      	ldr	r0, [pc, #148]	; (8000768 <main+0x110>)
 80006d2:	f012 fb5f 	bl	8012d94 <f_open>
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
			  res = f_close(&writeFile);
 80006da:	4823      	ldr	r0, [pc, #140]	; (8000768 <main+0x110>)
 80006dc:	f013 f936 	bl	801394c <f_close>
 80006e0:	4603      	mov	r3, r0
 80006e2:	71fb      	strb	r3, [r7, #7]
			  res = f_open(&writeFile, &path1, FA_WRITE | FA_OPEN_ALWAYS);
 80006e4:	2212      	movs	r2, #18
 80006e6:	491f      	ldr	r1, [pc, #124]	; (8000764 <main+0x10c>)
 80006e8:	481f      	ldr	r0, [pc, #124]	; (8000768 <main+0x110>)
 80006ea:	f012 fb53 	bl	8012d94 <f_open>
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
			  for(int e=0;e<100000;e++){
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	e004      	b.n	8000702 <main+0xaa>
				  scrivi_speed();
 80006f8:	f000 fae6 	bl	8000cc8 <scrivi_speed>
			  for(int e=0;e<100000;e++){
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	3301      	adds	r3, #1
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	4a19      	ldr	r2, [pc, #100]	; (800076c <main+0x114>)
 8000706:	4293      	cmp	r3, r2
 8000708:	ddf6      	ble.n	80006f8 <main+0xa0>
			  }
			  res = f_close(&writeFile);
 800070a:	4817      	ldr	r0, [pc, #92]	; (8000768 <main+0x110>)
 800070c:	f013 f91e 	bl	801394c <f_close>
 8000710:	4603      	mov	r3, r0
 8000712:	71fb      	strb	r3, [r7, #7]
			  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, GPIO_PIN_RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800071a:	4810      	ldr	r0, [pc, #64]	; (800075c <main+0x104>)
 800071c:	f001 fda2 	bl	8002264 <HAL_GPIO_WritePin>
		      i=1;
 8000720:	2301      	movs	r3, #1
 8000722:	60fb      	str	r3, [r7, #12]
		      HAL_Delay(200);}
 8000724:	20c8      	movs	r0, #200	; 0xc8
 8000726:	f000 fe6d 	bl	8001404 <HAL_Delay>
 800072a:	e7b3      	b.n	8000694 <main+0x3c>
		  else{

			  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000732:	480a      	ldr	r0, [pc, #40]	; (800075c <main+0x104>)
 8000734:	f001 fd96 	bl	8002264 <HAL_GPIO_WritePin>
			  MX_USB_DEVICE_Init();
 8000738:	f013 fd04 	bl	8014144 <MX_USB_DEVICE_Init>
			  /*if(USBD_Start(&hUsbDeviceFS)!= USBD_OK) {
			 			  				    Error_Handler();
			 			  				  }*/
			  NVIC_EnableIRQ(OTG_FS_IRQn);
 800073c:	2065      	movs	r0, #101	; 0x65
 800073e:	f7ff ff4b 	bl	80005d8 <__NVIC_EnableIRQ>
			  i=0;
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
			  HAL_Delay(200);
 8000746:	20c8      	movs	r0, #200	; 0xc8
 8000748:	f000 fe5c 	bl	8001404 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port,USER_Btn_Pin)==GPIO_PIN_SET){
 800074c:	e7a2      	b.n	8000694 <main+0x3c>
 800074e:	bf00      	nop
 8000750:	2400567c 	.word	0x2400567c
 8000754:	24003500 	.word	0x24003500
 8000758:	58020800 	.word	0x58020800
 800075c:	58020400 	.word	0x58020400
 8000760:	24007714 	.word	0x24007714
 8000764:	24000000 	.word	0x24000000
 8000768:	24001478 	.word	0x24001478
 800076c:	0001869f 	.word	0x0001869f

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b0cc      	sub	sp, #304	; 0x130
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800077a:	224c      	movs	r2, #76	; 0x4c
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f014 fa20 	bl	8014bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000788:	2220      	movs	r2, #32
 800078a:	2100      	movs	r1, #0
 800078c:	4618      	mov	r0, r3
 800078e:	f014 fa19 	bl	8014bc4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000792:	f107 0308 	add.w	r3, r7, #8
 8000796:	4618      	mov	r0, r3
 8000798:	23bc      	movs	r3, #188	; 0xbc
 800079a:	461a      	mov	r2, r3
 800079c:	2100      	movs	r1, #0
 800079e:	f014 fa11 	bl	8014bc4 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007a2:	2002      	movs	r0, #2
 80007a4:	f002 ffd4 	bl	8003750 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	4b51      	ldr	r3, [pc, #324]	; (80008f4 <SystemClock_Config+0x184>)
 80007b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007b2:	4a50      	ldr	r2, [pc, #320]	; (80008f4 <SystemClock_Config+0x184>)
 80007b4:	f023 0301 	bic.w	r3, r3, #1
 80007b8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007ba:	4b4e      	ldr	r3, [pc, #312]	; (80008f4 <SystemClock_Config+0x184>)
 80007bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007be:	f003 0201 	and.w	r2, r3, #1
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	4b4c      	ldr	r3, [pc, #304]	; (80008f8 <SystemClock_Config+0x188>)
 80007c8:	699b      	ldr	r3, [r3, #24]
 80007ca:	4a4b      	ldr	r2, [pc, #300]	; (80008f8 <SystemClock_Config+0x188>)
 80007cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007d0:	6193      	str	r3, [r2, #24]
 80007d2:	4b49      	ldr	r3, [pc, #292]	; (80008f8 <SystemClock_Config+0x188>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007e2:	bf00      	nop
 80007e4:	4b44      	ldr	r3, [pc, #272]	; (80008f8 <SystemClock_Config+0x188>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007f0:	d1f8      	bne.n	80007e4 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 80007f2:	2329      	movs	r3, #41	; 0x29
 80007f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007f8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000800:	2301      	movs	r3, #1
 8000802:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000806:	2301      	movs	r3, #1
 8000808:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080c:	2302      	movs	r3, #2
 800080e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000812:	2302      	movs	r3, #2
 8000814:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000818:	2301      	movs	r3, #1
 800081a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 800081e:	2318      	movs	r3, #24
 8000820:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000824:	2302      	movs	r3, #2
 8000826:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 1;
 800082a:	2301      	movs	r3, #1
 800082c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000830:	2302      	movs	r3, #2
 8000832:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000836:	230c      	movs	r3, #12
 8000838:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800083c:	2300      	movs	r3, #0
 800083e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000848:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800084c:	4618      	mov	r0, r3
 800084e:	f002 ffc9 	bl	80037e4 <HAL_RCC_OscConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000858:	f000 fa7a 	bl	8000d50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085c:	233f      	movs	r3, #63	; 0x3f
 800085e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000862:	2303      	movs	r3, #3
 8000864:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800088c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000890:	2101      	movs	r1, #1
 8000892:	4618      	mov	r0, r3
 8000894:	f003 fb7e 	bl	8003f94 <HAL_RCC_ClockConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0x132>
  {
    Error_Handler();
 800089e:	f000 fa57 	bl	8000d50 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 80008a2:	f107 0308 	add.w	r3, r7, #8
 80008a6:	4a15      	ldr	r2, [pc, #84]	; (80008fc <SystemClock_Config+0x18c>)
 80008a8:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80008aa:	f107 0308 	add.w	r3, r7, #8
 80008ae:	2200      	movs	r2, #0
 80008b0:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80008b2:	f107 0308 	add.w	r3, r7, #8
 80008b6:	2200      	movs	r2, #0
 80008b8:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80008ba:	f107 0308 	add.w	r3, r7, #8
 80008be:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80008c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80008c6:	f107 0308 	add.w	r3, r7, #8
 80008ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008d2:	f107 0308 	add.w	r3, r7, #8
 80008d6:	4618      	mov	r0, r3
 80008d8:	f003 fee0 	bl	800469c <HAL_RCCEx_PeriphCLKConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0x176>
  {
    Error_Handler();
 80008e2:	f000 fa35 	bl	8000d50 <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80008e6:	f002 ff6d 	bl	80037c4 <HAL_PWREx_EnableUSBVoltageDetector>
}
 80008ea:	bf00      	nop
 80008ec:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	58000400 	.word	0x58000400
 80008f8:	58024800 	.word	0x58024800
 80008fc:	00450002 	.word	0x00450002

08000900 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000904:	4b22      	ldr	r3, [pc, #136]	; (8000990 <MX_ETH_Init+0x90>)
 8000906:	4a23      	ldr	r2, [pc, #140]	; (8000994 <MX_ETH_Init+0x94>)
 8000908:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 800090a:	4b21      	ldr	r3, [pc, #132]	; (8000990 <MX_ETH_Init+0x90>)
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	2200      	movs	r2, #0
 8000910:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000912:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <MX_ETH_Init+0x90>)
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	3301      	adds	r3, #1
 8000918:	2280      	movs	r2, #128	; 0x80
 800091a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 800091c:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <MX_ETH_Init+0x90>)
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	3302      	adds	r3, #2
 8000922:	22e1      	movs	r2, #225	; 0xe1
 8000924:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000926:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <MX_ETH_Init+0x90>)
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	3303      	adds	r3, #3
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000930:	4b17      	ldr	r3, [pc, #92]	; (8000990 <MX_ETH_Init+0x90>)
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	3304      	adds	r3, #4
 8000936:	2200      	movs	r2, #0
 8000938:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <MX_ETH_Init+0x90>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	3305      	adds	r3, #5
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <MX_ETH_Init+0x90>)
 8000946:	2201      	movs	r2, #1
 8000948:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_ETH_Init+0x90>)
 800094c:	4a12      	ldr	r2, [pc, #72]	; (8000998 <MX_ETH_Init+0x98>)
 800094e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_ETH_Init+0x90>)
 8000952:	4a12      	ldr	r2, [pc, #72]	; (800099c <MX_ETH_Init+0x9c>)
 8000954:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_ETH_Init+0x90>)
 8000958:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800095c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800095e:	480c      	ldr	r0, [pc, #48]	; (8000990 <MX_ETH_Init+0x90>)
 8000960:	f000 fea2 	bl	80016a8 <HAL_ETH_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 800096a:	f000 f9f1 	bl	8000d50 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800096e:	2234      	movs	r2, #52	; 0x34
 8000970:	2100      	movs	r1, #0
 8000972:	480b      	ldr	r0, [pc, #44]	; (80009a0 <MX_ETH_Init+0xa0>)
 8000974:	f014 f926 	bl	8014bc4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_ETH_Init+0xa0>)
 800097a:	2221      	movs	r2, #33	; 0x21
 800097c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <MX_ETH_Init+0xa0>)
 8000980:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000984:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_ETH_Init+0xa0>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	24004574 	.word	0x24004574
 8000994:	40028000 	.word	0x40028000
 8000998:	240001f4 	.word	0x240001f4
 800099c:	24000194 	.word	0x24000194
 80009a0:	240045ec 	.word	0x240045ec

080009a4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80009b8:	2300      	movs	r3, #0
 80009ba:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80009bc:	4b25      	ldr	r3, [pc, #148]	; (8000a54 <MX_RTC_Init+0xb0>)
 80009be:	4a26      	ldr	r2, [pc, #152]	; (8000a58 <MX_RTC_Init+0xb4>)
 80009c0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009c2:	4b24      	ldr	r3, [pc, #144]	; (8000a54 <MX_RTC_Init+0xb0>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009c8:	4b22      	ldr	r3, [pc, #136]	; (8000a54 <MX_RTC_Init+0xb0>)
 80009ca:	227f      	movs	r2, #127	; 0x7f
 80009cc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009ce:	4b21      	ldr	r3, [pc, #132]	; (8000a54 <MX_RTC_Init+0xb0>)
 80009d0:	22ff      	movs	r2, #255	; 0xff
 80009d2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009d4:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <MX_RTC_Init+0xb0>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009da:	4b1e      	ldr	r3, [pc, #120]	; (8000a54 <MX_RTC_Init+0xb0>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009e0:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <MX_RTC_Init+0xb0>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009e6:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <MX_RTC_Init+0xb0>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009ec:	4819      	ldr	r0, [pc, #100]	; (8000a54 <MX_RTC_Init+0xb0>)
 80009ee:	f005 fd09 	bl	8006404 <HAL_RTC_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80009f8:	f000 f9aa 	bl	8000d50 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	2201      	movs	r2, #1
 8000a14:	4619      	mov	r1, r3
 8000a16:	480f      	ldr	r0, [pc, #60]	; (8000a54 <MX_RTC_Init+0xb0>)
 8000a18:	f005 fd90 	bl	800653c <HAL_RTC_SetTime>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000a22:	f000 f995 	bl	8000d50 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000a26:	2301      	movs	r3, #1
 8000a28:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000a36:	463b      	mov	r3, r7
 8000a38:	2201      	movs	r2, #1
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_RTC_Init+0xb0>)
 8000a3e:	f005 fe9d 	bl	800677c <HAL_RTC_SetDate>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000a48:	f000 f982 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	24004540 	.word	0x24004540
 8000a58:	58004000 	.word	0x58004000

08000a5c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000a60:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <MX_SDMMC1_SD_Init+0x3c>)
 8000a62:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <MX_SDMMC1_SD_Init+0x40>)
 8000a64:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_SDMMC1_SD_Init+0x3c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <MX_SDMMC1_SD_Init+0x3c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_SDMMC1_SD_Init+0x3c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8000a78:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <MX_SDMMC1_SD_Init+0x3c>)
 8000a7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a7e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000a80:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <MX_SDMMC1_SD_Init+0x3c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8000a86:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <MX_SDMMC1_SD_Init+0x3c>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	240013f0 	.word	0x240013f0
 8000a9c:	52007000 	.word	0x52007000

08000aa0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000aa4:	4b22      	ldr	r3, [pc, #136]	; (8000b30 <MX_USART3_UART_Init+0x90>)
 8000aa6:	4a23      	ldr	r2, [pc, #140]	; (8000b34 <MX_USART3_UART_Init+0x94>)
 8000aa8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aaa:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <MX_USART3_UART_Init+0x90>)
 8000aac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab2:	4b1f      	ldr	r3, [pc, #124]	; (8000b30 <MX_USART3_UART_Init+0x90>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ab8:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <MX_USART3_UART_Init+0x90>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000abe:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <MX_USART3_UART_Init+0x90>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ac4:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <MX_USART3_UART_Init+0x90>)
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aca:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <MX_USART3_UART_Init+0x90>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad0:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <MX_USART3_UART_Init+0x90>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ad6:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <MX_USART3_UART_Init+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000adc:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <MX_USART3_UART_Init+0x90>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ae2:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <MX_USART3_UART_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ae8:	4811      	ldr	r0, [pc, #68]	; (8000b30 <MX_USART3_UART_Init+0x90>)
 8000aea:	f007 fb83 	bl	80081f4 <HAL_UART_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000af4:	f000 f92c 	bl	8000d50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000af8:	2100      	movs	r1, #0
 8000afa:	480d      	ldr	r0, [pc, #52]	; (8000b30 <MX_USART3_UART_Init+0x90>)
 8000afc:	f009 feed 	bl	800a8da <HAL_UARTEx_SetTxFifoThreshold>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b06:	f000 f923 	bl	8000d50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4808      	ldr	r0, [pc, #32]	; (8000b30 <MX_USART3_UART_Init+0x90>)
 8000b0e:	f009 ff22 	bl	800a956 <HAL_UARTEx_SetRxFifoThreshold>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b18:	f000 f91a 	bl	8000d50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b1c:	4804      	ldr	r0, [pc, #16]	; (8000b30 <MX_USART3_UART_Init+0x90>)
 8000b1e:	f009 fea3 	bl	800a868 <HAL_UARTEx_DisableFifoMode>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b28:	f000 f912 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	24001320 	.word	0x24001320
 8000b34:	40004800 	.word	0x40004800

08000b38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08c      	sub	sp, #48	; 0x30
 8000b3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4e:	4b59      	ldr	r3, [pc, #356]	; (8000cb4 <MX_GPIO_Init+0x17c>)
 8000b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b54:	4a57      	ldr	r2, [pc, #348]	; (8000cb4 <MX_GPIO_Init+0x17c>)
 8000b56:	f043 0304 	orr.w	r3, r3, #4
 8000b5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b5e:	4b55      	ldr	r3, [pc, #340]	; (8000cb4 <MX_GPIO_Init+0x17c>)
 8000b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b64:	f003 0304 	and.w	r3, r3, #4
 8000b68:	61bb      	str	r3, [r7, #24]
 8000b6a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b6c:	4b51      	ldr	r3, [pc, #324]	; (8000cb4 <MX_GPIO_Init+0x17c>)
 8000b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b72:	4a50      	ldr	r2, [pc, #320]	; (8000cb4 <MX_GPIO_Init+0x17c>)
 8000b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b7c:	4b4d      	ldr	r3, [pc, #308]	; (8000cb4 <MX_GPIO_Init+0x17c>)
 8000b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	4b4a      	ldr	r3, [pc, #296]	; (8000cb4 <MX_GPIO_Init+0x17c>)
 8000b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b90:	4a48      	ldr	r2, [pc, #288]	; (8000cb4 <MX_GPIO_Init+0x17c>)
 8000b92:	f043 0301 	orr.w	r3, r3, #1
 8000b96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b9a:	4b46      	ldr	r3, [pc, #280]	; (8000cb4 <MX_GPIO_Init+0x17c>)
 8000b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba0:	f003 0301 	and.w	r3, r3, #1
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba8:	4b42      	ldr	r3, [pc, #264]	; (8000cb4 <MX_GPIO_Init+0x17c>)
 8000baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bae:	4a41      	ldr	r2, [pc, #260]	; (8000cb4 <MX_GPIO_Init+0x17c>)
 8000bb0:	f043 0302 	orr.w	r3, r3, #2
 8000bb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb8:	4b3e      	ldr	r3, [pc, #248]	; (8000cb4 <MX_GPIO_Init+0x17c>)
 8000bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc6:	4b3b      	ldr	r3, [pc, #236]	; (8000cb4 <MX_GPIO_Init+0x17c>)
 8000bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bcc:	4a39      	ldr	r2, [pc, #228]	; (8000cb4 <MX_GPIO_Init+0x17c>)
 8000bce:	f043 0308 	orr.w	r3, r3, #8
 8000bd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd6:	4b37      	ldr	r3, [pc, #220]	; (8000cb4 <MX_GPIO_Init+0x17c>)
 8000bd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bdc:	f003 0308 	and.w	r3, r3, #8
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000be4:	4b33      	ldr	r3, [pc, #204]	; (8000cb4 <MX_GPIO_Init+0x17c>)
 8000be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bea:	4a32      	ldr	r2, [pc, #200]	; (8000cb4 <MX_GPIO_Init+0x17c>)
 8000bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bf0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf4:	4b2f      	ldr	r3, [pc, #188]	; (8000cb4 <MX_GPIO_Init+0x17c>)
 8000bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000c08:	482b      	ldr	r0, [pc, #172]	; (8000cb8 <MX_GPIO_Init+0x180>)
 8000c0a:	f001 fb2b 	bl	8002264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2140      	movs	r1, #64	; 0x40
 8000c12:	482a      	ldr	r0, [pc, #168]	; (8000cbc <MX_GPIO_Init+0x184>)
 8000c14:	f001 fb26 	bl	8002264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c1e:	4b28      	ldr	r3, [pc, #160]	; (8000cc0 <MX_GPIO_Init+0x188>)
 8000c20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4825      	ldr	r0, [pc, #148]	; (8000cc4 <MX_GPIO_Init+0x18c>)
 8000c2e:	f001 f951 	bl	8001ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000c32:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c44:	f107 031c 	add.w	r3, r7, #28
 8000c48:	4619      	mov	r1, r3
 8000c4a:	481b      	ldr	r0, [pc, #108]	; (8000cb8 <MX_GPIO_Init+0x180>)
 8000c4c:	f001 f942 	bl	8001ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c50:	2320      	movs	r3, #32
 8000c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c54:	2300      	movs	r3, #0
 8000c56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c5c:	f107 031c 	add.w	r3, r7, #28
 8000c60:	4619      	mov	r1, r3
 8000c62:	4816      	ldr	r0, [pc, #88]	; (8000cbc <MX_GPIO_Init+0x184>)
 8000c64:	f001 f936 	bl	8001ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c68:	2340      	movs	r3, #64	; 0x40
 8000c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	480f      	ldr	r0, [pc, #60]	; (8000cbc <MX_GPIO_Init+0x184>)
 8000c80:	f001 f928 	bl	8001ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c84:	2380      	movs	r3, #128	; 0x80
 8000c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c90:	f107 031c 	add.w	r3, r7, #28
 8000c94:	4619      	mov	r1, r3
 8000c96:	4809      	ldr	r0, [pc, #36]	; (8000cbc <MX_GPIO_Init+0x184>)
 8000c98:	f001 f91c 	bl	8001ed4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	2028      	movs	r0, #40	; 0x28
 8000ca2:	f000 fccc 	bl	800163e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ca6:	2028      	movs	r0, #40	; 0x28
 8000ca8:	f000 fce3 	bl	8001672 <HAL_NVIC_EnableIRQ>

}
 8000cac:	bf00      	nop
 8000cae:	3730      	adds	r7, #48	; 0x30
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	58024400 	.word	0x58024400
 8000cb8:	58020400 	.word	0x58020400
 8000cbc:	58021800 	.word	0x58021800
 8000cc0:	11110000 	.word	0x11110000
 8000cc4:	58020800 	.word	0x58020800

08000cc8 <scrivi_speed>:
		indox=indox+f_printf(&writeFile,"%d:%d.%d,%d,%d\n",Time[0],Time[1],Time[2],curr,indox);}
		res = f_close(&writeFile);

	return res;
}
FRESULT scrivi_speed(){
 8000cc8:	b590      	push	{r4, r7, lr}
 8000cca:	b087      	sub	sp, #28
 8000ccc:	af04      	add	r7, sp, #16
	   /* File system object for USER logical drive */
	//FIL USERFile;     /* File  object for USER */



		HAL_RTC_GetTime(&hrtc, &stimeststuctureget, RTC_FORMAT_BIN);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	4917      	ldr	r1, [pc, #92]	; (8000d30 <scrivi_speed+0x68>)
 8000cd2:	4818      	ldr	r0, [pc, #96]	; (8000d34 <scrivi_speed+0x6c>)
 8000cd4:	f005 fcf6 	bl	80066c4 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &Data, RTC_FORMAT_BIN);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	4917      	ldr	r1, [pc, #92]	; (8000d38 <scrivi_speed+0x70>)
 8000cdc:	4815      	ldr	r0, [pc, #84]	; (8000d34 <scrivi_speed+0x6c>)
 8000cde:	f005 fdfb 	bl	80068d8 <HAL_RTC_GetDate>
		Time[0] = stimeststuctureget.Hours;
 8000ce2:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <scrivi_speed+0x68>)
 8000ce4:	781a      	ldrb	r2, [r3, #0]
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <scrivi_speed+0x74>)
 8000ce8:	701a      	strb	r2, [r3, #0]
		Time[1] = stimeststuctureget.Minutes;
 8000cea:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <scrivi_speed+0x68>)
 8000cec:	785a      	ldrb	r2, [r3, #1]
 8000cee:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <scrivi_speed+0x74>)
 8000cf0:	705a      	strb	r2, [r3, #1]
		Time[2] = stimeststuctureget.Seconds;
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <scrivi_speed+0x68>)
 8000cf4:	789a      	ldrb	r2, [r3, #2]
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <scrivi_speed+0x74>)
 8000cf8:	709a      	strb	r2, [r3, #2]

	f_printf(&writeFile,"%d:%d.%d,%d,%d\n",Time[0],Time[1],Time[2],curr,indox);
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <scrivi_speed+0x74>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <scrivi_speed+0x74>)
 8000d02:	785b      	ldrb	r3, [r3, #1]
 8000d04:	461c      	mov	r4, r3
 8000d06:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <scrivi_speed+0x74>)
 8000d08:	789b      	ldrb	r3, [r3, #2]
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <scrivi_speed+0x78>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0c      	ldr	r2, [pc, #48]	; (8000d44 <scrivi_speed+0x7c>)
 8000d12:	6812      	ldr	r2, [r2, #0]
 8000d14:	9202      	str	r2, [sp, #8]
 8000d16:	9301      	str	r3, [sp, #4]
 8000d18:	9100      	str	r1, [sp, #0]
 8000d1a:	4623      	mov	r3, r4
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	490a      	ldr	r1, [pc, #40]	; (8000d48 <scrivi_speed+0x80>)
 8000d20:	480a      	ldr	r0, [pc, #40]	; (8000d4c <scrivi_speed+0x84>)
 8000d22:	f012 feb5 	bl	8013a90 <f_printf>


	return res;
 8000d26:	79fb      	ldrb	r3, [r7, #7]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd90      	pop	{r4, r7, pc}
 8000d30:	2400565c 	.word	0x2400565c
 8000d34:	24004540 	.word	0x24004540
 8000d38:	2400453c 	.word	0x2400453c
 8000d3c:	24004570 	.word	0x24004570
 8000d40:	240024d0 	.word	0x240024d0
 8000d44:	24000274 	.word	0x24000274
 8000d48:	08014d60 	.word	0x08014d60
 8000d4c:	24001478 	.word	0x24001478

08000d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
	...

08000d60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d66:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <HAL_MspInit+0x30>)
 8000d68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d6c:	4a08      	ldr	r2, [pc, #32]	; (8000d90 <HAL_MspInit+0x30>)
 8000d6e:	f043 0302 	orr.w	r3, r3, #2
 8000d72:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_MspInit+0x30>)
 8000d78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d7c:	f003 0302 	and.w	r3, r3, #2
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	58024400 	.word	0x58024400

08000d94 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08e      	sub	sp, #56	; 0x38
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a59      	ldr	r2, [pc, #356]	; (8000f18 <HAL_ETH_MspInit+0x184>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	f040 80ab 	bne.w	8000f0e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000db8:	4b58      	ldr	r3, [pc, #352]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000dba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dbe:	4a57      	ldr	r2, [pc, #348]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dc4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dc8:	4b54      	ldr	r3, [pc, #336]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000dca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dd2:	623b      	str	r3, [r7, #32]
 8000dd4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000dd6:	4b51      	ldr	r3, [pc, #324]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000dd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ddc:	4a4f      	ldr	r2, [pc, #316]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000de2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000de6:	4b4d      	ldr	r3, [pc, #308]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000de8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000df0:	61fb      	str	r3, [r7, #28]
 8000df2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000df4:	4b49      	ldr	r3, [pc, #292]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000df6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dfa:	4a48      	ldr	r2, [pc, #288]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e00:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e04:	4b45      	ldr	r3, [pc, #276]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000e06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0e:	61bb      	str	r3, [r7, #24]
 8000e10:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e12:	4b42      	ldr	r3, [pc, #264]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e18:	4a40      	ldr	r2, [pc, #256]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000e1a:	f043 0304 	orr.w	r3, r3, #4
 8000e1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e22:	4b3e      	ldr	r3, [pc, #248]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e28:	f003 0304 	and.w	r3, r3, #4
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e30:	4b3a      	ldr	r3, [pc, #232]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e36:	4a39      	ldr	r2, [pc, #228]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e40:	4b36      	ldr	r3, [pc, #216]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4e:	4b33      	ldr	r3, [pc, #204]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e54:	4a31      	ldr	r2, [pc, #196]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000e56:	f043 0302 	orr.w	r3, r3, #2
 8000e5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e5e:	4b2f      	ldr	r3, [pc, #188]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e64:	f003 0302 	and.w	r3, r3, #2
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e6c:	4b2b      	ldr	r3, [pc, #172]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e72:	4a2a      	ldr	r2, [pc, #168]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000e74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e7c:	4b27      	ldr	r3, [pc, #156]	; (8000f1c <HAL_ETH_MspInit+0x188>)
 8000e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e8a:	2332      	movs	r3, #50	; 0x32
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e9a:	230b      	movs	r3, #11
 8000e9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	481e      	ldr	r0, [pc, #120]	; (8000f20 <HAL_ETH_MspInit+0x18c>)
 8000ea6:	f001 f815 	bl	8001ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000eaa:	2386      	movs	r3, #134	; 0x86
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eba:	230b      	movs	r3, #11
 8000ebc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4817      	ldr	r0, [pc, #92]	; (8000f24 <HAL_ETH_MspInit+0x190>)
 8000ec6:	f001 f805 	bl	8001ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000eca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000edc:	230b      	movs	r3, #11
 8000ede:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4810      	ldr	r0, [pc, #64]	; (8000f28 <HAL_ETH_MspInit+0x194>)
 8000ee8:	f000 fff4 	bl	8001ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000eec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2300      	movs	r3, #0
 8000efc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000efe:	230b      	movs	r3, #11
 8000f00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f06:	4619      	mov	r1, r3
 8000f08:	4808      	ldr	r0, [pc, #32]	; (8000f2c <HAL_ETH_MspInit+0x198>)
 8000f0a:	f000 ffe3 	bl	8001ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000f0e:	bf00      	nop
 8000f10:	3738      	adds	r7, #56	; 0x38
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40028000 	.word	0x40028000
 8000f1c:	58024400 	.word	0x58024400
 8000f20:	58020800 	.word	0x58020800
 8000f24:	58020000 	.word	0x58020000
 8000f28:	58020400 	.word	0x58020400
 8000f2c:	58021800 	.word	0x58021800

08000f30 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a07      	ldr	r2, [pc, #28]	; (8000f5c <HAL_RTC_MspInit+0x2c>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d105      	bne.n	8000f4e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f42:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <HAL_RTC_MspInit+0x30>)
 8000f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f46:	4a06      	ldr	r2, [pc, #24]	; (8000f60 <HAL_RTC_MspInit+0x30>)
 8000f48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f4c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	58004000 	.word	0x58004000
 8000f60:	58024400 	.word	0x58024400

08000f64 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a32      	ldr	r2, [pc, #200]	; (800104c <HAL_SD_MspInit+0xe8>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d15e      	bne.n	8001044 <HAL_SD_MspInit+0xe0>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000f86:	4b32      	ldr	r3, [pc, #200]	; (8001050 <HAL_SD_MspInit+0xec>)
 8000f88:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f8c:	4a30      	ldr	r2, [pc, #192]	; (8001050 <HAL_SD_MspInit+0xec>)
 8000f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f92:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000f96:	4b2e      	ldr	r3, [pc, #184]	; (8001050 <HAL_SD_MspInit+0xec>)
 8000f98:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa4:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <HAL_SD_MspInit+0xec>)
 8000fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000faa:	4a29      	ldr	r2, [pc, #164]	; (8001050 <HAL_SD_MspInit+0xec>)
 8000fac:	f043 0304 	orr.w	r3, r3, #4
 8000fb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fb4:	4b26      	ldr	r3, [pc, #152]	; (8001050 <HAL_SD_MspInit+0xec>)
 8000fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fba:	f003 0304 	and.w	r3, r3, #4
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc2:	4b23      	ldr	r3, [pc, #140]	; (8001050 <HAL_SD_MspInit+0xec>)
 8000fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc8:	4a21      	ldr	r2, [pc, #132]	; (8001050 <HAL_SD_MspInit+0xec>)
 8000fca:	f043 0308 	orr.w	r3, r3, #8
 8000fce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fd2:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <HAL_SD_MspInit+0xec>)
 8000fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd8:	f003 0308 	and.w	r3, r3, #8
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration    
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fe0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fea:	2301      	movs	r3, #1
 8000fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000ff2:	230c      	movs	r3, #12
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4815      	ldr	r0, [pc, #84]	; (8001054 <HAL_SD_MspInit+0xf0>)
 8000ffe:	f000 ff69 	bl	8001ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001002:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001010:	2303      	movs	r3, #3
 8001012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001014:	230c      	movs	r3, #12
 8001016:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	4619      	mov	r1, r3
 800101e:	480d      	ldr	r0, [pc, #52]	; (8001054 <HAL_SD_MspInit+0xf0>)
 8001020:	f000 ff58 	bl	8001ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001024:	2304      	movs	r3, #4
 8001026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800102c:	2301      	movs	r3, #1
 800102e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001030:	2303      	movs	r3, #3
 8001032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001034:	230c      	movs	r3, #12
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4619      	mov	r1, r3
 800103e:	4806      	ldr	r0, [pc, #24]	; (8001058 <HAL_SD_MspInit+0xf4>)
 8001040:	f000 ff48 	bl	8001ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001044:	bf00      	nop
 8001046:	3728      	adds	r7, #40	; 0x28
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	52007000 	.word	0x52007000
 8001050:	58024400 	.word	0x58024400
 8001054:	58020800 	.word	0x58020800
 8001058:	58020c00 	.word	0x58020c00

0800105c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08a      	sub	sp, #40	; 0x28
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a1a      	ldr	r2, [pc, #104]	; (80010e4 <HAL_UART_MspInit+0x88>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d12e      	bne.n	80010dc <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <HAL_UART_MspInit+0x8c>)
 8001080:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001084:	4a18      	ldr	r2, [pc, #96]	; (80010e8 <HAL_UART_MspInit+0x8c>)
 8001086:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800108a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800108e:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <HAL_UART_MspInit+0x8c>)
 8001090:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001094:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_UART_MspInit+0x8c>)
 800109e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a2:	4a11      	ldr	r2, [pc, #68]	; (80010e8 <HAL_UART_MspInit+0x8c>)
 80010a4:	f043 0308 	orr.w	r3, r3, #8
 80010a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ac:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <HAL_UART_MspInit+0x8c>)
 80010ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b2:	f003 0308 	and.w	r3, r3, #8
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80010ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c0:	2302      	movs	r3, #2
 80010c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	2300      	movs	r3, #0
 80010ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010cc:	2307      	movs	r3, #7
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4619      	mov	r1, r3
 80010d6:	4805      	ldr	r0, [pc, #20]	; (80010ec <HAL_UART_MspInit+0x90>)
 80010d8:	f000 fefc 	bl	8001ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010dc:	bf00      	nop
 80010de:	3728      	adds	r7, #40	; 0x28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40004800 	.word	0x40004800
 80010e8:	58024400 	.word	0x58024400
 80010ec:	58020c00 	.word	0x58020c00

080010f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001102:	e7fe      	b.n	8001102 <HardFault_Handler+0x4>

08001104 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <MemManage_Handler+0x4>

0800110a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110e:	e7fe      	b.n	800110e <BusFault_Handler+0x4>

08001110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <UsageFault_Handler+0x4>

08001116 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001144:	f000 f93e 	bl	80013c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}

0800114c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001150:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001154:	f001 f89f 	bl	8002296 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}

0800115c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <OTG_FS_IRQHandler+0x10>)
 8001162:	f001 fa44 	bl	80025ee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	24007bd8 	.word	0x24007bd8

08001170 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <_sbrk+0x50>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d102      	bne.n	8001186 <_sbrk+0x16>
		heap_end = &end;
 8001180:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <_sbrk+0x50>)
 8001182:	4a10      	ldr	r2, [pc, #64]	; (80011c4 <_sbrk+0x54>)
 8001184:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <_sbrk+0x50>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <_sbrk+0x50>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4413      	add	r3, r2
 8001194:	466a      	mov	r2, sp
 8001196:	4293      	cmp	r3, r2
 8001198:	d907      	bls.n	80011aa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800119a:	f013 fcd9 	bl	8014b50 <__errno>
 800119e:	4602      	mov	r2, r0
 80011a0:	230c      	movs	r3, #12
 80011a2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80011a4:	f04f 33ff 	mov.w	r3, #4294967295
 80011a8:	e006      	b.n	80011b8 <_sbrk+0x48>
	}

	heap_end += incr;
 80011aa:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <_sbrk+0x50>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	4a03      	ldr	r2, [pc, #12]	; (80011c0 <_sbrk+0x50>)
 80011b4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80011b6:	68fb      	ldr	r3, [r7, #12]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	24000278 	.word	0x24000278
 80011c4:	24007fe8 	.word	0x24007fe8

080011c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011cc:	4b29      	ldr	r3, [pc, #164]	; (8001274 <SystemInit+0xac>)
 80011ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011d2:	4a28      	ldr	r2, [pc, #160]	; (8001274 <SystemInit+0xac>)
 80011d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011dc:	4b26      	ldr	r3, [pc, #152]	; (8001278 <SystemInit+0xb0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a25      	ldr	r2, [pc, #148]	; (8001278 <SystemInit+0xb0>)
 80011e2:	f043 0301 	orr.w	r3, r3, #1
 80011e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011e8:	4b23      	ldr	r3, [pc, #140]	; (8001278 <SystemInit+0xb0>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011ee:	4b22      	ldr	r3, [pc, #136]	; (8001278 <SystemInit+0xb0>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	4921      	ldr	r1, [pc, #132]	; (8001278 <SystemInit+0xb0>)
 80011f4:	4b21      	ldr	r3, [pc, #132]	; (800127c <SystemInit+0xb4>)
 80011f6:	4013      	ands	r3, r2
 80011f8:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011fa:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <SystemInit+0xb0>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001200:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <SystemInit+0xb0>)
 8001202:	2200      	movs	r2, #0
 8001204:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001206:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <SystemInit+0xb0>)
 8001208:	2200      	movs	r2, #0
 800120a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800120c:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <SystemInit+0xb0>)
 800120e:	2200      	movs	r2, #0
 8001210:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8001212:	4b19      	ldr	r3, [pc, #100]	; (8001278 <SystemInit+0xb0>)
 8001214:	2200      	movs	r2, #0
 8001216:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001218:	4b17      	ldr	r3, [pc, #92]	; (8001278 <SystemInit+0xb0>)
 800121a:	2200      	movs	r2, #0
 800121c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800121e:	4b16      	ldr	r3, [pc, #88]	; (8001278 <SystemInit+0xb0>)
 8001220:	2200      	movs	r2, #0
 8001222:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001224:	4b14      	ldr	r3, [pc, #80]	; (8001278 <SystemInit+0xb0>)
 8001226:	2200      	movs	r2, #0
 8001228:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800122a:	4b13      	ldr	r3, [pc, #76]	; (8001278 <SystemInit+0xb0>)
 800122c:	2200      	movs	r2, #0
 800122e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <SystemInit+0xb0>)
 8001232:	2200      	movs	r2, #0
 8001234:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <SystemInit+0xb0>)
 8001238:	2200      	movs	r2, #0
 800123a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800123c:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <SystemInit+0xb0>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a0d      	ldr	r2, [pc, #52]	; (8001278 <SystemInit+0xb0>)
 8001242:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001246:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001248:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <SystemInit+0xb0>)
 800124a:	2200      	movs	r2, #0
 800124c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800124e:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <SystemInit+0xb8>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <SystemInit+0xbc>)
 8001254:	4013      	ands	r3, r2
 8001256:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800125a:	d202      	bcs.n	8001262 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800125c:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <SystemInit+0xc0>)
 800125e:	2201      	movs	r2, #1
 8001260:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001262:	4b04      	ldr	r3, [pc, #16]	; (8001274 <SystemInit+0xac>)
 8001264:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001268:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000ed00 	.word	0xe000ed00
 8001278:	58024400 	.word	0x58024400
 800127c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001280:	5c001000 	.word	0x5c001000
 8001284:	ffff0000 	.word	0xffff0000
 8001288:	51008108 	.word	0x51008108

0800128c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800128c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001290:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001292:	e003      	b.n	800129c <LoopCopyDataInit>

08001294 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001296:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001298:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800129a:	3104      	adds	r1, #4

0800129c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800129c:	480b      	ldr	r0, [pc, #44]	; (80012cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80012a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012a4:	d3f6      	bcc.n	8001294 <CopyDataInit>
  ldr  r2, =_sbss
 80012a6:	4a0b      	ldr	r2, [pc, #44]	; (80012d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012a8:	e002      	b.n	80012b0 <LoopFillZerobss>

080012aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012ac:	f842 3b04 	str.w	r3, [r2], #4

080012b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012b0:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012b4:	d3f9      	bcc.n	80012aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012b6:	f7ff ff87 	bl	80011c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ba:	f013 fc4f 	bl	8014b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012be:	f7ff f9cb 	bl	8000658 <main>
  bx  lr    
 80012c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012c4:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80012c8:	080152d4 	.word	0x080152d4
  ldr  r0, =_sdata
 80012cc:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80012d0:	24000194 	.word	0x24000194
  ldr  r2, =_sbss
 80012d4:	24000258 	.word	0x24000258
  ldr  r3, = _ebss
 80012d8:	24007fe4 	.word	0x24007fe4

080012dc <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012dc:	e7fe      	b.n	80012dc <ADC3_IRQHandler>
	...

080012e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e6:	2003      	movs	r0, #3
 80012e8:	f000 f99e 	bl	8001628 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012ec:	f003 f808 	bl	8004300 <HAL_RCC_GetSysClockFreq>
 80012f0:	4601      	mov	r1, r0
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <HAL_Init+0x68>)
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	0a1b      	lsrs	r3, r3, #8
 80012f8:	f003 030f 	and.w	r3, r3, #15
 80012fc:	4a13      	ldr	r2, [pc, #76]	; (800134c <HAL_Init+0x6c>)
 80012fe:	5cd3      	ldrb	r3, [r2, r3]
 8001300:	f003 031f 	and.w	r3, r3, #31
 8001304:	fa21 f303 	lsr.w	r3, r1, r3
 8001308:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800130a:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <HAL_Init+0x68>)
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	f003 030f 	and.w	r3, r3, #15
 8001312:	4a0e      	ldr	r2, [pc, #56]	; (800134c <HAL_Init+0x6c>)
 8001314:	5cd3      	ldrb	r3, [r2, r3]
 8001316:	f003 031f 	and.w	r3, r3, #31
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	fa22 f303 	lsr.w	r3, r2, r3
 8001320:	4a0b      	ldr	r2, [pc, #44]	; (8001350 <HAL_Init+0x70>)
 8001322:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001324:	4a0b      	ldr	r2, [pc, #44]	; (8001354 <HAL_Init+0x74>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800132a:	2000      	movs	r0, #0
 800132c:	f000 f814 	bl	8001358 <HAL_InitTick>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e002      	b.n	8001340 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800133a:	f7ff fd11 	bl	8000d60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	58024400 	.word	0x58024400
 800134c:	08014e24 	.word	0x08014e24
 8001350:	24000010 	.word	0x24000010
 8001354:	2400000c 	.word	0x2400000c

08001358 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001360:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <HAL_InitTick+0x60>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d101      	bne.n	800136c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e021      	b.n	80013b0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800136c:	4b13      	ldr	r3, [pc, #76]	; (80013bc <HAL_InitTick+0x64>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <HAL_InitTick+0x60>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4619      	mov	r1, r3
 8001376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137a:	fbb3 f3f1 	udiv	r3, r3, r1
 800137e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001382:	4618      	mov	r0, r3
 8001384:	f000 f983 	bl	800168e <HAL_SYSTICK_Config>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e00e      	b.n	80013b0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b0f      	cmp	r3, #15
 8001396:	d80a      	bhi.n	80013ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001398:	2200      	movs	r2, #0
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	f04f 30ff 	mov.w	r0, #4294967295
 80013a0:	f000 f94d 	bl	800163e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a4:	4a06      	ldr	r2, [pc, #24]	; (80013c0 <HAL_InitTick+0x68>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	e000      	b.n	80013b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	24000018 	.word	0x24000018
 80013bc:	2400000c 	.word	0x2400000c
 80013c0:	24000014 	.word	0x24000014

080013c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_IncTick+0x20>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_IncTick+0x24>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4413      	add	r3, r2
 80013d4:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <HAL_IncTick+0x24>)
 80013d6:	6013      	str	r3, [r2, #0]
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	24000018 	.word	0x24000018
 80013e8:	24005670 	.word	0x24005670

080013ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return uwTick;
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <HAL_GetTick+0x14>)
 80013f2:	681b      	ldr	r3, [r3, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	24005670 	.word	0x24005670

08001404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800140c:	f7ff ffee 	bl	80013ec <HAL_GetTick>
 8001410:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800141c:	d005      	beq.n	800142a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <HAL_Delay+0x40>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4413      	add	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800142a:	bf00      	nop
 800142c:	f7ff ffde 	bl	80013ec <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	429a      	cmp	r2, r3
 800143a:	d8f7      	bhi.n	800142c <HAL_Delay+0x28>
  {
  }
}
 800143c:	bf00      	nop
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	24000018 	.word	0x24000018

08001448 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <HAL_GetREVID+0x14>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	0c1b      	lsrs	r3, r3, #16
}
 8001452:	4618      	mov	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	5c001000 	.word	0x5c001000

08001460 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001470:	4904      	ldr	r1, [pc, #16]	; (8001484 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4313      	orrs	r3, r2
 8001476:	604b      	str	r3, [r1, #4]
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	58000400 	.word	0x58000400

08001488 <__NVIC_SetPriorityGrouping>:
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <__NVIC_SetPriorityGrouping+0x40>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a4:	4013      	ands	r3, r2
 80014a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <__NVIC_SetPriorityGrouping+0x44>)
 80014b2:	4313      	orrs	r3, r2
 80014b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014b6:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <__NVIC_SetPriorityGrouping+0x40>)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	60d3      	str	r3, [r2, #12]
}
 80014bc:	bf00      	nop
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	e000ed00 	.word	0xe000ed00
 80014cc:	05fa0000 	.word	0x05fa0000

080014d0 <__NVIC_GetPriorityGrouping>:
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d4:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <__NVIC_GetPriorityGrouping+0x18>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	0a1b      	lsrs	r3, r3, #8
 80014da:	f003 0307 	and.w	r3, r3, #7
}
 80014de:	4618      	mov	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <__NVIC_EnableIRQ>:
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	db0b      	blt.n	8001516 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	f003 021f 	and.w	r2, r3, #31
 8001504:	4907      	ldr	r1, [pc, #28]	; (8001524 <__NVIC_EnableIRQ+0x38>)
 8001506:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800150a:	095b      	lsrs	r3, r3, #5
 800150c:	2001      	movs	r0, #1
 800150e:	fa00 f202 	lsl.w	r2, r0, r2
 8001512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000e100 	.word	0xe000e100

08001528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	6039      	str	r1, [r7, #0]
 8001532:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001534:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001538:	2b00      	cmp	r3, #0
 800153a:	db0a      	blt.n	8001552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	b2da      	uxtb	r2, r3
 8001540:	490c      	ldr	r1, [pc, #48]	; (8001574 <__NVIC_SetPriority+0x4c>)
 8001542:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001546:	0112      	lsls	r2, r2, #4
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	440b      	add	r3, r1
 800154c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001550:	e00a      	b.n	8001568 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	b2da      	uxtb	r2, r3
 8001556:	4908      	ldr	r1, [pc, #32]	; (8001578 <__NVIC_SetPriority+0x50>)
 8001558:	88fb      	ldrh	r3, [r7, #6]
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	3b04      	subs	r3, #4
 8001560:	0112      	lsls	r2, r2, #4
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	440b      	add	r3, r1
 8001566:	761a      	strb	r2, [r3, #24]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000e100 	.word	0xe000e100
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800157c:	b480      	push	{r7}
 800157e:	b089      	sub	sp, #36	; 0x24
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f1c3 0307 	rsb	r3, r3, #7
 8001596:	2b04      	cmp	r3, #4
 8001598:	bf28      	it	cs
 800159a:	2304      	movcs	r3, #4
 800159c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3304      	adds	r3, #4
 80015a2:	2b06      	cmp	r3, #6
 80015a4:	d902      	bls.n	80015ac <NVIC_EncodePriority+0x30>
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3b03      	subs	r3, #3
 80015aa:	e000      	b.n	80015ae <NVIC_EncodePriority+0x32>
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	f04f 32ff 	mov.w	r2, #4294967295
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43da      	mvns	r2, r3
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	401a      	ands	r2, r3
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c4:	f04f 31ff 	mov.w	r1, #4294967295
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	fa01 f303 	lsl.w	r3, r1, r3
 80015ce:	43d9      	mvns	r1, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d4:	4313      	orrs	r3, r2
         );
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3724      	adds	r7, #36	; 0x24
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015f4:	d301      	bcc.n	80015fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015f6:	2301      	movs	r3, #1
 80015f8:	e00f      	b.n	800161a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015fa:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <SysTick_Config+0x40>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3b01      	subs	r3, #1
 8001600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001602:	210f      	movs	r1, #15
 8001604:	f04f 30ff 	mov.w	r0, #4294967295
 8001608:	f7ff ff8e 	bl	8001528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800160c:	4b05      	ldr	r3, [pc, #20]	; (8001624 <SysTick_Config+0x40>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001612:	4b04      	ldr	r3, [pc, #16]	; (8001624 <SysTick_Config+0x40>)
 8001614:	2207      	movs	r2, #7
 8001616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	e000e010 	.word	0xe000e010

08001628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff ff29 	bl	8001488 <__NVIC_SetPriorityGrouping>
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b086      	sub	sp, #24
 8001642:	af00      	add	r7, sp, #0
 8001644:	4603      	mov	r3, r0
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
 800164a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800164c:	f7ff ff40 	bl	80014d0 <__NVIC_GetPriorityGrouping>
 8001650:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	68b9      	ldr	r1, [r7, #8]
 8001656:	6978      	ldr	r0, [r7, #20]
 8001658:	f7ff ff90 	bl	800157c <NVIC_EncodePriority>
 800165c:	4602      	mov	r2, r0
 800165e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001662:	4611      	mov	r1, r2
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff5f 	bl	8001528 <__NVIC_SetPriority>
}
 800166a:	bf00      	nop
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	4603      	mov	r3, r0
 800167a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800167c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff33 	bl	80014ec <__NVIC_EnableIRQ>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff ffa4 	bl	80015e4 <SysTick_Config>
 800169c:	4603      	mov	r3, r0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e0c6      	b.n	8001848 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d102      	bne.n	80016c8 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff fb66 	bl	8000d94 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2223      	movs	r2, #35	; 0x23
 80016cc:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ce:	4b60      	ldr	r3, [pc, #384]	; (8001850 <HAL_ETH_Init+0x1a8>)
 80016d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016d4:	4a5e      	ldr	r2, [pc, #376]	; (8001850 <HAL_ETH_Init+0x1a8>)
 80016d6:	f043 0302 	orr.w	r3, r3, #2
 80016da:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80016de:	4b5c      	ldr	r3, [pc, #368]	; (8001850 <HAL_ETH_Init+0x1a8>)
 80016e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	7a1b      	ldrb	r3, [r3, #8]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d103      	bne.n	80016fc <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80016f4:	2000      	movs	r0, #0
 80016f6:	f7ff feb3 	bl	8001460 <HAL_SYSCFG_ETHInterfaceSelect>
 80016fa:	e003      	b.n	8001704 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80016fc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001700:	f7ff feae 	bl	8001460 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 0201 	orr.w	r2, r2, #1
 8001716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800171a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800171c:	f7ff fe66 	bl	80013ec <HAL_GetTick>
 8001720:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001722:	e00f      	b.n	8001744 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001724:	f7ff fe62 	bl	80013ec <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001732:	d907      	bls.n	8001744 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2204      	movs	r2, #4
 8001738:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	22e0      	movs	r2, #224	; 0xe0
 800173e:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e081      	b.n	8001848 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1e6      	bne.n	8001724 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 fac0 	bl	8001cdc <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800175c:	f002 ff42 	bl	80045e4 <HAL_RCC_GetHCLKFreq>
 8001760:	4602      	mov	r2, r0
 8001762:	4b3c      	ldr	r3, [pc, #240]	; (8001854 <HAL_ETH_Init+0x1ac>)
 8001764:	fba3 2302 	umull	r2, r3, r3, r2
 8001768:	0c9a      	lsrs	r2, r3, #18
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	3a01      	subs	r2, #1
 8001770:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 fa13 	bl	8001ba0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001790:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001794:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d007      	beq.n	80017b2 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2201      	movs	r2, #1
 80017a6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	22e0      	movs	r2, #224	; 0xe0
 80017ac:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e04a      	b.n	8001848 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	f241 1308 	movw	r3, #4360	; 0x1108
 80017ba:	4413      	add	r3, r2
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	4b26      	ldr	r3, [pc, #152]	; (8001858 <HAL_ETH_Init+0x1b0>)
 80017c0:	4013      	ands	r3, r2
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	6952      	ldr	r2, [r2, #20]
 80017c6:	0052      	lsls	r2, r2, #1
 80017c8:	6879      	ldr	r1, [r7, #4]
 80017ca:	6809      	ldr	r1, [r1, #0]
 80017cc:	431a      	orrs	r2, r3
 80017ce:	f241 1308 	movw	r3, #4360	; 0x1108
 80017d2:	440b      	add	r3, r1
 80017d4:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f000 fad8 	bl	8001d8c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 fb1c 	bl	8001e1a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	3305      	adds	r3, #5
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	021a      	lsls	r2, r3, #8
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	3304      	adds	r3, #4
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	4619      	mov	r1, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	3303      	adds	r3, #3
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	061a      	lsls	r2, r3, #24
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	3302      	adds	r3, #2
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	041b      	lsls	r3, r3, #16
 8001814:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	3301      	adds	r3, #1
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001820:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800182e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001830:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2210      	movs	r2, #16
 800183e:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2210      	movs	r2, #16
 8001844:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	58024400 	.word	0x58024400
 8001854:	431bde83 	.word	0x431bde83
 8001858:	ffff8001 	.word	0xffff8001

0800185c <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800186e:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	791b      	ldrb	r3, [r3, #4]
 8001874:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001876:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	7b1b      	ldrb	r3, [r3, #12]
 800187c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800187e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	7b5b      	ldrb	r3, [r3, #13]
 8001884:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001886:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	7b9b      	ldrb	r3, [r3, #14]
 800188c:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800188e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	7bdb      	ldrb	r3, [r3, #15]
 8001894:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001896:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	7c12      	ldrb	r2, [r2, #16]
 800189c:	2a00      	cmp	r2, #0
 800189e:	d102      	bne.n	80018a6 <ETH_SetMACConfig+0x4a>
 80018a0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80018a4:	e000      	b.n	80018a8 <ETH_SetMACConfig+0x4c>
 80018a6:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80018a8:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	7c52      	ldrb	r2, [r2, #17]
 80018ae:	2a00      	cmp	r2, #0
 80018b0:	d102      	bne.n	80018b8 <ETH_SetMACConfig+0x5c>
 80018b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018b6:	e000      	b.n	80018ba <ETH_SetMACConfig+0x5e>
 80018b8:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80018ba:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	7c9b      	ldrb	r3, [r3, #18]
 80018c0:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80018c2:	431a      	orrs	r2, r3
                                macconf->Speed |
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80018c8:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80018ce:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	7f1b      	ldrb	r3, [r3, #28]
 80018d4:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80018d6:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	7f5b      	ldrb	r3, [r3, #29]
 80018dc:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80018de:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	7f92      	ldrb	r2, [r2, #30]
 80018e4:	2a00      	cmp	r2, #0
 80018e6:	d102      	bne.n	80018ee <ETH_SetMACConfig+0x92>
 80018e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018ec:	e000      	b.n	80018f0 <ETH_SetMACConfig+0x94>
 80018ee:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80018f0:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	7fdb      	ldrb	r3, [r3, #31]
 80018f6:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80018f8:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001900:	2a00      	cmp	r2, #0
 8001902:	d102      	bne.n	800190a <ETH_SetMACConfig+0xae>
 8001904:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001908:	e000      	b.n	800190c <ETH_SetMACConfig+0xb0>
 800190a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800190c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001912:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800191a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 800191c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8001922:	4313      	orrs	r3, r2
 8001924:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4b56      	ldr	r3, [pc, #344]	; (8001a88 <ETH_SetMACConfig+0x22c>)
 800192e:	4013      	ands	r3, r2
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	68f9      	ldr	r1, [r7, #12]
 8001936:	430b      	orrs	r3, r1
 8001938:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800193e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001946:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001948:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001950:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001952:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800195a:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800195c:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001964:	2a00      	cmp	r2, #0
 8001966:	d102      	bne.n	800196e <ETH_SetMACConfig+0x112>
 8001968:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800196c:	e000      	b.n	8001970 <ETH_SetMACConfig+0x114>
 800196e:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001970:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001976:	4313      	orrs	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	4b42      	ldr	r3, [pc, #264]	; (8001a8c <ETH_SetMACConfig+0x230>)
 8001982:	4013      	ands	r3, r2
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6812      	ldr	r2, [r2, #0]
 8001988:	68f9      	ldr	r1, [r7, #12]
 800198a:	430b      	orrs	r3, r1
 800198c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001994:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800199a:	4313      	orrs	r3, r2
 800199c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68da      	ldr	r2, [r3, #12]
 80019a4:	4b3a      	ldr	r3, [pc, #232]	; (8001a90 <ETH_SetMACConfig+0x234>)
 80019a6:	4013      	ands	r3, r2
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	6812      	ldr	r2, [r2, #0]
 80019ac:	68f9      	ldr	r1, [r7, #12]
 80019ae:	430b      	orrs	r3, r1
 80019b0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80019b8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80019be:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80019c6:	2a00      	cmp	r2, #0
 80019c8:	d101      	bne.n	80019ce <ETH_SetMACConfig+0x172>
 80019ca:	2280      	movs	r2, #128	; 0x80
 80019cc:	e000      	b.n	80019d0 <ETH_SetMACConfig+0x174>
 80019ce:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80019d0:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019d6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80019d8:	4313      	orrs	r3, r2
 80019da:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80019e2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80019e6:	4013      	ands	r3, r2
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	68f9      	ldr	r1, [r7, #12]
 80019ee:	430b      	orrs	r3, r1
 80019f0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80019f8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001a00:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001a02:	4313      	orrs	r3, r2
 8001a04:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a0e:	f023 0103 	bic.w	r1, r3, #3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001a26:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	430a      	orrs	r2, r1
 8001a34:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001a42:	2a00      	cmp	r2, #0
 8001a44:	d101      	bne.n	8001a4a <ETH_SetMACConfig+0x1ee>
 8001a46:	2240      	movs	r2, #64	; 0x40
 8001a48:	e000      	b.n	8001a4c <ETH_SetMACConfig+0x1f0>
 8001a4a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001a4c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001a54:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a56:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001a5e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001a60:	4313      	orrs	r3, r2
 8001a62:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001a6c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	00048083 	.word	0x00048083
 8001a8c:	c0f88000 	.word	0xc0f88000
 8001a90:	fffffef0 	.word	0xfffffef0

08001a94 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b38      	ldr	r3, [pc, #224]	; (8001b8c <ETH_SetDMAConfig+0xf8>)
 8001aaa:	4013      	ands	r3, r2
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	6812      	ldr	r2, [r2, #0]
 8001ab0:	6879      	ldr	r1, [r7, #4]
 8001ab2:	6809      	ldr	r1, [r1, #0]
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001aba:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	791b      	ldrb	r3, [r3, #4]
 8001ac0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001ac6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	7b1b      	ldrb	r3, [r3, #12]
 8001acc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	f241 0304 	movw	r3, #4100	; 0x1004
 8001ada:	4413      	add	r3, r2
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	4b2c      	ldr	r3, [pc, #176]	; (8001b90 <ETH_SetDMAConfig+0xfc>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	6811      	ldr	r1, [r2, #0]
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	f241 0304 	movw	r3, #4100	; 0x1004
 8001aee:	440b      	add	r3, r1
 8001af0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	7b5b      	ldrb	r3, [r3, #13]
 8001af6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001afc:	4313      	orrs	r3, r2
 8001afe:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	4b22      	ldr	r3, [pc, #136]	; (8001b94 <ETH_SetDMAConfig+0x100>)
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6811      	ldr	r1, [r2, #0]
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	431a      	orrs	r2, r3
 8001b16:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001b1a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	7d1b      	ldrb	r3, [r3, #20]
 8001b24:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b26:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	7f5b      	ldrb	r3, [r3, #29]
 8001b2c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	f241 1304 	movw	r3, #4356	; 0x1104
 8001b3a:	4413      	add	r3, r2
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	4b16      	ldr	r3, [pc, #88]	; (8001b98 <ETH_SetDMAConfig+0x104>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6811      	ldr	r1, [r2, #0]
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	f241 1304 	movw	r3, #4356	; 0x1104
 8001b4e:	440b      	add	r3, r1
 8001b50:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	7f1b      	ldrb	r3, [r3, #28]
 8001b56:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	f241 1308 	movw	r3, #4360	; 0x1108
 8001b68:	4413      	add	r3, r2
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <ETH_SetDMAConfig+0x108>)
 8001b6e:	4013      	ands	r3, r2
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6811      	ldr	r1, [r2, #0]
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	431a      	orrs	r2, r3
 8001b78:	f241 1308 	movw	r3, #4360	; 0x1108
 8001b7c:	440b      	add	r3, r1
 8001b7e:	601a      	str	r2, [r3, #0]
}
 8001b80:	bf00      	nop
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	ffff87fd 	.word	0xffff87fd
 8001b90:	ffff2ffe 	.word	0xffff2ffe
 8001b94:	fffec000 	.word	0xfffec000
 8001b98:	ffc0efef 	.word	0xffc0efef
 8001b9c:	7fc0ffff 	.word	0x7fc0ffff

08001ba0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b0a4      	sub	sp, #144	; 0x90
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001bdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001be0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001be2:	2300      	movs	r3, #0
 8001be4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001bf8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001bfc:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001c04:	2300      	movs	r3, #0
 8001c06:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001c22:	2300      	movs	r3, #0
 8001c24:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001c26:	2300      	movs	r3, #0
 8001c28:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001c32:	2301      	movs	r3, #1
 8001c34:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001c38:	2320      	movs	r3, #32
 8001c3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001c44:	2300      	movs	r3, #0
 8001c46:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001c4a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001c50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c54:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001c56:	2300      	movs	r3, #0
 8001c58:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001c62:	2300      	movs	r3, #0
 8001c64:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001c74:	2301      	movs	r3, #1
 8001c76:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001c84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c88:	4619      	mov	r1, r3
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff fde6 	bl	800185c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001c90:	2301      	movs	r3, #1
 8001c92:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001c94:	2301      	movs	r3, #1
 8001c96:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001caa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001cae:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001cb4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001cb8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001cc0:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001cc4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001cc6:	f107 0308 	add.w	r3, r7, #8
 8001cca:	4619      	mov	r1, r3
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff fee1 	bl	8001a94 <ETH_SetDMAConfig>
}
 8001cd2:	bf00      	nop
 8001cd4:	3790      	adds	r7, #144	; 0x90
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001cec:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cf4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001cf6:	f002 fc75 	bl	80045e4 <HAL_RCC_GetHCLKFreq>
 8001cfa:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	4a1e      	ldr	r2, [pc, #120]	; (8001d78 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d908      	bls.n	8001d16 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	4a1d      	ldr	r2, [pc, #116]	; (8001d7c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d804      	bhi.n	8001d16 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	e027      	b.n	8001d66 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	4a18      	ldr	r2, [pc, #96]	; (8001d7c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d908      	bls.n	8001d30 <ETH_MAC_MDIO_ClkConfig+0x54>
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	4a17      	ldr	r2, [pc, #92]	; (8001d80 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d804      	bhi.n	8001d30 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	e01a      	b.n	8001d66 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	4a13      	ldr	r2, [pc, #76]	; (8001d80 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d903      	bls.n	8001d40 <ETH_MAC_MDIO_ClkConfig+0x64>
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	4a12      	ldr	r2, [pc, #72]	; (8001d84 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d911      	bls.n	8001d64 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	4a10      	ldr	r2, [pc, #64]	; (8001d84 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d908      	bls.n	8001d5a <ETH_MAC_MDIO_ClkConfig+0x7e>
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	4a0f      	ldr	r2, [pc, #60]	; (8001d88 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d804      	bhi.n	8001d5a <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	e005      	b.n	8001d66 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	e000      	b.n	8001d66 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001d64:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001d70:	bf00      	nop
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	01312cff 	.word	0x01312cff
 8001d7c:	02160ebf 	.word	0x02160ebf
 8001d80:	039386ff 	.word	0x039386ff
 8001d84:	05f5e0ff 	.word	0x05f5e0ff
 8001d88:	08f0d17f 	.word	0x08f0d17f

08001d8c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d94:	2300      	movs	r3, #0
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	e01d      	b.n	8001dd6 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68d9      	ldr	r1, [r3, #12]
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	4613      	mov	r3, r2
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	4413      	add	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	440b      	add	r3, r1
 8001daa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	2200      	movs	r2, #0
 8001db6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001dc4:	68b9      	ldr	r1, [r7, #8]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	3206      	adds	r2, #6
 8001dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2b03      	cmp	r3, #3
 8001dda:	d9de      	bls.n	8001d9a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	f241 132c 	movw	r3, #4396	; 0x112c
 8001dea:	4413      	add	r3, r2
 8001dec:	2203      	movs	r2, #3
 8001dee:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68d9      	ldr	r1, [r3, #12]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	f241 1314 	movw	r3, #4372	; 0x1114
 8001dfc:	4413      	add	r3, r2
 8001dfe:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68da      	ldr	r2, [r3, #12]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001e0c:	601a      	str	r2, [r3, #0]
}
 8001e0e:	bf00      	nop
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b085      	sub	sp, #20
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	e024      	b.n	8001e72 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6919      	ldr	r1, [r3, #16]
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	4413      	add	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	440b      	add	r3, r1
 8001e38:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	2200      	movs	r2, #0
 8001e44:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	2200      	movs	r2, #0
 8001e56:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	330a      	adds	r3, #10
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	440b      	add	r3, r1
 8001e6a:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2b03      	cmp	r3, #3
 8001e76:	d9d7      	bls.n	8001e28 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	f241 1330 	movw	r3, #4400	; 0x1130
 8001e9e:	4413      	add	r3, r2
 8001ea0:	2203      	movs	r2, #3
 8001ea2:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6919      	ldr	r1, [r3, #16]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	f241 131c 	movw	r3, #4380	; 0x111c
 8001eb0:	4413      	add	r3, r2
 8001eb2:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	f241 1328 	movw	r3, #4392	; 0x1128
 8001ec4:	4413      	add	r3, r2
 8001ec6:	6019      	str	r1, [r3, #0]
}
 8001ec8:	bf00      	nop
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b089      	sub	sp, #36	; 0x24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001ee2:	4b89      	ldr	r3, [pc, #548]	; (8002108 <HAL_GPIO_Init+0x234>)
 8001ee4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ee6:	e194      	b.n	8002212 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	2101      	movs	r1, #1
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 8186 	beq.w	800220c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d00b      	beq.n	8001f20 <HAL_GPIO_Init+0x4c>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d007      	beq.n	8001f20 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f14:	2b11      	cmp	r3, #17
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b12      	cmp	r3, #18
 8001f1e:	d130      	bne.n	8001f82 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	2203      	movs	r2, #3
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f56:	2201      	movs	r2, #1
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4013      	ands	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	091b      	lsrs	r3, r3, #4
 8001f6c:	f003 0201 	and.w	r2, r3, #1
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4013      	ands	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_Init+0xee>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b12      	cmp	r3, #18
 8001fc0:	d123      	bne.n	800200a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	08da      	lsrs	r2, r3, #3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	3208      	adds	r2, #8
 8001fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	220f      	movs	r2, #15
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	691a      	ldr	r2, [r3, #16]
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	08da      	lsrs	r2, r3, #3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3208      	adds	r2, #8
 8002004:	69b9      	ldr	r1, [r7, #24]
 8002006:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	2203      	movs	r2, #3
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4013      	ands	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f003 0203 	and.w	r2, r3, #3
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4313      	orrs	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 80e0 	beq.w	800220c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204c:	4b2f      	ldr	r3, [pc, #188]	; (800210c <HAL_GPIO_Init+0x238>)
 800204e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002052:	4a2e      	ldr	r2, [pc, #184]	; (800210c <HAL_GPIO_Init+0x238>)
 8002054:	f043 0302 	orr.w	r3, r3, #2
 8002058:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800205c:	4b2b      	ldr	r3, [pc, #172]	; (800210c <HAL_GPIO_Init+0x238>)
 800205e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800206a:	4a29      	ldr	r2, [pc, #164]	; (8002110 <HAL_GPIO_Init+0x23c>)
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	089b      	lsrs	r3, r3, #2
 8002070:	3302      	adds	r3, #2
 8002072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002076:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	220f      	movs	r2, #15
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4013      	ands	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a20      	ldr	r2, [pc, #128]	; (8002114 <HAL_GPIO_Init+0x240>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d052      	beq.n	800213c <HAL_GPIO_Init+0x268>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a1f      	ldr	r2, [pc, #124]	; (8002118 <HAL_GPIO_Init+0x244>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d031      	beq.n	8002102 <HAL_GPIO_Init+0x22e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a1e      	ldr	r2, [pc, #120]	; (800211c <HAL_GPIO_Init+0x248>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d02b      	beq.n	80020fe <HAL_GPIO_Init+0x22a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a1d      	ldr	r2, [pc, #116]	; (8002120 <HAL_GPIO_Init+0x24c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d025      	beq.n	80020fa <HAL_GPIO_Init+0x226>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a1c      	ldr	r2, [pc, #112]	; (8002124 <HAL_GPIO_Init+0x250>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d01f      	beq.n	80020f6 <HAL_GPIO_Init+0x222>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a1b      	ldr	r2, [pc, #108]	; (8002128 <HAL_GPIO_Init+0x254>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d019      	beq.n	80020f2 <HAL_GPIO_Init+0x21e>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a1a      	ldr	r2, [pc, #104]	; (800212c <HAL_GPIO_Init+0x258>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d013      	beq.n	80020ee <HAL_GPIO_Init+0x21a>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a19      	ldr	r2, [pc, #100]	; (8002130 <HAL_GPIO_Init+0x25c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d00d      	beq.n	80020ea <HAL_GPIO_Init+0x216>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a18      	ldr	r2, [pc, #96]	; (8002134 <HAL_GPIO_Init+0x260>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d007      	beq.n	80020e6 <HAL_GPIO_Init+0x212>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a17      	ldr	r2, [pc, #92]	; (8002138 <HAL_GPIO_Init+0x264>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d101      	bne.n	80020e2 <HAL_GPIO_Init+0x20e>
 80020de:	2309      	movs	r3, #9
 80020e0:	e02d      	b.n	800213e <HAL_GPIO_Init+0x26a>
 80020e2:	230a      	movs	r3, #10
 80020e4:	e02b      	b.n	800213e <HAL_GPIO_Init+0x26a>
 80020e6:	2308      	movs	r3, #8
 80020e8:	e029      	b.n	800213e <HAL_GPIO_Init+0x26a>
 80020ea:	2307      	movs	r3, #7
 80020ec:	e027      	b.n	800213e <HAL_GPIO_Init+0x26a>
 80020ee:	2306      	movs	r3, #6
 80020f0:	e025      	b.n	800213e <HAL_GPIO_Init+0x26a>
 80020f2:	2305      	movs	r3, #5
 80020f4:	e023      	b.n	800213e <HAL_GPIO_Init+0x26a>
 80020f6:	2304      	movs	r3, #4
 80020f8:	e021      	b.n	800213e <HAL_GPIO_Init+0x26a>
 80020fa:	2303      	movs	r3, #3
 80020fc:	e01f      	b.n	800213e <HAL_GPIO_Init+0x26a>
 80020fe:	2302      	movs	r3, #2
 8002100:	e01d      	b.n	800213e <HAL_GPIO_Init+0x26a>
 8002102:	2301      	movs	r3, #1
 8002104:	e01b      	b.n	800213e <HAL_GPIO_Init+0x26a>
 8002106:	bf00      	nop
 8002108:	58000080 	.word	0x58000080
 800210c:	58024400 	.word	0x58024400
 8002110:	58000400 	.word	0x58000400
 8002114:	58020000 	.word	0x58020000
 8002118:	58020400 	.word	0x58020400
 800211c:	58020800 	.word	0x58020800
 8002120:	58020c00 	.word	0x58020c00
 8002124:	58021000 	.word	0x58021000
 8002128:	58021400 	.word	0x58021400
 800212c:	58021800 	.word	0x58021800
 8002130:	58021c00 	.word	0x58021c00
 8002134:	58022000 	.word	0x58022000
 8002138:	58022400 	.word	0x58022400
 800213c:	2300      	movs	r3, #0
 800213e:	69fa      	ldr	r2, [r7, #28]
 8002140:	f002 0203 	and.w	r2, r2, #3
 8002144:	0092      	lsls	r2, r2, #2
 8002146:	4093      	lsls	r3, r2
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800214e:	4938      	ldr	r1, [pc, #224]	; (8002230 <HAL_GPIO_Init+0x35c>)
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	089b      	lsrs	r3, r3, #2
 8002154:	3302      	adds	r3, #2
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	43db      	mvns	r3, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4013      	ands	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	43db      	mvns	r3, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4013      	ands	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80021d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80021de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4313      	orrs	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002204:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	3301      	adds	r3, #1
 8002210:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	fa22 f303 	lsr.w	r3, r2, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	f47f ae63 	bne.w	8001ee8 <HAL_GPIO_Init+0x14>
  }
}
 8002222:	bf00      	nop
 8002224:	3724      	adds	r7, #36	; 0x24
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	58000400 	.word	0x58000400

08002234 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691a      	ldr	r2, [r3, #16]
 8002244:	887b      	ldrh	r3, [r7, #2]
 8002246:	4013      	ands	r3, r2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d002      	beq.n	8002252 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800224c:	2301      	movs	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
 8002250:	e001      	b.n	8002256 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002252:	2300      	movs	r3, #0
 8002254:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002256:	7bfb      	ldrb	r3, [r7, #15]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	807b      	strh	r3, [r7, #2]
 8002270:	4613      	mov	r3, r2
 8002272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002274:	787b      	ldrb	r3, [r7, #1]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800227a:	887a      	ldrh	r2, [r7, #2]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002280:	e003      	b.n	800228a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002282:	887b      	ldrh	r3, [r7, #2]
 8002284:	041a      	lsls	r2, r3, #16
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	619a      	str	r2, [r3, #24]
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	4603      	mov	r3, r0
 800229e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80022a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80022a8:	88fb      	ldrh	r3, [r7, #6]
 80022aa:	4013      	ands	r3, r2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d008      	beq.n	80022c2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022b4:	88fb      	ldrh	r3, [r7, #6]
 80022b6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022ba:	88fb      	ldrh	r3, [r7, #6]
 80022bc:	4618      	mov	r0, r3
 80022be:	f000 f804 	bl	80022ca <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	4603      	mov	r3, r0
 80022d2:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022e2:	b08f      	sub	sp, #60	; 0x3c
 80022e4:	af0a      	add	r7, sp, #40	; 0x28
 80022e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e116      	b.n	8002520 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b00      	cmp	r3, #0
 8002302:	d106      	bne.n	8002312 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f012 f8e3 	bl	80144d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2203      	movs	r2, #3
 8002316:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002322:	2b00      	cmp	r3, #0
 8002324:	d102      	bne.n	800232c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f009 faa8 	bl	800b886 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	603b      	str	r3, [r7, #0]
 800233c:	687e      	ldr	r6, [r7, #4]
 800233e:	466d      	mov	r5, sp
 8002340:	f106 0410 	add.w	r4, r6, #16
 8002344:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002346:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002348:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800234a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800234c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002350:	e885 0003 	stmia.w	r5, {r0, r1}
 8002354:	1d33      	adds	r3, r6, #4
 8002356:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002358:	6838      	ldr	r0, [r7, #0]
 800235a:	f009 f97f 	bl	800b65c <USB_CoreInit>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d005      	beq.n	8002370 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2202      	movs	r2, #2
 8002368:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0d7      	b.n	8002520 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2100      	movs	r1, #0
 8002376:	4618      	mov	r0, r3
 8002378:	f009 fa96 	bl	800b8a8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800237c:	2300      	movs	r3, #0
 800237e:	73fb      	strb	r3, [r7, #15]
 8002380:	e04a      	b.n	8002418 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002382:	7bfa      	ldrb	r2, [r7, #15]
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	1a9b      	subs	r3, r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	440b      	add	r3, r1
 8002390:	333d      	adds	r3, #61	; 0x3d
 8002392:	2201      	movs	r2, #1
 8002394:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002396:	7bfa      	ldrb	r2, [r7, #15]
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	4613      	mov	r3, r2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	1a9b      	subs	r3, r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	440b      	add	r3, r1
 80023a4:	333c      	adds	r3, #60	; 0x3c
 80023a6:	7bfa      	ldrb	r2, [r7, #15]
 80023a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023aa:	7bfa      	ldrb	r2, [r7, #15]
 80023ac:	7bfb      	ldrb	r3, [r7, #15]
 80023ae:	b298      	uxth	r0, r3
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	4613      	mov	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	1a9b      	subs	r3, r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	440b      	add	r3, r1
 80023bc:	3342      	adds	r3, #66	; 0x42
 80023be:	4602      	mov	r2, r0
 80023c0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023c2:	7bfa      	ldrb	r2, [r7, #15]
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	4613      	mov	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	1a9b      	subs	r3, r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	440b      	add	r3, r1
 80023d0:	333f      	adds	r3, #63	; 0x3f
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80023d6:	7bfa      	ldrb	r2, [r7, #15]
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	4613      	mov	r3, r2
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	1a9b      	subs	r3, r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	440b      	add	r3, r1
 80023e4:	3344      	adds	r3, #68	; 0x44
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80023ea:	7bfa      	ldrb	r2, [r7, #15]
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	1a9b      	subs	r3, r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	440b      	add	r3, r1
 80023f8:	3348      	adds	r3, #72	; 0x48
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023fe:	7bfa      	ldrb	r2, [r7, #15]
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	1a9b      	subs	r3, r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	440b      	add	r3, r1
 800240c:	3350      	adds	r3, #80	; 0x50
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002412:	7bfb      	ldrb	r3, [r7, #15]
 8002414:	3301      	adds	r3, #1
 8002416:	73fb      	strb	r3, [r7, #15]
 8002418:	7bfa      	ldrb	r2, [r7, #15]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	429a      	cmp	r2, r3
 8002420:	d3af      	bcc.n	8002382 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002422:	2300      	movs	r3, #0
 8002424:	73fb      	strb	r3, [r7, #15]
 8002426:	e044      	b.n	80024b2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002428:	7bfa      	ldrb	r2, [r7, #15]
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	4613      	mov	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	1a9b      	subs	r3, r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800243a:	2200      	movs	r2, #0
 800243c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800243e:	7bfa      	ldrb	r2, [r7, #15]
 8002440:	6879      	ldr	r1, [r7, #4]
 8002442:	4613      	mov	r3, r2
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	1a9b      	subs	r3, r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	440b      	add	r3, r1
 800244c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002450:	7bfa      	ldrb	r2, [r7, #15]
 8002452:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002454:	7bfa      	ldrb	r2, [r7, #15]
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	1a9b      	subs	r3, r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002466:	2200      	movs	r2, #0
 8002468:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800246a:	7bfa      	ldrb	r2, [r7, #15]
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	4613      	mov	r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	1a9b      	subs	r3, r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	440b      	add	r3, r1
 8002478:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002480:	7bfa      	ldrb	r2, [r7, #15]
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	4613      	mov	r3, r2
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	1a9b      	subs	r3, r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002496:	7bfa      	ldrb	r2, [r7, #15]
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	1a9b      	subs	r3, r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	440b      	add	r3, r1
 80024a4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	3301      	adds	r3, #1
 80024b0:	73fb      	strb	r3, [r7, #15]
 80024b2:	7bfa      	ldrb	r2, [r7, #15]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d3b5      	bcc.n	8002428 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	603b      	str	r3, [r7, #0]
 80024c2:	687e      	ldr	r6, [r7, #4]
 80024c4:	466d      	mov	r5, sp
 80024c6:	f106 0410 	add.w	r4, r6, #16
 80024ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80024da:	1d33      	adds	r3, r6, #4
 80024dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024de:	6838      	ldr	r0, [r7, #0]
 80024e0:	f009 fa0c 	bl	800b8fc <USB_DevInit>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d005      	beq.n	80024f6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2202      	movs	r2, #2
 80024ee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e014      	b.n	8002520 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250a:	2b01      	cmp	r3, #1
 800250c:	d102      	bne.n	8002514 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f001 f8ee 	bl	80036f0 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f00a fa42 	bl	800c9a2 <USB_DevDisconnect>

  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002528 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800253c:	2b01      	cmp	r3, #1
 800253e:	d101      	bne.n	8002544 <HAL_PCD_Start+0x1c>
 8002540:	2302      	movs	r3, #2
 8002542:	e020      	b.n	8002586 <HAL_PCD_Start+0x5e>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002550:	2b01      	cmp	r3, #1
 8002552:	d109      	bne.n	8002568 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002558:	2b01      	cmp	r3, #1
 800255a:	d005      	beq.n	8002568 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002560:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f00a fa00 	bl	800c972 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f009 f974 	bl	800b864 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b082      	sub	sp, #8
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800259c:	2b01      	cmp	r3, #1
 800259e:	d101      	bne.n	80025a4 <HAL_PCD_Stop+0x16>
 80025a0:	2302      	movs	r3, #2
 80025a2:	e020      	b.n	80025e6 <HAL_PCD_Stop+0x58>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f009 f968 	bl	800b886 <USB_DisableGlobalInt>

  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f00a f964 	bl	800c888 <USB_StopDevice>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d005      	beq.n	80025d2 <HAL_PCD_Stop+0x44>
  {
    __HAL_UNLOCK(hpcd);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e009      	b.n	80025e6 <HAL_PCD_Stop+0x58>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f00a f9e3 	bl	800c9a2 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80025ee:	b590      	push	{r4, r7, lr}
 80025f0:	b08d      	sub	sp, #52	; 0x34
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025fc:	6a3b      	ldr	r3, [r7, #32]
 80025fe:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f00a fa77 	bl	800caf8 <USB_GetMode>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	f040 83ca 	bne.w	8002da6 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f00a f9db 	bl	800c9d2 <USB_ReadInterrupts>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 83c0 	beq.w	8002da4 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f00a f9d2 	bl	800c9d2 <USB_ReadInterrupts>
 800262e:	4603      	mov	r3, r0
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b02      	cmp	r3, #2
 8002636:	d107      	bne.n	8002648 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	695a      	ldr	r2, [r3, #20]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f002 0202 	and.w	r2, r2, #2
 8002646:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f00a f9c0 	bl	800c9d2 <USB_ReadInterrupts>
 8002652:	4603      	mov	r3, r0
 8002654:	f003 0310 	and.w	r3, r3, #16
 8002658:	2b10      	cmp	r3, #16
 800265a:	d161      	bne.n	8002720 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	699a      	ldr	r2, [r3, #24]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0210 	bic.w	r2, r2, #16
 800266a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800266c:	6a3b      	ldr	r3, [r7, #32]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	f003 020f 	and.w	r2, r3, #15
 8002678:	4613      	mov	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	4413      	add	r3, r2
 8002688:	3304      	adds	r3, #4
 800268a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	0c5b      	lsrs	r3, r3, #17
 8002690:	f003 030f 	and.w	r3, r3, #15
 8002694:	2b02      	cmp	r3, #2
 8002696:	d124      	bne.n	80026e2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800269e:	4013      	ands	r3, r2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d035      	beq.n	8002710 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	091b      	lsrs	r3, r3, #4
 80026ac:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	461a      	mov	r2, r3
 80026b6:	6a38      	ldr	r0, [r7, #32]
 80026b8:	f009 ffe9 	bl	800c68e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	091b      	lsrs	r3, r3, #4
 80026c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026c8:	441a      	add	r2, r3
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	699a      	ldr	r2, [r3, #24]
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	091b      	lsrs	r3, r3, #4
 80026d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026da:	441a      	add	r2, r3
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	619a      	str	r2, [r3, #24]
 80026e0:	e016      	b.n	8002710 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	0c5b      	lsrs	r3, r3, #17
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	2b06      	cmp	r3, #6
 80026ec:	d110      	bne.n	8002710 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80026f4:	2208      	movs	r2, #8
 80026f6:	4619      	mov	r1, r3
 80026f8:	6a38      	ldr	r0, [r7, #32]
 80026fa:	f009 ffc8 	bl	800c68e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	699a      	ldr	r2, [r3, #24]
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	091b      	lsrs	r3, r3, #4
 8002706:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800270a:	441a      	add	r2, r3
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699a      	ldr	r2, [r3, #24]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0210 	orr.w	r2, r2, #16
 800271e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f00a f954 	bl	800c9d2 <USB_ReadInterrupts>
 800272a:	4603      	mov	r3, r0
 800272c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002730:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002734:	d16e      	bne.n	8002814 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002736:	2300      	movs	r3, #0
 8002738:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f00a f95a 	bl	800c9f8 <USB_ReadDevAllOutEpInterrupt>
 8002744:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002746:	e062      	b.n	800280e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d057      	beq.n	8002802 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	4611      	mov	r1, r2
 800275c:	4618      	mov	r0, r3
 800275e:	f00a f97f 	bl	800ca60 <USB_ReadDevOutEPInterrupt>
 8002762:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00c      	beq.n	8002788 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	015a      	lsls	r2, r3, #5
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	4413      	add	r3, r2
 8002776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800277a:	461a      	mov	r2, r3
 800277c:	2301      	movs	r3, #1
 800277e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002780:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 fe0a 	bl	800339c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00c      	beq.n	80027ac <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	015a      	lsls	r2, r3, #5
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	4413      	add	r3, r2
 800279a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800279e:	461a      	mov	r2, r3
 80027a0:	2308      	movs	r3, #8
 80027a2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80027a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 ff04 	bl	80035b4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	f003 0310 	and.w	r3, r3, #16
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d008      	beq.n	80027c8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	015a      	lsls	r2, r3, #5
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	4413      	add	r3, r2
 80027be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027c2:	461a      	mov	r2, r3
 80027c4:	2310      	movs	r3, #16
 80027c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	f003 0320 	and.w	r3, r3, #32
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d008      	beq.n	80027e4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	015a      	lsls	r2, r3, #5
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	4413      	add	r3, r2
 80027da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027de:	461a      	mov	r2, r3
 80027e0:	2320      	movs	r3, #32
 80027e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d009      	beq.n	8002802 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	015a      	lsls	r2, r3, #5
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027fa:	461a      	mov	r2, r3
 80027fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002800:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	3301      	adds	r3, #1
 8002806:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280a:	085b      	lsrs	r3, r3, #1
 800280c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800280e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002810:	2b00      	cmp	r3, #0
 8002812:	d199      	bne.n	8002748 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f00a f8da 	bl	800c9d2 <USB_ReadInterrupts>
 800281e:	4603      	mov	r3, r0
 8002820:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002824:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002828:	f040 80c0 	bne.w	80029ac <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f00a f8fb 	bl	800ca2c <USB_ReadDevAllInEpInterrupt>
 8002836:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800283c:	e0b2      	b.n	80029a4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800283e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 80a7 	beq.w	8002998 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	4611      	mov	r1, r2
 8002854:	4618      	mov	r0, r3
 8002856:	f00a f921 	bl	800ca9c <USB_ReadDevInEPInterrupt>
 800285a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d057      	beq.n	8002916 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	f003 030f 	and.w	r3, r3, #15
 800286c:	2201      	movs	r2, #1
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800287a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	43db      	mvns	r3, r3
 8002880:	69f9      	ldr	r1, [r7, #28]
 8002882:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002886:	4013      	ands	r3, r2
 8002888:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	015a      	lsls	r2, r3, #5
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	4413      	add	r3, r2
 8002892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002896:	461a      	mov	r2, r3
 8002898:	2301      	movs	r3, #1
 800289a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d132      	bne.n	800290a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a8:	4613      	mov	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	1a9b      	subs	r3, r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	3348      	adds	r3, #72	; 0x48
 80028b4:	6819      	ldr	r1, [r3, #0]
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ba:	4613      	mov	r3, r2
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	1a9b      	subs	r3, r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4403      	add	r3, r0
 80028c4:	3344      	adds	r3, #68	; 0x44
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4419      	add	r1, r3
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ce:	4613      	mov	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	1a9b      	subs	r3, r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4403      	add	r3, r0
 80028d8:	3348      	adds	r3, #72	; 0x48
 80028da:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d113      	bne.n	800290a <HAL_PCD_IRQHandler+0x31c>
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028e6:	4613      	mov	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	1a9b      	subs	r3, r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	440b      	add	r3, r1
 80028f0:	3350      	adds	r3, #80	; 0x50
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d108      	bne.n	800290a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6818      	ldr	r0, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002902:	461a      	mov	r2, r3
 8002904:	2101      	movs	r1, #1
 8002906:	f00a f929 	bl	800cb5c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	b2db      	uxtb	r3, r3
 800290e:	4619      	mov	r1, r3
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f011 fe60 	bl	80145d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	f003 0308 	and.w	r3, r3, #8
 800291c:	2b00      	cmp	r3, #0
 800291e:	d008      	beq.n	8002932 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	4413      	add	r3, r2
 8002928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800292c:	461a      	mov	r2, r3
 800292e:	2308      	movs	r3, #8
 8002930:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	f003 0310 	and.w	r3, r3, #16
 8002938:	2b00      	cmp	r3, #0
 800293a:	d008      	beq.n	800294e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	4413      	add	r3, r2
 8002944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002948:	461a      	mov	r2, r3
 800294a:	2310      	movs	r3, #16
 800294c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002954:	2b00      	cmp	r3, #0
 8002956:	d008      	beq.n	800296a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	015a      	lsls	r2, r3, #5
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	4413      	add	r3, r2
 8002960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002964:	461a      	mov	r2, r3
 8002966:	2340      	movs	r3, #64	; 0x40
 8002968:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d008      	beq.n	8002986 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	015a      	lsls	r2, r3, #5
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	4413      	add	r3, r2
 800297c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002980:	461a      	mov	r2, r3
 8002982:	2302      	movs	r3, #2
 8002984:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002990:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 fc75 	bl	8003282 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	3301      	adds	r3, #1
 800299c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800299e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a0:	085b      	lsrs	r3, r3, #1
 80029a2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80029a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f47f af49 	bne.w	800283e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f00a f80e 	bl	800c9d2 <USB_ReadInterrupts>
 80029b6:	4603      	mov	r3, r0
 80029b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80029bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029c0:	d122      	bne.n	8002a08 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	69fa      	ldr	r2, [r7, #28]
 80029cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029d0:	f023 0301 	bic.w	r3, r3, #1
 80029d4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d108      	bne.n	80029f2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80029e8:	2100      	movs	r1, #0
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 fea4 	bl	8003738 <HAL_PCDEx_LPM_Callback>
 80029f0:	e002      	b.n	80029f8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f011 fe66 	bl	80146c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695a      	ldr	r2, [r3, #20]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002a06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f009 ffe0 	bl	800c9d2 <USB_ReadInterrupts>
 8002a12:	4603      	mov	r3, r0
 8002a14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a1c:	d112      	bne.n	8002a44 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d102      	bne.n	8002a34 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f011 fe22 	bl	8014678 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	695a      	ldr	r2, [r3, #20]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002a42:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f009 ffc2 	bl	800c9d2 <USB_ReadInterrupts>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a58:	d121      	bne.n	8002a9e <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695a      	ldr	r2, [r3, #20]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002a68:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d111      	bne.n	8002a98 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a82:	089b      	lsrs	r3, r3, #2
 8002a84:	f003 020f 	and.w	r2, r3, #15
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002a8e:	2101      	movs	r1, #1
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 fe51 	bl	8003738 <HAL_PCDEx_LPM_Callback>
 8002a96:	e002      	b.n	8002a9e <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f011 fded 	bl	8014678 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f009 ff95 	bl	800c9d2 <USB_ReadInterrupts>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ab2:	f040 80c7 	bne.w	8002c44 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	69fa      	ldr	r2, [r7, #28]
 8002ac0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ac4:	f023 0301 	bic.w	r3, r3, #1
 8002ac8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2110      	movs	r1, #16
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f009 f871 	bl	800bbb8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ada:	e056      	b.n	8002b8a <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ade:	015a      	lsls	r2, r3, #5
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ae8:	461a      	mov	r2, r3
 8002aea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002aee:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af2:	015a      	lsls	r2, r3, #5
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	4413      	add	r3, r2
 8002af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b00:	0151      	lsls	r1, r2, #5
 8002b02:	69fa      	ldr	r2, [r7, #28]
 8002b04:	440a      	add	r2, r1
 8002b06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002b0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b0e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b12:	015a      	lsls	r2, r3, #5
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b20:	0151      	lsls	r1, r2, #5
 8002b22:	69fa      	ldr	r2, [r7, #28]
 8002b24:	440a      	add	r2, r1
 8002b26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002b2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002b2e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b32:	015a      	lsls	r2, r3, #5
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	4413      	add	r3, r2
 8002b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b42:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b46:	015a      	lsls	r2, r3, #5
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b54:	0151      	lsls	r1, r2, #5
 8002b56:	69fa      	ldr	r2, [r7, #28]
 8002b58:	440a      	add	r2, r1
 8002b5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b62:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b66:	015a      	lsls	r2, r3, #5
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b74:	0151      	lsls	r1, r2, #5
 8002b76:	69fa      	ldr	r2, [r7, #28]
 8002b78:	440a      	add	r2, r1
 8002b7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002b82:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b86:	3301      	adds	r3, #1
 8002b88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d3a3      	bcc.n	8002adc <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	69fa      	ldr	r2, [r7, #28]
 8002b9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ba2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002ba6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d016      	beq.n	8002bde <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bba:	69fa      	ldr	r2, [r7, #28]
 8002bbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bc0:	f043 030b 	orr.w	r3, r3, #11
 8002bc4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd0:	69fa      	ldr	r2, [r7, #28]
 8002bd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bd6:	f043 030b 	orr.w	r3, r3, #11
 8002bda:	6453      	str	r3, [r2, #68]	; 0x44
 8002bdc:	e015      	b.n	8002c0a <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002be4:	695a      	ldr	r2, [r3, #20]
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bec:	4619      	mov	r1, r3
 8002bee:	f242 032b 	movw	r3, #8235	; 0x202b
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	69fa      	ldr	r2, [r7, #28]
 8002c00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c04:	f043 030b 	orr.w	r3, r3, #11
 8002c08:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	69fa      	ldr	r2, [r7, #28]
 8002c14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c18:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002c1c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6818      	ldr	r0, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c2e:	461a      	mov	r2, r3
 8002c30:	f009 ff94 	bl	800cb5c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695a      	ldr	r2, [r3, #20]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002c42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f009 fec2 	bl	800c9d2 <USB_ReadInterrupts>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c58:	d124      	bne.n	8002ca4 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f009 ff58 	bl	800cb14 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f009 f806 	bl	800bc7a <USB_GetDevSpeed>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	461a      	mov	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681c      	ldr	r4, [r3, #0]
 8002c7a:	f001 fcb3 	bl	80045e4 <HAL_RCC_GetHCLKFreq>
 8002c7e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	461a      	mov	r2, r3
 8002c88:	4620      	mov	r0, r4
 8002c8a:	f008 fd49 	bl	800b720 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f011 fcc9 	bl	8014626 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	695a      	ldr	r2, [r3, #20]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002ca2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f009 fe92 	bl	800c9d2 <USB_ReadInterrupts>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	f003 0308 	and.w	r3, r3, #8
 8002cb4:	2b08      	cmp	r3, #8
 8002cb6:	d10a      	bne.n	8002cce <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f011 fca6 	bl	801460a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	695a      	ldr	r2, [r3, #20]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f002 0208 	and.w	r2, r2, #8
 8002ccc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f009 fe7d 	bl	800c9d2 <USB_ReadInterrupts>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ce2:	d10f      	bne.n	8002d04 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	4619      	mov	r1, r3
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f011 fd08 	bl	8014704 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	695a      	ldr	r2, [r3, #20]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002d02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f009 fe62 	bl	800c9d2 <USB_ReadInterrupts>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d18:	d10f      	bne.n	8002d3a <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	4619      	mov	r1, r3
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f011 fcdb 	bl	80146e0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	695a      	ldr	r2, [r3, #20]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002d38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f009 fe47 	bl	800c9d2 <USB_ReadInterrupts>
 8002d44:	4603      	mov	r3, r0
 8002d46:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d4e:	d10a      	bne.n	8002d66 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f011 fce9 	bl	8014728 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695a      	ldr	r2, [r3, #20]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002d64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f009 fe31 	bl	800c9d2 <USB_ReadInterrupts>
 8002d70:	4603      	mov	r3, r0
 8002d72:	f003 0304 	and.w	r3, r3, #4
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d115      	bne.n	8002da6 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f011 fcd9 	bl	8014744 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6859      	ldr	r1, [r3, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	605a      	str	r2, [r3, #4]
 8002da2:	e000      	b.n	8002da6 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8002da4:	bf00      	nop
    }
  }
}
 8002da6:	3734      	adds	r7, #52	; 0x34
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd90      	pop	{r4, r7, pc}

08002dac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	460b      	mov	r3, r1
 8002db6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d101      	bne.n	8002dc6 <HAL_PCD_SetAddress+0x1a>
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	e013      	b.n	8002dee <HAL_PCD_SetAddress+0x42>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	78fa      	ldrb	r2, [r7, #3]
 8002dd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	78fa      	ldrb	r2, [r7, #3]
 8002ddc:	4611      	mov	r1, r2
 8002dde:	4618      	mov	r0, r3
 8002de0:	f009 fda1 	bl	800c926 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b084      	sub	sp, #16
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
 8002dfe:	4608      	mov	r0, r1
 8002e00:	4611      	mov	r1, r2
 8002e02:	461a      	mov	r2, r3
 8002e04:	4603      	mov	r3, r0
 8002e06:	70fb      	strb	r3, [r7, #3]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	803b      	strh	r3, [r7, #0]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e10:	2300      	movs	r3, #0
 8002e12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	da0f      	bge.n	8002e3c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e1c:	78fb      	ldrb	r3, [r7, #3]
 8002e1e:	f003 020f 	and.w	r2, r3, #15
 8002e22:	4613      	mov	r3, r2
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	1a9b      	subs	r3, r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	3338      	adds	r3, #56	; 0x38
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	4413      	add	r3, r2
 8002e30:	3304      	adds	r3, #4
 8002e32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2201      	movs	r2, #1
 8002e38:	705a      	strb	r2, [r3, #1]
 8002e3a:	e00f      	b.n	8002e5c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e3c:	78fb      	ldrb	r3, [r7, #3]
 8002e3e:	f003 020f 	and.w	r2, r3, #15
 8002e42:	4613      	mov	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	1a9b      	subs	r3, r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	4413      	add	r3, r2
 8002e52:	3304      	adds	r3, #4
 8002e54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e5c:	78fb      	ldrb	r3, [r7, #3]
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002e68:	883a      	ldrh	r2, [r7, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	78ba      	ldrb	r2, [r7, #2]
 8002e72:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	785b      	ldrb	r3, [r3, #1]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d004      	beq.n	8002e86 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e86:	78bb      	ldrb	r3, [r7, #2]
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d102      	bne.n	8002e92 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d101      	bne.n	8002ea0 <HAL_PCD_EP_Open+0xaa>
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	e00e      	b.n	8002ebe <HAL_PCD_EP_Open+0xc8>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68f9      	ldr	r1, [r7, #12]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f008 ff08 	bl	800bcc4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002ebc:	7afb      	ldrb	r3, [r7, #11]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b084      	sub	sp, #16
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
 8002ece:	460b      	mov	r3, r1
 8002ed0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ed2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	da0f      	bge.n	8002efa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eda:	78fb      	ldrb	r3, [r7, #3]
 8002edc:	f003 020f 	and.w	r2, r3, #15
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	1a9b      	subs	r3, r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	3338      	adds	r3, #56	; 0x38
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	4413      	add	r3, r2
 8002eee:	3304      	adds	r3, #4
 8002ef0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	705a      	strb	r2, [r3, #1]
 8002ef8:	e00f      	b.n	8002f1a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002efa:	78fb      	ldrb	r3, [r7, #3]
 8002efc:	f003 020f 	and.w	r2, r3, #15
 8002f00:	4613      	mov	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	1a9b      	subs	r3, r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	4413      	add	r3, r2
 8002f10:	3304      	adds	r3, #4
 8002f12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002f1a:	78fb      	ldrb	r3, [r7, #3]
 8002f1c:	f003 030f 	and.w	r3, r3, #15
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d101      	bne.n	8002f34 <HAL_PCD_EP_Close+0x6e>
 8002f30:	2302      	movs	r3, #2
 8002f32:	e00e      	b.n	8002f52 <HAL_PCD_EP_Close+0x8c>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68f9      	ldr	r1, [r7, #12]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f008 ff46 	bl	800bdd4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b086      	sub	sp, #24
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	60f8      	str	r0, [r7, #12]
 8002f62:	607a      	str	r2, [r7, #4]
 8002f64:	603b      	str	r3, [r7, #0]
 8002f66:	460b      	mov	r3, r1
 8002f68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f6a:	7afb      	ldrb	r3, [r7, #11]
 8002f6c:	f003 020f 	and.w	r2, r3, #15
 8002f70:	4613      	mov	r3, r2
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	4413      	add	r3, r2
 8002f80:	3304      	adds	r3, #4
 8002f82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	2200      	movs	r2, #0
 8002f94:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f9c:	7afb      	ldrb	r3, [r7, #11]
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d102      	bne.n	8002fb6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fb6:	7afb      	ldrb	r3, [r7, #11]
 8002fb8:	f003 030f 	and.w	r3, r3, #15
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d109      	bne.n	8002fd4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6818      	ldr	r0, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	461a      	mov	r2, r3
 8002fcc:	6979      	ldr	r1, [r7, #20]
 8002fce:	f009 f9d1 	bl	800c374 <USB_EP0StartXfer>
 8002fd2:	e008      	b.n	8002fe6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6818      	ldr	r0, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	461a      	mov	r2, r3
 8002fe0:	6979      	ldr	r1, [r7, #20]
 8002fe2:	f008 ff7b 	bl	800bedc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002ffc:	78fb      	ldrb	r3, [r7, #3]
 8002ffe:	f003 020f 	and.w	r2, r3, #15
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	4613      	mov	r3, r2
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	1a9b      	subs	r3, r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003012:	681b      	ldr	r3, [r3, #0]
}
 8003014:	4618      	mov	r0, r3
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	607a      	str	r2, [r7, #4]
 800302a:	603b      	str	r3, [r7, #0]
 800302c:	460b      	mov	r3, r1
 800302e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003030:	7afb      	ldrb	r3, [r7, #11]
 8003032:	f003 020f 	and.w	r2, r3, #15
 8003036:	4613      	mov	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	1a9b      	subs	r3, r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	3338      	adds	r3, #56	; 0x38
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	4413      	add	r3, r2
 8003044:	3304      	adds	r3, #4
 8003046:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	2200      	movs	r2, #0
 8003058:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	2201      	movs	r2, #1
 800305e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003060:	7afb      	ldrb	r3, [r7, #11]
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	b2da      	uxtb	r2, r3
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d102      	bne.n	800307a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800307a:	7afb      	ldrb	r3, [r7, #11]
 800307c:	f003 030f 	and.w	r3, r3, #15
 8003080:	2b00      	cmp	r3, #0
 8003082:	d109      	bne.n	8003098 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6818      	ldr	r0, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	b2db      	uxtb	r3, r3
 800308e:	461a      	mov	r2, r3
 8003090:	6979      	ldr	r1, [r7, #20]
 8003092:	f009 f96f 	bl	800c374 <USB_EP0StartXfer>
 8003096:	e008      	b.n	80030aa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6818      	ldr	r0, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	461a      	mov	r2, r3
 80030a4:	6979      	ldr	r1, [r7, #20]
 80030a6:	f008 ff19 	bl	800bedc <USB_EPStartXfer>
  }

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	460b      	mov	r3, r1
 80030be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80030c0:	78fb      	ldrb	r3, [r7, #3]
 80030c2:	f003 020f 	and.w	r2, r3, #15
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d901      	bls.n	80030d2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e050      	b.n	8003174 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	da0f      	bge.n	80030fa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030da:	78fb      	ldrb	r3, [r7, #3]
 80030dc:	f003 020f 	and.w	r2, r3, #15
 80030e0:	4613      	mov	r3, r2
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	1a9b      	subs	r3, r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	3338      	adds	r3, #56	; 0x38
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	4413      	add	r3, r2
 80030ee:	3304      	adds	r3, #4
 80030f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2201      	movs	r2, #1
 80030f6:	705a      	strb	r2, [r3, #1]
 80030f8:	e00d      	b.n	8003116 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030fa:	78fa      	ldrb	r2, [r7, #3]
 80030fc:	4613      	mov	r3, r2
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	1a9b      	subs	r3, r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	4413      	add	r3, r2
 800310c:	3304      	adds	r3, #4
 800310e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2201      	movs	r2, #1
 800311a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800311c:	78fb      	ldrb	r3, [r7, #3]
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	b2da      	uxtb	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800312e:	2b01      	cmp	r3, #1
 8003130:	d101      	bne.n	8003136 <HAL_PCD_EP_SetStall+0x82>
 8003132:	2302      	movs	r3, #2
 8003134:	e01e      	b.n	8003174 <HAL_PCD_EP_SetStall+0xc0>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68f9      	ldr	r1, [r7, #12]
 8003144:	4618      	mov	r0, r3
 8003146:	f009 facb 	bl	800c6e0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800314a:	78fb      	ldrb	r3, [r7, #3]
 800314c:	f003 030f 	and.w	r3, r3, #15
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10a      	bne.n	800316a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6818      	ldr	r0, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	b2d9      	uxtb	r1, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003164:	461a      	mov	r2, r3
 8003166:	f009 fcf9 	bl	800cb5c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	460b      	mov	r3, r1
 8003186:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003188:	78fb      	ldrb	r3, [r7, #3]
 800318a:	f003 020f 	and.w	r2, r3, #15
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	429a      	cmp	r2, r3
 8003194:	d901      	bls.n	800319a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e042      	b.n	8003220 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800319a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	da0f      	bge.n	80031c2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031a2:	78fb      	ldrb	r3, [r7, #3]
 80031a4:	f003 020f 	and.w	r2, r3, #15
 80031a8:	4613      	mov	r3, r2
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	1a9b      	subs	r3, r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	3338      	adds	r3, #56	; 0x38
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	4413      	add	r3, r2
 80031b6:	3304      	adds	r3, #4
 80031b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2201      	movs	r2, #1
 80031be:	705a      	strb	r2, [r3, #1]
 80031c0:	e00f      	b.n	80031e2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031c2:	78fb      	ldrb	r3, [r7, #3]
 80031c4:	f003 020f 	and.w	r2, r3, #15
 80031c8:	4613      	mov	r3, r2
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	1a9b      	subs	r3, r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	4413      	add	r3, r2
 80031d8:	3304      	adds	r3, #4
 80031da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031e8:	78fb      	ldrb	r3, [r7, #3]
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	b2da      	uxtb	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d101      	bne.n	8003202 <HAL_PCD_EP_ClrStall+0x86>
 80031fe:	2302      	movs	r3, #2
 8003200:	e00e      	b.n	8003220 <HAL_PCD_EP_ClrStall+0xa4>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68f9      	ldr	r1, [r7, #12]
 8003210:	4618      	mov	r0, r3
 8003212:	f009 fad3 	bl	800c7bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	460b      	mov	r3, r1
 8003232:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800323a:	2b01      	cmp	r3, #1
 800323c:	d101      	bne.n	8003242 <HAL_PCD_EP_Flush+0x1a>
 800323e:	2302      	movs	r3, #2
 8003240:	e01b      	b.n	800327a <HAL_PCD_EP_Flush+0x52>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 800324a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800324e:	2b00      	cmp	r3, #0
 8003250:	da09      	bge.n	8003266 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	78fb      	ldrb	r3, [r7, #3]
 8003258:	f003 030f 	and.w	r3, r3, #15
 800325c:	4619      	mov	r1, r3
 800325e:	4610      	mov	r0, r2
 8003260:	f008 fcaa 	bl	800bbb8 <USB_FlushTxFifo>
 8003264:	e004      	b.n	8003270 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f008 fcca 	bl	800bc04 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b08a      	sub	sp, #40	; 0x28
 8003286:	af02      	add	r7, sp, #8
 8003288:	6078      	str	r0, [r7, #4]
 800328a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	4613      	mov	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	1a9b      	subs	r3, r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	3338      	adds	r3, #56	; 0x38
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	4413      	add	r3, r2
 80032a6:	3304      	adds	r3, #4
 80032a8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	699a      	ldr	r2, [r3, #24]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d901      	bls.n	80032ba <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e06c      	b.n	8003394 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	695a      	ldr	r2, [r3, #20]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	69fa      	ldr	r2, [r7, #28]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d902      	bls.n	80032d6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	3303      	adds	r3, #3
 80032da:	089b      	lsrs	r3, r3, #2
 80032dc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032de:	e02b      	b.n	8003338 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	695a      	ldr	r2, [r3, #20]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	69fa      	ldr	r2, [r7, #28]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d902      	bls.n	80032fc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	3303      	adds	r3, #3
 8003300:	089b      	lsrs	r3, r3, #2
 8003302:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	68d9      	ldr	r1, [r3, #12]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	b2da      	uxtb	r2, r3
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003314:	b2db      	uxtb	r3, r3
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	4603      	mov	r3, r0
 800331a:	6978      	ldr	r0, [r7, #20]
 800331c:	f009 f982 	bl	800c624 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	68da      	ldr	r2, [r3, #12]
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	441a      	add	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	699a      	ldr	r2, [r3, #24]
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	441a      	add	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	015a      	lsls	r2, r3, #5
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	4413      	add	r3, r2
 8003340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	b29b      	uxth	r3, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	429a      	cmp	r2, r3
 800334c:	d809      	bhi.n	8003362 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	699a      	ldr	r2, [r3, #24]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003356:	429a      	cmp	r2, r3
 8003358:	d203      	bcs.n	8003362 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1be      	bne.n	80032e0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	695a      	ldr	r2, [r3, #20]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	429a      	cmp	r2, r3
 800336c:	d811      	bhi.n	8003392 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	f003 030f 	and.w	r3, r3, #15
 8003374:	2201      	movs	r2, #1
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	43db      	mvns	r3, r3
 8003388:	6939      	ldr	r1, [r7, #16]
 800338a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800338e:	4013      	ands	r3, r2
 8003390:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3720      	adds	r7, #32
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	333c      	adds	r3, #60	; 0x3c
 80033b4:	3304      	adds	r3, #4
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	015a      	lsls	r2, r3, #5
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	4413      	add	r3, r2
 80033c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	f040 80a0 	bne.w	8003514 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	f003 0308 	and.w	r3, r3, #8
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d015      	beq.n	800340a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	4a72      	ldr	r2, [pc, #456]	; (80035ac <PCD_EP_OutXfrComplete_int+0x210>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	f240 80dd 	bls.w	80035a2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f000 80d7 	beq.w	80035a2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	015a      	lsls	r2, r3, #5
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003400:	461a      	mov	r2, r3
 8003402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003406:	6093      	str	r3, [r2, #8]
 8003408:	e0cb      	b.n	80035a2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	f003 0320 	and.w	r3, r3, #32
 8003410:	2b00      	cmp	r3, #0
 8003412:	d009      	beq.n	8003428 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4413      	add	r3, r2
 800341c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003420:	461a      	mov	r2, r3
 8003422:	2320      	movs	r3, #32
 8003424:	6093      	str	r3, [r2, #8]
 8003426:	e0bc      	b.n	80035a2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800342e:	2b00      	cmp	r3, #0
 8003430:	f040 80b7 	bne.w	80035a2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4a5d      	ldr	r2, [pc, #372]	; (80035ac <PCD_EP_OutXfrComplete_int+0x210>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d90f      	bls.n	800345c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00a      	beq.n	800345c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	4413      	add	r3, r2
 800344e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003452:	461a      	mov	r2, r3
 8003454:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003458:	6093      	str	r3, [r2, #8]
 800345a:	e0a2      	b.n	80035a2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	4613      	mov	r3, r2
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	1a9b      	subs	r3, r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800346e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	0159      	lsls	r1, r3, #5
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	440b      	add	r3, r1
 8003478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003482:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	4613      	mov	r3, r2
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	1a9b      	subs	r3, r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4403      	add	r3, r0
 8003492:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003496:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	4613      	mov	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	1a9b      	subs	r3, r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034aa:	6819      	ldr	r1, [r3, #0]
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	4613      	mov	r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	1a9b      	subs	r3, r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4403      	add	r3, r0
 80034ba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4419      	add	r1, r3
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	4613      	mov	r3, r2
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	1a9b      	subs	r3, r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4403      	add	r3, r0
 80034d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034d4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d114      	bne.n	8003506 <PCD_EP_OutXfrComplete_int+0x16a>
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	4613      	mov	r3, r2
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	1a9b      	subs	r3, r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d108      	bne.n	8003506 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6818      	ldr	r0, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80034fe:	461a      	mov	r2, r3
 8003500:	2101      	movs	r1, #1
 8003502:	f009 fb2b 	bl	800cb5c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	b2db      	uxtb	r3, r3
 800350a:	4619      	mov	r1, r3
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f011 f847 	bl	80145a0 <HAL_PCD_DataOutStageCallback>
 8003512:	e046      	b.n	80035a2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4a26      	ldr	r2, [pc, #152]	; (80035b0 <PCD_EP_OutXfrComplete_int+0x214>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d124      	bne.n	8003566 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00a      	beq.n	800353c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	015a      	lsls	r2, r3, #5
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	4413      	add	r3, r2
 800352e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003532:	461a      	mov	r2, r3
 8003534:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003538:	6093      	str	r3, [r2, #8]
 800353a:	e032      	b.n	80035a2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f003 0320 	and.w	r3, r3, #32
 8003542:	2b00      	cmp	r3, #0
 8003544:	d008      	beq.n	8003558 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	015a      	lsls	r2, r3, #5
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	4413      	add	r3, r2
 800354e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003552:	461a      	mov	r2, r3
 8003554:	2320      	movs	r3, #32
 8003556:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	b2db      	uxtb	r3, r3
 800355c:	4619      	mov	r1, r3
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f011 f81e 	bl	80145a0 <HAL_PCD_DataOutStageCallback>
 8003564:	e01d      	b.n	80035a2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d114      	bne.n	8003596 <PCD_EP_OutXfrComplete_int+0x1fa>
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	4613      	mov	r3, r2
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	1a9b      	subs	r3, r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d108      	bne.n	8003596 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6818      	ldr	r0, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800358e:	461a      	mov	r2, r3
 8003590:	2100      	movs	r1, #0
 8003592:	f009 fae3 	bl	800cb5c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	b2db      	uxtb	r3, r3
 800359a:	4619      	mov	r1, r3
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f010 ffff 	bl	80145a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	4f54300a 	.word	0x4f54300a
 80035b0:	4f54310a 	.word	0x4f54310a

080035b4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	333c      	adds	r3, #60	; 0x3c
 80035cc:	3304      	adds	r3, #4
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	015a      	lsls	r2, r3, #5
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	4413      	add	r3, r2
 80035da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	4a15      	ldr	r2, [pc, #84]	; (800363c <PCD_EP_OutSetupPacket_int+0x88>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d90e      	bls.n	8003608 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d009      	beq.n	8003608 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	015a      	lsls	r2, r3, #5
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	4413      	add	r3, r2
 80035fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003600:	461a      	mov	r2, r3
 8003602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003606:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f010 ffb7 	bl	801457c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	4a0a      	ldr	r2, [pc, #40]	; (800363c <PCD_EP_OutSetupPacket_int+0x88>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d90c      	bls.n	8003630 <PCD_EP_OutSetupPacket_int+0x7c>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d108      	bne.n	8003630 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6818      	ldr	r0, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003628:	461a      	mov	r2, r3
 800362a:	2101      	movs	r1, #1
 800362c:	f009 fa96 	bl	800cb5c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3718      	adds	r7, #24
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	4f54300a 	.word	0x4f54300a

08003640 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	460b      	mov	r3, r1
 800364a:	70fb      	strb	r3, [r7, #3]
 800364c:	4613      	mov	r3, r2
 800364e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003658:	78fb      	ldrb	r3, [r7, #3]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d107      	bne.n	800366e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800365e:	883b      	ldrh	r3, [r7, #0]
 8003660:	0419      	lsls	r1, r3, #16
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	430a      	orrs	r2, r1
 800366a:	629a      	str	r2, [r3, #40]	; 0x28
 800366c:	e028      	b.n	80036c0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003674:	0c1b      	lsrs	r3, r3, #16
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	4413      	add	r3, r2
 800367a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800367c:	2300      	movs	r3, #0
 800367e:	73fb      	strb	r3, [r7, #15]
 8003680:	e00d      	b.n	800369e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	3340      	adds	r3, #64	; 0x40
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	0c1b      	lsrs	r3, r3, #16
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	4413      	add	r3, r2
 8003696:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003698:	7bfb      	ldrb	r3, [r7, #15]
 800369a:	3301      	adds	r3, #1
 800369c:	73fb      	strb	r3, [r7, #15]
 800369e:	7bfa      	ldrb	r2, [r7, #15]
 80036a0:	78fb      	ldrb	r3, [r7, #3]
 80036a2:	3b01      	subs	r3, #1
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d3ec      	bcc.n	8003682 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80036a8:	883b      	ldrh	r3, [r7, #0]
 80036aa:	0418      	lsls	r0, r3, #16
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6819      	ldr	r1, [r3, #0]
 80036b0:	78fb      	ldrb	r3, [r7, #3]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	4302      	orrs	r2, r0
 80036b8:	3340      	adds	r3, #64	; 0x40
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	440b      	add	r3, r1
 80036be:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
 80036d6:	460b      	mov	r3, r1
 80036d8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	887a      	ldrh	r2, [r7, #2]
 80036e0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800371e:	4b05      	ldr	r3, [pc, #20]	; (8003734 <HAL_PCDEx_ActivateLPM+0x44>)
 8003720:	4313      	orrs	r3, r2
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	10000003 	.word	0x10000003

08003738 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	460b      	mov	r3, r1
 8003742:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003758:	4b19      	ldr	r3, [pc, #100]	; (80037c0 <HAL_PWREx_ConfigSupply+0x70>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b04      	cmp	r3, #4
 8003762:	d00a      	beq.n	800377a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003764:	4b16      	ldr	r3, [pc, #88]	; (80037c0 <HAL_PWREx_ConfigSupply+0x70>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f003 0307 	and.w	r3, r3, #7
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	429a      	cmp	r2, r3
 8003770:	d001      	beq.n	8003776 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e01f      	b.n	80037b6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003776:	2300      	movs	r3, #0
 8003778:	e01d      	b.n	80037b6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800377a:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <HAL_PWREx_ConfigSupply+0x70>)
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	f023 0207 	bic.w	r2, r3, #7
 8003782:	490f      	ldr	r1, [pc, #60]	; (80037c0 <HAL_PWREx_ConfigSupply+0x70>)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4313      	orrs	r3, r2
 8003788:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800378a:	f7fd fe2f 	bl	80013ec <HAL_GetTick>
 800378e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003790:	e009      	b.n	80037a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003792:	f7fd fe2b 	bl	80013ec <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037a0:	d901      	bls.n	80037a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e007      	b.n	80037b6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80037a6:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <HAL_PWREx_ConfigSupply+0x70>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037b2:	d1ee      	bne.n	8003792 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	58024800 	.word	0x58024800

080037c4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80037c8:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	4a04      	ldr	r2, [pc, #16]	; (80037e0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80037ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037d2:	60d3      	str	r3, [r2, #12]
}
 80037d4:	bf00      	nop
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	58024800 	.word	0x58024800

080037e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b08c      	sub	sp, #48	; 0x30
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e3c4      	b.n	8003f80 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 8087 	beq.w	8003912 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003804:	4ba2      	ldr	r3, [pc, #648]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800380c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800380e:	4ba0      	ldr	r3, [pc, #640]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003812:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003816:	2b10      	cmp	r3, #16
 8003818:	d007      	beq.n	800382a <HAL_RCC_OscConfig+0x46>
 800381a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381c:	2b18      	cmp	r3, #24
 800381e:	d110      	bne.n	8003842 <HAL_RCC_OscConfig+0x5e>
 8003820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003822:	f003 0303 	and.w	r3, r3, #3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d10b      	bne.n	8003842 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800382a:	4b99      	ldr	r3, [pc, #612]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d06c      	beq.n	8003910 <HAL_RCC_OscConfig+0x12c>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d168      	bne.n	8003910 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e39e      	b.n	8003f80 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800384a:	d106      	bne.n	800385a <HAL_RCC_OscConfig+0x76>
 800384c:	4b90      	ldr	r3, [pc, #576]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a8f      	ldr	r2, [pc, #572]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003856:	6013      	str	r3, [r2, #0]
 8003858:	e02e      	b.n	80038b8 <HAL_RCC_OscConfig+0xd4>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10c      	bne.n	800387c <HAL_RCC_OscConfig+0x98>
 8003862:	4b8b      	ldr	r3, [pc, #556]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a8a      	ldr	r2, [pc, #552]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800386c:	6013      	str	r3, [r2, #0]
 800386e:	4b88      	ldr	r3, [pc, #544]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a87      	ldr	r2, [pc, #540]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003874:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003878:	6013      	str	r3, [r2, #0]
 800387a:	e01d      	b.n	80038b8 <HAL_RCC_OscConfig+0xd4>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003884:	d10c      	bne.n	80038a0 <HAL_RCC_OscConfig+0xbc>
 8003886:	4b82      	ldr	r3, [pc, #520]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a81      	ldr	r2, [pc, #516]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 800388c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	4b7f      	ldr	r3, [pc, #508]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a7e      	ldr	r2, [pc, #504]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	e00b      	b.n	80038b8 <HAL_RCC_OscConfig+0xd4>
 80038a0:	4b7b      	ldr	r3, [pc, #492]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a7a      	ldr	r2, [pc, #488]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 80038a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	4b78      	ldr	r3, [pc, #480]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a77      	ldr	r2, [pc, #476]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 80038b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d013      	beq.n	80038e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c0:	f7fd fd94 	bl	80013ec <HAL_GetTick>
 80038c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038c8:	f7fd fd90 	bl	80013ec <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b64      	cmp	r3, #100	; 0x64
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e352      	b.n	8003f80 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038da:	4b6d      	ldr	r3, [pc, #436]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0f0      	beq.n	80038c8 <HAL_RCC_OscConfig+0xe4>
 80038e6:	e014      	b.n	8003912 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e8:	f7fd fd80 	bl	80013ec <HAL_GetTick>
 80038ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038f0:	f7fd fd7c 	bl	80013ec <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b64      	cmp	r3, #100	; 0x64
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e33e      	b.n	8003f80 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003902:	4b63      	ldr	r3, [pc, #396]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1f0      	bne.n	80038f0 <HAL_RCC_OscConfig+0x10c>
 800390e:	e000      	b.n	8003912 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 8092 	beq.w	8003a44 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003920:	4b5b      	ldr	r3, [pc, #364]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003928:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800392a:	4b59      	ldr	r3, [pc, #356]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 800392c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d007      	beq.n	8003946 <HAL_RCC_OscConfig+0x162>
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	2b18      	cmp	r3, #24
 800393a:	d12d      	bne.n	8003998 <HAL_RCC_OscConfig+0x1b4>
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d128      	bne.n	8003998 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003946:	4b52      	ldr	r3, [pc, #328]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0304 	and.w	r3, r3, #4
 800394e:	2b00      	cmp	r3, #0
 8003950:	d005      	beq.n	800395e <HAL_RCC_OscConfig+0x17a>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e310      	b.n	8003f80 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800395e:	f7fd fd73 	bl	8001448 <HAL_GetREVID>
 8003962:	4602      	mov	r2, r0
 8003964:	f241 0303 	movw	r3, #4099	; 0x1003
 8003968:	429a      	cmp	r2, r3
 800396a:	d80a      	bhi.n	8003982 <HAL_RCC_OscConfig+0x19e>
 800396c:	4b48      	ldr	r3, [pc, #288]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	031b      	lsls	r3, r3, #12
 800397a:	4945      	ldr	r1, [pc, #276]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 800397c:	4313      	orrs	r3, r2
 800397e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003980:	e060      	b.n	8003a44 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003982:	4b43      	ldr	r3, [pc, #268]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	061b      	lsls	r3, r3, #24
 8003990:	493f      	ldr	r1, [pc, #252]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003992:	4313      	orrs	r3, r2
 8003994:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003996:	e055      	b.n	8003a44 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d038      	beq.n	8003a12 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80039a0:	4b3b      	ldr	r3, [pc, #236]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f023 0219 	bic.w	r2, r3, #25
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	4938      	ldr	r1, [pc, #224]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b2:	f7fd fd1b 	bl	80013ec <HAL_GetTick>
 80039b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039b8:	e008      	b.n	80039cc <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039ba:	f7fd fd17 	bl	80013ec <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e2d9      	b.n	8003f80 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039cc:	4b30      	ldr	r3, [pc, #192]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0f0      	beq.n	80039ba <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d8:	f7fd fd36 	bl	8001448 <HAL_GetREVID>
 80039dc:	4602      	mov	r2, r0
 80039de:	f241 0303 	movw	r3, #4099	; 0x1003
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d80a      	bhi.n	80039fc <HAL_RCC_OscConfig+0x218>
 80039e6:	4b2a      	ldr	r3, [pc, #168]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	031b      	lsls	r3, r3, #12
 80039f4:	4926      	ldr	r1, [pc, #152]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	604b      	str	r3, [r1, #4]
 80039fa:	e023      	b.n	8003a44 <HAL_RCC_OscConfig+0x260>
 80039fc:	4b24      	ldr	r3, [pc, #144]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	061b      	lsls	r3, r3, #24
 8003a0a:	4921      	ldr	r1, [pc, #132]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	604b      	str	r3, [r1, #4]
 8003a10:	e018      	b.n	8003a44 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a12:	4b1f      	ldr	r3, [pc, #124]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a1e      	ldr	r2, [pc, #120]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003a18:	f023 0301 	bic.w	r3, r3, #1
 8003a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1e:	f7fd fce5 	bl	80013ec <HAL_GetTick>
 8003a22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a24:	e008      	b.n	8003a38 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a26:	f7fd fce1 	bl	80013ec <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d901      	bls.n	8003a38 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e2a3      	b.n	8003f80 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a38:	4b15      	ldr	r3, [pc, #84]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1f0      	bne.n	8003a26 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0310 	and.w	r3, r3, #16
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 8091 	beq.w	8003b74 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a52:	4b0f      	ldr	r3, [pc, #60]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a5a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a5c:	4b0c      	ldr	r3, [pc, #48]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a60:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d007      	beq.n	8003a78 <HAL_RCC_OscConfig+0x294>
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	2b18      	cmp	r3, #24
 8003a6c:	d12f      	bne.n	8003ace <HAL_RCC_OscConfig+0x2ea>
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f003 0303 	and.w	r3, r3, #3
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d12a      	bne.n	8003ace <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a78:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d007      	beq.n	8003a94 <HAL_RCC_OscConfig+0x2b0>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	69db      	ldr	r3, [r3, #28]
 8003a88:	2b80      	cmp	r3, #128	; 0x80
 8003a8a:	d003      	beq.n	8003a94 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e277      	b.n	8003f80 <HAL_RCC_OscConfig+0x79c>
 8003a90:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a94:	f7fd fcd8 	bl	8001448 <HAL_GetREVID>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	f241 0303 	movw	r3, #4099	; 0x1003
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d80a      	bhi.n	8003ab8 <HAL_RCC_OscConfig+0x2d4>
 8003aa2:	4ba2      	ldr	r3, [pc, #648]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	069b      	lsls	r3, r3, #26
 8003ab0:	499e      	ldr	r1, [pc, #632]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ab6:	e05d      	b.n	8003b74 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ab8:	4b9c      	ldr	r3, [pc, #624]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	061b      	lsls	r3, r3, #24
 8003ac6:	4999      	ldr	r1, [pc, #612]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003acc:	e052      	b.n	8003b74 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d035      	beq.n	8003b42 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003ad6:	4b95      	ldr	r3, [pc, #596]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a94      	ldr	r2, [pc, #592]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ae0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae2:	f7fd fc83 	bl	80013ec <HAL_GetTick>
 8003ae6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ae8:	e008      	b.n	8003afc <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003aea:	f7fd fc7f 	bl	80013ec <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e241      	b.n	8003f80 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003afc:	4b8b      	ldr	r3, [pc, #556]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0f0      	beq.n	8003aea <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b08:	f7fd fc9e 	bl	8001448 <HAL_GetREVID>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	f241 0303 	movw	r3, #4099	; 0x1003
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d80a      	bhi.n	8003b2c <HAL_RCC_OscConfig+0x348>
 8003b16:	4b85      	ldr	r3, [pc, #532]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	069b      	lsls	r3, r3, #26
 8003b24:	4981      	ldr	r1, [pc, #516]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	604b      	str	r3, [r1, #4]
 8003b2a:	e023      	b.n	8003b74 <HAL_RCC_OscConfig+0x390>
 8003b2c:	4b7f      	ldr	r3, [pc, #508]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	061b      	lsls	r3, r3, #24
 8003b3a:	497c      	ldr	r1, [pc, #496]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60cb      	str	r3, [r1, #12]
 8003b40:	e018      	b.n	8003b74 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003b42:	4b7a      	ldr	r3, [pc, #488]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a79      	ldr	r2, [pc, #484]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003b48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4e:	f7fd fc4d 	bl	80013ec <HAL_GetTick>
 8003b52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003b54:	e008      	b.n	8003b68 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003b56:	f7fd fc49 	bl	80013ec <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e20b      	b.n	8003f80 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003b68:	4b70      	ldr	r3, [pc, #448]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1f0      	bne.n	8003b56 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0308 	and.w	r3, r3, #8
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d036      	beq.n	8003bee <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d019      	beq.n	8003bbc <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b88:	4b68      	ldr	r3, [pc, #416]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b8c:	4a67      	ldr	r2, [pc, #412]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003b8e:	f043 0301 	orr.w	r3, r3, #1
 8003b92:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b94:	f7fd fc2a 	bl	80013ec <HAL_GetTick>
 8003b98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b9c:	f7fd fc26 	bl	80013ec <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e1e8      	b.n	8003f80 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003bae:	4b5f      	ldr	r3, [pc, #380]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0f0      	beq.n	8003b9c <HAL_RCC_OscConfig+0x3b8>
 8003bba:	e018      	b.n	8003bee <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bbc:	4b5b      	ldr	r3, [pc, #364]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bc0:	4a5a      	ldr	r2, [pc, #360]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003bc2:	f023 0301 	bic.w	r3, r3, #1
 8003bc6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc8:	f7fd fc10 	bl	80013ec <HAL_GetTick>
 8003bcc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bd0:	f7fd fc0c 	bl	80013ec <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e1ce      	b.n	8003f80 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003be2:	4b52      	ldr	r3, [pc, #328]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1f0      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0320 	and.w	r3, r3, #32
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d036      	beq.n	8003c68 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d019      	beq.n	8003c36 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c02:	4b4a      	ldr	r3, [pc, #296]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a49      	ldr	r2, [pc, #292]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003c08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c0c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003c0e:	f7fd fbed 	bl	80013ec <HAL_GetTick>
 8003c12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c14:	e008      	b.n	8003c28 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003c16:	f7fd fbe9 	bl	80013ec <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e1ab      	b.n	8003f80 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c28:	4b40      	ldr	r3, [pc, #256]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0f0      	beq.n	8003c16 <HAL_RCC_OscConfig+0x432>
 8003c34:	e018      	b.n	8003c68 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c36:	4b3d      	ldr	r3, [pc, #244]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a3c      	ldr	r2, [pc, #240]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003c3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c40:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003c42:	f7fd fbd3 	bl	80013ec <HAL_GetTick>
 8003c46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c48:	e008      	b.n	8003c5c <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003c4a:	f7fd fbcf 	bl	80013ec <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e191      	b.n	8003f80 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c5c:	4b33      	ldr	r3, [pc, #204]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1f0      	bne.n	8003c4a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 8086 	beq.w	8003d82 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c76:	4b2e      	ldr	r3, [pc, #184]	; (8003d30 <HAL_RCC_OscConfig+0x54c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a2d      	ldr	r2, [pc, #180]	; (8003d30 <HAL_RCC_OscConfig+0x54c>)
 8003c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c82:	f7fd fbb3 	bl	80013ec <HAL_GetTick>
 8003c86:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c88:	e008      	b.n	8003c9c <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003c8a:	f7fd fbaf 	bl	80013ec <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b64      	cmp	r3, #100	; 0x64
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e171      	b.n	8003f80 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c9c:	4b24      	ldr	r3, [pc, #144]	; (8003d30 <HAL_RCC_OscConfig+0x54c>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0f0      	beq.n	8003c8a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d106      	bne.n	8003cbe <HAL_RCC_OscConfig+0x4da>
 8003cb0:	4b1e      	ldr	r3, [pc, #120]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb4:	4a1d      	ldr	r2, [pc, #116]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003cb6:	f043 0301 	orr.w	r3, r3, #1
 8003cba:	6713      	str	r3, [r2, #112]	; 0x70
 8003cbc:	e02d      	b.n	8003d1a <HAL_RCC_OscConfig+0x536>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10c      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x4fc>
 8003cc6:	4b19      	ldr	r3, [pc, #100]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cca:	4a18      	ldr	r2, [pc, #96]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003ccc:	f023 0301 	bic.w	r3, r3, #1
 8003cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003cd2:	4b16      	ldr	r3, [pc, #88]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd6:	4a15      	ldr	r2, [pc, #84]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003cd8:	f023 0304 	bic.w	r3, r3, #4
 8003cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8003cde:	e01c      	b.n	8003d1a <HAL_RCC_OscConfig+0x536>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	2b05      	cmp	r3, #5
 8003ce6:	d10c      	bne.n	8003d02 <HAL_RCC_OscConfig+0x51e>
 8003ce8:	4b10      	ldr	r3, [pc, #64]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cec:	4a0f      	ldr	r2, [pc, #60]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003cee:	f043 0304 	orr.w	r3, r3, #4
 8003cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8003cf4:	4b0d      	ldr	r3, [pc, #52]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf8:	4a0c      	ldr	r2, [pc, #48]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003cfa:	f043 0301 	orr.w	r3, r3, #1
 8003cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8003d00:	e00b      	b.n	8003d1a <HAL_RCC_OscConfig+0x536>
 8003d02:	4b0a      	ldr	r3, [pc, #40]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d06:	4a09      	ldr	r2, [pc, #36]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003d08:	f023 0301 	bic.w	r3, r3, #1
 8003d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d0e:	4b07      	ldr	r3, [pc, #28]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d12:	4a06      	ldr	r2, [pc, #24]	; (8003d2c <HAL_RCC_OscConfig+0x548>)
 8003d14:	f023 0304 	bic.w	r3, r3, #4
 8003d18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d01a      	beq.n	8003d58 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d22:	f7fd fb63 	bl	80013ec <HAL_GetTick>
 8003d26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d28:	e00f      	b.n	8003d4a <HAL_RCC_OscConfig+0x566>
 8003d2a:	bf00      	nop
 8003d2c:	58024400 	.word	0x58024400
 8003d30:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d34:	f7fd fb5a 	bl	80013ec <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e11a      	b.n	8003f80 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d4a:	4b8f      	ldr	r3, [pc, #572]	; (8003f88 <HAL_RCC_OscConfig+0x7a4>)
 8003d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0ee      	beq.n	8003d34 <HAL_RCC_OscConfig+0x550>
 8003d56:	e014      	b.n	8003d82 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d58:	f7fd fb48 	bl	80013ec <HAL_GetTick>
 8003d5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d5e:	e00a      	b.n	8003d76 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d60:	f7fd fb44 	bl	80013ec <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e104      	b.n	8003f80 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d76:	4b84      	ldr	r3, [pc, #528]	; (8003f88 <HAL_RCC_OscConfig+0x7a4>)
 8003d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1ee      	bne.n	8003d60 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 80f9 	beq.w	8003f7e <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003d8c:	4b7e      	ldr	r3, [pc, #504]	; (8003f88 <HAL_RCC_OscConfig+0x7a4>)
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d94:	2b18      	cmp	r3, #24
 8003d96:	f000 80b4 	beq.w	8003f02 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	f040 8095 	bne.w	8003ece <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003da4:	4b78      	ldr	r3, [pc, #480]	; (8003f88 <HAL_RCC_OscConfig+0x7a4>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a77      	ldr	r2, [pc, #476]	; (8003f88 <HAL_RCC_OscConfig+0x7a4>)
 8003daa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db0:	f7fd fb1c 	bl	80013ec <HAL_GetTick>
 8003db4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db8:	f7fd fb18 	bl	80013ec <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e0da      	b.n	8003f80 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003dca:	4b6f      	ldr	r3, [pc, #444]	; (8003f88 <HAL_RCC_OscConfig+0x7a4>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1f0      	bne.n	8003db8 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dd6:	4b6c      	ldr	r3, [pc, #432]	; (8003f88 <HAL_RCC_OscConfig+0x7a4>)
 8003dd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dda:	4b6c      	ldr	r3, [pc, #432]	; (8003f8c <HAL_RCC_OscConfig+0x7a8>)
 8003ddc:	4013      	ands	r3, r2
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003de6:	0112      	lsls	r2, r2, #4
 8003de8:	430a      	orrs	r2, r1
 8003dea:	4967      	ldr	r1, [pc, #412]	; (8003f88 <HAL_RCC_OscConfig+0x7a4>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	628b      	str	r3, [r1, #40]	; 0x28
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df4:	3b01      	subs	r3, #1
 8003df6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	025b      	lsls	r3, r3, #9
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	431a      	orrs	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	041b      	lsls	r3, r3, #16
 8003e0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	061b      	lsls	r3, r3, #24
 8003e1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003e20:	4959      	ldr	r1, [pc, #356]	; (8003f88 <HAL_RCC_OscConfig+0x7a4>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003e26:	4b58      	ldr	r3, [pc, #352]	; (8003f88 <HAL_RCC_OscConfig+0x7a4>)
 8003e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2a:	4a57      	ldr	r2, [pc, #348]	; (8003f88 <HAL_RCC_OscConfig+0x7a4>)
 8003e2c:	f023 0301 	bic.w	r3, r3, #1
 8003e30:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003e32:	4b55      	ldr	r3, [pc, #340]	; (8003f88 <HAL_RCC_OscConfig+0x7a4>)
 8003e34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e36:	4b56      	ldr	r3, [pc, #344]	; (8003f90 <HAL_RCC_OscConfig+0x7ac>)
 8003e38:	4013      	ands	r3, r2
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003e3e:	00d2      	lsls	r2, r2, #3
 8003e40:	4951      	ldr	r1, [pc, #324]	; (8003f88 <HAL_RCC_OscConfig+0x7a4>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003e46:	4b50      	ldr	r3, [pc, #320]	; (8003f88 <HAL_RCC_OscConfig+0x7a4>)
 8003e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4a:	f023 020c 	bic.w	r2, r3, #12
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	494d      	ldr	r1, [pc, #308]	; (8003f88 <HAL_RCC_OscConfig+0x7a4>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003e58:	4b4b      	ldr	r3, [pc, #300]	; (8003f88 <HAL_RCC_OscConfig+0x7a4>)
 8003e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5c:	f023 0202 	bic.w	r2, r3, #2
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e64:	4948      	ldr	r1, [pc, #288]	; (8003f88 <HAL_RCC_OscConfig+0x7a4>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003e6a:	4b47      	ldr	r3, [pc, #284]	; (8003f88 <HAL_RCC_OscConfig+0x7a4>)
 8003e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6e:	4a46      	ldr	r2, [pc, #280]	; (8003f88 <HAL_RCC_OscConfig+0x7a4>)
 8003e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e76:	4b44      	ldr	r3, [pc, #272]	; (8003f88 <HAL_RCC_OscConfig+0x7a4>)
 8003e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7a:	4a43      	ldr	r2, [pc, #268]	; (8003f88 <HAL_RCC_OscConfig+0x7a4>)
 8003e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003e82:	4b41      	ldr	r3, [pc, #260]	; (8003f88 <HAL_RCC_OscConfig+0x7a4>)
 8003e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e86:	4a40      	ldr	r2, [pc, #256]	; (8003f88 <HAL_RCC_OscConfig+0x7a4>)
 8003e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003e8e:	4b3e      	ldr	r3, [pc, #248]	; (8003f88 <HAL_RCC_OscConfig+0x7a4>)
 8003e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e92:	4a3d      	ldr	r2, [pc, #244]	; (8003f88 <HAL_RCC_OscConfig+0x7a4>)
 8003e94:	f043 0301 	orr.w	r3, r3, #1
 8003e98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e9a:	4b3b      	ldr	r3, [pc, #236]	; (8003f88 <HAL_RCC_OscConfig+0x7a4>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a3a      	ldr	r2, [pc, #232]	; (8003f88 <HAL_RCC_OscConfig+0x7a4>)
 8003ea0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ea4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea6:	f7fd faa1 	bl	80013ec <HAL_GetTick>
 8003eaa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eae:	f7fd fa9d 	bl	80013ec <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e05f      	b.n	8003f80 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ec0:	4b31      	ldr	r3, [pc, #196]	; (8003f88 <HAL_RCC_OscConfig+0x7a4>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0f0      	beq.n	8003eae <HAL_RCC_OscConfig+0x6ca>
 8003ecc:	e057      	b.n	8003f7e <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ece:	4b2e      	ldr	r3, [pc, #184]	; (8003f88 <HAL_RCC_OscConfig+0x7a4>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a2d      	ldr	r2, [pc, #180]	; (8003f88 <HAL_RCC_OscConfig+0x7a4>)
 8003ed4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ed8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eda:	f7fd fa87 	bl	80013ec <HAL_GetTick>
 8003ede:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ee0:	e008      	b.n	8003ef4 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ee2:	f7fd fa83 	bl	80013ec <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e045      	b.n	8003f80 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ef4:	4b24      	ldr	r3, [pc, #144]	; (8003f88 <HAL_RCC_OscConfig+0x7a4>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1f0      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x6fe>
 8003f00:	e03d      	b.n	8003f7e <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003f02:	4b21      	ldr	r3, [pc, #132]	; (8003f88 <HAL_RCC_OscConfig+0x7a4>)
 8003f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f06:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003f08:	4b1f      	ldr	r3, [pc, #124]	; (8003f88 <HAL_RCC_OscConfig+0x7a4>)
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d031      	beq.n	8003f7a <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	f003 0203 	and.w	r2, r3, #3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d12a      	bne.n	8003f7a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	091b      	lsrs	r3, r3, #4
 8003f28:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d122      	bne.n	8003f7a <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d11a      	bne.n	8003f7a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	0a5b      	lsrs	r3, r3, #9
 8003f48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f50:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d111      	bne.n	8003f7a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	0c1b      	lsrs	r3, r3, #16
 8003f5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f62:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d108      	bne.n	8003f7a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	0e1b      	lsrs	r3, r3, #24
 8003f6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f74:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d001      	beq.n	8003f7e <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e000      	b.n	8003f80 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3730      	adds	r7, #48	; 0x30
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	58024400 	.word	0x58024400
 8003f8c:	fffffc0c 	.word	0xfffffc0c
 8003f90:	ffff0007 	.word	0xffff0007

08003f94 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e19c      	b.n	80042e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fa8:	4b8a      	ldr	r3, [pc, #552]	; (80041d4 <HAL_RCC_ClockConfig+0x240>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 030f 	and.w	r3, r3, #15
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d910      	bls.n	8003fd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fb6:	4b87      	ldr	r3, [pc, #540]	; (80041d4 <HAL_RCC_ClockConfig+0x240>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f023 020f 	bic.w	r2, r3, #15
 8003fbe:	4985      	ldr	r1, [pc, #532]	; (80041d4 <HAL_RCC_ClockConfig+0x240>)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc6:	4b83      	ldr	r3, [pc, #524]	; (80041d4 <HAL_RCC_ClockConfig+0x240>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 030f 	and.w	r3, r3, #15
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d001      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e184      	b.n	80042e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d010      	beq.n	8004006 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	691a      	ldr	r2, [r3, #16]
 8003fe8:	4b7b      	ldr	r3, [pc, #492]	; (80041d8 <HAL_RCC_ClockConfig+0x244>)
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d908      	bls.n	8004006 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ff4:	4b78      	ldr	r3, [pc, #480]	; (80041d8 <HAL_RCC_ClockConfig+0x244>)
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	4975      	ldr	r1, [pc, #468]	; (80041d8 <HAL_RCC_ClockConfig+0x244>)
 8004002:	4313      	orrs	r3, r2
 8004004:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0308 	and.w	r3, r3, #8
 800400e:	2b00      	cmp	r3, #0
 8004010:	d010      	beq.n	8004034 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	695a      	ldr	r2, [r3, #20]
 8004016:	4b70      	ldr	r3, [pc, #448]	; (80041d8 <HAL_RCC_ClockConfig+0x244>)
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800401e:	429a      	cmp	r2, r3
 8004020:	d908      	bls.n	8004034 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004022:	4b6d      	ldr	r3, [pc, #436]	; (80041d8 <HAL_RCC_ClockConfig+0x244>)
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	496a      	ldr	r1, [pc, #424]	; (80041d8 <HAL_RCC_ClockConfig+0x244>)
 8004030:	4313      	orrs	r3, r2
 8004032:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0310 	and.w	r3, r3, #16
 800403c:	2b00      	cmp	r3, #0
 800403e:	d010      	beq.n	8004062 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	699a      	ldr	r2, [r3, #24]
 8004044:	4b64      	ldr	r3, [pc, #400]	; (80041d8 <HAL_RCC_ClockConfig+0x244>)
 8004046:	69db      	ldr	r3, [r3, #28]
 8004048:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800404c:	429a      	cmp	r2, r3
 800404e:	d908      	bls.n	8004062 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004050:	4b61      	ldr	r3, [pc, #388]	; (80041d8 <HAL_RCC_ClockConfig+0x244>)
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	495e      	ldr	r1, [pc, #376]	; (80041d8 <HAL_RCC_ClockConfig+0x244>)
 800405e:	4313      	orrs	r3, r2
 8004060:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0320 	and.w	r3, r3, #32
 800406a:	2b00      	cmp	r3, #0
 800406c:	d010      	beq.n	8004090 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69da      	ldr	r2, [r3, #28]
 8004072:	4b59      	ldr	r3, [pc, #356]	; (80041d8 <HAL_RCC_ClockConfig+0x244>)
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800407a:	429a      	cmp	r2, r3
 800407c:	d908      	bls.n	8004090 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800407e:	4b56      	ldr	r3, [pc, #344]	; (80041d8 <HAL_RCC_ClockConfig+0x244>)
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	4953      	ldr	r1, [pc, #332]	; (80041d8 <HAL_RCC_ClockConfig+0x244>)
 800408c:	4313      	orrs	r3, r2
 800408e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d010      	beq.n	80040be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	4b4d      	ldr	r3, [pc, #308]	; (80041d8 <HAL_RCC_ClockConfig+0x244>)
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	f003 030f 	and.w	r3, r3, #15
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d908      	bls.n	80040be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040ac:	4b4a      	ldr	r3, [pc, #296]	; (80041d8 <HAL_RCC_ClockConfig+0x244>)
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	f023 020f 	bic.w	r2, r3, #15
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	4947      	ldr	r1, [pc, #284]	; (80041d8 <HAL_RCC_ClockConfig+0x244>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d055      	beq.n	8004176 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80040ca:	4b43      	ldr	r3, [pc, #268]	; (80041d8 <HAL_RCC_ClockConfig+0x244>)
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	4940      	ldr	r1, [pc, #256]	; (80041d8 <HAL_RCC_ClockConfig+0x244>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d107      	bne.n	80040f4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040e4:	4b3c      	ldr	r3, [pc, #240]	; (80041d8 <HAL_RCC_ClockConfig+0x244>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d121      	bne.n	8004134 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e0f6      	b.n	80042e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2b03      	cmp	r3, #3
 80040fa:	d107      	bne.n	800410c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040fc:	4b36      	ldr	r3, [pc, #216]	; (80041d8 <HAL_RCC_ClockConfig+0x244>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d115      	bne.n	8004134 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e0ea      	b.n	80042e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d107      	bne.n	8004124 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004114:	4b30      	ldr	r3, [pc, #192]	; (80041d8 <HAL_RCC_ClockConfig+0x244>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411c:	2b00      	cmp	r3, #0
 800411e:	d109      	bne.n	8004134 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e0de      	b.n	80042e2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004124:	4b2c      	ldr	r3, [pc, #176]	; (80041d8 <HAL_RCC_ClockConfig+0x244>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0304 	and.w	r3, r3, #4
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e0d6      	b.n	80042e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004134:	4b28      	ldr	r3, [pc, #160]	; (80041d8 <HAL_RCC_ClockConfig+0x244>)
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	f023 0207 	bic.w	r2, r3, #7
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	4925      	ldr	r1, [pc, #148]	; (80041d8 <HAL_RCC_ClockConfig+0x244>)
 8004142:	4313      	orrs	r3, r2
 8004144:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004146:	f7fd f951 	bl	80013ec <HAL_GetTick>
 800414a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800414c:	e00a      	b.n	8004164 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800414e:	f7fd f94d 	bl	80013ec <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	f241 3288 	movw	r2, #5000	; 0x1388
 800415c:	4293      	cmp	r3, r2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e0be      	b.n	80042e2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004164:	4b1c      	ldr	r3, [pc, #112]	; (80041d8 <HAL_RCC_ClockConfig+0x244>)
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	429a      	cmp	r2, r3
 8004174:	d1eb      	bne.n	800414e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d010      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68da      	ldr	r2, [r3, #12]
 8004186:	4b14      	ldr	r3, [pc, #80]	; (80041d8 <HAL_RCC_ClockConfig+0x244>)
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	f003 030f 	and.w	r3, r3, #15
 800418e:	429a      	cmp	r2, r3
 8004190:	d208      	bcs.n	80041a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004192:	4b11      	ldr	r3, [pc, #68]	; (80041d8 <HAL_RCC_ClockConfig+0x244>)
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	f023 020f 	bic.w	r2, r3, #15
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	490e      	ldr	r1, [pc, #56]	; (80041d8 <HAL_RCC_ClockConfig+0x244>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041a4:	4b0b      	ldr	r3, [pc, #44]	; (80041d4 <HAL_RCC_ClockConfig+0x240>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 030f 	and.w	r3, r3, #15
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d214      	bcs.n	80041dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b2:	4b08      	ldr	r3, [pc, #32]	; (80041d4 <HAL_RCC_ClockConfig+0x240>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f023 020f 	bic.w	r2, r3, #15
 80041ba:	4906      	ldr	r1, [pc, #24]	; (80041d4 <HAL_RCC_ClockConfig+0x240>)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	4313      	orrs	r3, r2
 80041c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c2:	4b04      	ldr	r3, [pc, #16]	; (80041d4 <HAL_RCC_ClockConfig+0x240>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 030f 	and.w	r3, r3, #15
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d005      	beq.n	80041dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e086      	b.n	80042e2 <HAL_RCC_ClockConfig+0x34e>
 80041d4:	52002000 	.word	0x52002000
 80041d8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d010      	beq.n	800420a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691a      	ldr	r2, [r3, #16]
 80041ec:	4b3f      	ldr	r3, [pc, #252]	; (80042ec <HAL_RCC_ClockConfig+0x358>)
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d208      	bcs.n	800420a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80041f8:	4b3c      	ldr	r3, [pc, #240]	; (80042ec <HAL_RCC_ClockConfig+0x358>)
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	4939      	ldr	r1, [pc, #228]	; (80042ec <HAL_RCC_ClockConfig+0x358>)
 8004206:	4313      	orrs	r3, r2
 8004208:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0308 	and.w	r3, r3, #8
 8004212:	2b00      	cmp	r3, #0
 8004214:	d010      	beq.n	8004238 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	695a      	ldr	r2, [r3, #20]
 800421a:	4b34      	ldr	r3, [pc, #208]	; (80042ec <HAL_RCC_ClockConfig+0x358>)
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004222:	429a      	cmp	r2, r3
 8004224:	d208      	bcs.n	8004238 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004226:	4b31      	ldr	r3, [pc, #196]	; (80042ec <HAL_RCC_ClockConfig+0x358>)
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	492e      	ldr	r1, [pc, #184]	; (80042ec <HAL_RCC_ClockConfig+0x358>)
 8004234:	4313      	orrs	r3, r2
 8004236:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0310 	and.w	r3, r3, #16
 8004240:	2b00      	cmp	r3, #0
 8004242:	d010      	beq.n	8004266 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	699a      	ldr	r2, [r3, #24]
 8004248:	4b28      	ldr	r3, [pc, #160]	; (80042ec <HAL_RCC_ClockConfig+0x358>)
 800424a:	69db      	ldr	r3, [r3, #28]
 800424c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004250:	429a      	cmp	r2, r3
 8004252:	d208      	bcs.n	8004266 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004254:	4b25      	ldr	r3, [pc, #148]	; (80042ec <HAL_RCC_ClockConfig+0x358>)
 8004256:	69db      	ldr	r3, [r3, #28]
 8004258:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	4922      	ldr	r1, [pc, #136]	; (80042ec <HAL_RCC_ClockConfig+0x358>)
 8004262:	4313      	orrs	r3, r2
 8004264:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0320 	and.w	r3, r3, #32
 800426e:	2b00      	cmp	r3, #0
 8004270:	d010      	beq.n	8004294 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	69da      	ldr	r2, [r3, #28]
 8004276:	4b1d      	ldr	r3, [pc, #116]	; (80042ec <HAL_RCC_ClockConfig+0x358>)
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800427e:	429a      	cmp	r2, r3
 8004280:	d208      	bcs.n	8004294 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004282:	4b1a      	ldr	r3, [pc, #104]	; (80042ec <HAL_RCC_ClockConfig+0x358>)
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	4917      	ldr	r1, [pc, #92]	; (80042ec <HAL_RCC_ClockConfig+0x358>)
 8004290:	4313      	orrs	r3, r2
 8004292:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004294:	f000 f834 	bl	8004300 <HAL_RCC_GetSysClockFreq>
 8004298:	4601      	mov	r1, r0
 800429a:	4b14      	ldr	r3, [pc, #80]	; (80042ec <HAL_RCC_ClockConfig+0x358>)
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	0a1b      	lsrs	r3, r3, #8
 80042a0:	f003 030f 	and.w	r3, r3, #15
 80042a4:	4a12      	ldr	r2, [pc, #72]	; (80042f0 <HAL_RCC_ClockConfig+0x35c>)
 80042a6:	5cd3      	ldrb	r3, [r2, r3]
 80042a8:	f003 031f 	and.w	r3, r3, #31
 80042ac:	fa21 f303 	lsr.w	r3, r1, r3
 80042b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80042b2:	4b0e      	ldr	r3, [pc, #56]	; (80042ec <HAL_RCC_ClockConfig+0x358>)
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	f003 030f 	and.w	r3, r3, #15
 80042ba:	4a0d      	ldr	r2, [pc, #52]	; (80042f0 <HAL_RCC_ClockConfig+0x35c>)
 80042bc:	5cd3      	ldrb	r3, [r2, r3]
 80042be:	f003 031f 	and.w	r3, r3, #31
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	fa22 f303 	lsr.w	r3, r2, r3
 80042c8:	4a0a      	ldr	r2, [pc, #40]	; (80042f4 <HAL_RCC_ClockConfig+0x360>)
 80042ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80042cc:	4a0a      	ldr	r2, [pc, #40]	; (80042f8 <HAL_RCC_ClockConfig+0x364>)
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80042d2:	4b0a      	ldr	r3, [pc, #40]	; (80042fc <HAL_RCC_ClockConfig+0x368>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fd f83e 	bl	8001358 <HAL_InitTick>
 80042dc:	4603      	mov	r3, r0
 80042de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3718      	adds	r7, #24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	58024400 	.word	0x58024400
 80042f0:	08014e24 	.word	0x08014e24
 80042f4:	24000010 	.word	0x24000010
 80042f8:	2400000c 	.word	0x2400000c
 80042fc:	24000014 	.word	0x24000014

08004300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004300:	b480      	push	{r7}
 8004302:	b089      	sub	sp, #36	; 0x24
 8004304:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004306:	4baf      	ldr	r3, [pc, #700]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800430e:	2b18      	cmp	r3, #24
 8004310:	f200 814e 	bhi.w	80045b0 <HAL_RCC_GetSysClockFreq+0x2b0>
 8004314:	a201      	add	r2, pc, #4	; (adr r2, 800431c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800431a:	bf00      	nop
 800431c:	08004381 	.word	0x08004381
 8004320:	080045b1 	.word	0x080045b1
 8004324:	080045b1 	.word	0x080045b1
 8004328:	080045b1 	.word	0x080045b1
 800432c:	080045b1 	.word	0x080045b1
 8004330:	080045b1 	.word	0x080045b1
 8004334:	080045b1 	.word	0x080045b1
 8004338:	080045b1 	.word	0x080045b1
 800433c:	080043a7 	.word	0x080043a7
 8004340:	080045b1 	.word	0x080045b1
 8004344:	080045b1 	.word	0x080045b1
 8004348:	080045b1 	.word	0x080045b1
 800434c:	080045b1 	.word	0x080045b1
 8004350:	080045b1 	.word	0x080045b1
 8004354:	080045b1 	.word	0x080045b1
 8004358:	080045b1 	.word	0x080045b1
 800435c:	080043ad 	.word	0x080043ad
 8004360:	080045b1 	.word	0x080045b1
 8004364:	080045b1 	.word	0x080045b1
 8004368:	080045b1 	.word	0x080045b1
 800436c:	080045b1 	.word	0x080045b1
 8004370:	080045b1 	.word	0x080045b1
 8004374:	080045b1 	.word	0x080045b1
 8004378:	080045b1 	.word	0x080045b1
 800437c:	080043b3 	.word	0x080043b3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004380:	4b90      	ldr	r3, [pc, #576]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0320 	and.w	r3, r3, #32
 8004388:	2b00      	cmp	r3, #0
 800438a:	d009      	beq.n	80043a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800438c:	4b8d      	ldr	r3, [pc, #564]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	08db      	lsrs	r3, r3, #3
 8004392:	f003 0303 	and.w	r3, r3, #3
 8004396:	4a8c      	ldr	r2, [pc, #560]	; (80045c8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004398:	fa22 f303 	lsr.w	r3, r2, r3
 800439c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800439e:	e10a      	b.n	80045b6 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80043a0:	4b89      	ldr	r3, [pc, #548]	; (80045c8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80043a2:	61bb      	str	r3, [r7, #24]
    break;
 80043a4:	e107      	b.n	80045b6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80043a6:	4b89      	ldr	r3, [pc, #548]	; (80045cc <HAL_RCC_GetSysClockFreq+0x2cc>)
 80043a8:	61bb      	str	r3, [r7, #24]
    break;
 80043aa:	e104      	b.n	80045b6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80043ac:	4b88      	ldr	r3, [pc, #544]	; (80045d0 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80043ae:	61bb      	str	r3, [r7, #24]
    break;
 80043b0:	e101      	b.n	80045b6 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043b2:	4b84      	ldr	r3, [pc, #528]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80043b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80043bc:	4b81      	ldr	r3, [pc, #516]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80043be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c0:	091b      	lsrs	r3, r3, #4
 80043c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043c6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80043c8:	4b7e      	ldr	r3, [pc, #504]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80043ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80043d2:	4b7c      	ldr	r3, [pc, #496]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80043d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d6:	08db      	lsrs	r3, r3, #3
 80043d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	fb02 f303 	mul.w	r3, r2, r3
 80043e2:	ee07 3a90 	vmov	s15, r3
 80043e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ea:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 80da 	beq.w	80045aa <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d05a      	beq.n	80044b2 <HAL_RCC_GetSysClockFreq+0x1b2>
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d302      	bcc.n	8004406 <HAL_RCC_GetSysClockFreq+0x106>
 8004400:	2b02      	cmp	r3, #2
 8004402:	d078      	beq.n	80044f6 <HAL_RCC_GetSysClockFreq+0x1f6>
 8004404:	e099      	b.n	800453a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004406:	4b6f      	ldr	r3, [pc, #444]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0320 	and.w	r3, r3, #32
 800440e:	2b00      	cmp	r3, #0
 8004410:	d02d      	beq.n	800446e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004412:	4b6c      	ldr	r3, [pc, #432]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	08db      	lsrs	r3, r3, #3
 8004418:	f003 0303 	and.w	r3, r3, #3
 800441c:	4a6a      	ldr	r2, [pc, #424]	; (80045c8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800441e:	fa22 f303 	lsr.w	r3, r2, r3
 8004422:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	ee07 3a90 	vmov	s15, r3
 800442a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	ee07 3a90 	vmov	s15, r3
 8004434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004438:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800443c:	4b61      	ldr	r3, [pc, #388]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800443e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004444:	ee07 3a90 	vmov	s15, r3
 8004448:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800444c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004450:	eddf 5a60 	vldr	s11, [pc, #384]	; 80045d4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004454:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004458:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800445c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004460:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004468:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800446c:	e087      	b.n	800457e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	ee07 3a90 	vmov	s15, r3
 8004474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004478:	eddf 6a57 	vldr	s13, [pc, #348]	; 80045d8 <HAL_RCC_GetSysClockFreq+0x2d8>
 800447c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004480:	4b50      	ldr	r3, [pc, #320]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004488:	ee07 3a90 	vmov	s15, r3
 800448c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004490:	ed97 6a02 	vldr	s12, [r7, #8]
 8004494:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80045d4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004498:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800449c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044b0:	e065      	b.n	800457e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	ee07 3a90 	vmov	s15, r3
 80044b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044bc:	eddf 6a47 	vldr	s13, [pc, #284]	; 80045dc <HAL_RCC_GetSysClockFreq+0x2dc>
 80044c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044c4:	4b3f      	ldr	r3, [pc, #252]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80044c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044cc:	ee07 3a90 	vmov	s15, r3
 80044d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044d4:	ed97 6a02 	vldr	s12, [r7, #8]
 80044d8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80045d4 <HAL_RCC_GetSysClockFreq+0x2d4>
 80044dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044f4:	e043      	b.n	800457e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	ee07 3a90 	vmov	s15, r3
 80044fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004500:	eddf 6a37 	vldr	s13, [pc, #220]	; 80045e0 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004504:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004508:	4b2e      	ldr	r3, [pc, #184]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800450a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004510:	ee07 3a90 	vmov	s15, r3
 8004514:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004518:	ed97 6a02 	vldr	s12, [r7, #8]
 800451c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80045d4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004520:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004524:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004528:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800452c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004534:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004538:	e021      	b.n	800457e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	ee07 3a90 	vmov	s15, r3
 8004540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004544:	eddf 6a25 	vldr	s13, [pc, #148]	; 80045dc <HAL_RCC_GetSysClockFreq+0x2dc>
 8004548:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800454c:	4b1d      	ldr	r3, [pc, #116]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800454e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004554:	ee07 3a90 	vmov	s15, r3
 8004558:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800455c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004560:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80045d4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004564:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004568:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800456c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004570:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004574:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004578:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800457c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800457e:	4b11      	ldr	r3, [pc, #68]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004582:	0a5b      	lsrs	r3, r3, #9
 8004584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004588:	3301      	adds	r3, #1
 800458a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	ee07 3a90 	vmov	s15, r3
 8004592:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004596:	edd7 6a07 	vldr	s13, [r7, #28]
 800459a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800459e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045a2:	ee17 3a90 	vmov	r3, s15
 80045a6:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80045a8:	e005      	b.n	80045b6 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	61bb      	str	r3, [r7, #24]
    break;
 80045ae:	e002      	b.n	80045b6 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80045b0:	4b06      	ldr	r3, [pc, #24]	; (80045cc <HAL_RCC_GetSysClockFreq+0x2cc>)
 80045b2:	61bb      	str	r3, [r7, #24]
    break;
 80045b4:	bf00      	nop
  }

  return sysclockfreq;
 80045b6:	69bb      	ldr	r3, [r7, #24]
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3724      	adds	r7, #36	; 0x24
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	58024400 	.word	0x58024400
 80045c8:	03d09000 	.word	0x03d09000
 80045cc:	003d0900 	.word	0x003d0900
 80045d0:	007a1200 	.word	0x007a1200
 80045d4:	46000000 	.word	0x46000000
 80045d8:	4c742400 	.word	0x4c742400
 80045dc:	4a742400 	.word	0x4a742400
 80045e0:	4af42400 	.word	0x4af42400

080045e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80045ea:	f7ff fe89 	bl	8004300 <HAL_RCC_GetSysClockFreq>
 80045ee:	4601      	mov	r1, r0
 80045f0:	4b10      	ldr	r3, [pc, #64]	; (8004634 <HAL_RCC_GetHCLKFreq+0x50>)
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	0a1b      	lsrs	r3, r3, #8
 80045f6:	f003 030f 	and.w	r3, r3, #15
 80045fa:	4a0f      	ldr	r2, [pc, #60]	; (8004638 <HAL_RCC_GetHCLKFreq+0x54>)
 80045fc:	5cd3      	ldrb	r3, [r2, r3]
 80045fe:	f003 031f 	and.w	r3, r3, #31
 8004602:	fa21 f303 	lsr.w	r3, r1, r3
 8004606:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004608:	4b0a      	ldr	r3, [pc, #40]	; (8004634 <HAL_RCC_GetHCLKFreq+0x50>)
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	f003 030f 	and.w	r3, r3, #15
 8004610:	4a09      	ldr	r2, [pc, #36]	; (8004638 <HAL_RCC_GetHCLKFreq+0x54>)
 8004612:	5cd3      	ldrb	r3, [r2, r3]
 8004614:	f003 031f 	and.w	r3, r3, #31
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	fa22 f303 	lsr.w	r3, r2, r3
 800461e:	4a07      	ldr	r2, [pc, #28]	; (800463c <HAL_RCC_GetHCLKFreq+0x58>)
 8004620:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004622:	4a07      	ldr	r2, [pc, #28]	; (8004640 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004628:	4b04      	ldr	r3, [pc, #16]	; (800463c <HAL_RCC_GetHCLKFreq+0x58>)
 800462a:	681b      	ldr	r3, [r3, #0]
}
 800462c:	4618      	mov	r0, r3
 800462e:	3708      	adds	r7, #8
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	58024400 	.word	0x58024400
 8004638:	08014e24 	.word	0x08014e24
 800463c:	24000010 	.word	0x24000010
 8004640:	2400000c 	.word	0x2400000c

08004644 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004648:	f7ff ffcc 	bl	80045e4 <HAL_RCC_GetHCLKFreq>
 800464c:	4601      	mov	r1, r0
 800464e:	4b06      	ldr	r3, [pc, #24]	; (8004668 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	091b      	lsrs	r3, r3, #4
 8004654:	f003 0307 	and.w	r3, r3, #7
 8004658:	4a04      	ldr	r2, [pc, #16]	; (800466c <HAL_RCC_GetPCLK1Freq+0x28>)
 800465a:	5cd3      	ldrb	r3, [r2, r3]
 800465c:	f003 031f 	and.w	r3, r3, #31
 8004660:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004664:	4618      	mov	r0, r3
 8004666:	bd80      	pop	{r7, pc}
 8004668:	58024400 	.word	0x58024400
 800466c:	08014e24 	.word	0x08014e24

08004670 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004674:	f7ff ffb6 	bl	80045e4 <HAL_RCC_GetHCLKFreq>
 8004678:	4601      	mov	r1, r0
 800467a:	4b06      	ldr	r3, [pc, #24]	; (8004694 <HAL_RCC_GetPCLK2Freq+0x24>)
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	0a1b      	lsrs	r3, r3, #8
 8004680:	f003 0307 	and.w	r3, r3, #7
 8004684:	4a04      	ldr	r2, [pc, #16]	; (8004698 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004686:	5cd3      	ldrb	r3, [r2, r3]
 8004688:	f003 031f 	and.w	r3, r3, #31
 800468c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004690:	4618      	mov	r0, r3
 8004692:	bd80      	pop	{r7, pc}
 8004694:	58024400 	.word	0x58024400
 8004698:	08014e24 	.word	0x08014e24

0800469c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046a4:	2300      	movs	r3, #0
 80046a6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046a8:	2300      	movs	r3, #0
 80046aa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d03d      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046c0:	d013      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80046c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046c6:	d802      	bhi.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x32>
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d007      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x40>
 80046cc:	e01f      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x72>
 80046ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046d2:	d013      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x60>
 80046d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046d8:	d01c      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80046da:	e018      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046dc:	4baf      	ldr	r3, [pc, #700]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80046de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e0:	4aae      	ldr	r2, [pc, #696]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80046e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80046e8:	e015      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	3304      	adds	r3, #4
 80046ee:	2102      	movs	r1, #2
 80046f0:	4618      	mov	r0, r3
 80046f2:	f001 fd23 	bl	800613c <RCCEx_PLL2_Config>
 80046f6:	4603      	mov	r3, r0
 80046f8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80046fa:	e00c      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3324      	adds	r3, #36	; 0x24
 8004700:	2102      	movs	r1, #2
 8004702:	4618      	mov	r0, r3
 8004704:	f001 fdcc 	bl	80062a0 <RCCEx_PLL3_Config>
 8004708:	4603      	mov	r3, r0
 800470a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800470c:	e003      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	75fb      	strb	r3, [r7, #23]
      break;
 8004712:	e000      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004714:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004716:	7dfb      	ldrb	r3, [r7, #23]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d109      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800471c:	4b9f      	ldr	r3, [pc, #636]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800471e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004720:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004728:	499c      	ldr	r1, [pc, #624]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800472a:	4313      	orrs	r3, r2
 800472c:	650b      	str	r3, [r1, #80]	; 0x50
 800472e:	e001      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004730:	7dfb      	ldrb	r3, [r7, #23]
 8004732:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473c:	2b00      	cmp	r3, #0
 800473e:	d03d      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004744:	2b04      	cmp	r3, #4
 8004746:	d826      	bhi.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8004748:	a201      	add	r2, pc, #4	; (adr r2, 8004750 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800474a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474e:	bf00      	nop
 8004750:	08004765 	.word	0x08004765
 8004754:	08004773 	.word	0x08004773
 8004758:	08004785 	.word	0x08004785
 800475c:	0800479d 	.word	0x0800479d
 8004760:	0800479d 	.word	0x0800479d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004764:	4b8d      	ldr	r3, [pc, #564]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004768:	4a8c      	ldr	r2, [pc, #560]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800476a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800476e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004770:	e015      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	3304      	adds	r3, #4
 8004776:	2100      	movs	r1, #0
 8004778:	4618      	mov	r0, r3
 800477a:	f001 fcdf 	bl	800613c <RCCEx_PLL2_Config>
 800477e:	4603      	mov	r3, r0
 8004780:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004782:	e00c      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3324      	adds	r3, #36	; 0x24
 8004788:	2100      	movs	r1, #0
 800478a:	4618      	mov	r0, r3
 800478c:	f001 fd88 	bl	80062a0 <RCCEx_PLL3_Config>
 8004790:	4603      	mov	r3, r0
 8004792:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004794:	e003      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	75fb      	strb	r3, [r7, #23]
      break;
 800479a:	e000      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800479c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800479e:	7dfb      	ldrb	r3, [r7, #23]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d109      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047a4:	4b7d      	ldr	r3, [pc, #500]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80047a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047a8:	f023 0207 	bic.w	r2, r3, #7
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b0:	497a      	ldr	r1, [pc, #488]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	650b      	str	r3, [r1, #80]	; 0x50
 80047b6:	e001      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b8:	7dfb      	ldrb	r3, [r7, #23]
 80047ba:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d03e      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047cc:	2b80      	cmp	r3, #128	; 0x80
 80047ce:	d01c      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80047d0:	2b80      	cmp	r3, #128	; 0x80
 80047d2:	d804      	bhi.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x142>
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d008      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80047d8:	2b40      	cmp	r3, #64	; 0x40
 80047da:	d00d      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80047dc:	e01e      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x180>
 80047de:	2bc0      	cmp	r3, #192	; 0xc0
 80047e0:	d01f      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80047e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047e6:	d01e      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80047e8:	e018      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047ea:	4b6c      	ldr	r3, [pc, #432]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80047ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ee:	4a6b      	ldr	r2, [pc, #428]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80047f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80047f6:	e017      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	3304      	adds	r3, #4
 80047fc:	2100      	movs	r1, #0
 80047fe:	4618      	mov	r0, r3
 8004800:	f001 fc9c 	bl	800613c <RCCEx_PLL2_Config>
 8004804:	4603      	mov	r3, r0
 8004806:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004808:	e00e      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	3324      	adds	r3, #36	; 0x24
 800480e:	2100      	movs	r1, #0
 8004810:	4618      	mov	r0, r3
 8004812:	f001 fd45 	bl	80062a0 <RCCEx_PLL3_Config>
 8004816:	4603      	mov	r3, r0
 8004818:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800481a:	e005      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	75fb      	strb	r3, [r7, #23]
      break;
 8004820:	e002      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004822:	bf00      	nop
 8004824:	e000      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004826:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004828:	7dfb      	ldrb	r3, [r7, #23]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d109      	bne.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800482e:	4b5b      	ldr	r3, [pc, #364]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004832:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483a:	4958      	ldr	r1, [pc, #352]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800483c:	4313      	orrs	r3, r2
 800483e:	650b      	str	r3, [r1, #80]	; 0x50
 8004840:	e001      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004842:	7dfb      	ldrb	r3, [r7, #23]
 8004844:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800484e:	2b00      	cmp	r3, #0
 8004850:	d044      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004858:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800485c:	d01f      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800485e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004862:	d805      	bhi.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00a      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004868:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800486c:	d00e      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800486e:	e01f      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8004870:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004874:	d01f      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8004876:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800487a:	d01e      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800487c:	e018      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800487e:	4b47      	ldr	r3, [pc, #284]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004882:	4a46      	ldr	r2, [pc, #280]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004888:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800488a:	e017      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	3304      	adds	r3, #4
 8004890:	2100      	movs	r1, #0
 8004892:	4618      	mov	r0, r3
 8004894:	f001 fc52 	bl	800613c <RCCEx_PLL2_Config>
 8004898:	4603      	mov	r3, r0
 800489a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800489c:	e00e      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	3324      	adds	r3, #36	; 0x24
 80048a2:	2100      	movs	r1, #0
 80048a4:	4618      	mov	r0, r3
 80048a6:	f001 fcfb 	bl	80062a0 <RCCEx_PLL3_Config>
 80048aa:	4603      	mov	r3, r0
 80048ac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80048ae:	e005      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	75fb      	strb	r3, [r7, #23]
      break;
 80048b4:	e002      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80048b6:	bf00      	nop
 80048b8:	e000      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80048ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048bc:	7dfb      	ldrb	r3, [r7, #23]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10a      	bne.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80048c2:	4b36      	ldr	r3, [pc, #216]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80048c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80048d0:	4932      	ldr	r1, [pc, #200]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	658b      	str	r3, [r1, #88]	; 0x58
 80048d6:	e001      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d8:	7dfb      	ldrb	r3, [r7, #23]
 80048da:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d044      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80048ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048f2:	d01f      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80048f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048f8:	d805      	bhi.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00a      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80048fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004902:	d00e      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004904:	e01f      	b.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8004906:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800490a:	d01f      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800490c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004910:	d01e      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004912:	e018      	b.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004914:	4b21      	ldr	r3, [pc, #132]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004918:	4a20      	ldr	r2, [pc, #128]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800491a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800491e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004920:	e017      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	3304      	adds	r3, #4
 8004926:	2100      	movs	r1, #0
 8004928:	4618      	mov	r0, r3
 800492a:	f001 fc07 	bl	800613c <RCCEx_PLL2_Config>
 800492e:	4603      	mov	r3, r0
 8004930:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004932:	e00e      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	3324      	adds	r3, #36	; 0x24
 8004938:	2100      	movs	r1, #0
 800493a:	4618      	mov	r0, r3
 800493c:	f001 fcb0 	bl	80062a0 <RCCEx_PLL3_Config>
 8004940:	4603      	mov	r3, r0
 8004942:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004944:	e005      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	75fb      	strb	r3, [r7, #23]
      break;
 800494a:	e002      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800494c:	bf00      	nop
 800494e:	e000      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004950:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004952:	7dfb      	ldrb	r3, [r7, #23]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10a      	bne.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004958:	4b10      	ldr	r3, [pc, #64]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800495a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800495c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004966:	490d      	ldr	r1, [pc, #52]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004968:	4313      	orrs	r3, r2
 800496a:	658b      	str	r3, [r1, #88]	; 0x58
 800496c:	e001      	b.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800496e:	7dfb      	ldrb	r3, [r7, #23]
 8004970:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d035      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004982:	2b10      	cmp	r3, #16
 8004984:	d00c      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8004986:	2b10      	cmp	r3, #16
 8004988:	d802      	bhi.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800498a:	2b00      	cmp	r3, #0
 800498c:	d01b      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800498e:	e017      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004990:	2b20      	cmp	r3, #32
 8004992:	d00c      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004994:	2b30      	cmp	r3, #48	; 0x30
 8004996:	d018      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8004998:	e012      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800499a:	bf00      	nop
 800499c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049a0:	4baf      	ldr	r3, [pc, #700]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80049a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a4:	4aae      	ldr	r2, [pc, #696]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80049a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80049ac:	e00e      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	3304      	adds	r3, #4
 80049b2:	2102      	movs	r1, #2
 80049b4:	4618      	mov	r0, r3
 80049b6:	f001 fbc1 	bl	800613c <RCCEx_PLL2_Config>
 80049ba:	4603      	mov	r3, r0
 80049bc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80049be:	e005      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	75fb      	strb	r3, [r7, #23]
      break;
 80049c4:	e002      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80049c6:	bf00      	nop
 80049c8:	e000      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80049ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049cc:	7dfb      	ldrb	r3, [r7, #23]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d109      	bne.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80049d2:	4ba3      	ldr	r3, [pc, #652]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80049d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049d6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049de:	49a0      	ldr	r1, [pc, #640]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80049e4:	e001      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e6:	7dfb      	ldrb	r3, [r7, #23]
 80049e8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d042      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049fe:	d01f      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004a00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a04:	d805      	bhi.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00a      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8004a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a0e:	d00e      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8004a10:	e01f      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8004a12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a16:	d01f      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004a18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a1c:	d01e      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004a1e:	e018      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a20:	4b8f      	ldr	r3, [pc, #572]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a24:	4a8e      	ldr	r2, [pc, #568]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004a26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004a2c:	e017      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	3304      	adds	r3, #4
 8004a32:	2100      	movs	r1, #0
 8004a34:	4618      	mov	r0, r3
 8004a36:	f001 fb81 	bl	800613c <RCCEx_PLL2_Config>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004a3e:	e00e      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	3324      	adds	r3, #36	; 0x24
 8004a44:	2100      	movs	r1, #0
 8004a46:	4618      	mov	r0, r3
 8004a48:	f001 fc2a 	bl	80062a0 <RCCEx_PLL3_Config>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004a50:	e005      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	75fb      	strb	r3, [r7, #23]
      break;
 8004a56:	e002      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004a58:	bf00      	nop
 8004a5a:	e000      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004a5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a5e:	7dfb      	ldrb	r3, [r7, #23]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d109      	bne.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004a64:	4b7e      	ldr	r3, [pc, #504]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a68:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a70:	497b      	ldr	r1, [pc, #492]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	650b      	str	r3, [r1, #80]	; 0x50
 8004a76:	e001      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a78:	7dfb      	ldrb	r3, [r7, #23]
 8004a7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d042      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a90:	d01b      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004a92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a96:	d805      	bhi.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d022      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8004a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aa0:	d00a      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004aa2:	e01b      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x440>
 8004aa4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004aa8:	d01d      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8004aaa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004aae:	d01c      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8004ab0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ab4:	d01b      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x452>
 8004ab6:	e011      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3304      	adds	r3, #4
 8004abc:	2101      	movs	r1, #1
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f001 fb3c 	bl	800613c <RCCEx_PLL2_Config>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004ac8:	e012      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	3324      	adds	r3, #36	; 0x24
 8004ace:	2101      	movs	r1, #1
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f001 fbe5 	bl	80062a0 <RCCEx_PLL3_Config>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004ada:	e009      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	75fb      	strb	r3, [r7, #23]
      break;
 8004ae0:	e006      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004ae2:	bf00      	nop
 8004ae4:	e004      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004ae6:	bf00      	nop
 8004ae8:	e002      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004aea:	bf00      	nop
 8004aec:	e000      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004aee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004af0:	7dfb      	ldrb	r3, [r7, #23]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d109      	bne.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004af6:	4b5a      	ldr	r3, [pc, #360]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004afa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b02:	4957      	ldr	r1, [pc, #348]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	650b      	str	r3, [r1, #80]	; 0x50
 8004b08:	e001      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b0a:	7dfb      	ldrb	r3, [r7, #23]
 8004b0c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d044      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b24:	d01b      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004b26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b2a:	d805      	bhi.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d022      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004b30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b34:	d00a      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004b36:	e01b      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8004b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b3c:	d01d      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004b3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b42:	d01c      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8004b44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b48:	d01b      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004b4a:	e011      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3304      	adds	r3, #4
 8004b50:	2101      	movs	r1, #1
 8004b52:	4618      	mov	r0, r3
 8004b54:	f001 faf2 	bl	800613c <RCCEx_PLL2_Config>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004b5c:	e012      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	3324      	adds	r3, #36	; 0x24
 8004b62:	2101      	movs	r1, #1
 8004b64:	4618      	mov	r0, r3
 8004b66:	f001 fb9b 	bl	80062a0 <RCCEx_PLL3_Config>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004b6e:	e009      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	75fb      	strb	r3, [r7, #23]
      break;
 8004b74:	e006      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004b76:	bf00      	nop
 8004b78:	e004      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004b7a:	bf00      	nop
 8004b7c:	e002      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004b7e:	bf00      	nop
 8004b80:	e000      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004b82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b84:	7dfb      	ldrb	r3, [r7, #23]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10a      	bne.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004b8a:	4b35      	ldr	r3, [pc, #212]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b98:	4931      	ldr	r1, [pc, #196]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	658b      	str	r3, [r1, #88]	; 0x58
 8004b9e:	e001      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba0:	7dfb      	ldrb	r3, [r7, #23]
 8004ba2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d02d      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bb8:	d005      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004bba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bbe:	d009      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d013      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004bc4:	e00f      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bc6:	4b26      	ldr	r3, [pc, #152]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bca:	4a25      	ldr	r2, [pc, #148]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bd0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004bd2:	e00c      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	2101      	movs	r1, #1
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f001 faae 	bl	800613c <RCCEx_PLL2_Config>
 8004be0:	4603      	mov	r3, r0
 8004be2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004be4:	e003      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	75fb      	strb	r3, [r7, #23]
      break;
 8004bea:	e000      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8004bec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bee:	7dfb      	ldrb	r3, [r7, #23]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d109      	bne.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004bf4:	4b1a      	ldr	r3, [pc, #104]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c00:	4917      	ldr	r1, [pc, #92]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	650b      	str	r3, [r1, #80]	; 0x50
 8004c06:	e001      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c08:	7dfb      	ldrb	r3, [r7, #23]
 8004c0a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d035      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1c:	2b03      	cmp	r3, #3
 8004c1e:	d81b      	bhi.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004c20:	a201      	add	r2, pc, #4	; (adr r2, 8004c28 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8004c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c26:	bf00      	nop
 8004c28:	08004c65 	.word	0x08004c65
 8004c2c:	08004c39 	.word	0x08004c39
 8004c30:	08004c47 	.word	0x08004c47
 8004c34:	08004c65 	.word	0x08004c65
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c38:	4b09      	ldr	r3, [pc, #36]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3c:	4a08      	ldr	r2, [pc, #32]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004c3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004c44:	e00f      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	3304      	adds	r3, #4
 8004c4a:	2102      	movs	r1, #2
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f001 fa75 	bl	800613c <RCCEx_PLL2_Config>
 8004c52:	4603      	mov	r3, r0
 8004c54:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004c56:	e006      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c5c:	e003      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8004c5e:	bf00      	nop
 8004c60:	58024400 	.word	0x58024400
      break;
 8004c64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c66:	7dfb      	ldrb	r3, [r7, #23]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d109      	bne.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004c6c:	4bba      	ldr	r3, [pc, #744]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c70:	f023 0203 	bic.w	r2, r3, #3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c78:	49b7      	ldr	r1, [pc, #732]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004c7e:	e001      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c80:	7dfb      	ldrb	r3, [r7, #23]
 8004c82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 8086 	beq.w	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c92:	4bb2      	ldr	r3, [pc, #712]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4ab1      	ldr	r2, [pc, #708]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c9e:	f7fc fba5 	bl	80013ec <HAL_GetTick>
 8004ca2:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ca4:	e009      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ca6:	f7fc fba1 	bl	80013ec <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	2b64      	cmp	r3, #100	; 0x64
 8004cb2:	d902      	bls.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	75fb      	strb	r3, [r7, #23]
        break;
 8004cb8:	e005      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cba:	4ba8      	ldr	r3, [pc, #672]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d0ef      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8004cc6:	7dfb      	ldrb	r3, [r7, #23]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d166      	bne.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004ccc:	4ba2      	ldr	r3, [pc, #648]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004cce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004cd6:	4053      	eors	r3, r2
 8004cd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d013      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ce0:	4b9d      	ldr	r3, [pc, #628]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ce8:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cea:	4b9b      	ldr	r3, [pc, #620]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cee:	4a9a      	ldr	r2, [pc, #616]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cf6:	4b98      	ldr	r3, [pc, #608]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfa:	4a97      	ldr	r2, [pc, #604]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d00:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004d02:	4a95      	ldr	r2, [pc, #596]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d12:	d115      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d14:	f7fc fb6a 	bl	80013ec <HAL_GetTick>
 8004d18:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d1a:	e00b      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d1c:	f7fc fb66 	bl	80013ec <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d902      	bls.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	75fb      	strb	r3, [r7, #23]
            break;
 8004d32:	e005      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d34:	4b88      	ldr	r3, [pc, #544]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0ed      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8004d40:	7dfb      	ldrb	r3, [r7, #23]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d126      	bne.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d54:	d10d      	bne.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8004d56:	4b80      	ldr	r3, [pc, #512]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d64:	0919      	lsrs	r1, r3, #4
 8004d66:	4b7e      	ldr	r3, [pc, #504]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8004d68:	400b      	ands	r3, r1
 8004d6a:	497b      	ldr	r1, [pc, #492]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	610b      	str	r3, [r1, #16]
 8004d70:	e005      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8004d72:	4b79      	ldr	r3, [pc, #484]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	4a78      	ldr	r2, [pc, #480]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004d78:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004d7c:	6113      	str	r3, [r2, #16]
 8004d7e:	4b76      	ldr	r3, [pc, #472]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004d80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d8c:	4972      	ldr	r1, [pc, #456]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	670b      	str	r3, [r1, #112]	; 0x70
 8004d92:	e004      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d94:	7dfb      	ldrb	r3, [r7, #23]
 8004d96:	75bb      	strb	r3, [r7, #22]
 8004d98:	e001      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d9a:	7dfb      	ldrb	r3, [r7, #23]
 8004d9c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d07d      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dae:	2b28      	cmp	r3, #40	; 0x28
 8004db0:	d866      	bhi.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8004db2:	a201      	add	r2, pc, #4	; (adr r2, 8004db8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db8:	08004e87 	.word	0x08004e87
 8004dbc:	08004e81 	.word	0x08004e81
 8004dc0:	08004e81 	.word	0x08004e81
 8004dc4:	08004e81 	.word	0x08004e81
 8004dc8:	08004e81 	.word	0x08004e81
 8004dcc:	08004e81 	.word	0x08004e81
 8004dd0:	08004e81 	.word	0x08004e81
 8004dd4:	08004e81 	.word	0x08004e81
 8004dd8:	08004e5d 	.word	0x08004e5d
 8004ddc:	08004e81 	.word	0x08004e81
 8004de0:	08004e81 	.word	0x08004e81
 8004de4:	08004e81 	.word	0x08004e81
 8004de8:	08004e81 	.word	0x08004e81
 8004dec:	08004e81 	.word	0x08004e81
 8004df0:	08004e81 	.word	0x08004e81
 8004df4:	08004e81 	.word	0x08004e81
 8004df8:	08004e6f 	.word	0x08004e6f
 8004dfc:	08004e81 	.word	0x08004e81
 8004e00:	08004e81 	.word	0x08004e81
 8004e04:	08004e81 	.word	0x08004e81
 8004e08:	08004e81 	.word	0x08004e81
 8004e0c:	08004e81 	.word	0x08004e81
 8004e10:	08004e81 	.word	0x08004e81
 8004e14:	08004e81 	.word	0x08004e81
 8004e18:	08004e87 	.word	0x08004e87
 8004e1c:	08004e81 	.word	0x08004e81
 8004e20:	08004e81 	.word	0x08004e81
 8004e24:	08004e81 	.word	0x08004e81
 8004e28:	08004e81 	.word	0x08004e81
 8004e2c:	08004e81 	.word	0x08004e81
 8004e30:	08004e81 	.word	0x08004e81
 8004e34:	08004e81 	.word	0x08004e81
 8004e38:	08004e87 	.word	0x08004e87
 8004e3c:	08004e81 	.word	0x08004e81
 8004e40:	08004e81 	.word	0x08004e81
 8004e44:	08004e81 	.word	0x08004e81
 8004e48:	08004e81 	.word	0x08004e81
 8004e4c:	08004e81 	.word	0x08004e81
 8004e50:	08004e81 	.word	0x08004e81
 8004e54:	08004e81 	.word	0x08004e81
 8004e58:	08004e87 	.word	0x08004e87
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3304      	adds	r3, #4
 8004e60:	2101      	movs	r1, #1
 8004e62:	4618      	mov	r0, r3
 8004e64:	f001 f96a 	bl	800613c <RCCEx_PLL2_Config>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004e6c:	e00c      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	3324      	adds	r3, #36	; 0x24
 8004e72:	2101      	movs	r1, #1
 8004e74:	4618      	mov	r0, r3
 8004e76:	f001 fa13 	bl	80062a0 <RCCEx_PLL3_Config>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004e7e:	e003      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	75fb      	strb	r3, [r7, #23]
      break;
 8004e84:	e000      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8004e86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e88:	7dfb      	ldrb	r3, [r7, #23]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d109      	bne.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004e8e:	4b32      	ldr	r3, [pc, #200]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e92:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e9a:	492f      	ldr	r1, [pc, #188]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	654b      	str	r3, [r1, #84]	; 0x54
 8004ea0:	e001      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea2:	7dfb      	ldrb	r3, [r7, #23]
 8004ea4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d037      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb6:	2b05      	cmp	r3, #5
 8004eb8:	d820      	bhi.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x860>
 8004eba:	a201      	add	r2, pc, #4	; (adr r2, 8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec0:	08004f03 	.word	0x08004f03
 8004ec4:	08004ed9 	.word	0x08004ed9
 8004ec8:	08004eeb 	.word	0x08004eeb
 8004ecc:	08004f03 	.word	0x08004f03
 8004ed0:	08004f03 	.word	0x08004f03
 8004ed4:	08004f03 	.word	0x08004f03
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	3304      	adds	r3, #4
 8004edc:	2101      	movs	r1, #1
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f001 f92c 	bl	800613c <RCCEx_PLL2_Config>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004ee8:	e00c      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	3324      	adds	r3, #36	; 0x24
 8004eee:	2101      	movs	r1, #1
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f001 f9d5 	bl	80062a0 <RCCEx_PLL3_Config>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004efa:	e003      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	75fb      	strb	r3, [r7, #23]
      break;
 8004f00:	e000      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8004f02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f04:	7dfb      	ldrb	r3, [r7, #23]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d109      	bne.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004f0a:	4b13      	ldr	r3, [pc, #76]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f0e:	f023 0207 	bic.w	r2, r3, #7
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f16:	4910      	ldr	r1, [pc, #64]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	654b      	str	r3, [r1, #84]	; 0x54
 8004f1c:	e001      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f1e:	7dfb      	ldrb	r3, [r7, #23]
 8004f20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0304 	and.w	r3, r3, #4
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d040      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f34:	2b05      	cmp	r3, #5
 8004f36:	d827      	bhi.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8004f38:	a201      	add	r2, pc, #4	; (adr r2, 8004f40 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8004f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3e:	bf00      	nop
 8004f40:	08004f8f 	.word	0x08004f8f
 8004f44:	08004f65 	.word	0x08004f65
 8004f48:	08004f77 	.word	0x08004f77
 8004f4c:	08004f8f 	.word	0x08004f8f
 8004f50:	08004f8f 	.word	0x08004f8f
 8004f54:	08004f8f 	.word	0x08004f8f
 8004f58:	58024400 	.word	0x58024400
 8004f5c:	58024800 	.word	0x58024800
 8004f60:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	3304      	adds	r3, #4
 8004f68:	2101      	movs	r1, #1
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f001 f8e6 	bl	800613c <RCCEx_PLL2_Config>
 8004f70:	4603      	mov	r3, r0
 8004f72:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004f74:	e00c      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	3324      	adds	r3, #36	; 0x24
 8004f7a:	2101      	movs	r1, #1
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f001 f98f 	bl	80062a0 <RCCEx_PLL3_Config>
 8004f82:	4603      	mov	r3, r0
 8004f84:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004f86:	e003      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f8c:	e000      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8004f8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f90:	7dfb      	ldrb	r3, [r7, #23]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10a      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f96:	4bb2      	ldr	r3, [pc, #712]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9a:	f023 0207 	bic.w	r2, r3, #7
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa4:	49ae      	ldr	r1, [pc, #696]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	658b      	str	r3, [r1, #88]	; 0x58
 8004faa:	e001      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fac:	7dfb      	ldrb	r3, [r7, #23]
 8004fae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0320 	and.w	r3, r3, #32
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d044      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fc6:	d01b      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8004fc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fcc:	d805      	bhi.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d022      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8004fd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fd6:	d00a      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x952>
 8004fd8:	e01b      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fde:	d01d      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8004fe0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004fe4:	d01c      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004fe6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004fea:	d01b      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004fec:	e011      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	3304      	adds	r3, #4
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f001 f8a1 	bl	800613c <RCCEx_PLL2_Config>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004ffe:	e012      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	3324      	adds	r3, #36	; 0x24
 8005004:	2102      	movs	r1, #2
 8005006:	4618      	mov	r0, r3
 8005008:	f001 f94a 	bl	80062a0 <RCCEx_PLL3_Config>
 800500c:	4603      	mov	r3, r0
 800500e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005010:	e009      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	75fb      	strb	r3, [r7, #23]
      break;
 8005016:	e006      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005018:	bf00      	nop
 800501a:	e004      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800501c:	bf00      	nop
 800501e:	e002      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005020:	bf00      	nop
 8005022:	e000      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005024:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005026:	7dfb      	ldrb	r3, [r7, #23]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10a      	bne.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800502c:	4b8c      	ldr	r3, [pc, #560]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800502e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005030:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800503a:	4989      	ldr	r1, [pc, #548]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800503c:	4313      	orrs	r3, r2
 800503e:	654b      	str	r3, [r1, #84]	; 0x54
 8005040:	e001      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005042:	7dfb      	ldrb	r3, [r7, #23]
 8005044:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504e:	2b00      	cmp	r3, #0
 8005050:	d044      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005058:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800505c:	d01b      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800505e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005062:	d805      	bhi.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8005064:	2b00      	cmp	r3, #0
 8005066:	d022      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005068:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800506c:	d00a      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800506e:	e01b      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8005070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005074:	d01d      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8005076:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800507a:	d01c      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800507c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005080:	d01b      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8005082:	e011      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	3304      	adds	r3, #4
 8005088:	2100      	movs	r1, #0
 800508a:	4618      	mov	r0, r3
 800508c:	f001 f856 	bl	800613c <RCCEx_PLL2_Config>
 8005090:	4603      	mov	r3, r0
 8005092:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005094:	e012      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	3324      	adds	r3, #36	; 0x24
 800509a:	2102      	movs	r1, #2
 800509c:	4618      	mov	r0, r3
 800509e:	f001 f8ff 	bl	80062a0 <RCCEx_PLL3_Config>
 80050a2:	4603      	mov	r3, r0
 80050a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80050a6:	e009      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	75fb      	strb	r3, [r7, #23]
      break;
 80050ac:	e006      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80050ae:	bf00      	nop
 80050b0:	e004      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80050b2:	bf00      	nop
 80050b4:	e002      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80050b6:	bf00      	nop
 80050b8:	e000      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80050ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050bc:	7dfb      	ldrb	r3, [r7, #23]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10a      	bne.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80050c2:	4b67      	ldr	r3, [pc, #412]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80050c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050d0:	4963      	ldr	r1, [pc, #396]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	658b      	str	r3, [r1, #88]	; 0x58
 80050d6:	e001      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d8:	7dfb      	ldrb	r3, [r7, #23]
 80050da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d044      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050f2:	d01b      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80050f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050f8:	d805      	bhi.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d022      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80050fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005102:	d00a      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005104:	e01b      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8005106:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800510a:	d01d      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800510c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005110:	d01c      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8005112:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005116:	d01b      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8005118:	e011      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	3304      	adds	r3, #4
 800511e:	2100      	movs	r1, #0
 8005120:	4618      	mov	r0, r3
 8005122:	f001 f80b 	bl	800613c <RCCEx_PLL2_Config>
 8005126:	4603      	mov	r3, r0
 8005128:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800512a:	e012      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	3324      	adds	r3, #36	; 0x24
 8005130:	2102      	movs	r1, #2
 8005132:	4618      	mov	r0, r3
 8005134:	f001 f8b4 	bl	80062a0 <RCCEx_PLL3_Config>
 8005138:	4603      	mov	r3, r0
 800513a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800513c:	e009      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	75fb      	strb	r3, [r7, #23]
      break;
 8005142:	e006      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005144:	bf00      	nop
 8005146:	e004      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005148:	bf00      	nop
 800514a:	e002      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800514c:	bf00      	nop
 800514e:	e000      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005150:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005152:	7dfb      	ldrb	r3, [r7, #23]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10a      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005158:	4b41      	ldr	r3, [pc, #260]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800515a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800515c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005166:	493e      	ldr	r1, [pc, #248]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005168:	4313      	orrs	r3, r2
 800516a:	658b      	str	r3, [r1, #88]	; 0x58
 800516c:	e001      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800516e:	7dfb      	ldrb	r3, [r7, #23]
 8005170:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0308 	and.w	r3, r3, #8
 800517a:	2b00      	cmp	r3, #0
 800517c:	d01a      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005184:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005188:	d10a      	bne.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	3324      	adds	r3, #36	; 0x24
 800518e:	2102      	movs	r1, #2
 8005190:	4618      	mov	r0, r3
 8005192:	f001 f885 	bl	80062a0 <RCCEx_PLL3_Config>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80051a0:	4b2f      	ldr	r3, [pc, #188]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80051a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051ae:	492c      	ldr	r1, [pc, #176]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0310 	and.w	r3, r3, #16
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d01a      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ca:	d10a      	bne.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	3324      	adds	r3, #36	; 0x24
 80051d0:	2102      	movs	r1, #2
 80051d2:	4618      	mov	r0, r3
 80051d4:	f001 f864 	bl	80062a0 <RCCEx_PLL3_Config>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80051e2:	4b1f      	ldr	r3, [pc, #124]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80051e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051f0:	491b      	ldr	r1, [pc, #108]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d032      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800520c:	d00d      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800520e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005212:	d016      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8005214:	2b00      	cmp	r3, #0
 8005216:	d111      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	3304      	adds	r3, #4
 800521c:	2100      	movs	r1, #0
 800521e:	4618      	mov	r0, r3
 8005220:	f000 ff8c 	bl	800613c <RCCEx_PLL2_Config>
 8005224:	4603      	mov	r3, r0
 8005226:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005228:	e00c      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	3324      	adds	r3, #36	; 0x24
 800522e:	2102      	movs	r1, #2
 8005230:	4618      	mov	r0, r3
 8005232:	f001 f835 	bl	80062a0 <RCCEx_PLL3_Config>
 8005236:	4603      	mov	r3, r0
 8005238:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800523a:	e003      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	75fb      	strb	r3, [r7, #23]
      break;
 8005240:	e000      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8005242:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005244:	7dfb      	ldrb	r3, [r7, #23]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10c      	bne.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800524a:	4b05      	ldr	r3, [pc, #20]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800524c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800524e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005258:	4901      	ldr	r1, [pc, #4]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800525a:	4313      	orrs	r3, r2
 800525c:	658b      	str	r3, [r1, #88]	; 0x58
 800525e:	e003      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8005260:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005264:	7dfb      	ldrb	r3, [r7, #23]
 8005266:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d02f      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800527a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800527e:	d00c      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005280:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005284:	d015      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8005286:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800528a:	d10f      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800528c:	4b71      	ldr	r3, [pc, #452]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800528e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005290:	4a70      	ldr	r2, [pc, #448]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005296:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005298:	e00c      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	3324      	adds	r3, #36	; 0x24
 800529e:	2101      	movs	r1, #1
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 fffd 	bl	80062a0 <RCCEx_PLL3_Config>
 80052a6:	4603      	mov	r3, r0
 80052a8:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80052aa:	e003      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	75fb      	strb	r3, [r7, #23]
      break;
 80052b0:	e000      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80052b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052b4:	7dfb      	ldrb	r3, [r7, #23]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10a      	bne.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052ba:	4b66      	ldr	r3, [pc, #408]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80052bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052c8:	4962      	ldr	r1, [pc, #392]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	654b      	str	r3, [r1, #84]	; 0x54
 80052ce:	e001      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d0:	7dfb      	ldrb	r3, [r7, #23]
 80052d2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d029      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d003      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80052e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052ec:	d007      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80052ee:	e00f      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052f0:	4b58      	ldr	r3, [pc, #352]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80052f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f4:	4a57      	ldr	r2, [pc, #348]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80052f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80052fc:	e00b      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	3304      	adds	r3, #4
 8005302:	2102      	movs	r1, #2
 8005304:	4618      	mov	r0, r3
 8005306:	f000 ff19 	bl	800613c <RCCEx_PLL2_Config>
 800530a:	4603      	mov	r3, r0
 800530c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800530e:	e002      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	75fb      	strb	r3, [r7, #23]
      break;
 8005314:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005316:	7dfb      	ldrb	r3, [r7, #23]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d109      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800531c:	4b4d      	ldr	r3, [pc, #308]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800531e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005320:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005328:	494a      	ldr	r1, [pc, #296]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800532a:	4313      	orrs	r3, r2
 800532c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800532e:	e001      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005330:	7dfb      	ldrb	r3, [r7, #23]
 8005332:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00a      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	3324      	adds	r3, #36	; 0x24
 8005344:	2102      	movs	r1, #2
 8005346:	4618      	mov	r0, r3
 8005348:	f000 ffaa 	bl	80062a0 <RCCEx_PLL3_Config>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d02f      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800536a:	d00c      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800536c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005370:	d802      	bhi.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005372:	2b00      	cmp	r3, #0
 8005374:	d011      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8005376:	e00d      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8005378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800537c:	d00f      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800537e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005382:	d00e      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8005384:	e006      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005386:	4b33      	ldr	r3, [pc, #204]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538a:	4a32      	ldr	r2, [pc, #200]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800538c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005390:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005392:	e007      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	75fb      	strb	r3, [r7, #23]
      break;
 8005398:	e004      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800539a:	bf00      	nop
 800539c:	e002      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800539e:	bf00      	nop
 80053a0:	e000      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80053a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053a4:	7dfb      	ldrb	r3, [r7, #23]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d109      	bne.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053aa:	4b2a      	ldr	r3, [pc, #168]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80053ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053b6:	4927      	ldr	r1, [pc, #156]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	654b      	str	r3, [r1, #84]	; 0x54
 80053bc:	e001      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053be:	7dfb      	ldrb	r3, [r7, #23]
 80053c0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d008      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80053ce:	4b21      	ldr	r3, [pc, #132]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80053d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053da:	491e      	ldr	r1, [pc, #120]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d008      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053ec:	4b19      	ldr	r3, [pc, #100]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80053ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053f0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053f8:	4916      	ldr	r1, [pc, #88]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00d      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800540a:	4b12      	ldr	r3, [pc, #72]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	4a11      	ldr	r2, [pc, #68]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005410:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005414:	6113      	str	r3, [r2, #16]
 8005416:	4b0f      	ldr	r3, [pc, #60]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005418:	691a      	ldr	r2, [r3, #16]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005420:	490c      	ldr	r1, [pc, #48]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005422:	4313      	orrs	r3, r2
 8005424:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	da08      	bge.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800542e:	4b09      	ldr	r3, [pc, #36]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005432:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800543a:	4906      	ldr	r1, [pc, #24]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800543c:	4313      	orrs	r3, r2
 800543e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005440:	7dbb      	ldrb	r3, [r7, #22]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8005446:	2300      	movs	r3, #0
 8005448:	e000      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
}
 800544c:	4618      	mov	r0, r3
 800544e:	3718      	adds	r7, #24
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	58024400 	.word	0x58024400

08005458 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b090      	sub	sp, #64	; 0x40
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005466:	d150      	bne.n	800550a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8005468:	4ba1      	ldr	r3, [pc, #644]	; (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800546a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800546c:	f003 0307 	and.w	r3, r3, #7
 8005470:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005474:	2b04      	cmp	r3, #4
 8005476:	d844      	bhi.n	8005502 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8005478:	a201      	add	r2, pc, #4	; (adr r2, 8005480 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800547a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547e:	bf00      	nop
 8005480:	08005495 	.word	0x08005495
 8005484:	080054a5 	.word	0x080054a5
 8005488:	080054b5 	.word	0x080054b5
 800548c:	080054fd 	.word	0x080054fd
 8005490:	080054c5 	.word	0x080054c5
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005498:	4618      	mov	r0, r3
 800549a:	f000 fd03 	bl	8005ea4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800549e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054a2:	e241      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054a4:	f107 0318 	add.w	r3, r7, #24
 80054a8:	4618      	mov	r0, r3
 80054aa:	f000 fa63 	bl	8005974 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054b2:	e239      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054b4:	f107 030c 	add.w	r3, r7, #12
 80054b8:	4618      	mov	r0, r3
 80054ba:	f000 fba7 	bl	8005c0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054c2:	e231      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80054c4:	4b8a      	ldr	r3, [pc, #552]	; (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80054c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80054cc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80054ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d102      	bne.n	80054da <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80054d4:	4b87      	ldr	r3, [pc, #540]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80054d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80054d8:	e226      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80054da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054e0:	d102      	bne.n	80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 80054e2:	4b85      	ldr	r3, [pc, #532]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80054e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054e6:	e21f      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80054e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054ee:	d102      	bne.n	80054f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 80054f0:	4b82      	ldr	r3, [pc, #520]	; (80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80054f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054f4:	e218      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80054f6:	2300      	movs	r3, #0
 80054f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054fa:	e215      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80054fc:	4b80      	ldr	r3, [pc, #512]	; (8005700 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80054fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005500:	e212      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8005502:	2300      	movs	r3, #0
 8005504:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005506:	bf00      	nop
 8005508:	e20e      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005510:	d14f      	bne.n	80055b2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8005512:	4b77      	ldr	r3, [pc, #476]	; (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005516:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800551a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800551c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551e:	2b80      	cmp	r3, #128	; 0x80
 8005520:	d01c      	beq.n	800555c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8005522:	2b80      	cmp	r3, #128	; 0x80
 8005524:	d804      	bhi.n	8005530 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8005526:	2b00      	cmp	r3, #0
 8005528:	d008      	beq.n	800553c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800552a:	2b40      	cmp	r3, #64	; 0x40
 800552c:	d00e      	beq.n	800554c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800552e:	e03c      	b.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8005530:	2bc0      	cmp	r3, #192	; 0xc0
 8005532:	d037      	beq.n	80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8005534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005538:	d018      	beq.n	800556c <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800553a:	e036      	b.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800553c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005540:	4618      	mov	r0, r3
 8005542:	f000 fcaf 	bl	8005ea4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005548:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800554a:	e1ed      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800554c:	f107 0318 	add.w	r3, r7, #24
 8005550:	4618      	mov	r0, r3
 8005552:	f000 fa0f 	bl	8005974 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800555a:	e1e5      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800555c:	f107 030c 	add.w	r3, r7, #12
 8005560:	4618      	mov	r0, r3
 8005562:	f000 fb53 	bl	8005c0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800556a:	e1dd      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800556c:	4b60      	ldr	r3, [pc, #384]	; (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800556e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005570:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005574:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005578:	2b00      	cmp	r3, #0
 800557a:	d102      	bne.n	8005582 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800557c:	4b5d      	ldr	r3, [pc, #372]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800557e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005580:	e1d2      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005584:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005588:	d102      	bne.n	8005590 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800558a:	4b5b      	ldr	r3, [pc, #364]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800558c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800558e:	e1cb      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005592:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005596:	d102      	bne.n	800559e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8005598:	4b58      	ldr	r3, [pc, #352]	; (80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800559a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800559c:	e1c4      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800559e:	2300      	movs	r3, #0
 80055a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055a2:	e1c1      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80055a4:	4b56      	ldr	r3, [pc, #344]	; (8005700 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80055a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055a8:	e1be      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80055aa:	2300      	movs	r3, #0
 80055ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055ae:	bf00      	nop
 80055b0:	e1ba      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055b8:	d153      	bne.n	8005662 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80055ba:	4b4d      	ldr	r3, [pc, #308]	; (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80055bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055be:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80055c2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80055c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055ca:	d01f      	beq.n	800560c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80055cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055d0:	d805      	bhi.n	80055de <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00a      	beq.n	80055ec <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80055d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055da:	d00f      	beq.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80055dc:	e03d      	b.n	800565a <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 80055de:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80055e2:	d037      	beq.n	8005654 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80055e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055e8:	d018      	beq.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 80055ea:	e036      	b.n	800565a <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055f0:	4618      	mov	r0, r3
 80055f2:	f000 fc57 	bl	8005ea4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80055f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055fa:	e195      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055fc:	f107 0318 	add.w	r3, r7, #24
 8005600:	4618      	mov	r0, r3
 8005602:	f000 f9b7 	bl	8005974 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800560a:	e18d      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800560c:	f107 030c 	add.w	r3, r7, #12
 8005610:	4618      	mov	r0, r3
 8005612:	f000 fafb 	bl	8005c0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800561a:	e185      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800561c:	4b34      	ldr	r3, [pc, #208]	; (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800561e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005620:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005624:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005628:	2b00      	cmp	r3, #0
 800562a:	d102      	bne.n	8005632 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800562c:	4b31      	ldr	r3, [pc, #196]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800562e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005630:	e17a      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005634:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005638:	d102      	bne.n	8005640 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800563a:	4b2f      	ldr	r3, [pc, #188]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800563c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800563e:	e173      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005642:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005646:	d102      	bne.n	800564e <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8005648:	4b2c      	ldr	r3, [pc, #176]	; (80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800564a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800564c:	e16c      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800564e:	2300      	movs	r3, #0
 8005650:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005652:	e169      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005654:	4b2a      	ldr	r3, [pc, #168]	; (8005700 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8005656:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005658:	e166      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800565a:	2300      	movs	r3, #0
 800565c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800565e:	bf00      	nop
 8005660:	e162      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005668:	d15d      	bne.n	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800566a:	4b21      	ldr	r3, [pc, #132]	; (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800566c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800566e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005672:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005676:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800567a:	d01f      	beq.n	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800567c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005680:	d805      	bhi.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00a      	beq.n	800569c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8005686:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800568a:	d00f      	beq.n	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800568c:	e047      	b.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800568e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005692:	d041      	beq.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8005694:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005698:	d018      	beq.n	80056cc <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800569a:	e040      	b.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800569c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056a0:	4618      	mov	r0, r3
 80056a2:	f000 fbff 	bl	8005ea4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80056a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056aa:	e13d      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056ac:	f107 0318 	add.w	r3, r7, #24
 80056b0:	4618      	mov	r0, r3
 80056b2:	f000 f95f 	bl	8005974 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056ba:	e135      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056bc:	f107 030c 	add.w	r3, r7, #12
 80056c0:	4618      	mov	r0, r3
 80056c2:	f000 faa3 	bl	8005c0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056ca:	e12d      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80056cc:	4b08      	ldr	r3, [pc, #32]	; (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80056ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80056d4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80056d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d102      	bne.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80056dc:	4b05      	ldr	r3, [pc, #20]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80056de:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80056e0:	e122      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80056e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056e8:	d10c      	bne.n	8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 80056ea:	4b03      	ldr	r3, [pc, #12]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80056ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056ee:	e11b      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80056f0:	58024400 	.word	0x58024400
 80056f4:	03d09000 	.word	0x03d09000
 80056f8:	003d0900 	.word	0x003d0900
 80056fc:	007a1200 	.word	0x007a1200
 8005700:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005706:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800570a:	d102      	bne.n	8005712 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 800570c:	4b89      	ldr	r3, [pc, #548]	; (8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800570e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005710:	e10a      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005712:	2300      	movs	r3, #0
 8005714:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005716:	e107      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005718:	4b87      	ldr	r3, [pc, #540]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800571a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800571c:	e104      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800571e:	2300      	movs	r3, #0
 8005720:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005722:	bf00      	nop
 8005724:	e100      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800572c:	d153      	bne.n	80057d6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800572e:	4b83      	ldr	r3, [pc, #524]	; (800593c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005732:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005736:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800573e:	d01f      	beq.n	8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8005740:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005744:	d805      	bhi.n	8005752 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00a      	beq.n	8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800574a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800574e:	d00f      	beq.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8005750:	e03d      	b.n	80057ce <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8005752:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005756:	d037      	beq.n	80057c8 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8005758:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800575c:	d018      	beq.n	8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800575e:	e036      	b.n	80057ce <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005764:	4618      	mov	r0, r3
 8005766:	f000 fb9d 	bl	8005ea4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800576a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800576e:	e0db      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005770:	f107 0318 	add.w	r3, r7, #24
 8005774:	4618      	mov	r0, r3
 8005776:	f000 f8fd 	bl	8005974 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800577e:	e0d3      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005780:	f107 030c 	add.w	r3, r7, #12
 8005784:	4618      	mov	r0, r3
 8005786:	f000 fa41 	bl	8005c0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800578e:	e0cb      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005790:	4b6a      	ldr	r3, [pc, #424]	; (800593c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005794:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005798:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800579a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800579c:	2b00      	cmp	r3, #0
 800579e:	d102      	bne.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80057a0:	4b67      	ldr	r3, [pc, #412]	; (8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80057a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80057a4:	e0c0      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80057a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057ac:	d102      	bne.n	80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 80057ae:	4b65      	ldr	r3, [pc, #404]	; (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80057b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057b2:	e0b9      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80057b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057ba:	d102      	bne.n	80057c2 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 80057bc:	4b5d      	ldr	r3, [pc, #372]	; (8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80057be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057c0:	e0b2      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80057c2:	2300      	movs	r3, #0
 80057c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057c6:	e0af      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80057c8:	4b5b      	ldr	r3, [pc, #364]	; (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 80057ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057cc:	e0ac      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80057ce:	2300      	movs	r3, #0
 80057d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057d2:	bf00      	nop
 80057d4:	e0a8      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80057dc:	d13d      	bne.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80057de:	4b57      	ldr	r3, [pc, #348]	; (800593c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80057e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057e6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80057e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ee:	d00c      	beq.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80057f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057f4:	d011      	beq.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d12b      	bne.n	8005852 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057fa:	f107 0318 	add.w	r3, r7, #24
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 f8b8 	bl	8005974 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005808:	e08e      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800580a:	f107 030c 	add.w	r3, r7, #12
 800580e:	4618      	mov	r0, r3
 8005810:	f000 f9fc 	bl	8005c0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005818:	e086      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800581a:	4b48      	ldr	r3, [pc, #288]	; (800593c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800581c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800581e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005822:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005826:	2b00      	cmp	r3, #0
 8005828:	d102      	bne.n	8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800582a:	4b45      	ldr	r3, [pc, #276]	; (8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800582c:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800582e:	e07b      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005832:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005836:	d102      	bne.n	800583e <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8005838:	4b42      	ldr	r3, [pc, #264]	; (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800583a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800583c:	e074      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800583e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005840:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005844:	d102      	bne.n	800584c <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8005846:	4b3b      	ldr	r3, [pc, #236]	; (8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8005848:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800584a:	e06d      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800584c:	2300      	movs	r3, #0
 800584e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005850:	e06a      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8005852:	2300      	movs	r3, #0
 8005854:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005856:	bf00      	nop
 8005858:	e066      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005860:	d11f      	bne.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005862:	4b36      	ldr	r3, [pc, #216]	; (800593c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800586a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800586c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8005872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005876:	d008      	beq.n	800588a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8005878:	e00f      	b.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800587a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800587e:	4618      	mov	r0, r3
 8005880:	f000 fb10 	bl	8005ea4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005886:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005888:	e04e      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800588a:	f107 0318 	add.w	r3, r7, #24
 800588e:	4618      	mov	r0, r3
 8005890:	f000 f870 	bl	8005974 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005898:	e046      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800589a:	2300      	movs	r3, #0
 800589c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800589e:	bf00      	nop
 80058a0:	e042      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058a8:	d13c      	bne.n	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80058aa:	4b24      	ldr	r3, [pc, #144]	; (800593c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80058ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ae:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80058b2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80058b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058ba:	d01e      	beq.n	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 80058bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058c0:	d805      	bhi.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00d      	beq.n	80058e2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80058c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058ca:	d00e      	beq.n	80058ea <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 80058cc:	e026      	b.n	800591c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 80058ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d2:	d01d      	beq.n	8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 80058d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058d8:	d01d      	beq.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80058da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80058de:	d014      	beq.n	800590a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80058e0:	e01c      	b.n	800591c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80058e2:	f000 f831 	bl	8005948 <HAL_RCCEx_GetD3PCLK1Freq>
 80058e6:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80058e8:	e01e      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058ea:	f107 0318 	add.w	r3, r7, #24
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 f840 	bl	8005974 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058f8:	e016      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058fa:	f107 030c 	add.w	r3, r7, #12
 80058fe:	4618      	mov	r0, r3
 8005900:	f000 f984 	bl	8005c0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005908:	e00e      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800590a:	4b0d      	ldr	r3, [pc, #52]	; (8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800590c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800590e:	e00b      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8005910:	4b0c      	ldr	r3, [pc, #48]	; (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005912:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005914:	e008      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8005916:	4b07      	ldr	r3, [pc, #28]	; (8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8005918:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800591a:	e005      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800591c:	2300      	movs	r3, #0
 800591e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005920:	bf00      	nop
 8005922:	e001      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8005924:	2300      	movs	r3, #0
 8005926:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800592a:	4618      	mov	r0, r3
 800592c:	3740      	adds	r7, #64	; 0x40
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	007a1200 	.word	0x007a1200
 8005938:	00bb8000 	.word	0x00bb8000
 800593c:	58024400 	.word	0x58024400
 8005940:	03d09000 	.word	0x03d09000
 8005944:	003d0900 	.word	0x003d0900

08005948 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800594c:	f7fe fe4a 	bl	80045e4 <HAL_RCC_GetHCLKFreq>
 8005950:	4601      	mov	r1, r0
 8005952:	4b06      	ldr	r3, [pc, #24]	; (800596c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	091b      	lsrs	r3, r3, #4
 8005958:	f003 0307 	and.w	r3, r3, #7
 800595c:	4a04      	ldr	r2, [pc, #16]	; (8005970 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800595e:	5cd3      	ldrb	r3, [r2, r3]
 8005960:	f003 031f 	and.w	r3, r3, #31
 8005964:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005968:	4618      	mov	r0, r3
 800596a:	bd80      	pop	{r7, pc}
 800596c:	58024400 	.word	0x58024400
 8005970:	08014e24 	.word	0x08014e24

08005974 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005974:	b480      	push	{r7}
 8005976:	b089      	sub	sp, #36	; 0x24
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800597c:	4b9d      	ldr	r3, [pc, #628]	; (8005bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800597e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005980:	f003 0303 	and.w	r3, r3, #3
 8005984:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005986:	4b9b      	ldr	r3, [pc, #620]	; (8005bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598a:	0b1b      	lsrs	r3, r3, #12
 800598c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005990:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005992:	4b98      	ldr	r3, [pc, #608]	; (8005bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005996:	091b      	lsrs	r3, r3, #4
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800599e:	4b95      	ldr	r3, [pc, #596]	; (8005bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80059a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a2:	08db      	lsrs	r3, r3, #3
 80059a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	fb02 f303 	mul.w	r3, r2, r3
 80059ae:	ee07 3a90 	vmov	s15, r3
 80059b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f000 810a 	beq.w	8005bd6 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d05a      	beq.n	8005a7e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d302      	bcc.n	80059d2 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d078      	beq.n	8005ac2 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80059d0:	e099      	b.n	8005b06 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059d2:	4b88      	ldr	r3, [pc, #544]	; (8005bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0320 	and.w	r3, r3, #32
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d02d      	beq.n	8005a3a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80059de:	4b85      	ldr	r3, [pc, #532]	; (8005bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	08db      	lsrs	r3, r3, #3
 80059e4:	f003 0303 	and.w	r3, r3, #3
 80059e8:	4a83      	ldr	r2, [pc, #524]	; (8005bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80059ea:	fa22 f303 	lsr.w	r3, r2, r3
 80059ee:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	ee07 3a90 	vmov	s15, r3
 80059f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	ee07 3a90 	vmov	s15, r3
 8005a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a08:	4b7a      	ldr	r3, [pc, #488]	; (8005bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a10:	ee07 3a90 	vmov	s15, r3
 8005a14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a18:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a1c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005bfc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005a20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a34:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005a38:	e087      	b.n	8005b4a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	ee07 3a90 	vmov	s15, r3
 8005a40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a44:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005c00 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8005a48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a4c:	4b69      	ldr	r3, [pc, #420]	; (8005bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a54:	ee07 3a90 	vmov	s15, r3
 8005a58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a5c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a60:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005bfc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005a64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a78:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a7c:	e065      	b.n	8005b4a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	ee07 3a90 	vmov	s15, r3
 8005a84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a88:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005a8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a90:	4b58      	ldr	r3, [pc, #352]	; (8005bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a98:	ee07 3a90 	vmov	s15, r3
 8005a9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aa0:	ed97 6a03 	vldr	s12, [r7, #12]
 8005aa4:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005bfc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005aa8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ab0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ab4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005abc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ac0:	e043      	b.n	8005b4a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	ee07 3a90 	vmov	s15, r3
 8005ac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005acc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8005ad0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ad4:	4b47      	ldr	r3, [pc, #284]	; (8005bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005adc:	ee07 3a90 	vmov	s15, r3
 8005ae0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ae4:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ae8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005bfc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005aec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005af0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005af4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005af8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005afc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b00:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b04:	e021      	b.n	8005b4a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	ee07 3a90 	vmov	s15, r3
 8005b0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b10:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005b14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b18:	4b36      	ldr	r3, [pc, #216]	; (8005bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b20:	ee07 3a90 	vmov	s15, r3
 8005b24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b28:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b2c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005bfc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005b30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b44:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b48:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005b4a:	4b2a      	ldr	r3, [pc, #168]	; (8005bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4e:	0a5b      	lsrs	r3, r3, #9
 8005b50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b54:	ee07 3a90 	vmov	s15, r3
 8005b58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b64:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b70:	ee17 2a90 	vmov	r2, s15
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005b78:	4b1e      	ldr	r3, [pc, #120]	; (8005bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7c:	0c1b      	lsrs	r3, r3, #16
 8005b7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b82:	ee07 3a90 	vmov	s15, r3
 8005b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b92:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b9e:	ee17 2a90 	vmov	r2, s15
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005ba6:	4b13      	ldr	r3, [pc, #76]	; (8005bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005baa:	0e1b      	lsrs	r3, r3, #24
 8005bac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bb0:	ee07 3a90 	vmov	s15, r3
 8005bb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bcc:	ee17 2a90 	vmov	r2, s15
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005bd4:	e008      	b.n	8005be8 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	609a      	str	r2, [r3, #8]
}
 8005be8:	bf00      	nop
 8005bea:	3724      	adds	r7, #36	; 0x24
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr
 8005bf4:	58024400 	.word	0x58024400
 8005bf8:	03d09000 	.word	0x03d09000
 8005bfc:	46000000 	.word	0x46000000
 8005c00:	4c742400 	.word	0x4c742400
 8005c04:	4a742400 	.word	0x4a742400
 8005c08:	4af42400 	.word	0x4af42400

08005c0c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b089      	sub	sp, #36	; 0x24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c14:	4b9d      	ldr	r3, [pc, #628]	; (8005e8c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c18:	f003 0303 	and.w	r3, r3, #3
 8005c1c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005c1e:	4b9b      	ldr	r3, [pc, #620]	; (8005e8c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c22:	0d1b      	lsrs	r3, r3, #20
 8005c24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c28:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005c2a:	4b98      	ldr	r3, [pc, #608]	; (8005e8c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2e:	0a1b      	lsrs	r3, r3, #8
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005c36:	4b95      	ldr	r3, [pc, #596]	; (8005e8c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c3a:	08db      	lsrs	r3, r3, #3
 8005c3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	fb02 f303 	mul.w	r3, r2, r3
 8005c46:	ee07 3a90 	vmov	s15, r3
 8005c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f000 810a 	beq.w	8005e6e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d05a      	beq.n	8005d16 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d302      	bcc.n	8005c6a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d078      	beq.n	8005d5a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8005c68:	e099      	b.n	8005d9e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c6a:	4b88      	ldr	r3, [pc, #544]	; (8005e8c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0320 	and.w	r3, r3, #32
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d02d      	beq.n	8005cd2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c76:	4b85      	ldr	r3, [pc, #532]	; (8005e8c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	08db      	lsrs	r3, r3, #3
 8005c7c:	f003 0303 	and.w	r3, r3, #3
 8005c80:	4a83      	ldr	r2, [pc, #524]	; (8005e90 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8005c82:	fa22 f303 	lsr.w	r3, r2, r3
 8005c86:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	ee07 3a90 	vmov	s15, r3
 8005c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	ee07 3a90 	vmov	s15, r3
 8005c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ca0:	4b7a      	ldr	r3, [pc, #488]	; (8005e8c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ca8:	ee07 3a90 	vmov	s15, r3
 8005cac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cb0:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cb4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005cb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ccc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005cd0:	e087      	b.n	8005de2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	ee07 3a90 	vmov	s15, r3
 8005cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cdc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005e98 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8005ce0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ce4:	4b69      	ldr	r3, [pc, #420]	; (8005e8c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cec:	ee07 3a90 	vmov	s15, r3
 8005cf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cf4:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cf8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005cfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d10:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d14:	e065      	b.n	8005de2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	ee07 3a90 	vmov	s15, r3
 8005d1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d20:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005d24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d28:	4b58      	ldr	r3, [pc, #352]	; (8005e8c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d30:	ee07 3a90 	vmov	s15, r3
 8005d34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d38:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d3c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005d40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d54:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d58:	e043      	b.n	8005de2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	ee07 3a90 	vmov	s15, r3
 8005d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d64:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8005d68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d6c:	4b47      	ldr	r3, [pc, #284]	; (8005e8c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d74:	ee07 3a90 	vmov	s15, r3
 8005d78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d80:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005d84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d98:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d9c:	e021      	b.n	8005de2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	ee07 3a90 	vmov	s15, r3
 8005da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005da8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005e9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005dac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005db0:	4b36      	ldr	r3, [pc, #216]	; (8005e8c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005db8:	ee07 3a90 	vmov	s15, r3
 8005dbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dc0:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dc4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005dc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ddc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005de0:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005de2:	4b2a      	ldr	r3, [pc, #168]	; (8005e8c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de6:	0a5b      	lsrs	r3, r3, #9
 8005de8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dec:	ee07 3a90 	vmov	s15, r3
 8005df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005df4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005df8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e08:	ee17 2a90 	vmov	r2, s15
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005e10:	4b1e      	ldr	r3, [pc, #120]	; (8005e8c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e14:	0c1b      	lsrs	r3, r3, #16
 8005e16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e1a:	ee07 3a90 	vmov	s15, r3
 8005e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e36:	ee17 2a90 	vmov	r2, s15
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005e3e:	4b13      	ldr	r3, [pc, #76]	; (8005e8c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e42:	0e1b      	lsrs	r3, r3, #24
 8005e44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e48:	ee07 3a90 	vmov	s15, r3
 8005e4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e58:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e64:	ee17 2a90 	vmov	r2, s15
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005e6c:	e008      	b.n	8005e80 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	609a      	str	r2, [r3, #8]
}
 8005e80:	bf00      	nop
 8005e82:	3724      	adds	r7, #36	; 0x24
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr
 8005e8c:	58024400 	.word	0x58024400
 8005e90:	03d09000 	.word	0x03d09000
 8005e94:	46000000 	.word	0x46000000
 8005e98:	4c742400 	.word	0x4c742400
 8005e9c:	4a742400 	.word	0x4a742400
 8005ea0:	4af42400 	.word	0x4af42400

08005ea4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b089      	sub	sp, #36	; 0x24
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005eac:	4b9d      	ldr	r3, [pc, #628]	; (8006124 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb0:	f003 0303 	and.w	r3, r3, #3
 8005eb4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005eb6:	4b9b      	ldr	r3, [pc, #620]	; (8006124 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eba:	091b      	lsrs	r3, r3, #4
 8005ebc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ec0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005ec2:	4b98      	ldr	r3, [pc, #608]	; (8006124 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005ecc:	4b95      	ldr	r3, [pc, #596]	; (8006124 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed0:	08db      	lsrs	r3, r3, #3
 8005ed2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	fb02 f303 	mul.w	r3, r2, r3
 8005edc:	ee07 3a90 	vmov	s15, r3
 8005ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f000 810a 	beq.w	8006104 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d05a      	beq.n	8005fac <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d302      	bcc.n	8005f00 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d078      	beq.n	8005ff0 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8005efe:	e099      	b.n	8006034 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f00:	4b88      	ldr	r3, [pc, #544]	; (8006124 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0320 	and.w	r3, r3, #32
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d02d      	beq.n	8005f68 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f0c:	4b85      	ldr	r3, [pc, #532]	; (8006124 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	08db      	lsrs	r3, r3, #3
 8005f12:	f003 0303 	and.w	r3, r3, #3
 8005f16:	4a84      	ldr	r2, [pc, #528]	; (8006128 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8005f18:	fa22 f303 	lsr.w	r3, r2, r3
 8005f1c:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	ee07 3a90 	vmov	s15, r3
 8005f24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	ee07 3a90 	vmov	s15, r3
 8005f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f36:	4b7b      	ldr	r3, [pc, #492]	; (8006124 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f3e:	ee07 3a90 	vmov	s15, r3
 8005f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f46:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f4a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800612c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8005f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f62:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005f66:	e087      	b.n	8006078 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	ee07 3a90 	vmov	s15, r3
 8005f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f72:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006130 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8005f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f7a:	4b6a      	ldr	r3, [pc, #424]	; (8006124 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f82:	ee07 3a90 	vmov	s15, r3
 8005f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f8e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800612c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8005f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fa6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005faa:	e065      	b.n	8006078 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	ee07 3a90 	vmov	s15, r3
 8005fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006134 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8005fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fbe:	4b59      	ldr	r3, [pc, #356]	; (8006124 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fc6:	ee07 3a90 	vmov	s15, r3
 8005fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fce:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fd2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800612c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8005fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fee:	e043      	b.n	8006078 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	ee07 3a90 	vmov	s15, r3
 8005ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ffa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006138 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006002:	4b48      	ldr	r3, [pc, #288]	; (8006124 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800600a:	ee07 3a90 	vmov	s15, r3
 800600e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006012:	ed97 6a03 	vldr	s12, [r7, #12]
 8006016:	eddf 5a45 	vldr	s11, [pc, #276]	; 800612c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800601a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800601e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006022:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800602a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800602e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006032:	e021      	b.n	8006078 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	ee07 3a90 	vmov	s15, r3
 800603a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800603e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006134 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8006042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006046:	4b37      	ldr	r3, [pc, #220]	; (8006124 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800604e:	ee07 3a90 	vmov	s15, r3
 8006052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006056:	ed97 6a03 	vldr	s12, [r7, #12]
 800605a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800612c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800605e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006066:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800606a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800606e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006072:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006076:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8006078:	4b2a      	ldr	r3, [pc, #168]	; (8006124 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800607a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607c:	0a5b      	lsrs	r3, r3, #9
 800607e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006082:	ee07 3a90 	vmov	s15, r3
 8006086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800608a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800608e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006092:	edd7 6a07 	vldr	s13, [r7, #28]
 8006096:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800609a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800609e:	ee17 2a90 	vmov	r2, s15
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80060a6:	4b1f      	ldr	r3, [pc, #124]	; (8006124 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80060a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060aa:	0c1b      	lsrs	r3, r3, #16
 80060ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060b0:	ee07 3a90 	vmov	s15, r3
 80060b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80060c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060cc:	ee17 2a90 	vmov	r2, s15
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80060d4:	4b13      	ldr	r3, [pc, #76]	; (8006124 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80060d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d8:	0e1b      	lsrs	r3, r3, #24
 80060da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060de:	ee07 3a90 	vmov	s15, r3
 80060e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80060f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060fa:	ee17 2a90 	vmov	r2, s15
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006102:	e008      	b.n	8006116 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	609a      	str	r2, [r3, #8]
}
 8006116:	bf00      	nop
 8006118:	3724      	adds	r7, #36	; 0x24
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	58024400 	.word	0x58024400
 8006128:	03d09000 	.word	0x03d09000
 800612c:	46000000 	.word	0x46000000
 8006130:	4c742400 	.word	0x4c742400
 8006134:	4a742400 	.word	0x4a742400
 8006138:	4af42400 	.word	0x4af42400

0800613c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006146:	2300      	movs	r3, #0
 8006148:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800614a:	4b53      	ldr	r3, [pc, #332]	; (8006298 <RCCEx_PLL2_Config+0x15c>)
 800614c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614e:	f003 0303 	and.w	r3, r3, #3
 8006152:	2b03      	cmp	r3, #3
 8006154:	d101      	bne.n	800615a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e099      	b.n	800628e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800615a:	4b4f      	ldr	r3, [pc, #316]	; (8006298 <RCCEx_PLL2_Config+0x15c>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a4e      	ldr	r2, [pc, #312]	; (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006160:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006164:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006166:	f7fb f941 	bl	80013ec <HAL_GetTick>
 800616a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800616c:	e008      	b.n	8006180 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800616e:	f7fb f93d 	bl	80013ec <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	2b02      	cmp	r3, #2
 800617a:	d901      	bls.n	8006180 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e086      	b.n	800628e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006180:	4b45      	ldr	r3, [pc, #276]	; (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1f0      	bne.n	800616e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800618c:	4b42      	ldr	r3, [pc, #264]	; (8006298 <RCCEx_PLL2_Config+0x15c>)
 800618e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006190:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	031b      	lsls	r3, r3, #12
 800619a:	493f      	ldr	r1, [pc, #252]	; (8006298 <RCCEx_PLL2_Config+0x15c>)
 800619c:	4313      	orrs	r3, r2
 800619e:	628b      	str	r3, [r1, #40]	; 0x28
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	3b01      	subs	r3, #1
 80061a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	3b01      	subs	r3, #1
 80061b0:	025b      	lsls	r3, r3, #9
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	431a      	orrs	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	3b01      	subs	r3, #1
 80061bc:	041b      	lsls	r3, r3, #16
 80061be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80061c2:	431a      	orrs	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	3b01      	subs	r3, #1
 80061ca:	061b      	lsls	r3, r3, #24
 80061cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80061d0:	4931      	ldr	r1, [pc, #196]	; (8006298 <RCCEx_PLL2_Config+0x15c>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80061d6:	4b30      	ldr	r3, [pc, #192]	; (8006298 <RCCEx_PLL2_Config+0x15c>)
 80061d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	492d      	ldr	r1, [pc, #180]	; (8006298 <RCCEx_PLL2_Config+0x15c>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80061e8:	4b2b      	ldr	r3, [pc, #172]	; (8006298 <RCCEx_PLL2_Config+0x15c>)
 80061ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ec:	f023 0220 	bic.w	r2, r3, #32
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	4928      	ldr	r1, [pc, #160]	; (8006298 <RCCEx_PLL2_Config+0x15c>)
 80061f6:	4313      	orrs	r3, r2
 80061f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80061fa:	4b27      	ldr	r3, [pc, #156]	; (8006298 <RCCEx_PLL2_Config+0x15c>)
 80061fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fe:	4a26      	ldr	r2, [pc, #152]	; (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006200:	f023 0310 	bic.w	r3, r3, #16
 8006204:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006206:	4b24      	ldr	r3, [pc, #144]	; (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006208:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800620a:	4b24      	ldr	r3, [pc, #144]	; (800629c <RCCEx_PLL2_Config+0x160>)
 800620c:	4013      	ands	r3, r2
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	69d2      	ldr	r2, [r2, #28]
 8006212:	00d2      	lsls	r2, r2, #3
 8006214:	4920      	ldr	r1, [pc, #128]	; (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006216:	4313      	orrs	r3, r2
 8006218:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800621a:	4b1f      	ldr	r3, [pc, #124]	; (8006298 <RCCEx_PLL2_Config+0x15c>)
 800621c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621e:	4a1e      	ldr	r2, [pc, #120]	; (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006220:	f043 0310 	orr.w	r3, r3, #16
 8006224:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d106      	bne.n	800623a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800622c:	4b1a      	ldr	r3, [pc, #104]	; (8006298 <RCCEx_PLL2_Config+0x15c>)
 800622e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006230:	4a19      	ldr	r2, [pc, #100]	; (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006232:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006236:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006238:	e00f      	b.n	800625a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d106      	bne.n	800624e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006240:	4b15      	ldr	r3, [pc, #84]	; (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006244:	4a14      	ldr	r2, [pc, #80]	; (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006246:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800624a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800624c:	e005      	b.n	800625a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800624e:	4b12      	ldr	r3, [pc, #72]	; (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006252:	4a11      	ldr	r2, [pc, #68]	; (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006254:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006258:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800625a:	4b0f      	ldr	r3, [pc, #60]	; (8006298 <RCCEx_PLL2_Config+0x15c>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a0e      	ldr	r2, [pc, #56]	; (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006260:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006264:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006266:	f7fb f8c1 	bl	80013ec <HAL_GetTick>
 800626a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800626c:	e008      	b.n	8006280 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800626e:	f7fb f8bd 	bl	80013ec <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	2b02      	cmp	r3, #2
 800627a:	d901      	bls.n	8006280 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e006      	b.n	800628e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006280:	4b05      	ldr	r3, [pc, #20]	; (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d0f0      	beq.n	800626e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800628c:	7bfb      	ldrb	r3, [r7, #15]
}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	58024400 	.word	0x58024400
 800629c:	ffff0007 	.word	0xffff0007

080062a0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062aa:	2300      	movs	r3, #0
 80062ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80062ae:	4b53      	ldr	r3, [pc, #332]	; (80063fc <RCCEx_PLL3_Config+0x15c>)
 80062b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b2:	f003 0303 	and.w	r3, r3, #3
 80062b6:	2b03      	cmp	r3, #3
 80062b8:	d101      	bne.n	80062be <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e099      	b.n	80063f2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80062be:	4b4f      	ldr	r3, [pc, #316]	; (80063fc <RCCEx_PLL3_Config+0x15c>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a4e      	ldr	r2, [pc, #312]	; (80063fc <RCCEx_PLL3_Config+0x15c>)
 80062c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062ca:	f7fb f88f 	bl	80013ec <HAL_GetTick>
 80062ce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80062d0:	e008      	b.n	80062e4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80062d2:	f7fb f88b 	bl	80013ec <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d901      	bls.n	80062e4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e086      	b.n	80063f2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80062e4:	4b45      	ldr	r3, [pc, #276]	; (80063fc <RCCEx_PLL3_Config+0x15c>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1f0      	bne.n	80062d2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80062f0:	4b42      	ldr	r3, [pc, #264]	; (80063fc <RCCEx_PLL3_Config+0x15c>)
 80062f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	051b      	lsls	r3, r3, #20
 80062fe:	493f      	ldr	r1, [pc, #252]	; (80063fc <RCCEx_PLL3_Config+0x15c>)
 8006300:	4313      	orrs	r3, r2
 8006302:	628b      	str	r3, [r1, #40]	; 0x28
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	3b01      	subs	r3, #1
 800630a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	3b01      	subs	r3, #1
 8006314:	025b      	lsls	r3, r3, #9
 8006316:	b29b      	uxth	r3, r3
 8006318:	431a      	orrs	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	3b01      	subs	r3, #1
 8006320:	041b      	lsls	r3, r3, #16
 8006322:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006326:	431a      	orrs	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	3b01      	subs	r3, #1
 800632e:	061b      	lsls	r3, r3, #24
 8006330:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006334:	4931      	ldr	r1, [pc, #196]	; (80063fc <RCCEx_PLL3_Config+0x15c>)
 8006336:	4313      	orrs	r3, r2
 8006338:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800633a:	4b30      	ldr	r3, [pc, #192]	; (80063fc <RCCEx_PLL3_Config+0x15c>)
 800633c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	492d      	ldr	r1, [pc, #180]	; (80063fc <RCCEx_PLL3_Config+0x15c>)
 8006348:	4313      	orrs	r3, r2
 800634a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800634c:	4b2b      	ldr	r3, [pc, #172]	; (80063fc <RCCEx_PLL3_Config+0x15c>)
 800634e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006350:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	4928      	ldr	r1, [pc, #160]	; (80063fc <RCCEx_PLL3_Config+0x15c>)
 800635a:	4313      	orrs	r3, r2
 800635c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800635e:	4b27      	ldr	r3, [pc, #156]	; (80063fc <RCCEx_PLL3_Config+0x15c>)
 8006360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006362:	4a26      	ldr	r2, [pc, #152]	; (80063fc <RCCEx_PLL3_Config+0x15c>)
 8006364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006368:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800636a:	4b24      	ldr	r3, [pc, #144]	; (80063fc <RCCEx_PLL3_Config+0x15c>)
 800636c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800636e:	4b24      	ldr	r3, [pc, #144]	; (8006400 <RCCEx_PLL3_Config+0x160>)
 8006370:	4013      	ands	r3, r2
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	69d2      	ldr	r2, [r2, #28]
 8006376:	00d2      	lsls	r2, r2, #3
 8006378:	4920      	ldr	r1, [pc, #128]	; (80063fc <RCCEx_PLL3_Config+0x15c>)
 800637a:	4313      	orrs	r3, r2
 800637c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800637e:	4b1f      	ldr	r3, [pc, #124]	; (80063fc <RCCEx_PLL3_Config+0x15c>)
 8006380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006382:	4a1e      	ldr	r2, [pc, #120]	; (80063fc <RCCEx_PLL3_Config+0x15c>)
 8006384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006388:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d106      	bne.n	800639e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006390:	4b1a      	ldr	r3, [pc, #104]	; (80063fc <RCCEx_PLL3_Config+0x15c>)
 8006392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006394:	4a19      	ldr	r2, [pc, #100]	; (80063fc <RCCEx_PLL3_Config+0x15c>)
 8006396:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800639a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800639c:	e00f      	b.n	80063be <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d106      	bne.n	80063b2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80063a4:	4b15      	ldr	r3, [pc, #84]	; (80063fc <RCCEx_PLL3_Config+0x15c>)
 80063a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a8:	4a14      	ldr	r2, [pc, #80]	; (80063fc <RCCEx_PLL3_Config+0x15c>)
 80063aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80063ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80063b0:	e005      	b.n	80063be <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80063b2:	4b12      	ldr	r3, [pc, #72]	; (80063fc <RCCEx_PLL3_Config+0x15c>)
 80063b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b6:	4a11      	ldr	r2, [pc, #68]	; (80063fc <RCCEx_PLL3_Config+0x15c>)
 80063b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80063be:	4b0f      	ldr	r3, [pc, #60]	; (80063fc <RCCEx_PLL3_Config+0x15c>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a0e      	ldr	r2, [pc, #56]	; (80063fc <RCCEx_PLL3_Config+0x15c>)
 80063c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063ca:	f7fb f80f 	bl	80013ec <HAL_GetTick>
 80063ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80063d0:	e008      	b.n	80063e4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80063d2:	f7fb f80b 	bl	80013ec <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d901      	bls.n	80063e4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e006      	b.n	80063f2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80063e4:	4b05      	ldr	r3, [pc, #20]	; (80063fc <RCCEx_PLL3_Config+0x15c>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d0f0      	beq.n	80063d2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80063f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	58024400 	.word	0x58024400
 8006400:	ffff0007 	.word	0xffff0007

08006404 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	f000 808a 	beq.w	800652c <HAL_RTC_Init+0x128>
  {
    status = HAL_OK;
 8006418:	2300      	movs	r3, #0
 800641a:	73fb      	strb	r3, [r7, #15]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006422:	b2db      	uxtb	r3, r3
 8006424:	2b00      	cmp	r3, #0
 8006426:	d106      	bne.n	8006436 <HAL_RTC_Init+0x32>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f7fa fd7d 	bl	8000f30 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2202      	movs	r2, #2
 800643a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	22ca      	movs	r2, #202	; 0xca
 8006444:	625a      	str	r2, [r3, #36]	; 0x24
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2253      	movs	r2, #83	; 0x53
 800644c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fab6 	bl	80069c0 <RTC_EnterInitMode>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00a      	beq.n	8006470 <HAL_RTC_Init+0x6c>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	22ff      	movs	r2, #255	; 0xff
 8006460:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2204      	movs	r2, #4
 8006466:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	73fb      	strb	r3, [r7, #15]
 800646e:	e05d      	b.n	800652c <HAL_RTC_Init+0x128>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6899      	ldr	r1, [r3, #8]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	4b2f      	ldr	r3, [pc, #188]	; (8006538 <HAL_RTC_Init+0x134>)
 800647c:	400b      	ands	r3, r1
 800647e:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6899      	ldr	r1, [r3, #8]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	685a      	ldr	r2, [r3, #4]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	431a      	orrs	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	431a      	orrs	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	430a      	orrs	r2, r1
 800649c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	0419      	lsls	r1, r3, #16
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	68da      	ldr	r2, [r3, #12]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	430a      	orrs	r2, r1
 80064ae:	611a      	str	r2, [r3, #16]
      /* Exit Initialization mode */
#if defined(RTC_ICSR_INIT)
      CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
#endif /* RTC_ICSR_INIT */
#if defined(RTC_ISR_INIT)
      CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68da      	ldr	r2, [r3, #12]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064be:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_INIT */

      /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f003 0320 	and.w	r3, r3, #32
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10f      	bne.n	80064ee <HAL_RTC_Init+0xea>
      {
        if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fa50 	bl	8006974 <HAL_RTC_WaitForSynchro>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d009      	beq.n	80064ee <HAL_RTC_Init+0xea>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	22ff      	movs	r2, #255	; 0xff
 80064e0:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2204      	movs	r2, #4
 80064e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          status = HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	73fb      	strb	r3, [r7, #15]
        }
      }

      if(status == HAL_OK)
 80064ee:	7bfb      	ldrb	r3, [r7, #15]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d11b      	bne.n	800652c <HAL_RTC_Init+0x128>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f022 0203 	bic.w	r2, r2, #3
 8006502:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	69da      	ldr	r2, [r3, #28]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	431a      	orrs	r2, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	430a      	orrs	r2, r1
 800651a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	22ff      	movs	r2, #255	; 0xff
 8006522:	625a      	str	r2, [r3, #36]	; 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  /* return status */
  return status;
 800652c:	7bfb      	ldrb	r3, [r7, #15]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	ff8fffbf 	.word	0xff8fffbf

0800653c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800653c:	b590      	push	{r4, r7, lr}
 800653e:	b087      	sub	sp, #28
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d101      	bne.n	8006556 <HAL_RTC_SetTime+0x1a>
 8006552:	2302      	movs	r3, #2
 8006554:	e0b0      	b.n	80066b8 <HAL_RTC_SetTime+0x17c>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2202      	movs	r2, #2
 8006562:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	22ca      	movs	r2, #202	; 0xca
 800656c:	625a      	str	r2, [r3, #36]	; 0x24
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2253      	movs	r2, #83	; 0x53
 8006574:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f000 fa22 	bl	80069c0 <RTC_EnterInitMode>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00d      	beq.n	800659e <HAL_RTC_SetTime+0x62>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	22ff      	movs	r2, #255	; 0xff
 8006588:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2204      	movs	r2, #4
 800658e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e08c      	b.n	80066b8 <HAL_RTC_SetTime+0x17c>
  }
  else
  {
    if(Format == RTC_FORMAT_BIN)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d126      	bne.n	80065f2 <HAL_RTC_SetTime+0xb6>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d102      	bne.n	80065b8 <HAL_RTC_SetTime+0x7c>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	2200      	movs	r2, #0
 80065b6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	4618      	mov	r0, r3
 80065be:	f000 fa29 	bl	8006a14 <RTC_ByteToBcd2>
 80065c2:	4603      	mov	r3, r0
 80065c4:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	785b      	ldrb	r3, [r3, #1]
 80065ca:	4618      	mov	r0, r3
 80065cc:	f000 fa22 	bl	8006a14 <RTC_ByteToBcd2>
 80065d0:	4603      	mov	r3, r0
 80065d2:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80065d4:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	789b      	ldrb	r3, [r3, #2]
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 fa1a 	bl	8006a14 <RTC_ByteToBcd2>
 80065e0:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80065e2:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	78db      	ldrb	r3, [r3, #3]
 80065ea:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80065ec:	4313      	orrs	r3, r2
 80065ee:	617b      	str	r3, [r7, #20]
 80065f0:	e018      	b.n	8006624 <HAL_RTC_SetTime+0xe8>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d102      	bne.n	8006606 <HAL_RTC_SetTime+0xca>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	2200      	movs	r2, #0
 8006604:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	785b      	ldrb	r3, [r3, #1]
 8006610:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006612:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006618:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	78db      	ldrb	r3, [r3, #3]
 800661e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006620:	4313      	orrs	r3, r2
 8006622:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	6979      	ldr	r1, [r7, #20]
 800662a:	4b25      	ldr	r3, [pc, #148]	; (80066c0 <HAL_RTC_SetTime+0x184>)
 800662c:	400b      	ands	r3, r1
 800662e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	689a      	ldr	r2, [r3, #8]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800663e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6899      	ldr	r1, [r3, #8]
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	68da      	ldr	r2, [r3, #12]
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	431a      	orrs	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	430a      	orrs	r2, r1
 8006656:	609a      	str	r2, [r3, #8]
    /* Exit Initialization mode */
#if defined(RTC_ICSR_INIT)
    CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
#endif /* RTC_ICSR_INIT */
#if defined(RTC_ISR_INIT)
    CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68da      	ldr	r2, [r3, #12]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006666:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_INIT */

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	f003 0320 	and.w	r3, r3, #32
 8006672:	2b00      	cmp	r3, #0
 8006674:	d113      	bne.n	800669e <HAL_RTC_SetTime+0x162>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f000 f97c 	bl	8006974 <HAL_RTC_WaitForSynchro>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00d      	beq.n	800669e <HAL_RTC_SetTime+0x162>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	22ff      	movs	r2, #255	; 0xff
 8006688:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2204      	movs	r2, #4
 800668e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e00c      	b.n	80066b8 <HAL_RTC_SetTime+0x17c>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	22ff      	movs	r2, #255	; 0xff
 80066a4:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    __HAL_UNLOCK(hrtc);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 80066b6:	2300      	movs	r3, #0
  }
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	371c      	adds	r7, #28
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd90      	pop	{r4, r7, pc}
 80066c0:	007f7f7f 	.word	0x007f7f7f

080066c4 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	4b22      	ldr	r3, [pc, #136]	; (8006778 <HAL_RTC_GetTime+0xb4>)
 80066f0:	4013      	ands	r3, r2
 80066f2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	0c1b      	lsrs	r3, r3, #16
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066fe:	b2da      	uxtb	r2, r3
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	0a1b      	lsrs	r3, r3, #8
 8006708:	b2db      	uxtb	r3, r3
 800670a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800670e:	b2da      	uxtb	r2, r3
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	b2db      	uxtb	r3, r3
 8006718:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800671c:	b2da      	uxtb	r2, r3
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	0d9b      	lsrs	r3, r3, #22
 8006726:	b2db      	uxtb	r3, r3
 8006728:	f003 0301 	and.w	r3, r3, #1
 800672c:	b2da      	uxtb	r2, r3
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d11a      	bne.n	800676e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	4618      	mov	r0, r3
 800673e:	f000 f989 	bl	8006a54 <RTC_Bcd2ToByte>
 8006742:	4603      	mov	r3, r0
 8006744:	461a      	mov	r2, r3
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	785b      	ldrb	r3, [r3, #1]
 800674e:	4618      	mov	r0, r3
 8006750:	f000 f980 	bl	8006a54 <RTC_Bcd2ToByte>
 8006754:	4603      	mov	r3, r0
 8006756:	461a      	mov	r2, r3
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	789b      	ldrb	r3, [r3, #2]
 8006760:	4618      	mov	r0, r3
 8006762:	f000 f977 	bl	8006a54 <RTC_Bcd2ToByte>
 8006766:	4603      	mov	r3, r0
 8006768:	461a      	mov	r2, r3
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3718      	adds	r7, #24
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	007f7f7f 	.word	0x007f7f7f

0800677c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800677c:	b590      	push	{r4, r7, lr}
 800677e:	b087      	sub	sp, #28
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800678e:	2b01      	cmp	r3, #1
 8006790:	d101      	bne.n	8006796 <HAL_RTC_SetDate+0x1a>
 8006792:	2302      	movs	r3, #2
 8006794:	e09a      	b.n	80068cc <HAL_RTC_SetDate+0x150>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2202      	movs	r2, #2
 80067a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10e      	bne.n	80067ca <HAL_RTC_SetDate+0x4e>
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	785b      	ldrb	r3, [r3, #1]
 80067b0:	f003 0310 	and.w	r3, r3, #16
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d008      	beq.n	80067ca <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	785b      	ldrb	r3, [r3, #1]
 80067bc:	f023 0310 	bic.w	r3, r3, #16
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	330a      	adds	r3, #10
 80067c4:	b2da      	uxtb	r2, r3
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d11c      	bne.n	800680a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	78db      	ldrb	r3, [r3, #3]
 80067d4:	4618      	mov	r0, r3
 80067d6:	f000 f91d 	bl	8006a14 <RTC_ByteToBcd2>
 80067da:	4603      	mov	r3, r0
 80067dc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	785b      	ldrb	r3, [r3, #1]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 f916 	bl	8006a14 <RTC_ByteToBcd2>
 80067e8:	4603      	mov	r3, r0
 80067ea:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80067ec:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	789b      	ldrb	r3, [r3, #2]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 f90e 	bl	8006a14 <RTC_ByteToBcd2>
 80067f8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80067fa:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006804:	4313      	orrs	r3, r2
 8006806:	617b      	str	r3, [r7, #20]
 8006808:	e00e      	b.n	8006828 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	78db      	ldrb	r3, [r3, #3]
 800680e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	785b      	ldrb	r3, [r3, #1]
 8006814:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006816:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800681c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006824:	4313      	orrs	r3, r2
 8006826:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	22ca      	movs	r2, #202	; 0xca
 800682e:	625a      	str	r2, [r3, #36]	; 0x24
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2253      	movs	r2, #83	; 0x53
 8006836:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f000 f8c1 	bl	80069c0 <RTC_EnterInitMode>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00d      	beq.n	8006860 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	22ff      	movs	r2, #255	; 0xff
 800684a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2204      	movs	r2, #4
 8006850:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e035      	b.n	80068cc <HAL_RTC_SetDate+0x150>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	6979      	ldr	r1, [r7, #20]
 8006866:	4b1b      	ldr	r3, [pc, #108]	; (80068d4 <HAL_RTC_SetDate+0x158>)
 8006868:	400b      	ands	r3, r1
 800686a:	6053      	str	r3, [r2, #4]
    /* Exit Initialization mode */
#if defined(RTC_ICSR_INIT)
    CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
#endif /* RTC_ISR_INIT */
#if defined(RTC_ISR_INIT)
    CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68da      	ldr	r2, [r3, #12]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800687a:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_INIT */

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f003 0320 	and.w	r3, r3, #32
 8006886:	2b00      	cmp	r3, #0
 8006888:	d113      	bne.n	80068b2 <HAL_RTC_SetDate+0x136>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f000 f872 	bl	8006974 <HAL_RTC_WaitForSynchro>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00d      	beq.n	80068b2 <HAL_RTC_SetDate+0x136>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	22ff      	movs	r2, #255	; 0xff
 800689c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2204      	movs	r2, #4
 80068a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e00c      	b.n	80068cc <HAL_RTC_SetDate+0x150>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	22ff      	movs	r2, #255	; 0xff
 80068b8:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 80068ca:	2300      	movs	r3, #0
  }
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	371c      	adds	r7, #28
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd90      	pop	{r4, r7, pc}
 80068d4:	00ffff3f 	.word	0x00ffff3f

080068d8 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b086      	sub	sp, #24
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685a      	ldr	r2, [r3, #4]
 80068ea:	4b21      	ldr	r3, [pc, #132]	; (8006970 <HAL_RTC_GetDate+0x98>)
 80068ec:	4013      	ands	r3, r2
 80068ee:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	0c1b      	lsrs	r3, r3, #16
 80068f4:	b2da      	uxtb	r2, r3
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	0a1b      	lsrs	r3, r3, #8
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	f003 031f 	and.w	r3, r3, #31
 8006904:	b2da      	uxtb	r2, r3
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	b2db      	uxtb	r3, r3
 800690e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006912:	b2da      	uxtb	r2, r3
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	0b5b      	lsrs	r3, r3, #13
 800691c:	b2db      	uxtb	r3, r3
 800691e:	f003 0307 	and.w	r3, r3, #7
 8006922:	b2da      	uxtb	r2, r3
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d11a      	bne.n	8006964 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	78db      	ldrb	r3, [r3, #3]
 8006932:	4618      	mov	r0, r3
 8006934:	f000 f88e 	bl	8006a54 <RTC_Bcd2ToByte>
 8006938:	4603      	mov	r3, r0
 800693a:	461a      	mov	r2, r3
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	785b      	ldrb	r3, [r3, #1]
 8006944:	4618      	mov	r0, r3
 8006946:	f000 f885 	bl	8006a54 <RTC_Bcd2ToByte>
 800694a:	4603      	mov	r3, r0
 800694c:	461a      	mov	r2, r3
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	789b      	ldrb	r3, [r3, #2]
 8006956:	4618      	mov	r0, r3
 8006958:	f000 f87c 	bl	8006a54 <RTC_Bcd2ToByte>
 800695c:	4603      	mov	r3, r0
 800695e:	461a      	mov	r2, r3
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3718      	adds	r7, #24
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	00ffff3f 	.word	0x00ffff3f

08006974 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68da      	ldr	r2, [r3, #12]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800698a:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800698c:	f7fa fd2e 	bl	80013ec <HAL_GetTick>
 8006990:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006992:	e009      	b.n	80069a8 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006994:	f7fa fd2a 	bl	80013ec <HAL_GetTick>
 8006998:	4602      	mov	r2, r0
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069a2:	d901      	bls.n	80069a8 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e007      	b.n	80069b8 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	f003 0320 	and.w	r3, r3, #32
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d0ee      	beq.n	8006994 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d119      	bne.n	8006a0a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f04f 32ff 	mov.w	r2, #4294967295
 80069de:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80069e0:	f7fa fd04 	bl	80013ec <HAL_GetTick>
 80069e4:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80069e6:	e009      	b.n	80069fc <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80069e8:	f7fa fd00 	bl	80013ec <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069f6:	d901      	bls.n	80069fc <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	e007      	b.n	8006a0c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d0ee      	beq.n	80069e8 <RTC_EnterInitMode+0x28>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8006a22:	79fb      	ldrb	r3, [r7, #7]
 8006a24:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8006a26:	e005      	b.n	8006a34 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8006a2e:	7afb      	ldrb	r3, [r7, #11]
 8006a30:	3b0a      	subs	r3, #10
 8006a32:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8006a34:	7afb      	ldrb	r3, [r7, #11]
 8006a36:	2b09      	cmp	r3, #9
 8006a38:	d8f6      	bhi.n	8006a28 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	011b      	lsls	r3, r3, #4
 8006a40:	b2da      	uxtb	r2, r3
 8006a42:	7afb      	ldrb	r3, [r7, #11]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	b2db      	uxtb	r3, r3
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3714      	adds	r7, #20
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8006a5e:	79fb      	ldrb	r3, [r7, #7]
 8006a60:	091b      	lsrs	r3, r3, #4
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	461a      	mov	r2, r3
 8006a66:	0092      	lsls	r2, r2, #2
 8006a68:	4413      	add	r3, r2
 8006a6a:	005b      	lsls	r3, r3, #1
 8006a6c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8006a6e:	79fb      	ldrb	r3, [r7, #7]
 8006a70:	f003 030f 	and.w	r3, r3, #15
 8006a74:	b2da      	uxtb	r2, r3
 8006a76:	7bfb      	ldrb	r3, [r7, #15]
 8006a78:	4413      	add	r3, r2
 8006a7a:	b2db      	uxtb	r3, r3
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3714      	adds	r7, #20
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b08a      	sub	sp, #40	; 0x28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d101      	bne.n	8006a9a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e07c      	b.n	8006b94 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d10c      	bne.n	8006ac0 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d102      	bne.n	8006aba <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f7fa fa52 	bl	8000f64 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2203      	movs	r2, #3
 8006ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 f867 	bl	8006b9c <HAL_SD_InitCard>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d001      	beq.n	8006ad8 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e05d      	b.n	8006b94 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8006ad8:	f107 0308 	add.w	r3, r7, #8
 8006adc:	4619      	mov	r1, r3
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 fdb8 	bl	8007654 <HAL_SD_GetCardStatus>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d001      	beq.n	8006aee <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e052      	b.n	8006b94 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8006aee:	7e3b      	ldrb	r3, [r7, #24]
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8006af4:	7e7b      	ldrb	r3, [r7, #25]
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d10a      	bne.n	8006b18 <HAL_SD_Init+0x90>
 8006b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d102      	bne.n	8006b0e <HAL_SD_Init+0x86>
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d004      	beq.n	8006b18 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b14:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b16:	e00b      	b.n	8006b30 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d104      	bne.n	8006b2a <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b26:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b28:	e002      	b.n	8006b30 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	4619      	mov	r1, r3
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 fe6e 	bl	8007818 <HAL_SD_ConfigWideBusOperation>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d001      	beq.n	8006b46 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e026      	b.n	8006b94 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006b46:	f7fa fc51 	bl	80013ec <HAL_GetTick>
 8006b4a:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006b4c:	e011      	b.n	8006b72 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8006b4e:	f7fa fc4d 	bl	80013ec <HAL_GetTick>
 8006b52:	4602      	mov	r2, r0
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b5c:	d109      	bne.n	8006b72 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b64:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e010      	b.n	8006b94 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 fefa 	bl	800796c <HAL_SD_GetCardState>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b04      	cmp	r3, #4
 8006b7c:	d1e7      	bne.n	8006b4e <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3728      	adds	r7, #40	; 0x28
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006b9c:	b5b0      	push	{r4, r5, r7, lr}
 8006b9e:	b08e      	sub	sp, #56	; 0x38
 8006ba0:	af04      	add	r7, sp, #16
 8006ba2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006bac:	2300      	movs	r3, #0
 8006bae:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	617b      	str	r3, [r7, #20]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8006bb4:	23fa      	movs	r3, #250	; 0xfa
 8006bb6:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d107      	bne.n	8006bd0 <HAL_SD_InitCard+0x34>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f042 0210 	orr.w	r2, r2, #16
 8006bce:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681d      	ldr	r5, [r3, #0]
 8006bd4:	466c      	mov	r4, sp
 8006bd6:	f107 0314 	add.w	r3, r7, #20
 8006bda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006bde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006be2:	f107 0308 	add.w	r3, r7, #8
 8006be6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006be8:	4628      	mov	r0, r5
 8006bea:	f003 ff5b 	bl	800aaa4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f003 ff9e 	bl	800ab34 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting 
     the SD initialization sequence */
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC)/(2U*SDMMC_INIT_CLK_DIV);
 8006bf8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006bfc:	f7fe fc2c 	bl	8005458 <HAL_RCCEx_GetPeriphCLKFreq>
 8006c00:	4602      	mov	r2, r0
 8006c02:	4b2d      	ldr	r3, [pc, #180]	; (8006cb8 <HAL_SD_InitCard+0x11c>)
 8006c04:	fba3 2302 	umull	r2, r3, r3, r2
 8006c08:	095b      	lsrs	r3, r3, #5
 8006c0a:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d008      	beq.n	8006c24 <HAL_SD_InitCard+0x88>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8006c12:	4a2a      	ldr	r2, [pc, #168]	; (8006cbc <HAL_SD_InitCard+0x120>)
 8006c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f7fa fbf1 	bl	8001404 <HAL_Delay>
 8006c22:	e002      	b.n	8006c2a <HAL_SD_InitCard+0x8e>
  }
  else
  {
    HAL_Delay(2U);
 8006c24:	2002      	movs	r0, #2
 8006c26:	f7fa fbed 	bl	8001404 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 ff7c 	bl	8007b28 <SD_PowerON>
 8006c30:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c32:	6a3b      	ldr	r3, [r7, #32]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00b      	beq.n	8006c50 <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c44:	6a3b      	ldr	r3, [r7, #32]
 8006c46:	431a      	orrs	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e02e      	b.n	8006cae <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 feab 	bl	80079ac <SD_InitCard>
 8006c56:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c58:	6a3b      	ldr	r3, [r7, #32]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00b      	beq.n	8006c76 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c6a:	6a3b      	ldr	r3, [r7, #32]
 8006c6c:	431a      	orrs	r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e01b      	b.n	8006cae <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f003 ffee 	bl	800ac60 <SDMMC_CmdBlockLength>
 8006c84:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c86:	6a3b      	ldr	r3, [r7, #32]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00f      	beq.n	8006cac <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a0b      	ldr	r2, [pc, #44]	; (8006cc0 <HAL_SD_InitCard+0x124>)
 8006c92:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c98:	6a3b      	ldr	r3, [r7, #32]
 8006c9a:	431a      	orrs	r2, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e000      	b.n	8006cae <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3728      	adds	r7, #40	; 0x28
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bdb0      	pop	{r4, r5, r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	10624dd3 	.word	0x10624dd3
 8006cbc:	00012110 	.word	0x00012110
 8006cc0:	1fe00fff 	.word	0x1fe00fff

08006cc4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b092      	sub	sp, #72	; 0x48
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
 8006cd0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006cd2:	f7fa fb8b 	bl	80013ec <HAL_GetTick>
 8006cd6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d107      	bne.n	8006cf6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e167      	b.n	8006fc6 <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	f040 815a 	bne.w	8006fb8 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006d0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	441a      	add	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d907      	bls.n	8006d28 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d1c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e14e      	b.n	8006fc6 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2203      	movs	r2, #3
 8006d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2200      	movs	r2, #0
 8006d36:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d002      	beq.n	8006d46 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8006d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d42:	025b      	lsls	r3, r3, #9
 8006d44:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006d46:	f04f 33ff 	mov.w	r3, #4294967295
 8006d4a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	025b      	lsls	r3, r3, #9
 8006d50:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006d52:	2390      	movs	r3, #144	; 0x90
 8006d54:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006d56:	2302      	movs	r3, #2
 8006d58:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f107 0214 	add.w	r2, r7, #20
 8006d6a:	4611      	mov	r1, r2
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f003 ff4b 	bl	800ac08 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68da      	ldr	r2, [r3, #12]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d80:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d90a      	bls.n	8006d9e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d94:	4618      	mov	r0, r3
 8006d96:	f003 ffa9 	bl	800acec <SDMMC_CmdReadMultiBlock>
 8006d9a:	6478      	str	r0, [r7, #68]	; 0x44
 8006d9c:	e009      	b.n	8006db2 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2201      	movs	r2, #1
 8006da2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006daa:	4618      	mov	r0, r3
 8006dac:	f003 ff7b 	bl	800aca6 <SDMMC_CmdReadSingleBlock>
 8006db0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006db2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d012      	beq.n	8006dde <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a84      	ldr	r2, [pc, #528]	; (8006fd0 <HAL_SD_ReadBlocks+0x30c>)
 8006dbe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dc6:	431a      	orrs	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e0f3      	b.n	8006fc6 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006de2:	e058      	b.n	8006e96 <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d033      	beq.n	8006e5a <HAL_SD_ReadBlocks+0x196>
 8006df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006df4:	2b1f      	cmp	r3, #31
 8006df6:	d930      	bls.n	8006e5a <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8006df8:	2300      	movs	r3, #0
 8006dfa:	643b      	str	r3, [r7, #64]	; 0x40
 8006dfc:	e027      	b.n	8006e4e <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4618      	mov	r0, r3
 8006e04:	f003 fe78 	bl	800aaf8 <SDMMC_ReadFIFO>
 8006e08:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0c:	b2da      	uxtb	r2, r3
 8006e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e10:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e14:	3301      	adds	r3, #1
 8006e16:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e1a:	0a1b      	lsrs	r3, r3, #8
 8006e1c:	b2da      	uxtb	r2, r3
 8006e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e20:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e24:	3301      	adds	r3, #1
 8006e26:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2a:	0c1b      	lsrs	r3, r3, #16
 8006e2c:	b2da      	uxtb	r2, r3
 8006e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e30:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e34:	3301      	adds	r3, #1
 8006e36:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3a:	0e1b      	lsrs	r3, r3, #24
 8006e3c:	b2da      	uxtb	r2, r3
 8006e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e40:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e44:	3301      	adds	r3, #1
 8006e46:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 8006e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	643b      	str	r3, [r7, #64]	; 0x40
 8006e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e50:	2b07      	cmp	r3, #7
 8006e52:	d9d4      	bls.n	8006dfe <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8006e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e56:	3b20      	subs	r3, #32
 8006e58:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006e5a:	f7fa fac7 	bl	80013ec <HAL_GetTick>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d902      	bls.n	8006e70 <HAL_SD_ReadBlocks+0x1ac>
 8006e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d112      	bne.n	8006e96 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a56      	ldr	r2, [pc, #344]	; (8006fd0 <HAL_SD_ReadBlocks+0x30c>)
 8006e76:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006e92:	2303      	movs	r3, #3
 8006e94:	e097      	b.n	8006fc6 <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e9c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d09f      	beq.n	8006de4 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68da      	ldr	r2, [r3, #12]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006eb2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d022      	beq.n	8006f08 <HAL_SD_ReadBlocks+0x244>
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d91f      	bls.n	8006f08 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ecc:	2b03      	cmp	r3, #3
 8006ece:	d01b      	beq.n	8006f08 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f003 ff73 	bl	800adc0 <SDMMC_CmdStopTransfer>
 8006eda:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d012      	beq.n	8006f08 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a3a      	ldr	r2, [pc, #232]	; (8006fd0 <HAL_SD_ReadBlocks+0x30c>)
 8006ee8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ef0:	431a      	orrs	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e05e      	b.n	8006fc6 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f0e:	f003 0308 	and.w	r3, r3, #8
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d012      	beq.n	8006f3c <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a2d      	ldr	r2, [pc, #180]	; (8006fd0 <HAL_SD_ReadBlocks+0x30c>)
 8006f1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f22:	f043 0208 	orr.w	r2, r3, #8
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e044      	b.n	8006fc6 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f42:	f003 0302 	and.w	r3, r3, #2
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d012      	beq.n	8006f70 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a20      	ldr	r2, [pc, #128]	; (8006fd0 <HAL_SD_ReadBlocks+0x30c>)
 8006f50:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f56:	f043 0202 	orr.w	r2, r3, #2
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e02a      	b.n	8006fc6 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f76:	f003 0320 	and.w	r3, r3, #32
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d012      	beq.n	8006fa4 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a13      	ldr	r2, [pc, #76]	; (8006fd0 <HAL_SD_ReadBlocks+0x30c>)
 8006f84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8a:	f043 0220 	orr.w	r2, r3, #32
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2201      	movs	r2, #1
 8006f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e010      	b.n	8006fc6 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a0a      	ldr	r2, [pc, #40]	; (8006fd4 <HAL_SD_ReadBlocks+0x310>)
 8006faa:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	e006      	b.n	8006fc6 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fbc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
  }
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3748      	adds	r7, #72	; 0x48
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	1fe00fff 	.word	0x1fe00fff
 8006fd4:	18000f3a 	.word	0x18000f3a

08006fd8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b092      	sub	sp, #72	; 0x48
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	607a      	str	r2, [r7, #4]
 8006fe4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006fe6:	f7fa fa01 	bl	80013ec <HAL_GetTick>
 8006fea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d107      	bne.n	800700a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e16b      	b.n	80072e2 <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007010:	b2db      	uxtb	r3, r3
 8007012:	2b01      	cmp	r3, #1
 8007014:	f040 815e 	bne.w	80072d4 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800701e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	441a      	add	r2, r3
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007028:	429a      	cmp	r2, r3
 800702a:	d907      	bls.n	800703c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007030:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e152      	b.n	80072e2 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2203      	movs	r2, #3
 8007040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2200      	movs	r2, #0
 800704a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007050:	2b01      	cmp	r3, #1
 8007052:	d002      	beq.n	800705a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8007054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007056:	025b      	lsls	r3, r3, #9
 8007058:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800705a:	f04f 33ff 	mov.w	r3, #4294967295
 800705e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	025b      	lsls	r3, r3, #9
 8007064:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007066:	2390      	movs	r3, #144	; 0x90
 8007068:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800706a:	2300      	movs	r3, #0
 800706c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800706e:	2300      	movs	r3, #0
 8007070:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007072:	2300      	movs	r3, #0
 8007074:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f107 0218 	add.w	r2, r7, #24
 800707e:	4611      	mov	r1, r2
 8007080:	4618      	mov	r0, r3
 8007082:	f003 fdc1 	bl	800ac08 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68da      	ldr	r2, [r3, #12]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007094:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	2b01      	cmp	r3, #1
 800709a:	d90a      	bls.n	80070b2 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2220      	movs	r2, #32
 80070a0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80070a8:	4618      	mov	r0, r3
 80070aa:	f003 fe65 	bl	800ad78 <SDMMC_CmdWriteMultiBlock>
 80070ae:	6478      	str	r0, [r7, #68]	; 0x44
 80070b0:	e009      	b.n	80070c6 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2210      	movs	r2, #16
 80070b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80070be:	4618      	mov	r0, r3
 80070c0:	f003 fe37 	bl	800ad32 <SDMMC_CmdWriteSingleBlock>
 80070c4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80070c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d012      	beq.n	80070f2 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a86      	ldr	r2, [pc, #536]	; (80072ec <HAL_SD_WriteBlocks+0x314>)
 80070d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070da:	431a      	orrs	r2, r3
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e0f7      	b.n	80072e2 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80070f6:	e05c      	b.n	80071b2 <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d037      	beq.n	8007176 <HAL_SD_WriteBlocks+0x19e>
 8007106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007108:	2b1f      	cmp	r3, #31
 800710a:	d934      	bls.n	8007176 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800710c:	2300      	movs	r3, #0
 800710e:	643b      	str	r3, [r7, #64]	; 0x40
 8007110:	e02b      	b.n	800716a <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8007112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800711a:	3301      	adds	r3, #1
 800711c:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800711e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	021a      	lsls	r2, r3, #8
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	4313      	orrs	r3, r2
 8007128:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800712a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800712c:	3301      	adds	r3, #1
 800712e:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	041a      	lsls	r2, r3, #16
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	4313      	orrs	r3, r2
 800713a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800713c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800713e:	3301      	adds	r3, #1
 8007140:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8007142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	061a      	lsls	r2, r3, #24
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	4313      	orrs	r3, r2
 800714c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800714e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007150:	3301      	adds	r3, #1
 8007152:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f107 0214 	add.w	r2, r7, #20
 800715c:	4611      	mov	r1, r2
 800715e:	4618      	mov	r0, r3
 8007160:	f003 fcd7 	bl	800ab12 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007166:	3301      	adds	r3, #1
 8007168:	643b      	str	r3, [r7, #64]	; 0x40
 800716a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800716c:	2b07      	cmp	r3, #7
 800716e:	d9d0      	bls.n	8007112 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8007170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007172:	3b20      	subs	r3, #32
 8007174:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007176:	f7fa f939 	bl	80013ec <HAL_GetTick>
 800717a:	4602      	mov	r2, r0
 800717c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007182:	429a      	cmp	r2, r3
 8007184:	d902      	bls.n	800718c <HAL_SD_WriteBlocks+0x1b4>
 8007186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007188:	2b00      	cmp	r3, #0
 800718a:	d112      	bne.n	80071b2 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a56      	ldr	r2, [pc, #344]	; (80072ec <HAL_SD_WriteBlocks+0x314>)
 8007192:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800719a:	431a      	orrs	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80071ae:	2303      	movs	r3, #3
 80071b0:	e097      	b.n	80072e2 <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b8:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d09b      	beq.n	80070f8 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	68da      	ldr	r2, [r3, #12]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071ce:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d022      	beq.n	8007224 <HAL_SD_WriteBlocks+0x24c>
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d91f      	bls.n	8007224 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e8:	2b03      	cmp	r3, #3
 80071ea:	d01b      	beq.n	8007224 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4618      	mov	r0, r3
 80071f2:	f003 fde5 	bl	800adc0 <SDMMC_CmdStopTransfer>
 80071f6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80071f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d012      	beq.n	8007224 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a3a      	ldr	r2, [pc, #232]	; (80072ec <HAL_SD_WriteBlocks+0x314>)
 8007204:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800720a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800720c:	431a      	orrs	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e05e      	b.n	80072e2 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800722a:	f003 0308 	and.w	r3, r3, #8
 800722e:	2b00      	cmp	r3, #0
 8007230:	d012      	beq.n	8007258 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a2d      	ldr	r2, [pc, #180]	; (80072ec <HAL_SD_WriteBlocks+0x314>)
 8007238:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723e:	f043 0208 	orr.w	r2, r3, #8
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	e044      	b.n	80072e2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800725e:	f003 0302 	and.w	r3, r3, #2
 8007262:	2b00      	cmp	r3, #0
 8007264:	d012      	beq.n	800728c <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a20      	ldr	r2, [pc, #128]	; (80072ec <HAL_SD_WriteBlocks+0x314>)
 800726c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007272:	f043 0202 	orr.w	r2, r3, #2
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2200      	movs	r2, #0
 8007286:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e02a      	b.n	80072e2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007292:	f003 0310 	and.w	r3, r3, #16
 8007296:	2b00      	cmp	r3, #0
 8007298:	d012      	beq.n	80072c0 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a13      	ldr	r2, [pc, #76]	; (80072ec <HAL_SD_WriteBlocks+0x314>)
 80072a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a6:	f043 0210 	orr.w	r2, r3, #16
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2201      	movs	r2, #1
 80072b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e010      	b.n	80072e2 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a0a      	ldr	r2, [pc, #40]	; (80072f0 <HAL_SD_WriteBlocks+0x318>)
 80072c6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80072d0:	2300      	movs	r3, #0
 80072d2:	e006      	b.n	80072e2 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
  }
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3748      	adds	r7, #72	; 0x48
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	1fe00fff 	.word	0x1fe00fff
 80072f0:	18000f3a 	.word	0x18000f3a

080072f4 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	4603      	mov	r3, r0
 80072fc:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 80072fe:	bf00      	nop
 8007300:	370c      	adds	r7, #12
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
	...

0800730c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800731a:	0f9b      	lsrs	r3, r3, #30
 800731c:	b2da      	uxtb	r2, r3
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007326:	0e9b      	lsrs	r3, r3, #26
 8007328:	b2db      	uxtb	r3, r3
 800732a:	f003 030f 	and.w	r3, r3, #15
 800732e:	b2da      	uxtb	r2, r3
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007338:	0e1b      	lsrs	r3, r3, #24
 800733a:	b2db      	uxtb	r3, r3
 800733c:	f003 0303 	and.w	r3, r3, #3
 8007340:	b2da      	uxtb	r2, r3
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800734a:	0c1b      	lsrs	r3, r3, #16
 800734c:	b2da      	uxtb	r2, r3
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007356:	0a1b      	lsrs	r3, r3, #8
 8007358:	b2da      	uxtb	r2, r3
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007362:	b2da      	uxtb	r2, r3
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800736c:	0d1b      	lsrs	r3, r3, #20
 800736e:	b29a      	uxth	r2, r3
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007378:	0c1b      	lsrs	r3, r3, #16
 800737a:	b2db      	uxtb	r3, r3
 800737c:	f003 030f 	and.w	r3, r3, #15
 8007380:	b2da      	uxtb	r2, r3
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800738a:	0bdb      	lsrs	r3, r3, #15
 800738c:	b2db      	uxtb	r3, r3
 800738e:	f003 0301 	and.w	r3, r3, #1
 8007392:	b2da      	uxtb	r2, r3
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800739c:	0b9b      	lsrs	r3, r3, #14
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	f003 0301 	and.w	r3, r3, #1
 80073a4:	b2da      	uxtb	r2, r3
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073ae:	0b5b      	lsrs	r3, r3, #13
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	f003 0301 	and.w	r3, r3, #1
 80073b6:	b2da      	uxtb	r2, r3
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073c0:	0b1b      	lsrs	r3, r3, #12
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	f003 0301 	and.w	r3, r3, #1
 80073c8:	b2da      	uxtb	r2, r3
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	2200      	movs	r2, #0
 80073d2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d163      	bne.n	80074a4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073e0:	009a      	lsls	r2, r3, #2
 80073e2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80073e6:	4013      	ands	r3, r2
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80073ec:	0f92      	lsrs	r2, r2, #30
 80073ee:	431a      	orrs	r2, r3
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073f8:	0edb      	lsrs	r3, r3, #27
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	f003 0307 	and.w	r3, r3, #7
 8007400:	b2da      	uxtb	r2, r3
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800740a:	0e1b      	lsrs	r3, r3, #24
 800740c:	b2db      	uxtb	r3, r3
 800740e:	f003 0307 	and.w	r3, r3, #7
 8007412:	b2da      	uxtb	r2, r3
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800741c:	0d5b      	lsrs	r3, r3, #21
 800741e:	b2db      	uxtb	r3, r3
 8007420:	f003 0307 	and.w	r3, r3, #7
 8007424:	b2da      	uxtb	r2, r3
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800742e:	0c9b      	lsrs	r3, r3, #18
 8007430:	b2db      	uxtb	r3, r3
 8007432:	f003 0307 	and.w	r3, r3, #7
 8007436:	b2da      	uxtb	r2, r3
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007440:	0bdb      	lsrs	r3, r3, #15
 8007442:	b2db      	uxtb	r3, r3
 8007444:	f003 0307 	and.w	r3, r3, #7
 8007448:	b2da      	uxtb	r2, r3
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	1c5a      	adds	r2, r3, #1
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	7e1b      	ldrb	r3, [r3, #24]
 800745c:	b2db      	uxtb	r3, r3
 800745e:	f003 0307 	and.w	r3, r3, #7
 8007462:	3302      	adds	r3, #2
 8007464:	2201      	movs	r2, #1
 8007466:	fa02 f303 	lsl.w	r3, r2, r3
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800746e:	fb02 f203 	mul.w	r2, r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	7a1b      	ldrb	r3, [r3, #8]
 800747a:	b2db      	uxtb	r3, r3
 800747c:	f003 030f 	and.w	r3, r3, #15
 8007480:	2201      	movs	r2, #1
 8007482:	409a      	lsls	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007490:	0a52      	lsrs	r2, r2, #9
 8007492:	fb02 f203 	mul.w	r2, r2, r3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074a0:	659a      	str	r2, [r3, #88]	; 0x58
 80074a2:	e031      	b.n	8007508 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d11d      	bne.n	80074e8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074b0:	041b      	lsls	r3, r3, #16
 80074b2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074ba:	0c1b      	lsrs	r3, r3, #16
 80074bc:	431a      	orrs	r2, r3
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	3301      	adds	r3, #1
 80074c8:	029a      	lsls	r2, r3, #10
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074dc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	659a      	str	r2, [r3, #88]	; 0x58
 80074e6:	e00f      	b.n	8007508 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a58      	ldr	r2, [pc, #352]	; (8007650 <HAL_SD_GetCardCSD+0x344>)
 80074ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e09d      	b.n	8007644 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800750c:	0b9b      	lsrs	r3, r3, #14
 800750e:	b2db      	uxtb	r3, r3
 8007510:	f003 0301 	and.w	r3, r3, #1
 8007514:	b2da      	uxtb	r2, r3
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800751e:	09db      	lsrs	r3, r3, #7
 8007520:	b2db      	uxtb	r3, r3
 8007522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007526:	b2da      	uxtb	r2, r3
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007530:	b2db      	uxtb	r3, r3
 8007532:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007536:	b2da      	uxtb	r2, r3
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007540:	0fdb      	lsrs	r3, r3, #31
 8007542:	b2da      	uxtb	r2, r3
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800754c:	0f5b      	lsrs	r3, r3, #29
 800754e:	b2db      	uxtb	r3, r3
 8007550:	f003 0303 	and.w	r3, r3, #3
 8007554:	b2da      	uxtb	r2, r3
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800755e:	0e9b      	lsrs	r3, r3, #26
 8007560:	b2db      	uxtb	r3, r3
 8007562:	f003 0307 	and.w	r3, r3, #7
 8007566:	b2da      	uxtb	r2, r3
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007570:	0d9b      	lsrs	r3, r3, #22
 8007572:	b2db      	uxtb	r3, r3
 8007574:	f003 030f 	and.w	r3, r3, #15
 8007578:	b2da      	uxtb	r2, r3
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007582:	0d5b      	lsrs	r3, r3, #21
 8007584:	b2db      	uxtb	r3, r3
 8007586:	f003 0301 	and.w	r3, r3, #1
 800758a:	b2da      	uxtb	r2, r3
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	2200      	movs	r2, #0
 8007596:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800759e:	0c1b      	lsrs	r3, r3, #16
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	f003 0301 	and.w	r3, r3, #1
 80075a6:	b2da      	uxtb	r2, r3
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075b2:	0bdb      	lsrs	r3, r3, #15
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	f003 0301 	and.w	r3, r3, #1
 80075ba:	b2da      	uxtb	r2, r3
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075c6:	0b9b      	lsrs	r3, r3, #14
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	f003 0301 	and.w	r3, r3, #1
 80075ce:	b2da      	uxtb	r2, r3
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075da:	0b5b      	lsrs	r3, r3, #13
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	f003 0301 	and.w	r3, r3, #1
 80075e2:	b2da      	uxtb	r2, r3
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075ee:	0b1b      	lsrs	r3, r3, #12
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	f003 0301 	and.w	r3, r3, #1
 80075f6:	b2da      	uxtb	r2, r3
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007602:	0a9b      	lsrs	r3, r3, #10
 8007604:	b2db      	uxtb	r3, r3
 8007606:	f003 0303 	and.w	r3, r3, #3
 800760a:	b2da      	uxtb	r2, r3
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007616:	0a1b      	lsrs	r3, r3, #8
 8007618:	b2db      	uxtb	r3, r3
 800761a:	f003 0303 	and.w	r3, r3, #3
 800761e:	b2da      	uxtb	r2, r3
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800762a:	085b      	lsrs	r3, r3, #1
 800762c:	b2db      	uxtb	r3, r3
 800762e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007632:	b2da      	uxtb	r2, r3
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr
 8007650:	1fe00fff 	.word	0x1fe00fff

08007654 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that 
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b094      	sub	sp, #80	; 0x50
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800765e:	2300      	movs	r3, #0
 8007660:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8007664:	f107 0308 	add.w	r3, r7, #8
 8007668:	4619      	mov	r1, r3
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 fb64 	bl	8007d38 <SD_SendSDStatus>
 8007670:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8007672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007674:	2b00      	cmp	r3, #0
 8007676:	d011      	beq.n	800769c <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a4f      	ldr	r2, [pc, #316]	; (80077bc <HAL_SD_GetCardStatus+0x168>)
 800767e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007686:	431a      	orrs	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800769a:	e070      	b.n	800777e <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	099b      	lsrs	r3, r3, #6
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	f003 0303 	and.w	r3, r3, #3
 80076a6:	b2da      	uxtb	r2, r3
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	095b      	lsrs	r3, r3, #5
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	f003 0301 	and.w	r3, r3, #1
 80076b6:	b2da      	uxtb	r2, r3
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	0a1b      	lsrs	r3, r3, #8
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80076c6:	b29a      	uxth	r2, r3
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	0e1b      	lsrs	r3, r3, #24
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	4313      	orrs	r3, r2
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	061a      	lsls	r2, r3, #24
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	021b      	lsls	r3, r3, #8
 80076de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80076e2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	0a1b      	lsrs	r3, r3, #8
 80076e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80076ec:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	0e1b      	lsrs	r3, r3, #24
 80076f2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	b2da      	uxtb	r2, r3
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	0a1b      	lsrs	r3, r3, #8
 8007704:	b2da      	uxtb	r2, r3
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	0d1b      	lsrs	r3, r3, #20
 800770e:	b2db      	uxtb	r3, r3
 8007710:	f003 030f 	and.w	r3, r3, #15
 8007714:	b2da      	uxtb	r2, r3
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	0c1b      	lsrs	r3, r3, #16
 800771e:	b29b      	uxth	r3, r3
 8007720:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007724:	b29a      	uxth	r2, r3
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	b29b      	uxth	r3, r3
 800772a:	b2db      	uxtb	r3, r3
 800772c:	b29b      	uxth	r3, r3
 800772e:	4313      	orrs	r3, r2
 8007730:	b29a      	uxth	r2, r3
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	0a9b      	lsrs	r3, r3, #10
 800773a:	b2db      	uxtb	r3, r3
 800773c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007740:	b2da      	uxtb	r2, r3
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	0a1b      	lsrs	r3, r3, #8
 800774a:	b2db      	uxtb	r3, r3
 800774c:	f003 0303 	and.w	r3, r3, #3
 8007750:	b2da      	uxtb	r2, r3
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	091b      	lsrs	r3, r3, #4
 800775a:	b2db      	uxtb	r3, r3
 800775c:	f003 030f 	and.w	r3, r3, #15
 8007760:	b2da      	uxtb	r2, r3
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	b2db      	uxtb	r3, r3
 800776a:	f003 030f 	and.w	r3, r3, #15
 800776e:	b2da      	uxtb	r2, r3
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	0e1b      	lsrs	r3, r3, #24
 8007778:	b2da      	uxtb	r2, r3
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007786:	4618      	mov	r0, r3
 8007788:	f003 fa6a 	bl	800ac60 <SDMMC_CmdBlockLength>
 800778c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800778e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00d      	beq.n	80077b0 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a08      	ldr	r2, [pc, #32]	; (80077bc <HAL_SD_GetCardStatus+0x168>)
 800779a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077a0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 80077b0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3750      	adds	r7, #80	; 0x50
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	1fe00fff 	.word	0x1fe00fff

080077c0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007818:	b5b0      	push	{r4, r5, r7, lr}
 800781a:	b08e      	sub	sp, #56	; 0x38
 800781c:	af04      	add	r7, sp, #16
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007822:	2300      	movs	r3, #0
 8007824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2203      	movs	r2, #3
 800782c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007834:	2b03      	cmp	r3, #3
 8007836:	d02e      	beq.n	8007896 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800783e:	d106      	bne.n	800784e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007844:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	639a      	str	r2, [r3, #56]	; 0x38
 800784c:	e029      	b.n	80078a2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007854:	d10a      	bne.n	800786c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 fb66 	bl	8007f28 <SD_WideBus_Enable>
 800785c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007862:	6a3b      	ldr	r3, [r7, #32]
 8007864:	431a      	orrs	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	639a      	str	r2, [r3, #56]	; 0x38
 800786a:	e01a      	b.n	80078a2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10a      	bne.n	8007888 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 fba3 	bl	8007fbe <SD_WideBus_Disable>
 8007878:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800787e:	6a3b      	ldr	r3, [r7, #32]
 8007880:	431a      	orrs	r2, r3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	639a      	str	r2, [r3, #56]	; 0x38
 8007886:	e00c      	b.n	80078a2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800788c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	639a      	str	r2, [r3, #56]	; 0x38
 8007894:	e005      	b.n	80078a2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d007      	beq.n	80078ba <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a2e      	ldr	r2, [pc, #184]	; (8007968 <HAL_SD_ConfigWideBusOperation+0x150>)
 80078b0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80078b8:	e034      	b.n	8007924 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	695b      	ldr	r3, [r3, #20]
 80078d4:	2b03      	cmp	r3, #3
 80078d6:	d903      	bls.n	80078e0 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	695b      	ldr	r3, [r3, #20]
 80078dc:	61bb      	str	r3, [r7, #24]
 80078de:	e012      	b.n	8007906 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078e8:	d103      	bne.n	80078f2 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	695b      	ldr	r3, [r3, #20]
 80078ee:	61bb      	str	r3, [r7, #24]
 80078f0:	e009      	b.n	8007906 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078fa:	d102      	bne.n	8007902 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 80078fc:	2302      	movs	r3, #2
 80078fe:	61bb      	str	r3, [r7, #24]
 8007900:	e001      	b.n	8007906 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8007902:	2304      	movs	r3, #4
 8007904:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681d      	ldr	r5, [r3, #0]
 800790a:	466c      	mov	r4, sp
 800790c:	f107 0314 	add.w	r3, r7, #20
 8007910:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007914:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007918:	f107 0308 	add.w	r3, r7, #8
 800791c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800791e:	4628      	mov	r0, r5
 8007920:	f003 f8c0 	bl	800aaa4 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f44f 7100 	mov.w	r1, #512	; 0x200
 800792c:	4618      	mov	r0, r3
 800792e:	f003 f997 	bl	800ac60 <SDMMC_CmdBlockLength>
 8007932:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007934:	6a3b      	ldr	r3, [r7, #32]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00c      	beq.n	8007954 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a0a      	ldr	r2, [pc, #40]	; (8007968 <HAL_SD_ConfigWideBusOperation+0x150>)
 8007940:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007946:	6a3b      	ldr	r3, [r7, #32]
 8007948:	431a      	orrs	r2, r3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800795c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007960:	4618      	mov	r0, r3
 8007962:	3728      	adds	r7, #40	; 0x28
 8007964:	46bd      	mov	sp, r7
 8007966:	bdb0      	pop	{r4, r5, r7, pc}
 8007968:	1fe00fff 	.word	0x1fe00fff

0800796c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b086      	sub	sp, #24
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007974:	2300      	movs	r3, #0
 8007976:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007978:	f107 030c 	add.w	r3, r7, #12
 800797c:	4619      	mov	r1, r3
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 faaa 	bl	8007ed8 <SD_SendStatus>
 8007984:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d005      	beq.n	8007998 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	431a      	orrs	r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	0a5b      	lsrs	r3, r3, #9
 800799c:	f003 030f 	and.w	r3, r3, #15
 80079a0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80079a2:	693b      	ldr	r3, [r7, #16]
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3718      	adds	r7, #24
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80079ac:	b590      	push	{r4, r7, lr}
 80079ae:	b091      	sub	sp, #68	; 0x44
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80079b4:	2301      	movs	r3, #1
 80079b6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4618      	mov	r0, r3
 80079be:	f003 f8ca 	bl	800ab56 <SDMMC_GetPowerState>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d102      	bne.n	80079ce <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80079c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80079cc:	e0a8      	b.n	8007b20 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079d2:	2b03      	cmp	r3, #3
 80079d4:	d02e      	beq.n	8007a34 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4618      	mov	r0, r3
 80079dc:	f003 fb16 	bl	800b00c <SDMMC_CmdSendCID>
 80079e0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80079e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d001      	beq.n	80079ec <SD_InitCard+0x40>
    {
      return errorstate;
 80079e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079ea:	e099      	b.n	8007b20 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2100      	movs	r1, #0
 80079f2:	4618      	mov	r0, r3
 80079f4:	f003 f8f5 	bl	800abe2 <SDMMC_GetResponse>
 80079f8:	4602      	mov	r2, r0
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2104      	movs	r1, #4
 8007a04:	4618      	mov	r0, r3
 8007a06:	f003 f8ec 	bl	800abe2 <SDMMC_GetResponse>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2108      	movs	r1, #8
 8007a16:	4618      	mov	r0, r3
 8007a18:	f003 f8e3 	bl	800abe2 <SDMMC_GetResponse>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	210c      	movs	r1, #12
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f003 f8da 	bl	800abe2 <SDMMC_GetResponse>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a38:	2b03      	cmp	r3, #3
 8007a3a:	d00d      	beq.n	8007a58 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f107 020e 	add.w	r2, r7, #14
 8007a44:	4611      	mov	r1, r2
 8007a46:	4618      	mov	r0, r3
 8007a48:	f003 fb1f 	bl	800b08a <SDMMC_CmdSetRelAdd>
 8007a4c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d001      	beq.n	8007a58 <SD_InitCard+0xac>
    {
      return errorstate;
 8007a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a56:	e063      	b.n	8007b20 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a5c:	2b03      	cmp	r3, #3
 8007a5e:	d036      	beq.n	8007ace <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007a60:	89fb      	ldrh	r3, [r7, #14]
 8007a62:	461a      	mov	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a70:	041b      	lsls	r3, r3, #16
 8007a72:	4619      	mov	r1, r3
 8007a74:	4610      	mov	r0, r2
 8007a76:	f003 fae8 	bl	800b04a <SDMMC_CmdSendCSD>
 8007a7a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d001      	beq.n	8007a86 <SD_InitCard+0xda>
    {
      return errorstate;
 8007a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a84:	e04c      	b.n	8007b20 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f003 f8a8 	bl	800abe2 <SDMMC_GetResponse>
 8007a92:	4602      	mov	r2, r0
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2104      	movs	r1, #4
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f003 f89f 	bl	800abe2 <SDMMC_GetResponse>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2108      	movs	r1, #8
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f003 f896 	bl	800abe2 <SDMMC_GetResponse>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	210c      	movs	r1, #12
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f003 f88d 	bl	800abe2 <SDMMC_GetResponse>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2104      	movs	r1, #4
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f003 f884 	bl	800abe2 <SDMMC_GetResponse>
 8007ada:	4603      	mov	r3, r0
 8007adc:	0d1a      	lsrs	r2, r3, #20
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007ae2:	f107 0310 	add.w	r3, r7, #16
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f7ff fc0f 	bl	800730c <HAL_SD_GetCardCSD>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d002      	beq.n	8007afa <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007af4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007af8:	e012      	b.n	8007b20 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6819      	ldr	r1, [r3, #0]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b02:	041b      	lsls	r3, r3, #16
 8007b04:	f04f 0400 	mov.w	r4, #0
 8007b08:	461a      	mov	r2, r3
 8007b0a:	4623      	mov	r3, r4
 8007b0c:	4608      	mov	r0, r1
 8007b0e:	f003 f993 	bl	800ae38 <SDMMC_CmdSelDesel>
 8007b12:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d001      	beq.n	8007b1e <SD_InitCard+0x172>
  {
    return errorstate;
 8007b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b1c:	e000      	b.n	8007b20 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3744      	adds	r7, #68	; 0x44
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd90      	pop	{r4, r7, pc}

08007b28 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b088      	sub	sp, #32
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b30:	2300      	movs	r3, #0
 8007b32:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8007b34:	2300      	movs	r3, #0
 8007b36:	61fb      	str	r3, [r7, #28]
 8007b38:	2300      	movs	r3, #0
 8007b3a:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8007b3c:	f7f9 fc56 	bl	80013ec <HAL_GetTick>
 8007b40:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4618      	mov	r0, r3
 8007b48:	f003 f99a 	bl	800ae80 <SDMMC_CmdGoIdleState>
 8007b4c:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d001      	beq.n	8007b58 <SD_PowerON+0x30>
  {
    return errorstate;
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	e0e9      	b.n	8007d2c <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f003 f9ad 	bl	800aebc <SDMMC_CmdOperCond>
 8007b62:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00d      	beq.n	8007b86 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4618      	mov	r0, r3
 8007b76:	f003 f983 	bl	800ae80 <SDMMC_CmdGoIdleState>
 8007b7a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d004      	beq.n	8007b8c <SD_PowerON+0x64>
    {
      return errorstate;
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	e0d2      	b.n	8007d2c <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d137      	bne.n	8007c04 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2100      	movs	r1, #0
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f003 f9ae 	bl	800aefc <SDMMC_CmdAppCommand>
 8007ba0:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d02d      	beq.n	8007c04 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007ba8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007bac:	e0be      	b.n	8007d2c <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f003 f9a1 	bl	800aefc <SDMMC_CmdAppCommand>
 8007bba:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d001      	beq.n	8007bc6 <SD_PowerON+0x9e>
    {
      return errorstate;
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	e0b2      	b.n	8007d2c <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	495a      	ldr	r1, [pc, #360]	; (8007d34 <SD_PowerON+0x20c>)
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f003 f9b8 	bl	800af42 <SDMMC_CmdAppOperCommand>
 8007bd2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d002      	beq.n	8007be0 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007bda:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007bde:	e0a5      	b.n	8007d2c <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2100      	movs	r1, #0
 8007be6:	4618      	mov	r0, r3
 8007be8:	f002 fffb 	bl	800abe2 <SDMMC_GetResponse>
 8007bec:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	0fdb      	lsrs	r3, r3, #31
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d101      	bne.n	8007bfa <SD_PowerON+0xd2>
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e000      	b.n	8007bfc <SD_PowerON+0xd4>
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	61bb      	str	r3, [r7, #24]

    count++;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	3301      	adds	r3, #1
 8007c02:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d802      	bhi.n	8007c14 <SD_PowerON+0xec>
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d0cc      	beq.n	8007bae <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d902      	bls.n	8007c24 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007c1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c22:	e083      	b.n	8007d2c <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d07d      	beq.n	8007d2a <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2201      	movs	r2, #1
 8007c32:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	699b      	ldr	r3, [r3, #24]
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	d176      	bne.n	8007d2a <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d071      	beq.n	8007d2a <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c4c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f042 0208 	orr.w	r2, r2, #8
 8007c5c:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4618      	mov	r0, r3
 8007c64:	f003 fa78 	bl	800b158 <SDMMC_CmdVoltageSwitch>
 8007c68:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d00c      	beq.n	8007c8a <SD_PowerON+0x162>
        {
          return errorstate;
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	e05b      	b.n	8007d2c <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007c74:	f7f9 fbba 	bl	80013ec <HAL_GetTick>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	1ad3      	subs	r3, r2, r3
 8007c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c82:	d102      	bne.n	8007c8a <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8007c84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c88:	e050      	b.n	8007d2c <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c98:	d1ec      	bne.n	8007c74 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8007ca2:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cb2:	d002      	beq.n	8007cba <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8007cb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007cb8:	e038      	b.n	8007d2c <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8007cba:	2001      	movs	r0, #1
 8007cbc:	f7ff fb1a 	bl	80072f4 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f042 0204 	orr.w	r2, r2, #4
 8007cce:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8007cd0:	e00a      	b.n	8007ce8 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007cd2:	f7f9 fb8b 	bl	80013ec <HAL_GetTick>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	1ad3      	subs	r3, r2, r3
 8007cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce0:	d102      	bne.n	8007ce8 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8007ce2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ce6:	e021      	b.n	8007d2c <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cf2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cf6:	d1ec      	bne.n	8007cd2 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007d00:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d10:	d102      	bne.n	8007d18 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007d12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d16:	e009      	b.n	8007d2c <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2213      	movs	r2, #19
 8007d1e:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f04f 32ff 	mov.w	r2, #4294967295
 8007d28:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3720      	adds	r7, #32
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	c1100000 	.word	0xc1100000

08007d38 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b08c      	sub	sp, #48	; 0x30
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007d42:	f7f9 fb53 	bl	80013ec <HAL_GetTick>
 8007d46:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2100      	movs	r1, #0
 8007d52:	4618      	mov	r0, r3
 8007d54:	f002 ff45 	bl	800abe2 <SDMMC_GetResponse>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d62:	d102      	bne.n	8007d6a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007d64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007d68:	e0b0      	b.n	8007ecc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2140      	movs	r1, #64	; 0x40
 8007d70:	4618      	mov	r0, r3
 8007d72:	f002 ff75 	bl	800ac60 <SDMMC_CmdBlockLength>
 8007d76:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d78:	6a3b      	ldr	r3, [r7, #32]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d005      	beq.n	8007d8a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007d86:	6a3b      	ldr	r3, [r7, #32]
 8007d88:	e0a0      	b.n	8007ecc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d92:	041b      	lsls	r3, r3, #16
 8007d94:	4619      	mov	r1, r3
 8007d96:	4610      	mov	r0, r2
 8007d98:	f003 f8b0 	bl	800aefc <SDMMC_CmdAppCommand>
 8007d9c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d9e:	6a3b      	ldr	r3, [r7, #32]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d005      	beq.n	8007db0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007dac:	6a3b      	ldr	r3, [r7, #32]
 8007dae:	e08d      	b.n	8007ecc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007db0:	f04f 33ff 	mov.w	r3, #4294967295
 8007db4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8007db6:	2340      	movs	r3, #64	; 0x40
 8007db8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007dba:	2360      	movs	r3, #96	; 0x60
 8007dbc:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007dbe:	2302      	movs	r3, #2
 8007dc0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f107 0208 	add.w	r2, r7, #8
 8007dd2:	4611      	mov	r1, r2
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f002 ff17 	bl	800ac08 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4618      	mov	r0, r3
 8007de0:	f003 f998 	bl	800b114 <SDMMC_CmdStatusRegister>
 8007de4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007de6:	6a3b      	ldr	r3, [r7, #32]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d02b      	beq.n	8007e44 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007df4:	6a3b      	ldr	r3, [r7, #32]
 8007df6:	e069      	b.n	8007ecc <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d013      	beq.n	8007e2e <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8007e06:	2300      	movs	r3, #0
 8007e08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e0a:	e00d      	b.n	8007e28 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4618      	mov	r0, r3
 8007e12:	f002 fe71 	bl	800aaf8 <SDMMC_ReadFIFO>
 8007e16:	4602      	mov	r2, r0
 8007e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1a:	601a      	str	r2, [r3, #0]
        pData++;
 8007e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1e:	3304      	adds	r3, #4
 8007e20:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8007e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e24:	3301      	adds	r3, #1
 8007e26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e2a:	2b07      	cmp	r3, #7
 8007e2c:	d9ee      	bls.n	8007e0c <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007e2e:	f7f9 fadd 	bl	80013ec <HAL_GetTick>
 8007e32:	4602      	mov	r2, r0
 8007e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e36:	1ad3      	subs	r3, r2, r3
 8007e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e3c:	d102      	bne.n	8007e44 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007e3e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e42:	e043      	b.n	8007ecc <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e4a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d0d2      	beq.n	8007df8 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e58:	f003 0308 	and.w	r3, r3, #8
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d001      	beq.n	8007e64 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007e60:	2308      	movs	r3, #8
 8007e62:	e033      	b.n	8007ecc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e6a:	f003 0302 	and.w	r3, r3, #2
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d001      	beq.n	8007e76 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007e72:	2302      	movs	r3, #2
 8007e74:	e02a      	b.n	8007ecc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e7c:	f003 0320 	and.w	r3, r3, #32
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d017      	beq.n	8007eb4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007e84:	2320      	movs	r3, #32
 8007e86:	e021      	b.n	8007ecc <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f002 fe33 	bl	800aaf8 <SDMMC_ReadFIFO>
 8007e92:	4602      	mov	r2, r0
 8007e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e96:	601a      	str	r2, [r3, #0]
    pData++;
 8007e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9a:	3304      	adds	r3, #4
 8007e9c:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007e9e:	f7f9 faa5 	bl	80013ec <HAL_GetTick>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea6:	1ad3      	subs	r3, r2, r3
 8007ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eac:	d102      	bne.n	8007eb4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007eae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007eb2:	e00b      	b.n	8007ecc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d1e2      	bne.n	8007e88 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a03      	ldr	r2, [pc, #12]	; (8007ed4 <SD_SendSDStatus+0x19c>)
 8007ec8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3730      	adds	r7, #48	; 0x30
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	18000f3a 	.word	0x18000f3a

08007ed8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d102      	bne.n	8007eee <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007ee8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007eec:	e018      	b.n	8007f20 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ef6:	041b      	lsls	r3, r3, #16
 8007ef8:	4619      	mov	r1, r3
 8007efa:	4610      	mov	r0, r2
 8007efc:	f003 f8e7 	bl	800b0ce <SDMMC_CmdSendStatus>
 8007f00:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d001      	beq.n	8007f0c <SD_SendStatus+0x34>
  {
    return errorstate;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	e009      	b.n	8007f20 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2100      	movs	r1, #0
 8007f12:	4618      	mov	r0, r3
 8007f14:	f002 fe65 	bl	800abe2 <SDMMC_GetResponse>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007f1e:	2300      	movs	r3, #0
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b086      	sub	sp, #24
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007f30:	2300      	movs	r3, #0
 8007f32:	60fb      	str	r3, [r7, #12]
 8007f34:	2300      	movs	r3, #0
 8007f36:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f002 fe4f 	bl	800abe2 <SDMMC_GetResponse>
 8007f44:	4603      	mov	r3, r0
 8007f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f4e:	d102      	bne.n	8007f56 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007f50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f54:	e02f      	b.n	8007fb6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007f56:	f107 030c 	add.w	r3, r7, #12
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 f879 	bl	8008054 <SD_FindSCR>
 8007f62:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d001      	beq.n	8007f6e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	e023      	b.n	8007fb6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d01c      	beq.n	8007fb2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f80:	041b      	lsls	r3, r3, #16
 8007f82:	4619      	mov	r1, r3
 8007f84:	4610      	mov	r0, r2
 8007f86:	f002 ffb9 	bl	800aefc <SDMMC_CmdAppCommand>
 8007f8a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d001      	beq.n	8007f96 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	e00f      	b.n	8007fb6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2102      	movs	r1, #2
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f002 fff0 	bl	800af82 <SDMMC_CmdBusWidth>
 8007fa2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d001      	beq.n	8007fae <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	e003      	b.n	8007fb6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	e001      	b.n	8007fb6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007fb2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3718      	adds	r7, #24
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}

08007fbe <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007fbe:	b580      	push	{r7, lr}
 8007fc0:	b086      	sub	sp, #24
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	60fb      	str	r3, [r7, #12]
 8007fca:	2300      	movs	r3, #0
 8007fcc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f002 fe04 	bl	800abe2 <SDMMC_GetResponse>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fe0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fe4:	d102      	bne.n	8007fec <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007fe6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007fea:	e02f      	b.n	800804c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007fec:	f107 030c 	add.w	r3, r7, #12
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f82e 	bl	8008054 <SD_FindSCR>
 8007ff8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d001      	beq.n	8008004 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	e023      	b.n	800804c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800800a:	2b00      	cmp	r3, #0
 800800c:	d01c      	beq.n	8008048 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008016:	041b      	lsls	r3, r3, #16
 8008018:	4619      	mov	r1, r3
 800801a:	4610      	mov	r0, r2
 800801c:	f002 ff6e 	bl	800aefc <SDMMC_CmdAppCommand>
 8008020:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d001      	beq.n	800802c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	e00f      	b.n	800804c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2100      	movs	r1, #0
 8008032:	4618      	mov	r0, r3
 8008034:	f002 ffa5 	bl	800af82 <SDMMC_CmdBusWidth>
 8008038:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d001      	beq.n	8008044 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	e003      	b.n	800804c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008044:	2300      	movs	r3, #0
 8008046:	e001      	b.n	800804c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008048:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800804c:	4618      	mov	r0, r3
 800804e:	3718      	adds	r7, #24
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b08e      	sub	sp, #56	; 0x38
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800805e:	f7f9 f9c5 	bl	80013ec <HAL_GetTick>
 8008062:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008064:	2300      	movs	r3, #0
 8008066:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008068:	2300      	movs	r3, #0
 800806a:	60bb      	str	r3, [r7, #8]
 800806c:	2300      	movs	r3, #0
 800806e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2108      	movs	r1, #8
 800807a:	4618      	mov	r0, r3
 800807c:	f002 fdf0 	bl	800ac60 <SDMMC_CmdBlockLength>
 8008080:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008084:	2b00      	cmp	r3, #0
 8008086:	d001      	beq.n	800808c <SD_FindSCR+0x38>
  {
    return errorstate;
 8008088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808a:	e0ad      	b.n	80081e8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008094:	041b      	lsls	r3, r3, #16
 8008096:	4619      	mov	r1, r3
 8008098:	4610      	mov	r0, r2
 800809a:	f002 ff2f 	bl	800aefc <SDMMC_CmdAppCommand>
 800809e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80080a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d001      	beq.n	80080aa <SD_FindSCR+0x56>
  {
    return errorstate;
 80080a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a8:	e09e      	b.n	80081e8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80080aa:	f04f 33ff 	mov.w	r3, #4294967295
 80080ae:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80080b0:	2308      	movs	r3, #8
 80080b2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80080b4:	2330      	movs	r3, #48	; 0x30
 80080b6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80080b8:	2302      	movs	r3, #2
 80080ba:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80080bc:	2300      	movs	r3, #0
 80080be:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80080c0:	2301      	movs	r3, #1
 80080c2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f107 0210 	add.w	r2, r7, #16
 80080cc:	4611      	mov	r1, r2
 80080ce:	4618      	mov	r0, r3
 80080d0:	f002 fd9a 	bl	800ac08 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4618      	mov	r0, r3
 80080da:	f002 ff75 	bl	800afc8 <SDMMC_CmdSendSCR>
 80080de:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80080e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d027      	beq.n	8008136 <SD_FindSCR+0xe2>
  {
    return errorstate;
 80080e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e8:	e07e      	b.n	80081e8 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d113      	bne.n	8008120 <SD_FindSCR+0xcc>
 80080f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d110      	bne.n	8008120 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4618      	mov	r0, r3
 8008104:	f002 fcf8 	bl	800aaf8 <SDMMC_ReadFIFO>
 8008108:	4603      	mov	r3, r0
 800810a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4618      	mov	r0, r3
 8008112:	f002 fcf1 	bl	800aaf8 <SDMMC_ReadFIFO>
 8008116:	4603      	mov	r3, r0
 8008118:	60fb      	str	r3, [r7, #12]
      index++;
 800811a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800811c:	3301      	adds	r3, #1
 800811e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008120:	f7f9 f964 	bl	80013ec <HAL_GetTick>
 8008124:	4602      	mov	r2, r0
 8008126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008128:	1ad3      	subs	r3, r2, r3
 800812a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800812e:	d102      	bne.n	8008136 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008130:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008134:	e058      	b.n	80081e8 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800813c:	f240 532a 	movw	r3, #1322	; 0x52a
 8008140:	4013      	ands	r3, r2
 8008142:	2b00      	cmp	r3, #0
 8008144:	d0d1      	beq.n	80080ea <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800814c:	f003 0308 	and.w	r3, r3, #8
 8008150:	2b00      	cmp	r3, #0
 8008152:	d005      	beq.n	8008160 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2208      	movs	r2, #8
 800815a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800815c:	2308      	movs	r3, #8
 800815e:	e043      	b.n	80081e8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008166:	f003 0302 	and.w	r3, r3, #2
 800816a:	2b00      	cmp	r3, #0
 800816c:	d005      	beq.n	800817a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2202      	movs	r2, #2
 8008174:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008176:	2302      	movs	r3, #2
 8008178:	e036      	b.n	80081e8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008180:	f003 0320 	and.w	r3, r3, #32
 8008184:	2b00      	cmp	r3, #0
 8008186:	d005      	beq.n	8008194 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2220      	movs	r2, #32
 800818e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008190:	2320      	movs	r3, #32
 8008192:	e029      	b.n	80081e8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a15      	ldr	r2, [pc, #84]	; (80081f0 <SD_FindSCR+0x19c>)
 800819a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	061a      	lsls	r2, r3, #24
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	021b      	lsls	r3, r3, #8
 80081a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80081a8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	0a1b      	lsrs	r3, r3, #8
 80081ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80081b2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	0e1b      	lsrs	r3, r3, #24
 80081b8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80081ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081bc:	601a      	str	r2, [r3, #0]
    scr++;
 80081be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c0:	3304      	adds	r3, #4
 80081c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	061a      	lsls	r2, r3, #24
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	021b      	lsls	r3, r3, #8
 80081cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80081d0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	0a1b      	lsrs	r3, r3, #8
 80081d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80081da:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	0e1b      	lsrs	r3, r3, #24
 80081e0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80081e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3738      	adds	r7, #56	; 0x38
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	18000f3a 	.word	0x18000f3a

080081f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d101      	bne.n	8008206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	e042      	b.n	800828c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800820c:	2b00      	cmp	r3, #0
 800820e:	d106      	bne.n	800821e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f7f8 ff1f 	bl	800105c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2224      	movs	r2, #36	; 0x24
 8008222:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f022 0201 	bic.w	r2, r2, #1
 8008234:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f82e 	bl	8008298 <UART_SetConfig>
 800823c:	4603      	mov	r3, r0
 800823e:	2b01      	cmp	r3, #1
 8008240:	d101      	bne.n	8008246 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	e022      	b.n	800828c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800824a:	2b00      	cmp	r3, #0
 800824c:	d002      	beq.n	8008254 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f002 f9a0 	bl	800a594 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	685a      	ldr	r2, [r3, #4]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008262:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	689a      	ldr	r2, [r3, #8]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008272:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f042 0201 	orr.w	r2, r2, #1
 8008282:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f002 fa27 	bl	800a6d8 <UART_CheckIdleState>
 800828a:	4603      	mov	r3, r0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3708      	adds	r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	0000      	movs	r0, r0
	...

08008298 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008298:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800829c:	b090      	sub	sp, #64	; 0x40
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80082a2:	2300      	movs	r3, #0
 80082a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 80082a6:	2300      	movs	r3, #0
 80082a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80082ac:	2300      	movs	r3, #0
 80082ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	689a      	ldr	r2, [r3, #8]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	691b      	ldr	r3, [r3, #16]
 80082b8:	431a      	orrs	r2, r3
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	695b      	ldr	r3, [r3, #20]
 80082be:	431a      	orrs	r2, r3
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	69db      	ldr	r3, [r3, #28]
 80082c4:	4313      	orrs	r3, r2
 80082c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80082ce:	4313      	orrs	r3, r2
 80082d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	4bc1      	ldr	r3, [pc, #772]	; (80085e0 <UART_SetConfig+0x348>)
 80082da:	4013      	ands	r3, r2
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	6812      	ldr	r2, [r2, #0]
 80082e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80082e2:	430b      	orrs	r3, r1
 80082e4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	68da      	ldr	r2, [r3, #12]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	430a      	orrs	r2, r1
 80082fa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	699b      	ldr	r3, [r3, #24]
 8008300:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4ab7      	ldr	r2, [pc, #732]	; (80085e4 <UART_SetConfig+0x34c>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d004      	beq.n	8008316 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6a1b      	ldr	r3, [r3, #32]
 8008310:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008312:	4313      	orrs	r3, r2
 8008314:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	689a      	ldr	r2, [r3, #8]
 800831c:	4bb2      	ldr	r3, [pc, #712]	; (80085e8 <UART_SetConfig+0x350>)
 800831e:	4013      	ands	r3, r2
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	6812      	ldr	r2, [r2, #0]
 8008324:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008326:	430b      	orrs	r3, r1
 8008328:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008330:	f023 010f 	bic.w	r1, r3, #15
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	430a      	orrs	r2, r1
 800833e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4aa9      	ldr	r2, [pc, #676]	; (80085ec <UART_SetConfig+0x354>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d177      	bne.n	800843a <UART_SetConfig+0x1a2>
 800834a:	4ba9      	ldr	r3, [pc, #676]	; (80085f0 <UART_SetConfig+0x358>)
 800834c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800834e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008352:	2b28      	cmp	r3, #40	; 0x28
 8008354:	d86c      	bhi.n	8008430 <UART_SetConfig+0x198>
 8008356:	a201      	add	r2, pc, #4	; (adr r2, 800835c <UART_SetConfig+0xc4>)
 8008358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800835c:	08008401 	.word	0x08008401
 8008360:	08008431 	.word	0x08008431
 8008364:	08008431 	.word	0x08008431
 8008368:	08008431 	.word	0x08008431
 800836c:	08008431 	.word	0x08008431
 8008370:	08008431 	.word	0x08008431
 8008374:	08008431 	.word	0x08008431
 8008378:	08008431 	.word	0x08008431
 800837c:	08008409 	.word	0x08008409
 8008380:	08008431 	.word	0x08008431
 8008384:	08008431 	.word	0x08008431
 8008388:	08008431 	.word	0x08008431
 800838c:	08008431 	.word	0x08008431
 8008390:	08008431 	.word	0x08008431
 8008394:	08008431 	.word	0x08008431
 8008398:	08008431 	.word	0x08008431
 800839c:	08008411 	.word	0x08008411
 80083a0:	08008431 	.word	0x08008431
 80083a4:	08008431 	.word	0x08008431
 80083a8:	08008431 	.word	0x08008431
 80083ac:	08008431 	.word	0x08008431
 80083b0:	08008431 	.word	0x08008431
 80083b4:	08008431 	.word	0x08008431
 80083b8:	08008431 	.word	0x08008431
 80083bc:	08008419 	.word	0x08008419
 80083c0:	08008431 	.word	0x08008431
 80083c4:	08008431 	.word	0x08008431
 80083c8:	08008431 	.word	0x08008431
 80083cc:	08008431 	.word	0x08008431
 80083d0:	08008431 	.word	0x08008431
 80083d4:	08008431 	.word	0x08008431
 80083d8:	08008431 	.word	0x08008431
 80083dc:	08008421 	.word	0x08008421
 80083e0:	08008431 	.word	0x08008431
 80083e4:	08008431 	.word	0x08008431
 80083e8:	08008431 	.word	0x08008431
 80083ec:	08008431 	.word	0x08008431
 80083f0:	08008431 	.word	0x08008431
 80083f4:	08008431 	.word	0x08008431
 80083f8:	08008431 	.word	0x08008431
 80083fc:	08008429 	.word	0x08008429
 8008400:	2301      	movs	r3, #1
 8008402:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008406:	e233      	b.n	8008870 <UART_SetConfig+0x5d8>
 8008408:	2304      	movs	r3, #4
 800840a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800840e:	e22f      	b.n	8008870 <UART_SetConfig+0x5d8>
 8008410:	2308      	movs	r3, #8
 8008412:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008416:	e22b      	b.n	8008870 <UART_SetConfig+0x5d8>
 8008418:	2310      	movs	r3, #16
 800841a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800841e:	e227      	b.n	8008870 <UART_SetConfig+0x5d8>
 8008420:	2320      	movs	r3, #32
 8008422:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008426:	e223      	b.n	8008870 <UART_SetConfig+0x5d8>
 8008428:	2340      	movs	r3, #64	; 0x40
 800842a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800842e:	e21f      	b.n	8008870 <UART_SetConfig+0x5d8>
 8008430:	2380      	movs	r3, #128	; 0x80
 8008432:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008436:	bf00      	nop
 8008438:	e21a      	b.n	8008870 <UART_SetConfig+0x5d8>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a6d      	ldr	r2, [pc, #436]	; (80085f4 <UART_SetConfig+0x35c>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d132      	bne.n	80084aa <UART_SetConfig+0x212>
 8008444:	4b6a      	ldr	r3, [pc, #424]	; (80085f0 <UART_SetConfig+0x358>)
 8008446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008448:	f003 0307 	and.w	r3, r3, #7
 800844c:	2b05      	cmp	r3, #5
 800844e:	d827      	bhi.n	80084a0 <UART_SetConfig+0x208>
 8008450:	a201      	add	r2, pc, #4	; (adr r2, 8008458 <UART_SetConfig+0x1c0>)
 8008452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008456:	bf00      	nop
 8008458:	08008471 	.word	0x08008471
 800845c:	08008479 	.word	0x08008479
 8008460:	08008481 	.word	0x08008481
 8008464:	08008489 	.word	0x08008489
 8008468:	08008491 	.word	0x08008491
 800846c:	08008499 	.word	0x08008499
 8008470:	2300      	movs	r3, #0
 8008472:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008476:	e1fb      	b.n	8008870 <UART_SetConfig+0x5d8>
 8008478:	2304      	movs	r3, #4
 800847a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800847e:	e1f7      	b.n	8008870 <UART_SetConfig+0x5d8>
 8008480:	2308      	movs	r3, #8
 8008482:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008486:	e1f3      	b.n	8008870 <UART_SetConfig+0x5d8>
 8008488:	2310      	movs	r3, #16
 800848a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800848e:	e1ef      	b.n	8008870 <UART_SetConfig+0x5d8>
 8008490:	2320      	movs	r3, #32
 8008492:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008496:	e1eb      	b.n	8008870 <UART_SetConfig+0x5d8>
 8008498:	2340      	movs	r3, #64	; 0x40
 800849a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800849e:	e1e7      	b.n	8008870 <UART_SetConfig+0x5d8>
 80084a0:	2380      	movs	r3, #128	; 0x80
 80084a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80084a6:	bf00      	nop
 80084a8:	e1e2      	b.n	8008870 <UART_SetConfig+0x5d8>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a52      	ldr	r2, [pc, #328]	; (80085f8 <UART_SetConfig+0x360>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d132      	bne.n	800851a <UART_SetConfig+0x282>
 80084b4:	4b4e      	ldr	r3, [pc, #312]	; (80085f0 <UART_SetConfig+0x358>)
 80084b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084b8:	f003 0307 	and.w	r3, r3, #7
 80084bc:	2b05      	cmp	r3, #5
 80084be:	d827      	bhi.n	8008510 <UART_SetConfig+0x278>
 80084c0:	a201      	add	r2, pc, #4	; (adr r2, 80084c8 <UART_SetConfig+0x230>)
 80084c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c6:	bf00      	nop
 80084c8:	080084e1 	.word	0x080084e1
 80084cc:	080084e9 	.word	0x080084e9
 80084d0:	080084f1 	.word	0x080084f1
 80084d4:	080084f9 	.word	0x080084f9
 80084d8:	08008501 	.word	0x08008501
 80084dc:	08008509 	.word	0x08008509
 80084e0:	2300      	movs	r3, #0
 80084e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80084e6:	e1c3      	b.n	8008870 <UART_SetConfig+0x5d8>
 80084e8:	2304      	movs	r3, #4
 80084ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80084ee:	e1bf      	b.n	8008870 <UART_SetConfig+0x5d8>
 80084f0:	2308      	movs	r3, #8
 80084f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80084f6:	e1bb      	b.n	8008870 <UART_SetConfig+0x5d8>
 80084f8:	2310      	movs	r3, #16
 80084fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80084fe:	e1b7      	b.n	8008870 <UART_SetConfig+0x5d8>
 8008500:	2320      	movs	r3, #32
 8008502:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008506:	e1b3      	b.n	8008870 <UART_SetConfig+0x5d8>
 8008508:	2340      	movs	r3, #64	; 0x40
 800850a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800850e:	e1af      	b.n	8008870 <UART_SetConfig+0x5d8>
 8008510:	2380      	movs	r3, #128	; 0x80
 8008512:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008516:	bf00      	nop
 8008518:	e1aa      	b.n	8008870 <UART_SetConfig+0x5d8>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a37      	ldr	r2, [pc, #220]	; (80085fc <UART_SetConfig+0x364>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d132      	bne.n	800858a <UART_SetConfig+0x2f2>
 8008524:	4b32      	ldr	r3, [pc, #200]	; (80085f0 <UART_SetConfig+0x358>)
 8008526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008528:	f003 0307 	and.w	r3, r3, #7
 800852c:	2b05      	cmp	r3, #5
 800852e:	d827      	bhi.n	8008580 <UART_SetConfig+0x2e8>
 8008530:	a201      	add	r2, pc, #4	; (adr r2, 8008538 <UART_SetConfig+0x2a0>)
 8008532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008536:	bf00      	nop
 8008538:	08008551 	.word	0x08008551
 800853c:	08008559 	.word	0x08008559
 8008540:	08008561 	.word	0x08008561
 8008544:	08008569 	.word	0x08008569
 8008548:	08008571 	.word	0x08008571
 800854c:	08008579 	.word	0x08008579
 8008550:	2300      	movs	r3, #0
 8008552:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008556:	e18b      	b.n	8008870 <UART_SetConfig+0x5d8>
 8008558:	2304      	movs	r3, #4
 800855a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800855e:	e187      	b.n	8008870 <UART_SetConfig+0x5d8>
 8008560:	2308      	movs	r3, #8
 8008562:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008566:	e183      	b.n	8008870 <UART_SetConfig+0x5d8>
 8008568:	2310      	movs	r3, #16
 800856a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800856e:	e17f      	b.n	8008870 <UART_SetConfig+0x5d8>
 8008570:	2320      	movs	r3, #32
 8008572:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008576:	e17b      	b.n	8008870 <UART_SetConfig+0x5d8>
 8008578:	2340      	movs	r3, #64	; 0x40
 800857a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800857e:	e177      	b.n	8008870 <UART_SetConfig+0x5d8>
 8008580:	2380      	movs	r3, #128	; 0x80
 8008582:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008586:	bf00      	nop
 8008588:	e172      	b.n	8008870 <UART_SetConfig+0x5d8>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a1c      	ldr	r2, [pc, #112]	; (8008600 <UART_SetConfig+0x368>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d144      	bne.n	800861e <UART_SetConfig+0x386>
 8008594:	4b16      	ldr	r3, [pc, #88]	; (80085f0 <UART_SetConfig+0x358>)
 8008596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008598:	f003 0307 	and.w	r3, r3, #7
 800859c:	2b05      	cmp	r3, #5
 800859e:	d839      	bhi.n	8008614 <UART_SetConfig+0x37c>
 80085a0:	a201      	add	r2, pc, #4	; (adr r2, 80085a8 <UART_SetConfig+0x310>)
 80085a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a6:	bf00      	nop
 80085a8:	080085c1 	.word	0x080085c1
 80085ac:	080085c9 	.word	0x080085c9
 80085b0:	080085d1 	.word	0x080085d1
 80085b4:	080085d9 	.word	0x080085d9
 80085b8:	08008605 	.word	0x08008605
 80085bc:	0800860d 	.word	0x0800860d
 80085c0:	2300      	movs	r3, #0
 80085c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80085c6:	e153      	b.n	8008870 <UART_SetConfig+0x5d8>
 80085c8:	2304      	movs	r3, #4
 80085ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80085ce:	e14f      	b.n	8008870 <UART_SetConfig+0x5d8>
 80085d0:	2308      	movs	r3, #8
 80085d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80085d6:	e14b      	b.n	8008870 <UART_SetConfig+0x5d8>
 80085d8:	2310      	movs	r3, #16
 80085da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80085de:	e147      	b.n	8008870 <UART_SetConfig+0x5d8>
 80085e0:	cfff69f3 	.word	0xcfff69f3
 80085e4:	58000c00 	.word	0x58000c00
 80085e8:	11fff4ff 	.word	0x11fff4ff
 80085ec:	40011000 	.word	0x40011000
 80085f0:	58024400 	.word	0x58024400
 80085f4:	40004400 	.word	0x40004400
 80085f8:	40004800 	.word	0x40004800
 80085fc:	40004c00 	.word	0x40004c00
 8008600:	40005000 	.word	0x40005000
 8008604:	2320      	movs	r3, #32
 8008606:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800860a:	e131      	b.n	8008870 <UART_SetConfig+0x5d8>
 800860c:	2340      	movs	r3, #64	; 0x40
 800860e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008612:	e12d      	b.n	8008870 <UART_SetConfig+0x5d8>
 8008614:	2380      	movs	r3, #128	; 0x80
 8008616:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800861a:	bf00      	nop
 800861c:	e128      	b.n	8008870 <UART_SetConfig+0x5d8>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4ac3      	ldr	r2, [pc, #780]	; (8008930 <UART_SetConfig+0x698>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d178      	bne.n	800871a <UART_SetConfig+0x482>
 8008628:	4bc2      	ldr	r3, [pc, #776]	; (8008934 <UART_SetConfig+0x69c>)
 800862a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800862c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008630:	2b28      	cmp	r3, #40	; 0x28
 8008632:	d86d      	bhi.n	8008710 <UART_SetConfig+0x478>
 8008634:	a201      	add	r2, pc, #4	; (adr r2, 800863c <UART_SetConfig+0x3a4>)
 8008636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800863a:	bf00      	nop
 800863c:	080086e1 	.word	0x080086e1
 8008640:	08008711 	.word	0x08008711
 8008644:	08008711 	.word	0x08008711
 8008648:	08008711 	.word	0x08008711
 800864c:	08008711 	.word	0x08008711
 8008650:	08008711 	.word	0x08008711
 8008654:	08008711 	.word	0x08008711
 8008658:	08008711 	.word	0x08008711
 800865c:	080086e9 	.word	0x080086e9
 8008660:	08008711 	.word	0x08008711
 8008664:	08008711 	.word	0x08008711
 8008668:	08008711 	.word	0x08008711
 800866c:	08008711 	.word	0x08008711
 8008670:	08008711 	.word	0x08008711
 8008674:	08008711 	.word	0x08008711
 8008678:	08008711 	.word	0x08008711
 800867c:	080086f1 	.word	0x080086f1
 8008680:	08008711 	.word	0x08008711
 8008684:	08008711 	.word	0x08008711
 8008688:	08008711 	.word	0x08008711
 800868c:	08008711 	.word	0x08008711
 8008690:	08008711 	.word	0x08008711
 8008694:	08008711 	.word	0x08008711
 8008698:	08008711 	.word	0x08008711
 800869c:	080086f9 	.word	0x080086f9
 80086a0:	08008711 	.word	0x08008711
 80086a4:	08008711 	.word	0x08008711
 80086a8:	08008711 	.word	0x08008711
 80086ac:	08008711 	.word	0x08008711
 80086b0:	08008711 	.word	0x08008711
 80086b4:	08008711 	.word	0x08008711
 80086b8:	08008711 	.word	0x08008711
 80086bc:	08008701 	.word	0x08008701
 80086c0:	08008711 	.word	0x08008711
 80086c4:	08008711 	.word	0x08008711
 80086c8:	08008711 	.word	0x08008711
 80086cc:	08008711 	.word	0x08008711
 80086d0:	08008711 	.word	0x08008711
 80086d4:	08008711 	.word	0x08008711
 80086d8:	08008711 	.word	0x08008711
 80086dc:	08008709 	.word	0x08008709
 80086e0:	2301      	movs	r3, #1
 80086e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80086e6:	e0c3      	b.n	8008870 <UART_SetConfig+0x5d8>
 80086e8:	2304      	movs	r3, #4
 80086ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80086ee:	e0bf      	b.n	8008870 <UART_SetConfig+0x5d8>
 80086f0:	2308      	movs	r3, #8
 80086f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80086f6:	e0bb      	b.n	8008870 <UART_SetConfig+0x5d8>
 80086f8:	2310      	movs	r3, #16
 80086fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80086fe:	e0b7      	b.n	8008870 <UART_SetConfig+0x5d8>
 8008700:	2320      	movs	r3, #32
 8008702:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008706:	e0b3      	b.n	8008870 <UART_SetConfig+0x5d8>
 8008708:	2340      	movs	r3, #64	; 0x40
 800870a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800870e:	e0af      	b.n	8008870 <UART_SetConfig+0x5d8>
 8008710:	2380      	movs	r3, #128	; 0x80
 8008712:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008716:	bf00      	nop
 8008718:	e0aa      	b.n	8008870 <UART_SetConfig+0x5d8>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a86      	ldr	r2, [pc, #536]	; (8008938 <UART_SetConfig+0x6a0>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d132      	bne.n	800878a <UART_SetConfig+0x4f2>
 8008724:	4b83      	ldr	r3, [pc, #524]	; (8008934 <UART_SetConfig+0x69c>)
 8008726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008728:	f003 0307 	and.w	r3, r3, #7
 800872c:	2b05      	cmp	r3, #5
 800872e:	d827      	bhi.n	8008780 <UART_SetConfig+0x4e8>
 8008730:	a201      	add	r2, pc, #4	; (adr r2, 8008738 <UART_SetConfig+0x4a0>)
 8008732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008736:	bf00      	nop
 8008738:	08008751 	.word	0x08008751
 800873c:	08008759 	.word	0x08008759
 8008740:	08008761 	.word	0x08008761
 8008744:	08008769 	.word	0x08008769
 8008748:	08008771 	.word	0x08008771
 800874c:	08008779 	.word	0x08008779
 8008750:	2300      	movs	r3, #0
 8008752:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008756:	e08b      	b.n	8008870 <UART_SetConfig+0x5d8>
 8008758:	2304      	movs	r3, #4
 800875a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800875e:	e087      	b.n	8008870 <UART_SetConfig+0x5d8>
 8008760:	2308      	movs	r3, #8
 8008762:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008766:	e083      	b.n	8008870 <UART_SetConfig+0x5d8>
 8008768:	2310      	movs	r3, #16
 800876a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800876e:	e07f      	b.n	8008870 <UART_SetConfig+0x5d8>
 8008770:	2320      	movs	r3, #32
 8008772:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008776:	e07b      	b.n	8008870 <UART_SetConfig+0x5d8>
 8008778:	2340      	movs	r3, #64	; 0x40
 800877a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800877e:	e077      	b.n	8008870 <UART_SetConfig+0x5d8>
 8008780:	2380      	movs	r3, #128	; 0x80
 8008782:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008786:	bf00      	nop
 8008788:	e072      	b.n	8008870 <UART_SetConfig+0x5d8>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a6b      	ldr	r2, [pc, #428]	; (800893c <UART_SetConfig+0x6a4>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d132      	bne.n	80087fa <UART_SetConfig+0x562>
 8008794:	4b67      	ldr	r3, [pc, #412]	; (8008934 <UART_SetConfig+0x69c>)
 8008796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008798:	f003 0307 	and.w	r3, r3, #7
 800879c:	2b05      	cmp	r3, #5
 800879e:	d827      	bhi.n	80087f0 <UART_SetConfig+0x558>
 80087a0:	a201      	add	r2, pc, #4	; (adr r2, 80087a8 <UART_SetConfig+0x510>)
 80087a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a6:	bf00      	nop
 80087a8:	080087c1 	.word	0x080087c1
 80087ac:	080087c9 	.word	0x080087c9
 80087b0:	080087d1 	.word	0x080087d1
 80087b4:	080087d9 	.word	0x080087d9
 80087b8:	080087e1 	.word	0x080087e1
 80087bc:	080087e9 	.word	0x080087e9
 80087c0:	2300      	movs	r3, #0
 80087c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80087c6:	e053      	b.n	8008870 <UART_SetConfig+0x5d8>
 80087c8:	2304      	movs	r3, #4
 80087ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80087ce:	e04f      	b.n	8008870 <UART_SetConfig+0x5d8>
 80087d0:	2308      	movs	r3, #8
 80087d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80087d6:	e04b      	b.n	8008870 <UART_SetConfig+0x5d8>
 80087d8:	2310      	movs	r3, #16
 80087da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80087de:	e047      	b.n	8008870 <UART_SetConfig+0x5d8>
 80087e0:	2320      	movs	r3, #32
 80087e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80087e6:	e043      	b.n	8008870 <UART_SetConfig+0x5d8>
 80087e8:	2340      	movs	r3, #64	; 0x40
 80087ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80087ee:	e03f      	b.n	8008870 <UART_SetConfig+0x5d8>
 80087f0:	2380      	movs	r3, #128	; 0x80
 80087f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80087f6:	bf00      	nop
 80087f8:	e03a      	b.n	8008870 <UART_SetConfig+0x5d8>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a50      	ldr	r2, [pc, #320]	; (8008940 <UART_SetConfig+0x6a8>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d132      	bne.n	800886a <UART_SetConfig+0x5d2>
 8008804:	4b4b      	ldr	r3, [pc, #300]	; (8008934 <UART_SetConfig+0x69c>)
 8008806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008808:	f003 0307 	and.w	r3, r3, #7
 800880c:	2b05      	cmp	r3, #5
 800880e:	d827      	bhi.n	8008860 <UART_SetConfig+0x5c8>
 8008810:	a201      	add	r2, pc, #4	; (adr r2, 8008818 <UART_SetConfig+0x580>)
 8008812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008816:	bf00      	nop
 8008818:	08008831 	.word	0x08008831
 800881c:	08008839 	.word	0x08008839
 8008820:	08008841 	.word	0x08008841
 8008824:	08008849 	.word	0x08008849
 8008828:	08008851 	.word	0x08008851
 800882c:	08008859 	.word	0x08008859
 8008830:	2302      	movs	r3, #2
 8008832:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008836:	e01b      	b.n	8008870 <UART_SetConfig+0x5d8>
 8008838:	2304      	movs	r3, #4
 800883a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800883e:	e017      	b.n	8008870 <UART_SetConfig+0x5d8>
 8008840:	2308      	movs	r3, #8
 8008842:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008846:	e013      	b.n	8008870 <UART_SetConfig+0x5d8>
 8008848:	2310      	movs	r3, #16
 800884a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800884e:	e00f      	b.n	8008870 <UART_SetConfig+0x5d8>
 8008850:	2320      	movs	r3, #32
 8008852:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008856:	e00b      	b.n	8008870 <UART_SetConfig+0x5d8>
 8008858:	2340      	movs	r3, #64	; 0x40
 800885a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800885e:	e007      	b.n	8008870 <UART_SetConfig+0x5d8>
 8008860:	2380      	movs	r3, #128	; 0x80
 8008862:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008866:	bf00      	nop
 8008868:	e002      	b.n	8008870 <UART_SetConfig+0x5d8>
 800886a:	2380      	movs	r3, #128	; 0x80
 800886c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a32      	ldr	r2, [pc, #200]	; (8008940 <UART_SetConfig+0x6a8>)
 8008876:	4293      	cmp	r3, r2
 8008878:	f040 86f7 	bne.w	800966a <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800887c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008880:	2b08      	cmp	r3, #8
 8008882:	f000 80c0 	beq.w	8008a06 <UART_SetConfig+0x76e>
 8008886:	2b08      	cmp	r3, #8
 8008888:	dc04      	bgt.n	8008894 <UART_SetConfig+0x5fc>
 800888a:	2b02      	cmp	r3, #2
 800888c:	d00c      	beq.n	80088a8 <UART_SetConfig+0x610>
 800888e:	2b04      	cmp	r3, #4
 8008890:	d065      	beq.n	800895e <UART_SetConfig+0x6c6>
 8008892:	e27a      	b.n	8008d8a <UART_SetConfig+0xaf2>
 8008894:	2b20      	cmp	r3, #32
 8008896:	f000 81b0 	beq.w	8008bfa <UART_SetConfig+0x962>
 800889a:	2b40      	cmp	r3, #64	; 0x40
 800889c:	f000 821e 	beq.w	8008cdc <UART_SetConfig+0xa44>
 80088a0:	2b10      	cmp	r3, #16
 80088a2:	f000 8104 	beq.w	8008aae <UART_SetConfig+0x816>
 80088a6:	e270      	b.n	8008d8a <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80088a8:	f7fd f84e 	bl	8005948 <HAL_RCCEx_GetD3PCLK1Freq>
 80088ac:	4602      	mov	r2, r0
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d04e      	beq.n	8008954 <UART_SetConfig+0x6bc>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d048      	beq.n	8008950 <UART_SetConfig+0x6b8>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d042      	beq.n	800894c <UART_SetConfig+0x6b4>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ca:	2b03      	cmp	r3, #3
 80088cc:	d03c      	beq.n	8008948 <UART_SetConfig+0x6b0>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d2:	2b04      	cmp	r3, #4
 80088d4:	d036      	beq.n	8008944 <UART_SetConfig+0x6ac>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088da:	2b05      	cmp	r3, #5
 80088dc:	d026      	beq.n	800892c <UART_SetConfig+0x694>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e2:	2b06      	cmp	r3, #6
 80088e4:	d020      	beq.n	8008928 <UART_SetConfig+0x690>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ea:	2b07      	cmp	r3, #7
 80088ec:	d01a      	beq.n	8008924 <UART_SetConfig+0x68c>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f2:	2b08      	cmp	r3, #8
 80088f4:	d014      	beq.n	8008920 <UART_SetConfig+0x688>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fa:	2b09      	cmp	r3, #9
 80088fc:	d00e      	beq.n	800891c <UART_SetConfig+0x684>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008902:	2b0a      	cmp	r3, #10
 8008904:	d008      	beq.n	8008918 <UART_SetConfig+0x680>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890a:	2b0b      	cmp	r3, #11
 800890c:	d102      	bne.n	8008914 <UART_SetConfig+0x67c>
 800890e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008912:	e020      	b.n	8008956 <UART_SetConfig+0x6be>
 8008914:	2301      	movs	r3, #1
 8008916:	e01e      	b.n	8008956 <UART_SetConfig+0x6be>
 8008918:	2380      	movs	r3, #128	; 0x80
 800891a:	e01c      	b.n	8008956 <UART_SetConfig+0x6be>
 800891c:	2340      	movs	r3, #64	; 0x40
 800891e:	e01a      	b.n	8008956 <UART_SetConfig+0x6be>
 8008920:	2320      	movs	r3, #32
 8008922:	e018      	b.n	8008956 <UART_SetConfig+0x6be>
 8008924:	2310      	movs	r3, #16
 8008926:	e016      	b.n	8008956 <UART_SetConfig+0x6be>
 8008928:	230c      	movs	r3, #12
 800892a:	e014      	b.n	8008956 <UART_SetConfig+0x6be>
 800892c:	230a      	movs	r3, #10
 800892e:	e012      	b.n	8008956 <UART_SetConfig+0x6be>
 8008930:	40011400 	.word	0x40011400
 8008934:	58024400 	.word	0x58024400
 8008938:	40007800 	.word	0x40007800
 800893c:	40007c00 	.word	0x40007c00
 8008940:	58000c00 	.word	0x58000c00
 8008944:	2308      	movs	r3, #8
 8008946:	e006      	b.n	8008956 <UART_SetConfig+0x6be>
 8008948:	2306      	movs	r3, #6
 800894a:	e004      	b.n	8008956 <UART_SetConfig+0x6be>
 800894c:	2304      	movs	r3, #4
 800894e:	e002      	b.n	8008956 <UART_SetConfig+0x6be>
 8008950:	2302      	movs	r3, #2
 8008952:	e000      	b.n	8008956 <UART_SetConfig+0x6be>
 8008954:	2301      	movs	r3, #1
 8008956:	fbb2 f3f3 	udiv	r3, r2, r3
 800895a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800895c:	e219      	b.n	8008d92 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800895e:	f107 0318 	add.w	r3, r7, #24
 8008962:	4618      	mov	r0, r3
 8008964:	f7fd f806 	bl	8005974 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008968:	69fa      	ldr	r2, [r7, #28]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896e:	2b00      	cmp	r3, #0
 8008970:	d044      	beq.n	80089fc <UART_SetConfig+0x764>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008976:	2b01      	cmp	r3, #1
 8008978:	d03e      	beq.n	80089f8 <UART_SetConfig+0x760>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897e:	2b02      	cmp	r3, #2
 8008980:	d038      	beq.n	80089f4 <UART_SetConfig+0x75c>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008986:	2b03      	cmp	r3, #3
 8008988:	d032      	beq.n	80089f0 <UART_SetConfig+0x758>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898e:	2b04      	cmp	r3, #4
 8008990:	d02c      	beq.n	80089ec <UART_SetConfig+0x754>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008996:	2b05      	cmp	r3, #5
 8008998:	d026      	beq.n	80089e8 <UART_SetConfig+0x750>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899e:	2b06      	cmp	r3, #6
 80089a0:	d020      	beq.n	80089e4 <UART_SetConfig+0x74c>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a6:	2b07      	cmp	r3, #7
 80089a8:	d01a      	beq.n	80089e0 <UART_SetConfig+0x748>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ae:	2b08      	cmp	r3, #8
 80089b0:	d014      	beq.n	80089dc <UART_SetConfig+0x744>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b6:	2b09      	cmp	r3, #9
 80089b8:	d00e      	beq.n	80089d8 <UART_SetConfig+0x740>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089be:	2b0a      	cmp	r3, #10
 80089c0:	d008      	beq.n	80089d4 <UART_SetConfig+0x73c>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c6:	2b0b      	cmp	r3, #11
 80089c8:	d102      	bne.n	80089d0 <UART_SetConfig+0x738>
 80089ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089ce:	e016      	b.n	80089fe <UART_SetConfig+0x766>
 80089d0:	2301      	movs	r3, #1
 80089d2:	e014      	b.n	80089fe <UART_SetConfig+0x766>
 80089d4:	2380      	movs	r3, #128	; 0x80
 80089d6:	e012      	b.n	80089fe <UART_SetConfig+0x766>
 80089d8:	2340      	movs	r3, #64	; 0x40
 80089da:	e010      	b.n	80089fe <UART_SetConfig+0x766>
 80089dc:	2320      	movs	r3, #32
 80089de:	e00e      	b.n	80089fe <UART_SetConfig+0x766>
 80089e0:	2310      	movs	r3, #16
 80089e2:	e00c      	b.n	80089fe <UART_SetConfig+0x766>
 80089e4:	230c      	movs	r3, #12
 80089e6:	e00a      	b.n	80089fe <UART_SetConfig+0x766>
 80089e8:	230a      	movs	r3, #10
 80089ea:	e008      	b.n	80089fe <UART_SetConfig+0x766>
 80089ec:	2308      	movs	r3, #8
 80089ee:	e006      	b.n	80089fe <UART_SetConfig+0x766>
 80089f0:	2306      	movs	r3, #6
 80089f2:	e004      	b.n	80089fe <UART_SetConfig+0x766>
 80089f4:	2304      	movs	r3, #4
 80089f6:	e002      	b.n	80089fe <UART_SetConfig+0x766>
 80089f8:	2302      	movs	r3, #2
 80089fa:	e000      	b.n	80089fe <UART_SetConfig+0x766>
 80089fc:	2301      	movs	r3, #1
 80089fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a04:	e1c5      	b.n	8008d92 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a06:	f107 030c 	add.w	r3, r7, #12
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7fd f8fe 	bl	8005c0c <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008a10:	693a      	ldr	r2, [r7, #16]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d044      	beq.n	8008aa4 <UART_SetConfig+0x80c>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d03e      	beq.n	8008aa0 <UART_SetConfig+0x808>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a26:	2b02      	cmp	r3, #2
 8008a28:	d038      	beq.n	8008a9c <UART_SetConfig+0x804>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a2e:	2b03      	cmp	r3, #3
 8008a30:	d032      	beq.n	8008a98 <UART_SetConfig+0x800>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a36:	2b04      	cmp	r3, #4
 8008a38:	d02c      	beq.n	8008a94 <UART_SetConfig+0x7fc>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3e:	2b05      	cmp	r3, #5
 8008a40:	d026      	beq.n	8008a90 <UART_SetConfig+0x7f8>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a46:	2b06      	cmp	r3, #6
 8008a48:	d020      	beq.n	8008a8c <UART_SetConfig+0x7f4>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4e:	2b07      	cmp	r3, #7
 8008a50:	d01a      	beq.n	8008a88 <UART_SetConfig+0x7f0>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a56:	2b08      	cmp	r3, #8
 8008a58:	d014      	beq.n	8008a84 <UART_SetConfig+0x7ec>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5e:	2b09      	cmp	r3, #9
 8008a60:	d00e      	beq.n	8008a80 <UART_SetConfig+0x7e8>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a66:	2b0a      	cmp	r3, #10
 8008a68:	d008      	beq.n	8008a7c <UART_SetConfig+0x7e4>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a6e:	2b0b      	cmp	r3, #11
 8008a70:	d102      	bne.n	8008a78 <UART_SetConfig+0x7e0>
 8008a72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a76:	e016      	b.n	8008aa6 <UART_SetConfig+0x80e>
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e014      	b.n	8008aa6 <UART_SetConfig+0x80e>
 8008a7c:	2380      	movs	r3, #128	; 0x80
 8008a7e:	e012      	b.n	8008aa6 <UART_SetConfig+0x80e>
 8008a80:	2340      	movs	r3, #64	; 0x40
 8008a82:	e010      	b.n	8008aa6 <UART_SetConfig+0x80e>
 8008a84:	2320      	movs	r3, #32
 8008a86:	e00e      	b.n	8008aa6 <UART_SetConfig+0x80e>
 8008a88:	2310      	movs	r3, #16
 8008a8a:	e00c      	b.n	8008aa6 <UART_SetConfig+0x80e>
 8008a8c:	230c      	movs	r3, #12
 8008a8e:	e00a      	b.n	8008aa6 <UART_SetConfig+0x80e>
 8008a90:	230a      	movs	r3, #10
 8008a92:	e008      	b.n	8008aa6 <UART_SetConfig+0x80e>
 8008a94:	2308      	movs	r3, #8
 8008a96:	e006      	b.n	8008aa6 <UART_SetConfig+0x80e>
 8008a98:	2306      	movs	r3, #6
 8008a9a:	e004      	b.n	8008aa6 <UART_SetConfig+0x80e>
 8008a9c:	2304      	movs	r3, #4
 8008a9e:	e002      	b.n	8008aa6 <UART_SetConfig+0x80e>
 8008aa0:	2302      	movs	r3, #2
 8008aa2:	e000      	b.n	8008aa6 <UART_SetConfig+0x80e>
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008aac:	e171      	b.n	8008d92 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008aae:	4b7a      	ldr	r3, [pc, #488]	; (8008c98 <UART_SetConfig+0xa00>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f003 0320 	and.w	r3, r3, #32
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d054      	beq.n	8008b64 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008aba:	4b77      	ldr	r3, [pc, #476]	; (8008c98 <UART_SetConfig+0xa00>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	08db      	lsrs	r3, r3, #3
 8008ac0:	f003 0303 	and.w	r3, r3, #3
 8008ac4:	4a75      	ldr	r2, [pc, #468]	; (8008c9c <UART_SetConfig+0xa04>)
 8008ac6:	40da      	lsrs	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d044      	beq.n	8008b5a <UART_SetConfig+0x8c2>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d03e      	beq.n	8008b56 <UART_SetConfig+0x8be>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	d038      	beq.n	8008b52 <UART_SetConfig+0x8ba>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae4:	2b03      	cmp	r3, #3
 8008ae6:	d032      	beq.n	8008b4e <UART_SetConfig+0x8b6>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aec:	2b04      	cmp	r3, #4
 8008aee:	d02c      	beq.n	8008b4a <UART_SetConfig+0x8b2>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af4:	2b05      	cmp	r3, #5
 8008af6:	d026      	beq.n	8008b46 <UART_SetConfig+0x8ae>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afc:	2b06      	cmp	r3, #6
 8008afe:	d020      	beq.n	8008b42 <UART_SetConfig+0x8aa>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b04:	2b07      	cmp	r3, #7
 8008b06:	d01a      	beq.n	8008b3e <UART_SetConfig+0x8a6>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0c:	2b08      	cmp	r3, #8
 8008b0e:	d014      	beq.n	8008b3a <UART_SetConfig+0x8a2>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b14:	2b09      	cmp	r3, #9
 8008b16:	d00e      	beq.n	8008b36 <UART_SetConfig+0x89e>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1c:	2b0a      	cmp	r3, #10
 8008b1e:	d008      	beq.n	8008b32 <UART_SetConfig+0x89a>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b24:	2b0b      	cmp	r3, #11
 8008b26:	d102      	bne.n	8008b2e <UART_SetConfig+0x896>
 8008b28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b2c:	e016      	b.n	8008b5c <UART_SetConfig+0x8c4>
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e014      	b.n	8008b5c <UART_SetConfig+0x8c4>
 8008b32:	2380      	movs	r3, #128	; 0x80
 8008b34:	e012      	b.n	8008b5c <UART_SetConfig+0x8c4>
 8008b36:	2340      	movs	r3, #64	; 0x40
 8008b38:	e010      	b.n	8008b5c <UART_SetConfig+0x8c4>
 8008b3a:	2320      	movs	r3, #32
 8008b3c:	e00e      	b.n	8008b5c <UART_SetConfig+0x8c4>
 8008b3e:	2310      	movs	r3, #16
 8008b40:	e00c      	b.n	8008b5c <UART_SetConfig+0x8c4>
 8008b42:	230c      	movs	r3, #12
 8008b44:	e00a      	b.n	8008b5c <UART_SetConfig+0x8c4>
 8008b46:	230a      	movs	r3, #10
 8008b48:	e008      	b.n	8008b5c <UART_SetConfig+0x8c4>
 8008b4a:	2308      	movs	r3, #8
 8008b4c:	e006      	b.n	8008b5c <UART_SetConfig+0x8c4>
 8008b4e:	2306      	movs	r3, #6
 8008b50:	e004      	b.n	8008b5c <UART_SetConfig+0x8c4>
 8008b52:	2304      	movs	r3, #4
 8008b54:	e002      	b.n	8008b5c <UART_SetConfig+0x8c4>
 8008b56:	2302      	movs	r3, #2
 8008b58:	e000      	b.n	8008b5c <UART_SetConfig+0x8c4>
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b60:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8008b62:	e116      	b.n	8008d92 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d043      	beq.n	8008bf4 <UART_SetConfig+0x95c>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d03d      	beq.n	8008bf0 <UART_SetConfig+0x958>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b78:	2b02      	cmp	r3, #2
 8008b7a:	d037      	beq.n	8008bec <UART_SetConfig+0x954>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b80:	2b03      	cmp	r3, #3
 8008b82:	d031      	beq.n	8008be8 <UART_SetConfig+0x950>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b88:	2b04      	cmp	r3, #4
 8008b8a:	d02b      	beq.n	8008be4 <UART_SetConfig+0x94c>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b90:	2b05      	cmp	r3, #5
 8008b92:	d025      	beq.n	8008be0 <UART_SetConfig+0x948>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b98:	2b06      	cmp	r3, #6
 8008b9a:	d01f      	beq.n	8008bdc <UART_SetConfig+0x944>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba0:	2b07      	cmp	r3, #7
 8008ba2:	d019      	beq.n	8008bd8 <UART_SetConfig+0x940>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba8:	2b08      	cmp	r3, #8
 8008baa:	d013      	beq.n	8008bd4 <UART_SetConfig+0x93c>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb0:	2b09      	cmp	r3, #9
 8008bb2:	d00d      	beq.n	8008bd0 <UART_SetConfig+0x938>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb8:	2b0a      	cmp	r3, #10
 8008bba:	d007      	beq.n	8008bcc <UART_SetConfig+0x934>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc0:	2b0b      	cmp	r3, #11
 8008bc2:	d101      	bne.n	8008bc8 <UART_SetConfig+0x930>
 8008bc4:	4b36      	ldr	r3, [pc, #216]	; (8008ca0 <UART_SetConfig+0xa08>)
 8008bc6:	e016      	b.n	8008bf6 <UART_SetConfig+0x95e>
 8008bc8:	4b34      	ldr	r3, [pc, #208]	; (8008c9c <UART_SetConfig+0xa04>)
 8008bca:	e014      	b.n	8008bf6 <UART_SetConfig+0x95e>
 8008bcc:	4b35      	ldr	r3, [pc, #212]	; (8008ca4 <UART_SetConfig+0xa0c>)
 8008bce:	e012      	b.n	8008bf6 <UART_SetConfig+0x95e>
 8008bd0:	4b35      	ldr	r3, [pc, #212]	; (8008ca8 <UART_SetConfig+0xa10>)
 8008bd2:	e010      	b.n	8008bf6 <UART_SetConfig+0x95e>
 8008bd4:	4b35      	ldr	r3, [pc, #212]	; (8008cac <UART_SetConfig+0xa14>)
 8008bd6:	e00e      	b.n	8008bf6 <UART_SetConfig+0x95e>
 8008bd8:	4b35      	ldr	r3, [pc, #212]	; (8008cb0 <UART_SetConfig+0xa18>)
 8008bda:	e00c      	b.n	8008bf6 <UART_SetConfig+0x95e>
 8008bdc:	4b35      	ldr	r3, [pc, #212]	; (8008cb4 <UART_SetConfig+0xa1c>)
 8008bde:	e00a      	b.n	8008bf6 <UART_SetConfig+0x95e>
 8008be0:	4b35      	ldr	r3, [pc, #212]	; (8008cb8 <UART_SetConfig+0xa20>)
 8008be2:	e008      	b.n	8008bf6 <UART_SetConfig+0x95e>
 8008be4:	4b35      	ldr	r3, [pc, #212]	; (8008cbc <UART_SetConfig+0xa24>)
 8008be6:	e006      	b.n	8008bf6 <UART_SetConfig+0x95e>
 8008be8:	4b35      	ldr	r3, [pc, #212]	; (8008cc0 <UART_SetConfig+0xa28>)
 8008bea:	e004      	b.n	8008bf6 <UART_SetConfig+0x95e>
 8008bec:	4b35      	ldr	r3, [pc, #212]	; (8008cc4 <UART_SetConfig+0xa2c>)
 8008bee:	e002      	b.n	8008bf6 <UART_SetConfig+0x95e>
 8008bf0:	4b35      	ldr	r3, [pc, #212]	; (8008cc8 <UART_SetConfig+0xa30>)
 8008bf2:	e000      	b.n	8008bf6 <UART_SetConfig+0x95e>
 8008bf4:	4b29      	ldr	r3, [pc, #164]	; (8008c9c <UART_SetConfig+0xa04>)
 8008bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008bf8:	e0cb      	b.n	8008d92 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d046      	beq.n	8008c90 <UART_SetConfig+0x9f8>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d040      	beq.n	8008c8c <UART_SetConfig+0x9f4>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	d03a      	beq.n	8008c88 <UART_SetConfig+0x9f0>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c16:	2b03      	cmp	r3, #3
 8008c18:	d034      	beq.n	8008c84 <UART_SetConfig+0x9ec>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1e:	2b04      	cmp	r3, #4
 8008c20:	d02e      	beq.n	8008c80 <UART_SetConfig+0x9e8>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c26:	2b05      	cmp	r3, #5
 8008c28:	d028      	beq.n	8008c7c <UART_SetConfig+0x9e4>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2e:	2b06      	cmp	r3, #6
 8008c30:	d022      	beq.n	8008c78 <UART_SetConfig+0x9e0>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c36:	2b07      	cmp	r3, #7
 8008c38:	d01c      	beq.n	8008c74 <UART_SetConfig+0x9dc>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c3e:	2b08      	cmp	r3, #8
 8008c40:	d016      	beq.n	8008c70 <UART_SetConfig+0x9d8>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c46:	2b09      	cmp	r3, #9
 8008c48:	d00f      	beq.n	8008c6a <UART_SetConfig+0x9d2>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4e:	2b0a      	cmp	r3, #10
 8008c50:	d008      	beq.n	8008c64 <UART_SetConfig+0x9cc>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c56:	2b0b      	cmp	r3, #11
 8008c58:	d102      	bne.n	8008c60 <UART_SetConfig+0x9c8>
 8008c5a:	f643 5309 	movw	r3, #15625	; 0x3d09
 8008c5e:	e018      	b.n	8008c92 <UART_SetConfig+0x9fa>
 8008c60:	4b13      	ldr	r3, [pc, #76]	; (8008cb0 <UART_SetConfig+0xa18>)
 8008c62:	e016      	b.n	8008c92 <UART_SetConfig+0x9fa>
 8008c64:	f647 2312 	movw	r3, #31250	; 0x7a12
 8008c68:	e013      	b.n	8008c92 <UART_SetConfig+0x9fa>
 8008c6a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008c6e:	e010      	b.n	8008c92 <UART_SetConfig+0x9fa>
 8008c70:	4b16      	ldr	r3, [pc, #88]	; (8008ccc <UART_SetConfig+0xa34>)
 8008c72:	e00e      	b.n	8008c92 <UART_SetConfig+0x9fa>
 8008c74:	4b0a      	ldr	r3, [pc, #40]	; (8008ca0 <UART_SetConfig+0xa08>)
 8008c76:	e00c      	b.n	8008c92 <UART_SetConfig+0x9fa>
 8008c78:	4b15      	ldr	r3, [pc, #84]	; (8008cd0 <UART_SetConfig+0xa38>)
 8008c7a:	e00a      	b.n	8008c92 <UART_SetConfig+0x9fa>
 8008c7c:	4b15      	ldr	r3, [pc, #84]	; (8008cd4 <UART_SetConfig+0xa3c>)
 8008c7e:	e008      	b.n	8008c92 <UART_SetConfig+0x9fa>
 8008c80:	4b08      	ldr	r3, [pc, #32]	; (8008ca4 <UART_SetConfig+0xa0c>)
 8008c82:	e006      	b.n	8008c92 <UART_SetConfig+0x9fa>
 8008c84:	4b14      	ldr	r3, [pc, #80]	; (8008cd8 <UART_SetConfig+0xa40>)
 8008c86:	e004      	b.n	8008c92 <UART_SetConfig+0x9fa>
 8008c88:	4b07      	ldr	r3, [pc, #28]	; (8008ca8 <UART_SetConfig+0xa10>)
 8008c8a:	e002      	b.n	8008c92 <UART_SetConfig+0x9fa>
 8008c8c:	4b07      	ldr	r3, [pc, #28]	; (8008cac <UART_SetConfig+0xa14>)
 8008c8e:	e000      	b.n	8008c92 <UART_SetConfig+0x9fa>
 8008c90:	4b07      	ldr	r3, [pc, #28]	; (8008cb0 <UART_SetConfig+0xa18>)
 8008c92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c94:	e07d      	b.n	8008d92 <UART_SetConfig+0xafa>
 8008c96:	bf00      	nop
 8008c98:	58024400 	.word	0x58024400
 8008c9c:	03d09000 	.word	0x03d09000
 8008ca0:	0003d090 	.word	0x0003d090
 8008ca4:	0007a120 	.word	0x0007a120
 8008ca8:	000f4240 	.word	0x000f4240
 8008cac:	001e8480 	.word	0x001e8480
 8008cb0:	003d0900 	.word	0x003d0900
 8008cb4:	00516155 	.word	0x00516155
 8008cb8:	0061a800 	.word	0x0061a800
 8008cbc:	007a1200 	.word	0x007a1200
 8008cc0:	00a2c2aa 	.word	0x00a2c2aa
 8008cc4:	00f42400 	.word	0x00f42400
 8008cc8:	01e84800 	.word	0x01e84800
 8008ccc:	0001e848 	.word	0x0001e848
 8008cd0:	00051615 	.word	0x00051615
 8008cd4:	00061a80 	.word	0x00061a80
 8008cd8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d04e      	beq.n	8008d82 <UART_SetConfig+0xaea>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d047      	beq.n	8008d7c <UART_SetConfig+0xae4>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf0:	2b02      	cmp	r3, #2
 8008cf2:	d040      	beq.n	8008d76 <UART_SetConfig+0xade>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf8:	2b03      	cmp	r3, #3
 8008cfa:	d039      	beq.n	8008d70 <UART_SetConfig+0xad8>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d00:	2b04      	cmp	r3, #4
 8008d02:	d032      	beq.n	8008d6a <UART_SetConfig+0xad2>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d08:	2b05      	cmp	r3, #5
 8008d0a:	d02b      	beq.n	8008d64 <UART_SetConfig+0xacc>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d10:	2b06      	cmp	r3, #6
 8008d12:	d024      	beq.n	8008d5e <UART_SetConfig+0xac6>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d18:	2b07      	cmp	r3, #7
 8008d1a:	d01d      	beq.n	8008d58 <UART_SetConfig+0xac0>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d20:	2b08      	cmp	r3, #8
 8008d22:	d016      	beq.n	8008d52 <UART_SetConfig+0xaba>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d28:	2b09      	cmp	r3, #9
 8008d2a:	d00f      	beq.n	8008d4c <UART_SetConfig+0xab4>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d30:	2b0a      	cmp	r3, #10
 8008d32:	d008      	beq.n	8008d46 <UART_SetConfig+0xaae>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d38:	2b0b      	cmp	r3, #11
 8008d3a:	d101      	bne.n	8008d40 <UART_SetConfig+0xaa8>
 8008d3c:	2380      	movs	r3, #128	; 0x80
 8008d3e:	e022      	b.n	8008d86 <UART_SetConfig+0xaee>
 8008d40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d44:	e01f      	b.n	8008d86 <UART_SetConfig+0xaee>
 8008d46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d4a:	e01c      	b.n	8008d86 <UART_SetConfig+0xaee>
 8008d4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d50:	e019      	b.n	8008d86 <UART_SetConfig+0xaee>
 8008d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d56:	e016      	b.n	8008d86 <UART_SetConfig+0xaee>
 8008d58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d5c:	e013      	b.n	8008d86 <UART_SetConfig+0xaee>
 8008d5e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8008d62:	e010      	b.n	8008d86 <UART_SetConfig+0xaee>
 8008d64:	f640 43cc 	movw	r3, #3276	; 0xccc
 8008d68:	e00d      	b.n	8008d86 <UART_SetConfig+0xaee>
 8008d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d6e:	e00a      	b.n	8008d86 <UART_SetConfig+0xaee>
 8008d70:	f241 5355 	movw	r3, #5461	; 0x1555
 8008d74:	e007      	b.n	8008d86 <UART_SetConfig+0xaee>
 8008d76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008d7a:	e004      	b.n	8008d86 <UART_SetConfig+0xaee>
 8008d7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008d80:	e001      	b.n	8008d86 <UART_SetConfig+0xaee>
 8008d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008d88:	e003      	b.n	8008d92 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8008d90:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8008d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	f001 83e8 	beq.w	800a56a <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	685a      	ldr	r2, [r3, #4]
 8008d9e:	4613      	mov	r3, r2
 8008da0:	005b      	lsls	r3, r3, #1
 8008da2:	4413      	add	r3, r2
 8008da4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d305      	bcc.n	8008db6 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008db0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d904      	bls.n	8008dc0 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dbc:	f001 bbd5 	b.w	800a56a <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8008dc0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008dc4:	2b08      	cmp	r3, #8
 8008dc6:	f000 8154 	beq.w	8009072 <UART_SetConfig+0xdda>
 8008dca:	2b08      	cmp	r3, #8
 8008dcc:	dc06      	bgt.n	8008ddc <UART_SetConfig+0xb44>
 8008dce:	2b02      	cmp	r3, #2
 8008dd0:	d00f      	beq.n	8008df2 <UART_SetConfig+0xb5a>
 8008dd2:	2b04      	cmp	r3, #4
 8008dd4:	f000 80ac 	beq.w	8008f30 <UART_SetConfig+0xc98>
 8008dd8:	f000 bc30 	b.w	800963c <UART_SetConfig+0x13a4>
 8008ddc:	2b20      	cmp	r3, #32
 8008dde:	f000 832d 	beq.w	800943c <UART_SetConfig+0x11a4>
 8008de2:	2b40      	cmp	r3, #64	; 0x40
 8008de4:	f000 83a5 	beq.w	8009532 <UART_SetConfig+0x129a>
 8008de8:	2b10      	cmp	r3, #16
 8008dea:	f000 81e3 	beq.w	80091b4 <UART_SetConfig+0xf1c>
 8008dee:	f000 bc25 	b.w	800963c <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008df2:	f7fc fda9 	bl	8005948 <HAL_RCCEx_GetD3PCLK1Freq>
 8008df6:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f04f 0100 	mov.w	r1, #0
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d067      	beq.n	8008ed8 <UART_SetConfig+0xc40>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d05e      	beq.n	8008ece <UART_SetConfig+0xc36>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e14:	2b02      	cmp	r3, #2
 8008e16:	d055      	beq.n	8008ec4 <UART_SetConfig+0xc2c>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1c:	2b03      	cmp	r3, #3
 8008e1e:	d04c      	beq.n	8008eba <UART_SetConfig+0xc22>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e24:	2b04      	cmp	r3, #4
 8008e26:	d043      	beq.n	8008eb0 <UART_SetConfig+0xc18>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2c:	2b05      	cmp	r3, #5
 8008e2e:	d03a      	beq.n	8008ea6 <UART_SetConfig+0xc0e>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e34:	2b06      	cmp	r3, #6
 8008e36:	d031      	beq.n	8008e9c <UART_SetConfig+0xc04>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3c:	2b07      	cmp	r3, #7
 8008e3e:	d028      	beq.n	8008e92 <UART_SetConfig+0xbfa>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e44:	2b08      	cmp	r3, #8
 8008e46:	d01f      	beq.n	8008e88 <UART_SetConfig+0xbf0>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4c:	2b09      	cmp	r3, #9
 8008e4e:	d016      	beq.n	8008e7e <UART_SetConfig+0xbe6>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e54:	2b0a      	cmp	r3, #10
 8008e56:	d00d      	beq.n	8008e74 <UART_SetConfig+0xbdc>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5c:	2b0b      	cmp	r3, #11
 8008e5e:	d104      	bne.n	8008e6a <UART_SetConfig+0xbd2>
 8008e60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e64:	f04f 0400 	mov.w	r4, #0
 8008e68:	e03a      	b.n	8008ee0 <UART_SetConfig+0xc48>
 8008e6a:	f04f 0301 	mov.w	r3, #1
 8008e6e:	f04f 0400 	mov.w	r4, #0
 8008e72:	e035      	b.n	8008ee0 <UART_SetConfig+0xc48>
 8008e74:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008e78:	f04f 0400 	mov.w	r4, #0
 8008e7c:	e030      	b.n	8008ee0 <UART_SetConfig+0xc48>
 8008e7e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008e82:	f04f 0400 	mov.w	r4, #0
 8008e86:	e02b      	b.n	8008ee0 <UART_SetConfig+0xc48>
 8008e88:	f04f 0320 	mov.w	r3, #32
 8008e8c:	f04f 0400 	mov.w	r4, #0
 8008e90:	e026      	b.n	8008ee0 <UART_SetConfig+0xc48>
 8008e92:	f04f 0310 	mov.w	r3, #16
 8008e96:	f04f 0400 	mov.w	r4, #0
 8008e9a:	e021      	b.n	8008ee0 <UART_SetConfig+0xc48>
 8008e9c:	f04f 030c 	mov.w	r3, #12
 8008ea0:	f04f 0400 	mov.w	r4, #0
 8008ea4:	e01c      	b.n	8008ee0 <UART_SetConfig+0xc48>
 8008ea6:	f04f 030a 	mov.w	r3, #10
 8008eaa:	f04f 0400 	mov.w	r4, #0
 8008eae:	e017      	b.n	8008ee0 <UART_SetConfig+0xc48>
 8008eb0:	f04f 0308 	mov.w	r3, #8
 8008eb4:	f04f 0400 	mov.w	r4, #0
 8008eb8:	e012      	b.n	8008ee0 <UART_SetConfig+0xc48>
 8008eba:	f04f 0306 	mov.w	r3, #6
 8008ebe:	f04f 0400 	mov.w	r4, #0
 8008ec2:	e00d      	b.n	8008ee0 <UART_SetConfig+0xc48>
 8008ec4:	f04f 0304 	mov.w	r3, #4
 8008ec8:	f04f 0400 	mov.w	r4, #0
 8008ecc:	e008      	b.n	8008ee0 <UART_SetConfig+0xc48>
 8008ece:	f04f 0302 	mov.w	r3, #2
 8008ed2:	f04f 0400 	mov.w	r4, #0
 8008ed6:	e003      	b.n	8008ee0 <UART_SetConfig+0xc48>
 8008ed8:	f04f 0301 	mov.w	r3, #1
 8008edc:	f04f 0400 	mov.w	r4, #0
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	4623      	mov	r3, r4
 8008ee4:	f7f7 f9f8 	bl	80002d8 <__aeabi_uldivmod>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	460c      	mov	r4, r1
 8008eec:	4619      	mov	r1, r3
 8008eee:	4622      	mov	r2, r4
 8008ef0:	f04f 0300 	mov.w	r3, #0
 8008ef4:	f04f 0400 	mov.w	r4, #0
 8008ef8:	0214      	lsls	r4, r2, #8
 8008efa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008efe:	020b      	lsls	r3, r1, #8
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	6852      	ldr	r2, [r2, #4]
 8008f04:	0852      	lsrs	r2, r2, #1
 8008f06:	4611      	mov	r1, r2
 8008f08:	f04f 0200 	mov.w	r2, #0
 8008f0c:	eb13 0b01 	adds.w	fp, r3, r1
 8008f10:	eb44 0c02 	adc.w	ip, r4, r2
 8008f14:	4658      	mov	r0, fp
 8008f16:	4661      	mov	r1, ip
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	f04f 0400 	mov.w	r4, #0
 8008f20:	461a      	mov	r2, r3
 8008f22:	4623      	mov	r3, r4
 8008f24:	f7f7 f9d8 	bl	80002d8 <__aeabi_uldivmod>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	460c      	mov	r4, r1
 8008f2c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008f2e:	e389      	b.n	8009644 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f30:	f107 0318 	add.w	r3, r7, #24
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7fc fd1d 	bl	8005974 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f3a:	69fb      	ldr	r3, [r7, #28]
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f04f 0100 	mov.w	r1, #0
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d067      	beq.n	800901a <UART_SetConfig+0xd82>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d05e      	beq.n	8009010 <UART_SetConfig+0xd78>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	d055      	beq.n	8009006 <UART_SetConfig+0xd6e>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5e:	2b03      	cmp	r3, #3
 8008f60:	d04c      	beq.n	8008ffc <UART_SetConfig+0xd64>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f66:	2b04      	cmp	r3, #4
 8008f68:	d043      	beq.n	8008ff2 <UART_SetConfig+0xd5a>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6e:	2b05      	cmp	r3, #5
 8008f70:	d03a      	beq.n	8008fe8 <UART_SetConfig+0xd50>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f76:	2b06      	cmp	r3, #6
 8008f78:	d031      	beq.n	8008fde <UART_SetConfig+0xd46>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7e:	2b07      	cmp	r3, #7
 8008f80:	d028      	beq.n	8008fd4 <UART_SetConfig+0xd3c>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f86:	2b08      	cmp	r3, #8
 8008f88:	d01f      	beq.n	8008fca <UART_SetConfig+0xd32>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8e:	2b09      	cmp	r3, #9
 8008f90:	d016      	beq.n	8008fc0 <UART_SetConfig+0xd28>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f96:	2b0a      	cmp	r3, #10
 8008f98:	d00d      	beq.n	8008fb6 <UART_SetConfig+0xd1e>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9e:	2b0b      	cmp	r3, #11
 8008fa0:	d104      	bne.n	8008fac <UART_SetConfig+0xd14>
 8008fa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fa6:	f04f 0400 	mov.w	r4, #0
 8008faa:	e03a      	b.n	8009022 <UART_SetConfig+0xd8a>
 8008fac:	f04f 0301 	mov.w	r3, #1
 8008fb0:	f04f 0400 	mov.w	r4, #0
 8008fb4:	e035      	b.n	8009022 <UART_SetConfig+0xd8a>
 8008fb6:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008fba:	f04f 0400 	mov.w	r4, #0
 8008fbe:	e030      	b.n	8009022 <UART_SetConfig+0xd8a>
 8008fc0:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008fc4:	f04f 0400 	mov.w	r4, #0
 8008fc8:	e02b      	b.n	8009022 <UART_SetConfig+0xd8a>
 8008fca:	f04f 0320 	mov.w	r3, #32
 8008fce:	f04f 0400 	mov.w	r4, #0
 8008fd2:	e026      	b.n	8009022 <UART_SetConfig+0xd8a>
 8008fd4:	f04f 0310 	mov.w	r3, #16
 8008fd8:	f04f 0400 	mov.w	r4, #0
 8008fdc:	e021      	b.n	8009022 <UART_SetConfig+0xd8a>
 8008fde:	f04f 030c 	mov.w	r3, #12
 8008fe2:	f04f 0400 	mov.w	r4, #0
 8008fe6:	e01c      	b.n	8009022 <UART_SetConfig+0xd8a>
 8008fe8:	f04f 030a 	mov.w	r3, #10
 8008fec:	f04f 0400 	mov.w	r4, #0
 8008ff0:	e017      	b.n	8009022 <UART_SetConfig+0xd8a>
 8008ff2:	f04f 0308 	mov.w	r3, #8
 8008ff6:	f04f 0400 	mov.w	r4, #0
 8008ffa:	e012      	b.n	8009022 <UART_SetConfig+0xd8a>
 8008ffc:	f04f 0306 	mov.w	r3, #6
 8009000:	f04f 0400 	mov.w	r4, #0
 8009004:	e00d      	b.n	8009022 <UART_SetConfig+0xd8a>
 8009006:	f04f 0304 	mov.w	r3, #4
 800900a:	f04f 0400 	mov.w	r4, #0
 800900e:	e008      	b.n	8009022 <UART_SetConfig+0xd8a>
 8009010:	f04f 0302 	mov.w	r3, #2
 8009014:	f04f 0400 	mov.w	r4, #0
 8009018:	e003      	b.n	8009022 <UART_SetConfig+0xd8a>
 800901a:	f04f 0301 	mov.w	r3, #1
 800901e:	f04f 0400 	mov.w	r4, #0
 8009022:	461a      	mov	r2, r3
 8009024:	4623      	mov	r3, r4
 8009026:	f7f7 f957 	bl	80002d8 <__aeabi_uldivmod>
 800902a:	4603      	mov	r3, r0
 800902c:	460c      	mov	r4, r1
 800902e:	4619      	mov	r1, r3
 8009030:	4622      	mov	r2, r4
 8009032:	f04f 0300 	mov.w	r3, #0
 8009036:	f04f 0400 	mov.w	r4, #0
 800903a:	0214      	lsls	r4, r2, #8
 800903c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009040:	020b      	lsls	r3, r1, #8
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	6852      	ldr	r2, [r2, #4]
 8009046:	0852      	lsrs	r2, r2, #1
 8009048:	4611      	mov	r1, r2
 800904a:	f04f 0200 	mov.w	r2, #0
 800904e:	eb13 0b01 	adds.w	fp, r3, r1
 8009052:	eb44 0c02 	adc.w	ip, r4, r2
 8009056:	4658      	mov	r0, fp
 8009058:	4661      	mov	r1, ip
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	f04f 0400 	mov.w	r4, #0
 8009062:	461a      	mov	r2, r3
 8009064:	4623      	mov	r3, r4
 8009066:	f7f7 f937 	bl	80002d8 <__aeabi_uldivmod>
 800906a:	4603      	mov	r3, r0
 800906c:	460c      	mov	r4, r1
 800906e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009070:	e2e8      	b.n	8009644 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009072:	f107 030c 	add.w	r3, r7, #12
 8009076:	4618      	mov	r0, r3
 8009078:	f7fc fdc8 	bl	8005c0c <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	4618      	mov	r0, r3
 8009080:	f04f 0100 	mov.w	r1, #0
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009088:	2b00      	cmp	r3, #0
 800908a:	d067      	beq.n	800915c <UART_SetConfig+0xec4>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009090:	2b01      	cmp	r3, #1
 8009092:	d05e      	beq.n	8009152 <UART_SetConfig+0xeba>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009098:	2b02      	cmp	r3, #2
 800909a:	d055      	beq.n	8009148 <UART_SetConfig+0xeb0>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a0:	2b03      	cmp	r3, #3
 80090a2:	d04c      	beq.n	800913e <UART_SetConfig+0xea6>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a8:	2b04      	cmp	r3, #4
 80090aa:	d043      	beq.n	8009134 <UART_SetConfig+0xe9c>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b0:	2b05      	cmp	r3, #5
 80090b2:	d03a      	beq.n	800912a <UART_SetConfig+0xe92>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b8:	2b06      	cmp	r3, #6
 80090ba:	d031      	beq.n	8009120 <UART_SetConfig+0xe88>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c0:	2b07      	cmp	r3, #7
 80090c2:	d028      	beq.n	8009116 <UART_SetConfig+0xe7e>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c8:	2b08      	cmp	r3, #8
 80090ca:	d01f      	beq.n	800910c <UART_SetConfig+0xe74>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d0:	2b09      	cmp	r3, #9
 80090d2:	d016      	beq.n	8009102 <UART_SetConfig+0xe6a>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d8:	2b0a      	cmp	r3, #10
 80090da:	d00d      	beq.n	80090f8 <UART_SetConfig+0xe60>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e0:	2b0b      	cmp	r3, #11
 80090e2:	d104      	bne.n	80090ee <UART_SetConfig+0xe56>
 80090e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090e8:	f04f 0400 	mov.w	r4, #0
 80090ec:	e03a      	b.n	8009164 <UART_SetConfig+0xecc>
 80090ee:	f04f 0301 	mov.w	r3, #1
 80090f2:	f04f 0400 	mov.w	r4, #0
 80090f6:	e035      	b.n	8009164 <UART_SetConfig+0xecc>
 80090f8:	f04f 0380 	mov.w	r3, #128	; 0x80
 80090fc:	f04f 0400 	mov.w	r4, #0
 8009100:	e030      	b.n	8009164 <UART_SetConfig+0xecc>
 8009102:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009106:	f04f 0400 	mov.w	r4, #0
 800910a:	e02b      	b.n	8009164 <UART_SetConfig+0xecc>
 800910c:	f04f 0320 	mov.w	r3, #32
 8009110:	f04f 0400 	mov.w	r4, #0
 8009114:	e026      	b.n	8009164 <UART_SetConfig+0xecc>
 8009116:	f04f 0310 	mov.w	r3, #16
 800911a:	f04f 0400 	mov.w	r4, #0
 800911e:	e021      	b.n	8009164 <UART_SetConfig+0xecc>
 8009120:	f04f 030c 	mov.w	r3, #12
 8009124:	f04f 0400 	mov.w	r4, #0
 8009128:	e01c      	b.n	8009164 <UART_SetConfig+0xecc>
 800912a:	f04f 030a 	mov.w	r3, #10
 800912e:	f04f 0400 	mov.w	r4, #0
 8009132:	e017      	b.n	8009164 <UART_SetConfig+0xecc>
 8009134:	f04f 0308 	mov.w	r3, #8
 8009138:	f04f 0400 	mov.w	r4, #0
 800913c:	e012      	b.n	8009164 <UART_SetConfig+0xecc>
 800913e:	f04f 0306 	mov.w	r3, #6
 8009142:	f04f 0400 	mov.w	r4, #0
 8009146:	e00d      	b.n	8009164 <UART_SetConfig+0xecc>
 8009148:	f04f 0304 	mov.w	r3, #4
 800914c:	f04f 0400 	mov.w	r4, #0
 8009150:	e008      	b.n	8009164 <UART_SetConfig+0xecc>
 8009152:	f04f 0302 	mov.w	r3, #2
 8009156:	f04f 0400 	mov.w	r4, #0
 800915a:	e003      	b.n	8009164 <UART_SetConfig+0xecc>
 800915c:	f04f 0301 	mov.w	r3, #1
 8009160:	f04f 0400 	mov.w	r4, #0
 8009164:	461a      	mov	r2, r3
 8009166:	4623      	mov	r3, r4
 8009168:	f7f7 f8b6 	bl	80002d8 <__aeabi_uldivmod>
 800916c:	4603      	mov	r3, r0
 800916e:	460c      	mov	r4, r1
 8009170:	4619      	mov	r1, r3
 8009172:	4622      	mov	r2, r4
 8009174:	f04f 0300 	mov.w	r3, #0
 8009178:	f04f 0400 	mov.w	r4, #0
 800917c:	0214      	lsls	r4, r2, #8
 800917e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009182:	020b      	lsls	r3, r1, #8
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	6852      	ldr	r2, [r2, #4]
 8009188:	0852      	lsrs	r2, r2, #1
 800918a:	4611      	mov	r1, r2
 800918c:	f04f 0200 	mov.w	r2, #0
 8009190:	eb13 0b01 	adds.w	fp, r3, r1
 8009194:	eb44 0c02 	adc.w	ip, r4, r2
 8009198:	4658      	mov	r0, fp
 800919a:	4661      	mov	r1, ip
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	f04f 0400 	mov.w	r4, #0
 80091a4:	461a      	mov	r2, r3
 80091a6:	4623      	mov	r3, r4
 80091a8:	f7f7 f896 	bl	80002d8 <__aeabi_uldivmod>
 80091ac:	4603      	mov	r3, r0
 80091ae:	460c      	mov	r4, r1
 80091b0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80091b2:	e247      	b.n	8009644 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091b4:	4b96      	ldr	r3, [pc, #600]	; (8009410 <UART_SetConfig+0x1178>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f003 0320 	and.w	r3, r3, #32
 80091bc:	2b00      	cmp	r3, #0
 80091be:	f000 80a3 	beq.w	8009308 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091c2:	4b93      	ldr	r3, [pc, #588]	; (8009410 <UART_SetConfig+0x1178>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	08db      	lsrs	r3, r3, #3
 80091c8:	f003 0303 	and.w	r3, r3, #3
 80091cc:	4a91      	ldr	r2, [pc, #580]	; (8009414 <UART_SetConfig+0x117c>)
 80091ce:	fa22 f303 	lsr.w	r3, r2, r3
 80091d2:	4618      	mov	r0, r3
 80091d4:	f04f 0100 	mov.w	r1, #0
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d067      	beq.n	80092b0 <UART_SetConfig+0x1018>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d05e      	beq.n	80092a6 <UART_SetConfig+0x100e>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ec:	2b02      	cmp	r3, #2
 80091ee:	d055      	beq.n	800929c <UART_SetConfig+0x1004>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f4:	2b03      	cmp	r3, #3
 80091f6:	d04c      	beq.n	8009292 <UART_SetConfig+0xffa>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fc:	2b04      	cmp	r3, #4
 80091fe:	d043      	beq.n	8009288 <UART_SetConfig+0xff0>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009204:	2b05      	cmp	r3, #5
 8009206:	d03a      	beq.n	800927e <UART_SetConfig+0xfe6>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800920c:	2b06      	cmp	r3, #6
 800920e:	d031      	beq.n	8009274 <UART_SetConfig+0xfdc>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009214:	2b07      	cmp	r3, #7
 8009216:	d028      	beq.n	800926a <UART_SetConfig+0xfd2>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800921c:	2b08      	cmp	r3, #8
 800921e:	d01f      	beq.n	8009260 <UART_SetConfig+0xfc8>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009224:	2b09      	cmp	r3, #9
 8009226:	d016      	beq.n	8009256 <UART_SetConfig+0xfbe>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922c:	2b0a      	cmp	r3, #10
 800922e:	d00d      	beq.n	800924c <UART_SetConfig+0xfb4>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009234:	2b0b      	cmp	r3, #11
 8009236:	d104      	bne.n	8009242 <UART_SetConfig+0xfaa>
 8009238:	f44f 7380 	mov.w	r3, #256	; 0x100
 800923c:	f04f 0400 	mov.w	r4, #0
 8009240:	e03a      	b.n	80092b8 <UART_SetConfig+0x1020>
 8009242:	f04f 0301 	mov.w	r3, #1
 8009246:	f04f 0400 	mov.w	r4, #0
 800924a:	e035      	b.n	80092b8 <UART_SetConfig+0x1020>
 800924c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009250:	f04f 0400 	mov.w	r4, #0
 8009254:	e030      	b.n	80092b8 <UART_SetConfig+0x1020>
 8009256:	f04f 0340 	mov.w	r3, #64	; 0x40
 800925a:	f04f 0400 	mov.w	r4, #0
 800925e:	e02b      	b.n	80092b8 <UART_SetConfig+0x1020>
 8009260:	f04f 0320 	mov.w	r3, #32
 8009264:	f04f 0400 	mov.w	r4, #0
 8009268:	e026      	b.n	80092b8 <UART_SetConfig+0x1020>
 800926a:	f04f 0310 	mov.w	r3, #16
 800926e:	f04f 0400 	mov.w	r4, #0
 8009272:	e021      	b.n	80092b8 <UART_SetConfig+0x1020>
 8009274:	f04f 030c 	mov.w	r3, #12
 8009278:	f04f 0400 	mov.w	r4, #0
 800927c:	e01c      	b.n	80092b8 <UART_SetConfig+0x1020>
 800927e:	f04f 030a 	mov.w	r3, #10
 8009282:	f04f 0400 	mov.w	r4, #0
 8009286:	e017      	b.n	80092b8 <UART_SetConfig+0x1020>
 8009288:	f04f 0308 	mov.w	r3, #8
 800928c:	f04f 0400 	mov.w	r4, #0
 8009290:	e012      	b.n	80092b8 <UART_SetConfig+0x1020>
 8009292:	f04f 0306 	mov.w	r3, #6
 8009296:	f04f 0400 	mov.w	r4, #0
 800929a:	e00d      	b.n	80092b8 <UART_SetConfig+0x1020>
 800929c:	f04f 0304 	mov.w	r3, #4
 80092a0:	f04f 0400 	mov.w	r4, #0
 80092a4:	e008      	b.n	80092b8 <UART_SetConfig+0x1020>
 80092a6:	f04f 0302 	mov.w	r3, #2
 80092aa:	f04f 0400 	mov.w	r4, #0
 80092ae:	e003      	b.n	80092b8 <UART_SetConfig+0x1020>
 80092b0:	f04f 0301 	mov.w	r3, #1
 80092b4:	f04f 0400 	mov.w	r4, #0
 80092b8:	461a      	mov	r2, r3
 80092ba:	4623      	mov	r3, r4
 80092bc:	f7f7 f80c 	bl	80002d8 <__aeabi_uldivmod>
 80092c0:	4603      	mov	r3, r0
 80092c2:	460c      	mov	r4, r1
 80092c4:	4619      	mov	r1, r3
 80092c6:	4622      	mov	r2, r4
 80092c8:	f04f 0300 	mov.w	r3, #0
 80092cc:	f04f 0400 	mov.w	r4, #0
 80092d0:	0214      	lsls	r4, r2, #8
 80092d2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80092d6:	020b      	lsls	r3, r1, #8
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	6852      	ldr	r2, [r2, #4]
 80092dc:	0852      	lsrs	r2, r2, #1
 80092de:	4611      	mov	r1, r2
 80092e0:	f04f 0200 	mov.w	r2, #0
 80092e4:	eb13 0b01 	adds.w	fp, r3, r1
 80092e8:	eb44 0c02 	adc.w	ip, r4, r2
 80092ec:	4658      	mov	r0, fp
 80092ee:	4661      	mov	r1, ip
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	f04f 0400 	mov.w	r4, #0
 80092f8:	461a      	mov	r2, r3
 80092fa:	4623      	mov	r3, r4
 80092fc:	f7f6 ffec 	bl	80002d8 <__aeabi_uldivmod>
 8009300:	4603      	mov	r3, r0
 8009302:	460c      	mov	r4, r1
 8009304:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 8009306:	e19d      	b.n	8009644 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800930c:	2b00      	cmp	r3, #0
 800930e:	d05b      	beq.n	80093c8 <UART_SetConfig+0x1130>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009314:	2b01      	cmp	r3, #1
 8009316:	d053      	beq.n	80093c0 <UART_SetConfig+0x1128>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800931c:	2b02      	cmp	r3, #2
 800931e:	d04b      	beq.n	80093b8 <UART_SetConfig+0x1120>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009324:	2b03      	cmp	r3, #3
 8009326:	d043      	beq.n	80093b0 <UART_SetConfig+0x1118>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800932c:	2b04      	cmp	r3, #4
 800932e:	d03b      	beq.n	80093a8 <UART_SetConfig+0x1110>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009334:	2b05      	cmp	r3, #5
 8009336:	d033      	beq.n	80093a0 <UART_SetConfig+0x1108>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800933c:	2b06      	cmp	r3, #6
 800933e:	d02b      	beq.n	8009398 <UART_SetConfig+0x1100>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009344:	2b07      	cmp	r3, #7
 8009346:	d023      	beq.n	8009390 <UART_SetConfig+0x10f8>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800934c:	2b08      	cmp	r3, #8
 800934e:	d01b      	beq.n	8009388 <UART_SetConfig+0x10f0>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009354:	2b09      	cmp	r3, #9
 8009356:	d013      	beq.n	8009380 <UART_SetConfig+0x10e8>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800935c:	2b0a      	cmp	r3, #10
 800935e:	d00b      	beq.n	8009378 <UART_SetConfig+0x10e0>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009364:	2b0b      	cmp	r3, #11
 8009366:	d103      	bne.n	8009370 <UART_SetConfig+0x10d8>
 8009368:	4b2a      	ldr	r3, [pc, #168]	; (8009414 <UART_SetConfig+0x117c>)
 800936a:	f04f 0400 	mov.w	r4, #0
 800936e:	e02e      	b.n	80093ce <UART_SetConfig+0x1136>
 8009370:	4b29      	ldr	r3, [pc, #164]	; (8009418 <UART_SetConfig+0x1180>)
 8009372:	f04f 0403 	mov.w	r4, #3
 8009376:	e02a      	b.n	80093ce <UART_SetConfig+0x1136>
 8009378:	4b28      	ldr	r3, [pc, #160]	; (800941c <UART_SetConfig+0x1184>)
 800937a:	f04f 0400 	mov.w	r4, #0
 800937e:	e026      	b.n	80093ce <UART_SetConfig+0x1136>
 8009380:	4b27      	ldr	r3, [pc, #156]	; (8009420 <UART_SetConfig+0x1188>)
 8009382:	f04f 0400 	mov.w	r4, #0
 8009386:	e022      	b.n	80093ce <UART_SetConfig+0x1136>
 8009388:	4b26      	ldr	r3, [pc, #152]	; (8009424 <UART_SetConfig+0x118c>)
 800938a:	f04f 0400 	mov.w	r4, #0
 800938e:	e01e      	b.n	80093ce <UART_SetConfig+0x1136>
 8009390:	4b25      	ldr	r3, [pc, #148]	; (8009428 <UART_SetConfig+0x1190>)
 8009392:	f04f 0400 	mov.w	r4, #0
 8009396:	e01a      	b.n	80093ce <UART_SetConfig+0x1136>
 8009398:	a419      	add	r4, pc, #100	; (adr r4, 8009400 <UART_SetConfig+0x1168>)
 800939a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800939e:	e016      	b.n	80093ce <UART_SetConfig+0x1136>
 80093a0:	4b22      	ldr	r3, [pc, #136]	; (800942c <UART_SetConfig+0x1194>)
 80093a2:	f04f 0400 	mov.w	r4, #0
 80093a6:	e012      	b.n	80093ce <UART_SetConfig+0x1136>
 80093a8:	4b21      	ldr	r3, [pc, #132]	; (8009430 <UART_SetConfig+0x1198>)
 80093aa:	f04f 0400 	mov.w	r4, #0
 80093ae:	e00e      	b.n	80093ce <UART_SetConfig+0x1136>
 80093b0:	a415      	add	r4, pc, #84	; (adr r4, 8009408 <UART_SetConfig+0x1170>)
 80093b2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80093b6:	e00a      	b.n	80093ce <UART_SetConfig+0x1136>
 80093b8:	4b1e      	ldr	r3, [pc, #120]	; (8009434 <UART_SetConfig+0x119c>)
 80093ba:	f04f 0400 	mov.w	r4, #0
 80093be:	e006      	b.n	80093ce <UART_SetConfig+0x1136>
 80093c0:	4b1d      	ldr	r3, [pc, #116]	; (8009438 <UART_SetConfig+0x11a0>)
 80093c2:	f04f 0401 	mov.w	r4, #1
 80093c6:	e002      	b.n	80093ce <UART_SetConfig+0x1136>
 80093c8:	4b13      	ldr	r3, [pc, #76]	; (8009418 <UART_SetConfig+0x1180>)
 80093ca:	f04f 0403 	mov.w	r4, #3
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	6852      	ldr	r2, [r2, #4]
 80093d2:	0852      	lsrs	r2, r2, #1
 80093d4:	4611      	mov	r1, r2
 80093d6:	f04f 0200 	mov.w	r2, #0
 80093da:	eb13 0b01 	adds.w	fp, r3, r1
 80093de:	eb44 0c02 	adc.w	ip, r4, r2
 80093e2:	4658      	mov	r0, fp
 80093e4:	4661      	mov	r1, ip
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	f04f 0400 	mov.w	r4, #0
 80093ee:	461a      	mov	r2, r3
 80093f0:	4623      	mov	r3, r4
 80093f2:	f7f6 ff71 	bl	80002d8 <__aeabi_uldivmod>
 80093f6:	4603      	mov	r3, r0
 80093f8:	460c      	mov	r4, r1
 80093fa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80093fc:	e122      	b.n	8009644 <UART_SetConfig+0x13ac>
 80093fe:	bf00      	nop
 8009400:	51615500 	.word	0x51615500
 8009404:	00000000 	.word	0x00000000
 8009408:	a2c2aa00 	.word	0xa2c2aa00
 800940c:	00000000 	.word	0x00000000
 8009410:	58024400 	.word	0x58024400
 8009414:	03d09000 	.word	0x03d09000
 8009418:	d0900000 	.word	0xd0900000
 800941c:	07a12000 	.word	0x07a12000
 8009420:	0f424000 	.word	0x0f424000
 8009424:	1e848000 	.word	0x1e848000
 8009428:	3d090000 	.word	0x3d090000
 800942c:	61a80000 	.word	0x61a80000
 8009430:	7a120000 	.word	0x7a120000
 8009434:	f4240000 	.word	0xf4240000
 8009438:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009440:	2b00      	cmp	r3, #0
 8009442:	d05b      	beq.n	80094fc <UART_SetConfig+0x1264>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009448:	2b01      	cmp	r3, #1
 800944a:	d053      	beq.n	80094f4 <UART_SetConfig+0x125c>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009450:	2b02      	cmp	r3, #2
 8009452:	d04b      	beq.n	80094ec <UART_SetConfig+0x1254>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009458:	2b03      	cmp	r3, #3
 800945a:	d043      	beq.n	80094e4 <UART_SetConfig+0x124c>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009460:	2b04      	cmp	r3, #4
 8009462:	d03b      	beq.n	80094dc <UART_SetConfig+0x1244>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009468:	2b05      	cmp	r3, #5
 800946a:	d033      	beq.n	80094d4 <UART_SetConfig+0x123c>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009470:	2b06      	cmp	r3, #6
 8009472:	d02b      	beq.n	80094cc <UART_SetConfig+0x1234>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009478:	2b07      	cmp	r3, #7
 800947a:	d023      	beq.n	80094c4 <UART_SetConfig+0x122c>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009480:	2b08      	cmp	r3, #8
 8009482:	d01b      	beq.n	80094bc <UART_SetConfig+0x1224>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009488:	2b09      	cmp	r3, #9
 800948a:	d013      	beq.n	80094b4 <UART_SetConfig+0x121c>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009490:	2b0a      	cmp	r3, #10
 8009492:	d00b      	beq.n	80094ac <UART_SetConfig+0x1214>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009498:	2b0b      	cmp	r3, #11
 800949a:	d103      	bne.n	80094a4 <UART_SetConfig+0x120c>
 800949c:	4bc0      	ldr	r3, [pc, #768]	; (80097a0 <UART_SetConfig+0x1508>)
 800949e:	f04f 0400 	mov.w	r4, #0
 80094a2:	e02e      	b.n	8009502 <UART_SetConfig+0x126a>
 80094a4:	4bbf      	ldr	r3, [pc, #764]	; (80097a4 <UART_SetConfig+0x150c>)
 80094a6:	f04f 0400 	mov.w	r4, #0
 80094aa:	e02a      	b.n	8009502 <UART_SetConfig+0x126a>
 80094ac:	4bbe      	ldr	r3, [pc, #760]	; (80097a8 <UART_SetConfig+0x1510>)
 80094ae:	f04f 0400 	mov.w	r4, #0
 80094b2:	e026      	b.n	8009502 <UART_SetConfig+0x126a>
 80094b4:	4bbd      	ldr	r3, [pc, #756]	; (80097ac <UART_SetConfig+0x1514>)
 80094b6:	f04f 0400 	mov.w	r4, #0
 80094ba:	e022      	b.n	8009502 <UART_SetConfig+0x126a>
 80094bc:	4bbc      	ldr	r3, [pc, #752]	; (80097b0 <UART_SetConfig+0x1518>)
 80094be:	f04f 0400 	mov.w	r4, #0
 80094c2:	e01e      	b.n	8009502 <UART_SetConfig+0x126a>
 80094c4:	4bbb      	ldr	r3, [pc, #748]	; (80097b4 <UART_SetConfig+0x151c>)
 80094c6:	f04f 0400 	mov.w	r4, #0
 80094ca:	e01a      	b.n	8009502 <UART_SetConfig+0x126a>
 80094cc:	a4b0      	add	r4, pc, #704	; (adr r4, 8009790 <UART_SetConfig+0x14f8>)
 80094ce:	e9d4 3400 	ldrd	r3, r4, [r4]
 80094d2:	e016      	b.n	8009502 <UART_SetConfig+0x126a>
 80094d4:	4bb8      	ldr	r3, [pc, #736]	; (80097b8 <UART_SetConfig+0x1520>)
 80094d6:	f04f 0400 	mov.w	r4, #0
 80094da:	e012      	b.n	8009502 <UART_SetConfig+0x126a>
 80094dc:	4bb7      	ldr	r3, [pc, #732]	; (80097bc <UART_SetConfig+0x1524>)
 80094de:	f04f 0400 	mov.w	r4, #0
 80094e2:	e00e      	b.n	8009502 <UART_SetConfig+0x126a>
 80094e4:	a4ac      	add	r4, pc, #688	; (adr r4, 8009798 <UART_SetConfig+0x1500>)
 80094e6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80094ea:	e00a      	b.n	8009502 <UART_SetConfig+0x126a>
 80094ec:	4bb4      	ldr	r3, [pc, #720]	; (80097c0 <UART_SetConfig+0x1528>)
 80094ee:	f04f 0400 	mov.w	r4, #0
 80094f2:	e006      	b.n	8009502 <UART_SetConfig+0x126a>
 80094f4:	4bb3      	ldr	r3, [pc, #716]	; (80097c4 <UART_SetConfig+0x152c>)
 80094f6:	f04f 0400 	mov.w	r4, #0
 80094fa:	e002      	b.n	8009502 <UART_SetConfig+0x126a>
 80094fc:	4ba9      	ldr	r3, [pc, #676]	; (80097a4 <UART_SetConfig+0x150c>)
 80094fe:	f04f 0400 	mov.w	r4, #0
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	6852      	ldr	r2, [r2, #4]
 8009506:	0852      	lsrs	r2, r2, #1
 8009508:	4611      	mov	r1, r2
 800950a:	f04f 0200 	mov.w	r2, #0
 800950e:	eb13 0b01 	adds.w	fp, r3, r1
 8009512:	eb44 0c02 	adc.w	ip, r4, r2
 8009516:	4658      	mov	r0, fp
 8009518:	4661      	mov	r1, ip
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	f04f 0400 	mov.w	r4, #0
 8009522:	461a      	mov	r2, r3
 8009524:	4623      	mov	r3, r4
 8009526:	f7f6 fed7 	bl	80002d8 <__aeabi_uldivmod>
 800952a:	4603      	mov	r3, r0
 800952c:	460c      	mov	r4, r1
 800952e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009530:	e088      	b.n	8009644 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009536:	2b00      	cmp	r3, #0
 8009538:	d064      	beq.n	8009604 <UART_SetConfig+0x136c>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800953e:	2b01      	cmp	r3, #1
 8009540:	d05b      	beq.n	80095fa <UART_SetConfig+0x1362>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009546:	2b02      	cmp	r3, #2
 8009548:	d052      	beq.n	80095f0 <UART_SetConfig+0x1358>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800954e:	2b03      	cmp	r3, #3
 8009550:	d04a      	beq.n	80095e8 <UART_SetConfig+0x1350>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009556:	2b04      	cmp	r3, #4
 8009558:	d041      	beq.n	80095de <UART_SetConfig+0x1346>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800955e:	2b05      	cmp	r3, #5
 8009560:	d039      	beq.n	80095d6 <UART_SetConfig+0x133e>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009566:	2b06      	cmp	r3, #6
 8009568:	d031      	beq.n	80095ce <UART_SetConfig+0x1336>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800956e:	2b07      	cmp	r3, #7
 8009570:	d028      	beq.n	80095c4 <UART_SetConfig+0x132c>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009576:	2b08      	cmp	r3, #8
 8009578:	d01f      	beq.n	80095ba <UART_SetConfig+0x1322>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800957e:	2b09      	cmp	r3, #9
 8009580:	d016      	beq.n	80095b0 <UART_SetConfig+0x1318>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009586:	2b0a      	cmp	r3, #10
 8009588:	d00d      	beq.n	80095a6 <UART_SetConfig+0x130e>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800958e:	2b0b      	cmp	r3, #11
 8009590:	d104      	bne.n	800959c <UART_SetConfig+0x1304>
 8009592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009596:	f04f 0400 	mov.w	r4, #0
 800959a:	e037      	b.n	800960c <UART_SetConfig+0x1374>
 800959c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80095a0:	f04f 0400 	mov.w	r4, #0
 80095a4:	e032      	b.n	800960c <UART_SetConfig+0x1374>
 80095a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80095aa:	f04f 0400 	mov.w	r4, #0
 80095ae:	e02d      	b.n	800960c <UART_SetConfig+0x1374>
 80095b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80095b4:	f04f 0400 	mov.w	r4, #0
 80095b8:	e028      	b.n	800960c <UART_SetConfig+0x1374>
 80095ba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80095be:	f04f 0400 	mov.w	r4, #0
 80095c2:	e023      	b.n	800960c <UART_SetConfig+0x1374>
 80095c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80095c8:	f04f 0400 	mov.w	r4, #0
 80095cc:	e01e      	b.n	800960c <UART_SetConfig+0x1374>
 80095ce:	4b7e      	ldr	r3, [pc, #504]	; (80097c8 <UART_SetConfig+0x1530>)
 80095d0:	f04f 0400 	mov.w	r4, #0
 80095d4:	e01a      	b.n	800960c <UART_SetConfig+0x1374>
 80095d6:	4b7d      	ldr	r3, [pc, #500]	; (80097cc <UART_SetConfig+0x1534>)
 80095d8:	f04f 0400 	mov.w	r4, #0
 80095dc:	e016      	b.n	800960c <UART_SetConfig+0x1374>
 80095de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80095e2:	f04f 0400 	mov.w	r4, #0
 80095e6:	e011      	b.n	800960c <UART_SetConfig+0x1374>
 80095e8:	4b79      	ldr	r3, [pc, #484]	; (80097d0 <UART_SetConfig+0x1538>)
 80095ea:	f04f 0400 	mov.w	r4, #0
 80095ee:	e00d      	b.n	800960c <UART_SetConfig+0x1374>
 80095f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80095f4:	f04f 0400 	mov.w	r4, #0
 80095f8:	e008      	b.n	800960c <UART_SetConfig+0x1374>
 80095fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80095fe:	f04f 0400 	mov.w	r4, #0
 8009602:	e003      	b.n	800960c <UART_SetConfig+0x1374>
 8009604:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009608:	f04f 0400 	mov.w	r4, #0
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	6852      	ldr	r2, [r2, #4]
 8009610:	0852      	lsrs	r2, r2, #1
 8009612:	4611      	mov	r1, r2
 8009614:	f04f 0200 	mov.w	r2, #0
 8009618:	eb13 0b01 	adds.w	fp, r3, r1
 800961c:	eb44 0c02 	adc.w	ip, r4, r2
 8009620:	4658      	mov	r0, fp
 8009622:	4661      	mov	r1, ip
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	f04f 0400 	mov.w	r4, #0
 800962c:	461a      	mov	r2, r3
 800962e:	4623      	mov	r3, r4
 8009630:	f7f6 fe52 	bl	80002d8 <__aeabi_uldivmod>
 8009634:	4603      	mov	r3, r0
 8009636:	460c      	mov	r4, r1
 8009638:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800963a:	e003      	b.n	8009644 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800963c:	2301      	movs	r3, #1
 800963e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8009642:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009646:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800964a:	d309      	bcc.n	8009660 <UART_SetConfig+0x13c8>
 800964c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800964e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009652:	d205      	bcs.n	8009660 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800965a:	60da      	str	r2, [r3, #12]
 800965c:	f000 bf85 	b.w	800a56a <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8009660:	2301      	movs	r3, #1
 8009662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009666:	f000 bf80 	b.w	800a56a <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	69db      	ldr	r3, [r3, #28]
 800966e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009672:	f040 83da 	bne.w	8009e2a <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 8009676:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800967a:	2b40      	cmp	r3, #64	; 0x40
 800967c:	f200 83b3 	bhi.w	8009de6 <UART_SetConfig+0x1b4e>
 8009680:	a201      	add	r2, pc, #4	; (adr r2, 8009688 <UART_SetConfig+0x13f0>)
 8009682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009686:	bf00      	nop
 8009688:	080097d5 	.word	0x080097d5
 800968c:	0800988d 	.word	0x0800988d
 8009690:	08009de7 	.word	0x08009de7
 8009694:	08009de7 	.word	0x08009de7
 8009698:	08009945 	.word	0x08009945
 800969c:	08009de7 	.word	0x08009de7
 80096a0:	08009de7 	.word	0x08009de7
 80096a4:	08009de7 	.word	0x08009de7
 80096a8:	08009a01 	.word	0x08009a01
 80096ac:	08009de7 	.word	0x08009de7
 80096b0:	08009de7 	.word	0x08009de7
 80096b4:	08009de7 	.word	0x08009de7
 80096b8:	08009de7 	.word	0x08009de7
 80096bc:	08009de7 	.word	0x08009de7
 80096c0:	08009de7 	.word	0x08009de7
 80096c4:	08009de7 	.word	0x08009de7
 80096c8:	08009abd 	.word	0x08009abd
 80096cc:	08009de7 	.word	0x08009de7
 80096d0:	08009de7 	.word	0x08009de7
 80096d4:	08009de7 	.word	0x08009de7
 80096d8:	08009de7 	.word	0x08009de7
 80096dc:	08009de7 	.word	0x08009de7
 80096e0:	08009de7 	.word	0x08009de7
 80096e4:	08009de7 	.word	0x08009de7
 80096e8:	08009de7 	.word	0x08009de7
 80096ec:	08009de7 	.word	0x08009de7
 80096f0:	08009de7 	.word	0x08009de7
 80096f4:	08009de7 	.word	0x08009de7
 80096f8:	08009de7 	.word	0x08009de7
 80096fc:	08009de7 	.word	0x08009de7
 8009700:	08009de7 	.word	0x08009de7
 8009704:	08009de7 	.word	0x08009de7
 8009708:	08009c2f 	.word	0x08009c2f
 800970c:	08009de7 	.word	0x08009de7
 8009710:	08009de7 	.word	0x08009de7
 8009714:	08009de7 	.word	0x08009de7
 8009718:	08009de7 	.word	0x08009de7
 800971c:	08009de7 	.word	0x08009de7
 8009720:	08009de7 	.word	0x08009de7
 8009724:	08009de7 	.word	0x08009de7
 8009728:	08009de7 	.word	0x08009de7
 800972c:	08009de7 	.word	0x08009de7
 8009730:	08009de7 	.word	0x08009de7
 8009734:	08009de7 	.word	0x08009de7
 8009738:	08009de7 	.word	0x08009de7
 800973c:	08009de7 	.word	0x08009de7
 8009740:	08009de7 	.word	0x08009de7
 8009744:	08009de7 	.word	0x08009de7
 8009748:	08009de7 	.word	0x08009de7
 800974c:	08009de7 	.word	0x08009de7
 8009750:	08009de7 	.word	0x08009de7
 8009754:	08009de7 	.word	0x08009de7
 8009758:	08009de7 	.word	0x08009de7
 800975c:	08009de7 	.word	0x08009de7
 8009760:	08009de7 	.word	0x08009de7
 8009764:	08009de7 	.word	0x08009de7
 8009768:	08009de7 	.word	0x08009de7
 800976c:	08009de7 	.word	0x08009de7
 8009770:	08009de7 	.word	0x08009de7
 8009774:	08009de7 	.word	0x08009de7
 8009778:	08009de7 	.word	0x08009de7
 800977c:	08009de7 	.word	0x08009de7
 8009780:	08009de7 	.word	0x08009de7
 8009784:	08009de7 	.word	0x08009de7
 8009788:	08009d25 	.word	0x08009d25
 800978c:	f3af 8000 	nop.w
 8009790:	05161500 	.word	0x05161500
 8009794:	00000000 	.word	0x00000000
 8009798:	0a2c2a00 	.word	0x0a2c2a00
 800979c:	00000000 	.word	0x00000000
 80097a0:	003d0900 	.word	0x003d0900
 80097a4:	3d090000 	.word	0x3d090000
 80097a8:	007a1200 	.word	0x007a1200
 80097ac:	00f42400 	.word	0x00f42400
 80097b0:	01e84800 	.word	0x01e84800
 80097b4:	03d09000 	.word	0x03d09000
 80097b8:	061a8000 	.word	0x061a8000
 80097bc:	07a12000 	.word	0x07a12000
 80097c0:	0f424000 	.word	0x0f424000
 80097c4:	1e848000 	.word	0x1e848000
 80097c8:	000aaa00 	.word	0x000aaa00
 80097cc:	000ccc00 	.word	0x000ccc00
 80097d0:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097d4:	f7fa ff36 	bl	8004644 <HAL_RCC_GetPCLK1Freq>
 80097d8:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d044      	beq.n	800986c <UART_SetConfig+0x15d4>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	d03e      	beq.n	8009868 <UART_SetConfig+0x15d0>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ee:	2b02      	cmp	r3, #2
 80097f0:	d038      	beq.n	8009864 <UART_SetConfig+0x15cc>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f6:	2b03      	cmp	r3, #3
 80097f8:	d032      	beq.n	8009860 <UART_SetConfig+0x15c8>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097fe:	2b04      	cmp	r3, #4
 8009800:	d02c      	beq.n	800985c <UART_SetConfig+0x15c4>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009806:	2b05      	cmp	r3, #5
 8009808:	d026      	beq.n	8009858 <UART_SetConfig+0x15c0>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980e:	2b06      	cmp	r3, #6
 8009810:	d020      	beq.n	8009854 <UART_SetConfig+0x15bc>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009816:	2b07      	cmp	r3, #7
 8009818:	d01a      	beq.n	8009850 <UART_SetConfig+0x15b8>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800981e:	2b08      	cmp	r3, #8
 8009820:	d014      	beq.n	800984c <UART_SetConfig+0x15b4>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009826:	2b09      	cmp	r3, #9
 8009828:	d00e      	beq.n	8009848 <UART_SetConfig+0x15b0>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982e:	2b0a      	cmp	r3, #10
 8009830:	d008      	beq.n	8009844 <UART_SetConfig+0x15ac>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009836:	2b0b      	cmp	r3, #11
 8009838:	d102      	bne.n	8009840 <UART_SetConfig+0x15a8>
 800983a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800983e:	e016      	b.n	800986e <UART_SetConfig+0x15d6>
 8009840:	2301      	movs	r3, #1
 8009842:	e014      	b.n	800986e <UART_SetConfig+0x15d6>
 8009844:	2380      	movs	r3, #128	; 0x80
 8009846:	e012      	b.n	800986e <UART_SetConfig+0x15d6>
 8009848:	2340      	movs	r3, #64	; 0x40
 800984a:	e010      	b.n	800986e <UART_SetConfig+0x15d6>
 800984c:	2320      	movs	r3, #32
 800984e:	e00e      	b.n	800986e <UART_SetConfig+0x15d6>
 8009850:	2310      	movs	r3, #16
 8009852:	e00c      	b.n	800986e <UART_SetConfig+0x15d6>
 8009854:	230c      	movs	r3, #12
 8009856:	e00a      	b.n	800986e <UART_SetConfig+0x15d6>
 8009858:	230a      	movs	r3, #10
 800985a:	e008      	b.n	800986e <UART_SetConfig+0x15d6>
 800985c:	2308      	movs	r3, #8
 800985e:	e006      	b.n	800986e <UART_SetConfig+0x15d6>
 8009860:	2306      	movs	r3, #6
 8009862:	e004      	b.n	800986e <UART_SetConfig+0x15d6>
 8009864:	2304      	movs	r3, #4
 8009866:	e002      	b.n	800986e <UART_SetConfig+0x15d6>
 8009868:	2302      	movs	r3, #2
 800986a:	e000      	b.n	800986e <UART_SetConfig+0x15d6>
 800986c:	2301      	movs	r3, #1
 800986e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009870:	fbb2 f3f3 	udiv	r3, r2, r3
 8009874:	005a      	lsls	r2, r3, #1
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	085b      	lsrs	r3, r3, #1
 800987c:	441a      	add	r2, r3
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	fbb2 f3f3 	udiv	r3, r2, r3
 8009886:	b29b      	uxth	r3, r3
 8009888:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800988a:	e2b0      	b.n	8009dee <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800988c:	f7fa fef0 	bl	8004670 <HAL_RCC_GetPCLK2Freq>
 8009890:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009896:	2b00      	cmp	r3, #0
 8009898:	d044      	beq.n	8009924 <UART_SetConfig+0x168c>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800989e:	2b01      	cmp	r3, #1
 80098a0:	d03e      	beq.n	8009920 <UART_SetConfig+0x1688>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a6:	2b02      	cmp	r3, #2
 80098a8:	d038      	beq.n	800991c <UART_SetConfig+0x1684>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ae:	2b03      	cmp	r3, #3
 80098b0:	d032      	beq.n	8009918 <UART_SetConfig+0x1680>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b6:	2b04      	cmp	r3, #4
 80098b8:	d02c      	beq.n	8009914 <UART_SetConfig+0x167c>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098be:	2b05      	cmp	r3, #5
 80098c0:	d026      	beq.n	8009910 <UART_SetConfig+0x1678>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c6:	2b06      	cmp	r3, #6
 80098c8:	d020      	beq.n	800990c <UART_SetConfig+0x1674>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ce:	2b07      	cmp	r3, #7
 80098d0:	d01a      	beq.n	8009908 <UART_SetConfig+0x1670>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d6:	2b08      	cmp	r3, #8
 80098d8:	d014      	beq.n	8009904 <UART_SetConfig+0x166c>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098de:	2b09      	cmp	r3, #9
 80098e0:	d00e      	beq.n	8009900 <UART_SetConfig+0x1668>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e6:	2b0a      	cmp	r3, #10
 80098e8:	d008      	beq.n	80098fc <UART_SetConfig+0x1664>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ee:	2b0b      	cmp	r3, #11
 80098f0:	d102      	bne.n	80098f8 <UART_SetConfig+0x1660>
 80098f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098f6:	e016      	b.n	8009926 <UART_SetConfig+0x168e>
 80098f8:	2301      	movs	r3, #1
 80098fa:	e014      	b.n	8009926 <UART_SetConfig+0x168e>
 80098fc:	2380      	movs	r3, #128	; 0x80
 80098fe:	e012      	b.n	8009926 <UART_SetConfig+0x168e>
 8009900:	2340      	movs	r3, #64	; 0x40
 8009902:	e010      	b.n	8009926 <UART_SetConfig+0x168e>
 8009904:	2320      	movs	r3, #32
 8009906:	e00e      	b.n	8009926 <UART_SetConfig+0x168e>
 8009908:	2310      	movs	r3, #16
 800990a:	e00c      	b.n	8009926 <UART_SetConfig+0x168e>
 800990c:	230c      	movs	r3, #12
 800990e:	e00a      	b.n	8009926 <UART_SetConfig+0x168e>
 8009910:	230a      	movs	r3, #10
 8009912:	e008      	b.n	8009926 <UART_SetConfig+0x168e>
 8009914:	2308      	movs	r3, #8
 8009916:	e006      	b.n	8009926 <UART_SetConfig+0x168e>
 8009918:	2306      	movs	r3, #6
 800991a:	e004      	b.n	8009926 <UART_SetConfig+0x168e>
 800991c:	2304      	movs	r3, #4
 800991e:	e002      	b.n	8009926 <UART_SetConfig+0x168e>
 8009920:	2302      	movs	r3, #2
 8009922:	e000      	b.n	8009926 <UART_SetConfig+0x168e>
 8009924:	2301      	movs	r3, #1
 8009926:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009928:	fbb2 f3f3 	udiv	r3, r2, r3
 800992c:	005a      	lsls	r2, r3, #1
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	085b      	lsrs	r3, r3, #1
 8009934:	441a      	add	r2, r3
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	fbb2 f3f3 	udiv	r3, r2, r3
 800993e:	b29b      	uxth	r3, r3
 8009940:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009942:	e254      	b.n	8009dee <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009944:	f107 0318 	add.w	r3, r7, #24
 8009948:	4618      	mov	r0, r3
 800994a:	f7fc f813 	bl	8005974 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800994e:	69fa      	ldr	r2, [r7, #28]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009954:	2b00      	cmp	r3, #0
 8009956:	d044      	beq.n	80099e2 <UART_SetConfig+0x174a>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800995c:	2b01      	cmp	r3, #1
 800995e:	d03e      	beq.n	80099de <UART_SetConfig+0x1746>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009964:	2b02      	cmp	r3, #2
 8009966:	d038      	beq.n	80099da <UART_SetConfig+0x1742>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996c:	2b03      	cmp	r3, #3
 800996e:	d032      	beq.n	80099d6 <UART_SetConfig+0x173e>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009974:	2b04      	cmp	r3, #4
 8009976:	d02c      	beq.n	80099d2 <UART_SetConfig+0x173a>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800997c:	2b05      	cmp	r3, #5
 800997e:	d026      	beq.n	80099ce <UART_SetConfig+0x1736>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009984:	2b06      	cmp	r3, #6
 8009986:	d020      	beq.n	80099ca <UART_SetConfig+0x1732>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800998c:	2b07      	cmp	r3, #7
 800998e:	d01a      	beq.n	80099c6 <UART_SetConfig+0x172e>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009994:	2b08      	cmp	r3, #8
 8009996:	d014      	beq.n	80099c2 <UART_SetConfig+0x172a>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999c:	2b09      	cmp	r3, #9
 800999e:	d00e      	beq.n	80099be <UART_SetConfig+0x1726>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a4:	2b0a      	cmp	r3, #10
 80099a6:	d008      	beq.n	80099ba <UART_SetConfig+0x1722>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ac:	2b0b      	cmp	r3, #11
 80099ae:	d102      	bne.n	80099b6 <UART_SetConfig+0x171e>
 80099b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099b4:	e016      	b.n	80099e4 <UART_SetConfig+0x174c>
 80099b6:	2301      	movs	r3, #1
 80099b8:	e014      	b.n	80099e4 <UART_SetConfig+0x174c>
 80099ba:	2380      	movs	r3, #128	; 0x80
 80099bc:	e012      	b.n	80099e4 <UART_SetConfig+0x174c>
 80099be:	2340      	movs	r3, #64	; 0x40
 80099c0:	e010      	b.n	80099e4 <UART_SetConfig+0x174c>
 80099c2:	2320      	movs	r3, #32
 80099c4:	e00e      	b.n	80099e4 <UART_SetConfig+0x174c>
 80099c6:	2310      	movs	r3, #16
 80099c8:	e00c      	b.n	80099e4 <UART_SetConfig+0x174c>
 80099ca:	230c      	movs	r3, #12
 80099cc:	e00a      	b.n	80099e4 <UART_SetConfig+0x174c>
 80099ce:	230a      	movs	r3, #10
 80099d0:	e008      	b.n	80099e4 <UART_SetConfig+0x174c>
 80099d2:	2308      	movs	r3, #8
 80099d4:	e006      	b.n	80099e4 <UART_SetConfig+0x174c>
 80099d6:	2306      	movs	r3, #6
 80099d8:	e004      	b.n	80099e4 <UART_SetConfig+0x174c>
 80099da:	2304      	movs	r3, #4
 80099dc:	e002      	b.n	80099e4 <UART_SetConfig+0x174c>
 80099de:	2302      	movs	r3, #2
 80099e0:	e000      	b.n	80099e4 <UART_SetConfig+0x174c>
 80099e2:	2301      	movs	r3, #1
 80099e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80099e8:	005a      	lsls	r2, r3, #1
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	085b      	lsrs	r3, r3, #1
 80099f0:	441a      	add	r2, r3
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80099fe:	e1f6      	b.n	8009dee <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a00:	f107 030c 	add.w	r3, r7, #12
 8009a04:	4618      	mov	r0, r3
 8009a06:	f7fc f901 	bl	8005c0c <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a0a:	693a      	ldr	r2, [r7, #16]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d044      	beq.n	8009a9e <UART_SetConfig+0x1806>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d03e      	beq.n	8009a9a <UART_SetConfig+0x1802>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a20:	2b02      	cmp	r3, #2
 8009a22:	d038      	beq.n	8009a96 <UART_SetConfig+0x17fe>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a28:	2b03      	cmp	r3, #3
 8009a2a:	d032      	beq.n	8009a92 <UART_SetConfig+0x17fa>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a30:	2b04      	cmp	r3, #4
 8009a32:	d02c      	beq.n	8009a8e <UART_SetConfig+0x17f6>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a38:	2b05      	cmp	r3, #5
 8009a3a:	d026      	beq.n	8009a8a <UART_SetConfig+0x17f2>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a40:	2b06      	cmp	r3, #6
 8009a42:	d020      	beq.n	8009a86 <UART_SetConfig+0x17ee>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a48:	2b07      	cmp	r3, #7
 8009a4a:	d01a      	beq.n	8009a82 <UART_SetConfig+0x17ea>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a50:	2b08      	cmp	r3, #8
 8009a52:	d014      	beq.n	8009a7e <UART_SetConfig+0x17e6>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a58:	2b09      	cmp	r3, #9
 8009a5a:	d00e      	beq.n	8009a7a <UART_SetConfig+0x17e2>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a60:	2b0a      	cmp	r3, #10
 8009a62:	d008      	beq.n	8009a76 <UART_SetConfig+0x17de>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a68:	2b0b      	cmp	r3, #11
 8009a6a:	d102      	bne.n	8009a72 <UART_SetConfig+0x17da>
 8009a6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a70:	e016      	b.n	8009aa0 <UART_SetConfig+0x1808>
 8009a72:	2301      	movs	r3, #1
 8009a74:	e014      	b.n	8009aa0 <UART_SetConfig+0x1808>
 8009a76:	2380      	movs	r3, #128	; 0x80
 8009a78:	e012      	b.n	8009aa0 <UART_SetConfig+0x1808>
 8009a7a:	2340      	movs	r3, #64	; 0x40
 8009a7c:	e010      	b.n	8009aa0 <UART_SetConfig+0x1808>
 8009a7e:	2320      	movs	r3, #32
 8009a80:	e00e      	b.n	8009aa0 <UART_SetConfig+0x1808>
 8009a82:	2310      	movs	r3, #16
 8009a84:	e00c      	b.n	8009aa0 <UART_SetConfig+0x1808>
 8009a86:	230c      	movs	r3, #12
 8009a88:	e00a      	b.n	8009aa0 <UART_SetConfig+0x1808>
 8009a8a:	230a      	movs	r3, #10
 8009a8c:	e008      	b.n	8009aa0 <UART_SetConfig+0x1808>
 8009a8e:	2308      	movs	r3, #8
 8009a90:	e006      	b.n	8009aa0 <UART_SetConfig+0x1808>
 8009a92:	2306      	movs	r3, #6
 8009a94:	e004      	b.n	8009aa0 <UART_SetConfig+0x1808>
 8009a96:	2304      	movs	r3, #4
 8009a98:	e002      	b.n	8009aa0 <UART_SetConfig+0x1808>
 8009a9a:	2302      	movs	r3, #2
 8009a9c:	e000      	b.n	8009aa0 <UART_SetConfig+0x1808>
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009aa4:	005a      	lsls	r2, r3, #1
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	085b      	lsrs	r3, r3, #1
 8009aac:	441a      	add	r2, r3
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009aba:	e198      	b.n	8009dee <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009abc:	4b87      	ldr	r3, [pc, #540]	; (8009cdc <UART_SetConfig+0x1a44>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f003 0320 	and.w	r3, r3, #32
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d05e      	beq.n	8009b86 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ac8:	4b84      	ldr	r3, [pc, #528]	; (8009cdc <UART_SetConfig+0x1a44>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	08db      	lsrs	r3, r3, #3
 8009ace:	f003 0303 	and.w	r3, r3, #3
 8009ad2:	4a83      	ldr	r2, [pc, #524]	; (8009ce0 <UART_SetConfig+0x1a48>)
 8009ad4:	40da      	lsrs	r2, r3
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d044      	beq.n	8009b68 <UART_SetConfig+0x18d0>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d03e      	beq.n	8009b64 <UART_SetConfig+0x18cc>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aea:	2b02      	cmp	r3, #2
 8009aec:	d038      	beq.n	8009b60 <UART_SetConfig+0x18c8>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af2:	2b03      	cmp	r3, #3
 8009af4:	d032      	beq.n	8009b5c <UART_SetConfig+0x18c4>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afa:	2b04      	cmp	r3, #4
 8009afc:	d02c      	beq.n	8009b58 <UART_SetConfig+0x18c0>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b02:	2b05      	cmp	r3, #5
 8009b04:	d026      	beq.n	8009b54 <UART_SetConfig+0x18bc>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b0a:	2b06      	cmp	r3, #6
 8009b0c:	d020      	beq.n	8009b50 <UART_SetConfig+0x18b8>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b12:	2b07      	cmp	r3, #7
 8009b14:	d01a      	beq.n	8009b4c <UART_SetConfig+0x18b4>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1a:	2b08      	cmp	r3, #8
 8009b1c:	d014      	beq.n	8009b48 <UART_SetConfig+0x18b0>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b22:	2b09      	cmp	r3, #9
 8009b24:	d00e      	beq.n	8009b44 <UART_SetConfig+0x18ac>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2a:	2b0a      	cmp	r3, #10
 8009b2c:	d008      	beq.n	8009b40 <UART_SetConfig+0x18a8>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b32:	2b0b      	cmp	r3, #11
 8009b34:	d102      	bne.n	8009b3c <UART_SetConfig+0x18a4>
 8009b36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b3a:	e016      	b.n	8009b6a <UART_SetConfig+0x18d2>
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	e014      	b.n	8009b6a <UART_SetConfig+0x18d2>
 8009b40:	2380      	movs	r3, #128	; 0x80
 8009b42:	e012      	b.n	8009b6a <UART_SetConfig+0x18d2>
 8009b44:	2340      	movs	r3, #64	; 0x40
 8009b46:	e010      	b.n	8009b6a <UART_SetConfig+0x18d2>
 8009b48:	2320      	movs	r3, #32
 8009b4a:	e00e      	b.n	8009b6a <UART_SetConfig+0x18d2>
 8009b4c:	2310      	movs	r3, #16
 8009b4e:	e00c      	b.n	8009b6a <UART_SetConfig+0x18d2>
 8009b50:	230c      	movs	r3, #12
 8009b52:	e00a      	b.n	8009b6a <UART_SetConfig+0x18d2>
 8009b54:	230a      	movs	r3, #10
 8009b56:	e008      	b.n	8009b6a <UART_SetConfig+0x18d2>
 8009b58:	2308      	movs	r3, #8
 8009b5a:	e006      	b.n	8009b6a <UART_SetConfig+0x18d2>
 8009b5c:	2306      	movs	r3, #6
 8009b5e:	e004      	b.n	8009b6a <UART_SetConfig+0x18d2>
 8009b60:	2304      	movs	r3, #4
 8009b62:	e002      	b.n	8009b6a <UART_SetConfig+0x18d2>
 8009b64:	2302      	movs	r3, #2
 8009b66:	e000      	b.n	8009b6a <UART_SetConfig+0x18d2>
 8009b68:	2301      	movs	r3, #1
 8009b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b6e:	005a      	lsls	r2, r3, #1
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	085b      	lsrs	r3, r3, #1
 8009b76:	441a      	add	r2, r3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8009b84:	e133      	b.n	8009dee <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d043      	beq.n	8009c16 <UART_SetConfig+0x197e>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d03d      	beq.n	8009c12 <UART_SetConfig+0x197a>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9a:	2b02      	cmp	r3, #2
 8009b9c:	d037      	beq.n	8009c0e <UART_SetConfig+0x1976>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba2:	2b03      	cmp	r3, #3
 8009ba4:	d031      	beq.n	8009c0a <UART_SetConfig+0x1972>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009baa:	2b04      	cmp	r3, #4
 8009bac:	d02b      	beq.n	8009c06 <UART_SetConfig+0x196e>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb2:	2b05      	cmp	r3, #5
 8009bb4:	d025      	beq.n	8009c02 <UART_SetConfig+0x196a>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bba:	2b06      	cmp	r3, #6
 8009bbc:	d01f      	beq.n	8009bfe <UART_SetConfig+0x1966>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc2:	2b07      	cmp	r3, #7
 8009bc4:	d019      	beq.n	8009bfa <UART_SetConfig+0x1962>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bca:	2b08      	cmp	r3, #8
 8009bcc:	d013      	beq.n	8009bf6 <UART_SetConfig+0x195e>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd2:	2b09      	cmp	r3, #9
 8009bd4:	d00d      	beq.n	8009bf2 <UART_SetConfig+0x195a>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bda:	2b0a      	cmp	r3, #10
 8009bdc:	d007      	beq.n	8009bee <UART_SetConfig+0x1956>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be2:	2b0b      	cmp	r3, #11
 8009be4:	d101      	bne.n	8009bea <UART_SetConfig+0x1952>
 8009be6:	4b3f      	ldr	r3, [pc, #252]	; (8009ce4 <UART_SetConfig+0x1a4c>)
 8009be8:	e016      	b.n	8009c18 <UART_SetConfig+0x1980>
 8009bea:	4b3f      	ldr	r3, [pc, #252]	; (8009ce8 <UART_SetConfig+0x1a50>)
 8009bec:	e014      	b.n	8009c18 <UART_SetConfig+0x1980>
 8009bee:	4b3f      	ldr	r3, [pc, #252]	; (8009cec <UART_SetConfig+0x1a54>)
 8009bf0:	e012      	b.n	8009c18 <UART_SetConfig+0x1980>
 8009bf2:	4b3f      	ldr	r3, [pc, #252]	; (8009cf0 <UART_SetConfig+0x1a58>)
 8009bf4:	e010      	b.n	8009c18 <UART_SetConfig+0x1980>
 8009bf6:	4b3f      	ldr	r3, [pc, #252]	; (8009cf4 <UART_SetConfig+0x1a5c>)
 8009bf8:	e00e      	b.n	8009c18 <UART_SetConfig+0x1980>
 8009bfa:	4b3f      	ldr	r3, [pc, #252]	; (8009cf8 <UART_SetConfig+0x1a60>)
 8009bfc:	e00c      	b.n	8009c18 <UART_SetConfig+0x1980>
 8009bfe:	4b3f      	ldr	r3, [pc, #252]	; (8009cfc <UART_SetConfig+0x1a64>)
 8009c00:	e00a      	b.n	8009c18 <UART_SetConfig+0x1980>
 8009c02:	4b3f      	ldr	r3, [pc, #252]	; (8009d00 <UART_SetConfig+0x1a68>)
 8009c04:	e008      	b.n	8009c18 <UART_SetConfig+0x1980>
 8009c06:	4b3f      	ldr	r3, [pc, #252]	; (8009d04 <UART_SetConfig+0x1a6c>)
 8009c08:	e006      	b.n	8009c18 <UART_SetConfig+0x1980>
 8009c0a:	4b3f      	ldr	r3, [pc, #252]	; (8009d08 <UART_SetConfig+0x1a70>)
 8009c0c:	e004      	b.n	8009c18 <UART_SetConfig+0x1980>
 8009c0e:	4b3f      	ldr	r3, [pc, #252]	; (8009d0c <UART_SetConfig+0x1a74>)
 8009c10:	e002      	b.n	8009c18 <UART_SetConfig+0x1980>
 8009c12:	4b33      	ldr	r3, [pc, #204]	; (8009ce0 <UART_SetConfig+0x1a48>)
 8009c14:	e000      	b.n	8009c18 <UART_SetConfig+0x1980>
 8009c16:	4b34      	ldr	r3, [pc, #208]	; (8009ce8 <UART_SetConfig+0x1a50>)
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	6852      	ldr	r2, [r2, #4]
 8009c1c:	0852      	lsrs	r2, r2, #1
 8009c1e:	441a      	add	r2, r3
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c28:	b29b      	uxth	r3, r3
 8009c2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009c2c:	e0df      	b.n	8009dee <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d045      	beq.n	8009cc2 <UART_SetConfig+0x1a2a>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d03f      	beq.n	8009cbe <UART_SetConfig+0x1a26>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c42:	2b02      	cmp	r3, #2
 8009c44:	d039      	beq.n	8009cba <UART_SetConfig+0x1a22>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c4a:	2b03      	cmp	r3, #3
 8009c4c:	d033      	beq.n	8009cb6 <UART_SetConfig+0x1a1e>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c52:	2b04      	cmp	r3, #4
 8009c54:	d02d      	beq.n	8009cb2 <UART_SetConfig+0x1a1a>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5a:	2b05      	cmp	r3, #5
 8009c5c:	d027      	beq.n	8009cae <UART_SetConfig+0x1a16>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c62:	2b06      	cmp	r3, #6
 8009c64:	d021      	beq.n	8009caa <UART_SetConfig+0x1a12>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6a:	2b07      	cmp	r3, #7
 8009c6c:	d01b      	beq.n	8009ca6 <UART_SetConfig+0x1a0e>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c72:	2b08      	cmp	r3, #8
 8009c74:	d015      	beq.n	8009ca2 <UART_SetConfig+0x1a0a>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c7a:	2b09      	cmp	r3, #9
 8009c7c:	d00f      	beq.n	8009c9e <UART_SetConfig+0x1a06>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c82:	2b0a      	cmp	r3, #10
 8009c84:	d008      	beq.n	8009c98 <UART_SetConfig+0x1a00>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8a:	2b0b      	cmp	r3, #11
 8009c8c:	d102      	bne.n	8009c94 <UART_SetConfig+0x19fc>
 8009c8e:	f647 2312 	movw	r3, #31250	; 0x7a12
 8009c92:	e017      	b.n	8009cc4 <UART_SetConfig+0x1a2c>
 8009c94:	4b18      	ldr	r3, [pc, #96]	; (8009cf8 <UART_SetConfig+0x1a60>)
 8009c96:	e015      	b.n	8009cc4 <UART_SetConfig+0x1a2c>
 8009c98:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009c9c:	e012      	b.n	8009cc4 <UART_SetConfig+0x1a2c>
 8009c9e:	4b1c      	ldr	r3, [pc, #112]	; (8009d10 <UART_SetConfig+0x1a78>)
 8009ca0:	e010      	b.n	8009cc4 <UART_SetConfig+0x1a2c>
 8009ca2:	4b1c      	ldr	r3, [pc, #112]	; (8009d14 <UART_SetConfig+0x1a7c>)
 8009ca4:	e00e      	b.n	8009cc4 <UART_SetConfig+0x1a2c>
 8009ca6:	4b0f      	ldr	r3, [pc, #60]	; (8009ce4 <UART_SetConfig+0x1a4c>)
 8009ca8:	e00c      	b.n	8009cc4 <UART_SetConfig+0x1a2c>
 8009caa:	4b1b      	ldr	r3, [pc, #108]	; (8009d18 <UART_SetConfig+0x1a80>)
 8009cac:	e00a      	b.n	8009cc4 <UART_SetConfig+0x1a2c>
 8009cae:	4b1b      	ldr	r3, [pc, #108]	; (8009d1c <UART_SetConfig+0x1a84>)
 8009cb0:	e008      	b.n	8009cc4 <UART_SetConfig+0x1a2c>
 8009cb2:	4b0e      	ldr	r3, [pc, #56]	; (8009cec <UART_SetConfig+0x1a54>)
 8009cb4:	e006      	b.n	8009cc4 <UART_SetConfig+0x1a2c>
 8009cb6:	4b1a      	ldr	r3, [pc, #104]	; (8009d20 <UART_SetConfig+0x1a88>)
 8009cb8:	e004      	b.n	8009cc4 <UART_SetConfig+0x1a2c>
 8009cba:	4b0d      	ldr	r3, [pc, #52]	; (8009cf0 <UART_SetConfig+0x1a58>)
 8009cbc:	e002      	b.n	8009cc4 <UART_SetConfig+0x1a2c>
 8009cbe:	4b0d      	ldr	r3, [pc, #52]	; (8009cf4 <UART_SetConfig+0x1a5c>)
 8009cc0:	e000      	b.n	8009cc4 <UART_SetConfig+0x1a2c>
 8009cc2:	4b0d      	ldr	r3, [pc, #52]	; (8009cf8 <UART_SetConfig+0x1a60>)
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	6852      	ldr	r2, [r2, #4]
 8009cc8:	0852      	lsrs	r2, r2, #1
 8009cca:	441a      	add	r2, r3
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009cd8:	e089      	b.n	8009dee <UART_SetConfig+0x1b56>
 8009cda:	bf00      	nop
 8009cdc:	58024400 	.word	0x58024400
 8009ce0:	03d09000 	.word	0x03d09000
 8009ce4:	0007a120 	.word	0x0007a120
 8009ce8:	07a12000 	.word	0x07a12000
 8009cec:	000f4240 	.word	0x000f4240
 8009cf0:	001e8480 	.word	0x001e8480
 8009cf4:	003d0900 	.word	0x003d0900
 8009cf8:	007a1200 	.word	0x007a1200
 8009cfc:	00a2c2aa 	.word	0x00a2c2aa
 8009d00:	00c35000 	.word	0x00c35000
 8009d04:	00f42400 	.word	0x00f42400
 8009d08:	01458554 	.word	0x01458554
 8009d0c:	01e84800 	.word	0x01e84800
 8009d10:	0001e848 	.word	0x0001e848
 8009d14:	0003d090 	.word	0x0003d090
 8009d18:	000a2c2a 	.word	0x000a2c2a
 8009d1c:	000c3500 	.word	0x000c3500
 8009d20:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d04f      	beq.n	8009dcc <UART_SetConfig+0x1b34>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d30:	2b01      	cmp	r3, #1
 8009d32:	d048      	beq.n	8009dc6 <UART_SetConfig+0x1b2e>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	d041      	beq.n	8009dc0 <UART_SetConfig+0x1b28>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d40:	2b03      	cmp	r3, #3
 8009d42:	d03a      	beq.n	8009dba <UART_SetConfig+0x1b22>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d48:	2b04      	cmp	r3, #4
 8009d4a:	d033      	beq.n	8009db4 <UART_SetConfig+0x1b1c>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d50:	2b05      	cmp	r3, #5
 8009d52:	d02c      	beq.n	8009dae <UART_SetConfig+0x1b16>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d58:	2b06      	cmp	r3, #6
 8009d5a:	d025      	beq.n	8009da8 <UART_SetConfig+0x1b10>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d60:	2b07      	cmp	r3, #7
 8009d62:	d01e      	beq.n	8009da2 <UART_SetConfig+0x1b0a>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d68:	2b08      	cmp	r3, #8
 8009d6a:	d017      	beq.n	8009d9c <UART_SetConfig+0x1b04>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d70:	2b09      	cmp	r3, #9
 8009d72:	d010      	beq.n	8009d96 <UART_SetConfig+0x1afe>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d78:	2b0a      	cmp	r3, #10
 8009d7a:	d009      	beq.n	8009d90 <UART_SetConfig+0x1af8>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d80:	2b0b      	cmp	r3, #11
 8009d82:	d102      	bne.n	8009d8a <UART_SetConfig+0x1af2>
 8009d84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d88:	e022      	b.n	8009dd0 <UART_SetConfig+0x1b38>
 8009d8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009d8e:	e01f      	b.n	8009dd0 <UART_SetConfig+0x1b38>
 8009d90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d94:	e01c      	b.n	8009dd0 <UART_SetConfig+0x1b38>
 8009d96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d9a:	e019      	b.n	8009dd0 <UART_SetConfig+0x1b38>
 8009d9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009da0:	e016      	b.n	8009dd0 <UART_SetConfig+0x1b38>
 8009da2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009da6:	e013      	b.n	8009dd0 <UART_SetConfig+0x1b38>
 8009da8:	f241 5354 	movw	r3, #5460	; 0x1554
 8009dac:	e010      	b.n	8009dd0 <UART_SetConfig+0x1b38>
 8009dae:	f641 1398 	movw	r3, #6552	; 0x1998
 8009db2:	e00d      	b.n	8009dd0 <UART_SetConfig+0x1b38>
 8009db4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009db8:	e00a      	b.n	8009dd0 <UART_SetConfig+0x1b38>
 8009dba:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8009dbe:	e007      	b.n	8009dd0 <UART_SetConfig+0x1b38>
 8009dc0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009dc4:	e004      	b.n	8009dd0 <UART_SetConfig+0x1b38>
 8009dc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009dca:	e001      	b.n	8009dd0 <UART_SetConfig+0x1b38>
 8009dcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	6852      	ldr	r2, [r2, #4]
 8009dd4:	0852      	lsrs	r2, r2, #1
 8009dd6:	441a      	add	r2, r3
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009de4:	e003      	b.n	8009dee <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 8009de6:	2301      	movs	r3, #1
 8009de8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8009dec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009df0:	2b0f      	cmp	r3, #15
 8009df2:	d916      	bls.n	8009e22 <UART_SetConfig+0x1b8a>
 8009df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009dfa:	d212      	bcs.n	8009e22 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dfe:	b29b      	uxth	r3, r3
 8009e00:	f023 030f 	bic.w	r3, r3, #15
 8009e04:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e08:	085b      	lsrs	r3, r3, #1
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	f003 0307 	and.w	r3, r3, #7
 8009e10:	b29a      	uxth	r2, r3
 8009e12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009e14:	4313      	orrs	r3, r2
 8009e16:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009e1e:	60da      	str	r2, [r3, #12]
 8009e20:	e3a3      	b.n	800a56a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8009e22:	2301      	movs	r3, #1
 8009e24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e28:	e39f      	b.n	800a56a <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 8009e2a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009e2e:	2b40      	cmp	r3, #64	; 0x40
 8009e30:	f200 8388 	bhi.w	800a544 <UART_SetConfig+0x22ac>
 8009e34:	a201      	add	r2, pc, #4	; (adr r2, 8009e3c <UART_SetConfig+0x1ba4>)
 8009e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e3a:	bf00      	nop
 8009e3c:	08009f41 	.word	0x08009f41
 8009e40:	08009ff7 	.word	0x08009ff7
 8009e44:	0800a545 	.word	0x0800a545
 8009e48:	0800a545 	.word	0x0800a545
 8009e4c:	0800a0ad 	.word	0x0800a0ad
 8009e50:	0800a545 	.word	0x0800a545
 8009e54:	0800a545 	.word	0x0800a545
 8009e58:	0800a545 	.word	0x0800a545
 8009e5c:	0800a167 	.word	0x0800a167
 8009e60:	0800a545 	.word	0x0800a545
 8009e64:	0800a545 	.word	0x0800a545
 8009e68:	0800a545 	.word	0x0800a545
 8009e6c:	0800a545 	.word	0x0800a545
 8009e70:	0800a545 	.word	0x0800a545
 8009e74:	0800a545 	.word	0x0800a545
 8009e78:	0800a545 	.word	0x0800a545
 8009e7c:	0800a221 	.word	0x0800a221
 8009e80:	0800a545 	.word	0x0800a545
 8009e84:	0800a545 	.word	0x0800a545
 8009e88:	0800a545 	.word	0x0800a545
 8009e8c:	0800a545 	.word	0x0800a545
 8009e90:	0800a545 	.word	0x0800a545
 8009e94:	0800a545 	.word	0x0800a545
 8009e98:	0800a545 	.word	0x0800a545
 8009e9c:	0800a545 	.word	0x0800a545
 8009ea0:	0800a545 	.word	0x0800a545
 8009ea4:	0800a545 	.word	0x0800a545
 8009ea8:	0800a545 	.word	0x0800a545
 8009eac:	0800a545 	.word	0x0800a545
 8009eb0:	0800a545 	.word	0x0800a545
 8009eb4:	0800a545 	.word	0x0800a545
 8009eb8:	0800a545 	.word	0x0800a545
 8009ebc:	0800a391 	.word	0x0800a391
 8009ec0:	0800a545 	.word	0x0800a545
 8009ec4:	0800a545 	.word	0x0800a545
 8009ec8:	0800a545 	.word	0x0800a545
 8009ecc:	0800a545 	.word	0x0800a545
 8009ed0:	0800a545 	.word	0x0800a545
 8009ed4:	0800a545 	.word	0x0800a545
 8009ed8:	0800a545 	.word	0x0800a545
 8009edc:	0800a545 	.word	0x0800a545
 8009ee0:	0800a545 	.word	0x0800a545
 8009ee4:	0800a545 	.word	0x0800a545
 8009ee8:	0800a545 	.word	0x0800a545
 8009eec:	0800a545 	.word	0x0800a545
 8009ef0:	0800a545 	.word	0x0800a545
 8009ef4:	0800a545 	.word	0x0800a545
 8009ef8:	0800a545 	.word	0x0800a545
 8009efc:	0800a545 	.word	0x0800a545
 8009f00:	0800a545 	.word	0x0800a545
 8009f04:	0800a545 	.word	0x0800a545
 8009f08:	0800a545 	.word	0x0800a545
 8009f0c:	0800a545 	.word	0x0800a545
 8009f10:	0800a545 	.word	0x0800a545
 8009f14:	0800a545 	.word	0x0800a545
 8009f18:	0800a545 	.word	0x0800a545
 8009f1c:	0800a545 	.word	0x0800a545
 8009f20:	0800a545 	.word	0x0800a545
 8009f24:	0800a545 	.word	0x0800a545
 8009f28:	0800a545 	.word	0x0800a545
 8009f2c:	0800a545 	.word	0x0800a545
 8009f30:	0800a545 	.word	0x0800a545
 8009f34:	0800a545 	.word	0x0800a545
 8009f38:	0800a545 	.word	0x0800a545
 8009f3c:	0800a485 	.word	0x0800a485
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f40:	f7fa fb80 	bl	8004644 <HAL_RCC_GetPCLK1Freq>
 8009f44:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d044      	beq.n	8009fd8 <UART_SetConfig+0x1d40>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d03e      	beq.n	8009fd4 <UART_SetConfig+0x1d3c>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5a:	2b02      	cmp	r3, #2
 8009f5c:	d038      	beq.n	8009fd0 <UART_SetConfig+0x1d38>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f62:	2b03      	cmp	r3, #3
 8009f64:	d032      	beq.n	8009fcc <UART_SetConfig+0x1d34>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f6a:	2b04      	cmp	r3, #4
 8009f6c:	d02c      	beq.n	8009fc8 <UART_SetConfig+0x1d30>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f72:	2b05      	cmp	r3, #5
 8009f74:	d026      	beq.n	8009fc4 <UART_SetConfig+0x1d2c>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f7a:	2b06      	cmp	r3, #6
 8009f7c:	d020      	beq.n	8009fc0 <UART_SetConfig+0x1d28>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f82:	2b07      	cmp	r3, #7
 8009f84:	d01a      	beq.n	8009fbc <UART_SetConfig+0x1d24>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f8a:	2b08      	cmp	r3, #8
 8009f8c:	d014      	beq.n	8009fb8 <UART_SetConfig+0x1d20>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f92:	2b09      	cmp	r3, #9
 8009f94:	d00e      	beq.n	8009fb4 <UART_SetConfig+0x1d1c>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f9a:	2b0a      	cmp	r3, #10
 8009f9c:	d008      	beq.n	8009fb0 <UART_SetConfig+0x1d18>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa2:	2b0b      	cmp	r3, #11
 8009fa4:	d102      	bne.n	8009fac <UART_SetConfig+0x1d14>
 8009fa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009faa:	e016      	b.n	8009fda <UART_SetConfig+0x1d42>
 8009fac:	2301      	movs	r3, #1
 8009fae:	e014      	b.n	8009fda <UART_SetConfig+0x1d42>
 8009fb0:	2380      	movs	r3, #128	; 0x80
 8009fb2:	e012      	b.n	8009fda <UART_SetConfig+0x1d42>
 8009fb4:	2340      	movs	r3, #64	; 0x40
 8009fb6:	e010      	b.n	8009fda <UART_SetConfig+0x1d42>
 8009fb8:	2320      	movs	r3, #32
 8009fba:	e00e      	b.n	8009fda <UART_SetConfig+0x1d42>
 8009fbc:	2310      	movs	r3, #16
 8009fbe:	e00c      	b.n	8009fda <UART_SetConfig+0x1d42>
 8009fc0:	230c      	movs	r3, #12
 8009fc2:	e00a      	b.n	8009fda <UART_SetConfig+0x1d42>
 8009fc4:	230a      	movs	r3, #10
 8009fc6:	e008      	b.n	8009fda <UART_SetConfig+0x1d42>
 8009fc8:	2308      	movs	r3, #8
 8009fca:	e006      	b.n	8009fda <UART_SetConfig+0x1d42>
 8009fcc:	2306      	movs	r3, #6
 8009fce:	e004      	b.n	8009fda <UART_SetConfig+0x1d42>
 8009fd0:	2304      	movs	r3, #4
 8009fd2:	e002      	b.n	8009fda <UART_SetConfig+0x1d42>
 8009fd4:	2302      	movs	r3, #2
 8009fd6:	e000      	b.n	8009fda <UART_SetConfig+0x1d42>
 8009fd8:	2301      	movs	r3, #1
 8009fda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	085b      	lsrs	r3, r3, #1
 8009fe6:	441a      	add	r2, r3
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009ff4:	e2aa      	b.n	800a54c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ff6:	f7fa fb3b 	bl	8004670 <HAL_RCC_GetPCLK2Freq>
 8009ffa:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a000:	2b00      	cmp	r3, #0
 800a002:	d044      	beq.n	800a08e <UART_SetConfig+0x1df6>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d03e      	beq.n	800a08a <UART_SetConfig+0x1df2>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a010:	2b02      	cmp	r3, #2
 800a012:	d038      	beq.n	800a086 <UART_SetConfig+0x1dee>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a018:	2b03      	cmp	r3, #3
 800a01a:	d032      	beq.n	800a082 <UART_SetConfig+0x1dea>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a020:	2b04      	cmp	r3, #4
 800a022:	d02c      	beq.n	800a07e <UART_SetConfig+0x1de6>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a028:	2b05      	cmp	r3, #5
 800a02a:	d026      	beq.n	800a07a <UART_SetConfig+0x1de2>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a030:	2b06      	cmp	r3, #6
 800a032:	d020      	beq.n	800a076 <UART_SetConfig+0x1dde>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a038:	2b07      	cmp	r3, #7
 800a03a:	d01a      	beq.n	800a072 <UART_SetConfig+0x1dda>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a040:	2b08      	cmp	r3, #8
 800a042:	d014      	beq.n	800a06e <UART_SetConfig+0x1dd6>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a048:	2b09      	cmp	r3, #9
 800a04a:	d00e      	beq.n	800a06a <UART_SetConfig+0x1dd2>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a050:	2b0a      	cmp	r3, #10
 800a052:	d008      	beq.n	800a066 <UART_SetConfig+0x1dce>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a058:	2b0b      	cmp	r3, #11
 800a05a:	d102      	bne.n	800a062 <UART_SetConfig+0x1dca>
 800a05c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a060:	e016      	b.n	800a090 <UART_SetConfig+0x1df8>
 800a062:	2301      	movs	r3, #1
 800a064:	e014      	b.n	800a090 <UART_SetConfig+0x1df8>
 800a066:	2380      	movs	r3, #128	; 0x80
 800a068:	e012      	b.n	800a090 <UART_SetConfig+0x1df8>
 800a06a:	2340      	movs	r3, #64	; 0x40
 800a06c:	e010      	b.n	800a090 <UART_SetConfig+0x1df8>
 800a06e:	2320      	movs	r3, #32
 800a070:	e00e      	b.n	800a090 <UART_SetConfig+0x1df8>
 800a072:	2310      	movs	r3, #16
 800a074:	e00c      	b.n	800a090 <UART_SetConfig+0x1df8>
 800a076:	230c      	movs	r3, #12
 800a078:	e00a      	b.n	800a090 <UART_SetConfig+0x1df8>
 800a07a:	230a      	movs	r3, #10
 800a07c:	e008      	b.n	800a090 <UART_SetConfig+0x1df8>
 800a07e:	2308      	movs	r3, #8
 800a080:	e006      	b.n	800a090 <UART_SetConfig+0x1df8>
 800a082:	2306      	movs	r3, #6
 800a084:	e004      	b.n	800a090 <UART_SetConfig+0x1df8>
 800a086:	2304      	movs	r3, #4
 800a088:	e002      	b.n	800a090 <UART_SetConfig+0x1df8>
 800a08a:	2302      	movs	r3, #2
 800a08c:	e000      	b.n	800a090 <UART_SetConfig+0x1df8>
 800a08e:	2301      	movs	r3, #1
 800a090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a092:	fbb2 f2f3 	udiv	r2, r2, r3
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	085b      	lsrs	r3, r3, #1
 800a09c:	441a      	add	r2, r3
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a0aa:	e24f      	b.n	800a54c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0ac:	f107 0318 	add.w	r3, r7, #24
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f7fb fc5f 	bl	8005974 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0b6:	69fa      	ldr	r2, [r7, #28]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d044      	beq.n	800a14a <UART_SetConfig+0x1eb2>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d03e      	beq.n	800a146 <UART_SetConfig+0x1eae>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0cc:	2b02      	cmp	r3, #2
 800a0ce:	d038      	beq.n	800a142 <UART_SetConfig+0x1eaa>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d4:	2b03      	cmp	r3, #3
 800a0d6:	d032      	beq.n	800a13e <UART_SetConfig+0x1ea6>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0dc:	2b04      	cmp	r3, #4
 800a0de:	d02c      	beq.n	800a13a <UART_SetConfig+0x1ea2>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e4:	2b05      	cmp	r3, #5
 800a0e6:	d026      	beq.n	800a136 <UART_SetConfig+0x1e9e>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ec:	2b06      	cmp	r3, #6
 800a0ee:	d020      	beq.n	800a132 <UART_SetConfig+0x1e9a>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f4:	2b07      	cmp	r3, #7
 800a0f6:	d01a      	beq.n	800a12e <UART_SetConfig+0x1e96>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0fc:	2b08      	cmp	r3, #8
 800a0fe:	d014      	beq.n	800a12a <UART_SetConfig+0x1e92>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a104:	2b09      	cmp	r3, #9
 800a106:	d00e      	beq.n	800a126 <UART_SetConfig+0x1e8e>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10c:	2b0a      	cmp	r3, #10
 800a10e:	d008      	beq.n	800a122 <UART_SetConfig+0x1e8a>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a114:	2b0b      	cmp	r3, #11
 800a116:	d102      	bne.n	800a11e <UART_SetConfig+0x1e86>
 800a118:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a11c:	e016      	b.n	800a14c <UART_SetConfig+0x1eb4>
 800a11e:	2301      	movs	r3, #1
 800a120:	e014      	b.n	800a14c <UART_SetConfig+0x1eb4>
 800a122:	2380      	movs	r3, #128	; 0x80
 800a124:	e012      	b.n	800a14c <UART_SetConfig+0x1eb4>
 800a126:	2340      	movs	r3, #64	; 0x40
 800a128:	e010      	b.n	800a14c <UART_SetConfig+0x1eb4>
 800a12a:	2320      	movs	r3, #32
 800a12c:	e00e      	b.n	800a14c <UART_SetConfig+0x1eb4>
 800a12e:	2310      	movs	r3, #16
 800a130:	e00c      	b.n	800a14c <UART_SetConfig+0x1eb4>
 800a132:	230c      	movs	r3, #12
 800a134:	e00a      	b.n	800a14c <UART_SetConfig+0x1eb4>
 800a136:	230a      	movs	r3, #10
 800a138:	e008      	b.n	800a14c <UART_SetConfig+0x1eb4>
 800a13a:	2308      	movs	r3, #8
 800a13c:	e006      	b.n	800a14c <UART_SetConfig+0x1eb4>
 800a13e:	2306      	movs	r3, #6
 800a140:	e004      	b.n	800a14c <UART_SetConfig+0x1eb4>
 800a142:	2304      	movs	r3, #4
 800a144:	e002      	b.n	800a14c <UART_SetConfig+0x1eb4>
 800a146:	2302      	movs	r3, #2
 800a148:	e000      	b.n	800a14c <UART_SetConfig+0x1eb4>
 800a14a:	2301      	movs	r3, #1
 800a14c:	fbb2 f2f3 	udiv	r2, r2, r3
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	085b      	lsrs	r3, r3, #1
 800a156:	441a      	add	r2, r3
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a160:	b29b      	uxth	r3, r3
 800a162:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a164:	e1f2      	b.n	800a54c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a166:	f107 030c 	add.w	r3, r7, #12
 800a16a:	4618      	mov	r0, r3
 800a16c:	f7fb fd4e 	bl	8005c0c <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a170:	693a      	ldr	r2, [r7, #16]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a176:	2b00      	cmp	r3, #0
 800a178:	d044      	beq.n	800a204 <UART_SetConfig+0x1f6c>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a17e:	2b01      	cmp	r3, #1
 800a180:	d03e      	beq.n	800a200 <UART_SetConfig+0x1f68>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a186:	2b02      	cmp	r3, #2
 800a188:	d038      	beq.n	800a1fc <UART_SetConfig+0x1f64>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a18e:	2b03      	cmp	r3, #3
 800a190:	d032      	beq.n	800a1f8 <UART_SetConfig+0x1f60>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a196:	2b04      	cmp	r3, #4
 800a198:	d02c      	beq.n	800a1f4 <UART_SetConfig+0x1f5c>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19e:	2b05      	cmp	r3, #5
 800a1a0:	d026      	beq.n	800a1f0 <UART_SetConfig+0x1f58>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a6:	2b06      	cmp	r3, #6
 800a1a8:	d020      	beq.n	800a1ec <UART_SetConfig+0x1f54>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ae:	2b07      	cmp	r3, #7
 800a1b0:	d01a      	beq.n	800a1e8 <UART_SetConfig+0x1f50>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b6:	2b08      	cmp	r3, #8
 800a1b8:	d014      	beq.n	800a1e4 <UART_SetConfig+0x1f4c>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1be:	2b09      	cmp	r3, #9
 800a1c0:	d00e      	beq.n	800a1e0 <UART_SetConfig+0x1f48>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c6:	2b0a      	cmp	r3, #10
 800a1c8:	d008      	beq.n	800a1dc <UART_SetConfig+0x1f44>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ce:	2b0b      	cmp	r3, #11
 800a1d0:	d102      	bne.n	800a1d8 <UART_SetConfig+0x1f40>
 800a1d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a1d6:	e016      	b.n	800a206 <UART_SetConfig+0x1f6e>
 800a1d8:	2301      	movs	r3, #1
 800a1da:	e014      	b.n	800a206 <UART_SetConfig+0x1f6e>
 800a1dc:	2380      	movs	r3, #128	; 0x80
 800a1de:	e012      	b.n	800a206 <UART_SetConfig+0x1f6e>
 800a1e0:	2340      	movs	r3, #64	; 0x40
 800a1e2:	e010      	b.n	800a206 <UART_SetConfig+0x1f6e>
 800a1e4:	2320      	movs	r3, #32
 800a1e6:	e00e      	b.n	800a206 <UART_SetConfig+0x1f6e>
 800a1e8:	2310      	movs	r3, #16
 800a1ea:	e00c      	b.n	800a206 <UART_SetConfig+0x1f6e>
 800a1ec:	230c      	movs	r3, #12
 800a1ee:	e00a      	b.n	800a206 <UART_SetConfig+0x1f6e>
 800a1f0:	230a      	movs	r3, #10
 800a1f2:	e008      	b.n	800a206 <UART_SetConfig+0x1f6e>
 800a1f4:	2308      	movs	r3, #8
 800a1f6:	e006      	b.n	800a206 <UART_SetConfig+0x1f6e>
 800a1f8:	2306      	movs	r3, #6
 800a1fa:	e004      	b.n	800a206 <UART_SetConfig+0x1f6e>
 800a1fc:	2304      	movs	r3, #4
 800a1fe:	e002      	b.n	800a206 <UART_SetConfig+0x1f6e>
 800a200:	2302      	movs	r3, #2
 800a202:	e000      	b.n	800a206 <UART_SetConfig+0x1f6e>
 800a204:	2301      	movs	r3, #1
 800a206:	fbb2 f2f3 	udiv	r2, r2, r3
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	085b      	lsrs	r3, r3, #1
 800a210:	441a      	add	r2, r3
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	fbb2 f3f3 	udiv	r3, r2, r3
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a21e:	e195      	b.n	800a54c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a220:	4b87      	ldr	r3, [pc, #540]	; (800a440 <UART_SetConfig+0x21a8>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f003 0320 	and.w	r3, r3, #32
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d05d      	beq.n	800a2e8 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a22c:	4b84      	ldr	r3, [pc, #528]	; (800a440 <UART_SetConfig+0x21a8>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	08db      	lsrs	r3, r3, #3
 800a232:	f003 0303 	and.w	r3, r3, #3
 800a236:	4a83      	ldr	r2, [pc, #524]	; (800a444 <UART_SetConfig+0x21ac>)
 800a238:	40da      	lsrs	r2, r3
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d044      	beq.n	800a2cc <UART_SetConfig+0x2034>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a246:	2b01      	cmp	r3, #1
 800a248:	d03e      	beq.n	800a2c8 <UART_SetConfig+0x2030>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a24e:	2b02      	cmp	r3, #2
 800a250:	d038      	beq.n	800a2c4 <UART_SetConfig+0x202c>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a256:	2b03      	cmp	r3, #3
 800a258:	d032      	beq.n	800a2c0 <UART_SetConfig+0x2028>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a25e:	2b04      	cmp	r3, #4
 800a260:	d02c      	beq.n	800a2bc <UART_SetConfig+0x2024>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a266:	2b05      	cmp	r3, #5
 800a268:	d026      	beq.n	800a2b8 <UART_SetConfig+0x2020>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26e:	2b06      	cmp	r3, #6
 800a270:	d020      	beq.n	800a2b4 <UART_SetConfig+0x201c>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a276:	2b07      	cmp	r3, #7
 800a278:	d01a      	beq.n	800a2b0 <UART_SetConfig+0x2018>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a27e:	2b08      	cmp	r3, #8
 800a280:	d014      	beq.n	800a2ac <UART_SetConfig+0x2014>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a286:	2b09      	cmp	r3, #9
 800a288:	d00e      	beq.n	800a2a8 <UART_SetConfig+0x2010>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28e:	2b0a      	cmp	r3, #10
 800a290:	d008      	beq.n	800a2a4 <UART_SetConfig+0x200c>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a296:	2b0b      	cmp	r3, #11
 800a298:	d102      	bne.n	800a2a0 <UART_SetConfig+0x2008>
 800a29a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a29e:	e016      	b.n	800a2ce <UART_SetConfig+0x2036>
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	e014      	b.n	800a2ce <UART_SetConfig+0x2036>
 800a2a4:	2380      	movs	r3, #128	; 0x80
 800a2a6:	e012      	b.n	800a2ce <UART_SetConfig+0x2036>
 800a2a8:	2340      	movs	r3, #64	; 0x40
 800a2aa:	e010      	b.n	800a2ce <UART_SetConfig+0x2036>
 800a2ac:	2320      	movs	r3, #32
 800a2ae:	e00e      	b.n	800a2ce <UART_SetConfig+0x2036>
 800a2b0:	2310      	movs	r3, #16
 800a2b2:	e00c      	b.n	800a2ce <UART_SetConfig+0x2036>
 800a2b4:	230c      	movs	r3, #12
 800a2b6:	e00a      	b.n	800a2ce <UART_SetConfig+0x2036>
 800a2b8:	230a      	movs	r3, #10
 800a2ba:	e008      	b.n	800a2ce <UART_SetConfig+0x2036>
 800a2bc:	2308      	movs	r3, #8
 800a2be:	e006      	b.n	800a2ce <UART_SetConfig+0x2036>
 800a2c0:	2306      	movs	r3, #6
 800a2c2:	e004      	b.n	800a2ce <UART_SetConfig+0x2036>
 800a2c4:	2304      	movs	r3, #4
 800a2c6:	e002      	b.n	800a2ce <UART_SetConfig+0x2036>
 800a2c8:	2302      	movs	r3, #2
 800a2ca:	e000      	b.n	800a2ce <UART_SetConfig+0x2036>
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	fbb2 f2f3 	udiv	r2, r2, r3
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	085b      	lsrs	r3, r3, #1
 800a2d8:	441a      	add	r2, r3
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800a2e6:	e131      	b.n	800a54c <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d043      	beq.n	800a378 <UART_SetConfig+0x20e0>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f4:	2b01      	cmp	r3, #1
 800a2f6:	d03d      	beq.n	800a374 <UART_SetConfig+0x20dc>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2fc:	2b02      	cmp	r3, #2
 800a2fe:	d037      	beq.n	800a370 <UART_SetConfig+0x20d8>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a304:	2b03      	cmp	r3, #3
 800a306:	d031      	beq.n	800a36c <UART_SetConfig+0x20d4>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a30c:	2b04      	cmp	r3, #4
 800a30e:	d02b      	beq.n	800a368 <UART_SetConfig+0x20d0>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a314:	2b05      	cmp	r3, #5
 800a316:	d025      	beq.n	800a364 <UART_SetConfig+0x20cc>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a31c:	2b06      	cmp	r3, #6
 800a31e:	d01f      	beq.n	800a360 <UART_SetConfig+0x20c8>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a324:	2b07      	cmp	r3, #7
 800a326:	d019      	beq.n	800a35c <UART_SetConfig+0x20c4>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a32c:	2b08      	cmp	r3, #8
 800a32e:	d013      	beq.n	800a358 <UART_SetConfig+0x20c0>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a334:	2b09      	cmp	r3, #9
 800a336:	d00d      	beq.n	800a354 <UART_SetConfig+0x20bc>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a33c:	2b0a      	cmp	r3, #10
 800a33e:	d007      	beq.n	800a350 <UART_SetConfig+0x20b8>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a344:	2b0b      	cmp	r3, #11
 800a346:	d101      	bne.n	800a34c <UART_SetConfig+0x20b4>
 800a348:	4b3f      	ldr	r3, [pc, #252]	; (800a448 <UART_SetConfig+0x21b0>)
 800a34a:	e016      	b.n	800a37a <UART_SetConfig+0x20e2>
 800a34c:	4b3d      	ldr	r3, [pc, #244]	; (800a444 <UART_SetConfig+0x21ac>)
 800a34e:	e014      	b.n	800a37a <UART_SetConfig+0x20e2>
 800a350:	4b3e      	ldr	r3, [pc, #248]	; (800a44c <UART_SetConfig+0x21b4>)
 800a352:	e012      	b.n	800a37a <UART_SetConfig+0x20e2>
 800a354:	4b3e      	ldr	r3, [pc, #248]	; (800a450 <UART_SetConfig+0x21b8>)
 800a356:	e010      	b.n	800a37a <UART_SetConfig+0x20e2>
 800a358:	4b3e      	ldr	r3, [pc, #248]	; (800a454 <UART_SetConfig+0x21bc>)
 800a35a:	e00e      	b.n	800a37a <UART_SetConfig+0x20e2>
 800a35c:	4b3e      	ldr	r3, [pc, #248]	; (800a458 <UART_SetConfig+0x21c0>)
 800a35e:	e00c      	b.n	800a37a <UART_SetConfig+0x20e2>
 800a360:	4b3e      	ldr	r3, [pc, #248]	; (800a45c <UART_SetConfig+0x21c4>)
 800a362:	e00a      	b.n	800a37a <UART_SetConfig+0x20e2>
 800a364:	4b3e      	ldr	r3, [pc, #248]	; (800a460 <UART_SetConfig+0x21c8>)
 800a366:	e008      	b.n	800a37a <UART_SetConfig+0x20e2>
 800a368:	4b3e      	ldr	r3, [pc, #248]	; (800a464 <UART_SetConfig+0x21cc>)
 800a36a:	e006      	b.n	800a37a <UART_SetConfig+0x20e2>
 800a36c:	4b3e      	ldr	r3, [pc, #248]	; (800a468 <UART_SetConfig+0x21d0>)
 800a36e:	e004      	b.n	800a37a <UART_SetConfig+0x20e2>
 800a370:	4b3e      	ldr	r3, [pc, #248]	; (800a46c <UART_SetConfig+0x21d4>)
 800a372:	e002      	b.n	800a37a <UART_SetConfig+0x20e2>
 800a374:	4b3e      	ldr	r3, [pc, #248]	; (800a470 <UART_SetConfig+0x21d8>)
 800a376:	e000      	b.n	800a37a <UART_SetConfig+0x20e2>
 800a378:	4b32      	ldr	r3, [pc, #200]	; (800a444 <UART_SetConfig+0x21ac>)
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	6852      	ldr	r2, [r2, #4]
 800a37e:	0852      	lsrs	r2, r2, #1
 800a380:	441a      	add	r2, r3
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	fbb2 f3f3 	udiv	r3, r2, r3
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a38e:	e0dd      	b.n	800a54c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a394:	2b00      	cmp	r3, #0
 800a396:	d046      	beq.n	800a426 <UART_SetConfig+0x218e>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a39c:	2b01      	cmp	r3, #1
 800a39e:	d040      	beq.n	800a422 <UART_SetConfig+0x218a>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a4:	2b02      	cmp	r3, #2
 800a3a6:	d03a      	beq.n	800a41e <UART_SetConfig+0x2186>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ac:	2b03      	cmp	r3, #3
 800a3ae:	d034      	beq.n	800a41a <UART_SetConfig+0x2182>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b4:	2b04      	cmp	r3, #4
 800a3b6:	d02e      	beq.n	800a416 <UART_SetConfig+0x217e>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3bc:	2b05      	cmp	r3, #5
 800a3be:	d028      	beq.n	800a412 <UART_SetConfig+0x217a>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c4:	2b06      	cmp	r3, #6
 800a3c6:	d022      	beq.n	800a40e <UART_SetConfig+0x2176>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3cc:	2b07      	cmp	r3, #7
 800a3ce:	d01c      	beq.n	800a40a <UART_SetConfig+0x2172>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d4:	2b08      	cmp	r3, #8
 800a3d6:	d016      	beq.n	800a406 <UART_SetConfig+0x216e>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3dc:	2b09      	cmp	r3, #9
 800a3de:	d00f      	beq.n	800a400 <UART_SetConfig+0x2168>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e4:	2b0a      	cmp	r3, #10
 800a3e6:	d008      	beq.n	800a3fa <UART_SetConfig+0x2162>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ec:	2b0b      	cmp	r3, #11
 800a3ee:	d102      	bne.n	800a3f6 <UART_SetConfig+0x215e>
 800a3f0:	f643 5309 	movw	r3, #15625	; 0x3d09
 800a3f4:	e018      	b.n	800a428 <UART_SetConfig+0x2190>
 800a3f6:	4b18      	ldr	r3, [pc, #96]	; (800a458 <UART_SetConfig+0x21c0>)
 800a3f8:	e016      	b.n	800a428 <UART_SetConfig+0x2190>
 800a3fa:	f647 2312 	movw	r3, #31250	; 0x7a12
 800a3fe:	e013      	b.n	800a428 <UART_SetConfig+0x2190>
 800a400:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a404:	e010      	b.n	800a428 <UART_SetConfig+0x2190>
 800a406:	4b1b      	ldr	r3, [pc, #108]	; (800a474 <UART_SetConfig+0x21dc>)
 800a408:	e00e      	b.n	800a428 <UART_SetConfig+0x2190>
 800a40a:	4b0f      	ldr	r3, [pc, #60]	; (800a448 <UART_SetConfig+0x21b0>)
 800a40c:	e00c      	b.n	800a428 <UART_SetConfig+0x2190>
 800a40e:	4b1a      	ldr	r3, [pc, #104]	; (800a478 <UART_SetConfig+0x21e0>)
 800a410:	e00a      	b.n	800a428 <UART_SetConfig+0x2190>
 800a412:	4b1a      	ldr	r3, [pc, #104]	; (800a47c <UART_SetConfig+0x21e4>)
 800a414:	e008      	b.n	800a428 <UART_SetConfig+0x2190>
 800a416:	4b0d      	ldr	r3, [pc, #52]	; (800a44c <UART_SetConfig+0x21b4>)
 800a418:	e006      	b.n	800a428 <UART_SetConfig+0x2190>
 800a41a:	4b19      	ldr	r3, [pc, #100]	; (800a480 <UART_SetConfig+0x21e8>)
 800a41c:	e004      	b.n	800a428 <UART_SetConfig+0x2190>
 800a41e:	4b0c      	ldr	r3, [pc, #48]	; (800a450 <UART_SetConfig+0x21b8>)
 800a420:	e002      	b.n	800a428 <UART_SetConfig+0x2190>
 800a422:	4b0c      	ldr	r3, [pc, #48]	; (800a454 <UART_SetConfig+0x21bc>)
 800a424:	e000      	b.n	800a428 <UART_SetConfig+0x2190>
 800a426:	4b0c      	ldr	r3, [pc, #48]	; (800a458 <UART_SetConfig+0x21c0>)
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	6852      	ldr	r2, [r2, #4]
 800a42c:	0852      	lsrs	r2, r2, #1
 800a42e:	441a      	add	r2, r3
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	fbb2 f3f3 	udiv	r3, r2, r3
 800a438:	b29b      	uxth	r3, r3
 800a43a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a43c:	e086      	b.n	800a54c <UART_SetConfig+0x22b4>
 800a43e:	bf00      	nop
 800a440:	58024400 	.word	0x58024400
 800a444:	03d09000 	.word	0x03d09000
 800a448:	0003d090 	.word	0x0003d090
 800a44c:	0007a120 	.word	0x0007a120
 800a450:	000f4240 	.word	0x000f4240
 800a454:	001e8480 	.word	0x001e8480
 800a458:	003d0900 	.word	0x003d0900
 800a45c:	00516155 	.word	0x00516155
 800a460:	0061a800 	.word	0x0061a800
 800a464:	007a1200 	.word	0x007a1200
 800a468:	00a2c2aa 	.word	0x00a2c2aa
 800a46c:	00f42400 	.word	0x00f42400
 800a470:	01e84800 	.word	0x01e84800
 800a474:	0001e848 	.word	0x0001e848
 800a478:	00051615 	.word	0x00051615
 800a47c:	00061a80 	.word	0x00061a80
 800a480:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d04e      	beq.n	800a52a <UART_SetConfig+0x2292>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a490:	2b01      	cmp	r3, #1
 800a492:	d047      	beq.n	800a524 <UART_SetConfig+0x228c>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a498:	2b02      	cmp	r3, #2
 800a49a:	d040      	beq.n	800a51e <UART_SetConfig+0x2286>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a0:	2b03      	cmp	r3, #3
 800a4a2:	d039      	beq.n	800a518 <UART_SetConfig+0x2280>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a8:	2b04      	cmp	r3, #4
 800a4aa:	d032      	beq.n	800a512 <UART_SetConfig+0x227a>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b0:	2b05      	cmp	r3, #5
 800a4b2:	d02b      	beq.n	800a50c <UART_SetConfig+0x2274>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b8:	2b06      	cmp	r3, #6
 800a4ba:	d024      	beq.n	800a506 <UART_SetConfig+0x226e>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c0:	2b07      	cmp	r3, #7
 800a4c2:	d01d      	beq.n	800a500 <UART_SetConfig+0x2268>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c8:	2b08      	cmp	r3, #8
 800a4ca:	d016      	beq.n	800a4fa <UART_SetConfig+0x2262>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d0:	2b09      	cmp	r3, #9
 800a4d2:	d00f      	beq.n	800a4f4 <UART_SetConfig+0x225c>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d8:	2b0a      	cmp	r3, #10
 800a4da:	d008      	beq.n	800a4ee <UART_SetConfig+0x2256>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e0:	2b0b      	cmp	r3, #11
 800a4e2:	d101      	bne.n	800a4e8 <UART_SetConfig+0x2250>
 800a4e4:	2380      	movs	r3, #128	; 0x80
 800a4e6:	e022      	b.n	800a52e <UART_SetConfig+0x2296>
 800a4e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4ec:	e01f      	b.n	800a52e <UART_SetConfig+0x2296>
 800a4ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a4f2:	e01c      	b.n	800a52e <UART_SetConfig+0x2296>
 800a4f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4f8:	e019      	b.n	800a52e <UART_SetConfig+0x2296>
 800a4fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4fe:	e016      	b.n	800a52e <UART_SetConfig+0x2296>
 800a500:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a504:	e013      	b.n	800a52e <UART_SetConfig+0x2296>
 800a506:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800a50a:	e010      	b.n	800a52e <UART_SetConfig+0x2296>
 800a50c:	f640 43cc 	movw	r3, #3276	; 0xccc
 800a510:	e00d      	b.n	800a52e <UART_SetConfig+0x2296>
 800a512:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a516:	e00a      	b.n	800a52e <UART_SetConfig+0x2296>
 800a518:	f241 5355 	movw	r3, #5461	; 0x1555
 800a51c:	e007      	b.n	800a52e <UART_SetConfig+0x2296>
 800a51e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a522:	e004      	b.n	800a52e <UART_SetConfig+0x2296>
 800a524:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a528:	e001      	b.n	800a52e <UART_SetConfig+0x2296>
 800a52a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	6852      	ldr	r2, [r2, #4]
 800a532:	0852      	lsrs	r2, r2, #1
 800a534:	441a      	add	r2, r3
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a53e:	b29b      	uxth	r3, r3
 800a540:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a542:	e003      	b.n	800a54c <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800a544:	2301      	movs	r3, #1
 800a546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800a54a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a54c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a54e:	2b0f      	cmp	r3, #15
 800a550:	d908      	bls.n	800a564 <UART_SetConfig+0x22cc>
 800a552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a558:	d204      	bcs.n	800a564 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a560:	60da      	str	r2, [r3, #12]
 800a562:	e002      	b.n	800a56a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800a564:	2301      	movs	r3, #1
 800a566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2201      	movs	r2, #1
 800a56e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2201      	movs	r2, #1
 800a576:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2200      	movs	r2, #0
 800a57e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2200      	movs	r2, #0
 800a584:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800a586:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3740      	adds	r7, #64	; 0x40
 800a58e:	46bd      	mov	sp, r7
 800a590:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800a594 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a0:	f003 0301 	and.w	r3, r3, #1
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d00a      	beq.n	800a5be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	430a      	orrs	r2, r1
 800a5bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5c2:	f003 0302 	and.w	r3, r3, #2
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00a      	beq.n	800a5e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	430a      	orrs	r2, r1
 800a5de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5e4:	f003 0304 	and.w	r3, r3, #4
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d00a      	beq.n	800a602 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	430a      	orrs	r2, r1
 800a600:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a606:	f003 0308 	and.w	r3, r3, #8
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d00a      	beq.n	800a624 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	430a      	orrs	r2, r1
 800a622:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a628:	f003 0310 	and.w	r3, r3, #16
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d00a      	beq.n	800a646 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	689b      	ldr	r3, [r3, #8]
 800a636:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	430a      	orrs	r2, r1
 800a644:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a64a:	f003 0320 	and.w	r3, r3, #32
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d00a      	beq.n	800a668 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	430a      	orrs	r2, r1
 800a666:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a66c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a670:	2b00      	cmp	r3, #0
 800a672:	d01a      	beq.n	800a6aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	430a      	orrs	r2, r1
 800a688:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a68e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a692:	d10a      	bne.n	800a6aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	430a      	orrs	r2, r1
 800a6a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d00a      	beq.n	800a6cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	685b      	ldr	r3, [r3, #4]
 800a6bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	430a      	orrs	r2, r1
 800a6ca:	605a      	str	r2, [r3, #4]
  }
}
 800a6cc:	bf00      	nop
 800a6ce:	370c      	adds	r7, #12
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr

0800a6d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b086      	sub	sp, #24
 800a6dc:	af02      	add	r7, sp, #8
 800a6de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a6e8:	f7f6 fe80 	bl	80013ec <HAL_GetTick>
 800a6ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f003 0308 	and.w	r3, r3, #8
 800a6f8:	2b08      	cmp	r3, #8
 800a6fa:	d10e      	bne.n	800a71a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a700:	9300      	str	r3, [sp, #0]
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2200      	movs	r2, #0
 800a706:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f000 f82c 	bl	800a768 <UART_WaitOnFlagUntilTimeout>
 800a710:	4603      	mov	r3, r0
 800a712:	2b00      	cmp	r3, #0
 800a714:	d001      	beq.n	800a71a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a716:	2303      	movs	r3, #3
 800a718:	e022      	b.n	800a760 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f003 0304 	and.w	r3, r3, #4
 800a724:	2b04      	cmp	r3, #4
 800a726:	d10e      	bne.n	800a746 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a728:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a72c:	9300      	str	r3, [sp, #0]
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2200      	movs	r2, #0
 800a732:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f000 f816 	bl	800a768 <UART_WaitOnFlagUntilTimeout>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d001      	beq.n	800a746 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a742:	2303      	movs	r3, #3
 800a744:	e00c      	b.n	800a760 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2220      	movs	r2, #32
 800a74a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2220      	movs	r2, #32
 800a752:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2200      	movs	r2, #0
 800a75a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a75e:	2300      	movs	r3, #0
}
 800a760:	4618      	mov	r0, r3
 800a762:	3710      	adds	r7, #16
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b084      	sub	sp, #16
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	60f8      	str	r0, [r7, #12]
 800a770:	60b9      	str	r1, [r7, #8]
 800a772:	603b      	str	r3, [r7, #0]
 800a774:	4613      	mov	r3, r2
 800a776:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a778:	e062      	b.n	800a840 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a780:	d05e      	beq.n	800a840 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a782:	f7f6 fe33 	bl	80013ec <HAL_GetTick>
 800a786:	4602      	mov	r2, r0
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	1ad3      	subs	r3, r2, r3
 800a78c:	69ba      	ldr	r2, [r7, #24]
 800a78e:	429a      	cmp	r2, r3
 800a790:	d302      	bcc.n	800a798 <UART_WaitOnFlagUntilTimeout+0x30>
 800a792:	69bb      	ldr	r3, [r7, #24]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d11d      	bne.n	800a7d4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	681a      	ldr	r2, [r3, #0]
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a7a6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	689a      	ldr	r2, [r3, #8]
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f022 0201 	bic.w	r2, r2, #1
 800a7b6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	2220      	movs	r2, #32
 800a7bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2220      	movs	r2, #32
 800a7c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a7d0:	2303      	movs	r3, #3
 800a7d2:	e045      	b.n	800a860 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f003 0304 	and.w	r3, r3, #4
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d02e      	beq.n	800a840 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	69db      	ldr	r3, [r3, #28]
 800a7e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a7ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7f0:	d126      	bne.n	800a840 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a7fa:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	681a      	ldr	r2, [r3, #0]
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a80a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	689a      	ldr	r2, [r3, #8]
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f022 0201 	bic.w	r2, r2, #1
 800a81a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2220      	movs	r2, #32
 800a820:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2220      	movs	r2, #32
 800a828:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2220      	movs	r2, #32
 800a830:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2200      	movs	r2, #0
 800a838:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800a83c:	2303      	movs	r3, #3
 800a83e:	e00f      	b.n	800a860 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	69da      	ldr	r2, [r3, #28]
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	4013      	ands	r3, r2
 800a84a:	68ba      	ldr	r2, [r7, #8]
 800a84c:	429a      	cmp	r2, r3
 800a84e:	bf0c      	ite	eq
 800a850:	2301      	moveq	r3, #1
 800a852:	2300      	movne	r3, #0
 800a854:	b2db      	uxtb	r3, r3
 800a856:	461a      	mov	r2, r3
 800a858:	79fb      	ldrb	r3, [r7, #7]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d08d      	beq.n	800a77a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a85e:	2300      	movs	r3, #0
}
 800a860:	4618      	mov	r0, r3
 800a862:	3710      	adds	r7, #16
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a868:	b480      	push	{r7}
 800a86a:	b085      	sub	sp, #20
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a876:	2b01      	cmp	r3, #1
 800a878:	d101      	bne.n	800a87e <HAL_UARTEx_DisableFifoMode+0x16>
 800a87a:	2302      	movs	r3, #2
 800a87c:	e027      	b.n	800a8ce <HAL_UARTEx_DisableFifoMode+0x66>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2201      	movs	r2, #1
 800a882:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2224      	movs	r2, #36	; 0x24
 800a88a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f022 0201 	bic.w	r2, r2, #1
 800a8a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a8ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	68fa      	ldr	r2, [r7, #12]
 800a8ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2220      	movs	r2, #32
 800a8c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a8cc:	2300      	movs	r3, #0
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3714      	adds	r7, #20
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d8:	4770      	bx	lr

0800a8da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8da:	b580      	push	{r7, lr}
 800a8dc:	b084      	sub	sp, #16
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
 800a8e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a8ea:	2b01      	cmp	r3, #1
 800a8ec:	d101      	bne.n	800a8f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a8ee:	2302      	movs	r3, #2
 800a8f0:	e02d      	b.n	800a94e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2224      	movs	r2, #36	; 0x24
 800a8fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	681a      	ldr	r2, [r3, #0]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f022 0201 	bic.w	r2, r2, #1
 800a918:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	689b      	ldr	r3, [r3, #8]
 800a920:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	683a      	ldr	r2, [r7, #0]
 800a92a:	430a      	orrs	r2, r1
 800a92c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 f850 	bl	800a9d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	68fa      	ldr	r2, [r7, #12]
 800a93a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2220      	movs	r2, #32
 800a940:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2200      	movs	r2, #0
 800a948:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a94c:	2300      	movs	r3, #0
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3710      	adds	r7, #16
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}

0800a956 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a956:	b580      	push	{r7, lr}
 800a958:	b084      	sub	sp, #16
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
 800a95e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a966:	2b01      	cmp	r3, #1
 800a968:	d101      	bne.n	800a96e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a96a:	2302      	movs	r3, #2
 800a96c:	e02d      	b.n	800a9ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2201      	movs	r2, #1
 800a972:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2224      	movs	r2, #36	; 0x24
 800a97a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f022 0201 	bic.w	r2, r2, #1
 800a994:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	683a      	ldr	r2, [r7, #0]
 800a9a6:	430a      	orrs	r2, r1
 800a9a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 f812 	bl	800a9d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	68fa      	ldr	r2, [r7, #12]
 800a9b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2220      	movs	r2, #32
 800a9bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a9c8:	2300      	movs	r3, #0
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3710      	adds	r7, #16
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
	...

0800a9d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b089      	sub	sp, #36	; 0x24
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a9dc:	4a2f      	ldr	r2, [pc, #188]	; (800aa9c <UARTEx_SetNbDataToProcess+0xc8>)
 800a9de:	f107 0314 	add.w	r3, r7, #20
 800a9e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a9e6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a9ea:	4a2d      	ldr	r2, [pc, #180]	; (800aaa0 <UARTEx_SetNbDataToProcess+0xcc>)
 800a9ec:	f107 030c 	add.w	r3, r7, #12
 800a9f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a9f4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d108      	bne.n	800aa12 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2201      	movs	r2, #1
 800aa04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aa10:	e03d      	b.n	800aa8e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aa12:	2308      	movs	r3, #8
 800aa14:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aa16:	2308      	movs	r3, #8
 800aa18:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	689b      	ldr	r3, [r3, #8]
 800aa20:	0e5b      	lsrs	r3, r3, #25
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	f003 0307 	and.w	r3, r3, #7
 800aa28:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	689b      	ldr	r3, [r3, #8]
 800aa30:	0f5b      	lsrs	r3, r3, #29
 800aa32:	b2db      	uxtb	r3, r3
 800aa34:	f003 0307 	and.w	r3, r3, #7
 800aa38:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800aa3a:	7fbb      	ldrb	r3, [r7, #30]
 800aa3c:	7f3a      	ldrb	r2, [r7, #28]
 800aa3e:	f107 0120 	add.w	r1, r7, #32
 800aa42:	440a      	add	r2, r1
 800aa44:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800aa48:	fb02 f303 	mul.w	r3, r2, r3
 800aa4c:	7f3a      	ldrb	r2, [r7, #28]
 800aa4e:	f107 0120 	add.w	r1, r7, #32
 800aa52:	440a      	add	r2, r1
 800aa54:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800aa58:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa5c:	b29a      	uxth	r2, r3
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800aa64:	7ffb      	ldrb	r3, [r7, #31]
 800aa66:	7f7a      	ldrb	r2, [r7, #29]
 800aa68:	f107 0120 	add.w	r1, r7, #32
 800aa6c:	440a      	add	r2, r1
 800aa6e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800aa72:	fb02 f303 	mul.w	r3, r2, r3
 800aa76:	7f7a      	ldrb	r2, [r7, #29]
 800aa78:	f107 0120 	add.w	r1, r7, #32
 800aa7c:	440a      	add	r2, r1
 800aa7e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800aa82:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa86:	b29a      	uxth	r2, r3
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800aa8e:	bf00      	nop
 800aa90:	3724      	adds	r7, #36	; 0x24
 800aa92:	46bd      	mov	sp, r7
 800aa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa98:	4770      	bx	lr
 800aa9a:	bf00      	nop
 800aa9c:	08014d7c 	.word	0x08014d7c
 800aaa0:	08014d84 	.word	0x08014d84

0800aaa4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800aaa4:	b084      	sub	sp, #16
 800aaa6:	b480      	push	{r7}
 800aaa8:	b085      	sub	sp, #20
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	6078      	str	r0, [r7, #4]
 800aaae:	f107 001c 	add.w	r0, r7, #28
 800aab2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800aab6:	2300      	movs	r3, #0
 800aab8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800aaba:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800aabc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800aabe:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800aac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800aac2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800aac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800aac6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800aac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800aaca:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800aacc:	68fa      	ldr	r2, [r7, #12]
 800aace:	4313      	orrs	r3, r2
 800aad0:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	685a      	ldr	r2, [r3, #4]
 800aad6:	4b07      	ldr	r3, [pc, #28]	; (800aaf4 <SDMMC_Init+0x50>)
 800aad8:	4013      	ands	r3, r2
 800aada:	68fa      	ldr	r2, [r7, #12]
 800aadc:	431a      	orrs	r2, r3
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800aae2:	2300      	movs	r3, #0
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3714      	adds	r7, #20
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	b004      	add	sp, #16
 800aaf0:	4770      	bx	lr
 800aaf2:	bf00      	nop
 800aaf4:	ffc02c00 	.word	0xffc02c00

0800aaf8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b083      	sub	sp, #12
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	370c      	adds	r7, #12
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr

0800ab12 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800ab12:	b480      	push	{r7}
 800ab14:	b083      	sub	sp, #12
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
 800ab1a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	681a      	ldr	r2, [r3, #0]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ab26:	2300      	movs	r3, #0
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	370c      	adds	r7, #12
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f043 0203 	orr.w	r2, r3, #3
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ab48:	2300      	movs	r3, #0
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	370c      	adds	r7, #12
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr

0800ab56 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800ab56:	b480      	push	{r7}
 800ab58:	b083      	sub	sp, #12
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f003 0303 	and.w	r3, r3, #3
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	370c      	adds	r7, #12
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab70:	4770      	bx	lr
	...

0800ab74 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b085      	sub	sp, #20
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	681a      	ldr	r2, [r3, #0]
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab92:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ab98:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ab9e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aba0:	68fa      	ldr	r2, [r7, #12]
 800aba2:	4313      	orrs	r3, r2
 800aba4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	68da      	ldr	r2, [r3, #12]
 800abaa:	4b06      	ldr	r3, [pc, #24]	; (800abc4 <SDMMC_SendCommand+0x50>)
 800abac:	4013      	ands	r3, r2
 800abae:	68fa      	ldr	r2, [r7, #12]
 800abb0:	431a      	orrs	r2, r3
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800abb6:	2300      	movs	r3, #0
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3714      	adds	r7, #20
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr
 800abc4:	fffee0c0 	.word	0xfffee0c0

0800abc8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800abc8:	b480      	push	{r7}
 800abca:	b083      	sub	sp, #12
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	691b      	ldr	r3, [r3, #16]
 800abd4:	b2db      	uxtb	r3, r3
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	370c      	adds	r7, #12
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr

0800abe2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800abe2:	b480      	push	{r7}
 800abe4:	b085      	sub	sp, #20
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	6078      	str	r0, [r7, #4]
 800abea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	3314      	adds	r3, #20
 800abf0:	461a      	mov	r2, r3
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	4413      	add	r3, r2
 800abf6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3714      	adds	r7, #20
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr

0800ac08 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b085      	sub	sp, #20
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ac12:	2300      	movs	r3, #0
 800ac14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	681a      	ldr	r2, [r3, #0]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	685a      	ldr	r2, [r3, #4]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ac2e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ac34:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ac3a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ac3c:	68fa      	ldr	r2, [r7, #12]
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	431a      	orrs	r2, r3
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ac52:	2300      	movs	r3, #0

}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3714      	adds	r7, #20
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr

0800ac60 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b088      	sub	sp, #32
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ac6e:	2310      	movs	r3, #16
 800ac70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac72:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac82:	f107 0308 	add.w	r3, r7, #8
 800ac86:	4619      	mov	r1, r3
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f7ff ff73 	bl	800ab74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ac8e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac92:	2110      	movs	r1, #16
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f000 faab 	bl	800b1f0 <SDMMC_GetCmdResp1>
 800ac9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac9c:	69fb      	ldr	r3, [r7, #28]
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3720      	adds	r7, #32
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}

0800aca6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800aca6:	b580      	push	{r7, lr}
 800aca8:	b088      	sub	sp, #32
 800acaa:	af00      	add	r7, sp, #0
 800acac:	6078      	str	r0, [r7, #4]
 800acae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800acb4:	2311      	movs	r3, #17
 800acb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acbe:	2300      	movs	r3, #0
 800acc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800acc6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acc8:	f107 0308 	add.w	r3, r7, #8
 800accc:	4619      	mov	r1, r3
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f7ff ff50 	bl	800ab74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800acd4:	f241 3288 	movw	r2, #5000	; 0x1388
 800acd8:	2111      	movs	r1, #17
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 fa88 	bl	800b1f0 <SDMMC_GetCmdResp1>
 800ace0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ace2:	69fb      	ldr	r3, [r7, #28]
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3720      	adds	r7, #32
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b088      	sub	sp, #32
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800acfa:	2312      	movs	r3, #18
 800acfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad04:	2300      	movs	r3, #0
 800ad06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad0c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad0e:	f107 0308 	add.w	r3, r7, #8
 800ad12:	4619      	mov	r1, r3
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f7ff ff2d 	bl	800ab74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ad1a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad1e:	2112      	movs	r1, #18
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f000 fa65 	bl	800b1f0 <SDMMC_GetCmdResp1>
 800ad26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad28:	69fb      	ldr	r3, [r7, #28]
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3720      	adds	r7, #32
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}

0800ad32 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ad32:	b580      	push	{r7, lr}
 800ad34:	b088      	sub	sp, #32
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	6078      	str	r0, [r7, #4]
 800ad3a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ad40:	2318      	movs	r3, #24
 800ad42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad44:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad54:	f107 0308 	add.w	r3, r7, #8
 800ad58:	4619      	mov	r1, r3
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f7ff ff0a 	bl	800ab74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ad60:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad64:	2118      	movs	r1, #24
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f000 fa42 	bl	800b1f0 <SDMMC_GetCmdResp1>
 800ad6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad6e:	69fb      	ldr	r3, [r7, #28]
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3720      	adds	r7, #32
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b088      	sub	sp, #32
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ad86:	2319      	movs	r3, #25
 800ad88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad90:	2300      	movs	r3, #0
 800ad92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad9a:	f107 0308 	add.w	r3, r7, #8
 800ad9e:	4619      	mov	r1, r3
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f7ff fee7 	bl	800ab74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ada6:	f241 3288 	movw	r2, #5000	; 0x1388
 800adaa:	2119      	movs	r1, #25
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f000 fa1f 	bl	800b1f0 <SDMMC_GetCmdResp1>
 800adb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adb4:	69fb      	ldr	r3, [r7, #28]
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3720      	adds	r7, #32
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
	...

0800adc0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b088      	sub	sp, #32
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800adc8:	2300      	movs	r3, #0
 800adca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800adcc:	230c      	movs	r3, #12
 800adce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800add0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800add4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800add6:	2300      	movs	r3, #0
 800add8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800adde:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	68db      	ldr	r3, [r3, #12]
 800ade4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	68db      	ldr	r3, [r3, #12]
 800adf0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800adf8:	f107 0308 	add.w	r3, r7, #8
 800adfc:	4619      	mov	r1, r3
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f7ff feb8 	bl	800ab74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800ae04:	4a0b      	ldr	r2, [pc, #44]	; (800ae34 <SDMMC_CmdStopTransfer+0x74>)
 800ae06:	210c      	movs	r1, #12
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f000 f9f1 	bl	800b1f0 <SDMMC_GetCmdResp1>
 800ae0e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	68db      	ldr	r3, [r3, #12]
 800ae14:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ae1c:	69fb      	ldr	r3, [r7, #28]
 800ae1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae22:	d101      	bne.n	800ae28 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800ae24:	2300      	movs	r3, #0
 800ae26:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800ae28:	69fb      	ldr	r3, [r7, #28]
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3720      	adds	r7, #32
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}
 800ae32:	bf00      	nop
 800ae34:	05f5e100 	.word	0x05f5e100

0800ae38 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b08a      	sub	sp, #40	; 0x28
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	60f8      	str	r0, [r7, #12]
 800ae40:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ae48:	2307      	movs	r3, #7
 800ae4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae50:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae52:	2300      	movs	r3, #0
 800ae54:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae5a:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae5c:	f107 0310 	add.w	r3, r7, #16
 800ae60:	4619      	mov	r1, r3
 800ae62:	68f8      	ldr	r0, [r7, #12]
 800ae64:	f7ff fe86 	bl	800ab74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ae68:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae6c:	2107      	movs	r1, #7
 800ae6e:	68f8      	ldr	r0, [r7, #12]
 800ae70:	f000 f9be 	bl	800b1f0 <SDMMC_GetCmdResp1>
 800ae74:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ae76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3728      	adds	r7, #40	; 0x28
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b088      	sub	sp, #32
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ae90:	2300      	movs	r3, #0
 800ae92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae94:	2300      	movs	r3, #0
 800ae96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae9e:	f107 0308 	add.w	r3, r7, #8
 800aea2:	4619      	mov	r1, r3
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f7ff fe65 	bl	800ab74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 f976 	bl	800b19c <SDMMC_GetCmdError>
 800aeb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aeb2:	69fb      	ldr	r3, [r7, #28]
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3720      	adds	r7, #32
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}

0800aebc <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b088      	sub	sp, #32
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800aec4:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800aec8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800aeca:	2308      	movs	r3, #8
 800aecc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aece:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aed2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aed4:	2300      	movs	r3, #0
 800aed6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aedc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aede:	f107 0308 	add.w	r3, r7, #8
 800aee2:	4619      	mov	r1, r3
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f7ff fe45 	bl	800ab74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f000 fb6a 	bl	800b5c4 <SDMMC_GetCmdResp7>
 800aef0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aef2:	69fb      	ldr	r3, [r7, #28]
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3720      	adds	r7, #32
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b088      	sub	sp, #32
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800af0a:	2337      	movs	r3, #55	; 0x37
 800af0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af14:	2300      	movs	r3, #0
 800af16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af1e:	f107 0308 	add.w	r3, r7, #8
 800af22:	4619      	mov	r1, r3
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f7ff fe25 	bl	800ab74 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800af2a:	f241 3288 	movw	r2, #5000	; 0x1388
 800af2e:	2137      	movs	r1, #55	; 0x37
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 f95d 	bl	800b1f0 <SDMMC_GetCmdResp1>
 800af36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af38:	69fb      	ldr	r3, [r7, #28]
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3720      	adds	r7, #32
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}

0800af42 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800af42:	b580      	push	{r7, lr}
 800af44:	b088      	sub	sp, #32
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
 800af4a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800af50:	2329      	movs	r3, #41	; 0x29
 800af52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af54:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af5a:	2300      	movs	r3, #0
 800af5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af64:	f107 0308 	add.w	r3, r7, #8
 800af68:	4619      	mov	r1, r3
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f7ff fe02 	bl	800ab74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 fa75 	bl	800b460 <SDMMC_GetCmdResp3>
 800af76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af78:	69fb      	ldr	r3, [r7, #28]
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3720      	adds	r7, #32
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}

0800af82 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800af82:	b580      	push	{r7, lr}
 800af84:	b088      	sub	sp, #32
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
 800af8a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800af90:	2306      	movs	r3, #6
 800af92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af94:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af9a:	2300      	movs	r3, #0
 800af9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800afa2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afa4:	f107 0308 	add.w	r3, r7, #8
 800afa8:	4619      	mov	r1, r3
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f7ff fde2 	bl	800ab74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800afb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800afb4:	2106      	movs	r1, #6
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f000 f91a 	bl	800b1f0 <SDMMC_GetCmdResp1>
 800afbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afbe:	69fb      	ldr	r3, [r7, #28]
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3720      	adds	r7, #32
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b088      	sub	sp, #32
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800afd0:	2300      	movs	r3, #0
 800afd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800afd4:	2333      	movs	r3, #51	; 0x33
 800afd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800afd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afde:	2300      	movs	r3, #0
 800afe0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afe2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800afe6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afe8:	f107 0308 	add.w	r3, r7, #8
 800afec:	4619      	mov	r1, r3
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f7ff fdc0 	bl	800ab74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800aff4:	f241 3288 	movw	r2, #5000	; 0x1388
 800aff8:	2133      	movs	r1, #51	; 0x33
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f000 f8f8 	bl	800b1f0 <SDMMC_GetCmdResp1>
 800b000:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b002:	69fb      	ldr	r3, [r7, #28]
}
 800b004:	4618      	mov	r0, r3
 800b006:	3720      	adds	r7, #32
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b088      	sub	sp, #32
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b014:	2300      	movs	r3, #0
 800b016:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b018:	2302      	movs	r3, #2
 800b01a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b01c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b020:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b022:	2300      	movs	r3, #0
 800b024:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b026:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b02a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b02c:	f107 0308 	add.w	r3, r7, #8
 800b030:	4619      	mov	r1, r3
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f7ff fd9e 	bl	800ab74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f000 f9c9 	bl	800b3d0 <SDMMC_GetCmdResp2>
 800b03e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b040:	69fb      	ldr	r3, [r7, #28]
}
 800b042:	4618      	mov	r0, r3
 800b044:	3720      	adds	r7, #32
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}

0800b04a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b04a:	b580      	push	{r7, lr}
 800b04c:	b088      	sub	sp, #32
 800b04e:	af00      	add	r7, sp, #0
 800b050:	6078      	str	r0, [r7, #4]
 800b052:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b058:	2309      	movs	r3, #9
 800b05a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b05c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b060:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b062:	2300      	movs	r3, #0
 800b064:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b066:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b06a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b06c:	f107 0308 	add.w	r3, r7, #8
 800b070:	4619      	mov	r1, r3
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f7ff fd7e 	bl	800ab74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f000 f9a9 	bl	800b3d0 <SDMMC_GetCmdResp2>
 800b07e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b080:	69fb      	ldr	r3, [r7, #28]
}
 800b082:	4618      	mov	r0, r3
 800b084:	3720      	adds	r7, #32
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}

0800b08a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b08a:	b580      	push	{r7, lr}
 800b08c:	b088      	sub	sp, #32
 800b08e:	af00      	add	r7, sp, #0
 800b090:	6078      	str	r0, [r7, #4]
 800b092:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b094:	2300      	movs	r3, #0
 800b096:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b098:	2303      	movs	r3, #3
 800b09a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b09c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b0aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0ac:	f107 0308 	add.w	r3, r7, #8
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f7ff fd5e 	bl	800ab74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b0b8:	683a      	ldr	r2, [r7, #0]
 800b0ba:	2103      	movs	r1, #3
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f000 fa0b 	bl	800b4d8 <SDMMC_GetCmdResp6>
 800b0c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0c4:	69fb      	ldr	r3, [r7, #28]
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3720      	adds	r7, #32
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b088      	sub	sp, #32
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
 800b0d6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b0dc:	230d      	movs	r3, #13
 800b0de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b0ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0f0:	f107 0308 	add.w	r3, r7, #8
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f7ff fd3c 	bl	800ab74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b0fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b100:	210d      	movs	r1, #13
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f000 f874 	bl	800b1f0 <SDMMC_GetCmdResp1>
 800b108:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b10a:	69fb      	ldr	r3, [r7, #28]
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3720      	adds	r7, #32
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b088      	sub	sp, #32
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b11c:	2300      	movs	r3, #0
 800b11e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b120:	230d      	movs	r3, #13
 800b122:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b124:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b128:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b12a:	2300      	movs	r3, #0
 800b12c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b12e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b132:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b134:	f107 0308 	add.w	r3, r7, #8
 800b138:	4619      	mov	r1, r3
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f7ff fd1a 	bl	800ab74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b140:	f241 3288 	movw	r2, #5000	; 0x1388
 800b144:	210d      	movs	r1, #13
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 f852 	bl	800b1f0 <SDMMC_GetCmdResp1>
 800b14c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b14e:	69fb      	ldr	r3, [r7, #28]
}
 800b150:	4618      	mov	r0, r3
 800b152:	3720      	adds	r7, #32
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}

0800b158 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b088      	sub	sp, #32
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800b160:	2300      	movs	r3, #0
 800b162:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800b164:	230b      	movs	r3, #11
 800b166:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b168:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b16c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b16e:	2300      	movs	r3, #0
 800b170:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b172:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b176:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b178:	f107 0308 	add.w	r3, r7, #8
 800b17c:	4619      	mov	r1, r3
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f7ff fcf8 	bl	800ab74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800b184:	f241 3288 	movw	r2, #5000	; 0x1388
 800b188:	210b      	movs	r1, #11
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 f830 	bl	800b1f0 <SDMMC_GetCmdResp1>
 800b190:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b192:	69fb      	ldr	r3, [r7, #28]
}
 800b194:	4618      	mov	r0, r3
 800b196:	3720      	adds	r7, #32
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}

0800b19c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b19c:	b490      	push	{r4, r7}
 800b19e:	b082      	sub	sp, #8
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b1a4:	4b0f      	ldr	r3, [pc, #60]	; (800b1e4 <SDMMC_GetCmdError+0x48>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	4a0f      	ldr	r2, [pc, #60]	; (800b1e8 <SDMMC_GetCmdError+0x4c>)
 800b1aa:	fba2 2303 	umull	r2, r3, r2, r3
 800b1ae:	0a5b      	lsrs	r3, r3, #9
 800b1b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1b4:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800b1b8:	4623      	mov	r3, r4
 800b1ba:	1e5c      	subs	r4, r3, #1
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d102      	bne.n	800b1c6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b1c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b1c4:	e009      	b.n	800b1da <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d0f2      	beq.n	800b1b8 <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	4a05      	ldr	r2, [pc, #20]	; (800b1ec <SDMMC_GetCmdError+0x50>)
 800b1d6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800b1d8:	2300      	movs	r3, #0
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3708      	adds	r7, #8
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bc90      	pop	{r4, r7}
 800b1e2:	4770      	bx	lr
 800b1e4:	2400000c 	.word	0x2400000c
 800b1e8:	10624dd3 	.word	0x10624dd3
 800b1ec:	002000c5 	.word	0x002000c5

0800b1f0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b1f0:	b590      	push	{r4, r7, lr}
 800b1f2:	b087      	sub	sp, #28
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	60f8      	str	r0, [r7, #12]
 800b1f8:	460b      	mov	r3, r1
 800b1fa:	607a      	str	r2, [r7, #4]
 800b1fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b1fe:	4b6f      	ldr	r3, [pc, #444]	; (800b3bc <SDMMC_GetCmdResp1+0x1cc>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	4a6f      	ldr	r2, [pc, #444]	; (800b3c0 <SDMMC_GetCmdResp1+0x1d0>)
 800b204:	fba2 2303 	umull	r2, r3, r2, r3
 800b208:	0a5b      	lsrs	r3, r3, #9
 800b20a:	687a      	ldr	r2, [r7, #4]
 800b20c:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800b210:	4623      	mov	r3, r4
 800b212:	1e5c      	subs	r4, r3, #1
 800b214:	2b00      	cmp	r3, #0
 800b216:	d102      	bne.n	800b21e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b218:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b21c:	e0c9      	b.n	800b3b2 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b222:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b224:	697a      	ldr	r2, [r7, #20]
 800b226:	4b67      	ldr	r3, [pc, #412]	; (800b3c4 <SDMMC_GetCmdResp1+0x1d4>)
 800b228:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d0f0      	beq.n	800b210 <SDMMC_GetCmdResp1+0x20>
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b234:	2b00      	cmp	r3, #0
 800b236:	d1eb      	bne.n	800b210 <SDMMC_GetCmdResp1+0x20>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b23c:	f003 0304 	and.w	r3, r3, #4
 800b240:	2b00      	cmp	r3, #0
 800b242:	d004      	beq.n	800b24e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	2204      	movs	r2, #4
 800b248:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b24a:	2304      	movs	r3, #4
 800b24c:	e0b1      	b.n	800b3b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b252:	f003 0301 	and.w	r3, r3, #1
 800b256:	2b00      	cmp	r3, #0
 800b258:	d004      	beq.n	800b264 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	2201      	movs	r2, #1
 800b25e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b260:	2301      	movs	r3, #1
 800b262:	e0a6      	b.n	800b3b2 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	4a58      	ldr	r2, [pc, #352]	; (800b3c8 <SDMMC_GetCmdResp1+0x1d8>)
 800b268:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b26a:	68f8      	ldr	r0, [r7, #12]
 800b26c:	f7ff fcac 	bl	800abc8 <SDMMC_GetCommandResponse>
 800b270:	4603      	mov	r3, r0
 800b272:	461a      	mov	r2, r3
 800b274:	7afb      	ldrb	r3, [r7, #11]
 800b276:	4293      	cmp	r3, r2
 800b278:	d001      	beq.n	800b27e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b27a:	2301      	movs	r3, #1
 800b27c:	e099      	b.n	800b3b2 <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b27e:	2100      	movs	r1, #0
 800b280:	68f8      	ldr	r0, [r7, #12]
 800b282:	f7ff fcae 	bl	800abe2 <SDMMC_GetResponse>
 800b286:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b288:	693a      	ldr	r2, [r7, #16]
 800b28a:	4b50      	ldr	r3, [pc, #320]	; (800b3cc <SDMMC_GetCmdResp1+0x1dc>)
 800b28c:	4013      	ands	r3, r2
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d101      	bne.n	800b296 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800b292:	2300      	movs	r3, #0
 800b294:	e08d      	b.n	800b3b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	da02      	bge.n	800b2a2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b29c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b2a0:	e087      	b.n	800b3b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d001      	beq.n	800b2b0 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b2ac:	2340      	movs	r3, #64	; 0x40
 800b2ae:	e080      	b.n	800b3b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d001      	beq.n	800b2be <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b2ba:	2380      	movs	r3, #128	; 0x80
 800b2bc:	e079      	b.n	800b3b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d002      	beq.n	800b2ce <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b2c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2cc:	e071      	b.n	800b3b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d002      	beq.n	800b2de <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b2d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2dc:	e069      	b.n	800b3b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d002      	beq.n	800b2ee <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b2e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2ec:	e061      	b.n	800b3b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d002      	beq.n	800b2fe <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b2f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b2fc:	e059      	b.n	800b3b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b304:	2b00      	cmp	r3, #0
 800b306:	d002      	beq.n	800b30e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b30c:	e051      	b.n	800b3b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b314:	2b00      	cmp	r3, #0
 800b316:	d002      	beq.n	800b31e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b318:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b31c:	e049      	b.n	800b3b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b324:	2b00      	cmp	r3, #0
 800b326:	d002      	beq.n	800b32e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b328:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b32c:	e041      	b.n	800b3b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b334:	2b00      	cmp	r3, #0
 800b336:	d002      	beq.n	800b33e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800b338:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b33c:	e039      	b.n	800b3b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b344:	2b00      	cmp	r3, #0
 800b346:	d002      	beq.n	800b34e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b348:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b34c:	e031      	b.n	800b3b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b354:	2b00      	cmp	r3, #0
 800b356:	d002      	beq.n	800b35e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b358:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b35c:	e029      	b.n	800b3b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b364:	2b00      	cmp	r3, #0
 800b366:	d002      	beq.n	800b36e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b368:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b36c:	e021      	b.n	800b3b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b374:	2b00      	cmp	r3, #0
 800b376:	d002      	beq.n	800b37e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b378:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b37c:	e019      	b.n	800b3b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b384:	2b00      	cmp	r3, #0
 800b386:	d002      	beq.n	800b38e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b388:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b38c:	e011      	b.n	800b3b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b394:	2b00      	cmp	r3, #0
 800b396:	d002      	beq.n	800b39e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b398:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b39c:	e009      	b.n	800b3b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	f003 0308 	and.w	r3, r3, #8
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d002      	beq.n	800b3ae <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b3a8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b3ac:	e001      	b.n	800b3b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b3ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	371c      	adds	r7, #28
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd90      	pop	{r4, r7, pc}
 800b3ba:	bf00      	nop
 800b3bc:	2400000c 	.word	0x2400000c
 800b3c0:	10624dd3 	.word	0x10624dd3
 800b3c4:	00200045 	.word	0x00200045
 800b3c8:	002000c5 	.word	0x002000c5
 800b3cc:	fdffe008 	.word	0xfdffe008

0800b3d0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b3d0:	b490      	push	{r4, r7}
 800b3d2:	b084      	sub	sp, #16
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b3d8:	4b1e      	ldr	r3, [pc, #120]	; (800b454 <SDMMC_GetCmdResp2+0x84>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4a1e      	ldr	r2, [pc, #120]	; (800b458 <SDMMC_GetCmdResp2+0x88>)
 800b3de:	fba2 2303 	umull	r2, r3, r2, r3
 800b3e2:	0a5b      	lsrs	r3, r3, #9
 800b3e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3e8:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800b3ec:	4623      	mov	r3, r4
 800b3ee:	1e5c      	subs	r4, r3, #1
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d102      	bne.n	800b3fa <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b3f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b3f8:	e026      	b.n	800b448 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3fe:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b406:	2b00      	cmp	r3, #0
 800b408:	d0f0      	beq.n	800b3ec <SDMMC_GetCmdResp2+0x1c>
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b410:	2b00      	cmp	r3, #0
 800b412:	d1eb      	bne.n	800b3ec <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b418:	f003 0304 	and.w	r3, r3, #4
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d004      	beq.n	800b42a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2204      	movs	r2, #4
 800b424:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b426:	2304      	movs	r3, #4
 800b428:	e00e      	b.n	800b448 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b42e:	f003 0301 	and.w	r3, r3, #1
 800b432:	2b00      	cmp	r3, #0
 800b434:	d004      	beq.n	800b440 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2201      	movs	r2, #1
 800b43a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b43c:	2301      	movs	r3, #1
 800b43e:	e003      	b.n	800b448 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	4a06      	ldr	r2, [pc, #24]	; (800b45c <SDMMC_GetCmdResp2+0x8c>)
 800b444:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b446:	2300      	movs	r3, #0
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3710      	adds	r7, #16
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bc90      	pop	{r4, r7}
 800b450:	4770      	bx	lr
 800b452:	bf00      	nop
 800b454:	2400000c 	.word	0x2400000c
 800b458:	10624dd3 	.word	0x10624dd3
 800b45c:	002000c5 	.word	0x002000c5

0800b460 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b460:	b490      	push	{r4, r7}
 800b462:	b084      	sub	sp, #16
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b468:	4b18      	ldr	r3, [pc, #96]	; (800b4cc <SDMMC_GetCmdResp3+0x6c>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4a18      	ldr	r2, [pc, #96]	; (800b4d0 <SDMMC_GetCmdResp3+0x70>)
 800b46e:	fba2 2303 	umull	r2, r3, r2, r3
 800b472:	0a5b      	lsrs	r3, r3, #9
 800b474:	f241 3288 	movw	r2, #5000	; 0x1388
 800b478:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800b47c:	4623      	mov	r3, r4
 800b47e:	1e5c      	subs	r4, r3, #1
 800b480:	2b00      	cmp	r3, #0
 800b482:	d102      	bne.n	800b48a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b484:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b488:	e01b      	b.n	800b4c2 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b48e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b496:	2b00      	cmp	r3, #0
 800b498:	d0f0      	beq.n	800b47c <SDMMC_GetCmdResp3+0x1c>
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d1eb      	bne.n	800b47c <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4a8:	f003 0304 	and.w	r3, r3, #4
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d004      	beq.n	800b4ba <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2204      	movs	r2, #4
 800b4b4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b4b6:	2304      	movs	r3, #4
 800b4b8:	e003      	b.n	800b4c2 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	4a05      	ldr	r2, [pc, #20]	; (800b4d4 <SDMMC_GetCmdResp3+0x74>)
 800b4be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b4c0:	2300      	movs	r3, #0
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3710      	adds	r7, #16
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bc90      	pop	{r4, r7}
 800b4ca:	4770      	bx	lr
 800b4cc:	2400000c 	.word	0x2400000c
 800b4d0:	10624dd3 	.word	0x10624dd3
 800b4d4:	002000c5 	.word	0x002000c5

0800b4d8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b4d8:	b590      	push	{r4, r7, lr}
 800b4da:	b087      	sub	sp, #28
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	60f8      	str	r0, [r7, #12]
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	607a      	str	r2, [r7, #4]
 800b4e4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b4e6:	4b34      	ldr	r3, [pc, #208]	; (800b5b8 <SDMMC_GetCmdResp6+0xe0>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4a34      	ldr	r2, [pc, #208]	; (800b5bc <SDMMC_GetCmdResp6+0xe4>)
 800b4ec:	fba2 2303 	umull	r2, r3, r2, r3
 800b4f0:	0a5b      	lsrs	r3, r3, #9
 800b4f2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4f6:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800b4fa:	4623      	mov	r3, r4
 800b4fc:	1e5c      	subs	r4, r3, #1
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d102      	bne.n	800b508 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b502:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b506:	e052      	b.n	800b5ae <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b50c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b514:	2b00      	cmp	r3, #0
 800b516:	d0f0      	beq.n	800b4fa <SDMMC_GetCmdResp6+0x22>
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d1eb      	bne.n	800b4fa <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b526:	f003 0304 	and.w	r3, r3, #4
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d004      	beq.n	800b538 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	2204      	movs	r2, #4
 800b532:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b534:	2304      	movs	r3, #4
 800b536:	e03a      	b.n	800b5ae <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b53c:	f003 0301 	and.w	r3, r3, #1
 800b540:	2b00      	cmp	r3, #0
 800b542:	d004      	beq.n	800b54e <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	2201      	movs	r2, #1
 800b548:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b54a:	2301      	movs	r3, #1
 800b54c:	e02f      	b.n	800b5ae <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b54e:	68f8      	ldr	r0, [r7, #12]
 800b550:	f7ff fb3a 	bl	800abc8 <SDMMC_GetCommandResponse>
 800b554:	4603      	mov	r3, r0
 800b556:	461a      	mov	r2, r3
 800b558:	7afb      	ldrb	r3, [r7, #11]
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d001      	beq.n	800b562 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b55e:	2301      	movs	r3, #1
 800b560:	e025      	b.n	800b5ae <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	4a16      	ldr	r2, [pc, #88]	; (800b5c0 <SDMMC_GetCmdResp6+0xe8>)
 800b566:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b568:	2100      	movs	r1, #0
 800b56a:	68f8      	ldr	r0, [r7, #12]
 800b56c:	f7ff fb39 	bl	800abe2 <SDMMC_GetResponse>
 800b570:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d106      	bne.n	800b58a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	0c1b      	lsrs	r3, r3, #16
 800b580:	b29a      	uxth	r2, r3
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b586:	2300      	movs	r3, #0
 800b588:	e011      	b.n	800b5ae <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b590:	2b00      	cmp	r3, #0
 800b592:	d002      	beq.n	800b59a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b594:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b598:	e009      	b.n	800b5ae <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b59a:	693b      	ldr	r3, [r7, #16]
 800b59c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d002      	beq.n	800b5aa <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b5a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5a8:	e001      	b.n	800b5ae <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b5aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	371c      	adds	r7, #28
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd90      	pop	{r4, r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	2400000c 	.word	0x2400000c
 800b5bc:	10624dd3 	.word	0x10624dd3
 800b5c0:	002000c5 	.word	0x002000c5

0800b5c4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b5c4:	b490      	push	{r4, r7}
 800b5c6:	b084      	sub	sp, #16
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b5cc:	4b21      	ldr	r3, [pc, #132]	; (800b654 <SDMMC_GetCmdResp7+0x90>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4a21      	ldr	r2, [pc, #132]	; (800b658 <SDMMC_GetCmdResp7+0x94>)
 800b5d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b5d6:	0a5b      	lsrs	r3, r3, #9
 800b5d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5dc:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800b5e0:	4623      	mov	r3, r4
 800b5e2:	1e5c      	subs	r4, r3, #1
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d102      	bne.n	800b5ee <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b5e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b5ec:	e02c      	b.n	800b648 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5f2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d0f0      	beq.n	800b5e0 <SDMMC_GetCmdResp7+0x1c>
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b604:	2b00      	cmp	r3, #0
 800b606:	d1eb      	bne.n	800b5e0 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b60c:	f003 0304 	and.w	r3, r3, #4
 800b610:	2b00      	cmp	r3, #0
 800b612:	d004      	beq.n	800b61e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2204      	movs	r2, #4
 800b618:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b61a:	2304      	movs	r3, #4
 800b61c:	e014      	b.n	800b648 <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b622:	f003 0301 	and.w	r3, r3, #1
 800b626:	2b00      	cmp	r3, #0
 800b628:	d004      	beq.n	800b634 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2201      	movs	r2, #1
 800b62e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b630:	2301      	movs	r3, #1
 800b632:	e009      	b.n	800b648 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d002      	beq.n	800b646 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2240      	movs	r2, #64	; 0x40
 800b644:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b646:	2300      	movs	r3, #0

}
 800b648:	4618      	mov	r0, r3
 800b64a:	3710      	adds	r7, #16
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bc90      	pop	{r4, r7}
 800b650:	4770      	bx	lr
 800b652:	bf00      	nop
 800b654:	2400000c 	.word	0x2400000c
 800b658:	10624dd3 	.word	0x10624dd3

0800b65c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b65c:	b084      	sub	sp, #16
 800b65e:	b580      	push	{r7, lr}
 800b660:	b084      	sub	sp, #16
 800b662:	af00      	add	r7, sp, #0
 800b664:	6078      	str	r0, [r7, #4]
 800b666:	f107 001c 	add.w	r0, r7, #28
 800b66a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b670:	2b01      	cmp	r3, #1
 800b672:	d120      	bne.n	800b6b6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b678:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	68da      	ldr	r2, [r3, #12]
 800b684:	4b25      	ldr	r3, [pc, #148]	; (800b71c <USB_CoreInit+0xc0>)
 800b686:	4013      	ands	r3, r2
 800b688:	687a      	ldr	r2, [r7, #4]
 800b68a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	68db      	ldr	r3, [r3, #12]
 800b690:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	d105      	bne.n	800b6aa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	68db      	ldr	r3, [r3, #12]
 800b6a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f001 fab4 	bl	800cc18 <USB_CoreReset>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	73fb      	strb	r3, [r7, #15]
 800b6b4:	e01a      	b.n	800b6ec <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	68db      	ldr	r3, [r3, #12]
 800b6ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f001 faa8 	bl	800cc18 <USB_CoreReset>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b6cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d106      	bne.n	800b6e0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	639a      	str	r2, [r3, #56]	; 0x38
 800b6de:	e005      	b.n	800b6ec <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	d10b      	bne.n	800b70a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	689b      	ldr	r3, [r3, #8]
 800b6f6:	f043 0206 	orr.w	r2, r3, #6
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	689b      	ldr	r3, [r3, #8]
 800b702:	f043 0220 	orr.w	r2, r3, #32
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b70a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3710      	adds	r7, #16
 800b710:	46bd      	mov	sp, r7
 800b712:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b716:	b004      	add	sp, #16
 800b718:	4770      	bx	lr
 800b71a:	bf00      	nop
 800b71c:	ffbdffbf 	.word	0xffbdffbf

0800b720 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b720:	b480      	push	{r7}
 800b722:	b087      	sub	sp, #28
 800b724:	af00      	add	r7, sp, #0
 800b726:	60f8      	str	r0, [r7, #12]
 800b728:	60b9      	str	r1, [r7, #8]
 800b72a:	4613      	mov	r3, r2
 800b72c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b72e:	79fb      	ldrb	r3, [r7, #7]
 800b730:	2b02      	cmp	r3, #2
 800b732:	d165      	bne.n	800b800 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	4a41      	ldr	r2, [pc, #260]	; (800b83c <USB_SetTurnaroundTime+0x11c>)
 800b738:	4293      	cmp	r3, r2
 800b73a:	d906      	bls.n	800b74a <USB_SetTurnaroundTime+0x2a>
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	4a40      	ldr	r2, [pc, #256]	; (800b840 <USB_SetTurnaroundTime+0x120>)
 800b740:	4293      	cmp	r3, r2
 800b742:	d802      	bhi.n	800b74a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b744:	230f      	movs	r3, #15
 800b746:	617b      	str	r3, [r7, #20]
 800b748:	e062      	b.n	800b810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	4a3c      	ldr	r2, [pc, #240]	; (800b840 <USB_SetTurnaroundTime+0x120>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	d906      	bls.n	800b760 <USB_SetTurnaroundTime+0x40>
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	4a3b      	ldr	r2, [pc, #236]	; (800b844 <USB_SetTurnaroundTime+0x124>)
 800b756:	4293      	cmp	r3, r2
 800b758:	d802      	bhi.n	800b760 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b75a:	230e      	movs	r3, #14
 800b75c:	617b      	str	r3, [r7, #20]
 800b75e:	e057      	b.n	800b810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	4a38      	ldr	r2, [pc, #224]	; (800b844 <USB_SetTurnaroundTime+0x124>)
 800b764:	4293      	cmp	r3, r2
 800b766:	d906      	bls.n	800b776 <USB_SetTurnaroundTime+0x56>
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	4a37      	ldr	r2, [pc, #220]	; (800b848 <USB_SetTurnaroundTime+0x128>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d802      	bhi.n	800b776 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b770:	230d      	movs	r3, #13
 800b772:	617b      	str	r3, [r7, #20]
 800b774:	e04c      	b.n	800b810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	4a33      	ldr	r2, [pc, #204]	; (800b848 <USB_SetTurnaroundTime+0x128>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d906      	bls.n	800b78c <USB_SetTurnaroundTime+0x6c>
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	4a32      	ldr	r2, [pc, #200]	; (800b84c <USB_SetTurnaroundTime+0x12c>)
 800b782:	4293      	cmp	r3, r2
 800b784:	d802      	bhi.n	800b78c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b786:	230c      	movs	r3, #12
 800b788:	617b      	str	r3, [r7, #20]
 800b78a:	e041      	b.n	800b810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	4a2f      	ldr	r2, [pc, #188]	; (800b84c <USB_SetTurnaroundTime+0x12c>)
 800b790:	4293      	cmp	r3, r2
 800b792:	d906      	bls.n	800b7a2 <USB_SetTurnaroundTime+0x82>
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	4a2e      	ldr	r2, [pc, #184]	; (800b850 <USB_SetTurnaroundTime+0x130>)
 800b798:	4293      	cmp	r3, r2
 800b79a:	d802      	bhi.n	800b7a2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b79c:	230b      	movs	r3, #11
 800b79e:	617b      	str	r3, [r7, #20]
 800b7a0:	e036      	b.n	800b810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	4a2a      	ldr	r2, [pc, #168]	; (800b850 <USB_SetTurnaroundTime+0x130>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d906      	bls.n	800b7b8 <USB_SetTurnaroundTime+0x98>
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	4a29      	ldr	r2, [pc, #164]	; (800b854 <USB_SetTurnaroundTime+0x134>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d802      	bhi.n	800b7b8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b7b2:	230a      	movs	r3, #10
 800b7b4:	617b      	str	r3, [r7, #20]
 800b7b6:	e02b      	b.n	800b810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	4a26      	ldr	r2, [pc, #152]	; (800b854 <USB_SetTurnaroundTime+0x134>)
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d906      	bls.n	800b7ce <USB_SetTurnaroundTime+0xae>
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	4a25      	ldr	r2, [pc, #148]	; (800b858 <USB_SetTurnaroundTime+0x138>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d802      	bhi.n	800b7ce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b7c8:	2309      	movs	r3, #9
 800b7ca:	617b      	str	r3, [r7, #20]
 800b7cc:	e020      	b.n	800b810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	4a21      	ldr	r2, [pc, #132]	; (800b858 <USB_SetTurnaroundTime+0x138>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d906      	bls.n	800b7e4 <USB_SetTurnaroundTime+0xc4>
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	4a20      	ldr	r2, [pc, #128]	; (800b85c <USB_SetTurnaroundTime+0x13c>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d802      	bhi.n	800b7e4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b7de:	2308      	movs	r3, #8
 800b7e0:	617b      	str	r3, [r7, #20]
 800b7e2:	e015      	b.n	800b810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	4a1d      	ldr	r2, [pc, #116]	; (800b85c <USB_SetTurnaroundTime+0x13c>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d906      	bls.n	800b7fa <USB_SetTurnaroundTime+0xda>
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	4a1c      	ldr	r2, [pc, #112]	; (800b860 <USB_SetTurnaroundTime+0x140>)
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d802      	bhi.n	800b7fa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b7f4:	2307      	movs	r3, #7
 800b7f6:	617b      	str	r3, [r7, #20]
 800b7f8:	e00a      	b.n	800b810 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b7fa:	2306      	movs	r3, #6
 800b7fc:	617b      	str	r3, [r7, #20]
 800b7fe:	e007      	b.n	800b810 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b800:	79fb      	ldrb	r3, [r7, #7]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d102      	bne.n	800b80c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b806:	2309      	movs	r3, #9
 800b808:	617b      	str	r3, [r7, #20]
 800b80a:	e001      	b.n	800b810 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b80c:	2309      	movs	r3, #9
 800b80e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	68db      	ldr	r3, [r3, #12]
 800b814:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	68da      	ldr	r2, [r3, #12]
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	029b      	lsls	r3, r3, #10
 800b824:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b828:	431a      	orrs	r2, r3
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b82e:	2300      	movs	r3, #0
}
 800b830:	4618      	mov	r0, r3
 800b832:	371c      	adds	r7, #28
 800b834:	46bd      	mov	sp, r7
 800b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83a:	4770      	bx	lr
 800b83c:	00d8acbf 	.word	0x00d8acbf
 800b840:	00e4e1bf 	.word	0x00e4e1bf
 800b844:	00f423ff 	.word	0x00f423ff
 800b848:	0106737f 	.word	0x0106737f
 800b84c:	011a499f 	.word	0x011a499f
 800b850:	01312cff 	.word	0x01312cff
 800b854:	014ca43f 	.word	0x014ca43f
 800b858:	016e35ff 	.word	0x016e35ff
 800b85c:	01a6ab1f 	.word	0x01a6ab1f
 800b860:	01e847ff 	.word	0x01e847ff

0800b864 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b864:	b480      	push	{r7}
 800b866:	b083      	sub	sp, #12
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	689b      	ldr	r3, [r3, #8]
 800b870:	f043 0201 	orr.w	r2, r3, #1
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b878:	2300      	movs	r3, #0
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	370c      	adds	r7, #12
 800b87e:	46bd      	mov	sp, r7
 800b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b884:	4770      	bx	lr

0800b886 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b886:	b480      	push	{r7}
 800b888:	b083      	sub	sp, #12
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	689b      	ldr	r3, [r3, #8]
 800b892:	f023 0201 	bic.w	r2, r3, #1
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b89a:	2300      	movs	r3, #0
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	370c      	adds	r7, #12
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a6:	4770      	bx	lr

0800b8a8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b082      	sub	sp, #8
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
 800b8b0:	460b      	mov	r3, r1
 800b8b2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	68db      	ldr	r3, [r3, #12]
 800b8b8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b8c0:	78fb      	ldrb	r3, [r7, #3]
 800b8c2:	2b01      	cmp	r3, #1
 800b8c4:	d106      	bne.n	800b8d4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	68db      	ldr	r3, [r3, #12]
 800b8ca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	60da      	str	r2, [r3, #12]
 800b8d2:	e00b      	b.n	800b8ec <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b8d4:	78fb      	ldrb	r3, [r7, #3]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d106      	bne.n	800b8e8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	68db      	ldr	r3, [r3, #12]
 800b8de:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	60da      	str	r2, [r3, #12]
 800b8e6:	e001      	b.n	800b8ec <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	e003      	b.n	800b8f4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b8ec:	2032      	movs	r0, #50	; 0x32
 800b8ee:	f7f5 fd89 	bl	8001404 <HAL_Delay>

  return HAL_OK;
 800b8f2:	2300      	movs	r3, #0
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3708      	adds	r7, #8
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}

0800b8fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b8fc:	b084      	sub	sp, #16
 800b8fe:	b580      	push	{r7, lr}
 800b900:	b086      	sub	sp, #24
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
 800b906:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b90a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b90e:	2300      	movs	r3, #0
 800b910:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b916:	2300      	movs	r3, #0
 800b918:	613b      	str	r3, [r7, #16]
 800b91a:	e009      	b.n	800b930 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b91c:	687a      	ldr	r2, [r7, #4]
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	3340      	adds	r3, #64	; 0x40
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	4413      	add	r3, r2
 800b926:	2200      	movs	r2, #0
 800b928:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	3301      	adds	r3, #1
 800b92e:	613b      	str	r3, [r7, #16]
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	2b0e      	cmp	r3, #14
 800b934:	d9f2      	bls.n	800b91c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d11c      	bne.n	800b976 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b942:	685b      	ldr	r3, [r3, #4]
 800b944:	68fa      	ldr	r2, [r7, #12]
 800b946:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b94a:	f043 0302 	orr.w	r3, r3, #2
 800b94e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b954:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	601a      	str	r2, [r3, #0]
 800b974:	e005      	b.n	800b982 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b97a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b988:	461a      	mov	r2, r3
 800b98a:	2300      	movs	r3, #0
 800b98c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b994:	4619      	mov	r1, r3
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b99c:	461a      	mov	r2, r3
 800b99e:	680b      	ldr	r3, [r1, #0]
 800b9a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	d10c      	bne.n	800b9c2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d104      	bne.n	800b9b8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b9ae:	2100      	movs	r1, #0
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f000 f949 	bl	800bc48 <USB_SetDevSpeed>
 800b9b6:	e008      	b.n	800b9ca <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b9b8:	2101      	movs	r1, #1
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f000 f944 	bl	800bc48 <USB_SetDevSpeed>
 800b9c0:	e003      	b.n	800b9ca <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b9c2:	2103      	movs	r1, #3
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f000 f93f 	bl	800bc48 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b9ca:	2110      	movs	r1, #16
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f000 f8f3 	bl	800bbb8 <USB_FlushTxFifo>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d001      	beq.n	800b9dc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b9d8:	2301      	movs	r3, #1
 800b9da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f000 f911 	bl	800bc04 <USB_FlushRxFifo>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d001      	beq.n	800b9ec <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9f2:	461a      	mov	r2, r3
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9fe:	461a      	mov	r2, r3
 800ba00:	2300      	movs	r3, #0
 800ba02:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba10:	2300      	movs	r3, #0
 800ba12:	613b      	str	r3, [r7, #16]
 800ba14:	e043      	b.n	800ba9e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	015a      	lsls	r2, r3, #5
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	4413      	add	r3, r2
 800ba1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba2c:	d118      	bne.n	800ba60 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d10a      	bne.n	800ba4a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	015a      	lsls	r2, r3, #5
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	4413      	add	r3, r2
 800ba3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba40:	461a      	mov	r2, r3
 800ba42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ba46:	6013      	str	r3, [r2, #0]
 800ba48:	e013      	b.n	800ba72 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	015a      	lsls	r2, r3, #5
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	4413      	add	r3, r2
 800ba52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba56:	461a      	mov	r2, r3
 800ba58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ba5c:	6013      	str	r3, [r2, #0]
 800ba5e:	e008      	b.n	800ba72 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	015a      	lsls	r2, r3, #5
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	4413      	add	r3, r2
 800ba68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba6c:	461a      	mov	r2, r3
 800ba6e:	2300      	movs	r3, #0
 800ba70:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	015a      	lsls	r2, r3, #5
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	4413      	add	r3, r2
 800ba7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba7e:	461a      	mov	r2, r3
 800ba80:	2300      	movs	r3, #0
 800ba82:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	015a      	lsls	r2, r3, #5
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	4413      	add	r3, r2
 800ba8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba90:	461a      	mov	r2, r3
 800ba92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ba96:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	3301      	adds	r3, #1
 800ba9c:	613b      	str	r3, [r7, #16]
 800ba9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa0:	693a      	ldr	r2, [r7, #16]
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d3b7      	bcc.n	800ba16 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800baa6:	2300      	movs	r3, #0
 800baa8:	613b      	str	r3, [r7, #16]
 800baaa:	e043      	b.n	800bb34 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	015a      	lsls	r2, r3, #5
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	4413      	add	r3, r2
 800bab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800babe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bac2:	d118      	bne.n	800baf6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800bac4:	693b      	ldr	r3, [r7, #16]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d10a      	bne.n	800bae0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	015a      	lsls	r2, r3, #5
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	4413      	add	r3, r2
 800bad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bad6:	461a      	mov	r2, r3
 800bad8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800badc:	6013      	str	r3, [r2, #0]
 800bade:	e013      	b.n	800bb08 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	015a      	lsls	r2, r3, #5
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	4413      	add	r3, r2
 800bae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baec:	461a      	mov	r2, r3
 800baee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800baf2:	6013      	str	r3, [r2, #0]
 800baf4:	e008      	b.n	800bb08 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	015a      	lsls	r2, r3, #5
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	4413      	add	r3, r2
 800bafe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb02:	461a      	mov	r2, r3
 800bb04:	2300      	movs	r3, #0
 800bb06:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	015a      	lsls	r2, r3, #5
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	4413      	add	r3, r2
 800bb10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb14:	461a      	mov	r2, r3
 800bb16:	2300      	movs	r3, #0
 800bb18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	015a      	lsls	r2, r3, #5
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	4413      	add	r3, r2
 800bb22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb26:	461a      	mov	r2, r3
 800bb28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bb2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	3301      	adds	r3, #1
 800bb32:	613b      	str	r3, [r7, #16]
 800bb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb36:	693a      	ldr	r2, [r7, #16]
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d3b7      	bcc.n	800baac <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb42:	691b      	ldr	r3, [r3, #16]
 800bb44:	68fa      	ldr	r2, [r7, #12]
 800bb46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb4e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2200      	movs	r2, #0
 800bb54:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bb5c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bb5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d105      	bne.n	800bb70 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	699b      	ldr	r3, [r3, #24]
 800bb68:	f043 0210 	orr.w	r2, r3, #16
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	699a      	ldr	r2, [r3, #24]
 800bb74:	4b0e      	ldr	r3, [pc, #56]	; (800bbb0 <USB_DevInit+0x2b4>)
 800bb76:	4313      	orrs	r3, r2
 800bb78:	687a      	ldr	r2, [r7, #4]
 800bb7a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bb7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d005      	beq.n	800bb8e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	699b      	ldr	r3, [r3, #24]
 800bb86:	f043 0208 	orr.w	r2, r3, #8
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bb8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb90:	2b01      	cmp	r3, #1
 800bb92:	d105      	bne.n	800bba0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	699a      	ldr	r2, [r3, #24]
 800bb98:	4b06      	ldr	r3, [pc, #24]	; (800bbb4 <USB_DevInit+0x2b8>)
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	687a      	ldr	r2, [r7, #4]
 800bb9e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bba0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3718      	adds	r7, #24
 800bba6:	46bd      	mov	sp, r7
 800bba8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bbac:	b004      	add	sp, #16
 800bbae:	4770      	bx	lr
 800bbb0:	803c3800 	.word	0x803c3800
 800bbb4:	40000004 	.word	0x40000004

0800bbb8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b085      	sub	sp, #20
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
 800bbc0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	019b      	lsls	r3, r3, #6
 800bbca:	f043 0220 	orr.w	r2, r3, #32
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	3301      	adds	r3, #1
 800bbd6:	60fb      	str	r3, [r7, #12]
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	4a09      	ldr	r2, [pc, #36]	; (800bc00 <USB_FlushTxFifo+0x48>)
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	d901      	bls.n	800bbe4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800bbe0:	2303      	movs	r3, #3
 800bbe2:	e006      	b.n	800bbf2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	691b      	ldr	r3, [r3, #16]
 800bbe8:	f003 0320 	and.w	r3, r3, #32
 800bbec:	2b20      	cmp	r3, #32
 800bbee:	d0f0      	beq.n	800bbd2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800bbf0:	2300      	movs	r3, #0
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3714      	adds	r7, #20
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr
 800bbfe:	bf00      	nop
 800bc00:	00030d40 	.word	0x00030d40

0800bc04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bc04:	b480      	push	{r7}
 800bc06:	b085      	sub	sp, #20
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2210      	movs	r2, #16
 800bc14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	3301      	adds	r3, #1
 800bc1a:	60fb      	str	r3, [r7, #12]
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	4a09      	ldr	r2, [pc, #36]	; (800bc44 <USB_FlushRxFifo+0x40>)
 800bc20:	4293      	cmp	r3, r2
 800bc22:	d901      	bls.n	800bc28 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800bc24:	2303      	movs	r3, #3
 800bc26:	e006      	b.n	800bc36 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	691b      	ldr	r3, [r3, #16]
 800bc2c:	f003 0310 	and.w	r3, r3, #16
 800bc30:	2b10      	cmp	r3, #16
 800bc32:	d0f0      	beq.n	800bc16 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800bc34:	2300      	movs	r3, #0
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3714      	adds	r7, #20
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc40:	4770      	bx	lr
 800bc42:	bf00      	nop
 800bc44:	00030d40 	.word	0x00030d40

0800bc48 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b085      	sub	sp, #20
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	460b      	mov	r3, r1
 800bc52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc5e:	681a      	ldr	r2, [r3, #0]
 800bc60:	78fb      	ldrb	r3, [r7, #3]
 800bc62:	68f9      	ldr	r1, [r7, #12]
 800bc64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc68:	4313      	orrs	r3, r2
 800bc6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bc6c:	2300      	movs	r3, #0
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3714      	adds	r7, #20
 800bc72:	46bd      	mov	sp, r7
 800bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc78:	4770      	bx	lr

0800bc7a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bc7a:	b480      	push	{r7}
 800bc7c:	b087      	sub	sp, #28
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc8c:	689b      	ldr	r3, [r3, #8]
 800bc8e:	f003 0306 	and.w	r3, r3, #6
 800bc92:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d102      	bne.n	800bca0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	75fb      	strb	r3, [r7, #23]
 800bc9e:	e00a      	b.n	800bcb6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2b02      	cmp	r3, #2
 800bca4:	d002      	beq.n	800bcac <USB_GetDevSpeed+0x32>
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2b06      	cmp	r3, #6
 800bcaa:	d102      	bne.n	800bcb2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bcac:	2302      	movs	r3, #2
 800bcae:	75fb      	strb	r3, [r7, #23]
 800bcb0:	e001      	b.n	800bcb6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bcb2:	230f      	movs	r3, #15
 800bcb4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bcb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	371c      	adds	r7, #28
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	4770      	bx	lr

0800bcc4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b085      	sub	sp, #20
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	781b      	ldrb	r3, [r3, #0]
 800bcd6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	785b      	ldrb	r3, [r3, #1]
 800bcdc:	2b01      	cmp	r3, #1
 800bcde:	d139      	bne.n	800bd54 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bce6:	69da      	ldr	r2, [r3, #28]
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	781b      	ldrb	r3, [r3, #0]
 800bcec:	f003 030f 	and.w	r3, r3, #15
 800bcf0:	2101      	movs	r1, #1
 800bcf2:	fa01 f303 	lsl.w	r3, r1, r3
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	68f9      	ldr	r1, [r7, #12]
 800bcfa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	015a      	lsls	r2, r3, #5
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	4413      	add	r3, r2
 800bd0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d153      	bne.n	800bdc0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	015a      	lsls	r2, r3, #5
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	4413      	add	r3, r2
 800bd20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd24:	681a      	ldr	r2, [r3, #0]
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	689b      	ldr	r3, [r3, #8]
 800bd2a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	78db      	ldrb	r3, [r3, #3]
 800bd32:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bd34:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	059b      	lsls	r3, r3, #22
 800bd3a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bd3c:	431a      	orrs	r2, r3
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	0159      	lsls	r1, r3, #5
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	440b      	add	r3, r1
 800bd46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	4b20      	ldr	r3, [pc, #128]	; (800bdd0 <USB_ActivateEndpoint+0x10c>)
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	600b      	str	r3, [r1, #0]
 800bd52:	e035      	b.n	800bdc0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd5a:	69da      	ldr	r2, [r3, #28]
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	781b      	ldrb	r3, [r3, #0]
 800bd60:	f003 030f 	and.w	r3, r3, #15
 800bd64:	2101      	movs	r1, #1
 800bd66:	fa01 f303 	lsl.w	r3, r1, r3
 800bd6a:	041b      	lsls	r3, r3, #16
 800bd6c:	68f9      	ldr	r1, [r7, #12]
 800bd6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd72:	4313      	orrs	r3, r2
 800bd74:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	015a      	lsls	r2, r3, #5
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	4413      	add	r3, r2
 800bd7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d119      	bne.n	800bdc0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	015a      	lsls	r2, r3, #5
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	4413      	add	r3, r2
 800bd94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd98:	681a      	ldr	r2, [r3, #0]
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	689b      	ldr	r3, [r3, #8]
 800bd9e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	78db      	ldrb	r3, [r3, #3]
 800bda6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bda8:	430b      	orrs	r3, r1
 800bdaa:	431a      	orrs	r2, r3
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	0159      	lsls	r1, r3, #5
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	440b      	add	r3, r1
 800bdb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdb8:	4619      	mov	r1, r3
 800bdba:	4b05      	ldr	r3, [pc, #20]	; (800bdd0 <USB_ActivateEndpoint+0x10c>)
 800bdbc:	4313      	orrs	r3, r2
 800bdbe:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bdc0:	2300      	movs	r3, #0
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3714      	adds	r7, #20
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdcc:	4770      	bx	lr
 800bdce:	bf00      	nop
 800bdd0:	10008000 	.word	0x10008000

0800bdd4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b085      	sub	sp, #20
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	781b      	ldrb	r3, [r3, #0]
 800bde6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	785b      	ldrb	r3, [r3, #1]
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d135      	bne.n	800be5c <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	781b      	ldrb	r3, [r3, #0]
 800bdfc:	f003 030f 	and.w	r3, r3, #15
 800be00:	2101      	movs	r1, #1
 800be02:	fa01 f303 	lsl.w	r3, r1, r3
 800be06:	b29b      	uxth	r3, r3
 800be08:	43db      	mvns	r3, r3
 800be0a:	68f9      	ldr	r1, [r7, #12]
 800be0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be10:	4013      	ands	r3, r2
 800be12:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be1a:	69da      	ldr	r2, [r3, #28]
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	781b      	ldrb	r3, [r3, #0]
 800be20:	f003 030f 	and.w	r3, r3, #15
 800be24:	2101      	movs	r1, #1
 800be26:	fa01 f303 	lsl.w	r3, r1, r3
 800be2a:	b29b      	uxth	r3, r3
 800be2c:	43db      	mvns	r3, r3
 800be2e:	68f9      	ldr	r1, [r7, #12]
 800be30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be34:	4013      	ands	r3, r2
 800be36:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	015a      	lsls	r2, r3, #5
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	4413      	add	r3, r2
 800be40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be44:	681a      	ldr	r2, [r3, #0]
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	0159      	lsls	r1, r3, #5
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	440b      	add	r3, r1
 800be4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be52:	4619      	mov	r1, r3
 800be54:	4b1f      	ldr	r3, [pc, #124]	; (800bed4 <USB_DeactivateEndpoint+0x100>)
 800be56:	4013      	ands	r3, r2
 800be58:	600b      	str	r3, [r1, #0]
 800be5a:	e034      	b.n	800bec6 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	f003 030f 	and.w	r3, r3, #15
 800be6c:	2101      	movs	r1, #1
 800be6e:	fa01 f303 	lsl.w	r3, r1, r3
 800be72:	041b      	lsls	r3, r3, #16
 800be74:	43db      	mvns	r3, r3
 800be76:	68f9      	ldr	r1, [r7, #12]
 800be78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be7c:	4013      	ands	r3, r2
 800be7e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be86:	69da      	ldr	r2, [r3, #28]
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	781b      	ldrb	r3, [r3, #0]
 800be8c:	f003 030f 	and.w	r3, r3, #15
 800be90:	2101      	movs	r1, #1
 800be92:	fa01 f303 	lsl.w	r3, r1, r3
 800be96:	041b      	lsls	r3, r3, #16
 800be98:	43db      	mvns	r3, r3
 800be9a:	68f9      	ldr	r1, [r7, #12]
 800be9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bea0:	4013      	ands	r3, r2
 800bea2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	015a      	lsls	r2, r3, #5
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	4413      	add	r3, r2
 800beac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800beb0:	681a      	ldr	r2, [r3, #0]
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	0159      	lsls	r1, r3, #5
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	440b      	add	r3, r1
 800beba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bebe:	4619      	mov	r1, r3
 800bec0:	4b05      	ldr	r3, [pc, #20]	; (800bed8 <USB_DeactivateEndpoint+0x104>)
 800bec2:	4013      	ands	r3, r2
 800bec4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bec6:	2300      	movs	r3, #0
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3714      	adds	r7, #20
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr
 800bed4:	ec337800 	.word	0xec337800
 800bed8:	eff37800 	.word	0xeff37800

0800bedc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b08a      	sub	sp, #40	; 0x28
 800bee0:	af02      	add	r7, sp, #8
 800bee2:	60f8      	str	r0, [r7, #12]
 800bee4:	60b9      	str	r1, [r7, #8]
 800bee6:	4613      	mov	r3, r2
 800bee8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	785b      	ldrb	r3, [r3, #1]
 800bef8:	2b01      	cmp	r3, #1
 800befa:	f040 8163 	bne.w	800c1c4 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	695b      	ldr	r3, [r3, #20]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d132      	bne.n	800bf6c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bf06:	69bb      	ldr	r3, [r7, #24]
 800bf08:	015a      	lsls	r2, r3, #5
 800bf0a:	69fb      	ldr	r3, [r7, #28]
 800bf0c:	4413      	add	r3, r2
 800bf0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf12:	691a      	ldr	r2, [r3, #16]
 800bf14:	69bb      	ldr	r3, [r7, #24]
 800bf16:	0159      	lsls	r1, r3, #5
 800bf18:	69fb      	ldr	r3, [r7, #28]
 800bf1a:	440b      	add	r3, r1
 800bf1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf20:	4619      	mov	r1, r3
 800bf22:	4ba5      	ldr	r3, [pc, #660]	; (800c1b8 <USB_EPStartXfer+0x2dc>)
 800bf24:	4013      	ands	r3, r2
 800bf26:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bf28:	69bb      	ldr	r3, [r7, #24]
 800bf2a:	015a      	lsls	r2, r3, #5
 800bf2c:	69fb      	ldr	r3, [r7, #28]
 800bf2e:	4413      	add	r3, r2
 800bf30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf34:	691b      	ldr	r3, [r3, #16]
 800bf36:	69ba      	ldr	r2, [r7, #24]
 800bf38:	0151      	lsls	r1, r2, #5
 800bf3a:	69fa      	ldr	r2, [r7, #28]
 800bf3c:	440a      	add	r2, r1
 800bf3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bf46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bf48:	69bb      	ldr	r3, [r7, #24]
 800bf4a:	015a      	lsls	r2, r3, #5
 800bf4c:	69fb      	ldr	r3, [r7, #28]
 800bf4e:	4413      	add	r3, r2
 800bf50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf54:	691a      	ldr	r2, [r3, #16]
 800bf56:	69bb      	ldr	r3, [r7, #24]
 800bf58:	0159      	lsls	r1, r3, #5
 800bf5a:	69fb      	ldr	r3, [r7, #28]
 800bf5c:	440b      	add	r3, r1
 800bf5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf62:	4619      	mov	r1, r3
 800bf64:	4b95      	ldr	r3, [pc, #596]	; (800c1bc <USB_EPStartXfer+0x2e0>)
 800bf66:	4013      	ands	r3, r2
 800bf68:	610b      	str	r3, [r1, #16]
 800bf6a:	e074      	b.n	800c056 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bf6c:	69bb      	ldr	r3, [r7, #24]
 800bf6e:	015a      	lsls	r2, r3, #5
 800bf70:	69fb      	ldr	r3, [r7, #28]
 800bf72:	4413      	add	r3, r2
 800bf74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf78:	691a      	ldr	r2, [r3, #16]
 800bf7a:	69bb      	ldr	r3, [r7, #24]
 800bf7c:	0159      	lsls	r1, r3, #5
 800bf7e:	69fb      	ldr	r3, [r7, #28]
 800bf80:	440b      	add	r3, r1
 800bf82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf86:	4619      	mov	r1, r3
 800bf88:	4b8c      	ldr	r3, [pc, #560]	; (800c1bc <USB_EPStartXfer+0x2e0>)
 800bf8a:	4013      	ands	r3, r2
 800bf8c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bf8e:	69bb      	ldr	r3, [r7, #24]
 800bf90:	015a      	lsls	r2, r3, #5
 800bf92:	69fb      	ldr	r3, [r7, #28]
 800bf94:	4413      	add	r3, r2
 800bf96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf9a:	691a      	ldr	r2, [r3, #16]
 800bf9c:	69bb      	ldr	r3, [r7, #24]
 800bf9e:	0159      	lsls	r1, r3, #5
 800bfa0:	69fb      	ldr	r3, [r7, #28]
 800bfa2:	440b      	add	r3, r1
 800bfa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfa8:	4619      	mov	r1, r3
 800bfaa:	4b83      	ldr	r3, [pc, #524]	; (800c1b8 <USB_EPStartXfer+0x2dc>)
 800bfac:	4013      	ands	r3, r2
 800bfae:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bfb0:	69bb      	ldr	r3, [r7, #24]
 800bfb2:	015a      	lsls	r2, r3, #5
 800bfb4:	69fb      	ldr	r3, [r7, #28]
 800bfb6:	4413      	add	r3, r2
 800bfb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfbc:	691a      	ldr	r2, [r3, #16]
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	6959      	ldr	r1, [r3, #20]
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	689b      	ldr	r3, [r3, #8]
 800bfc6:	440b      	add	r3, r1
 800bfc8:	1e59      	subs	r1, r3, #1
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	689b      	ldr	r3, [r3, #8]
 800bfce:	fbb1 f3f3 	udiv	r3, r1, r3
 800bfd2:	04d9      	lsls	r1, r3, #19
 800bfd4:	4b7a      	ldr	r3, [pc, #488]	; (800c1c0 <USB_EPStartXfer+0x2e4>)
 800bfd6:	400b      	ands	r3, r1
 800bfd8:	69b9      	ldr	r1, [r7, #24]
 800bfda:	0148      	lsls	r0, r1, #5
 800bfdc:	69f9      	ldr	r1, [r7, #28]
 800bfde:	4401      	add	r1, r0
 800bfe0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bfe4:	4313      	orrs	r3, r2
 800bfe6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bfe8:	69bb      	ldr	r3, [r7, #24]
 800bfea:	015a      	lsls	r2, r3, #5
 800bfec:	69fb      	ldr	r3, [r7, #28]
 800bfee:	4413      	add	r3, r2
 800bff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bff4:	691a      	ldr	r2, [r3, #16]
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	695b      	ldr	r3, [r3, #20]
 800bffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bffe:	69b9      	ldr	r1, [r7, #24]
 800c000:	0148      	lsls	r0, r1, #5
 800c002:	69f9      	ldr	r1, [r7, #28]
 800c004:	4401      	add	r1, r0
 800c006:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c00a:	4313      	orrs	r3, r2
 800c00c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	78db      	ldrb	r3, [r3, #3]
 800c012:	2b01      	cmp	r3, #1
 800c014:	d11f      	bne.n	800c056 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c016:	69bb      	ldr	r3, [r7, #24]
 800c018:	015a      	lsls	r2, r3, #5
 800c01a:	69fb      	ldr	r3, [r7, #28]
 800c01c:	4413      	add	r3, r2
 800c01e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c022:	691b      	ldr	r3, [r3, #16]
 800c024:	69ba      	ldr	r2, [r7, #24]
 800c026:	0151      	lsls	r1, r2, #5
 800c028:	69fa      	ldr	r2, [r7, #28]
 800c02a:	440a      	add	r2, r1
 800c02c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c030:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c034:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c036:	69bb      	ldr	r3, [r7, #24]
 800c038:	015a      	lsls	r2, r3, #5
 800c03a:	69fb      	ldr	r3, [r7, #28]
 800c03c:	4413      	add	r3, r2
 800c03e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c042:	691b      	ldr	r3, [r3, #16]
 800c044:	69ba      	ldr	r2, [r7, #24]
 800c046:	0151      	lsls	r1, r2, #5
 800c048:	69fa      	ldr	r2, [r7, #28]
 800c04a:	440a      	add	r2, r1
 800c04c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c050:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c054:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c056:	79fb      	ldrb	r3, [r7, #7]
 800c058:	2b01      	cmp	r3, #1
 800c05a:	d14b      	bne.n	800c0f4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	691b      	ldr	r3, [r3, #16]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d009      	beq.n	800c078 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c064:	69bb      	ldr	r3, [r7, #24]
 800c066:	015a      	lsls	r2, r3, #5
 800c068:	69fb      	ldr	r3, [r7, #28]
 800c06a:	4413      	add	r3, r2
 800c06c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c070:	461a      	mov	r2, r3
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	691b      	ldr	r3, [r3, #16]
 800c076:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	78db      	ldrb	r3, [r3, #3]
 800c07c:	2b01      	cmp	r3, #1
 800c07e:	d128      	bne.n	800c0d2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c080:	69fb      	ldr	r3, [r7, #28]
 800c082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c086:	689b      	ldr	r3, [r3, #8]
 800c088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d110      	bne.n	800c0b2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c090:	69bb      	ldr	r3, [r7, #24]
 800c092:	015a      	lsls	r2, r3, #5
 800c094:	69fb      	ldr	r3, [r7, #28]
 800c096:	4413      	add	r3, r2
 800c098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	69ba      	ldr	r2, [r7, #24]
 800c0a0:	0151      	lsls	r1, r2, #5
 800c0a2:	69fa      	ldr	r2, [r7, #28]
 800c0a4:	440a      	add	r2, r1
 800c0a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c0ae:	6013      	str	r3, [r2, #0]
 800c0b0:	e00f      	b.n	800c0d2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c0b2:	69bb      	ldr	r3, [r7, #24]
 800c0b4:	015a      	lsls	r2, r3, #5
 800c0b6:	69fb      	ldr	r3, [r7, #28]
 800c0b8:	4413      	add	r3, r2
 800c0ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	69ba      	ldr	r2, [r7, #24]
 800c0c2:	0151      	lsls	r1, r2, #5
 800c0c4:	69fa      	ldr	r2, [r7, #28]
 800c0c6:	440a      	add	r2, r1
 800c0c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c0d0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c0d2:	69bb      	ldr	r3, [r7, #24]
 800c0d4:	015a      	lsls	r2, r3, #5
 800c0d6:	69fb      	ldr	r3, [r7, #28]
 800c0d8:	4413      	add	r3, r2
 800c0da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	69ba      	ldr	r2, [r7, #24]
 800c0e2:	0151      	lsls	r1, r2, #5
 800c0e4:	69fa      	ldr	r2, [r7, #28]
 800c0e6:	440a      	add	r2, r1
 800c0e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c0f0:	6013      	str	r3, [r2, #0]
 800c0f2:	e133      	b.n	800c35c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c0f4:	69bb      	ldr	r3, [r7, #24]
 800c0f6:	015a      	lsls	r2, r3, #5
 800c0f8:	69fb      	ldr	r3, [r7, #28]
 800c0fa:	4413      	add	r3, r2
 800c0fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	69ba      	ldr	r2, [r7, #24]
 800c104:	0151      	lsls	r1, r2, #5
 800c106:	69fa      	ldr	r2, [r7, #28]
 800c108:	440a      	add	r2, r1
 800c10a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c10e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c112:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	78db      	ldrb	r3, [r3, #3]
 800c118:	2b01      	cmp	r3, #1
 800c11a:	d015      	beq.n	800c148 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	695b      	ldr	r3, [r3, #20]
 800c120:	2b00      	cmp	r3, #0
 800c122:	f000 811b 	beq.w	800c35c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c126:	69fb      	ldr	r3, [r7, #28]
 800c128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c12c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	f003 030f 	and.w	r3, r3, #15
 800c136:	2101      	movs	r1, #1
 800c138:	fa01 f303 	lsl.w	r3, r1, r3
 800c13c:	69f9      	ldr	r1, [r7, #28]
 800c13e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c142:	4313      	orrs	r3, r2
 800c144:	634b      	str	r3, [r1, #52]	; 0x34
 800c146:	e109      	b.n	800c35c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c148:	69fb      	ldr	r3, [r7, #28]
 800c14a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c14e:	689b      	ldr	r3, [r3, #8]
 800c150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c154:	2b00      	cmp	r3, #0
 800c156:	d110      	bne.n	800c17a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c158:	69bb      	ldr	r3, [r7, #24]
 800c15a:	015a      	lsls	r2, r3, #5
 800c15c:	69fb      	ldr	r3, [r7, #28]
 800c15e:	4413      	add	r3, r2
 800c160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	69ba      	ldr	r2, [r7, #24]
 800c168:	0151      	lsls	r1, r2, #5
 800c16a:	69fa      	ldr	r2, [r7, #28]
 800c16c:	440a      	add	r2, r1
 800c16e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c172:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c176:	6013      	str	r3, [r2, #0]
 800c178:	e00f      	b.n	800c19a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c17a:	69bb      	ldr	r3, [r7, #24]
 800c17c:	015a      	lsls	r2, r3, #5
 800c17e:	69fb      	ldr	r3, [r7, #28]
 800c180:	4413      	add	r3, r2
 800c182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	69ba      	ldr	r2, [r7, #24]
 800c18a:	0151      	lsls	r1, r2, #5
 800c18c:	69fa      	ldr	r2, [r7, #28]
 800c18e:	440a      	add	r2, r1
 800c190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c198:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	68d9      	ldr	r1, [r3, #12]
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	781a      	ldrb	r2, [r3, #0]
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	695b      	ldr	r3, [r3, #20]
 800c1a6:	b298      	uxth	r0, r3
 800c1a8:	79fb      	ldrb	r3, [r7, #7]
 800c1aa:	9300      	str	r3, [sp, #0]
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	68f8      	ldr	r0, [r7, #12]
 800c1b0:	f000 fa38 	bl	800c624 <USB_WritePacket>
 800c1b4:	e0d2      	b.n	800c35c <USB_EPStartXfer+0x480>
 800c1b6:	bf00      	nop
 800c1b8:	e007ffff 	.word	0xe007ffff
 800c1bc:	fff80000 	.word	0xfff80000
 800c1c0:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c1c4:	69bb      	ldr	r3, [r7, #24]
 800c1c6:	015a      	lsls	r2, r3, #5
 800c1c8:	69fb      	ldr	r3, [r7, #28]
 800c1ca:	4413      	add	r3, r2
 800c1cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1d0:	691a      	ldr	r2, [r3, #16]
 800c1d2:	69bb      	ldr	r3, [r7, #24]
 800c1d4:	0159      	lsls	r1, r3, #5
 800c1d6:	69fb      	ldr	r3, [r7, #28]
 800c1d8:	440b      	add	r3, r1
 800c1da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1de:	4619      	mov	r1, r3
 800c1e0:	4b61      	ldr	r3, [pc, #388]	; (800c368 <USB_EPStartXfer+0x48c>)
 800c1e2:	4013      	ands	r3, r2
 800c1e4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c1e6:	69bb      	ldr	r3, [r7, #24]
 800c1e8:	015a      	lsls	r2, r3, #5
 800c1ea:	69fb      	ldr	r3, [r7, #28]
 800c1ec:	4413      	add	r3, r2
 800c1ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1f2:	691a      	ldr	r2, [r3, #16]
 800c1f4:	69bb      	ldr	r3, [r7, #24]
 800c1f6:	0159      	lsls	r1, r3, #5
 800c1f8:	69fb      	ldr	r3, [r7, #28]
 800c1fa:	440b      	add	r3, r1
 800c1fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c200:	4619      	mov	r1, r3
 800c202:	4b5a      	ldr	r3, [pc, #360]	; (800c36c <USB_EPStartXfer+0x490>)
 800c204:	4013      	ands	r3, r2
 800c206:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	695b      	ldr	r3, [r3, #20]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d123      	bne.n	800c258 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c210:	69bb      	ldr	r3, [r7, #24]
 800c212:	015a      	lsls	r2, r3, #5
 800c214:	69fb      	ldr	r3, [r7, #28]
 800c216:	4413      	add	r3, r2
 800c218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c21c:	691a      	ldr	r2, [r3, #16]
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	689b      	ldr	r3, [r3, #8]
 800c222:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c226:	69b9      	ldr	r1, [r7, #24]
 800c228:	0148      	lsls	r0, r1, #5
 800c22a:	69f9      	ldr	r1, [r7, #28]
 800c22c:	4401      	add	r1, r0
 800c22e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c232:	4313      	orrs	r3, r2
 800c234:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c236:	69bb      	ldr	r3, [r7, #24]
 800c238:	015a      	lsls	r2, r3, #5
 800c23a:	69fb      	ldr	r3, [r7, #28]
 800c23c:	4413      	add	r3, r2
 800c23e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c242:	691b      	ldr	r3, [r3, #16]
 800c244:	69ba      	ldr	r2, [r7, #24]
 800c246:	0151      	lsls	r1, r2, #5
 800c248:	69fa      	ldr	r2, [r7, #28]
 800c24a:	440a      	add	r2, r1
 800c24c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c250:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c254:	6113      	str	r3, [r2, #16]
 800c256:	e033      	b.n	800c2c0 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	695a      	ldr	r2, [r3, #20]
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	689b      	ldr	r3, [r3, #8]
 800c260:	4413      	add	r3, r2
 800c262:	1e5a      	subs	r2, r3, #1
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	689b      	ldr	r3, [r3, #8]
 800c268:	fbb2 f3f3 	udiv	r3, r2, r3
 800c26c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c26e:	69bb      	ldr	r3, [r7, #24]
 800c270:	015a      	lsls	r2, r3, #5
 800c272:	69fb      	ldr	r3, [r7, #28]
 800c274:	4413      	add	r3, r2
 800c276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c27a:	691a      	ldr	r2, [r3, #16]
 800c27c:	8afb      	ldrh	r3, [r7, #22]
 800c27e:	04d9      	lsls	r1, r3, #19
 800c280:	4b3b      	ldr	r3, [pc, #236]	; (800c370 <USB_EPStartXfer+0x494>)
 800c282:	400b      	ands	r3, r1
 800c284:	69b9      	ldr	r1, [r7, #24]
 800c286:	0148      	lsls	r0, r1, #5
 800c288:	69f9      	ldr	r1, [r7, #28]
 800c28a:	4401      	add	r1, r0
 800c28c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c290:	4313      	orrs	r3, r2
 800c292:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800c294:	69bb      	ldr	r3, [r7, #24]
 800c296:	015a      	lsls	r2, r3, #5
 800c298:	69fb      	ldr	r3, [r7, #28]
 800c29a:	4413      	add	r3, r2
 800c29c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2a0:	691a      	ldr	r2, [r3, #16]
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	689b      	ldr	r3, [r3, #8]
 800c2a6:	8af9      	ldrh	r1, [r7, #22]
 800c2a8:	fb01 f303 	mul.w	r3, r1, r3
 800c2ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c2b0:	69b9      	ldr	r1, [r7, #24]
 800c2b2:	0148      	lsls	r0, r1, #5
 800c2b4:	69f9      	ldr	r1, [r7, #28]
 800c2b6:	4401      	add	r1, r0
 800c2b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c2bc:	4313      	orrs	r3, r2
 800c2be:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c2c0:	79fb      	ldrb	r3, [r7, #7]
 800c2c2:	2b01      	cmp	r3, #1
 800c2c4:	d10d      	bne.n	800c2e2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	68db      	ldr	r3, [r3, #12]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d009      	beq.n	800c2e2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	68d9      	ldr	r1, [r3, #12]
 800c2d2:	69bb      	ldr	r3, [r7, #24]
 800c2d4:	015a      	lsls	r2, r3, #5
 800c2d6:	69fb      	ldr	r3, [r7, #28]
 800c2d8:	4413      	add	r3, r2
 800c2da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2de:	460a      	mov	r2, r1
 800c2e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	78db      	ldrb	r3, [r3, #3]
 800c2e6:	2b01      	cmp	r3, #1
 800c2e8:	d128      	bne.n	800c33c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c2ea:	69fb      	ldr	r3, [r7, #28]
 800c2ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2f0:	689b      	ldr	r3, [r3, #8]
 800c2f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d110      	bne.n	800c31c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c2fa:	69bb      	ldr	r3, [r7, #24]
 800c2fc:	015a      	lsls	r2, r3, #5
 800c2fe:	69fb      	ldr	r3, [r7, #28]
 800c300:	4413      	add	r3, r2
 800c302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	69ba      	ldr	r2, [r7, #24]
 800c30a:	0151      	lsls	r1, r2, #5
 800c30c:	69fa      	ldr	r2, [r7, #28]
 800c30e:	440a      	add	r2, r1
 800c310:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c314:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c318:	6013      	str	r3, [r2, #0]
 800c31a:	e00f      	b.n	800c33c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c31c:	69bb      	ldr	r3, [r7, #24]
 800c31e:	015a      	lsls	r2, r3, #5
 800c320:	69fb      	ldr	r3, [r7, #28]
 800c322:	4413      	add	r3, r2
 800c324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	69ba      	ldr	r2, [r7, #24]
 800c32c:	0151      	lsls	r1, r2, #5
 800c32e:	69fa      	ldr	r2, [r7, #28]
 800c330:	440a      	add	r2, r1
 800c332:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c33a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c33c:	69bb      	ldr	r3, [r7, #24]
 800c33e:	015a      	lsls	r2, r3, #5
 800c340:	69fb      	ldr	r3, [r7, #28]
 800c342:	4413      	add	r3, r2
 800c344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	69ba      	ldr	r2, [r7, #24]
 800c34c:	0151      	lsls	r1, r2, #5
 800c34e:	69fa      	ldr	r2, [r7, #28]
 800c350:	440a      	add	r2, r1
 800c352:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c356:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c35a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c35c:	2300      	movs	r3, #0
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3720      	adds	r7, #32
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}
 800c366:	bf00      	nop
 800c368:	fff80000 	.word	0xfff80000
 800c36c:	e007ffff 	.word	0xe007ffff
 800c370:	1ff80000 	.word	0x1ff80000

0800c374 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c374:	b480      	push	{r7}
 800c376:	b087      	sub	sp, #28
 800c378:	af00      	add	r7, sp, #0
 800c37a:	60f8      	str	r0, [r7, #12]
 800c37c:	60b9      	str	r1, [r7, #8]
 800c37e:	4613      	mov	r3, r2
 800c380:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	781b      	ldrb	r3, [r3, #0]
 800c38a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	785b      	ldrb	r3, [r3, #1]
 800c390:	2b01      	cmp	r3, #1
 800c392:	f040 80cd 	bne.w	800c530 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	695b      	ldr	r3, [r3, #20]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d132      	bne.n	800c404 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c39e:	693b      	ldr	r3, [r7, #16]
 800c3a0:	015a      	lsls	r2, r3, #5
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	4413      	add	r3, r2
 800c3a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3aa:	691a      	ldr	r2, [r3, #16]
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	0159      	lsls	r1, r3, #5
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	440b      	add	r3, r1
 800c3b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3b8:	4619      	mov	r1, r3
 800c3ba:	4b98      	ldr	r3, [pc, #608]	; (800c61c <USB_EP0StartXfer+0x2a8>)
 800c3bc:	4013      	ands	r3, r2
 800c3be:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	015a      	lsls	r2, r3, #5
 800c3c4:	697b      	ldr	r3, [r7, #20]
 800c3c6:	4413      	add	r3, r2
 800c3c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3cc:	691b      	ldr	r3, [r3, #16]
 800c3ce:	693a      	ldr	r2, [r7, #16]
 800c3d0:	0151      	lsls	r1, r2, #5
 800c3d2:	697a      	ldr	r2, [r7, #20]
 800c3d4:	440a      	add	r2, r1
 800c3d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c3de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	015a      	lsls	r2, r3, #5
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	4413      	add	r3, r2
 800c3e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3ec:	691a      	ldr	r2, [r3, #16]
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	0159      	lsls	r1, r3, #5
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	440b      	add	r3, r1
 800c3f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3fa:	4619      	mov	r1, r3
 800c3fc:	4b88      	ldr	r3, [pc, #544]	; (800c620 <USB_EP0StartXfer+0x2ac>)
 800c3fe:	4013      	ands	r3, r2
 800c400:	610b      	str	r3, [r1, #16]
 800c402:	e04e      	b.n	800c4a2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	015a      	lsls	r2, r3, #5
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	4413      	add	r3, r2
 800c40c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c410:	691a      	ldr	r2, [r3, #16]
 800c412:	693b      	ldr	r3, [r7, #16]
 800c414:	0159      	lsls	r1, r3, #5
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	440b      	add	r3, r1
 800c41a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c41e:	4619      	mov	r1, r3
 800c420:	4b7f      	ldr	r3, [pc, #508]	; (800c620 <USB_EP0StartXfer+0x2ac>)
 800c422:	4013      	ands	r3, r2
 800c424:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	015a      	lsls	r2, r3, #5
 800c42a:	697b      	ldr	r3, [r7, #20]
 800c42c:	4413      	add	r3, r2
 800c42e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c432:	691a      	ldr	r2, [r3, #16]
 800c434:	693b      	ldr	r3, [r7, #16]
 800c436:	0159      	lsls	r1, r3, #5
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	440b      	add	r3, r1
 800c43c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c440:	4619      	mov	r1, r3
 800c442:	4b76      	ldr	r3, [pc, #472]	; (800c61c <USB_EP0StartXfer+0x2a8>)
 800c444:	4013      	ands	r3, r2
 800c446:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	695a      	ldr	r2, [r3, #20]
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	689b      	ldr	r3, [r3, #8]
 800c450:	429a      	cmp	r2, r3
 800c452:	d903      	bls.n	800c45c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	689a      	ldr	r2, [r3, #8]
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	015a      	lsls	r2, r3, #5
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	4413      	add	r3, r2
 800c464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c468:	691b      	ldr	r3, [r3, #16]
 800c46a:	693a      	ldr	r2, [r7, #16]
 800c46c:	0151      	lsls	r1, r2, #5
 800c46e:	697a      	ldr	r2, [r7, #20]
 800c470:	440a      	add	r2, r1
 800c472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c476:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c47a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	015a      	lsls	r2, r3, #5
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	4413      	add	r3, r2
 800c484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c488:	691a      	ldr	r2, [r3, #16]
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	695b      	ldr	r3, [r3, #20]
 800c48e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c492:	6939      	ldr	r1, [r7, #16]
 800c494:	0148      	lsls	r0, r1, #5
 800c496:	6979      	ldr	r1, [r7, #20]
 800c498:	4401      	add	r1, r0
 800c49a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c49e:	4313      	orrs	r3, r2
 800c4a0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c4a2:	79fb      	ldrb	r3, [r7, #7]
 800c4a4:	2b01      	cmp	r3, #1
 800c4a6:	d11e      	bne.n	800c4e6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	691b      	ldr	r3, [r3, #16]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d009      	beq.n	800c4c4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	015a      	lsls	r2, r3, #5
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	4413      	add	r3, r2
 800c4b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4bc:	461a      	mov	r2, r3
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	691b      	ldr	r3, [r3, #16]
 800c4c2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c4c4:	693b      	ldr	r3, [r7, #16]
 800c4c6:	015a      	lsls	r2, r3, #5
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	4413      	add	r3, r2
 800c4cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	693a      	ldr	r2, [r7, #16]
 800c4d4:	0151      	lsls	r1, r2, #5
 800c4d6:	697a      	ldr	r2, [r7, #20]
 800c4d8:	440a      	add	r2, r1
 800c4da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c4e2:	6013      	str	r3, [r2, #0]
 800c4e4:	e092      	b.n	800c60c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	015a      	lsls	r2, r3, #5
 800c4ea:	697b      	ldr	r3, [r7, #20]
 800c4ec:	4413      	add	r3, r2
 800c4ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	693a      	ldr	r2, [r7, #16]
 800c4f6:	0151      	lsls	r1, r2, #5
 800c4f8:	697a      	ldr	r2, [r7, #20]
 800c4fa:	440a      	add	r2, r1
 800c4fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c500:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c504:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	695b      	ldr	r3, [r3, #20]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d07e      	beq.n	800c60c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	781b      	ldrb	r3, [r3, #0]
 800c51a:	f003 030f 	and.w	r3, r3, #15
 800c51e:	2101      	movs	r1, #1
 800c520:	fa01 f303 	lsl.w	r3, r1, r3
 800c524:	6979      	ldr	r1, [r7, #20]
 800c526:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c52a:	4313      	orrs	r3, r2
 800c52c:	634b      	str	r3, [r1, #52]	; 0x34
 800c52e:	e06d      	b.n	800c60c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	015a      	lsls	r2, r3, #5
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	4413      	add	r3, r2
 800c538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c53c:	691a      	ldr	r2, [r3, #16]
 800c53e:	693b      	ldr	r3, [r7, #16]
 800c540:	0159      	lsls	r1, r3, #5
 800c542:	697b      	ldr	r3, [r7, #20]
 800c544:	440b      	add	r3, r1
 800c546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c54a:	4619      	mov	r1, r3
 800c54c:	4b34      	ldr	r3, [pc, #208]	; (800c620 <USB_EP0StartXfer+0x2ac>)
 800c54e:	4013      	ands	r3, r2
 800c550:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c552:	693b      	ldr	r3, [r7, #16]
 800c554:	015a      	lsls	r2, r3, #5
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	4413      	add	r3, r2
 800c55a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c55e:	691a      	ldr	r2, [r3, #16]
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	0159      	lsls	r1, r3, #5
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	440b      	add	r3, r1
 800c568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c56c:	4619      	mov	r1, r3
 800c56e:	4b2b      	ldr	r3, [pc, #172]	; (800c61c <USB_EP0StartXfer+0x2a8>)
 800c570:	4013      	ands	r3, r2
 800c572:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	695b      	ldr	r3, [r3, #20]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d003      	beq.n	800c584 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	689a      	ldr	r2, [r3, #8]
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	015a      	lsls	r2, r3, #5
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	4413      	add	r3, r2
 800c58c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c590:	691b      	ldr	r3, [r3, #16]
 800c592:	693a      	ldr	r2, [r7, #16]
 800c594:	0151      	lsls	r1, r2, #5
 800c596:	697a      	ldr	r2, [r7, #20]
 800c598:	440a      	add	r2, r1
 800c59a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c59e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c5a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800c5a4:	693b      	ldr	r3, [r7, #16]
 800c5a6:	015a      	lsls	r2, r3, #5
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	4413      	add	r3, r2
 800c5ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5b0:	691a      	ldr	r2, [r3, #16]
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	689b      	ldr	r3, [r3, #8]
 800c5b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c5ba:	6939      	ldr	r1, [r7, #16]
 800c5bc:	0148      	lsls	r0, r1, #5
 800c5be:	6979      	ldr	r1, [r7, #20]
 800c5c0:	4401      	add	r1, r0
 800c5c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c5c6:	4313      	orrs	r3, r2
 800c5c8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c5ca:	79fb      	ldrb	r3, [r7, #7]
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d10d      	bne.n	800c5ec <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	68db      	ldr	r3, [r3, #12]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d009      	beq.n	800c5ec <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	68d9      	ldr	r1, [r3, #12]
 800c5dc:	693b      	ldr	r3, [r7, #16]
 800c5de:	015a      	lsls	r2, r3, #5
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	4413      	add	r3, r2
 800c5e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5e8:	460a      	mov	r2, r1
 800c5ea:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c5ec:	693b      	ldr	r3, [r7, #16]
 800c5ee:	015a      	lsls	r2, r3, #5
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	4413      	add	r3, r2
 800c5f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	693a      	ldr	r2, [r7, #16]
 800c5fc:	0151      	lsls	r1, r2, #5
 800c5fe:	697a      	ldr	r2, [r7, #20]
 800c600:	440a      	add	r2, r1
 800c602:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c606:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c60a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c60c:	2300      	movs	r3, #0
}
 800c60e:	4618      	mov	r0, r3
 800c610:	371c      	adds	r7, #28
 800c612:	46bd      	mov	sp, r7
 800c614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c618:	4770      	bx	lr
 800c61a:	bf00      	nop
 800c61c:	e007ffff 	.word	0xe007ffff
 800c620:	fff80000 	.word	0xfff80000

0800c624 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c624:	b480      	push	{r7}
 800c626:	b089      	sub	sp, #36	; 0x24
 800c628:	af00      	add	r7, sp, #0
 800c62a:	60f8      	str	r0, [r7, #12]
 800c62c:	60b9      	str	r1, [r7, #8]
 800c62e:	4611      	mov	r1, r2
 800c630:	461a      	mov	r2, r3
 800c632:	460b      	mov	r3, r1
 800c634:	71fb      	strb	r3, [r7, #7]
 800c636:	4613      	mov	r3, r2
 800c638:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800c642:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c646:	2b00      	cmp	r3, #0
 800c648:	d11a      	bne.n	800c680 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c64a:	88bb      	ldrh	r3, [r7, #4]
 800c64c:	3303      	adds	r3, #3
 800c64e:	089b      	lsrs	r3, r3, #2
 800c650:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c652:	2300      	movs	r3, #0
 800c654:	61bb      	str	r3, [r7, #24]
 800c656:	e00f      	b.n	800c678 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c658:	79fb      	ldrb	r3, [r7, #7]
 800c65a:	031a      	lsls	r2, r3, #12
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	4413      	add	r3, r2
 800c660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c664:	461a      	mov	r2, r3
 800c666:	69fb      	ldr	r3, [r7, #28]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c66c:	69fb      	ldr	r3, [r7, #28]
 800c66e:	3304      	adds	r3, #4
 800c670:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c672:	69bb      	ldr	r3, [r7, #24]
 800c674:	3301      	adds	r3, #1
 800c676:	61bb      	str	r3, [r7, #24]
 800c678:	69ba      	ldr	r2, [r7, #24]
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d3eb      	bcc.n	800c658 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c680:	2300      	movs	r3, #0
}
 800c682:	4618      	mov	r0, r3
 800c684:	3724      	adds	r7, #36	; 0x24
 800c686:	46bd      	mov	sp, r7
 800c688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68c:	4770      	bx	lr

0800c68e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c68e:	b480      	push	{r7}
 800c690:	b089      	sub	sp, #36	; 0x24
 800c692:	af00      	add	r7, sp, #0
 800c694:	60f8      	str	r0, [r7, #12]
 800c696:	60b9      	str	r1, [r7, #8]
 800c698:	4613      	mov	r3, r2
 800c69a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800c6a4:	88fb      	ldrh	r3, [r7, #6]
 800c6a6:	3303      	adds	r3, #3
 800c6a8:	089b      	lsrs	r3, r3, #2
 800c6aa:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	61bb      	str	r3, [r7, #24]
 800c6b0:	e00b      	b.n	800c6ca <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6b8:	681a      	ldr	r2, [r3, #0]
 800c6ba:	69fb      	ldr	r3, [r7, #28]
 800c6bc:	601a      	str	r2, [r3, #0]
    pDest++;
 800c6be:	69fb      	ldr	r3, [r7, #28]
 800c6c0:	3304      	adds	r3, #4
 800c6c2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c6c4:	69bb      	ldr	r3, [r7, #24]
 800c6c6:	3301      	adds	r3, #1
 800c6c8:	61bb      	str	r3, [r7, #24]
 800c6ca:	69ba      	ldr	r2, [r7, #24]
 800c6cc:	693b      	ldr	r3, [r7, #16]
 800c6ce:	429a      	cmp	r2, r3
 800c6d0:	d3ef      	bcc.n	800c6b2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800c6d2:	69fb      	ldr	r3, [r7, #28]
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3724      	adds	r7, #36	; 0x24
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr

0800c6e0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b085      	sub	sp, #20
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
 800c6e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	781b      	ldrb	r3, [r3, #0]
 800c6f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	785b      	ldrb	r3, [r3, #1]
 800c6f8:	2b01      	cmp	r3, #1
 800c6fa:	d12c      	bne.n	800c756 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	015a      	lsls	r2, r3, #5
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	4413      	add	r3, r2
 800c704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	db12      	blt.n	800c734 <USB_EPSetStall+0x54>
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d00f      	beq.n	800c734 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	015a      	lsls	r2, r3, #5
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	4413      	add	r3, r2
 800c71c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	68ba      	ldr	r2, [r7, #8]
 800c724:	0151      	lsls	r1, r2, #5
 800c726:	68fa      	ldr	r2, [r7, #12]
 800c728:	440a      	add	r2, r1
 800c72a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c72e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c732:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	015a      	lsls	r2, r3, #5
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	4413      	add	r3, r2
 800c73c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	68ba      	ldr	r2, [r7, #8]
 800c744:	0151      	lsls	r1, r2, #5
 800c746:	68fa      	ldr	r2, [r7, #12]
 800c748:	440a      	add	r2, r1
 800c74a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c74e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c752:	6013      	str	r3, [r2, #0]
 800c754:	e02b      	b.n	800c7ae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	015a      	lsls	r2, r3, #5
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	4413      	add	r3, r2
 800c75e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	2b00      	cmp	r3, #0
 800c766:	db12      	blt.n	800c78e <USB_EPSetStall+0xae>
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d00f      	beq.n	800c78e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	015a      	lsls	r2, r3, #5
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	4413      	add	r3, r2
 800c776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	68ba      	ldr	r2, [r7, #8]
 800c77e:	0151      	lsls	r1, r2, #5
 800c780:	68fa      	ldr	r2, [r7, #12]
 800c782:	440a      	add	r2, r1
 800c784:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c788:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c78c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	015a      	lsls	r2, r3, #5
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	4413      	add	r3, r2
 800c796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	68ba      	ldr	r2, [r7, #8]
 800c79e:	0151      	lsls	r1, r2, #5
 800c7a0:	68fa      	ldr	r2, [r7, #12]
 800c7a2:	440a      	add	r2, r1
 800c7a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c7ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c7ae:	2300      	movs	r3, #0
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3714      	adds	r7, #20
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ba:	4770      	bx	lr

0800c7bc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b085      	sub	sp, #20
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	781b      	ldrb	r3, [r3, #0]
 800c7ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	785b      	ldrb	r3, [r3, #1]
 800c7d4:	2b01      	cmp	r3, #1
 800c7d6:	d128      	bne.n	800c82a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	015a      	lsls	r2, r3, #5
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	4413      	add	r3, r2
 800c7e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	68ba      	ldr	r2, [r7, #8]
 800c7e8:	0151      	lsls	r1, r2, #5
 800c7ea:	68fa      	ldr	r2, [r7, #12]
 800c7ec:	440a      	add	r2, r1
 800c7ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c7f6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	78db      	ldrb	r3, [r3, #3]
 800c7fc:	2b03      	cmp	r3, #3
 800c7fe:	d003      	beq.n	800c808 <USB_EPClearStall+0x4c>
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	78db      	ldrb	r3, [r3, #3]
 800c804:	2b02      	cmp	r3, #2
 800c806:	d138      	bne.n	800c87a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	015a      	lsls	r2, r3, #5
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	4413      	add	r3, r2
 800c810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	68ba      	ldr	r2, [r7, #8]
 800c818:	0151      	lsls	r1, r2, #5
 800c81a:	68fa      	ldr	r2, [r7, #12]
 800c81c:	440a      	add	r2, r1
 800c81e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c826:	6013      	str	r3, [r2, #0]
 800c828:	e027      	b.n	800c87a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	015a      	lsls	r2, r3, #5
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	4413      	add	r3, r2
 800c832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	68ba      	ldr	r2, [r7, #8]
 800c83a:	0151      	lsls	r1, r2, #5
 800c83c:	68fa      	ldr	r2, [r7, #12]
 800c83e:	440a      	add	r2, r1
 800c840:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c844:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c848:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	78db      	ldrb	r3, [r3, #3]
 800c84e:	2b03      	cmp	r3, #3
 800c850:	d003      	beq.n	800c85a <USB_EPClearStall+0x9e>
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	78db      	ldrb	r3, [r3, #3]
 800c856:	2b02      	cmp	r3, #2
 800c858:	d10f      	bne.n	800c87a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	015a      	lsls	r2, r3, #5
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	4413      	add	r3, r2
 800c862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	68ba      	ldr	r2, [r7, #8]
 800c86a:	0151      	lsls	r1, r2, #5
 800c86c:	68fa      	ldr	r2, [r7, #12]
 800c86e:	440a      	add	r2, r1
 800c870:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c878:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c87a:	2300      	movs	r3, #0
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	3714      	adds	r7, #20
 800c880:	46bd      	mov	sp, r7
 800c882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c886:	4770      	bx	lr

0800c888 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b086      	sub	sp, #24
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	613b      	str	r3, [r7, #16]
  uint32_t i;

  /* Clear Pending interrupt */
  for (i = 0U; i < 15U; i++)
 800c894:	2300      	movs	r3, #0
 800c896:	617b      	str	r3, [r7, #20]
 800c898:	e016      	b.n	800c8c8 <USB_StopDevice+0x40>
  {
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	015a      	lsls	r2, r3, #5
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	4413      	add	r3, r2
 800c8a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c8ac:	6093      	str	r3, [r2, #8]
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	015a      	lsls	r2, r3, #5
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	4413      	add	r3, r2
 800c8b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c8c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < 15U; i++)
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	3301      	adds	r3, #1
 800c8c6:	617b      	str	r3, [r7, #20]
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	2b0e      	cmp	r3, #14
 800c8cc:	d9e5      	bls.n	800c89a <USB_StopDevice+0x12>
  }

  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 800c8ce:	693b      	ldr	r3, [r7, #16]
 800c8d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8d4:	461a      	mov	r2, r3
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK  = 0U;
 800c8da:	693b      	ldr	r3, [r7, #16]
 800c8dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c8e6:	693b      	ldr	r3, [r7, #16]
 800c8e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8ec:	461a      	mov	r2, r3
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	61d3      	str	r3, [r2, #28]

  /* Flush the FIFO */
  ret = USB_FlushRxFifo(USBx);
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f7ff f986 	bl	800bc04 <USB_FlushRxFifo>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800c8fc:	7bfb      	ldrb	r3, [r7, #15]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d001      	beq.n	800c906 <USB_StopDevice+0x7e>
  {
    return ret;
 800c902:	7bfb      	ldrb	r3, [r7, #15]
 800c904:	e00b      	b.n	800c91e <USB_StopDevice+0x96>
  }

  ret = USB_FlushTxFifo(USBx,  0x10U);
 800c906:	2110      	movs	r1, #16
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f7ff f955 	bl	800bbb8 <USB_FlushTxFifo>
 800c90e:	4603      	mov	r3, r0
 800c910:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800c912:	7bfb      	ldrb	r3, [r7, #15]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d001      	beq.n	800c91c <USB_StopDevice+0x94>
  {
    return ret;
 800c918:	7bfb      	ldrb	r3, [r7, #15]
 800c91a:	e000      	b.n	800c91e <USB_StopDevice+0x96>
  }

  return ret;
 800c91c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3718      	adds	r7, #24
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}

0800c926 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c926:	b480      	push	{r7}
 800c928:	b085      	sub	sp, #20
 800c92a:	af00      	add	r7, sp, #0
 800c92c:	6078      	str	r0, [r7, #4]
 800c92e:	460b      	mov	r3, r1
 800c930:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	68fa      	ldr	r2, [r7, #12]
 800c940:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c944:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c948:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c950:	681a      	ldr	r2, [r3, #0]
 800c952:	78fb      	ldrb	r3, [r7, #3]
 800c954:	011b      	lsls	r3, r3, #4
 800c956:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c95a:	68f9      	ldr	r1, [r7, #12]
 800c95c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c960:	4313      	orrs	r3, r2
 800c962:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c964:	2300      	movs	r3, #0
}
 800c966:	4618      	mov	r0, r3
 800c968:	3714      	adds	r7, #20
 800c96a:	46bd      	mov	sp, r7
 800c96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c970:	4770      	bx	lr

0800c972 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c972:	b580      	push	{r7, lr}
 800c974:	b084      	sub	sp, #16
 800c976:	af00      	add	r7, sp, #0
 800c978:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c984:	685b      	ldr	r3, [r3, #4]
 800c986:	68fa      	ldr	r2, [r7, #12]
 800c988:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c98c:	f023 0302 	bic.w	r3, r3, #2
 800c990:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c992:	2003      	movs	r0, #3
 800c994:	f7f4 fd36 	bl	8001404 <HAL_Delay>

  return HAL_OK;
 800c998:	2300      	movs	r3, #0
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	3710      	adds	r7, #16
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}

0800c9a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c9a2:	b580      	push	{r7, lr}
 800c9a4:	b084      	sub	sp, #16
 800c9a6:	af00      	add	r7, sp, #0
 800c9a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9b4:	685b      	ldr	r3, [r3, #4]
 800c9b6:	68fa      	ldr	r2, [r7, #12]
 800c9b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c9bc:	f043 0302 	orr.w	r3, r3, #2
 800c9c0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c9c2:	2003      	movs	r0, #3
 800c9c4:	f7f4 fd1e 	bl	8001404 <HAL_Delay>

  return HAL_OK;
 800c9c8:	2300      	movs	r3, #0
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	3710      	adds	r7, #16
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}

0800c9d2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c9d2:	b480      	push	{r7}
 800c9d4:	b085      	sub	sp, #20
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	695b      	ldr	r3, [r3, #20]
 800c9de:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	699b      	ldr	r3, [r3, #24]
 800c9e4:	68fa      	ldr	r2, [r7, #12]
 800c9e6:	4013      	ands	r3, r2
 800c9e8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	3714      	adds	r7, #20
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f6:	4770      	bx	lr

0800c9f8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b085      	sub	sp, #20
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca0a:	699b      	ldr	r3, [r3, #24]
 800ca0c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca14:	69db      	ldr	r3, [r3, #28]
 800ca16:	68ba      	ldr	r2, [r7, #8]
 800ca18:	4013      	ands	r3, r2
 800ca1a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	0c1b      	lsrs	r3, r3, #16
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3714      	adds	r7, #20
 800ca24:	46bd      	mov	sp, r7
 800ca26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2a:	4770      	bx	lr

0800ca2c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b085      	sub	sp, #20
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca3e:	699b      	ldr	r3, [r3, #24]
 800ca40:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca48:	69db      	ldr	r3, [r3, #28]
 800ca4a:	68ba      	ldr	r2, [r7, #8]
 800ca4c:	4013      	ands	r3, r2
 800ca4e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	b29b      	uxth	r3, r3
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3714      	adds	r7, #20
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5e:	4770      	bx	lr

0800ca60 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ca60:	b480      	push	{r7}
 800ca62:	b085      	sub	sp, #20
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
 800ca68:	460b      	mov	r3, r1
 800ca6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ca70:	78fb      	ldrb	r3, [r7, #3]
 800ca72:	015a      	lsls	r2, r3, #5
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	4413      	add	r3, r2
 800ca78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca7c:	689b      	ldr	r3, [r3, #8]
 800ca7e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca86:	695b      	ldr	r3, [r3, #20]
 800ca88:	68ba      	ldr	r2, [r7, #8]
 800ca8a:	4013      	ands	r3, r2
 800ca8c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ca8e:	68bb      	ldr	r3, [r7, #8]
}
 800ca90:	4618      	mov	r0, r3
 800ca92:	3714      	adds	r7, #20
 800ca94:	46bd      	mov	sp, r7
 800ca96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9a:	4770      	bx	lr

0800ca9c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	b087      	sub	sp, #28
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
 800caa4:	460b      	mov	r3, r1
 800caa6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cab2:	691b      	ldr	r3, [r3, #16]
 800cab4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cabc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cabe:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800cac0:	78fb      	ldrb	r3, [r7, #3]
 800cac2:	f003 030f 	and.w	r3, r3, #15
 800cac6:	68fa      	ldr	r2, [r7, #12]
 800cac8:	fa22 f303 	lsr.w	r3, r2, r3
 800cacc:	01db      	lsls	r3, r3, #7
 800cace:	b2db      	uxtb	r3, r3
 800cad0:	693a      	ldr	r2, [r7, #16]
 800cad2:	4313      	orrs	r3, r2
 800cad4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800cad6:	78fb      	ldrb	r3, [r7, #3]
 800cad8:	015a      	lsls	r2, r3, #5
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	4413      	add	r3, r2
 800cade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cae2:	689b      	ldr	r3, [r3, #8]
 800cae4:	693a      	ldr	r2, [r7, #16]
 800cae6:	4013      	ands	r3, r2
 800cae8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800caea:	68bb      	ldr	r3, [r7, #8]
}
 800caec:	4618      	mov	r0, r3
 800caee:	371c      	adds	r7, #28
 800caf0:	46bd      	mov	sp, r7
 800caf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf6:	4770      	bx	lr

0800caf8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800caf8:	b480      	push	{r7}
 800cafa:	b083      	sub	sp, #12
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	695b      	ldr	r3, [r3, #20]
 800cb04:	f003 0301 	and.w	r3, r3, #1
}
 800cb08:	4618      	mov	r0, r3
 800cb0a:	370c      	adds	r7, #12
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb12:	4770      	bx	lr

0800cb14 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800cb14:	b480      	push	{r7}
 800cb16:	b085      	sub	sp, #20
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb26:	681a      	ldr	r2, [r3, #0]
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb2e:	4619      	mov	r1, r3
 800cb30:	4b09      	ldr	r3, [pc, #36]	; (800cb58 <USB_ActivateSetup+0x44>)
 800cb32:	4013      	ands	r3, r2
 800cb34:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb3c:	685b      	ldr	r3, [r3, #4]
 800cb3e:	68fa      	ldr	r2, [r7, #12]
 800cb40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cb4a:	2300      	movs	r3, #0
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3714      	adds	r7, #20
 800cb50:	46bd      	mov	sp, r7
 800cb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb56:	4770      	bx	lr
 800cb58:	fffff800 	.word	0xfffff800

0800cb5c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800cb5c:	b480      	push	{r7}
 800cb5e:	b087      	sub	sp, #28
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	60f8      	str	r0, [r7, #12]
 800cb64:	460b      	mov	r3, r1
 800cb66:	607a      	str	r2, [r7, #4]
 800cb68:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	333c      	adds	r3, #60	; 0x3c
 800cb72:	3304      	adds	r3, #4
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800cb78:	693b      	ldr	r3, [r7, #16]
 800cb7a:	4a26      	ldr	r2, [pc, #152]	; (800cc14 <USB_EP0_OutStart+0xb8>)
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	d90a      	bls.n	800cb96 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cb80:	697b      	ldr	r3, [r7, #20]
 800cb82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb90:	d101      	bne.n	800cb96 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800cb92:	2300      	movs	r3, #0
 800cb94:	e037      	b.n	800cc06 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800cb96:	697b      	ldr	r3, [r7, #20]
 800cb98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb9c:	461a      	mov	r2, r3
 800cb9e:	2300      	movs	r3, #0
 800cba0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cba2:	697b      	ldr	r3, [r7, #20]
 800cba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cba8:	691b      	ldr	r3, [r3, #16]
 800cbaa:	697a      	ldr	r2, [r7, #20]
 800cbac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cbb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800cbb6:	697b      	ldr	r3, [r7, #20]
 800cbb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbbc:	691b      	ldr	r3, [r3, #16]
 800cbbe:	697a      	ldr	r2, [r7, #20]
 800cbc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbc4:	f043 0318 	orr.w	r3, r3, #24
 800cbc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800cbca:	697b      	ldr	r3, [r7, #20]
 800cbcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbd0:	691b      	ldr	r3, [r3, #16]
 800cbd2:	697a      	ldr	r2, [r7, #20]
 800cbd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbd8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800cbdc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800cbde:	7afb      	ldrb	r3, [r7, #11]
 800cbe0:	2b01      	cmp	r3, #1
 800cbe2:	d10f      	bne.n	800cc04 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbea:	461a      	mov	r2, r3
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800cbf0:	697b      	ldr	r3, [r7, #20]
 800cbf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	697a      	ldr	r2, [r7, #20]
 800cbfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbfe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800cc02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cc04:	2300      	movs	r3, #0
}
 800cc06:	4618      	mov	r0, r3
 800cc08:	371c      	adds	r7, #28
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc10:	4770      	bx	lr
 800cc12:	bf00      	nop
 800cc14:	4f54300a 	.word	0x4f54300a

0800cc18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b085      	sub	sp, #20
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800cc20:	2300      	movs	r3, #0
 800cc22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	3301      	adds	r3, #1
 800cc28:	60fb      	str	r3, [r7, #12]
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	4a13      	ldr	r2, [pc, #76]	; (800cc7c <USB_CoreReset+0x64>)
 800cc2e:	4293      	cmp	r3, r2
 800cc30:	d901      	bls.n	800cc36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cc32:	2303      	movs	r3, #3
 800cc34:	e01b      	b.n	800cc6e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	691b      	ldr	r3, [r3, #16]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	daf2      	bge.n	800cc24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cc3e:	2300      	movs	r3, #0
 800cc40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	691b      	ldr	r3, [r3, #16]
 800cc46:	f043 0201 	orr.w	r2, r3, #1
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	3301      	adds	r3, #1
 800cc52:	60fb      	str	r3, [r7, #12]
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	4a09      	ldr	r2, [pc, #36]	; (800cc7c <USB_CoreReset+0x64>)
 800cc58:	4293      	cmp	r3, r2
 800cc5a:	d901      	bls.n	800cc60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cc5c:	2303      	movs	r3, #3
 800cc5e:	e006      	b.n	800cc6e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	691b      	ldr	r3, [r3, #16]
 800cc64:	f003 0301 	and.w	r3, r3, #1
 800cc68:	2b01      	cmp	r3, #1
 800cc6a:	d0f0      	beq.n	800cc4e <USB_CoreReset+0x36>

  return HAL_OK;
 800cc6c:	2300      	movs	r3, #0
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3714      	adds	r7, #20
 800cc72:	46bd      	mov	sp, r7
 800cc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc78:	4770      	bx	lr
 800cc7a:	bf00      	nop
 800cc7c:	00030d40 	.word	0x00030d40

0800cc80 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800cc84:	4904      	ldr	r1, [pc, #16]	; (800cc98 <MX_FATFS_Init+0x18>)
 800cc86:	4805      	ldr	r0, [pc, #20]	; (800cc9c <MX_FATFS_Init+0x1c>)
 800cc88:	f007 f96e 	bl	8013f68 <FATFS_LinkDriver>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	461a      	mov	r2, r3
 800cc90:	4b03      	ldr	r3, [pc, #12]	; (800cca0 <MX_FATFS_Init+0x20>)
 800cc92:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800cc94:	bf00      	nop
 800cc96:	bd80      	pop	{r7, pc}
 800cc98:	2400567c 	.word	0x2400567c
 800cc9c:	08014e34 	.word	0x08014e34
 800cca0:	24005678 	.word	0x24005678

0800cca4 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800cca4:	b480      	push	{r7}
 800cca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800cca8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800ccaa:	4618      	mov	r0, r3
 800ccac:	46bd      	mov	sp, r7
 800ccae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb2:	4770      	bx	lr

0800ccb4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b082      	sub	sp, #8
 800ccb8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ccba:	2300      	movs	r3, #0
 800ccbc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ccbe:	f000 f86b 	bl	800cd98 <BSP_SD_IsDetected>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	2b01      	cmp	r3, #1
 800ccc6:	d001      	beq.n	800cccc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800ccc8:	2302      	movs	r3, #2
 800ccca:	e005      	b.n	800ccd8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800cccc:	4804      	ldr	r0, [pc, #16]	; (800cce0 <BSP_SD_Init+0x2c>)
 800ccce:	f7f9 fedb 	bl	8006a88 <HAL_SD_Init>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800ccd6:	79fb      	ldrb	r3, [r7, #7]
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3708      	adds	r7, #8
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}
 800cce0:	240013f0 	.word	0x240013f0

0800cce4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b088      	sub	sp, #32
 800cce8:	af02      	add	r7, sp, #8
 800ccea:	60f8      	str	r0, [r7, #12]
 800ccec:	60b9      	str	r1, [r7, #8]
 800ccee:	607a      	str	r2, [r7, #4]
 800ccf0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	9300      	str	r3, [sp, #0]
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	68ba      	ldr	r2, [r7, #8]
 800ccfe:	68f9      	ldr	r1, [r7, #12]
 800cd00:	4806      	ldr	r0, [pc, #24]	; (800cd1c <BSP_SD_ReadBlocks+0x38>)
 800cd02:	f7f9 ffdf 	bl	8006cc4 <HAL_SD_ReadBlocks>
 800cd06:	4603      	mov	r3, r0
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d001      	beq.n	800cd10 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800cd10:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	3718      	adds	r7, #24
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}
 800cd1a:	bf00      	nop
 800cd1c:	240013f0 	.word	0x240013f0

0800cd20 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b088      	sub	sp, #32
 800cd24:	af02      	add	r7, sp, #8
 800cd26:	60f8      	str	r0, [r7, #12]
 800cd28:	60b9      	str	r1, [r7, #8]
 800cd2a:	607a      	str	r2, [r7, #4]
 800cd2c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	9300      	str	r3, [sp, #0]
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	68ba      	ldr	r2, [r7, #8]
 800cd3a:	68f9      	ldr	r1, [r7, #12]
 800cd3c:	4806      	ldr	r0, [pc, #24]	; (800cd58 <BSP_SD_WriteBlocks+0x38>)
 800cd3e:	f7fa f94b 	bl	8006fd8 <HAL_SD_WriteBlocks>
 800cd42:	4603      	mov	r3, r0
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d001      	beq.n	800cd4c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800cd48:	2301      	movs	r3, #1
 800cd4a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800cd4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	3718      	adds	r7, #24
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}
 800cd56:	bf00      	nop
 800cd58:	240013f0 	.word	0x240013f0

0800cd5c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800cd60:	4805      	ldr	r0, [pc, #20]	; (800cd78 <BSP_SD_GetCardState+0x1c>)
 800cd62:	f7fa fe03 	bl	800796c <HAL_SD_GetCardState>
 800cd66:	4603      	mov	r3, r0
 800cd68:	2b04      	cmp	r3, #4
 800cd6a:	bf14      	ite	ne
 800cd6c:	2301      	movne	r3, #1
 800cd6e:	2300      	moveq	r3, #0
 800cd70:	b2db      	uxtb	r3, r3
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	bd80      	pop	{r7, pc}
 800cd76:	bf00      	nop
 800cd78:	240013f0 	.word	0x240013f0

0800cd7c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b082      	sub	sp, #8
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800cd84:	6879      	ldr	r1, [r7, #4]
 800cd86:	4803      	ldr	r0, [pc, #12]	; (800cd94 <BSP_SD_GetCardInfo+0x18>)
 800cd88:	f7fa fd1a 	bl	80077c0 <HAL_SD_GetCardInfo>
}
 800cd8c:	bf00      	nop
 800cd8e:	3708      	adds	r7, #8
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}
 800cd94:	240013f0 	.word	0x240013f0

0800cd98 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b082      	sub	sp, #8
 800cd9c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800cd9e:	2301      	movs	r3, #1
 800cda0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800cda2:	f000 f80b 	bl	800cdbc <BSP_PlatformIsDetected>
 800cda6:	4603      	mov	r3, r0
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d101      	bne.n	800cdb0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800cdac:	2300      	movs	r3, #0
 800cdae:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800cdb0:	79fb      	ldrb	r3, [r7, #7]
 800cdb2:	b2db      	uxtb	r3, r3
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3708      	adds	r7, #8
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}

0800cdbc <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b082      	sub	sp, #8
 800cdc0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800cdc6:	2120      	movs	r1, #32
 800cdc8:	4806      	ldr	r0, [pc, #24]	; (800cde4 <BSP_PlatformIsDetected+0x28>)
 800cdca:	f7f5 fa33 	bl	8002234 <HAL_GPIO_ReadPin>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d001      	beq.n	800cdd8 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800cdd8:	79fb      	ldrb	r3, [r7, #7]
}  
 800cdda:	4618      	mov	r0, r3
 800cddc:	3708      	adds	r7, #8
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}
 800cde2:	bf00      	nop
 800cde4:	58021800 	.word	0x58021800

0800cde8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b082      	sub	sp, #8
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	4603      	mov	r3, r0
 800cdf0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800cdf2:	4b0b      	ldr	r3, [pc, #44]	; (800ce20 <SD_CheckStatus+0x38>)
 800cdf4:	2201      	movs	r2, #1
 800cdf6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800cdf8:	f7ff ffb0 	bl	800cd5c <BSP_SD_GetCardState>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d107      	bne.n	800ce12 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ce02:	4b07      	ldr	r3, [pc, #28]	; (800ce20 <SD_CheckStatus+0x38>)
 800ce04:	781b      	ldrb	r3, [r3, #0]
 800ce06:	b2db      	uxtb	r3, r3
 800ce08:	f023 0301 	bic.w	r3, r3, #1
 800ce0c:	b2da      	uxtb	r2, r3
 800ce0e:	4b04      	ldr	r3, [pc, #16]	; (800ce20 <SD_CheckStatus+0x38>)
 800ce10:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ce12:	4b03      	ldr	r3, [pc, #12]	; (800ce20 <SD_CheckStatus+0x38>)
 800ce14:	781b      	ldrb	r3, [r3, #0]
 800ce16:	b2db      	uxtb	r3, r3
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	3708      	adds	r7, #8
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}
 800ce20:	24000019 	.word	0x24000019

0800ce24 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b082      	sub	sp, #8
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800ce2e:	4b0b      	ldr	r3, [pc, #44]	; (800ce5c <SD_initialize+0x38>)
 800ce30:	2201      	movs	r2, #1
 800ce32:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ce34:	f7ff ff3e 	bl	800ccb4 <BSP_SD_Init>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d107      	bne.n	800ce4e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800ce3e:	79fb      	ldrb	r3, [r7, #7]
 800ce40:	4618      	mov	r0, r3
 800ce42:	f7ff ffd1 	bl	800cde8 <SD_CheckStatus>
 800ce46:	4603      	mov	r3, r0
 800ce48:	461a      	mov	r2, r3
 800ce4a:	4b04      	ldr	r3, [pc, #16]	; (800ce5c <SD_initialize+0x38>)
 800ce4c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ce4e:	4b03      	ldr	r3, [pc, #12]	; (800ce5c <SD_initialize+0x38>)
 800ce50:	781b      	ldrb	r3, [r3, #0]
 800ce52:	b2db      	uxtb	r3, r3
}
 800ce54:	4618      	mov	r0, r3
 800ce56:	3708      	adds	r7, #8
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}
 800ce5c:	24000019 	.word	0x24000019

0800ce60 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b082      	sub	sp, #8
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	4603      	mov	r3, r0
 800ce68:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ce6a:	79fb      	ldrb	r3, [r7, #7]
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7ff ffbb 	bl	800cde8 <SD_CheckStatus>
 800ce72:	4603      	mov	r3, r0
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3708      	adds	r7, #8
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b086      	sub	sp, #24
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	60b9      	str	r1, [r7, #8]
 800ce84:	607a      	str	r2, [r7, #4]
 800ce86:	603b      	str	r3, [r7, #0]
 800ce88:	4603      	mov	r3, r0
 800ce8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800ce90:	f04f 33ff 	mov.w	r3, #4294967295
 800ce94:	683a      	ldr	r2, [r7, #0]
 800ce96:	6879      	ldr	r1, [r7, #4]
 800ce98:	68b8      	ldr	r0, [r7, #8]
 800ce9a:	f7ff ff23 	bl	800cce4 <BSP_SD_ReadBlocks>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d107      	bne.n	800ceb4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800cea4:	bf00      	nop
 800cea6:	f7ff ff59 	bl	800cd5c <BSP_SD_GetCardState>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d1fa      	bne.n	800cea6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ceb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	3718      	adds	r7, #24
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}

0800cebe <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cebe:	b580      	push	{r7, lr}
 800cec0:	b086      	sub	sp, #24
 800cec2:	af00      	add	r7, sp, #0
 800cec4:	60b9      	str	r1, [r7, #8]
 800cec6:	607a      	str	r2, [r7, #4]
 800cec8:	603b      	str	r3, [r7, #0]
 800ceca:	4603      	mov	r3, r0
 800cecc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cece:	2301      	movs	r3, #1
 800ced0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800ced2:	f04f 33ff 	mov.w	r3, #4294967295
 800ced6:	683a      	ldr	r2, [r7, #0]
 800ced8:	6879      	ldr	r1, [r7, #4]
 800ceda:	68b8      	ldr	r0, [r7, #8]
 800cedc:	f7ff ff20 	bl	800cd20 <BSP_SD_WriteBlocks>
 800cee0:	4603      	mov	r3, r0
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d107      	bne.n	800cef6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800cee6:	bf00      	nop
 800cee8:	f7ff ff38 	bl	800cd5c <BSP_SD_GetCardState>
 800ceec:	4603      	mov	r3, r0
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d1fa      	bne.n	800cee8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800cef2:	2300      	movs	r3, #0
 800cef4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800cef6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cef8:	4618      	mov	r0, r3
 800cefa:	3718      	adds	r7, #24
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}

0800cf00 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b08c      	sub	sp, #48	; 0x30
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	4603      	mov	r3, r0
 800cf08:	603a      	str	r2, [r7, #0]
 800cf0a:	71fb      	strb	r3, [r7, #7]
 800cf0c:	460b      	mov	r3, r1
 800cf0e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800cf10:	2301      	movs	r3, #1
 800cf12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cf16:	4b25      	ldr	r3, [pc, #148]	; (800cfac <SD_ioctl+0xac>)
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	b2db      	uxtb	r3, r3
 800cf1c:	f003 0301 	and.w	r3, r3, #1
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d001      	beq.n	800cf28 <SD_ioctl+0x28>
 800cf24:	2303      	movs	r3, #3
 800cf26:	e03c      	b.n	800cfa2 <SD_ioctl+0xa2>

  switch (cmd)
 800cf28:	79bb      	ldrb	r3, [r7, #6]
 800cf2a:	2b03      	cmp	r3, #3
 800cf2c:	d834      	bhi.n	800cf98 <SD_ioctl+0x98>
 800cf2e:	a201      	add	r2, pc, #4	; (adr r2, 800cf34 <SD_ioctl+0x34>)
 800cf30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf34:	0800cf45 	.word	0x0800cf45
 800cf38:	0800cf4d 	.word	0x0800cf4d
 800cf3c:	0800cf65 	.word	0x0800cf65
 800cf40:	0800cf7f 	.word	0x0800cf7f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cf44:	2300      	movs	r3, #0
 800cf46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cf4a:	e028      	b.n	800cf9e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cf4c:	f107 0308 	add.w	r3, r7, #8
 800cf50:	4618      	mov	r0, r3
 800cf52:	f7ff ff13 	bl	800cd7c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cf56:	6a3a      	ldr	r2, [r7, #32]
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cf62:	e01c      	b.n	800cf9e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cf64:	f107 0308 	add.w	r3, r7, #8
 800cf68:	4618      	mov	r0, r3
 800cf6a:	f7ff ff07 	bl	800cd7c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cf6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf70:	b29a      	uxth	r2, r3
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cf76:	2300      	movs	r3, #0
 800cf78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cf7c:	e00f      	b.n	800cf9e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cf7e:	f107 0308 	add.w	r3, r7, #8
 800cf82:	4618      	mov	r0, r3
 800cf84:	f7ff fefa 	bl	800cd7c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cf88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf8a:	0a5a      	lsrs	r2, r3, #9
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cf90:	2300      	movs	r3, #0
 800cf92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cf96:	e002      	b.n	800cf9e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cf98:	2304      	movs	r3, #4
 800cf9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800cf9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	3730      	adds	r7, #48	; 0x30
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
 800cfaa:	bf00      	nop
 800cfac:	24000019 	.word	0x24000019

0800cfb0 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b082      	sub	sp, #8
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
 800cfb8:	460b      	mov	r3, r1
 800cfba:	70fb      	strb	r3, [r7, #3]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	7c1b      	ldrb	r3, [r3, #16]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d115      	bne.n	800cff0 <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800cfc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cfc8:	2202      	movs	r2, #2
 800cfca:	2101      	movs	r1, #1
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f007 fc4d 	bl	801486c <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2201      	movs	r2, #1
 800cfd6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800cfda:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cfde:	2202      	movs	r2, #2
 800cfe0:	2181      	movs	r1, #129	; 0x81
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f007 fc42 	bl	801486c <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2201      	movs	r2, #1
 800cfec:	62da      	str	r2, [r3, #44]	; 0x2c
 800cfee:	e012      	b.n	800d016 <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800cff0:	2340      	movs	r3, #64	; 0x40
 800cff2:	2202      	movs	r2, #2
 800cff4:	2101      	movs	r1, #1
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f007 fc38 	bl	801486c <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2201      	movs	r2, #1
 800d000:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800d004:	2340      	movs	r3, #64	; 0x40
 800d006:	2202      	movs	r2, #2
 800d008:	2181      	movs	r1, #129	; 0x81
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f007 fc2e 	bl	801486c <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2201      	movs	r2, #1
 800d014:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800d016:	f44f 701b 	mov.w	r0, #620	; 0x26c
 800d01a:	f007 fdc3 	bl	8014ba4 <malloc>
 800d01e:	4603      	mov	r3, r0
 800d020:	461a      	mov	r2, r3
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d101      	bne.n	800d036 <USBD_MSC_Init+0x86>
  {
    return USBD_FAIL;
 800d032:	2302      	movs	r3, #2
 800d034:	e003      	b.n	800d03e <USBD_MSC_Init+0x8e>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f000 f9db 	bl	800d3f2 <MSC_BOT_Init>

  return USBD_OK;
 800d03c:	2300      	movs	r3, #0
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3708      	adds	r7, #8
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}

0800d046 <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 800d046:	b580      	push	{r7, lr}
 800d048:	b082      	sub	sp, #8
 800d04a:	af00      	add	r7, sp, #0
 800d04c:	6078      	str	r0, [r7, #4]
 800d04e:	460b      	mov	r3, r1
 800d050:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800d052:	2101      	movs	r1, #1
 800d054:	6878      	ldr	r0, [r7, #4]
 800d056:	f007 fc2f 	bl	80148b8 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2200      	movs	r2, #0
 800d05e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800d062:	2181      	movs	r1, #129	; 0x81
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f007 fc27 	bl	80148b8 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2200      	movs	r2, #0
 800d06e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f000 fa08 	bl	800d486 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d009      	beq.n	800d094 <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d086:	4618      	mov	r0, r3
 800d088:	f007 fd94 	bl	8014bb4 <free>
    pdev->pClassData  = NULL;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2200      	movs	r2, #0
 800d090:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 800d094:	2300      	movs	r3, #0
}
 800d096:	4618      	mov	r0, r3
 800d098:	3708      	adds	r7, #8
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}
	...

0800d0a0 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b086      	sub	sp, #24
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
 800d0a8:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0b0:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	781b      	ldrb	r3, [r3, #0]
 800d0be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d04d      	beq.n	800d162 <USBD_MSC_Setup+0xc2>
 800d0c6:	2b20      	cmp	r3, #32
 800d0c8:	f040 8113 	bne.w	800d2f2 <USBD_MSC_Setup+0x252>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	785b      	ldrb	r3, [r3, #1]
 800d0d0:	2bfe      	cmp	r3, #254	; 0xfe
 800d0d2:	d002      	beq.n	800d0da <USBD_MSC_Setup+0x3a>
 800d0d4:	2bff      	cmp	r3, #255	; 0xff
 800d0d6:	d024      	beq.n	800d122 <USBD_MSC_Setup+0x82>
 800d0d8:	e03b      	b.n	800d152 <USBD_MSC_Setup+0xb2>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	885b      	ldrh	r3, [r3, #2]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d118      	bne.n	800d114 <USBD_MSC_Setup+0x74>
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	88db      	ldrh	r3, [r3, #6]
 800d0e6:	2b01      	cmp	r3, #1
 800d0e8:	d114      	bne.n	800d114 <USBD_MSC_Setup+0x74>
              ((req->bmRequest & 0x80U) == 0x80U))
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	781b      	ldrb	r3, [r3, #0]
 800d0ee:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	da0f      	bge.n	800d114 <USBD_MSC_Setup+0x74>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d0fa:	699b      	ldr	r3, [r3, #24]
 800d0fc:	4798      	blx	r3
 800d0fe:	4603      	mov	r3, r0
 800d100:	461a      	mov	r2, r3
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 800d106:	693b      	ldr	r3, [r7, #16]
 800d108:	2201      	movs	r2, #1
 800d10a:	4619      	mov	r1, r3
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	f002 f9e3 	bl	800f4d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d112:	e025      	b.n	800d160 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 800d114:	6839      	ldr	r1, [r7, #0]
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	f002 f973 	bl	800f402 <USBD_CtlError>
            ret = USBD_FAIL;
 800d11c:	2302      	movs	r3, #2
 800d11e:	75fb      	strb	r3, [r7, #23]
          break;
 800d120:	e01e      	b.n	800d160 <USBD_MSC_Setup+0xc0>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	885b      	ldrh	r3, [r3, #2]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d10c      	bne.n	800d144 <USBD_MSC_Setup+0xa4>
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	88db      	ldrh	r3, [r3, #6]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d108      	bne.n	800d144 <USBD_MSC_Setup+0xa4>
              ((req->bmRequest & 0x80U) != 0x80U))
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800d138:	2b00      	cmp	r3, #0
 800d13a:	db03      	blt.n	800d144 <USBD_MSC_Setup+0xa4>
          {
            MSC_BOT_Reset(pdev);
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f000 f988 	bl	800d452 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d142:	e00d      	b.n	800d160 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 800d144:	6839      	ldr	r1, [r7, #0]
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f002 f95b 	bl	800f402 <USBD_CtlError>
            ret = USBD_FAIL;
 800d14c:	2302      	movs	r3, #2
 800d14e:	75fb      	strb	r3, [r7, #23]
          break;
 800d150:	e006      	b.n	800d160 <USBD_MSC_Setup+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d152:	6839      	ldr	r1, [r7, #0]
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f002 f954 	bl	800f402 <USBD_CtlError>
          ret = USBD_FAIL;
 800d15a:	2302      	movs	r3, #2
 800d15c:	75fb      	strb	r3, [r7, #23]
          break;
 800d15e:	bf00      	nop
      }
      break;
 800d160:	e0ce      	b.n	800d300 <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	785b      	ldrb	r3, [r3, #1]
 800d166:	2b0b      	cmp	r3, #11
 800d168:	f200 80bb 	bhi.w	800d2e2 <USBD_MSC_Setup+0x242>
 800d16c:	a201      	add	r2, pc, #4	; (adr r2, 800d174 <USBD_MSC_Setup+0xd4>)
 800d16e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d172:	bf00      	nop
 800d174:	0800d1a5 	.word	0x0800d1a5
 800d178:	0800d21b 	.word	0x0800d21b
 800d17c:	0800d2e3 	.word	0x0800d2e3
 800d180:	0800d2e3 	.word	0x0800d2e3
 800d184:	0800d2e3 	.word	0x0800d2e3
 800d188:	0800d2e3 	.word	0x0800d2e3
 800d18c:	0800d2e3 	.word	0x0800d2e3
 800d190:	0800d2e3 	.word	0x0800d2e3
 800d194:	0800d2e3 	.word	0x0800d2e3
 800d198:	0800d2e3 	.word	0x0800d2e3
 800d19c:	0800d1cd 	.word	0x0800d1cd
 800d1a0:	0800d1f5 	.word	0x0800d1f5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1aa:	2b03      	cmp	r3, #3
 800d1ac:	d107      	bne.n	800d1be <USBD_MSC_Setup+0x11e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800d1ae:	f107 030e 	add.w	r3, r7, #14
 800d1b2:	2202      	movs	r2, #2
 800d1b4:	4619      	mov	r1, r3
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f002 f98e 	bl	800f4d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d1bc:	e098      	b.n	800d2f0 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 800d1be:	6839      	ldr	r1, [r7, #0]
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f002 f91e 	bl	800f402 <USBD_CtlError>
            ret = USBD_FAIL;
 800d1c6:	2302      	movs	r3, #2
 800d1c8:	75fb      	strb	r3, [r7, #23]
          break;
 800d1ca:	e091      	b.n	800d2f0 <USBD_MSC_Setup+0x250>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1d2:	2b03      	cmp	r3, #3
 800d1d4:	d107      	bne.n	800d1e6 <USBD_MSC_Setup+0x146>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	3304      	adds	r3, #4
 800d1da:	2201      	movs	r2, #1
 800d1dc:	4619      	mov	r1, r3
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f002 f97a 	bl	800f4d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d1e4:	e084      	b.n	800d2f0 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 800d1e6:	6839      	ldr	r1, [r7, #0]
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f002 f90a 	bl	800f402 <USBD_CtlError>
            ret = USBD_FAIL;
 800d1ee:	2302      	movs	r3, #2
 800d1f0:	75fb      	strb	r3, [r7, #23]
          break;
 800d1f2:	e07d      	b.n	800d2f0 <USBD_MSC_Setup+0x250>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1fa:	2b03      	cmp	r3, #3
 800d1fc:	d106      	bne.n	800d20c <USBD_MSC_Setup+0x16c>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	885b      	ldrh	r3, [r3, #2]
 800d202:	b2db      	uxtb	r3, r3
 800d204:	461a      	mov	r2, r3
 800d206:	693b      	ldr	r3, [r7, #16]
 800d208:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d20a:	e071      	b.n	800d2f0 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 800d20c:	6839      	ldr	r1, [r7, #0]
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f002 f8f7 	bl	800f402 <USBD_CtlError>
            ret = USBD_FAIL;
 800d214:	2302      	movs	r3, #2
 800d216:	75fb      	strb	r3, [r7, #23]
          break;
 800d218:	e06a      	b.n	800d2f0 <USBD_MSC_Setup+0x250>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	889b      	ldrh	r3, [r3, #4]
 800d21e:	b2db      	uxtb	r3, r3
 800d220:	4619      	mov	r1, r3
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f007 fb67 	bl	80148f6 <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	889b      	ldrh	r3, [r3, #4]
 800d22c:	b2db      	uxtb	r3, r3
 800d22e:	4619      	mov	r1, r3
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	f007 fb41 	bl	80148b8 <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	889b      	ldrh	r3, [r3, #4]
 800d23a:	b25b      	sxtb	r3, r3
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	da23      	bge.n	800d288 <USBD_MSC_Setup+0x1e8>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	889b      	ldrh	r3, [r3, #4]
 800d244:	b2db      	uxtb	r3, r3
 800d246:	f003 020f 	and.w	r2, r3, #15
 800d24a:	6879      	ldr	r1, [r7, #4]
 800d24c:	4613      	mov	r3, r2
 800d24e:	009b      	lsls	r3, r3, #2
 800d250:	4413      	add	r3, r2
 800d252:	009b      	lsls	r3, r3, #2
 800d254:	440b      	add	r3, r1
 800d256:	3318      	adds	r3, #24
 800d258:	2200      	movs	r2, #0
 800d25a:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	7c1b      	ldrb	r3, [r3, #16]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d107      	bne.n	800d274 <USBD_MSC_Setup+0x1d4>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 800d264:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d268:	2202      	movs	r2, #2
 800d26a:	2181      	movs	r1, #129	; 0x81
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f007 fafd 	bl	801486c <USBD_LL_OpenEP>
 800d272:	e005      	b.n	800d280 <USBD_MSC_Setup+0x1e0>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 800d274:	2340      	movs	r3, #64	; 0x40
 800d276:	2202      	movs	r2, #2
 800d278:	2181      	movs	r1, #129	; 0x81
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f007 faf6 	bl	801486c <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2201      	movs	r2, #1
 800d284:	62da      	str	r2, [r3, #44]	; 0x2c
 800d286:	e024      	b.n	800d2d2 <USBD_MSC_Setup+0x232>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	889b      	ldrh	r3, [r3, #4]
 800d28c:	b2db      	uxtb	r3, r3
 800d28e:	f003 020f 	and.w	r2, r3, #15
 800d292:	6879      	ldr	r1, [r7, #4]
 800d294:	4613      	mov	r3, r2
 800d296:	009b      	lsls	r3, r3, #2
 800d298:	4413      	add	r3, r2
 800d29a:	009b      	lsls	r3, r3, #2
 800d29c:	440b      	add	r3, r1
 800d29e:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	7c1b      	ldrb	r3, [r3, #16]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d107      	bne.n	800d2be <USBD_MSC_Setup+0x21e>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 800d2ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d2b2:	2202      	movs	r2, #2
 800d2b4:	2101      	movs	r1, #1
 800d2b6:	6878      	ldr	r0, [r7, #4]
 800d2b8:	f007 fad8 	bl	801486c <USBD_LL_OpenEP>
 800d2bc:	e005      	b.n	800d2ca <USBD_MSC_Setup+0x22a>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 800d2be:	2340      	movs	r3, #64	; 0x40
 800d2c0:	2202      	movs	r2, #2
 800d2c2:	2101      	movs	r1, #1
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f007 fad1 	bl	801486c <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2201      	movs	r2, #1
 800d2ce:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	889b      	ldrh	r3, [r3, #4]
 800d2d6:	b2db      	uxtb	r3, r3
 800d2d8:	4619      	mov	r1, r3
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f000 fa52 	bl	800d784 <MSC_BOT_CplClrFeature>
          break;
 800d2e0:	e006      	b.n	800d2f0 <USBD_MSC_Setup+0x250>

        default:
          USBD_CtlError(pdev, req);
 800d2e2:	6839      	ldr	r1, [r7, #0]
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f002 f88c 	bl	800f402 <USBD_CtlError>
          ret = USBD_FAIL;
 800d2ea:	2302      	movs	r3, #2
 800d2ec:	75fb      	strb	r3, [r7, #23]
          break;
 800d2ee:	bf00      	nop
      }
      break;
 800d2f0:	e006      	b.n	800d300 <USBD_MSC_Setup+0x260>

    default:
      USBD_CtlError(pdev, req);
 800d2f2:	6839      	ldr	r1, [r7, #0]
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f002 f884 	bl	800f402 <USBD_CtlError>
      ret = USBD_FAIL;
 800d2fa:	2302      	movs	r3, #2
 800d2fc:	75fb      	strb	r3, [r7, #23]
      break;
 800d2fe:	bf00      	nop
  }

  return ret;
 800d300:	7dfb      	ldrb	r3, [r7, #23]
}
 800d302:	4618      	mov	r0, r3
 800d304:	3718      	adds	r7, #24
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}
 800d30a:	bf00      	nop

0800d30c <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b082      	sub	sp, #8
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
 800d314:	460b      	mov	r3, r1
 800d316:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800d318:	78fb      	ldrb	r3, [r7, #3]
 800d31a:	4619      	mov	r1, r3
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f000 f8c3 	bl	800d4a8 <MSC_BOT_DataIn>

  return USBD_OK;
 800d322:	2300      	movs	r3, #0
}
 800d324:	4618      	mov	r0, r3
 800d326:	3708      	adds	r7, #8
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}

0800d32c <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b082      	sub	sp, #8
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
 800d334:	460b      	mov	r3, r1
 800d336:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800d338:	78fb      	ldrb	r3, [r7, #3]
 800d33a:	4619      	mov	r1, r3
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f000 f8e4 	bl	800d50a <MSC_BOT_DataOut>

  return USBD_OK;
 800d342:	2300      	movs	r3, #0
}
 800d344:	4618      	mov	r0, r3
 800d346:	3708      	adds	r7, #8
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}

0800d34c <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800d34c:	b480      	push	{r7}
 800d34e:	b083      	sub	sp, #12
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2220      	movs	r2, #32
 800d358:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800d35a:	4b03      	ldr	r3, [pc, #12]	; (800d368 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	370c      	adds	r7, #12
 800d360:	46bd      	mov	sp, r7
 800d362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d366:	4770      	bx	lr
 800d368:	24000054 	.word	0x24000054

0800d36c <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800d36c:	b480      	push	{r7}
 800d36e:	b083      	sub	sp, #12
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2220      	movs	r2, #32
 800d378:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800d37a:	4b03      	ldr	r3, [pc, #12]	; (800d388 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	370c      	adds	r7, #12
 800d380:	46bd      	mov	sp, r7
 800d382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d386:	4770      	bx	lr
 800d388:	24000074 	.word	0x24000074

0800d38c <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d38c:	b480      	push	{r7}
 800d38e:	b083      	sub	sp, #12
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2220      	movs	r2, #32
 800d398:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800d39a:	4b03      	ldr	r3, [pc, #12]	; (800d3a8 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d39c:	4618      	mov	r0, r3
 800d39e:	370c      	adds	r7, #12
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a6:	4770      	bx	lr
 800d3a8:	24000094 	.word	0x24000094

0800d3ac <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d3ac:	b480      	push	{r7}
 800d3ae:	b083      	sub	sp, #12
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	220a      	movs	r2, #10
 800d3b8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800d3ba:	4b03      	ldr	r3, [pc, #12]	; (800d3c8 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	370c      	adds	r7, #12
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c6:	4770      	bx	lr
 800d3c8:	240000b4 	.word	0x240000b4

0800d3cc <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 800d3cc:	b480      	push	{r7}
 800d3ce:	b083      	sub	sp, #12
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
 800d3d4:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d003      	beq.n	800d3e4 <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	683a      	ldr	r2, [r7, #0]
 800d3e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 800d3e4:	2300      	movs	r3, #0
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	370c      	adds	r7, #12
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f0:	4770      	bx	lr

0800d3f2 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 800d3f2:	b580      	push	{r7, lr}
 800d3f4:	b084      	sub	sp, #16
 800d3f6:	af00      	add	r7, sp, #0
 800d3f8:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d400:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	2200      	movs	r2, #0
 800d406:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2200      	movs	r2, #0
 800d40c:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	2200      	movs	r2, #0
 800d412:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	2200      	movs	r2, #0
 800d41a:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	2000      	movs	r0, #0
 800d428:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800d42a:	2101      	movs	r1, #1
 800d42c:	6878      	ldr	r0, [r7, #4]
 800d42e:	f007 fa62 	bl	80148f6 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800d432:	2181      	movs	r1, #129	; 0x81
 800d434:	6878      	ldr	r0, [r7, #4]
 800d436:	f007 fa5e 	bl	80148f6 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800d440:	231f      	movs	r3, #31
 800d442:	2101      	movs	r1, #1
 800d444:	6878      	ldr	r0, [r7, #4]
 800d446:	f007 fb21 	bl	8014a8c <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 800d44a:	bf00      	nop
 800d44c:	3710      	adds	r7, #16
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}

0800d452 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 800d452:	b580      	push	{r7, lr}
 800d454:	b084      	sub	sp, #16
 800d456:	af00      	add	r7, sp, #0
 800d458:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d460:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	2200      	movs	r2, #0
 800d466:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	2201      	movs	r2, #1
 800d46c:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800d474:	231f      	movs	r3, #31
 800d476:	2101      	movs	r1, #1
 800d478:	6878      	ldr	r0, [r7, #4]
 800d47a:	f007 fb07 	bl	8014a8c <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 800d47e:	bf00      	nop
 800d480:	3710      	adds	r7, #16
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}

0800d486 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800d486:	b480      	push	{r7}
 800d488:	b085      	sub	sp, #20
 800d48a:	af00      	add	r7, sp, #0
 800d48c:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d494:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	2200      	movs	r2, #0
 800d49a:	721a      	strb	r2, [r3, #8]
}
 800d49c:	bf00      	nop
 800d49e:	3714      	adds	r7, #20
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a6:	4770      	bx	lr

0800d4a8 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b084      	sub	sp, #16
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
 800d4b0:	460b      	mov	r3, r1
 800d4b2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4ba:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	7a1b      	ldrb	r3, [r3, #8]
 800d4c0:	2b02      	cmp	r3, #2
 800d4c2:	d004      	beq.n	800d4ce <MSC_BOT_DataIn+0x26>
 800d4c4:	2b02      	cmp	r3, #2
 800d4c6:	db19      	blt.n	800d4fc <MSC_BOT_DataIn+0x54>
 800d4c8:	2b04      	cmp	r3, #4
 800d4ca:	dc17      	bgt.n	800d4fc <MSC_BOT_DataIn+0x54>
 800d4cc:	e011      	b.n	800d4f2 <MSC_BOT_DataIn+0x4a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800d4da:	461a      	mov	r2, r3
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f000 f979 	bl	800d7d4 <SCSI_ProcessCmd>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	da0b      	bge.n	800d500 <MSC_BOT_DataIn+0x58>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d4e8:	2101      	movs	r1, #1
 800d4ea:	6878      	ldr	r0, [r7, #4]
 800d4ec:	f000 f8f0 	bl	800d6d0 <MSC_BOT_SendCSW>
      }
      break;
 800d4f0:	e006      	b.n	800d500 <MSC_BOT_DataIn+0x58>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800d4f2:	2100      	movs	r1, #0
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f000 f8eb 	bl	800d6d0 <MSC_BOT_SendCSW>
      break;
 800d4fa:	e002      	b.n	800d502 <MSC_BOT_DataIn+0x5a>

    default:
      break;
 800d4fc:	bf00      	nop
 800d4fe:	e000      	b.n	800d502 <MSC_BOT_DataIn+0x5a>
      break;
 800d500:	bf00      	nop
  }
}
 800d502:	bf00      	nop
 800d504:	3710      	adds	r7, #16
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}

0800d50a <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 800d50a:	b580      	push	{r7, lr}
 800d50c:	b084      	sub	sp, #16
 800d50e:	af00      	add	r7, sp, #0
 800d510:	6078      	str	r0, [r7, #4]
 800d512:	460b      	mov	r3, r1
 800d514:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d51c:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	7a1b      	ldrb	r3, [r3, #8]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d002      	beq.n	800d52c <MSC_BOT_DataOut+0x22>
 800d526:	2b01      	cmp	r3, #1
 800d528:	d004      	beq.n	800d534 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800d52a:	e015      	b.n	800d558 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 800d52c:	6878      	ldr	r0, [r7, #4]
 800d52e:	f000 f817 	bl	800d560 <MSC_BOT_CBW_Decode>
      break;
 800d532:	e011      	b.n	800d558 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800d540:	461a      	mov	r2, r3
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f000 f946 	bl	800d7d4 <SCSI_ProcessCmd>
 800d548:	4603      	mov	r3, r0
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	da03      	bge.n	800d556 <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d54e:	2101      	movs	r1, #1
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f000 f8bd 	bl	800d6d0 <MSC_BOT_SendCSW>
      break;
 800d556:	bf00      	nop
  }
}
 800d558:	bf00      	nop
 800d55a:	3710      	adds	r7, #16
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}

0800d560 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b084      	sub	sp, #16
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d56e:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800d588:	2101      	movs	r1, #1
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f007 faa1 	bl	8014ad2 <USBD_LL_GetRxDataSize>
 800d590:	4603      	mov	r3, r0
 800d592:	2b1f      	cmp	r3, #31
 800d594:	d114      	bne.n	800d5c0 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800d59c:	4a32      	ldr	r2, [pc, #200]	; (800d668 <MSC_BOT_CBW_Decode+0x108>)
 800d59e:	4293      	cmp	r3, r2
 800d5a0:	d10e      	bne.n	800d5c0 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) ||
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800d5a8:	2b01      	cmp	r3, #1
 800d5aa:	d809      	bhi.n	800d5c0 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
      (hmsc->cbw.bLUN > 1U) ||
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d004      	beq.n	800d5c0 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 800d5bc:	2b10      	cmp	r3, #16
 800d5be:	d90e      	bls.n	800d5de <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800d5c6:	2320      	movs	r3, #32
 800d5c8:	2205      	movs	r2, #5
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f000 fc4b 	bl	800de66 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	2202      	movs	r2, #2
 800d5d4:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f000 f8a6 	bl	800d728 <MSC_BOT_Abort>
 800d5dc:	e041      	b.n	800d662 <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800d5ea:	461a      	mov	r2, r3
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f000 f8f1 	bl	800d7d4 <SCSI_ProcessCmd>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	da0c      	bge.n	800d612 <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	7a1b      	ldrb	r3, [r3, #8]
 800d5fc:	2b05      	cmp	r3, #5
 800d5fe:	d104      	bne.n	800d60a <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d600:	2101      	movs	r1, #1
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f000 f864 	bl	800d6d0 <MSC_BOT_SendCSW>
 800d608:	e02b      	b.n	800d662 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	f000 f88c 	bl	800d728 <MSC_BOT_Abort>
 800d610:	e027      	b.n	800d662 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	7a1b      	ldrb	r3, [r3, #8]
 800d616:	2b02      	cmp	r3, #2
 800d618:	d022      	beq.n	800d660 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800d61e:	2b01      	cmp	r3, #1
 800d620:	d01e      	beq.n	800d660 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800d626:	2b03      	cmp	r3, #3
 800d628:	d01a      	beq.n	800d660 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	895b      	ldrh	r3, [r3, #10]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d009      	beq.n	800d646 <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	f103 010c 	add.w	r1, r3, #12
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	895b      	ldrh	r3, [r3, #10]
 800d63c:	461a      	mov	r2, r3
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f000 f814 	bl	800d66c <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800d644:	e00d      	b.n	800d662 <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	895b      	ldrh	r3, [r3, #10]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d104      	bne.n	800d658 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800d64e:	2100      	movs	r1, #0
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f000 f83d 	bl	800d6d0 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800d656:	e004      	b.n	800d662 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	f000 f865 	bl	800d728 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800d65e:	e000      	b.n	800d662 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 800d660:	bf00      	nop
    }
  }
}
 800d662:	3710      	adds	r7, #16
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}
 800d668:	43425355 	.word	0x43425355

0800d66c <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b086      	sub	sp, #24
 800d670:	af00      	add	r7, sp, #0
 800d672:	60f8      	str	r0, [r7, #12]
 800d674:	60b9      	str	r1, [r7, #8]
 800d676:	4613      	mov	r3, r2
 800d678:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d680:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800d688:	88fb      	ldrh	r3, [r7, #6]
 800d68a:	429a      	cmp	r2, r3
 800d68c:	d204      	bcs.n	800d698 <MSC_BOT_SendData+0x2c>
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d694:	b29b      	uxth	r3, r3
 800d696:	e000      	b.n	800d69a <MSC_BOT_SendData+0x2e>
 800d698:	88fb      	ldrh	r3, [r7, #6]
 800d69a:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800d6a2:	88fb      	ldrh	r3, [r7, #6]
 800d6a4:	1ad2      	subs	r2, r2, r3
 800d6a6:	697b      	ldr	r3, [r7, #20]
 800d6a8:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800d6b4:	697b      	ldr	r3, [r7, #20]
 800d6b6:	2204      	movs	r2, #4
 800d6b8:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800d6ba:	8a7b      	ldrh	r3, [r7, #18]
 800d6bc:	68ba      	ldr	r2, [r7, #8]
 800d6be:	2181      	movs	r1, #129	; 0x81
 800d6c0:	68f8      	ldr	r0, [r7, #12]
 800d6c2:	f007 f9c0 	bl	8014a46 <USBD_LL_Transmit>
}
 800d6c6:	bf00      	nop
 800d6c8:	3718      	adds	r7, #24
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}
	...

0800d6d0 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b084      	sub	sp, #16
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
 800d6d8:	460b      	mov	r3, r1
 800d6da:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6e2:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	4a0f      	ldr	r2, [pc, #60]	; (800d724 <MSC_BOT_SendCSW+0x54>)
 800d6e8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	78fa      	ldrb	r2, [r7, #3]
 800d6f0:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 800d700:	230d      	movs	r3, #13
 800d702:	2181      	movs	r1, #129	; 0x81
 800d704:	6878      	ldr	r0, [r7, #4]
 800d706:	f007 f99e 	bl	8014a46 <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800d710:	231f      	movs	r3, #31
 800d712:	2101      	movs	r1, #1
 800d714:	6878      	ldr	r0, [r7, #4]
 800d716:	f007 f9b9 	bl	8014a8c <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 800d71a:	bf00      	nop
 800d71c:	3710      	adds	r7, #16
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}
 800d722:	bf00      	nop
 800d724:	53425355 	.word	0x53425355

0800d728 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b084      	sub	sp, #16
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d736:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d10c      	bne.n	800d75c <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d007      	beq.n	800d75c <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800d750:	2b00      	cmp	r3, #0
 800d752:	d103      	bne.n	800d75c <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800d754:	2101      	movs	r1, #1
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f007 f8ec 	bl	8014934 <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800d75c:	2181      	movs	r1, #129	; 0x81
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f007 f8e8 	bl	8014934 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	7a5b      	ldrb	r3, [r3, #9]
 800d768:	2b02      	cmp	r3, #2
 800d76a:	d107      	bne.n	800d77c <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800d772:	231f      	movs	r3, #31
 800d774:	2101      	movs	r1, #1
 800d776:	6878      	ldr	r0, [r7, #4]
 800d778:	f007 f988 	bl	8014a8c <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 800d77c:	bf00      	nop
 800d77e:	3710      	adds	r7, #16
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}

0800d784 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b084      	sub	sp, #16
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
 800d78c:	460b      	mov	r3, r1
 800d78e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d796:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	7a5b      	ldrb	r3, [r3, #9]
 800d79c:	2b02      	cmp	r3, #2
 800d79e:	d107      	bne.n	800d7b0 <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800d7a0:	2181      	movs	r1, #129	; 0x81
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f007 f8c6 	bl	8014934 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	725a      	strb	r2, [r3, #9]
 800d7ae:	e00d      	b.n	800d7cc <MSC_BOT_CplClrFeature+0x48>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800d7b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	da08      	bge.n	800d7ca <MSC_BOT_CplClrFeature+0x46>
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	7a5b      	ldrb	r3, [r3, #9]
 800d7bc:	2b01      	cmp	r3, #1
 800d7be:	d004      	beq.n	800d7ca <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d7c0:	2101      	movs	r1, #1
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f7ff ff84 	bl	800d6d0 <MSC_BOT_SendCSW>
 800d7c8:	e000      	b.n	800d7cc <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 800d7ca:	bf00      	nop
  }
}
 800d7cc:	3710      	adds	r7, #16
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}
	...

0800d7d4 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b084      	sub	sp, #16
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	60f8      	str	r0, [r7, #12]
 800d7dc:	460b      	mov	r3, r1
 800d7de:	607a      	str	r2, [r7, #4]
 800d7e0:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	781b      	ldrb	r3, [r3, #0]
 800d7e6:	2b5a      	cmp	r3, #90	; 0x5a
 800d7e8:	f200 810e 	bhi.w	800da08 <SCSI_ProcessCmd+0x234>
 800d7ec:	a201      	add	r2, pc, #4	; (adr r2, 800d7f4 <SCSI_ProcessCmd+0x20>)
 800d7ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7f2:	bf00      	nop
 800d7f4:	0800d961 	.word	0x0800d961
 800d7f8:	0800da09 	.word	0x0800da09
 800d7fc:	0800da09 	.word	0x0800da09
 800d800:	0800d96f 	.word	0x0800d96f
 800d804:	0800da09 	.word	0x0800da09
 800d808:	0800da09 	.word	0x0800da09
 800d80c:	0800da09 	.word	0x0800da09
 800d810:	0800da09 	.word	0x0800da09
 800d814:	0800da09 	.word	0x0800da09
 800d818:	0800da09 	.word	0x0800da09
 800d81c:	0800da09 	.word	0x0800da09
 800d820:	0800da09 	.word	0x0800da09
 800d824:	0800da09 	.word	0x0800da09
 800d828:	0800da09 	.word	0x0800da09
 800d82c:	0800da09 	.word	0x0800da09
 800d830:	0800da09 	.word	0x0800da09
 800d834:	0800da09 	.word	0x0800da09
 800d838:	0800da09 	.word	0x0800da09
 800d83c:	0800d97d 	.word	0x0800d97d
 800d840:	0800da09 	.word	0x0800da09
 800d844:	0800da09 	.word	0x0800da09
 800d848:	0800da09 	.word	0x0800da09
 800d84c:	0800da09 	.word	0x0800da09
 800d850:	0800da09 	.word	0x0800da09
 800d854:	0800da09 	.word	0x0800da09
 800d858:	0800da09 	.word	0x0800da09
 800d85c:	0800d9a7 	.word	0x0800d9a7
 800d860:	0800d98b 	.word	0x0800d98b
 800d864:	0800da09 	.word	0x0800da09
 800d868:	0800da09 	.word	0x0800da09
 800d86c:	0800d999 	.word	0x0800d999
 800d870:	0800da09 	.word	0x0800da09
 800d874:	0800da09 	.word	0x0800da09
 800d878:	0800da09 	.word	0x0800da09
 800d87c:	0800da09 	.word	0x0800da09
 800d880:	0800d9c3 	.word	0x0800d9c3
 800d884:	0800da09 	.word	0x0800da09
 800d888:	0800d9d1 	.word	0x0800d9d1
 800d88c:	0800da09 	.word	0x0800da09
 800d890:	0800da09 	.word	0x0800da09
 800d894:	0800d9df 	.word	0x0800d9df
 800d898:	0800da09 	.word	0x0800da09
 800d89c:	0800d9ed 	.word	0x0800d9ed
 800d8a0:	0800da09 	.word	0x0800da09
 800d8a4:	0800da09 	.word	0x0800da09
 800d8a8:	0800da09 	.word	0x0800da09
 800d8ac:	0800da09 	.word	0x0800da09
 800d8b0:	0800d9fb 	.word	0x0800d9fb
 800d8b4:	0800da09 	.word	0x0800da09
 800d8b8:	0800da09 	.word	0x0800da09
 800d8bc:	0800da09 	.word	0x0800da09
 800d8c0:	0800da09 	.word	0x0800da09
 800d8c4:	0800da09 	.word	0x0800da09
 800d8c8:	0800da09 	.word	0x0800da09
 800d8cc:	0800da09 	.word	0x0800da09
 800d8d0:	0800da09 	.word	0x0800da09
 800d8d4:	0800da09 	.word	0x0800da09
 800d8d8:	0800da09 	.word	0x0800da09
 800d8dc:	0800da09 	.word	0x0800da09
 800d8e0:	0800da09 	.word	0x0800da09
 800d8e4:	0800da09 	.word	0x0800da09
 800d8e8:	0800da09 	.word	0x0800da09
 800d8ec:	0800da09 	.word	0x0800da09
 800d8f0:	0800da09 	.word	0x0800da09
 800d8f4:	0800da09 	.word	0x0800da09
 800d8f8:	0800da09 	.word	0x0800da09
 800d8fc:	0800da09 	.word	0x0800da09
 800d900:	0800da09 	.word	0x0800da09
 800d904:	0800da09 	.word	0x0800da09
 800d908:	0800da09 	.word	0x0800da09
 800d90c:	0800da09 	.word	0x0800da09
 800d910:	0800da09 	.word	0x0800da09
 800d914:	0800da09 	.word	0x0800da09
 800d918:	0800da09 	.word	0x0800da09
 800d91c:	0800da09 	.word	0x0800da09
 800d920:	0800da09 	.word	0x0800da09
 800d924:	0800da09 	.word	0x0800da09
 800d928:	0800da09 	.word	0x0800da09
 800d92c:	0800da09 	.word	0x0800da09
 800d930:	0800da09 	.word	0x0800da09
 800d934:	0800da09 	.word	0x0800da09
 800d938:	0800da09 	.word	0x0800da09
 800d93c:	0800da09 	.word	0x0800da09
 800d940:	0800da09 	.word	0x0800da09
 800d944:	0800da09 	.word	0x0800da09
 800d948:	0800da09 	.word	0x0800da09
 800d94c:	0800da09 	.word	0x0800da09
 800d950:	0800da09 	.word	0x0800da09
 800d954:	0800da09 	.word	0x0800da09
 800d958:	0800da09 	.word	0x0800da09
 800d95c:	0800d9b5 	.word	0x0800d9b5
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 800d960:	7afb      	ldrb	r3, [r7, #11]
 800d962:	687a      	ldr	r2, [r7, #4]
 800d964:	4619      	mov	r1, r3
 800d966:	68f8      	ldr	r0, [r7, #12]
 800d968:	f000 f85c 	bl	800da24 <SCSI_TestUnitReady>
      break;
 800d96c:	e055      	b.n	800da1a <SCSI_ProcessCmd+0x246>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 800d96e:	7afb      	ldrb	r3, [r7, #11]
 800d970:	687a      	ldr	r2, [r7, #4]
 800d972:	4619      	mov	r1, r3
 800d974:	68f8      	ldr	r0, [r7, #12]
 800d976:	f000 fa0b 	bl	800dd90 <SCSI_RequestSense>
      break;
 800d97a:	e04e      	b.n	800da1a <SCSI_ProcessCmd+0x246>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 800d97c:	7afb      	ldrb	r3, [r7, #11]
 800d97e:	687a      	ldr	r2, [r7, #4]
 800d980:	4619      	mov	r1, r3
 800d982:	68f8      	ldr	r0, [r7, #12]
 800d984:	f000 f888 	bl	800da98 <SCSI_Inquiry>
      break;
 800d988:	e047      	b.n	800da1a <SCSI_ProcessCmd+0x246>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 800d98a:	7afb      	ldrb	r3, [r7, #11]
 800d98c:	687a      	ldr	r2, [r7, #4]
 800d98e:	4619      	mov	r1, r3
 800d990:	68f8      	ldr	r0, [r7, #12]
 800d992:	f000 faa2 	bl	800deda <SCSI_StartStopUnit>
      break;
 800d996:	e040      	b.n	800da1a <SCSI_ProcessCmd+0x246>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 800d998:	7afb      	ldrb	r3, [r7, #11]
 800d99a:	687a      	ldr	r2, [r7, #4]
 800d99c:	4619      	mov	r1, r3
 800d99e:	68f8      	ldr	r0, [r7, #12]
 800d9a0:	f000 fa9b 	bl	800deda <SCSI_StartStopUnit>
      break;
 800d9a4:	e039      	b.n	800da1a <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 800d9a6:	7afb      	ldrb	r3, [r7, #11]
 800d9a8:	687a      	ldr	r2, [r7, #4]
 800d9aa:	4619      	mov	r1, r3
 800d9ac:	68f8      	ldr	r0, [r7, #12]
 800d9ae:	f000 f99f 	bl	800dcf0 <SCSI_ModeSense6>
      break;
 800d9b2:	e032      	b.n	800da1a <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 800d9b4:	7afb      	ldrb	r3, [r7, #11]
 800d9b6:	687a      	ldr	r2, [r7, #4]
 800d9b8:	4619      	mov	r1, r3
 800d9ba:	68f8      	ldr	r0, [r7, #12]
 800d9bc:	f000 f9c0 	bl	800dd40 <SCSI_ModeSense10>
      break;
 800d9c0:	e02b      	b.n	800da1a <SCSI_ProcessCmd+0x246>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800d9c2:	7afb      	ldrb	r3, [r7, #11]
 800d9c4:	687a      	ldr	r2, [r7, #4]
 800d9c6:	4619      	mov	r1, r3
 800d9c8:	68f8      	ldr	r0, [r7, #12]
 800d9ca:	f000 f92c 	bl	800dc26 <SCSI_ReadFormatCapacity>
      break;
 800d9ce:	e024      	b.n	800da1a <SCSI_ProcessCmd+0x246>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 800d9d0:	7afb      	ldrb	r3, [r7, #11]
 800d9d2:	687a      	ldr	r2, [r7, #4]
 800d9d4:	4619      	mov	r1, r3
 800d9d6:	68f8      	ldr	r0, [r7, #12]
 800d9d8:	f000 f8be 	bl	800db58 <SCSI_ReadCapacity10>
      break;
 800d9dc:	e01d      	b.n	800da1a <SCSI_ProcessCmd+0x246>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 800d9de:	7afb      	ldrb	r3, [r7, #11]
 800d9e0:	687a      	ldr	r2, [r7, #4]
 800d9e2:	4619      	mov	r1, r3
 800d9e4:	68f8      	ldr	r0, [r7, #12]
 800d9e6:	f000 fa8d 	bl	800df04 <SCSI_Read10>
      break;
 800d9ea:	e016      	b.n	800da1a <SCSI_ProcessCmd+0x246>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 800d9ec:	7afb      	ldrb	r3, [r7, #11]
 800d9ee:	687a      	ldr	r2, [r7, #4]
 800d9f0:	4619      	mov	r1, r3
 800d9f2:	68f8      	ldr	r0, [r7, #12]
 800d9f4:	f000 fb12 	bl	800e01c <SCSI_Write10>
      break;
 800d9f8:	e00f      	b.n	800da1a <SCSI_ProcessCmd+0x246>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 800d9fa:	7afb      	ldrb	r3, [r7, #11]
 800d9fc:	687a      	ldr	r2, [r7, #4]
 800d9fe:	4619      	mov	r1, r3
 800da00:	68f8      	ldr	r0, [r7, #12]
 800da02:	f000 fbbb 	bl	800e17c <SCSI_Verify10>
      break;
 800da06:	e008      	b.n	800da1a <SCSI_ProcessCmd+0x246>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800da08:	7af9      	ldrb	r1, [r7, #11]
 800da0a:	2320      	movs	r3, #32
 800da0c:	2205      	movs	r2, #5
 800da0e:	68f8      	ldr	r0, [r7, #12]
 800da10:	f000 fa29 	bl	800de66 <SCSI_SenseCode>
      return -1;
 800da14:	f04f 33ff 	mov.w	r3, #4294967295
 800da18:	e000      	b.n	800da1c <SCSI_ProcessCmd+0x248>
  }

  return 0;
 800da1a:	2300      	movs	r3, #0
}
 800da1c:	4618      	mov	r0, r3
 800da1e:	3710      	adds	r7, #16
 800da20:	46bd      	mov	sp, r7
 800da22:	bd80      	pop	{r7, pc}

0800da24 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b086      	sub	sp, #24
 800da28:	af00      	add	r7, sp, #0
 800da2a:	60f8      	str	r0, [r7, #12]
 800da2c:	460b      	mov	r3, r1
 800da2e:	607a      	str	r2, [r7, #4]
 800da30:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da38:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800da40:	2b00      	cmp	r3, #0
 800da42:	d00a      	beq.n	800da5a <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800da4a:	2320      	movs	r3, #32
 800da4c:	2205      	movs	r2, #5
 800da4e:	68f8      	ldr	r0, [r7, #12]
 800da50:	f000 fa09 	bl	800de66 <SCSI_SenseCode>

    return -1;
 800da54:	f04f 33ff 	mov.w	r3, #4294967295
 800da58:	e019      	b.n	800da8e <SCSI_TestUnitReady+0x6a>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da60:	689b      	ldr	r3, [r3, #8]
 800da62:	7afa      	ldrb	r2, [r7, #11]
 800da64:	4610      	mov	r0, r2
 800da66:	4798      	blx	r3
 800da68:	4603      	mov	r3, r0
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d00b      	beq.n	800da86 <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800da6e:	7af9      	ldrb	r1, [r7, #11]
 800da70:	233a      	movs	r3, #58	; 0x3a
 800da72:	2202      	movs	r2, #2
 800da74:	68f8      	ldr	r0, [r7, #12]
 800da76:	f000 f9f6 	bl	800de66 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800da7a:	697b      	ldr	r3, [r7, #20]
 800da7c:	2205      	movs	r2, #5
 800da7e:	721a      	strb	r2, [r3, #8]

    return -1;
 800da80:	f04f 33ff 	mov.w	r3, #4294967295
 800da84:	e003      	b.n	800da8e <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	2200      	movs	r2, #0
 800da8a:	815a      	strh	r2, [r3, #10]

  return 0;
 800da8c:	2300      	movs	r3, #0
}
 800da8e:	4618      	mov	r0, r3
 800da90:	3718      	adds	r7, #24
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}
	...

0800da98 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800da98:	b480      	push	{r7}
 800da9a:	b089      	sub	sp, #36	; 0x24
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	60f8      	str	r0, [r7, #12]
 800daa0:	460b      	mov	r3, r1
 800daa2:	607a      	str	r2, [r7, #4]
 800daa4:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800daac:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	3301      	adds	r3, #1
 800dab2:	781b      	ldrb	r3, [r3, #0]
 800dab4:	f003 0301 	and.w	r3, r3, #1
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d014      	beq.n	800dae6 <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 800dabc:	2307      	movs	r3, #7
 800dabe:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 800dac0:	69bb      	ldr	r3, [r7, #24]
 800dac2:	8bfa      	ldrh	r2, [r7, #30]
 800dac4:	815a      	strh	r2, [r3, #10]

    while (len)
 800dac6:	e00a      	b.n	800dade <SCSI_Inquiry+0x46>
    {
      len--;
 800dac8:	8bfb      	ldrh	r3, [r7, #30]
 800daca:	3b01      	subs	r3, #1
 800dacc:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 800dace:	8bfa      	ldrh	r2, [r7, #30]
 800dad0:	8bfb      	ldrh	r3, [r7, #30]
 800dad2:	4920      	ldr	r1, [pc, #128]	; (800db54 <SCSI_Inquiry+0xbc>)
 800dad4:	5c89      	ldrb	r1, [r1, r2]
 800dad6:	69ba      	ldr	r2, [r7, #24]
 800dad8:	4413      	add	r3, r2
 800dada:	460a      	mov	r2, r1
 800dadc:	731a      	strb	r2, [r3, #12]
    while (len)
 800dade:	8bfb      	ldrh	r3, [r7, #30]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d1f1      	bne.n	800dac8 <SCSI_Inquiry+0x30>
 800dae4:	e02e      	b.n	800db44 <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800daec:	69d9      	ldr	r1, [r3, #28]
 800daee:	7afa      	ldrb	r2, [r7, #11]
 800daf0:	4613      	mov	r3, r2
 800daf2:	00db      	lsls	r3, r3, #3
 800daf4:	4413      	add	r3, r2
 800daf6:	009b      	lsls	r3, r3, #2
 800daf8:	440b      	add	r3, r1
 800dafa:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	3304      	adds	r3, #4
 800db00:	781b      	ldrb	r3, [r3, #0]
 800db02:	b29b      	uxth	r3, r3
 800db04:	3305      	adds	r3, #5
 800db06:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	3304      	adds	r3, #4
 800db0c:	781b      	ldrb	r3, [r3, #0]
 800db0e:	b29b      	uxth	r3, r3
 800db10:	8bfa      	ldrh	r2, [r7, #30]
 800db12:	429a      	cmp	r2, r3
 800db14:	d303      	bcc.n	800db1e <SCSI_Inquiry+0x86>
    {
      len = params[4];
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	3304      	adds	r3, #4
 800db1a:	781b      	ldrb	r3, [r3, #0]
 800db1c:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 800db1e:	69bb      	ldr	r3, [r7, #24]
 800db20:	8bfa      	ldrh	r2, [r7, #30]
 800db22:	815a      	strh	r2, [r3, #10]

    while (len)
 800db24:	e00b      	b.n	800db3e <SCSI_Inquiry+0xa6>
    {
      len--;
 800db26:	8bfb      	ldrh	r3, [r7, #30]
 800db28:	3b01      	subs	r3, #1
 800db2a:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 800db2c:	8bfb      	ldrh	r3, [r7, #30]
 800db2e:	697a      	ldr	r2, [r7, #20]
 800db30:	441a      	add	r2, r3
 800db32:	8bfb      	ldrh	r3, [r7, #30]
 800db34:	7811      	ldrb	r1, [r2, #0]
 800db36:	69ba      	ldr	r2, [r7, #24]
 800db38:	4413      	add	r3, r2
 800db3a:	460a      	mov	r2, r1
 800db3c:	731a      	strb	r2, [r3, #12]
    while (len)
 800db3e:	8bfb      	ldrh	r3, [r7, #30]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d1f0      	bne.n	800db26 <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 800db44:	2300      	movs	r3, #0
}
 800db46:	4618      	mov	r0, r3
 800db48:	3724      	adds	r7, #36	; 0x24
 800db4a:	46bd      	mov	sp, r7
 800db4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db50:	4770      	bx	lr
 800db52:	bf00      	nop
 800db54:	08014e48 	.word	0x08014e48

0800db58 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b086      	sub	sp, #24
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	60f8      	str	r0, [r7, #12]
 800db60:	460b      	mov	r3, r1
 800db62:	607a      	str	r2, [r7, #4]
 800db64:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db6c:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800db74:	685b      	ldr	r3, [r3, #4]
 800db76:	697a      	ldr	r2, [r7, #20]
 800db78:	f502 7118 	add.w	r1, r2, #608	; 0x260
 800db7c:	697a      	ldr	r2, [r7, #20]
 800db7e:	f202 225e 	addw	r2, r2, #606	; 0x25e
 800db82:	7af8      	ldrb	r0, [r7, #11]
 800db84:	4798      	blx	r3
 800db86:	4603      	mov	r3, r0
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d008      	beq.n	800db9e <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800db8c:	7af9      	ldrb	r1, [r7, #11]
 800db8e:	233a      	movs	r3, #58	; 0x3a
 800db90:	2202      	movs	r2, #2
 800db92:	68f8      	ldr	r0, [r7, #12]
 800db94:	f000 f967 	bl	800de66 <SCSI_SenseCode>
    return -1;
 800db98:	f04f 33ff 	mov.w	r3, #4294967295
 800db9c:	e03f      	b.n	800dc1e <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800dba4:	3b01      	subs	r3, #1
 800dba6:	0e1b      	lsrs	r3, r3, #24
 800dba8:	b2da      	uxtb	r2, r3
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800dbae:	697b      	ldr	r3, [r7, #20]
 800dbb0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800dbb4:	3b01      	subs	r3, #1
 800dbb6:	0c1b      	lsrs	r3, r3, #16
 800dbb8:	b2da      	uxtb	r2, r3
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800dbc4:	3b01      	subs	r3, #1
 800dbc6:	0a1b      	lsrs	r3, r3, #8
 800dbc8:	b2da      	uxtb	r2, r3
 800dbca:	697b      	ldr	r3, [r7, #20]
 800dbcc:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800dbce:	697b      	ldr	r3, [r7, #20]
 800dbd0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800dbd4:	b2db      	uxtb	r3, r3
 800dbd6:	3b01      	subs	r3, #1
 800dbd8:	b2da      	uxtb	r2, r3
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800dbe4:	161b      	asrs	r3, r3, #24
 800dbe6:	b2da      	uxtb	r2, r3
 800dbe8:	697b      	ldr	r3, [r7, #20]
 800dbea:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800dbec:	697b      	ldr	r3, [r7, #20]
 800dbee:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800dbf2:	141b      	asrs	r3, r3, #16
 800dbf4:	b2da      	uxtb	r2, r3
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800dc00:	0a1b      	lsrs	r3, r3, #8
 800dc02:	b29b      	uxth	r3, r3
 800dc04:	b2da      	uxtb	r2, r3
 800dc06:	697b      	ldr	r3, [r7, #20]
 800dc08:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800dc10:	b2da      	uxtb	r2, r3
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	2208      	movs	r2, #8
 800dc1a:	815a      	strh	r2, [r3, #10]
    return 0;
 800dc1c:	2300      	movs	r3, #0
  }
}
 800dc1e:	4618      	mov	r0, r3
 800dc20:	3718      	adds	r7, #24
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}

0800dc26 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800dc26:	b580      	push	{r7, lr}
 800dc28:	b088      	sub	sp, #32
 800dc2a:	af00      	add	r7, sp, #0
 800dc2c:	60f8      	str	r0, [r7, #12]
 800dc2e:	460b      	mov	r3, r1
 800dc30:	607a      	str	r2, [r7, #4]
 800dc32:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc3a:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	83fb      	strh	r3, [r7, #30]
 800dc40:	e007      	b.n	800dc52 <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 800dc42:	8bfb      	ldrh	r3, [r7, #30]
 800dc44:	69ba      	ldr	r2, [r7, #24]
 800dc46:	4413      	add	r3, r2
 800dc48:	2200      	movs	r2, #0
 800dc4a:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 800dc4c:	8bfb      	ldrh	r3, [r7, #30]
 800dc4e:	3301      	adds	r3, #1
 800dc50:	83fb      	strh	r3, [r7, #30]
 800dc52:	8bfb      	ldrh	r3, [r7, #30]
 800dc54:	2b0b      	cmp	r3, #11
 800dc56:	d9f4      	bls.n	800dc42 <SCSI_ReadFormatCapacity+0x1c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc5e:	685b      	ldr	r3, [r3, #4]
 800dc60:	f107 0216 	add.w	r2, r7, #22
 800dc64:	f107 0110 	add.w	r1, r7, #16
 800dc68:	7af8      	ldrb	r0, [r7, #11]
 800dc6a:	4798      	blx	r3
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d008      	beq.n	800dc84 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800dc72:	7af9      	ldrb	r1, [r7, #11]
 800dc74:	233a      	movs	r3, #58	; 0x3a
 800dc76:	2202      	movs	r2, #2
 800dc78:	68f8      	ldr	r0, [r7, #12]
 800dc7a:	f000 f8f4 	bl	800de66 <SCSI_SenseCode>
    return -1;
 800dc7e:	f04f 33ff 	mov.w	r3, #4294967295
 800dc82:	e030      	b.n	800dce6 <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 800dc84:	69bb      	ldr	r3, [r7, #24]
 800dc86:	2208      	movs	r2, #8
 800dc88:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800dc8a:	693b      	ldr	r3, [r7, #16]
 800dc8c:	3b01      	subs	r3, #1
 800dc8e:	0e1b      	lsrs	r3, r3, #24
 800dc90:	b2da      	uxtb	r2, r3
 800dc92:	69bb      	ldr	r3, [r7, #24]
 800dc94:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800dc96:	693b      	ldr	r3, [r7, #16]
 800dc98:	3b01      	subs	r3, #1
 800dc9a:	0c1b      	lsrs	r3, r3, #16
 800dc9c:	b2da      	uxtb	r2, r3
 800dc9e:	69bb      	ldr	r3, [r7, #24]
 800dca0:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800dca2:	693b      	ldr	r3, [r7, #16]
 800dca4:	3b01      	subs	r3, #1
 800dca6:	0a1b      	lsrs	r3, r3, #8
 800dca8:	b2da      	uxtb	r2, r3
 800dcaa:	69bb      	ldr	r3, [r7, #24]
 800dcac:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800dcae:	693b      	ldr	r3, [r7, #16]
 800dcb0:	b2db      	uxtb	r3, r3
 800dcb2:	3b01      	subs	r3, #1
 800dcb4:	b2da      	uxtb	r2, r3
 800dcb6:	69bb      	ldr	r3, [r7, #24]
 800dcb8:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 800dcba:	69bb      	ldr	r3, [r7, #24]
 800dcbc:	2202      	movs	r2, #2
 800dcbe:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800dcc0:	8afb      	ldrh	r3, [r7, #22]
 800dcc2:	141b      	asrs	r3, r3, #16
 800dcc4:	b2da      	uxtb	r2, r3
 800dcc6:	69bb      	ldr	r3, [r7, #24]
 800dcc8:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800dcca:	8afb      	ldrh	r3, [r7, #22]
 800dccc:	0a1b      	lsrs	r3, r3, #8
 800dcce:	b29b      	uxth	r3, r3
 800dcd0:	b2da      	uxtb	r2, r3
 800dcd2:	69bb      	ldr	r3, [r7, #24]
 800dcd4:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 800dcd6:	8afb      	ldrh	r3, [r7, #22]
 800dcd8:	b2da      	uxtb	r2, r3
 800dcda:	69bb      	ldr	r3, [r7, #24]
 800dcdc:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 800dcde:	69bb      	ldr	r3, [r7, #24]
 800dce0:	220c      	movs	r2, #12
 800dce2:	815a      	strh	r2, [r3, #10]
    return 0;
 800dce4:	2300      	movs	r3, #0
  }
}
 800dce6:	4618      	mov	r0, r3
 800dce8:	3720      	adds	r7, #32
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}
	...

0800dcf0 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800dcf0:	b480      	push	{r7}
 800dcf2:	b087      	sub	sp, #28
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	60f8      	str	r0, [r7, #12]
 800dcf8:	460b      	mov	r3, r1
 800dcfa:	607a      	str	r2, [r7, #4]
 800dcfc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd04:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 800dd06:	2308      	movs	r3, #8
 800dd08:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 800dd0a:	693b      	ldr	r3, [r7, #16]
 800dd0c:	8afa      	ldrh	r2, [r7, #22]
 800dd0e:	815a      	strh	r2, [r3, #10]

  while (len)
 800dd10:	e00a      	b.n	800dd28 <SCSI_ModeSense6+0x38>
  {
    len--;
 800dd12:	8afb      	ldrh	r3, [r7, #22]
 800dd14:	3b01      	subs	r3, #1
 800dd16:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 800dd18:	8afa      	ldrh	r2, [r7, #22]
 800dd1a:	8afb      	ldrh	r3, [r7, #22]
 800dd1c:	4907      	ldr	r1, [pc, #28]	; (800dd3c <SCSI_ModeSense6+0x4c>)
 800dd1e:	5c89      	ldrb	r1, [r1, r2]
 800dd20:	693a      	ldr	r2, [r7, #16]
 800dd22:	4413      	add	r3, r2
 800dd24:	460a      	mov	r2, r1
 800dd26:	731a      	strb	r2, [r3, #12]
  while (len)
 800dd28:	8afb      	ldrh	r3, [r7, #22]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d1f1      	bne.n	800dd12 <SCSI_ModeSense6+0x22>
  }
  return 0;
 800dd2e:	2300      	movs	r3, #0
}
 800dd30:	4618      	mov	r0, r3
 800dd32:	371c      	adds	r7, #28
 800dd34:	46bd      	mov	sp, r7
 800dd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3a:	4770      	bx	lr
 800dd3c:	08014e50 	.word	0x08014e50

0800dd40 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800dd40:	b480      	push	{r7}
 800dd42:	b087      	sub	sp, #28
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	60f8      	str	r0, [r7, #12]
 800dd48:	460b      	mov	r3, r1
 800dd4a:	607a      	str	r2, [r7, #4]
 800dd4c:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 800dd4e:	2308      	movs	r3, #8
 800dd50:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd58:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 800dd5a:	693b      	ldr	r3, [r7, #16]
 800dd5c:	8afa      	ldrh	r2, [r7, #22]
 800dd5e:	815a      	strh	r2, [r3, #10]

  while (len)
 800dd60:	e00a      	b.n	800dd78 <SCSI_ModeSense10+0x38>
  {
    len--;
 800dd62:	8afb      	ldrh	r3, [r7, #22]
 800dd64:	3b01      	subs	r3, #1
 800dd66:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 800dd68:	8afa      	ldrh	r2, [r7, #22]
 800dd6a:	8afb      	ldrh	r3, [r7, #22]
 800dd6c:	4907      	ldr	r1, [pc, #28]	; (800dd8c <SCSI_ModeSense10+0x4c>)
 800dd6e:	5c89      	ldrb	r1, [r1, r2]
 800dd70:	693a      	ldr	r2, [r7, #16]
 800dd72:	4413      	add	r3, r2
 800dd74:	460a      	mov	r2, r1
 800dd76:	731a      	strb	r2, [r3, #12]
  while (len)
 800dd78:	8afb      	ldrh	r3, [r7, #22]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d1f1      	bne.n	800dd62 <SCSI_ModeSense10+0x22>
  }

  return 0;
 800dd7e:	2300      	movs	r3, #0
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	371c      	adds	r7, #28
 800dd84:	46bd      	mov	sp, r7
 800dd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8a:	4770      	bx	lr
 800dd8c:	08014e58 	.word	0x08014e58

0800dd90 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800dd90:	b480      	push	{r7}
 800dd92:	b087      	sub	sp, #28
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	60f8      	str	r0, [r7, #12]
 800dd98:	460b      	mov	r3, r1
 800dd9a:	607a      	str	r2, [r7, #4]
 800dd9c:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dda4:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 800dda6:	2300      	movs	r3, #0
 800dda8:	75fb      	strb	r3, [r7, #23]
 800ddaa:	e007      	b.n	800ddbc <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 800ddac:	7dfb      	ldrb	r3, [r7, #23]
 800ddae:	693a      	ldr	r2, [r7, #16]
 800ddb0:	4413      	add	r3, r2
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 800ddb6:	7dfb      	ldrb	r3, [r7, #23]
 800ddb8:	3301      	adds	r3, #1
 800ddba:	75fb      	strb	r3, [r7, #23]
 800ddbc:	7dfb      	ldrb	r3, [r7, #23]
 800ddbe:	2b11      	cmp	r3, #17
 800ddc0:	d9f4      	bls.n	800ddac <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0] = 0x70U;
 800ddc2:	693b      	ldr	r3, [r7, #16]
 800ddc4:	2270      	movs	r2, #112	; 0x70
 800ddc6:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800ddc8:	693b      	ldr	r3, [r7, #16]
 800ddca:	220c      	movs	r2, #12
 800ddcc:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800ddce:	693b      	ldr	r3, [r7, #16]
 800ddd0:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 800ddd4:	693b      	ldr	r3, [r7, #16]
 800ddd6:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800ddda:	429a      	cmp	r2, r3
 800dddc:	d02e      	beq.n	800de3c <SCSI_RequestSense+0xac>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800ddde:	693b      	ldr	r3, [r7, #16]
 800dde0:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800dde4:	693a      	ldr	r2, [r7, #16]
 800dde6:	3347      	adds	r3, #71	; 0x47
 800dde8:	00db      	lsls	r3, r3, #3
 800ddea:	4413      	add	r3, r2
 800ddec:	791a      	ldrb	r2, [r3, #4]
 800ddee:	693b      	ldr	r3, [r7, #16]
 800ddf0:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800ddf2:	693b      	ldr	r3, [r7, #16]
 800ddf4:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800ddf8:	693a      	ldr	r2, [r7, #16]
 800ddfa:	3347      	adds	r3, #71	; 0x47
 800ddfc:	00db      	lsls	r3, r3, #3
 800ddfe:	4413      	add	r3, r2
 800de00:	7a5a      	ldrb	r2, [r3, #9]
 800de02:	693b      	ldr	r3, [r7, #16]
 800de04:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800de06:	693b      	ldr	r3, [r7, #16]
 800de08:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800de0c:	693a      	ldr	r2, [r7, #16]
 800de0e:	3347      	adds	r3, #71	; 0x47
 800de10:	00db      	lsls	r3, r3, #3
 800de12:	4413      	add	r3, r2
 800de14:	7a1a      	ldrb	r2, [r3, #8]
 800de16:	693b      	ldr	r3, [r7, #16]
 800de18:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 800de1a:	693b      	ldr	r3, [r7, #16]
 800de1c:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800de20:	3301      	adds	r3, #1
 800de22:	b2da      	uxtb	r2, r3
 800de24:	693b      	ldr	r3, [r7, #16]
 800de26:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800de2a:	693b      	ldr	r3, [r7, #16]
 800de2c:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800de30:	2b04      	cmp	r3, #4
 800de32:	d103      	bne.n	800de3c <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 800de34:	693b      	ldr	r3, [r7, #16]
 800de36:	2200      	movs	r2, #0
 800de38:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800de3c:	693b      	ldr	r3, [r7, #16]
 800de3e:	2212      	movs	r2, #18
 800de40:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	3304      	adds	r3, #4
 800de46:	781b      	ldrb	r3, [r3, #0]
 800de48:	2b12      	cmp	r3, #18
 800de4a:	d805      	bhi.n	800de58 <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	3304      	adds	r3, #4
 800de50:	781b      	ldrb	r3, [r3, #0]
 800de52:	b29a      	uxth	r2, r3
 800de54:	693b      	ldr	r3, [r7, #16]
 800de56:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 800de58:	2300      	movs	r3, #0
}
 800de5a:	4618      	mov	r0, r3
 800de5c:	371c      	adds	r7, #28
 800de5e:	46bd      	mov	sp, r7
 800de60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de64:	4770      	bx	lr

0800de66 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800de66:	b480      	push	{r7}
 800de68:	b085      	sub	sp, #20
 800de6a:	af00      	add	r7, sp, #0
 800de6c:	6078      	str	r0, [r7, #4]
 800de6e:	4608      	mov	r0, r1
 800de70:	4611      	mov	r1, r2
 800de72:	461a      	mov	r2, r3
 800de74:	4603      	mov	r3, r0
 800de76:	70fb      	strb	r3, [r7, #3]
 800de78:	460b      	mov	r3, r1
 800de7a:	70bb      	strb	r3, [r7, #2]
 800de7c:	4613      	mov	r3, r2
 800de7e:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de86:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800de8e:	68fa      	ldr	r2, [r7, #12]
 800de90:	3347      	adds	r3, #71	; 0x47
 800de92:	00db      	lsls	r3, r3, #3
 800de94:	4413      	add	r3, r2
 800de96:	78ba      	ldrb	r2, [r7, #2]
 800de98:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800dea0:	68fa      	ldr	r2, [r7, #12]
 800dea2:	3347      	adds	r3, #71	; 0x47
 800dea4:	00db      	lsls	r3, r3, #3
 800dea6:	4413      	add	r3, r2
 800dea8:	2200      	movs	r2, #0
 800deaa:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800deb2:	3301      	adds	r3, #1
 800deb4:	b2da      	uxtb	r2, r3
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800dec2:	2b04      	cmp	r3, #4
 800dec4:	d103      	bne.n	800dece <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	2200      	movs	r2, #0
 800deca:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 800dece:	bf00      	nop
 800ded0:	3714      	adds	r7, #20
 800ded2:	46bd      	mov	sp, r7
 800ded4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded8:	4770      	bx	lr

0800deda <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800deda:	b480      	push	{r7}
 800dedc:	b087      	sub	sp, #28
 800dede:	af00      	add	r7, sp, #0
 800dee0:	60f8      	str	r0, [r7, #12]
 800dee2:	460b      	mov	r3, r1
 800dee4:	607a      	str	r2, [r7, #4]
 800dee6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800deee:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 800def0:	697b      	ldr	r3, [r7, #20]
 800def2:	2200      	movs	r2, #0
 800def4:	815a      	strh	r2, [r3, #10]
  return 0;
 800def6:	2300      	movs	r3, #0
}
 800def8:	4618      	mov	r0, r3
 800defa:	371c      	adds	r7, #28
 800defc:	46bd      	mov	sp, r7
 800defe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df02:	4770      	bx	lr

0800df04 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b086      	sub	sp, #24
 800df08:	af00      	add	r7, sp, #0
 800df0a:	60f8      	str	r0, [r7, #12]
 800df0c:	460b      	mov	r3, r1
 800df0e:	607a      	str	r2, [r7, #4]
 800df10:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df18:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	7a1b      	ldrb	r3, [r3, #8]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d16e      	bne.n	800e000 <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800df28:	b25b      	sxtb	r3, r3
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	db0a      	blt.n	800df44 <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800df34:	2320      	movs	r3, #32
 800df36:	2205      	movs	r2, #5
 800df38:	68f8      	ldr	r0, [r7, #12]
 800df3a:	f7ff ff94 	bl	800de66 <SCSI_SenseCode>
      return -1;
 800df3e:	f04f 33ff 	mov.w	r3, #4294967295
 800df42:	e067      	b.n	800e014 <SCSI_Read10+0x110>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df4a:	689b      	ldr	r3, [r3, #8]
 800df4c:	7afa      	ldrb	r2, [r7, #11]
 800df4e:	4610      	mov	r0, r2
 800df50:	4798      	blx	r3
 800df52:	4603      	mov	r3, r0
 800df54:	2b00      	cmp	r3, #0
 800df56:	d008      	beq.n	800df6a <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800df58:	7af9      	ldrb	r1, [r7, #11]
 800df5a:	233a      	movs	r3, #58	; 0x3a
 800df5c:	2202      	movs	r2, #2
 800df5e:	68f8      	ldr	r0, [r7, #12]
 800df60:	f7ff ff81 	bl	800de66 <SCSI_SenseCode>
      return -1;
 800df64:	f04f 33ff 	mov.w	r3, #4294967295
 800df68:	e054      	b.n	800e014 <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	3302      	adds	r3, #2
 800df6e:	781b      	ldrb	r3, [r3, #0]
 800df70:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	3303      	adds	r3, #3
 800df76:	781b      	ldrb	r3, [r3, #0]
 800df78:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800df7a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	3304      	adds	r3, #4
 800df80:	781b      	ldrb	r3, [r3, #0]
 800df82:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800df84:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800df86:	687a      	ldr	r2, [r7, #4]
 800df88:	3205      	adds	r2, #5
 800df8a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800df8c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	3307      	adds	r3, #7
 800df98:	781b      	ldrb	r3, [r3, #0]
 800df9a:	021b      	lsls	r3, r3, #8
 800df9c:	687a      	ldr	r2, [r7, #4]
 800df9e:	3208      	adds	r2, #8
 800dfa0:	7812      	ldrb	r2, [r2, #0]
 800dfa2:	431a      	orrs	r2, r3
 800dfa4:	697b      	ldr	r3, [r7, #20]
 800dfa6:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800dfb0:	697b      	ldr	r3, [r7, #20]
 800dfb2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800dfb6:	7af9      	ldrb	r1, [r7, #11]
 800dfb8:	68f8      	ldr	r0, [r7, #12]
 800dfba:	f000 f912 	bl	800e1e2 <SCSI_CheckAddressRange>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	da02      	bge.n	800dfca <SCSI_Read10+0xc6>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800dfc4:	f04f 33ff 	mov.w	r3, #4294967295
 800dfc8:	e024      	b.n	800e014 <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	2202      	movs	r2, #2
 800dfce:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800dfd0:	697b      	ldr	r3, [r7, #20]
 800dfd2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800dfd6:	697b      	ldr	r3, [r7, #20]
 800dfd8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800dfdc:	6979      	ldr	r1, [r7, #20]
 800dfde:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
 800dfe2:	fb01 f303 	mul.w	r3, r1, r3
 800dfe6:	429a      	cmp	r2, r3
 800dfe8:	d00a      	beq.n	800e000 <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800dff0:	2320      	movs	r3, #32
 800dff2:	2205      	movs	r2, #5
 800dff4:	68f8      	ldr	r0, [r7, #12]
 800dff6:	f7ff ff36 	bl	800de66 <SCSI_SenseCode>
      return -1;
 800dffa:	f04f 33ff 	mov.w	r3, #4294967295
 800dffe:	e009      	b.n	800e014 <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800e000:	697b      	ldr	r3, [r7, #20]
 800e002:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e006:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 800e008:	7afb      	ldrb	r3, [r7, #11]
 800e00a:	4619      	mov	r1, r3
 800e00c:	68f8      	ldr	r0, [r7, #12]
 800e00e:	f000 f90a 	bl	800e226 <SCSI_ProcessRead>
 800e012:	4603      	mov	r3, r0
}
 800e014:	4618      	mov	r0, r3
 800e016:	3718      	adds	r7, #24
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}

0800e01c <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b086      	sub	sp, #24
 800e020:	af00      	add	r7, sp, #0
 800e022:	60f8      	str	r0, [r7, #12]
 800e024:	460b      	mov	r3, r1
 800e026:	607a      	str	r2, [r7, #4]
 800e028:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e030:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800e032:	697b      	ldr	r3, [r7, #20]
 800e034:	7a1b      	ldrb	r3, [r3, #8]
 800e036:	2b00      	cmp	r3, #0
 800e038:	f040 8096 	bne.w	800e168 <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800e03c:	697b      	ldr	r3, [r7, #20]
 800e03e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800e042:	b25b      	sxtb	r3, r3
 800e044:	2b00      	cmp	r3, #0
 800e046:	da0a      	bge.n	800e05e <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e048:	697b      	ldr	r3, [r7, #20]
 800e04a:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800e04e:	2320      	movs	r3, #32
 800e050:	2205      	movs	r2, #5
 800e052:	68f8      	ldr	r0, [r7, #12]
 800e054:	f7ff ff07 	bl	800de66 <SCSI_SenseCode>
      return -1;
 800e058:	f04f 33ff 	mov.w	r3, #4294967295
 800e05c:	e08a      	b.n	800e174 <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e064:	689b      	ldr	r3, [r3, #8]
 800e066:	7afa      	ldrb	r2, [r7, #11]
 800e068:	4610      	mov	r0, r2
 800e06a:	4798      	blx	r3
 800e06c:	4603      	mov	r3, r0
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d008      	beq.n	800e084 <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e072:	7af9      	ldrb	r1, [r7, #11]
 800e074:	233a      	movs	r3, #58	; 0x3a
 800e076:	2202      	movs	r2, #2
 800e078:	68f8      	ldr	r0, [r7, #12]
 800e07a:	f7ff fef4 	bl	800de66 <SCSI_SenseCode>
      return -1;
 800e07e:	f04f 33ff 	mov.w	r3, #4294967295
 800e082:	e077      	b.n	800e174 <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e08a:	68db      	ldr	r3, [r3, #12]
 800e08c:	7afa      	ldrb	r2, [r7, #11]
 800e08e:	4610      	mov	r0, r2
 800e090:	4798      	blx	r3
 800e092:	4603      	mov	r3, r0
 800e094:	2b00      	cmp	r3, #0
 800e096:	d008      	beq.n	800e0aa <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800e098:	7af9      	ldrb	r1, [r7, #11]
 800e09a:	2327      	movs	r3, #39	; 0x27
 800e09c:	2202      	movs	r2, #2
 800e09e:	68f8      	ldr	r0, [r7, #12]
 800e0a0:	f7ff fee1 	bl	800de66 <SCSI_SenseCode>
      return -1;
 800e0a4:	f04f 33ff 	mov.w	r3, #4294967295
 800e0a8:	e064      	b.n	800e174 <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	3302      	adds	r3, #2
 800e0ae:	781b      	ldrb	r3, [r3, #0]
 800e0b0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	3303      	adds	r3, #3
 800e0b6:	781b      	ldrb	r3, [r3, #0]
 800e0b8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e0ba:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	3304      	adds	r3, #4
 800e0c0:	781b      	ldrb	r3, [r3, #0]
 800e0c2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e0c4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e0c6:	687a      	ldr	r2, [r7, #4]
 800e0c8:	3205      	adds	r2, #5
 800e0ca:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800e0cc:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e0ce:	697b      	ldr	r3, [r7, #20]
 800e0d0:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	3307      	adds	r3, #7
 800e0d8:	781b      	ldrb	r3, [r3, #0]
 800e0da:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800e0dc:	687a      	ldr	r2, [r7, #4]
 800e0de:	3208      	adds	r2, #8
 800e0e0:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800e0e2:	431a      	orrs	r2, r3
 800e0e4:	697b      	ldr	r3, [r7, #20]
 800e0e6:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e0ea:	697b      	ldr	r3, [r7, #20]
 800e0ec:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800e0f0:	697b      	ldr	r3, [r7, #20]
 800e0f2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e0f6:	7af9      	ldrb	r1, [r7, #11]
 800e0f8:	68f8      	ldr	r0, [r7, #12]
 800e0fa:	f000 f872 	bl	800e1e2 <SCSI_CheckAddressRange>
 800e0fe:	4603      	mov	r3, r0
 800e100:	2b00      	cmp	r3, #0
 800e102:	da02      	bge.n	800e10a <SCSI_Write10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e104:	f04f 33ff 	mov.w	r3, #4294967295
 800e108:	e034      	b.n	800e174 <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e10a:	697b      	ldr	r3, [r7, #20]
 800e10c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e110:	697a      	ldr	r2, [r7, #20]
 800e112:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800e116:	fb02 f303 	mul.w	r3, r2, r3
 800e11a:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800e11c:	697b      	ldr	r3, [r7, #20]
 800e11e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e122:	693a      	ldr	r2, [r7, #16]
 800e124:	429a      	cmp	r2, r3
 800e126:	d00a      	beq.n	800e13e <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e128:	697b      	ldr	r3, [r7, #20]
 800e12a:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800e12e:	2320      	movs	r3, #32
 800e130:	2205      	movs	r2, #5
 800e132:	68f8      	ldr	r0, [r7, #12]
 800e134:	f7ff fe97 	bl	800de66 <SCSI_SenseCode>
      return -1;
 800e138:	f04f 33ff 	mov.w	r3, #4294967295
 800e13c:	e01a      	b.n	800e174 <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e144:	bf28      	it	cs
 800e146:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e14a:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800e14c:	697b      	ldr	r3, [r7, #20]
 800e14e:	2201      	movs	r2, #1
 800e150:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800e152:	697b      	ldr	r3, [r7, #20]
 800e154:	f103 020c 	add.w	r2, r3, #12
 800e158:	693b      	ldr	r3, [r7, #16]
 800e15a:	b29b      	uxth	r3, r3
 800e15c:	2101      	movs	r1, #1
 800e15e:	68f8      	ldr	r0, [r7, #12]
 800e160:	f006 fc94 	bl	8014a8c <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 800e164:	2300      	movs	r3, #0
 800e166:	e005      	b.n	800e174 <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 800e168:	7afb      	ldrb	r3, [r7, #11]
 800e16a:	4619      	mov	r1, r3
 800e16c:	68f8      	ldr	r0, [r7, #12]
 800e16e:	f000 f8ce 	bl	800e30e <SCSI_ProcessWrite>
 800e172:	4603      	mov	r3, r0
}
 800e174:	4618      	mov	r0, r3
 800e176:	3718      	adds	r7, #24
 800e178:	46bd      	mov	sp, r7
 800e17a:	bd80      	pop	{r7, pc}

0800e17c <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b086      	sub	sp, #24
 800e180:	af00      	add	r7, sp, #0
 800e182:	60f8      	str	r0, [r7, #12]
 800e184:	460b      	mov	r3, r1
 800e186:	607a      	str	r2, [r7, #4]
 800e188:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e190:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	3301      	adds	r3, #1
 800e196:	781b      	ldrb	r3, [r3, #0]
 800e198:	f003 0302 	and.w	r3, r3, #2
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d008      	beq.n	800e1b2 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800e1a0:	7af9      	ldrb	r1, [r7, #11]
 800e1a2:	2324      	movs	r3, #36	; 0x24
 800e1a4:	2205      	movs	r2, #5
 800e1a6:	68f8      	ldr	r0, [r7, #12]
 800e1a8:	f7ff fe5d 	bl	800de66 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800e1ac:	f04f 33ff 	mov.w	r3, #4294967295
 800e1b0:	e013      	b.n	800e1da <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e1b2:	697b      	ldr	r3, [r7, #20]
 800e1b4:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800e1b8:	697b      	ldr	r3, [r7, #20]
 800e1ba:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e1be:	7af9      	ldrb	r1, [r7, #11]
 800e1c0:	68f8      	ldr	r0, [r7, #12]
 800e1c2:	f000 f80e 	bl	800e1e2 <SCSI_CheckAddressRange>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	da02      	bge.n	800e1d2 <SCSI_Verify10+0x56>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 800e1cc:	f04f 33ff 	mov.w	r3, #4294967295
 800e1d0:	e003      	b.n	800e1da <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 800e1d2:	697b      	ldr	r3, [r7, #20]
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	815a      	strh	r2, [r3, #10]
  return 0;
 800e1d8:	2300      	movs	r3, #0
}
 800e1da:	4618      	mov	r0, r3
 800e1dc:	3718      	adds	r7, #24
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	bd80      	pop	{r7, pc}

0800e1e2 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800e1e2:	b580      	push	{r7, lr}
 800e1e4:	b086      	sub	sp, #24
 800e1e6:	af00      	add	r7, sp, #0
 800e1e8:	60f8      	str	r0, [r7, #12]
 800e1ea:	607a      	str	r2, [r7, #4]
 800e1ec:	603b      	str	r3, [r7, #0]
 800e1ee:	460b      	mov	r3, r1
 800e1f0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1f8:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800e1fa:	687a      	ldr	r2, [r7, #4]
 800e1fc:	683b      	ldr	r3, [r7, #0]
 800e1fe:	441a      	add	r2, r3
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800e206:	429a      	cmp	r2, r3
 800e208:	d908      	bls.n	800e21c <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800e20a:	7af9      	ldrb	r1, [r7, #11]
 800e20c:	2321      	movs	r3, #33	; 0x21
 800e20e:	2205      	movs	r2, #5
 800e210:	68f8      	ldr	r0, [r7, #12]
 800e212:	f7ff fe28 	bl	800de66 <SCSI_SenseCode>
    return -1;
 800e216:	f04f 33ff 	mov.w	r3, #4294967295
 800e21a:	e000      	b.n	800e21e <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 800e21c:	2300      	movs	r3, #0
}
 800e21e:	4618      	mov	r0, r3
 800e220:	3718      	adds	r7, #24
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}

0800e226 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 800e226:	b590      	push	{r4, r7, lr}
 800e228:	b085      	sub	sp, #20
 800e22a:	af00      	add	r7, sp, #0
 800e22c:	6078      	str	r0, [r7, #4]
 800e22e:	460b      	mov	r3, r1
 800e230:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e238:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e240:	68fa      	ldr	r2, [r7, #12]
 800e242:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800e246:	fb02 f303 	mul.w	r3, r2, r3
 800e24a:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e252:	bf28      	it	cs
 800e254:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e258:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e260:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	f103 010c 	add.w	r1, r3, #12
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800e274:	4618      	mov	r0, r3
 800e276:	68bb      	ldr	r3, [r7, #8]
 800e278:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800e27c:	b29b      	uxth	r3, r3
 800e27e:	78f8      	ldrb	r0, [r7, #3]
 800e280:	47a0      	blx	r4
 800e282:	4603      	mov	r3, r0
 800e284:	2b00      	cmp	r3, #0
 800e286:	da08      	bge.n	800e29a <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800e288:	78f9      	ldrb	r1, [r7, #3]
 800e28a:	2311      	movs	r3, #17
 800e28c:	2204      	movs	r2, #4
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	f7ff fde9 	bl	800de66 <SCSI_SenseCode>
    return -1;
 800e294:	f04f 33ff 	mov.w	r3, #4294967295
 800e298:	e035      	b.n	800e306 <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	f103 020c 	add.w	r2, r3, #12
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	b29b      	uxth	r3, r3
 800e2a4:	2181      	movs	r1, #129	; 0x81
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	f006 fbcd 	bl	8014a46 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800e2b8:	4619      	mov	r1, r3
 800e2ba:	68bb      	ldr	r3, [r7, #8]
 800e2bc:	fbb3 f3f1 	udiv	r3, r3, r1
 800e2c0:	441a      	add	r2, r3
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800e2d4:	4619      	mov	r1, r3
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	fbb3 f3f1 	udiv	r3, r3, r1
 800e2dc:	1ad2      	subs	r2, r2, r3
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	1ad2      	subs	r2, r2, r3
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d102      	bne.n	800e304 <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	2203      	movs	r2, #3
 800e302:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 800e304:	2300      	movs	r3, #0
}
 800e306:	4618      	mov	r0, r3
 800e308:	3714      	adds	r7, #20
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd90      	pop	{r4, r7, pc}

0800e30e <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 800e30e:	b590      	push	{r4, r7, lr}
 800e310:	b085      	sub	sp, #20
 800e312:	af00      	add	r7, sp, #0
 800e314:	6078      	str	r0, [r7, #4]
 800e316:	460b      	mov	r3, r1
 800e318:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e320:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e328:	68fa      	ldr	r2, [r7, #12]
 800e32a:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800e32e:	fb02 f303 	mul.w	r3, r2, r3
 800e332:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800e334:	68bb      	ldr	r3, [r7, #8]
 800e336:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e33a:	bf28      	it	cs
 800e33c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e340:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e348:	695c      	ldr	r4, [r3, #20]
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	f103 010c 	add.w	r1, r3, #12
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800e35c:	4618      	mov	r0, r3
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800e364:	b29b      	uxth	r3, r3
 800e366:	78f8      	ldrb	r0, [r7, #3]
 800e368:	47a0      	blx	r4
 800e36a:	4603      	mov	r3, r0
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	da08      	bge.n	800e382 <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800e370:	78f9      	ldrb	r1, [r7, #3]
 800e372:	2303      	movs	r3, #3
 800e374:	2204      	movs	r2, #4
 800e376:	6878      	ldr	r0, [r7, #4]
 800e378:	f7ff fd75 	bl	800de66 <SCSI_SenseCode>

    return -1;
 800e37c:	f04f 33ff 	mov.w	r3, #4294967295
 800e380:	e045      	b.n	800e40e <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800e38e:	4619      	mov	r1, r3
 800e390:	68bb      	ldr	r3, [r7, #8]
 800e392:	fbb3 f3f1 	udiv	r3, r3, r1
 800e396:	441a      	add	r2, r3
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800e3aa:	4619      	mov	r1, r3
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	fbb3 f3f1 	udiv	r3, r3, r1
 800e3b2:	1ad2      	subs	r2, r2, r3
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800e3c0:	68bb      	ldr	r3, [r7, #8]
 800e3c2:	1ad2      	subs	r2, r2, r3
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d104      	bne.n	800e3de <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800e3d4:	2100      	movs	r1, #0
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f7ff f97a 	bl	800d6d0 <MSC_BOT_SendCSW>
 800e3dc:	e016      	b.n	800e40c <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e3e4:	68fa      	ldr	r2, [r7, #12]
 800e3e6:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800e3ea:	fb02 f303 	mul.w	r3, r2, r3
 800e3ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3f2:	bf28      	it	cs
 800e3f4:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e3f8:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	f103 020c 	add.w	r2, r3, #12
 800e400:	68bb      	ldr	r3, [r7, #8]
 800e402:	b29b      	uxth	r3, r3
 800e404:	2101      	movs	r1, #1
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f006 fb40 	bl	8014a8c <USBD_LL_PrepareReceive>
  }

  return 0;
 800e40c:	2300      	movs	r3, #0
}
 800e40e:	4618      	mov	r0, r3
 800e410:	3714      	adds	r7, #20
 800e412:	46bd      	mov	sp, r7
 800e414:	bd90      	pop	{r4, r7, pc}

0800e416 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e416:	b580      	push	{r7, lr}
 800e418:	b084      	sub	sp, #16
 800e41a:	af00      	add	r7, sp, #0
 800e41c:	60f8      	str	r0, [r7, #12]
 800e41e:	60b9      	str	r1, [r7, #8]
 800e420:	4613      	mov	r3, r2
 800e422:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d101      	bne.n	800e42e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e42a:	2302      	movs	r3, #2
 800e42c:	e01a      	b.n	800e464 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e434:	2b00      	cmp	r3, #0
 800e436:	d003      	beq.n	800e440 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	2200      	movs	r2, #0
 800e43c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e440:	68bb      	ldr	r3, [r7, #8]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d003      	beq.n	800e44e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	68ba      	ldr	r2, [r7, #8]
 800e44a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	2201      	movs	r2, #1
 800e452:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	79fa      	ldrb	r2, [r7, #7]
 800e45a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800e45c:	68f8      	ldr	r0, [r7, #12]
 800e45e:	f006 f97f 	bl	8014760 <USBD_LL_Init>

  return USBD_OK;
 800e462:	2300      	movs	r3, #0
}
 800e464:	4618      	mov	r0, r3
 800e466:	3710      	adds	r7, #16
 800e468:	46bd      	mov	sp, r7
 800e46a:	bd80      	pop	{r7, pc}

0800e46c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e46c:	b480      	push	{r7}
 800e46e:	b085      	sub	sp, #20
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
 800e474:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800e476:	2300      	movs	r3, #0
 800e478:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d006      	beq.n	800e48e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	683a      	ldr	r2, [r7, #0]
 800e484:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800e488:	2300      	movs	r3, #0
 800e48a:	73fb      	strb	r3, [r7, #15]
 800e48c:	e001      	b.n	800e492 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800e48e:	2302      	movs	r3, #2
 800e490:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e492:	7bfb      	ldrb	r3, [r7, #15]
}
 800e494:	4618      	mov	r0, r3
 800e496:	3714      	adds	r7, #20
 800e498:	46bd      	mov	sp, r7
 800e49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49e:	4770      	bx	lr

0800e4a0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b082      	sub	sp, #8
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800e4a8:	6878      	ldr	r0, [r7, #4]
 800e4aa:	f006 f9a9 	bl	8014800 <USBD_LL_Start>

  return USBD_OK;
 800e4ae:	2300      	movs	r3, #0
}
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	3708      	adds	r7, #8
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	bd80      	pop	{r7, pc}

0800e4b8 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop(USBD_HandleTypeDef *pdev)
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b082      	sub	sp, #8
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4c6:	685b      	ldr	r3, [r3, #4]
 800e4c8:	687a      	ldr	r2, [r7, #4]
 800e4ca:	6852      	ldr	r2, [r2, #4]
 800e4cc:	b2d2      	uxtb	r2, r2
 800e4ce:	4611      	mov	r1, r2
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	4798      	blx	r3

  /* Stop the low level driver */
  USBD_LL_Stop(pdev);
 800e4d4:	6878      	ldr	r0, [r7, #4]
 800e4d6:	f006 f9ae 	bl	8014836 <USBD_LL_Stop>

  return USBD_OK;
 800e4da:	2300      	movs	r3, #0
}
 800e4dc:	4618      	mov	r0, r3
 800e4de:	3708      	adds	r7, #8
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}

0800e4e4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e4e4:	b480      	push	{r7}
 800e4e6:	b083      	sub	sp, #12
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e4ec:	2300      	movs	r3, #0
}
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	370c      	adds	r7, #12
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f8:	4770      	bx	lr

0800e4fa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800e4fa:	b580      	push	{r7, lr}
 800e4fc:	b084      	sub	sp, #16
 800e4fe:	af00      	add	r7, sp, #0
 800e500:	6078      	str	r0, [r7, #4]
 800e502:	460b      	mov	r3, r1
 800e504:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e506:	2302      	movs	r3, #2
 800e508:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e510:	2b00      	cmp	r3, #0
 800e512:	d00c      	beq.n	800e52e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	78fa      	ldrb	r2, [r7, #3]
 800e51e:	4611      	mov	r1, r2
 800e520:	6878      	ldr	r0, [r7, #4]
 800e522:	4798      	blx	r3
 800e524:	4603      	mov	r3, r0
 800e526:	2b00      	cmp	r3, #0
 800e528:	d101      	bne.n	800e52e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800e52a:	2300      	movs	r3, #0
 800e52c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800e52e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e530:	4618      	mov	r0, r3
 800e532:	3710      	adds	r7, #16
 800e534:	46bd      	mov	sp, r7
 800e536:	bd80      	pop	{r7, pc}

0800e538 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b082      	sub	sp, #8
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
 800e540:	460b      	mov	r3, r1
 800e542:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e54a:	685b      	ldr	r3, [r3, #4]
 800e54c:	78fa      	ldrb	r2, [r7, #3]
 800e54e:	4611      	mov	r1, r2
 800e550:	6878      	ldr	r0, [r7, #4]
 800e552:	4798      	blx	r3

  return USBD_OK;
 800e554:	2300      	movs	r3, #0
}
 800e556:	4618      	mov	r0, r3
 800e558:	3708      	adds	r7, #8
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}

0800e55e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e55e:	b580      	push	{r7, lr}
 800e560:	b082      	sub	sp, #8
 800e562:	af00      	add	r7, sp, #0
 800e564:	6078      	str	r0, [r7, #4]
 800e566:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800e56e:	6839      	ldr	r1, [r7, #0]
 800e570:	4618      	mov	r0, r3
 800e572:	f000 ff09 	bl	800f388 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	2201      	movs	r2, #1
 800e57a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800e584:	461a      	mov	r2, r3
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800e592:	f003 031f 	and.w	r3, r3, #31
 800e596:	2b01      	cmp	r3, #1
 800e598:	d00c      	beq.n	800e5b4 <USBD_LL_SetupStage+0x56>
 800e59a:	2b01      	cmp	r3, #1
 800e59c:	d302      	bcc.n	800e5a4 <USBD_LL_SetupStage+0x46>
 800e59e:	2b02      	cmp	r3, #2
 800e5a0:	d010      	beq.n	800e5c4 <USBD_LL_SetupStage+0x66>
 800e5a2:	e017      	b.n	800e5d4 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800e5aa:	4619      	mov	r1, r3
 800e5ac:	6878      	ldr	r0, [r7, #4]
 800e5ae:	f000 fa09 	bl	800e9c4 <USBD_StdDevReq>
      break;
 800e5b2:	e01a      	b.n	800e5ea <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800e5ba:	4619      	mov	r1, r3
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f000 fa6b 	bl	800ea98 <USBD_StdItfReq>
      break;
 800e5c2:	e012      	b.n	800e5ea <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800e5ca:	4619      	mov	r1, r3
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f000 faa9 	bl	800eb24 <USBD_StdEPReq>
      break;
 800e5d2:	e00a      	b.n	800e5ea <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800e5da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e5de:	b2db      	uxtb	r3, r3
 800e5e0:	4619      	mov	r1, r3
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f006 f9a6 	bl	8014934 <USBD_LL_StallEP>
      break;
 800e5e8:	bf00      	nop
  }

  return USBD_OK;
 800e5ea:	2300      	movs	r3, #0
}
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	3708      	adds	r7, #8
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}

0800e5f4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b086      	sub	sp, #24
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	60f8      	str	r0, [r7, #12]
 800e5fc:	460b      	mov	r3, r1
 800e5fe:	607a      	str	r2, [r7, #4]
 800e600:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800e602:	7afb      	ldrb	r3, [r7, #11]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d14b      	bne.n	800e6a0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e60e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e616:	2b03      	cmp	r3, #3
 800e618:	d134      	bne.n	800e684 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800e61a:	697b      	ldr	r3, [r7, #20]
 800e61c:	68da      	ldr	r2, [r3, #12]
 800e61e:	697b      	ldr	r3, [r7, #20]
 800e620:	691b      	ldr	r3, [r3, #16]
 800e622:	429a      	cmp	r2, r3
 800e624:	d919      	bls.n	800e65a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800e626:	697b      	ldr	r3, [r7, #20]
 800e628:	68da      	ldr	r2, [r3, #12]
 800e62a:	697b      	ldr	r3, [r7, #20]
 800e62c:	691b      	ldr	r3, [r3, #16]
 800e62e:	1ad2      	subs	r2, r2, r3
 800e630:	697b      	ldr	r3, [r7, #20]
 800e632:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800e634:	697b      	ldr	r3, [r7, #20]
 800e636:	68da      	ldr	r2, [r3, #12]
 800e638:	697b      	ldr	r3, [r7, #20]
 800e63a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800e63c:	429a      	cmp	r2, r3
 800e63e:	d203      	bcs.n	800e648 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800e644:	b29b      	uxth	r3, r3
 800e646:	e002      	b.n	800e64e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800e648:	697b      	ldr	r3, [r7, #20]
 800e64a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800e64c:	b29b      	uxth	r3, r3
 800e64e:	461a      	mov	r2, r3
 800e650:	6879      	ldr	r1, [r7, #4]
 800e652:	68f8      	ldr	r0, [r7, #12]
 800e654:	f000 ff6e 	bl	800f534 <USBD_CtlContinueRx>
 800e658:	e038      	b.n	800e6cc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e660:	691b      	ldr	r3, [r3, #16]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d00a      	beq.n	800e67c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e66c:	2b03      	cmp	r3, #3
 800e66e:	d105      	bne.n	800e67c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e676:	691b      	ldr	r3, [r3, #16]
 800e678:	68f8      	ldr	r0, [r7, #12]
 800e67a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800e67c:	68f8      	ldr	r0, [r7, #12]
 800e67e:	f000 ff6b 	bl	800f558 <USBD_CtlSendStatus>
 800e682:	e023      	b.n	800e6cc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e68a:	2b05      	cmp	r3, #5
 800e68c:	d11e      	bne.n	800e6cc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	2200      	movs	r2, #0
 800e692:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800e696:	2100      	movs	r1, #0
 800e698:	68f8      	ldr	r0, [r7, #12]
 800e69a:	f006 f94b 	bl	8014934 <USBD_LL_StallEP>
 800e69e:	e015      	b.n	800e6cc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6a6:	699b      	ldr	r3, [r3, #24]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d00d      	beq.n	800e6c8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800e6b2:	2b03      	cmp	r3, #3
 800e6b4:	d108      	bne.n	800e6c8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6bc:	699b      	ldr	r3, [r3, #24]
 800e6be:	7afa      	ldrb	r2, [r7, #11]
 800e6c0:	4611      	mov	r1, r2
 800e6c2:	68f8      	ldr	r0, [r7, #12]
 800e6c4:	4798      	blx	r3
 800e6c6:	e001      	b.n	800e6cc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e6c8:	2302      	movs	r3, #2
 800e6ca:	e000      	b.n	800e6ce <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800e6cc:	2300      	movs	r3, #0
}
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	3718      	adds	r7, #24
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}

0800e6d6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e6d6:	b580      	push	{r7, lr}
 800e6d8:	b086      	sub	sp, #24
 800e6da:	af00      	add	r7, sp, #0
 800e6dc:	60f8      	str	r0, [r7, #12]
 800e6de:	460b      	mov	r3, r1
 800e6e0:	607a      	str	r2, [r7, #4]
 800e6e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800e6e4:	7afb      	ldrb	r3, [r7, #11]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d17f      	bne.n	800e7ea <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	3314      	adds	r3, #20
 800e6ee:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e6f6:	2b02      	cmp	r3, #2
 800e6f8:	d15c      	bne.n	800e7b4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800e6fa:	697b      	ldr	r3, [r7, #20]
 800e6fc:	68da      	ldr	r2, [r3, #12]
 800e6fe:	697b      	ldr	r3, [r7, #20]
 800e700:	691b      	ldr	r3, [r3, #16]
 800e702:	429a      	cmp	r2, r3
 800e704:	d915      	bls.n	800e732 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800e706:	697b      	ldr	r3, [r7, #20]
 800e708:	68da      	ldr	r2, [r3, #12]
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	691b      	ldr	r3, [r3, #16]
 800e70e:	1ad2      	subs	r2, r2, r3
 800e710:	697b      	ldr	r3, [r7, #20]
 800e712:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800e714:	697b      	ldr	r3, [r7, #20]
 800e716:	68db      	ldr	r3, [r3, #12]
 800e718:	b29b      	uxth	r3, r3
 800e71a:	461a      	mov	r2, r3
 800e71c:	6879      	ldr	r1, [r7, #4]
 800e71e:	68f8      	ldr	r0, [r7, #12]
 800e720:	f000 fef6 	bl	800f510 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e724:	2300      	movs	r3, #0
 800e726:	2200      	movs	r2, #0
 800e728:	2100      	movs	r1, #0
 800e72a:	68f8      	ldr	r0, [r7, #12]
 800e72c:	f006 f9ae 	bl	8014a8c <USBD_LL_PrepareReceive>
 800e730:	e04e      	b.n	800e7d0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800e732:	697b      	ldr	r3, [r7, #20]
 800e734:	689b      	ldr	r3, [r3, #8]
 800e736:	697a      	ldr	r2, [r7, #20]
 800e738:	6912      	ldr	r2, [r2, #16]
 800e73a:	fbb3 f1f2 	udiv	r1, r3, r2
 800e73e:	fb02 f201 	mul.w	r2, r2, r1
 800e742:	1a9b      	subs	r3, r3, r2
 800e744:	2b00      	cmp	r3, #0
 800e746:	d11c      	bne.n	800e782 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800e748:	697b      	ldr	r3, [r7, #20]
 800e74a:	689a      	ldr	r2, [r3, #8]
 800e74c:	697b      	ldr	r3, [r7, #20]
 800e74e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800e750:	429a      	cmp	r2, r3
 800e752:	d316      	bcc.n	800e782 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	689a      	ldr	r2, [r3, #8]
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e75e:	429a      	cmp	r2, r3
 800e760:	d20f      	bcs.n	800e782 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e762:	2200      	movs	r2, #0
 800e764:	2100      	movs	r1, #0
 800e766:	68f8      	ldr	r0, [r7, #12]
 800e768:	f000 fed2 	bl	800f510 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	2200      	movs	r2, #0
 800e770:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e774:	2300      	movs	r3, #0
 800e776:	2200      	movs	r2, #0
 800e778:	2100      	movs	r1, #0
 800e77a:	68f8      	ldr	r0, [r7, #12]
 800e77c:	f006 f986 	bl	8014a8c <USBD_LL_PrepareReceive>
 800e780:	e026      	b.n	800e7d0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e788:	68db      	ldr	r3, [r3, #12]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d00a      	beq.n	800e7a4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e794:	2b03      	cmp	r3, #3
 800e796:	d105      	bne.n	800e7a4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e79e:	68db      	ldr	r3, [r3, #12]
 800e7a0:	68f8      	ldr	r0, [r7, #12]
 800e7a2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800e7a4:	2180      	movs	r1, #128	; 0x80
 800e7a6:	68f8      	ldr	r0, [r7, #12]
 800e7a8:	f006 f8c4 	bl	8014934 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800e7ac:	68f8      	ldr	r0, [r7, #12]
 800e7ae:	f000 fee6 	bl	800f57e <USBD_CtlReceiveStatus>
 800e7b2:	e00d      	b.n	800e7d0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e7ba:	2b04      	cmp	r3, #4
 800e7bc:	d004      	beq.n	800e7c8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d103      	bne.n	800e7d0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800e7c8:	2180      	movs	r1, #128	; 0x80
 800e7ca:	68f8      	ldr	r0, [r7, #12]
 800e7cc:	f006 f8b2 	bl	8014934 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e7d6:	2b01      	cmp	r3, #1
 800e7d8:	d11d      	bne.n	800e816 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800e7da:	68f8      	ldr	r0, [r7, #12]
 800e7dc:	f7ff fe82 	bl	800e4e4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e7e8:	e015      	b.n	800e816 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e7f0:	695b      	ldr	r3, [r3, #20]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d00d      	beq.n	800e812 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800e7fc:	2b03      	cmp	r3, #3
 800e7fe:	d108      	bne.n	800e812 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e806:	695b      	ldr	r3, [r3, #20]
 800e808:	7afa      	ldrb	r2, [r7, #11]
 800e80a:	4611      	mov	r1, r2
 800e80c:	68f8      	ldr	r0, [r7, #12]
 800e80e:	4798      	blx	r3
 800e810:	e001      	b.n	800e816 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e812:	2302      	movs	r3, #2
 800e814:	e000      	b.n	800e818 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800e816:	2300      	movs	r3, #0
}
 800e818:	4618      	mov	r0, r3
 800e81a:	3718      	adds	r7, #24
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bd80      	pop	{r7, pc}

0800e820 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b082      	sub	sp, #8
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e828:	2340      	movs	r3, #64	; 0x40
 800e82a:	2200      	movs	r2, #0
 800e82c:	2100      	movs	r1, #0
 800e82e:	6878      	ldr	r0, [r7, #4]
 800e830:	f006 f81c 	bl	801486c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2201      	movs	r2, #1
 800e838:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2240      	movs	r2, #64	; 0x40
 800e840:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e844:	2340      	movs	r3, #64	; 0x40
 800e846:	2200      	movs	r2, #0
 800e848:	2180      	movs	r1, #128	; 0x80
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f006 f80e 	bl	801486c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2201      	movs	r2, #1
 800e854:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	2240      	movs	r2, #64	; 0x40
 800e85a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2201      	movs	r2, #1
 800e860:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2200      	movs	r2, #0
 800e868:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2200      	movs	r2, #0
 800e870:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	2200      	movs	r2, #0
 800e876:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e880:	2b00      	cmp	r3, #0
 800e882:	d009      	beq.n	800e898 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e88a:	685b      	ldr	r3, [r3, #4]
 800e88c:	687a      	ldr	r2, [r7, #4]
 800e88e:	6852      	ldr	r2, [r2, #4]
 800e890:	b2d2      	uxtb	r2, r2
 800e892:	4611      	mov	r1, r2
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	4798      	blx	r3
  }

  return USBD_OK;
 800e898:	2300      	movs	r3, #0
}
 800e89a:	4618      	mov	r0, r3
 800e89c:	3708      	adds	r7, #8
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}

0800e8a2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e8a2:	b480      	push	{r7}
 800e8a4:	b083      	sub	sp, #12
 800e8a6:	af00      	add	r7, sp, #0
 800e8a8:	6078      	str	r0, [r7, #4]
 800e8aa:	460b      	mov	r3, r1
 800e8ac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	78fa      	ldrb	r2, [r7, #3]
 800e8b2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e8b4:	2300      	movs	r3, #0
}
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	370c      	adds	r7, #12
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c0:	4770      	bx	lr

0800e8c2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e8c2:	b480      	push	{r7}
 800e8c4:	b083      	sub	sp, #12
 800e8c6:	af00      	add	r7, sp, #0
 800e8c8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2204      	movs	r2, #4
 800e8da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e8de:	2300      	movs	r3, #0
}
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	370c      	adds	r7, #12
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ea:	4770      	bx	lr

0800e8ec <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e8ec:	b480      	push	{r7}
 800e8ee:	b083      	sub	sp, #12
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8fa:	2b04      	cmp	r3, #4
 800e8fc:	d105      	bne.n	800e90a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e90a:	2300      	movs	r3, #0
}
 800e90c:	4618      	mov	r0, r3
 800e90e:	370c      	adds	r7, #12
 800e910:	46bd      	mov	sp, r7
 800e912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e916:	4770      	bx	lr

0800e918 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b082      	sub	sp, #8
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e926:	2b03      	cmp	r3, #3
 800e928:	d10b      	bne.n	800e942 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e930:	69db      	ldr	r3, [r3, #28]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d005      	beq.n	800e942 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e93c:	69db      	ldr	r3, [r3, #28]
 800e93e:	6878      	ldr	r0, [r7, #4]
 800e940:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e942:	2300      	movs	r3, #0
}
 800e944:	4618      	mov	r0, r3
 800e946:	3708      	adds	r7, #8
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}

0800e94c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e94c:	b480      	push	{r7}
 800e94e:	b083      	sub	sp, #12
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
 800e954:	460b      	mov	r3, r1
 800e956:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800e958:	2300      	movs	r3, #0
}
 800e95a:	4618      	mov	r0, r3
 800e95c:	370c      	adds	r7, #12
 800e95e:	46bd      	mov	sp, r7
 800e960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e964:	4770      	bx	lr

0800e966 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e966:	b480      	push	{r7}
 800e968:	b083      	sub	sp, #12
 800e96a:	af00      	add	r7, sp, #0
 800e96c:	6078      	str	r0, [r7, #4]
 800e96e:	460b      	mov	r3, r1
 800e970:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800e972:	2300      	movs	r3, #0
}
 800e974:	4618      	mov	r0, r3
 800e976:	370c      	adds	r7, #12
 800e978:	46bd      	mov	sp, r7
 800e97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97e:	4770      	bx	lr

0800e980 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e980:	b480      	push	{r7}
 800e982:	b083      	sub	sp, #12
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e988:	2300      	movs	r3, #0
}
 800e98a:	4618      	mov	r0, r3
 800e98c:	370c      	adds	r7, #12
 800e98e:	46bd      	mov	sp, r7
 800e990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e994:	4770      	bx	lr

0800e996 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e996:	b580      	push	{r7, lr}
 800e998:	b082      	sub	sp, #8
 800e99a:	af00      	add	r7, sp, #0
 800e99c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	2201      	movs	r2, #1
 800e9a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9ac:	685b      	ldr	r3, [r3, #4]
 800e9ae:	687a      	ldr	r2, [r7, #4]
 800e9b0:	6852      	ldr	r2, [r2, #4]
 800e9b2:	b2d2      	uxtb	r2, r2
 800e9b4:	4611      	mov	r1, r2
 800e9b6:	6878      	ldr	r0, [r7, #4]
 800e9b8:	4798      	blx	r3

  return USBD_OK;
 800e9ba:	2300      	movs	r3, #0
}
 800e9bc:	4618      	mov	r0, r3
 800e9be:	3708      	adds	r7, #8
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bd80      	pop	{r7, pc}

0800e9c4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b084      	sub	sp, #16
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
 800e9cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e9d2:	683b      	ldr	r3, [r7, #0]
 800e9d4:	781b      	ldrb	r3, [r3, #0]
 800e9d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e9da:	2b20      	cmp	r3, #32
 800e9dc:	d004      	beq.n	800e9e8 <USBD_StdDevReq+0x24>
 800e9de:	2b40      	cmp	r3, #64	; 0x40
 800e9e0:	d002      	beq.n	800e9e8 <USBD_StdDevReq+0x24>
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d008      	beq.n	800e9f8 <USBD_StdDevReq+0x34>
 800e9e6:	e04c      	b.n	800ea82 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9ee:	689b      	ldr	r3, [r3, #8]
 800e9f0:	6839      	ldr	r1, [r7, #0]
 800e9f2:	6878      	ldr	r0, [r7, #4]
 800e9f4:	4798      	blx	r3
      break;
 800e9f6:	e049      	b.n	800ea8c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	785b      	ldrb	r3, [r3, #1]
 800e9fc:	2b09      	cmp	r3, #9
 800e9fe:	d83a      	bhi.n	800ea76 <USBD_StdDevReq+0xb2>
 800ea00:	a201      	add	r2, pc, #4	; (adr r2, 800ea08 <USBD_StdDevReq+0x44>)
 800ea02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea06:	bf00      	nop
 800ea08:	0800ea59 	.word	0x0800ea59
 800ea0c:	0800ea6d 	.word	0x0800ea6d
 800ea10:	0800ea77 	.word	0x0800ea77
 800ea14:	0800ea63 	.word	0x0800ea63
 800ea18:	0800ea77 	.word	0x0800ea77
 800ea1c:	0800ea3b 	.word	0x0800ea3b
 800ea20:	0800ea31 	.word	0x0800ea31
 800ea24:	0800ea77 	.word	0x0800ea77
 800ea28:	0800ea4f 	.word	0x0800ea4f
 800ea2c:	0800ea45 	.word	0x0800ea45
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ea30:	6839      	ldr	r1, [r7, #0]
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	f000 f9d4 	bl	800ede0 <USBD_GetDescriptor>
          break;
 800ea38:	e022      	b.n	800ea80 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ea3a:	6839      	ldr	r1, [r7, #0]
 800ea3c:	6878      	ldr	r0, [r7, #4]
 800ea3e:	f000 fb37 	bl	800f0b0 <USBD_SetAddress>
          break;
 800ea42:	e01d      	b.n	800ea80 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800ea44:	6839      	ldr	r1, [r7, #0]
 800ea46:	6878      	ldr	r0, [r7, #4]
 800ea48:	f000 fb74 	bl	800f134 <USBD_SetConfig>
          break;
 800ea4c:	e018      	b.n	800ea80 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ea4e:	6839      	ldr	r1, [r7, #0]
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f000 fbfd 	bl	800f250 <USBD_GetConfig>
          break;
 800ea56:	e013      	b.n	800ea80 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ea58:	6839      	ldr	r1, [r7, #0]
 800ea5a:	6878      	ldr	r0, [r7, #4]
 800ea5c:	f000 fc2c 	bl	800f2b8 <USBD_GetStatus>
          break;
 800ea60:	e00e      	b.n	800ea80 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ea62:	6839      	ldr	r1, [r7, #0]
 800ea64:	6878      	ldr	r0, [r7, #4]
 800ea66:	f000 fc5a 	bl	800f31e <USBD_SetFeature>
          break;
 800ea6a:	e009      	b.n	800ea80 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ea6c:	6839      	ldr	r1, [r7, #0]
 800ea6e:	6878      	ldr	r0, [r7, #4]
 800ea70:	f000 fc69 	bl	800f346 <USBD_ClrFeature>
          break;
 800ea74:	e004      	b.n	800ea80 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800ea76:	6839      	ldr	r1, [r7, #0]
 800ea78:	6878      	ldr	r0, [r7, #4]
 800ea7a:	f000 fcc2 	bl	800f402 <USBD_CtlError>
          break;
 800ea7e:	bf00      	nop
      }
      break;
 800ea80:	e004      	b.n	800ea8c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800ea82:	6839      	ldr	r1, [r7, #0]
 800ea84:	6878      	ldr	r0, [r7, #4]
 800ea86:	f000 fcbc 	bl	800f402 <USBD_CtlError>
      break;
 800ea8a:	bf00      	nop
  }

  return ret;
 800ea8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea8e:	4618      	mov	r0, r3
 800ea90:	3710      	adds	r7, #16
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}
 800ea96:	bf00      	nop

0800ea98 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b084      	sub	sp, #16
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
 800eaa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eaa6:	683b      	ldr	r3, [r7, #0]
 800eaa8:	781b      	ldrb	r3, [r3, #0]
 800eaaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eaae:	2b20      	cmp	r3, #32
 800eab0:	d003      	beq.n	800eaba <USBD_StdItfReq+0x22>
 800eab2:	2b40      	cmp	r3, #64	; 0x40
 800eab4:	d001      	beq.n	800eaba <USBD_StdItfReq+0x22>
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d12a      	bne.n	800eb10 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eac0:	3b01      	subs	r3, #1
 800eac2:	2b02      	cmp	r3, #2
 800eac4:	d81d      	bhi.n	800eb02 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800eac6:	683b      	ldr	r3, [r7, #0]
 800eac8:	889b      	ldrh	r3, [r3, #4]
 800eaca:	b2db      	uxtb	r3, r3
 800eacc:	2b01      	cmp	r3, #1
 800eace:	d813      	bhi.n	800eaf8 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ead6:	689b      	ldr	r3, [r3, #8]
 800ead8:	6839      	ldr	r1, [r7, #0]
 800eada:	6878      	ldr	r0, [r7, #4]
 800eadc:	4798      	blx	r3
 800eade:	4603      	mov	r3, r0
 800eae0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	88db      	ldrh	r3, [r3, #6]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d110      	bne.n	800eb0c <USBD_StdItfReq+0x74>
 800eaea:	7bfb      	ldrb	r3, [r7, #15]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d10d      	bne.n	800eb0c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f000 fd31 	bl	800f558 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800eaf6:	e009      	b.n	800eb0c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800eaf8:	6839      	ldr	r1, [r7, #0]
 800eafa:	6878      	ldr	r0, [r7, #4]
 800eafc:	f000 fc81 	bl	800f402 <USBD_CtlError>
          break;
 800eb00:	e004      	b.n	800eb0c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800eb02:	6839      	ldr	r1, [r7, #0]
 800eb04:	6878      	ldr	r0, [r7, #4]
 800eb06:	f000 fc7c 	bl	800f402 <USBD_CtlError>
          break;
 800eb0a:	e000      	b.n	800eb0e <USBD_StdItfReq+0x76>
          break;
 800eb0c:	bf00      	nop
      }
      break;
 800eb0e:	e004      	b.n	800eb1a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800eb10:	6839      	ldr	r1, [r7, #0]
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f000 fc75 	bl	800f402 <USBD_CtlError>
      break;
 800eb18:	bf00      	nop
  }

  return USBD_OK;
 800eb1a:	2300      	movs	r3, #0
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3710      	adds	r7, #16
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}

0800eb24 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b084      	sub	sp, #16
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
 800eb2c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800eb2e:	2300      	movs	r3, #0
 800eb30:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	889b      	ldrh	r3, [r3, #4]
 800eb36:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eb38:	683b      	ldr	r3, [r7, #0]
 800eb3a:	781b      	ldrb	r3, [r3, #0]
 800eb3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eb40:	2b20      	cmp	r3, #32
 800eb42:	d004      	beq.n	800eb4e <USBD_StdEPReq+0x2a>
 800eb44:	2b40      	cmp	r3, #64	; 0x40
 800eb46:	d002      	beq.n	800eb4e <USBD_StdEPReq+0x2a>
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d008      	beq.n	800eb5e <USBD_StdEPReq+0x3a>
 800eb4c:	e13d      	b.n	800edca <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb54:	689b      	ldr	r3, [r3, #8]
 800eb56:	6839      	ldr	r1, [r7, #0]
 800eb58:	6878      	ldr	r0, [r7, #4]
 800eb5a:	4798      	blx	r3
      break;
 800eb5c:	e13a      	b.n	800edd4 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	781b      	ldrb	r3, [r3, #0]
 800eb62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eb66:	2b20      	cmp	r3, #32
 800eb68:	d10a      	bne.n	800eb80 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb70:	689b      	ldr	r3, [r3, #8]
 800eb72:	6839      	ldr	r1, [r7, #0]
 800eb74:	6878      	ldr	r0, [r7, #4]
 800eb76:	4798      	blx	r3
 800eb78:	4603      	mov	r3, r0
 800eb7a:	73fb      	strb	r3, [r7, #15]

        return ret;
 800eb7c:	7bfb      	ldrb	r3, [r7, #15]
 800eb7e:	e12a      	b.n	800edd6 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	785b      	ldrb	r3, [r3, #1]
 800eb84:	2b01      	cmp	r3, #1
 800eb86:	d03e      	beq.n	800ec06 <USBD_StdEPReq+0xe2>
 800eb88:	2b03      	cmp	r3, #3
 800eb8a:	d002      	beq.n	800eb92 <USBD_StdEPReq+0x6e>
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d070      	beq.n	800ec72 <USBD_StdEPReq+0x14e>
 800eb90:	e115      	b.n	800edbe <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb98:	2b02      	cmp	r3, #2
 800eb9a:	d002      	beq.n	800eba2 <USBD_StdEPReq+0x7e>
 800eb9c:	2b03      	cmp	r3, #3
 800eb9e:	d015      	beq.n	800ebcc <USBD_StdEPReq+0xa8>
 800eba0:	e02b      	b.n	800ebfa <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eba2:	7bbb      	ldrb	r3, [r7, #14]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d00c      	beq.n	800ebc2 <USBD_StdEPReq+0x9e>
 800eba8:	7bbb      	ldrb	r3, [r7, #14]
 800ebaa:	2b80      	cmp	r3, #128	; 0x80
 800ebac:	d009      	beq.n	800ebc2 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ebae:	7bbb      	ldrb	r3, [r7, #14]
 800ebb0:	4619      	mov	r1, r3
 800ebb2:	6878      	ldr	r0, [r7, #4]
 800ebb4:	f005 febe 	bl	8014934 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ebb8:	2180      	movs	r1, #128	; 0x80
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	f005 feba 	bl	8014934 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ebc0:	e020      	b.n	800ec04 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800ebc2:	6839      	ldr	r1, [r7, #0]
 800ebc4:	6878      	ldr	r0, [r7, #4]
 800ebc6:	f000 fc1c 	bl	800f402 <USBD_CtlError>
              break;
 800ebca:	e01b      	b.n	800ec04 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	885b      	ldrh	r3, [r3, #2]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d10e      	bne.n	800ebf2 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800ebd4:	7bbb      	ldrb	r3, [r7, #14]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d00b      	beq.n	800ebf2 <USBD_StdEPReq+0xce>
 800ebda:	7bbb      	ldrb	r3, [r7, #14]
 800ebdc:	2b80      	cmp	r3, #128	; 0x80
 800ebde:	d008      	beq.n	800ebf2 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	88db      	ldrh	r3, [r3, #6]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d104      	bne.n	800ebf2 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800ebe8:	7bbb      	ldrb	r3, [r7, #14]
 800ebea:	4619      	mov	r1, r3
 800ebec:	6878      	ldr	r0, [r7, #4]
 800ebee:	f005 fea1 	bl	8014934 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800ebf2:	6878      	ldr	r0, [r7, #4]
 800ebf4:	f000 fcb0 	bl	800f558 <USBD_CtlSendStatus>

              break;
 800ebf8:	e004      	b.n	800ec04 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800ebfa:	6839      	ldr	r1, [r7, #0]
 800ebfc:	6878      	ldr	r0, [r7, #4]
 800ebfe:	f000 fc00 	bl	800f402 <USBD_CtlError>
              break;
 800ec02:	bf00      	nop
          }
          break;
 800ec04:	e0e0      	b.n	800edc8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec0c:	2b02      	cmp	r3, #2
 800ec0e:	d002      	beq.n	800ec16 <USBD_StdEPReq+0xf2>
 800ec10:	2b03      	cmp	r3, #3
 800ec12:	d015      	beq.n	800ec40 <USBD_StdEPReq+0x11c>
 800ec14:	e026      	b.n	800ec64 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ec16:	7bbb      	ldrb	r3, [r7, #14]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d00c      	beq.n	800ec36 <USBD_StdEPReq+0x112>
 800ec1c:	7bbb      	ldrb	r3, [r7, #14]
 800ec1e:	2b80      	cmp	r3, #128	; 0x80
 800ec20:	d009      	beq.n	800ec36 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ec22:	7bbb      	ldrb	r3, [r7, #14]
 800ec24:	4619      	mov	r1, r3
 800ec26:	6878      	ldr	r0, [r7, #4]
 800ec28:	f005 fe84 	bl	8014934 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ec2c:	2180      	movs	r1, #128	; 0x80
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	f005 fe80 	bl	8014934 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ec34:	e01c      	b.n	800ec70 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800ec36:	6839      	ldr	r1, [r7, #0]
 800ec38:	6878      	ldr	r0, [r7, #4]
 800ec3a:	f000 fbe2 	bl	800f402 <USBD_CtlError>
              break;
 800ec3e:	e017      	b.n	800ec70 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	885b      	ldrh	r3, [r3, #2]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d112      	bne.n	800ec6e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ec48:	7bbb      	ldrb	r3, [r7, #14]
 800ec4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d004      	beq.n	800ec5c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800ec52:	7bbb      	ldrb	r3, [r7, #14]
 800ec54:	4619      	mov	r1, r3
 800ec56:	6878      	ldr	r0, [r7, #4]
 800ec58:	f005 fe8b 	bl	8014972 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	f000 fc7b 	bl	800f558 <USBD_CtlSendStatus>
              }
              break;
 800ec62:	e004      	b.n	800ec6e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800ec64:	6839      	ldr	r1, [r7, #0]
 800ec66:	6878      	ldr	r0, [r7, #4]
 800ec68:	f000 fbcb 	bl	800f402 <USBD_CtlError>
              break;
 800ec6c:	e000      	b.n	800ec70 <USBD_StdEPReq+0x14c>
              break;
 800ec6e:	bf00      	nop
          }
          break;
 800ec70:	e0aa      	b.n	800edc8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec78:	2b02      	cmp	r3, #2
 800ec7a:	d002      	beq.n	800ec82 <USBD_StdEPReq+0x15e>
 800ec7c:	2b03      	cmp	r3, #3
 800ec7e:	d032      	beq.n	800ece6 <USBD_StdEPReq+0x1c2>
 800ec80:	e097      	b.n	800edb2 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ec82:	7bbb      	ldrb	r3, [r7, #14]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d007      	beq.n	800ec98 <USBD_StdEPReq+0x174>
 800ec88:	7bbb      	ldrb	r3, [r7, #14]
 800ec8a:	2b80      	cmp	r3, #128	; 0x80
 800ec8c:	d004      	beq.n	800ec98 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800ec8e:	6839      	ldr	r1, [r7, #0]
 800ec90:	6878      	ldr	r0, [r7, #4]
 800ec92:	f000 fbb6 	bl	800f402 <USBD_CtlError>
                break;
 800ec96:	e091      	b.n	800edbc <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ec98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	da0b      	bge.n	800ecb8 <USBD_StdEPReq+0x194>
 800eca0:	7bbb      	ldrb	r3, [r7, #14]
 800eca2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eca6:	4613      	mov	r3, r2
 800eca8:	009b      	lsls	r3, r3, #2
 800ecaa:	4413      	add	r3, r2
 800ecac:	009b      	lsls	r3, r3, #2
 800ecae:	3310      	adds	r3, #16
 800ecb0:	687a      	ldr	r2, [r7, #4]
 800ecb2:	4413      	add	r3, r2
 800ecb4:	3304      	adds	r3, #4
 800ecb6:	e00b      	b.n	800ecd0 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ecb8:	7bbb      	ldrb	r3, [r7, #14]
 800ecba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ecbe:	4613      	mov	r3, r2
 800ecc0:	009b      	lsls	r3, r3, #2
 800ecc2:	4413      	add	r3, r2
 800ecc4:	009b      	lsls	r3, r3, #2
 800ecc6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ecca:	687a      	ldr	r2, [r7, #4]
 800eccc:	4413      	add	r3, r2
 800ecce:	3304      	adds	r3, #4
 800ecd0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ecd2:	68bb      	ldr	r3, [r7, #8]
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ecd8:	68bb      	ldr	r3, [r7, #8]
 800ecda:	2202      	movs	r2, #2
 800ecdc:	4619      	mov	r1, r3
 800ecde:	6878      	ldr	r0, [r7, #4]
 800ece0:	f000 fbfa 	bl	800f4d8 <USBD_CtlSendData>
              break;
 800ece4:	e06a      	b.n	800edbc <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ece6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	da11      	bge.n	800ed12 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ecee:	7bbb      	ldrb	r3, [r7, #14]
 800ecf0:	f003 020f 	and.w	r2, r3, #15
 800ecf4:	6879      	ldr	r1, [r7, #4]
 800ecf6:	4613      	mov	r3, r2
 800ecf8:	009b      	lsls	r3, r3, #2
 800ecfa:	4413      	add	r3, r2
 800ecfc:	009b      	lsls	r3, r3, #2
 800ecfe:	440b      	add	r3, r1
 800ed00:	3318      	adds	r3, #24
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d117      	bne.n	800ed38 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800ed08:	6839      	ldr	r1, [r7, #0]
 800ed0a:	6878      	ldr	r0, [r7, #4]
 800ed0c:	f000 fb79 	bl	800f402 <USBD_CtlError>
                  break;
 800ed10:	e054      	b.n	800edbc <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ed12:	7bbb      	ldrb	r3, [r7, #14]
 800ed14:	f003 020f 	and.w	r2, r3, #15
 800ed18:	6879      	ldr	r1, [r7, #4]
 800ed1a:	4613      	mov	r3, r2
 800ed1c:	009b      	lsls	r3, r3, #2
 800ed1e:	4413      	add	r3, r2
 800ed20:	009b      	lsls	r3, r3, #2
 800ed22:	440b      	add	r3, r1
 800ed24:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d104      	bne.n	800ed38 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800ed2e:	6839      	ldr	r1, [r7, #0]
 800ed30:	6878      	ldr	r0, [r7, #4]
 800ed32:	f000 fb66 	bl	800f402 <USBD_CtlError>
                  break;
 800ed36:	e041      	b.n	800edbc <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ed38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	da0b      	bge.n	800ed58 <USBD_StdEPReq+0x234>
 800ed40:	7bbb      	ldrb	r3, [r7, #14]
 800ed42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ed46:	4613      	mov	r3, r2
 800ed48:	009b      	lsls	r3, r3, #2
 800ed4a:	4413      	add	r3, r2
 800ed4c:	009b      	lsls	r3, r3, #2
 800ed4e:	3310      	adds	r3, #16
 800ed50:	687a      	ldr	r2, [r7, #4]
 800ed52:	4413      	add	r3, r2
 800ed54:	3304      	adds	r3, #4
 800ed56:	e00b      	b.n	800ed70 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ed58:	7bbb      	ldrb	r3, [r7, #14]
 800ed5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ed5e:	4613      	mov	r3, r2
 800ed60:	009b      	lsls	r3, r3, #2
 800ed62:	4413      	add	r3, r2
 800ed64:	009b      	lsls	r3, r3, #2
 800ed66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ed6a:	687a      	ldr	r2, [r7, #4]
 800ed6c:	4413      	add	r3, r2
 800ed6e:	3304      	adds	r3, #4
 800ed70:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ed72:	7bbb      	ldrb	r3, [r7, #14]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d002      	beq.n	800ed7e <USBD_StdEPReq+0x25a>
 800ed78:	7bbb      	ldrb	r3, [r7, #14]
 800ed7a:	2b80      	cmp	r3, #128	; 0x80
 800ed7c:	d103      	bne.n	800ed86 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	2200      	movs	r2, #0
 800ed82:	601a      	str	r2, [r3, #0]
 800ed84:	e00e      	b.n	800eda4 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800ed86:	7bbb      	ldrb	r3, [r7, #14]
 800ed88:	4619      	mov	r1, r3
 800ed8a:	6878      	ldr	r0, [r7, #4]
 800ed8c:	f005 fe10 	bl	80149b0 <USBD_LL_IsStallEP>
 800ed90:	4603      	mov	r3, r0
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d003      	beq.n	800ed9e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800ed96:	68bb      	ldr	r3, [r7, #8]
 800ed98:	2201      	movs	r2, #1
 800ed9a:	601a      	str	r2, [r3, #0]
 800ed9c:	e002      	b.n	800eda4 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800ed9e:	68bb      	ldr	r3, [r7, #8]
 800eda0:	2200      	movs	r2, #0
 800eda2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800eda4:	68bb      	ldr	r3, [r7, #8]
 800eda6:	2202      	movs	r2, #2
 800eda8:	4619      	mov	r1, r3
 800edaa:	6878      	ldr	r0, [r7, #4]
 800edac:	f000 fb94 	bl	800f4d8 <USBD_CtlSendData>
              break;
 800edb0:	e004      	b.n	800edbc <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800edb2:	6839      	ldr	r1, [r7, #0]
 800edb4:	6878      	ldr	r0, [r7, #4]
 800edb6:	f000 fb24 	bl	800f402 <USBD_CtlError>
              break;
 800edba:	bf00      	nop
          }
          break;
 800edbc:	e004      	b.n	800edc8 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800edbe:	6839      	ldr	r1, [r7, #0]
 800edc0:	6878      	ldr	r0, [r7, #4]
 800edc2:	f000 fb1e 	bl	800f402 <USBD_CtlError>
          break;
 800edc6:	bf00      	nop
      }
      break;
 800edc8:	e004      	b.n	800edd4 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800edca:	6839      	ldr	r1, [r7, #0]
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f000 fb18 	bl	800f402 <USBD_CtlError>
      break;
 800edd2:	bf00      	nop
  }

  return ret;
 800edd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800edd6:	4618      	mov	r0, r3
 800edd8:	3710      	adds	r7, #16
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}
	...

0800ede0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b084      	sub	sp, #16
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
 800ede8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800edea:	2300      	movs	r3, #0
 800edec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800edee:	2300      	movs	r3, #0
 800edf0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800edf2:	2300      	movs	r3, #0
 800edf4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	885b      	ldrh	r3, [r3, #2]
 800edfa:	0a1b      	lsrs	r3, r3, #8
 800edfc:	b29b      	uxth	r3, r3
 800edfe:	3b01      	subs	r3, #1
 800ee00:	2b06      	cmp	r3, #6
 800ee02:	f200 8128 	bhi.w	800f056 <USBD_GetDescriptor+0x276>
 800ee06:	a201      	add	r2, pc, #4	; (adr r2, 800ee0c <USBD_GetDescriptor+0x2c>)
 800ee08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee0c:	0800ee29 	.word	0x0800ee29
 800ee10:	0800ee41 	.word	0x0800ee41
 800ee14:	0800ee81 	.word	0x0800ee81
 800ee18:	0800f057 	.word	0x0800f057
 800ee1c:	0800f057 	.word	0x0800f057
 800ee20:	0800eff7 	.word	0x0800eff7
 800ee24:	0800f023 	.word	0x0800f023
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	687a      	ldr	r2, [r7, #4]
 800ee32:	7c12      	ldrb	r2, [r2, #16]
 800ee34:	f107 0108 	add.w	r1, r7, #8
 800ee38:	4610      	mov	r0, r2
 800ee3a:	4798      	blx	r3
 800ee3c:	60f8      	str	r0, [r7, #12]
      break;
 800ee3e:	e112      	b.n	800f066 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	7c1b      	ldrb	r3, [r3, #16]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d10d      	bne.n	800ee64 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee50:	f107 0208 	add.w	r2, r7, #8
 800ee54:	4610      	mov	r0, r2
 800ee56:	4798      	blx	r3
 800ee58:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	3301      	adds	r3, #1
 800ee5e:	2202      	movs	r2, #2
 800ee60:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ee62:	e100      	b.n	800f066 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee6c:	f107 0208 	add.w	r2, r7, #8
 800ee70:	4610      	mov	r0, r2
 800ee72:	4798      	blx	r3
 800ee74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	3301      	adds	r3, #1
 800ee7a:	2202      	movs	r2, #2
 800ee7c:	701a      	strb	r2, [r3, #0]
      break;
 800ee7e:	e0f2      	b.n	800f066 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	885b      	ldrh	r3, [r3, #2]
 800ee84:	b2db      	uxtb	r3, r3
 800ee86:	2b05      	cmp	r3, #5
 800ee88:	f200 80ac 	bhi.w	800efe4 <USBD_GetDescriptor+0x204>
 800ee8c:	a201      	add	r2, pc, #4	; (adr r2, 800ee94 <USBD_GetDescriptor+0xb4>)
 800ee8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee92:	bf00      	nop
 800ee94:	0800eead 	.word	0x0800eead
 800ee98:	0800eee1 	.word	0x0800eee1
 800ee9c:	0800ef15 	.word	0x0800ef15
 800eea0:	0800ef49 	.word	0x0800ef49
 800eea4:	0800ef7d 	.word	0x0800ef7d
 800eea8:	0800efb1 	.word	0x0800efb1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800eeb2:	685b      	ldr	r3, [r3, #4]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d00b      	beq.n	800eed0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800eebe:	685b      	ldr	r3, [r3, #4]
 800eec0:	687a      	ldr	r2, [r7, #4]
 800eec2:	7c12      	ldrb	r2, [r2, #16]
 800eec4:	f107 0108 	add.w	r1, r7, #8
 800eec8:	4610      	mov	r0, r2
 800eeca:	4798      	blx	r3
 800eecc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eece:	e091      	b.n	800eff4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800eed0:	6839      	ldr	r1, [r7, #0]
 800eed2:	6878      	ldr	r0, [r7, #4]
 800eed4:	f000 fa95 	bl	800f402 <USBD_CtlError>
            err++;
 800eed8:	7afb      	ldrb	r3, [r7, #11]
 800eeda:	3301      	adds	r3, #1
 800eedc:	72fb      	strb	r3, [r7, #11]
          break;
 800eede:	e089      	b.n	800eff4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800eee6:	689b      	ldr	r3, [r3, #8]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d00b      	beq.n	800ef04 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800eef2:	689b      	ldr	r3, [r3, #8]
 800eef4:	687a      	ldr	r2, [r7, #4]
 800eef6:	7c12      	ldrb	r2, [r2, #16]
 800eef8:	f107 0108 	add.w	r1, r7, #8
 800eefc:	4610      	mov	r0, r2
 800eefe:	4798      	blx	r3
 800ef00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ef02:	e077      	b.n	800eff4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ef04:	6839      	ldr	r1, [r7, #0]
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	f000 fa7b 	bl	800f402 <USBD_CtlError>
            err++;
 800ef0c:	7afb      	ldrb	r3, [r7, #11]
 800ef0e:	3301      	adds	r3, #1
 800ef10:	72fb      	strb	r3, [r7, #11]
          break;
 800ef12:	e06f      	b.n	800eff4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ef1a:	68db      	ldr	r3, [r3, #12]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d00b      	beq.n	800ef38 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ef26:	68db      	ldr	r3, [r3, #12]
 800ef28:	687a      	ldr	r2, [r7, #4]
 800ef2a:	7c12      	ldrb	r2, [r2, #16]
 800ef2c:	f107 0108 	add.w	r1, r7, #8
 800ef30:	4610      	mov	r0, r2
 800ef32:	4798      	blx	r3
 800ef34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ef36:	e05d      	b.n	800eff4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ef38:	6839      	ldr	r1, [r7, #0]
 800ef3a:	6878      	ldr	r0, [r7, #4]
 800ef3c:	f000 fa61 	bl	800f402 <USBD_CtlError>
            err++;
 800ef40:	7afb      	ldrb	r3, [r7, #11]
 800ef42:	3301      	adds	r3, #1
 800ef44:	72fb      	strb	r3, [r7, #11]
          break;
 800ef46:	e055      	b.n	800eff4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ef4e:	691b      	ldr	r3, [r3, #16]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d00b      	beq.n	800ef6c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ef5a:	691b      	ldr	r3, [r3, #16]
 800ef5c:	687a      	ldr	r2, [r7, #4]
 800ef5e:	7c12      	ldrb	r2, [r2, #16]
 800ef60:	f107 0108 	add.w	r1, r7, #8
 800ef64:	4610      	mov	r0, r2
 800ef66:	4798      	blx	r3
 800ef68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ef6a:	e043      	b.n	800eff4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ef6c:	6839      	ldr	r1, [r7, #0]
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	f000 fa47 	bl	800f402 <USBD_CtlError>
            err++;
 800ef74:	7afb      	ldrb	r3, [r7, #11]
 800ef76:	3301      	adds	r3, #1
 800ef78:	72fb      	strb	r3, [r7, #11]
          break;
 800ef7a:	e03b      	b.n	800eff4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ef82:	695b      	ldr	r3, [r3, #20]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d00b      	beq.n	800efa0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ef8e:	695b      	ldr	r3, [r3, #20]
 800ef90:	687a      	ldr	r2, [r7, #4]
 800ef92:	7c12      	ldrb	r2, [r2, #16]
 800ef94:	f107 0108 	add.w	r1, r7, #8
 800ef98:	4610      	mov	r0, r2
 800ef9a:	4798      	blx	r3
 800ef9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ef9e:	e029      	b.n	800eff4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800efa0:	6839      	ldr	r1, [r7, #0]
 800efa2:	6878      	ldr	r0, [r7, #4]
 800efa4:	f000 fa2d 	bl	800f402 <USBD_CtlError>
            err++;
 800efa8:	7afb      	ldrb	r3, [r7, #11]
 800efaa:	3301      	adds	r3, #1
 800efac:	72fb      	strb	r3, [r7, #11]
          break;
 800efae:	e021      	b.n	800eff4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800efb6:	699b      	ldr	r3, [r3, #24]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d00b      	beq.n	800efd4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800efc2:	699b      	ldr	r3, [r3, #24]
 800efc4:	687a      	ldr	r2, [r7, #4]
 800efc6:	7c12      	ldrb	r2, [r2, #16]
 800efc8:	f107 0108 	add.w	r1, r7, #8
 800efcc:	4610      	mov	r0, r2
 800efce:	4798      	blx	r3
 800efd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800efd2:	e00f      	b.n	800eff4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800efd4:	6839      	ldr	r1, [r7, #0]
 800efd6:	6878      	ldr	r0, [r7, #4]
 800efd8:	f000 fa13 	bl	800f402 <USBD_CtlError>
            err++;
 800efdc:	7afb      	ldrb	r3, [r7, #11]
 800efde:	3301      	adds	r3, #1
 800efe0:	72fb      	strb	r3, [r7, #11]
          break;
 800efe2:	e007      	b.n	800eff4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800efe4:	6839      	ldr	r1, [r7, #0]
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f000 fa0b 	bl	800f402 <USBD_CtlError>
          err++;
 800efec:	7afb      	ldrb	r3, [r7, #11]
 800efee:	3301      	adds	r3, #1
 800eff0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800eff2:	e038      	b.n	800f066 <USBD_GetDescriptor+0x286>
 800eff4:	e037      	b.n	800f066 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	7c1b      	ldrb	r3, [r3, #16]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d109      	bne.n	800f012 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f006:	f107 0208 	add.w	r2, r7, #8
 800f00a:	4610      	mov	r0, r2
 800f00c:	4798      	blx	r3
 800f00e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f010:	e029      	b.n	800f066 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f012:	6839      	ldr	r1, [r7, #0]
 800f014:	6878      	ldr	r0, [r7, #4]
 800f016:	f000 f9f4 	bl	800f402 <USBD_CtlError>
        err++;
 800f01a:	7afb      	ldrb	r3, [r7, #11]
 800f01c:	3301      	adds	r3, #1
 800f01e:	72fb      	strb	r3, [r7, #11]
      break;
 800f020:	e021      	b.n	800f066 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	7c1b      	ldrb	r3, [r3, #16]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d10d      	bne.n	800f046 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f032:	f107 0208 	add.w	r2, r7, #8
 800f036:	4610      	mov	r0, r2
 800f038:	4798      	blx	r3
 800f03a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	3301      	adds	r3, #1
 800f040:	2207      	movs	r2, #7
 800f042:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f044:	e00f      	b.n	800f066 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f046:	6839      	ldr	r1, [r7, #0]
 800f048:	6878      	ldr	r0, [r7, #4]
 800f04a:	f000 f9da 	bl	800f402 <USBD_CtlError>
        err++;
 800f04e:	7afb      	ldrb	r3, [r7, #11]
 800f050:	3301      	adds	r3, #1
 800f052:	72fb      	strb	r3, [r7, #11]
      break;
 800f054:	e007      	b.n	800f066 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f056:	6839      	ldr	r1, [r7, #0]
 800f058:	6878      	ldr	r0, [r7, #4]
 800f05a:	f000 f9d2 	bl	800f402 <USBD_CtlError>
      err++;
 800f05e:	7afb      	ldrb	r3, [r7, #11]
 800f060:	3301      	adds	r3, #1
 800f062:	72fb      	strb	r3, [r7, #11]
      break;
 800f064:	bf00      	nop
  }

  if (err != 0U)
 800f066:	7afb      	ldrb	r3, [r7, #11]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d11c      	bne.n	800f0a6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800f06c:	893b      	ldrh	r3, [r7, #8]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d011      	beq.n	800f096 <USBD_GetDescriptor+0x2b6>
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	88db      	ldrh	r3, [r3, #6]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d00d      	beq.n	800f096 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800f07a:	683b      	ldr	r3, [r7, #0]
 800f07c:	88da      	ldrh	r2, [r3, #6]
 800f07e:	893b      	ldrh	r3, [r7, #8]
 800f080:	4293      	cmp	r3, r2
 800f082:	bf28      	it	cs
 800f084:	4613      	movcs	r3, r2
 800f086:	b29b      	uxth	r3, r3
 800f088:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f08a:	893b      	ldrh	r3, [r7, #8]
 800f08c:	461a      	mov	r2, r3
 800f08e:	68f9      	ldr	r1, [r7, #12]
 800f090:	6878      	ldr	r0, [r7, #4]
 800f092:	f000 fa21 	bl	800f4d8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800f096:	683b      	ldr	r3, [r7, #0]
 800f098:	88db      	ldrh	r3, [r3, #6]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d104      	bne.n	800f0a8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800f09e:	6878      	ldr	r0, [r7, #4]
 800f0a0:	f000 fa5a 	bl	800f558 <USBD_CtlSendStatus>
 800f0a4:	e000      	b.n	800f0a8 <USBD_GetDescriptor+0x2c8>
    return;
 800f0a6:	bf00      	nop
    }
  }
}
 800f0a8:	3710      	adds	r7, #16
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	bd80      	pop	{r7, pc}
 800f0ae:	bf00      	nop

0800f0b0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b084      	sub	sp, #16
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
 800f0b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	889b      	ldrh	r3, [r3, #4]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d130      	bne.n	800f124 <USBD_SetAddress+0x74>
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	88db      	ldrh	r3, [r3, #6]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d12c      	bne.n	800f124 <USBD_SetAddress+0x74>
 800f0ca:	683b      	ldr	r3, [r7, #0]
 800f0cc:	885b      	ldrh	r3, [r3, #2]
 800f0ce:	2b7f      	cmp	r3, #127	; 0x7f
 800f0d0:	d828      	bhi.n	800f124 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f0d2:	683b      	ldr	r3, [r7, #0]
 800f0d4:	885b      	ldrh	r3, [r3, #2]
 800f0d6:	b2db      	uxtb	r3, r3
 800f0d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f0dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f0e4:	2b03      	cmp	r3, #3
 800f0e6:	d104      	bne.n	800f0f2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800f0e8:	6839      	ldr	r1, [r7, #0]
 800f0ea:	6878      	ldr	r0, [r7, #4]
 800f0ec:	f000 f989 	bl	800f402 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0f0:	e01c      	b.n	800f12c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	7bfa      	ldrb	r2, [r7, #15]
 800f0f6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f0fa:	7bfb      	ldrb	r3, [r7, #15]
 800f0fc:	4619      	mov	r1, r3
 800f0fe:	6878      	ldr	r0, [r7, #4]
 800f100:	f005 fc82 	bl	8014a08 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800f104:	6878      	ldr	r0, [r7, #4]
 800f106:	f000 fa27 	bl	800f558 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f10a:	7bfb      	ldrb	r3, [r7, #15]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d004      	beq.n	800f11a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2202      	movs	r2, #2
 800f114:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f118:	e008      	b.n	800f12c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2201      	movs	r2, #1
 800f11e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f122:	e003      	b.n	800f12c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f124:	6839      	ldr	r1, [r7, #0]
 800f126:	6878      	ldr	r0, [r7, #4]
 800f128:	f000 f96b 	bl	800f402 <USBD_CtlError>
  }
}
 800f12c:	bf00      	nop
 800f12e:	3710      	adds	r7, #16
 800f130:	46bd      	mov	sp, r7
 800f132:	bd80      	pop	{r7, pc}

0800f134 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b082      	sub	sp, #8
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
 800f13c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f13e:	683b      	ldr	r3, [r7, #0]
 800f140:	885b      	ldrh	r3, [r3, #2]
 800f142:	b2da      	uxtb	r2, r3
 800f144:	4b41      	ldr	r3, [pc, #260]	; (800f24c <USBD_SetConfig+0x118>)
 800f146:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f148:	4b40      	ldr	r3, [pc, #256]	; (800f24c <USBD_SetConfig+0x118>)
 800f14a:	781b      	ldrb	r3, [r3, #0]
 800f14c:	2b01      	cmp	r3, #1
 800f14e:	d904      	bls.n	800f15a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800f150:	6839      	ldr	r1, [r7, #0]
 800f152:	6878      	ldr	r0, [r7, #4]
 800f154:	f000 f955 	bl	800f402 <USBD_CtlError>
 800f158:	e075      	b.n	800f246 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f160:	2b02      	cmp	r3, #2
 800f162:	d002      	beq.n	800f16a <USBD_SetConfig+0x36>
 800f164:	2b03      	cmp	r3, #3
 800f166:	d023      	beq.n	800f1b0 <USBD_SetConfig+0x7c>
 800f168:	e062      	b.n	800f230 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800f16a:	4b38      	ldr	r3, [pc, #224]	; (800f24c <USBD_SetConfig+0x118>)
 800f16c:	781b      	ldrb	r3, [r3, #0]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d01a      	beq.n	800f1a8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800f172:	4b36      	ldr	r3, [pc, #216]	; (800f24c <USBD_SetConfig+0x118>)
 800f174:	781b      	ldrb	r3, [r3, #0]
 800f176:	461a      	mov	r2, r3
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	2203      	movs	r2, #3
 800f180:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800f184:	4b31      	ldr	r3, [pc, #196]	; (800f24c <USBD_SetConfig+0x118>)
 800f186:	781b      	ldrb	r3, [r3, #0]
 800f188:	4619      	mov	r1, r3
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f7ff f9b5 	bl	800e4fa <USBD_SetClassConfig>
 800f190:	4603      	mov	r3, r0
 800f192:	2b02      	cmp	r3, #2
 800f194:	d104      	bne.n	800f1a0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800f196:	6839      	ldr	r1, [r7, #0]
 800f198:	6878      	ldr	r0, [r7, #4]
 800f19a:	f000 f932 	bl	800f402 <USBD_CtlError>
            return;
 800f19e:	e052      	b.n	800f246 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800f1a0:	6878      	ldr	r0, [r7, #4]
 800f1a2:	f000 f9d9 	bl	800f558 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800f1a6:	e04e      	b.n	800f246 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800f1a8:	6878      	ldr	r0, [r7, #4]
 800f1aa:	f000 f9d5 	bl	800f558 <USBD_CtlSendStatus>
        break;
 800f1ae:	e04a      	b.n	800f246 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800f1b0:	4b26      	ldr	r3, [pc, #152]	; (800f24c <USBD_SetConfig+0x118>)
 800f1b2:	781b      	ldrb	r3, [r3, #0]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d112      	bne.n	800f1de <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2202      	movs	r2, #2
 800f1bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800f1c0:	4b22      	ldr	r3, [pc, #136]	; (800f24c <USBD_SetConfig+0x118>)
 800f1c2:	781b      	ldrb	r3, [r3, #0]
 800f1c4:	461a      	mov	r2, r3
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800f1ca:	4b20      	ldr	r3, [pc, #128]	; (800f24c <USBD_SetConfig+0x118>)
 800f1cc:	781b      	ldrb	r3, [r3, #0]
 800f1ce:	4619      	mov	r1, r3
 800f1d0:	6878      	ldr	r0, [r7, #4]
 800f1d2:	f7ff f9b1 	bl	800e538 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800f1d6:	6878      	ldr	r0, [r7, #4]
 800f1d8:	f000 f9be 	bl	800f558 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800f1dc:	e033      	b.n	800f246 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800f1de:	4b1b      	ldr	r3, [pc, #108]	; (800f24c <USBD_SetConfig+0x118>)
 800f1e0:	781b      	ldrb	r3, [r3, #0]
 800f1e2:	461a      	mov	r2, r3
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	685b      	ldr	r3, [r3, #4]
 800f1e8:	429a      	cmp	r2, r3
 800f1ea:	d01d      	beq.n	800f228 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	685b      	ldr	r3, [r3, #4]
 800f1f0:	b2db      	uxtb	r3, r3
 800f1f2:	4619      	mov	r1, r3
 800f1f4:	6878      	ldr	r0, [r7, #4]
 800f1f6:	f7ff f99f 	bl	800e538 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800f1fa:	4b14      	ldr	r3, [pc, #80]	; (800f24c <USBD_SetConfig+0x118>)
 800f1fc:	781b      	ldrb	r3, [r3, #0]
 800f1fe:	461a      	mov	r2, r3
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800f204:	4b11      	ldr	r3, [pc, #68]	; (800f24c <USBD_SetConfig+0x118>)
 800f206:	781b      	ldrb	r3, [r3, #0]
 800f208:	4619      	mov	r1, r3
 800f20a:	6878      	ldr	r0, [r7, #4]
 800f20c:	f7ff f975 	bl	800e4fa <USBD_SetClassConfig>
 800f210:	4603      	mov	r3, r0
 800f212:	2b02      	cmp	r3, #2
 800f214:	d104      	bne.n	800f220 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800f216:	6839      	ldr	r1, [r7, #0]
 800f218:	6878      	ldr	r0, [r7, #4]
 800f21a:	f000 f8f2 	bl	800f402 <USBD_CtlError>
            return;
 800f21e:	e012      	b.n	800f246 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800f220:	6878      	ldr	r0, [r7, #4]
 800f222:	f000 f999 	bl	800f558 <USBD_CtlSendStatus>
        break;
 800f226:	e00e      	b.n	800f246 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800f228:	6878      	ldr	r0, [r7, #4]
 800f22a:	f000 f995 	bl	800f558 <USBD_CtlSendStatus>
        break;
 800f22e:	e00a      	b.n	800f246 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800f230:	6839      	ldr	r1, [r7, #0]
 800f232:	6878      	ldr	r0, [r7, #4]
 800f234:	f000 f8e5 	bl	800f402 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800f238:	4b04      	ldr	r3, [pc, #16]	; (800f24c <USBD_SetConfig+0x118>)
 800f23a:	781b      	ldrb	r3, [r3, #0]
 800f23c:	4619      	mov	r1, r3
 800f23e:	6878      	ldr	r0, [r7, #4]
 800f240:	f7ff f97a 	bl	800e538 <USBD_ClrClassConfig>
        break;
 800f244:	bf00      	nop
    }
  }
}
 800f246:	3708      	adds	r7, #8
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}
 800f24c:	2400027c 	.word	0x2400027c

0800f250 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b082      	sub	sp, #8
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
 800f258:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	88db      	ldrh	r3, [r3, #6]
 800f25e:	2b01      	cmp	r3, #1
 800f260:	d004      	beq.n	800f26c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f262:	6839      	ldr	r1, [r7, #0]
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f000 f8cc 	bl	800f402 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f26a:	e021      	b.n	800f2b0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f272:	2b01      	cmp	r3, #1
 800f274:	db17      	blt.n	800f2a6 <USBD_GetConfig+0x56>
 800f276:	2b02      	cmp	r3, #2
 800f278:	dd02      	ble.n	800f280 <USBD_GetConfig+0x30>
 800f27a:	2b03      	cmp	r3, #3
 800f27c:	d00b      	beq.n	800f296 <USBD_GetConfig+0x46>
 800f27e:	e012      	b.n	800f2a6 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	2200      	movs	r2, #0
 800f284:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	3308      	adds	r3, #8
 800f28a:	2201      	movs	r2, #1
 800f28c:	4619      	mov	r1, r3
 800f28e:	6878      	ldr	r0, [r7, #4]
 800f290:	f000 f922 	bl	800f4d8 <USBD_CtlSendData>
        break;
 800f294:	e00c      	b.n	800f2b0 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	3304      	adds	r3, #4
 800f29a:	2201      	movs	r2, #1
 800f29c:	4619      	mov	r1, r3
 800f29e:	6878      	ldr	r0, [r7, #4]
 800f2a0:	f000 f91a 	bl	800f4d8 <USBD_CtlSendData>
        break;
 800f2a4:	e004      	b.n	800f2b0 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800f2a6:	6839      	ldr	r1, [r7, #0]
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	f000 f8aa 	bl	800f402 <USBD_CtlError>
        break;
 800f2ae:	bf00      	nop
}
 800f2b0:	bf00      	nop
 800f2b2:	3708      	adds	r7, #8
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	bd80      	pop	{r7, pc}

0800f2b8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b082      	sub	sp, #8
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
 800f2c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2c8:	3b01      	subs	r3, #1
 800f2ca:	2b02      	cmp	r3, #2
 800f2cc:	d81e      	bhi.n	800f30c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f2ce:	683b      	ldr	r3, [r7, #0]
 800f2d0:	88db      	ldrh	r3, [r3, #6]
 800f2d2:	2b02      	cmp	r3, #2
 800f2d4:	d004      	beq.n	800f2e0 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800f2d6:	6839      	ldr	r1, [r7, #0]
 800f2d8:	6878      	ldr	r0, [r7, #4]
 800f2da:	f000 f892 	bl	800f402 <USBD_CtlError>
        break;
 800f2de:	e01a      	b.n	800f316 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	2201      	movs	r2, #1
 800f2e4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d005      	beq.n	800f2fc <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	68db      	ldr	r3, [r3, #12]
 800f2f4:	f043 0202 	orr.w	r2, r3, #2
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	330c      	adds	r3, #12
 800f300:	2202      	movs	r2, #2
 800f302:	4619      	mov	r1, r3
 800f304:	6878      	ldr	r0, [r7, #4]
 800f306:	f000 f8e7 	bl	800f4d8 <USBD_CtlSendData>
      break;
 800f30a:	e004      	b.n	800f316 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800f30c:	6839      	ldr	r1, [r7, #0]
 800f30e:	6878      	ldr	r0, [r7, #4]
 800f310:	f000 f877 	bl	800f402 <USBD_CtlError>
      break;
 800f314:	bf00      	nop
  }
}
 800f316:	bf00      	nop
 800f318:	3708      	adds	r7, #8
 800f31a:	46bd      	mov	sp, r7
 800f31c:	bd80      	pop	{r7, pc}

0800f31e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800f31e:	b580      	push	{r7, lr}
 800f320:	b082      	sub	sp, #8
 800f322:	af00      	add	r7, sp, #0
 800f324:	6078      	str	r0, [r7, #4]
 800f326:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	885b      	ldrh	r3, [r3, #2]
 800f32c:	2b01      	cmp	r3, #1
 800f32e:	d106      	bne.n	800f33e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2201      	movs	r2, #1
 800f334:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800f338:	6878      	ldr	r0, [r7, #4]
 800f33a:	f000 f90d 	bl	800f558 <USBD_CtlSendStatus>
  }
}
 800f33e:	bf00      	nop
 800f340:	3708      	adds	r7, #8
 800f342:	46bd      	mov	sp, r7
 800f344:	bd80      	pop	{r7, pc}

0800f346 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800f346:	b580      	push	{r7, lr}
 800f348:	b082      	sub	sp, #8
 800f34a:	af00      	add	r7, sp, #0
 800f34c:	6078      	str	r0, [r7, #4]
 800f34e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f356:	3b01      	subs	r3, #1
 800f358:	2b02      	cmp	r3, #2
 800f35a:	d80b      	bhi.n	800f374 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	885b      	ldrh	r3, [r3, #2]
 800f360:	2b01      	cmp	r3, #1
 800f362:	d10c      	bne.n	800f37e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	2200      	movs	r2, #0
 800f368:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f000 f8f3 	bl	800f558 <USBD_CtlSendStatus>
      }
      break;
 800f372:	e004      	b.n	800f37e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800f374:	6839      	ldr	r1, [r7, #0]
 800f376:	6878      	ldr	r0, [r7, #4]
 800f378:	f000 f843 	bl	800f402 <USBD_CtlError>
      break;
 800f37c:	e000      	b.n	800f380 <USBD_ClrFeature+0x3a>
      break;
 800f37e:	bf00      	nop
  }
}
 800f380:	bf00      	nop
 800f382:	3708      	adds	r7, #8
 800f384:	46bd      	mov	sp, r7
 800f386:	bd80      	pop	{r7, pc}

0800f388 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f388:	b480      	push	{r7}
 800f38a:	b083      	sub	sp, #12
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
 800f390:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	781a      	ldrb	r2, [r3, #0]
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	785a      	ldrb	r2, [r3, #1]
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	3302      	adds	r3, #2
 800f3a6:	781b      	ldrb	r3, [r3, #0]
 800f3a8:	b29a      	uxth	r2, r3
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	3303      	adds	r3, #3
 800f3ae:	781b      	ldrb	r3, [r3, #0]
 800f3b0:	b29b      	uxth	r3, r3
 800f3b2:	021b      	lsls	r3, r3, #8
 800f3b4:	b29b      	uxth	r3, r3
 800f3b6:	4413      	add	r3, r2
 800f3b8:	b29a      	uxth	r2, r3
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800f3be:	683b      	ldr	r3, [r7, #0]
 800f3c0:	3304      	adds	r3, #4
 800f3c2:	781b      	ldrb	r3, [r3, #0]
 800f3c4:	b29a      	uxth	r2, r3
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	3305      	adds	r3, #5
 800f3ca:	781b      	ldrb	r3, [r3, #0]
 800f3cc:	b29b      	uxth	r3, r3
 800f3ce:	021b      	lsls	r3, r3, #8
 800f3d0:	b29b      	uxth	r3, r3
 800f3d2:	4413      	add	r3, r2
 800f3d4:	b29a      	uxth	r2, r3
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800f3da:	683b      	ldr	r3, [r7, #0]
 800f3dc:	3306      	adds	r3, #6
 800f3de:	781b      	ldrb	r3, [r3, #0]
 800f3e0:	b29a      	uxth	r2, r3
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	3307      	adds	r3, #7
 800f3e6:	781b      	ldrb	r3, [r3, #0]
 800f3e8:	b29b      	uxth	r3, r3
 800f3ea:	021b      	lsls	r3, r3, #8
 800f3ec:	b29b      	uxth	r3, r3
 800f3ee:	4413      	add	r3, r2
 800f3f0:	b29a      	uxth	r2, r3
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	80da      	strh	r2, [r3, #6]

}
 800f3f6:	bf00      	nop
 800f3f8:	370c      	adds	r7, #12
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f400:	4770      	bx	lr

0800f402 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800f402:	b580      	push	{r7, lr}
 800f404:	b082      	sub	sp, #8
 800f406:	af00      	add	r7, sp, #0
 800f408:	6078      	str	r0, [r7, #4]
 800f40a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800f40c:	2180      	movs	r1, #128	; 0x80
 800f40e:	6878      	ldr	r0, [r7, #4]
 800f410:	f005 fa90 	bl	8014934 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800f414:	2100      	movs	r1, #0
 800f416:	6878      	ldr	r0, [r7, #4]
 800f418:	f005 fa8c 	bl	8014934 <USBD_LL_StallEP>
}
 800f41c:	bf00      	nop
 800f41e:	3708      	adds	r7, #8
 800f420:	46bd      	mov	sp, r7
 800f422:	bd80      	pop	{r7, pc}

0800f424 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f424:	b580      	push	{r7, lr}
 800f426:	b086      	sub	sp, #24
 800f428:	af00      	add	r7, sp, #0
 800f42a:	60f8      	str	r0, [r7, #12]
 800f42c:	60b9      	str	r1, [r7, #8]
 800f42e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f430:	2300      	movs	r3, #0
 800f432:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d032      	beq.n	800f4a0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800f43a:	68f8      	ldr	r0, [r7, #12]
 800f43c:	f000 f834 	bl	800f4a8 <USBD_GetLen>
 800f440:	4603      	mov	r3, r0
 800f442:	3301      	adds	r3, #1
 800f444:	b29b      	uxth	r3, r3
 800f446:	005b      	lsls	r3, r3, #1
 800f448:	b29a      	uxth	r2, r3
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800f44e:	7dfb      	ldrb	r3, [r7, #23]
 800f450:	1c5a      	adds	r2, r3, #1
 800f452:	75fa      	strb	r2, [r7, #23]
 800f454:	461a      	mov	r2, r3
 800f456:	68bb      	ldr	r3, [r7, #8]
 800f458:	4413      	add	r3, r2
 800f45a:	687a      	ldr	r2, [r7, #4]
 800f45c:	7812      	ldrb	r2, [r2, #0]
 800f45e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800f460:	7dfb      	ldrb	r3, [r7, #23]
 800f462:	1c5a      	adds	r2, r3, #1
 800f464:	75fa      	strb	r2, [r7, #23]
 800f466:	461a      	mov	r2, r3
 800f468:	68bb      	ldr	r3, [r7, #8]
 800f46a:	4413      	add	r3, r2
 800f46c:	2203      	movs	r2, #3
 800f46e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800f470:	e012      	b.n	800f498 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	1c5a      	adds	r2, r3, #1
 800f476:	60fa      	str	r2, [r7, #12]
 800f478:	7dfa      	ldrb	r2, [r7, #23]
 800f47a:	1c51      	adds	r1, r2, #1
 800f47c:	75f9      	strb	r1, [r7, #23]
 800f47e:	4611      	mov	r1, r2
 800f480:	68ba      	ldr	r2, [r7, #8]
 800f482:	440a      	add	r2, r1
 800f484:	781b      	ldrb	r3, [r3, #0]
 800f486:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800f488:	7dfb      	ldrb	r3, [r7, #23]
 800f48a:	1c5a      	adds	r2, r3, #1
 800f48c:	75fa      	strb	r2, [r7, #23]
 800f48e:	461a      	mov	r2, r3
 800f490:	68bb      	ldr	r3, [r7, #8]
 800f492:	4413      	add	r3, r2
 800f494:	2200      	movs	r2, #0
 800f496:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	781b      	ldrb	r3, [r3, #0]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d1e8      	bne.n	800f472 <USBD_GetString+0x4e>
    }
  }
}
 800f4a0:	bf00      	nop
 800f4a2:	3718      	adds	r7, #24
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	bd80      	pop	{r7, pc}

0800f4a8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f4a8:	b480      	push	{r7}
 800f4aa:	b085      	sub	sp, #20
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800f4b4:	e005      	b.n	800f4c2 <USBD_GetLen+0x1a>
  {
    len++;
 800f4b6:	7bfb      	ldrb	r3, [r7, #15]
 800f4b8:	3301      	adds	r3, #1
 800f4ba:	73fb      	strb	r3, [r7, #15]
    buf++;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	3301      	adds	r3, #1
 800f4c0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	781b      	ldrb	r3, [r3, #0]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d1f5      	bne.n	800f4b6 <USBD_GetLen+0xe>
  }

  return len;
 800f4ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	3714      	adds	r7, #20
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d6:	4770      	bx	lr

0800f4d8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b084      	sub	sp, #16
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	60f8      	str	r0, [r7, #12]
 800f4e0:	60b9      	str	r1, [r7, #8]
 800f4e2:	4613      	mov	r3, r2
 800f4e4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	2202      	movs	r2, #2
 800f4ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f4ee:	88fa      	ldrh	r2, [r7, #6]
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800f4f4:	88fa      	ldrh	r2, [r7, #6]
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f4fa:	88fb      	ldrh	r3, [r7, #6]
 800f4fc:	68ba      	ldr	r2, [r7, #8]
 800f4fe:	2100      	movs	r1, #0
 800f500:	68f8      	ldr	r0, [r7, #12]
 800f502:	f005 faa0 	bl	8014a46 <USBD_LL_Transmit>

  return USBD_OK;
 800f506:	2300      	movs	r3, #0
}
 800f508:	4618      	mov	r0, r3
 800f50a:	3710      	adds	r7, #16
 800f50c:	46bd      	mov	sp, r7
 800f50e:	bd80      	pop	{r7, pc}

0800f510 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b084      	sub	sp, #16
 800f514:	af00      	add	r7, sp, #0
 800f516:	60f8      	str	r0, [r7, #12]
 800f518:	60b9      	str	r1, [r7, #8]
 800f51a:	4613      	mov	r3, r2
 800f51c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f51e:	88fb      	ldrh	r3, [r7, #6]
 800f520:	68ba      	ldr	r2, [r7, #8]
 800f522:	2100      	movs	r1, #0
 800f524:	68f8      	ldr	r0, [r7, #12]
 800f526:	f005 fa8e 	bl	8014a46 <USBD_LL_Transmit>

  return USBD_OK;
 800f52a:	2300      	movs	r3, #0
}
 800f52c:	4618      	mov	r0, r3
 800f52e:	3710      	adds	r7, #16
 800f530:	46bd      	mov	sp, r7
 800f532:	bd80      	pop	{r7, pc}

0800f534 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b084      	sub	sp, #16
 800f538:	af00      	add	r7, sp, #0
 800f53a:	60f8      	str	r0, [r7, #12]
 800f53c:	60b9      	str	r1, [r7, #8]
 800f53e:	4613      	mov	r3, r2
 800f540:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f542:	88fb      	ldrh	r3, [r7, #6]
 800f544:	68ba      	ldr	r2, [r7, #8]
 800f546:	2100      	movs	r1, #0
 800f548:	68f8      	ldr	r0, [r7, #12]
 800f54a:	f005 fa9f 	bl	8014a8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f54e:	2300      	movs	r3, #0
}
 800f550:	4618      	mov	r0, r3
 800f552:	3710      	adds	r7, #16
 800f554:	46bd      	mov	sp, r7
 800f556:	bd80      	pop	{r7, pc}

0800f558 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b082      	sub	sp, #8
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2204      	movs	r2, #4
 800f564:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f568:	2300      	movs	r3, #0
 800f56a:	2200      	movs	r2, #0
 800f56c:	2100      	movs	r1, #0
 800f56e:	6878      	ldr	r0, [r7, #4]
 800f570:	f005 fa69 	bl	8014a46 <USBD_LL_Transmit>

  return USBD_OK;
 800f574:	2300      	movs	r3, #0
}
 800f576:	4618      	mov	r0, r3
 800f578:	3708      	adds	r7, #8
 800f57a:	46bd      	mov	sp, r7
 800f57c:	bd80      	pop	{r7, pc}

0800f57e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f57e:	b580      	push	{r7, lr}
 800f580:	b082      	sub	sp, #8
 800f582:	af00      	add	r7, sp, #0
 800f584:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	2205      	movs	r2, #5
 800f58a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f58e:	2300      	movs	r3, #0
 800f590:	2200      	movs	r2, #0
 800f592:	2100      	movs	r1, #0
 800f594:	6878      	ldr	r0, [r7, #4]
 800f596:	f005 fa79 	bl	8014a8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f59a:	2300      	movs	r3, #0
}
 800f59c:	4618      	mov	r0, r3
 800f59e:	3708      	adds	r7, #8
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd80      	pop	{r7, pc}

0800f5a4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b084      	sub	sp, #16
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f5ae:	79fb      	ldrb	r3, [r7, #7]
 800f5b0:	4a08      	ldr	r2, [pc, #32]	; (800f5d4 <disk_status+0x30>)
 800f5b2:	009b      	lsls	r3, r3, #2
 800f5b4:	4413      	add	r3, r2
 800f5b6:	685b      	ldr	r3, [r3, #4]
 800f5b8:	685b      	ldr	r3, [r3, #4]
 800f5ba:	79fa      	ldrb	r2, [r7, #7]
 800f5bc:	4905      	ldr	r1, [pc, #20]	; (800f5d4 <disk_status+0x30>)
 800f5be:	440a      	add	r2, r1
 800f5c0:	7a12      	ldrb	r2, [r2, #8]
 800f5c2:	4610      	mov	r0, r2
 800f5c4:	4798      	blx	r3
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f5ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	3710      	adds	r7, #16
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bd80      	pop	{r7, pc}
 800f5d4:	240002a8 	.word	0x240002a8

0800f5d8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b084      	sub	sp, #16
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	4603      	mov	r3, r0
 800f5e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f5e6:	79fb      	ldrb	r3, [r7, #7]
 800f5e8:	4a0d      	ldr	r2, [pc, #52]	; (800f620 <disk_initialize+0x48>)
 800f5ea:	5cd3      	ldrb	r3, [r2, r3]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d111      	bne.n	800f614 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f5f0:	79fb      	ldrb	r3, [r7, #7]
 800f5f2:	4a0b      	ldr	r2, [pc, #44]	; (800f620 <disk_initialize+0x48>)
 800f5f4:	2101      	movs	r1, #1
 800f5f6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f5f8:	79fb      	ldrb	r3, [r7, #7]
 800f5fa:	4a09      	ldr	r2, [pc, #36]	; (800f620 <disk_initialize+0x48>)
 800f5fc:	009b      	lsls	r3, r3, #2
 800f5fe:	4413      	add	r3, r2
 800f600:	685b      	ldr	r3, [r3, #4]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	79fa      	ldrb	r2, [r7, #7]
 800f606:	4906      	ldr	r1, [pc, #24]	; (800f620 <disk_initialize+0x48>)
 800f608:	440a      	add	r2, r1
 800f60a:	7a12      	ldrb	r2, [r2, #8]
 800f60c:	4610      	mov	r0, r2
 800f60e:	4798      	blx	r3
 800f610:	4603      	mov	r3, r0
 800f612:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f614:	7bfb      	ldrb	r3, [r7, #15]
}
 800f616:	4618      	mov	r0, r3
 800f618:	3710      	adds	r7, #16
 800f61a:	46bd      	mov	sp, r7
 800f61c:	bd80      	pop	{r7, pc}
 800f61e:	bf00      	nop
 800f620:	240002a8 	.word	0x240002a8

0800f624 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f624:	b590      	push	{r4, r7, lr}
 800f626:	b087      	sub	sp, #28
 800f628:	af00      	add	r7, sp, #0
 800f62a:	60b9      	str	r1, [r7, #8]
 800f62c:	607a      	str	r2, [r7, #4]
 800f62e:	603b      	str	r3, [r7, #0]
 800f630:	4603      	mov	r3, r0
 800f632:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f634:	7bfb      	ldrb	r3, [r7, #15]
 800f636:	4a0a      	ldr	r2, [pc, #40]	; (800f660 <disk_read+0x3c>)
 800f638:	009b      	lsls	r3, r3, #2
 800f63a:	4413      	add	r3, r2
 800f63c:	685b      	ldr	r3, [r3, #4]
 800f63e:	689c      	ldr	r4, [r3, #8]
 800f640:	7bfb      	ldrb	r3, [r7, #15]
 800f642:	4a07      	ldr	r2, [pc, #28]	; (800f660 <disk_read+0x3c>)
 800f644:	4413      	add	r3, r2
 800f646:	7a18      	ldrb	r0, [r3, #8]
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	687a      	ldr	r2, [r7, #4]
 800f64c:	68b9      	ldr	r1, [r7, #8]
 800f64e:	47a0      	blx	r4
 800f650:	4603      	mov	r3, r0
 800f652:	75fb      	strb	r3, [r7, #23]
  return res;
 800f654:	7dfb      	ldrb	r3, [r7, #23]
}
 800f656:	4618      	mov	r0, r3
 800f658:	371c      	adds	r7, #28
 800f65a:	46bd      	mov	sp, r7
 800f65c:	bd90      	pop	{r4, r7, pc}
 800f65e:	bf00      	nop
 800f660:	240002a8 	.word	0x240002a8

0800f664 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f664:	b590      	push	{r4, r7, lr}
 800f666:	b087      	sub	sp, #28
 800f668:	af00      	add	r7, sp, #0
 800f66a:	60b9      	str	r1, [r7, #8]
 800f66c:	607a      	str	r2, [r7, #4]
 800f66e:	603b      	str	r3, [r7, #0]
 800f670:	4603      	mov	r3, r0
 800f672:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f674:	7bfb      	ldrb	r3, [r7, #15]
 800f676:	4a0a      	ldr	r2, [pc, #40]	; (800f6a0 <disk_write+0x3c>)
 800f678:	009b      	lsls	r3, r3, #2
 800f67a:	4413      	add	r3, r2
 800f67c:	685b      	ldr	r3, [r3, #4]
 800f67e:	68dc      	ldr	r4, [r3, #12]
 800f680:	7bfb      	ldrb	r3, [r7, #15]
 800f682:	4a07      	ldr	r2, [pc, #28]	; (800f6a0 <disk_write+0x3c>)
 800f684:	4413      	add	r3, r2
 800f686:	7a18      	ldrb	r0, [r3, #8]
 800f688:	683b      	ldr	r3, [r7, #0]
 800f68a:	687a      	ldr	r2, [r7, #4]
 800f68c:	68b9      	ldr	r1, [r7, #8]
 800f68e:	47a0      	blx	r4
 800f690:	4603      	mov	r3, r0
 800f692:	75fb      	strb	r3, [r7, #23]
  return res;
 800f694:	7dfb      	ldrb	r3, [r7, #23]
}
 800f696:	4618      	mov	r0, r3
 800f698:	371c      	adds	r7, #28
 800f69a:	46bd      	mov	sp, r7
 800f69c:	bd90      	pop	{r4, r7, pc}
 800f69e:	bf00      	nop
 800f6a0:	240002a8 	.word	0x240002a8

0800f6a4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b084      	sub	sp, #16
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	603a      	str	r2, [r7, #0]
 800f6ae:	71fb      	strb	r3, [r7, #7]
 800f6b0:	460b      	mov	r3, r1
 800f6b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f6b4:	79fb      	ldrb	r3, [r7, #7]
 800f6b6:	4a09      	ldr	r2, [pc, #36]	; (800f6dc <disk_ioctl+0x38>)
 800f6b8:	009b      	lsls	r3, r3, #2
 800f6ba:	4413      	add	r3, r2
 800f6bc:	685b      	ldr	r3, [r3, #4]
 800f6be:	691b      	ldr	r3, [r3, #16]
 800f6c0:	79fa      	ldrb	r2, [r7, #7]
 800f6c2:	4906      	ldr	r1, [pc, #24]	; (800f6dc <disk_ioctl+0x38>)
 800f6c4:	440a      	add	r2, r1
 800f6c6:	7a10      	ldrb	r0, [r2, #8]
 800f6c8:	79b9      	ldrb	r1, [r7, #6]
 800f6ca:	683a      	ldr	r2, [r7, #0]
 800f6cc:	4798      	blx	r3
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	73fb      	strb	r3, [r7, #15]
  return res;
 800f6d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	3710      	adds	r7, #16
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	bd80      	pop	{r7, pc}
 800f6dc:	240002a8 	.word	0x240002a8

0800f6e0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f6e0:	b480      	push	{r7}
 800f6e2:	b085      	sub	sp, #20
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	3301      	adds	r3, #1
 800f6ec:	781b      	ldrb	r3, [r3, #0]
 800f6ee:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f6f0:	89fb      	ldrh	r3, [r7, #14]
 800f6f2:	021b      	lsls	r3, r3, #8
 800f6f4:	b21a      	sxth	r2, r3
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	781b      	ldrb	r3, [r3, #0]
 800f6fa:	b21b      	sxth	r3, r3
 800f6fc:	4313      	orrs	r3, r2
 800f6fe:	b21b      	sxth	r3, r3
 800f700:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f702:	89fb      	ldrh	r3, [r7, #14]
}
 800f704:	4618      	mov	r0, r3
 800f706:	3714      	adds	r7, #20
 800f708:	46bd      	mov	sp, r7
 800f70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70e:	4770      	bx	lr

0800f710 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f710:	b480      	push	{r7}
 800f712:	b085      	sub	sp, #20
 800f714:	af00      	add	r7, sp, #0
 800f716:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	3303      	adds	r3, #3
 800f71c:	781b      	ldrb	r3, [r3, #0]
 800f71e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	021b      	lsls	r3, r3, #8
 800f724:	687a      	ldr	r2, [r7, #4]
 800f726:	3202      	adds	r2, #2
 800f728:	7812      	ldrb	r2, [r2, #0]
 800f72a:	4313      	orrs	r3, r2
 800f72c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	021b      	lsls	r3, r3, #8
 800f732:	687a      	ldr	r2, [r7, #4]
 800f734:	3201      	adds	r2, #1
 800f736:	7812      	ldrb	r2, [r2, #0]
 800f738:	4313      	orrs	r3, r2
 800f73a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	021b      	lsls	r3, r3, #8
 800f740:	687a      	ldr	r2, [r7, #4]
 800f742:	7812      	ldrb	r2, [r2, #0]
 800f744:	4313      	orrs	r3, r2
 800f746:	60fb      	str	r3, [r7, #12]
	return rv;
 800f748:	68fb      	ldr	r3, [r7, #12]
}
 800f74a:	4618      	mov	r0, r3
 800f74c:	3714      	adds	r7, #20
 800f74e:	46bd      	mov	sp, r7
 800f750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f754:	4770      	bx	lr

0800f756 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800f756:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800f75a:	b085      	sub	sp, #20
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
	QWORD rv;

	rv = ptr[7];
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	3307      	adds	r3, #7
 800f764:	781b      	ldrb	r3, [r3, #0]
 800f766:	b2db      	uxtb	r3, r3
 800f768:	f04f 0400 	mov.w	r4, #0
 800f76c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[6];
 800f770:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f774:	f04f 0b00 	mov.w	fp, #0
 800f778:	f04f 0c00 	mov.w	ip, #0
 800f77c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800f780:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800f784:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800f788:	687a      	ldr	r2, [r7, #4]
 800f78a:	3206      	adds	r2, #6
 800f78c:	7812      	ldrb	r2, [r2, #0]
 800f78e:	b2d1      	uxtb	r1, r2
 800f790:	f04f 0200 	mov.w	r2, #0
 800f794:	ea4b 0301 	orr.w	r3, fp, r1
 800f798:	ea4c 0402 	orr.w	r4, ip, r2
 800f79c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[5];
 800f7a0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f7a4:	f04f 0b00 	mov.w	fp, #0
 800f7a8:	f04f 0c00 	mov.w	ip, #0
 800f7ac:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800f7b0:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800f7b4:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800f7b8:	687a      	ldr	r2, [r7, #4]
 800f7ba:	3205      	adds	r2, #5
 800f7bc:	7812      	ldrb	r2, [r2, #0]
 800f7be:	b2d1      	uxtb	r1, r2
 800f7c0:	f04f 0200 	mov.w	r2, #0
 800f7c4:	ea4b 0301 	orr.w	r3, fp, r1
 800f7c8:	ea4c 0402 	orr.w	r4, ip, r2
 800f7cc:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[4];
 800f7d0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f7d4:	f04f 0b00 	mov.w	fp, #0
 800f7d8:	f04f 0c00 	mov.w	ip, #0
 800f7dc:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800f7e0:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800f7e4:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800f7e8:	687a      	ldr	r2, [r7, #4]
 800f7ea:	3204      	adds	r2, #4
 800f7ec:	7812      	ldrb	r2, [r2, #0]
 800f7ee:	b2d1      	uxtb	r1, r2
 800f7f0:	f04f 0200 	mov.w	r2, #0
 800f7f4:	ea4b 0301 	orr.w	r3, fp, r1
 800f7f8:	ea4c 0402 	orr.w	r4, ip, r2
 800f7fc:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[3];
 800f800:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f804:	f04f 0b00 	mov.w	fp, #0
 800f808:	f04f 0c00 	mov.w	ip, #0
 800f80c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800f810:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800f814:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800f818:	687a      	ldr	r2, [r7, #4]
 800f81a:	3203      	adds	r2, #3
 800f81c:	7812      	ldrb	r2, [r2, #0]
 800f81e:	b2d1      	uxtb	r1, r2
 800f820:	f04f 0200 	mov.w	r2, #0
 800f824:	ea4b 0301 	orr.w	r3, fp, r1
 800f828:	ea4c 0402 	orr.w	r4, ip, r2
 800f82c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[2];
 800f830:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f834:	f04f 0b00 	mov.w	fp, #0
 800f838:	f04f 0c00 	mov.w	ip, #0
 800f83c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800f840:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800f844:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800f848:	687a      	ldr	r2, [r7, #4]
 800f84a:	3202      	adds	r2, #2
 800f84c:	7812      	ldrb	r2, [r2, #0]
 800f84e:	b2d1      	uxtb	r1, r2
 800f850:	f04f 0200 	mov.w	r2, #0
 800f854:	ea4b 0301 	orr.w	r3, fp, r1
 800f858:	ea4c 0402 	orr.w	r4, ip, r2
 800f85c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[1];
 800f860:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f864:	f04f 0b00 	mov.w	fp, #0
 800f868:	f04f 0c00 	mov.w	ip, #0
 800f86c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800f870:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800f874:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800f878:	687a      	ldr	r2, [r7, #4]
 800f87a:	3201      	adds	r2, #1
 800f87c:	7812      	ldrb	r2, [r2, #0]
 800f87e:	b2d1      	uxtb	r1, r2
 800f880:	f04f 0200 	mov.w	r2, #0
 800f884:	ea4b 0301 	orr.w	r3, fp, r1
 800f888:	ea4c 0402 	orr.w	r4, ip, r2
 800f88c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[0];
 800f890:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f894:	f04f 0b00 	mov.w	fp, #0
 800f898:	f04f 0c00 	mov.w	ip, #0
 800f89c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800f8a0:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800f8a4:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800f8a8:	687a      	ldr	r2, [r7, #4]
 800f8aa:	7812      	ldrb	r2, [r2, #0]
 800f8ac:	b2d1      	uxtb	r1, r2
 800f8ae:	f04f 0200 	mov.w	r2, #0
 800f8b2:	ea4b 0301 	orr.w	r3, fp, r1
 800f8b6:	ea4c 0402 	orr.w	r4, ip, r2
 800f8ba:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return rv;
 800f8be:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	4621      	mov	r1, r4
 800f8c6:	3714      	adds	r7, #20
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800f8ce:	4770      	bx	lr

0800f8d0 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f8d0:	b480      	push	{r7}
 800f8d2:	b083      	sub	sp, #12
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
 800f8d8:	460b      	mov	r3, r1
 800f8da:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	1c5a      	adds	r2, r3, #1
 800f8e0:	607a      	str	r2, [r7, #4]
 800f8e2:	887a      	ldrh	r2, [r7, #2]
 800f8e4:	b2d2      	uxtb	r2, r2
 800f8e6:	701a      	strb	r2, [r3, #0]
 800f8e8:	887b      	ldrh	r3, [r7, #2]
 800f8ea:	0a1b      	lsrs	r3, r3, #8
 800f8ec:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	1c5a      	adds	r2, r3, #1
 800f8f2:	607a      	str	r2, [r7, #4]
 800f8f4:	887a      	ldrh	r2, [r7, #2]
 800f8f6:	b2d2      	uxtb	r2, r2
 800f8f8:	701a      	strb	r2, [r3, #0]
}
 800f8fa:	bf00      	nop
 800f8fc:	370c      	adds	r7, #12
 800f8fe:	46bd      	mov	sp, r7
 800f900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f904:	4770      	bx	lr

0800f906 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f906:	b480      	push	{r7}
 800f908:	b083      	sub	sp, #12
 800f90a:	af00      	add	r7, sp, #0
 800f90c:	6078      	str	r0, [r7, #4]
 800f90e:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	1c5a      	adds	r2, r3, #1
 800f914:	607a      	str	r2, [r7, #4]
 800f916:	683a      	ldr	r2, [r7, #0]
 800f918:	b2d2      	uxtb	r2, r2
 800f91a:	701a      	strb	r2, [r3, #0]
 800f91c:	683b      	ldr	r3, [r7, #0]
 800f91e:	0a1b      	lsrs	r3, r3, #8
 800f920:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	1c5a      	adds	r2, r3, #1
 800f926:	607a      	str	r2, [r7, #4]
 800f928:	683a      	ldr	r2, [r7, #0]
 800f92a:	b2d2      	uxtb	r2, r2
 800f92c:	701a      	strb	r2, [r3, #0]
 800f92e:	683b      	ldr	r3, [r7, #0]
 800f930:	0a1b      	lsrs	r3, r3, #8
 800f932:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	1c5a      	adds	r2, r3, #1
 800f938:	607a      	str	r2, [r7, #4]
 800f93a:	683a      	ldr	r2, [r7, #0]
 800f93c:	b2d2      	uxtb	r2, r2
 800f93e:	701a      	strb	r2, [r3, #0]
 800f940:	683b      	ldr	r3, [r7, #0]
 800f942:	0a1b      	lsrs	r3, r3, #8
 800f944:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	1c5a      	adds	r2, r3, #1
 800f94a:	607a      	str	r2, [r7, #4]
 800f94c:	683a      	ldr	r2, [r7, #0]
 800f94e:	b2d2      	uxtb	r2, r2
 800f950:	701a      	strb	r2, [r3, #0]
}
 800f952:	bf00      	nop
 800f954:	370c      	adds	r7, #12
 800f956:	46bd      	mov	sp, r7
 800f958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95c:	4770      	bx	lr

0800f95e <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800f95e:	b490      	push	{r4, r7}
 800f960:	b084      	sub	sp, #16
 800f962:	af00      	add	r7, sp, #0
 800f964:	60f8      	str	r0, [r7, #12]
 800f966:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	1c5a      	adds	r2, r3, #1
 800f96e:	60fa      	str	r2, [r7, #12]
 800f970:	783a      	ldrb	r2, [r7, #0]
 800f972:	701a      	strb	r2, [r3, #0]
 800f974:	e9d7 1200 	ldrd	r1, r2, [r7]
 800f978:	f04f 0300 	mov.w	r3, #0
 800f97c:	f04f 0400 	mov.w	r4, #0
 800f980:	0a0b      	lsrs	r3, r1, #8
 800f982:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f986:	0a14      	lsrs	r4, r2, #8
 800f988:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	1c5a      	adds	r2, r3, #1
 800f990:	60fa      	str	r2, [r7, #12]
 800f992:	783a      	ldrb	r2, [r7, #0]
 800f994:	701a      	strb	r2, [r3, #0]
 800f996:	e9d7 1200 	ldrd	r1, r2, [r7]
 800f99a:	f04f 0300 	mov.w	r3, #0
 800f99e:	f04f 0400 	mov.w	r4, #0
 800f9a2:	0a0b      	lsrs	r3, r1, #8
 800f9a4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f9a8:	0a14      	lsrs	r4, r2, #8
 800f9aa:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	1c5a      	adds	r2, r3, #1
 800f9b2:	60fa      	str	r2, [r7, #12]
 800f9b4:	783a      	ldrb	r2, [r7, #0]
 800f9b6:	701a      	strb	r2, [r3, #0]
 800f9b8:	e9d7 1200 	ldrd	r1, r2, [r7]
 800f9bc:	f04f 0300 	mov.w	r3, #0
 800f9c0:	f04f 0400 	mov.w	r4, #0
 800f9c4:	0a0b      	lsrs	r3, r1, #8
 800f9c6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f9ca:	0a14      	lsrs	r4, r2, #8
 800f9cc:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	1c5a      	adds	r2, r3, #1
 800f9d4:	60fa      	str	r2, [r7, #12]
 800f9d6:	783a      	ldrb	r2, [r7, #0]
 800f9d8:	701a      	strb	r2, [r3, #0]
 800f9da:	e9d7 1200 	ldrd	r1, r2, [r7]
 800f9de:	f04f 0300 	mov.w	r3, #0
 800f9e2:	f04f 0400 	mov.w	r4, #0
 800f9e6:	0a0b      	lsrs	r3, r1, #8
 800f9e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f9ec:	0a14      	lsrs	r4, r2, #8
 800f9ee:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	1c5a      	adds	r2, r3, #1
 800f9f6:	60fa      	str	r2, [r7, #12]
 800f9f8:	783a      	ldrb	r2, [r7, #0]
 800f9fa:	701a      	strb	r2, [r3, #0]
 800f9fc:	e9d7 1200 	ldrd	r1, r2, [r7]
 800fa00:	f04f 0300 	mov.w	r3, #0
 800fa04:	f04f 0400 	mov.w	r4, #0
 800fa08:	0a0b      	lsrs	r3, r1, #8
 800fa0a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fa0e:	0a14      	lsrs	r4, r2, #8
 800fa10:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	1c5a      	adds	r2, r3, #1
 800fa18:	60fa      	str	r2, [r7, #12]
 800fa1a:	783a      	ldrb	r2, [r7, #0]
 800fa1c:	701a      	strb	r2, [r3, #0]
 800fa1e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800fa22:	f04f 0300 	mov.w	r3, #0
 800fa26:	f04f 0400 	mov.w	r4, #0
 800fa2a:	0a0b      	lsrs	r3, r1, #8
 800fa2c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fa30:	0a14      	lsrs	r4, r2, #8
 800fa32:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	1c5a      	adds	r2, r3, #1
 800fa3a:	60fa      	str	r2, [r7, #12]
 800fa3c:	783a      	ldrb	r2, [r7, #0]
 800fa3e:	701a      	strb	r2, [r3, #0]
 800fa40:	e9d7 1200 	ldrd	r1, r2, [r7]
 800fa44:	f04f 0300 	mov.w	r3, #0
 800fa48:	f04f 0400 	mov.w	r4, #0
 800fa4c:	0a0b      	lsrs	r3, r1, #8
 800fa4e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fa52:	0a14      	lsrs	r4, r2, #8
 800fa54:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val;
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	1c5a      	adds	r2, r3, #1
 800fa5c:	60fa      	str	r2, [r7, #12]
 800fa5e:	783a      	ldrb	r2, [r7, #0]
 800fa60:	701a      	strb	r2, [r3, #0]
}
 800fa62:	bf00      	nop
 800fa64:	3710      	adds	r7, #16
 800fa66:	46bd      	mov	sp, r7
 800fa68:	bc90      	pop	{r4, r7}
 800fa6a:	4770      	bx	lr

0800fa6c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800fa6c:	b480      	push	{r7}
 800fa6e:	b087      	sub	sp, #28
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	60f8      	str	r0, [r7, #12]
 800fa74:	60b9      	str	r1, [r7, #8]
 800fa76:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d00d      	beq.n	800faa2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800fa86:	693a      	ldr	r2, [r7, #16]
 800fa88:	1c53      	adds	r3, r2, #1
 800fa8a:	613b      	str	r3, [r7, #16]
 800fa8c:	697b      	ldr	r3, [r7, #20]
 800fa8e:	1c59      	adds	r1, r3, #1
 800fa90:	6179      	str	r1, [r7, #20]
 800fa92:	7812      	ldrb	r2, [r2, #0]
 800fa94:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	3b01      	subs	r3, #1
 800fa9a:	607b      	str	r3, [r7, #4]
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d1f1      	bne.n	800fa86 <mem_cpy+0x1a>
	}
}
 800faa2:	bf00      	nop
 800faa4:	371c      	adds	r7, #28
 800faa6:	46bd      	mov	sp, r7
 800faa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faac:	4770      	bx	lr

0800faae <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800faae:	b480      	push	{r7}
 800fab0:	b087      	sub	sp, #28
 800fab2:	af00      	add	r7, sp, #0
 800fab4:	60f8      	str	r0, [r7, #12]
 800fab6:	60b9      	str	r1, [r7, #8]
 800fab8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800fabe:	697b      	ldr	r3, [r7, #20]
 800fac0:	1c5a      	adds	r2, r3, #1
 800fac2:	617a      	str	r2, [r7, #20]
 800fac4:	68ba      	ldr	r2, [r7, #8]
 800fac6:	b2d2      	uxtb	r2, r2
 800fac8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	3b01      	subs	r3, #1
 800face:	607b      	str	r3, [r7, #4]
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d1f3      	bne.n	800fabe <mem_set+0x10>
}
 800fad6:	bf00      	nop
 800fad8:	371c      	adds	r7, #28
 800fada:	46bd      	mov	sp, r7
 800fadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae0:	4770      	bx	lr

0800fae2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800fae2:	b480      	push	{r7}
 800fae4:	b089      	sub	sp, #36	; 0x24
 800fae6:	af00      	add	r7, sp, #0
 800fae8:	60f8      	str	r0, [r7, #12]
 800faea:	60b9      	str	r1, [r7, #8]
 800faec:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	61fb      	str	r3, [r7, #28]
 800faf2:	68bb      	ldr	r3, [r7, #8]
 800faf4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800faf6:	2300      	movs	r3, #0
 800faf8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800fafa:	69fb      	ldr	r3, [r7, #28]
 800fafc:	1c5a      	adds	r2, r3, #1
 800fafe:	61fa      	str	r2, [r7, #28]
 800fb00:	781b      	ldrb	r3, [r3, #0]
 800fb02:	4619      	mov	r1, r3
 800fb04:	69bb      	ldr	r3, [r7, #24]
 800fb06:	1c5a      	adds	r2, r3, #1
 800fb08:	61ba      	str	r2, [r7, #24]
 800fb0a:	781b      	ldrb	r3, [r3, #0]
 800fb0c:	1acb      	subs	r3, r1, r3
 800fb0e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	3b01      	subs	r3, #1
 800fb14:	607b      	str	r3, [r7, #4]
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d002      	beq.n	800fb22 <mem_cmp+0x40>
 800fb1c:	697b      	ldr	r3, [r7, #20]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d0eb      	beq.n	800fafa <mem_cmp+0x18>

	return r;
 800fb22:	697b      	ldr	r3, [r7, #20]
}
 800fb24:	4618      	mov	r0, r3
 800fb26:	3724      	adds	r7, #36	; 0x24
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2e:	4770      	bx	lr

0800fb30 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800fb30:	b480      	push	{r7}
 800fb32:	b083      	sub	sp, #12
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
 800fb38:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800fb3a:	e002      	b.n	800fb42 <chk_chr+0x12>
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	3301      	adds	r3, #1
 800fb40:	607b      	str	r3, [r7, #4]
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	781b      	ldrb	r3, [r3, #0]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d005      	beq.n	800fb56 <chk_chr+0x26>
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	781b      	ldrb	r3, [r3, #0]
 800fb4e:	461a      	mov	r2, r3
 800fb50:	683b      	ldr	r3, [r7, #0]
 800fb52:	4293      	cmp	r3, r2
 800fb54:	d1f2      	bne.n	800fb3c <chk_chr+0xc>
	return *str;
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	781b      	ldrb	r3, [r3, #0]
}
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	370c      	adds	r7, #12
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb64:	4770      	bx	lr
	...

0800fb68 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fb68:	b480      	push	{r7}
 800fb6a:	b085      	sub	sp, #20
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
 800fb70:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fb72:	2300      	movs	r3, #0
 800fb74:	60bb      	str	r3, [r7, #8]
 800fb76:	68bb      	ldr	r3, [r7, #8]
 800fb78:	60fb      	str	r3, [r7, #12]
 800fb7a:	e029      	b.n	800fbd0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800fb7c:	4a27      	ldr	r2, [pc, #156]	; (800fc1c <chk_lock+0xb4>)
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	011b      	lsls	r3, r3, #4
 800fb82:	4413      	add	r3, r2
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d01d      	beq.n	800fbc6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fb8a:	4a24      	ldr	r2, [pc, #144]	; (800fc1c <chk_lock+0xb4>)
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	011b      	lsls	r3, r3, #4
 800fb90:	4413      	add	r3, r2
 800fb92:	681a      	ldr	r2, [r3, #0]
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	429a      	cmp	r2, r3
 800fb9a:	d116      	bne.n	800fbca <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800fb9c:	4a1f      	ldr	r2, [pc, #124]	; (800fc1c <chk_lock+0xb4>)
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	011b      	lsls	r3, r3, #4
 800fba2:	4413      	add	r3, r2
 800fba4:	3304      	adds	r3, #4
 800fba6:	681a      	ldr	r2, [r3, #0]
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fbac:	429a      	cmp	r2, r3
 800fbae:	d10c      	bne.n	800fbca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fbb0:	4a1a      	ldr	r2, [pc, #104]	; (800fc1c <chk_lock+0xb4>)
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	011b      	lsls	r3, r3, #4
 800fbb6:	4413      	add	r3, r2
 800fbb8:	3308      	adds	r3, #8
 800fbba:	681a      	ldr	r2, [r3, #0]
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 800fbc0:	429a      	cmp	r2, r3
 800fbc2:	d102      	bne.n	800fbca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fbc4:	e007      	b.n	800fbd6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800fbc6:	2301      	movs	r3, #1
 800fbc8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	3301      	adds	r3, #1
 800fbce:	60fb      	str	r3, [r7, #12]
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	2b01      	cmp	r3, #1
 800fbd4:	d9d2      	bls.n	800fb7c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	2b02      	cmp	r3, #2
 800fbda:	d109      	bne.n	800fbf0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800fbdc:	68bb      	ldr	r3, [r7, #8]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d102      	bne.n	800fbe8 <chk_lock+0x80>
 800fbe2:	683b      	ldr	r3, [r7, #0]
 800fbe4:	2b02      	cmp	r3, #2
 800fbe6:	d101      	bne.n	800fbec <chk_lock+0x84>
 800fbe8:	2300      	movs	r3, #0
 800fbea:	e010      	b.n	800fc0e <chk_lock+0xa6>
 800fbec:	2312      	movs	r3, #18
 800fbee:	e00e      	b.n	800fc0e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800fbf0:	683b      	ldr	r3, [r7, #0]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d108      	bne.n	800fc08 <chk_lock+0xa0>
 800fbf6:	4a09      	ldr	r2, [pc, #36]	; (800fc1c <chk_lock+0xb4>)
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	011b      	lsls	r3, r3, #4
 800fbfc:	4413      	add	r3, r2
 800fbfe:	330c      	adds	r3, #12
 800fc00:	881b      	ldrh	r3, [r3, #0]
 800fc02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc06:	d101      	bne.n	800fc0c <chk_lock+0xa4>
 800fc08:	2310      	movs	r3, #16
 800fc0a:	e000      	b.n	800fc0e <chk_lock+0xa6>
 800fc0c:	2300      	movs	r3, #0
}
 800fc0e:	4618      	mov	r0, r3
 800fc10:	3714      	adds	r7, #20
 800fc12:	46bd      	mov	sp, r7
 800fc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc18:	4770      	bx	lr
 800fc1a:	bf00      	nop
 800fc1c:	24000288 	.word	0x24000288

0800fc20 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800fc20:	b480      	push	{r7}
 800fc22:	b083      	sub	sp, #12
 800fc24:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fc26:	2300      	movs	r3, #0
 800fc28:	607b      	str	r3, [r7, #4]
 800fc2a:	e002      	b.n	800fc32 <enq_lock+0x12>
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	3301      	adds	r3, #1
 800fc30:	607b      	str	r3, [r7, #4]
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	2b01      	cmp	r3, #1
 800fc36:	d806      	bhi.n	800fc46 <enq_lock+0x26>
 800fc38:	4a09      	ldr	r2, [pc, #36]	; (800fc60 <enq_lock+0x40>)
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	011b      	lsls	r3, r3, #4
 800fc3e:	4413      	add	r3, r2
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d1f2      	bne.n	800fc2c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	2b02      	cmp	r3, #2
 800fc4a:	bf14      	ite	ne
 800fc4c:	2301      	movne	r3, #1
 800fc4e:	2300      	moveq	r3, #0
 800fc50:	b2db      	uxtb	r3, r3
}
 800fc52:	4618      	mov	r0, r3
 800fc54:	370c      	adds	r7, #12
 800fc56:	46bd      	mov	sp, r7
 800fc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5c:	4770      	bx	lr
 800fc5e:	bf00      	nop
 800fc60:	24000288 	.word	0x24000288

0800fc64 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fc64:	b480      	push	{r7}
 800fc66:	b085      	sub	sp, #20
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
 800fc6c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fc6e:	2300      	movs	r3, #0
 800fc70:	60fb      	str	r3, [r7, #12]
 800fc72:	e01f      	b.n	800fcb4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800fc74:	4a41      	ldr	r2, [pc, #260]	; (800fd7c <inc_lock+0x118>)
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	011b      	lsls	r3, r3, #4
 800fc7a:	4413      	add	r3, r2
 800fc7c:	681a      	ldr	r2, [r3, #0]
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	429a      	cmp	r2, r3
 800fc84:	d113      	bne.n	800fcae <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800fc86:	4a3d      	ldr	r2, [pc, #244]	; (800fd7c <inc_lock+0x118>)
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	011b      	lsls	r3, r3, #4
 800fc8c:	4413      	add	r3, r2
 800fc8e:	3304      	adds	r3, #4
 800fc90:	681a      	ldr	r2, [r3, #0]
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800fc96:	429a      	cmp	r2, r3
 800fc98:	d109      	bne.n	800fcae <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800fc9a:	4a38      	ldr	r2, [pc, #224]	; (800fd7c <inc_lock+0x118>)
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	011b      	lsls	r3, r3, #4
 800fca0:	4413      	add	r3, r2
 800fca2:	3308      	adds	r3, #8
 800fca4:	681a      	ldr	r2, [r3, #0]
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800fcaa:	429a      	cmp	r2, r3
 800fcac:	d006      	beq.n	800fcbc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	3301      	adds	r3, #1
 800fcb2:	60fb      	str	r3, [r7, #12]
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	2b01      	cmp	r3, #1
 800fcb8:	d9dc      	bls.n	800fc74 <inc_lock+0x10>
 800fcba:	e000      	b.n	800fcbe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800fcbc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	2b02      	cmp	r3, #2
 800fcc2:	d132      	bne.n	800fd2a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	60fb      	str	r3, [r7, #12]
 800fcc8:	e002      	b.n	800fcd0 <inc_lock+0x6c>
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	3301      	adds	r3, #1
 800fcce:	60fb      	str	r3, [r7, #12]
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	2b01      	cmp	r3, #1
 800fcd4:	d806      	bhi.n	800fce4 <inc_lock+0x80>
 800fcd6:	4a29      	ldr	r2, [pc, #164]	; (800fd7c <inc_lock+0x118>)
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	011b      	lsls	r3, r3, #4
 800fcdc:	4413      	add	r3, r2
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d1f2      	bne.n	800fcca <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	2b02      	cmp	r3, #2
 800fce8:	d101      	bne.n	800fcee <inc_lock+0x8a>
 800fcea:	2300      	movs	r3, #0
 800fcec:	e040      	b.n	800fd70 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	681a      	ldr	r2, [r3, #0]
 800fcf2:	4922      	ldr	r1, [pc, #136]	; (800fd7c <inc_lock+0x118>)
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	011b      	lsls	r3, r3, #4
 800fcf8:	440b      	add	r3, r1
 800fcfa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	689a      	ldr	r2, [r3, #8]
 800fd00:	491e      	ldr	r1, [pc, #120]	; (800fd7c <inc_lock+0x118>)
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	011b      	lsls	r3, r3, #4
 800fd06:	440b      	add	r3, r1
 800fd08:	3304      	adds	r3, #4
 800fd0a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fd10:	491a      	ldr	r1, [pc, #104]	; (800fd7c <inc_lock+0x118>)
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	011b      	lsls	r3, r3, #4
 800fd16:	440b      	add	r3, r1
 800fd18:	3308      	adds	r3, #8
 800fd1a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800fd1c:	4a17      	ldr	r2, [pc, #92]	; (800fd7c <inc_lock+0x118>)
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	011b      	lsls	r3, r3, #4
 800fd22:	4413      	add	r3, r2
 800fd24:	330c      	adds	r3, #12
 800fd26:	2200      	movs	r2, #0
 800fd28:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800fd2a:	683b      	ldr	r3, [r7, #0]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d009      	beq.n	800fd44 <inc_lock+0xe0>
 800fd30:	4a12      	ldr	r2, [pc, #72]	; (800fd7c <inc_lock+0x118>)
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	011b      	lsls	r3, r3, #4
 800fd36:	4413      	add	r3, r2
 800fd38:	330c      	adds	r3, #12
 800fd3a:	881b      	ldrh	r3, [r3, #0]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d001      	beq.n	800fd44 <inc_lock+0xe0>
 800fd40:	2300      	movs	r3, #0
 800fd42:	e015      	b.n	800fd70 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800fd44:	683b      	ldr	r3, [r7, #0]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d108      	bne.n	800fd5c <inc_lock+0xf8>
 800fd4a:	4a0c      	ldr	r2, [pc, #48]	; (800fd7c <inc_lock+0x118>)
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	011b      	lsls	r3, r3, #4
 800fd50:	4413      	add	r3, r2
 800fd52:	330c      	adds	r3, #12
 800fd54:	881b      	ldrh	r3, [r3, #0]
 800fd56:	3301      	adds	r3, #1
 800fd58:	b29a      	uxth	r2, r3
 800fd5a:	e001      	b.n	800fd60 <inc_lock+0xfc>
 800fd5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fd60:	4906      	ldr	r1, [pc, #24]	; (800fd7c <inc_lock+0x118>)
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	011b      	lsls	r3, r3, #4
 800fd66:	440b      	add	r3, r1
 800fd68:	330c      	adds	r3, #12
 800fd6a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	3301      	adds	r3, #1
}
 800fd70:	4618      	mov	r0, r3
 800fd72:	3714      	adds	r7, #20
 800fd74:	46bd      	mov	sp, r7
 800fd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7a:	4770      	bx	lr
 800fd7c:	24000288 	.word	0x24000288

0800fd80 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800fd80:	b480      	push	{r7}
 800fd82:	b085      	sub	sp, #20
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	3b01      	subs	r3, #1
 800fd8c:	607b      	str	r3, [r7, #4]
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	2b01      	cmp	r3, #1
 800fd92:	d825      	bhi.n	800fde0 <dec_lock+0x60>
		n = Files[i].ctr;
 800fd94:	4a17      	ldr	r2, [pc, #92]	; (800fdf4 <dec_lock+0x74>)
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	011b      	lsls	r3, r3, #4
 800fd9a:	4413      	add	r3, r2
 800fd9c:	330c      	adds	r3, #12
 800fd9e:	881b      	ldrh	r3, [r3, #0]
 800fda0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800fda2:	89fb      	ldrh	r3, [r7, #14]
 800fda4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fda8:	d101      	bne.n	800fdae <dec_lock+0x2e>
 800fdaa:	2300      	movs	r3, #0
 800fdac:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800fdae:	89fb      	ldrh	r3, [r7, #14]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d002      	beq.n	800fdba <dec_lock+0x3a>
 800fdb4:	89fb      	ldrh	r3, [r7, #14]
 800fdb6:	3b01      	subs	r3, #1
 800fdb8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800fdba:	4a0e      	ldr	r2, [pc, #56]	; (800fdf4 <dec_lock+0x74>)
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	011b      	lsls	r3, r3, #4
 800fdc0:	4413      	add	r3, r2
 800fdc2:	330c      	adds	r3, #12
 800fdc4:	89fa      	ldrh	r2, [r7, #14]
 800fdc6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800fdc8:	89fb      	ldrh	r3, [r7, #14]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d105      	bne.n	800fdda <dec_lock+0x5a>
 800fdce:	4a09      	ldr	r2, [pc, #36]	; (800fdf4 <dec_lock+0x74>)
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	011b      	lsls	r3, r3, #4
 800fdd4:	4413      	add	r3, r2
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800fdda:	2300      	movs	r3, #0
 800fddc:	737b      	strb	r3, [r7, #13]
 800fdde:	e001      	b.n	800fde4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800fde0:	2302      	movs	r3, #2
 800fde2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800fde4:	7b7b      	ldrb	r3, [r7, #13]
}
 800fde6:	4618      	mov	r0, r3
 800fde8:	3714      	adds	r7, #20
 800fdea:	46bd      	mov	sp, r7
 800fdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf0:	4770      	bx	lr
 800fdf2:	bf00      	nop
 800fdf4:	24000288 	.word	0x24000288

0800fdf8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800fdf8:	b480      	push	{r7}
 800fdfa:	b085      	sub	sp, #20
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800fe00:	2300      	movs	r3, #0
 800fe02:	60fb      	str	r3, [r7, #12]
 800fe04:	e010      	b.n	800fe28 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800fe06:	4a0d      	ldr	r2, [pc, #52]	; (800fe3c <clear_lock+0x44>)
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	011b      	lsls	r3, r3, #4
 800fe0c:	4413      	add	r3, r2
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	687a      	ldr	r2, [r7, #4]
 800fe12:	429a      	cmp	r2, r3
 800fe14:	d105      	bne.n	800fe22 <clear_lock+0x2a>
 800fe16:	4a09      	ldr	r2, [pc, #36]	; (800fe3c <clear_lock+0x44>)
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	011b      	lsls	r3, r3, #4
 800fe1c:	4413      	add	r3, r2
 800fe1e:	2200      	movs	r2, #0
 800fe20:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	3301      	adds	r3, #1
 800fe26:	60fb      	str	r3, [r7, #12]
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	2b01      	cmp	r3, #1
 800fe2c:	d9eb      	bls.n	800fe06 <clear_lock+0xe>
	}
}
 800fe2e:	bf00      	nop
 800fe30:	3714      	adds	r7, #20
 800fe32:	46bd      	mov	sp, r7
 800fe34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe38:	4770      	bx	lr
 800fe3a:	bf00      	nop
 800fe3c:	24000288 	.word	0x24000288

0800fe40 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b086      	sub	sp, #24
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800fe48:	2300      	movs	r3, #0
 800fe4a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	78db      	ldrb	r3, [r3, #3]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d034      	beq.n	800febe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe58:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	7858      	ldrb	r0, [r3, #1]
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800fe64:	2301      	movs	r3, #1
 800fe66:	697a      	ldr	r2, [r7, #20]
 800fe68:	f7ff fbfc 	bl	800f664 <disk_write>
 800fe6c:	4603      	mov	r3, r0
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d002      	beq.n	800fe78 <sync_window+0x38>
			res = FR_DISK_ERR;
 800fe72:	2301      	movs	r3, #1
 800fe74:	73fb      	strb	r3, [r7, #15]
 800fe76:	e022      	b.n	800febe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe82:	697a      	ldr	r2, [r7, #20]
 800fe84:	1ad2      	subs	r2, r2, r3
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe8a:	429a      	cmp	r2, r3
 800fe8c:	d217      	bcs.n	800febe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	789b      	ldrb	r3, [r3, #2]
 800fe92:	613b      	str	r3, [r7, #16]
 800fe94:	e010      	b.n	800feb8 <sync_window+0x78>
					wsect += fs->fsize;
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe9a:	697a      	ldr	r2, [r7, #20]
 800fe9c:	4413      	add	r3, r2
 800fe9e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	7858      	ldrb	r0, [r3, #1]
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800feaa:	2301      	movs	r3, #1
 800feac:	697a      	ldr	r2, [r7, #20]
 800feae:	f7ff fbd9 	bl	800f664 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800feb2:	693b      	ldr	r3, [r7, #16]
 800feb4:	3b01      	subs	r3, #1
 800feb6:	613b      	str	r3, [r7, #16]
 800feb8:	693b      	ldr	r3, [r7, #16]
 800feba:	2b01      	cmp	r3, #1
 800febc:	d8eb      	bhi.n	800fe96 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800febe:	7bfb      	ldrb	r3, [r7, #15]
}
 800fec0:	4618      	mov	r0, r3
 800fec2:	3718      	adds	r7, #24
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}

0800fec8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b084      	sub	sp, #16
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
 800fed0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800fed2:	2300      	movs	r3, #0
 800fed4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800feda:	683a      	ldr	r2, [r7, #0]
 800fedc:	429a      	cmp	r2, r3
 800fede:	d01b      	beq.n	800ff18 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800fee0:	6878      	ldr	r0, [r7, #4]
 800fee2:	f7ff ffad 	bl	800fe40 <sync_window>
 800fee6:	4603      	mov	r3, r0
 800fee8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800feea:	7bfb      	ldrb	r3, [r7, #15]
 800feec:	2b00      	cmp	r3, #0
 800feee:	d113      	bne.n	800ff18 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	7858      	ldrb	r0, [r3, #1]
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800fefa:	2301      	movs	r3, #1
 800fefc:	683a      	ldr	r2, [r7, #0]
 800fefe:	f7ff fb91 	bl	800f624 <disk_read>
 800ff02:	4603      	mov	r3, r0
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d004      	beq.n	800ff12 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ff08:	f04f 33ff 	mov.w	r3, #4294967295
 800ff0c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ff0e:	2301      	movs	r3, #1
 800ff10:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	683a      	ldr	r2, [r7, #0]
 800ff16:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800ff18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	3710      	adds	r7, #16
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	bd80      	pop	{r7, pc}
	...

0800ff24 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b084      	sub	sp, #16
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ff2c:	6878      	ldr	r0, [r7, #4]
 800ff2e:	f7ff ff87 	bl	800fe40 <sync_window>
 800ff32:	4603      	mov	r3, r0
 800ff34:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ff36:	7bfb      	ldrb	r3, [r7, #15]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d159      	bne.n	800fff0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	781b      	ldrb	r3, [r3, #0]
 800ff40:	2b03      	cmp	r3, #3
 800ff42:	d149      	bne.n	800ffd8 <sync_fs+0xb4>
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	791b      	ldrb	r3, [r3, #4]
 800ff48:	2b01      	cmp	r3, #1
 800ff4a:	d145      	bne.n	800ffd8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	899b      	ldrh	r3, [r3, #12]
 800ff56:	461a      	mov	r2, r3
 800ff58:	2100      	movs	r1, #0
 800ff5a:	f7ff fda8 	bl	800faae <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	333c      	adds	r3, #60	; 0x3c
 800ff62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ff66:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f7ff fcb0 	bl	800f8d0 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	333c      	adds	r3, #60	; 0x3c
 800ff74:	4921      	ldr	r1, [pc, #132]	; (800fffc <sync_fs+0xd8>)
 800ff76:	4618      	mov	r0, r3
 800ff78:	f7ff fcc5 	bl	800f906 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	333c      	adds	r3, #60	; 0x3c
 800ff80:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ff84:	491e      	ldr	r1, [pc, #120]	; (8010000 <sync_fs+0xdc>)
 800ff86:	4618      	mov	r0, r3
 800ff88:	f7ff fcbd 	bl	800f906 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	333c      	adds	r3, #60	; 0x3c
 800ff90:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	69db      	ldr	r3, [r3, #28]
 800ff98:	4619      	mov	r1, r3
 800ff9a:	4610      	mov	r0, r2
 800ff9c:	f7ff fcb3 	bl	800f906 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	333c      	adds	r3, #60	; 0x3c
 800ffa4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	699b      	ldr	r3, [r3, #24]
 800ffac:	4619      	mov	r1, r3
 800ffae:	4610      	mov	r0, r2
 800ffb0:	f7ff fca9 	bl	800f906 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffb8:	1c5a      	adds	r2, r3, #1
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	7858      	ldrb	r0, [r3, #1]
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ffcc:	2301      	movs	r3, #1
 800ffce:	f7ff fb49 	bl	800f664 <disk_write>
			fs->fsi_flag = 0;
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	785b      	ldrb	r3, [r3, #1]
 800ffdc:	2200      	movs	r2, #0
 800ffde:	2100      	movs	r1, #0
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f7ff fb5f 	bl	800f6a4 <disk_ioctl>
 800ffe6:	4603      	mov	r3, r0
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d001      	beq.n	800fff0 <sync_fs+0xcc>
 800ffec:	2301      	movs	r3, #1
 800ffee:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800fff0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fff2:	4618      	mov	r0, r3
 800fff4:	3710      	adds	r7, #16
 800fff6:	46bd      	mov	sp, r7
 800fff8:	bd80      	pop	{r7, pc}
 800fffa:	bf00      	nop
 800fffc:	41615252 	.word	0x41615252
 8010000:	61417272 	.word	0x61417272

08010004 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010004:	b480      	push	{r7}
 8010006:	b083      	sub	sp, #12
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
 801000c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	3b02      	subs	r3, #2
 8010012:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	6a1b      	ldr	r3, [r3, #32]
 8010018:	3b02      	subs	r3, #2
 801001a:	683a      	ldr	r2, [r7, #0]
 801001c:	429a      	cmp	r2, r3
 801001e:	d301      	bcc.n	8010024 <clust2sect+0x20>
 8010020:	2300      	movs	r3, #0
 8010022:	e008      	b.n	8010036 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	895b      	ldrh	r3, [r3, #10]
 8010028:	461a      	mov	r2, r3
 801002a:	683b      	ldr	r3, [r7, #0]
 801002c:	fb03 f202 	mul.w	r2, r3, r2
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010034:	4413      	add	r3, r2
}
 8010036:	4618      	mov	r0, r3
 8010038:	370c      	adds	r7, #12
 801003a:	46bd      	mov	sp, r7
 801003c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010040:	4770      	bx	lr
	...

08010044 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010044:	b590      	push	{r4, r7, lr}
 8010046:	b089      	sub	sp, #36	; 0x24
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
 801004c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010054:	683b      	ldr	r3, [r7, #0]
 8010056:	2b01      	cmp	r3, #1
 8010058:	d904      	bls.n	8010064 <get_fat+0x20>
 801005a:	69bb      	ldr	r3, [r7, #24]
 801005c:	6a1b      	ldr	r3, [r3, #32]
 801005e:	683a      	ldr	r2, [r7, #0]
 8010060:	429a      	cmp	r2, r3
 8010062:	d302      	bcc.n	801006a <get_fat+0x26>
		val = 1;	/* Internal error */
 8010064:	2301      	movs	r3, #1
 8010066:	61fb      	str	r3, [r7, #28]
 8010068:	e13a      	b.n	80102e0 <get_fat+0x29c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801006a:	f04f 33ff 	mov.w	r3, #4294967295
 801006e:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 8010070:	69bb      	ldr	r3, [r7, #24]
 8010072:	781b      	ldrb	r3, [r3, #0]
 8010074:	3b01      	subs	r3, #1
 8010076:	2b03      	cmp	r3, #3
 8010078:	f200 8126 	bhi.w	80102c8 <get_fat+0x284>
 801007c:	a201      	add	r2, pc, #4	; (adr r2, 8010084 <get_fat+0x40>)
 801007e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010082:	bf00      	nop
 8010084:	08010095 	.word	0x08010095
 8010088:	08010143 	.word	0x08010143
 801008c:	0801018f 	.word	0x0801018f
 8010090:	080101df 	.word	0x080101df
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010094:	683b      	ldr	r3, [r7, #0]
 8010096:	60fb      	str	r3, [r7, #12]
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	085b      	lsrs	r3, r3, #1
 801009c:	68fa      	ldr	r2, [r7, #12]
 801009e:	4413      	add	r3, r2
 80100a0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80100a2:	69bb      	ldr	r3, [r7, #24]
 80100a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100a6:	69bb      	ldr	r3, [r7, #24]
 80100a8:	899b      	ldrh	r3, [r3, #12]
 80100aa:	4619      	mov	r1, r3
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80100b2:	4413      	add	r3, r2
 80100b4:	4619      	mov	r1, r3
 80100b6:	69b8      	ldr	r0, [r7, #24]
 80100b8:	f7ff ff06 	bl	800fec8 <move_window>
 80100bc:	4603      	mov	r3, r0
 80100be:	2b00      	cmp	r3, #0
 80100c0:	f040 8105 	bne.w	80102ce <get_fat+0x28a>
			wc = fs->win[bc++ % SS(fs)];
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	1c5a      	adds	r2, r3, #1
 80100c8:	60fa      	str	r2, [r7, #12]
 80100ca:	69ba      	ldr	r2, [r7, #24]
 80100cc:	8992      	ldrh	r2, [r2, #12]
 80100ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80100d2:	fb02 f201 	mul.w	r2, r2, r1
 80100d6:	1a9b      	subs	r3, r3, r2
 80100d8:	69ba      	ldr	r2, [r7, #24]
 80100da:	4413      	add	r3, r2
 80100dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80100e0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80100e2:	69bb      	ldr	r3, [r7, #24]
 80100e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100e6:	69bb      	ldr	r3, [r7, #24]
 80100e8:	899b      	ldrh	r3, [r3, #12]
 80100ea:	4619      	mov	r1, r3
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80100f2:	4413      	add	r3, r2
 80100f4:	4619      	mov	r1, r3
 80100f6:	69b8      	ldr	r0, [r7, #24]
 80100f8:	f7ff fee6 	bl	800fec8 <move_window>
 80100fc:	4603      	mov	r3, r0
 80100fe:	2b00      	cmp	r3, #0
 8010100:	f040 80e7 	bne.w	80102d2 <get_fat+0x28e>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010104:	69bb      	ldr	r3, [r7, #24]
 8010106:	899b      	ldrh	r3, [r3, #12]
 8010108:	461a      	mov	r2, r3
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010110:	fb02 f201 	mul.w	r2, r2, r1
 8010114:	1a9b      	subs	r3, r3, r2
 8010116:	69ba      	ldr	r2, [r7, #24]
 8010118:	4413      	add	r3, r2
 801011a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801011e:	021b      	lsls	r3, r3, #8
 8010120:	461a      	mov	r2, r3
 8010122:	68bb      	ldr	r3, [r7, #8]
 8010124:	4313      	orrs	r3, r2
 8010126:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010128:	683b      	ldr	r3, [r7, #0]
 801012a:	f003 0301 	and.w	r3, r3, #1
 801012e:	2b00      	cmp	r3, #0
 8010130:	d002      	beq.n	8010138 <get_fat+0xf4>
 8010132:	68bb      	ldr	r3, [r7, #8]
 8010134:	091b      	lsrs	r3, r3, #4
 8010136:	e002      	b.n	801013e <get_fat+0xfa>
 8010138:	68bb      	ldr	r3, [r7, #8]
 801013a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801013e:	61fb      	str	r3, [r7, #28]
			break;
 8010140:	e0ce      	b.n	80102e0 <get_fat+0x29c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010142:	69bb      	ldr	r3, [r7, #24]
 8010144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010146:	69bb      	ldr	r3, [r7, #24]
 8010148:	899b      	ldrh	r3, [r3, #12]
 801014a:	085b      	lsrs	r3, r3, #1
 801014c:	b29b      	uxth	r3, r3
 801014e:	4619      	mov	r1, r3
 8010150:	683b      	ldr	r3, [r7, #0]
 8010152:	fbb3 f3f1 	udiv	r3, r3, r1
 8010156:	4413      	add	r3, r2
 8010158:	4619      	mov	r1, r3
 801015a:	69b8      	ldr	r0, [r7, #24]
 801015c:	f7ff feb4 	bl	800fec8 <move_window>
 8010160:	4603      	mov	r3, r0
 8010162:	2b00      	cmp	r3, #0
 8010164:	f040 80b7 	bne.w	80102d6 <get_fat+0x292>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010168:	69bb      	ldr	r3, [r7, #24]
 801016a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801016e:	683b      	ldr	r3, [r7, #0]
 8010170:	005b      	lsls	r3, r3, #1
 8010172:	69ba      	ldr	r2, [r7, #24]
 8010174:	8992      	ldrh	r2, [r2, #12]
 8010176:	fbb3 f0f2 	udiv	r0, r3, r2
 801017a:	fb02 f200 	mul.w	r2, r2, r0
 801017e:	1a9b      	subs	r3, r3, r2
 8010180:	440b      	add	r3, r1
 8010182:	4618      	mov	r0, r3
 8010184:	f7ff faac 	bl	800f6e0 <ld_word>
 8010188:	4603      	mov	r3, r0
 801018a:	61fb      	str	r3, [r7, #28]
			break;
 801018c:	e0a8      	b.n	80102e0 <get_fat+0x29c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801018e:	69bb      	ldr	r3, [r7, #24]
 8010190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010192:	69bb      	ldr	r3, [r7, #24]
 8010194:	899b      	ldrh	r3, [r3, #12]
 8010196:	089b      	lsrs	r3, r3, #2
 8010198:	b29b      	uxth	r3, r3
 801019a:	4619      	mov	r1, r3
 801019c:	683b      	ldr	r3, [r7, #0]
 801019e:	fbb3 f3f1 	udiv	r3, r3, r1
 80101a2:	4413      	add	r3, r2
 80101a4:	4619      	mov	r1, r3
 80101a6:	69b8      	ldr	r0, [r7, #24]
 80101a8:	f7ff fe8e 	bl	800fec8 <move_window>
 80101ac:	4603      	mov	r3, r0
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	f040 8093 	bne.w	80102da <get_fat+0x296>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80101b4:	69bb      	ldr	r3, [r7, #24]
 80101b6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80101ba:	683b      	ldr	r3, [r7, #0]
 80101bc:	009b      	lsls	r3, r3, #2
 80101be:	69ba      	ldr	r2, [r7, #24]
 80101c0:	8992      	ldrh	r2, [r2, #12]
 80101c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80101c6:	fb02 f200 	mul.w	r2, r2, r0
 80101ca:	1a9b      	subs	r3, r3, r2
 80101cc:	440b      	add	r3, r1
 80101ce:	4618      	mov	r0, r3
 80101d0:	f7ff fa9e 	bl	800f710 <ld_dword>
 80101d4:	4603      	mov	r3, r0
 80101d6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80101da:	61fb      	str	r3, [r7, #28]
			break;
 80101dc:	e080      	b.n	80102e0 <get_fat+0x29c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80101e4:	4323      	orrs	r3, r4
 80101e6:	d06f      	beq.n	80102c8 <get_fat+0x284>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	689b      	ldr	r3, [r3, #8]
 80101ec:	683a      	ldr	r2, [r7, #0]
 80101ee:	1ad3      	subs	r3, r2, r3
 80101f0:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80101f8:	f113 30ff 	adds.w	r0, r3, #4294967295
 80101fc:	f144 31ff 	adc.w	r1, r4, #4294967295
 8010200:	69bb      	ldr	r3, [r7, #24]
 8010202:	899b      	ldrh	r3, [r3, #12]
 8010204:	b29b      	uxth	r3, r3
 8010206:	f04f 0400 	mov.w	r4, #0
 801020a:	461a      	mov	r2, r3
 801020c:	4623      	mov	r3, r4
 801020e:	f7f0 f863 	bl	80002d8 <__aeabi_uldivmod>
 8010212:	4603      	mov	r3, r0
 8010214:	460c      	mov	r4, r1
 8010216:	461a      	mov	r2, r3
 8010218:	69bb      	ldr	r3, [r7, #24]
 801021a:	895b      	ldrh	r3, [r3, #10]
 801021c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010220:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	79db      	ldrb	r3, [r3, #7]
 8010226:	2b02      	cmp	r3, #2
 8010228:	d10e      	bne.n	8010248 <get_fat+0x204>
					if (cofs <= clen) {
 801022a:	697a      	ldr	r2, [r7, #20]
 801022c:	693b      	ldr	r3, [r7, #16]
 801022e:	429a      	cmp	r2, r3
 8010230:	d80a      	bhi.n	8010248 <get_fat+0x204>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8010232:	697a      	ldr	r2, [r7, #20]
 8010234:	693b      	ldr	r3, [r7, #16]
 8010236:	429a      	cmp	r2, r3
 8010238:	d002      	beq.n	8010240 <get_fat+0x1fc>
 801023a:	683b      	ldr	r3, [r7, #0]
 801023c:	3301      	adds	r3, #1
 801023e:	e001      	b.n	8010244 <get_fat+0x200>
 8010240:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010244:	61fb      	str	r3, [r7, #28]
						break;
 8010246:	e04b      	b.n	80102e0 <get_fat+0x29c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	79db      	ldrb	r3, [r3, #7]
 801024c:	2b03      	cmp	r3, #3
 801024e:	d108      	bne.n	8010262 <get_fat+0x21e>
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	699b      	ldr	r3, [r3, #24]
 8010254:	697a      	ldr	r2, [r7, #20]
 8010256:	429a      	cmp	r2, r3
 8010258:	d203      	bcs.n	8010262 <get_fat+0x21e>
					val = clst + 1; 	/* Generate the value */
 801025a:	683b      	ldr	r3, [r7, #0]
 801025c:	3301      	adds	r3, #1
 801025e:	61fb      	str	r3, [r7, #28]
					break;
 8010260:	e03e      	b.n	80102e0 <get_fat+0x29c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	79db      	ldrb	r3, [r3, #7]
 8010266:	2b02      	cmp	r3, #2
 8010268:	d02e      	beq.n	80102c8 <get_fat+0x284>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	69db      	ldr	r3, [r3, #28]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d003      	beq.n	801027a <get_fat+0x236>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8010272:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010276:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8010278:	e032      	b.n	80102e0 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801027a:	69bb      	ldr	r3, [r7, #24]
 801027c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801027e:	69bb      	ldr	r3, [r7, #24]
 8010280:	899b      	ldrh	r3, [r3, #12]
 8010282:	089b      	lsrs	r3, r3, #2
 8010284:	b29b      	uxth	r3, r3
 8010286:	4619      	mov	r1, r3
 8010288:	683b      	ldr	r3, [r7, #0]
 801028a:	fbb3 f3f1 	udiv	r3, r3, r1
 801028e:	4413      	add	r3, r2
 8010290:	4619      	mov	r1, r3
 8010292:	69b8      	ldr	r0, [r7, #24]
 8010294:	f7ff fe18 	bl	800fec8 <move_window>
 8010298:	4603      	mov	r3, r0
 801029a:	2b00      	cmp	r3, #0
 801029c:	d11f      	bne.n	80102de <get_fat+0x29a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 801029e:	69bb      	ldr	r3, [r7, #24]
 80102a0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80102a4:	683b      	ldr	r3, [r7, #0]
 80102a6:	009b      	lsls	r3, r3, #2
 80102a8:	69ba      	ldr	r2, [r7, #24]
 80102aa:	8992      	ldrh	r2, [r2, #12]
 80102ac:	fbb3 f0f2 	udiv	r0, r3, r2
 80102b0:	fb02 f200 	mul.w	r2, r2, r0
 80102b4:	1a9b      	subs	r3, r3, r2
 80102b6:	440b      	add	r3, r1
 80102b8:	4618      	mov	r0, r3
 80102ba:	f7ff fa29 	bl	800f710 <ld_dword>
 80102be:	4603      	mov	r3, r0
 80102c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80102c4:	61fb      	str	r3, [r7, #28]
					break;
 80102c6:	e00b      	b.n	80102e0 <get_fat+0x29c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80102c8:	2301      	movs	r3, #1
 80102ca:	61fb      	str	r3, [r7, #28]
 80102cc:	e008      	b.n	80102e0 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80102ce:	bf00      	nop
 80102d0:	e006      	b.n	80102e0 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80102d2:	bf00      	nop
 80102d4:	e004      	b.n	80102e0 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80102d6:	bf00      	nop
 80102d8:	e002      	b.n	80102e0 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80102da:	bf00      	nop
 80102dc:	e000      	b.n	80102e0 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80102de:	bf00      	nop
		}
	}

	return val;
 80102e0:	69fb      	ldr	r3, [r7, #28]
}
 80102e2:	4618      	mov	r0, r3
 80102e4:	3724      	adds	r7, #36	; 0x24
 80102e6:	46bd      	mov	sp, r7
 80102e8:	bd90      	pop	{r4, r7, pc}
 80102ea:	bf00      	nop

080102ec <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80102ec:	b590      	push	{r4, r7, lr}
 80102ee:	b089      	sub	sp, #36	; 0x24
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	60f8      	str	r0, [r7, #12]
 80102f4:	60b9      	str	r1, [r7, #8]
 80102f6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80102f8:	2302      	movs	r3, #2
 80102fa:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80102fc:	68bb      	ldr	r3, [r7, #8]
 80102fe:	2b01      	cmp	r3, #1
 8010300:	f240 8111 	bls.w	8010526 <put_fat+0x23a>
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	6a1b      	ldr	r3, [r3, #32]
 8010308:	68ba      	ldr	r2, [r7, #8]
 801030a:	429a      	cmp	r2, r3
 801030c:	f080 810b 	bcs.w	8010526 <put_fat+0x23a>
		switch (fs->fs_type) {
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	781b      	ldrb	r3, [r3, #0]
 8010314:	3b01      	subs	r3, #1
 8010316:	2b03      	cmp	r3, #3
 8010318:	f200 8105 	bhi.w	8010526 <put_fat+0x23a>
 801031c:	a201      	add	r2, pc, #4	; (adr r2, 8010324 <put_fat+0x38>)
 801031e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010322:	bf00      	nop
 8010324:	08010335 	.word	0x08010335
 8010328:	08010439 	.word	0x08010439
 801032c:	0801048f 	.word	0x0801048f
 8010330:	0801048f 	.word	0x0801048f
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010334:	68bb      	ldr	r3, [r7, #8]
 8010336:	61bb      	str	r3, [r7, #24]
 8010338:	69bb      	ldr	r3, [r7, #24]
 801033a:	085b      	lsrs	r3, r3, #1
 801033c:	69ba      	ldr	r2, [r7, #24]
 801033e:	4413      	add	r3, r2
 8010340:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	899b      	ldrh	r3, [r3, #12]
 801034a:	4619      	mov	r1, r3
 801034c:	69bb      	ldr	r3, [r7, #24]
 801034e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010352:	4413      	add	r3, r2
 8010354:	4619      	mov	r1, r3
 8010356:	68f8      	ldr	r0, [r7, #12]
 8010358:	f7ff fdb6 	bl	800fec8 <move_window>
 801035c:	4603      	mov	r3, r0
 801035e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010360:	7ffb      	ldrb	r3, [r7, #31]
 8010362:	2b00      	cmp	r3, #0
 8010364:	f040 80d8 	bne.w	8010518 <put_fat+0x22c>
			p = fs->win + bc++ % SS(fs);
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801036e:	69bb      	ldr	r3, [r7, #24]
 8010370:	1c5a      	adds	r2, r3, #1
 8010372:	61ba      	str	r2, [r7, #24]
 8010374:	68fa      	ldr	r2, [r7, #12]
 8010376:	8992      	ldrh	r2, [r2, #12]
 8010378:	fbb3 f0f2 	udiv	r0, r3, r2
 801037c:	fb02 f200 	mul.w	r2, r2, r0
 8010380:	1a9b      	subs	r3, r3, r2
 8010382:	440b      	add	r3, r1
 8010384:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010386:	68bb      	ldr	r3, [r7, #8]
 8010388:	f003 0301 	and.w	r3, r3, #1
 801038c:	2b00      	cmp	r3, #0
 801038e:	d00d      	beq.n	80103ac <put_fat+0xc0>
 8010390:	697b      	ldr	r3, [r7, #20]
 8010392:	781b      	ldrb	r3, [r3, #0]
 8010394:	b25b      	sxtb	r3, r3
 8010396:	f003 030f 	and.w	r3, r3, #15
 801039a:	b25a      	sxtb	r2, r3
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	b2db      	uxtb	r3, r3
 80103a0:	011b      	lsls	r3, r3, #4
 80103a2:	b25b      	sxtb	r3, r3
 80103a4:	4313      	orrs	r3, r2
 80103a6:	b25b      	sxtb	r3, r3
 80103a8:	b2db      	uxtb	r3, r3
 80103aa:	e001      	b.n	80103b0 <put_fat+0xc4>
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	b2db      	uxtb	r3, r3
 80103b0:	697a      	ldr	r2, [r7, #20]
 80103b2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	2201      	movs	r2, #1
 80103b8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	899b      	ldrh	r3, [r3, #12]
 80103c2:	4619      	mov	r1, r3
 80103c4:	69bb      	ldr	r3, [r7, #24]
 80103c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80103ca:	4413      	add	r3, r2
 80103cc:	4619      	mov	r1, r3
 80103ce:	68f8      	ldr	r0, [r7, #12]
 80103d0:	f7ff fd7a 	bl	800fec8 <move_window>
 80103d4:	4603      	mov	r3, r0
 80103d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80103d8:	7ffb      	ldrb	r3, [r7, #31]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	f040 809e 	bne.w	801051c <put_fat+0x230>
			p = fs->win + bc % SS(fs);
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	899b      	ldrh	r3, [r3, #12]
 80103ea:	461a      	mov	r2, r3
 80103ec:	69bb      	ldr	r3, [r7, #24]
 80103ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80103f2:	fb02 f200 	mul.w	r2, r2, r0
 80103f6:	1a9b      	subs	r3, r3, r2
 80103f8:	440b      	add	r3, r1
 80103fa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80103fc:	68bb      	ldr	r3, [r7, #8]
 80103fe:	f003 0301 	and.w	r3, r3, #1
 8010402:	2b00      	cmp	r3, #0
 8010404:	d003      	beq.n	801040e <put_fat+0x122>
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	091b      	lsrs	r3, r3, #4
 801040a:	b2db      	uxtb	r3, r3
 801040c:	e00e      	b.n	801042c <put_fat+0x140>
 801040e:	697b      	ldr	r3, [r7, #20]
 8010410:	781b      	ldrb	r3, [r3, #0]
 8010412:	b25b      	sxtb	r3, r3
 8010414:	f023 030f 	bic.w	r3, r3, #15
 8010418:	b25a      	sxtb	r2, r3
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	0a1b      	lsrs	r3, r3, #8
 801041e:	b25b      	sxtb	r3, r3
 8010420:	f003 030f 	and.w	r3, r3, #15
 8010424:	b25b      	sxtb	r3, r3
 8010426:	4313      	orrs	r3, r2
 8010428:	b25b      	sxtb	r3, r3
 801042a:	b2db      	uxtb	r3, r3
 801042c:	697a      	ldr	r2, [r7, #20]
 801042e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	2201      	movs	r2, #1
 8010434:	70da      	strb	r2, [r3, #3]
			break;
 8010436:	e076      	b.n	8010526 <put_fat+0x23a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	899b      	ldrh	r3, [r3, #12]
 8010440:	085b      	lsrs	r3, r3, #1
 8010442:	b29b      	uxth	r3, r3
 8010444:	4619      	mov	r1, r3
 8010446:	68bb      	ldr	r3, [r7, #8]
 8010448:	fbb3 f3f1 	udiv	r3, r3, r1
 801044c:	4413      	add	r3, r2
 801044e:	4619      	mov	r1, r3
 8010450:	68f8      	ldr	r0, [r7, #12]
 8010452:	f7ff fd39 	bl	800fec8 <move_window>
 8010456:	4603      	mov	r3, r0
 8010458:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801045a:	7ffb      	ldrb	r3, [r7, #31]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d15f      	bne.n	8010520 <put_fat+0x234>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010466:	68bb      	ldr	r3, [r7, #8]
 8010468:	005b      	lsls	r3, r3, #1
 801046a:	68fa      	ldr	r2, [r7, #12]
 801046c:	8992      	ldrh	r2, [r2, #12]
 801046e:	fbb3 f0f2 	udiv	r0, r3, r2
 8010472:	fb02 f200 	mul.w	r2, r2, r0
 8010476:	1a9b      	subs	r3, r3, r2
 8010478:	440b      	add	r3, r1
 801047a:	687a      	ldr	r2, [r7, #4]
 801047c:	b292      	uxth	r2, r2
 801047e:	4611      	mov	r1, r2
 8010480:	4618      	mov	r0, r3
 8010482:	f7ff fa25 	bl	800f8d0 <st_word>
			fs->wflag = 1;
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	2201      	movs	r2, #1
 801048a:	70da      	strb	r2, [r3, #3]
			break;
 801048c:	e04b      	b.n	8010526 <put_fat+0x23a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	899b      	ldrh	r3, [r3, #12]
 8010496:	089b      	lsrs	r3, r3, #2
 8010498:	b29b      	uxth	r3, r3
 801049a:	4619      	mov	r1, r3
 801049c:	68bb      	ldr	r3, [r7, #8]
 801049e:	fbb3 f3f1 	udiv	r3, r3, r1
 80104a2:	4413      	add	r3, r2
 80104a4:	4619      	mov	r1, r3
 80104a6:	68f8      	ldr	r0, [r7, #12]
 80104a8:	f7ff fd0e 	bl	800fec8 <move_window>
 80104ac:	4603      	mov	r3, r0
 80104ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80104b0:	7ffb      	ldrb	r3, [r7, #31]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d136      	bne.n	8010524 <put_fat+0x238>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	781b      	ldrb	r3, [r3, #0]
 80104ba:	2b04      	cmp	r3, #4
 80104bc:	d017      	beq.n	80104ee <put_fat+0x202>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80104ca:	68bb      	ldr	r3, [r7, #8]
 80104cc:	009b      	lsls	r3, r3, #2
 80104ce:	68fa      	ldr	r2, [r7, #12]
 80104d0:	8992      	ldrh	r2, [r2, #12]
 80104d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80104d6:	fb02 f200 	mul.w	r2, r2, r0
 80104da:	1a9b      	subs	r3, r3, r2
 80104dc:	440b      	add	r3, r1
 80104de:	4618      	mov	r0, r3
 80104e0:	f7ff f916 	bl	800f710 <ld_dword>
 80104e4:	4603      	mov	r3, r0
 80104e6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80104ea:	4323      	orrs	r3, r4
 80104ec:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80104f4:	68bb      	ldr	r3, [r7, #8]
 80104f6:	009b      	lsls	r3, r3, #2
 80104f8:	68fa      	ldr	r2, [r7, #12]
 80104fa:	8992      	ldrh	r2, [r2, #12]
 80104fc:	fbb3 f0f2 	udiv	r0, r3, r2
 8010500:	fb02 f200 	mul.w	r2, r2, r0
 8010504:	1a9b      	subs	r3, r3, r2
 8010506:	440b      	add	r3, r1
 8010508:	6879      	ldr	r1, [r7, #4]
 801050a:	4618      	mov	r0, r3
 801050c:	f7ff f9fb 	bl	800f906 <st_dword>
			fs->wflag = 1;
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	2201      	movs	r2, #1
 8010514:	70da      	strb	r2, [r3, #3]
			break;
 8010516:	e006      	b.n	8010526 <put_fat+0x23a>
			if (res != FR_OK) break;
 8010518:	bf00      	nop
 801051a:	e004      	b.n	8010526 <put_fat+0x23a>
			if (res != FR_OK) break;
 801051c:	bf00      	nop
 801051e:	e002      	b.n	8010526 <put_fat+0x23a>
			if (res != FR_OK) break;
 8010520:	bf00      	nop
 8010522:	e000      	b.n	8010526 <put_fat+0x23a>
			if (res != FR_OK) break;
 8010524:	bf00      	nop
		}
	}
	return res;
 8010526:	7ffb      	ldrb	r3, [r7, #31]
}
 8010528:	4618      	mov	r0, r3
 801052a:	3724      	adds	r7, #36	; 0x24
 801052c:	46bd      	mov	sp, r7
 801052e:	bd90      	pop	{r4, r7, pc}

08010530 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8010530:	b580      	push	{r7, lr}
 8010532:	b08a      	sub	sp, #40	; 0x28
 8010534:	af00      	add	r7, sp, #0
 8010536:	60f8      	str	r0, [r7, #12]
 8010538:	60b9      	str	r1, [r7, #8]
 801053a:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 801053c:	68bb      	ldr	r3, [r7, #8]
 801053e:	3b02      	subs	r3, #2
 8010540:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	6a1b      	ldr	r3, [r3, #32]
 8010546:	3b02      	subs	r3, #2
 8010548:	68ba      	ldr	r2, [r7, #8]
 801054a:	429a      	cmp	r2, r3
 801054c:	d301      	bcc.n	8010552 <find_bitmap+0x22>
 801054e:	2300      	movs	r3, #0
 8010550:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 8010552:	68bb      	ldr	r3, [r7, #8]
 8010554:	61fb      	str	r3, [r7, #28]
 8010556:	69fb      	ldr	r3, [r7, #28]
 8010558:	61bb      	str	r3, [r7, #24]
 801055a:	2300      	movs	r3, #0
 801055c:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010562:	69fb      	ldr	r3, [r7, #28]
 8010564:	08db      	lsrs	r3, r3, #3
 8010566:	68f9      	ldr	r1, [r7, #12]
 8010568:	8989      	ldrh	r1, [r1, #12]
 801056a:	fbb3 f3f1 	udiv	r3, r3, r1
 801056e:	4413      	add	r3, r2
 8010570:	4619      	mov	r1, r3
 8010572:	68f8      	ldr	r0, [r7, #12]
 8010574:	f7ff fca8 	bl	800fec8 <move_window>
 8010578:	4603      	mov	r3, r0
 801057a:	2b00      	cmp	r3, #0
 801057c:	d002      	beq.n	8010584 <find_bitmap+0x54>
 801057e:	f04f 33ff 	mov.w	r3, #4294967295
 8010582:	e058      	b.n	8010636 <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8010584:	69fb      	ldr	r3, [r7, #28]
 8010586:	08db      	lsrs	r3, r3, #3
 8010588:	68fa      	ldr	r2, [r7, #12]
 801058a:	8992      	ldrh	r2, [r2, #12]
 801058c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010590:	fb02 f201 	mul.w	r2, r2, r1
 8010594:	1a9b      	subs	r3, r3, r2
 8010596:	623b      	str	r3, [r7, #32]
 8010598:	69fb      	ldr	r3, [r7, #28]
 801059a:	f003 0307 	and.w	r3, r3, #7
 801059e:	2201      	movs	r2, #1
 80105a0:	fa02 f303 	lsl.w	r3, r2, r3
 80105a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 80105a8:	68fa      	ldr	r2, [r7, #12]
 80105aa:	6a3b      	ldr	r3, [r7, #32]
 80105ac:	4413      	add	r3, r2
 80105ae:	333c      	adds	r3, #60	; 0x3c
 80105b0:	781a      	ldrb	r2, [r3, #0]
 80105b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80105b6:	4013      	ands	r3, r2
 80105b8:	74fb      	strb	r3, [r7, #19]
 80105ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80105be:	005b      	lsls	r3, r3, #1
 80105c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 80105c4:	69fb      	ldr	r3, [r7, #28]
 80105c6:	3301      	adds	r3, #1
 80105c8:	61fb      	str	r3, [r7, #28]
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	6a1b      	ldr	r3, [r3, #32]
 80105ce:	3b02      	subs	r3, #2
 80105d0:	69fa      	ldr	r2, [r7, #28]
 80105d2:	429a      	cmp	r2, r3
 80105d4:	d307      	bcc.n	80105e6 <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 80105d6:	2300      	movs	r3, #0
 80105d8:	61fb      	str	r3, [r7, #28]
 80105da:	2300      	movs	r3, #0
 80105dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	899b      	ldrh	r3, [r3, #12]
 80105e4:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 80105e6:	7cfb      	ldrb	r3, [r7, #19]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d109      	bne.n	8010600 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 80105ec:	697b      	ldr	r3, [r7, #20]
 80105ee:	3301      	adds	r3, #1
 80105f0:	617b      	str	r3, [r7, #20]
 80105f2:	697a      	ldr	r2, [r7, #20]
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	429a      	cmp	r2, r3
 80105f8:	d106      	bne.n	8010608 <find_bitmap+0xd8>
 80105fa:	69bb      	ldr	r3, [r7, #24]
 80105fc:	3302      	adds	r3, #2
 80105fe:	e01a      	b.n	8010636 <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8010600:	69fb      	ldr	r3, [r7, #28]
 8010602:	61bb      	str	r3, [r7, #24]
 8010604:	2300      	movs	r3, #0
 8010606:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 8010608:	69fa      	ldr	r2, [r7, #28]
 801060a:	68bb      	ldr	r3, [r7, #8]
 801060c:	429a      	cmp	r2, r3
 801060e:	d101      	bne.n	8010614 <find_bitmap+0xe4>
 8010610:	2300      	movs	r3, #0
 8010612:	e010      	b.n	8010636 <find_bitmap+0x106>
			} while (bm);
 8010614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010618:	2b00      	cmp	r3, #0
 801061a:	d1c5      	bne.n	80105a8 <find_bitmap+0x78>
			bm = 1;
 801061c:	2301      	movs	r3, #1
 801061e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 8010622:	6a3b      	ldr	r3, [r7, #32]
 8010624:	3301      	adds	r3, #1
 8010626:	623b      	str	r3, [r7, #32]
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	899b      	ldrh	r3, [r3, #12]
 801062c:	461a      	mov	r2, r3
 801062e:	6a3b      	ldr	r3, [r7, #32]
 8010630:	4293      	cmp	r3, r2
 8010632:	d3b9      	bcc.n	80105a8 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8010634:	e793      	b.n	801055e <find_bitmap+0x2e>
	}
}
 8010636:	4618      	mov	r0, r3
 8010638:	3728      	adds	r7, #40	; 0x28
 801063a:	46bd      	mov	sp, r7
 801063c:	bd80      	pop	{r7, pc}

0801063e <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 801063e:	b580      	push	{r7, lr}
 8010640:	b088      	sub	sp, #32
 8010642:	af00      	add	r7, sp, #0
 8010644:	60f8      	str	r0, [r7, #12]
 8010646:	60b9      	str	r1, [r7, #8]
 8010648:	607a      	str	r2, [r7, #4]
 801064a:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 801064c:	68bb      	ldr	r3, [r7, #8]
 801064e:	3b02      	subs	r3, #2
 8010650:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010656:	68bb      	ldr	r3, [r7, #8]
 8010658:	08db      	lsrs	r3, r3, #3
 801065a:	68f9      	ldr	r1, [r7, #12]
 801065c:	8989      	ldrh	r1, [r1, #12]
 801065e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010662:	4413      	add	r3, r2
 8010664:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8010666:	68bb      	ldr	r3, [r7, #8]
 8010668:	08db      	lsrs	r3, r3, #3
 801066a:	68fa      	ldr	r2, [r7, #12]
 801066c:	8992      	ldrh	r2, [r2, #12]
 801066e:	fbb3 f1f2 	udiv	r1, r3, r2
 8010672:	fb02 f201 	mul.w	r2, r2, r1
 8010676:	1a9b      	subs	r3, r3, r2
 8010678:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 801067a:	68bb      	ldr	r3, [r7, #8]
 801067c:	f003 0307 	and.w	r3, r3, #7
 8010680:	2201      	movs	r2, #1
 8010682:	fa02 f303 	lsl.w	r3, r2, r3
 8010686:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8010688:	697b      	ldr	r3, [r7, #20]
 801068a:	1c5a      	adds	r2, r3, #1
 801068c:	617a      	str	r2, [r7, #20]
 801068e:	4619      	mov	r1, r3
 8010690:	68f8      	ldr	r0, [r7, #12]
 8010692:	f7ff fc19 	bl	800fec8 <move_window>
 8010696:	4603      	mov	r3, r0
 8010698:	2b00      	cmp	r3, #0
 801069a:	d001      	beq.n	80106a0 <change_bitmap+0x62>
 801069c:	2301      	movs	r3, #1
 801069e:	e03f      	b.n	8010720 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 80106a0:	68fa      	ldr	r2, [r7, #12]
 80106a2:	69bb      	ldr	r3, [r7, #24]
 80106a4:	4413      	add	r3, r2
 80106a6:	333c      	adds	r3, #60	; 0x3c
 80106a8:	781a      	ldrb	r2, [r3, #0]
 80106aa:	7ffb      	ldrb	r3, [r7, #31]
 80106ac:	4013      	ands	r3, r2
 80106ae:	b2db      	uxtb	r3, r3
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	bf14      	ite	ne
 80106b4:	2301      	movne	r3, #1
 80106b6:	2300      	moveq	r3, #0
 80106b8:	b2db      	uxtb	r3, r3
 80106ba:	461a      	mov	r2, r3
 80106bc:	683b      	ldr	r3, [r7, #0]
 80106be:	4293      	cmp	r3, r2
 80106c0:	d101      	bne.n	80106c6 <change_bitmap+0x88>
 80106c2:	2302      	movs	r3, #2
 80106c4:	e02c      	b.n	8010720 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 80106c6:	68fa      	ldr	r2, [r7, #12]
 80106c8:	69bb      	ldr	r3, [r7, #24]
 80106ca:	4413      	add	r3, r2
 80106cc:	333c      	adds	r3, #60	; 0x3c
 80106ce:	781a      	ldrb	r2, [r3, #0]
 80106d0:	7ffb      	ldrb	r3, [r7, #31]
 80106d2:	4053      	eors	r3, r2
 80106d4:	b2d9      	uxtb	r1, r3
 80106d6:	68fa      	ldr	r2, [r7, #12]
 80106d8:	69bb      	ldr	r3, [r7, #24]
 80106da:	4413      	add	r3, r2
 80106dc:	333c      	adds	r3, #60	; 0x3c
 80106de:	460a      	mov	r2, r1
 80106e0:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	2201      	movs	r2, #1
 80106e6:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	3b01      	subs	r3, #1
 80106ec:	607b      	str	r3, [r7, #4]
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d101      	bne.n	80106f8 <change_bitmap+0xba>
 80106f4:	2300      	movs	r3, #0
 80106f6:	e013      	b.n	8010720 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 80106f8:	7ffb      	ldrb	r3, [r7, #31]
 80106fa:	005b      	lsls	r3, r3, #1
 80106fc:	77fb      	strb	r3, [r7, #31]
 80106fe:	7ffb      	ldrb	r3, [r7, #31]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d1cd      	bne.n	80106a0 <change_bitmap+0x62>
			bm = 1;
 8010704:	2301      	movs	r3, #1
 8010706:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8010708:	69bb      	ldr	r3, [r7, #24]
 801070a:	3301      	adds	r3, #1
 801070c:	61bb      	str	r3, [r7, #24]
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	899b      	ldrh	r3, [r3, #12]
 8010712:	461a      	mov	r2, r3
 8010714:	69bb      	ldr	r3, [r7, #24]
 8010716:	4293      	cmp	r3, r2
 8010718:	d3c2      	bcc.n	80106a0 <change_bitmap+0x62>
		i = 0;
 801071a:	2300      	movs	r3, #0
 801071c:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 801071e:	e7b3      	b.n	8010688 <change_bitmap+0x4a>
	}
}
 8010720:	4618      	mov	r0, r3
 8010722:	3720      	adds	r7, #32
 8010724:	46bd      	mov	sp, r7
 8010726:	bd80      	pop	{r7, pc}

08010728 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8010728:	b580      	push	{r7, lr}
 801072a:	b086      	sub	sp, #24
 801072c:	af00      	add	r7, sp, #0
 801072e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	79db      	ldrb	r3, [r3, #7]
 8010734:	2b03      	cmp	r3, #3
 8010736:	d121      	bne.n	801077c <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	689b      	ldr	r3, [r3, #8]
 801073c:	617b      	str	r3, [r7, #20]
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	699b      	ldr	r3, [r3, #24]
 8010742:	613b      	str	r3, [r7, #16]
 8010744:	e014      	b.n	8010770 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	6818      	ldr	r0, [r3, #0]
 801074a:	697b      	ldr	r3, [r7, #20]
 801074c:	3301      	adds	r3, #1
 801074e:	461a      	mov	r2, r3
 8010750:	6979      	ldr	r1, [r7, #20]
 8010752:	f7ff fdcb 	bl	80102ec <put_fat>
 8010756:	4603      	mov	r3, r0
 8010758:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 801075a:	7bfb      	ldrb	r3, [r7, #15]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d001      	beq.n	8010764 <fill_first_frag+0x3c>
 8010760:	7bfb      	ldrb	r3, [r7, #15]
 8010762:	e00c      	b.n	801077e <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8010764:	697b      	ldr	r3, [r7, #20]
 8010766:	3301      	adds	r3, #1
 8010768:	617b      	str	r3, [r7, #20]
 801076a:	693b      	ldr	r3, [r7, #16]
 801076c:	3b01      	subs	r3, #1
 801076e:	613b      	str	r3, [r7, #16]
 8010770:	693b      	ldr	r3, [r7, #16]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d1e7      	bne.n	8010746 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	2200      	movs	r2, #0
 801077a:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 801077c:	2300      	movs	r3, #0
}
 801077e:	4618      	mov	r0, r3
 8010780:	3718      	adds	r7, #24
 8010782:	46bd      	mov	sp, r7
 8010784:	bd80      	pop	{r7, pc}

08010786 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 8010786:	b580      	push	{r7, lr}
 8010788:	b086      	sub	sp, #24
 801078a:	af00      	add	r7, sp, #0
 801078c:	60f8      	str	r0, [r7, #12]
 801078e:	60b9      	str	r1, [r7, #8]
 8010790:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8010792:	e020      	b.n	80107d6 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	6818      	ldr	r0, [r3, #0]
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	69db      	ldr	r3, [r3, #28]
 801079c:	68ba      	ldr	r2, [r7, #8]
 801079e:	1ad3      	subs	r3, r2, r3
 80107a0:	1c59      	adds	r1, r3, #1
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	69db      	ldr	r3, [r3, #28]
 80107a6:	2b01      	cmp	r3, #1
 80107a8:	d905      	bls.n	80107b6 <fill_last_frag+0x30>
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	69db      	ldr	r3, [r3, #28]
 80107ae:	68ba      	ldr	r2, [r7, #8]
 80107b0:	1ad3      	subs	r3, r2, r3
 80107b2:	3302      	adds	r3, #2
 80107b4:	e000      	b.n	80107b8 <fill_last_frag+0x32>
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	461a      	mov	r2, r3
 80107ba:	f7ff fd97 	bl	80102ec <put_fat>
 80107be:	4603      	mov	r3, r0
 80107c0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 80107c2:	7dfb      	ldrb	r3, [r7, #23]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d001      	beq.n	80107cc <fill_last_frag+0x46>
 80107c8:	7dfb      	ldrb	r3, [r7, #23]
 80107ca:	e009      	b.n	80107e0 <fill_last_frag+0x5a>
		obj->n_frag--;
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	69db      	ldr	r3, [r3, #28]
 80107d0:	1e5a      	subs	r2, r3, #1
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	69db      	ldr	r3, [r3, #28]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d1da      	bne.n	8010794 <fill_last_frag+0xe>
	}
	return FR_OK;
 80107de:	2300      	movs	r3, #0
}
 80107e0:	4618      	mov	r0, r3
 80107e2:	3718      	adds	r7, #24
 80107e4:	46bd      	mov	sp, r7
 80107e6:	bd80      	pop	{r7, pc}

080107e8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b08a      	sub	sp, #40	; 0x28
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	60f8      	str	r0, [r7, #12]
 80107f0:	60b9      	str	r1, [r7, #8]
 80107f2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80107f4:	2300      	movs	r3, #0
 80107f6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 80107fe:	68bb      	ldr	r3, [r7, #8]
 8010800:	627b      	str	r3, [r7, #36]	; 0x24
 8010802:	68bb      	ldr	r3, [r7, #8]
 8010804:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010806:	68bb      	ldr	r3, [r7, #8]
 8010808:	2b01      	cmp	r3, #1
 801080a:	d904      	bls.n	8010816 <remove_chain+0x2e>
 801080c:	69bb      	ldr	r3, [r7, #24]
 801080e:	6a1b      	ldr	r3, [r3, #32]
 8010810:	68ba      	ldr	r2, [r7, #8]
 8010812:	429a      	cmp	r2, r3
 8010814:	d301      	bcc.n	801081a <remove_chain+0x32>
 8010816:	2302      	movs	r3, #2
 8010818:	e096      	b.n	8010948 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d014      	beq.n	801084a <remove_chain+0x62>
 8010820:	69bb      	ldr	r3, [r7, #24]
 8010822:	781b      	ldrb	r3, [r3, #0]
 8010824:	2b04      	cmp	r3, #4
 8010826:	d103      	bne.n	8010830 <remove_chain+0x48>
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	79db      	ldrb	r3, [r3, #7]
 801082c:	2b02      	cmp	r3, #2
 801082e:	d00c      	beq.n	801084a <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010830:	f04f 32ff 	mov.w	r2, #4294967295
 8010834:	6879      	ldr	r1, [r7, #4]
 8010836:	69b8      	ldr	r0, [r7, #24]
 8010838:	f7ff fd58 	bl	80102ec <put_fat>
 801083c:	4603      	mov	r3, r0
 801083e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010840:	7ffb      	ldrb	r3, [r7, #31]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d001      	beq.n	801084a <remove_chain+0x62>
 8010846:	7ffb      	ldrb	r3, [r7, #31]
 8010848:	e07e      	b.n	8010948 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801084a:	68b9      	ldr	r1, [r7, #8]
 801084c:	68f8      	ldr	r0, [r7, #12]
 801084e:	f7ff fbf9 	bl	8010044 <get_fat>
 8010852:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010854:	697b      	ldr	r3, [r7, #20]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d055      	beq.n	8010906 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801085a:	697b      	ldr	r3, [r7, #20]
 801085c:	2b01      	cmp	r3, #1
 801085e:	d101      	bne.n	8010864 <remove_chain+0x7c>
 8010860:	2302      	movs	r3, #2
 8010862:	e071      	b.n	8010948 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010864:	697b      	ldr	r3, [r7, #20]
 8010866:	f1b3 3fff 	cmp.w	r3, #4294967295
 801086a:	d101      	bne.n	8010870 <remove_chain+0x88>
 801086c:	2301      	movs	r3, #1
 801086e:	e06b      	b.n	8010948 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8010870:	69bb      	ldr	r3, [r7, #24]
 8010872:	781b      	ldrb	r3, [r3, #0]
 8010874:	2b04      	cmp	r3, #4
 8010876:	d00b      	beq.n	8010890 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010878:	2200      	movs	r2, #0
 801087a:	68b9      	ldr	r1, [r7, #8]
 801087c:	69b8      	ldr	r0, [r7, #24]
 801087e:	f7ff fd35 	bl	80102ec <put_fat>
 8010882:	4603      	mov	r3, r0
 8010884:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010886:	7ffb      	ldrb	r3, [r7, #31]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d001      	beq.n	8010890 <remove_chain+0xa8>
 801088c:	7ffb      	ldrb	r3, [r7, #31]
 801088e:	e05b      	b.n	8010948 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010890:	69bb      	ldr	r3, [r7, #24]
 8010892:	69da      	ldr	r2, [r3, #28]
 8010894:	69bb      	ldr	r3, [r7, #24]
 8010896:	6a1b      	ldr	r3, [r3, #32]
 8010898:	3b02      	subs	r3, #2
 801089a:	429a      	cmp	r2, r3
 801089c:	d20b      	bcs.n	80108b6 <remove_chain+0xce>
			fs->free_clst++;
 801089e:	69bb      	ldr	r3, [r7, #24]
 80108a0:	69db      	ldr	r3, [r3, #28]
 80108a2:	1c5a      	adds	r2, r3, #1
 80108a4:	69bb      	ldr	r3, [r7, #24]
 80108a6:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 80108a8:	69bb      	ldr	r3, [r7, #24]
 80108aa:	791b      	ldrb	r3, [r3, #4]
 80108ac:	f043 0301 	orr.w	r3, r3, #1
 80108b0:	b2da      	uxtb	r2, r3
 80108b2:	69bb      	ldr	r3, [r7, #24]
 80108b4:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 80108b6:	6a3b      	ldr	r3, [r7, #32]
 80108b8:	3301      	adds	r3, #1
 80108ba:	697a      	ldr	r2, [r7, #20]
 80108bc:	429a      	cmp	r2, r3
 80108be:	d102      	bne.n	80108c6 <remove_chain+0xde>
			ecl = nxt;
 80108c0:	697b      	ldr	r3, [r7, #20]
 80108c2:	623b      	str	r3, [r7, #32]
 80108c4:	e017      	b.n	80108f6 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80108c6:	69bb      	ldr	r3, [r7, #24]
 80108c8:	781b      	ldrb	r3, [r3, #0]
 80108ca:	2b04      	cmp	r3, #4
 80108cc:	d10f      	bne.n	80108ee <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 80108ce:	6a3a      	ldr	r2, [r7, #32]
 80108d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108d2:	1ad3      	subs	r3, r2, r3
 80108d4:	1c5a      	adds	r2, r3, #1
 80108d6:	2300      	movs	r3, #0
 80108d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80108da:	69b8      	ldr	r0, [r7, #24]
 80108dc:	f7ff feaf 	bl	801063e <change_bitmap>
 80108e0:	4603      	mov	r3, r0
 80108e2:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 80108e4:	7ffb      	ldrb	r3, [r7, #31]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d001      	beq.n	80108ee <remove_chain+0x106>
 80108ea:	7ffb      	ldrb	r3, [r7, #31]
 80108ec:	e02c      	b.n	8010948 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 80108ee:	697b      	ldr	r3, [r7, #20]
 80108f0:	623b      	str	r3, [r7, #32]
 80108f2:	6a3b      	ldr	r3, [r7, #32]
 80108f4:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 80108f6:	697b      	ldr	r3, [r7, #20]
 80108f8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80108fa:	69bb      	ldr	r3, [r7, #24]
 80108fc:	6a1b      	ldr	r3, [r3, #32]
 80108fe:	68ba      	ldr	r2, [r7, #8]
 8010900:	429a      	cmp	r2, r3
 8010902:	d3a2      	bcc.n	801084a <remove_chain+0x62>
 8010904:	e000      	b.n	8010908 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 8010906:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8010908:	69bb      	ldr	r3, [r7, #24]
 801090a:	781b      	ldrb	r3, [r3, #0]
 801090c:	2b04      	cmp	r3, #4
 801090e:	d11a      	bne.n	8010946 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d103      	bne.n	801091e <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	2200      	movs	r2, #0
 801091a:	71da      	strb	r2, [r3, #7]
 801091c:	e013      	b.n	8010946 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	79db      	ldrb	r3, [r3, #7]
 8010922:	2b03      	cmp	r3, #3
 8010924:	d10f      	bne.n	8010946 <remove_chain+0x15e>
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	689b      	ldr	r3, [r3, #8]
 801092a:	687a      	ldr	r2, [r7, #4]
 801092c:	429a      	cmp	r2, r3
 801092e:	d30a      	bcc.n	8010946 <remove_chain+0x15e>
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	689a      	ldr	r2, [r3, #8]
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	699b      	ldr	r3, [r3, #24]
 8010938:	4413      	add	r3, r2
 801093a:	687a      	ldr	r2, [r7, #4]
 801093c:	429a      	cmp	r2, r3
 801093e:	d802      	bhi.n	8010946 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	2202      	movs	r2, #2
 8010944:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 8010946:	2300      	movs	r3, #0
}
 8010948:	4618      	mov	r0, r3
 801094a:	3728      	adds	r7, #40	; 0x28
 801094c:	46bd      	mov	sp, r7
 801094e:	bd80      	pop	{r7, pc}

08010950 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b088      	sub	sp, #32
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
 8010958:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010960:	683b      	ldr	r3, [r7, #0]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d10d      	bne.n	8010982 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8010966:	693b      	ldr	r3, [r7, #16]
 8010968:	699b      	ldr	r3, [r3, #24]
 801096a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801096c:	69bb      	ldr	r3, [r7, #24]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d004      	beq.n	801097c <create_chain+0x2c>
 8010972:	693b      	ldr	r3, [r7, #16]
 8010974:	6a1b      	ldr	r3, [r3, #32]
 8010976:	69ba      	ldr	r2, [r7, #24]
 8010978:	429a      	cmp	r2, r3
 801097a:	d31b      	bcc.n	80109b4 <create_chain+0x64>
 801097c:	2301      	movs	r3, #1
 801097e:	61bb      	str	r3, [r7, #24]
 8010980:	e018      	b.n	80109b4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010982:	6839      	ldr	r1, [r7, #0]
 8010984:	6878      	ldr	r0, [r7, #4]
 8010986:	f7ff fb5d 	bl	8010044 <get_fat>
 801098a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	2b01      	cmp	r3, #1
 8010990:	d801      	bhi.n	8010996 <create_chain+0x46>
 8010992:	2301      	movs	r3, #1
 8010994:	e0d9      	b.n	8010b4a <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	f1b3 3fff 	cmp.w	r3, #4294967295
 801099c:	d101      	bne.n	80109a2 <create_chain+0x52>
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	e0d3      	b.n	8010b4a <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80109a2:	693b      	ldr	r3, [r7, #16]
 80109a4:	6a1b      	ldr	r3, [r3, #32]
 80109a6:	68fa      	ldr	r2, [r7, #12]
 80109a8:	429a      	cmp	r2, r3
 80109aa:	d201      	bcs.n	80109b0 <create_chain+0x60>
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	e0cc      	b.n	8010b4a <create_chain+0x1fa>
		scl = clst;
 80109b0:	683b      	ldr	r3, [r7, #0]
 80109b2:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80109b4:	693b      	ldr	r3, [r7, #16]
 80109b6:	781b      	ldrb	r3, [r3, #0]
 80109b8:	2b04      	cmp	r3, #4
 80109ba:	d164      	bne.n	8010a86 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 80109bc:	2201      	movs	r2, #1
 80109be:	69b9      	ldr	r1, [r7, #24]
 80109c0:	6938      	ldr	r0, [r7, #16]
 80109c2:	f7ff fdb5 	bl	8010530 <find_bitmap>
 80109c6:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 80109c8:	69fb      	ldr	r3, [r7, #28]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d003      	beq.n	80109d6 <create_chain+0x86>
 80109ce:	69fb      	ldr	r3, [r7, #28]
 80109d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109d4:	d101      	bne.n	80109da <create_chain+0x8a>
 80109d6:	69fb      	ldr	r3, [r7, #28]
 80109d8:	e0b7      	b.n	8010b4a <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 80109da:	2301      	movs	r3, #1
 80109dc:	2201      	movs	r2, #1
 80109de:	69f9      	ldr	r1, [r7, #28]
 80109e0:	6938      	ldr	r0, [r7, #16]
 80109e2:	f7ff fe2c 	bl	801063e <change_bitmap>
 80109e6:	4603      	mov	r3, r0
 80109e8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 80109ea:	7dfb      	ldrb	r3, [r7, #23]
 80109ec:	2b02      	cmp	r3, #2
 80109ee:	d101      	bne.n	80109f4 <create_chain+0xa4>
 80109f0:	2301      	movs	r3, #1
 80109f2:	e0aa      	b.n	8010b4a <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 80109f4:	7dfb      	ldrb	r3, [r7, #23]
 80109f6:	2b01      	cmp	r3, #1
 80109f8:	d102      	bne.n	8010a00 <create_chain+0xb0>
 80109fa:	f04f 33ff 	mov.w	r3, #4294967295
 80109fe:	e0a4      	b.n	8010b4a <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 8010a00:	683b      	ldr	r3, [r7, #0]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d103      	bne.n	8010a0e <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	2202      	movs	r2, #2
 8010a0a:	71da      	strb	r2, [r3, #7]
 8010a0c:	e011      	b.n	8010a32 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	79db      	ldrb	r3, [r3, #7]
 8010a12:	2b02      	cmp	r3, #2
 8010a14:	d10d      	bne.n	8010a32 <create_chain+0xe2>
 8010a16:	69bb      	ldr	r3, [r7, #24]
 8010a18:	3301      	adds	r3, #1
 8010a1a:	69fa      	ldr	r2, [r7, #28]
 8010a1c:	429a      	cmp	r2, r3
 8010a1e:	d008      	beq.n	8010a32 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	689b      	ldr	r3, [r3, #8]
 8010a24:	69ba      	ldr	r2, [r7, #24]
 8010a26:	1ad2      	subs	r2, r2, r3
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	2203      	movs	r2, #3
 8010a30:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	79db      	ldrb	r3, [r3, #7]
 8010a36:	2b02      	cmp	r3, #2
 8010a38:	d064      	beq.n	8010b04 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8010a3a:	683b      	ldr	r3, [r7, #0]
 8010a3c:	3301      	adds	r3, #1
 8010a3e:	69fa      	ldr	r2, [r7, #28]
 8010a40:	429a      	cmp	r2, r3
 8010a42:	d10b      	bne.n	8010a5c <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	69db      	ldr	r3, [r3, #28]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d003      	beq.n	8010a54 <create_chain+0x104>
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	69db      	ldr	r3, [r3, #28]
 8010a50:	3301      	adds	r3, #1
 8010a52:	e000      	b.n	8010a56 <create_chain+0x106>
 8010a54:	2302      	movs	r3, #2
 8010a56:	687a      	ldr	r2, [r7, #4]
 8010a58:	61d3      	str	r3, [r2, #28]
 8010a5a:	e053      	b.n	8010b04 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	69db      	ldr	r3, [r3, #28]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d102      	bne.n	8010a6a <create_chain+0x11a>
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	2201      	movs	r2, #1
 8010a68:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8010a6a:	69fa      	ldr	r2, [r7, #28]
 8010a6c:	6839      	ldr	r1, [r7, #0]
 8010a6e:	6878      	ldr	r0, [r7, #4]
 8010a70:	f7ff fe89 	bl	8010786 <fill_last_frag>
 8010a74:	4603      	mov	r3, r0
 8010a76:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 8010a78:	7dfb      	ldrb	r3, [r7, #23]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d142      	bne.n	8010b04 <create_chain+0x1b4>
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	2201      	movs	r2, #1
 8010a82:	61da      	str	r2, [r3, #28]
 8010a84:	e03e      	b.n	8010b04 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010a86:	69bb      	ldr	r3, [r7, #24]
 8010a88:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8010a8a:	69fb      	ldr	r3, [r7, #28]
 8010a8c:	3301      	adds	r3, #1
 8010a8e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8010a90:	693b      	ldr	r3, [r7, #16]
 8010a92:	6a1b      	ldr	r3, [r3, #32]
 8010a94:	69fa      	ldr	r2, [r7, #28]
 8010a96:	429a      	cmp	r2, r3
 8010a98:	d307      	bcc.n	8010aaa <create_chain+0x15a>
				ncl = 2;
 8010a9a:	2302      	movs	r3, #2
 8010a9c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8010a9e:	69fa      	ldr	r2, [r7, #28]
 8010aa0:	69bb      	ldr	r3, [r7, #24]
 8010aa2:	429a      	cmp	r2, r3
 8010aa4:	d901      	bls.n	8010aaa <create_chain+0x15a>
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	e04f      	b.n	8010b4a <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010aaa:	69f9      	ldr	r1, [r7, #28]
 8010aac:	6878      	ldr	r0, [r7, #4]
 8010aae:	f7ff fac9 	bl	8010044 <get_fat>
 8010ab2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d00e      	beq.n	8010ad8 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	2b01      	cmp	r3, #1
 8010abe:	d003      	beq.n	8010ac8 <create_chain+0x178>
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ac6:	d101      	bne.n	8010acc <create_chain+0x17c>
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	e03e      	b.n	8010b4a <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 8010acc:	69fa      	ldr	r2, [r7, #28]
 8010ace:	69bb      	ldr	r3, [r7, #24]
 8010ad0:	429a      	cmp	r2, r3
 8010ad2:	d1da      	bne.n	8010a8a <create_chain+0x13a>
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	e038      	b.n	8010b4a <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 8010ad8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010ada:	f04f 32ff 	mov.w	r2, #4294967295
 8010ade:	69f9      	ldr	r1, [r7, #28]
 8010ae0:	6938      	ldr	r0, [r7, #16]
 8010ae2:	f7ff fc03 	bl	80102ec <put_fat>
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010aea:	7dfb      	ldrb	r3, [r7, #23]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d109      	bne.n	8010b04 <create_chain+0x1b4>
 8010af0:	683b      	ldr	r3, [r7, #0]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d006      	beq.n	8010b04 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010af6:	69fa      	ldr	r2, [r7, #28]
 8010af8:	6839      	ldr	r1, [r7, #0]
 8010afa:	6938      	ldr	r0, [r7, #16]
 8010afc:	f7ff fbf6 	bl	80102ec <put_fat>
 8010b00:	4603      	mov	r3, r0
 8010b02:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010b04:	7dfb      	ldrb	r3, [r7, #23]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d116      	bne.n	8010b38 <create_chain+0x1e8>
		fs->last_clst = ncl;
 8010b0a:	693b      	ldr	r3, [r7, #16]
 8010b0c:	69fa      	ldr	r2, [r7, #28]
 8010b0e:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010b10:	693b      	ldr	r3, [r7, #16]
 8010b12:	69da      	ldr	r2, [r3, #28]
 8010b14:	693b      	ldr	r3, [r7, #16]
 8010b16:	6a1b      	ldr	r3, [r3, #32]
 8010b18:	3b02      	subs	r3, #2
 8010b1a:	429a      	cmp	r2, r3
 8010b1c:	d804      	bhi.n	8010b28 <create_chain+0x1d8>
 8010b1e:	693b      	ldr	r3, [r7, #16]
 8010b20:	69db      	ldr	r3, [r3, #28]
 8010b22:	1e5a      	subs	r2, r3, #1
 8010b24:	693b      	ldr	r3, [r7, #16]
 8010b26:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 8010b28:	693b      	ldr	r3, [r7, #16]
 8010b2a:	791b      	ldrb	r3, [r3, #4]
 8010b2c:	f043 0301 	orr.w	r3, r3, #1
 8010b30:	b2da      	uxtb	r2, r3
 8010b32:	693b      	ldr	r3, [r7, #16]
 8010b34:	711a      	strb	r2, [r3, #4]
 8010b36:	e007      	b.n	8010b48 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010b38:	7dfb      	ldrb	r3, [r7, #23]
 8010b3a:	2b01      	cmp	r3, #1
 8010b3c:	d102      	bne.n	8010b44 <create_chain+0x1f4>
 8010b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8010b42:	e000      	b.n	8010b46 <create_chain+0x1f6>
 8010b44:	2301      	movs	r3, #1
 8010b46:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8010b48:	69fb      	ldr	r3, [r7, #28]
}
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	3720      	adds	r7, #32
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	bd80      	pop	{r7, pc}

08010b52 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010b52:	b590      	push	{r4, r7, lr}
 8010b54:	b089      	sub	sp, #36	; 0x24
 8010b56:	af00      	add	r7, sp, #0
 8010b58:	60f8      	str	r0, [r7, #12]
 8010b5a:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b68:	3304      	adds	r3, #4
 8010b6a:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8010b6c:	697b      	ldr	r3, [r7, #20]
 8010b6e:	899b      	ldrh	r3, [r3, #12]
 8010b70:	b29b      	uxth	r3, r3
 8010b72:	f04f 0400 	mov.w	r4, #0
 8010b76:	461a      	mov	r2, r3
 8010b78:	4623      	mov	r3, r4
 8010b7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010b7e:	f7ef fbab 	bl	80002d8 <__aeabi_uldivmod>
 8010b82:	4603      	mov	r3, r0
 8010b84:	460c      	mov	r4, r1
 8010b86:	4618      	mov	r0, r3
 8010b88:	4621      	mov	r1, r4
 8010b8a:	697b      	ldr	r3, [r7, #20]
 8010b8c:	895b      	ldrh	r3, [r3, #10]
 8010b8e:	b29b      	uxth	r3, r3
 8010b90:	f04f 0400 	mov.w	r4, #0
 8010b94:	461a      	mov	r2, r3
 8010b96:	4623      	mov	r3, r4
 8010b98:	f7ef fb9e 	bl	80002d8 <__aeabi_uldivmod>
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	460c      	mov	r4, r1
 8010ba0:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010ba2:	69bb      	ldr	r3, [r7, #24]
 8010ba4:	1d1a      	adds	r2, r3, #4
 8010ba6:	61ba      	str	r2, [r7, #24]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8010bac:	693b      	ldr	r3, [r7, #16]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d101      	bne.n	8010bb6 <clmt_clust+0x64>
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	e010      	b.n	8010bd8 <clmt_clust+0x86>
		if (cl < ncl) break;	/* In this fragment? */
 8010bb6:	69fa      	ldr	r2, [r7, #28]
 8010bb8:	693b      	ldr	r3, [r7, #16]
 8010bba:	429a      	cmp	r2, r3
 8010bbc:	d307      	bcc.n	8010bce <clmt_clust+0x7c>
		cl -= ncl; tbl++;		/* Next fragment */
 8010bbe:	69fa      	ldr	r2, [r7, #28]
 8010bc0:	693b      	ldr	r3, [r7, #16]
 8010bc2:	1ad3      	subs	r3, r2, r3
 8010bc4:	61fb      	str	r3, [r7, #28]
 8010bc6:	69bb      	ldr	r3, [r7, #24]
 8010bc8:	3304      	adds	r3, #4
 8010bca:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010bcc:	e7e9      	b.n	8010ba2 <clmt_clust+0x50>
		if (cl < ncl) break;	/* In this fragment? */
 8010bce:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010bd0:	69bb      	ldr	r3, [r7, #24]
 8010bd2:	681a      	ldr	r2, [r3, #0]
 8010bd4:	69fb      	ldr	r3, [r7, #28]
 8010bd6:	4413      	add	r3, r2
}
 8010bd8:	4618      	mov	r0, r3
 8010bda:	3724      	adds	r7, #36	; 0x24
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	bd90      	pop	{r4, r7, pc}

08010be0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b086      	sub	sp, #24
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
 8010be8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010bf0:	693b      	ldr	r3, [r7, #16]
 8010bf2:	781b      	ldrb	r3, [r3, #0]
 8010bf4:	2b04      	cmp	r3, #4
 8010bf6:	d102      	bne.n	8010bfe <dir_sdi+0x1e>
 8010bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bfc:	e001      	b.n	8010c02 <dir_sdi+0x22>
 8010bfe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8010c02:	683b      	ldr	r3, [r7, #0]
 8010c04:	429a      	cmp	r2, r3
 8010c06:	d904      	bls.n	8010c12 <dir_sdi+0x32>
 8010c08:	683b      	ldr	r3, [r7, #0]
 8010c0a:	f003 031f 	and.w	r3, r3, #31
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d001      	beq.n	8010c16 <dir_sdi+0x36>
		return FR_INT_ERR;
 8010c12:	2302      	movs	r3, #2
 8010c14:	e074      	b.n	8010d00 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	683a      	ldr	r2, [r7, #0]
 8010c1a:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	689b      	ldr	r3, [r3, #8]
 8010c20:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010c22:	697b      	ldr	r3, [r7, #20]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d109      	bne.n	8010c3c <dir_sdi+0x5c>
 8010c28:	693b      	ldr	r3, [r7, #16]
 8010c2a:	781b      	ldrb	r3, [r3, #0]
 8010c2c:	2b02      	cmp	r3, #2
 8010c2e:	d905      	bls.n	8010c3c <dir_sdi+0x5c>
		clst = fs->dirbase;
 8010c30:	693b      	ldr	r3, [r7, #16]
 8010c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c34:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	2200      	movs	r2, #0
 8010c3a:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010c3c:	697b      	ldr	r3, [r7, #20]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d10c      	bne.n	8010c5c <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010c42:	683b      	ldr	r3, [r7, #0]
 8010c44:	095b      	lsrs	r3, r3, #5
 8010c46:	693a      	ldr	r2, [r7, #16]
 8010c48:	8912      	ldrh	r2, [r2, #8]
 8010c4a:	4293      	cmp	r3, r2
 8010c4c:	d301      	bcc.n	8010c52 <dir_sdi+0x72>
 8010c4e:	2302      	movs	r3, #2
 8010c50:	e056      	b.n	8010d00 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 8010c52:	693b      	ldr	r3, [r7, #16]
 8010c54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	639a      	str	r2, [r3, #56]	; 0x38
 8010c5a:	e02d      	b.n	8010cb8 <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010c5c:	693b      	ldr	r3, [r7, #16]
 8010c5e:	895b      	ldrh	r3, [r3, #10]
 8010c60:	461a      	mov	r2, r3
 8010c62:	693b      	ldr	r3, [r7, #16]
 8010c64:	899b      	ldrh	r3, [r3, #12]
 8010c66:	fb03 f302 	mul.w	r3, r3, r2
 8010c6a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010c6c:	e019      	b.n	8010ca2 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	6979      	ldr	r1, [r7, #20]
 8010c72:	4618      	mov	r0, r3
 8010c74:	f7ff f9e6 	bl	8010044 <get_fat>
 8010c78:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010c7a:	697b      	ldr	r3, [r7, #20]
 8010c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c80:	d101      	bne.n	8010c86 <dir_sdi+0xa6>
 8010c82:	2301      	movs	r3, #1
 8010c84:	e03c      	b.n	8010d00 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8010c86:	697b      	ldr	r3, [r7, #20]
 8010c88:	2b01      	cmp	r3, #1
 8010c8a:	d904      	bls.n	8010c96 <dir_sdi+0xb6>
 8010c8c:	693b      	ldr	r3, [r7, #16]
 8010c8e:	6a1b      	ldr	r3, [r3, #32]
 8010c90:	697a      	ldr	r2, [r7, #20]
 8010c92:	429a      	cmp	r2, r3
 8010c94:	d301      	bcc.n	8010c9a <dir_sdi+0xba>
 8010c96:	2302      	movs	r3, #2
 8010c98:	e032      	b.n	8010d00 <dir_sdi+0x120>
			ofs -= csz;
 8010c9a:	683a      	ldr	r2, [r7, #0]
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	1ad3      	subs	r3, r2, r3
 8010ca0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010ca2:	683a      	ldr	r2, [r7, #0]
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	429a      	cmp	r2, r3
 8010ca8:	d2e1      	bcs.n	8010c6e <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 8010caa:	6979      	ldr	r1, [r7, #20]
 8010cac:	6938      	ldr	r0, [r7, #16]
 8010cae:	f7ff f9a9 	bl	8010004 <clust2sect>
 8010cb2:	4602      	mov	r2, r0
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	697a      	ldr	r2, [r7, #20]
 8010cbc:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d101      	bne.n	8010cca <dir_sdi+0xea>
 8010cc6:	2302      	movs	r3, #2
 8010cc8:	e01a      	b.n	8010d00 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010cce:	693b      	ldr	r3, [r7, #16]
 8010cd0:	899b      	ldrh	r3, [r3, #12]
 8010cd2:	4619      	mov	r1, r3
 8010cd4:	683b      	ldr	r3, [r7, #0]
 8010cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8010cda:	441a      	add	r2, r3
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8010ce0:	693b      	ldr	r3, [r7, #16]
 8010ce2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010ce6:	693b      	ldr	r3, [r7, #16]
 8010ce8:	899b      	ldrh	r3, [r3, #12]
 8010cea:	461a      	mov	r2, r3
 8010cec:	683b      	ldr	r3, [r7, #0]
 8010cee:	fbb3 f0f2 	udiv	r0, r3, r2
 8010cf2:	fb02 f200 	mul.w	r2, r2, r0
 8010cf6:	1a9b      	subs	r3, r3, r2
 8010cf8:	18ca      	adds	r2, r1, r3
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8010cfe:	2300      	movs	r3, #0
}
 8010d00:	4618      	mov	r0, r3
 8010d02:	3718      	adds	r7, #24
 8010d04:	46bd      	mov	sp, r7
 8010d06:	bd80      	pop	{r7, pc}

08010d08 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b086      	sub	sp, #24
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	6078      	str	r0, [r7, #4]
 8010d10:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d1c:	3320      	adds	r3, #32
 8010d1e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d00b      	beq.n	8010d40 <dir_next+0x38>
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	781b      	ldrb	r3, [r3, #0]
 8010d2c:	2b04      	cmp	r3, #4
 8010d2e:	d102      	bne.n	8010d36 <dir_next+0x2e>
 8010d30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d34:	e001      	b.n	8010d3a <dir_next+0x32>
 8010d36:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8010d3a:	68bb      	ldr	r3, [r7, #8]
 8010d3c:	429a      	cmp	r2, r3
 8010d3e:	d801      	bhi.n	8010d44 <dir_next+0x3c>
 8010d40:	2304      	movs	r3, #4
 8010d42:	e0c3      	b.n	8010ecc <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	899b      	ldrh	r3, [r3, #12]
 8010d48:	461a      	mov	r2, r3
 8010d4a:	68bb      	ldr	r3, [r7, #8]
 8010d4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010d50:	fb02 f201 	mul.w	r2, r2, r1
 8010d54:	1a9b      	subs	r3, r3, r2
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	f040 80a5 	bne.w	8010ea6 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d60:	1c5a      	adds	r2, r3, #1
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d10b      	bne.n	8010d86 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010d6e:	68bb      	ldr	r3, [r7, #8]
 8010d70:	095b      	lsrs	r3, r3, #5
 8010d72:	68fa      	ldr	r2, [r7, #12]
 8010d74:	8912      	ldrh	r2, [r2, #8]
 8010d76:	4293      	cmp	r3, r2
 8010d78:	f0c0 8095 	bcc.w	8010ea6 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	2200      	movs	r2, #0
 8010d80:	639a      	str	r2, [r3, #56]	; 0x38
 8010d82:	2304      	movs	r3, #4
 8010d84:	e0a2      	b.n	8010ecc <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	899b      	ldrh	r3, [r3, #12]
 8010d8a:	461a      	mov	r2, r3
 8010d8c:	68bb      	ldr	r3, [r7, #8]
 8010d8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010d92:	68fa      	ldr	r2, [r7, #12]
 8010d94:	8952      	ldrh	r2, [r2, #10]
 8010d96:	3a01      	subs	r2, #1
 8010d98:	4013      	ands	r3, r2
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	f040 8083 	bne.w	8010ea6 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010da0:	687a      	ldr	r2, [r7, #4]
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010da6:	4619      	mov	r1, r3
 8010da8:	4610      	mov	r0, r2
 8010daa:	f7ff f94b 	bl	8010044 <get_fat>
 8010dae:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010db0:	697b      	ldr	r3, [r7, #20]
 8010db2:	2b01      	cmp	r3, #1
 8010db4:	d801      	bhi.n	8010dba <dir_next+0xb2>
 8010db6:	2302      	movs	r3, #2
 8010db8:	e088      	b.n	8010ecc <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010dba:	697b      	ldr	r3, [r7, #20]
 8010dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dc0:	d101      	bne.n	8010dc6 <dir_next+0xbe>
 8010dc2:	2301      	movs	r3, #1
 8010dc4:	e082      	b.n	8010ecc <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	6a1b      	ldr	r3, [r3, #32]
 8010dca:	697a      	ldr	r2, [r7, #20]
 8010dcc:	429a      	cmp	r2, r3
 8010dce:	d360      	bcc.n	8010e92 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010dd0:	683b      	ldr	r3, [r7, #0]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d104      	bne.n	8010de0 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	2200      	movs	r2, #0
 8010dda:	639a      	str	r2, [r3, #56]	; 0x38
 8010ddc:	2304      	movs	r3, #4
 8010dde:	e075      	b.n	8010ecc <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8010de0:	687a      	ldr	r2, [r7, #4]
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010de6:	4619      	mov	r1, r3
 8010de8:	4610      	mov	r0, r2
 8010dea:	f7ff fdb1 	bl	8010950 <create_chain>
 8010dee:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8010df0:	697b      	ldr	r3, [r7, #20]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d101      	bne.n	8010dfa <dir_next+0xf2>
 8010df6:	2307      	movs	r3, #7
 8010df8:	e068      	b.n	8010ecc <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8010dfa:	697b      	ldr	r3, [r7, #20]
 8010dfc:	2b01      	cmp	r3, #1
 8010dfe:	d101      	bne.n	8010e04 <dir_next+0xfc>
 8010e00:	2302      	movs	r3, #2
 8010e02:	e063      	b.n	8010ecc <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010e04:	697b      	ldr	r3, [r7, #20]
 8010e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e0a:	d101      	bne.n	8010e10 <dir_next+0x108>
 8010e0c:	2301      	movs	r3, #1
 8010e0e:	e05d      	b.n	8010ecc <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	79db      	ldrb	r3, [r3, #7]
 8010e14:	f043 0304 	orr.w	r3, r3, #4
 8010e18:	b2da      	uxtb	r2, r3
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8010e1e:	68f8      	ldr	r0, [r7, #12]
 8010e20:	f7ff f80e 	bl	800fe40 <sync_window>
 8010e24:	4603      	mov	r3, r0
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d001      	beq.n	8010e2e <dir_next+0x126>
 8010e2a:	2301      	movs	r3, #1
 8010e2c:	e04e      	b.n	8010ecc <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	899b      	ldrh	r3, [r3, #12]
 8010e38:	461a      	mov	r2, r3
 8010e3a:	2100      	movs	r1, #0
 8010e3c:	f7fe fe37 	bl	800faae <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010e40:	2300      	movs	r3, #0
 8010e42:	613b      	str	r3, [r7, #16]
 8010e44:	6979      	ldr	r1, [r7, #20]
 8010e46:	68f8      	ldr	r0, [r7, #12]
 8010e48:	f7ff f8dc 	bl	8010004 <clust2sect>
 8010e4c:	4602      	mov	r2, r0
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	639a      	str	r2, [r3, #56]	; 0x38
 8010e52:	e012      	b.n	8010e7a <dir_next+0x172>
						fs->wflag = 1;
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	2201      	movs	r2, #1
 8010e58:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010e5a:	68f8      	ldr	r0, [r7, #12]
 8010e5c:	f7fe fff0 	bl	800fe40 <sync_window>
 8010e60:	4603      	mov	r3, r0
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d001      	beq.n	8010e6a <dir_next+0x162>
 8010e66:	2301      	movs	r3, #1
 8010e68:	e030      	b.n	8010ecc <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010e6a:	693b      	ldr	r3, [r7, #16]
 8010e6c:	3301      	adds	r3, #1
 8010e6e:	613b      	str	r3, [r7, #16]
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e74:	1c5a      	adds	r2, r3, #1
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	639a      	str	r2, [r3, #56]	; 0x38
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	895b      	ldrh	r3, [r3, #10]
 8010e7e:	461a      	mov	r2, r3
 8010e80:	693b      	ldr	r3, [r7, #16]
 8010e82:	4293      	cmp	r3, r2
 8010e84:	d3e6      	bcc.n	8010e54 <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010e8a:	693b      	ldr	r3, [r7, #16]
 8010e8c:	1ad2      	subs	r2, r2, r3
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	697a      	ldr	r2, [r7, #20]
 8010e96:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 8010e98:	6979      	ldr	r1, [r7, #20]
 8010e9a:	68f8      	ldr	r0, [r7, #12]
 8010e9c:	f7ff f8b2 	bl	8010004 <clust2sect>
 8010ea0:	4602      	mov	r2, r0
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	68ba      	ldr	r2, [r7, #8]
 8010eaa:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	899b      	ldrh	r3, [r3, #12]
 8010eb6:	461a      	mov	r2, r3
 8010eb8:	68bb      	ldr	r3, [r7, #8]
 8010eba:	fbb3 f0f2 	udiv	r0, r3, r2
 8010ebe:	fb02 f200 	mul.w	r2, r2, r0
 8010ec2:	1a9b      	subs	r3, r3, r2
 8010ec4:	18ca      	adds	r2, r1, r3
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8010eca:	2300      	movs	r3, #0
}
 8010ecc:	4618      	mov	r0, r3
 8010ece:	3718      	adds	r7, #24
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	bd80      	pop	{r7, pc}

08010ed4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b086      	sub	sp, #24
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	6078      	str	r0, [r7, #4]
 8010edc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8010ee4:	2100      	movs	r1, #0
 8010ee6:	6878      	ldr	r0, [r7, #4]
 8010ee8:	f7ff fe7a 	bl	8010be0 <dir_sdi>
 8010eec:	4603      	mov	r3, r0
 8010eee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010ef0:	7dfb      	ldrb	r3, [r7, #23]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d140      	bne.n	8010f78 <dir_alloc+0xa4>
		n = 0;
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010efe:	4619      	mov	r1, r3
 8010f00:	68f8      	ldr	r0, [r7, #12]
 8010f02:	f7fe ffe1 	bl	800fec8 <move_window>
 8010f06:	4603      	mov	r3, r0
 8010f08:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010f0a:	7dfb      	ldrb	r3, [r7, #23]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d132      	bne.n	8010f76 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	781b      	ldrb	r3, [r3, #0]
 8010f14:	2b04      	cmp	r3, #4
 8010f16:	d108      	bne.n	8010f2a <dir_alloc+0x56>
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f1c:	781b      	ldrb	r3, [r3, #0]
 8010f1e:	b25b      	sxtb	r3, r3
 8010f20:	43db      	mvns	r3, r3
 8010f22:	b2db      	uxtb	r3, r3
 8010f24:	09db      	lsrs	r3, r3, #7
 8010f26:	b2db      	uxtb	r3, r3
 8010f28:	e00f      	b.n	8010f4a <dir_alloc+0x76>
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f2e:	781b      	ldrb	r3, [r3, #0]
 8010f30:	2be5      	cmp	r3, #229	; 0xe5
 8010f32:	d004      	beq.n	8010f3e <dir_alloc+0x6a>
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f38:	781b      	ldrb	r3, [r3, #0]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d101      	bne.n	8010f42 <dir_alloc+0x6e>
 8010f3e:	2301      	movs	r3, #1
 8010f40:	e000      	b.n	8010f44 <dir_alloc+0x70>
 8010f42:	2300      	movs	r3, #0
 8010f44:	f003 0301 	and.w	r3, r3, #1
 8010f48:	b2db      	uxtb	r3, r3
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d007      	beq.n	8010f5e <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8010f4e:	693b      	ldr	r3, [r7, #16]
 8010f50:	3301      	adds	r3, #1
 8010f52:	613b      	str	r3, [r7, #16]
 8010f54:	693a      	ldr	r2, [r7, #16]
 8010f56:	683b      	ldr	r3, [r7, #0]
 8010f58:	429a      	cmp	r2, r3
 8010f5a:	d102      	bne.n	8010f62 <dir_alloc+0x8e>
 8010f5c:	e00c      	b.n	8010f78 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8010f5e:	2300      	movs	r3, #0
 8010f60:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8010f62:	2101      	movs	r1, #1
 8010f64:	6878      	ldr	r0, [r7, #4]
 8010f66:	f7ff fecf 	bl	8010d08 <dir_next>
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8010f6e:	7dfb      	ldrb	r3, [r7, #23]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d0c2      	beq.n	8010efa <dir_alloc+0x26>
 8010f74:	e000      	b.n	8010f78 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 8010f76:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010f78:	7dfb      	ldrb	r3, [r7, #23]
 8010f7a:	2b04      	cmp	r3, #4
 8010f7c:	d101      	bne.n	8010f82 <dir_alloc+0xae>
 8010f7e:	2307      	movs	r3, #7
 8010f80:	75fb      	strb	r3, [r7, #23]
	return res;
 8010f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f84:	4618      	mov	r0, r3
 8010f86:	3718      	adds	r7, #24
 8010f88:	46bd      	mov	sp, r7
 8010f8a:	bd80      	pop	{r7, pc}

08010f8c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b084      	sub	sp, #16
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
 8010f94:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8010f96:	683b      	ldr	r3, [r7, #0]
 8010f98:	331a      	adds	r3, #26
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	f7fe fba0 	bl	800f6e0 <ld_word>
 8010fa0:	4603      	mov	r3, r0
 8010fa2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	781b      	ldrb	r3, [r3, #0]
 8010fa8:	2b03      	cmp	r3, #3
 8010faa:	d109      	bne.n	8010fc0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8010fac:	683b      	ldr	r3, [r7, #0]
 8010fae:	3314      	adds	r3, #20
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	f7fe fb95 	bl	800f6e0 <ld_word>
 8010fb6:	4603      	mov	r3, r0
 8010fb8:	041b      	lsls	r3, r3, #16
 8010fba:	68fa      	ldr	r2, [r7, #12]
 8010fbc:	4313      	orrs	r3, r2
 8010fbe:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8010fc0:	68fb      	ldr	r3, [r7, #12]
}
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	3710      	adds	r7, #16
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	bd80      	pop	{r7, pc}

08010fca <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010fca:	b580      	push	{r7, lr}
 8010fcc:	b084      	sub	sp, #16
 8010fce:	af00      	add	r7, sp, #0
 8010fd0:	60f8      	str	r0, [r7, #12]
 8010fd2:	60b9      	str	r1, [r7, #8]
 8010fd4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010fd6:	68bb      	ldr	r3, [r7, #8]
 8010fd8:	331a      	adds	r3, #26
 8010fda:	687a      	ldr	r2, [r7, #4]
 8010fdc:	b292      	uxth	r2, r2
 8010fde:	4611      	mov	r1, r2
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f7fe fc75 	bl	800f8d0 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	781b      	ldrb	r3, [r3, #0]
 8010fea:	2b03      	cmp	r3, #3
 8010fec:	d109      	bne.n	8011002 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010fee:	68bb      	ldr	r3, [r7, #8]
 8010ff0:	f103 0214 	add.w	r2, r3, #20
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	0c1b      	lsrs	r3, r3, #16
 8010ff8:	b29b      	uxth	r3, r3
 8010ffa:	4619      	mov	r1, r3
 8010ffc:	4610      	mov	r0, r2
 8010ffe:	f7fe fc67 	bl	800f8d0 <st_word>
	}
}
 8011002:	bf00      	nop
 8011004:	3710      	adds	r7, #16
 8011006:	46bd      	mov	sp, r7
 8011008:	bd80      	pop	{r7, pc}
	...

0801100c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801100c:	b590      	push	{r4, r7, lr}
 801100e:	b087      	sub	sp, #28
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
 8011014:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8011016:	683b      	ldr	r3, [r7, #0]
 8011018:	331a      	adds	r3, #26
 801101a:	4618      	mov	r0, r3
 801101c:	f7fe fb60 	bl	800f6e0 <ld_word>
 8011020:	4603      	mov	r3, r0
 8011022:	2b00      	cmp	r3, #0
 8011024:	d001      	beq.n	801102a <cmp_lfn+0x1e>
 8011026:	2300      	movs	r3, #0
 8011028:	e059      	b.n	80110de <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801102a:	683b      	ldr	r3, [r7, #0]
 801102c:	781b      	ldrb	r3, [r3, #0]
 801102e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011032:	1e5a      	subs	r2, r3, #1
 8011034:	4613      	mov	r3, r2
 8011036:	005b      	lsls	r3, r3, #1
 8011038:	4413      	add	r3, r2
 801103a:	009b      	lsls	r3, r3, #2
 801103c:	4413      	add	r3, r2
 801103e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011040:	2301      	movs	r3, #1
 8011042:	81fb      	strh	r3, [r7, #14]
 8011044:	2300      	movs	r3, #0
 8011046:	613b      	str	r3, [r7, #16]
 8011048:	e033      	b.n	80110b2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801104a:	4a27      	ldr	r2, [pc, #156]	; (80110e8 <cmp_lfn+0xdc>)
 801104c:	693b      	ldr	r3, [r7, #16]
 801104e:	4413      	add	r3, r2
 8011050:	781b      	ldrb	r3, [r3, #0]
 8011052:	461a      	mov	r2, r3
 8011054:	683b      	ldr	r3, [r7, #0]
 8011056:	4413      	add	r3, r2
 8011058:	4618      	mov	r0, r3
 801105a:	f7fe fb41 	bl	800f6e0 <ld_word>
 801105e:	4603      	mov	r3, r0
 8011060:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8011062:	89fb      	ldrh	r3, [r7, #14]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d01a      	beq.n	801109e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8011068:	697b      	ldr	r3, [r7, #20]
 801106a:	2bfe      	cmp	r3, #254	; 0xfe
 801106c:	d812      	bhi.n	8011094 <cmp_lfn+0x88>
 801106e:	89bb      	ldrh	r3, [r7, #12]
 8011070:	4618      	mov	r0, r3
 8011072:	f002 ffc5 	bl	8014000 <ff_wtoupper>
 8011076:	4603      	mov	r3, r0
 8011078:	461c      	mov	r4, r3
 801107a:	697b      	ldr	r3, [r7, #20]
 801107c:	1c5a      	adds	r2, r3, #1
 801107e:	617a      	str	r2, [r7, #20]
 8011080:	005b      	lsls	r3, r3, #1
 8011082:	687a      	ldr	r2, [r7, #4]
 8011084:	4413      	add	r3, r2
 8011086:	881b      	ldrh	r3, [r3, #0]
 8011088:	4618      	mov	r0, r3
 801108a:	f002 ffb9 	bl	8014000 <ff_wtoupper>
 801108e:	4603      	mov	r3, r0
 8011090:	429c      	cmp	r4, r3
 8011092:	d001      	beq.n	8011098 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8011094:	2300      	movs	r3, #0
 8011096:	e022      	b.n	80110de <cmp_lfn+0xd2>
			}
			wc = uc;
 8011098:	89bb      	ldrh	r3, [r7, #12]
 801109a:	81fb      	strh	r3, [r7, #14]
 801109c:	e006      	b.n	80110ac <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801109e:	89bb      	ldrh	r3, [r7, #12]
 80110a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80110a4:	4293      	cmp	r3, r2
 80110a6:	d001      	beq.n	80110ac <cmp_lfn+0xa0>
 80110a8:	2300      	movs	r3, #0
 80110aa:	e018      	b.n	80110de <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80110ac:	693b      	ldr	r3, [r7, #16]
 80110ae:	3301      	adds	r3, #1
 80110b0:	613b      	str	r3, [r7, #16]
 80110b2:	693b      	ldr	r3, [r7, #16]
 80110b4:	2b0c      	cmp	r3, #12
 80110b6:	d9c8      	bls.n	801104a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80110b8:	683b      	ldr	r3, [r7, #0]
 80110ba:	781b      	ldrb	r3, [r3, #0]
 80110bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d00b      	beq.n	80110dc <cmp_lfn+0xd0>
 80110c4:	89fb      	ldrh	r3, [r7, #14]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d008      	beq.n	80110dc <cmp_lfn+0xd0>
 80110ca:	697b      	ldr	r3, [r7, #20]
 80110cc:	005b      	lsls	r3, r3, #1
 80110ce:	687a      	ldr	r2, [r7, #4]
 80110d0:	4413      	add	r3, r2
 80110d2:	881b      	ldrh	r3, [r3, #0]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d001      	beq.n	80110dc <cmp_lfn+0xd0>
 80110d8:	2300      	movs	r3, #0
 80110da:	e000      	b.n	80110de <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80110dc:	2301      	movs	r3, #1
}
 80110de:	4618      	mov	r0, r3
 80110e0:	371c      	adds	r7, #28
 80110e2:	46bd      	mov	sp, r7
 80110e4:	bd90      	pop	{r4, r7, pc}
 80110e6:	bf00      	nop
 80110e8:	08014ee0 	.word	0x08014ee0

080110ec <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b086      	sub	sp, #24
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
 80110f4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80110f6:	683b      	ldr	r3, [r7, #0]
 80110f8:	331a      	adds	r3, #26
 80110fa:	4618      	mov	r0, r3
 80110fc:	f7fe faf0 	bl	800f6e0 <ld_word>
 8011100:	4603      	mov	r3, r0
 8011102:	2b00      	cmp	r3, #0
 8011104:	d001      	beq.n	801110a <pick_lfn+0x1e>
 8011106:	2300      	movs	r3, #0
 8011108:	e04d      	b.n	80111a6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801110a:	683b      	ldr	r3, [r7, #0]
 801110c:	781b      	ldrb	r3, [r3, #0]
 801110e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011112:	1e5a      	subs	r2, r3, #1
 8011114:	4613      	mov	r3, r2
 8011116:	005b      	lsls	r3, r3, #1
 8011118:	4413      	add	r3, r2
 801111a:	009b      	lsls	r3, r3, #2
 801111c:	4413      	add	r3, r2
 801111e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011120:	2301      	movs	r3, #1
 8011122:	81fb      	strh	r3, [r7, #14]
 8011124:	2300      	movs	r3, #0
 8011126:	613b      	str	r3, [r7, #16]
 8011128:	e028      	b.n	801117c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801112a:	4a21      	ldr	r2, [pc, #132]	; (80111b0 <pick_lfn+0xc4>)
 801112c:	693b      	ldr	r3, [r7, #16]
 801112e:	4413      	add	r3, r2
 8011130:	781b      	ldrb	r3, [r3, #0]
 8011132:	461a      	mov	r2, r3
 8011134:	683b      	ldr	r3, [r7, #0]
 8011136:	4413      	add	r3, r2
 8011138:	4618      	mov	r0, r3
 801113a:	f7fe fad1 	bl	800f6e0 <ld_word>
 801113e:	4603      	mov	r3, r0
 8011140:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8011142:	89fb      	ldrh	r3, [r7, #14]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d00f      	beq.n	8011168 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8011148:	697b      	ldr	r3, [r7, #20]
 801114a:	2bfe      	cmp	r3, #254	; 0xfe
 801114c:	d901      	bls.n	8011152 <pick_lfn+0x66>
 801114e:	2300      	movs	r3, #0
 8011150:	e029      	b.n	80111a6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8011152:	89bb      	ldrh	r3, [r7, #12]
 8011154:	81fb      	strh	r3, [r7, #14]
 8011156:	697b      	ldr	r3, [r7, #20]
 8011158:	1c5a      	adds	r2, r3, #1
 801115a:	617a      	str	r2, [r7, #20]
 801115c:	005b      	lsls	r3, r3, #1
 801115e:	687a      	ldr	r2, [r7, #4]
 8011160:	4413      	add	r3, r2
 8011162:	89fa      	ldrh	r2, [r7, #14]
 8011164:	801a      	strh	r2, [r3, #0]
 8011166:	e006      	b.n	8011176 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011168:	89bb      	ldrh	r3, [r7, #12]
 801116a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801116e:	4293      	cmp	r3, r2
 8011170:	d001      	beq.n	8011176 <pick_lfn+0x8a>
 8011172:	2300      	movs	r3, #0
 8011174:	e017      	b.n	80111a6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011176:	693b      	ldr	r3, [r7, #16]
 8011178:	3301      	adds	r3, #1
 801117a:	613b      	str	r3, [r7, #16]
 801117c:	693b      	ldr	r3, [r7, #16]
 801117e:	2b0c      	cmp	r3, #12
 8011180:	d9d3      	bls.n	801112a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8011182:	683b      	ldr	r3, [r7, #0]
 8011184:	781b      	ldrb	r3, [r3, #0]
 8011186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801118a:	2b00      	cmp	r3, #0
 801118c:	d00a      	beq.n	80111a4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 801118e:	697b      	ldr	r3, [r7, #20]
 8011190:	2bfe      	cmp	r3, #254	; 0xfe
 8011192:	d901      	bls.n	8011198 <pick_lfn+0xac>
 8011194:	2300      	movs	r3, #0
 8011196:	e006      	b.n	80111a6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8011198:	697b      	ldr	r3, [r7, #20]
 801119a:	005b      	lsls	r3, r3, #1
 801119c:	687a      	ldr	r2, [r7, #4]
 801119e:	4413      	add	r3, r2
 80111a0:	2200      	movs	r2, #0
 80111a2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80111a4:	2301      	movs	r3, #1
}
 80111a6:	4618      	mov	r0, r3
 80111a8:	3718      	adds	r7, #24
 80111aa:	46bd      	mov	sp, r7
 80111ac:	bd80      	pop	{r7, pc}
 80111ae:	bf00      	nop
 80111b0:	08014ee0 	.word	0x08014ee0

080111b4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b088      	sub	sp, #32
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	60f8      	str	r0, [r7, #12]
 80111bc:	60b9      	str	r1, [r7, #8]
 80111be:	4611      	mov	r1, r2
 80111c0:	461a      	mov	r2, r3
 80111c2:	460b      	mov	r3, r1
 80111c4:	71fb      	strb	r3, [r7, #7]
 80111c6:	4613      	mov	r3, r2
 80111c8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80111ca:	68bb      	ldr	r3, [r7, #8]
 80111cc:	330d      	adds	r3, #13
 80111ce:	79ba      	ldrb	r2, [r7, #6]
 80111d0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80111d2:	68bb      	ldr	r3, [r7, #8]
 80111d4:	330b      	adds	r3, #11
 80111d6:	220f      	movs	r2, #15
 80111d8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80111da:	68bb      	ldr	r3, [r7, #8]
 80111dc:	330c      	adds	r3, #12
 80111de:	2200      	movs	r2, #0
 80111e0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80111e2:	68bb      	ldr	r3, [r7, #8]
 80111e4:	331a      	adds	r3, #26
 80111e6:	2100      	movs	r1, #0
 80111e8:	4618      	mov	r0, r3
 80111ea:	f7fe fb71 	bl	800f8d0 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80111ee:	79fb      	ldrb	r3, [r7, #7]
 80111f0:	1e5a      	subs	r2, r3, #1
 80111f2:	4613      	mov	r3, r2
 80111f4:	005b      	lsls	r3, r3, #1
 80111f6:	4413      	add	r3, r2
 80111f8:	009b      	lsls	r3, r3, #2
 80111fa:	4413      	add	r3, r2
 80111fc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80111fe:	2300      	movs	r3, #0
 8011200:	82fb      	strh	r3, [r7, #22]
 8011202:	2300      	movs	r3, #0
 8011204:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011206:	8afb      	ldrh	r3, [r7, #22]
 8011208:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801120c:	4293      	cmp	r3, r2
 801120e:	d007      	beq.n	8011220 <put_lfn+0x6c>
 8011210:	69fb      	ldr	r3, [r7, #28]
 8011212:	1c5a      	adds	r2, r3, #1
 8011214:	61fa      	str	r2, [r7, #28]
 8011216:	005b      	lsls	r3, r3, #1
 8011218:	68fa      	ldr	r2, [r7, #12]
 801121a:	4413      	add	r3, r2
 801121c:	881b      	ldrh	r3, [r3, #0]
 801121e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8011220:	4a17      	ldr	r2, [pc, #92]	; (8011280 <put_lfn+0xcc>)
 8011222:	69bb      	ldr	r3, [r7, #24]
 8011224:	4413      	add	r3, r2
 8011226:	781b      	ldrb	r3, [r3, #0]
 8011228:	461a      	mov	r2, r3
 801122a:	68bb      	ldr	r3, [r7, #8]
 801122c:	4413      	add	r3, r2
 801122e:	8afa      	ldrh	r2, [r7, #22]
 8011230:	4611      	mov	r1, r2
 8011232:	4618      	mov	r0, r3
 8011234:	f7fe fb4c 	bl	800f8d0 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011238:	8afb      	ldrh	r3, [r7, #22]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d102      	bne.n	8011244 <put_lfn+0x90>
 801123e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011242:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8011244:	69bb      	ldr	r3, [r7, #24]
 8011246:	3301      	adds	r3, #1
 8011248:	61bb      	str	r3, [r7, #24]
 801124a:	69bb      	ldr	r3, [r7, #24]
 801124c:	2b0c      	cmp	r3, #12
 801124e:	d9da      	bls.n	8011206 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8011250:	8afb      	ldrh	r3, [r7, #22]
 8011252:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011256:	4293      	cmp	r3, r2
 8011258:	d006      	beq.n	8011268 <put_lfn+0xb4>
 801125a:	69fb      	ldr	r3, [r7, #28]
 801125c:	005b      	lsls	r3, r3, #1
 801125e:	68fa      	ldr	r2, [r7, #12]
 8011260:	4413      	add	r3, r2
 8011262:	881b      	ldrh	r3, [r3, #0]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d103      	bne.n	8011270 <put_lfn+0xbc>
 8011268:	79fb      	ldrb	r3, [r7, #7]
 801126a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801126e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8011270:	68bb      	ldr	r3, [r7, #8]
 8011272:	79fa      	ldrb	r2, [r7, #7]
 8011274:	701a      	strb	r2, [r3, #0]
}
 8011276:	bf00      	nop
 8011278:	3720      	adds	r7, #32
 801127a:	46bd      	mov	sp, r7
 801127c:	bd80      	pop	{r7, pc}
 801127e:	bf00      	nop
 8011280:	08014ee0 	.word	0x08014ee0

08011284 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8011284:	b580      	push	{r7, lr}
 8011286:	b08c      	sub	sp, #48	; 0x30
 8011288:	af00      	add	r7, sp, #0
 801128a:	60f8      	str	r0, [r7, #12]
 801128c:	60b9      	str	r1, [r7, #8]
 801128e:	607a      	str	r2, [r7, #4]
 8011290:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8011292:	220b      	movs	r2, #11
 8011294:	68b9      	ldr	r1, [r7, #8]
 8011296:	68f8      	ldr	r0, [r7, #12]
 8011298:	f7fe fbe8 	bl	800fa6c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801129c:	683b      	ldr	r3, [r7, #0]
 801129e:	2b05      	cmp	r3, #5
 80112a0:	d929      	bls.n	80112f6 <gen_numname+0x72>
		sr = seq;
 80112a2:	683b      	ldr	r3, [r7, #0]
 80112a4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80112a6:	e020      	b.n	80112ea <gen_numname+0x66>
			wc = *lfn++;
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	1c9a      	adds	r2, r3, #2
 80112ac:	607a      	str	r2, [r7, #4]
 80112ae:	881b      	ldrh	r3, [r3, #0]
 80112b0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80112b2:	2300      	movs	r3, #0
 80112b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80112b6:	e015      	b.n	80112e4 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 80112b8:	69fb      	ldr	r3, [r7, #28]
 80112ba:	005a      	lsls	r2, r3, #1
 80112bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80112be:	f003 0301 	and.w	r3, r3, #1
 80112c2:	4413      	add	r3, r2
 80112c4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80112c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80112c8:	085b      	lsrs	r3, r3, #1
 80112ca:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80112cc:	69fb      	ldr	r3, [r7, #28]
 80112ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d003      	beq.n	80112de <gen_numname+0x5a>
 80112d6:	69fa      	ldr	r2, [r7, #28]
 80112d8:	4b31      	ldr	r3, [pc, #196]	; (80113a0 <gen_numname+0x11c>)
 80112da:	4053      	eors	r3, r2
 80112dc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80112de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112e0:	3301      	adds	r3, #1
 80112e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80112e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112e6:	2b0f      	cmp	r3, #15
 80112e8:	d9e6      	bls.n	80112b8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	881b      	ldrh	r3, [r3, #0]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d1da      	bne.n	80112a8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80112f2:	69fb      	ldr	r3, [r7, #28]
 80112f4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80112f6:	2307      	movs	r3, #7
 80112f8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80112fa:	683b      	ldr	r3, [r7, #0]
 80112fc:	b2db      	uxtb	r3, r3
 80112fe:	f003 030f 	and.w	r3, r3, #15
 8011302:	b2db      	uxtb	r3, r3
 8011304:	3330      	adds	r3, #48	; 0x30
 8011306:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 801130a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801130e:	2b39      	cmp	r3, #57	; 0x39
 8011310:	d904      	bls.n	801131c <gen_numname+0x98>
 8011312:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011316:	3307      	adds	r3, #7
 8011318:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 801131c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801131e:	1e5a      	subs	r2, r3, #1
 8011320:	62ba      	str	r2, [r7, #40]	; 0x28
 8011322:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011326:	4413      	add	r3, r2
 8011328:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801132c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8011330:	683b      	ldr	r3, [r7, #0]
 8011332:	091b      	lsrs	r3, r3, #4
 8011334:	603b      	str	r3, [r7, #0]
	} while (seq);
 8011336:	683b      	ldr	r3, [r7, #0]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d1de      	bne.n	80112fa <gen_numname+0x76>
	ns[i] = '~';
 801133c:	f107 0214 	add.w	r2, r7, #20
 8011340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011342:	4413      	add	r3, r2
 8011344:	227e      	movs	r2, #126	; 0x7e
 8011346:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8011348:	2300      	movs	r3, #0
 801134a:	627b      	str	r3, [r7, #36]	; 0x24
 801134c:	e002      	b.n	8011354 <gen_numname+0xd0>
 801134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011350:	3301      	adds	r3, #1
 8011352:	627b      	str	r3, [r7, #36]	; 0x24
 8011354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011358:	429a      	cmp	r2, r3
 801135a:	d205      	bcs.n	8011368 <gen_numname+0xe4>
 801135c:	68fa      	ldr	r2, [r7, #12]
 801135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011360:	4413      	add	r3, r2
 8011362:	781b      	ldrb	r3, [r3, #0]
 8011364:	2b20      	cmp	r3, #32
 8011366:	d1f2      	bne.n	801134e <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801136a:	2b07      	cmp	r3, #7
 801136c:	d808      	bhi.n	8011380 <gen_numname+0xfc>
 801136e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011370:	1c5a      	adds	r2, r3, #1
 8011372:	62ba      	str	r2, [r7, #40]	; 0x28
 8011374:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011378:	4413      	add	r3, r2
 801137a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801137e:	e000      	b.n	8011382 <gen_numname+0xfe>
 8011380:	2120      	movs	r1, #32
 8011382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011384:	1c5a      	adds	r2, r3, #1
 8011386:	627a      	str	r2, [r7, #36]	; 0x24
 8011388:	68fa      	ldr	r2, [r7, #12]
 801138a:	4413      	add	r3, r2
 801138c:	460a      	mov	r2, r1
 801138e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8011390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011392:	2b07      	cmp	r3, #7
 8011394:	d9e8      	bls.n	8011368 <gen_numname+0xe4>
}
 8011396:	bf00      	nop
 8011398:	3730      	adds	r7, #48	; 0x30
 801139a:	46bd      	mov	sp, r7
 801139c:	bd80      	pop	{r7, pc}
 801139e:	bf00      	nop
 80113a0:	00011021 	.word	0x00011021

080113a4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80113a4:	b480      	push	{r7}
 80113a6:	b085      	sub	sp, #20
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80113ac:	2300      	movs	r3, #0
 80113ae:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80113b0:	230b      	movs	r3, #11
 80113b2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80113b4:	7bfb      	ldrb	r3, [r7, #15]
 80113b6:	b2da      	uxtb	r2, r3
 80113b8:	0852      	lsrs	r2, r2, #1
 80113ba:	01db      	lsls	r3, r3, #7
 80113bc:	4313      	orrs	r3, r2
 80113be:	b2da      	uxtb	r2, r3
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	1c59      	adds	r1, r3, #1
 80113c4:	6079      	str	r1, [r7, #4]
 80113c6:	781b      	ldrb	r3, [r3, #0]
 80113c8:	4413      	add	r3, r2
 80113ca:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80113cc:	68bb      	ldr	r3, [r7, #8]
 80113ce:	3b01      	subs	r3, #1
 80113d0:	60bb      	str	r3, [r7, #8]
 80113d2:	68bb      	ldr	r3, [r7, #8]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d1ed      	bne.n	80113b4 <sum_sfn+0x10>
	return sum;
 80113d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80113da:	4618      	mov	r0, r3
 80113dc:	3714      	adds	r7, #20
 80113de:	46bd      	mov	sp, r7
 80113e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e4:	4770      	bx	lr

080113e6 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 80113e6:	b480      	push	{r7}
 80113e8:	b087      	sub	sp, #28
 80113ea:	af00      	add	r7, sp, #0
 80113ec:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	3301      	adds	r3, #1
 80113f2:	781b      	ldrb	r3, [r3, #0]
 80113f4:	3301      	adds	r3, #1
 80113f6:	015b      	lsls	r3, r3, #5
 80113f8:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 80113fa:	2300      	movs	r3, #0
 80113fc:	827b      	strh	r3, [r7, #18]
 80113fe:	2300      	movs	r3, #0
 8011400:	617b      	str	r3, [r7, #20]
 8011402:	e018      	b.n	8011436 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 8011404:	697b      	ldr	r3, [r7, #20]
 8011406:	2b02      	cmp	r3, #2
 8011408:	d103      	bne.n	8011412 <xdir_sum+0x2c>
			i++;
 801140a:	697b      	ldr	r3, [r7, #20]
 801140c:	3301      	adds	r3, #1
 801140e:	617b      	str	r3, [r7, #20]
 8011410:	e00e      	b.n	8011430 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8011412:	8a7b      	ldrh	r3, [r7, #18]
 8011414:	03db      	lsls	r3, r3, #15
 8011416:	b29a      	uxth	r2, r3
 8011418:	8a7b      	ldrh	r3, [r7, #18]
 801141a:	085b      	lsrs	r3, r3, #1
 801141c:	b29b      	uxth	r3, r3
 801141e:	4413      	add	r3, r2
 8011420:	b29a      	uxth	r2, r3
 8011422:	6879      	ldr	r1, [r7, #4]
 8011424:	697b      	ldr	r3, [r7, #20]
 8011426:	440b      	add	r3, r1
 8011428:	781b      	ldrb	r3, [r3, #0]
 801142a:	b29b      	uxth	r3, r3
 801142c:	4413      	add	r3, r2
 801142e:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 8011430:	697b      	ldr	r3, [r7, #20]
 8011432:	3301      	adds	r3, #1
 8011434:	617b      	str	r3, [r7, #20]
 8011436:	697a      	ldr	r2, [r7, #20]
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	429a      	cmp	r2, r3
 801143c:	d3e2      	bcc.n	8011404 <xdir_sum+0x1e>
		}
	}
	return sum;
 801143e:	8a7b      	ldrh	r3, [r7, #18]
}
 8011440:	4618      	mov	r0, r3
 8011442:	371c      	adds	r7, #28
 8011444:	46bd      	mov	sp, r7
 8011446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801144a:	4770      	bx	lr

0801144c <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 801144c:	b580      	push	{r7, lr}
 801144e:	b084      	sub	sp, #16
 8011450:	af00      	add	r7, sp, #0
 8011452:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 8011454:	2300      	movs	r3, #0
 8011456:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 8011458:	e01f      	b.n	801149a <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 801145a:	89bb      	ldrh	r3, [r7, #12]
 801145c:	4618      	mov	r0, r3
 801145e:	f002 fdcf 	bl	8014000 <ff_wtoupper>
 8011462:	4603      	mov	r3, r0
 8011464:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8011466:	89fb      	ldrh	r3, [r7, #14]
 8011468:	03db      	lsls	r3, r3, #15
 801146a:	b29a      	uxth	r2, r3
 801146c:	89fb      	ldrh	r3, [r7, #14]
 801146e:	085b      	lsrs	r3, r3, #1
 8011470:	b29b      	uxth	r3, r3
 8011472:	4413      	add	r3, r2
 8011474:	b29a      	uxth	r2, r3
 8011476:	89bb      	ldrh	r3, [r7, #12]
 8011478:	b2db      	uxtb	r3, r3
 801147a:	b29b      	uxth	r3, r3
 801147c:	4413      	add	r3, r2
 801147e:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8011480:	89fb      	ldrh	r3, [r7, #14]
 8011482:	03db      	lsls	r3, r3, #15
 8011484:	b29a      	uxth	r2, r3
 8011486:	89fb      	ldrh	r3, [r7, #14]
 8011488:	085b      	lsrs	r3, r3, #1
 801148a:	b29b      	uxth	r3, r3
 801148c:	4413      	add	r3, r2
 801148e:	b29a      	uxth	r2, r3
 8011490:	89bb      	ldrh	r3, [r7, #12]
 8011492:	0a1b      	lsrs	r3, r3, #8
 8011494:	b29b      	uxth	r3, r3
 8011496:	4413      	add	r3, r2
 8011498:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	1c9a      	adds	r2, r3, #2
 801149e:	607a      	str	r2, [r7, #4]
 80114a0:	881b      	ldrh	r3, [r3, #0]
 80114a2:	81bb      	strh	r3, [r7, #12]
 80114a4:	89bb      	ldrh	r3, [r7, #12]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d1d7      	bne.n	801145a <xname_sum+0xe>
	}
	return sum;
 80114aa:	89fb      	ldrh	r3, [r7, #14]
}
 80114ac:	4618      	mov	r0, r3
 80114ae:	3710      	adds	r7, #16
 80114b0:	46bd      	mov	sp, r7
 80114b2:	bd80      	pop	{r7, pc}

080114b4 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 80114b4:	b590      	push	{r4, r7, lr}
 80114b6:	b087      	sub	sp, #28
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	695b      	ldr	r3, [r3, #20]
 80114c2:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	681a      	ldr	r2, [r3, #0]
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114cc:	4619      	mov	r1, r3
 80114ce:	4610      	mov	r0, r2
 80114d0:	f7fe fcfa 	bl	800fec8 <move_window>
 80114d4:	4603      	mov	r3, r0
 80114d6:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 80114d8:	7bfb      	ldrb	r3, [r7, #15]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d001      	beq.n	80114e2 <load_xdir+0x2e>
 80114de:	7bfb      	ldrb	r3, [r7, #15]
 80114e0:	e09f      	b.n	8011622 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80114e6:	781b      	ldrb	r3, [r3, #0]
 80114e8:	2b85      	cmp	r3, #133	; 0x85
 80114ea:	d001      	beq.n	80114f0 <load_xdir+0x3c>
 80114ec:	2302      	movs	r3, #2
 80114ee:	e098      	b.n	8011622 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80114f4:	2220      	movs	r2, #32
 80114f6:	4619      	mov	r1, r3
 80114f8:	6938      	ldr	r0, [r7, #16]
 80114fa:	f7fe fab7 	bl	800fa6c <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 80114fe:	693b      	ldr	r3, [r7, #16]
 8011500:	3301      	adds	r3, #1
 8011502:	781b      	ldrb	r3, [r3, #0]
 8011504:	3301      	adds	r3, #1
 8011506:	015b      	lsls	r3, r3, #5
 8011508:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 801150a:	68bb      	ldr	r3, [r7, #8]
 801150c:	2b5f      	cmp	r3, #95	; 0x5f
 801150e:	d903      	bls.n	8011518 <load_xdir+0x64>
 8011510:	68bb      	ldr	r3, [r7, #8]
 8011512:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8011516:	d901      	bls.n	801151c <load_xdir+0x68>
 8011518:	2302      	movs	r3, #2
 801151a:	e082      	b.n	8011622 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 801151c:	2100      	movs	r1, #0
 801151e:	6878      	ldr	r0, [r7, #4]
 8011520:	f7ff fbf2 	bl	8010d08 <dir_next>
 8011524:	4603      	mov	r3, r0
 8011526:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8011528:	7bfb      	ldrb	r3, [r7, #15]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d001      	beq.n	8011532 <load_xdir+0x7e>
 801152e:	7bfb      	ldrb	r3, [r7, #15]
 8011530:	e077      	b.n	8011622 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	681a      	ldr	r2, [r3, #0]
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801153a:	4619      	mov	r1, r3
 801153c:	4610      	mov	r0, r2
 801153e:	f7fe fcc3 	bl	800fec8 <move_window>
 8011542:	4603      	mov	r3, r0
 8011544:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8011546:	7bfb      	ldrb	r3, [r7, #15]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d001      	beq.n	8011550 <load_xdir+0x9c>
 801154c:	7bfb      	ldrb	r3, [r7, #15]
 801154e:	e068      	b.n	8011622 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011554:	781b      	ldrb	r3, [r3, #0]
 8011556:	2bc0      	cmp	r3, #192	; 0xc0
 8011558:	d001      	beq.n	801155e <load_xdir+0xaa>
 801155a:	2302      	movs	r3, #2
 801155c:	e061      	b.n	8011622 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 801155e:	693b      	ldr	r3, [r7, #16]
 8011560:	f103 0020 	add.w	r0, r3, #32
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011568:	2220      	movs	r2, #32
 801156a:	4619      	mov	r1, r3
 801156c:	f7fe fa7e 	bl	800fa6c <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8011570:	693b      	ldr	r3, [r7, #16]
 8011572:	3323      	adds	r3, #35	; 0x23
 8011574:	781b      	ldrb	r3, [r3, #0]
 8011576:	332c      	adds	r3, #44	; 0x2c
 8011578:	4a2c      	ldr	r2, [pc, #176]	; (801162c <load_xdir+0x178>)
 801157a:	fba2 2303 	umull	r2, r3, r2, r3
 801157e:	08db      	lsrs	r3, r3, #3
 8011580:	015b      	lsls	r3, r3, #5
 8011582:	68ba      	ldr	r2, [r7, #8]
 8011584:	429a      	cmp	r2, r3
 8011586:	d201      	bcs.n	801158c <load_xdir+0xd8>
 8011588:	2302      	movs	r3, #2
 801158a:	e04a      	b.n	8011622 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 801158c:	2340      	movs	r3, #64	; 0x40
 801158e:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 8011590:	2100      	movs	r1, #0
 8011592:	6878      	ldr	r0, [r7, #4]
 8011594:	f7ff fbb8 	bl	8010d08 <dir_next>
 8011598:	4603      	mov	r3, r0
 801159a:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 801159c:	7bfb      	ldrb	r3, [r7, #15]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d001      	beq.n	80115a6 <load_xdir+0xf2>
 80115a2:	7bfb      	ldrb	r3, [r7, #15]
 80115a4:	e03d      	b.n	8011622 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	681a      	ldr	r2, [r3, #0]
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115ae:	4619      	mov	r1, r3
 80115b0:	4610      	mov	r0, r2
 80115b2:	f7fe fc89 	bl	800fec8 <move_window>
 80115b6:	4603      	mov	r3, r0
 80115b8:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 80115ba:	7bfb      	ldrb	r3, [r7, #15]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d001      	beq.n	80115c4 <load_xdir+0x110>
 80115c0:	7bfb      	ldrb	r3, [r7, #15]
 80115c2:	e02e      	b.n	8011622 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115c8:	781b      	ldrb	r3, [r3, #0]
 80115ca:	2bc1      	cmp	r3, #193	; 0xc1
 80115cc:	d001      	beq.n	80115d2 <load_xdir+0x11e>
 80115ce:	2302      	movs	r3, #2
 80115d0:	e027      	b.n	8011622 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 80115d2:	697b      	ldr	r3, [r7, #20]
 80115d4:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80115d8:	d208      	bcs.n	80115ec <load_xdir+0x138>
 80115da:	693a      	ldr	r2, [r7, #16]
 80115dc:	697b      	ldr	r3, [r7, #20]
 80115de:	18d0      	adds	r0, r2, r3
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115e4:	2220      	movs	r2, #32
 80115e6:	4619      	mov	r1, r3
 80115e8:	f7fe fa40 	bl	800fa6c <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 80115ec:	697b      	ldr	r3, [r7, #20]
 80115ee:	3320      	adds	r3, #32
 80115f0:	617b      	str	r3, [r7, #20]
 80115f2:	697a      	ldr	r2, [r7, #20]
 80115f4:	68bb      	ldr	r3, [r7, #8]
 80115f6:	429a      	cmp	r2, r3
 80115f8:	d3ca      	bcc.n	8011590 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 80115fa:	697b      	ldr	r3, [r7, #20]
 80115fc:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8011600:	d80e      	bhi.n	8011620 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8011602:	6938      	ldr	r0, [r7, #16]
 8011604:	f7ff feef 	bl	80113e6 <xdir_sum>
 8011608:	4603      	mov	r3, r0
 801160a:	461c      	mov	r4, r3
 801160c:	693b      	ldr	r3, [r7, #16]
 801160e:	3302      	adds	r3, #2
 8011610:	4618      	mov	r0, r3
 8011612:	f7fe f865 	bl	800f6e0 <ld_word>
 8011616:	4603      	mov	r3, r0
 8011618:	429c      	cmp	r4, r3
 801161a:	d001      	beq.n	8011620 <load_xdir+0x16c>
 801161c:	2302      	movs	r3, #2
 801161e:	e000      	b.n	8011622 <load_xdir+0x16e>
	}
	return FR_OK;
 8011620:	2300      	movs	r3, #0
}
 8011622:	4618      	mov	r0, r3
 8011624:	371c      	adds	r7, #28
 8011626:	46bd      	mov	sp, r7
 8011628:	bd90      	pop	{r4, r7, pc}
 801162a:	bf00      	nop
 801162c:	88888889 	.word	0x88888889

08011630 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 8011630:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8011634:	b084      	sub	sp, #16
 8011636:	af00      	add	r7, sp, #0
 8011638:	6078      	str	r0, [r7, #4]
 801163a:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 801163c:	683b      	ldr	r3, [r7, #0]
 801163e:	681a      	ldr	r2, [r3, #0]
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	601a      	str	r2, [r3, #0]
	dp->obj.sclust = obj->c_scl;
 8011644:	683b      	ldr	r3, [r7, #0]
 8011646:	6a1a      	ldr	r2, [r3, #32]
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	609a      	str	r2, [r3, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 801164c:	683b      	ldr	r3, [r7, #0]
 801164e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011650:	b2da      	uxtb	r2, r3
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	71da      	strb	r2, [r3, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8011656:	683b      	ldr	r3, [r7, #0]
 8011658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801165a:	469b      	mov	fp, r3
 801165c:	f04f 0c00 	mov.w	ip, #0
 8011660:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8011664:	f04f 0200 	mov.w	r2, #0
 8011668:	ea0b 0301 	and.w	r3, fp, r1
 801166c:	ea0c 0402 	and.w	r4, ip, r2
 8011670:	687a      	ldr	r2, [r7, #4]
 8011672:	e9c2 3404 	strd	r3, r4, [r2, #16]
	dp->blk_ofs = obj->c_ofs;
 8011676:	683b      	ldr	r3, [r7, #0]
 8011678:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011682:	4619      	mov	r1, r3
 8011684:	6878      	ldr	r0, [r7, #4]
 8011686:	f7ff faab 	bl	8010be0 <dir_sdi>
 801168a:	4603      	mov	r3, r0
 801168c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801168e:	7bfb      	ldrb	r3, [r7, #15]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d104      	bne.n	801169e <load_obj_dir+0x6e>
		res = load_xdir(dp);		/* Load the object's entry block */
 8011694:	6878      	ldr	r0, [r7, #4]
 8011696:	f7ff ff0d 	bl	80114b4 <load_xdir>
 801169a:	4603      	mov	r3, r0
 801169c:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 801169e:	7bfb      	ldrb	r3, [r7, #15]
}
 80116a0:	4618      	mov	r0, r3
 80116a2:	3710      	adds	r7, #16
 80116a4:	46bd      	mov	sp, r7
 80116a6:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080116aa <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 80116aa:	b590      	push	{r4, r7, lr}
 80116ac:	b087      	sub	sp, #28
 80116ae:	af00      	add	r7, sp, #0
 80116b0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	695b      	ldr	r3, [r3, #20]
 80116b8:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	1c9c      	adds	r4, r3, #2
 80116be:	68f8      	ldr	r0, [r7, #12]
 80116c0:	f7ff fe91 	bl	80113e6 <xdir_sum>
 80116c4:	4603      	mov	r3, r0
 80116c6:	4619      	mov	r1, r3
 80116c8:	4620      	mov	r0, r4
 80116ca:	f7fe f901 	bl	800f8d0 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	3301      	adds	r3, #1
 80116d2:	781b      	ldrb	r3, [r3, #0]
 80116d4:	3301      	adds	r3, #1
 80116d6:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80116dc:	4619      	mov	r1, r3
 80116de:	6878      	ldr	r0, [r7, #4]
 80116e0:	f7ff fa7e 	bl	8010be0 <dir_sdi>
 80116e4:	4603      	mov	r3, r0
 80116e6:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 80116e8:	e026      	b.n	8011738 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	681a      	ldr	r2, [r3, #0]
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116f2:	4619      	mov	r1, r3
 80116f4:	4610      	mov	r0, r2
 80116f6:	f7fe fbe7 	bl	800fec8 <move_window>
 80116fa:	4603      	mov	r3, r0
 80116fc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80116fe:	7dfb      	ldrb	r3, [r7, #23]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d11d      	bne.n	8011740 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011708:	2220      	movs	r2, #32
 801170a:	68f9      	ldr	r1, [r7, #12]
 801170c:	4618      	mov	r0, r3
 801170e:	f7fe f9ad 	bl	800fa6c <mem_cpy>
		dp->obj.fs->wflag = 1;
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	2201      	movs	r2, #1
 8011718:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 801171a:	693b      	ldr	r3, [r7, #16]
 801171c:	3b01      	subs	r3, #1
 801171e:	613b      	str	r3, [r7, #16]
 8011720:	693b      	ldr	r3, [r7, #16]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d00e      	beq.n	8011744 <store_xdir+0x9a>
		dirb += SZDIRE;
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	3320      	adds	r3, #32
 801172a:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 801172c:	2100      	movs	r1, #0
 801172e:	6878      	ldr	r0, [r7, #4]
 8011730:	f7ff faea 	bl	8010d08 <dir_next>
 8011734:	4603      	mov	r3, r0
 8011736:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8011738:	7dfb      	ldrb	r3, [r7, #23]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d0d5      	beq.n	80116ea <store_xdir+0x40>
 801173e:	e002      	b.n	8011746 <store_xdir+0x9c>
		if (res != FR_OK) break;
 8011740:	bf00      	nop
 8011742:	e000      	b.n	8011746 <store_xdir+0x9c>
		if (--nent == 0) break;
 8011744:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 8011746:	7dfb      	ldrb	r3, [r7, #23]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d002      	beq.n	8011752 <store_xdir+0xa8>
 801174c:	7dfb      	ldrb	r3, [r7, #23]
 801174e:	2b01      	cmp	r3, #1
 8011750:	d101      	bne.n	8011756 <store_xdir+0xac>
 8011752:	7dfb      	ldrb	r3, [r7, #23]
 8011754:	e000      	b.n	8011758 <store_xdir+0xae>
 8011756:	2302      	movs	r3, #2
}
 8011758:	4618      	mov	r0, r3
 801175a:	371c      	adds	r7, #28
 801175c:	46bd      	mov	sp, r7
 801175e:	bd90      	pop	{r4, r7, pc}

08011760 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 8011760:	b590      	push	{r4, r7, lr}
 8011762:	b085      	sub	sp, #20
 8011764:	af00      	add	r7, sp, #0
 8011766:	6078      	str	r0, [r7, #4]
 8011768:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 801176a:	2240      	movs	r2, #64	; 0x40
 801176c:	2100      	movs	r1, #0
 801176e:	6878      	ldr	r0, [r7, #4]
 8011770:	f7fe f99d 	bl	800faae <mem_set>
	dirb[XDIR_Type] = 0x85;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	2285      	movs	r2, #133	; 0x85
 8011778:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	3320      	adds	r3, #32
 801177e:	22c0      	movs	r2, #192	; 0xc0
 8011780:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 8011782:	2300      	movs	r3, #0
 8011784:	72bb      	strb	r3, [r7, #10]
 8011786:	2301      	movs	r3, #1
 8011788:	72fb      	strb	r3, [r7, #11]
 801178a:	2301      	movs	r3, #1
 801178c:	813b      	strh	r3, [r7, #8]
 801178e:	2340      	movs	r3, #64	; 0x40
 8011790:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	1c5a      	adds	r2, r3, #1
 8011796:	60fa      	str	r2, [r7, #12]
 8011798:	687a      	ldr	r2, [r7, #4]
 801179a:	4413      	add	r3, r2
 801179c:	22c1      	movs	r2, #193	; 0xc1
 801179e:	701a      	strb	r2, [r3, #0]
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	1c5a      	adds	r2, r3, #1
 80117a4:	60fa      	str	r2, [r7, #12]
 80117a6:	687a      	ldr	r2, [r7, #4]
 80117a8:	4413      	add	r3, r2
 80117aa:	2200      	movs	r2, #0
 80117ac:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 80117ae:	893b      	ldrh	r3, [r7, #8]
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d00b      	beq.n	80117cc <create_xdir+0x6c>
 80117b4:	7abb      	ldrb	r3, [r7, #10]
 80117b6:	005b      	lsls	r3, r3, #1
 80117b8:	683a      	ldr	r2, [r7, #0]
 80117ba:	4413      	add	r3, r2
 80117bc:	881b      	ldrh	r3, [r3, #0]
 80117be:	813b      	strh	r3, [r7, #8]
 80117c0:	893b      	ldrh	r3, [r7, #8]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d002      	beq.n	80117cc <create_xdir+0x6c>
 80117c6:	7abb      	ldrb	r3, [r7, #10]
 80117c8:	3301      	adds	r3, #1
 80117ca:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 80117cc:	687a      	ldr	r2, [r7, #4]
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	4413      	add	r3, r2
 80117d2:	893a      	ldrh	r2, [r7, #8]
 80117d4:	4611      	mov	r1, r2
 80117d6:	4618      	mov	r0, r3
 80117d8:	f7fe f87a 	bl	800f8d0 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	3302      	adds	r3, #2
 80117e0:	60fb      	str	r3, [r7, #12]
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	f003 031f 	and.w	r3, r3, #31
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d1e0      	bne.n	80117ae <create_xdir+0x4e>
		nb++;
 80117ec:	7afb      	ldrb	r3, [r7, #11]
 80117ee:	3301      	adds	r3, #1
 80117f0:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 80117f2:	7abb      	ldrb	r3, [r7, #10]
 80117f4:	005b      	lsls	r3, r3, #1
 80117f6:	683a      	ldr	r2, [r7, #0]
 80117f8:	4413      	add	r3, r2
 80117fa:	881b      	ldrh	r3, [r3, #0]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d1c8      	bne.n	8011792 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	3323      	adds	r3, #35	; 0x23
 8011804:	7aba      	ldrb	r2, [r7, #10]
 8011806:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	3301      	adds	r3, #1
 801180c:	7afa      	ldrb	r2, [r7, #11]
 801180e:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8011816:	6838      	ldr	r0, [r7, #0]
 8011818:	f7ff fe18 	bl	801144c <xname_sum>
 801181c:	4603      	mov	r3, r0
 801181e:	4619      	mov	r1, r3
 8011820:	4620      	mov	r0, r4
 8011822:	f7fe f855 	bl	800f8d0 <st_word>
}
 8011826:	bf00      	nop
 8011828:	3714      	adds	r7, #20
 801182a:	46bd      	mov	sp, r7
 801182c:	bd90      	pop	{r4, r7, pc}

0801182e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801182e:	b580      	push	{r7, lr}
 8011830:	b086      	sub	sp, #24
 8011832:	af00      	add	r7, sp, #0
 8011834:	6078      	str	r0, [r7, #4]
 8011836:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8011838:	2304      	movs	r3, #4
 801183a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8011842:	23ff      	movs	r3, #255	; 0xff
 8011844:	757b      	strb	r3, [r7, #21]
 8011846:	23ff      	movs	r3, #255	; 0xff
 8011848:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 801184a:	e09f      	b.n	801198c <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011850:	4619      	mov	r1, r3
 8011852:	6938      	ldr	r0, [r7, #16]
 8011854:	f7fe fb38 	bl	800fec8 <move_window>
 8011858:	4603      	mov	r3, r0
 801185a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801185c:	7dfb      	ldrb	r3, [r7, #23]
 801185e:	2b00      	cmp	r3, #0
 8011860:	f040 809a 	bne.w	8011998 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011868:	781b      	ldrb	r3, [r3, #0]
 801186a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801186c:	7dbb      	ldrb	r3, [r7, #22]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d102      	bne.n	8011878 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8011872:	2304      	movs	r3, #4
 8011874:	75fb      	strb	r3, [r7, #23]
 8011876:	e096      	b.n	80119a6 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8011878:	693b      	ldr	r3, [r7, #16]
 801187a:	781b      	ldrb	r3, [r3, #0]
 801187c:	2b04      	cmp	r3, #4
 801187e:	d118      	bne.n	80118b2 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 8011880:	7dbb      	ldrb	r3, [r7, #22]
 8011882:	2b85      	cmp	r3, #133	; 0x85
 8011884:	d179      	bne.n	801197a <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 801188e:	6878      	ldr	r0, [r7, #4]
 8011890:	f7ff fe10 	bl	80114b4 <load_xdir>
 8011894:	4603      	mov	r3, r0
 8011896:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 8011898:	7dfb      	ldrb	r3, [r7, #23]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d17e      	bne.n	801199c <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 801189e:	693b      	ldr	r3, [r7, #16]
 80118a0:	695b      	ldr	r3, [r3, #20]
 80118a2:	3304      	adds	r3, #4
 80118a4:	781b      	ldrb	r3, [r3, #0]
 80118a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80118aa:	b2da      	uxtb	r2, r3
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	719a      	strb	r2, [r3, #6]
					}
					break;
 80118b0:	e074      	b.n	801199c <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80118b6:	330b      	adds	r3, #11
 80118b8:	781b      	ldrb	r3, [r3, #0]
 80118ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80118be:	73fb      	strb	r3, [r7, #15]
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	7bfa      	ldrb	r2, [r7, #15]
 80118c4:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80118c6:	7dbb      	ldrb	r3, [r7, #22]
 80118c8:	2be5      	cmp	r3, #229	; 0xe5
 80118ca:	d00e      	beq.n	80118ea <dir_read+0xbc>
 80118cc:	7dbb      	ldrb	r3, [r7, #22]
 80118ce:	2b2e      	cmp	r3, #46	; 0x2e
 80118d0:	d00b      	beq.n	80118ea <dir_read+0xbc>
 80118d2:	7bfb      	ldrb	r3, [r7, #15]
 80118d4:	f023 0320 	bic.w	r3, r3, #32
 80118d8:	2b08      	cmp	r3, #8
 80118da:	bf0c      	ite	eq
 80118dc:	2301      	moveq	r3, #1
 80118de:	2300      	movne	r3, #0
 80118e0:	b2db      	uxtb	r3, r3
 80118e2:	461a      	mov	r2, r3
 80118e4:	683b      	ldr	r3, [r7, #0]
 80118e6:	4293      	cmp	r3, r2
 80118e8:	d002      	beq.n	80118f0 <dir_read+0xc2>
				ord = 0xFF;
 80118ea:	23ff      	movs	r3, #255	; 0xff
 80118ec:	757b      	strb	r3, [r7, #21]
 80118ee:	e044      	b.n	801197a <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 80118f0:	7bfb      	ldrb	r3, [r7, #15]
 80118f2:	2b0f      	cmp	r3, #15
 80118f4:	d12f      	bne.n	8011956 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80118f6:	7dbb      	ldrb	r3, [r7, #22]
 80118f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d00d      	beq.n	801191c <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011904:	7b5b      	ldrb	r3, [r3, #13]
 8011906:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8011908:	7dbb      	ldrb	r3, [r7, #22]
 801190a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801190e:	75bb      	strb	r3, [r7, #22]
 8011910:	7dbb      	ldrb	r3, [r7, #22]
 8011912:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801191c:	7dba      	ldrb	r2, [r7, #22]
 801191e:	7d7b      	ldrb	r3, [r7, #21]
 8011920:	429a      	cmp	r2, r3
 8011922:	d115      	bne.n	8011950 <dir_read+0x122>
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011928:	330d      	adds	r3, #13
 801192a:	781b      	ldrb	r3, [r3, #0]
 801192c:	7d3a      	ldrb	r2, [r7, #20]
 801192e:	429a      	cmp	r2, r3
 8011930:	d10e      	bne.n	8011950 <dir_read+0x122>
 8011932:	693b      	ldr	r3, [r7, #16]
 8011934:	691a      	ldr	r2, [r3, #16]
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801193a:	4619      	mov	r1, r3
 801193c:	4610      	mov	r0, r2
 801193e:	f7ff fbd5 	bl	80110ec <pick_lfn>
 8011942:	4603      	mov	r3, r0
 8011944:	2b00      	cmp	r3, #0
 8011946:	d003      	beq.n	8011950 <dir_read+0x122>
 8011948:	7d7b      	ldrb	r3, [r7, #21]
 801194a:	3b01      	subs	r3, #1
 801194c:	b2db      	uxtb	r3, r3
 801194e:	e000      	b.n	8011952 <dir_read+0x124>
 8011950:	23ff      	movs	r3, #255	; 0xff
 8011952:	757b      	strb	r3, [r7, #21]
 8011954:	e011      	b.n	801197a <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8011956:	7d7b      	ldrb	r3, [r7, #21]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d109      	bne.n	8011970 <dir_read+0x142>
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011960:	4618      	mov	r0, r3
 8011962:	f7ff fd1f 	bl	80113a4 <sum_sfn>
 8011966:	4603      	mov	r3, r0
 8011968:	461a      	mov	r2, r3
 801196a:	7d3b      	ldrb	r3, [r7, #20]
 801196c:	4293      	cmp	r3, r2
 801196e:	d017      	beq.n	80119a0 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	f04f 32ff 	mov.w	r2, #4294967295
 8011976:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 8011978:	e012      	b.n	80119a0 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801197a:	2100      	movs	r1, #0
 801197c:	6878      	ldr	r0, [r7, #4]
 801197e:	f7ff f9c3 	bl	8010d08 <dir_next>
 8011982:	4603      	mov	r3, r0
 8011984:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011986:	7dfb      	ldrb	r3, [r7, #23]
 8011988:	2b00      	cmp	r3, #0
 801198a:	d10b      	bne.n	80119a4 <dir_read+0x176>
	while (dp->sect) {
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011990:	2b00      	cmp	r3, #0
 8011992:	f47f af5b 	bne.w	801184c <dir_read+0x1e>
 8011996:	e006      	b.n	80119a6 <dir_read+0x178>
		if (res != FR_OK) break;
 8011998:	bf00      	nop
 801199a:	e004      	b.n	80119a6 <dir_read+0x178>
					break;
 801199c:	bf00      	nop
 801199e:	e002      	b.n	80119a6 <dir_read+0x178>
					break;
 80119a0:	bf00      	nop
 80119a2:	e000      	b.n	80119a6 <dir_read+0x178>
		if (res != FR_OK) break;
 80119a4:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80119a6:	7dfb      	ldrb	r3, [r7, #23]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d002      	beq.n	80119b2 <dir_read+0x184>
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	2200      	movs	r2, #0
 80119b0:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 80119b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80119b4:	4618      	mov	r0, r3
 80119b6:	3718      	adds	r7, #24
 80119b8:	46bd      	mov	sp, r7
 80119ba:	bd80      	pop	{r7, pc}

080119bc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80119bc:	b590      	push	{r4, r7, lr}
 80119be:	b089      	sub	sp, #36	; 0x24
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80119ca:	2100      	movs	r1, #0
 80119cc:	6878      	ldr	r0, [r7, #4]
 80119ce:	f7ff f907 	bl	8010be0 <dir_sdi>
 80119d2:	4603      	mov	r3, r0
 80119d4:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 80119d6:	7ffb      	ldrb	r3, [r7, #31]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d001      	beq.n	80119e0 <dir_find+0x24>
 80119dc:	7ffb      	ldrb	r3, [r7, #31]
 80119de:	e112      	b.n	8011c06 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	781b      	ldrb	r3, [r3, #0]
 80119e4:	2b04      	cmp	r3, #4
 80119e6:	d164      	bne.n	8011ab2 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	691b      	ldr	r3, [r3, #16]
 80119ec:	4618      	mov	r0, r3
 80119ee:	f7ff fd2d 	bl	801144c <xname_sum>
 80119f2:	4603      	mov	r3, r0
 80119f4:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 80119f6:	e04f      	b.n	8011a98 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	695b      	ldr	r3, [r3, #20]
 80119fc:	3324      	adds	r3, #36	; 0x24
 80119fe:	4618      	mov	r0, r3
 8011a00:	f7fd fe6e 	bl	800f6e0 <ld_word>
 8011a04:	4603      	mov	r3, r0
 8011a06:	461a      	mov	r2, r3
 8011a08:	893b      	ldrh	r3, [r7, #8]
 8011a0a:	4293      	cmp	r3, r2
 8011a0c:	d000      	beq.n	8011a10 <dir_find+0x54>
 8011a0e:	e043      	b.n	8011a98 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	695b      	ldr	r3, [r3, #20]
 8011a14:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8011a18:	76fb      	strb	r3, [r7, #27]
 8011a1a:	2340      	movs	r3, #64	; 0x40
 8011a1c:	617b      	str	r3, [r7, #20]
 8011a1e:	2300      	movs	r3, #0
 8011a20:	613b      	str	r3, [r7, #16]
 8011a22:	e029      	b.n	8011a78 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 8011a24:	697b      	ldr	r3, [r7, #20]
 8011a26:	f003 031f 	and.w	r3, r3, #31
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d102      	bne.n	8011a34 <dir_find+0x78>
 8011a2e:	697b      	ldr	r3, [r7, #20]
 8011a30:	3302      	adds	r3, #2
 8011a32:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	695a      	ldr	r2, [r3, #20]
 8011a38:	697b      	ldr	r3, [r7, #20]
 8011a3a:	4413      	add	r3, r2
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	f7fd fe4f 	bl	800f6e0 <ld_word>
 8011a42:	4603      	mov	r3, r0
 8011a44:	4618      	mov	r0, r3
 8011a46:	f002 fadb 	bl	8014000 <ff_wtoupper>
 8011a4a:	4603      	mov	r3, r0
 8011a4c:	461c      	mov	r4, r3
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	691a      	ldr	r2, [r3, #16]
 8011a52:	693b      	ldr	r3, [r7, #16]
 8011a54:	005b      	lsls	r3, r3, #1
 8011a56:	4413      	add	r3, r2
 8011a58:	881b      	ldrh	r3, [r3, #0]
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	f002 fad0 	bl	8014000 <ff_wtoupper>
 8011a60:	4603      	mov	r3, r0
 8011a62:	429c      	cmp	r4, r3
 8011a64:	d10c      	bne.n	8011a80 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8011a66:	7efb      	ldrb	r3, [r7, #27]
 8011a68:	3b01      	subs	r3, #1
 8011a6a:	76fb      	strb	r3, [r7, #27]
 8011a6c:	697b      	ldr	r3, [r7, #20]
 8011a6e:	3302      	adds	r3, #2
 8011a70:	617b      	str	r3, [r7, #20]
 8011a72:	693b      	ldr	r3, [r7, #16]
 8011a74:	3301      	adds	r3, #1
 8011a76:	613b      	str	r3, [r7, #16]
 8011a78:	7efb      	ldrb	r3, [r7, #27]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d1d2      	bne.n	8011a24 <dir_find+0x68>
 8011a7e:	e000      	b.n	8011a82 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8011a80:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8011a82:	7efb      	ldrb	r3, [r7, #27]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d107      	bne.n	8011a98 <dir_find+0xdc>
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	691a      	ldr	r2, [r3, #16]
 8011a8c:	693b      	ldr	r3, [r7, #16]
 8011a8e:	005b      	lsls	r3, r3, #1
 8011a90:	4413      	add	r3, r2
 8011a92:	881b      	ldrh	r3, [r3, #0]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d009      	beq.n	8011aac <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8011a98:	2100      	movs	r1, #0
 8011a9a:	6878      	ldr	r0, [r7, #4]
 8011a9c:	f7ff fec7 	bl	801182e <dir_read>
 8011aa0:	4603      	mov	r3, r0
 8011aa2:	77fb      	strb	r3, [r7, #31]
 8011aa4:	7ffb      	ldrb	r3, [r7, #31]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d0a6      	beq.n	80119f8 <dir_find+0x3c>
 8011aaa:	e000      	b.n	8011aae <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8011aac:	bf00      	nop
		}
		return res;
 8011aae:	7ffb      	ldrb	r3, [r7, #31]
 8011ab0:	e0a9      	b.n	8011c06 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011ab2:	23ff      	movs	r3, #255	; 0xff
 8011ab4:	773b      	strb	r3, [r7, #28]
 8011ab6:	7f3b      	ldrb	r3, [r7, #28]
 8011ab8:	777b      	strb	r3, [r7, #29]
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	f04f 32ff 	mov.w	r2, #4294967295
 8011ac0:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ac6:	4619      	mov	r1, r3
 8011ac8:	68f8      	ldr	r0, [r7, #12]
 8011aca:	f7fe f9fd 	bl	800fec8 <move_window>
 8011ace:	4603      	mov	r3, r0
 8011ad0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 8011ad2:	7ffb      	ldrb	r3, [r7, #31]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	f040 8090 	bne.w	8011bfa <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ade:	781b      	ldrb	r3, [r3, #0]
 8011ae0:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011ae2:	7fbb      	ldrb	r3, [r7, #30]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d102      	bne.n	8011aee <dir_find+0x132>
 8011ae8:	2304      	movs	r3, #4
 8011aea:	77fb      	strb	r3, [r7, #31]
 8011aec:	e08a      	b.n	8011c04 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011af2:	330b      	adds	r3, #11
 8011af4:	781b      	ldrb	r3, [r3, #0]
 8011af6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011afa:	72fb      	strb	r3, [r7, #11]
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	7afa      	ldrb	r2, [r7, #11]
 8011b00:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8011b02:	7fbb      	ldrb	r3, [r7, #30]
 8011b04:	2be5      	cmp	r3, #229	; 0xe5
 8011b06:	d007      	beq.n	8011b18 <dir_find+0x15c>
 8011b08:	7afb      	ldrb	r3, [r7, #11]
 8011b0a:	f003 0308 	and.w	r3, r3, #8
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d009      	beq.n	8011b26 <dir_find+0x16a>
 8011b12:	7afb      	ldrb	r3, [r7, #11]
 8011b14:	2b0f      	cmp	r3, #15
 8011b16:	d006      	beq.n	8011b26 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011b18:	23ff      	movs	r3, #255	; 0xff
 8011b1a:	777b      	strb	r3, [r7, #29]
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8011b22:	64da      	str	r2, [r3, #76]	; 0x4c
 8011b24:	e05e      	b.n	8011be4 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8011b26:	7afb      	ldrb	r3, [r7, #11]
 8011b28:	2b0f      	cmp	r3, #15
 8011b2a:	d136      	bne.n	8011b9a <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8011b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d154      	bne.n	8011be4 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8011b3a:	7fbb      	ldrb	r3, [r7, #30]
 8011b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d00d      	beq.n	8011b60 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b48:	7b5b      	ldrb	r3, [r3, #13]
 8011b4a:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8011b4c:	7fbb      	ldrb	r3, [r7, #30]
 8011b4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011b52:	77bb      	strb	r3, [r7, #30]
 8011b54:	7fbb      	ldrb	r3, [r7, #30]
 8011b56:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011b60:	7fba      	ldrb	r2, [r7, #30]
 8011b62:	7f7b      	ldrb	r3, [r7, #29]
 8011b64:	429a      	cmp	r2, r3
 8011b66:	d115      	bne.n	8011b94 <dir_find+0x1d8>
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b6c:	330d      	adds	r3, #13
 8011b6e:	781b      	ldrb	r3, [r3, #0]
 8011b70:	7f3a      	ldrb	r2, [r7, #28]
 8011b72:	429a      	cmp	r2, r3
 8011b74:	d10e      	bne.n	8011b94 <dir_find+0x1d8>
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	691a      	ldr	r2, [r3, #16]
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b7e:	4619      	mov	r1, r3
 8011b80:	4610      	mov	r0, r2
 8011b82:	f7ff fa43 	bl	801100c <cmp_lfn>
 8011b86:	4603      	mov	r3, r0
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d003      	beq.n	8011b94 <dir_find+0x1d8>
 8011b8c:	7f7b      	ldrb	r3, [r7, #29]
 8011b8e:	3b01      	subs	r3, #1
 8011b90:	b2db      	uxtb	r3, r3
 8011b92:	e000      	b.n	8011b96 <dir_find+0x1da>
 8011b94:	23ff      	movs	r3, #255	; 0xff
 8011b96:	777b      	strb	r3, [r7, #29]
 8011b98:	e024      	b.n	8011be4 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8011b9a:	7f7b      	ldrb	r3, [r7, #29]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d109      	bne.n	8011bb4 <dir_find+0x1f8>
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	f7ff fbfd 	bl	80113a4 <sum_sfn>
 8011baa:	4603      	mov	r3, r0
 8011bac:	461a      	mov	r2, r3
 8011bae:	7f3b      	ldrb	r3, [r7, #28]
 8011bb0:	4293      	cmp	r3, r2
 8011bb2:	d024      	beq.n	8011bfe <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8011bba:	f003 0301 	and.w	r3, r3, #1
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d10a      	bne.n	8011bd8 <dir_find+0x21c>
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	3340      	adds	r3, #64	; 0x40
 8011bca:	220b      	movs	r2, #11
 8011bcc:	4619      	mov	r1, r3
 8011bce:	f7fd ff88 	bl	800fae2 <mem_cmp>
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d014      	beq.n	8011c02 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011bd8:	23ff      	movs	r3, #255	; 0xff
 8011bda:	777b      	strb	r3, [r7, #29]
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	f04f 32ff 	mov.w	r2, #4294967295
 8011be2:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011be4:	2100      	movs	r1, #0
 8011be6:	6878      	ldr	r0, [r7, #4]
 8011be8:	f7ff f88e 	bl	8010d08 <dir_next>
 8011bec:	4603      	mov	r3, r0
 8011bee:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 8011bf0:	7ffb      	ldrb	r3, [r7, #31]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	f43f af65 	beq.w	8011ac2 <dir_find+0x106>
 8011bf8:	e004      	b.n	8011c04 <dir_find+0x248>
		if (res != FR_OK) break;
 8011bfa:	bf00      	nop
 8011bfc:	e002      	b.n	8011c04 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8011bfe:	bf00      	nop
 8011c00:	e000      	b.n	8011c04 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8011c02:	bf00      	nop

	return res;
 8011c04:	7ffb      	ldrb	r3, [r7, #31]
}
 8011c06:	4618      	mov	r0, r3
 8011c08:	3724      	adds	r7, #36	; 0x24
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	bd90      	pop	{r4, r7, pc}
	...

08011c10 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011c10:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8011c14:	b0a0      	sub	sp, #128	; 0x80
 8011c16:	af00      	add	r7, sp, #0
 8011c18:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8011c26:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d001      	beq.n	8011c32 <dir_register+0x22>
 8011c2e:	2306      	movs	r3, #6
 8011c30:	e198      	b.n	8011f64 <dir_register+0x354>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8011c32:	2300      	movs	r3, #0
 8011c34:	677b      	str	r3, [r7, #116]	; 0x74
 8011c36:	e002      	b.n	8011c3e <dir_register+0x2e>
 8011c38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011c3a:	3301      	adds	r3, #1
 8011c3c:	677b      	str	r3, [r7, #116]	; 0x74
 8011c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011c40:	691a      	ldr	r2, [r3, #16]
 8011c42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011c44:	005b      	lsls	r3, r3, #1
 8011c46:	4413      	add	r3, r2
 8011c48:	881b      	ldrh	r3, [r3, #0]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d1f4      	bne.n	8011c38 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8011c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011c50:	781b      	ldrb	r3, [r3, #0]
 8011c52:	2b04      	cmp	r3, #4
 8011c54:	f040 80a9 	bne.w	8011daa <dir_register+0x19a>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8011c58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011c5a:	330e      	adds	r3, #14
 8011c5c:	4aa7      	ldr	r2, [pc, #668]	; (8011efc <dir_register+0x2ec>)
 8011c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8011c62:	08db      	lsrs	r3, r3, #3
 8011c64:	3302      	adds	r3, #2
 8011c66:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 8011c68:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011c6a:	6878      	ldr	r0, [r7, #4]
 8011c6c:	f7ff f932 	bl	8010ed4 <dir_alloc>
 8011c70:	4603      	mov	r3, r0
 8011c72:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 8011c76:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d002      	beq.n	8011c84 <dir_register+0x74>
 8011c7e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011c82:	e16f      	b.n	8011f64 <dir_register+0x354>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011c88:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011c8a:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 8011c8e:	440b      	add	r3, r1
 8011c90:	015b      	lsls	r3, r3, #5
 8011c92:	1ad2      	subs	r2, r2, r3
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	689b      	ldr	r3, [r3, #8]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d07a      	beq.n	8011d96 <dir_register+0x186>
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	79db      	ldrb	r3, [r3, #7]
 8011ca4:	f003 0304 	and.w	r3, r3, #4
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d074      	beq.n	8011d96 <dir_register+0x186>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8011cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011cb4:	895b      	ldrh	r3, [r3, #10]
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011cba:	899b      	ldrh	r3, [r3, #12]
 8011cbc:	fb03 f300 	mul.w	r3, r3, r0
 8011cc0:	469b      	mov	fp, r3
 8011cc2:	f04f 0c00 	mov.w	ip, #0
 8011cc6:	eb1b 0301 	adds.w	r3, fp, r1
 8011cca:	eb4c 0402 	adc.w	r4, ip, r2
 8011cce:	687a      	ldr	r2, [r7, #4]
 8011cd0:	e9c2 3404 	strd	r3, r4, [r2, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	f7fe fd26 	bl	8010728 <fill_first_frag>
 8011cdc:	4603      	mov	r3, r0
 8011cde:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8011ce2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d002      	beq.n	8011cf0 <dir_register+0xe0>
 8011cea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011cee:	e139      	b.n	8011f64 <dir_register+0x354>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8011cf0:	6878      	ldr	r0, [r7, #4]
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8011cfa:	4619      	mov	r1, r3
 8011cfc:	f7fe fd43 	bl	8010786 <fill_last_frag>
 8011d00:	4603      	mov	r3, r0
 8011d02:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8011d06:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d002      	beq.n	8011d14 <dir_register+0x104>
 8011d0e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011d12:	e127      	b.n	8011f64 <dir_register+0x354>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 8011d14:	687a      	ldr	r2, [r7, #4]
 8011d16:	f107 0308 	add.w	r3, r7, #8
 8011d1a:	4611      	mov	r1, r2
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	f7ff fc87 	bl	8011630 <load_obj_dir>
 8011d22:	4603      	mov	r3, r0
 8011d24:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8011d28:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d002      	beq.n	8011d36 <dir_register+0x126>
 8011d30:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011d34:	e116      	b.n	8011f64 <dir_register+0x354>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 8011d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011d38:	695b      	ldr	r3, [r3, #20]
 8011d3a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8011d44:	461a      	mov	r2, r3
 8011d46:	4623      	mov	r3, r4
 8011d48:	4608      	mov	r0, r1
 8011d4a:	f7fd fe08 	bl	800f95e <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8011d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011d50:	695b      	ldr	r3, [r3, #20]
 8011d52:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8011d5c:	461a      	mov	r2, r3
 8011d5e:	4623      	mov	r3, r4
 8011d60:	4608      	mov	r0, r1
 8011d62:	f7fd fdfc 	bl	800f95e <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	79da      	ldrb	r2, [r3, #7]
 8011d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011d6c:	695b      	ldr	r3, [r3, #20]
 8011d6e:	3321      	adds	r3, #33	; 0x21
 8011d70:	f042 0201 	orr.w	r2, r2, #1
 8011d74:	b2d2      	uxtb	r2, r2
 8011d76:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 8011d78:	f107 0308 	add.w	r3, r7, #8
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	f7ff fc94 	bl	80116aa <store_xdir>
 8011d82:	4603      	mov	r3, r0
 8011d84:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8011d88:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d002      	beq.n	8011d96 <dir_register+0x186>
 8011d90:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011d94:	e0e6      	b.n	8011f64 <dir_register+0x354>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8011d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011d98:	695a      	ldr	r2, [r3, #20]
 8011d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011d9c:	691b      	ldr	r3, [r3, #16]
 8011d9e:	4619      	mov	r1, r3
 8011da0:	4610      	mov	r0, r2
 8011da2:	f7ff fcdd 	bl	8011760 <create_xdir>
		return FR_OK;
 8011da6:	2300      	movs	r3, #0
 8011da8:	e0dc      	b.n	8011f64 <dir_register+0x354>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8011db0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011db4:	220c      	movs	r2, #12
 8011db6:	4618      	mov	r0, r3
 8011db8:	f7fd fe58 	bl	800fa6c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8011dbc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011dc0:	f003 0301 	and.w	r3, r3, #1
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d033      	beq.n	8011e30 <dir_register+0x220>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	2240      	movs	r2, #64	; 0x40
 8011dcc:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 8011dd0:	2301      	movs	r3, #1
 8011dd2:	67bb      	str	r3, [r7, #120]	; 0x78
 8011dd4:	e016      	b.n	8011e04 <dir_register+0x1f4>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8011ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011dde:	691a      	ldr	r2, [r3, #16]
 8011de0:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8011de4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011de6:	f7ff fa4d 	bl	8011284 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8011dea:	6878      	ldr	r0, [r7, #4]
 8011dec:	f7ff fde6 	bl	80119bc <dir_find>
 8011df0:	4603      	mov	r3, r0
 8011df2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 8011df6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d106      	bne.n	8011e0c <dir_register+0x1fc>
		for (n = 1; n < 100; n++) {
 8011dfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011e00:	3301      	adds	r3, #1
 8011e02:	67bb      	str	r3, [r7, #120]	; 0x78
 8011e04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011e06:	2b63      	cmp	r3, #99	; 0x63
 8011e08:	d9e5      	bls.n	8011dd6 <dir_register+0x1c6>
 8011e0a:	e000      	b.n	8011e0e <dir_register+0x1fe>
			if (res != FR_OK) break;
 8011e0c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8011e0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011e10:	2b64      	cmp	r3, #100	; 0x64
 8011e12:	d101      	bne.n	8011e18 <dir_register+0x208>
 8011e14:	2307      	movs	r3, #7
 8011e16:	e0a5      	b.n	8011f64 <dir_register+0x354>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8011e18:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011e1c:	2b04      	cmp	r3, #4
 8011e1e:	d002      	beq.n	8011e26 <dir_register+0x216>
 8011e20:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011e24:	e09e      	b.n	8011f64 <dir_register+0x354>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8011e26:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8011e30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011e34:	f003 0302 	and.w	r3, r3, #2
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d007      	beq.n	8011e4c <dir_register+0x23c>
 8011e3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011e3e:	330c      	adds	r3, #12
 8011e40:	4a2f      	ldr	r2, [pc, #188]	; (8011f00 <dir_register+0x2f0>)
 8011e42:	fba2 2303 	umull	r2, r3, r2, r3
 8011e46:	089b      	lsrs	r3, r3, #2
 8011e48:	3301      	adds	r3, #1
 8011e4a:	e000      	b.n	8011e4e <dir_register+0x23e>
 8011e4c:	2301      	movs	r3, #1
 8011e4e:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8011e50:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011e52:	6878      	ldr	r0, [r7, #4]
 8011e54:	f7ff f83e 	bl	8010ed4 <dir_alloc>
 8011e58:	4603      	mov	r3, r0
 8011e5a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8011e5e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d14f      	bne.n	8011f06 <dir_register+0x2f6>
 8011e66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011e68:	3b01      	subs	r3, #1
 8011e6a:	673b      	str	r3, [r7, #112]	; 0x70
 8011e6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d049      	beq.n	8011f06 <dir_register+0x2f6>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011e78:	015b      	lsls	r3, r3, #5
 8011e7a:	1ad3      	subs	r3, r2, r3
 8011e7c:	4619      	mov	r1, r3
 8011e7e:	6878      	ldr	r0, [r7, #4]
 8011e80:	f7fe feae 	bl	8010be0 <dir_sdi>
 8011e84:	4603      	mov	r3, r0
 8011e86:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8011e8a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d139      	bne.n	8011f06 <dir_register+0x2f6>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	3340      	adds	r3, #64	; 0x40
 8011e96:	4618      	mov	r0, r3
 8011e98:	f7ff fa84 	bl	80113a4 <sum_sfn>
 8011e9c:	4603      	mov	r3, r0
 8011e9e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ea6:	4619      	mov	r1, r3
 8011ea8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011eaa:	f7fe f80d 	bl	800fec8 <move_window>
 8011eae:	4603      	mov	r3, r0
 8011eb0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 8011eb4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d123      	bne.n	8011f04 <dir_register+0x2f4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8011ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011ebe:	6918      	ldr	r0, [r3, #16]
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8011ec4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011ec6:	b2da      	uxtb	r2, r3
 8011ec8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8011ecc:	f7ff f972 	bl	80111b4 <put_lfn>
				fs->wflag = 1;
 8011ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011ed2:	2201      	movs	r2, #1
 8011ed4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8011ed6:	2100      	movs	r1, #0
 8011ed8:	6878      	ldr	r0, [r7, #4]
 8011eda:	f7fe ff15 	bl	8010d08 <dir_next>
 8011ede:	4603      	mov	r3, r0
 8011ee0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 8011ee4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d10c      	bne.n	8011f06 <dir_register+0x2f6>
 8011eec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011eee:	3b01      	subs	r3, #1
 8011ef0:	673b      	str	r3, [r7, #112]	; 0x70
 8011ef2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d1d4      	bne.n	8011ea2 <dir_register+0x292>
 8011ef8:	e005      	b.n	8011f06 <dir_register+0x2f6>
 8011efa:	bf00      	nop
 8011efc:	88888889 	.word	0x88888889
 8011f00:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 8011f04:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8011f06:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d128      	bne.n	8011f60 <dir_register+0x350>
		res = move_window(fs, dp->sect);
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f12:	4619      	mov	r1, r3
 8011f14:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011f16:	f7fd ffd7 	bl	800fec8 <move_window>
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8011f20:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d11b      	bne.n	8011f60 <dir_register+0x350>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f2c:	2220      	movs	r2, #32
 8011f2e:	2100      	movs	r1, #0
 8011f30:	4618      	mov	r0, r3
 8011f32:	f7fd fdbc 	bl	800faae <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	3340      	adds	r3, #64	; 0x40
 8011f3e:	220b      	movs	r2, #11
 8011f40:	4619      	mov	r1, r3
 8011f42:	f7fd fd93 	bl	800fa6c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f50:	330c      	adds	r3, #12
 8011f52:	f002 0218 	and.w	r2, r2, #24
 8011f56:	b2d2      	uxtb	r2, r2
 8011f58:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8011f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011f5c:	2201      	movs	r2, #1
 8011f5e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8011f60:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8011f64:	4618      	mov	r0, r3
 8011f66:	3780      	adds	r7, #128	; 0x80
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8011f6e:	bf00      	nop

08011f70 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8011f70:	b580      	push	{r7, lr}
 8011f72:	b08a      	sub	sp, #40	; 0x28
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	6078      	str	r0, [r7, #4]
 8011f78:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8011f7a:	683b      	ldr	r3, [r7, #0]
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	613b      	str	r3, [r7, #16]
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	691b      	ldr	r3, [r3, #16]
 8011f86:	60fb      	str	r3, [r7, #12]
 8011f88:	2300      	movs	r3, #0
 8011f8a:	617b      	str	r3, [r7, #20]
 8011f8c:	697b      	ldr	r3, [r7, #20]
 8011f8e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8011f90:	69bb      	ldr	r3, [r7, #24]
 8011f92:	1c5a      	adds	r2, r3, #1
 8011f94:	61ba      	str	r2, [r7, #24]
 8011f96:	693a      	ldr	r2, [r7, #16]
 8011f98:	4413      	add	r3, r2
 8011f9a:	781b      	ldrb	r3, [r3, #0]
 8011f9c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8011f9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011fa0:	2b1f      	cmp	r3, #31
 8011fa2:	d940      	bls.n	8012026 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8011fa4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011fa6:	2b2f      	cmp	r3, #47	; 0x2f
 8011fa8:	d006      	beq.n	8011fb8 <create_name+0x48>
 8011faa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011fac:	2b5c      	cmp	r3, #92	; 0x5c
 8011fae:	d110      	bne.n	8011fd2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011fb0:	e002      	b.n	8011fb8 <create_name+0x48>
 8011fb2:	69bb      	ldr	r3, [r7, #24]
 8011fb4:	3301      	adds	r3, #1
 8011fb6:	61bb      	str	r3, [r7, #24]
 8011fb8:	693a      	ldr	r2, [r7, #16]
 8011fba:	69bb      	ldr	r3, [r7, #24]
 8011fbc:	4413      	add	r3, r2
 8011fbe:	781b      	ldrb	r3, [r3, #0]
 8011fc0:	2b2f      	cmp	r3, #47	; 0x2f
 8011fc2:	d0f6      	beq.n	8011fb2 <create_name+0x42>
 8011fc4:	693a      	ldr	r2, [r7, #16]
 8011fc6:	69bb      	ldr	r3, [r7, #24]
 8011fc8:	4413      	add	r3, r2
 8011fca:	781b      	ldrb	r3, [r3, #0]
 8011fcc:	2b5c      	cmp	r3, #92	; 0x5c
 8011fce:	d0f0      	beq.n	8011fb2 <create_name+0x42>
			break;
 8011fd0:	e02a      	b.n	8012028 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8011fd2:	697b      	ldr	r3, [r7, #20]
 8011fd4:	2bfe      	cmp	r3, #254	; 0xfe
 8011fd6:	d901      	bls.n	8011fdc <create_name+0x6c>
 8011fd8:	2306      	movs	r3, #6
 8011fda:	e177      	b.n	80122cc <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8011fdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011fde:	b2db      	uxtb	r3, r3
 8011fe0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8011fe2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011fe4:	2101      	movs	r1, #1
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	f001 ffce 	bl	8013f88 <ff_convert>
 8011fec:	4603      	mov	r3, r0
 8011fee:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8011ff0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d101      	bne.n	8011ffa <create_name+0x8a>
 8011ff6:	2306      	movs	r3, #6
 8011ff8:	e168      	b.n	80122cc <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8011ffa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011ffc:	2b7f      	cmp	r3, #127	; 0x7f
 8011ffe:	d809      	bhi.n	8012014 <create_name+0xa4>
 8012000:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012002:	4619      	mov	r1, r3
 8012004:	48b3      	ldr	r0, [pc, #716]	; (80122d4 <create_name+0x364>)
 8012006:	f7fd fd93 	bl	800fb30 <chk_chr>
 801200a:	4603      	mov	r3, r0
 801200c:	2b00      	cmp	r3, #0
 801200e:	d001      	beq.n	8012014 <create_name+0xa4>
 8012010:	2306      	movs	r3, #6
 8012012:	e15b      	b.n	80122cc <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8012014:	697b      	ldr	r3, [r7, #20]
 8012016:	1c5a      	adds	r2, r3, #1
 8012018:	617a      	str	r2, [r7, #20]
 801201a:	005b      	lsls	r3, r3, #1
 801201c:	68fa      	ldr	r2, [r7, #12]
 801201e:	4413      	add	r3, r2
 8012020:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012022:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8012024:	e7b4      	b.n	8011f90 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8012026:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8012028:	693a      	ldr	r2, [r7, #16]
 801202a:	69bb      	ldr	r3, [r7, #24]
 801202c:	441a      	add	r2, r3
 801202e:	683b      	ldr	r3, [r7, #0]
 8012030:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012032:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012034:	2b1f      	cmp	r3, #31
 8012036:	d801      	bhi.n	801203c <create_name+0xcc>
 8012038:	2304      	movs	r3, #4
 801203a:	e000      	b.n	801203e <create_name+0xce>
 801203c:	2300      	movs	r3, #0
 801203e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8012042:	e011      	b.n	8012068 <create_name+0xf8>
		w = lfn[di - 1];
 8012044:	697a      	ldr	r2, [r7, #20]
 8012046:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801204a:	4413      	add	r3, r2
 801204c:	005b      	lsls	r3, r3, #1
 801204e:	68fa      	ldr	r2, [r7, #12]
 8012050:	4413      	add	r3, r2
 8012052:	881b      	ldrh	r3, [r3, #0]
 8012054:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8012056:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012058:	2b20      	cmp	r3, #32
 801205a:	d002      	beq.n	8012062 <create_name+0xf2>
 801205c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801205e:	2b2e      	cmp	r3, #46	; 0x2e
 8012060:	d106      	bne.n	8012070 <create_name+0x100>
		di--;
 8012062:	697b      	ldr	r3, [r7, #20]
 8012064:	3b01      	subs	r3, #1
 8012066:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8012068:	697b      	ldr	r3, [r7, #20]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d1ea      	bne.n	8012044 <create_name+0xd4>
 801206e:	e000      	b.n	8012072 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8012070:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8012072:	697b      	ldr	r3, [r7, #20]
 8012074:	005b      	lsls	r3, r3, #1
 8012076:	68fa      	ldr	r2, [r7, #12]
 8012078:	4413      	add	r3, r2
 801207a:	2200      	movs	r2, #0
 801207c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801207e:	697b      	ldr	r3, [r7, #20]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d101      	bne.n	8012088 <create_name+0x118>
 8012084:	2306      	movs	r3, #6
 8012086:	e121      	b.n	80122cc <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	3340      	adds	r3, #64	; 0x40
 801208c:	220b      	movs	r2, #11
 801208e:	2120      	movs	r1, #32
 8012090:	4618      	mov	r0, r3
 8012092:	f7fd fd0c 	bl	800faae <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8012096:	2300      	movs	r3, #0
 8012098:	61bb      	str	r3, [r7, #24]
 801209a:	e002      	b.n	80120a2 <create_name+0x132>
 801209c:	69bb      	ldr	r3, [r7, #24]
 801209e:	3301      	adds	r3, #1
 80120a0:	61bb      	str	r3, [r7, #24]
 80120a2:	69bb      	ldr	r3, [r7, #24]
 80120a4:	005b      	lsls	r3, r3, #1
 80120a6:	68fa      	ldr	r2, [r7, #12]
 80120a8:	4413      	add	r3, r2
 80120aa:	881b      	ldrh	r3, [r3, #0]
 80120ac:	2b20      	cmp	r3, #32
 80120ae:	d0f5      	beq.n	801209c <create_name+0x12c>
 80120b0:	69bb      	ldr	r3, [r7, #24]
 80120b2:	005b      	lsls	r3, r3, #1
 80120b4:	68fa      	ldr	r2, [r7, #12]
 80120b6:	4413      	add	r3, r2
 80120b8:	881b      	ldrh	r3, [r3, #0]
 80120ba:	2b2e      	cmp	r3, #46	; 0x2e
 80120bc:	d0ee      	beq.n	801209c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80120be:	69bb      	ldr	r3, [r7, #24]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d009      	beq.n	80120d8 <create_name+0x168>
 80120c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80120c8:	f043 0303 	orr.w	r3, r3, #3
 80120cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80120d0:	e002      	b.n	80120d8 <create_name+0x168>
 80120d2:	697b      	ldr	r3, [r7, #20]
 80120d4:	3b01      	subs	r3, #1
 80120d6:	617b      	str	r3, [r7, #20]
 80120d8:	697b      	ldr	r3, [r7, #20]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d009      	beq.n	80120f2 <create_name+0x182>
 80120de:	697a      	ldr	r2, [r7, #20]
 80120e0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80120e4:	4413      	add	r3, r2
 80120e6:	005b      	lsls	r3, r3, #1
 80120e8:	68fa      	ldr	r2, [r7, #12]
 80120ea:	4413      	add	r3, r2
 80120ec:	881b      	ldrh	r3, [r3, #0]
 80120ee:	2b2e      	cmp	r3, #46	; 0x2e
 80120f0:	d1ef      	bne.n	80120d2 <create_name+0x162>

	i = b = 0; ni = 8;
 80120f2:	2300      	movs	r3, #0
 80120f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80120f8:	2300      	movs	r3, #0
 80120fa:	623b      	str	r3, [r7, #32]
 80120fc:	2308      	movs	r3, #8
 80120fe:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8012100:	69bb      	ldr	r3, [r7, #24]
 8012102:	1c5a      	adds	r2, r3, #1
 8012104:	61ba      	str	r2, [r7, #24]
 8012106:	005b      	lsls	r3, r3, #1
 8012108:	68fa      	ldr	r2, [r7, #12]
 801210a:	4413      	add	r3, r2
 801210c:	881b      	ldrh	r3, [r3, #0]
 801210e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8012110:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012112:	2b00      	cmp	r3, #0
 8012114:	f000 8090 	beq.w	8012238 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8012118:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801211a:	2b20      	cmp	r3, #32
 801211c:	d006      	beq.n	801212c <create_name+0x1bc>
 801211e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012120:	2b2e      	cmp	r3, #46	; 0x2e
 8012122:	d10a      	bne.n	801213a <create_name+0x1ca>
 8012124:	69ba      	ldr	r2, [r7, #24]
 8012126:	697b      	ldr	r3, [r7, #20]
 8012128:	429a      	cmp	r2, r3
 801212a:	d006      	beq.n	801213a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801212c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012130:	f043 0303 	orr.w	r3, r3, #3
 8012134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012138:	e07d      	b.n	8012236 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801213a:	6a3a      	ldr	r2, [r7, #32]
 801213c:	69fb      	ldr	r3, [r7, #28]
 801213e:	429a      	cmp	r2, r3
 8012140:	d203      	bcs.n	801214a <create_name+0x1da>
 8012142:	69ba      	ldr	r2, [r7, #24]
 8012144:	697b      	ldr	r3, [r7, #20]
 8012146:	429a      	cmp	r2, r3
 8012148:	d123      	bne.n	8012192 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801214a:	69fb      	ldr	r3, [r7, #28]
 801214c:	2b0b      	cmp	r3, #11
 801214e:	d106      	bne.n	801215e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8012150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012154:	f043 0303 	orr.w	r3, r3, #3
 8012158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801215c:	e06f      	b.n	801223e <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801215e:	69ba      	ldr	r2, [r7, #24]
 8012160:	697b      	ldr	r3, [r7, #20]
 8012162:	429a      	cmp	r2, r3
 8012164:	d005      	beq.n	8012172 <create_name+0x202>
 8012166:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801216a:	f043 0303 	orr.w	r3, r3, #3
 801216e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8012172:	69ba      	ldr	r2, [r7, #24]
 8012174:	697b      	ldr	r3, [r7, #20]
 8012176:	429a      	cmp	r2, r3
 8012178:	d860      	bhi.n	801223c <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801217a:	697b      	ldr	r3, [r7, #20]
 801217c:	61bb      	str	r3, [r7, #24]
 801217e:	2308      	movs	r3, #8
 8012180:	623b      	str	r3, [r7, #32]
 8012182:	230b      	movs	r3, #11
 8012184:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8012186:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801218a:	009b      	lsls	r3, r3, #2
 801218c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012190:	e051      	b.n	8012236 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8012192:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012194:	2b7f      	cmp	r3, #127	; 0x7f
 8012196:	d914      	bls.n	80121c2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8012198:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801219a:	2100      	movs	r1, #0
 801219c:	4618      	mov	r0, r3
 801219e:	f001 fef3 	bl	8013f88 <ff_convert>
 80121a2:	4603      	mov	r3, r0
 80121a4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80121a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d004      	beq.n	80121b6 <create_name+0x246>
 80121ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80121ae:	3b80      	subs	r3, #128	; 0x80
 80121b0:	4a49      	ldr	r2, [pc, #292]	; (80122d8 <create_name+0x368>)
 80121b2:	5cd3      	ldrb	r3, [r2, r3]
 80121b4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80121b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80121ba:	f043 0302 	orr.w	r3, r3, #2
 80121be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80121c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d007      	beq.n	80121d8 <create_name+0x268>
 80121c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80121ca:	4619      	mov	r1, r3
 80121cc:	4843      	ldr	r0, [pc, #268]	; (80122dc <create_name+0x36c>)
 80121ce:	f7fd fcaf 	bl	800fb30 <chk_chr>
 80121d2:	4603      	mov	r3, r0
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d008      	beq.n	80121ea <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80121d8:	235f      	movs	r3, #95	; 0x5f
 80121da:	84bb      	strh	r3, [r7, #36]	; 0x24
 80121dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80121e0:	f043 0303 	orr.w	r3, r3, #3
 80121e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80121e8:	e01b      	b.n	8012222 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80121ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80121ec:	2b40      	cmp	r3, #64	; 0x40
 80121ee:	d909      	bls.n	8012204 <create_name+0x294>
 80121f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80121f2:	2b5a      	cmp	r3, #90	; 0x5a
 80121f4:	d806      	bhi.n	8012204 <create_name+0x294>
					b |= 2;
 80121f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80121fa:	f043 0302 	orr.w	r3, r3, #2
 80121fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012202:	e00e      	b.n	8012222 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8012204:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012206:	2b60      	cmp	r3, #96	; 0x60
 8012208:	d90b      	bls.n	8012222 <create_name+0x2b2>
 801220a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801220c:	2b7a      	cmp	r3, #122	; 0x7a
 801220e:	d808      	bhi.n	8012222 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8012210:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012214:	f043 0301 	orr.w	r3, r3, #1
 8012218:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801221c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801221e:	3b20      	subs	r3, #32
 8012220:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8012222:	6a3b      	ldr	r3, [r7, #32]
 8012224:	1c5a      	adds	r2, r3, #1
 8012226:	623a      	str	r2, [r7, #32]
 8012228:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801222a:	b2d1      	uxtb	r1, r2
 801222c:	687a      	ldr	r2, [r7, #4]
 801222e:	4413      	add	r3, r2
 8012230:	460a      	mov	r2, r1
 8012232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 8012236:	e763      	b.n	8012100 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8012238:	bf00      	nop
 801223a:	e000      	b.n	801223e <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 801223c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012244:	2be5      	cmp	r3, #229	; 0xe5
 8012246:	d103      	bne.n	8012250 <create_name+0x2e0>
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	2205      	movs	r2, #5
 801224c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 8012250:	69fb      	ldr	r3, [r7, #28]
 8012252:	2b08      	cmp	r3, #8
 8012254:	d104      	bne.n	8012260 <create_name+0x2f0>
 8012256:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801225a:	009b      	lsls	r3, r3, #2
 801225c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8012260:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012264:	f003 030c 	and.w	r3, r3, #12
 8012268:	2b0c      	cmp	r3, #12
 801226a:	d005      	beq.n	8012278 <create_name+0x308>
 801226c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012270:	f003 0303 	and.w	r3, r3, #3
 8012274:	2b03      	cmp	r3, #3
 8012276:	d105      	bne.n	8012284 <create_name+0x314>
 8012278:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801227c:	f043 0302 	orr.w	r3, r3, #2
 8012280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8012284:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012288:	f003 0302 	and.w	r3, r3, #2
 801228c:	2b00      	cmp	r3, #0
 801228e:	d117      	bne.n	80122c0 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8012290:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012294:	f003 0303 	and.w	r3, r3, #3
 8012298:	2b01      	cmp	r3, #1
 801229a:	d105      	bne.n	80122a8 <create_name+0x338>
 801229c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80122a0:	f043 0310 	orr.w	r3, r3, #16
 80122a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80122a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80122ac:	f003 030c 	and.w	r3, r3, #12
 80122b0:	2b04      	cmp	r3, #4
 80122b2:	d105      	bne.n	80122c0 <create_name+0x350>
 80122b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80122b8:	f043 0308 	orr.w	r3, r3, #8
 80122bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80122c6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 80122ca:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80122cc:	4618      	mov	r0, r3
 80122ce:	3728      	adds	r7, #40	; 0x28
 80122d0:	46bd      	mov	sp, r7
 80122d2:	bd80      	pop	{r7, pc}
 80122d4:	08014d8c 	.word	0x08014d8c
 80122d8:	08014e60 	.word	0x08014e60
 80122dc:	08014d98 	.word	0x08014d98

080122e0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80122e0:	b590      	push	{r4, r7, lr}
 80122e2:	b087      	sub	sp, #28
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	6078      	str	r0, [r7, #4]
 80122e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80122ee:	693b      	ldr	r3, [r7, #16]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80122f4:	e002      	b.n	80122fc <follow_path+0x1c>
 80122f6:	683b      	ldr	r3, [r7, #0]
 80122f8:	3301      	adds	r3, #1
 80122fa:	603b      	str	r3, [r7, #0]
 80122fc:	683b      	ldr	r3, [r7, #0]
 80122fe:	781b      	ldrb	r3, [r3, #0]
 8012300:	2b2f      	cmp	r3, #47	; 0x2f
 8012302:	d0f8      	beq.n	80122f6 <follow_path+0x16>
 8012304:	683b      	ldr	r3, [r7, #0]
 8012306:	781b      	ldrb	r3, [r3, #0]
 8012308:	2b5c      	cmp	r3, #92	; 0x5c
 801230a:	d0f4      	beq.n	80122f6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801230c:	693b      	ldr	r3, [r7, #16]
 801230e:	2200      	movs	r2, #0
 8012310:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 8012312:	693b      	ldr	r3, [r7, #16]
 8012314:	2200      	movs	r2, #0
 8012316:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012318:	683b      	ldr	r3, [r7, #0]
 801231a:	781b      	ldrb	r3, [r3, #0]
 801231c:	2b1f      	cmp	r3, #31
 801231e:	d80a      	bhi.n	8012336 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	2280      	movs	r2, #128	; 0x80
 8012324:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 8012328:	2100      	movs	r1, #0
 801232a:	6878      	ldr	r0, [r7, #4]
 801232c:	f7fe fc58 	bl	8010be0 <dir_sdi>
 8012330:	4603      	mov	r3, r0
 8012332:	75fb      	strb	r3, [r7, #23]
 8012334:	e07c      	b.n	8012430 <follow_path+0x150>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012336:	463b      	mov	r3, r7
 8012338:	4619      	mov	r1, r3
 801233a:	6878      	ldr	r0, [r7, #4]
 801233c:	f7ff fe18 	bl	8011f70 <create_name>
 8012340:	4603      	mov	r3, r0
 8012342:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012344:	7dfb      	ldrb	r3, [r7, #23]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d16d      	bne.n	8012426 <follow_path+0x146>
			res = dir_find(dp);				/* Find an object with the segment name */
 801234a:	6878      	ldr	r0, [r7, #4]
 801234c:	f7ff fb36 	bl	80119bc <dir_find>
 8012350:	4603      	mov	r3, r0
 8012352:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 801235a:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801235c:	7dfb      	ldrb	r3, [r7, #23]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d00a      	beq.n	8012378 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012362:	7dfb      	ldrb	r3, [r7, #23]
 8012364:	2b04      	cmp	r3, #4
 8012366:	d160      	bne.n	801242a <follow_path+0x14a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012368:	7afb      	ldrb	r3, [r7, #11]
 801236a:	f003 0304 	and.w	r3, r3, #4
 801236e:	2b00      	cmp	r3, #0
 8012370:	d15b      	bne.n	801242a <follow_path+0x14a>
 8012372:	2305      	movs	r3, #5
 8012374:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8012376:	e058      	b.n	801242a <follow_path+0x14a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012378:	7afb      	ldrb	r3, [r7, #11]
 801237a:	f003 0304 	and.w	r3, r3, #4
 801237e:	2b00      	cmp	r3, #0
 8012380:	d155      	bne.n	801242e <follow_path+0x14e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012382:	693b      	ldr	r3, [r7, #16]
 8012384:	799b      	ldrb	r3, [r3, #6]
 8012386:	f003 0310 	and.w	r3, r3, #16
 801238a:	2b00      	cmp	r3, #0
 801238c:	d102      	bne.n	8012394 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 801238e:	2305      	movs	r3, #5
 8012390:	75fb      	strb	r3, [r7, #23]
 8012392:	e04d      	b.n	8012430 <follow_path+0x150>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	781b      	ldrb	r3, [r3, #0]
 8012398:	2b04      	cmp	r3, #4
 801239a:	d12f      	bne.n	80123fc <follow_path+0x11c>
				obj->c_scl = obj->sclust;
 801239c:	693b      	ldr	r3, [r7, #16]
 801239e:	689a      	ldr	r2, [r3, #8]
 80123a0:	693b      	ldr	r3, [r7, #16]
 80123a2:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 80123a4:	693b      	ldr	r3, [r7, #16]
 80123a6:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80123aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80123ae:	693a      	ldr	r2, [r7, #16]
 80123b0:	79d2      	ldrb	r2, [r2, #7]
 80123b2:	431a      	orrs	r2, r3
 80123b4:	693b      	ldr	r3, [r7, #16]
 80123b6:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80123bc:	693b      	ldr	r3, [r7, #16]
 80123be:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	695b      	ldr	r3, [r3, #20]
 80123c4:	3334      	adds	r3, #52	; 0x34
 80123c6:	4618      	mov	r0, r3
 80123c8:	f7fd f9a2 	bl	800f710 <ld_dword>
 80123cc:	4602      	mov	r2, r0
 80123ce:	693b      	ldr	r3, [r7, #16]
 80123d0:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	695b      	ldr	r3, [r3, #20]
 80123d6:	3321      	adds	r3, #33	; 0x21
 80123d8:	781b      	ldrb	r3, [r3, #0]
 80123da:	f003 0302 	and.w	r3, r3, #2
 80123de:	b2da      	uxtb	r2, r3
 80123e0:	693b      	ldr	r3, [r7, #16]
 80123e2:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	695b      	ldr	r3, [r3, #20]
 80123e8:	3338      	adds	r3, #56	; 0x38
 80123ea:	4618      	mov	r0, r3
 80123ec:	f7fd f9b3 	bl	800f756 <ld_qword>
 80123f0:	4603      	mov	r3, r0
 80123f2:	460c      	mov	r4, r1
 80123f4:	693a      	ldr	r2, [r7, #16]
 80123f6:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80123fa:	e79c      	b.n	8012336 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012406:	68fa      	ldr	r2, [r7, #12]
 8012408:	8992      	ldrh	r2, [r2, #12]
 801240a:	fbb3 f0f2 	udiv	r0, r3, r2
 801240e:	fb02 f200 	mul.w	r2, r2, r0
 8012412:	1a9b      	subs	r3, r3, r2
 8012414:	440b      	add	r3, r1
 8012416:	4619      	mov	r1, r3
 8012418:	68f8      	ldr	r0, [r7, #12]
 801241a:	f7fe fdb7 	bl	8010f8c <ld_clust>
 801241e:	4602      	mov	r2, r0
 8012420:	693b      	ldr	r3, [r7, #16]
 8012422:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012424:	e787      	b.n	8012336 <follow_path+0x56>
			if (res != FR_OK) break;
 8012426:	bf00      	nop
 8012428:	e002      	b.n	8012430 <follow_path+0x150>
				break;
 801242a:	bf00      	nop
 801242c:	e000      	b.n	8012430 <follow_path+0x150>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801242e:	bf00      	nop
			}
		}
	}

	return res;
 8012430:	7dfb      	ldrb	r3, [r7, #23]
}
 8012432:	4618      	mov	r0, r3
 8012434:	371c      	adds	r7, #28
 8012436:	46bd      	mov	sp, r7
 8012438:	bd90      	pop	{r4, r7, pc}

0801243a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801243a:	b480      	push	{r7}
 801243c:	b087      	sub	sp, #28
 801243e:	af00      	add	r7, sp, #0
 8012440:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012442:	f04f 33ff 	mov.w	r3, #4294967295
 8012446:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d031      	beq.n	80124b4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	617b      	str	r3, [r7, #20]
 8012456:	e002      	b.n	801245e <get_ldnumber+0x24>
 8012458:	697b      	ldr	r3, [r7, #20]
 801245a:	3301      	adds	r3, #1
 801245c:	617b      	str	r3, [r7, #20]
 801245e:	697b      	ldr	r3, [r7, #20]
 8012460:	781b      	ldrb	r3, [r3, #0]
 8012462:	2b1f      	cmp	r3, #31
 8012464:	d903      	bls.n	801246e <get_ldnumber+0x34>
 8012466:	697b      	ldr	r3, [r7, #20]
 8012468:	781b      	ldrb	r3, [r3, #0]
 801246a:	2b3a      	cmp	r3, #58	; 0x3a
 801246c:	d1f4      	bne.n	8012458 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801246e:	697b      	ldr	r3, [r7, #20]
 8012470:	781b      	ldrb	r3, [r3, #0]
 8012472:	2b3a      	cmp	r3, #58	; 0x3a
 8012474:	d11c      	bne.n	80124b0 <get_ldnumber+0x76>
			tp = *path;
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	1c5a      	adds	r2, r3, #1
 8012480:	60fa      	str	r2, [r7, #12]
 8012482:	781b      	ldrb	r3, [r3, #0]
 8012484:	3b30      	subs	r3, #48	; 0x30
 8012486:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012488:	68bb      	ldr	r3, [r7, #8]
 801248a:	2b09      	cmp	r3, #9
 801248c:	d80e      	bhi.n	80124ac <get_ldnumber+0x72>
 801248e:	68fa      	ldr	r2, [r7, #12]
 8012490:	697b      	ldr	r3, [r7, #20]
 8012492:	429a      	cmp	r2, r3
 8012494:	d10a      	bne.n	80124ac <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012496:	68bb      	ldr	r3, [r7, #8]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d107      	bne.n	80124ac <get_ldnumber+0x72>
					vol = (int)i;
 801249c:	68bb      	ldr	r3, [r7, #8]
 801249e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80124a0:	697b      	ldr	r3, [r7, #20]
 80124a2:	3301      	adds	r3, #1
 80124a4:	617b      	str	r3, [r7, #20]
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	697a      	ldr	r2, [r7, #20]
 80124aa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80124ac:	693b      	ldr	r3, [r7, #16]
 80124ae:	e002      	b.n	80124b6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80124b0:	2300      	movs	r3, #0
 80124b2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80124b4:	693b      	ldr	r3, [r7, #16]
}
 80124b6:	4618      	mov	r0, r3
 80124b8:	371c      	adds	r7, #28
 80124ba:	46bd      	mov	sp, r7
 80124bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c0:	4770      	bx	lr
	...

080124c4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80124c4:	b580      	push	{r7, lr}
 80124c6:	b082      	sub	sp, #8
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	6078      	str	r0, [r7, #4]
 80124cc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	2200      	movs	r2, #0
 80124d2:	70da      	strb	r2, [r3, #3]
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	f04f 32ff 	mov.w	r2, #4294967295
 80124da:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80124dc:	6839      	ldr	r1, [r7, #0]
 80124de:	6878      	ldr	r0, [r7, #4]
 80124e0:	f7fd fcf2 	bl	800fec8 <move_window>
 80124e4:	4603      	mov	r3, r0
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d001      	beq.n	80124ee <check_fs+0x2a>
 80124ea:	2304      	movs	r3, #4
 80124ec:	e044      	b.n	8012578 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	333c      	adds	r3, #60	; 0x3c
 80124f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80124f6:	4618      	mov	r0, r3
 80124f8:	f7fd f8f2 	bl	800f6e0 <ld_word>
 80124fc:	4603      	mov	r3, r0
 80124fe:	461a      	mov	r2, r3
 8012500:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012504:	429a      	cmp	r2, r3
 8012506:	d001      	beq.n	801250c <check_fs+0x48>
 8012508:	2303      	movs	r3, #3
 801250a:	e035      	b.n	8012578 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012512:	2be9      	cmp	r3, #233	; 0xe9
 8012514:	d009      	beq.n	801252a <check_fs+0x66>
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801251c:	2beb      	cmp	r3, #235	; 0xeb
 801251e:	d11e      	bne.n	801255e <check_fs+0x9a>
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012526:	2b90      	cmp	r3, #144	; 0x90
 8012528:	d119      	bne.n	801255e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	333c      	adds	r3, #60	; 0x3c
 801252e:	3336      	adds	r3, #54	; 0x36
 8012530:	4618      	mov	r0, r3
 8012532:	f7fd f8ed 	bl	800f710 <ld_dword>
 8012536:	4603      	mov	r3, r0
 8012538:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801253c:	4a10      	ldr	r2, [pc, #64]	; (8012580 <check_fs+0xbc>)
 801253e:	4293      	cmp	r3, r2
 8012540:	d101      	bne.n	8012546 <check_fs+0x82>
 8012542:	2300      	movs	r3, #0
 8012544:	e018      	b.n	8012578 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	333c      	adds	r3, #60	; 0x3c
 801254a:	3352      	adds	r3, #82	; 0x52
 801254c:	4618      	mov	r0, r3
 801254e:	f7fd f8df 	bl	800f710 <ld_dword>
 8012552:	4602      	mov	r2, r0
 8012554:	4b0b      	ldr	r3, [pc, #44]	; (8012584 <check_fs+0xc0>)
 8012556:	429a      	cmp	r2, r3
 8012558:	d101      	bne.n	801255e <check_fs+0x9a>
 801255a:	2300      	movs	r3, #0
 801255c:	e00c      	b.n	8012578 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	333c      	adds	r3, #60	; 0x3c
 8012562:	220b      	movs	r2, #11
 8012564:	4908      	ldr	r1, [pc, #32]	; (8012588 <check_fs+0xc4>)
 8012566:	4618      	mov	r0, r3
 8012568:	f7fd fabb 	bl	800fae2 <mem_cmp>
 801256c:	4603      	mov	r3, r0
 801256e:	2b00      	cmp	r3, #0
 8012570:	d101      	bne.n	8012576 <check_fs+0xb2>
 8012572:	2301      	movs	r3, #1
 8012574:	e000      	b.n	8012578 <check_fs+0xb4>
#endif
	return 2;
 8012576:	2302      	movs	r3, #2
}
 8012578:	4618      	mov	r0, r3
 801257a:	3708      	adds	r7, #8
 801257c:	46bd      	mov	sp, r7
 801257e:	bd80      	pop	{r7, pc}
 8012580:	00544146 	.word	0x00544146
 8012584:	33544146 	.word	0x33544146
 8012588:	08014da0 	.word	0x08014da0

0801258c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801258c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8012590:	b098      	sub	sp, #96	; 0x60
 8012592:	af00      	add	r7, sp, #0
 8012594:	60f8      	str	r0, [r7, #12]
 8012596:	60b9      	str	r1, [r7, #8]
 8012598:	4613      	mov	r3, r2
 801259a:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801259c:	68bb      	ldr	r3, [r7, #8]
 801259e:	2200      	movs	r2, #0
 80125a0:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80125a2:	68f8      	ldr	r0, [r7, #12]
 80125a4:	f7ff ff49 	bl	801243a <get_ldnumber>
 80125a8:	6478      	str	r0, [r7, #68]	; 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 80125aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	da01      	bge.n	80125b4 <find_volume+0x28>
 80125b0:	230b      	movs	r3, #11
 80125b2:	e368      	b.n	8012c86 <find_volume+0x6fa>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80125b4:	4aaa      	ldr	r2, [pc, #680]	; (8012860 <find_volume+0x2d4>)
 80125b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80125b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80125bc:	643b      	str	r3, [r7, #64]	; 0x40
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80125be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d101      	bne.n	80125c8 <find_volume+0x3c>
 80125c4:	230c      	movs	r3, #12
 80125c6:	e35e      	b.n	8012c86 <find_volume+0x6fa>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80125c8:	68bb      	ldr	r3, [r7, #8]
 80125ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80125cc:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80125ce:	79fb      	ldrb	r3, [r7, #7]
 80125d0:	f023 0301 	bic.w	r3, r3, #1
 80125d4:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80125d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125d8:	781b      	ldrb	r3, [r3, #0]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d01a      	beq.n	8012614 <find_volume+0x88>
		stat = disk_status(fs->drv);
 80125de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125e0:	785b      	ldrb	r3, [r3, #1]
 80125e2:	4618      	mov	r0, r3
 80125e4:	f7fc ffde 	bl	800f5a4 <disk_status>
 80125e8:	4603      	mov	r3, r0
 80125ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80125ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80125f2:	f003 0301 	and.w	r3, r3, #1
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d10c      	bne.n	8012614 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80125fa:	79fb      	ldrb	r3, [r7, #7]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d007      	beq.n	8012610 <find_volume+0x84>
 8012600:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012604:	f003 0304 	and.w	r3, r3, #4
 8012608:	2b00      	cmp	r3, #0
 801260a:	d001      	beq.n	8012610 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 801260c:	230a      	movs	r3, #10
 801260e:	e33a      	b.n	8012c86 <find_volume+0x6fa>
			}
			return FR_OK;				/* The file system object is valid */
 8012610:	2300      	movs	r3, #0
 8012612:	e338      	b.n	8012c86 <find_volume+0x6fa>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012616:	2200      	movs	r2, #0
 8012618:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801261a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801261c:	b2da      	uxtb	r2, r3
 801261e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012620:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012624:	785b      	ldrb	r3, [r3, #1]
 8012626:	4618      	mov	r0, r3
 8012628:	f7fc ffd6 	bl	800f5d8 <disk_initialize>
 801262c:	4603      	mov	r3, r0
 801262e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012632:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012636:	f003 0301 	and.w	r3, r3, #1
 801263a:	2b00      	cmp	r3, #0
 801263c:	d001      	beq.n	8012642 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801263e:	2303      	movs	r3, #3
 8012640:	e321      	b.n	8012c86 <find_volume+0x6fa>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012642:	79fb      	ldrb	r3, [r7, #7]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d007      	beq.n	8012658 <find_volume+0xcc>
 8012648:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801264c:	f003 0304 	and.w	r3, r3, #4
 8012650:	2b00      	cmp	r3, #0
 8012652:	d001      	beq.n	8012658 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8012654:	230a      	movs	r3, #10
 8012656:	e316      	b.n	8012c86 <find_volume+0x6fa>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8012658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801265a:	7858      	ldrb	r0, [r3, #1]
 801265c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801265e:	330c      	adds	r3, #12
 8012660:	461a      	mov	r2, r3
 8012662:	2102      	movs	r1, #2
 8012664:	f7fd f81e 	bl	800f6a4 <disk_ioctl>
 8012668:	4603      	mov	r3, r0
 801266a:	2b00      	cmp	r3, #0
 801266c:	d001      	beq.n	8012672 <find_volume+0xe6>
 801266e:	2301      	movs	r3, #1
 8012670:	e309      	b.n	8012c86 <find_volume+0x6fa>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012674:	899b      	ldrh	r3, [r3, #12]
 8012676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801267a:	d80d      	bhi.n	8012698 <find_volume+0x10c>
 801267c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801267e:	899b      	ldrh	r3, [r3, #12]
 8012680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012684:	d308      	bcc.n	8012698 <find_volume+0x10c>
 8012686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012688:	899b      	ldrh	r3, [r3, #12]
 801268a:	461a      	mov	r2, r3
 801268c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801268e:	899b      	ldrh	r3, [r3, #12]
 8012690:	3b01      	subs	r3, #1
 8012692:	4013      	ands	r3, r2
 8012694:	2b00      	cmp	r3, #0
 8012696:	d001      	beq.n	801269c <find_volume+0x110>
 8012698:	2301      	movs	r3, #1
 801269a:	e2f4      	b.n	8012c86 <find_volume+0x6fa>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801269c:	2300      	movs	r3, #0
 801269e:	65bb      	str	r3, [r7, #88]	; 0x58
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80126a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80126a2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80126a4:	f7ff ff0e 	bl	80124c4 <check_fs>
 80126a8:	4603      	mov	r3, r0
 80126aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80126ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80126b2:	2b02      	cmp	r3, #2
 80126b4:	d14b      	bne.n	801274e <find_volume+0x1c2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80126b6:	2300      	movs	r3, #0
 80126b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80126ba:	e01f      	b.n	80126fc <find_volume+0x170>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80126bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80126be:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80126c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80126c4:	011b      	lsls	r3, r3, #4
 80126c6:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80126ca:	4413      	add	r3, r2
 80126cc:	63bb      	str	r3, [r7, #56]	; 0x38
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80126ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126d0:	3304      	adds	r3, #4
 80126d2:	781b      	ldrb	r3, [r3, #0]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d006      	beq.n	80126e6 <find_volume+0x15a>
 80126d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126da:	3308      	adds	r3, #8
 80126dc:	4618      	mov	r0, r3
 80126de:	f7fd f817 	bl	800f710 <ld_dword>
 80126e2:	4602      	mov	r2, r0
 80126e4:	e000      	b.n	80126e8 <find_volume+0x15c>
 80126e6:	2200      	movs	r2, #0
 80126e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80126ea:	009b      	lsls	r3, r3, #2
 80126ec:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80126f0:	440b      	add	r3, r1
 80126f2:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80126f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80126f8:	3301      	adds	r3, #1
 80126fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80126fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80126fe:	2b03      	cmp	r3, #3
 8012700:	d9dc      	bls.n	80126bc <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012702:	2300      	movs	r3, #0
 8012704:	64bb      	str	r3, [r7, #72]	; 0x48
		if (i) i--;
 8012706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012708:	2b00      	cmp	r3, #0
 801270a:	d002      	beq.n	8012712 <find_volume+0x186>
 801270c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801270e:	3b01      	subs	r3, #1
 8012710:	64bb      	str	r3, [r7, #72]	; 0x48
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012714:	009b      	lsls	r3, r3, #2
 8012716:	f107 0260 	add.w	r2, r7, #96	; 0x60
 801271a:	4413      	add	r3, r2
 801271c:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8012720:	65bb      	str	r3, [r7, #88]	; 0x58
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012722:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012724:	2b00      	cmp	r3, #0
 8012726:	d005      	beq.n	8012734 <find_volume+0x1a8>
 8012728:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801272a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801272c:	f7ff feca 	bl	80124c4 <check_fs>
 8012730:	4603      	mov	r3, r0
 8012732:	e000      	b.n	8012736 <find_volume+0x1aa>
 8012734:	2303      	movs	r3, #3
 8012736:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801273a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801273e:	2b01      	cmp	r3, #1
 8012740:	d905      	bls.n	801274e <find_volume+0x1c2>
 8012742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012744:	3301      	adds	r3, #1
 8012746:	64bb      	str	r3, [r7, #72]	; 0x48
 8012748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801274a:	2b03      	cmp	r3, #3
 801274c:	d9e1      	bls.n	8012712 <find_volume+0x186>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801274e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012752:	2b04      	cmp	r3, #4
 8012754:	d101      	bne.n	801275a <find_volume+0x1ce>
 8012756:	2301      	movs	r3, #1
 8012758:	e295      	b.n	8012c86 <find_volume+0x6fa>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801275a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801275e:	2b01      	cmp	r3, #1
 8012760:	d901      	bls.n	8012766 <find_volume+0x1da>
 8012762:	230d      	movs	r3, #13
 8012764:	e28f      	b.n	8012c86 <find_volume+0x6fa>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 8012766:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801276a:	2b01      	cmp	r3, #1
 801276c:	f040 8101 	bne.w	8012972 <find_volume+0x3e6>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8012770:	230b      	movs	r3, #11
 8012772:	64bb      	str	r3, [r7, #72]	; 0x48
 8012774:	e002      	b.n	801277c <find_volume+0x1f0>
 8012776:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012778:	3301      	adds	r3, #1
 801277a:	64bb      	str	r3, [r7, #72]	; 0x48
 801277c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801277e:	2b3f      	cmp	r3, #63	; 0x3f
 8012780:	d806      	bhi.n	8012790 <find_volume+0x204>
 8012782:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012786:	4413      	add	r3, r2
 8012788:	333c      	adds	r3, #60	; 0x3c
 801278a:	781b      	ldrb	r3, [r3, #0]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d0f2      	beq.n	8012776 <find_volume+0x1ea>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8012790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012792:	2b3f      	cmp	r3, #63	; 0x3f
 8012794:	d801      	bhi.n	801279a <find_volume+0x20e>
 8012796:	230d      	movs	r3, #13
 8012798:	e275      	b.n	8012c86 <find_volume+0x6fa>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 801279a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801279c:	333c      	adds	r3, #60	; 0x3c
 801279e:	3368      	adds	r3, #104	; 0x68
 80127a0:	4618      	mov	r0, r3
 80127a2:	f7fc ff9d 	bl	800f6e0 <ld_word>
 80127a6:	4603      	mov	r3, r0
 80127a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80127ac:	d001      	beq.n	80127b2 <find_volume+0x226>
 80127ae:	230d      	movs	r3, #13
 80127b0:	e269      	b.n	8012c86 <find_volume+0x6fa>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 80127b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127b4:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80127b8:	461a      	mov	r2, r3
 80127ba:	2301      	movs	r3, #1
 80127bc:	4093      	lsls	r3, r2
 80127be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80127c0:	8992      	ldrh	r2, [r2, #12]
 80127c2:	4293      	cmp	r3, r2
 80127c4:	d001      	beq.n	80127ca <find_volume+0x23e>
			return FR_NO_FILESYSTEM;
 80127c6:	230d      	movs	r3, #13
 80127c8:	e25d      	b.n	8012c86 <find_volume+0x6fa>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 80127ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127cc:	333c      	adds	r3, #60	; 0x3c
 80127ce:	3348      	adds	r3, #72	; 0x48
 80127d0:	4618      	mov	r0, r3
 80127d2:	f7fc ffc0 	bl	800f756 <ld_qword>
 80127d6:	460a      	mov	r2, r1
 80127d8:	4601      	mov	r1, r0
 80127da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80127dc:	469b      	mov	fp, r3
 80127de:	f04f 0c00 	mov.w	ip, #0
 80127e2:	eb1b 0301 	adds.w	r3, fp, r1
 80127e6:	eb4c 0402 	adc.w	r4, ip, r2
 80127ea:	e9c7 3408 	strd	r3, r4, [r7, #32]
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 80127ee:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80127f2:	2c01      	cmp	r4, #1
 80127f4:	bf08      	it	eq
 80127f6:	2b00      	cmpeq	r3, #0
 80127f8:	d301      	bcc.n	80127fe <find_volume+0x272>
 80127fa:	230d      	movs	r3, #13
 80127fc:	e243      	b.n	8012c86 <find_volume+0x6fa>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 80127fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012800:	333c      	adds	r3, #60	; 0x3c
 8012802:	3354      	adds	r3, #84	; 0x54
 8012804:	4618      	mov	r0, r3
 8012806:	f7fc ff83 	bl	800f710 <ld_dword>
 801280a:	4602      	mov	r2, r0
 801280c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801280e:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8012810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012812:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8012816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012818:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 801281a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801281c:	789b      	ldrb	r3, [r3, #2]
 801281e:	2b01      	cmp	r3, #1
 8012820:	d001      	beq.n	8012826 <find_volume+0x29a>
 8012822:	230d      	movs	r3, #13
 8012824:	e22f      	b.n	8012c86 <find_volume+0x6fa>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8012826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012828:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 801282c:	461a      	mov	r2, r3
 801282e:	2301      	movs	r3, #1
 8012830:	4093      	lsls	r3, r2
 8012832:	b29a      	uxth	r2, r3
 8012834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012836:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8012838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801283a:	895b      	ldrh	r3, [r3, #10]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d101      	bne.n	8012844 <find_volume+0x2b8>
 8012840:	230d      	movs	r3, #13
 8012842:	e220      	b.n	8012c86 <find_volume+0x6fa>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8012844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012846:	333c      	adds	r3, #60	; 0x3c
 8012848:	335c      	adds	r3, #92	; 0x5c
 801284a:	4618      	mov	r0, r3
 801284c:	f7fc ff60 	bl	800f710 <ld_dword>
 8012850:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8012852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012854:	4a03      	ldr	r2, [pc, #12]	; (8012864 <find_volume+0x2d8>)
 8012856:	4293      	cmp	r3, r2
 8012858:	d906      	bls.n	8012868 <find_volume+0x2dc>
 801285a:	230d      	movs	r3, #13
 801285c:	e213      	b.n	8012c86 <find_volume+0x6fa>
 801285e:	bf00      	nop
 8012860:	24000280 	.word	0x24000280
 8012864:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 8012868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801286a:	1c9a      	adds	r2, r3, #2
 801286c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801286e:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 8012870:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012872:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012874:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 8012876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012878:	333c      	adds	r3, #60	; 0x3c
 801287a:	3358      	adds	r3, #88	; 0x58
 801287c:	4618      	mov	r0, r3
 801287e:	f7fc ff47 	bl	800f710 <ld_dword>
 8012882:	4602      	mov	r2, r0
 8012884:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012886:	441a      	add	r2, r3
 8012888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801288a:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 801288c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801288e:	333c      	adds	r3, #60	; 0x3c
 8012890:	3350      	adds	r3, #80	; 0x50
 8012892:	4618      	mov	r0, r3
 8012894:	f7fc ff3c 	bl	800f710 <ld_dword>
 8012898:	4602      	mov	r2, r0
 801289a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801289c:	441a      	add	r2, r3
 801289e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128a0:	62da      	str	r2, [r3, #44]	; 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 80128a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128a6:	4619      	mov	r1, r3
 80128a8:	f04f 0200 	mov.w	r2, #0
 80128ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128ae:	895b      	ldrh	r3, [r3, #10]
 80128b0:	4618      	mov	r0, r3
 80128b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128b4:	fb03 f300 	mul.w	r3, r3, r0
 80128b8:	469b      	mov	fp, r3
 80128ba:	f04f 0c00 	mov.w	ip, #0
 80128be:	eb1b 0301 	adds.w	r3, fp, r1
 80128c2:	eb4c 0402 	adc.w	r4, ip, r2
 80128c6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80128ca:	42a2      	cmp	r2, r4
 80128cc:	bf08      	it	eq
 80128ce:	4299      	cmpeq	r1, r3
 80128d0:	d201      	bcs.n	80128d6 <find_volume+0x34a>
 80128d2:	230d      	movs	r3, #13
 80128d4:	e1d7      	b.n	8012c86 <find_volume+0x6fa>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 80128d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128d8:	333c      	adds	r3, #60	; 0x3c
 80128da:	3360      	adds	r3, #96	; 0x60
 80128dc:	4618      	mov	r0, r3
 80128de:	f7fc ff17 	bl	800f710 <ld_dword>
 80128e2:	4602      	mov	r2, r0
 80128e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128e6:	631a      	str	r2, [r3, #48]	; 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 80128e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80128ec:	4619      	mov	r1, r3
 80128ee:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80128f0:	f7fd fb88 	bl	8010004 <clust2sect>
 80128f4:	4603      	mov	r3, r0
 80128f6:	4619      	mov	r1, r3
 80128f8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80128fa:	f7fd fae5 	bl	800fec8 <move_window>
 80128fe:	4603      	mov	r3, r0
 8012900:	2b00      	cmp	r3, #0
 8012902:	d001      	beq.n	8012908 <find_volume+0x37c>
 8012904:	2301      	movs	r3, #1
 8012906:	e1be      	b.n	8012c86 <find_volume+0x6fa>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8012908:	2300      	movs	r3, #0
 801290a:	64bb      	str	r3, [r7, #72]	; 0x48
 801290c:	e015      	b.n	801293a <find_volume+0x3ae>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 801290e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012910:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012912:	4413      	add	r3, r2
 8012914:	333c      	adds	r3, #60	; 0x3c
 8012916:	781b      	ldrb	r3, [r3, #0]
 8012918:	2b81      	cmp	r3, #129	; 0x81
 801291a:	d10b      	bne.n	8012934 <find_volume+0x3a8>
 801291c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801291e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8012922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012924:	3314      	adds	r3, #20
 8012926:	4413      	add	r3, r2
 8012928:	4618      	mov	r0, r3
 801292a:	f7fc fef1 	bl	800f710 <ld_dword>
 801292e:	4603      	mov	r3, r0
 8012930:	2b02      	cmp	r3, #2
 8012932:	d009      	beq.n	8012948 <find_volume+0x3bc>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8012934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012936:	3320      	adds	r3, #32
 8012938:	64bb      	str	r3, [r7, #72]	; 0x48
 801293a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801293c:	899b      	ldrh	r3, [r3, #12]
 801293e:	461a      	mov	r2, r3
 8012940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012942:	4293      	cmp	r3, r2
 8012944:	d3e3      	bcc.n	801290e <find_volume+0x382>
 8012946:	e000      	b.n	801294a <find_volume+0x3be>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8012948:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 801294a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801294c:	899b      	ldrh	r3, [r3, #12]
 801294e:	461a      	mov	r2, r3
 8012950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012952:	4293      	cmp	r3, r2
 8012954:	d101      	bne.n	801295a <find_volume+0x3ce>
 8012956:	230d      	movs	r3, #13
 8012958:	e195      	b.n	8012c86 <find_volume+0x6fa>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801295a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801295c:	f04f 32ff 	mov.w	r2, #4294967295
 8012960:	61da      	str	r2, [r3, #28]
 8012962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012964:	69da      	ldr	r2, [r3, #28]
 8012966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012968:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 801296a:	2304      	movs	r3, #4
 801296c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012970:	e177      	b.n	8012c62 <find_volume+0x6d6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012974:	333c      	adds	r3, #60	; 0x3c
 8012976:	330b      	adds	r3, #11
 8012978:	4618      	mov	r0, r3
 801297a:	f7fc feb1 	bl	800f6e0 <ld_word>
 801297e:	4603      	mov	r3, r0
 8012980:	461a      	mov	r2, r3
 8012982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012984:	899b      	ldrh	r3, [r3, #12]
 8012986:	429a      	cmp	r2, r3
 8012988:	d001      	beq.n	801298e <find_volume+0x402>
 801298a:	230d      	movs	r3, #13
 801298c:	e17b      	b.n	8012c86 <find_volume+0x6fa>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801298e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012990:	333c      	adds	r3, #60	; 0x3c
 8012992:	3316      	adds	r3, #22
 8012994:	4618      	mov	r0, r3
 8012996:	f7fc fea3 	bl	800f6e0 <ld_word>
 801299a:	4603      	mov	r3, r0
 801299c:	657b      	str	r3, [r7, #84]	; 0x54
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801299e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d106      	bne.n	80129b2 <find_volume+0x426>
 80129a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80129a6:	333c      	adds	r3, #60	; 0x3c
 80129a8:	3324      	adds	r3, #36	; 0x24
 80129aa:	4618      	mov	r0, r3
 80129ac:	f7fc feb0 	bl	800f710 <ld_dword>
 80129b0:	6578      	str	r0, [r7, #84]	; 0x54
		fs->fsize = fasize;
 80129b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80129b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80129b6:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80129b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80129ba:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80129be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80129c0:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80129c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80129c4:	789b      	ldrb	r3, [r3, #2]
 80129c6:	2b01      	cmp	r3, #1
 80129c8:	d005      	beq.n	80129d6 <find_volume+0x44a>
 80129ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80129cc:	789b      	ldrb	r3, [r3, #2]
 80129ce:	2b02      	cmp	r3, #2
 80129d0:	d001      	beq.n	80129d6 <find_volume+0x44a>
 80129d2:	230d      	movs	r3, #13
 80129d4:	e157      	b.n	8012c86 <find_volume+0x6fa>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80129d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80129d8:	789b      	ldrb	r3, [r3, #2]
 80129da:	461a      	mov	r2, r3
 80129dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80129de:	fb02 f303 	mul.w	r3, r2, r3
 80129e2:	657b      	str	r3, [r7, #84]	; 0x54

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80129e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80129e6:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80129ea:	b29a      	uxth	r2, r3
 80129ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80129ee:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80129f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80129f2:	895b      	ldrh	r3, [r3, #10]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d008      	beq.n	8012a0a <find_volume+0x47e>
 80129f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80129fa:	895b      	ldrh	r3, [r3, #10]
 80129fc:	461a      	mov	r2, r3
 80129fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a00:	895b      	ldrh	r3, [r3, #10]
 8012a02:	3b01      	subs	r3, #1
 8012a04:	4013      	ands	r3, r2
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d001      	beq.n	8012a0e <find_volume+0x482>
 8012a0a:	230d      	movs	r3, #13
 8012a0c:	e13b      	b.n	8012c86 <find_volume+0x6fa>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012a0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a10:	333c      	adds	r3, #60	; 0x3c
 8012a12:	3311      	adds	r3, #17
 8012a14:	4618      	mov	r0, r3
 8012a16:	f7fc fe63 	bl	800f6e0 <ld_word>
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	461a      	mov	r2, r3
 8012a1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a20:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012a22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a24:	891b      	ldrh	r3, [r3, #8]
 8012a26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012a28:	8992      	ldrh	r2, [r2, #12]
 8012a2a:	0952      	lsrs	r2, r2, #5
 8012a2c:	b292      	uxth	r2, r2
 8012a2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8012a32:	fb02 f201 	mul.w	r2, r2, r1
 8012a36:	1a9b      	subs	r3, r3, r2
 8012a38:	b29b      	uxth	r3, r3
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d001      	beq.n	8012a42 <find_volume+0x4b6>
 8012a3e:	230d      	movs	r3, #13
 8012a40:	e121      	b.n	8012c86 <find_volume+0x6fa>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012a42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a44:	333c      	adds	r3, #60	; 0x3c
 8012a46:	3313      	adds	r3, #19
 8012a48:	4618      	mov	r0, r3
 8012a4a:	f7fc fe49 	bl	800f6e0 <ld_word>
 8012a4e:	4603      	mov	r3, r0
 8012a50:	653b      	str	r3, [r7, #80]	; 0x50
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d106      	bne.n	8012a66 <find_volume+0x4da>
 8012a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a5a:	333c      	adds	r3, #60	; 0x3c
 8012a5c:	3320      	adds	r3, #32
 8012a5e:	4618      	mov	r0, r3
 8012a60:	f7fc fe56 	bl	800f710 <ld_dword>
 8012a64:	6538      	str	r0, [r7, #80]	; 0x50

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012a66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a68:	333c      	adds	r3, #60	; 0x3c
 8012a6a:	330e      	adds	r3, #14
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	f7fc fe37 	bl	800f6e0 <ld_word>
 8012a72:	4603      	mov	r3, r0
 8012a74:	86fb      	strh	r3, [r7, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012a76:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d101      	bne.n	8012a80 <find_volume+0x4f4>
 8012a7c:	230d      	movs	r3, #13
 8012a7e:	e102      	b.n	8012c86 <find_volume+0x6fa>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012a80:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012a84:	4413      	add	r3, r2
 8012a86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012a88:	8911      	ldrh	r1, [r2, #8]
 8012a8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012a8c:	8992      	ldrh	r2, [r2, #12]
 8012a8e:	0952      	lsrs	r2, r2, #5
 8012a90:	b292      	uxth	r2, r2
 8012a92:	fbb1 f2f2 	udiv	r2, r1, r2
 8012a96:	b292      	uxth	r2, r2
 8012a98:	4413      	add	r3, r2
 8012a9a:	633b      	str	r3, [r7, #48]	; 0x30
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012a9c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aa0:	429a      	cmp	r2, r3
 8012aa2:	d201      	bcs.n	8012aa8 <find_volume+0x51c>
 8012aa4:	230d      	movs	r3, #13
 8012aa6:	e0ee      	b.n	8012c86 <find_volume+0x6fa>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012aa8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aac:	1ad3      	subs	r3, r2, r3
 8012aae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012ab0:	8952      	ldrh	r2, [r2, #10]
 8012ab2:	fbb3 f3f2 	udiv	r3, r3, r2
 8012ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d101      	bne.n	8012ac2 <find_volume+0x536>
 8012abe:	230d      	movs	r3, #13
 8012ac0:	e0e1      	b.n	8012c86 <find_volume+0x6fa>
		fmt = FS_FAT32;
 8012ac2:	2303      	movs	r3, #3
 8012ac4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aca:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012ace:	4293      	cmp	r3, r2
 8012ad0:	d802      	bhi.n	8012ad8 <find_volume+0x54c>
 8012ad2:	2302      	movs	r3, #2
 8012ad4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ada:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012ade:	4293      	cmp	r3, r2
 8012ae0:	d802      	bhi.n	8012ae8 <find_volume+0x55c>
 8012ae2:	2301      	movs	r3, #1
 8012ae4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aea:	1c9a      	adds	r2, r3, #2
 8012aec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012aee:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8012af0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012af2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012af4:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012af6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012af8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012afa:	441a      	add	r2, r3
 8012afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012afe:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8012b00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b04:	441a      	add	r2, r3
 8012b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b08:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 8012b0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012b0e:	2b03      	cmp	r3, #3
 8012b10:	d11e      	bne.n	8012b50 <find_volume+0x5c4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b14:	333c      	adds	r3, #60	; 0x3c
 8012b16:	332a      	adds	r3, #42	; 0x2a
 8012b18:	4618      	mov	r0, r3
 8012b1a:	f7fc fde1 	bl	800f6e0 <ld_word>
 8012b1e:	4603      	mov	r3, r0
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d001      	beq.n	8012b28 <find_volume+0x59c>
 8012b24:	230d      	movs	r3, #13
 8012b26:	e0ae      	b.n	8012c86 <find_volume+0x6fa>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012b28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b2a:	891b      	ldrh	r3, [r3, #8]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d001      	beq.n	8012b34 <find_volume+0x5a8>
 8012b30:	230d      	movs	r3, #13
 8012b32:	e0a8      	b.n	8012c86 <find_volume+0x6fa>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b36:	333c      	adds	r3, #60	; 0x3c
 8012b38:	332c      	adds	r3, #44	; 0x2c
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	f7fc fde8 	bl	800f710 <ld_dword>
 8012b40:	4602      	mov	r2, r0
 8012b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b44:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b48:	6a1b      	ldr	r3, [r3, #32]
 8012b4a:	009b      	lsls	r3, r3, #2
 8012b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012b4e:	e01f      	b.n	8012b90 <find_volume+0x604>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b52:	891b      	ldrh	r3, [r3, #8]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d101      	bne.n	8012b5c <find_volume+0x5d0>
 8012b58:	230d      	movs	r3, #13
 8012b5a:	e094      	b.n	8012c86 <find_volume+0x6fa>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b62:	441a      	add	r2, r3
 8012b64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b66:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012b68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012b6c:	2b02      	cmp	r3, #2
 8012b6e:	d103      	bne.n	8012b78 <find_volume+0x5ec>
 8012b70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b72:	6a1b      	ldr	r3, [r3, #32]
 8012b74:	005b      	lsls	r3, r3, #1
 8012b76:	e00a      	b.n	8012b8e <find_volume+0x602>
 8012b78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b7a:	6a1a      	ldr	r2, [r3, #32]
 8012b7c:	4613      	mov	r3, r2
 8012b7e:	005b      	lsls	r3, r3, #1
 8012b80:	4413      	add	r3, r2
 8012b82:	085a      	lsrs	r2, r3, #1
 8012b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b86:	6a1b      	ldr	r3, [r3, #32]
 8012b88:	f003 0301 	and.w	r3, r3, #1
 8012b8c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b96:	899b      	ldrh	r3, [r3, #12]
 8012b98:	4619      	mov	r1, r3
 8012b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b9c:	440b      	add	r3, r1
 8012b9e:	3b01      	subs	r3, #1
 8012ba0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012ba2:	8989      	ldrh	r1, [r1, #12]
 8012ba4:	fbb3 f3f1 	udiv	r3, r3, r1
 8012ba8:	429a      	cmp	r2, r3
 8012baa:	d201      	bcs.n	8012bb0 <find_volume+0x624>
 8012bac:	230d      	movs	r3, #13
 8012bae:	e06a      	b.n	8012c86 <find_volume+0x6fa>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8012bb6:	61da      	str	r2, [r3, #28]
 8012bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bba:	69da      	ldr	r2, [r3, #28]
 8012bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bbe:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 8012bc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bc2:	2280      	movs	r2, #128	; 0x80
 8012bc4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012bc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012bca:	2b03      	cmp	r3, #3
 8012bcc:	d149      	bne.n	8012c62 <find_volume+0x6d6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012bce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bd0:	333c      	adds	r3, #60	; 0x3c
 8012bd2:	3330      	adds	r3, #48	; 0x30
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	f7fc fd83 	bl	800f6e0 <ld_word>
 8012bda:	4603      	mov	r3, r0
 8012bdc:	2b01      	cmp	r3, #1
 8012bde:	d140      	bne.n	8012c62 <find_volume+0x6d6>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012be0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012be2:	3301      	adds	r3, #1
 8012be4:	4619      	mov	r1, r3
 8012be6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012be8:	f7fd f96e 	bl	800fec8 <move_window>
 8012bec:	4603      	mov	r3, r0
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d137      	bne.n	8012c62 <find_volume+0x6d6>
		{
			fs->fsi_flag = 0;
 8012bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bf4:	2200      	movs	r2, #0
 8012bf6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bfa:	333c      	adds	r3, #60	; 0x3c
 8012bfc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012c00:	4618      	mov	r0, r3
 8012c02:	f7fc fd6d 	bl	800f6e0 <ld_word>
 8012c06:	4603      	mov	r3, r0
 8012c08:	461a      	mov	r2, r3
 8012c0a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012c0e:	429a      	cmp	r2, r3
 8012c10:	d127      	bne.n	8012c62 <find_volume+0x6d6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012c12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c14:	333c      	adds	r3, #60	; 0x3c
 8012c16:	4618      	mov	r0, r3
 8012c18:	f7fc fd7a 	bl	800f710 <ld_dword>
 8012c1c:	4602      	mov	r2, r0
 8012c1e:	4b1c      	ldr	r3, [pc, #112]	; (8012c90 <find_volume+0x704>)
 8012c20:	429a      	cmp	r2, r3
 8012c22:	d11e      	bne.n	8012c62 <find_volume+0x6d6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c26:	333c      	adds	r3, #60	; 0x3c
 8012c28:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	f7fc fd6f 	bl	800f710 <ld_dword>
 8012c32:	4602      	mov	r2, r0
 8012c34:	4b17      	ldr	r3, [pc, #92]	; (8012c94 <find_volume+0x708>)
 8012c36:	429a      	cmp	r2, r3
 8012c38:	d113      	bne.n	8012c62 <find_volume+0x6d6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012c3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c3c:	333c      	adds	r3, #60	; 0x3c
 8012c3e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012c42:	4618      	mov	r0, r3
 8012c44:	f7fc fd64 	bl	800f710 <ld_dword>
 8012c48:	4602      	mov	r2, r0
 8012c4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c4c:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c50:	333c      	adds	r3, #60	; 0x3c
 8012c52:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8012c56:	4618      	mov	r0, r3
 8012c58:	f7fc fd5a 	bl	800f710 <ld_dword>
 8012c5c:	4602      	mov	r2, r0
 8012c5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c60:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012c62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c64:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8012c68:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012c6a:	4b0b      	ldr	r3, [pc, #44]	; (8012c98 <find_volume+0x70c>)
 8012c6c:	881b      	ldrh	r3, [r3, #0]
 8012c6e:	3301      	adds	r3, #1
 8012c70:	b29a      	uxth	r2, r3
 8012c72:	4b09      	ldr	r3, [pc, #36]	; (8012c98 <find_volume+0x70c>)
 8012c74:	801a      	strh	r2, [r3, #0]
 8012c76:	4b08      	ldr	r3, [pc, #32]	; (8012c98 <find_volume+0x70c>)
 8012c78:	881a      	ldrh	r2, [r3, #0]
 8012c7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c7c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012c7e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012c80:	f7fd f8ba 	bl	800fdf8 <clear_lock>
#endif
	return FR_OK;
 8012c84:	2300      	movs	r3, #0
}
 8012c86:	4618      	mov	r0, r3
 8012c88:	3760      	adds	r7, #96	; 0x60
 8012c8a:	46bd      	mov	sp, r7
 8012c8c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8012c90:	41615252 	.word	0x41615252
 8012c94:	61417272 	.word	0x61417272
 8012c98:	24000284 	.word	0x24000284

08012c9c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012c9c:	b580      	push	{r7, lr}
 8012c9e:	b084      	sub	sp, #16
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	6078      	str	r0, [r7, #4]
 8012ca4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012ca6:	2309      	movs	r3, #9
 8012ca8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d01c      	beq.n	8012cea <validate+0x4e>
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d018      	beq.n	8012cea <validate+0x4e>
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	781b      	ldrb	r3, [r3, #0]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d013      	beq.n	8012cea <validate+0x4e>
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	889a      	ldrh	r2, [r3, #4]
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	88db      	ldrh	r3, [r3, #6]
 8012ccc:	429a      	cmp	r2, r3
 8012cce:	d10c      	bne.n	8012cea <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	785b      	ldrb	r3, [r3, #1]
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	f7fc fc64 	bl	800f5a4 <disk_status>
 8012cdc:	4603      	mov	r3, r0
 8012cde:	f003 0301 	and.w	r3, r3, #1
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d101      	bne.n	8012cea <validate+0x4e>
			res = FR_OK;
 8012ce6:	2300      	movs	r3, #0
 8012ce8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012cea:	7bfb      	ldrb	r3, [r7, #15]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d102      	bne.n	8012cf6 <validate+0x5a>
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	e000      	b.n	8012cf8 <validate+0x5c>
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	683a      	ldr	r2, [r7, #0]
 8012cfa:	6013      	str	r3, [r2, #0]
	return res;
 8012cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8012cfe:	4618      	mov	r0, r3
 8012d00:	3710      	adds	r7, #16
 8012d02:	46bd      	mov	sp, r7
 8012d04:	bd80      	pop	{r7, pc}
	...

08012d08 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012d08:	b580      	push	{r7, lr}
 8012d0a:	b088      	sub	sp, #32
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	60f8      	str	r0, [r7, #12]
 8012d10:	60b9      	str	r1, [r7, #8]
 8012d12:	4613      	mov	r3, r2
 8012d14:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012d16:	68bb      	ldr	r3, [r7, #8]
 8012d18:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012d1a:	f107 0310 	add.w	r3, r7, #16
 8012d1e:	4618      	mov	r0, r3
 8012d20:	f7ff fb8b 	bl	801243a <get_ldnumber>
 8012d24:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012d26:	69fb      	ldr	r3, [r7, #28]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	da01      	bge.n	8012d30 <f_mount+0x28>
 8012d2c:	230b      	movs	r3, #11
 8012d2e:	e02b      	b.n	8012d88 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012d30:	4a17      	ldr	r2, [pc, #92]	; (8012d90 <f_mount+0x88>)
 8012d32:	69fb      	ldr	r3, [r7, #28]
 8012d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012d38:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012d3a:	69bb      	ldr	r3, [r7, #24]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d005      	beq.n	8012d4c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012d40:	69b8      	ldr	r0, [r7, #24]
 8012d42:	f7fd f859 	bl	800fdf8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012d46:	69bb      	ldr	r3, [r7, #24]
 8012d48:	2200      	movs	r2, #0
 8012d4a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d002      	beq.n	8012d58 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	2200      	movs	r2, #0
 8012d56:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012d58:	68fa      	ldr	r2, [r7, #12]
 8012d5a:	490d      	ldr	r1, [pc, #52]	; (8012d90 <f_mount+0x88>)
 8012d5c:	69fb      	ldr	r3, [r7, #28]
 8012d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d002      	beq.n	8012d6e <f_mount+0x66>
 8012d68:	79fb      	ldrb	r3, [r7, #7]
 8012d6a:	2b01      	cmp	r3, #1
 8012d6c:	d001      	beq.n	8012d72 <f_mount+0x6a>
 8012d6e:	2300      	movs	r3, #0
 8012d70:	e00a      	b.n	8012d88 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012d72:	f107 010c 	add.w	r1, r7, #12
 8012d76:	f107 0308 	add.w	r3, r7, #8
 8012d7a:	2200      	movs	r2, #0
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	f7ff fc05 	bl	801258c <find_volume>
 8012d82:	4603      	mov	r3, r0
 8012d84:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d88:	4618      	mov	r0, r3
 8012d8a:	3720      	adds	r7, #32
 8012d8c:	46bd      	mov	sp, r7
 8012d8e:	bd80      	pop	{r7, pc}
 8012d90:	24000280 	.word	0x24000280

08012d94 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012d94:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8012d98:	b0a4      	sub	sp, #144	; 0x90
 8012d9a:	af00      	add	r7, sp, #0
 8012d9c:	60f8      	str	r0, [r7, #12]
 8012d9e:	60b9      	str	r1, [r7, #8]
 8012da0:	4613      	mov	r3, r2
 8012da2:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d101      	bne.n	8012dae <f_open+0x1a>
 8012daa:	2309      	movs	r3, #9
 8012dac:	e2bd      	b.n	801332a <f_open+0x596>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012dae:	79fb      	ldrb	r3, [r7, #7]
 8012db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012db4:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012db6:	79fa      	ldrb	r2, [r7, #7]
 8012db8:	f107 0114 	add.w	r1, r7, #20
 8012dbc:	f107 0308 	add.w	r3, r7, #8
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	f7ff fbe3 	bl	801258c <find_volume>
 8012dc6:	4603      	mov	r3, r0
 8012dc8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (res == FR_OK) {
 8012dcc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	f040 82a1 	bne.w	8013318 <f_open+0x584>
		dj.obj.fs = fs;
 8012dd6:	697b      	ldr	r3, [r7, #20]
 8012dd8:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
 8012dda:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8012dde:	f001 f999 	bl	8014114 <ff_memalloc>
 8012de2:	67f8      	str	r0, [r7, #124]	; 0x7c
 8012de4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d101      	bne.n	8012dee <f_open+0x5a>
 8012dea:	2311      	movs	r3, #17
 8012dec:	e29d      	b.n	801332a <f_open+0x596>
 8012dee:	697b      	ldr	r3, [r7, #20]
 8012df0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012df2:	611a      	str	r2, [r3, #16]
 8012df4:	697b      	ldr	r3, [r7, #20]
 8012df6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012df8:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8012dfc:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 8012dfe:	68ba      	ldr	r2, [r7, #8]
 8012e00:	f107 0318 	add.w	r3, r7, #24
 8012e04:	4611      	mov	r1, r2
 8012e06:	4618      	mov	r0, r3
 8012e08:	f7ff fa6a 	bl	80122e0 <follow_path>
 8012e0c:	4603      	mov	r3, r0
 8012e0e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012e12:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d11a      	bne.n	8012e50 <f_open+0xbc>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012e1a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8012e1e:	b25b      	sxtb	r3, r3
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	da03      	bge.n	8012e2c <f_open+0x98>
				res = FR_INVALID_NAME;
 8012e24:	2306      	movs	r3, #6
 8012e26:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8012e2a:	e011      	b.n	8012e50 <f_open+0xbc>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012e2c:	79fb      	ldrb	r3, [r7, #7]
 8012e2e:	f023 0301 	bic.w	r3, r3, #1
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	bf14      	ite	ne
 8012e36:	2301      	movne	r3, #1
 8012e38:	2300      	moveq	r3, #0
 8012e3a:	b2db      	uxtb	r3, r3
 8012e3c:	461a      	mov	r2, r3
 8012e3e:	f107 0318 	add.w	r3, r7, #24
 8012e42:	4611      	mov	r1, r2
 8012e44:	4618      	mov	r0, r3
 8012e46:	f7fc fe8f 	bl	800fb68 <chk_lock>
 8012e4a:	4603      	mov	r3, r0
 8012e4c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012e50:	79fb      	ldrb	r3, [r7, #7]
 8012e52:	f003 031c 	and.w	r3, r3, #28
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	f000 8109 	beq.w	801306e <f_open+0x2da>
			if (res != FR_OK) {					/* No file, create new */
 8012e5c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d017      	beq.n	8012e94 <f_open+0x100>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012e64:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8012e68:	2b04      	cmp	r3, #4
 8012e6a:	d10e      	bne.n	8012e8a <f_open+0xf6>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012e6c:	f7fc fed8 	bl	800fc20 <enq_lock>
 8012e70:	4603      	mov	r3, r0
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d006      	beq.n	8012e84 <f_open+0xf0>
 8012e76:	f107 0318 	add.w	r3, r7, #24
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	f7fe fec8 	bl	8011c10 <dir_register>
 8012e80:	4603      	mov	r3, r0
 8012e82:	e000      	b.n	8012e86 <f_open+0xf2>
 8012e84:	2312      	movs	r3, #18
 8012e86:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012e8a:	79fb      	ldrb	r3, [r7, #7]
 8012e8c:	f043 0308 	orr.w	r3, r3, #8
 8012e90:	71fb      	strb	r3, [r7, #7]
 8012e92:	e010      	b.n	8012eb6 <f_open+0x122>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012e94:	7fbb      	ldrb	r3, [r7, #30]
 8012e96:	f003 0311 	and.w	r3, r3, #17
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d003      	beq.n	8012ea6 <f_open+0x112>
					res = FR_DENIED;
 8012e9e:	2307      	movs	r3, #7
 8012ea0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8012ea4:	e007      	b.n	8012eb6 <f_open+0x122>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012ea6:	79fb      	ldrb	r3, [r7, #7]
 8012ea8:	f003 0304 	and.w	r3, r3, #4
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d002      	beq.n	8012eb6 <f_open+0x122>
 8012eb0:	2308      	movs	r3, #8
 8012eb2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012eb6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	f040 80f1 	bne.w	80130a2 <f_open+0x30e>
 8012ec0:	79fb      	ldrb	r3, [r7, #7]
 8012ec2:	f003 0308 	and.w	r3, r3, #8
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	f000 80eb 	beq.w	80130a2 <f_open+0x30e>
				dw = GET_FATTIME();
 8012ecc:	f7f9 feea 	bl	800cca4 <get_fattime>
 8012ed0:	67b8      	str	r0, [r7, #120]	; 0x78
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8012ed2:	697b      	ldr	r3, [r7, #20]
 8012ed4:	781b      	ldrb	r3, [r3, #0]
 8012ed6:	2b04      	cmp	r3, #4
 8012ed8:	f040 8082 	bne.w	8012fe0 <f_open+0x24c>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8012edc:	697a      	ldr	r2, [r7, #20]
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 8012ee2:	697b      	ldr	r3, [r7, #20]
 8012ee4:	695b      	ldr	r3, [r3, #20]
 8012ee6:	3334      	adds	r3, #52	; 0x34
 8012ee8:	4618      	mov	r0, r3
 8012eea:	f7fc fc11 	bl	800f710 <ld_dword>
 8012eee:	4602      	mov	r2, r0
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8012ef4:	697b      	ldr	r3, [r7, #20]
 8012ef6:	695b      	ldr	r3, [r3, #20]
 8012ef8:	3338      	adds	r3, #56	; 0x38
 8012efa:	4618      	mov	r0, r3
 8012efc:	f7fc fc2b 	bl	800f756 <ld_qword>
 8012f00:	4603      	mov	r3, r0
 8012f02:	460c      	mov	r4, r1
 8012f04:	68fa      	ldr	r2, [r7, #12]
 8012f06:	e9c2 3404 	strd	r3, r4, [r2, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8012f0a:	697b      	ldr	r3, [r7, #20]
 8012f0c:	695b      	ldr	r3, [r3, #20]
 8012f0e:	3321      	adds	r3, #33	; 0x21
 8012f10:	781b      	ldrb	r3, [r3, #0]
 8012f12:	f003 0302 	and.w	r3, r3, #2
 8012f16:	b2da      	uxtb	r2, r3
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	2200      	movs	r2, #0
 8012f20:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 8012f22:	697b      	ldr	r3, [r7, #20]
 8012f24:	695b      	ldr	r3, [r3, #20]
 8012f26:	3308      	adds	r3, #8
 8012f28:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	f7fc fceb 	bl	800f906 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 8012f30:	697b      	ldr	r3, [r7, #20]
 8012f32:	695b      	ldr	r3, [r3, #20]
 8012f34:	3314      	adds	r3, #20
 8012f36:	2200      	movs	r2, #0
 8012f38:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 8012f3a:	697b      	ldr	r3, [r7, #20]
 8012f3c:	695b      	ldr	r3, [r3, #20]
 8012f3e:	330c      	adds	r3, #12
 8012f40:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012f42:	4618      	mov	r0, r3
 8012f44:	f7fc fcdf 	bl	800f906 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 8012f48:	697b      	ldr	r3, [r7, #20]
 8012f4a:	695b      	ldr	r3, [r3, #20]
 8012f4c:	3315      	adds	r3, #21
 8012f4e:	2200      	movs	r2, #0
 8012f50:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 8012f52:	697b      	ldr	r3, [r7, #20]
 8012f54:	695b      	ldr	r3, [r3, #20]
 8012f56:	3304      	adds	r3, #4
 8012f58:	2220      	movs	r2, #32
 8012f5a:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 8012f5c:	697b      	ldr	r3, [r7, #20]
 8012f5e:	695b      	ldr	r3, [r3, #20]
 8012f60:	3334      	adds	r3, #52	; 0x34
 8012f62:	2100      	movs	r1, #0
 8012f64:	4618      	mov	r0, r3
 8012f66:	f7fc fcce 	bl	800f906 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 8012f6a:	697b      	ldr	r3, [r7, #20]
 8012f6c:	695b      	ldr	r3, [r3, #20]
 8012f6e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012f72:	f04f 0200 	mov.w	r2, #0
 8012f76:	f04f 0300 	mov.w	r3, #0
 8012f7a:	4608      	mov	r0, r1
 8012f7c:	f7fc fcef 	bl	800f95e <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 8012f80:	697b      	ldr	r3, [r7, #20]
 8012f82:	695b      	ldr	r3, [r3, #20]
 8012f84:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8012f88:	f04f 0200 	mov.w	r2, #0
 8012f8c:	f04f 0300 	mov.w	r3, #0
 8012f90:	4608      	mov	r0, r1
 8012f92:	f7fc fce4 	bl	800f95e <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 8012f96:	697b      	ldr	r3, [r7, #20]
 8012f98:	695b      	ldr	r3, [r3, #20]
 8012f9a:	3321      	adds	r3, #33	; 0x21
 8012f9c:	2201      	movs	r2, #1
 8012f9e:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 8012fa0:	f107 0318 	add.w	r3, r7, #24
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	f7fe fb80 	bl	80116aa <store_xdir>
 8012faa:	4603      	mov	r3, r0
 8012fac:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 8012fb0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d174      	bne.n	80130a2 <f_open+0x30e>
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	689b      	ldr	r3, [r3, #8]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d070      	beq.n	80130a2 <f_open+0x30e>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8012fc0:	68f8      	ldr	r0, [r7, #12]
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	689b      	ldr	r3, [r3, #8]
 8012fc6:	2200      	movs	r2, #0
 8012fc8:	4619      	mov	r1, r3
 8012fca:	f7fd fc0d 	bl	80107e8 <remove_chain>
 8012fce:	4603      	mov	r3, r0
 8012fd0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	689a      	ldr	r2, [r3, #8]
 8012fd8:	697b      	ldr	r3, [r7, #20]
 8012fda:	3a01      	subs	r2, #1
 8012fdc:	619a      	str	r2, [r3, #24]
 8012fde:	e060      	b.n	80130a2 <f_open+0x30e>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012fe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012fe2:	330e      	adds	r3, #14
 8012fe4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	f7fc fc8d 	bl	800f906 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012fec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012fee:	3316      	adds	r3, #22
 8012ff0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	f7fc fc87 	bl	800f906 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012ff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ffa:	330b      	adds	r3, #11
 8012ffc:	2220      	movs	r2, #32
 8012ffe:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013000:	697b      	ldr	r3, [r7, #20]
 8013002:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013004:	4611      	mov	r1, r2
 8013006:	4618      	mov	r0, r3
 8013008:	f7fd ffc0 	bl	8010f8c <ld_clust>
 801300c:	6778      	str	r0, [r7, #116]	; 0x74
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801300e:	697b      	ldr	r3, [r7, #20]
 8013010:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013012:	2200      	movs	r2, #0
 8013014:	4618      	mov	r0, r3
 8013016:	f7fd ffd8 	bl	8010fca <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801301a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801301c:	331c      	adds	r3, #28
 801301e:	2100      	movs	r1, #0
 8013020:	4618      	mov	r0, r3
 8013022:	f7fc fc70 	bl	800f906 <st_dword>
					fs->wflag = 1;
 8013026:	697b      	ldr	r3, [r7, #20]
 8013028:	2201      	movs	r2, #1
 801302a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801302c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801302e:	2b00      	cmp	r3, #0
 8013030:	d037      	beq.n	80130a2 <f_open+0x30e>
						dw = fs->winsect;
 8013032:	697b      	ldr	r3, [r7, #20]
 8013034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013036:	67bb      	str	r3, [r7, #120]	; 0x78
						res = remove_chain(&dj.obj, cl, 0);
 8013038:	f107 0318 	add.w	r3, r7, #24
 801303c:	2200      	movs	r2, #0
 801303e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8013040:	4618      	mov	r0, r3
 8013042:	f7fd fbd1 	bl	80107e8 <remove_chain>
 8013046:	4603      	mov	r3, r0
 8013048:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						if (res == FR_OK) {
 801304c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8013050:	2b00      	cmp	r3, #0
 8013052:	d126      	bne.n	80130a2 <f_open+0x30e>
							res = move_window(fs, dw);
 8013054:	697b      	ldr	r3, [r7, #20]
 8013056:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8013058:	4618      	mov	r0, r3
 801305a:	f7fc ff35 	bl	800fec8 <move_window>
 801305e:	4603      	mov	r3, r0
 8013060:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013064:	697b      	ldr	r3, [r7, #20]
 8013066:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013068:	3a01      	subs	r2, #1
 801306a:	619a      	str	r2, [r3, #24]
 801306c:	e019      	b.n	80130a2 <f_open+0x30e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801306e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8013072:	2b00      	cmp	r3, #0
 8013074:	d115      	bne.n	80130a2 <f_open+0x30e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013076:	7fbb      	ldrb	r3, [r7, #30]
 8013078:	f003 0310 	and.w	r3, r3, #16
 801307c:	2b00      	cmp	r3, #0
 801307e:	d003      	beq.n	8013088 <f_open+0x2f4>
					res = FR_NO_FILE;
 8013080:	2304      	movs	r3, #4
 8013082:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8013086:	e00c      	b.n	80130a2 <f_open+0x30e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013088:	79fb      	ldrb	r3, [r7, #7]
 801308a:	f003 0302 	and.w	r3, r3, #2
 801308e:	2b00      	cmp	r3, #0
 8013090:	d007      	beq.n	80130a2 <f_open+0x30e>
 8013092:	7fbb      	ldrb	r3, [r7, #30]
 8013094:	f003 0301 	and.w	r3, r3, #1
 8013098:	2b00      	cmp	r3, #0
 801309a:	d002      	beq.n	80130a2 <f_open+0x30e>
						res = FR_DENIED;
 801309c:	2307      	movs	r3, #7
 801309e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					}
				}
			}
		}
		if (res == FR_OK) {
 80130a2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d128      	bne.n	80130fc <f_open+0x368>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80130aa:	79fb      	ldrb	r3, [r7, #7]
 80130ac:	f003 0308 	and.w	r3, r3, #8
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d003      	beq.n	80130bc <f_open+0x328>
				mode |= FA_MODIFIED;
 80130b4:	79fb      	ldrb	r3, [r7, #7]
 80130b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80130ba:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80130bc:	697b      	ldr	r3, [r7, #20]
 80130be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 80130c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80130ca:	79fb      	ldrb	r3, [r7, #7]
 80130cc:	f023 0301 	bic.w	r3, r3, #1
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	bf14      	ite	ne
 80130d4:	2301      	movne	r3, #1
 80130d6:	2300      	moveq	r3, #0
 80130d8:	b2db      	uxtb	r3, r3
 80130da:	461a      	mov	r2, r3
 80130dc:	f107 0318 	add.w	r3, r7, #24
 80130e0:	4611      	mov	r1, r2
 80130e2:	4618      	mov	r0, r3
 80130e4:	f7fc fdbe 	bl	800fc64 <inc_lock>
 80130e8:	4602      	mov	r2, r0
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d102      	bne.n	80130fc <f_open+0x368>
 80130f6:	2302      	movs	r3, #2
 80130f8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80130fc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8013100:	2b00      	cmp	r3, #0
 8013102:	f040 8106 	bne.w	8013312 <f_open+0x57e>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8013106:	697b      	ldr	r3, [r7, #20]
 8013108:	781b      	ldrb	r3, [r3, #0]
 801310a:	2b04      	cmp	r3, #4
 801310c:	d12b      	bne.n	8013166 <f_open+0x3d2>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 801310e:	6a3a      	ldr	r2, [r7, #32]
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 8013114:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8013118:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801311c:	7ffa      	ldrb	r2, [r7, #31]
 801311e:	431a      	orrs	r2, r3
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 8013124:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 801312a:	697b      	ldr	r3, [r7, #20]
 801312c:	695b      	ldr	r3, [r3, #20]
 801312e:	3334      	adds	r3, #52	; 0x34
 8013130:	4618      	mov	r0, r3
 8013132:	f7fc faed 	bl	800f710 <ld_dword>
 8013136:	4602      	mov	r2, r0
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 801313c:	697b      	ldr	r3, [r7, #20]
 801313e:	695b      	ldr	r3, [r3, #20]
 8013140:	3338      	adds	r3, #56	; 0x38
 8013142:	4618      	mov	r0, r3
 8013144:	f7fc fb07 	bl	800f756 <ld_qword>
 8013148:	4603      	mov	r3, r0
 801314a:	460c      	mov	r4, r1
 801314c:	68fa      	ldr	r2, [r7, #12]
 801314e:	e9c2 3404 	strd	r3, r4, [r2, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8013152:	697b      	ldr	r3, [r7, #20]
 8013154:	695b      	ldr	r3, [r3, #20]
 8013156:	3321      	adds	r3, #33	; 0x21
 8013158:	781b      	ldrb	r3, [r3, #0]
 801315a:	f003 0302 	and.w	r3, r3, #2
 801315e:	b2da      	uxtb	r2, r3
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	71da      	strb	r2, [r3, #7]
 8013164:	e013      	b.n	801318e <f_open+0x3fa>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013166:	697b      	ldr	r3, [r7, #20]
 8013168:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801316a:	4611      	mov	r1, r2
 801316c:	4618      	mov	r0, r3
 801316e:	f7fd ff0d 	bl	8010f8c <ld_clust>
 8013172:	4602      	mov	r2, r0
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801317a:	331c      	adds	r3, #28
 801317c:	4618      	mov	r0, r3
 801317e:	f7fc fac7 	bl	800f710 <ld_dword>
 8013182:	4603      	mov	r3, r0
 8013184:	f04f 0400 	mov.w	r4, #0
 8013188:	68fa      	ldr	r2, [r7, #12]
 801318a:	e9c2 3404 	strd	r3, r4, [r2, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	2200      	movs	r2, #0
 8013192:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013194:	697a      	ldr	r2, [r7, #20]
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801319a:	697b      	ldr	r3, [r7, #20]
 801319c:	88da      	ldrh	r2, [r3, #6]
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	79fa      	ldrb	r2, [r7, #7]
 80131a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	2200      	movs	r2, #0
 80131ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	2200      	movs	r2, #0
 80131b6:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 80131b8:	68fa      	ldr	r2, [r7, #12]
 80131ba:	f04f 0300 	mov.w	r3, #0
 80131be:	f04f 0400 	mov.w	r4, #0
 80131c2:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	3354      	adds	r3, #84	; 0x54
 80131ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80131ce:	2100      	movs	r1, #0
 80131d0:	4618      	mov	r0, r3
 80131d2:	f7fc fc6c 	bl	800faae <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80131d6:	79fb      	ldrb	r3, [r7, #7]
 80131d8:	f003 0320 	and.w	r3, r3, #32
 80131dc:	2b00      	cmp	r3, #0
 80131de:	f000 8098 	beq.w	8013312 <f_open+0x57e>
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80131e8:	4323      	orrs	r3, r4
 80131ea:	f000 8092 	beq.w	8013312 <f_open+0x57e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80131f4:	68fa      	ldr	r2, [r7, #12]
 80131f6:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80131fa:	697b      	ldr	r3, [r7, #20]
 80131fc:	895b      	ldrh	r3, [r3, #10]
 80131fe:	461a      	mov	r2, r3
 8013200:	697b      	ldr	r3, [r7, #20]
 8013202:	899b      	ldrh	r3, [r3, #12]
 8013204:	fb03 f302 	mul.w	r3, r3, r2
 8013208:	673b      	str	r3, [r7, #112]	; 0x70
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	689b      	ldr	r3, [r3, #8]
 801320e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8013218:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 801321c:	e024      	b.n	8013268 <f_open+0x4d4>
					clst = get_fat(&fp->obj, clst);
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8013224:	4618      	mov	r0, r3
 8013226:	f7fc ff0d 	bl	8010044 <get_fat>
 801322a:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
					if (clst <= 1) res = FR_INT_ERR;
 801322e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013232:	2b01      	cmp	r3, #1
 8013234:	d802      	bhi.n	801323c <f_open+0x4a8>
 8013236:	2302      	movs	r3, #2
 8013238:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801323c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013244:	d102      	bne.n	801324c <f_open+0x4b8>
 8013246:	2301      	movs	r3, #1
 8013248:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801324c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801324e:	469b      	mov	fp, r3
 8013250:	f04f 0c00 	mov.w	ip, #0
 8013254:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8013258:	460b      	mov	r3, r1
 801325a:	4614      	mov	r4, r2
 801325c:	ebb3 030b 	subs.w	r3, r3, fp
 8013260:	eb64 040c 	sbc.w	r4, r4, ip
 8013264:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 8013268:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801326c:	2b00      	cmp	r3, #0
 801326e:	d109      	bne.n	8013284 <f_open+0x4f0>
 8013270:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013272:	4619      	mov	r1, r3
 8013274:	f04f 0200 	mov.w	r2, #0
 8013278:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 801327c:	42a2      	cmp	r2, r4
 801327e:	bf08      	it	eq
 8013280:	4299      	cmpeq	r1, r3
 8013282:	d3cc      	bcc.n	801321e <f_open+0x48a>
				}
				fp->clust = clst;
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801328a:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801328c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8013290:	2b00      	cmp	r3, #0
 8013292:	d13e      	bne.n	8013312 <f_open+0x57e>
 8013294:	697b      	ldr	r3, [r7, #20]
 8013296:	899b      	ldrh	r3, [r3, #12]
 8013298:	b29b      	uxth	r3, r3
 801329a:	f04f 0400 	mov.w	r4, #0
 801329e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80132a2:	461a      	mov	r2, r3
 80132a4:	4623      	mov	r3, r4
 80132a6:	f7ed f817 	bl	80002d8 <__aeabi_uldivmod>
 80132aa:	461c      	mov	r4, r3
 80132ac:	4613      	mov	r3, r2
 80132ae:	4323      	orrs	r3, r4
 80132b0:	d02f      	beq.n	8013312 <f_open+0x57e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80132b2:	697b      	ldr	r3, [r7, #20]
 80132b4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80132b8:	4618      	mov	r0, r3
 80132ba:	f7fc fea3 	bl	8010004 <clust2sect>
 80132be:	66f8      	str	r0, [r7, #108]	; 0x6c
 80132c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d103      	bne.n	80132ce <f_open+0x53a>
						res = FR_INT_ERR;
 80132c6:	2302      	movs	r3, #2
 80132c8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80132cc:	e021      	b.n	8013312 <f_open+0x57e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80132ce:	697b      	ldr	r3, [r7, #20]
 80132d0:	899b      	ldrh	r3, [r3, #12]
 80132d2:	b29b      	uxth	r3, r3
 80132d4:	f04f 0400 	mov.w	r4, #0
 80132d8:	461a      	mov	r2, r3
 80132da:	4623      	mov	r3, r4
 80132dc:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80132e0:	f7ec fffa 	bl	80002d8 <__aeabi_uldivmod>
 80132e4:	4603      	mov	r3, r0
 80132e6:	460c      	mov	r4, r1
 80132e8:	461a      	mov	r2, r3
 80132ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80132ec:	441a      	add	r2, r3
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80132f2:	697b      	ldr	r3, [r7, #20]
 80132f4:	7858      	ldrb	r0, [r3, #1]
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013300:	2301      	movs	r3, #1
 8013302:	f7fc f98f 	bl	800f624 <disk_read>
 8013306:	4603      	mov	r3, r0
 8013308:	2b00      	cmp	r3, #0
 801330a:	d002      	beq.n	8013312 <f_open+0x57e>
 801330c:	2301      	movs	r3, #1
 801330e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
#endif
		}

		FREE_NAMBUF();
 8013312:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8013314:	f000 ff0a 	bl	801412c <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013318:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801331c:	2b00      	cmp	r3, #0
 801331e:	d002      	beq.n	8013326 <f_open+0x592>
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	2200      	movs	r2, #0
 8013324:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013326:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 801332a:	4618      	mov	r0, r3
 801332c:	3790      	adds	r7, #144	; 0x90
 801332e:	46bd      	mov	sp, r7
 8013330:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08013334 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013336:	b08d      	sub	sp, #52	; 0x34
 8013338:	af00      	add	r7, sp, #0
 801333a:	60f8      	str	r0, [r7, #12]
 801333c:	60b9      	str	r1, [r7, #8]
 801333e:	607a      	str	r2, [r7, #4]
 8013340:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013342:	68bb      	ldr	r3, [r7, #8]
 8013344:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013346:	683b      	ldr	r3, [r7, #0]
 8013348:	2200      	movs	r2, #0
 801334a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	f107 0210 	add.w	r2, r7, #16
 8013352:	4611      	mov	r1, r2
 8013354:	4618      	mov	r0, r3
 8013356:	f7ff fca1 	bl	8012c9c <validate>
 801335a:	4603      	mov	r3, r0
 801335c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013360:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013364:	2b00      	cmp	r3, #0
 8013366:	d108      	bne.n	801337a <f_write+0x46>
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801336e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013372:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013376:	2b00      	cmp	r3, #0
 8013378:	d002      	beq.n	8013380 <f_write+0x4c>
 801337a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801337e:	e1ab      	b.n	80136d8 <f_write+0x3a4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013386:	f003 0302 	and.w	r3, r3, #2
 801338a:	2b00      	cmp	r3, #0
 801338c:	d101      	bne.n	8013392 <f_write+0x5e>
 801338e:	2307      	movs	r3, #7
 8013390:	e1a2      	b.n	80136d8 <f_write+0x3a4>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013392:	693b      	ldr	r3, [r7, #16]
 8013394:	781b      	ldrb	r3, [r3, #0]
 8013396:	2b04      	cmp	r3, #4
 8013398:	f000 818e 	beq.w	80136b8 <f_write+0x384>
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80133a2:	461a      	mov	r2, r3
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	441a      	add	r2, r3
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80133ae:	429a      	cmp	r2, r3
 80133b0:	f080 8182 	bcs.w	80136b8 <f_write+0x384>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80133ba:	43db      	mvns	r3, r3
 80133bc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80133be:	e17b      	b.n	80136b8 <f_write+0x384>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80133c6:	693b      	ldr	r3, [r7, #16]
 80133c8:	899b      	ldrh	r3, [r3, #12]
 80133ca:	b29b      	uxth	r3, r3
 80133cc:	f04f 0400 	mov.w	r4, #0
 80133d0:	461a      	mov	r2, r3
 80133d2:	4623      	mov	r3, r4
 80133d4:	f7ec ff80 	bl	80002d8 <__aeabi_uldivmod>
 80133d8:	461c      	mov	r4, r3
 80133da:	4613      	mov	r3, r2
 80133dc:	4323      	orrs	r3, r4
 80133de:	f040 810c 	bne.w	80135fa <f_write+0x2c6>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80133e8:	693b      	ldr	r3, [r7, #16]
 80133ea:	899b      	ldrh	r3, [r3, #12]
 80133ec:	b29b      	uxth	r3, r3
 80133ee:	f04f 0400 	mov.w	r4, #0
 80133f2:	461a      	mov	r2, r3
 80133f4:	4623      	mov	r3, r4
 80133f6:	f7ec ff6f 	bl	80002d8 <__aeabi_uldivmod>
 80133fa:	4603      	mov	r3, r0
 80133fc:	460c      	mov	r4, r1
 80133fe:	461a      	mov	r2, r3
 8013400:	693b      	ldr	r3, [r7, #16]
 8013402:	895b      	ldrh	r3, [r3, #10]
 8013404:	3b01      	subs	r3, #1
 8013406:	4013      	ands	r3, r2
 8013408:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801340a:	69bb      	ldr	r3, [r7, #24]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d148      	bne.n	80134a2 <f_write+0x16e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8013416:	4323      	orrs	r3, r4
 8013418:	d10c      	bne.n	8013434 <f_write+0x100>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	689b      	ldr	r3, [r3, #8]
 801341e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013422:	2b00      	cmp	r3, #0
 8013424:	d11c      	bne.n	8013460 <f_write+0x12c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	2100      	movs	r1, #0
 801342a:	4618      	mov	r0, r3
 801342c:	f7fd fa90 	bl	8010950 <create_chain>
 8013430:	62b8      	str	r0, [r7, #40]	; 0x28
 8013432:	e015      	b.n	8013460 <f_write+0x12c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013438:	2b00      	cmp	r3, #0
 801343a:	d009      	beq.n	8013450 <f_write+0x11c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8013442:	461a      	mov	r2, r3
 8013444:	4623      	mov	r3, r4
 8013446:	68f8      	ldr	r0, [r7, #12]
 8013448:	f7fd fb83 	bl	8010b52 <clmt_clust>
 801344c:	62b8      	str	r0, [r7, #40]	; 0x28
 801344e:	e007      	b.n	8013460 <f_write+0x12c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013450:	68fa      	ldr	r2, [r7, #12]
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013456:	4619      	mov	r1, r3
 8013458:	4610      	mov	r0, r2
 801345a:	f7fd fa79 	bl	8010950 <create_chain>
 801345e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013462:	2b00      	cmp	r3, #0
 8013464:	f000 812d 	beq.w	80136c2 <f_write+0x38e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801346a:	2b01      	cmp	r3, #1
 801346c:	d105      	bne.n	801347a <f_write+0x146>
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	2202      	movs	r2, #2
 8013472:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8013476:	2302      	movs	r3, #2
 8013478:	e12e      	b.n	80136d8 <f_write+0x3a4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801347a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801347c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013480:	d105      	bne.n	801348e <f_write+0x15a>
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	2201      	movs	r2, #1
 8013486:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801348a:	2301      	movs	r3, #1
 801348c:	e124      	b.n	80136d8 <f_write+0x3a4>
				fp->clust = clst;			/* Update current cluster */
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013492:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	689b      	ldr	r3, [r3, #8]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d102      	bne.n	80134a2 <f_write+0x16e>
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80134a0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80134a8:	b25b      	sxtb	r3, r3
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	da1b      	bge.n	80134e6 <f_write+0x1b2>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80134ae:	693b      	ldr	r3, [r7, #16]
 80134b0:	7858      	ldrb	r0, [r3, #1]
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80134bc:	2301      	movs	r3, #1
 80134be:	f7fc f8d1 	bl	800f664 <disk_write>
 80134c2:	4603      	mov	r3, r0
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d005      	beq.n	80134d4 <f_write+0x1a0>
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	2201      	movs	r2, #1
 80134cc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80134d0:	2301      	movs	r3, #1
 80134d2:	e101      	b.n	80136d8 <f_write+0x3a4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80134da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80134de:	b2da      	uxtb	r2, r3
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80134e6:	693a      	ldr	r2, [r7, #16]
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134ec:	4619      	mov	r1, r3
 80134ee:	4610      	mov	r0, r2
 80134f0:	f7fc fd88 	bl	8010004 <clust2sect>
 80134f4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80134f6:	697b      	ldr	r3, [r7, #20]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d105      	bne.n	8013508 <f_write+0x1d4>
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	2202      	movs	r2, #2
 8013500:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8013504:	2302      	movs	r3, #2
 8013506:	e0e7      	b.n	80136d8 <f_write+0x3a4>
			sect += csect;
 8013508:	697a      	ldr	r2, [r7, #20]
 801350a:	69bb      	ldr	r3, [r7, #24]
 801350c:	4413      	add	r3, r2
 801350e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013510:	693b      	ldr	r3, [r7, #16]
 8013512:	899b      	ldrh	r3, [r3, #12]
 8013514:	461a      	mov	r2, r3
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	fbb3 f3f2 	udiv	r3, r3, r2
 801351c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801351e:	6a3b      	ldr	r3, [r7, #32]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d046      	beq.n	80135b2 <f_write+0x27e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013524:	69ba      	ldr	r2, [r7, #24]
 8013526:	6a3b      	ldr	r3, [r7, #32]
 8013528:	4413      	add	r3, r2
 801352a:	693a      	ldr	r2, [r7, #16]
 801352c:	8952      	ldrh	r2, [r2, #10]
 801352e:	4293      	cmp	r3, r2
 8013530:	d905      	bls.n	801353e <f_write+0x20a>
					cc = fs->csize - csect;
 8013532:	693b      	ldr	r3, [r7, #16]
 8013534:	895b      	ldrh	r3, [r3, #10]
 8013536:	461a      	mov	r2, r3
 8013538:	69bb      	ldr	r3, [r7, #24]
 801353a:	1ad3      	subs	r3, r2, r3
 801353c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801353e:	693b      	ldr	r3, [r7, #16]
 8013540:	7858      	ldrb	r0, [r3, #1]
 8013542:	6a3b      	ldr	r3, [r7, #32]
 8013544:	697a      	ldr	r2, [r7, #20]
 8013546:	69f9      	ldr	r1, [r7, #28]
 8013548:	f7fc f88c 	bl	800f664 <disk_write>
 801354c:	4603      	mov	r3, r0
 801354e:	2b00      	cmp	r3, #0
 8013550:	d005      	beq.n	801355e <f_write+0x22a>
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	2201      	movs	r2, #1
 8013556:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801355a:	2301      	movs	r3, #1
 801355c:	e0bc      	b.n	80136d8 <f_write+0x3a4>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013562:	697b      	ldr	r3, [r7, #20]
 8013564:	1ad3      	subs	r3, r2, r3
 8013566:	6a3a      	ldr	r2, [r7, #32]
 8013568:	429a      	cmp	r2, r3
 801356a:	d91a      	bls.n	80135a2 <f_write+0x26e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013576:	697b      	ldr	r3, [r7, #20]
 8013578:	1ad3      	subs	r3, r2, r3
 801357a:	693a      	ldr	r2, [r7, #16]
 801357c:	8992      	ldrh	r2, [r2, #12]
 801357e:	fb02 f303 	mul.w	r3, r2, r3
 8013582:	69fa      	ldr	r2, [r7, #28]
 8013584:	18d1      	adds	r1, r2, r3
 8013586:	693b      	ldr	r3, [r7, #16]
 8013588:	899b      	ldrh	r3, [r3, #12]
 801358a:	461a      	mov	r2, r3
 801358c:	f7fc fa6e 	bl	800fa6c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801359a:	b2da      	uxtb	r2, r3
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80135a2:	693b      	ldr	r3, [r7, #16]
 80135a4:	899b      	ldrh	r3, [r3, #12]
 80135a6:	461a      	mov	r2, r3
 80135a8:	6a3b      	ldr	r3, [r7, #32]
 80135aa:	fb02 f303 	mul.w	r3, r2, r3
 80135ae:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80135b0:	e058      	b.n	8013664 <f_write+0x330>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80135b6:	697a      	ldr	r2, [r7, #20]
 80135b8:	429a      	cmp	r2, r3
 80135ba:	d01b      	beq.n	80135f4 <f_write+0x2c0>
				fp->fptr < fp->obj.objsize &&
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80135c8:	42a2      	cmp	r2, r4
 80135ca:	bf08      	it	eq
 80135cc:	4299      	cmpeq	r1, r3
 80135ce:	d211      	bcs.n	80135f4 <f_write+0x2c0>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80135d0:	693b      	ldr	r3, [r7, #16]
 80135d2:	7858      	ldrb	r0, [r3, #1]
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80135da:	2301      	movs	r3, #1
 80135dc:	697a      	ldr	r2, [r7, #20]
 80135de:	f7fc f821 	bl	800f624 <disk_read>
 80135e2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d005      	beq.n	80135f4 <f_write+0x2c0>
					ABORT(fs, FR_DISK_ERR);
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	2201      	movs	r2, #1
 80135ec:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80135f0:	2301      	movs	r3, #1
 80135f2:	e071      	b.n	80136d8 <f_write+0x3a4>
			}
#endif
			fp->sect = sect;
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	697a      	ldr	r2, [r7, #20]
 80135f8:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80135fa:	693b      	ldr	r3, [r7, #16]
 80135fc:	899b      	ldrh	r3, [r3, #12]
 80135fe:	4618      	mov	r0, r3
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8013606:	693a      	ldr	r2, [r7, #16]
 8013608:	8992      	ldrh	r2, [r2, #12]
 801360a:	fbb3 f1f2 	udiv	r1, r3, r2
 801360e:	fb02 f201 	mul.w	r2, r2, r1
 8013612:	1a9b      	subs	r3, r3, r2
 8013614:	1ac3      	subs	r3, r0, r3
 8013616:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	429a      	cmp	r2, r3
 801361e:	d901      	bls.n	8013624 <f_write+0x2f0>
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	f103 0554 	add.w	r5, r3, #84	; 0x54
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8013630:	693b      	ldr	r3, [r7, #16]
 8013632:	899b      	ldrh	r3, [r3, #12]
 8013634:	b29b      	uxth	r3, r3
 8013636:	f04f 0400 	mov.w	r4, #0
 801363a:	461a      	mov	r2, r3
 801363c:	4623      	mov	r3, r4
 801363e:	f7ec fe4b 	bl	80002d8 <__aeabi_uldivmod>
 8013642:	461c      	mov	r4, r3
 8013644:	4613      	mov	r3, r2
 8013646:	442b      	add	r3, r5
 8013648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801364a:	69f9      	ldr	r1, [r7, #28]
 801364c:	4618      	mov	r0, r3
 801364e:	f7fc fa0d 	bl	800fa6c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013658:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801365c:	b2da      	uxtb	r2, r3
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013664:	69fa      	ldr	r2, [r7, #28]
 8013666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013668:	4413      	add	r3, r2
 801366a:	61fb      	str	r3, [r7, #28]
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8013672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013674:	461d      	mov	r5, r3
 8013676:	f04f 0600 	mov.w	r6, #0
 801367a:	186b      	adds	r3, r5, r1
 801367c:	eb46 0402 	adc.w	r4, r6, r2
 8013680:	68fa      	ldr	r2, [r7, #12]
 8013682:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 801368c:	68fa      	ldr	r2, [r7, #12]
 801368e:	e9d2 120e 	ldrd	r1, r2, [r2, #56]	; 0x38
 8013692:	4294      	cmp	r4, r2
 8013694:	bf08      	it	eq
 8013696:	428b      	cmpeq	r3, r1
 8013698:	d201      	bcs.n	801369e <f_write+0x36a>
 801369a:	460b      	mov	r3, r1
 801369c:	4614      	mov	r4, r2
 801369e:	68fa      	ldr	r2, [r7, #12]
 80136a0:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80136a4:	683b      	ldr	r3, [r7, #0]
 80136a6:	681a      	ldr	r2, [r3, #0]
 80136a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136aa:	441a      	add	r2, r3
 80136ac:	683b      	ldr	r3, [r7, #0]
 80136ae:	601a      	str	r2, [r3, #0]
 80136b0:	687a      	ldr	r2, [r7, #4]
 80136b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136b4:	1ad3      	subs	r3, r2, r3
 80136b6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	f47f ae80 	bne.w	80133c0 <f_write+0x8c>
 80136c0:	e000      	b.n	80136c4 <f_write+0x390>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80136c2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80136ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80136ce:	b2da      	uxtb	r2, r3
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 80136d6:	2300      	movs	r3, #0
}
 80136d8:	4618      	mov	r0, r3
 80136da:	3734      	adds	r7, #52	; 0x34
 80136dc:	46bd      	mov	sp, r7
 80136de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080136e0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80136e0:	b590      	push	{r4, r7, lr}
 80136e2:	b09d      	sub	sp, #116	; 0x74
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80136ee:	4611      	mov	r1, r2
 80136f0:	4618      	mov	r0, r3
 80136f2:	f7ff fad3 	bl	8012c9c <validate>
 80136f6:	4603      	mov	r3, r0
 80136f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (res == FR_OK) {
 80136fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013700:	2b00      	cmp	r3, #0
 8013702:	f040 811d 	bne.w	8013940 <f_sync+0x260>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801370c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013710:	2b00      	cmp	r3, #0
 8013712:	f000 8115 	beq.w	8013940 <f_sync+0x260>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801371c:	b25b      	sxtb	r3, r3
 801371e:	2b00      	cmp	r3, #0
 8013720:	da17      	bge.n	8013752 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013724:	7858      	ldrb	r0, [r3, #1]
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	f103 0154 	add.w	r1, r3, #84	; 0x54
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013730:	2301      	movs	r3, #1
 8013732:	f7fb ff97 	bl	800f664 <disk_write>
 8013736:	4603      	mov	r3, r0
 8013738:	2b00      	cmp	r3, #0
 801373a:	d001      	beq.n	8013740 <f_sync+0x60>
 801373c:	2301      	movs	r3, #1
 801373e:	e101      	b.n	8013944 <f_sync+0x264>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801374a:	b2da      	uxtb	r2, r3
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013752:	f7f9 faa7 	bl	800cca4 <get_fattime>
 8013756:	66b8      	str	r0, [r7, #104]	; 0x68
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8013758:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801375a:	781b      	ldrb	r3, [r3, #0]
 801375c:	2b04      	cmp	r3, #4
 801375e:	f040 80a4 	bne.w	80138aa <f_sync+0x1ca>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	4618      	mov	r0, r3
 8013766:	f7fc ffdf 	bl	8010728 <fill_first_frag>
 801376a:	4603      	mov	r3, r0
 801376c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 8013770:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013774:	2b00      	cmp	r3, #0
 8013776:	d10a      	bne.n	801378e <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8013778:	6878      	ldr	r0, [r7, #4]
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801377e:	f04f 32ff 	mov.w	r2, #4294967295
 8013782:	4619      	mov	r1, r3
 8013784:	f7fc ffff 	bl	8010786 <fill_last_frag>
 8013788:	4603      	mov	r3, r0
 801378a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				}
				if (res == FR_OK) {
 801378e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013792:	2b00      	cmp	r3, #0
 8013794:	f040 80d4 	bne.w	8013940 <f_sync+0x260>
					INIT_NAMBUF(fs);
 8013798:	f44f 608c 	mov.w	r0, #1120	; 0x460
 801379c:	f000 fcba 	bl	8014114 <ff_memalloc>
 80137a0:	6638      	str	r0, [r7, #96]	; 0x60
 80137a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d101      	bne.n	80137ac <f_sync+0xcc>
 80137a8:	2311      	movs	r3, #17
 80137aa:	e0cb      	b.n	8013944 <f_sync+0x264>
 80137ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80137ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80137b0:	611a      	str	r2, [r3, #16]
 80137b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80137b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80137b6:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80137ba:	615a      	str	r2, [r3, #20]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 80137bc:	687a      	ldr	r2, [r7, #4]
 80137be:	f107 0308 	add.w	r3, r7, #8
 80137c2:	4611      	mov	r1, r2
 80137c4:	4618      	mov	r0, r3
 80137c6:	f7fd ff33 	bl	8011630 <load_obj_dir>
 80137ca:	4603      	mov	r3, r0
 80137cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					if (res == FR_OK) {
 80137d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d164      	bne.n	80138a2 <f_sync+0x1c2>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 80137d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80137da:	695b      	ldr	r3, [r3, #20]
 80137dc:	3304      	adds	r3, #4
 80137de:	781a      	ldrb	r2, [r3, #0]
 80137e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80137e2:	695b      	ldr	r3, [r3, #20]
 80137e4:	3304      	adds	r3, #4
 80137e6:	f042 0220 	orr.w	r2, r2, #32
 80137ea:	b2d2      	uxtb	r2, r2
 80137ec:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	79da      	ldrb	r2, [r3, #7]
 80137f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80137f4:	695b      	ldr	r3, [r3, #20]
 80137f6:	3321      	adds	r3, #33	; 0x21
 80137f8:	f042 0201 	orr.w	r2, r2, #1
 80137fc:	b2d2      	uxtb	r2, r2
 80137fe:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 8013800:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013802:	695b      	ldr	r3, [r3, #20]
 8013804:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	689b      	ldr	r3, [r3, #8]
 801380c:	4619      	mov	r1, r3
 801380e:	4610      	mov	r0, r2
 8013810:	f7fc f879 	bl	800f906 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 8013814:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013816:	695b      	ldr	r3, [r3, #20]
 8013818:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8013822:	461a      	mov	r2, r3
 8013824:	4623      	mov	r3, r4
 8013826:	4608      	mov	r0, r1
 8013828:	f7fc f899 	bl	800f95e <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 801382c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801382e:	695b      	ldr	r3, [r3, #20]
 8013830:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 801383a:	461a      	mov	r2, r3
 801383c:	4623      	mov	r3, r4
 801383e:	4608      	mov	r0, r1
 8013840:	f7fc f88d 	bl	800f95e <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8013844:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013846:	695b      	ldr	r3, [r3, #20]
 8013848:	330c      	adds	r3, #12
 801384a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801384c:	4618      	mov	r0, r3
 801384e:	f7fc f85a 	bl	800f906 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 8013852:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013854:	695b      	ldr	r3, [r3, #20]
 8013856:	3315      	adds	r3, #21
 8013858:	2200      	movs	r2, #0
 801385a:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 801385c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801385e:	695b      	ldr	r3, [r3, #20]
 8013860:	3310      	adds	r3, #16
 8013862:	2100      	movs	r1, #0
 8013864:	4618      	mov	r0, r3
 8013866:	f7fc f84e 	bl	800f906 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 801386a:	f107 0308 	add.w	r3, r7, #8
 801386e:	4618      	mov	r0, r3
 8013870:	f7fd ff1b 	bl	80116aa <store_xdir>
 8013874:	4603      	mov	r3, r0
 8013876:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						if (res == FR_OK) {
 801387a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801387e:	2b00      	cmp	r3, #0
 8013880:	d10f      	bne.n	80138a2 <f_sync+0x1c2>
							res = sync_fs(fs);
 8013882:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013884:	4618      	mov	r0, r3
 8013886:	f7fc fb4d 	bl	800ff24 <sync_fs>
 801388a:	4603      	mov	r3, r0
 801388c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013896:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801389a:	b2da      	uxtb	r2, r3
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
						}
					}
					FREE_NAMBUF();
 80138a2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80138a4:	f000 fc42 	bl	801412c <ff_memfree>
 80138a8:	e04a      	b.n	8013940 <f_sync+0x260>
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80138aa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80138b0:	4619      	mov	r1, r3
 80138b2:	4610      	mov	r0, r2
 80138b4:	f7fc fb08 	bl	800fec8 <move_window>
 80138b8:	4603      	mov	r3, r0
 80138ba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 80138be:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d13c      	bne.n	8013940 <f_sync+0x260>
					dir = fp->dir_ptr;
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80138ca:	667b      	str	r3, [r7, #100]	; 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80138cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80138ce:	330b      	adds	r3, #11
 80138d0:	781a      	ldrb	r2, [r3, #0]
 80138d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80138d4:	330b      	adds	r3, #11
 80138d6:	f042 0220 	orr.w	r2, r2, #32
 80138da:	b2d2      	uxtb	r2, r2
 80138dc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	6818      	ldr	r0, [r3, #0]
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	689b      	ldr	r3, [r3, #8]
 80138e6:	461a      	mov	r2, r3
 80138e8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80138ea:	f7fd fb6e 	bl	8010fca <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80138ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80138f0:	f103 021c 	add.w	r2, r3, #28
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80138fa:	4619      	mov	r1, r3
 80138fc:	4610      	mov	r0, r2
 80138fe:	f7fc f802 	bl	800f906 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013902:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013904:	3316      	adds	r3, #22
 8013906:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8013908:	4618      	mov	r0, r3
 801390a:	f7fb fffc 	bl	800f906 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801390e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013910:	3312      	adds	r3, #18
 8013912:	2100      	movs	r1, #0
 8013914:	4618      	mov	r0, r3
 8013916:	f7fb ffdb 	bl	800f8d0 <st_word>
					fs->wflag = 1;
 801391a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801391c:	2201      	movs	r2, #1
 801391e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013920:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013922:	4618      	mov	r0, r3
 8013924:	f7fc fafe 	bl	800ff24 <sync_fs>
 8013928:	4603      	mov	r3, r0
 801392a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013934:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013938:	b2da      	uxtb	r2, r3
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013940:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8013944:	4618      	mov	r0, r3
 8013946:	3774      	adds	r7, #116	; 0x74
 8013948:	46bd      	mov	sp, r7
 801394a:	bd90      	pop	{r4, r7, pc}

0801394c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801394c:	b580      	push	{r7, lr}
 801394e:	b084      	sub	sp, #16
 8013950:	af00      	add	r7, sp, #0
 8013952:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013954:	6878      	ldr	r0, [r7, #4]
 8013956:	f7ff fec3 	bl	80136e0 <f_sync>
 801395a:	4603      	mov	r3, r0
 801395c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801395e:	7bfb      	ldrb	r3, [r7, #15]
 8013960:	2b00      	cmp	r3, #0
 8013962:	d118      	bne.n	8013996 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	f107 0208 	add.w	r2, r7, #8
 801396a:	4611      	mov	r1, r2
 801396c:	4618      	mov	r0, r3
 801396e:	f7ff f995 	bl	8012c9c <validate>
 8013972:	4603      	mov	r3, r0
 8013974:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013976:	7bfb      	ldrb	r3, [r7, #15]
 8013978:	2b00      	cmp	r3, #0
 801397a:	d10c      	bne.n	8013996 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013980:	4618      	mov	r0, r3
 8013982:	f7fc f9fd 	bl	800fd80 <dec_lock>
 8013986:	4603      	mov	r3, r0
 8013988:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801398a:	7bfb      	ldrb	r3, [r7, #15]
 801398c:	2b00      	cmp	r3, #0
 801398e:	d102      	bne.n	8013996 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	2200      	movs	r2, #0
 8013994:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013996:	7bfb      	ldrb	r3, [r7, #15]
}
 8013998:	4618      	mov	r0, r3
 801399a:	3710      	adds	r7, #16
 801399c:	46bd      	mov	sp, r7
 801399e:	bd80      	pop	{r7, pc}

080139a0 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80139a0:	b580      	push	{r7, lr}
 80139a2:	b084      	sub	sp, #16
 80139a4:	af00      	add	r7, sp, #0
 80139a6:	6078      	str	r0, [r7, #4]
 80139a8:	460b      	mov	r3, r1
 80139aa:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80139ac:	78fb      	ldrb	r3, [r7, #3]
 80139ae:	2b0a      	cmp	r3, #10
 80139b0:	d103      	bne.n	80139ba <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80139b2:	210d      	movs	r1, #13
 80139b4:	6878      	ldr	r0, [r7, #4]
 80139b6:	f7ff fff3 	bl	80139a0 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	685b      	ldr	r3, [r3, #4]
 80139be:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	db25      	blt.n	8013a12 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	1c5a      	adds	r2, r3, #1
 80139ca:	60fa      	str	r2, [r7, #12]
 80139cc:	687a      	ldr	r2, [r7, #4]
 80139ce:	4413      	add	r3, r2
 80139d0:	78fa      	ldrb	r2, [r7, #3]
 80139d2:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	2b3c      	cmp	r3, #60	; 0x3c
 80139d8:	dd12      	ble.n	8013a00 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	6818      	ldr	r0, [r3, #0]
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	f103 010c 	add.w	r1, r3, #12
 80139e4:	68fa      	ldr	r2, [r7, #12]
 80139e6:	f107 0308 	add.w	r3, r7, #8
 80139ea:	f7ff fca3 	bl	8013334 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80139ee:	68ba      	ldr	r2, [r7, #8]
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	429a      	cmp	r2, r3
 80139f4:	d101      	bne.n	80139fa <putc_bfd+0x5a>
 80139f6:	2300      	movs	r3, #0
 80139f8:	e001      	b.n	80139fe <putc_bfd+0x5e>
 80139fa:	f04f 33ff 	mov.w	r3, #4294967295
 80139fe:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	68fa      	ldr	r2, [r7, #12]
 8013a04:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	689b      	ldr	r3, [r3, #8]
 8013a0a:	1c5a      	adds	r2, r3, #1
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	609a      	str	r2, [r3, #8]
 8013a10:	e000      	b.n	8013a14 <putc_bfd+0x74>
	if (i < 0) return;
 8013a12:	bf00      	nop
}
 8013a14:	3710      	adds	r7, #16
 8013a16:	46bd      	mov	sp, r7
 8013a18:	bd80      	pop	{r7, pc}

08013a1a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8013a1a:	b580      	push	{r7, lr}
 8013a1c:	b084      	sub	sp, #16
 8013a1e:	af00      	add	r7, sp, #0
 8013a20:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	685b      	ldr	r3, [r3, #4]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	db17      	blt.n	8013a5a <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	6818      	ldr	r0, [r3, #0]
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	f103 010c 	add.w	r1, r3, #12
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	685b      	ldr	r3, [r3, #4]
 8013a38:	461a      	mov	r2, r3
 8013a3a:	f107 030c 	add.w	r3, r7, #12
 8013a3e:	f7ff fc79 	bl	8013334 <f_write>
 8013a42:	4603      	mov	r3, r0
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d108      	bne.n	8013a5a <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	685b      	ldr	r3, [r3, #4]
 8013a4c:	461a      	mov	r2, r3
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	429a      	cmp	r2, r3
 8013a52:	d102      	bne.n	8013a5a <putc_flush+0x40>
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	689b      	ldr	r3, [r3, #8]
 8013a58:	e001      	b.n	8013a5e <putc_flush+0x44>
	return EOF;
 8013a5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013a5e:	4618      	mov	r0, r3
 8013a60:	3710      	adds	r7, #16
 8013a62:	46bd      	mov	sp, r7
 8013a64:	bd80      	pop	{r7, pc}

08013a66 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8013a66:	b480      	push	{r7}
 8013a68:	b083      	sub	sp, #12
 8013a6a:	af00      	add	r7, sp, #0
 8013a6c:	6078      	str	r0, [r7, #4]
 8013a6e:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	683a      	ldr	r2, [r7, #0]
 8013a74:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	2200      	movs	r2, #0
 8013a7a:	605a      	str	r2, [r3, #4]
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	685a      	ldr	r2, [r3, #4]
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	609a      	str	r2, [r3, #8]
}
 8013a84:	bf00      	nop
 8013a86:	370c      	adds	r7, #12
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a8e:	4770      	bx	lr

08013a90 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8013a90:	b40e      	push	{r1, r2, r3}
 8013a92:	b580      	push	{r7, lr}
 8013a94:	b0a7      	sub	sp, #156	; 0x9c
 8013a96:	af00      	add	r7, sp, #0
 8013a98:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8013a9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013a9e:	6879      	ldr	r1, [r7, #4]
 8013aa0:	4618      	mov	r0, r3
 8013aa2:	f7ff ffe0 	bl	8013a66 <putc_init>

	va_start(arp, fmt);
 8013aa6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013aaa:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 8013aac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013ab0:	1c5a      	adds	r2, r3, #1
 8013ab2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013ab6:	781b      	ldrb	r3, [r3, #0]
 8013ab8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 8013abc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	f000 81f4 	beq.w	8013eae <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 8013ac6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013aca:	2b25      	cmp	r3, #37	; 0x25
 8013acc:	d008      	beq.n	8013ae0 <f_printf+0x50>
			putc_bfd(&pb, c);
 8013ace:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8013ad2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013ad6:	4611      	mov	r1, r2
 8013ad8:	4618      	mov	r0, r3
 8013ada:	f7ff ff61 	bl	80139a0 <putc_bfd>
			continue;
 8013ade:	e1e5      	b.n	8013eac <f_printf+0x41c>
		}
		w = f = 0;
 8013ae0:	2300      	movs	r3, #0
 8013ae2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8013ae6:	2300      	movs	r3, #0
 8013ae8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 8013aec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013af0:	1c5a      	adds	r2, r3, #1
 8013af2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013af6:	781b      	ldrb	r3, [r3, #0]
 8013af8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8013afc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013b00:	2b30      	cmp	r3, #48	; 0x30
 8013b02:	d10b      	bne.n	8013b1c <f_printf+0x8c>
			f = 1; c = *fmt++;
 8013b04:	2301      	movs	r3, #1
 8013b06:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8013b0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013b0e:	1c5a      	adds	r2, r3, #1
 8013b10:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013b14:	781b      	ldrb	r3, [r3, #0]
 8013b16:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8013b1a:	e024      	b.n	8013b66 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8013b1c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013b20:	2b2d      	cmp	r3, #45	; 0x2d
 8013b22:	d120      	bne.n	8013b66 <f_printf+0xd6>
				f = 2; c = *fmt++;
 8013b24:	2302      	movs	r3, #2
 8013b26:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8013b2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013b2e:	1c5a      	adds	r2, r3, #1
 8013b30:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013b34:	781b      	ldrb	r3, [r3, #0]
 8013b36:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8013b3a:	e014      	b.n	8013b66 <f_printf+0xd6>
			w = w * 10 + c - '0';
 8013b3c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8013b40:	4613      	mov	r3, r2
 8013b42:	009b      	lsls	r3, r3, #2
 8013b44:	4413      	add	r3, r2
 8013b46:	005b      	lsls	r3, r3, #1
 8013b48:	461a      	mov	r2, r3
 8013b4a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013b4e:	4413      	add	r3, r2
 8013b50:	3b30      	subs	r3, #48	; 0x30
 8013b52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 8013b56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013b5a:	1c5a      	adds	r2, r3, #1
 8013b5c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013b60:	781b      	ldrb	r3, [r3, #0]
 8013b62:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 8013b66:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013b6a:	2b2f      	cmp	r3, #47	; 0x2f
 8013b6c:	d903      	bls.n	8013b76 <f_printf+0xe6>
 8013b6e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013b72:	2b39      	cmp	r3, #57	; 0x39
 8013b74:	d9e2      	bls.n	8013b3c <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8013b76:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013b7a:	2b6c      	cmp	r3, #108	; 0x6c
 8013b7c:	d003      	beq.n	8013b86 <f_printf+0xf6>
 8013b7e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013b82:	2b4c      	cmp	r3, #76	; 0x4c
 8013b84:	d10d      	bne.n	8013ba2 <f_printf+0x112>
			f |= 4; c = *fmt++;
 8013b86:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8013b8a:	f043 0304 	orr.w	r3, r3, #4
 8013b8e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8013b92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013b96:	1c5a      	adds	r2, r3, #1
 8013b98:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013b9c:	781b      	ldrb	r3, [r3, #0]
 8013b9e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 8013ba2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	f000 8183 	beq.w	8013eb2 <f_printf+0x422>
		d = c;
 8013bac:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013bb0:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8013bb4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013bb8:	2b60      	cmp	r3, #96	; 0x60
 8013bba:	d908      	bls.n	8013bce <f_printf+0x13e>
 8013bbc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013bc0:	2b7a      	cmp	r3, #122	; 0x7a
 8013bc2:	d804      	bhi.n	8013bce <f_printf+0x13e>
 8013bc4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013bc8:	3b20      	subs	r3, #32
 8013bca:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 8013bce:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013bd2:	3b42      	subs	r3, #66	; 0x42
 8013bd4:	2b16      	cmp	r3, #22
 8013bd6:	f200 8098 	bhi.w	8013d0a <f_printf+0x27a>
 8013bda:	a201      	add	r2, pc, #4	; (adr r2, 8013be0 <f_printf+0x150>)
 8013bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013be0:	08013ceb 	.word	0x08013ceb
 8013be4:	08013cd3 	.word	0x08013cd3
 8013be8:	08013cfb 	.word	0x08013cfb
 8013bec:	08013d0b 	.word	0x08013d0b
 8013bf0:	08013d0b 	.word	0x08013d0b
 8013bf4:	08013d0b 	.word	0x08013d0b
 8013bf8:	08013d0b 	.word	0x08013d0b
 8013bfc:	08013d0b 	.word	0x08013d0b
 8013c00:	08013d0b 	.word	0x08013d0b
 8013c04:	08013d0b 	.word	0x08013d0b
 8013c08:	08013d0b 	.word	0x08013d0b
 8013c0c:	08013d0b 	.word	0x08013d0b
 8013c10:	08013d0b 	.word	0x08013d0b
 8013c14:	08013cf3 	.word	0x08013cf3
 8013c18:	08013d0b 	.word	0x08013d0b
 8013c1c:	08013d0b 	.word	0x08013d0b
 8013c20:	08013d0b 	.word	0x08013d0b
 8013c24:	08013c3d 	.word	0x08013c3d
 8013c28:	08013d0b 	.word	0x08013d0b
 8013c2c:	08013cfb 	.word	0x08013cfb
 8013c30:	08013d0b 	.word	0x08013d0b
 8013c34:	08013d0b 	.word	0x08013d0b
 8013c38:	08013d03 	.word	0x08013d03
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8013c3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013c3e:	1d1a      	adds	r2, r3, #4
 8013c40:	67ba      	str	r2, [r7, #120]	; 0x78
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 8013c46:	2300      	movs	r3, #0
 8013c48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8013c4c:	e004      	b.n	8013c58 <f_printf+0x1c8>
 8013c4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013c52:	3301      	adds	r3, #1
 8013c54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8013c58:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013c5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013c5e:	4413      	add	r3, r2
 8013c60:	781b      	ldrb	r3, [r3, #0]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d1f3      	bne.n	8013c4e <f_printf+0x1be>
			if (!(f & 2)) {
 8013c66:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8013c6a:	f003 0302 	and.w	r3, r3, #2
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d11a      	bne.n	8013ca8 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8013c72:	e005      	b.n	8013c80 <f_printf+0x1f0>
 8013c74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013c78:	2120      	movs	r1, #32
 8013c7a:	4618      	mov	r0, r3
 8013c7c:	f7ff fe90 	bl	80139a0 <putc_bfd>
 8013c80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013c84:	1c5a      	adds	r2, r3, #1
 8013c86:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8013c8a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8013c8e:	429a      	cmp	r2, r3
 8013c90:	d8f0      	bhi.n	8013c74 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8013c92:	e009      	b.n	8013ca8 <f_printf+0x218>
 8013c94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013c96:	1c5a      	adds	r2, r3, #1
 8013c98:	67fa      	str	r2, [r7, #124]	; 0x7c
 8013c9a:	781a      	ldrb	r2, [r3, #0]
 8013c9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013ca0:	4611      	mov	r1, r2
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	f7ff fe7c 	bl	80139a0 <putc_bfd>
 8013ca8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013caa:	781b      	ldrb	r3, [r3, #0]
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d1f1      	bne.n	8013c94 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8013cb0:	e005      	b.n	8013cbe <f_printf+0x22e>
 8013cb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013cb6:	2120      	movs	r1, #32
 8013cb8:	4618      	mov	r0, r3
 8013cba:	f7ff fe71 	bl	80139a0 <putc_bfd>
 8013cbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013cc2:	1c5a      	adds	r2, r3, #1
 8013cc4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8013cc8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8013ccc:	429a      	cmp	r2, r3
 8013cce:	d8f0      	bhi.n	8013cb2 <f_printf+0x222>
			continue;
 8013cd0:	e0ec      	b.n	8013eac <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8013cd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013cd4:	1d1a      	adds	r2, r3, #4
 8013cd6:	67ba      	str	r2, [r7, #120]	; 0x78
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	b2da      	uxtb	r2, r3
 8013cdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013ce0:	4611      	mov	r1, r2
 8013ce2:	4618      	mov	r0, r3
 8013ce4:	f7ff fe5c 	bl	80139a0 <putc_bfd>
 8013ce8:	e0e0      	b.n	8013eac <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 8013cea:	2302      	movs	r3, #2
 8013cec:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8013cf0:	e014      	b.n	8013d1c <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8013cf2:	2308      	movs	r3, #8
 8013cf4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8013cf8:	e010      	b.n	8013d1c <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8013cfa:	230a      	movs	r3, #10
 8013cfc:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8013d00:	e00c      	b.n	8013d1c <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8013d02:	2310      	movs	r3, #16
 8013d04:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8013d08:	e008      	b.n	8013d1c <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8013d0a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8013d0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013d12:	4611      	mov	r1, r2
 8013d14:	4618      	mov	r0, r3
 8013d16:	f7ff fe43 	bl	80139a0 <putc_bfd>
 8013d1a:	e0c7      	b.n	8013eac <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8013d1c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8013d20:	f003 0304 	and.w	r3, r3, #4
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d004      	beq.n	8013d32 <f_printf+0x2a2>
 8013d28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013d2a:	1d1a      	adds	r2, r3, #4
 8013d2c:	67ba      	str	r2, [r7, #120]	; 0x78
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	e00c      	b.n	8013d4c <f_printf+0x2bc>
 8013d32:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013d36:	2b44      	cmp	r3, #68	; 0x44
 8013d38:	d104      	bne.n	8013d44 <f_printf+0x2b4>
 8013d3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013d3c:	1d1a      	adds	r2, r3, #4
 8013d3e:	67ba      	str	r2, [r7, #120]	; 0x78
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	e003      	b.n	8013d4c <f_printf+0x2bc>
 8013d44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013d46:	1d1a      	adds	r2, r3, #4
 8013d48:	67ba      	str	r2, [r7, #120]	; 0x78
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8013d50:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013d54:	2b44      	cmp	r3, #68	; 0x44
 8013d56:	d10e      	bne.n	8013d76 <f_printf+0x2e6>
 8013d58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	da0a      	bge.n	8013d76 <f_printf+0x2e6>
			v = 0 - v;
 8013d60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013d64:	425b      	negs	r3, r3
 8013d66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 8013d6a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8013d6e:	f043 0308 	orr.w	r3, r3, #8
 8013d72:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 8013d76:	2300      	movs	r3, #0
 8013d78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8013d7c:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8013d80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013d84:	fbb3 f1f2 	udiv	r1, r3, r2
 8013d88:	fb02 f201 	mul.w	r2, r2, r1
 8013d8c:	1a9b      	subs	r3, r3, r2
 8013d8e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8013d92:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8013d96:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8013d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8013d9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8013da2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013da6:	2b09      	cmp	r3, #9
 8013da8:	d90b      	bls.n	8013dc2 <f_printf+0x332>
 8013daa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013dae:	2b78      	cmp	r3, #120	; 0x78
 8013db0:	d101      	bne.n	8013db6 <f_printf+0x326>
 8013db2:	2227      	movs	r2, #39	; 0x27
 8013db4:	e000      	b.n	8013db8 <f_printf+0x328>
 8013db6:	2207      	movs	r2, #7
 8013db8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013dbc:	4413      	add	r3, r2
 8013dbe:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 8013dc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013dc6:	1c5a      	adds	r2, r3, #1
 8013dc8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8013dcc:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8013dd0:	3230      	adds	r2, #48	; 0x30
 8013dd2:	b2d2      	uxtb	r2, r2
 8013dd4:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8013dd8:	440b      	add	r3, r1
 8013dda:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8013dde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d003      	beq.n	8013dee <f_printf+0x35e>
 8013de6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013dea:	2b1f      	cmp	r3, #31
 8013dec:	d9c6      	bls.n	8013d7c <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8013dee:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8013df2:	f003 0308 	and.w	r3, r3, #8
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d00a      	beq.n	8013e10 <f_printf+0x380>
 8013dfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013dfe:	1c5a      	adds	r2, r3, #1
 8013e00:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8013e04:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8013e08:	4413      	add	r3, r2
 8013e0a:	222d      	movs	r2, #45	; 0x2d
 8013e0c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8013e10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013e14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8013e18:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8013e1c:	f003 0301 	and.w	r3, r3, #1
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d001      	beq.n	8013e28 <f_printf+0x398>
 8013e24:	2330      	movs	r3, #48	; 0x30
 8013e26:	e000      	b.n	8013e2a <f_printf+0x39a>
 8013e28:	2320      	movs	r3, #32
 8013e2a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8013e2e:	e007      	b.n	8013e40 <f_printf+0x3b0>
 8013e30:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8013e34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013e38:	4611      	mov	r1, r2
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	f7ff fdb0 	bl	80139a0 <putc_bfd>
 8013e40:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8013e44:	f003 0302 	and.w	r3, r3, #2
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d108      	bne.n	8013e5e <f_printf+0x3ce>
 8013e4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013e50:	1c5a      	adds	r2, r3, #1
 8013e52:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8013e56:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8013e5a:	429a      	cmp	r2, r3
 8013e5c:	d8e8      	bhi.n	8013e30 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 8013e5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013e62:	3b01      	subs	r3, #1
 8013e64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013e68:	f107 020c 	add.w	r2, r7, #12
 8013e6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013e70:	4413      	add	r3, r2
 8013e72:	781a      	ldrb	r2, [r3, #0]
 8013e74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013e78:	4611      	mov	r1, r2
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	f7ff fd90 	bl	80139a0 <putc_bfd>
		} while (i);
 8013e80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d1ea      	bne.n	8013e5e <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 8013e88:	e007      	b.n	8013e9a <f_printf+0x40a>
 8013e8a:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8013e8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013e92:	4611      	mov	r1, r2
 8013e94:	4618      	mov	r0, r3
 8013e96:	f7ff fd83 	bl	80139a0 <putc_bfd>
 8013e9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013e9e:	1c5a      	adds	r2, r3, #1
 8013ea0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8013ea4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8013ea8:	429a      	cmp	r2, r3
 8013eaa:	d8ee      	bhi.n	8013e8a <f_printf+0x3fa>
		c = *fmt++;
 8013eac:	e5fe      	b.n	8013aac <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8013eae:	bf00      	nop
 8013eb0:	e000      	b.n	8013eb4 <f_printf+0x424>
		if (!c) break;
 8013eb2:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8013eb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013eb8:	4618      	mov	r0, r3
 8013eba:	f7ff fdae 	bl	8013a1a <putc_flush>
 8013ebe:	4603      	mov	r3, r0
}
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	379c      	adds	r7, #156	; 0x9c
 8013ec4:	46bd      	mov	sp, r7
 8013ec6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013eca:	b003      	add	sp, #12
 8013ecc:	4770      	bx	lr
 8013ece:	bf00      	nop

08013ed0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013ed0:	b480      	push	{r7}
 8013ed2:	b087      	sub	sp, #28
 8013ed4:	af00      	add	r7, sp, #0
 8013ed6:	60f8      	str	r0, [r7, #12]
 8013ed8:	60b9      	str	r1, [r7, #8]
 8013eda:	4613      	mov	r3, r2
 8013edc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013ede:	2301      	movs	r3, #1
 8013ee0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013ee2:	2300      	movs	r3, #0
 8013ee4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013ee6:	4b1f      	ldr	r3, [pc, #124]	; (8013f64 <FATFS_LinkDriverEx+0x94>)
 8013ee8:	7a5b      	ldrb	r3, [r3, #9]
 8013eea:	b2db      	uxtb	r3, r3
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d131      	bne.n	8013f54 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013ef0:	4b1c      	ldr	r3, [pc, #112]	; (8013f64 <FATFS_LinkDriverEx+0x94>)
 8013ef2:	7a5b      	ldrb	r3, [r3, #9]
 8013ef4:	b2db      	uxtb	r3, r3
 8013ef6:	461a      	mov	r2, r3
 8013ef8:	4b1a      	ldr	r3, [pc, #104]	; (8013f64 <FATFS_LinkDriverEx+0x94>)
 8013efa:	2100      	movs	r1, #0
 8013efc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013efe:	4b19      	ldr	r3, [pc, #100]	; (8013f64 <FATFS_LinkDriverEx+0x94>)
 8013f00:	7a5b      	ldrb	r3, [r3, #9]
 8013f02:	b2db      	uxtb	r3, r3
 8013f04:	4a17      	ldr	r2, [pc, #92]	; (8013f64 <FATFS_LinkDriverEx+0x94>)
 8013f06:	009b      	lsls	r3, r3, #2
 8013f08:	4413      	add	r3, r2
 8013f0a:	68fa      	ldr	r2, [r7, #12]
 8013f0c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013f0e:	4b15      	ldr	r3, [pc, #84]	; (8013f64 <FATFS_LinkDriverEx+0x94>)
 8013f10:	7a5b      	ldrb	r3, [r3, #9]
 8013f12:	b2db      	uxtb	r3, r3
 8013f14:	461a      	mov	r2, r3
 8013f16:	4b13      	ldr	r3, [pc, #76]	; (8013f64 <FATFS_LinkDriverEx+0x94>)
 8013f18:	4413      	add	r3, r2
 8013f1a:	79fa      	ldrb	r2, [r7, #7]
 8013f1c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013f1e:	4b11      	ldr	r3, [pc, #68]	; (8013f64 <FATFS_LinkDriverEx+0x94>)
 8013f20:	7a5b      	ldrb	r3, [r3, #9]
 8013f22:	b2db      	uxtb	r3, r3
 8013f24:	1c5a      	adds	r2, r3, #1
 8013f26:	b2d1      	uxtb	r1, r2
 8013f28:	4a0e      	ldr	r2, [pc, #56]	; (8013f64 <FATFS_LinkDriverEx+0x94>)
 8013f2a:	7251      	strb	r1, [r2, #9]
 8013f2c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8013f2e:	7dbb      	ldrb	r3, [r7, #22]
 8013f30:	3330      	adds	r3, #48	; 0x30
 8013f32:	b2da      	uxtb	r2, r3
 8013f34:	68bb      	ldr	r3, [r7, #8]
 8013f36:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013f38:	68bb      	ldr	r3, [r7, #8]
 8013f3a:	3301      	adds	r3, #1
 8013f3c:	223a      	movs	r2, #58	; 0x3a
 8013f3e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013f40:	68bb      	ldr	r3, [r7, #8]
 8013f42:	3302      	adds	r3, #2
 8013f44:	222f      	movs	r2, #47	; 0x2f
 8013f46:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013f48:	68bb      	ldr	r3, [r7, #8]
 8013f4a:	3303      	adds	r3, #3
 8013f4c:	2200      	movs	r2, #0
 8013f4e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013f50:	2300      	movs	r3, #0
 8013f52:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f56:	4618      	mov	r0, r3
 8013f58:	371c      	adds	r7, #28
 8013f5a:	46bd      	mov	sp, r7
 8013f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f60:	4770      	bx	lr
 8013f62:	bf00      	nop
 8013f64:	240002a8 	.word	0x240002a8

08013f68 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013f68:	b580      	push	{r7, lr}
 8013f6a:	b082      	sub	sp, #8
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	6078      	str	r0, [r7, #4]
 8013f70:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013f72:	2200      	movs	r2, #0
 8013f74:	6839      	ldr	r1, [r7, #0]
 8013f76:	6878      	ldr	r0, [r7, #4]
 8013f78:	f7ff ffaa 	bl	8013ed0 <FATFS_LinkDriverEx>
 8013f7c:	4603      	mov	r3, r0
}
 8013f7e:	4618      	mov	r0, r3
 8013f80:	3708      	adds	r7, #8
 8013f82:	46bd      	mov	sp, r7
 8013f84:	bd80      	pop	{r7, pc}
	...

08013f88 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8013f88:	b480      	push	{r7}
 8013f8a:	b085      	sub	sp, #20
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	4603      	mov	r3, r0
 8013f90:	6039      	str	r1, [r7, #0]
 8013f92:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8013f94:	88fb      	ldrh	r3, [r7, #6]
 8013f96:	2b7f      	cmp	r3, #127	; 0x7f
 8013f98:	d802      	bhi.n	8013fa0 <ff_convert+0x18>
		c = chr;
 8013f9a:	88fb      	ldrh	r3, [r7, #6]
 8013f9c:	81fb      	strh	r3, [r7, #14]
 8013f9e:	e025      	b.n	8013fec <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8013fa0:	683b      	ldr	r3, [r7, #0]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d00b      	beq.n	8013fbe <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8013fa6:	88fb      	ldrh	r3, [r7, #6]
 8013fa8:	2bff      	cmp	r3, #255	; 0xff
 8013faa:	d805      	bhi.n	8013fb8 <ff_convert+0x30>
 8013fac:	88fb      	ldrh	r3, [r7, #6]
 8013fae:	3b80      	subs	r3, #128	; 0x80
 8013fb0:	4a12      	ldr	r2, [pc, #72]	; (8013ffc <ff_convert+0x74>)
 8013fb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013fb6:	e000      	b.n	8013fba <ff_convert+0x32>
 8013fb8:	2300      	movs	r3, #0
 8013fba:	81fb      	strh	r3, [r7, #14]
 8013fbc:	e016      	b.n	8013fec <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	81fb      	strh	r3, [r7, #14]
 8013fc2:	e009      	b.n	8013fd8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8013fc4:	89fb      	ldrh	r3, [r7, #14]
 8013fc6:	4a0d      	ldr	r2, [pc, #52]	; (8013ffc <ff_convert+0x74>)
 8013fc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013fcc:	88fa      	ldrh	r2, [r7, #6]
 8013fce:	429a      	cmp	r2, r3
 8013fd0:	d006      	beq.n	8013fe0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8013fd2:	89fb      	ldrh	r3, [r7, #14]
 8013fd4:	3301      	adds	r3, #1
 8013fd6:	81fb      	strh	r3, [r7, #14]
 8013fd8:	89fb      	ldrh	r3, [r7, #14]
 8013fda:	2b7f      	cmp	r3, #127	; 0x7f
 8013fdc:	d9f2      	bls.n	8013fc4 <ff_convert+0x3c>
 8013fde:	e000      	b.n	8013fe2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8013fe0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8013fe2:	89fb      	ldrh	r3, [r7, #14]
 8013fe4:	3380      	adds	r3, #128	; 0x80
 8013fe6:	b29b      	uxth	r3, r3
 8013fe8:	b2db      	uxtb	r3, r3
 8013fea:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8013fec:	89fb      	ldrh	r3, [r7, #14]
}
 8013fee:	4618      	mov	r0, r3
 8013ff0:	3714      	adds	r7, #20
 8013ff2:	46bd      	mov	sp, r7
 8013ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff8:	4770      	bx	lr
 8013ffa:	bf00      	nop
 8013ffc:	08014ef0 	.word	0x08014ef0

08014000 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8014000:	b480      	push	{r7}
 8014002:	b087      	sub	sp, #28
 8014004:	af00      	add	r7, sp, #0
 8014006:	4603      	mov	r3, r0
 8014008:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801400a:	88fb      	ldrh	r3, [r7, #6]
 801400c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014010:	d201      	bcs.n	8014016 <ff_wtoupper+0x16>
 8014012:	4b3e      	ldr	r3, [pc, #248]	; (801410c <ff_wtoupper+0x10c>)
 8014014:	e000      	b.n	8014018 <ff_wtoupper+0x18>
 8014016:	4b3e      	ldr	r3, [pc, #248]	; (8014110 <ff_wtoupper+0x110>)
 8014018:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801401a:	697b      	ldr	r3, [r7, #20]
 801401c:	1c9a      	adds	r2, r3, #2
 801401e:	617a      	str	r2, [r7, #20]
 8014020:	881b      	ldrh	r3, [r3, #0]
 8014022:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8014024:	8a7b      	ldrh	r3, [r7, #18]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d068      	beq.n	80140fc <ff_wtoupper+0xfc>
 801402a:	88fa      	ldrh	r2, [r7, #6]
 801402c:	8a7b      	ldrh	r3, [r7, #18]
 801402e:	429a      	cmp	r2, r3
 8014030:	d364      	bcc.n	80140fc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8014032:	697b      	ldr	r3, [r7, #20]
 8014034:	1c9a      	adds	r2, r3, #2
 8014036:	617a      	str	r2, [r7, #20]
 8014038:	881b      	ldrh	r3, [r3, #0]
 801403a:	823b      	strh	r3, [r7, #16]
 801403c:	8a3b      	ldrh	r3, [r7, #16]
 801403e:	0a1b      	lsrs	r3, r3, #8
 8014040:	81fb      	strh	r3, [r7, #14]
 8014042:	8a3b      	ldrh	r3, [r7, #16]
 8014044:	b2db      	uxtb	r3, r3
 8014046:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8014048:	88fa      	ldrh	r2, [r7, #6]
 801404a:	8a79      	ldrh	r1, [r7, #18]
 801404c:	8a3b      	ldrh	r3, [r7, #16]
 801404e:	440b      	add	r3, r1
 8014050:	429a      	cmp	r2, r3
 8014052:	da49      	bge.n	80140e8 <ff_wtoupper+0xe8>
			switch (cmd) {
 8014054:	89fb      	ldrh	r3, [r7, #14]
 8014056:	2b08      	cmp	r3, #8
 8014058:	d84f      	bhi.n	80140fa <ff_wtoupper+0xfa>
 801405a:	a201      	add	r2, pc, #4	; (adr r2, 8014060 <ff_wtoupper+0x60>)
 801405c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014060:	08014085 	.word	0x08014085
 8014064:	08014097 	.word	0x08014097
 8014068:	080140ad 	.word	0x080140ad
 801406c:	080140b5 	.word	0x080140b5
 8014070:	080140bd 	.word	0x080140bd
 8014074:	080140c5 	.word	0x080140c5
 8014078:	080140cd 	.word	0x080140cd
 801407c:	080140d5 	.word	0x080140d5
 8014080:	080140dd 	.word	0x080140dd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8014084:	88fa      	ldrh	r2, [r7, #6]
 8014086:	8a7b      	ldrh	r3, [r7, #18]
 8014088:	1ad3      	subs	r3, r2, r3
 801408a:	005b      	lsls	r3, r3, #1
 801408c:	697a      	ldr	r2, [r7, #20]
 801408e:	4413      	add	r3, r2
 8014090:	881b      	ldrh	r3, [r3, #0]
 8014092:	80fb      	strh	r3, [r7, #6]
 8014094:	e027      	b.n	80140e6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8014096:	88fa      	ldrh	r2, [r7, #6]
 8014098:	8a7b      	ldrh	r3, [r7, #18]
 801409a:	1ad3      	subs	r3, r2, r3
 801409c:	b29b      	uxth	r3, r3
 801409e:	f003 0301 	and.w	r3, r3, #1
 80140a2:	b29b      	uxth	r3, r3
 80140a4:	88fa      	ldrh	r2, [r7, #6]
 80140a6:	1ad3      	subs	r3, r2, r3
 80140a8:	80fb      	strh	r3, [r7, #6]
 80140aa:	e01c      	b.n	80140e6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80140ac:	88fb      	ldrh	r3, [r7, #6]
 80140ae:	3b10      	subs	r3, #16
 80140b0:	80fb      	strh	r3, [r7, #6]
 80140b2:	e018      	b.n	80140e6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80140b4:	88fb      	ldrh	r3, [r7, #6]
 80140b6:	3b20      	subs	r3, #32
 80140b8:	80fb      	strh	r3, [r7, #6]
 80140ba:	e014      	b.n	80140e6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80140bc:	88fb      	ldrh	r3, [r7, #6]
 80140be:	3b30      	subs	r3, #48	; 0x30
 80140c0:	80fb      	strh	r3, [r7, #6]
 80140c2:	e010      	b.n	80140e6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80140c4:	88fb      	ldrh	r3, [r7, #6]
 80140c6:	3b1a      	subs	r3, #26
 80140c8:	80fb      	strh	r3, [r7, #6]
 80140ca:	e00c      	b.n	80140e6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80140cc:	88fb      	ldrh	r3, [r7, #6]
 80140ce:	3308      	adds	r3, #8
 80140d0:	80fb      	strh	r3, [r7, #6]
 80140d2:	e008      	b.n	80140e6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80140d4:	88fb      	ldrh	r3, [r7, #6]
 80140d6:	3b50      	subs	r3, #80	; 0x50
 80140d8:	80fb      	strh	r3, [r7, #6]
 80140da:	e004      	b.n	80140e6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80140dc:	88fb      	ldrh	r3, [r7, #6]
 80140de:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80140e2:	80fb      	strh	r3, [r7, #6]
 80140e4:	bf00      	nop
			}
			break;
 80140e6:	e008      	b.n	80140fa <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80140e8:	89fb      	ldrh	r3, [r7, #14]
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d195      	bne.n	801401a <ff_wtoupper+0x1a>
 80140ee:	8a3b      	ldrh	r3, [r7, #16]
 80140f0:	005b      	lsls	r3, r3, #1
 80140f2:	697a      	ldr	r2, [r7, #20]
 80140f4:	4413      	add	r3, r2
 80140f6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80140f8:	e78f      	b.n	801401a <ff_wtoupper+0x1a>
			break;
 80140fa:	bf00      	nop
	}

	return chr;
 80140fc:	88fb      	ldrh	r3, [r7, #6]
}
 80140fe:	4618      	mov	r0, r3
 8014100:	371c      	adds	r7, #28
 8014102:	46bd      	mov	sp, r7
 8014104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014108:	4770      	bx	lr
 801410a:	bf00      	nop
 801410c:	08014ff0 	.word	0x08014ff0
 8014110:	080151e4 	.word	0x080151e4

08014114 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8014114:	b580      	push	{r7, lr}
 8014116:	b082      	sub	sp, #8
 8014118:	af00      	add	r7, sp, #0
 801411a:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 801411c:	6878      	ldr	r0, [r7, #4]
 801411e:	f000 fd41 	bl	8014ba4 <malloc>
 8014122:	4603      	mov	r3, r0
}
 8014124:	4618      	mov	r0, r3
 8014126:	3708      	adds	r7, #8
 8014128:	46bd      	mov	sp, r7
 801412a:	bd80      	pop	{r7, pc}

0801412c <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 801412c:	b580      	push	{r7, lr}
 801412e:	b082      	sub	sp, #8
 8014130:	af00      	add	r7, sp, #0
 8014132:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8014134:	6878      	ldr	r0, [r7, #4]
 8014136:	f000 fd3d 	bl	8014bb4 <free>
}
 801413a:	bf00      	nop
 801413c:	3708      	adds	r7, #8
 801413e:	46bd      	mov	sp, r7
 8014140:	bd80      	pop	{r7, pc}
	...

08014144 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8014144:	b580      	push	{r7, lr}
 8014146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8014148:	2200      	movs	r2, #0
 801414a:	4913      	ldr	r1, [pc, #76]	; (8014198 <MX_USB_DEVICE_Init+0x54>)
 801414c:	4813      	ldr	r0, [pc, #76]	; (801419c <MX_USB_DEVICE_Init+0x58>)
 801414e:	f7fa f962 	bl	800e416 <USBD_Init>
 8014152:	4603      	mov	r3, r0
 8014154:	2b00      	cmp	r3, #0
 8014156:	d001      	beq.n	801415c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014158:	f7ec fdfa 	bl	8000d50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 801415c:	4910      	ldr	r1, [pc, #64]	; (80141a0 <MX_USB_DEVICE_Init+0x5c>)
 801415e:	480f      	ldr	r0, [pc, #60]	; (801419c <MX_USB_DEVICE_Init+0x58>)
 8014160:	f7fa f984 	bl	800e46c <USBD_RegisterClass>
 8014164:	4603      	mov	r3, r0
 8014166:	2b00      	cmp	r3, #0
 8014168:	d001      	beq.n	801416e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801416a:	f7ec fdf1 	bl	8000d50 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 801416e:	490d      	ldr	r1, [pc, #52]	; (80141a4 <MX_USB_DEVICE_Init+0x60>)
 8014170:	480a      	ldr	r0, [pc, #40]	; (801419c <MX_USB_DEVICE_Init+0x58>)
 8014172:	f7f9 f92b 	bl	800d3cc <USBD_MSC_RegisterStorage>
 8014176:	4603      	mov	r3, r0
 8014178:	2b00      	cmp	r3, #0
 801417a:	d001      	beq.n	8014180 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801417c:	f7ec fde8 	bl	8000d50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8014180:	4806      	ldr	r0, [pc, #24]	; (801419c <MX_USB_DEVICE_Init+0x58>)
 8014182:	f7fa f98d 	bl	800e4a0 <USBD_Start>
 8014186:	4603      	mov	r3, r0
 8014188:	2b00      	cmp	r3, #0
 801418a:	d001      	beq.n	8014190 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801418c:	f7ec fde0 	bl	8000d50 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8014190:	f7ef fb18 	bl	80037c4 <HAL_PWREx_EnableUSBVoltageDetector>
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014194:	bf00      	nop
 8014196:	bd80      	pop	{r7, pc}
 8014198:	240000c0 	.word	0x240000c0
 801419c:	24007714 	.word	0x24007714
 80141a0:	2400001c 	.word	0x2400001c
 80141a4:	24000110 	.word	0x24000110

080141a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80141a8:	b480      	push	{r7}
 80141aa:	b083      	sub	sp, #12
 80141ac:	af00      	add	r7, sp, #0
 80141ae:	4603      	mov	r3, r0
 80141b0:	6039      	str	r1, [r7, #0]
 80141b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80141b4:	683b      	ldr	r3, [r7, #0]
 80141b6:	2212      	movs	r2, #18
 80141b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80141ba:	4b03      	ldr	r3, [pc, #12]	; (80141c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80141bc:	4618      	mov	r0, r3
 80141be:	370c      	adds	r7, #12
 80141c0:	46bd      	mov	sp, r7
 80141c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141c6:	4770      	bx	lr
 80141c8:	240000dc 	.word	0x240000dc

080141cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80141cc:	b480      	push	{r7}
 80141ce:	b083      	sub	sp, #12
 80141d0:	af00      	add	r7, sp, #0
 80141d2:	4603      	mov	r3, r0
 80141d4:	6039      	str	r1, [r7, #0]
 80141d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80141d8:	683b      	ldr	r3, [r7, #0]
 80141da:	2204      	movs	r2, #4
 80141dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80141de:	4b03      	ldr	r3, [pc, #12]	; (80141ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80141e0:	4618      	mov	r0, r3
 80141e2:	370c      	adds	r7, #12
 80141e4:	46bd      	mov	sp, r7
 80141e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ea:	4770      	bx	lr
 80141ec:	240000f0 	.word	0x240000f0

080141f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b082      	sub	sp, #8
 80141f4:	af00      	add	r7, sp, #0
 80141f6:	4603      	mov	r3, r0
 80141f8:	6039      	str	r1, [r7, #0]
 80141fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80141fc:	79fb      	ldrb	r3, [r7, #7]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d105      	bne.n	801420e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014202:	683a      	ldr	r2, [r7, #0]
 8014204:	4907      	ldr	r1, [pc, #28]	; (8014224 <USBD_FS_ProductStrDescriptor+0x34>)
 8014206:	4808      	ldr	r0, [pc, #32]	; (8014228 <USBD_FS_ProductStrDescriptor+0x38>)
 8014208:	f7fb f90c 	bl	800f424 <USBD_GetString>
 801420c:	e004      	b.n	8014218 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801420e:	683a      	ldr	r2, [r7, #0]
 8014210:	4904      	ldr	r1, [pc, #16]	; (8014224 <USBD_FS_ProductStrDescriptor+0x34>)
 8014212:	4805      	ldr	r0, [pc, #20]	; (8014228 <USBD_FS_ProductStrDescriptor+0x38>)
 8014214:	f7fb f906 	bl	800f424 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014218:	4b02      	ldr	r3, [pc, #8]	; (8014224 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801421a:	4618      	mov	r0, r3
 801421c:	3708      	adds	r7, #8
 801421e:	46bd      	mov	sp, r7
 8014220:	bd80      	pop	{r7, pc}
 8014222:	bf00      	nop
 8014224:	240079d8 	.word	0x240079d8
 8014228:	08014de0 	.word	0x08014de0

0801422c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801422c:	b580      	push	{r7, lr}
 801422e:	b082      	sub	sp, #8
 8014230:	af00      	add	r7, sp, #0
 8014232:	4603      	mov	r3, r0
 8014234:	6039      	str	r1, [r7, #0]
 8014236:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014238:	683a      	ldr	r2, [r7, #0]
 801423a:	4904      	ldr	r1, [pc, #16]	; (801424c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801423c:	4804      	ldr	r0, [pc, #16]	; (8014250 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801423e:	f7fb f8f1 	bl	800f424 <USBD_GetString>
  return USBD_StrDesc;
 8014242:	4b02      	ldr	r3, [pc, #8]	; (801424c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8014244:	4618      	mov	r0, r3
 8014246:	3708      	adds	r7, #8
 8014248:	46bd      	mov	sp, r7
 801424a:	bd80      	pop	{r7, pc}
 801424c:	240079d8 	.word	0x240079d8
 8014250:	08014df4 	.word	0x08014df4

08014254 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014254:	b580      	push	{r7, lr}
 8014256:	b082      	sub	sp, #8
 8014258:	af00      	add	r7, sp, #0
 801425a:	4603      	mov	r3, r0
 801425c:	6039      	str	r1, [r7, #0]
 801425e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014260:	683b      	ldr	r3, [r7, #0]
 8014262:	221a      	movs	r2, #26
 8014264:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8014266:	f000 f843 	bl	80142f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801426a:	4b02      	ldr	r3, [pc, #8]	; (8014274 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801426c:	4618      	mov	r0, r3
 801426e:	3708      	adds	r7, #8
 8014270:	46bd      	mov	sp, r7
 8014272:	bd80      	pop	{r7, pc}
 8014274:	240000f4 	.word	0x240000f4

08014278 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014278:	b580      	push	{r7, lr}
 801427a:	b082      	sub	sp, #8
 801427c:	af00      	add	r7, sp, #0
 801427e:	4603      	mov	r3, r0
 8014280:	6039      	str	r1, [r7, #0]
 8014282:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014284:	79fb      	ldrb	r3, [r7, #7]
 8014286:	2b00      	cmp	r3, #0
 8014288:	d105      	bne.n	8014296 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801428a:	683a      	ldr	r2, [r7, #0]
 801428c:	4907      	ldr	r1, [pc, #28]	; (80142ac <USBD_FS_ConfigStrDescriptor+0x34>)
 801428e:	4808      	ldr	r0, [pc, #32]	; (80142b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014290:	f7fb f8c8 	bl	800f424 <USBD_GetString>
 8014294:	e004      	b.n	80142a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014296:	683a      	ldr	r2, [r7, #0]
 8014298:	4904      	ldr	r1, [pc, #16]	; (80142ac <USBD_FS_ConfigStrDescriptor+0x34>)
 801429a:	4805      	ldr	r0, [pc, #20]	; (80142b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 801429c:	f7fb f8c2 	bl	800f424 <USBD_GetString>
  }
  return USBD_StrDesc;
 80142a0:	4b02      	ldr	r3, [pc, #8]	; (80142ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80142a2:	4618      	mov	r0, r3
 80142a4:	3708      	adds	r7, #8
 80142a6:	46bd      	mov	sp, r7
 80142a8:	bd80      	pop	{r7, pc}
 80142aa:	bf00      	nop
 80142ac:	240079d8 	.word	0x240079d8
 80142b0:	08014e08 	.word	0x08014e08

080142b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80142b4:	b580      	push	{r7, lr}
 80142b6:	b082      	sub	sp, #8
 80142b8:	af00      	add	r7, sp, #0
 80142ba:	4603      	mov	r3, r0
 80142bc:	6039      	str	r1, [r7, #0]
 80142be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80142c0:	79fb      	ldrb	r3, [r7, #7]
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d105      	bne.n	80142d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80142c6:	683a      	ldr	r2, [r7, #0]
 80142c8:	4907      	ldr	r1, [pc, #28]	; (80142e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80142ca:	4808      	ldr	r0, [pc, #32]	; (80142ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80142cc:	f7fb f8aa 	bl	800f424 <USBD_GetString>
 80142d0:	e004      	b.n	80142dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80142d2:	683a      	ldr	r2, [r7, #0]
 80142d4:	4904      	ldr	r1, [pc, #16]	; (80142e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80142d6:	4805      	ldr	r0, [pc, #20]	; (80142ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80142d8:	f7fb f8a4 	bl	800f424 <USBD_GetString>
  }
  return USBD_StrDesc;
 80142dc:	4b02      	ldr	r3, [pc, #8]	; (80142e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80142de:	4618      	mov	r0, r3
 80142e0:	3708      	adds	r7, #8
 80142e2:	46bd      	mov	sp, r7
 80142e4:	bd80      	pop	{r7, pc}
 80142e6:	bf00      	nop
 80142e8:	240079d8 	.word	0x240079d8
 80142ec:	08014e14 	.word	0x08014e14

080142f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80142f0:	b580      	push	{r7, lr}
 80142f2:	b084      	sub	sp, #16
 80142f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80142f6:	4b0f      	ldr	r3, [pc, #60]	; (8014334 <Get_SerialNum+0x44>)
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80142fc:	4b0e      	ldr	r3, [pc, #56]	; (8014338 <Get_SerialNum+0x48>)
 80142fe:	681b      	ldr	r3, [r3, #0]
 8014300:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8014302:	4b0e      	ldr	r3, [pc, #56]	; (801433c <Get_SerialNum+0x4c>)
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014308:	68fa      	ldr	r2, [r7, #12]
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	4413      	add	r3, r2
 801430e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	2b00      	cmp	r3, #0
 8014314:	d009      	beq.n	801432a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014316:	2208      	movs	r2, #8
 8014318:	4909      	ldr	r1, [pc, #36]	; (8014340 <Get_SerialNum+0x50>)
 801431a:	68f8      	ldr	r0, [r7, #12]
 801431c:	f000 f814 	bl	8014348 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8014320:	2204      	movs	r2, #4
 8014322:	4908      	ldr	r1, [pc, #32]	; (8014344 <Get_SerialNum+0x54>)
 8014324:	68b8      	ldr	r0, [r7, #8]
 8014326:	f000 f80f 	bl	8014348 <IntToUnicode>
  }
}
 801432a:	bf00      	nop
 801432c:	3710      	adds	r7, #16
 801432e:	46bd      	mov	sp, r7
 8014330:	bd80      	pop	{r7, pc}
 8014332:	bf00      	nop
 8014334:	1ff1e800 	.word	0x1ff1e800
 8014338:	1ff1e804 	.word	0x1ff1e804
 801433c:	1ff1e808 	.word	0x1ff1e808
 8014340:	240000f6 	.word	0x240000f6
 8014344:	24000106 	.word	0x24000106

08014348 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014348:	b480      	push	{r7}
 801434a:	b087      	sub	sp, #28
 801434c:	af00      	add	r7, sp, #0
 801434e:	60f8      	str	r0, [r7, #12]
 8014350:	60b9      	str	r1, [r7, #8]
 8014352:	4613      	mov	r3, r2
 8014354:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014356:	2300      	movs	r3, #0
 8014358:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801435a:	2300      	movs	r3, #0
 801435c:	75fb      	strb	r3, [r7, #23]
 801435e:	e027      	b.n	80143b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014360:	68fb      	ldr	r3, [r7, #12]
 8014362:	0f1b      	lsrs	r3, r3, #28
 8014364:	2b09      	cmp	r3, #9
 8014366:	d80b      	bhi.n	8014380 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	0f1b      	lsrs	r3, r3, #28
 801436c:	b2da      	uxtb	r2, r3
 801436e:	7dfb      	ldrb	r3, [r7, #23]
 8014370:	005b      	lsls	r3, r3, #1
 8014372:	4619      	mov	r1, r3
 8014374:	68bb      	ldr	r3, [r7, #8]
 8014376:	440b      	add	r3, r1
 8014378:	3230      	adds	r2, #48	; 0x30
 801437a:	b2d2      	uxtb	r2, r2
 801437c:	701a      	strb	r2, [r3, #0]
 801437e:	e00a      	b.n	8014396 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014380:	68fb      	ldr	r3, [r7, #12]
 8014382:	0f1b      	lsrs	r3, r3, #28
 8014384:	b2da      	uxtb	r2, r3
 8014386:	7dfb      	ldrb	r3, [r7, #23]
 8014388:	005b      	lsls	r3, r3, #1
 801438a:	4619      	mov	r1, r3
 801438c:	68bb      	ldr	r3, [r7, #8]
 801438e:	440b      	add	r3, r1
 8014390:	3237      	adds	r2, #55	; 0x37
 8014392:	b2d2      	uxtb	r2, r2
 8014394:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	011b      	lsls	r3, r3, #4
 801439a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801439c:	7dfb      	ldrb	r3, [r7, #23]
 801439e:	005b      	lsls	r3, r3, #1
 80143a0:	3301      	adds	r3, #1
 80143a2:	68ba      	ldr	r2, [r7, #8]
 80143a4:	4413      	add	r3, r2
 80143a6:	2200      	movs	r2, #0
 80143a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80143aa:	7dfb      	ldrb	r3, [r7, #23]
 80143ac:	3301      	adds	r3, #1
 80143ae:	75fb      	strb	r3, [r7, #23]
 80143b0:	7dfa      	ldrb	r2, [r7, #23]
 80143b2:	79fb      	ldrb	r3, [r7, #7]
 80143b4:	429a      	cmp	r2, r3
 80143b6:	d3d3      	bcc.n	8014360 <IntToUnicode+0x18>
  }
}
 80143b8:	bf00      	nop
 80143ba:	371c      	adds	r7, #28
 80143bc:	46bd      	mov	sp, r7
 80143be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143c2:	4770      	bx	lr

080143c4 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 80143c4:	b480      	push	{r7}
 80143c6:	b083      	sub	sp, #12
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	4603      	mov	r3, r0
 80143cc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 80143ce:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80143d0:	4618      	mov	r0, r3
 80143d2:	370c      	adds	r7, #12
 80143d4:	46bd      	mov	sp, r7
 80143d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143da:	4770      	bx	lr

080143dc <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 80143dc:	b580      	push	{r7, lr}
 80143de:	b084      	sub	sp, #16
 80143e0:	af00      	add	r7, sp, #0
 80143e2:	4603      	mov	r3, r0
 80143e4:	60b9      	str	r1, [r7, #8]
 80143e6:	607a      	str	r2, [r7, #4]
 80143e8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  if(HAL_SD_GetCardInfo(&hsd1,&SDCardInfo)==HAL_OK){
 80143ea:	490b      	ldr	r1, [pc, #44]	; (8014418 <STORAGE_GetCapacity_FS+0x3c>)
 80143ec:	480b      	ldr	r0, [pc, #44]	; (801441c <STORAGE_GetCapacity_FS+0x40>)
 80143ee:	f7f3 f9e7 	bl	80077c0 <HAL_SD_GetCardInfo>
 80143f2:	4603      	mov	r3, r0
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d10a      	bne.n	801440e <STORAGE_GetCapacity_FS+0x32>
  *block_num  = SDCardInfo.LogBlockNbr;
 80143f8:	4b07      	ldr	r3, [pc, #28]	; (8014418 <STORAGE_GetCapacity_FS+0x3c>)
 80143fa:	699a      	ldr	r2, [r3, #24]
 80143fc:	68bb      	ldr	r3, [r7, #8]
 80143fe:	601a      	str	r2, [r3, #0]
  *block_size = SDCardInfo.LogBlockSize;
 8014400:	4b05      	ldr	r3, [pc, #20]	; (8014418 <STORAGE_GetCapacity_FS+0x3c>)
 8014402:	69db      	ldr	r3, [r3, #28]
 8014404:	b29a      	uxth	r2, r3
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 801440a:	2300      	movs	r3, #0
 801440c:	e7ff      	b.n	801440e <STORAGE_GetCapacity_FS+0x32>
  }
  /* USER CODE END 3 */
}
 801440e:	4618      	mov	r0, r3
 8014410:	3710      	adds	r7, #16
 8014412:	46bd      	mov	sp, r7
 8014414:	bd80      	pop	{r7, pc}
 8014416:	bf00      	nop
 8014418:	240024d8 	.word	0x240024d8
 801441c:	240013f0 	.word	0x240013f0

08014420 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8014420:	b480      	push	{r7}
 8014422:	b083      	sub	sp, #12
 8014424:	af00      	add	r7, sp, #0
 8014426:	4603      	mov	r3, r0
 8014428:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801442a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801442c:	4618      	mov	r0, r3
 801442e:	370c      	adds	r7, #12
 8014430:	46bd      	mov	sp, r7
 8014432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014436:	4770      	bx	lr

08014438 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8014438:	b480      	push	{r7}
 801443a:	b083      	sub	sp, #12
 801443c:	af00      	add	r7, sp, #0
 801443e:	4603      	mov	r3, r0
 8014440:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8014442:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014444:	4618      	mov	r0, r3
 8014446:	370c      	adds	r7, #12
 8014448:	46bd      	mov	sp, r7
 801444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801444e:	4770      	bx	lr

08014450 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8014450:	b580      	push	{r7, lr}
 8014452:	b086      	sub	sp, #24
 8014454:	af02      	add	r7, sp, #8
 8014456:	60b9      	str	r1, [r7, #8]
 8014458:	607a      	str	r2, [r7, #4]
 801445a:	461a      	mov	r2, r3
 801445c:	4603      	mov	r3, r0
 801445e:	73fb      	strb	r3, [r7, #15]
 8014460:	4613      	mov	r3, r2
 8014462:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
 if(HAL_SD_ReadBlocks(&hsd1,buf,blk_addr,blk_len,10)==HAL_OK){
 8014464:	89ba      	ldrh	r2, [r7, #12]
 8014466:	230a      	movs	r3, #10
 8014468:	9300      	str	r3, [sp, #0]
 801446a:	4613      	mov	r3, r2
 801446c:	687a      	ldr	r2, [r7, #4]
 801446e:	68b9      	ldr	r1, [r7, #8]
 8014470:	4805      	ldr	r0, [pc, #20]	; (8014488 <STORAGE_Read_FS+0x38>)
 8014472:	f7f2 fc27 	bl	8006cc4 <HAL_SD_ReadBlocks>
 8014476:	4603      	mov	r3, r0
 8014478:	2b00      	cmp	r3, #0
 801447a:	d101      	bne.n	8014480 <STORAGE_Read_FS+0x30>

  return (USBD_OK);
 801447c:	2300      	movs	r3, #0
 801447e:	e7ff      	b.n	8014480 <STORAGE_Read_FS+0x30>
 }
  /* USER CODE END 6 */
}
 8014480:	4618      	mov	r0, r3
 8014482:	3710      	adds	r7, #16
 8014484:	46bd      	mov	sp, r7
 8014486:	bd80      	pop	{r7, pc}
 8014488:	240013f0 	.word	0x240013f0

0801448c <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801448c:	b580      	push	{r7, lr}
 801448e:	b086      	sub	sp, #24
 8014490:	af02      	add	r7, sp, #8
 8014492:	60b9      	str	r1, [r7, #8]
 8014494:	607a      	str	r2, [r7, #4]
 8014496:	461a      	mov	r2, r3
 8014498:	4603      	mov	r3, r0
 801449a:	73fb      	strb	r3, [r7, #15]
 801449c:	4613      	mov	r3, r2
 801449e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	if(HAL_SD_WriteBlocks(&hsd1,buf,blk_addr,blk_len,10)==HAL_OK){
 80144a0:	89ba      	ldrh	r2, [r7, #12]
 80144a2:	230a      	movs	r3, #10
 80144a4:	9300      	str	r3, [sp, #0]
 80144a6:	4613      	mov	r3, r2
 80144a8:	687a      	ldr	r2, [r7, #4]
 80144aa:	68b9      	ldr	r1, [r7, #8]
 80144ac:	4805      	ldr	r0, [pc, #20]	; (80144c4 <STORAGE_Write_FS+0x38>)
 80144ae:	f7f2 fd93 	bl	8006fd8 <HAL_SD_WriteBlocks>
 80144b2:	4603      	mov	r3, r0
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d101      	bne.n	80144bc <STORAGE_Write_FS+0x30>

	  return (USBD_OK);
 80144b8:	2300      	movs	r3, #0
 80144ba:	e7ff      	b.n	80144bc <STORAGE_Write_FS+0x30>
	 }
  /* USER CODE END 7 */
}
 80144bc:	4618      	mov	r0, r3
 80144be:	3710      	adds	r7, #16
 80144c0:	46bd      	mov	sp, r7
 80144c2:	bd80      	pop	{r7, pc}
 80144c4:	240013f0 	.word	0x240013f0

080144c8 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 80144c8:	b480      	push	{r7}
 80144ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 80144cc:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80144ce:	4618      	mov	r0, r3
 80144d0:	46bd      	mov	sp, r7
 80144d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d6:	4770      	bx	lr

080144d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80144d8:	b580      	push	{r7, lr}
 80144da:	b08a      	sub	sp, #40	; 0x28
 80144dc:	af00      	add	r7, sp, #0
 80144de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80144e0:	f107 0314 	add.w	r3, r7, #20
 80144e4:	2200      	movs	r2, #0
 80144e6:	601a      	str	r2, [r3, #0]
 80144e8:	605a      	str	r2, [r3, #4]
 80144ea:	609a      	str	r2, [r3, #8]
 80144ec:	60da      	str	r2, [r3, #12]
 80144ee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	4a1e      	ldr	r2, [pc, #120]	; (8014570 <HAL_PCD_MspInit+0x98>)
 80144f6:	4293      	cmp	r3, r2
 80144f8:	d136      	bne.n	8014568 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80144fa:	4b1e      	ldr	r3, [pc, #120]	; (8014574 <HAL_PCD_MspInit+0x9c>)
 80144fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014500:	4a1c      	ldr	r2, [pc, #112]	; (8014574 <HAL_PCD_MspInit+0x9c>)
 8014502:	f043 0301 	orr.w	r3, r3, #1
 8014506:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801450a:	4b1a      	ldr	r3, [pc, #104]	; (8014574 <HAL_PCD_MspInit+0x9c>)
 801450c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014510:	f003 0301 	and.w	r3, r3, #1
 8014514:	613b      	str	r3, [r7, #16]
 8014516:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8014518:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 801451c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801451e:	2302      	movs	r3, #2
 8014520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014522:	2300      	movs	r3, #0
 8014524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014526:	2300      	movs	r3, #0
 8014528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801452a:	230a      	movs	r3, #10
 801452c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801452e:	f107 0314 	add.w	r3, r7, #20
 8014532:	4619      	mov	r1, r3
 8014534:	4810      	ldr	r0, [pc, #64]	; (8014578 <HAL_PCD_MspInit+0xa0>)
 8014536:	f7ed fccd 	bl	8001ed4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801453a:	4b0e      	ldr	r3, [pc, #56]	; (8014574 <HAL_PCD_MspInit+0x9c>)
 801453c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8014540:	4a0c      	ldr	r2, [pc, #48]	; (8014574 <HAL_PCD_MspInit+0x9c>)
 8014542:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014546:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801454a:	4b0a      	ldr	r3, [pc, #40]	; (8014574 <HAL_PCD_MspInit+0x9c>)
 801454c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8014550:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014554:	60fb      	str	r3, [r7, #12]
 8014556:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8014558:	2200      	movs	r2, #0
 801455a:	2100      	movs	r1, #0
 801455c:	2065      	movs	r0, #101	; 0x65
 801455e:	f7ed f86e 	bl	800163e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8014562:	2065      	movs	r0, #101	; 0x65
 8014564:	f7ed f885 	bl	8001672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8014568:	bf00      	nop
 801456a:	3728      	adds	r7, #40	; 0x28
 801456c:	46bd      	mov	sp, r7
 801456e:	bd80      	pop	{r7, pc}
 8014570:	40080000 	.word	0x40080000
 8014574:	58024400 	.word	0x58024400
 8014578:	58020000 	.word	0x58020000

0801457c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801457c:	b580      	push	{r7, lr}
 801457e:	b082      	sub	sp, #8
 8014580:	af00      	add	r7, sp, #0
 8014582:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8014590:	4619      	mov	r1, r3
 8014592:	4610      	mov	r0, r2
 8014594:	f7f9 ffe3 	bl	800e55e <USBD_LL_SetupStage>
}
 8014598:	bf00      	nop
 801459a:	3708      	adds	r7, #8
 801459c:	46bd      	mov	sp, r7
 801459e:	bd80      	pop	{r7, pc}

080145a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80145a0:	b580      	push	{r7, lr}
 80145a2:	b082      	sub	sp, #8
 80145a4:	af00      	add	r7, sp, #0
 80145a6:	6078      	str	r0, [r7, #4]
 80145a8:	460b      	mov	r3, r1
 80145aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80145b2:	78fa      	ldrb	r2, [r7, #3]
 80145b4:	6879      	ldr	r1, [r7, #4]
 80145b6:	4613      	mov	r3, r2
 80145b8:	00db      	lsls	r3, r3, #3
 80145ba:	1a9b      	subs	r3, r3, r2
 80145bc:	009b      	lsls	r3, r3, #2
 80145be:	440b      	add	r3, r1
 80145c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80145c4:	681a      	ldr	r2, [r3, #0]
 80145c6:	78fb      	ldrb	r3, [r7, #3]
 80145c8:	4619      	mov	r1, r3
 80145ca:	f7fa f813 	bl	800e5f4 <USBD_LL_DataOutStage>
}
 80145ce:	bf00      	nop
 80145d0:	3708      	adds	r7, #8
 80145d2:	46bd      	mov	sp, r7
 80145d4:	bd80      	pop	{r7, pc}

080145d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80145d6:	b580      	push	{r7, lr}
 80145d8:	b082      	sub	sp, #8
 80145da:	af00      	add	r7, sp, #0
 80145dc:	6078      	str	r0, [r7, #4]
 80145de:	460b      	mov	r3, r1
 80145e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80145e8:	78fa      	ldrb	r2, [r7, #3]
 80145ea:	6879      	ldr	r1, [r7, #4]
 80145ec:	4613      	mov	r3, r2
 80145ee:	00db      	lsls	r3, r3, #3
 80145f0:	1a9b      	subs	r3, r3, r2
 80145f2:	009b      	lsls	r3, r3, #2
 80145f4:	440b      	add	r3, r1
 80145f6:	3348      	adds	r3, #72	; 0x48
 80145f8:	681a      	ldr	r2, [r3, #0]
 80145fa:	78fb      	ldrb	r3, [r7, #3]
 80145fc:	4619      	mov	r1, r3
 80145fe:	f7fa f86a 	bl	800e6d6 <USBD_LL_DataInStage>
}
 8014602:	bf00      	nop
 8014604:	3708      	adds	r7, #8
 8014606:	46bd      	mov	sp, r7
 8014608:	bd80      	pop	{r7, pc}

0801460a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801460a:	b580      	push	{r7, lr}
 801460c:	b082      	sub	sp, #8
 801460e:	af00      	add	r7, sp, #0
 8014610:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014618:	4618      	mov	r0, r3
 801461a:	f7fa f97d 	bl	800e918 <USBD_LL_SOF>
}
 801461e:	bf00      	nop
 8014620:	3708      	adds	r7, #8
 8014622:	46bd      	mov	sp, r7
 8014624:	bd80      	pop	{r7, pc}

08014626 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8014626:	b580      	push	{r7, lr}
 8014628:	b084      	sub	sp, #16
 801462a:	af00      	add	r7, sp, #0
 801462c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801462e:	2301      	movs	r3, #1
 8014630:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	68db      	ldr	r3, [r3, #12]
 8014636:	2b00      	cmp	r3, #0
 8014638:	d102      	bne.n	8014640 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801463a:	2300      	movs	r3, #0
 801463c:	73fb      	strb	r3, [r7, #15]
 801463e:	e008      	b.n	8014652 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	68db      	ldr	r3, [r3, #12]
 8014644:	2b02      	cmp	r3, #2
 8014646:	d102      	bne.n	801464e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8014648:	2301      	movs	r3, #1
 801464a:	73fb      	strb	r3, [r7, #15]
 801464c:	e001      	b.n	8014652 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801464e:	f7ec fb7f 	bl	8000d50 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014658:	7bfa      	ldrb	r2, [r7, #15]
 801465a:	4611      	mov	r1, r2
 801465c:	4618      	mov	r0, r3
 801465e:	f7fa f920 	bl	800e8a2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014668:	4618      	mov	r0, r3
 801466a:	f7fa f8d9 	bl	800e820 <USBD_LL_Reset>
}
 801466e:	bf00      	nop
 8014670:	3710      	adds	r7, #16
 8014672:	46bd      	mov	sp, r7
 8014674:	bd80      	pop	{r7, pc}
	...

08014678 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014678:	b580      	push	{r7, lr}
 801467a:	b082      	sub	sp, #8
 801467c:	af00      	add	r7, sp, #0
 801467e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014686:	4618      	mov	r0, r3
 8014688:	f7fa f91b 	bl	800e8c2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	687a      	ldr	r2, [r7, #4]
 8014698:	6812      	ldr	r2, [r2, #0]
 801469a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801469e:	f043 0301 	orr.w	r3, r3, #1
 80146a2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	6a1b      	ldr	r3, [r3, #32]
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d005      	beq.n	80146b8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80146ac:	4b04      	ldr	r3, [pc, #16]	; (80146c0 <HAL_PCD_SuspendCallback+0x48>)
 80146ae:	691b      	ldr	r3, [r3, #16]
 80146b0:	4a03      	ldr	r2, [pc, #12]	; (80146c0 <HAL_PCD_SuspendCallback+0x48>)
 80146b2:	f043 0306 	orr.w	r3, r3, #6
 80146b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80146b8:	bf00      	nop
 80146ba:	3708      	adds	r7, #8
 80146bc:	46bd      	mov	sp, r7
 80146be:	bd80      	pop	{r7, pc}
 80146c0:	e000ed00 	.word	0xe000ed00

080146c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80146c4:	b580      	push	{r7, lr}
 80146c6:	b082      	sub	sp, #8
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80146d2:	4618      	mov	r0, r3
 80146d4:	f7fa f90a 	bl	800e8ec <USBD_LL_Resume>
}
 80146d8:	bf00      	nop
 80146da:	3708      	adds	r7, #8
 80146dc:	46bd      	mov	sp, r7
 80146de:	bd80      	pop	{r7, pc}

080146e0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80146e0:	b580      	push	{r7, lr}
 80146e2:	b082      	sub	sp, #8
 80146e4:	af00      	add	r7, sp, #0
 80146e6:	6078      	str	r0, [r7, #4]
 80146e8:	460b      	mov	r3, r1
 80146ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80146f2:	78fa      	ldrb	r2, [r7, #3]
 80146f4:	4611      	mov	r1, r2
 80146f6:	4618      	mov	r0, r3
 80146f8:	f7fa f935 	bl	800e966 <USBD_LL_IsoOUTIncomplete>
}
 80146fc:	bf00      	nop
 80146fe:	3708      	adds	r7, #8
 8014700:	46bd      	mov	sp, r7
 8014702:	bd80      	pop	{r7, pc}

08014704 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014704:	b580      	push	{r7, lr}
 8014706:	b082      	sub	sp, #8
 8014708:	af00      	add	r7, sp, #0
 801470a:	6078      	str	r0, [r7, #4]
 801470c:	460b      	mov	r3, r1
 801470e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014716:	78fa      	ldrb	r2, [r7, #3]
 8014718:	4611      	mov	r1, r2
 801471a:	4618      	mov	r0, r3
 801471c:	f7fa f916 	bl	800e94c <USBD_LL_IsoINIncomplete>
}
 8014720:	bf00      	nop
 8014722:	3708      	adds	r7, #8
 8014724:	46bd      	mov	sp, r7
 8014726:	bd80      	pop	{r7, pc}

08014728 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014728:	b580      	push	{r7, lr}
 801472a:	b082      	sub	sp, #8
 801472c:	af00      	add	r7, sp, #0
 801472e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014736:	4618      	mov	r0, r3
 8014738:	f7fa f922 	bl	800e980 <USBD_LL_DevConnected>
}
 801473c:	bf00      	nop
 801473e:	3708      	adds	r7, #8
 8014740:	46bd      	mov	sp, r7
 8014742:	bd80      	pop	{r7, pc}

08014744 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014744:	b580      	push	{r7, lr}
 8014746:	b082      	sub	sp, #8
 8014748:	af00      	add	r7, sp, #0
 801474a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014752:	4618      	mov	r0, r3
 8014754:	f7fa f91f 	bl	800e996 <USBD_LL_DevDisconnected>
}
 8014758:	bf00      	nop
 801475a:	3708      	adds	r7, #8
 801475c:	46bd      	mov	sp, r7
 801475e:	bd80      	pop	{r7, pc}

08014760 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014760:	b580      	push	{r7, lr}
 8014762:	b082      	sub	sp, #8
 8014764:	af00      	add	r7, sp, #0
 8014766:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	781b      	ldrb	r3, [r3, #0]
 801476c:	2b00      	cmp	r3, #0
 801476e:	d13e      	bne.n	80147ee <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8014770:	4a21      	ldr	r2, [pc, #132]	; (80147f8 <USBD_LL_Init+0x98>)
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	4a1f      	ldr	r2, [pc, #124]	; (80147f8 <USBD_LL_Init+0x98>)
 801477c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8014780:	4b1d      	ldr	r3, [pc, #116]	; (80147f8 <USBD_LL_Init+0x98>)
 8014782:	4a1e      	ldr	r2, [pc, #120]	; (80147fc <USBD_LL_Init+0x9c>)
 8014784:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8014786:	4b1c      	ldr	r3, [pc, #112]	; (80147f8 <USBD_LL_Init+0x98>)
 8014788:	2209      	movs	r2, #9
 801478a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801478c:	4b1a      	ldr	r3, [pc, #104]	; (80147f8 <USBD_LL_Init+0x98>)
 801478e:	2202      	movs	r2, #2
 8014790:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8014792:	4b19      	ldr	r3, [pc, #100]	; (80147f8 <USBD_LL_Init+0x98>)
 8014794:	2200      	movs	r2, #0
 8014796:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014798:	4b17      	ldr	r3, [pc, #92]	; (80147f8 <USBD_LL_Init+0x98>)
 801479a:	2202      	movs	r2, #2
 801479c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801479e:	4b16      	ldr	r3, [pc, #88]	; (80147f8 <USBD_LL_Init+0x98>)
 80147a0:	2200      	movs	r2, #0
 80147a2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80147a4:	4b14      	ldr	r3, [pc, #80]	; (80147f8 <USBD_LL_Init+0x98>)
 80147a6:	2200      	movs	r2, #0
 80147a8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80147aa:	4b13      	ldr	r3, [pc, #76]	; (80147f8 <USBD_LL_Init+0x98>)
 80147ac:	2200      	movs	r2, #0
 80147ae:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80147b0:	4b11      	ldr	r3, [pc, #68]	; (80147f8 <USBD_LL_Init+0x98>)
 80147b2:	2200      	movs	r2, #0
 80147b4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80147b6:	4b10      	ldr	r3, [pc, #64]	; (80147f8 <USBD_LL_Init+0x98>)
 80147b8:	2200      	movs	r2, #0
 80147ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80147bc:	4b0e      	ldr	r3, [pc, #56]	; (80147f8 <USBD_LL_Init+0x98>)
 80147be:	2200      	movs	r2, #0
 80147c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80147c2:	480d      	ldr	r0, [pc, #52]	; (80147f8 <USBD_LL_Init+0x98>)
 80147c4:	f7ed fd8c 	bl	80022e0 <HAL_PCD_Init>
 80147c8:	4603      	mov	r3, r0
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d001      	beq.n	80147d2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80147ce:	f7ec fabf 	bl	8000d50 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80147d2:	2180      	movs	r1, #128	; 0x80
 80147d4:	4808      	ldr	r0, [pc, #32]	; (80147f8 <USBD_LL_Init+0x98>)
 80147d6:	f7ee ff7a 	bl	80036ce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80147da:	2240      	movs	r2, #64	; 0x40
 80147dc:	2100      	movs	r1, #0
 80147de:	4806      	ldr	r0, [pc, #24]	; (80147f8 <USBD_LL_Init+0x98>)
 80147e0:	f7ee ff2e 	bl	8003640 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80147e4:	2280      	movs	r2, #128	; 0x80
 80147e6:	2101      	movs	r1, #1
 80147e8:	4803      	ldr	r0, [pc, #12]	; (80147f8 <USBD_LL_Init+0x98>)
 80147ea:	f7ee ff29 	bl	8003640 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80147ee:	2300      	movs	r3, #0
}
 80147f0:	4618      	mov	r0, r3
 80147f2:	3708      	adds	r7, #8
 80147f4:	46bd      	mov	sp, r7
 80147f6:	bd80      	pop	{r7, pc}
 80147f8:	24007bd8 	.word	0x24007bd8
 80147fc:	40080000 	.word	0x40080000

08014800 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014800:	b580      	push	{r7, lr}
 8014802:	b084      	sub	sp, #16
 8014804:	af00      	add	r7, sp, #0
 8014806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014808:	2300      	movs	r3, #0
 801480a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801480c:	2300      	movs	r3, #0
 801480e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014816:	4618      	mov	r0, r3
 8014818:	f7ed fe86 	bl	8002528 <HAL_PCD_Start>
 801481c:	4603      	mov	r3, r0
 801481e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8014820:	7bfb      	ldrb	r3, [r7, #15]
 8014822:	4618      	mov	r0, r3
 8014824:	f000 f968 	bl	8014af8 <USBD_Get_USB_Status>
 8014828:	4603      	mov	r3, r0
 801482a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801482c:	7bbb      	ldrb	r3, [r7, #14]
}
 801482e:	4618      	mov	r0, r3
 8014830:	3710      	adds	r7, #16
 8014832:	46bd      	mov	sp, r7
 8014834:	bd80      	pop	{r7, pc}

08014836 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8014836:	b580      	push	{r7, lr}
 8014838:	b084      	sub	sp, #16
 801483a:	af00      	add	r7, sp, #0
 801483c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801483e:	2300      	movs	r3, #0
 8014840:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014842:	2300      	movs	r3, #0
 8014844:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801484c:	4618      	mov	r0, r3
 801484e:	f7ed fe9e 	bl	800258e <HAL_PCD_Stop>
 8014852:	4603      	mov	r3, r0
 8014854:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8014856:	7bfb      	ldrb	r3, [r7, #15]
 8014858:	4618      	mov	r0, r3
 801485a:	f000 f94d 	bl	8014af8 <USBD_Get_USB_Status>
 801485e:	4603      	mov	r3, r0
 8014860:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8014862:	7bbb      	ldrb	r3, [r7, #14]
}
 8014864:	4618      	mov	r0, r3
 8014866:	3710      	adds	r7, #16
 8014868:	46bd      	mov	sp, r7
 801486a:	bd80      	pop	{r7, pc}

0801486c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801486c:	b580      	push	{r7, lr}
 801486e:	b084      	sub	sp, #16
 8014870:	af00      	add	r7, sp, #0
 8014872:	6078      	str	r0, [r7, #4]
 8014874:	4608      	mov	r0, r1
 8014876:	4611      	mov	r1, r2
 8014878:	461a      	mov	r2, r3
 801487a:	4603      	mov	r3, r0
 801487c:	70fb      	strb	r3, [r7, #3]
 801487e:	460b      	mov	r3, r1
 8014880:	70bb      	strb	r3, [r7, #2]
 8014882:	4613      	mov	r3, r2
 8014884:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014886:	2300      	movs	r3, #0
 8014888:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801488a:	2300      	movs	r3, #0
 801488c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8014894:	78bb      	ldrb	r3, [r7, #2]
 8014896:	883a      	ldrh	r2, [r7, #0]
 8014898:	78f9      	ldrb	r1, [r7, #3]
 801489a:	f7ee faac 	bl	8002df6 <HAL_PCD_EP_Open>
 801489e:	4603      	mov	r3, r0
 80148a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80148a2:	7bfb      	ldrb	r3, [r7, #15]
 80148a4:	4618      	mov	r0, r3
 80148a6:	f000 f927 	bl	8014af8 <USBD_Get_USB_Status>
 80148aa:	4603      	mov	r3, r0
 80148ac:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80148ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80148b0:	4618      	mov	r0, r3
 80148b2:	3710      	adds	r7, #16
 80148b4:	46bd      	mov	sp, r7
 80148b6:	bd80      	pop	{r7, pc}

080148b8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80148b8:	b580      	push	{r7, lr}
 80148ba:	b084      	sub	sp, #16
 80148bc:	af00      	add	r7, sp, #0
 80148be:	6078      	str	r0, [r7, #4]
 80148c0:	460b      	mov	r3, r1
 80148c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80148c4:	2300      	movs	r3, #0
 80148c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80148c8:	2300      	movs	r3, #0
 80148ca:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80148d2:	78fa      	ldrb	r2, [r7, #3]
 80148d4:	4611      	mov	r1, r2
 80148d6:	4618      	mov	r0, r3
 80148d8:	f7ee faf5 	bl	8002ec6 <HAL_PCD_EP_Close>
 80148dc:	4603      	mov	r3, r0
 80148de:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 80148e0:	7bfb      	ldrb	r3, [r7, #15]
 80148e2:	4618      	mov	r0, r3
 80148e4:	f000 f908 	bl	8014af8 <USBD_Get_USB_Status>
 80148e8:	4603      	mov	r3, r0
 80148ea:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80148ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80148ee:	4618      	mov	r0, r3
 80148f0:	3710      	adds	r7, #16
 80148f2:	46bd      	mov	sp, r7
 80148f4:	bd80      	pop	{r7, pc}

080148f6 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80148f6:	b580      	push	{r7, lr}
 80148f8:	b084      	sub	sp, #16
 80148fa:	af00      	add	r7, sp, #0
 80148fc:	6078      	str	r0, [r7, #4]
 80148fe:	460b      	mov	r3, r1
 8014900:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014902:	2300      	movs	r3, #0
 8014904:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014906:	2300      	movs	r3, #0
 8014908:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014910:	78fa      	ldrb	r2, [r7, #3]
 8014912:	4611      	mov	r1, r2
 8014914:	4618      	mov	r0, r3
 8014916:	f7ee fc87 	bl	8003228 <HAL_PCD_EP_Flush>
 801491a:	4603      	mov	r3, r0
 801491c:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 801491e:	7bfb      	ldrb	r3, [r7, #15]
 8014920:	4618      	mov	r0, r3
 8014922:	f000 f8e9 	bl	8014af8 <USBD_Get_USB_Status>
 8014926:	4603      	mov	r3, r0
 8014928:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 801492a:	7bbb      	ldrb	r3, [r7, #14]
}
 801492c:	4618      	mov	r0, r3
 801492e:	3710      	adds	r7, #16
 8014930:	46bd      	mov	sp, r7
 8014932:	bd80      	pop	{r7, pc}

08014934 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014934:	b580      	push	{r7, lr}
 8014936:	b084      	sub	sp, #16
 8014938:	af00      	add	r7, sp, #0
 801493a:	6078      	str	r0, [r7, #4]
 801493c:	460b      	mov	r3, r1
 801493e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014940:	2300      	movs	r3, #0
 8014942:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014944:	2300      	movs	r3, #0
 8014946:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801494e:	78fa      	ldrb	r2, [r7, #3]
 8014950:	4611      	mov	r1, r2
 8014952:	4618      	mov	r0, r3
 8014954:	f7ee fbae 	bl	80030b4 <HAL_PCD_EP_SetStall>
 8014958:	4603      	mov	r3, r0
 801495a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801495c:	7bfb      	ldrb	r3, [r7, #15]
 801495e:	4618      	mov	r0, r3
 8014960:	f000 f8ca 	bl	8014af8 <USBD_Get_USB_Status>
 8014964:	4603      	mov	r3, r0
 8014966:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8014968:	7bbb      	ldrb	r3, [r7, #14]
}
 801496a:	4618      	mov	r0, r3
 801496c:	3710      	adds	r7, #16
 801496e:	46bd      	mov	sp, r7
 8014970:	bd80      	pop	{r7, pc}

08014972 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014972:	b580      	push	{r7, lr}
 8014974:	b084      	sub	sp, #16
 8014976:	af00      	add	r7, sp, #0
 8014978:	6078      	str	r0, [r7, #4]
 801497a:	460b      	mov	r3, r1
 801497c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801497e:	2300      	movs	r3, #0
 8014980:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014982:	2300      	movs	r3, #0
 8014984:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801498c:	78fa      	ldrb	r2, [r7, #3]
 801498e:	4611      	mov	r1, r2
 8014990:	4618      	mov	r0, r3
 8014992:	f7ee fbf3 	bl	800317c <HAL_PCD_EP_ClrStall>
 8014996:	4603      	mov	r3, r0
 8014998:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 801499a:	7bfb      	ldrb	r3, [r7, #15]
 801499c:	4618      	mov	r0, r3
 801499e:	f000 f8ab 	bl	8014af8 <USBD_Get_USB_Status>
 80149a2:	4603      	mov	r3, r0
 80149a4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 80149a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80149a8:	4618      	mov	r0, r3
 80149aa:	3710      	adds	r7, #16
 80149ac:	46bd      	mov	sp, r7
 80149ae:	bd80      	pop	{r7, pc}

080149b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80149b0:	b480      	push	{r7}
 80149b2:	b085      	sub	sp, #20
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	6078      	str	r0, [r7, #4]
 80149b8:	460b      	mov	r3, r1
 80149ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80149c2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80149c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	da0b      	bge.n	80149e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80149cc:	78fb      	ldrb	r3, [r7, #3]
 80149ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80149d2:	68f9      	ldr	r1, [r7, #12]
 80149d4:	4613      	mov	r3, r2
 80149d6:	00db      	lsls	r3, r3, #3
 80149d8:	1a9b      	subs	r3, r3, r2
 80149da:	009b      	lsls	r3, r3, #2
 80149dc:	440b      	add	r3, r1
 80149de:	333e      	adds	r3, #62	; 0x3e
 80149e0:	781b      	ldrb	r3, [r3, #0]
 80149e2:	e00b      	b.n	80149fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80149e4:	78fb      	ldrb	r3, [r7, #3]
 80149e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80149ea:	68f9      	ldr	r1, [r7, #12]
 80149ec:	4613      	mov	r3, r2
 80149ee:	00db      	lsls	r3, r3, #3
 80149f0:	1a9b      	subs	r3, r3, r2
 80149f2:	009b      	lsls	r3, r3, #2
 80149f4:	440b      	add	r3, r1
 80149f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80149fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80149fc:	4618      	mov	r0, r3
 80149fe:	3714      	adds	r7, #20
 8014a00:	46bd      	mov	sp, r7
 8014a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a06:	4770      	bx	lr

08014a08 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8014a08:	b580      	push	{r7, lr}
 8014a0a:	b084      	sub	sp, #16
 8014a0c:	af00      	add	r7, sp, #0
 8014a0e:	6078      	str	r0, [r7, #4]
 8014a10:	460b      	mov	r3, r1
 8014a12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014a14:	2300      	movs	r3, #0
 8014a16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014a18:	2300      	movs	r3, #0
 8014a1a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014a22:	78fa      	ldrb	r2, [r7, #3]
 8014a24:	4611      	mov	r1, r2
 8014a26:	4618      	mov	r0, r3
 8014a28:	f7ee f9c0 	bl	8002dac <HAL_PCD_SetAddress>
 8014a2c:	4603      	mov	r3, r0
 8014a2e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8014a30:	7bfb      	ldrb	r3, [r7, #15]
 8014a32:	4618      	mov	r0, r3
 8014a34:	f000 f860 	bl	8014af8 <USBD_Get_USB_Status>
 8014a38:	4603      	mov	r3, r0
 8014a3a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8014a3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8014a3e:	4618      	mov	r0, r3
 8014a40:	3710      	adds	r7, #16
 8014a42:	46bd      	mov	sp, r7
 8014a44:	bd80      	pop	{r7, pc}

08014a46 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8014a46:	b580      	push	{r7, lr}
 8014a48:	b086      	sub	sp, #24
 8014a4a:	af00      	add	r7, sp, #0
 8014a4c:	60f8      	str	r0, [r7, #12]
 8014a4e:	607a      	str	r2, [r7, #4]
 8014a50:	461a      	mov	r2, r3
 8014a52:	460b      	mov	r3, r1
 8014a54:	72fb      	strb	r3, [r7, #11]
 8014a56:	4613      	mov	r3, r2
 8014a58:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014a5a:	2300      	movs	r3, #0
 8014a5c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014a5e:	2300      	movs	r3, #0
 8014a60:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8014a68:	893b      	ldrh	r3, [r7, #8]
 8014a6a:	7af9      	ldrb	r1, [r7, #11]
 8014a6c:	687a      	ldr	r2, [r7, #4]
 8014a6e:	f7ee fad7 	bl	8003020 <HAL_PCD_EP_Transmit>
 8014a72:	4603      	mov	r3, r0
 8014a74:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8014a76:	7dfb      	ldrb	r3, [r7, #23]
 8014a78:	4618      	mov	r0, r3
 8014a7a:	f000 f83d 	bl	8014af8 <USBD_Get_USB_Status>
 8014a7e:	4603      	mov	r3, r0
 8014a80:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8014a82:	7dbb      	ldrb	r3, [r7, #22]
}
 8014a84:	4618      	mov	r0, r3
 8014a86:	3718      	adds	r7, #24
 8014a88:	46bd      	mov	sp, r7
 8014a8a:	bd80      	pop	{r7, pc}

08014a8c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8014a8c:	b580      	push	{r7, lr}
 8014a8e:	b086      	sub	sp, #24
 8014a90:	af00      	add	r7, sp, #0
 8014a92:	60f8      	str	r0, [r7, #12]
 8014a94:	607a      	str	r2, [r7, #4]
 8014a96:	461a      	mov	r2, r3
 8014a98:	460b      	mov	r3, r1
 8014a9a:	72fb      	strb	r3, [r7, #11]
 8014a9c:	4613      	mov	r3, r2
 8014a9e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014aa0:	2300      	movs	r3, #0
 8014aa2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014aa4:	2300      	movs	r3, #0
 8014aa6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8014aae:	893b      	ldrh	r3, [r7, #8]
 8014ab0:	7af9      	ldrb	r1, [r7, #11]
 8014ab2:	687a      	ldr	r2, [r7, #4]
 8014ab4:	f7ee fa51 	bl	8002f5a <HAL_PCD_EP_Receive>
 8014ab8:	4603      	mov	r3, r0
 8014aba:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8014abc:	7dfb      	ldrb	r3, [r7, #23]
 8014abe:	4618      	mov	r0, r3
 8014ac0:	f000 f81a 	bl	8014af8 <USBD_Get_USB_Status>
 8014ac4:	4603      	mov	r3, r0
 8014ac6:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8014ac8:	7dbb      	ldrb	r3, [r7, #22]
}
 8014aca:	4618      	mov	r0, r3
 8014acc:	3718      	adds	r7, #24
 8014ace:	46bd      	mov	sp, r7
 8014ad0:	bd80      	pop	{r7, pc}

08014ad2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014ad2:	b580      	push	{r7, lr}
 8014ad4:	b082      	sub	sp, #8
 8014ad6:	af00      	add	r7, sp, #0
 8014ad8:	6078      	str	r0, [r7, #4]
 8014ada:	460b      	mov	r3, r1
 8014adc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014ae4:	78fa      	ldrb	r2, [r7, #3]
 8014ae6:	4611      	mov	r1, r2
 8014ae8:	4618      	mov	r0, r3
 8014aea:	f7ee fa81 	bl	8002ff0 <HAL_PCD_EP_GetRxCount>
 8014aee:	4603      	mov	r3, r0
}
 8014af0:	4618      	mov	r0, r3
 8014af2:	3708      	adds	r7, #8
 8014af4:	46bd      	mov	sp, r7
 8014af6:	bd80      	pop	{r7, pc}

08014af8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014af8:	b480      	push	{r7}
 8014afa:	b085      	sub	sp, #20
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	4603      	mov	r3, r0
 8014b00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014b02:	2300      	movs	r3, #0
 8014b04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014b06:	79fb      	ldrb	r3, [r7, #7]
 8014b08:	2b03      	cmp	r3, #3
 8014b0a:	d817      	bhi.n	8014b3c <USBD_Get_USB_Status+0x44>
 8014b0c:	a201      	add	r2, pc, #4	; (adr r2, 8014b14 <USBD_Get_USB_Status+0x1c>)
 8014b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b12:	bf00      	nop
 8014b14:	08014b25 	.word	0x08014b25
 8014b18:	08014b2b 	.word	0x08014b2b
 8014b1c:	08014b31 	.word	0x08014b31
 8014b20:	08014b37 	.word	0x08014b37
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8014b24:	2300      	movs	r3, #0
 8014b26:	73fb      	strb	r3, [r7, #15]
    break;
 8014b28:	e00b      	b.n	8014b42 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014b2a:	2302      	movs	r3, #2
 8014b2c:	73fb      	strb	r3, [r7, #15]
    break;
 8014b2e:	e008      	b.n	8014b42 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014b30:	2301      	movs	r3, #1
 8014b32:	73fb      	strb	r3, [r7, #15]
    break;
 8014b34:	e005      	b.n	8014b42 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014b36:	2302      	movs	r3, #2
 8014b38:	73fb      	strb	r3, [r7, #15]
    break;
 8014b3a:	e002      	b.n	8014b42 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8014b3c:	2302      	movs	r3, #2
 8014b3e:	73fb      	strb	r3, [r7, #15]
    break;
 8014b40:	bf00      	nop
  }
  return usb_status;
 8014b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b44:	4618      	mov	r0, r3
 8014b46:	3714      	adds	r7, #20
 8014b48:	46bd      	mov	sp, r7
 8014b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b4e:	4770      	bx	lr

08014b50 <__errno>:
 8014b50:	4b01      	ldr	r3, [pc, #4]	; (8014b58 <__errno+0x8>)
 8014b52:	6818      	ldr	r0, [r3, #0]
 8014b54:	4770      	bx	lr
 8014b56:	bf00      	nop
 8014b58:	24000130 	.word	0x24000130

08014b5c <__libc_init_array>:
 8014b5c:	b570      	push	{r4, r5, r6, lr}
 8014b5e:	4e0d      	ldr	r6, [pc, #52]	; (8014b94 <__libc_init_array+0x38>)
 8014b60:	4c0d      	ldr	r4, [pc, #52]	; (8014b98 <__libc_init_array+0x3c>)
 8014b62:	1ba4      	subs	r4, r4, r6
 8014b64:	10a4      	asrs	r4, r4, #2
 8014b66:	2500      	movs	r5, #0
 8014b68:	42a5      	cmp	r5, r4
 8014b6a:	d109      	bne.n	8014b80 <__libc_init_array+0x24>
 8014b6c:	4e0b      	ldr	r6, [pc, #44]	; (8014b9c <__libc_init_array+0x40>)
 8014b6e:	4c0c      	ldr	r4, [pc, #48]	; (8014ba0 <__libc_init_array+0x44>)
 8014b70:	f000 f8ea 	bl	8014d48 <_init>
 8014b74:	1ba4      	subs	r4, r4, r6
 8014b76:	10a4      	asrs	r4, r4, #2
 8014b78:	2500      	movs	r5, #0
 8014b7a:	42a5      	cmp	r5, r4
 8014b7c:	d105      	bne.n	8014b8a <__libc_init_array+0x2e>
 8014b7e:	bd70      	pop	{r4, r5, r6, pc}
 8014b80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014b84:	4798      	blx	r3
 8014b86:	3501      	adds	r5, #1
 8014b88:	e7ee      	b.n	8014b68 <__libc_init_array+0xc>
 8014b8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014b8e:	4798      	blx	r3
 8014b90:	3501      	adds	r5, #1
 8014b92:	e7f2      	b.n	8014b7a <__libc_init_array+0x1e>
 8014b94:	080152cc 	.word	0x080152cc
 8014b98:	080152cc 	.word	0x080152cc
 8014b9c:	080152cc 	.word	0x080152cc
 8014ba0:	080152d0 	.word	0x080152d0

08014ba4 <malloc>:
 8014ba4:	4b02      	ldr	r3, [pc, #8]	; (8014bb0 <malloc+0xc>)
 8014ba6:	4601      	mov	r1, r0
 8014ba8:	6818      	ldr	r0, [r3, #0]
 8014baa:	f000 b861 	b.w	8014c70 <_malloc_r>
 8014bae:	bf00      	nop
 8014bb0:	24000130 	.word	0x24000130

08014bb4 <free>:
 8014bb4:	4b02      	ldr	r3, [pc, #8]	; (8014bc0 <free+0xc>)
 8014bb6:	4601      	mov	r1, r0
 8014bb8:	6818      	ldr	r0, [r3, #0]
 8014bba:	f000 b80b 	b.w	8014bd4 <_free_r>
 8014bbe:	bf00      	nop
 8014bc0:	24000130 	.word	0x24000130

08014bc4 <memset>:
 8014bc4:	4402      	add	r2, r0
 8014bc6:	4603      	mov	r3, r0
 8014bc8:	4293      	cmp	r3, r2
 8014bca:	d100      	bne.n	8014bce <memset+0xa>
 8014bcc:	4770      	bx	lr
 8014bce:	f803 1b01 	strb.w	r1, [r3], #1
 8014bd2:	e7f9      	b.n	8014bc8 <memset+0x4>

08014bd4 <_free_r>:
 8014bd4:	b538      	push	{r3, r4, r5, lr}
 8014bd6:	4605      	mov	r5, r0
 8014bd8:	2900      	cmp	r1, #0
 8014bda:	d045      	beq.n	8014c68 <_free_r+0x94>
 8014bdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014be0:	1f0c      	subs	r4, r1, #4
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	bfb8      	it	lt
 8014be6:	18e4      	addlt	r4, r4, r3
 8014be8:	f000 f8ac 	bl	8014d44 <__malloc_lock>
 8014bec:	4a1f      	ldr	r2, [pc, #124]	; (8014c6c <_free_r+0x98>)
 8014bee:	6813      	ldr	r3, [r2, #0]
 8014bf0:	4610      	mov	r0, r2
 8014bf2:	b933      	cbnz	r3, 8014c02 <_free_r+0x2e>
 8014bf4:	6063      	str	r3, [r4, #4]
 8014bf6:	6014      	str	r4, [r2, #0]
 8014bf8:	4628      	mov	r0, r5
 8014bfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014bfe:	f000 b8a2 	b.w	8014d46 <__malloc_unlock>
 8014c02:	42a3      	cmp	r3, r4
 8014c04:	d90c      	bls.n	8014c20 <_free_r+0x4c>
 8014c06:	6821      	ldr	r1, [r4, #0]
 8014c08:	1862      	adds	r2, r4, r1
 8014c0a:	4293      	cmp	r3, r2
 8014c0c:	bf04      	itt	eq
 8014c0e:	681a      	ldreq	r2, [r3, #0]
 8014c10:	685b      	ldreq	r3, [r3, #4]
 8014c12:	6063      	str	r3, [r4, #4]
 8014c14:	bf04      	itt	eq
 8014c16:	1852      	addeq	r2, r2, r1
 8014c18:	6022      	streq	r2, [r4, #0]
 8014c1a:	6004      	str	r4, [r0, #0]
 8014c1c:	e7ec      	b.n	8014bf8 <_free_r+0x24>
 8014c1e:	4613      	mov	r3, r2
 8014c20:	685a      	ldr	r2, [r3, #4]
 8014c22:	b10a      	cbz	r2, 8014c28 <_free_r+0x54>
 8014c24:	42a2      	cmp	r2, r4
 8014c26:	d9fa      	bls.n	8014c1e <_free_r+0x4a>
 8014c28:	6819      	ldr	r1, [r3, #0]
 8014c2a:	1858      	adds	r0, r3, r1
 8014c2c:	42a0      	cmp	r0, r4
 8014c2e:	d10b      	bne.n	8014c48 <_free_r+0x74>
 8014c30:	6820      	ldr	r0, [r4, #0]
 8014c32:	4401      	add	r1, r0
 8014c34:	1858      	adds	r0, r3, r1
 8014c36:	4282      	cmp	r2, r0
 8014c38:	6019      	str	r1, [r3, #0]
 8014c3a:	d1dd      	bne.n	8014bf8 <_free_r+0x24>
 8014c3c:	6810      	ldr	r0, [r2, #0]
 8014c3e:	6852      	ldr	r2, [r2, #4]
 8014c40:	605a      	str	r2, [r3, #4]
 8014c42:	4401      	add	r1, r0
 8014c44:	6019      	str	r1, [r3, #0]
 8014c46:	e7d7      	b.n	8014bf8 <_free_r+0x24>
 8014c48:	d902      	bls.n	8014c50 <_free_r+0x7c>
 8014c4a:	230c      	movs	r3, #12
 8014c4c:	602b      	str	r3, [r5, #0]
 8014c4e:	e7d3      	b.n	8014bf8 <_free_r+0x24>
 8014c50:	6820      	ldr	r0, [r4, #0]
 8014c52:	1821      	adds	r1, r4, r0
 8014c54:	428a      	cmp	r2, r1
 8014c56:	bf04      	itt	eq
 8014c58:	6811      	ldreq	r1, [r2, #0]
 8014c5a:	6852      	ldreq	r2, [r2, #4]
 8014c5c:	6062      	str	r2, [r4, #4]
 8014c5e:	bf04      	itt	eq
 8014c60:	1809      	addeq	r1, r1, r0
 8014c62:	6021      	streq	r1, [r4, #0]
 8014c64:	605c      	str	r4, [r3, #4]
 8014c66:	e7c7      	b.n	8014bf8 <_free_r+0x24>
 8014c68:	bd38      	pop	{r3, r4, r5, pc}
 8014c6a:	bf00      	nop
 8014c6c:	240002b4 	.word	0x240002b4

08014c70 <_malloc_r>:
 8014c70:	b570      	push	{r4, r5, r6, lr}
 8014c72:	1ccd      	adds	r5, r1, #3
 8014c74:	f025 0503 	bic.w	r5, r5, #3
 8014c78:	3508      	adds	r5, #8
 8014c7a:	2d0c      	cmp	r5, #12
 8014c7c:	bf38      	it	cc
 8014c7e:	250c      	movcc	r5, #12
 8014c80:	2d00      	cmp	r5, #0
 8014c82:	4606      	mov	r6, r0
 8014c84:	db01      	blt.n	8014c8a <_malloc_r+0x1a>
 8014c86:	42a9      	cmp	r1, r5
 8014c88:	d903      	bls.n	8014c92 <_malloc_r+0x22>
 8014c8a:	230c      	movs	r3, #12
 8014c8c:	6033      	str	r3, [r6, #0]
 8014c8e:	2000      	movs	r0, #0
 8014c90:	bd70      	pop	{r4, r5, r6, pc}
 8014c92:	f000 f857 	bl	8014d44 <__malloc_lock>
 8014c96:	4a21      	ldr	r2, [pc, #132]	; (8014d1c <_malloc_r+0xac>)
 8014c98:	6814      	ldr	r4, [r2, #0]
 8014c9a:	4621      	mov	r1, r4
 8014c9c:	b991      	cbnz	r1, 8014cc4 <_malloc_r+0x54>
 8014c9e:	4c20      	ldr	r4, [pc, #128]	; (8014d20 <_malloc_r+0xb0>)
 8014ca0:	6823      	ldr	r3, [r4, #0]
 8014ca2:	b91b      	cbnz	r3, 8014cac <_malloc_r+0x3c>
 8014ca4:	4630      	mov	r0, r6
 8014ca6:	f000 f83d 	bl	8014d24 <_sbrk_r>
 8014caa:	6020      	str	r0, [r4, #0]
 8014cac:	4629      	mov	r1, r5
 8014cae:	4630      	mov	r0, r6
 8014cb0:	f000 f838 	bl	8014d24 <_sbrk_r>
 8014cb4:	1c43      	adds	r3, r0, #1
 8014cb6:	d124      	bne.n	8014d02 <_malloc_r+0x92>
 8014cb8:	230c      	movs	r3, #12
 8014cba:	6033      	str	r3, [r6, #0]
 8014cbc:	4630      	mov	r0, r6
 8014cbe:	f000 f842 	bl	8014d46 <__malloc_unlock>
 8014cc2:	e7e4      	b.n	8014c8e <_malloc_r+0x1e>
 8014cc4:	680b      	ldr	r3, [r1, #0]
 8014cc6:	1b5b      	subs	r3, r3, r5
 8014cc8:	d418      	bmi.n	8014cfc <_malloc_r+0x8c>
 8014cca:	2b0b      	cmp	r3, #11
 8014ccc:	d90f      	bls.n	8014cee <_malloc_r+0x7e>
 8014cce:	600b      	str	r3, [r1, #0]
 8014cd0:	50cd      	str	r5, [r1, r3]
 8014cd2:	18cc      	adds	r4, r1, r3
 8014cd4:	4630      	mov	r0, r6
 8014cd6:	f000 f836 	bl	8014d46 <__malloc_unlock>
 8014cda:	f104 000b 	add.w	r0, r4, #11
 8014cde:	1d23      	adds	r3, r4, #4
 8014ce0:	f020 0007 	bic.w	r0, r0, #7
 8014ce4:	1ac3      	subs	r3, r0, r3
 8014ce6:	d0d3      	beq.n	8014c90 <_malloc_r+0x20>
 8014ce8:	425a      	negs	r2, r3
 8014cea:	50e2      	str	r2, [r4, r3]
 8014cec:	e7d0      	b.n	8014c90 <_malloc_r+0x20>
 8014cee:	428c      	cmp	r4, r1
 8014cf0:	684b      	ldr	r3, [r1, #4]
 8014cf2:	bf16      	itet	ne
 8014cf4:	6063      	strne	r3, [r4, #4]
 8014cf6:	6013      	streq	r3, [r2, #0]
 8014cf8:	460c      	movne	r4, r1
 8014cfa:	e7eb      	b.n	8014cd4 <_malloc_r+0x64>
 8014cfc:	460c      	mov	r4, r1
 8014cfe:	6849      	ldr	r1, [r1, #4]
 8014d00:	e7cc      	b.n	8014c9c <_malloc_r+0x2c>
 8014d02:	1cc4      	adds	r4, r0, #3
 8014d04:	f024 0403 	bic.w	r4, r4, #3
 8014d08:	42a0      	cmp	r0, r4
 8014d0a:	d005      	beq.n	8014d18 <_malloc_r+0xa8>
 8014d0c:	1a21      	subs	r1, r4, r0
 8014d0e:	4630      	mov	r0, r6
 8014d10:	f000 f808 	bl	8014d24 <_sbrk_r>
 8014d14:	3001      	adds	r0, #1
 8014d16:	d0cf      	beq.n	8014cb8 <_malloc_r+0x48>
 8014d18:	6025      	str	r5, [r4, #0]
 8014d1a:	e7db      	b.n	8014cd4 <_malloc_r+0x64>
 8014d1c:	240002b4 	.word	0x240002b4
 8014d20:	240002b8 	.word	0x240002b8

08014d24 <_sbrk_r>:
 8014d24:	b538      	push	{r3, r4, r5, lr}
 8014d26:	4c06      	ldr	r4, [pc, #24]	; (8014d40 <_sbrk_r+0x1c>)
 8014d28:	2300      	movs	r3, #0
 8014d2a:	4605      	mov	r5, r0
 8014d2c:	4608      	mov	r0, r1
 8014d2e:	6023      	str	r3, [r4, #0]
 8014d30:	f7ec fa1e 	bl	8001170 <_sbrk>
 8014d34:	1c43      	adds	r3, r0, #1
 8014d36:	d102      	bne.n	8014d3e <_sbrk_r+0x1a>
 8014d38:	6823      	ldr	r3, [r4, #0]
 8014d3a:	b103      	cbz	r3, 8014d3e <_sbrk_r+0x1a>
 8014d3c:	602b      	str	r3, [r5, #0]
 8014d3e:	bd38      	pop	{r3, r4, r5, pc}
 8014d40:	24007fe0 	.word	0x24007fe0

08014d44 <__malloc_lock>:
 8014d44:	4770      	bx	lr

08014d46 <__malloc_unlock>:
 8014d46:	4770      	bx	lr

08014d48 <_init>:
 8014d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d4a:	bf00      	nop
 8014d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d4e:	bc08      	pop	{r3}
 8014d50:	469e      	mov	lr, r3
 8014d52:	4770      	bx	lr

08014d54 <_fini>:
 8014d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d56:	bf00      	nop
 8014d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d5a:	bc08      	pop	{r3}
 8014d5c:	469e      	mov	lr, r3
 8014d5e:	4770      	bx	lr
