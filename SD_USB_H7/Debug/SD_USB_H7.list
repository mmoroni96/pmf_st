
SD_USB_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a84c  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c0  0801aae4  0801aae4  0002aae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b0a4  0801b0a4  00030254  2**0
                  CONTENTS
  4 .ARM          00000008  0801b0a4  0801b0a4  0002b0a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b0ac  0801b0ac  00030254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b0ac  0801b0ac  0002b0ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b0b0  0801b0b0  0002b0b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  24000000  0801b0b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000194  0801b248  00030194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240001f4  0801b2a8  000301f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0007846c  24000258  0801b308  00030258  2**3
                  ALLOC
 12 ._user_heap_stack 00006004  240786c4  0801b308  000386c4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030254  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004d538  00000000  00000000  00030282  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000075b7  00000000  00000000  0007d7ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00002a40  00000000  00000000  00084d78  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002780  00000000  00000000  000877b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00044ed8  00000000  00000000  00089f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0002c76e  00000000  00000000  000cee10  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00198432  00000000  00000000  000fb57e  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  002939b0  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000b738  00000000  00000000  00293a2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000258 	.word	0x24000258
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0801aacc 	.word	0x0801aacc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400025c 	.word	0x2400025c
 80002d4:	0801aacc 	.word	0x0801aacc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f001 fa29 	bl	8001a34 <HAL_Init>

  /* USER CODE BEGIN Init */
  int i=0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f8b3 	bl	8000750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 fc59 	bl	8000ea0 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ee:	f000 fc37 	bl	8000e60 <MX_DMA_Init>
  MX_ETH_Init();
 80005f2:	f000 fa3f 	bl	8000a74 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005f6:	f000 fbe7 	bl	8000dc8 <MX_USART3_UART_Init>
  MX_SDMMC1_SD_Init();
 80005fa:	f000 fb4d 	bl	8000c98 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80005fe:	f011 fd5b 	bl	80120b8 <MX_FATFS_Init>
  MX_RTC_Init();
 8000602:	f000 faed 	bl	8000be0 <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 8000606:	f019 fc5b 	bl	8019ec0 <MX_USB_DEVICE_Init>
  MX_TIM17_Init();
 800060a:	f000 fbb5 	bl	8000d78 <MX_TIM17_Init>
  MX_FDCAN1_Init();
 800060e:	f000 fa83 	bl	8000b18 <MX_FDCAN1_Init>
  MX_ADC3_Init();
 8000612:	f000 f9c7 	bl	80009a4 <MX_ADC3_Init>
  MX_TIM4_Init();
 8000616:	f000 fb61 	bl	8000cdc <MX_TIM4_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800061a:	f000 f997 	bl	800094c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_SD_Init(&hsd1);
 800061e:	483e      	ldr	r0, [pc, #248]	; (8000718 <main+0x140>)
 8000620:	f00a ffd8 	bl	800b5d4 <HAL_SD_Init>
  HAL_SD_GetCardInfo(&hsd1, &SDCardInfo);
 8000624:	493d      	ldr	r1, [pc, #244]	; (800071c <main+0x144>)
 8000626:	483c      	ldr	r0, [pc, #240]	; (8000718 <main+0x140>)
 8000628:	f00b fe70 	bl	800c30c <HAL_SD_GetCardInfo>
  HAL_SD_Init(&hsd1);
 800062c:	483a      	ldr	r0, [pc, #232]	; (8000718 <main+0x140>)
 800062e:	f00a ffd1 	bl	800b5d4 <HAL_SD_Init>
  FRESULT res;
  res=f_mount(&myFatFS, SDPath, 1);
 8000632:	2201      	movs	r2, #1
 8000634:	493a      	ldr	r1, [pc, #232]	; (8000720 <main+0x148>)
 8000636:	483b      	ldr	r0, [pc, #236]	; (8000724 <main+0x14c>)
 8000638:	f017 fd82 	bl	8018140 <f_mount>
 800063c:	4603      	mov	r3, r0
 800063e:	71fb      	strb	r3, [r7, #7]
  HAL_TIM_Base_Start_IT(&htim17);
 8000640:	4839      	ldr	r0, [pc, #228]	; (8000728 <main+0x150>)
 8000642:	f00c fba9 	bl	800cd98 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000646:	4839      	ldr	r0, [pc, #228]	; (800072c <main+0x154>)
 8000648:	f00c fba6 	bl	800cd98 <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET,ADC_SINGLE_ENDED);
 800064c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000650:	2100      	movs	r1, #0
 8000652:	4837      	ldr	r0, [pc, #220]	; (8000730 <main+0x158>)
 8000654:	f002 fcf4 	bl	8003040 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)analogDmaData, ADC_CONVERTED_DATA_BUFFER_SIZE);
 8000658:	4a36      	ldr	r2, [pc, #216]	; (8000734 <main+0x15c>)
 800065a:	4937      	ldr	r1, [pc, #220]	; (8000738 <main+0x160>)
 800065c:	4834      	ldr	r0, [pc, #208]	; (8000730 <main+0x158>)
 800065e:	f001 fe5f 	bl	8002320 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port,USER_Btn_Pin)==GPIO_PIN_SET){
 8000662:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000666:	4835      	ldr	r0, [pc, #212]	; (800073c <main+0x164>)
 8000668:	f006 fb6e 	bl	8006d48 <HAL_GPIO_ReadPin>
 800066c:	4603      	mov	r3, r0
 800066e:	2b01      	cmp	r3, #1
 8000670:	d1f7      	bne.n	8000662 <main+0x8a>
		  if(i==0){
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d13f      	bne.n	80006f8 <main+0x120>
			  HAL_TIM_Base_Stop_IT(&htim17);
 8000678:	482b      	ldr	r0, [pc, #172]	; (8000728 <main+0x150>)
 800067a:	f00c fbb7 	bl	800cdec <HAL_TIM_Base_Stop_IT>
			  //NVIC_DisableIRQ(OTG_FS_IRQn);
			  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, GPIO_PIN_SET);
 800067e:	2201      	movs	r2, #1
 8000680:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000684:	482e      	ldr	r0, [pc, #184]	; (8000740 <main+0x168>)
 8000686:	f006 fb77 	bl	8006d78 <HAL_GPIO_WritePin>
			  if(USBD_Stop(&hUsbDeviceFS)!= USBD_OK) {
 800068a:	482e      	ldr	r0, [pc, #184]	; (8000744 <main+0x16c>)
 800068c:	f013 f930 	bl	80138f0 <USBD_Stop>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <main+0xc2>
								Error_Handler();
 8000696:	f000 fddf 	bl	8001258 <Error_Handler>
							  }

			  res = f_open(&writeFile, &path1, FA_CREATE_ALWAYS);
 800069a:	2208      	movs	r2, #8
 800069c:	492a      	ldr	r1, [pc, #168]	; (8000748 <main+0x170>)
 800069e:	482b      	ldr	r0, [pc, #172]	; (800074c <main+0x174>)
 80006a0:	f017 fd94 	bl	80181cc <f_open>
 80006a4:	4603      	mov	r3, r0
 80006a6:	71fb      	strb	r3, [r7, #7]
			  res = f_close(&writeFile);
 80006a8:	4828      	ldr	r0, [pc, #160]	; (800074c <main+0x174>)
 80006aa:	f018 fd00 	bl	80190ae <f_close>
 80006ae:	4603      	mov	r3, r0
 80006b0:	71fb      	strb	r3, [r7, #7]
			  res = f_open(&writeFile, &path1, FA_WRITE | FA_OPEN_ALWAYS);
 80006b2:	2212      	movs	r2, #18
 80006b4:	4924      	ldr	r1, [pc, #144]	; (8000748 <main+0x170>)
 80006b6:	4825      	ldr	r0, [pc, #148]	; (800074c <main+0x174>)
 80006b8:	f017 fd88 	bl	80181cc <f_open>
 80006bc:	4603      	mov	r3, r0
 80006be:	71fb      	strb	r3, [r7, #7]

			  for(int u=0;u<7200;u++){
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	e004      	b.n	80006d0 <main+0xf8>


				  scrivi_speed();
 80006c6:	f000 fdaf 	bl	8001228 <scrivi_speed>
			  for(int u=0;u<7200;u++){
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	3301      	adds	r3, #1
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 80006d6:	dbf6      	blt.n	80006c6 <main+0xee>
			  }

			  res = f_close(&writeFile);
 80006d8:	481c      	ldr	r0, [pc, #112]	; (800074c <main+0x174>)
 80006da:	f018 fce8 	bl	80190ae <f_close>
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
			  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006e8:	4815      	ldr	r0, [pc, #84]	; (8000740 <main+0x168>)
 80006ea:	f006 fb45 	bl	8006d78 <HAL_GPIO_WritePin>
		      i=0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
		      HAL_Delay(200);}
 80006f2:	20c8      	movs	r0, #200	; 0xc8
 80006f4:	f001 fa30 	bl	8001b58 <HAL_Delay>


			  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006fe:	4810      	ldr	r0, [pc, #64]	; (8000740 <main+0x168>)
 8000700:	f006 fb3a 	bl	8006d78 <HAL_GPIO_WritePin>

			  MX_USB_DEVICE_Init();
 8000704:	f019 fbdc 	bl	8019ec0 <MX_USB_DEVICE_Init>
			  /*if(USBD_Start(&hUsbDeviceFS)!= USBD_OK) {
			 			  				    Error_Handler();
			 			  				  }*/
			  //NVIC_EnableIRQ(OTG_FS_IRQn);
			  HAL_TIM_Base_Start_IT(&htim17);
 8000708:	4807      	ldr	r0, [pc, #28]	; (8000728 <main+0x150>)
 800070a:	f00c fb45 	bl	800cd98 <HAL_TIM_Base_Start_IT>
			  HAL_Delay(200);
 800070e:	20c8      	movs	r0, #200	; 0xc8
 8000710:	f001 fa22 	bl	8001b58 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port,USER_Btn_Pin)==GPIO_PIN_SET){
 8000714:	e7a5      	b.n	8000662 <main+0x8a>
 8000716:	bf00      	nop
 8000718:	24001438 	.word	0x24001438
 800071c:	240025d8 	.word	0x240025d8
 8000720:	24075d5c 	.word	0x24075d5c
 8000724:	24003600 	.word	0x24003600
 8000728:	240014bc 	.word	0x240014bc
 800072c:	24001328 	.word	0x24001328
 8000730:	2400463c 	.word	0x2400463c
 8000734:	00038270 	.word	0x00038270
 8000738:	24004778 	.word	0x24004778
 800073c:	58020800 	.word	0x58020800
 8000740:	58020400 	.word	0x58020400
 8000744:	24077df4 	.word	0x24077df4
 8000748:	24000000 	.word	0x24000000
 800074c:	24001578 	.word	0x24001578

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b0cc      	sub	sp, #304	; 0x130
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800075a:	224c      	movs	r2, #76	; 0x4c
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f01a f8f1 	bl	801a946 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000768:	2220      	movs	r2, #32
 800076a:	2100      	movs	r1, #0
 800076c:	4618      	mov	r0, r3
 800076e:	f01a f8ea 	bl	801a946 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	4618      	mov	r0, r3
 8000778:	23bc      	movs	r3, #188	; 0xbc
 800077a:	461a      	mov	r2, r3
 800077c:	2100      	movs	r1, #0
 800077e:	f01a f8e2 	bl	801a946 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000782:	2002      	movs	r0, #2
 8000784:	f007 fd8a 	bl	800829c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	4b6b      	ldr	r3, [pc, #428]	; (800093c <SystemClock_Config+0x1ec>)
 8000790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000792:	4a6a      	ldr	r2, [pc, #424]	; (800093c <SystemClock_Config+0x1ec>)
 8000794:	f023 0301 	bic.w	r3, r3, #1
 8000798:	62d3      	str	r3, [r2, #44]	; 0x2c
 800079a:	4b68      	ldr	r3, [pc, #416]	; (800093c <SystemClock_Config+0x1ec>)
 800079c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800079e:	f003 0201 	and.w	r2, r3, #1
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	4b66      	ldr	r3, [pc, #408]	; (8000940 <SystemClock_Config+0x1f0>)
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	4a65      	ldr	r2, [pc, #404]	; (8000940 <SystemClock_Config+0x1f0>)
 80007ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007b0:	6193      	str	r3, [r2, #24]
 80007b2:	4b63      	ldr	r3, [pc, #396]	; (8000940 <SystemClock_Config+0x1f0>)
 80007b4:	699b      	ldr	r3, [r3, #24]
 80007b6:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007c2:	bf00      	nop
 80007c4:	4b5e      	ldr	r3, [pc, #376]	; (8000940 <SystemClock_Config+0x1f0>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007d0:	d1f8      	bne.n	80007c4 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80007d2:	4b5c      	ldr	r3, [pc, #368]	; (8000944 <SystemClock_Config+0x1f4>)
 80007d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007d6:	f023 0303 	bic.w	r3, r3, #3
 80007da:	4a5a      	ldr	r2, [pc, #360]	; (8000944 <SystemClock_Config+0x1f4>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 80007e2:	2329      	movs	r3, #41	; 0x29
 80007e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007e8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007ec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007f0:	2301      	movs	r3, #1
 80007f2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007f6:	2301      	movs	r3, #1
 80007f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fc:	2302      	movs	r3, #2
 80007fe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000802:	2302      	movs	r3, #2
 8000804:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000808:	2301      	movs	r3, #1
 800080a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 30;
 800080e:	231e      	movs	r3, #30
 8000810:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000814:	2302      	movs	r3, #2
 8000816:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 1;
 800081a:	2301      	movs	r3, #1
 800081c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000820:	2302      	movs	r3, #2
 8000822:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000826:	230c      	movs	r3, #12
 8000828:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800082c:	2300      	movs	r3, #0
 800082e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000838:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800083c:	4618      	mov	r0, r3
 800083e:	f007 fd77 	bl	8008330 <HAL_RCC_OscConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000848:	f000 fd06 	bl	8001258 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084c:	233f      	movs	r3, #63	; 0x3f
 800084e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000852:	2303      	movs	r3, #3
 8000854:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800087c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000880:	2101      	movs	r1, #1
 8000882:	4618      	mov	r0, r3
 8000884:	f008 f92c 	bl	8008ae0 <HAL_RCC_ClockConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0x142>
  {
    Error_Handler();
 800088e:	f000 fce3 	bl	8001258 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 8000892:	f107 0308 	add.w	r3, r7, #8
 8000896:	4a2c      	ldr	r2, [pc, #176]	; (8000948 <SystemClock_Config+0x1f8>)
 8000898:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_FDCAN|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 800089a:	f107 0308 	add.w	r3, r7, #8
 800089e:	2201      	movs	r2, #1
 80008a0:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 18;
 80008a2:	f107 0308 	add.w	r3, r7, #8
 80008a6:	2212      	movs	r2, #18
 80008a8:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 80008aa:	f107 0308 	add.w	r3, r7, #8
 80008ae:	2201      	movs	r2, #1
 80008b0:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80008b2:	f107 0308 	add.w	r3, r7, #8
 80008b6:	2202      	movs	r2, #2
 80008b8:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80008ba:	f107 0308 	add.w	r3, r7, #8
 80008be:	2202      	movs	r2, #2
 80008c0:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80008c2:	f107 0308 	add.w	r3, r7, #8
 80008c6:	22c0      	movs	r2, #192	; 0xc0
 80008c8:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80008ca:	f107 0308 	add.w	r3, r7, #8
 80008ce:	2220      	movs	r2, #32
 80008d0:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 80008d2:	f107 0308 	add.w	r3, r7, #8
 80008d6:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80008da:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80008dc:	f107 0308 	add.w	r3, r7, #8
 80008e0:	2200      	movs	r2, #0
 80008e2:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 80008e4:	f107 0308 	add.w	r3, r7, #8
 80008e8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80008ec:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80008ee:	f107 0308 	add.w	r3, r7, #8
 80008f2:	2200      	movs	r2, #0
 80008f4:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80008f6:	f107 0308 	add.w	r3, r7, #8
 80008fa:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80008fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000902:	f107 0308 	add.w	r3, r7, #8
 8000906:	2200      	movs	r2, #0
 8000908:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800090c:	f107 0308 	add.w	r3, r7, #8
 8000910:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000914:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000918:	f107 0308 	add.w	r3, r7, #8
 800091c:	4618      	mov	r0, r3
 800091e:	f008 fc63 	bl	80091e8 <HAL_RCCEx_PeriphCLKConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <SystemClock_Config+0x1dc>
  {
    Error_Handler();
 8000928:	f000 fc96 	bl	8001258 <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 800092c:	f007 fcf0 	bl	8008310 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000930:	bf00      	nop
 8000932:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	58000400 	.word	0x58000400
 8000940:	58024800 	.word	0x58024800
 8000944:	58024400 	.word	0x58024400
 8000948:	004d8002 	.word	0x004d8002

0800094c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* FDCAN1_IT0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000950:	2200      	movs	r2, #0
 8000952:	2100      	movs	r1, #0
 8000954:	2013      	movs	r0, #19
 8000956:	f002 fcb2 	bl	80032be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800095a:	2013      	movs	r0, #19
 800095c:	f002 fcc9 	bl	80032f2 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	2100      	movs	r1, #0
 8000964:	2028      	movs	r0, #40	; 0x28
 8000966:	f002 fcaa 	bl	80032be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800096a:	2028      	movs	r0, #40	; 0x28
 800096c:	f002 fcc1 	bl	80032f2 <HAL_NVIC_EnableIRQ>
  /* FDCAN_CAL_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FDCAN_CAL_IRQn, 0, 0);
 8000970:	2200      	movs	r2, #0
 8000972:	2100      	movs	r1, #0
 8000974:	203f      	movs	r0, #63	; 0x3f
 8000976:	f002 fca2 	bl	80032be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FDCAN_CAL_IRQn);
 800097a:	203f      	movs	r0, #63	; 0x3f
 800097c:	f002 fcb9 	bl	80032f2 <HAL_NVIC_EnableIRQ>
  /* OTG_FS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	2100      	movs	r1, #0
 8000984:	2065      	movs	r0, #101	; 0x65
 8000986:	f002 fc9a 	bl	80032be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800098a:	2065      	movs	r0, #101	; 0x65
 800098c:	f002 fcb1 	bl	80032f2 <HAL_NVIC_EnableIRQ>
  /* TIM17_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8000990:	2200      	movs	r2, #0
 8000992:	2100      	movs	r1, #0
 8000994:	2076      	movs	r0, #118	; 0x76
 8000996:	f002 fc92 	bl	80032be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800099a:	2076      	movs	r0, #118	; 0x76
 800099c:	f002 fca9 	bl	80032f2 <HAL_NVIC_EnableIRQ>
}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b088      	sub	sp, #32
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
 80009b8:	615a      	str	r2, [r3, #20]
 80009ba:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 80009bc:	4b2a      	ldr	r3, [pc, #168]	; (8000a68 <MX_ADC3_Init+0xc4>)
 80009be:	4a2b      	ldr	r2, [pc, #172]	; (8000a6c <MX_ADC3_Init+0xc8>)
 80009c0:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 80009c2:	4b29      	ldr	r3, [pc, #164]	; (8000a68 <MX_ADC3_Init+0xc4>)
 80009c4:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80009c8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80009ca:	4b27      	ldr	r3, [pc, #156]	; (8000a68 <MX_ADC3_Init+0xc4>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009d0:	4b25      	ldr	r3, [pc, #148]	; (8000a68 <MX_ADC3_Init+0xc4>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009d6:	4b24      	ldr	r3, [pc, #144]	; (8000a68 <MX_ADC3_Init+0xc4>)
 80009d8:	2204      	movs	r2, #4
 80009da:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80009dc:	4b22      	ldr	r3, [pc, #136]	; (8000a68 <MX_ADC3_Init+0xc4>)
 80009de:	2200      	movs	r2, #0
 80009e0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80009e2:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <MX_ADC3_Init+0xc4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80009e8:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <MX_ADC3_Init+0xc4>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80009ee:	4b1e      	ldr	r3, [pc, #120]	; (8000a68 <MX_ADC3_Init+0xc4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 80009f4:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <MX_ADC3_Init+0xc4>)
 80009f6:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 80009fa:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80009fc:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_ADC3_Init+0xc4>)
 80009fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a02:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000a04:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <MX_ADC3_Init+0xc4>)
 8000a06:	2203      	movs	r2, #3
 8000a08:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000a0a:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <MX_ADC3_Init+0xc4>)
 8000a0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a10:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <MX_ADC3_Init+0xc4>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000a18:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <MX_ADC3_Init+0xc4>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a20:	4811      	ldr	r0, [pc, #68]	; (8000a68 <MX_ADC3_Init+0xc4>)
 8000a22:	f001 fadd 	bl	8001fe0 <HAL_ADC_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_ADC3_Init+0x8c>
  {
    Error_Handler();
 8000a2c:	f000 fc14 	bl	8001258 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_ADC3_Init+0xcc>)
 8000a32:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a34:	2306      	movs	r3, #6
 8000a36:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a3c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a40:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a42:	2304      	movs	r3, #4
 8000a44:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4806      	ldr	r0, [pc, #24]	; (8000a68 <MX_ADC3_Init+0xc4>)
 8000a50:	f001 fd48 	bl	80024e4 <HAL_ADC_ConfigChannel>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_ADC3_Init+0xba>
  {
    Error_Handler();
 8000a5a:	f000 fbfd 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	3720      	adds	r7, #32
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	2400463c 	.word	0x2400463c
 8000a6c:	58026000 	.word	0x58026000
 8000a70:	14f00020 	.word	0x14f00020

08000a74 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a78:	4b22      	ldr	r3, [pc, #136]	; (8000b04 <MX_ETH_Init+0x90>)
 8000a7a:	4a23      	ldr	r2, [pc, #140]	; (8000b08 <MX_ETH_Init+0x94>)
 8000a7c:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8000a7e:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <MX_ETH_Init+0x90>)
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	2200      	movs	r2, #0
 8000a84:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000a86:	4b1f      	ldr	r3, [pc, #124]	; (8000b04 <MX_ETH_Init+0x90>)
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	2280      	movs	r2, #128	; 0x80
 8000a8e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000a90:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <MX_ETH_Init+0x90>)
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	3302      	adds	r3, #2
 8000a96:	22e1      	movs	r2, #225	; 0xe1
 8000a98:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000a9a:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <MX_ETH_Init+0x90>)
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	3303      	adds	r3, #3
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000aa4:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <MX_ETH_Init+0x90>)
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000aae:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <MX_ETH_Init+0x90>)
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	3305      	adds	r3, #5
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <MX_ETH_Init+0x90>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_ETH_Init+0x90>)
 8000ac0:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <MX_ETH_Init+0x98>)
 8000ac2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_ETH_Init+0x90>)
 8000ac6:	4a12      	ldr	r2, [pc, #72]	; (8000b10 <MX_ETH_Init+0x9c>)
 8000ac8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_ETH_Init+0x90>)
 8000acc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000ad0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000ad2:	480c      	ldr	r0, [pc, #48]	; (8000b04 <MX_ETH_Init+0x90>)
 8000ad4:	f004 fd00 	bl	80054d8 <HAL_ETH_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000ade:	f000 fbbb 	bl	8001258 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ae2:	2234      	movs	r2, #52	; 0x34
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	480b      	ldr	r0, [pc, #44]	; (8000b14 <MX_ETH_Init+0xa0>)
 8000ae8:	f019 ff2d 	bl	801a946 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000aec:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <MX_ETH_Init+0xa0>)
 8000aee:	2221      	movs	r2, #33	; 0x21
 8000af0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000af2:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <MX_ETH_Init+0xa0>)
 8000af4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000af8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <MX_ETH_Init+0xa0>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	24074c58 	.word	0x24074c58
 8000b08:	40028000 	.word	0x40028000
 8000b0c:	240001f4 	.word	0x240001f4
 8000b10:	24000194 	.word	0x24000194
 8000b14:	24074cd0 	.word	0x24074cd0

08000b18 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000b1c:	4b2e      	ldr	r3, [pc, #184]	; (8000bd8 <MX_FDCAN1_Init+0xc0>)
 8000b1e:	4a2f      	ldr	r2, [pc, #188]	; (8000bdc <MX_FDCAN1_Init+0xc4>)
 8000b20:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000b22:	4b2d      	ldr	r3, [pc, #180]	; (8000bd8 <MX_FDCAN1_Init+0xc0>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000b28:	4b2b      	ldr	r3, [pc, #172]	; (8000bd8 <MX_FDCAN1_Init+0xc0>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000b2e:	4b2a      	ldr	r3, [pc, #168]	; (8000bd8 <MX_FDCAN1_Init+0xc0>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000b34:	4b28      	ldr	r3, [pc, #160]	; (8000bd8 <MX_FDCAN1_Init+0xc0>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000b3a:	4b27      	ldr	r3, [pc, #156]	; (8000bd8 <MX_FDCAN1_Init+0xc0>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 8000b40:	4b25      	ldr	r3, [pc, #148]	; (8000bd8 <MX_FDCAN1_Init+0xc0>)
 8000b42:	2205      	movs	r2, #5
 8000b44:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000b46:	4b24      	ldr	r3, [pc, #144]	; (8000bd8 <MX_FDCAN1_Init+0xc0>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000b4c:	4b22      	ldr	r3, [pc, #136]	; (8000bd8 <MX_FDCAN1_Init+0xc0>)
 8000b4e:	220d      	movs	r2, #13
 8000b50:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000b52:	4b21      	ldr	r3, [pc, #132]	; (8000bd8 <MX_FDCAN1_Init+0xc0>)
 8000b54:	2202      	movs	r2, #2
 8000b56:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000b58:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <MX_FDCAN1_Init+0xc0>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000b5e:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <MX_FDCAN1_Init+0xc0>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000b64:	4b1c      	ldr	r3, [pc, #112]	; (8000bd8 <MX_FDCAN1_Init+0xc0>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000b6a:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <MX_FDCAN1_Init+0xc0>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000b70:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <MX_FDCAN1_Init+0xc0>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000b76:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <MX_FDCAN1_Init+0xc0>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000b7c:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <MX_FDCAN1_Init+0xc0>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <MX_FDCAN1_Init+0xc0>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000b88:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <MX_FDCAN1_Init+0xc0>)
 8000b8a:	2204      	movs	r2, #4
 8000b8c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000b8e:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <MX_FDCAN1_Init+0xc0>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000b94:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <MX_FDCAN1_Init+0xc0>)
 8000b96:	2204      	movs	r2, #4
 8000b98:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <MX_FDCAN1_Init+0xc0>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000ba0:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <MX_FDCAN1_Init+0xc0>)
 8000ba2:	2204      	movs	r2, #4
 8000ba4:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <MX_FDCAN1_Init+0xc0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <MX_FDCAN1_Init+0xc0>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <MX_FDCAN1_Init+0xc0>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000bb8:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <MX_FDCAN1_Init+0xc0>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <MX_FDCAN1_Init+0xc0>)
 8000bc0:	2204      	movs	r2, #4
 8000bc2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000bc4:	4804      	ldr	r0, [pc, #16]	; (8000bd8 <MX_FDCAN1_Init+0xc0>)
 8000bc6:	f005 f89d 	bl	8005d04 <HAL_FDCAN_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000bd0:	f000 fb42 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	240046c8 	.word	0x240046c8
 8000bdc:	4000a000 	.word	0x4000a000

08000be0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000bf8:	4b25      	ldr	r3, [pc, #148]	; (8000c90 <MX_RTC_Init+0xb0>)
 8000bfa:	4a26      	ldr	r2, [pc, #152]	; (8000c94 <MX_RTC_Init+0xb4>)
 8000bfc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000bfe:	4b24      	ldr	r3, [pc, #144]	; (8000c90 <MX_RTC_Init+0xb0>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c04:	4b22      	ldr	r3, [pc, #136]	; (8000c90 <MX_RTC_Init+0xb0>)
 8000c06:	227f      	movs	r2, #127	; 0x7f
 8000c08:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c0a:	4b21      	ldr	r3, [pc, #132]	; (8000c90 <MX_RTC_Init+0xb0>)
 8000c0c:	22ff      	movs	r2, #255	; 0xff
 8000c0e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c10:	4b1f      	ldr	r3, [pc, #124]	; (8000c90 <MX_RTC_Init+0xb0>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c16:	4b1e      	ldr	r3, [pc, #120]	; (8000c90 <MX_RTC_Init+0xb0>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c1c:	4b1c      	ldr	r3, [pc, #112]	; (8000c90 <MX_RTC_Init+0xb0>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000c22:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <MX_RTC_Init+0xb0>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c28:	4819      	ldr	r0, [pc, #100]	; (8000c90 <MX_RTC_Init+0xb0>)
 8000c2a:	f00a f991 	bl	800af50 <HAL_RTC_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000c34:	f000 fb10 	bl	8001258 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c44:	2300      	movs	r3, #0
 8000c46:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	2201      	movs	r2, #1
 8000c50:	4619      	mov	r1, r3
 8000c52:	480f      	ldr	r0, [pc, #60]	; (8000c90 <MX_RTC_Init+0xb0>)
 8000c54:	f00a fa18 	bl	800b088 <HAL_RTC_SetTime>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000c5e:	f000 fafb 	bl	8001258 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c62:	2301      	movs	r3, #1
 8000c64:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000c66:	2301      	movs	r3, #1
 8000c68:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000c72:	463b      	mov	r3, r7
 8000c74:	2201      	movs	r2, #1
 8000c76:	4619      	mov	r1, r3
 8000c78:	4805      	ldr	r0, [pc, #20]	; (8000c90 <MX_RTC_Init+0xb0>)
 8000c7a:	f00a fb25 	bl	800b2c8 <HAL_RTC_SetDate>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000c84:	f000 fae8 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c88:	bf00      	nop
 8000c8a:	3718      	adds	r7, #24
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	240046a4 	.word	0x240046a4
 8000c94:	58004000 	.word	0x58004000

08000c98 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000c9c:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <MX_SDMMC1_SD_Init+0x3c>)
 8000c9e:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <MX_SDMMC1_SD_Init+0x40>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <MX_SDMMC1_SD_Init+0x3c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <MX_SDMMC1_SD_Init+0x3c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <MX_SDMMC1_SD_Init+0x3c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <MX_SDMMC1_SD_Init+0x3c>)
 8000cb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cba:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <MX_SDMMC1_SD_Init+0x3c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8000cc2:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <MX_SDMMC1_SD_Init+0x3c>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	24001438 	.word	0x24001438
 8000cd8:	52007000 	.word	0x52007000

08000cdc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ce2:	f107 0310 	add.w	r3, r7, #16
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cfa:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <MX_TIM4_Init+0x94>)
 8000cfc:	4a1d      	ldr	r2, [pc, #116]	; (8000d74 <MX_TIM4_Init+0x98>)
 8000cfe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4;
 8000d00:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <MX_TIM4_Init+0x94>)
 8000d02:	2204      	movs	r2, #4
 8000d04:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d06:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <MX_TIM4_Init+0x94>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8000d0c:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <MX_TIM4_Init+0x94>)
 8000d0e:	2264      	movs	r2, #100	; 0x64
 8000d10:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d12:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <MX_TIM4_Init+0x94>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d18:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <MX_TIM4_Init+0x94>)
 8000d1a:	2280      	movs	r2, #128	; 0x80
 8000d1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d1e:	4814      	ldr	r0, [pc, #80]	; (8000d70 <MX_TIM4_Init+0x94>)
 8000d20:	f00c f80e 	bl	800cd40 <HAL_TIM_Base_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000d2a:	f000 fa95 	bl	8001258 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d34:	f107 0310 	add.w	r3, r7, #16
 8000d38:	4619      	mov	r1, r3
 8000d3a:	480d      	ldr	r0, [pc, #52]	; (8000d70 <MX_TIM4_Init+0x94>)
 8000d3c:	f00c f9a0 	bl	800d080 <HAL_TIM_ConfigClockSource>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000d46:	f000 fa87 	bl	8001258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d4a:	2320      	movs	r3, #32
 8000d4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	4619      	mov	r1, r3
 8000d56:	4806      	ldr	r0, [pc, #24]	; (8000d70 <MX_TIM4_Init+0x94>)
 8000d58:	f00c fbc2 	bl	800d4e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000d62:	f000 fa79 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	3720      	adds	r7, #32
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	24001328 	.word	0x24001328
 8000d74:	40000800 	.word	0x40000800

08000d78 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000d7c:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <MX_TIM17_Init+0x48>)
 8000d7e:	4a11      	ldr	r2, [pc, #68]	; (8000dc4 <MX_TIM17_Init+0x4c>)
 8000d80:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 63999;
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <MX_TIM17_Init+0x48>)
 8000d84:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000d88:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <MX_TIM17_Init+0x48>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 400;
 8000d90:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <MX_TIM17_Init+0x48>)
 8000d92:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000d96:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d98:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <MX_TIM17_Init+0x48>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000d9e:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <MX_TIM17_Init+0x48>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <MX_TIM17_Init+0x48>)
 8000da6:	2280      	movs	r2, #128	; 0x80
 8000da8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <MX_TIM17_Init+0x48>)
 8000dac:	f00b ffc8 	bl	800cd40 <HAL_TIM_Base_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8000db6:	f000 fa4f 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	240014bc 	.word	0x240014bc
 8000dc4:	40014800 	.word	0x40014800

08000dc8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dcc:	4b22      	ldr	r3, [pc, #136]	; (8000e58 <MX_USART3_UART_Init+0x90>)
 8000dce:	4a23      	ldr	r2, [pc, #140]	; (8000e5c <MX_USART3_UART_Init+0x94>)
 8000dd0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dd2:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <MX_USART3_UART_Init+0x90>)
 8000dd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dd8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dda:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <MX_USART3_UART_Init+0x90>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000de0:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <MX_USART3_UART_Init+0x90>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000de6:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <MX_USART3_UART_Init+0x90>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dec:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <MX_USART3_UART_Init+0x90>)
 8000dee:	220c      	movs	r2, #12
 8000df0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df2:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <MX_USART3_UART_Init+0x90>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df8:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <MX_USART3_UART_Init+0x90>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dfe:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <MX_USART3_UART_Init+0x90>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e04:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <MX_USART3_UART_Init+0x90>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <MX_USART3_UART_Init+0x90>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e10:	4811      	ldr	r0, [pc, #68]	; (8000e58 <MX_USART3_UART_Init+0x90>)
 8000e12:	f00c fc0b 	bl	800d62c <HAL_UART_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e1c:	f000 fa1c 	bl	8001258 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e20:	2100      	movs	r1, #0
 8000e22:	480d      	ldr	r0, [pc, #52]	; (8000e58 <MX_USART3_UART_Init+0x90>)
 8000e24:	f00e ff75 	bl	800fd12 <HAL_UARTEx_SetTxFifoThreshold>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e2e:	f000 fa13 	bl	8001258 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e32:	2100      	movs	r1, #0
 8000e34:	4808      	ldr	r0, [pc, #32]	; (8000e58 <MX_USART3_UART_Init+0x90>)
 8000e36:	f00e ffaa 	bl	800fd8e <HAL_UARTEx_SetRxFifoThreshold>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e40:	f000 fa0a 	bl	8001258 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e44:	4804      	ldr	r0, [pc, #16]	; (8000e58 <MX_USART3_UART_Init+0x90>)
 8000e46:	f00e ff2b 	bl	800fca0 <HAL_UARTEx_DisableFifoMode>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e50:	f000 fa02 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	24001368 	.word	0x24001368
 8000e5c:	40004800 	.word	0x40004800

08000e60 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e66:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <MX_DMA_Init+0x3c>)
 8000e68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e6c:	4a0b      	ldr	r2, [pc, #44]	; (8000e9c <MX_DMA_Init+0x3c>)
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <MX_DMA_Init+0x3c>)
 8000e78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	607b      	str	r3, [r7, #4]
 8000e82:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2100      	movs	r1, #0
 8000e88:	200b      	movs	r0, #11
 8000e8a:	f002 fa18 	bl	80032be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e8e:	200b      	movs	r0, #11
 8000e90:	f002 fa2f 	bl	80032f2 <HAL_NVIC_EnableIRQ>

}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	58024400 	.word	0x58024400

08000ea0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08c      	sub	sp, #48	; 0x30
 8000ea4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
 8000eb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb6:	4b5d      	ldr	r3, [pc, #372]	; (800102c <MX_GPIO_Init+0x18c>)
 8000eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ebc:	4a5b      	ldr	r2, [pc, #364]	; (800102c <MX_GPIO_Init+0x18c>)
 8000ebe:	f043 0304 	orr.w	r3, r3, #4
 8000ec2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ec6:	4b59      	ldr	r3, [pc, #356]	; (800102c <MX_GPIO_Init+0x18c>)
 8000ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ecc:	f003 0304 	and.w	r3, r3, #4
 8000ed0:	61bb      	str	r3, [r7, #24]
 8000ed2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ed4:	4b55      	ldr	r3, [pc, #340]	; (800102c <MX_GPIO_Init+0x18c>)
 8000ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eda:	4a54      	ldr	r2, [pc, #336]	; (800102c <MX_GPIO_Init+0x18c>)
 8000edc:	f043 0320 	orr.w	r3, r3, #32
 8000ee0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee4:	4b51      	ldr	r3, [pc, #324]	; (800102c <MX_GPIO_Init+0x18c>)
 8000ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eea:	f003 0320 	and.w	r3, r3, #32
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ef2:	4b4e      	ldr	r3, [pc, #312]	; (800102c <MX_GPIO_Init+0x18c>)
 8000ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef8:	4a4c      	ldr	r2, [pc, #304]	; (800102c <MX_GPIO_Init+0x18c>)
 8000efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000efe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f02:	4b4a      	ldr	r3, [pc, #296]	; (800102c <MX_GPIO_Init+0x18c>)
 8000f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f0c:	613b      	str	r3, [r7, #16]
 8000f0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f10:	4b46      	ldr	r3, [pc, #280]	; (800102c <MX_GPIO_Init+0x18c>)
 8000f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f16:	4a45      	ldr	r2, [pc, #276]	; (800102c <MX_GPIO_Init+0x18c>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f20:	4b42      	ldr	r3, [pc, #264]	; (800102c <MX_GPIO_Init+0x18c>)
 8000f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2e:	4b3f      	ldr	r3, [pc, #252]	; (800102c <MX_GPIO_Init+0x18c>)
 8000f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f34:	4a3d      	ldr	r2, [pc, #244]	; (800102c <MX_GPIO_Init+0x18c>)
 8000f36:	f043 0302 	orr.w	r3, r3, #2
 8000f3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f3e:	4b3b      	ldr	r3, [pc, #236]	; (800102c <MX_GPIO_Init+0x18c>)
 8000f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f44:	f003 0302 	and.w	r3, r3, #2
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f4c:	4b37      	ldr	r3, [pc, #220]	; (800102c <MX_GPIO_Init+0x18c>)
 8000f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f52:	4a36      	ldr	r2, [pc, #216]	; (800102c <MX_GPIO_Init+0x18c>)
 8000f54:	f043 0308 	orr.w	r3, r3, #8
 8000f58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f5c:	4b33      	ldr	r3, [pc, #204]	; (800102c <MX_GPIO_Init+0x18c>)
 8000f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f62:	f003 0308 	and.w	r3, r3, #8
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f6a:	4b30      	ldr	r3, [pc, #192]	; (800102c <MX_GPIO_Init+0x18c>)
 8000f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f70:	4a2e      	ldr	r2, [pc, #184]	; (800102c <MX_GPIO_Init+0x18c>)
 8000f72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f7a:	4b2c      	ldr	r3, [pc, #176]	; (800102c <MX_GPIO_Init+0x18c>)
 8000f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f84:	603b      	str	r3, [r7, #0]
 8000f86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000f8e:	4828      	ldr	r0, [pc, #160]	; (8001030 <MX_GPIO_Init+0x190>)
 8000f90:	f005 fef2 	bl	8006d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2140      	movs	r1, #64	; 0x40
 8000f98:	4826      	ldr	r0, [pc, #152]	; (8001034 <MX_GPIO_Init+0x194>)
 8000f9a:	f005 feed 	bl	8006d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000f9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fa4:	4b24      	ldr	r3, [pc, #144]	; (8001038 <MX_GPIO_Init+0x198>)
 8000fa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000fac:	f107 031c 	add.w	r3, r7, #28
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4822      	ldr	r0, [pc, #136]	; (800103c <MX_GPIO_Init+0x19c>)
 8000fb4:	f005 fd18 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000fb8:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fca:	f107 031c 	add.w	r3, r7, #28
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4817      	ldr	r0, [pc, #92]	; (8001030 <MX_GPIO_Init+0x190>)
 8000fd2:	f005 fd09 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fd6:	2320      	movs	r3, #32
 8000fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fe2:	f107 031c 	add.w	r3, r7, #28
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4812      	ldr	r0, [pc, #72]	; (8001034 <MX_GPIO_Init+0x194>)
 8000fea:	f005 fcfd 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000fee:	2340      	movs	r3, #64	; 0x40
 8000ff0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	4619      	mov	r1, r3
 8001004:	480b      	ldr	r0, [pc, #44]	; (8001034 <MX_GPIO_Init+0x194>)
 8001006:	f005 fcef 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800100a:	2380      	movs	r3, #128	; 0x80
 800100c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800100e:	2300      	movs	r3, #0
 8001010:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001016:	f107 031c 	add.w	r3, r7, #28
 800101a:	4619      	mov	r1, r3
 800101c:	4805      	ldr	r0, [pc, #20]	; (8001034 <MX_GPIO_Init+0x194>)
 800101e:	f005 fce3 	bl	80069e8 <HAL_GPIO_Init>

}
 8001022:	bf00      	nop
 8001024:	3730      	adds	r7, #48	; 0x30
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	58024400 	.word	0x58024400
 8001030:	58020400 	.word	0x58020400
 8001034:	58021800 	.word	0x58021800
 8001038:	11110000 	.word	0x11110000
 800103c:	58020800 	.word	0x58020800

08001040 <HAL_FDCAN_RxFifo0Callback>:
 if(__HAL_GPIO_EXTI_GET_FLAG(USER_Btn_Pin)){
 LD2_GPIO_Port -> ODR ^= LD2_Pin; // toggle LD2 LED
 }

}*/
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef*hcan, uint32_t RxFifo0ITs){}
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
    if (htim->Instance==TIM17) //check if the interrupt comes from TIM2
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a06      	ldr	r2, [pc, #24]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d105      	bne.n	8001076 <HAL_TIM_PeriodElapsedCallback+0x1e>
        {
    	HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 800106a:	2180      	movs	r1, #128	; 0x80
 800106c:	4805      	ldr	r0, [pc, #20]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800106e:	f005 fe9c 	bl	8006daa <HAL_GPIO_TogglePin>
    	leggi();
 8001072:	f000 f887 	bl	8001184 <leggi>

        }}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40014800 	.word	0x40014800
 8001084:	58020400 	.word	0x58020400

08001088 <scrivi>:
FRESULT scrivi(){
 8001088:	b590      	push	{r4, r7, lr}
 800108a:	b089      	sub	sp, #36	; 0x24
 800108c:	af04      	add	r7, sp, #16
	      /* File  object for USER */
	   /* File system object for USER logical drive */
	//FIL USERFile;     /* File  object for USER */
	char USERPath[4];   /* USER logical drive path */
	uint8_t bytesWrote;
	uint8_t path1[] = "ST.TXT";
 800108e:	4a34      	ldr	r2, [pc, #208]	; (8001160 <scrivi+0xd8>)
 8001090:	463b      	mov	r3, r7
 8001092:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001096:	6018      	str	r0, [r3, #0]
 8001098:	3304      	adds	r3, #4
 800109a:	8019      	strh	r1, [r3, #0]
 800109c:	3302      	adds	r3, #2
 800109e:	0c0a      	lsrs	r2, r1, #16
 80010a0:	701a      	strb	r2, [r3, #0]
	//res = f_mount(&USERFatFs, (TCHAR const*)USERPath, 1);
	//res=f_mount(&myFatFS, USERPath, 1);
	res = f_open(&writeFile, &path1, FA_CREATE_ALWAYS);
 80010a2:	463b      	mov	r3, r7
 80010a4:	2208      	movs	r2, #8
 80010a6:	4619      	mov	r1, r3
 80010a8:	482e      	ldr	r0, [pc, #184]	; (8001164 <scrivi+0xdc>)
 80010aa:	f017 f88f 	bl	80181cc <f_open>
 80010ae:	4603      	mov	r3, r0
 80010b0:	73fb      	strb	r3, [r7, #15]
	res = f_close(&writeFile);
 80010b2:	482c      	ldr	r0, [pc, #176]	; (8001164 <scrivi+0xdc>)
 80010b4:	f017 fffb 	bl	80190ae <f_close>
 80010b8:	4603      	mov	r3, r0
 80010ba:	73fb      	strb	r3, [r7, #15]
	res = f_open(&writeFile, &path1, FA_WRITE | FA_OPEN_ALWAYS);
 80010bc:	463b      	mov	r3, r7
 80010be:	2212      	movs	r2, #18
 80010c0:	4619      	mov	r1, r3
 80010c2:	4828      	ldr	r0, [pc, #160]	; (8001164 <scrivi+0xdc>)
 80010c4:	f017 f882 	bl	80181cc <f_open>
 80010c8:	4603      	mov	r3, r0
 80010ca:	73fb      	strb	r3, [r7, #15]
	if(res==FR_OK) {
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d13b      	bne.n	800114a <scrivi+0xc2>
		f_lseek(&writeFile, indox);
 80010d2:	4b25      	ldr	r3, [pc, #148]	; (8001168 <scrivi+0xe0>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f04f 0400 	mov.w	r4, #0
 80010da:	461a      	mov	r2, r3
 80010dc:	4623      	mov	r3, r4
 80010de:	4821      	ldr	r0, [pc, #132]	; (8001164 <scrivi+0xdc>)
 80010e0:	f018 f80f 	bl	8019102 <f_lseek>

		//res1 = f_write(&writeFile, readBuf, size, &bytesWrote);}
		HAL_RTC_GetTime(&hrtc, &stimeststuctureget, RTC_FORMAT_BIN);
 80010e4:	2200      	movs	r2, #0
 80010e6:	4921      	ldr	r1, [pc, #132]	; (800116c <scrivi+0xe4>)
 80010e8:	4821      	ldr	r0, [pc, #132]	; (8001170 <scrivi+0xe8>)
 80010ea:	f00a f891 	bl	800b210 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &Data, RTC_FORMAT_BIN);
 80010ee:	2200      	movs	r2, #0
 80010f0:	4920      	ldr	r1, [pc, #128]	; (8001174 <scrivi+0xec>)
 80010f2:	481f      	ldr	r0, [pc, #124]	; (8001170 <scrivi+0xe8>)
 80010f4:	f00a f996 	bl	800b424 <HAL_RTC_GetDate>
		Time[0] = stimeststuctureget.Hours;
 80010f8:	4b1c      	ldr	r3, [pc, #112]	; (800116c <scrivi+0xe4>)
 80010fa:	781a      	ldrb	r2, [r3, #0]
 80010fc:	4b1e      	ldr	r3, [pc, #120]	; (8001178 <scrivi+0xf0>)
 80010fe:	701a      	strb	r2, [r3, #0]
		Time[1] = stimeststuctureget.Minutes;
 8001100:	4b1a      	ldr	r3, [pc, #104]	; (800116c <scrivi+0xe4>)
 8001102:	785a      	ldrb	r2, [r3, #1]
 8001104:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <scrivi+0xf0>)
 8001106:	705a      	strb	r2, [r3, #1]
		Time[2] = stimeststuctureget.Seconds;
 8001108:	4b18      	ldr	r3, [pc, #96]	; (800116c <scrivi+0xe4>)
 800110a:	789a      	ldrb	r2, [r3, #2]
 800110c:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <scrivi+0xf0>)
 800110e:	709a      	strb	r2, [r3, #2]

		indox=indox+f_printf(&writeFile,"%d:%d.%d,%d,%d\n",Time[0],Time[1],Time[2],curr,indox);}
 8001110:	4b19      	ldr	r3, [pc, #100]	; (8001178 <scrivi+0xf0>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	4618      	mov	r0, r3
 8001116:	4b18      	ldr	r3, [pc, #96]	; (8001178 <scrivi+0xf0>)
 8001118:	785b      	ldrb	r3, [r3, #1]
 800111a:	461c      	mov	r4, r3
 800111c:	4b16      	ldr	r3, [pc, #88]	; (8001178 <scrivi+0xf0>)
 800111e:	789b      	ldrb	r3, [r3, #2]
 8001120:	4619      	mov	r1, r3
 8001122:	4b16      	ldr	r3, [pc, #88]	; (800117c <scrivi+0xf4>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a10      	ldr	r2, [pc, #64]	; (8001168 <scrivi+0xe0>)
 8001128:	6812      	ldr	r2, [r2, #0]
 800112a:	9202      	str	r2, [sp, #8]
 800112c:	9301      	str	r3, [sp, #4]
 800112e:	9100      	str	r1, [sp, #0]
 8001130:	4623      	mov	r3, r4
 8001132:	4602      	mov	r2, r0
 8001134:	4912      	ldr	r1, [pc, #72]	; (8001180 <scrivi+0xf8>)
 8001136:	480b      	ldr	r0, [pc, #44]	; (8001164 <scrivi+0xdc>)
 8001138:	f018 fb68 	bl	801980c <f_printf>
 800113c:	4603      	mov	r3, r0
 800113e:	461a      	mov	r2, r3
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <scrivi+0xe0>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4413      	add	r3, r2
 8001146:	4a08      	ldr	r2, [pc, #32]	; (8001168 <scrivi+0xe0>)
 8001148:	6013      	str	r3, [r2, #0]
		res = f_close(&writeFile);
 800114a:	4806      	ldr	r0, [pc, #24]	; (8001164 <scrivi+0xdc>)
 800114c:	f017 ffaf 	bl	80190ae <f_close>
 8001150:	4603      	mov	r3, r0
 8001152:	73fb      	strb	r3, [r7, #15]

	return res;
 8001154:	7bfb      	ldrb	r3, [r7, #15]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	bd90      	pop	{r4, r7, pc}
 800115e:	bf00      	nop
 8001160:	0801aaf4 	.word	0x0801aaf4
 8001164:	24001578 	.word	0x24001578
 8001168:	24000274 	.word	0x24000274
 800116c:	24075d40 	.word	0x24075d40
 8001170:	240046a4 	.word	0x240046a4
 8001174:	240046a0 	.word	0x240046a0
 8001178:	24004774 	.word	0x24004774
 800117c:	240025d0 	.word	0x240025d0
 8001180:	0801aae4 	.word	0x0801aae4

08001184 <leggi>:
FRESULT leggi(){
 8001184:	b580      	push	{r7, lr}
 8001186:	f5ad 5d83 	sub.w	sp, sp, #4192	; 0x1060
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
    	FIL readFile;       /* File  object for USER */
    		   /* File system object for USER logical drive */
    		//FIL USERFile;     /* File  object for USER */
    	char USERPath[4];
    	uint8_t bytesWrote;
    	uint8_t pat[] = "current.txt";
 800118e:	4b21      	ldr	r3, [pc, #132]	; (8001214 <leggi+0x90>)
 8001190:	f241 0270 	movw	r2, #4208	; 0x1070
 8001194:	443a      	add	r2, r7
 8001196:	4413      	add	r3, r2
 8001198:	4a1f      	ldr	r2, [pc, #124]	; (8001218 <leggi+0x94>)
 800119a:	ca07      	ldmia	r2, {r0, r1, r2}
 800119c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    	res = f_open(&readFile, &pat, FA_READ);
 80011a0:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <leggi+0x90>)
 80011a2:	f241 0270 	movw	r2, #4208	; 0x1070
 80011a6:	443a      	add	r2, r7
 80011a8:	4413      	add	r3, r2
 80011aa:	f107 0010 	add.w	r0, r7, #16
 80011ae:	2201      	movs	r2, #1
 80011b0:	4619      	mov	r1, r3
 80011b2:	f017 f80b 	bl	80181cc <f_open>
 80011b6:	4603      	mov	r3, r0
 80011b8:	f241 026f 	movw	r2, #4207	; 0x106f
 80011bc:	443a      	add	r2, r7
 80011be:	7013      	strb	r3, [r2, #0]
    	res = f_read(&readFile,readBuff,1, &br);
 80011c0:	f107 0010 	add.w	r0, r7, #16
 80011c4:	4b15      	ldr	r3, [pc, #84]	; (800121c <leggi+0x98>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	4915      	ldr	r1, [pc, #84]	; (8001220 <leggi+0x9c>)
 80011ca:	f017 facf 	bl	801876c <f_read>
 80011ce:	4603      	mov	r3, r0
 80011d0:	f241 026f 	movw	r2, #4207	; 0x106f
 80011d4:	443a      	add	r2, r7
 80011d6:	7013      	strb	r3, [r2, #0]
    	if(readBuff[0]=='1'){flag++;}
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <leggi+0x9c>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b31      	cmp	r3, #49	; 0x31
 80011de:	d105      	bne.n	80011ec <leggi+0x68>
 80011e0:	4b10      	ldr	r3, [pc, #64]	; (8001224 <leggi+0xa0>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	3301      	adds	r3, #1
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <leggi+0xa0>)
 80011ea:	701a      	strb	r2, [r3, #0]
    	scrivi();
 80011ec:	f7ff ff4c 	bl	8001088 <scrivi>
    	res = f_close(&readFile);
 80011f0:	f107 0310 	add.w	r3, r7, #16
 80011f4:	4618      	mov	r0, r3
 80011f6:	f017 ff5a 	bl	80190ae <f_close>
 80011fa:	4603      	mov	r3, r0
 80011fc:	f241 026f 	movw	r2, #4207	; 0x106f
 8001200:	443a      	add	r2, r7
 8001202:	7013      	strb	r3, [r2, #0]





    	}
 8001204:	bf00      	nop
 8001206:	4618      	mov	r0, r3
 8001208:	f507 5783 	add.w	r7, r7, #4192	; 0x1060
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	ffffef90 	.word	0xffffef90
 8001218:	0801aafc 	.word	0x0801aafc
 800121c:	240014fc 	.word	0x240014fc
 8001220:	240013f8 	.word	0x240013f8
 8001224:	24000278 	.word	0x24000278

08001228 <scrivi_speed>:
FRESULT scrivi_speed(){
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
		/*HAL_RTC_GetTime(&hrtc, &stimeststuctureget, RTC_FORMAT_BIN);
		HAL_RTC_GetDate(&hrtc, &Data, RTC_FORMAT_BIN);
		Time[0] = stimeststuctureget.Hours;
		Time[1] = stimeststuctureget.Minutes;
		Time[2] = stimeststuctureget.Seconds;*/
		res = f_write(&writeFile,analogDmaData,ADC_CONVERTED_DATA_BUFFER_SIZE, &br);
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <scrivi_speed+0x20>)
 8001230:	4a06      	ldr	r2, [pc, #24]	; (800124c <scrivi_speed+0x24>)
 8001232:	4907      	ldr	r1, [pc, #28]	; (8001250 <scrivi_speed+0x28>)
 8001234:	4807      	ldr	r0, [pc, #28]	; (8001254 <scrivi_speed+0x2c>)
 8001236:	f017 fc2e 	bl	8018a96 <f_write>
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
	    //f_printf(&writeFile,"%d%x\n",Time[2],analogDmaData[0]);



	return res;
 800123e:	79fb      	ldrb	r3, [r7, #7]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	240014fc 	.word	0x240014fc
 800124c:	00038270 	.word	0x00038270
 8001250:	24004778 	.word	0x24004778
 8001254:	24001578 	.word	0x24001578

08001258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126e:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <HAL_MspInit+0x30>)
 8001270:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001274:	4a08      	ldr	r2, [pc, #32]	; (8001298 <HAL_MspInit+0x30>)
 8001276:	f043 0302 	orr.w	r3, r3, #2
 800127a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_MspInit+0x30>)
 8001280:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	58024400 	.word	0x58024400

0800129c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a30      	ldr	r2, [pc, #192]	; (800137c <HAL_ADC_MspInit+0xe0>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d159      	bne.n	8001372 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80012be:	4b30      	ldr	r3, [pc, #192]	; (8001380 <HAL_ADC_MspInit+0xe4>)
 80012c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c4:	4a2e      	ldr	r2, [pc, #184]	; (8001380 <HAL_ADC_MspInit+0xe4>)
 80012c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ce:	4b2c      	ldr	r3, [pc, #176]	; (8001380 <HAL_ADC_MspInit+0xe4>)
 80012d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012dc:	4b28      	ldr	r3, [pc, #160]	; (8001380 <HAL_ADC_MspInit+0xe4>)
 80012de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e2:	4a27      	ldr	r2, [pc, #156]	; (8001380 <HAL_ADC_MspInit+0xe4>)
 80012e4:	f043 0320 	orr.w	r3, r3, #32
 80012e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ec:	4b24      	ldr	r3, [pc, #144]	; (8001380 <HAL_ADC_MspInit+0xe4>)
 80012ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f2:	f003 0320 	and.w	r3, r3, #32
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration    
    PF3     ------> ADC3_INP5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012fa:	2308      	movs	r3, #8
 80012fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012fe:	2303      	movs	r3, #3
 8001300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	481d      	ldr	r0, [pc, #116]	; (8001384 <HAL_ADC_MspInit+0xe8>)
 800130e:	f005 fb6b 	bl	80069e8 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream0;
 8001312:	4b1d      	ldr	r3, [pc, #116]	; (8001388 <HAL_ADC_MspInit+0xec>)
 8001314:	4a1d      	ldr	r2, [pc, #116]	; (800138c <HAL_ADC_MspInit+0xf0>)
 8001316:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001318:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <HAL_ADC_MspInit+0xec>)
 800131a:	2273      	movs	r2, #115	; 0x73
 800131c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800131e:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <HAL_ADC_MspInit+0xec>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001324:	4b18      	ldr	r3, [pc, #96]	; (8001388 <HAL_ADC_MspInit+0xec>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800132a:	4b17      	ldr	r3, [pc, #92]	; (8001388 <HAL_ADC_MspInit+0xec>)
 800132c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001330:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <HAL_ADC_MspInit+0xec>)
 8001334:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001338:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800133a:	4b13      	ldr	r3, [pc, #76]	; (8001388 <HAL_ADC_MspInit+0xec>)
 800133c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001340:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001342:	4b11      	ldr	r3, [pc, #68]	; (8001388 <HAL_ADC_MspInit+0xec>)
 8001344:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001348:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800134a:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <HAL_ADC_MspInit+0xec>)
 800134c:	2200      	movs	r2, #0
 800134e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001350:	4b0d      	ldr	r3, [pc, #52]	; (8001388 <HAL_ADC_MspInit+0xec>)
 8001352:	2200      	movs	r2, #0
 8001354:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001356:	480c      	ldr	r0, [pc, #48]	; (8001388 <HAL_ADC_MspInit+0xec>)
 8001358:	f001 ffe6 	bl	8003328 <HAL_DMA_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_ADC_MspInit+0xca>
    {
      Error_Handler();
 8001362:	f7ff ff79 	bl	8001258 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a07      	ldr	r2, [pc, #28]	; (8001388 <HAL_ADC_MspInit+0xec>)
 800136a:	64da      	str	r2, [r3, #76]	; 0x4c
 800136c:	4a06      	ldr	r2, [pc, #24]	; (8001388 <HAL_ADC_MspInit+0xec>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001372:	bf00      	nop
 8001374:	3728      	adds	r7, #40	; 0x28
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	58026000 	.word	0x58026000
 8001380:	58024400 	.word	0x58024400
 8001384:	58021400 	.word	0x58021400
 8001388:	24001500 	.word	0x24001500
 800138c:	40020010 	.word	0x40020010

08001390 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08e      	sub	sp, #56	; 0x38
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a59      	ldr	r2, [pc, #356]	; (8001514 <HAL_ETH_MspInit+0x184>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	f040 80ab 	bne.w	800150a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80013b4:	4b58      	ldr	r3, [pc, #352]	; (8001518 <HAL_ETH_MspInit+0x188>)
 80013b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013ba:	4a57      	ldr	r2, [pc, #348]	; (8001518 <HAL_ETH_MspInit+0x188>)
 80013bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013c0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013c4:	4b54      	ldr	r3, [pc, #336]	; (8001518 <HAL_ETH_MspInit+0x188>)
 80013c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013ce:	623b      	str	r3, [r7, #32]
 80013d0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80013d2:	4b51      	ldr	r3, [pc, #324]	; (8001518 <HAL_ETH_MspInit+0x188>)
 80013d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013d8:	4a4f      	ldr	r2, [pc, #316]	; (8001518 <HAL_ETH_MspInit+0x188>)
 80013da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013de:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013e2:	4b4d      	ldr	r3, [pc, #308]	; (8001518 <HAL_ETH_MspInit+0x188>)
 80013e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ec:	61fb      	str	r3, [r7, #28]
 80013ee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80013f0:	4b49      	ldr	r3, [pc, #292]	; (8001518 <HAL_ETH_MspInit+0x188>)
 80013f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013f6:	4a48      	ldr	r2, [pc, #288]	; (8001518 <HAL_ETH_MspInit+0x188>)
 80013f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013fc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001400:	4b45      	ldr	r3, [pc, #276]	; (8001518 <HAL_ETH_MspInit+0x188>)
 8001402:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140a:	61bb      	str	r3, [r7, #24]
 800140c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800140e:	4b42      	ldr	r3, [pc, #264]	; (8001518 <HAL_ETH_MspInit+0x188>)
 8001410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001414:	4a40      	ldr	r2, [pc, #256]	; (8001518 <HAL_ETH_MspInit+0x188>)
 8001416:	f043 0304 	orr.w	r3, r3, #4
 800141a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800141e:	4b3e      	ldr	r3, [pc, #248]	; (8001518 <HAL_ETH_MspInit+0x188>)
 8001420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001424:	f003 0304 	and.w	r3, r3, #4
 8001428:	617b      	str	r3, [r7, #20]
 800142a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142c:	4b3a      	ldr	r3, [pc, #232]	; (8001518 <HAL_ETH_MspInit+0x188>)
 800142e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001432:	4a39      	ldr	r2, [pc, #228]	; (8001518 <HAL_ETH_MspInit+0x188>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800143c:	4b36      	ldr	r3, [pc, #216]	; (8001518 <HAL_ETH_MspInit+0x188>)
 800143e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144a:	4b33      	ldr	r3, [pc, #204]	; (8001518 <HAL_ETH_MspInit+0x188>)
 800144c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001450:	4a31      	ldr	r2, [pc, #196]	; (8001518 <HAL_ETH_MspInit+0x188>)
 8001452:	f043 0302 	orr.w	r3, r3, #2
 8001456:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800145a:	4b2f      	ldr	r3, [pc, #188]	; (8001518 <HAL_ETH_MspInit+0x188>)
 800145c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001468:	4b2b      	ldr	r3, [pc, #172]	; (8001518 <HAL_ETH_MspInit+0x188>)
 800146a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146e:	4a2a      	ldr	r2, [pc, #168]	; (8001518 <HAL_ETH_MspInit+0x188>)
 8001470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001474:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001478:	4b27      	ldr	r3, [pc, #156]	; (8001518 <HAL_ETH_MspInit+0x188>)
 800147a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001486:	2332      	movs	r3, #50	; 0x32
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001496:	230b      	movs	r3, #11
 8001498:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800149a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149e:	4619      	mov	r1, r3
 80014a0:	481e      	ldr	r0, [pc, #120]	; (800151c <HAL_ETH_MspInit+0x18c>)
 80014a2:	f005 faa1 	bl	80069e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80014a6:	2386      	movs	r3, #134	; 0x86
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	2300      	movs	r3, #0
 80014b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014b6:	230b      	movs	r3, #11
 80014b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014be:	4619      	mov	r1, r3
 80014c0:	4817      	ldr	r0, [pc, #92]	; (8001520 <HAL_ETH_MspInit+0x190>)
 80014c2:	f005 fa91 	bl	80069e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80014c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014d8:	230b      	movs	r3, #11
 80014da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80014dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e0:	4619      	mov	r1, r3
 80014e2:	4810      	ldr	r0, [pc, #64]	; (8001524 <HAL_ETH_MspInit+0x194>)
 80014e4:	f005 fa80 	bl	80069e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80014e8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014fa:	230b      	movs	r3, #11
 80014fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001502:	4619      	mov	r1, r3
 8001504:	4808      	ldr	r0, [pc, #32]	; (8001528 <HAL_ETH_MspInit+0x198>)
 8001506:	f005 fa6f 	bl	80069e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800150a:	bf00      	nop
 800150c:	3738      	adds	r7, #56	; 0x38
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40028000 	.word	0x40028000
 8001518:	58024400 	.word	0x58024400
 800151c:	58020800 	.word	0x58020800
 8001520:	58020000 	.word	0x58020000
 8001524:	58020400 	.word	0x58020400
 8001528:	58021800 	.word	0x58021800

0800152c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08a      	sub	sp, #40	; 0x28
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a1a      	ldr	r2, [pc, #104]	; (80015b4 <HAL_FDCAN_MspInit+0x88>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d12d      	bne.n	80015aa <HAL_FDCAN_MspInit+0x7e>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800154e:	4b1a      	ldr	r3, [pc, #104]	; (80015b8 <HAL_FDCAN_MspInit+0x8c>)
 8001550:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001554:	4a18      	ldr	r2, [pc, #96]	; (80015b8 <HAL_FDCAN_MspInit+0x8c>)
 8001556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800155a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800155e:	4b16      	ldr	r3, [pc, #88]	; (80015b8 <HAL_FDCAN_MspInit+0x8c>)
 8001560:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_FDCAN_MspInit+0x8c>)
 800156e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001572:	4a11      	ldr	r2, [pc, #68]	; (80015b8 <HAL_FDCAN_MspInit+0x8c>)
 8001574:	f043 0308 	orr.w	r3, r3, #8
 8001578:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800157c:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <HAL_FDCAN_MspInit+0x8c>)
 800157e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001582:	f003 0308 	and.w	r3, r3, #8
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration    
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800158a:	2303      	movs	r3, #3
 800158c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800159a:	2309      	movs	r3, #9
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	4619      	mov	r1, r3
 80015a4:	4805      	ldr	r0, [pc, #20]	; (80015bc <HAL_FDCAN_MspInit+0x90>)
 80015a6:	f005 fa1f 	bl	80069e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80015aa:	bf00      	nop
 80015ac:	3728      	adds	r7, #40	; 0x28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	4000a000 	.word	0x4000a000
 80015b8:	58024400 	.word	0x58024400
 80015bc:	58020c00 	.word	0x58020c00

080015c0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a07      	ldr	r2, [pc, #28]	; (80015ec <HAL_RTC_MspInit+0x2c>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d105      	bne.n	80015de <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80015d2:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <HAL_RTC_MspInit+0x30>)
 80015d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d6:	4a06      	ldr	r2, [pc, #24]	; (80015f0 <HAL_RTC_MspInit+0x30>)
 80015d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015dc:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	58004000 	.word	0x58004000
 80015f0:	58024400 	.word	0x58024400

080015f4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	; 0x28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a32      	ldr	r2, [pc, #200]	; (80016dc <HAL_SD_MspInit+0xe8>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d15e      	bne.n	80016d4 <HAL_SD_MspInit+0xe0>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001616:	4b32      	ldr	r3, [pc, #200]	; (80016e0 <HAL_SD_MspInit+0xec>)
 8001618:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800161c:	4a30      	ldr	r2, [pc, #192]	; (80016e0 <HAL_SD_MspInit+0xec>)
 800161e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001622:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001626:	4b2e      	ldr	r3, [pc, #184]	; (80016e0 <HAL_SD_MspInit+0xec>)
 8001628:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800162c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001634:	4b2a      	ldr	r3, [pc, #168]	; (80016e0 <HAL_SD_MspInit+0xec>)
 8001636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800163a:	4a29      	ldr	r2, [pc, #164]	; (80016e0 <HAL_SD_MspInit+0xec>)
 800163c:	f043 0304 	orr.w	r3, r3, #4
 8001640:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001644:	4b26      	ldr	r3, [pc, #152]	; (80016e0 <HAL_SD_MspInit+0xec>)
 8001646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800164a:	f003 0304 	and.w	r3, r3, #4
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001652:	4b23      	ldr	r3, [pc, #140]	; (80016e0 <HAL_SD_MspInit+0xec>)
 8001654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001658:	4a21      	ldr	r2, [pc, #132]	; (80016e0 <HAL_SD_MspInit+0xec>)
 800165a:	f043 0308 	orr.w	r3, r3, #8
 800165e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001662:	4b1f      	ldr	r3, [pc, #124]	; (80016e0 <HAL_SD_MspInit+0xec>)
 8001664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001668:	f003 0308 	and.w	r3, r3, #8
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration    
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001670:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800167a:	2301      	movs	r3, #1
 800167c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167e:	2303      	movs	r3, #3
 8001680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001682:	230c      	movs	r3, #12
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	4619      	mov	r1, r3
 800168c:	4815      	ldr	r0, [pc, #84]	; (80016e4 <HAL_SD_MspInit+0xf0>)
 800168e:	f005 f9ab 	bl	80069e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001698:	2302      	movs	r3, #2
 800169a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a0:	2303      	movs	r3, #3
 80016a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80016a4:	230c      	movs	r3, #12
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	4619      	mov	r1, r3
 80016ae:	480d      	ldr	r0, [pc, #52]	; (80016e4 <HAL_SD_MspInit+0xf0>)
 80016b0:	f005 f99a 	bl	80069e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016b4:	2304      	movs	r3, #4
 80016b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016bc:	2301      	movs	r3, #1
 80016be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c0:	2303      	movs	r3, #3
 80016c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80016c4:	230c      	movs	r3, #12
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4619      	mov	r1, r3
 80016ce:	4806      	ldr	r0, [pc, #24]	; (80016e8 <HAL_SD_MspInit+0xf4>)
 80016d0:	f005 f98a 	bl	80069e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80016d4:	bf00      	nop
 80016d6:	3728      	adds	r7, #40	; 0x28
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	52007000 	.word	0x52007000
 80016e0:	58024400 	.word	0x58024400
 80016e4:	58020800 	.word	0x58020800
 80016e8:	58020c00 	.word	0x58020c00

080016ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a16      	ldr	r2, [pc, #88]	; (8001754 <HAL_TIM_Base_MspInit+0x68>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d10f      	bne.n	800171e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016fe:	4b16      	ldr	r3, [pc, #88]	; (8001758 <HAL_TIM_Base_MspInit+0x6c>)
 8001700:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001704:	4a14      	ldr	r2, [pc, #80]	; (8001758 <HAL_TIM_Base_MspInit+0x6c>)
 8001706:	f043 0304 	orr.w	r3, r3, #4
 800170a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800170e:	4b12      	ldr	r3, [pc, #72]	; (8001758 <HAL_TIM_Base_MspInit+0x6c>)
 8001710:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800171c:	e013      	b.n	8001746 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM17)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a0e      	ldr	r2, [pc, #56]	; (800175c <HAL_TIM_Base_MspInit+0x70>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d10e      	bne.n	8001746 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <HAL_TIM_Base_MspInit+0x6c>)
 800172a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800172e:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <HAL_TIM_Base_MspInit+0x6c>)
 8001730:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001734:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001738:	4b07      	ldr	r3, [pc, #28]	; (8001758 <HAL_TIM_Base_MspInit+0x6c>)
 800173a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800173e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
}
 8001746:	bf00      	nop
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40000800 	.word	0x40000800
 8001758:	58024400 	.word	0x58024400
 800175c:	40014800 	.word	0x40014800

08001760 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	; 0x28
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a1a      	ldr	r2, [pc, #104]	; (80017e8 <HAL_UART_MspInit+0x88>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d12e      	bne.n	80017e0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001782:	4b1a      	ldr	r3, [pc, #104]	; (80017ec <HAL_UART_MspInit+0x8c>)
 8001784:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001788:	4a18      	ldr	r2, [pc, #96]	; (80017ec <HAL_UART_MspInit+0x8c>)
 800178a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800178e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001792:	4b16      	ldr	r3, [pc, #88]	; (80017ec <HAL_UART_MspInit+0x8c>)
 8001794:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001798:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017a0:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_UART_MspInit+0x8c>)
 80017a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a6:	4a11      	ldr	r2, [pc, #68]	; (80017ec <HAL_UART_MspInit+0x8c>)
 80017a8:	f043 0308 	orr.w	r3, r3, #8
 80017ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017b0:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <HAL_UART_MspInit+0x8c>)
 80017b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b6:	f003 0308 	and.w	r3, r3, #8
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80017be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	2302      	movs	r3, #2
 80017c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017cc:	2300      	movs	r3, #0
 80017ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017d0:	2307      	movs	r3, #7
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	4619      	mov	r1, r3
 80017da:	4805      	ldr	r0, [pc, #20]	; (80017f0 <HAL_UART_MspInit+0x90>)
 80017dc:	f005 f904 	bl	80069e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017e0:	bf00      	nop
 80017e2:	3728      	adds	r7, #40	; 0x28
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40004800 	.word	0x40004800
 80017ec:	58024400 	.word	0x58024400
 80017f0:	58020c00 	.word	0x58020c00

080017f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001806:	e7fe      	b.n	8001806 <HardFault_Handler+0x4>

08001808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800180c:	e7fe      	b.n	800180c <MemManage_Handler+0x4>

0800180e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001812:	e7fe      	b.n	8001812 <BusFault_Handler+0x4>

08001814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001818:	e7fe      	b.n	8001818 <UsageFault_Handler+0x4>

0800181a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001848:	f000 f966 	bl	8001b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}

08001850 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <DMA1_Stream0_IRQHandler+0x10>)
 8001856:	f002 fb2d 	bl	8003eb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	24001500 	.word	0x24001500

08001864 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <FDCAN1_IT0_IRQHandler+0x10>)
 800186a:	f004 fc2d 	bl	80060c8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	240046c8 	.word	0x240046c8

08001878 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800187c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001880:	f005 faae 	bl	8006de0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}

08001888 <FDCAN_CAL_IRQHandler>:

/**
  * @brief This function handles FDCAN calibration unit interrupt.
  */
void FDCAN_CAL_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN_CAL_IRQn 0 */

  /* USER CODE END FDCAN_CAL_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800188c:	4802      	ldr	r0, [pc, #8]	; (8001898 <FDCAN_CAL_IRQHandler+0x10>)
 800188e:	f004 fc1b 	bl	80060c8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN_CAL_IRQn 1 */

  /* USER CODE END FDCAN_CAL_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	240046c8 	.word	0x240046c8

0800189c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80018a0:	4802      	ldr	r0, [pc, #8]	; (80018ac <OTG_FS_IRQHandler+0x10>)
 80018a2:	f005 fc49 	bl	8007138 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	240782b8 	.word	0x240782b8

080018b0 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80018b4:	4802      	ldr	r0, [pc, #8]	; (80018c0 <TIM17_IRQHandler+0x10>)
 80018b6:	f00b fac4 	bl	800ce42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	240014bc 	.word	0x240014bc

080018c4 <_sbrk>:
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <_sbrk+0x50>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d102      	bne.n	80018da <_sbrk+0x16>
 80018d4:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <_sbrk+0x50>)
 80018d6:	4a10      	ldr	r2, [pc, #64]	; (8001918 <_sbrk+0x54>)
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <_sbrk+0x50>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <_sbrk+0x50>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4413      	add	r3, r2
 80018e8:	466a      	mov	r2, sp
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d907      	bls.n	80018fe <_sbrk+0x3a>
 80018ee:	f018 ffe5 	bl	801a8bc <__errno>
 80018f2:	4602      	mov	r2, r0
 80018f4:	230c      	movs	r3, #12
 80018f6:	6013      	str	r3, [r2, #0]
 80018f8:	f04f 33ff 	mov.w	r3, #4294967295
 80018fc:	e006      	b.n	800190c <_sbrk+0x48>
 80018fe:	4b05      	ldr	r3, [pc, #20]	; (8001914 <_sbrk+0x50>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4413      	add	r3, r2
 8001906:	4a03      	ldr	r2, [pc, #12]	; (8001914 <_sbrk+0x50>)
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	4618      	mov	r0, r3
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	2400027c 	.word	0x2400027c
 8001918:	240786c8 	.word	0x240786c8

0800191c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001920:	4b29      	ldr	r3, [pc, #164]	; (80019c8 <SystemInit+0xac>)
 8001922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001926:	4a28      	ldr	r2, [pc, #160]	; (80019c8 <SystemInit+0xac>)
 8001928:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800192c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001930:	4b26      	ldr	r3, [pc, #152]	; (80019cc <SystemInit+0xb0>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a25      	ldr	r2, [pc, #148]	; (80019cc <SystemInit+0xb0>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800193c:	4b23      	ldr	r3, [pc, #140]	; (80019cc <SystemInit+0xb0>)
 800193e:	2200      	movs	r2, #0
 8001940:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001942:	4b22      	ldr	r3, [pc, #136]	; (80019cc <SystemInit+0xb0>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	4921      	ldr	r1, [pc, #132]	; (80019cc <SystemInit+0xb0>)
 8001948:	4b21      	ldr	r3, [pc, #132]	; (80019d0 <SystemInit+0xb4>)
 800194a:	4013      	ands	r3, r2
 800194c:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800194e:	4b1f      	ldr	r3, [pc, #124]	; (80019cc <SystemInit+0xb0>)
 8001950:	2200      	movs	r2, #0
 8001952:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001954:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <SystemInit+0xb0>)
 8001956:	2200      	movs	r2, #0
 8001958:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800195a:	4b1c      	ldr	r3, [pc, #112]	; (80019cc <SystemInit+0xb0>)
 800195c:	2200      	movs	r2, #0
 800195e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001960:	4b1a      	ldr	r3, [pc, #104]	; (80019cc <SystemInit+0xb0>)
 8001962:	2200      	movs	r2, #0
 8001964:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8001966:	4b19      	ldr	r3, [pc, #100]	; (80019cc <SystemInit+0xb0>)
 8001968:	2200      	movs	r2, #0
 800196a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800196c:	4b17      	ldr	r3, [pc, #92]	; (80019cc <SystemInit+0xb0>)
 800196e:	2200      	movs	r2, #0
 8001970:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001972:	4b16      	ldr	r3, [pc, #88]	; (80019cc <SystemInit+0xb0>)
 8001974:	2200      	movs	r2, #0
 8001976:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001978:	4b14      	ldr	r3, [pc, #80]	; (80019cc <SystemInit+0xb0>)
 800197a:	2200      	movs	r2, #0
 800197c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800197e:	4b13      	ldr	r3, [pc, #76]	; (80019cc <SystemInit+0xb0>)
 8001980:	2200      	movs	r2, #0
 8001982:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001984:	4b11      	ldr	r3, [pc, #68]	; (80019cc <SystemInit+0xb0>)
 8001986:	2200      	movs	r2, #0
 8001988:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800198a:	4b10      	ldr	r3, [pc, #64]	; (80019cc <SystemInit+0xb0>)
 800198c:	2200      	movs	r2, #0
 800198e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001990:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <SystemInit+0xb0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0d      	ldr	r2, [pc, #52]	; (80019cc <SystemInit+0xb0>)
 8001996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800199a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <SystemInit+0xb0>)
 800199e:	2200      	movs	r2, #0
 80019a0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80019a2:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <SystemInit+0xb8>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <SystemInit+0xbc>)
 80019a8:	4013      	ands	r3, r2
 80019aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019ae:	d202      	bcs.n	80019b6 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80019b0:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <SystemInit+0xc0>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019b6:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <SystemInit+0xac>)
 80019b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019bc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80019be:	bf00      	nop
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000ed00 	.word	0xe000ed00
 80019cc:	58024400 	.word	0x58024400
 80019d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80019d4:	5c001000 	.word	0x5c001000
 80019d8:	ffff0000 	.word	0xffff0000
 80019dc:	51008108 	.word	0x51008108

080019e0 <Reset_Handler>:
 80019e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a18 <LoopFillZerobss+0x14>
 80019e4:	2100      	movs	r1, #0
 80019e6:	e003      	b.n	80019f0 <LoopCopyDataInit>

080019e8 <CopyDataInit>:
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <LoopFillZerobss+0x18>)
 80019ea:	585b      	ldr	r3, [r3, r1]
 80019ec:	5043      	str	r3, [r0, r1]
 80019ee:	3104      	adds	r1, #4

080019f0 <LoopCopyDataInit>:
 80019f0:	480b      	ldr	r0, [pc, #44]	; (8001a20 <LoopFillZerobss+0x1c>)
 80019f2:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <LoopFillZerobss+0x20>)
 80019f4:	1842      	adds	r2, r0, r1
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d3f6      	bcc.n	80019e8 <CopyDataInit>
 80019fa:	4a0b      	ldr	r2, [pc, #44]	; (8001a28 <LoopFillZerobss+0x24>)
 80019fc:	e002      	b.n	8001a04 <LoopFillZerobss>

080019fe <FillZerobss>:
 80019fe:	2300      	movs	r3, #0
 8001a00:	f842 3b04 	str.w	r3, [r2], #4

08001a04 <LoopFillZerobss>:
 8001a04:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <LoopFillZerobss+0x28>)
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d3f9      	bcc.n	80019fe <FillZerobss>
 8001a0a:	f7ff ff87 	bl	800191c <SystemInit>
 8001a0e:	f018 ff5b 	bl	801a8c8 <__libc_init_array>
 8001a12:	f7fe fde1 	bl	80005d8 <main>
 8001a16:	4770      	bx	lr
 8001a18:	24080000 	.word	0x24080000
 8001a1c:	0801b0b4 	.word	0x0801b0b4
 8001a20:	24000000 	.word	0x24000000
 8001a24:	24000194 	.word	0x24000194
 8001a28:	24000258 	.word	0x24000258
 8001a2c:	240786c4 	.word	0x240786c4

08001a30 <ADC3_IRQHandler>:
 8001a30:	e7fe      	b.n	8001a30 <ADC3_IRQHandler>
	...

08001a34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a3a:	2003      	movs	r0, #3
 8001a3c:	f001 fc34 	bl	80032a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a40:	f007 fa04 	bl	8008e4c <HAL_RCC_GetSysClockFreq>
 8001a44:	4601      	mov	r1, r0
 8001a46:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <HAL_Init+0x68>)
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	0a1b      	lsrs	r3, r3, #8
 8001a4c:	f003 030f 	and.w	r3, r3, #15
 8001a50:	4a13      	ldr	r2, [pc, #76]	; (8001aa0 <HAL_Init+0x6c>)
 8001a52:	5cd3      	ldrb	r3, [r2, r3]
 8001a54:	f003 031f 	and.w	r3, r3, #31
 8001a58:	fa21 f303 	lsr.w	r3, r1, r3
 8001a5c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a5e:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <HAL_Init+0x68>)
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	4a0e      	ldr	r2, [pc, #56]	; (8001aa0 <HAL_Init+0x6c>)
 8001a68:	5cd3      	ldrb	r3, [r2, r3]
 8001a6a:	f003 031f 	and.w	r3, r3, #31
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	fa22 f303 	lsr.w	r3, r2, r3
 8001a74:	4a0b      	ldr	r2, [pc, #44]	; (8001aa4 <HAL_Init+0x70>)
 8001a76:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a78:	4a0b      	ldr	r2, [pc, #44]	; (8001aa8 <HAL_Init+0x74>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f000 f814 	bl	8001aac <HAL_InitTick>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e002      	b.n	8001a94 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a8e:	f7ff fbeb 	bl	8001268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	58024400 	.word	0x58024400
 8001aa0:	0801abfc 	.word	0x0801abfc
 8001aa4:	24000010 	.word	0x24000010
 8001aa8:	2400000c 	.word	0x2400000c

08001aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001ab4:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <HAL_InitTick+0x60>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e021      	b.n	8001b04 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ac0:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <HAL_InitTick+0x64>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <HAL_InitTick+0x60>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f001 fc19 	bl	800330e <HAL_SYSTICK_Config>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e00e      	b.n	8001b04 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b0f      	cmp	r3, #15
 8001aea:	d80a      	bhi.n	8001b02 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aec:	2200      	movs	r2, #0
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	f04f 30ff 	mov.w	r0, #4294967295
 8001af4:	f001 fbe3 	bl	80032be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af8:	4a06      	ldr	r2, [pc, #24]	; (8001b14 <HAL_InitTick+0x68>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	e000      	b.n	8001b04 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	24000018 	.word	0x24000018
 8001b10:	2400000c 	.word	0x2400000c
 8001b14:	24000014 	.word	0x24000014

08001b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_IncTick+0x20>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_IncTick+0x24>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <HAL_IncTick+0x24>)
 8001b2a:	6013      	str	r3, [r2, #0]
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	24000018 	.word	0x24000018
 8001b3c:	24075d54 	.word	0x24075d54

08001b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return uwTick;
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <HAL_GetTick+0x14>)
 8001b46:	681b      	ldr	r3, [r3, #0]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	24075d54 	.word	0x24075d54

08001b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b60:	f7ff ffee 	bl	8001b40 <HAL_GetTick>
 8001b64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b70:	d005      	beq.n	8001b7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b72:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <HAL_Delay+0x40>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	461a      	mov	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b7e:	bf00      	nop
 8001b80:	f7ff ffde 	bl	8001b40 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d8f7      	bhi.n	8001b80 <HAL_Delay+0x28>
  {
  }
}
 8001b90:	bf00      	nop
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	24000018 	.word	0x24000018

08001b9c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ba0:	4b03      	ldr	r3, [pc, #12]	; (8001bb0 <HAL_GetREVID+0x14>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	0c1b      	lsrs	r3, r3, #16
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	5c001000 	.word	0x5c001000

08001bb4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001bc4:	4904      	ldr	r1, [pc, #16]	; (8001bd8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	604b      	str	r3, [r1, #4]
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	58000400 	.word	0x58000400

08001bdc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	609a      	str	r2, [r3, #8]
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c44:	b490      	push	{r4, r7}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
 8001c50:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	3360      	adds	r3, #96	; 0x60
 8001c56:	461a      	mov	r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001c60:	6823      	ldr	r3, [r4, #0]
 8001c62:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	430b      	orrs	r3, r1
 8001c70:	4313      	orrs	r3, r2
 8001c72:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c74:	bf00      	nop
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc90      	pop	{r4, r7}
 8001c7c:	4770      	bx	lr

08001c7e <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b085      	sub	sp, #20
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	60f8      	str	r0, [r7, #12]
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	f003 031f 	and.w	r3, r3, #31
 8001c98:	6879      	ldr	r1, [r7, #4]
 8001c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
}
 8001ca4:	bf00      	nop
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001cb0:	b490      	push	{r4, r7}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	3360      	adds	r3, #96	; 0x60
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001cca:	6823      	ldr	r3, [r4, #0]
 8001ccc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	6023      	str	r3, [r4, #0]
}
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc90      	pop	{r4, r7}
 8001cde:	4770      	bx	lr

08001ce0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e000      	b.n	8001cfa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d06:	b490      	push	{r4, r7}
 8001d08:	b084      	sub	sp, #16
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	60f8      	str	r0, [r7, #12]
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	3330      	adds	r3, #48	; 0x30
 8001d16:	461a      	mov	r2, r3
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	0a1b      	lsrs	r3, r3, #8
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	f003 030c 	and.w	r3, r3, #12
 8001d22:	4413      	add	r3, r2
 8001d24:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001d26:	6822      	ldr	r2, [r4, #0]
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	f003 031f 	and.w	r3, r3, #31
 8001d2e:	211f      	movs	r1, #31
 8001d30:	fa01 f303 	lsl.w	r3, r1, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	401a      	ands	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	0e9b      	lsrs	r3, r3, #26
 8001d3c:	f003 011f 	and.w	r1, r3, #31
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	f003 031f 	and.w	r3, r3, #31
 8001d46:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d4e:	bf00      	nop
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc90      	pop	{r4, r7}
 8001d56:	4770      	bx	lr

08001d58 <LL_ADC_REG_SetDataTransferMode>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  *         @arg @ref LL_ADC_REG_DFSDM_TRANSFER
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	f023 0203 	bic.w	r2, r3, #3
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	60da      	str	r2, [r3, #12]
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d7e:	b490      	push	{r4, r7}
 8001d80:	b084      	sub	sp, #16
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	60f8      	str	r0, [r7, #12]
 8001d86:	60b9      	str	r1, [r7, #8]
 8001d88:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	3314      	adds	r3, #20
 8001d8e:	461a      	mov	r2, r3
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	0e5b      	lsrs	r3, r3, #25
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	f003 0304 	and.w	r3, r3, #4
 8001d9a:	4413      	add	r3, r2
 8001d9c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001d9e:	6822      	ldr	r2, [r4, #0]
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	0d1b      	lsrs	r3, r3, #20
 8001da4:	f003 031f 	and.w	r3, r3, #31
 8001da8:	2107      	movs	r1, #7
 8001daa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	401a      	ands	r2, r3
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	0d1b      	lsrs	r3, r3, #20
 8001db6:	f003 031f 	and.w	r3, r3, #31
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001dc4:	bf00      	nop
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc90      	pop	{r4, r7}
 8001dcc:	4770      	bx	lr
	...

08001dd0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001de8:	43db      	mvns	r3, r3
 8001dea:	401a      	ands	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f003 0318 	and.w	r3, r3, #24
 8001df2:	4908      	ldr	r1, [pc, #32]	; (8001e14 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001df4:	40d9      	lsrs	r1, r3
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	400b      	ands	r3, r1
 8001dfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e06:	bf00      	nop
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	000fffff 	.word	0x000fffff

08001e18 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 031f 	and.w	r3, r3, #31
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001e42:	4013      	ands	r3, r2
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6093      	str	r3, [r2, #8]
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	5fffffc0 	.word	0x5fffffc0

08001e58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e6c:	d101      	bne.n	8001e72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <LL_ADC_EnableInternalRegulator+0x24>)
 8001e8e:	4013      	ands	r3, r2
 8001e90:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	6fffffc0 	.word	0x6fffffc0

08001ea8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ebc:	d101      	bne.n	8001ec2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e000      	b.n	8001ec4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <LL_ADC_Enable+0x24>)
 8001ede:	4013      	ands	r3, r2
 8001ee0:	f043 0201 	orr.w	r2, r3, #1
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	7fffffc0 	.word	0x7fffffc0

08001ef8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <LL_ADC_Disable+0x24>)
 8001f06:	4013      	ands	r3, r2
 8001f08:	f043 0202 	orr.w	r2, r3, #2
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	7fffffc0 	.word	0x7fffffc0

08001f20 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d101      	bne.n	8001f38 <LL_ADC_IsEnabled+0x18>
 8001f34:	2301      	movs	r3, #1
 8001f36:	e000      	b.n	8001f3a <LL_ADC_IsEnabled+0x1a>
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d101      	bne.n	8001f5e <LL_ADC_IsDisableOngoing+0x18>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <LL_ADC_IsDisableOngoing+0x1a>
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <LL_ADC_REG_StartConversion+0x24>)
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	f043 0204 	orr.w	r2, r3, #4
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	7fffffc0 	.word	0x7fffffc0

08001f94 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b04      	cmp	r3, #4
 8001fa6:	d101      	bne.n	8001fac <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e000      	b.n	8001fae <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d101      	bne.n	8001fd2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e000      	b.n	8001fd4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fe0:	b590      	push	{r4, r7, lr}
 8001fe2:	b089      	sub	sp, #36	; 0x24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e18e      	b.n	8002318 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002004:	2b00      	cmp	r3, #0
 8002006:	d109      	bne.n	800201c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff f947 	bl	800129c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ff19 	bl	8001e58 <LL_ADC_IsDeepPowerDownEnabled>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d004      	beq.n	8002036 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff feff 	bl	8001e34 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff ff34 	bl	8001ea8 <LL_ADC_IsInternalRegulatorEnabled>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d113      	bne.n	800206e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff ff18 	bl	8001e80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002050:	4b9a      	ldr	r3, [pc, #616]	; (80022bc <HAL_ADC_Init+0x2dc>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	099b      	lsrs	r3, r3, #6
 8002056:	4a9a      	ldr	r2, [pc, #616]	; (80022c0 <HAL_ADC_Init+0x2e0>)
 8002058:	fba2 2303 	umull	r2, r3, r2, r3
 800205c:	099b      	lsrs	r3, r3, #6
 800205e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002060:	e002      	b.n	8002068 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	3b01      	subs	r3, #1
 8002066:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f9      	bne.n	8002062 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff ff18 	bl	8001ea8 <LL_ADC_IsInternalRegulatorEnabled>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10d      	bne.n	800209a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002082:	f043 0210 	orr.w	r2, r3, #16
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208e:	f043 0201 	orr.w	r2, r3, #1
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff ff78 	bl	8001f94 <LL_ADC_REG_IsConversionOngoing>
 80020a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f040 8129 	bne.w	8002306 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f040 8125 	bne.w	8002306 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80020c4:	f043 0202 	orr.w	r2, r3, #2
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff ff25 	bl	8001f20 <LL_ADC_IsEnabled>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d136      	bne.n	800214a <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a78      	ldr	r2, [pc, #480]	; (80022c4 <HAL_ADC_Init+0x2e4>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d004      	beq.n	80020f0 <HAL_ADC_Init+0x110>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a77      	ldr	r2, [pc, #476]	; (80022c8 <HAL_ADC_Init+0x2e8>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d10e      	bne.n	800210e <HAL_ADC_Init+0x12e>
 80020f0:	4874      	ldr	r0, [pc, #464]	; (80022c4 <HAL_ADC_Init+0x2e4>)
 80020f2:	f7ff ff15 	bl	8001f20 <LL_ADC_IsEnabled>
 80020f6:	4604      	mov	r4, r0
 80020f8:	4873      	ldr	r0, [pc, #460]	; (80022c8 <HAL_ADC_Init+0x2e8>)
 80020fa:	f7ff ff11 	bl	8001f20 <LL_ADC_IsEnabled>
 80020fe:	4603      	mov	r3, r0
 8002100:	4323      	orrs	r3, r4
 8002102:	2b00      	cmp	r3, #0
 8002104:	bf0c      	ite	eq
 8002106:	2301      	moveq	r3, #1
 8002108:	2300      	movne	r3, #0
 800210a:	b2db      	uxtb	r3, r3
 800210c:	e008      	b.n	8002120 <HAL_ADC_Init+0x140>
 800210e:	486f      	ldr	r0, [pc, #444]	; (80022cc <HAL_ADC_Init+0x2ec>)
 8002110:	f7ff ff06 	bl	8001f20 <LL_ADC_IsEnabled>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	bf0c      	ite	eq
 800211a:	2301      	moveq	r3, #1
 800211c:	2300      	movne	r3, #0
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	d012      	beq.n	800214a <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a66      	ldr	r2, [pc, #408]	; (80022c4 <HAL_ADC_Init+0x2e4>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d004      	beq.n	8002138 <HAL_ADC_Init+0x158>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a65      	ldr	r2, [pc, #404]	; (80022c8 <HAL_ADC_Init+0x2e8>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d101      	bne.n	800213c <HAL_ADC_Init+0x15c>
 8002138:	4a65      	ldr	r2, [pc, #404]	; (80022d0 <HAL_ADC_Init+0x2f0>)
 800213a:	e000      	b.n	800213e <HAL_ADC_Init+0x15e>
 800213c:	4a65      	ldr	r2, [pc, #404]	; (80022d4 <HAL_ADC_Init+0x2f4>)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	4619      	mov	r1, r3
 8002144:	4610      	mov	r0, r2
 8002146:	f7ff fd49 	bl	8001bdc <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800214a:	f7ff fd27 	bl	8001b9c <HAL_GetREVID>
 800214e:	4602      	mov	r2, r0
 8002150:	f241 0303 	movw	r3, #4099	; 0x1003
 8002154:	429a      	cmp	r2, r3
 8002156:	d914      	bls.n	8002182 <HAL_ADC_Init+0x1a2>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	2b10      	cmp	r3, #16
 800215e:	d110      	bne.n	8002182 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	7d5b      	ldrb	r3, [r3, #21]
 8002164:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800216a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002170:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	7f1b      	ldrb	r3, [r3, #28]
 8002176:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002178:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800217a:	f043 030c 	orr.w	r3, r3, #12
 800217e:	61bb      	str	r3, [r7, #24]
 8002180:	e00d      	b.n	800219e <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	7d5b      	ldrb	r3, [r3, #21]
 8002186:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800218c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002192:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	7f1b      	ldrb	r3, [r3, #28]
 8002198:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	7f1b      	ldrb	r3, [r3, #28]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d106      	bne.n	80021b4 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	045b      	lsls	r3, r3, #17
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d009      	beq.n	80021d0 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68da      	ldr	r2, [r3, #12]
 80021d6:	4b40      	ldr	r3, [pc, #256]	; (80022d8 <HAL_ADC_Init+0x2f8>)
 80021d8:	4013      	ands	r3, r2
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	6812      	ldr	r2, [r2, #0]
 80021de:	69b9      	ldr	r1, [r7, #24]
 80021e0:	430b      	orrs	r3, r1
 80021e2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff fed3 	bl	8001f94 <LL_ADC_REG_IsConversionOngoing>
 80021ee:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff fee0 	bl	8001fba <LL_ADC_INJ_IsConversionOngoing>
 80021fa:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d14a      	bne.n	8002298 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d147      	bne.n	8002298 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	7d1b      	ldrb	r3, [r3, #20]
 800220c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	4b2f      	ldr	r3, [pc, #188]	; (80022dc <HAL_ADC_Init+0x2fc>)
 800221e:	4013      	ands	r3, r2
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6812      	ldr	r2, [r2, #0]
 8002224:	69b9      	ldr	r1, [r7, #24]
 8002226:	430b      	orrs	r3, r1
 8002228:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002230:	2b01      	cmp	r3, #1
 8002232:	d11b      	bne.n	800226c <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	4b27      	ldr	r3, [pc, #156]	; (80022e0 <HAL_ADC_Init+0x300>)
 8002242:	4013      	ands	r3, r2
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002248:	3a01      	subs	r2, #1
 800224a:	0411      	lsls	r1, r2, #16
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002250:	4311      	orrs	r1, r2
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002256:	4311      	orrs	r1, r2
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800225c:	430a      	orrs	r2, r1
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f042 0201 	orr.w	r2, r2, #1
 8002268:	611a      	str	r2, [r3, #16]
 800226a:	e007      	b.n	800227c <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	691a      	ldr	r2, [r3, #16]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f022 0201 	bic.w	r2, r2, #1
 800227a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	430a      	orrs	r2, r1
 8002290:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 fdaa 	bl	8002dec <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d121      	bne.n	80022e4 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	f023 010f 	bic.w	r1, r3, #15
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	1e5a      	subs	r2, r3, #1
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	631a      	str	r2, [r3, #48]	; 0x30
 80022b8:	e01c      	b.n	80022f4 <HAL_ADC_Init+0x314>
 80022ba:	bf00      	nop
 80022bc:	2400000c 	.word	0x2400000c
 80022c0:	053e2d63 	.word	0x053e2d63
 80022c4:	40022000 	.word	0x40022000
 80022c8:	40022100 	.word	0x40022100
 80022cc:	58026000 	.word	0x58026000
 80022d0:	40022300 	.word	0x40022300
 80022d4:	58026300 	.word	0x58026300
 80022d8:	fff0c003 	.word	0xfff0c003
 80022dc:	ffffbffc 	.word	0xffffbffc
 80022e0:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 020f 	bic.w	r2, r2, #15
 80022f2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f8:	f023 0303 	bic.w	r3, r3, #3
 80022fc:	f043 0201 	orr.w	r2, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	655a      	str	r2, [r3, #84]	; 0x54
 8002304:	e007      	b.n	8002316 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230a:	f043 0210 	orr.w	r2, r3, #16
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002316:	7ffb      	ldrb	r3, [r7, #31]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3724      	adds	r7, #36	; 0x24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd90      	pop	{r4, r7, pc}

08002320 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a55      	ldr	r2, [pc, #340]	; (8002488 <HAL_ADC_Start_DMA+0x168>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d004      	beq.n	8002340 <HAL_ADC_Start_DMA+0x20>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a54      	ldr	r2, [pc, #336]	; (800248c <HAL_ADC_Start_DMA+0x16c>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d101      	bne.n	8002344 <HAL_ADC_Start_DMA+0x24>
 8002340:	4b53      	ldr	r3, [pc, #332]	; (8002490 <HAL_ADC_Start_DMA+0x170>)
 8002342:	e000      	b.n	8002346 <HAL_ADC_Start_DMA+0x26>
 8002344:	4b53      	ldr	r3, [pc, #332]	; (8002494 <HAL_ADC_Start_DMA+0x174>)
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff fd66 	bl	8001e18 <LL_ADC_GetMultimode>
 800234c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff fe1e 	bl	8001f94 <LL_ADC_REG_IsConversionOngoing>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	f040 808c 	bne.w	8002478 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002366:	2b01      	cmp	r3, #1
 8002368:	d101      	bne.n	800236e <HAL_ADC_Start_DMA+0x4e>
 800236a:	2302      	movs	r3, #2
 800236c:	e087      	b.n	800247e <HAL_ADC_Start_DMA+0x15e>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d005      	beq.n	8002388 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	2b05      	cmp	r3, #5
 8002380:	d002      	beq.n	8002388 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	2b09      	cmp	r3, #9
 8002386:	d170      	bne.n	800246a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f000 fbbf 	bl	8002b0c <ADC_Enable>
 800238e:	4603      	mov	r3, r0
 8002390:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002392:	7dfb      	ldrb	r3, [r7, #23]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d163      	bne.n	8002460 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800239c:	4b3e      	ldr	r3, [pc, #248]	; (8002498 <HAL_ADC_Start_DMA+0x178>)
 800239e:	4013      	ands	r3, r2
 80023a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a37      	ldr	r2, [pc, #220]	; (800248c <HAL_ADC_Start_DMA+0x16c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d002      	beq.n	80023b8 <HAL_ADC_Start_DMA+0x98>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	e000      	b.n	80023ba <HAL_ADC_Start_DMA+0x9a>
 80023b8:	4b33      	ldr	r3, [pc, #204]	; (8002488 <HAL_ADC_Start_DMA+0x168>)
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	6812      	ldr	r2, [r2, #0]
 80023be:	4293      	cmp	r3, r2
 80023c0:	d002      	beq.n	80023c8 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d105      	bne.n	80023d4 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023cc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d006      	beq.n	80023ee <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e4:	f023 0206 	bic.w	r2, r3, #6
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	659a      	str	r2, [r3, #88]	; 0x58
 80023ec:	e002      	b.n	80023f4 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f8:	4a28      	ldr	r2, [pc, #160]	; (800249c <HAL_ADC_Start_DMA+0x17c>)
 80023fa:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002400:	4a27      	ldr	r2, [pc, #156]	; (80024a0 <HAL_ADC_Start_DMA+0x180>)
 8002402:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002408:	4a26      	ldr	r2, [pc, #152]	; (80024a4 <HAL_ADC_Start_DMA+0x184>)
 800240a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	221c      	movs	r2, #28
 8002412:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 0210 	orr.w	r2, r2, #16
 800242a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002434:	4619      	mov	r1, r3
 8002436:	4610      	mov	r0, r2
 8002438:	f7ff fc8e 	bl	8001d58 <LL_ADC_REG_SetDataTransferMode>

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	3340      	adds	r3, #64	; 0x40
 8002446:	4619      	mov	r1, r3
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f001 fac8 	bl	80039e0 <HAL_DMA_Start_IT>
 8002450:	4603      	mov	r3, r0
 8002452:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff fd87 	bl	8001f6c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800245e:	e00d      	b.n	800247c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002468:	e008      	b.n	800247c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002476:	e001      	b.n	800247c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002478:	2302      	movs	r3, #2
 800247a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800247c:	7dfb      	ldrb	r3, [r7, #23]
}
 800247e:	4618      	mov	r0, r3
 8002480:	3718      	adds	r7, #24
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40022000 	.word	0x40022000
 800248c:	40022100 	.word	0x40022100
 8002490:	40022300 	.word	0x40022300
 8002494:	58026300 	.word	0x58026300
 8002498:	fffff0fe 	.word	0xfffff0fe
 800249c:	08002cc5 	.word	0x08002cc5
 80024a0:	08002d9d 	.word	0x08002d9d
 80024a4:	08002db9 	.word	0x08002db9

080024a8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80024e4:	b590      	push	{r4, r7, lr}
 80024e6:	b099      	sub	sp, #100	; 0x64
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024ee:	2300      	movs	r3, #0
 80024f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	4a99      	ldr	r2, [pc, #612]	; (8002764 <HAL_ADC_ConfigChannel+0x280>)
 80024fe:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002506:	2b01      	cmp	r3, #1
 8002508:	d101      	bne.n	800250e <HAL_ADC_ConfigChannel+0x2a>
 800250a:	2302      	movs	r3, #2
 800250c:	e2e6      	b.n	8002adc <HAL_ADC_ConfigChannel+0x5f8>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fd3a 	bl	8001f94 <LL_ADC_REG_IsConversionOngoing>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	f040 82cb 	bne.w	8002abe <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002530:	2b00      	cmp	r3, #0
 8002532:	d108      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x62>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	0e9b      	lsrs	r3, r3, #26
 800253a:	f003 031f 	and.w	r3, r3, #31
 800253e:	2201      	movs	r2, #1
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	e00f      	b.n	8002566 <HAL_ADC_ConfigChannel+0x82>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800254e:	fa93 f3a3 	rbit	r3, r3
 8002552:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002556:	fab3 f383 	clz	r3, r3
 800255a:	b2db      	uxtb	r3, r3
 800255c:	f003 031f 	and.w	r3, r3, #31
 8002560:	2201      	movs	r2, #1
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6812      	ldr	r2, [r2, #0]
 800256a:	69d1      	ldr	r1, [r2, #28]
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6812      	ldr	r2, [r2, #0]
 8002570:	430b      	orrs	r3, r1
 8002572:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6818      	ldr	r0, [r3, #0]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	6859      	ldr	r1, [r3, #4]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	461a      	mov	r2, r3
 8002582:	f7ff fbc0 	bl	8001d06 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff fd02 	bl	8001f94 <LL_ADC_REG_IsConversionOngoing>
 8002590:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff fd0f 	bl	8001fba <LL_ADC_INJ_IsConversionOngoing>
 800259c:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800259e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f040 80b3 	bne.w	800270c <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f040 80af 	bne.w	800270c <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6818      	ldr	r0, [r3, #0]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	6819      	ldr	r1, [r3, #0]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	461a      	mov	r2, r3
 80025bc:	f7ff fbdf 	bl	8001d7e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80025c0:	4b69      	ldr	r3, [pc, #420]	; (8002768 <HAL_ADC_ConfigChannel+0x284>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80025c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025cc:	d10b      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x102>
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	695a      	ldr	r2, [r3, #20]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	089b      	lsrs	r3, r3, #2
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	e01d      	b.n	8002622 <HAL_ADC_ConfigChannel+0x13e>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	f003 0310 	and.w	r3, r3, #16
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10b      	bne.n	800260c <HAL_ADC_ConfigChannel+0x128>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	695a      	ldr	r2, [r3, #20]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	089b      	lsrs	r3, r3, #2
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	e00a      	b.n	8002622 <HAL_ADC_ConfigChannel+0x13e>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	695a      	ldr	r2, [r3, #20]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	089b      	lsrs	r3, r3, #2
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	2b04      	cmp	r3, #4
 800262a:	d027      	beq.n	800267c <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6818      	ldr	r0, [r3, #0]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	6919      	ldr	r1, [r3, #16]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800263a:	f7ff fb03 	bl	8001c44 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	6919      	ldr	r1, [r3, #16]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	7e5b      	ldrb	r3, [r3, #25]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d102      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x170>
 800264e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002652:	e000      	b.n	8002656 <HAL_ADC_ConfigChannel+0x172>
 8002654:	2300      	movs	r3, #0
 8002656:	461a      	mov	r2, r3
 8002658:	f7ff fb2a 	bl	8001cb0 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6818      	ldr	r0, [r3, #0]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	6919      	ldr	r1, [r3, #16]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	7e1b      	ldrb	r3, [r3, #24]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d102      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x18e>
 800266c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002670:	e000      	b.n	8002674 <HAL_ADC_ConfigChannel+0x190>
 8002672:	2300      	movs	r3, #0
 8002674:	461a      	mov	r2, r3
 8002676:	f7ff fb02 	bl	8001c7e <LL_ADC_SetDataRightShift>
 800267a:	e047      	b.n	800270c <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002682:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	069b      	lsls	r3, r3, #26
 800268c:	429a      	cmp	r2, r3
 800268e:	d107      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800269e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	069b      	lsls	r3, r3, #26
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d107      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80026c2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	069b      	lsls	r3, r3, #26
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d107      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80026e6:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	069b      	lsls	r3, r3, #26
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d107      	bne.n	800270c <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800270a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff fc05 	bl	8001f20 <LL_ADC_IsEnabled>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	f040 81d9 	bne.w	8002ad0 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6819      	ldr	r1, [r3, #0]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	461a      	mov	r2, r3
 800272c:	f7ff fb50 	bl	8001dd0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	4a0b      	ldr	r2, [pc, #44]	; (8002764 <HAL_ADC_ConfigChannel+0x280>)
 8002736:	4293      	cmp	r3, r2
 8002738:	f040 8101 	bne.w	800293e <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10f      	bne.n	800276c <HAL_ADC_ConfigChannel+0x288>
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	0e9b      	lsrs	r3, r3, #26
 8002752:	3301      	adds	r3, #1
 8002754:	f003 031f 	and.w	r3, r3, #31
 8002758:	2b09      	cmp	r3, #9
 800275a:	bf94      	ite	ls
 800275c:	2301      	movls	r3, #1
 800275e:	2300      	movhi	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	e016      	b.n	8002792 <HAL_ADC_ConfigChannel+0x2ae>
 8002764:	47ff0000 	.word	0x47ff0000
 8002768:	5c001000 	.word	0x5c001000
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002774:	fa93 f3a3 	rbit	r3, r3
 8002778:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800277a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800277c:	fab3 f383 	clz	r3, r3
 8002780:	b2db      	uxtb	r3, r3
 8002782:	3301      	adds	r3, #1
 8002784:	f003 031f 	and.w	r3, r3, #31
 8002788:	2b09      	cmp	r3, #9
 800278a:	bf94      	ite	ls
 800278c:	2301      	movls	r3, #1
 800278e:	2300      	movhi	r3, #0
 8002790:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002792:	2b00      	cmp	r3, #0
 8002794:	d064      	beq.n	8002860 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d107      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x2ce>
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	0e9b      	lsrs	r3, r3, #26
 80027a8:	3301      	adds	r3, #1
 80027aa:	069b      	lsls	r3, r3, #26
 80027ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027b0:	e00e      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x2ec>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ba:	fa93 f3a3 	rbit	r3, r3
 80027be:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80027c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c2:	fab3 f383 	clz	r3, r3
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	3301      	adds	r3, #1
 80027ca:	069b      	lsls	r3, r3, #26
 80027cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d109      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x30c>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	0e9b      	lsrs	r3, r3, #26
 80027e2:	3301      	adds	r3, #1
 80027e4:	f003 031f 	and.w	r3, r3, #31
 80027e8:	2101      	movs	r1, #1
 80027ea:	fa01 f303 	lsl.w	r3, r1, r3
 80027ee:	e010      	b.n	8002812 <HAL_ADC_ConfigChannel+0x32e>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f8:	fa93 f3a3 	rbit	r3, r3
 80027fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80027fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002800:	fab3 f383 	clz	r3, r3
 8002804:	b2db      	uxtb	r3, r3
 8002806:	3301      	adds	r3, #1
 8002808:	f003 031f 	and.w	r3, r3, #31
 800280c:	2101      	movs	r1, #1
 800280e:	fa01 f303 	lsl.w	r3, r1, r3
 8002812:	ea42 0103 	orr.w	r1, r2, r3
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10a      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x354>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	0e9b      	lsrs	r3, r3, #26
 8002828:	3301      	adds	r3, #1
 800282a:	f003 021f 	and.w	r2, r3, #31
 800282e:	4613      	mov	r3, r2
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	4413      	add	r3, r2
 8002834:	051b      	lsls	r3, r3, #20
 8002836:	e011      	b.n	800285c <HAL_ADC_ConfigChannel+0x378>
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002840:	fa93 f3a3 	rbit	r3, r3
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	fab3 f383 	clz	r3, r3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	3301      	adds	r3, #1
 8002850:	f003 021f 	and.w	r2, r3, #31
 8002854:	4613      	mov	r3, r2
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	4413      	add	r3, r2
 800285a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800285c:	430b      	orrs	r3, r1
 800285e:	e069      	b.n	8002934 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002868:	2b00      	cmp	r3, #0
 800286a:	d107      	bne.n	800287c <HAL_ADC_ConfigChannel+0x398>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	0e9b      	lsrs	r3, r3, #26
 8002872:	3301      	adds	r3, #1
 8002874:	069b      	lsls	r3, r3, #26
 8002876:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800287a:	e00e      	b.n	800289a <HAL_ADC_ConfigChannel+0x3b6>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	fa93 f3a3 	rbit	r3, r3
 8002888:	61fb      	str	r3, [r7, #28]
  return result;
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	fab3 f383 	clz	r3, r3
 8002890:	b2db      	uxtb	r3, r3
 8002892:	3301      	adds	r3, #1
 8002894:	069b      	lsls	r3, r3, #26
 8002896:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d109      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x3d6>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	0e9b      	lsrs	r3, r3, #26
 80028ac:	3301      	adds	r3, #1
 80028ae:	f003 031f 	and.w	r3, r3, #31
 80028b2:	2101      	movs	r1, #1
 80028b4:	fa01 f303 	lsl.w	r3, r1, r3
 80028b8:	e010      	b.n	80028dc <HAL_ADC_ConfigChannel+0x3f8>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	fa93 f3a3 	rbit	r3, r3
 80028c6:	617b      	str	r3, [r7, #20]
  return result;
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	fab3 f383 	clz	r3, r3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	3301      	adds	r3, #1
 80028d2:	f003 031f 	and.w	r3, r3, #31
 80028d6:	2101      	movs	r1, #1
 80028d8:	fa01 f303 	lsl.w	r3, r1, r3
 80028dc:	ea42 0103 	orr.w	r1, r2, r3
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10d      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x424>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	0e9b      	lsrs	r3, r3, #26
 80028f2:	3301      	adds	r3, #1
 80028f4:	f003 021f 	and.w	r2, r3, #31
 80028f8:	4613      	mov	r3, r2
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	4413      	add	r3, r2
 80028fe:	3b1e      	subs	r3, #30
 8002900:	051b      	lsls	r3, r3, #20
 8002902:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002906:	e014      	b.n	8002932 <HAL_ADC_ConfigChannel+0x44e>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	fa93 f3a3 	rbit	r3, r3
 8002914:	60fb      	str	r3, [r7, #12]
  return result;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	fab3 f383 	clz	r3, r3
 800291c:	b2db      	uxtb	r3, r3
 800291e:	3301      	adds	r3, #1
 8002920:	f003 021f 	and.w	r2, r3, #31
 8002924:	4613      	mov	r3, r2
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	4413      	add	r3, r2
 800292a:	3b1e      	subs	r3, #30
 800292c:	051b      	lsls	r3, r3, #20
 800292e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002932:	430b      	orrs	r3, r1
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	6892      	ldr	r2, [r2, #8]
 8002938:	4619      	mov	r1, r3
 800293a:	f7ff fa20 	bl	8001d7e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	f280 80c4 	bge.w	8002ad0 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a65      	ldr	r2, [pc, #404]	; (8002ae4 <HAL_ADC_ConfigChannel+0x600>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d004      	beq.n	800295c <HAL_ADC_ConfigChannel+0x478>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a64      	ldr	r2, [pc, #400]	; (8002ae8 <HAL_ADC_ConfigChannel+0x604>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d101      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x47c>
 800295c:	4b63      	ldr	r3, [pc, #396]	; (8002aec <HAL_ADC_ConfigChannel+0x608>)
 800295e:	e000      	b.n	8002962 <HAL_ADC_ConfigChannel+0x47e>
 8002960:	4b63      	ldr	r3, [pc, #396]	; (8002af0 <HAL_ADC_ConfigChannel+0x60c>)
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff f960 	bl	8001c28 <LL_ADC_GetCommonPathInternalCh>
 8002968:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a5d      	ldr	r2, [pc, #372]	; (8002ae4 <HAL_ADC_ConfigChannel+0x600>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d004      	beq.n	800297e <HAL_ADC_ConfigChannel+0x49a>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a5b      	ldr	r2, [pc, #364]	; (8002ae8 <HAL_ADC_ConfigChannel+0x604>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d10e      	bne.n	800299c <HAL_ADC_ConfigChannel+0x4b8>
 800297e:	4859      	ldr	r0, [pc, #356]	; (8002ae4 <HAL_ADC_ConfigChannel+0x600>)
 8002980:	f7ff face 	bl	8001f20 <LL_ADC_IsEnabled>
 8002984:	4604      	mov	r4, r0
 8002986:	4858      	ldr	r0, [pc, #352]	; (8002ae8 <HAL_ADC_ConfigChannel+0x604>)
 8002988:	f7ff faca 	bl	8001f20 <LL_ADC_IsEnabled>
 800298c:	4603      	mov	r3, r0
 800298e:	4323      	orrs	r3, r4
 8002990:	2b00      	cmp	r3, #0
 8002992:	bf0c      	ite	eq
 8002994:	2301      	moveq	r3, #1
 8002996:	2300      	movne	r3, #0
 8002998:	b2db      	uxtb	r3, r3
 800299a:	e008      	b.n	80029ae <HAL_ADC_ConfigChannel+0x4ca>
 800299c:	4855      	ldr	r0, [pc, #340]	; (8002af4 <HAL_ADC_ConfigChannel+0x610>)
 800299e:	f7ff fabf 	bl	8001f20 <LL_ADC_IsEnabled>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	bf0c      	ite	eq
 80029a8:	2301      	moveq	r3, #1
 80029aa:	2300      	movne	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d07b      	beq.n	8002aaa <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a50      	ldr	r2, [pc, #320]	; (8002af8 <HAL_ADC_ConfigChannel+0x614>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d12e      	bne.n	8002a1a <HAL_ADC_ConfigChannel+0x536>
 80029bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d129      	bne.n	8002a1a <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a4a      	ldr	r2, [pc, #296]	; (8002af4 <HAL_ADC_ConfigChannel+0x610>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d17f      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a43      	ldr	r2, [pc, #268]	; (8002ae4 <HAL_ADC_ConfigChannel+0x600>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d004      	beq.n	80029e4 <HAL_ADC_ConfigChannel+0x500>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a42      	ldr	r2, [pc, #264]	; (8002ae8 <HAL_ADC_ConfigChannel+0x604>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d101      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x504>
 80029e4:	4a41      	ldr	r2, [pc, #260]	; (8002aec <HAL_ADC_ConfigChannel+0x608>)
 80029e6:	e000      	b.n	80029ea <HAL_ADC_ConfigChannel+0x506>
 80029e8:	4a41      	ldr	r2, [pc, #260]	; (8002af0 <HAL_ADC_ConfigChannel+0x60c>)
 80029ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029f0:	4619      	mov	r1, r3
 80029f2:	4610      	mov	r0, r2
 80029f4:	f7ff f905 	bl	8001c02 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80029f8:	4b40      	ldr	r3, [pc, #256]	; (8002afc <HAL_ADC_ConfigChannel+0x618>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	099b      	lsrs	r3, r3, #6
 80029fe:	4a40      	ldr	r2, [pc, #256]	; (8002b00 <HAL_ADC_ConfigChannel+0x61c>)
 8002a00:	fba2 2303 	umull	r2, r3, r2, r3
 8002a04:	099b      	lsrs	r3, r3, #6
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002a0a:	e002      	b.n	8002a12 <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1f9      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a18:	e05a      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a39      	ldr	r2, [pc, #228]	; (8002b04 <HAL_ADC_ConfigChannel+0x620>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d11e      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x57e>
 8002a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d119      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a30      	ldr	r2, [pc, #192]	; (8002af4 <HAL_ADC_ConfigChannel+0x610>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d14b      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a29      	ldr	r2, [pc, #164]	; (8002ae4 <HAL_ADC_ConfigChannel+0x600>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d004      	beq.n	8002a4c <HAL_ADC_ConfigChannel+0x568>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a28      	ldr	r2, [pc, #160]	; (8002ae8 <HAL_ADC_ConfigChannel+0x604>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d101      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x56c>
 8002a4c:	4a27      	ldr	r2, [pc, #156]	; (8002aec <HAL_ADC_ConfigChannel+0x608>)
 8002a4e:	e000      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x56e>
 8002a50:	4a27      	ldr	r2, [pc, #156]	; (8002af0 <HAL_ADC_ConfigChannel+0x60c>)
 8002a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	f7ff f8d1 	bl	8001c02 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a60:	e036      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a28      	ldr	r2, [pc, #160]	; (8002b08 <HAL_ADC_ConfigChannel+0x624>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d131      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x5ec>
 8002a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d12c      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a1e      	ldr	r2, [pc, #120]	; (8002af4 <HAL_ADC_ConfigChannel+0x610>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d127      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a17      	ldr	r2, [pc, #92]	; (8002ae4 <HAL_ADC_ConfigChannel+0x600>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d004      	beq.n	8002a94 <HAL_ADC_ConfigChannel+0x5b0>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a16      	ldr	r2, [pc, #88]	; (8002ae8 <HAL_ADC_ConfigChannel+0x604>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d101      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x5b4>
 8002a94:	4a15      	ldr	r2, [pc, #84]	; (8002aec <HAL_ADC_ConfigChannel+0x608>)
 8002a96:	e000      	b.n	8002a9a <HAL_ADC_ConfigChannel+0x5b6>
 8002a98:	4a15      	ldr	r2, [pc, #84]	; (8002af0 <HAL_ADC_ConfigChannel+0x60c>)
 8002a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4610      	mov	r0, r2
 8002aa4:	f7ff f8ad 	bl	8001c02 <LL_ADC_SetCommonPathInternalCh>
 8002aa8:	e012      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aae:	f043 0220 	orr.w	r2, r3, #32
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002abc:	e008      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac2:	f043 0220 	orr.w	r2, r3, #32
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ad8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3764      	adds	r7, #100	; 0x64
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd90      	pop	{r4, r7, pc}
 8002ae4:	40022000 	.word	0x40022000
 8002ae8:	40022100 	.word	0x40022100
 8002aec:	40022300 	.word	0x40022300
 8002af0:	58026300 	.word	0x58026300
 8002af4:	58026000 	.word	0x58026000
 8002af8:	cb840000 	.word	0xcb840000
 8002afc:	2400000c 	.word	0x2400000c
 8002b00:	053e2d63 	.word	0x053e2d63
 8002b04:	c7520000 	.word	0xc7520000
 8002b08:	cfb80000 	.word	0xcfb80000

08002b0c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff fa01 	bl	8001f20 <LL_ADC_IsEnabled>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d167      	bne.n	8002bf4 <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	4b35      	ldr	r3, [pc, #212]	; (8002c00 <ADC_Enable+0xf4>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00d      	beq.n	8002b4e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b36:	f043 0210 	orr.w	r2, r3, #16
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b42:	f043 0201 	orr.w	r2, r3, #1
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e053      	b.n	8002bf6 <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff f9bc 	bl	8001ed0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002b58:	f7fe fff2 	bl	8001b40 <HAL_GetTick>
 8002b5c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a28      	ldr	r2, [pc, #160]	; (8002c04 <ADC_Enable+0xf8>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d004      	beq.n	8002b72 <ADC_Enable+0x66>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a26      	ldr	r2, [pc, #152]	; (8002c08 <ADC_Enable+0xfc>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d101      	bne.n	8002b76 <ADC_Enable+0x6a>
 8002b72:	4b26      	ldr	r3, [pc, #152]	; (8002c0c <ADC_Enable+0x100>)
 8002b74:	e000      	b.n	8002b78 <ADC_Enable+0x6c>
 8002b76:	4b26      	ldr	r3, [pc, #152]	; (8002c10 <ADC_Enable+0x104>)
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff f94d 	bl	8001e18 <LL_ADC_GetMultimode>
 8002b7e:	60b8      	str	r0, [r7, #8]
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a20      	ldr	r2, [pc, #128]	; (8002c08 <ADC_Enable+0xfc>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d002      	beq.n	8002b90 <ADC_Enable+0x84>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	e000      	b.n	8002b92 <ADC_Enable+0x86>
 8002b90:	4b1c      	ldr	r3, [pc, #112]	; (8002c04 <ADC_Enable+0xf8>)
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6812      	ldr	r2, [r2, #0]
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d025      	beq.n	8002be6 <ADC_Enable+0xda>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d129      	bne.n	8002bf4 <ADC_Enable+0xe8>
       )
    {
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ba0:	e021      	b.n	8002be6 <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff f9ba 	bl	8001f20 <LL_ADC_IsEnabled>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d104      	bne.n	8002bbc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff f98a 	bl	8001ed0 <LL_ADC_Enable>
        }

        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bbc:	f7fe ffc0 	bl	8001b40 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d90d      	bls.n	8002be6 <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bce:	f043 0210 	orr.w	r2, r3, #16
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bda:	f043 0201 	orr.w	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e007      	b.n	8002bf6 <ADC_Enable+0xea>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d1d6      	bne.n	8002ba2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	8000003f 	.word	0x8000003f
 8002c04:	40022000 	.word	0x40022000
 8002c08:	40022100 	.word	0x40022100
 8002c0c:	40022300 	.word	0x40022300
 8002c10:	58026300 	.word	0x58026300

08002c14 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff f990 	bl	8001f46 <LL_ADC_IsDisableOngoing>
 8002c26:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff f977 	bl	8001f20 <LL_ADC_IsEnabled>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d040      	beq.n	8002cba <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d13d      	bne.n	8002cba <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f003 030d 	and.w	r3, r3, #13
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d10c      	bne.n	8002c66 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff f951 	bl	8001ef8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2203      	movs	r2, #3
 8002c5c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c5e:	f7fe ff6f 	bl	8001b40 <HAL_GetTick>
 8002c62:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c64:	e022      	b.n	8002cac <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6a:	f043 0210 	orr.w	r2, r3, #16
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c76:	f043 0201 	orr.w	r2, r3, #1
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e01c      	b.n	8002cbc <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c82:	f7fe ff5d 	bl	8001b40 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d90d      	bls.n	8002cac <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c94:	f043 0210 	orr.w	r2, r3, #16
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca0:	f043 0201 	orr.w	r2, r3, #1
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e007      	b.n	8002cbc <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1e3      	bne.n	8002c82 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d14b      	bne.n	8002d76 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0308 	and.w	r3, r3, #8
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d021      	beq.n	8002d3c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7fe ffef 	bl	8001ce0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d032      	beq.n	8002d6e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d12b      	bne.n	8002d6e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d11f      	bne.n	8002d6e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d32:	f043 0201 	orr.w	r2, r3, #1
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	655a      	str	r2, [r3, #84]	; 0x54
 8002d3a:	e018      	b.n	8002d6e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d111      	bne.n	8002d6e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d105      	bne.n	8002d6e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d66:	f043 0201 	orr.w	r2, r3, #1
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f7ff fb9a 	bl	80024a8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002d74:	e00e      	b.n	8002d94 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7a:	f003 0310 	and.w	r3, r3, #16
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f7ff fba4 	bl	80024d0 <HAL_ADC_ErrorCallback>
}
 8002d88:	e004      	b.n	8002d94 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	4798      	blx	r3
}
 8002d94:	bf00      	nop
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f7ff fb86 	bl	80024bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002db0:	bf00      	nop
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd6:	f043 0204 	orr.w	r2, r3, #4
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f7ff fb76 	bl	80024d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002de4:	bf00      	nop
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a70      	ldr	r2, [pc, #448]	; (8002fbc <ADC_ConfigureBoostMode+0x1d0>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d004      	beq.n	8002e08 <ADC_ConfigureBoostMode+0x1c>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a6f      	ldr	r2, [pc, #444]	; (8002fc0 <ADC_ConfigureBoostMode+0x1d4>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d109      	bne.n	8002e1c <ADC_ConfigureBoostMode+0x30>
 8002e08:	4b6e      	ldr	r3, [pc, #440]	; (8002fc4 <ADC_ConfigureBoostMode+0x1d8>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	bf14      	ite	ne
 8002e14:	2301      	movne	r3, #1
 8002e16:	2300      	moveq	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	e008      	b.n	8002e2e <ADC_ConfigureBoostMode+0x42>
 8002e1c:	4b6a      	ldr	r3, [pc, #424]	; (8002fc8 <ADC_ConfigureBoostMode+0x1dc>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	bf14      	ite	ne
 8002e28:	2301      	movne	r3, #1
 8002e2a:	2300      	moveq	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d01a      	beq.n	8002e68 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002e32:	f006 f97d 	bl	8009130 <HAL_RCC_GetHCLKFreq>
 8002e36:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e40:	d006      	beq.n	8002e50 <ADC_ConfigureBoostMode+0x64>
 8002e42:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e46:	d00b      	beq.n	8002e60 <ADC_ConfigureBoostMode+0x74>
 8002e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e4c:	d000      	beq.n	8002e50 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8002e4e:	e05d      	b.n	8002f0c <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	0c1b      	lsrs	r3, r3, #16
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5c:	60fb      	str	r3, [r7, #12]
        break;
 8002e5e:	e055      	b.n	8002f0c <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	089b      	lsrs	r3, r3, #2
 8002e64:	60fb      	str	r3, [r7, #12]
        break;
 8002e66:	e051      	b.n	8002f0c <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002e68:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002e6c:	f007 f89a 	bl	8009fa4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002e70:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002e7a:	d02a      	beq.n	8002ed2 <ADC_ConfigureBoostMode+0xe6>
 8002e7c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002e80:	d813      	bhi.n	8002eaa <ADC_ConfigureBoostMode+0xbe>
 8002e82:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e86:	d024      	beq.n	8002ed2 <ADC_ConfigureBoostMode+0xe6>
 8002e88:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e8c:	d806      	bhi.n	8002e9c <ADC_ConfigureBoostMode+0xb0>
 8002e8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e92:	d01e      	beq.n	8002ed2 <ADC_ConfigureBoostMode+0xe6>
 8002e94:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e98:	d01b      	beq.n	8002ed2 <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8002e9a:	e037      	b.n	8002f0c <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002e9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ea0:	d017      	beq.n	8002ed2 <ADC_ConfigureBoostMode+0xe6>
 8002ea2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002ea6:	d014      	beq.n	8002ed2 <ADC_ConfigureBoostMode+0xe6>
        break;
 8002ea8:	e030      	b.n	8002f0c <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002eaa:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002eae:	d021      	beq.n	8002ef4 <ADC_ConfigureBoostMode+0x108>
 8002eb0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002eb4:	d806      	bhi.n	8002ec4 <ADC_ConfigureBoostMode+0xd8>
 8002eb6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002eba:	d013      	beq.n	8002ee4 <ADC_ConfigureBoostMode+0xf8>
 8002ebc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ec0:	d014      	beq.n	8002eec <ADC_ConfigureBoostMode+0x100>
        break;
 8002ec2:	e023      	b.n	8002f0c <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002ec4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002ec8:	d018      	beq.n	8002efc <ADC_ConfigureBoostMode+0x110>
 8002eca:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002ece:	d019      	beq.n	8002f04 <ADC_ConfigureBoostMode+0x118>
        break;
 8002ed0:	e01c      	b.n	8002f0c <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	0c9b      	lsrs	r3, r3, #18
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee0:	60fb      	str	r3, [r7, #12]
        break;
 8002ee2:	e013      	b.n	8002f0c <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	091b      	lsrs	r3, r3, #4
 8002ee8:	60fb      	str	r3, [r7, #12]
      break;
 8002eea:	e00f      	b.n	8002f0c <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	095b      	lsrs	r3, r3, #5
 8002ef0:	60fb      	str	r3, [r7, #12]
        break;
 8002ef2:	e00b      	b.n	8002f0c <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	099b      	lsrs	r3, r3, #6
 8002ef8:	60fb      	str	r3, [r7, #12]
        break;
 8002efa:	e007      	b.n	8002f0c <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	09db      	lsrs	r3, r3, #7
 8002f00:	60fb      	str	r3, [r7, #12]
        break;
 8002f02:	e003      	b.n	8002f0c <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	0a1b      	lsrs	r3, r3, #8
 8002f08:	60fb      	str	r3, [r7, #12]
        break;
 8002f0a:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002f0c:	f7fe fe46 	bl	8001b9c <HAL_GetREVID>
 8002f10:	4602      	mov	r2, r0
 8002f12:	f241 0303 	movw	r3, #4099	; 0x1003
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d815      	bhi.n	8002f46 <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	4a2b      	ldr	r2, [pc, #172]	; (8002fcc <ADC_ConfigureBoostMode+0x1e0>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d908      	bls.n	8002f34 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f30:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002f32:	e03e      	b.n	8002fb2 <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f42:	609a      	str	r2, [r3, #8]
}
 8002f44:	e035      	b.n	8002fb2 <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	085b      	lsrs	r3, r3, #1
 8002f4a:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4a20      	ldr	r2, [pc, #128]	; (8002fd0 <ADC_ConfigureBoostMode+0x1e4>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d808      	bhi.n	8002f66 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002f62:	609a      	str	r2, [r3, #8]
}
 8002f64:	e025      	b.n	8002fb2 <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4a1a      	ldr	r2, [pc, #104]	; (8002fd4 <ADC_ConfigureBoostMode+0x1e8>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d80a      	bhi.n	8002f84 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f80:	609a      	str	r2, [r3, #8]
}
 8002f82:	e016      	b.n	8002fb2 <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4a14      	ldr	r2, [pc, #80]	; (8002fd8 <ADC_ConfigureBoostMode+0x1ec>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d80a      	bhi.n	8002fa2 <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f9e:	609a      	str	r2, [r3, #8]
}
 8002fa0:	e007      	b.n	8002fb2 <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002fb0:	609a      	str	r2, [r3, #8]
}
 8002fb2:	bf00      	nop
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40022000 	.word	0x40022000
 8002fc0:	40022100 	.word	0x40022100
 8002fc4:	40022300 	.word	0x40022300
 8002fc8:	58026300 	.word	0x58026300
 8002fcc:	01312d00 	.word	0x01312d00
 8002fd0:	005f5e10 	.word	0x005f5e10
 8002fd4:	00bebc20 	.word	0x00bebc20
 8002fd8:	017d7840 	.word	0x017d7840

08002fdc <LL_ADC_StartCalibration>:
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	4b09      	ldr	r3, [pc, #36]	; (8003014 <LL_ADC_StartCalibration+0x38>)
 8002fee:	4013      	ands	r3, r2
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	609a      	str	r2, [r3, #8]
}
 8003008:	bf00      	nop
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	3ffeffc0 	.word	0x3ffeffc0

08003018 <LL_ADC_IsCalibrationOnGoing>:
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003028:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800302c:	d101      	bne.n	8003032 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800304c:	2300      	movs	r3, #0
 800304e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <HAL_ADCEx_Calibration_Start+0x1e>
 800305a:	2302      	movs	r3, #2
 800305c:	e04c      	b.n	80030f8 <HAL_ADCEx_Calibration_Start+0xb8>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f7ff fdd4 	bl	8002c14 <ADC_Disable>
 800306c:	4603      	mov	r3, r0
 800306e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003070:	7dfb      	ldrb	r3, [r7, #23]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d135      	bne.n	80030e2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800307a:	4b21      	ldr	r3, [pc, #132]	; (8003100 <HAL_ADCEx_Calibration_Start+0xc0>)
 800307c:	4013      	ands	r3, r2
 800307e:	f043 0202 	orr.w	r2, r3, #2
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance , CalibrationMode, SingleDiff );
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	68b9      	ldr	r1, [r7, #8]
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff ffa4 	bl	8002fdc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003094:	e014      	b.n	80030c0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	3301      	adds	r3, #1
 800309a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	4a19      	ldr	r2, [pc, #100]	; (8003104 <HAL_ADCEx_Calibration_Start+0xc4>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d90d      	bls.n	80030c0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a8:	f023 0312 	bic.w	r3, r3, #18
 80030ac:	f043 0210 	orr.w	r2, r3, #16
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e01b      	b.n	80030f8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff ffa7 	bl	8003018 <LL_ADC_IsCalibrationOnGoing>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1e2      	bne.n	8003096 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d4:	f023 0303 	bic.w	r3, r3, #3
 80030d8:	f043 0201 	orr.w	r2, r3, #1
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	655a      	str	r2, [r3, #84]	; 0x54
 80030e0:	e005      	b.n	80030ee <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e6:	f043 0210 	orr.w	r2, r3, #16
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80030f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3718      	adds	r7, #24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	ffffeefd 	.word	0xffffeefd
 8003104:	25c3f7ff 	.word	0x25c3f7ff

08003108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003118:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <__NVIC_SetPriorityGrouping+0x40>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003124:	4013      	ands	r3, r2
 8003126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003130:	4b06      	ldr	r3, [pc, #24]	; (800314c <__NVIC_SetPriorityGrouping+0x44>)
 8003132:	4313      	orrs	r3, r2
 8003134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003136:	4a04      	ldr	r2, [pc, #16]	; (8003148 <__NVIC_SetPriorityGrouping+0x40>)
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	60d3      	str	r3, [r2, #12]
}
 800313c:	bf00      	nop
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	e000ed00 	.word	0xe000ed00
 800314c:	05fa0000 	.word	0x05fa0000

08003150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003154:	4b04      	ldr	r3, [pc, #16]	; (8003168 <__NVIC_GetPriorityGrouping+0x18>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	0a1b      	lsrs	r3, r3, #8
 800315a:	f003 0307 	and.w	r3, r3, #7
}
 800315e:	4618      	mov	r0, r3
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	e000ed00 	.word	0xe000ed00

0800316c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	4603      	mov	r3, r0
 8003174:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003176:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800317a:	2b00      	cmp	r3, #0
 800317c:	db0b      	blt.n	8003196 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800317e:	88fb      	ldrh	r3, [r7, #6]
 8003180:	f003 021f 	and.w	r2, r3, #31
 8003184:	4907      	ldr	r1, [pc, #28]	; (80031a4 <__NVIC_EnableIRQ+0x38>)
 8003186:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800318a:	095b      	lsrs	r3, r3, #5
 800318c:	2001      	movs	r0, #1
 800318e:	fa00 f202 	lsl.w	r2, r0, r2
 8003192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	e000e100 	.word	0xe000e100

080031a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	6039      	str	r1, [r7, #0]
 80031b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80031b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	db0a      	blt.n	80031d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	490c      	ldr	r1, [pc, #48]	; (80031f4 <__NVIC_SetPriority+0x4c>)
 80031c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031c6:	0112      	lsls	r2, r2, #4
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	440b      	add	r3, r1
 80031cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031d0:	e00a      	b.n	80031e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	4908      	ldr	r1, [pc, #32]	; (80031f8 <__NVIC_SetPriority+0x50>)
 80031d8:	88fb      	ldrh	r3, [r7, #6]
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	3b04      	subs	r3, #4
 80031e0:	0112      	lsls	r2, r2, #4
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	440b      	add	r3, r1
 80031e6:	761a      	strb	r2, [r3, #24]
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	e000e100 	.word	0xe000e100
 80031f8:	e000ed00 	.word	0xe000ed00

080031fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b089      	sub	sp, #36	; 0x24
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f1c3 0307 	rsb	r3, r3, #7
 8003216:	2b04      	cmp	r3, #4
 8003218:	bf28      	it	cs
 800321a:	2304      	movcs	r3, #4
 800321c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	3304      	adds	r3, #4
 8003222:	2b06      	cmp	r3, #6
 8003224:	d902      	bls.n	800322c <NVIC_EncodePriority+0x30>
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	3b03      	subs	r3, #3
 800322a:	e000      	b.n	800322e <NVIC_EncodePriority+0x32>
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003230:	f04f 32ff 	mov.w	r2, #4294967295
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	43da      	mvns	r2, r3
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	401a      	ands	r2, r3
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003244:	f04f 31ff 	mov.w	r1, #4294967295
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	fa01 f303 	lsl.w	r3, r1, r3
 800324e:	43d9      	mvns	r1, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003254:	4313      	orrs	r3, r2
         );
}
 8003256:	4618      	mov	r0, r3
 8003258:	3724      	adds	r7, #36	; 0x24
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
	...

08003264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3b01      	subs	r3, #1
 8003270:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003274:	d301      	bcc.n	800327a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003276:	2301      	movs	r3, #1
 8003278:	e00f      	b.n	800329a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800327a:	4a0a      	ldr	r2, [pc, #40]	; (80032a4 <SysTick_Config+0x40>)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3b01      	subs	r3, #1
 8003280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003282:	210f      	movs	r1, #15
 8003284:	f04f 30ff 	mov.w	r0, #4294967295
 8003288:	f7ff ff8e 	bl	80031a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800328c:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <SysTick_Config+0x40>)
 800328e:	2200      	movs	r2, #0
 8003290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003292:	4b04      	ldr	r3, [pc, #16]	; (80032a4 <SysTick_Config+0x40>)
 8003294:	2207      	movs	r2, #7
 8003296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	e000e010 	.word	0xe000e010

080032a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7ff ff29 	bl	8003108 <__NVIC_SetPriorityGrouping>
}
 80032b6:	bf00      	nop
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b086      	sub	sp, #24
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	4603      	mov	r3, r0
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	607a      	str	r2, [r7, #4]
 80032ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032cc:	f7ff ff40 	bl	8003150 <__NVIC_GetPriorityGrouping>
 80032d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	68b9      	ldr	r1, [r7, #8]
 80032d6:	6978      	ldr	r0, [r7, #20]
 80032d8:	f7ff ff90 	bl	80031fc <NVIC_EncodePriority>
 80032dc:	4602      	mov	r2, r0
 80032de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032e2:	4611      	mov	r1, r2
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff ff5f 	bl	80031a8 <__NVIC_SetPriority>
}
 80032ea:	bf00      	nop
 80032ec:	3718      	adds	r7, #24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b082      	sub	sp, #8
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	4603      	mov	r3, r0
 80032fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff ff33 	bl	800316c <__NVIC_EnableIRQ>
}
 8003306:	bf00      	nop
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b082      	sub	sp, #8
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7ff ffa4 	bl	8003264 <SysTick_Config>
 800331c:	4603      	mov	r3, r0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
	...

08003328 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003330:	f7fe fc06 	bl	8001b40 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e316      	b.n	800396e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a66      	ldr	r2, [pc, #408]	; (80034e0 <HAL_DMA_Init+0x1b8>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d04a      	beq.n	80033e0 <HAL_DMA_Init+0xb8>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a65      	ldr	r2, [pc, #404]	; (80034e4 <HAL_DMA_Init+0x1bc>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d045      	beq.n	80033e0 <HAL_DMA_Init+0xb8>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a63      	ldr	r2, [pc, #396]	; (80034e8 <HAL_DMA_Init+0x1c0>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d040      	beq.n	80033e0 <HAL_DMA_Init+0xb8>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a62      	ldr	r2, [pc, #392]	; (80034ec <HAL_DMA_Init+0x1c4>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d03b      	beq.n	80033e0 <HAL_DMA_Init+0xb8>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a60      	ldr	r2, [pc, #384]	; (80034f0 <HAL_DMA_Init+0x1c8>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d036      	beq.n	80033e0 <HAL_DMA_Init+0xb8>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a5f      	ldr	r2, [pc, #380]	; (80034f4 <HAL_DMA_Init+0x1cc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d031      	beq.n	80033e0 <HAL_DMA_Init+0xb8>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a5d      	ldr	r2, [pc, #372]	; (80034f8 <HAL_DMA_Init+0x1d0>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d02c      	beq.n	80033e0 <HAL_DMA_Init+0xb8>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a5c      	ldr	r2, [pc, #368]	; (80034fc <HAL_DMA_Init+0x1d4>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d027      	beq.n	80033e0 <HAL_DMA_Init+0xb8>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a5a      	ldr	r2, [pc, #360]	; (8003500 <HAL_DMA_Init+0x1d8>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d022      	beq.n	80033e0 <HAL_DMA_Init+0xb8>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a59      	ldr	r2, [pc, #356]	; (8003504 <HAL_DMA_Init+0x1dc>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d01d      	beq.n	80033e0 <HAL_DMA_Init+0xb8>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a57      	ldr	r2, [pc, #348]	; (8003508 <HAL_DMA_Init+0x1e0>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d018      	beq.n	80033e0 <HAL_DMA_Init+0xb8>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a56      	ldr	r2, [pc, #344]	; (800350c <HAL_DMA_Init+0x1e4>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d013      	beq.n	80033e0 <HAL_DMA_Init+0xb8>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a54      	ldr	r2, [pc, #336]	; (8003510 <HAL_DMA_Init+0x1e8>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d00e      	beq.n	80033e0 <HAL_DMA_Init+0xb8>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a53      	ldr	r2, [pc, #332]	; (8003514 <HAL_DMA_Init+0x1ec>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d009      	beq.n	80033e0 <HAL_DMA_Init+0xb8>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a51      	ldr	r2, [pc, #324]	; (8003518 <HAL_DMA_Init+0x1f0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d004      	beq.n	80033e0 <HAL_DMA_Init+0xb8>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a50      	ldr	r2, [pc, #320]	; (800351c <HAL_DMA_Init+0x1f4>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d101      	bne.n	80033e4 <HAL_DMA_Init+0xbc>
 80033e0:	2301      	movs	r3, #1
 80033e2:	e000      	b.n	80033e6 <HAL_DMA_Init+0xbe>
 80033e4:	2300      	movs	r3, #0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 813b 	beq.w	8003662 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a37      	ldr	r2, [pc, #220]	; (80034e0 <HAL_DMA_Init+0x1b8>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d04a      	beq.n	800349c <HAL_DMA_Init+0x174>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a36      	ldr	r2, [pc, #216]	; (80034e4 <HAL_DMA_Init+0x1bc>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d045      	beq.n	800349c <HAL_DMA_Init+0x174>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a34      	ldr	r2, [pc, #208]	; (80034e8 <HAL_DMA_Init+0x1c0>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d040      	beq.n	800349c <HAL_DMA_Init+0x174>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a33      	ldr	r2, [pc, #204]	; (80034ec <HAL_DMA_Init+0x1c4>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d03b      	beq.n	800349c <HAL_DMA_Init+0x174>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a31      	ldr	r2, [pc, #196]	; (80034f0 <HAL_DMA_Init+0x1c8>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d036      	beq.n	800349c <HAL_DMA_Init+0x174>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a30      	ldr	r2, [pc, #192]	; (80034f4 <HAL_DMA_Init+0x1cc>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d031      	beq.n	800349c <HAL_DMA_Init+0x174>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a2e      	ldr	r2, [pc, #184]	; (80034f8 <HAL_DMA_Init+0x1d0>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d02c      	beq.n	800349c <HAL_DMA_Init+0x174>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a2d      	ldr	r2, [pc, #180]	; (80034fc <HAL_DMA_Init+0x1d4>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d027      	beq.n	800349c <HAL_DMA_Init+0x174>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a2b      	ldr	r2, [pc, #172]	; (8003500 <HAL_DMA_Init+0x1d8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d022      	beq.n	800349c <HAL_DMA_Init+0x174>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a2a      	ldr	r2, [pc, #168]	; (8003504 <HAL_DMA_Init+0x1dc>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d01d      	beq.n	800349c <HAL_DMA_Init+0x174>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a28      	ldr	r2, [pc, #160]	; (8003508 <HAL_DMA_Init+0x1e0>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d018      	beq.n	800349c <HAL_DMA_Init+0x174>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a27      	ldr	r2, [pc, #156]	; (800350c <HAL_DMA_Init+0x1e4>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d013      	beq.n	800349c <HAL_DMA_Init+0x174>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a25      	ldr	r2, [pc, #148]	; (8003510 <HAL_DMA_Init+0x1e8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d00e      	beq.n	800349c <HAL_DMA_Init+0x174>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a24      	ldr	r2, [pc, #144]	; (8003514 <HAL_DMA_Init+0x1ec>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d009      	beq.n	800349c <HAL_DMA_Init+0x174>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a22      	ldr	r2, [pc, #136]	; (8003518 <HAL_DMA_Init+0x1f0>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d004      	beq.n	800349c <HAL_DMA_Init+0x174>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a21      	ldr	r2, [pc, #132]	; (800351c <HAL_DMA_Init+0x1f4>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d108      	bne.n	80034ae <HAL_DMA_Init+0x186>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 0201 	bic.w	r2, r2, #1
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	e007      	b.n	80034be <HAL_DMA_Init+0x196>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0201 	bic.w	r2, r2, #1
 80034bc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80034be:	e02f      	b.n	8003520 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034c0:	f7fe fb3e 	bl	8001b40 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b05      	cmp	r3, #5
 80034cc:	d928      	bls.n	8003520 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2220      	movs	r2, #32
 80034d2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2203      	movs	r2, #3
 80034d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e246      	b.n	800396e <HAL_DMA_Init+0x646>
 80034e0:	40020010 	.word	0x40020010
 80034e4:	40020028 	.word	0x40020028
 80034e8:	40020040 	.word	0x40020040
 80034ec:	40020058 	.word	0x40020058
 80034f0:	40020070 	.word	0x40020070
 80034f4:	40020088 	.word	0x40020088
 80034f8:	400200a0 	.word	0x400200a0
 80034fc:	400200b8 	.word	0x400200b8
 8003500:	40020410 	.word	0x40020410
 8003504:	40020428 	.word	0x40020428
 8003508:	40020440 	.word	0x40020440
 800350c:	40020458 	.word	0x40020458
 8003510:	40020470 	.word	0x40020470
 8003514:	40020488 	.word	0x40020488
 8003518:	400204a0 	.word	0x400204a0
 800351c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1c8      	bne.n	80034c0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	4b83      	ldr	r3, [pc, #524]	; (8003748 <HAL_DMA_Init+0x420>)
 800353a:	4013      	ands	r3, r2
 800353c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003546:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003552:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800355e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	4313      	orrs	r3, r2
 800356a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003570:	2b04      	cmp	r3, #4
 8003572:	d107      	bne.n	8003584 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357c:	4313      	orrs	r3, r2
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	4313      	orrs	r3, r2
 8003582:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003584:	4b71      	ldr	r3, [pc, #452]	; (800374c <HAL_DMA_Init+0x424>)
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	4b71      	ldr	r3, [pc, #452]	; (8003750 <HAL_DMA_Init+0x428>)
 800358a:	4013      	ands	r3, r2
 800358c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003590:	d328      	bcc.n	80035e4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b28      	cmp	r3, #40	; 0x28
 8003598:	d903      	bls.n	80035a2 <HAL_DMA_Init+0x27a>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2b2e      	cmp	r3, #46	; 0x2e
 80035a0:	d917      	bls.n	80035d2 <HAL_DMA_Init+0x2aa>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b3e      	cmp	r3, #62	; 0x3e
 80035a8:	d903      	bls.n	80035b2 <HAL_DMA_Init+0x28a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b42      	cmp	r3, #66	; 0x42
 80035b0:	d90f      	bls.n	80035d2 <HAL_DMA_Init+0x2aa>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b46      	cmp	r3, #70	; 0x46
 80035b8:	d903      	bls.n	80035c2 <HAL_DMA_Init+0x29a>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2b48      	cmp	r3, #72	; 0x48
 80035c0:	d907      	bls.n	80035d2 <HAL_DMA_Init+0x2aa>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2b4e      	cmp	r3, #78	; 0x4e
 80035c8:	d905      	bls.n	80035d6 <HAL_DMA_Init+0x2ae>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b52      	cmp	r3, #82	; 0x52
 80035d0:	d801      	bhi.n	80035d6 <HAL_DMA_Init+0x2ae>
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <HAL_DMA_Init+0x2b0>
 80035d6:	2300      	movs	r3, #0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d003      	beq.n	80035e4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035e2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f023 0307 	bic.w	r3, r3, #7
 80035fa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	4313      	orrs	r3, r2
 8003604:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	2b04      	cmp	r3, #4
 800360c:	d117      	bne.n	800363e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	4313      	orrs	r3, r2
 8003616:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00e      	beq.n	800363e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f001 fdcf 	bl	80051c4 <DMA_CheckFifoParam>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d008      	beq.n	800363e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2240      	movs	r2, #64	; 0x40
 8003630:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e197      	b.n	800396e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f001 fd0a 	bl	8005060 <DMA_CalcBaseAndBitshift>
 800364c:	4603      	mov	r3, r0
 800364e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003654:	f003 031f 	and.w	r3, r3, #31
 8003658:	223f      	movs	r2, #63	; 0x3f
 800365a:	409a      	lsls	r2, r3
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	609a      	str	r2, [r3, #8]
 8003660:	e0cd      	b.n	80037fe <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a3b      	ldr	r2, [pc, #236]	; (8003754 <HAL_DMA_Init+0x42c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d022      	beq.n	80036b2 <HAL_DMA_Init+0x38a>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a39      	ldr	r2, [pc, #228]	; (8003758 <HAL_DMA_Init+0x430>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d01d      	beq.n	80036b2 <HAL_DMA_Init+0x38a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a38      	ldr	r2, [pc, #224]	; (800375c <HAL_DMA_Init+0x434>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d018      	beq.n	80036b2 <HAL_DMA_Init+0x38a>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a36      	ldr	r2, [pc, #216]	; (8003760 <HAL_DMA_Init+0x438>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d013      	beq.n	80036b2 <HAL_DMA_Init+0x38a>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a35      	ldr	r2, [pc, #212]	; (8003764 <HAL_DMA_Init+0x43c>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00e      	beq.n	80036b2 <HAL_DMA_Init+0x38a>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a33      	ldr	r2, [pc, #204]	; (8003768 <HAL_DMA_Init+0x440>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d009      	beq.n	80036b2 <HAL_DMA_Init+0x38a>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a32      	ldr	r2, [pc, #200]	; (800376c <HAL_DMA_Init+0x444>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d004      	beq.n	80036b2 <HAL_DMA_Init+0x38a>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a30      	ldr	r2, [pc, #192]	; (8003770 <HAL_DMA_Init+0x448>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d101      	bne.n	80036b6 <HAL_DMA_Init+0x38e>
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <HAL_DMA_Init+0x390>
 80036b6:	2300      	movs	r3, #0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 8097 	beq.w	80037ec <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a24      	ldr	r2, [pc, #144]	; (8003754 <HAL_DMA_Init+0x42c>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d021      	beq.n	800370c <HAL_DMA_Init+0x3e4>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a22      	ldr	r2, [pc, #136]	; (8003758 <HAL_DMA_Init+0x430>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d01c      	beq.n	800370c <HAL_DMA_Init+0x3e4>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a21      	ldr	r2, [pc, #132]	; (800375c <HAL_DMA_Init+0x434>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d017      	beq.n	800370c <HAL_DMA_Init+0x3e4>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a1f      	ldr	r2, [pc, #124]	; (8003760 <HAL_DMA_Init+0x438>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d012      	beq.n	800370c <HAL_DMA_Init+0x3e4>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a1e      	ldr	r2, [pc, #120]	; (8003764 <HAL_DMA_Init+0x43c>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d00d      	beq.n	800370c <HAL_DMA_Init+0x3e4>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a1c      	ldr	r2, [pc, #112]	; (8003768 <HAL_DMA_Init+0x440>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d008      	beq.n	800370c <HAL_DMA_Init+0x3e4>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a1b      	ldr	r2, [pc, #108]	; (800376c <HAL_DMA_Init+0x444>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d003      	beq.n	800370c <HAL_DMA_Init+0x3e4>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a19      	ldr	r2, [pc, #100]	; (8003770 <HAL_DMA_Init+0x448>)
 800370a:	4293      	cmp	r3, r2
 800370c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2202      	movs	r2, #2
 800371a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	4b12      	ldr	r3, [pc, #72]	; (8003774 <HAL_DMA_Init+0x44c>)
 800372a:	4013      	ands	r3, r2
 800372c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	2b40      	cmp	r3, #64	; 0x40
 8003734:	d020      	beq.n	8003778 <HAL_DMA_Init+0x450>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	2b80      	cmp	r3, #128	; 0x80
 800373c:	d102      	bne.n	8003744 <HAL_DMA_Init+0x41c>
 800373e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003742:	e01a      	b.n	800377a <HAL_DMA_Init+0x452>
 8003744:	2300      	movs	r3, #0
 8003746:	e018      	b.n	800377a <HAL_DMA_Init+0x452>
 8003748:	fe10803f 	.word	0xfe10803f
 800374c:	5c001000 	.word	0x5c001000
 8003750:	ffff0000 	.word	0xffff0000
 8003754:	58025408 	.word	0x58025408
 8003758:	5802541c 	.word	0x5802541c
 800375c:	58025430 	.word	0x58025430
 8003760:	58025444 	.word	0x58025444
 8003764:	58025458 	.word	0x58025458
 8003768:	5802546c 	.word	0x5802546c
 800376c:	58025480 	.word	0x58025480
 8003770:	58025494 	.word	0x58025494
 8003774:	fffe000f 	.word	0xfffe000f
 8003778:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	68d2      	ldr	r2, [r2, #12]
 800377e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003780:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003788:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003790:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003798:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80037a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80037a8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	461a      	mov	r2, r3
 80037be:	4b6e      	ldr	r3, [pc, #440]	; (8003978 <HAL_DMA_Init+0x650>)
 80037c0:	4413      	add	r3, r2
 80037c2:	4a6e      	ldr	r2, [pc, #440]	; (800397c <HAL_DMA_Init+0x654>)
 80037c4:	fba2 2303 	umull	r2, r3, r2, r3
 80037c8:	091b      	lsrs	r3, r3, #4
 80037ca:	009a      	lsls	r2, r3, #2
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f001 fc45 	bl	8005060 <DMA_CalcBaseAndBitshift>
 80037d6:	4603      	mov	r3, r0
 80037d8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037de:	f003 031f 	and.w	r3, r3, #31
 80037e2:	2201      	movs	r2, #1
 80037e4:	409a      	lsls	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	605a      	str	r2, [r3, #4]
 80037ea:	e008      	b.n	80037fe <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2240      	movs	r2, #64	; 0x40
 80037f0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2203      	movs	r2, #3
 80037f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e0b7      	b.n	800396e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a5f      	ldr	r2, [pc, #380]	; (8003980 <HAL_DMA_Init+0x658>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d072      	beq.n	80038ee <HAL_DMA_Init+0x5c6>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a5d      	ldr	r2, [pc, #372]	; (8003984 <HAL_DMA_Init+0x65c>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d06d      	beq.n	80038ee <HAL_DMA_Init+0x5c6>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a5c      	ldr	r2, [pc, #368]	; (8003988 <HAL_DMA_Init+0x660>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d068      	beq.n	80038ee <HAL_DMA_Init+0x5c6>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a5a      	ldr	r2, [pc, #360]	; (800398c <HAL_DMA_Init+0x664>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d063      	beq.n	80038ee <HAL_DMA_Init+0x5c6>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a59      	ldr	r2, [pc, #356]	; (8003990 <HAL_DMA_Init+0x668>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d05e      	beq.n	80038ee <HAL_DMA_Init+0x5c6>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a57      	ldr	r2, [pc, #348]	; (8003994 <HAL_DMA_Init+0x66c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d059      	beq.n	80038ee <HAL_DMA_Init+0x5c6>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a56      	ldr	r2, [pc, #344]	; (8003998 <HAL_DMA_Init+0x670>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d054      	beq.n	80038ee <HAL_DMA_Init+0x5c6>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a54      	ldr	r2, [pc, #336]	; (800399c <HAL_DMA_Init+0x674>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d04f      	beq.n	80038ee <HAL_DMA_Init+0x5c6>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a53      	ldr	r2, [pc, #332]	; (80039a0 <HAL_DMA_Init+0x678>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d04a      	beq.n	80038ee <HAL_DMA_Init+0x5c6>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a51      	ldr	r2, [pc, #324]	; (80039a4 <HAL_DMA_Init+0x67c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d045      	beq.n	80038ee <HAL_DMA_Init+0x5c6>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a50      	ldr	r2, [pc, #320]	; (80039a8 <HAL_DMA_Init+0x680>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d040      	beq.n	80038ee <HAL_DMA_Init+0x5c6>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a4e      	ldr	r2, [pc, #312]	; (80039ac <HAL_DMA_Init+0x684>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d03b      	beq.n	80038ee <HAL_DMA_Init+0x5c6>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a4d      	ldr	r2, [pc, #308]	; (80039b0 <HAL_DMA_Init+0x688>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d036      	beq.n	80038ee <HAL_DMA_Init+0x5c6>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a4b      	ldr	r2, [pc, #300]	; (80039b4 <HAL_DMA_Init+0x68c>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d031      	beq.n	80038ee <HAL_DMA_Init+0x5c6>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a4a      	ldr	r2, [pc, #296]	; (80039b8 <HAL_DMA_Init+0x690>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d02c      	beq.n	80038ee <HAL_DMA_Init+0x5c6>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a48      	ldr	r2, [pc, #288]	; (80039bc <HAL_DMA_Init+0x694>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d027      	beq.n	80038ee <HAL_DMA_Init+0x5c6>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a47      	ldr	r2, [pc, #284]	; (80039c0 <HAL_DMA_Init+0x698>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d022      	beq.n	80038ee <HAL_DMA_Init+0x5c6>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a45      	ldr	r2, [pc, #276]	; (80039c4 <HAL_DMA_Init+0x69c>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d01d      	beq.n	80038ee <HAL_DMA_Init+0x5c6>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a44      	ldr	r2, [pc, #272]	; (80039c8 <HAL_DMA_Init+0x6a0>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d018      	beq.n	80038ee <HAL_DMA_Init+0x5c6>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a42      	ldr	r2, [pc, #264]	; (80039cc <HAL_DMA_Init+0x6a4>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d013      	beq.n	80038ee <HAL_DMA_Init+0x5c6>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a41      	ldr	r2, [pc, #260]	; (80039d0 <HAL_DMA_Init+0x6a8>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d00e      	beq.n	80038ee <HAL_DMA_Init+0x5c6>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a3f      	ldr	r2, [pc, #252]	; (80039d4 <HAL_DMA_Init+0x6ac>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d009      	beq.n	80038ee <HAL_DMA_Init+0x5c6>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a3e      	ldr	r2, [pc, #248]	; (80039d8 <HAL_DMA_Init+0x6b0>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d004      	beq.n	80038ee <HAL_DMA_Init+0x5c6>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a3c      	ldr	r2, [pc, #240]	; (80039dc <HAL_DMA_Init+0x6b4>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d101      	bne.n	80038f2 <HAL_DMA_Init+0x5ca>
 80038ee:	2301      	movs	r3, #1
 80038f0:	e000      	b.n	80038f4 <HAL_DMA_Init+0x5cc>
 80038f2:	2300      	movs	r3, #0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d032      	beq.n	800395e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f001 fcdf 	bl	80052bc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	2b80      	cmp	r3, #128	; 0x80
 8003904:	d102      	bne.n	800390c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003920:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d010      	beq.n	800394c <HAL_DMA_Init+0x624>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b08      	cmp	r3, #8
 8003930:	d80c      	bhi.n	800394c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f001 fd5c 	bl	80053f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003948:	605a      	str	r2, [r3, #4]
 800394a:	e008      	b.n	800395e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3718      	adds	r7, #24
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	a7fdabf8 	.word	0xa7fdabf8
 800397c:	cccccccd 	.word	0xcccccccd
 8003980:	40020010 	.word	0x40020010
 8003984:	40020028 	.word	0x40020028
 8003988:	40020040 	.word	0x40020040
 800398c:	40020058 	.word	0x40020058
 8003990:	40020070 	.word	0x40020070
 8003994:	40020088 	.word	0x40020088
 8003998:	400200a0 	.word	0x400200a0
 800399c:	400200b8 	.word	0x400200b8
 80039a0:	40020410 	.word	0x40020410
 80039a4:	40020428 	.word	0x40020428
 80039a8:	40020440 	.word	0x40020440
 80039ac:	40020458 	.word	0x40020458
 80039b0:	40020470 	.word	0x40020470
 80039b4:	40020488 	.word	0x40020488
 80039b8:	400204a0 	.word	0x400204a0
 80039bc:	400204b8 	.word	0x400204b8
 80039c0:	58025408 	.word	0x58025408
 80039c4:	5802541c 	.word	0x5802541c
 80039c8:	58025430 	.word	0x58025430
 80039cc:	58025444 	.word	0x58025444
 80039d0:	58025458 	.word	0x58025458
 80039d4:	5802546c 	.word	0x5802546c
 80039d8:	58025480 	.word	0x58025480
 80039dc:	58025494 	.word	0x58025494

080039e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
 80039ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039ee:	2300      	movs	r3, #0
 80039f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e226      	b.n	8003e4a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d101      	bne.n	8003a0a <HAL_DMA_Start_IT+0x2a>
 8003a06:	2302      	movs	r3, #2
 8003a08:	e21f      	b.n	8003e4a <HAL_DMA_Start_IT+0x46a>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	f040 820a 	bne.w	8003e34 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a68      	ldr	r2, [pc, #416]	; (8003bd4 <HAL_DMA_Start_IT+0x1f4>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d04a      	beq.n	8003ace <HAL_DMA_Start_IT+0xee>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a66      	ldr	r2, [pc, #408]	; (8003bd8 <HAL_DMA_Start_IT+0x1f8>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d045      	beq.n	8003ace <HAL_DMA_Start_IT+0xee>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a65      	ldr	r2, [pc, #404]	; (8003bdc <HAL_DMA_Start_IT+0x1fc>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d040      	beq.n	8003ace <HAL_DMA_Start_IT+0xee>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a63      	ldr	r2, [pc, #396]	; (8003be0 <HAL_DMA_Start_IT+0x200>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d03b      	beq.n	8003ace <HAL_DMA_Start_IT+0xee>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a62      	ldr	r2, [pc, #392]	; (8003be4 <HAL_DMA_Start_IT+0x204>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d036      	beq.n	8003ace <HAL_DMA_Start_IT+0xee>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a60      	ldr	r2, [pc, #384]	; (8003be8 <HAL_DMA_Start_IT+0x208>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d031      	beq.n	8003ace <HAL_DMA_Start_IT+0xee>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a5f      	ldr	r2, [pc, #380]	; (8003bec <HAL_DMA_Start_IT+0x20c>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d02c      	beq.n	8003ace <HAL_DMA_Start_IT+0xee>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a5d      	ldr	r2, [pc, #372]	; (8003bf0 <HAL_DMA_Start_IT+0x210>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d027      	beq.n	8003ace <HAL_DMA_Start_IT+0xee>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a5c      	ldr	r2, [pc, #368]	; (8003bf4 <HAL_DMA_Start_IT+0x214>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d022      	beq.n	8003ace <HAL_DMA_Start_IT+0xee>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a5a      	ldr	r2, [pc, #360]	; (8003bf8 <HAL_DMA_Start_IT+0x218>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d01d      	beq.n	8003ace <HAL_DMA_Start_IT+0xee>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a59      	ldr	r2, [pc, #356]	; (8003bfc <HAL_DMA_Start_IT+0x21c>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d018      	beq.n	8003ace <HAL_DMA_Start_IT+0xee>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a57      	ldr	r2, [pc, #348]	; (8003c00 <HAL_DMA_Start_IT+0x220>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d013      	beq.n	8003ace <HAL_DMA_Start_IT+0xee>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a56      	ldr	r2, [pc, #344]	; (8003c04 <HAL_DMA_Start_IT+0x224>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d00e      	beq.n	8003ace <HAL_DMA_Start_IT+0xee>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a54      	ldr	r2, [pc, #336]	; (8003c08 <HAL_DMA_Start_IT+0x228>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d009      	beq.n	8003ace <HAL_DMA_Start_IT+0xee>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a53      	ldr	r2, [pc, #332]	; (8003c0c <HAL_DMA_Start_IT+0x22c>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d004      	beq.n	8003ace <HAL_DMA_Start_IT+0xee>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a51      	ldr	r2, [pc, #324]	; (8003c10 <HAL_DMA_Start_IT+0x230>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d108      	bne.n	8003ae0 <HAL_DMA_Start_IT+0x100>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0201 	bic.w	r2, r2, #1
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	e007      	b.n	8003af0 <HAL_DMA_Start_IT+0x110>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 0201 	bic.w	r2, r2, #1
 8003aee:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	68b9      	ldr	r1, [r7, #8]
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f001 f906 	bl	8004d08 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a34      	ldr	r2, [pc, #208]	; (8003bd4 <HAL_DMA_Start_IT+0x1f4>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d04a      	beq.n	8003b9c <HAL_DMA_Start_IT+0x1bc>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a33      	ldr	r2, [pc, #204]	; (8003bd8 <HAL_DMA_Start_IT+0x1f8>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d045      	beq.n	8003b9c <HAL_DMA_Start_IT+0x1bc>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a31      	ldr	r2, [pc, #196]	; (8003bdc <HAL_DMA_Start_IT+0x1fc>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d040      	beq.n	8003b9c <HAL_DMA_Start_IT+0x1bc>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a30      	ldr	r2, [pc, #192]	; (8003be0 <HAL_DMA_Start_IT+0x200>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d03b      	beq.n	8003b9c <HAL_DMA_Start_IT+0x1bc>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a2e      	ldr	r2, [pc, #184]	; (8003be4 <HAL_DMA_Start_IT+0x204>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d036      	beq.n	8003b9c <HAL_DMA_Start_IT+0x1bc>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a2d      	ldr	r2, [pc, #180]	; (8003be8 <HAL_DMA_Start_IT+0x208>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d031      	beq.n	8003b9c <HAL_DMA_Start_IT+0x1bc>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a2b      	ldr	r2, [pc, #172]	; (8003bec <HAL_DMA_Start_IT+0x20c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d02c      	beq.n	8003b9c <HAL_DMA_Start_IT+0x1bc>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a2a      	ldr	r2, [pc, #168]	; (8003bf0 <HAL_DMA_Start_IT+0x210>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d027      	beq.n	8003b9c <HAL_DMA_Start_IT+0x1bc>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a28      	ldr	r2, [pc, #160]	; (8003bf4 <HAL_DMA_Start_IT+0x214>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d022      	beq.n	8003b9c <HAL_DMA_Start_IT+0x1bc>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a27      	ldr	r2, [pc, #156]	; (8003bf8 <HAL_DMA_Start_IT+0x218>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d01d      	beq.n	8003b9c <HAL_DMA_Start_IT+0x1bc>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a25      	ldr	r2, [pc, #148]	; (8003bfc <HAL_DMA_Start_IT+0x21c>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d018      	beq.n	8003b9c <HAL_DMA_Start_IT+0x1bc>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a24      	ldr	r2, [pc, #144]	; (8003c00 <HAL_DMA_Start_IT+0x220>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d013      	beq.n	8003b9c <HAL_DMA_Start_IT+0x1bc>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a22      	ldr	r2, [pc, #136]	; (8003c04 <HAL_DMA_Start_IT+0x224>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d00e      	beq.n	8003b9c <HAL_DMA_Start_IT+0x1bc>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a21      	ldr	r2, [pc, #132]	; (8003c08 <HAL_DMA_Start_IT+0x228>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d009      	beq.n	8003b9c <HAL_DMA_Start_IT+0x1bc>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a1f      	ldr	r2, [pc, #124]	; (8003c0c <HAL_DMA_Start_IT+0x22c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d004      	beq.n	8003b9c <HAL_DMA_Start_IT+0x1bc>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a1e      	ldr	r2, [pc, #120]	; (8003c10 <HAL_DMA_Start_IT+0x230>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d101      	bne.n	8003ba0 <HAL_DMA_Start_IT+0x1c0>
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e000      	b.n	8003ba2 <HAL_DMA_Start_IT+0x1c2>
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d036      	beq.n	8003c14 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f023 021e 	bic.w	r2, r3, #30
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f042 0216 	orr.w	r2, r2, #22
 8003bb8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d03e      	beq.n	8003c40 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f042 0208 	orr.w	r2, r2, #8
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	e035      	b.n	8003c40 <HAL_DMA_Start_IT+0x260>
 8003bd4:	40020010 	.word	0x40020010
 8003bd8:	40020028 	.word	0x40020028
 8003bdc:	40020040 	.word	0x40020040
 8003be0:	40020058 	.word	0x40020058
 8003be4:	40020070 	.word	0x40020070
 8003be8:	40020088 	.word	0x40020088
 8003bec:	400200a0 	.word	0x400200a0
 8003bf0:	400200b8 	.word	0x400200b8
 8003bf4:	40020410 	.word	0x40020410
 8003bf8:	40020428 	.word	0x40020428
 8003bfc:	40020440 	.word	0x40020440
 8003c00:	40020458 	.word	0x40020458
 8003c04:	40020470 	.word	0x40020470
 8003c08:	40020488 	.word	0x40020488
 8003c0c:	400204a0 	.word	0x400204a0
 8003c10:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f023 020e 	bic.w	r2, r3, #14
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 020a 	orr.w	r2, r2, #10
 8003c26:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d007      	beq.n	8003c40 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0204 	orr.w	r2, r2, #4
 8003c3e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a83      	ldr	r2, [pc, #524]	; (8003e54 <HAL_DMA_Start_IT+0x474>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d072      	beq.n	8003d30 <HAL_DMA_Start_IT+0x350>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a82      	ldr	r2, [pc, #520]	; (8003e58 <HAL_DMA_Start_IT+0x478>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d06d      	beq.n	8003d30 <HAL_DMA_Start_IT+0x350>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a80      	ldr	r2, [pc, #512]	; (8003e5c <HAL_DMA_Start_IT+0x47c>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d068      	beq.n	8003d30 <HAL_DMA_Start_IT+0x350>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a7f      	ldr	r2, [pc, #508]	; (8003e60 <HAL_DMA_Start_IT+0x480>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d063      	beq.n	8003d30 <HAL_DMA_Start_IT+0x350>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a7d      	ldr	r2, [pc, #500]	; (8003e64 <HAL_DMA_Start_IT+0x484>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d05e      	beq.n	8003d30 <HAL_DMA_Start_IT+0x350>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a7c      	ldr	r2, [pc, #496]	; (8003e68 <HAL_DMA_Start_IT+0x488>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d059      	beq.n	8003d30 <HAL_DMA_Start_IT+0x350>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a7a      	ldr	r2, [pc, #488]	; (8003e6c <HAL_DMA_Start_IT+0x48c>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d054      	beq.n	8003d30 <HAL_DMA_Start_IT+0x350>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a79      	ldr	r2, [pc, #484]	; (8003e70 <HAL_DMA_Start_IT+0x490>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d04f      	beq.n	8003d30 <HAL_DMA_Start_IT+0x350>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a77      	ldr	r2, [pc, #476]	; (8003e74 <HAL_DMA_Start_IT+0x494>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d04a      	beq.n	8003d30 <HAL_DMA_Start_IT+0x350>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a76      	ldr	r2, [pc, #472]	; (8003e78 <HAL_DMA_Start_IT+0x498>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d045      	beq.n	8003d30 <HAL_DMA_Start_IT+0x350>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a74      	ldr	r2, [pc, #464]	; (8003e7c <HAL_DMA_Start_IT+0x49c>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d040      	beq.n	8003d30 <HAL_DMA_Start_IT+0x350>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a73      	ldr	r2, [pc, #460]	; (8003e80 <HAL_DMA_Start_IT+0x4a0>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d03b      	beq.n	8003d30 <HAL_DMA_Start_IT+0x350>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a71      	ldr	r2, [pc, #452]	; (8003e84 <HAL_DMA_Start_IT+0x4a4>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d036      	beq.n	8003d30 <HAL_DMA_Start_IT+0x350>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a70      	ldr	r2, [pc, #448]	; (8003e88 <HAL_DMA_Start_IT+0x4a8>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d031      	beq.n	8003d30 <HAL_DMA_Start_IT+0x350>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a6e      	ldr	r2, [pc, #440]	; (8003e8c <HAL_DMA_Start_IT+0x4ac>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d02c      	beq.n	8003d30 <HAL_DMA_Start_IT+0x350>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a6d      	ldr	r2, [pc, #436]	; (8003e90 <HAL_DMA_Start_IT+0x4b0>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d027      	beq.n	8003d30 <HAL_DMA_Start_IT+0x350>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a6b      	ldr	r2, [pc, #428]	; (8003e94 <HAL_DMA_Start_IT+0x4b4>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d022      	beq.n	8003d30 <HAL_DMA_Start_IT+0x350>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a6a      	ldr	r2, [pc, #424]	; (8003e98 <HAL_DMA_Start_IT+0x4b8>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d01d      	beq.n	8003d30 <HAL_DMA_Start_IT+0x350>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a68      	ldr	r2, [pc, #416]	; (8003e9c <HAL_DMA_Start_IT+0x4bc>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d018      	beq.n	8003d30 <HAL_DMA_Start_IT+0x350>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a67      	ldr	r2, [pc, #412]	; (8003ea0 <HAL_DMA_Start_IT+0x4c0>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d013      	beq.n	8003d30 <HAL_DMA_Start_IT+0x350>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a65      	ldr	r2, [pc, #404]	; (8003ea4 <HAL_DMA_Start_IT+0x4c4>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d00e      	beq.n	8003d30 <HAL_DMA_Start_IT+0x350>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a64      	ldr	r2, [pc, #400]	; (8003ea8 <HAL_DMA_Start_IT+0x4c8>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d009      	beq.n	8003d30 <HAL_DMA_Start_IT+0x350>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a62      	ldr	r2, [pc, #392]	; (8003eac <HAL_DMA_Start_IT+0x4cc>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d004      	beq.n	8003d30 <HAL_DMA_Start_IT+0x350>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a61      	ldr	r2, [pc, #388]	; (8003eb0 <HAL_DMA_Start_IT+0x4d0>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d101      	bne.n	8003d34 <HAL_DMA_Start_IT+0x354>
 8003d30:	2301      	movs	r3, #1
 8003d32:	e000      	b.n	8003d36 <HAL_DMA_Start_IT+0x356>
 8003d34:	2300      	movs	r3, #0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d01a      	beq.n	8003d70 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d007      	beq.n	8003d58 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d56:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d007      	beq.n	8003d70 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d6e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a37      	ldr	r2, [pc, #220]	; (8003e54 <HAL_DMA_Start_IT+0x474>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d04a      	beq.n	8003e10 <HAL_DMA_Start_IT+0x430>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a36      	ldr	r2, [pc, #216]	; (8003e58 <HAL_DMA_Start_IT+0x478>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d045      	beq.n	8003e10 <HAL_DMA_Start_IT+0x430>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a34      	ldr	r2, [pc, #208]	; (8003e5c <HAL_DMA_Start_IT+0x47c>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d040      	beq.n	8003e10 <HAL_DMA_Start_IT+0x430>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a33      	ldr	r2, [pc, #204]	; (8003e60 <HAL_DMA_Start_IT+0x480>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d03b      	beq.n	8003e10 <HAL_DMA_Start_IT+0x430>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a31      	ldr	r2, [pc, #196]	; (8003e64 <HAL_DMA_Start_IT+0x484>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d036      	beq.n	8003e10 <HAL_DMA_Start_IT+0x430>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a30      	ldr	r2, [pc, #192]	; (8003e68 <HAL_DMA_Start_IT+0x488>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d031      	beq.n	8003e10 <HAL_DMA_Start_IT+0x430>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a2e      	ldr	r2, [pc, #184]	; (8003e6c <HAL_DMA_Start_IT+0x48c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d02c      	beq.n	8003e10 <HAL_DMA_Start_IT+0x430>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a2d      	ldr	r2, [pc, #180]	; (8003e70 <HAL_DMA_Start_IT+0x490>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d027      	beq.n	8003e10 <HAL_DMA_Start_IT+0x430>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a2b      	ldr	r2, [pc, #172]	; (8003e74 <HAL_DMA_Start_IT+0x494>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d022      	beq.n	8003e10 <HAL_DMA_Start_IT+0x430>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a2a      	ldr	r2, [pc, #168]	; (8003e78 <HAL_DMA_Start_IT+0x498>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d01d      	beq.n	8003e10 <HAL_DMA_Start_IT+0x430>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a28      	ldr	r2, [pc, #160]	; (8003e7c <HAL_DMA_Start_IT+0x49c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d018      	beq.n	8003e10 <HAL_DMA_Start_IT+0x430>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a27      	ldr	r2, [pc, #156]	; (8003e80 <HAL_DMA_Start_IT+0x4a0>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d013      	beq.n	8003e10 <HAL_DMA_Start_IT+0x430>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a25      	ldr	r2, [pc, #148]	; (8003e84 <HAL_DMA_Start_IT+0x4a4>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d00e      	beq.n	8003e10 <HAL_DMA_Start_IT+0x430>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a24      	ldr	r2, [pc, #144]	; (8003e88 <HAL_DMA_Start_IT+0x4a8>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d009      	beq.n	8003e10 <HAL_DMA_Start_IT+0x430>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a22      	ldr	r2, [pc, #136]	; (8003e8c <HAL_DMA_Start_IT+0x4ac>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d004      	beq.n	8003e10 <HAL_DMA_Start_IT+0x430>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a21      	ldr	r2, [pc, #132]	; (8003e90 <HAL_DMA_Start_IT+0x4b0>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d108      	bne.n	8003e22 <HAL_DMA_Start_IT+0x442>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0201 	orr.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	e012      	b.n	8003e48 <HAL_DMA_Start_IT+0x468>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f042 0201 	orr.w	r2, r2, #1
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	e009      	b.n	8003e48 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e42:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	40020010 	.word	0x40020010
 8003e58:	40020028 	.word	0x40020028
 8003e5c:	40020040 	.word	0x40020040
 8003e60:	40020058 	.word	0x40020058
 8003e64:	40020070 	.word	0x40020070
 8003e68:	40020088 	.word	0x40020088
 8003e6c:	400200a0 	.word	0x400200a0
 8003e70:	400200b8 	.word	0x400200b8
 8003e74:	40020410 	.word	0x40020410
 8003e78:	40020428 	.word	0x40020428
 8003e7c:	40020440 	.word	0x40020440
 8003e80:	40020458 	.word	0x40020458
 8003e84:	40020470 	.word	0x40020470
 8003e88:	40020488 	.word	0x40020488
 8003e8c:	400204a0 	.word	0x400204a0
 8003e90:	400204b8 	.word	0x400204b8
 8003e94:	58025408 	.word	0x58025408
 8003e98:	5802541c 	.word	0x5802541c
 8003e9c:	58025430 	.word	0x58025430
 8003ea0:	58025444 	.word	0x58025444
 8003ea4:	58025458 	.word	0x58025458
 8003ea8:	5802546c 	.word	0x5802546c
 8003eac:	58025480 	.word	0x58025480
 8003eb0:	58025494 	.word	0x58025494

08003eb4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b08a      	sub	sp, #40	; 0x28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ec0:	4b67      	ldr	r3, [pc, #412]	; (8004060 <HAL_DMA_IRQHandler+0x1ac>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a67      	ldr	r2, [pc, #412]	; (8004064 <HAL_DMA_IRQHandler+0x1b0>)
 8003ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eca:	0a9b      	lsrs	r3, r3, #10
 8003ecc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003eda:	6a3b      	ldr	r3, [r7, #32]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a5f      	ldr	r2, [pc, #380]	; (8004068 <HAL_DMA_IRQHandler+0x1b4>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d04a      	beq.n	8003f86 <HAL_DMA_IRQHandler+0xd2>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a5d      	ldr	r2, [pc, #372]	; (800406c <HAL_DMA_IRQHandler+0x1b8>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d045      	beq.n	8003f86 <HAL_DMA_IRQHandler+0xd2>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a5c      	ldr	r2, [pc, #368]	; (8004070 <HAL_DMA_IRQHandler+0x1bc>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d040      	beq.n	8003f86 <HAL_DMA_IRQHandler+0xd2>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a5a      	ldr	r2, [pc, #360]	; (8004074 <HAL_DMA_IRQHandler+0x1c0>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d03b      	beq.n	8003f86 <HAL_DMA_IRQHandler+0xd2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a59      	ldr	r2, [pc, #356]	; (8004078 <HAL_DMA_IRQHandler+0x1c4>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d036      	beq.n	8003f86 <HAL_DMA_IRQHandler+0xd2>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a57      	ldr	r2, [pc, #348]	; (800407c <HAL_DMA_IRQHandler+0x1c8>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d031      	beq.n	8003f86 <HAL_DMA_IRQHandler+0xd2>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a56      	ldr	r2, [pc, #344]	; (8004080 <HAL_DMA_IRQHandler+0x1cc>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d02c      	beq.n	8003f86 <HAL_DMA_IRQHandler+0xd2>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a54      	ldr	r2, [pc, #336]	; (8004084 <HAL_DMA_IRQHandler+0x1d0>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d027      	beq.n	8003f86 <HAL_DMA_IRQHandler+0xd2>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a53      	ldr	r2, [pc, #332]	; (8004088 <HAL_DMA_IRQHandler+0x1d4>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d022      	beq.n	8003f86 <HAL_DMA_IRQHandler+0xd2>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a51      	ldr	r2, [pc, #324]	; (800408c <HAL_DMA_IRQHandler+0x1d8>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d01d      	beq.n	8003f86 <HAL_DMA_IRQHandler+0xd2>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a50      	ldr	r2, [pc, #320]	; (8004090 <HAL_DMA_IRQHandler+0x1dc>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d018      	beq.n	8003f86 <HAL_DMA_IRQHandler+0xd2>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a4e      	ldr	r2, [pc, #312]	; (8004094 <HAL_DMA_IRQHandler+0x1e0>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d013      	beq.n	8003f86 <HAL_DMA_IRQHandler+0xd2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a4d      	ldr	r2, [pc, #308]	; (8004098 <HAL_DMA_IRQHandler+0x1e4>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d00e      	beq.n	8003f86 <HAL_DMA_IRQHandler+0xd2>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a4b      	ldr	r2, [pc, #300]	; (800409c <HAL_DMA_IRQHandler+0x1e8>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d009      	beq.n	8003f86 <HAL_DMA_IRQHandler+0xd2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a4a      	ldr	r2, [pc, #296]	; (80040a0 <HAL_DMA_IRQHandler+0x1ec>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d004      	beq.n	8003f86 <HAL_DMA_IRQHandler+0xd2>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a48      	ldr	r2, [pc, #288]	; (80040a4 <HAL_DMA_IRQHandler+0x1f0>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d101      	bne.n	8003f8a <HAL_DMA_IRQHandler+0xd6>
 8003f86:	2301      	movs	r3, #1
 8003f88:	e000      	b.n	8003f8c <HAL_DMA_IRQHandler+0xd8>
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 842b 	beq.w	80047e8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f96:	f003 031f 	and.w	r3, r3, #31
 8003f9a:	2208      	movs	r2, #8
 8003f9c:	409a      	lsls	r2, r3
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 80a2 	beq.w	80040ec <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a2e      	ldr	r2, [pc, #184]	; (8004068 <HAL_DMA_IRQHandler+0x1b4>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d04a      	beq.n	8004048 <HAL_DMA_IRQHandler+0x194>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a2d      	ldr	r2, [pc, #180]	; (800406c <HAL_DMA_IRQHandler+0x1b8>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d045      	beq.n	8004048 <HAL_DMA_IRQHandler+0x194>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a2b      	ldr	r2, [pc, #172]	; (8004070 <HAL_DMA_IRQHandler+0x1bc>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d040      	beq.n	8004048 <HAL_DMA_IRQHandler+0x194>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a2a      	ldr	r2, [pc, #168]	; (8004074 <HAL_DMA_IRQHandler+0x1c0>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d03b      	beq.n	8004048 <HAL_DMA_IRQHandler+0x194>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a28      	ldr	r2, [pc, #160]	; (8004078 <HAL_DMA_IRQHandler+0x1c4>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d036      	beq.n	8004048 <HAL_DMA_IRQHandler+0x194>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a27      	ldr	r2, [pc, #156]	; (800407c <HAL_DMA_IRQHandler+0x1c8>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d031      	beq.n	8004048 <HAL_DMA_IRQHandler+0x194>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a25      	ldr	r2, [pc, #148]	; (8004080 <HAL_DMA_IRQHandler+0x1cc>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d02c      	beq.n	8004048 <HAL_DMA_IRQHandler+0x194>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a24      	ldr	r2, [pc, #144]	; (8004084 <HAL_DMA_IRQHandler+0x1d0>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d027      	beq.n	8004048 <HAL_DMA_IRQHandler+0x194>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a22      	ldr	r2, [pc, #136]	; (8004088 <HAL_DMA_IRQHandler+0x1d4>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d022      	beq.n	8004048 <HAL_DMA_IRQHandler+0x194>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a21      	ldr	r2, [pc, #132]	; (800408c <HAL_DMA_IRQHandler+0x1d8>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d01d      	beq.n	8004048 <HAL_DMA_IRQHandler+0x194>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a1f      	ldr	r2, [pc, #124]	; (8004090 <HAL_DMA_IRQHandler+0x1dc>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d018      	beq.n	8004048 <HAL_DMA_IRQHandler+0x194>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a1e      	ldr	r2, [pc, #120]	; (8004094 <HAL_DMA_IRQHandler+0x1e0>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d013      	beq.n	8004048 <HAL_DMA_IRQHandler+0x194>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a1c      	ldr	r2, [pc, #112]	; (8004098 <HAL_DMA_IRQHandler+0x1e4>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d00e      	beq.n	8004048 <HAL_DMA_IRQHandler+0x194>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a1b      	ldr	r2, [pc, #108]	; (800409c <HAL_DMA_IRQHandler+0x1e8>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d009      	beq.n	8004048 <HAL_DMA_IRQHandler+0x194>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a19      	ldr	r2, [pc, #100]	; (80040a0 <HAL_DMA_IRQHandler+0x1ec>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d004      	beq.n	8004048 <HAL_DMA_IRQHandler+0x194>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a18      	ldr	r2, [pc, #96]	; (80040a4 <HAL_DMA_IRQHandler+0x1f0>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d12f      	bne.n	80040a8 <HAL_DMA_IRQHandler+0x1f4>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0304 	and.w	r3, r3, #4
 8004052:	2b00      	cmp	r3, #0
 8004054:	bf14      	ite	ne
 8004056:	2301      	movne	r3, #1
 8004058:	2300      	moveq	r3, #0
 800405a:	b2db      	uxtb	r3, r3
 800405c:	e02e      	b.n	80040bc <HAL_DMA_IRQHandler+0x208>
 800405e:	bf00      	nop
 8004060:	2400000c 	.word	0x2400000c
 8004064:	1b4e81b5 	.word	0x1b4e81b5
 8004068:	40020010 	.word	0x40020010
 800406c:	40020028 	.word	0x40020028
 8004070:	40020040 	.word	0x40020040
 8004074:	40020058 	.word	0x40020058
 8004078:	40020070 	.word	0x40020070
 800407c:	40020088 	.word	0x40020088
 8004080:	400200a0 	.word	0x400200a0
 8004084:	400200b8 	.word	0x400200b8
 8004088:	40020410 	.word	0x40020410
 800408c:	40020428 	.word	0x40020428
 8004090:	40020440 	.word	0x40020440
 8004094:	40020458 	.word	0x40020458
 8004098:	40020470 	.word	0x40020470
 800409c:	40020488 	.word	0x40020488
 80040a0:	400204a0 	.word	0x400204a0
 80040a4:	400204b8 	.word	0x400204b8
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	bf14      	ite	ne
 80040b6:	2301      	movne	r3, #1
 80040b8:	2300      	moveq	r3, #0
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d015      	beq.n	80040ec <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f022 0204 	bic.w	r2, r2, #4
 80040ce:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d4:	f003 031f 	and.w	r3, r3, #31
 80040d8:	2208      	movs	r2, #8
 80040da:	409a      	lsls	r2, r3
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e4:	f043 0201 	orr.w	r2, r3, #1
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f0:	f003 031f 	and.w	r3, r3, #31
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	fa22 f303 	lsr.w	r3, r2, r3
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d06e      	beq.n	80041e0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a69      	ldr	r2, [pc, #420]	; (80042ac <HAL_DMA_IRQHandler+0x3f8>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d04a      	beq.n	80041a2 <HAL_DMA_IRQHandler+0x2ee>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a67      	ldr	r2, [pc, #412]	; (80042b0 <HAL_DMA_IRQHandler+0x3fc>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d045      	beq.n	80041a2 <HAL_DMA_IRQHandler+0x2ee>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a66      	ldr	r2, [pc, #408]	; (80042b4 <HAL_DMA_IRQHandler+0x400>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d040      	beq.n	80041a2 <HAL_DMA_IRQHandler+0x2ee>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a64      	ldr	r2, [pc, #400]	; (80042b8 <HAL_DMA_IRQHandler+0x404>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d03b      	beq.n	80041a2 <HAL_DMA_IRQHandler+0x2ee>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a63      	ldr	r2, [pc, #396]	; (80042bc <HAL_DMA_IRQHandler+0x408>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d036      	beq.n	80041a2 <HAL_DMA_IRQHandler+0x2ee>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a61      	ldr	r2, [pc, #388]	; (80042c0 <HAL_DMA_IRQHandler+0x40c>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d031      	beq.n	80041a2 <HAL_DMA_IRQHandler+0x2ee>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a60      	ldr	r2, [pc, #384]	; (80042c4 <HAL_DMA_IRQHandler+0x410>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d02c      	beq.n	80041a2 <HAL_DMA_IRQHandler+0x2ee>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a5e      	ldr	r2, [pc, #376]	; (80042c8 <HAL_DMA_IRQHandler+0x414>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d027      	beq.n	80041a2 <HAL_DMA_IRQHandler+0x2ee>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a5d      	ldr	r2, [pc, #372]	; (80042cc <HAL_DMA_IRQHandler+0x418>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d022      	beq.n	80041a2 <HAL_DMA_IRQHandler+0x2ee>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a5b      	ldr	r2, [pc, #364]	; (80042d0 <HAL_DMA_IRQHandler+0x41c>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d01d      	beq.n	80041a2 <HAL_DMA_IRQHandler+0x2ee>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a5a      	ldr	r2, [pc, #360]	; (80042d4 <HAL_DMA_IRQHandler+0x420>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d018      	beq.n	80041a2 <HAL_DMA_IRQHandler+0x2ee>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a58      	ldr	r2, [pc, #352]	; (80042d8 <HAL_DMA_IRQHandler+0x424>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d013      	beq.n	80041a2 <HAL_DMA_IRQHandler+0x2ee>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a57      	ldr	r2, [pc, #348]	; (80042dc <HAL_DMA_IRQHandler+0x428>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d00e      	beq.n	80041a2 <HAL_DMA_IRQHandler+0x2ee>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a55      	ldr	r2, [pc, #340]	; (80042e0 <HAL_DMA_IRQHandler+0x42c>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d009      	beq.n	80041a2 <HAL_DMA_IRQHandler+0x2ee>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a54      	ldr	r2, [pc, #336]	; (80042e4 <HAL_DMA_IRQHandler+0x430>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d004      	beq.n	80041a2 <HAL_DMA_IRQHandler+0x2ee>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a52      	ldr	r2, [pc, #328]	; (80042e8 <HAL_DMA_IRQHandler+0x434>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d10a      	bne.n	80041b8 <HAL_DMA_IRQHandler+0x304>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	bf14      	ite	ne
 80041b0:	2301      	movne	r3, #1
 80041b2:	2300      	moveq	r3, #0
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	e003      	b.n	80041c0 <HAL_DMA_IRQHandler+0x30c>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2300      	movs	r3, #0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00d      	beq.n	80041e0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c8:	f003 031f 	and.w	r3, r3, #31
 80041cc:	2201      	movs	r2, #1
 80041ce:	409a      	lsls	r2, r3
 80041d0:	6a3b      	ldr	r3, [r7, #32]
 80041d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d8:	f043 0202 	orr.w	r2, r3, #2
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e4:	f003 031f 	and.w	r3, r3, #31
 80041e8:	2204      	movs	r2, #4
 80041ea:	409a      	lsls	r2, r3
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	4013      	ands	r3, r2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f000 808f 	beq.w	8004314 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a2c      	ldr	r2, [pc, #176]	; (80042ac <HAL_DMA_IRQHandler+0x3f8>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d04a      	beq.n	8004296 <HAL_DMA_IRQHandler+0x3e2>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a2a      	ldr	r2, [pc, #168]	; (80042b0 <HAL_DMA_IRQHandler+0x3fc>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d045      	beq.n	8004296 <HAL_DMA_IRQHandler+0x3e2>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a29      	ldr	r2, [pc, #164]	; (80042b4 <HAL_DMA_IRQHandler+0x400>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d040      	beq.n	8004296 <HAL_DMA_IRQHandler+0x3e2>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a27      	ldr	r2, [pc, #156]	; (80042b8 <HAL_DMA_IRQHandler+0x404>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d03b      	beq.n	8004296 <HAL_DMA_IRQHandler+0x3e2>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a26      	ldr	r2, [pc, #152]	; (80042bc <HAL_DMA_IRQHandler+0x408>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d036      	beq.n	8004296 <HAL_DMA_IRQHandler+0x3e2>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a24      	ldr	r2, [pc, #144]	; (80042c0 <HAL_DMA_IRQHandler+0x40c>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d031      	beq.n	8004296 <HAL_DMA_IRQHandler+0x3e2>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a23      	ldr	r2, [pc, #140]	; (80042c4 <HAL_DMA_IRQHandler+0x410>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d02c      	beq.n	8004296 <HAL_DMA_IRQHandler+0x3e2>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a21      	ldr	r2, [pc, #132]	; (80042c8 <HAL_DMA_IRQHandler+0x414>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d027      	beq.n	8004296 <HAL_DMA_IRQHandler+0x3e2>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a20      	ldr	r2, [pc, #128]	; (80042cc <HAL_DMA_IRQHandler+0x418>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d022      	beq.n	8004296 <HAL_DMA_IRQHandler+0x3e2>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a1e      	ldr	r2, [pc, #120]	; (80042d0 <HAL_DMA_IRQHandler+0x41c>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d01d      	beq.n	8004296 <HAL_DMA_IRQHandler+0x3e2>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a1d      	ldr	r2, [pc, #116]	; (80042d4 <HAL_DMA_IRQHandler+0x420>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d018      	beq.n	8004296 <HAL_DMA_IRQHandler+0x3e2>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a1b      	ldr	r2, [pc, #108]	; (80042d8 <HAL_DMA_IRQHandler+0x424>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d013      	beq.n	8004296 <HAL_DMA_IRQHandler+0x3e2>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a1a      	ldr	r2, [pc, #104]	; (80042dc <HAL_DMA_IRQHandler+0x428>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d00e      	beq.n	8004296 <HAL_DMA_IRQHandler+0x3e2>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a18      	ldr	r2, [pc, #96]	; (80042e0 <HAL_DMA_IRQHandler+0x42c>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d009      	beq.n	8004296 <HAL_DMA_IRQHandler+0x3e2>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a17      	ldr	r2, [pc, #92]	; (80042e4 <HAL_DMA_IRQHandler+0x430>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d004      	beq.n	8004296 <HAL_DMA_IRQHandler+0x3e2>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a15      	ldr	r2, [pc, #84]	; (80042e8 <HAL_DMA_IRQHandler+0x434>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d12a      	bne.n	80042ec <HAL_DMA_IRQHandler+0x438>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	bf14      	ite	ne
 80042a4:	2301      	movne	r3, #1
 80042a6:	2300      	moveq	r3, #0
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	e023      	b.n	80042f4 <HAL_DMA_IRQHandler+0x440>
 80042ac:	40020010 	.word	0x40020010
 80042b0:	40020028 	.word	0x40020028
 80042b4:	40020040 	.word	0x40020040
 80042b8:	40020058 	.word	0x40020058
 80042bc:	40020070 	.word	0x40020070
 80042c0:	40020088 	.word	0x40020088
 80042c4:	400200a0 	.word	0x400200a0
 80042c8:	400200b8 	.word	0x400200b8
 80042cc:	40020410 	.word	0x40020410
 80042d0:	40020428 	.word	0x40020428
 80042d4:	40020440 	.word	0x40020440
 80042d8:	40020458 	.word	0x40020458
 80042dc:	40020470 	.word	0x40020470
 80042e0:	40020488 	.word	0x40020488
 80042e4:	400204a0 	.word	0x400204a0
 80042e8:	400204b8 	.word	0x400204b8
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2300      	movs	r3, #0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00d      	beq.n	8004314 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042fc:	f003 031f 	and.w	r3, r3, #31
 8004300:	2204      	movs	r2, #4
 8004302:	409a      	lsls	r2, r3
 8004304:	6a3b      	ldr	r3, [r7, #32]
 8004306:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430c:	f043 0204 	orr.w	r2, r3, #4
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004318:	f003 031f 	and.w	r3, r3, #31
 800431c:	2210      	movs	r2, #16
 800431e:	409a      	lsls	r2, r3
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	4013      	ands	r3, r2
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 80a6 	beq.w	8004476 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a85      	ldr	r2, [pc, #532]	; (8004544 <HAL_DMA_IRQHandler+0x690>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d04a      	beq.n	80043ca <HAL_DMA_IRQHandler+0x516>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a83      	ldr	r2, [pc, #524]	; (8004548 <HAL_DMA_IRQHandler+0x694>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d045      	beq.n	80043ca <HAL_DMA_IRQHandler+0x516>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a82      	ldr	r2, [pc, #520]	; (800454c <HAL_DMA_IRQHandler+0x698>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d040      	beq.n	80043ca <HAL_DMA_IRQHandler+0x516>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a80      	ldr	r2, [pc, #512]	; (8004550 <HAL_DMA_IRQHandler+0x69c>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d03b      	beq.n	80043ca <HAL_DMA_IRQHandler+0x516>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a7f      	ldr	r2, [pc, #508]	; (8004554 <HAL_DMA_IRQHandler+0x6a0>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d036      	beq.n	80043ca <HAL_DMA_IRQHandler+0x516>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a7d      	ldr	r2, [pc, #500]	; (8004558 <HAL_DMA_IRQHandler+0x6a4>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d031      	beq.n	80043ca <HAL_DMA_IRQHandler+0x516>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a7c      	ldr	r2, [pc, #496]	; (800455c <HAL_DMA_IRQHandler+0x6a8>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d02c      	beq.n	80043ca <HAL_DMA_IRQHandler+0x516>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a7a      	ldr	r2, [pc, #488]	; (8004560 <HAL_DMA_IRQHandler+0x6ac>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d027      	beq.n	80043ca <HAL_DMA_IRQHandler+0x516>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a79      	ldr	r2, [pc, #484]	; (8004564 <HAL_DMA_IRQHandler+0x6b0>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d022      	beq.n	80043ca <HAL_DMA_IRQHandler+0x516>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a77      	ldr	r2, [pc, #476]	; (8004568 <HAL_DMA_IRQHandler+0x6b4>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d01d      	beq.n	80043ca <HAL_DMA_IRQHandler+0x516>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a76      	ldr	r2, [pc, #472]	; (800456c <HAL_DMA_IRQHandler+0x6b8>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d018      	beq.n	80043ca <HAL_DMA_IRQHandler+0x516>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a74      	ldr	r2, [pc, #464]	; (8004570 <HAL_DMA_IRQHandler+0x6bc>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d013      	beq.n	80043ca <HAL_DMA_IRQHandler+0x516>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a73      	ldr	r2, [pc, #460]	; (8004574 <HAL_DMA_IRQHandler+0x6c0>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d00e      	beq.n	80043ca <HAL_DMA_IRQHandler+0x516>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a71      	ldr	r2, [pc, #452]	; (8004578 <HAL_DMA_IRQHandler+0x6c4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d009      	beq.n	80043ca <HAL_DMA_IRQHandler+0x516>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a70      	ldr	r2, [pc, #448]	; (800457c <HAL_DMA_IRQHandler+0x6c8>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d004      	beq.n	80043ca <HAL_DMA_IRQHandler+0x516>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a6e      	ldr	r2, [pc, #440]	; (8004580 <HAL_DMA_IRQHandler+0x6cc>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d10a      	bne.n	80043e0 <HAL_DMA_IRQHandler+0x52c>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0308 	and.w	r3, r3, #8
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	bf14      	ite	ne
 80043d8:	2301      	movne	r3, #1
 80043da:	2300      	moveq	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	e009      	b.n	80043f4 <HAL_DMA_IRQHandler+0x540>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0304 	and.w	r3, r3, #4
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	bf14      	ite	ne
 80043ee:	2301      	movne	r3, #1
 80043f0:	2300      	moveq	r3, #0
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d03e      	beq.n	8004476 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043fc:	f003 031f 	and.w	r3, r3, #31
 8004400:	2210      	movs	r2, #16
 8004402:	409a      	lsls	r2, r3
 8004404:	6a3b      	ldr	r3, [r7, #32]
 8004406:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d018      	beq.n	8004448 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d108      	bne.n	8004436 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004428:	2b00      	cmp	r3, #0
 800442a:	d024      	beq.n	8004476 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	4798      	blx	r3
 8004434:	e01f      	b.n	8004476 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800443a:	2b00      	cmp	r3, #0
 800443c:	d01b      	beq.n	8004476 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	4798      	blx	r3
 8004446:	e016      	b.n	8004476 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004452:	2b00      	cmp	r3, #0
 8004454:	d107      	bne.n	8004466 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 0208 	bic.w	r2, r2, #8
 8004464:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800447a:	f003 031f 	and.w	r3, r3, #31
 800447e:	2220      	movs	r2, #32
 8004480:	409a      	lsls	r2, r3
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	4013      	ands	r3, r2
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 8110 	beq.w	80046ac <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a2c      	ldr	r2, [pc, #176]	; (8004544 <HAL_DMA_IRQHandler+0x690>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d04a      	beq.n	800452c <HAL_DMA_IRQHandler+0x678>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a2b      	ldr	r2, [pc, #172]	; (8004548 <HAL_DMA_IRQHandler+0x694>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d045      	beq.n	800452c <HAL_DMA_IRQHandler+0x678>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a29      	ldr	r2, [pc, #164]	; (800454c <HAL_DMA_IRQHandler+0x698>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d040      	beq.n	800452c <HAL_DMA_IRQHandler+0x678>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a28      	ldr	r2, [pc, #160]	; (8004550 <HAL_DMA_IRQHandler+0x69c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d03b      	beq.n	800452c <HAL_DMA_IRQHandler+0x678>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a26      	ldr	r2, [pc, #152]	; (8004554 <HAL_DMA_IRQHandler+0x6a0>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d036      	beq.n	800452c <HAL_DMA_IRQHandler+0x678>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a25      	ldr	r2, [pc, #148]	; (8004558 <HAL_DMA_IRQHandler+0x6a4>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d031      	beq.n	800452c <HAL_DMA_IRQHandler+0x678>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a23      	ldr	r2, [pc, #140]	; (800455c <HAL_DMA_IRQHandler+0x6a8>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d02c      	beq.n	800452c <HAL_DMA_IRQHandler+0x678>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a22      	ldr	r2, [pc, #136]	; (8004560 <HAL_DMA_IRQHandler+0x6ac>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d027      	beq.n	800452c <HAL_DMA_IRQHandler+0x678>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a20      	ldr	r2, [pc, #128]	; (8004564 <HAL_DMA_IRQHandler+0x6b0>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d022      	beq.n	800452c <HAL_DMA_IRQHandler+0x678>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a1f      	ldr	r2, [pc, #124]	; (8004568 <HAL_DMA_IRQHandler+0x6b4>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d01d      	beq.n	800452c <HAL_DMA_IRQHandler+0x678>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a1d      	ldr	r2, [pc, #116]	; (800456c <HAL_DMA_IRQHandler+0x6b8>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d018      	beq.n	800452c <HAL_DMA_IRQHandler+0x678>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a1c      	ldr	r2, [pc, #112]	; (8004570 <HAL_DMA_IRQHandler+0x6bc>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d013      	beq.n	800452c <HAL_DMA_IRQHandler+0x678>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a1a      	ldr	r2, [pc, #104]	; (8004574 <HAL_DMA_IRQHandler+0x6c0>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d00e      	beq.n	800452c <HAL_DMA_IRQHandler+0x678>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a19      	ldr	r2, [pc, #100]	; (8004578 <HAL_DMA_IRQHandler+0x6c4>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d009      	beq.n	800452c <HAL_DMA_IRQHandler+0x678>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a17      	ldr	r2, [pc, #92]	; (800457c <HAL_DMA_IRQHandler+0x6c8>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d004      	beq.n	800452c <HAL_DMA_IRQHandler+0x678>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a16      	ldr	r2, [pc, #88]	; (8004580 <HAL_DMA_IRQHandler+0x6cc>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d12b      	bne.n	8004584 <HAL_DMA_IRQHandler+0x6d0>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0310 	and.w	r3, r3, #16
 8004536:	2b00      	cmp	r3, #0
 8004538:	bf14      	ite	ne
 800453a:	2301      	movne	r3, #1
 800453c:	2300      	moveq	r3, #0
 800453e:	b2db      	uxtb	r3, r3
 8004540:	e02a      	b.n	8004598 <HAL_DMA_IRQHandler+0x6e4>
 8004542:	bf00      	nop
 8004544:	40020010 	.word	0x40020010
 8004548:	40020028 	.word	0x40020028
 800454c:	40020040 	.word	0x40020040
 8004550:	40020058 	.word	0x40020058
 8004554:	40020070 	.word	0x40020070
 8004558:	40020088 	.word	0x40020088
 800455c:	400200a0 	.word	0x400200a0
 8004560:	400200b8 	.word	0x400200b8
 8004564:	40020410 	.word	0x40020410
 8004568:	40020428 	.word	0x40020428
 800456c:	40020440 	.word	0x40020440
 8004570:	40020458 	.word	0x40020458
 8004574:	40020470 	.word	0x40020470
 8004578:	40020488 	.word	0x40020488
 800457c:	400204a0 	.word	0x400204a0
 8004580:	400204b8 	.word	0x400204b8
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	bf14      	ite	ne
 8004592:	2301      	movne	r3, #1
 8004594:	2300      	moveq	r3, #0
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 8087 	beq.w	80046ac <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a2:	f003 031f 	and.w	r3, r3, #31
 80045a6:	2220      	movs	r2, #32
 80045a8:	409a      	lsls	r2, r3
 80045aa:	6a3b      	ldr	r3, [r7, #32]
 80045ac:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b04      	cmp	r3, #4
 80045b8:	d139      	bne.n	800462e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 0216 	bic.w	r2, r2, #22
 80045c8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695a      	ldr	r2, [r3, #20]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045d8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d103      	bne.n	80045ea <HAL_DMA_IRQHandler+0x736>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d007      	beq.n	80045fa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0208 	bic.w	r2, r2, #8
 80045f8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045fe:	f003 031f 	and.w	r3, r3, #31
 8004602:	223f      	movs	r2, #63	; 0x3f
 8004604:	409a      	lsls	r2, r3
 8004606:	6a3b      	ldr	r3, [r7, #32]
 8004608:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 834a 	beq.w	8004cb8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	4798      	blx	r3
          }
          return;
 800462c:	e344      	b.n	8004cb8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d018      	beq.n	800466e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d108      	bne.n	800465c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464e:	2b00      	cmp	r3, #0
 8004650:	d02c      	beq.n	80046ac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	4798      	blx	r3
 800465a:	e027      	b.n	80046ac <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004660:	2b00      	cmp	r3, #0
 8004662:	d023      	beq.n	80046ac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	4798      	blx	r3
 800466c:	e01e      	b.n	80046ac <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10f      	bne.n	800469c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f022 0210 	bic.w	r2, r2, #16
 800468a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 8306 	beq.w	8004cc2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 8088 	beq.w	80047d4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2204      	movs	r2, #4
 80046c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a7a      	ldr	r2, [pc, #488]	; (80048bc <HAL_DMA_IRQHandler+0xa08>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d04a      	beq.n	800476c <HAL_DMA_IRQHandler+0x8b8>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a79      	ldr	r2, [pc, #484]	; (80048c0 <HAL_DMA_IRQHandler+0xa0c>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d045      	beq.n	800476c <HAL_DMA_IRQHandler+0x8b8>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a77      	ldr	r2, [pc, #476]	; (80048c4 <HAL_DMA_IRQHandler+0xa10>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d040      	beq.n	800476c <HAL_DMA_IRQHandler+0x8b8>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a76      	ldr	r2, [pc, #472]	; (80048c8 <HAL_DMA_IRQHandler+0xa14>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d03b      	beq.n	800476c <HAL_DMA_IRQHandler+0x8b8>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a74      	ldr	r2, [pc, #464]	; (80048cc <HAL_DMA_IRQHandler+0xa18>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d036      	beq.n	800476c <HAL_DMA_IRQHandler+0x8b8>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a73      	ldr	r2, [pc, #460]	; (80048d0 <HAL_DMA_IRQHandler+0xa1c>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d031      	beq.n	800476c <HAL_DMA_IRQHandler+0x8b8>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a71      	ldr	r2, [pc, #452]	; (80048d4 <HAL_DMA_IRQHandler+0xa20>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d02c      	beq.n	800476c <HAL_DMA_IRQHandler+0x8b8>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a70      	ldr	r2, [pc, #448]	; (80048d8 <HAL_DMA_IRQHandler+0xa24>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d027      	beq.n	800476c <HAL_DMA_IRQHandler+0x8b8>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a6e      	ldr	r2, [pc, #440]	; (80048dc <HAL_DMA_IRQHandler+0xa28>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d022      	beq.n	800476c <HAL_DMA_IRQHandler+0x8b8>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a6d      	ldr	r2, [pc, #436]	; (80048e0 <HAL_DMA_IRQHandler+0xa2c>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d01d      	beq.n	800476c <HAL_DMA_IRQHandler+0x8b8>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a6b      	ldr	r2, [pc, #428]	; (80048e4 <HAL_DMA_IRQHandler+0xa30>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d018      	beq.n	800476c <HAL_DMA_IRQHandler+0x8b8>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a6a      	ldr	r2, [pc, #424]	; (80048e8 <HAL_DMA_IRQHandler+0xa34>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d013      	beq.n	800476c <HAL_DMA_IRQHandler+0x8b8>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a68      	ldr	r2, [pc, #416]	; (80048ec <HAL_DMA_IRQHandler+0xa38>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d00e      	beq.n	800476c <HAL_DMA_IRQHandler+0x8b8>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a67      	ldr	r2, [pc, #412]	; (80048f0 <HAL_DMA_IRQHandler+0xa3c>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d009      	beq.n	800476c <HAL_DMA_IRQHandler+0x8b8>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a65      	ldr	r2, [pc, #404]	; (80048f4 <HAL_DMA_IRQHandler+0xa40>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d004      	beq.n	800476c <HAL_DMA_IRQHandler+0x8b8>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a64      	ldr	r2, [pc, #400]	; (80048f8 <HAL_DMA_IRQHandler+0xa44>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d108      	bne.n	800477e <HAL_DMA_IRQHandler+0x8ca>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0201 	bic.w	r2, r2, #1
 800477a:	601a      	str	r2, [r3, #0]
 800477c:	e007      	b.n	800478e <HAL_DMA_IRQHandler+0x8da>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0201 	bic.w	r2, r2, #1
 800478c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	3301      	adds	r3, #1
 8004792:	60fb      	str	r3, [r7, #12]
 8004794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004796:	429a      	cmp	r2, r3
 8004798:	d307      	bcc.n	80047aa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1f2      	bne.n	800478e <HAL_DMA_IRQHandler+0x8da>
 80047a8:	e000      	b.n	80047ac <HAL_DMA_IRQHandler+0x8f8>
            break;
 80047aa:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d004      	beq.n	80047cc <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2203      	movs	r2, #3
 80047c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80047ca:	e003      	b.n	80047d4 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 8272 	beq.w	8004cc2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	4798      	blx	r3
 80047e6:	e26c      	b.n	8004cc2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a43      	ldr	r2, [pc, #268]	; (80048fc <HAL_DMA_IRQHandler+0xa48>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d022      	beq.n	8004838 <HAL_DMA_IRQHandler+0x984>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a42      	ldr	r2, [pc, #264]	; (8004900 <HAL_DMA_IRQHandler+0xa4c>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d01d      	beq.n	8004838 <HAL_DMA_IRQHandler+0x984>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a40      	ldr	r2, [pc, #256]	; (8004904 <HAL_DMA_IRQHandler+0xa50>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d018      	beq.n	8004838 <HAL_DMA_IRQHandler+0x984>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a3f      	ldr	r2, [pc, #252]	; (8004908 <HAL_DMA_IRQHandler+0xa54>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d013      	beq.n	8004838 <HAL_DMA_IRQHandler+0x984>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a3d      	ldr	r2, [pc, #244]	; (800490c <HAL_DMA_IRQHandler+0xa58>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d00e      	beq.n	8004838 <HAL_DMA_IRQHandler+0x984>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a3c      	ldr	r2, [pc, #240]	; (8004910 <HAL_DMA_IRQHandler+0xa5c>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d009      	beq.n	8004838 <HAL_DMA_IRQHandler+0x984>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a3a      	ldr	r2, [pc, #232]	; (8004914 <HAL_DMA_IRQHandler+0xa60>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d004      	beq.n	8004838 <HAL_DMA_IRQHandler+0x984>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a39      	ldr	r2, [pc, #228]	; (8004918 <HAL_DMA_IRQHandler+0xa64>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d101      	bne.n	800483c <HAL_DMA_IRQHandler+0x988>
 8004838:	2301      	movs	r3, #1
 800483a:	e000      	b.n	800483e <HAL_DMA_IRQHandler+0x98a>
 800483c:	2300      	movs	r3, #0
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 823f 	beq.w	8004cc2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004850:	f003 031f 	and.w	r3, r3, #31
 8004854:	2204      	movs	r2, #4
 8004856:	409a      	lsls	r2, r3
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	4013      	ands	r3, r2
 800485c:	2b00      	cmp	r3, #0
 800485e:	f000 80cd 	beq.w	80049fc <HAL_DMA_IRQHandler+0xb48>
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	f003 0304 	and.w	r3, r3, #4
 8004868:	2b00      	cmp	r3, #0
 800486a:	f000 80c7 	beq.w	80049fc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004872:	f003 031f 	and.w	r3, r3, #31
 8004876:	2204      	movs	r2, #4
 8004878:	409a      	lsls	r2, r3
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d049      	beq.n	800491c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d109      	bne.n	80048a6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004896:	2b00      	cmp	r3, #0
 8004898:	f000 8210 	beq.w	8004cbc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048a4:	e20a      	b.n	8004cbc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f000 8206 	beq.w	8004cbc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048b8:	e200      	b.n	8004cbc <HAL_DMA_IRQHandler+0xe08>
 80048ba:	bf00      	nop
 80048bc:	40020010 	.word	0x40020010
 80048c0:	40020028 	.word	0x40020028
 80048c4:	40020040 	.word	0x40020040
 80048c8:	40020058 	.word	0x40020058
 80048cc:	40020070 	.word	0x40020070
 80048d0:	40020088 	.word	0x40020088
 80048d4:	400200a0 	.word	0x400200a0
 80048d8:	400200b8 	.word	0x400200b8
 80048dc:	40020410 	.word	0x40020410
 80048e0:	40020428 	.word	0x40020428
 80048e4:	40020440 	.word	0x40020440
 80048e8:	40020458 	.word	0x40020458
 80048ec:	40020470 	.word	0x40020470
 80048f0:	40020488 	.word	0x40020488
 80048f4:	400204a0 	.word	0x400204a0
 80048f8:	400204b8 	.word	0x400204b8
 80048fc:	58025408 	.word	0x58025408
 8004900:	5802541c 	.word	0x5802541c
 8004904:	58025430 	.word	0x58025430
 8004908:	58025444 	.word	0x58025444
 800490c:	58025458 	.word	0x58025458
 8004910:	5802546c 	.word	0x5802546c
 8004914:	58025480 	.word	0x58025480
 8004918:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	f003 0320 	and.w	r3, r3, #32
 8004922:	2b00      	cmp	r3, #0
 8004924:	d160      	bne.n	80049e8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a8c      	ldr	r2, [pc, #560]	; (8004b5c <HAL_DMA_IRQHandler+0xca8>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d04a      	beq.n	80049c6 <HAL_DMA_IRQHandler+0xb12>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a8a      	ldr	r2, [pc, #552]	; (8004b60 <HAL_DMA_IRQHandler+0xcac>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d045      	beq.n	80049c6 <HAL_DMA_IRQHandler+0xb12>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a89      	ldr	r2, [pc, #548]	; (8004b64 <HAL_DMA_IRQHandler+0xcb0>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d040      	beq.n	80049c6 <HAL_DMA_IRQHandler+0xb12>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a87      	ldr	r2, [pc, #540]	; (8004b68 <HAL_DMA_IRQHandler+0xcb4>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d03b      	beq.n	80049c6 <HAL_DMA_IRQHandler+0xb12>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a86      	ldr	r2, [pc, #536]	; (8004b6c <HAL_DMA_IRQHandler+0xcb8>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d036      	beq.n	80049c6 <HAL_DMA_IRQHandler+0xb12>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a84      	ldr	r2, [pc, #528]	; (8004b70 <HAL_DMA_IRQHandler+0xcbc>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d031      	beq.n	80049c6 <HAL_DMA_IRQHandler+0xb12>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a83      	ldr	r2, [pc, #524]	; (8004b74 <HAL_DMA_IRQHandler+0xcc0>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d02c      	beq.n	80049c6 <HAL_DMA_IRQHandler+0xb12>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a81      	ldr	r2, [pc, #516]	; (8004b78 <HAL_DMA_IRQHandler+0xcc4>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d027      	beq.n	80049c6 <HAL_DMA_IRQHandler+0xb12>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a80      	ldr	r2, [pc, #512]	; (8004b7c <HAL_DMA_IRQHandler+0xcc8>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d022      	beq.n	80049c6 <HAL_DMA_IRQHandler+0xb12>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a7e      	ldr	r2, [pc, #504]	; (8004b80 <HAL_DMA_IRQHandler+0xccc>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d01d      	beq.n	80049c6 <HAL_DMA_IRQHandler+0xb12>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a7d      	ldr	r2, [pc, #500]	; (8004b84 <HAL_DMA_IRQHandler+0xcd0>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d018      	beq.n	80049c6 <HAL_DMA_IRQHandler+0xb12>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a7b      	ldr	r2, [pc, #492]	; (8004b88 <HAL_DMA_IRQHandler+0xcd4>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d013      	beq.n	80049c6 <HAL_DMA_IRQHandler+0xb12>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a7a      	ldr	r2, [pc, #488]	; (8004b8c <HAL_DMA_IRQHandler+0xcd8>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d00e      	beq.n	80049c6 <HAL_DMA_IRQHandler+0xb12>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a78      	ldr	r2, [pc, #480]	; (8004b90 <HAL_DMA_IRQHandler+0xcdc>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d009      	beq.n	80049c6 <HAL_DMA_IRQHandler+0xb12>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a77      	ldr	r2, [pc, #476]	; (8004b94 <HAL_DMA_IRQHandler+0xce0>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d004      	beq.n	80049c6 <HAL_DMA_IRQHandler+0xb12>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a75      	ldr	r2, [pc, #468]	; (8004b98 <HAL_DMA_IRQHandler+0xce4>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d108      	bne.n	80049d8 <HAL_DMA_IRQHandler+0xb24>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 0208 	bic.w	r2, r2, #8
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	e007      	b.n	80049e8 <HAL_DMA_IRQHandler+0xb34>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 0204 	bic.w	r2, r2, #4
 80049e6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 8165 	beq.w	8004cbc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049fa:	e15f      	b.n	8004cbc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a00:	f003 031f 	and.w	r3, r3, #31
 8004a04:	2202      	movs	r2, #2
 8004a06:	409a      	lsls	r2, r3
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 80c5 	beq.w	8004b9c <HAL_DMA_IRQHandler+0xce8>
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 80bf 	beq.w	8004b9c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a22:	f003 031f 	and.w	r3, r3, #31
 8004a26:	2202      	movs	r2, #2
 8004a28:	409a      	lsls	r2, r3
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d018      	beq.n	8004a6a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d109      	bne.n	8004a56 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f000 813a 	beq.w	8004cc0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a54:	e134      	b.n	8004cc0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 8130 	beq.w	8004cc0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a68:	e12a      	b.n	8004cc0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f003 0320 	and.w	r3, r3, #32
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d168      	bne.n	8004b46 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a38      	ldr	r2, [pc, #224]	; (8004b5c <HAL_DMA_IRQHandler+0xca8>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d04a      	beq.n	8004b14 <HAL_DMA_IRQHandler+0xc60>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a37      	ldr	r2, [pc, #220]	; (8004b60 <HAL_DMA_IRQHandler+0xcac>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d045      	beq.n	8004b14 <HAL_DMA_IRQHandler+0xc60>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a35      	ldr	r2, [pc, #212]	; (8004b64 <HAL_DMA_IRQHandler+0xcb0>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d040      	beq.n	8004b14 <HAL_DMA_IRQHandler+0xc60>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a34      	ldr	r2, [pc, #208]	; (8004b68 <HAL_DMA_IRQHandler+0xcb4>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d03b      	beq.n	8004b14 <HAL_DMA_IRQHandler+0xc60>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a32      	ldr	r2, [pc, #200]	; (8004b6c <HAL_DMA_IRQHandler+0xcb8>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d036      	beq.n	8004b14 <HAL_DMA_IRQHandler+0xc60>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a31      	ldr	r2, [pc, #196]	; (8004b70 <HAL_DMA_IRQHandler+0xcbc>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d031      	beq.n	8004b14 <HAL_DMA_IRQHandler+0xc60>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a2f      	ldr	r2, [pc, #188]	; (8004b74 <HAL_DMA_IRQHandler+0xcc0>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d02c      	beq.n	8004b14 <HAL_DMA_IRQHandler+0xc60>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a2e      	ldr	r2, [pc, #184]	; (8004b78 <HAL_DMA_IRQHandler+0xcc4>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d027      	beq.n	8004b14 <HAL_DMA_IRQHandler+0xc60>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a2c      	ldr	r2, [pc, #176]	; (8004b7c <HAL_DMA_IRQHandler+0xcc8>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d022      	beq.n	8004b14 <HAL_DMA_IRQHandler+0xc60>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a2b      	ldr	r2, [pc, #172]	; (8004b80 <HAL_DMA_IRQHandler+0xccc>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d01d      	beq.n	8004b14 <HAL_DMA_IRQHandler+0xc60>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a29      	ldr	r2, [pc, #164]	; (8004b84 <HAL_DMA_IRQHandler+0xcd0>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d018      	beq.n	8004b14 <HAL_DMA_IRQHandler+0xc60>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a28      	ldr	r2, [pc, #160]	; (8004b88 <HAL_DMA_IRQHandler+0xcd4>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d013      	beq.n	8004b14 <HAL_DMA_IRQHandler+0xc60>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a26      	ldr	r2, [pc, #152]	; (8004b8c <HAL_DMA_IRQHandler+0xcd8>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d00e      	beq.n	8004b14 <HAL_DMA_IRQHandler+0xc60>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a25      	ldr	r2, [pc, #148]	; (8004b90 <HAL_DMA_IRQHandler+0xcdc>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d009      	beq.n	8004b14 <HAL_DMA_IRQHandler+0xc60>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a23      	ldr	r2, [pc, #140]	; (8004b94 <HAL_DMA_IRQHandler+0xce0>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d004      	beq.n	8004b14 <HAL_DMA_IRQHandler+0xc60>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a22      	ldr	r2, [pc, #136]	; (8004b98 <HAL_DMA_IRQHandler+0xce4>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d108      	bne.n	8004b26 <HAL_DMA_IRQHandler+0xc72>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 0214 	bic.w	r2, r2, #20
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	e007      	b.n	8004b36 <HAL_DMA_IRQHandler+0xc82>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 020a 	bic.w	r2, r2, #10
 8004b34:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f000 80b8 	beq.w	8004cc0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b58:	e0b2      	b.n	8004cc0 <HAL_DMA_IRQHandler+0xe0c>
 8004b5a:	bf00      	nop
 8004b5c:	40020010 	.word	0x40020010
 8004b60:	40020028 	.word	0x40020028
 8004b64:	40020040 	.word	0x40020040
 8004b68:	40020058 	.word	0x40020058
 8004b6c:	40020070 	.word	0x40020070
 8004b70:	40020088 	.word	0x40020088
 8004b74:	400200a0 	.word	0x400200a0
 8004b78:	400200b8 	.word	0x400200b8
 8004b7c:	40020410 	.word	0x40020410
 8004b80:	40020428 	.word	0x40020428
 8004b84:	40020440 	.word	0x40020440
 8004b88:	40020458 	.word	0x40020458
 8004b8c:	40020470 	.word	0x40020470
 8004b90:	40020488 	.word	0x40020488
 8004b94:	400204a0 	.word	0x400204a0
 8004b98:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba0:	f003 031f 	and.w	r3, r3, #31
 8004ba4:	2208      	movs	r2, #8
 8004ba6:	409a      	lsls	r2, r3
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	4013      	ands	r3, r2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 8088 	beq.w	8004cc2 <HAL_DMA_IRQHandler+0xe0e>
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f003 0308 	and.w	r3, r3, #8
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f000 8082 	beq.w	8004cc2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a41      	ldr	r2, [pc, #260]	; (8004cc8 <HAL_DMA_IRQHandler+0xe14>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d04a      	beq.n	8004c5e <HAL_DMA_IRQHandler+0xdaa>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a3f      	ldr	r2, [pc, #252]	; (8004ccc <HAL_DMA_IRQHandler+0xe18>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d045      	beq.n	8004c5e <HAL_DMA_IRQHandler+0xdaa>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a3e      	ldr	r2, [pc, #248]	; (8004cd0 <HAL_DMA_IRQHandler+0xe1c>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d040      	beq.n	8004c5e <HAL_DMA_IRQHandler+0xdaa>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a3c      	ldr	r2, [pc, #240]	; (8004cd4 <HAL_DMA_IRQHandler+0xe20>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d03b      	beq.n	8004c5e <HAL_DMA_IRQHandler+0xdaa>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a3b      	ldr	r2, [pc, #236]	; (8004cd8 <HAL_DMA_IRQHandler+0xe24>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d036      	beq.n	8004c5e <HAL_DMA_IRQHandler+0xdaa>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a39      	ldr	r2, [pc, #228]	; (8004cdc <HAL_DMA_IRQHandler+0xe28>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d031      	beq.n	8004c5e <HAL_DMA_IRQHandler+0xdaa>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a38      	ldr	r2, [pc, #224]	; (8004ce0 <HAL_DMA_IRQHandler+0xe2c>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d02c      	beq.n	8004c5e <HAL_DMA_IRQHandler+0xdaa>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a36      	ldr	r2, [pc, #216]	; (8004ce4 <HAL_DMA_IRQHandler+0xe30>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d027      	beq.n	8004c5e <HAL_DMA_IRQHandler+0xdaa>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a35      	ldr	r2, [pc, #212]	; (8004ce8 <HAL_DMA_IRQHandler+0xe34>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d022      	beq.n	8004c5e <HAL_DMA_IRQHandler+0xdaa>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a33      	ldr	r2, [pc, #204]	; (8004cec <HAL_DMA_IRQHandler+0xe38>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d01d      	beq.n	8004c5e <HAL_DMA_IRQHandler+0xdaa>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a32      	ldr	r2, [pc, #200]	; (8004cf0 <HAL_DMA_IRQHandler+0xe3c>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d018      	beq.n	8004c5e <HAL_DMA_IRQHandler+0xdaa>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a30      	ldr	r2, [pc, #192]	; (8004cf4 <HAL_DMA_IRQHandler+0xe40>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d013      	beq.n	8004c5e <HAL_DMA_IRQHandler+0xdaa>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a2f      	ldr	r2, [pc, #188]	; (8004cf8 <HAL_DMA_IRQHandler+0xe44>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d00e      	beq.n	8004c5e <HAL_DMA_IRQHandler+0xdaa>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a2d      	ldr	r2, [pc, #180]	; (8004cfc <HAL_DMA_IRQHandler+0xe48>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d009      	beq.n	8004c5e <HAL_DMA_IRQHandler+0xdaa>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a2c      	ldr	r2, [pc, #176]	; (8004d00 <HAL_DMA_IRQHandler+0xe4c>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d004      	beq.n	8004c5e <HAL_DMA_IRQHandler+0xdaa>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a2a      	ldr	r2, [pc, #168]	; (8004d04 <HAL_DMA_IRQHandler+0xe50>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d108      	bne.n	8004c70 <HAL_DMA_IRQHandler+0xdbc>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f022 021c 	bic.w	r2, r2, #28
 8004c6c:	601a      	str	r2, [r3, #0]
 8004c6e:	e007      	b.n	8004c80 <HAL_DMA_IRQHandler+0xdcc>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 020e 	bic.w	r2, r2, #14
 8004c7e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c84:	f003 031f 	and.w	r3, r3, #31
 8004c88:	2201      	movs	r2, #1
 8004c8a:	409a      	lsls	r2, r3
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d009      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	4798      	blx	r3
 8004cb6:	e004      	b.n	8004cc2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004cb8:	bf00      	nop
 8004cba:	e002      	b.n	8004cc2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cbc:	bf00      	nop
 8004cbe:	e000      	b.n	8004cc2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cc0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004cc2:	3728      	adds	r7, #40	; 0x28
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	40020010 	.word	0x40020010
 8004ccc:	40020028 	.word	0x40020028
 8004cd0:	40020040 	.word	0x40020040
 8004cd4:	40020058 	.word	0x40020058
 8004cd8:	40020070 	.word	0x40020070
 8004cdc:	40020088 	.word	0x40020088
 8004ce0:	400200a0 	.word	0x400200a0
 8004ce4:	400200b8 	.word	0x400200b8
 8004ce8:	40020410 	.word	0x40020410
 8004cec:	40020428 	.word	0x40020428
 8004cf0:	40020440 	.word	0x40020440
 8004cf4:	40020458 	.word	0x40020458
 8004cf8:	40020470 	.word	0x40020470
 8004cfc:	40020488 	.word	0x40020488
 8004d00:	400204a0 	.word	0x400204a0
 8004d04:	400204b8 	.word	0x400204b8

08004d08 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b087      	sub	sp, #28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
 8004d14:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d1a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d20:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a84      	ldr	r2, [pc, #528]	; (8004f38 <DMA_SetConfig+0x230>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d072      	beq.n	8004e12 <DMA_SetConfig+0x10a>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a82      	ldr	r2, [pc, #520]	; (8004f3c <DMA_SetConfig+0x234>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d06d      	beq.n	8004e12 <DMA_SetConfig+0x10a>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a81      	ldr	r2, [pc, #516]	; (8004f40 <DMA_SetConfig+0x238>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d068      	beq.n	8004e12 <DMA_SetConfig+0x10a>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a7f      	ldr	r2, [pc, #508]	; (8004f44 <DMA_SetConfig+0x23c>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d063      	beq.n	8004e12 <DMA_SetConfig+0x10a>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a7e      	ldr	r2, [pc, #504]	; (8004f48 <DMA_SetConfig+0x240>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d05e      	beq.n	8004e12 <DMA_SetConfig+0x10a>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a7c      	ldr	r2, [pc, #496]	; (8004f4c <DMA_SetConfig+0x244>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d059      	beq.n	8004e12 <DMA_SetConfig+0x10a>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a7b      	ldr	r2, [pc, #492]	; (8004f50 <DMA_SetConfig+0x248>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d054      	beq.n	8004e12 <DMA_SetConfig+0x10a>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a79      	ldr	r2, [pc, #484]	; (8004f54 <DMA_SetConfig+0x24c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d04f      	beq.n	8004e12 <DMA_SetConfig+0x10a>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a78      	ldr	r2, [pc, #480]	; (8004f58 <DMA_SetConfig+0x250>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d04a      	beq.n	8004e12 <DMA_SetConfig+0x10a>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a76      	ldr	r2, [pc, #472]	; (8004f5c <DMA_SetConfig+0x254>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d045      	beq.n	8004e12 <DMA_SetConfig+0x10a>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a75      	ldr	r2, [pc, #468]	; (8004f60 <DMA_SetConfig+0x258>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d040      	beq.n	8004e12 <DMA_SetConfig+0x10a>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a73      	ldr	r2, [pc, #460]	; (8004f64 <DMA_SetConfig+0x25c>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d03b      	beq.n	8004e12 <DMA_SetConfig+0x10a>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a72      	ldr	r2, [pc, #456]	; (8004f68 <DMA_SetConfig+0x260>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d036      	beq.n	8004e12 <DMA_SetConfig+0x10a>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a70      	ldr	r2, [pc, #448]	; (8004f6c <DMA_SetConfig+0x264>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d031      	beq.n	8004e12 <DMA_SetConfig+0x10a>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a6f      	ldr	r2, [pc, #444]	; (8004f70 <DMA_SetConfig+0x268>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d02c      	beq.n	8004e12 <DMA_SetConfig+0x10a>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a6d      	ldr	r2, [pc, #436]	; (8004f74 <DMA_SetConfig+0x26c>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d027      	beq.n	8004e12 <DMA_SetConfig+0x10a>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a6c      	ldr	r2, [pc, #432]	; (8004f78 <DMA_SetConfig+0x270>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d022      	beq.n	8004e12 <DMA_SetConfig+0x10a>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a6a      	ldr	r2, [pc, #424]	; (8004f7c <DMA_SetConfig+0x274>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d01d      	beq.n	8004e12 <DMA_SetConfig+0x10a>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a69      	ldr	r2, [pc, #420]	; (8004f80 <DMA_SetConfig+0x278>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d018      	beq.n	8004e12 <DMA_SetConfig+0x10a>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a67      	ldr	r2, [pc, #412]	; (8004f84 <DMA_SetConfig+0x27c>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d013      	beq.n	8004e12 <DMA_SetConfig+0x10a>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a66      	ldr	r2, [pc, #408]	; (8004f88 <DMA_SetConfig+0x280>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d00e      	beq.n	8004e12 <DMA_SetConfig+0x10a>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a64      	ldr	r2, [pc, #400]	; (8004f8c <DMA_SetConfig+0x284>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d009      	beq.n	8004e12 <DMA_SetConfig+0x10a>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a63      	ldr	r2, [pc, #396]	; (8004f90 <DMA_SetConfig+0x288>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d004      	beq.n	8004e12 <DMA_SetConfig+0x10a>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a61      	ldr	r2, [pc, #388]	; (8004f94 <DMA_SetConfig+0x28c>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d101      	bne.n	8004e16 <DMA_SetConfig+0x10e>
 8004e12:	2301      	movs	r3, #1
 8004e14:	e000      	b.n	8004e18 <DMA_SetConfig+0x110>
 8004e16:	2300      	movs	r3, #0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00d      	beq.n	8004e38 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004e24:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d004      	beq.n	8004e38 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004e36:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a3e      	ldr	r2, [pc, #248]	; (8004f38 <DMA_SetConfig+0x230>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d04a      	beq.n	8004ed8 <DMA_SetConfig+0x1d0>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a3d      	ldr	r2, [pc, #244]	; (8004f3c <DMA_SetConfig+0x234>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d045      	beq.n	8004ed8 <DMA_SetConfig+0x1d0>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a3b      	ldr	r2, [pc, #236]	; (8004f40 <DMA_SetConfig+0x238>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d040      	beq.n	8004ed8 <DMA_SetConfig+0x1d0>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a3a      	ldr	r2, [pc, #232]	; (8004f44 <DMA_SetConfig+0x23c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d03b      	beq.n	8004ed8 <DMA_SetConfig+0x1d0>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a38      	ldr	r2, [pc, #224]	; (8004f48 <DMA_SetConfig+0x240>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d036      	beq.n	8004ed8 <DMA_SetConfig+0x1d0>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a37      	ldr	r2, [pc, #220]	; (8004f4c <DMA_SetConfig+0x244>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d031      	beq.n	8004ed8 <DMA_SetConfig+0x1d0>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a35      	ldr	r2, [pc, #212]	; (8004f50 <DMA_SetConfig+0x248>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d02c      	beq.n	8004ed8 <DMA_SetConfig+0x1d0>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a34      	ldr	r2, [pc, #208]	; (8004f54 <DMA_SetConfig+0x24c>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d027      	beq.n	8004ed8 <DMA_SetConfig+0x1d0>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a32      	ldr	r2, [pc, #200]	; (8004f58 <DMA_SetConfig+0x250>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d022      	beq.n	8004ed8 <DMA_SetConfig+0x1d0>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a31      	ldr	r2, [pc, #196]	; (8004f5c <DMA_SetConfig+0x254>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d01d      	beq.n	8004ed8 <DMA_SetConfig+0x1d0>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a2f      	ldr	r2, [pc, #188]	; (8004f60 <DMA_SetConfig+0x258>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d018      	beq.n	8004ed8 <DMA_SetConfig+0x1d0>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a2e      	ldr	r2, [pc, #184]	; (8004f64 <DMA_SetConfig+0x25c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d013      	beq.n	8004ed8 <DMA_SetConfig+0x1d0>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a2c      	ldr	r2, [pc, #176]	; (8004f68 <DMA_SetConfig+0x260>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d00e      	beq.n	8004ed8 <DMA_SetConfig+0x1d0>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a2b      	ldr	r2, [pc, #172]	; (8004f6c <DMA_SetConfig+0x264>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d009      	beq.n	8004ed8 <DMA_SetConfig+0x1d0>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a29      	ldr	r2, [pc, #164]	; (8004f70 <DMA_SetConfig+0x268>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d004      	beq.n	8004ed8 <DMA_SetConfig+0x1d0>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a28      	ldr	r2, [pc, #160]	; (8004f74 <DMA_SetConfig+0x26c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d101      	bne.n	8004edc <DMA_SetConfig+0x1d4>
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e000      	b.n	8004ede <DMA_SetConfig+0x1d6>
 8004edc:	2300      	movs	r3, #0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d05a      	beq.n	8004f98 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee6:	f003 031f 	and.w	r3, r3, #31
 8004eea:	223f      	movs	r2, #63	; 0x3f
 8004eec:	409a      	lsls	r2, r3
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f00:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	2b40      	cmp	r3, #64	; 0x40
 8004f10:	d108      	bne.n	8004f24 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004f22:	e087      	b.n	8005034 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	60da      	str	r2, [r3, #12]
}
 8004f34:	e07e      	b.n	8005034 <DMA_SetConfig+0x32c>
 8004f36:	bf00      	nop
 8004f38:	40020010 	.word	0x40020010
 8004f3c:	40020028 	.word	0x40020028
 8004f40:	40020040 	.word	0x40020040
 8004f44:	40020058 	.word	0x40020058
 8004f48:	40020070 	.word	0x40020070
 8004f4c:	40020088 	.word	0x40020088
 8004f50:	400200a0 	.word	0x400200a0
 8004f54:	400200b8 	.word	0x400200b8
 8004f58:	40020410 	.word	0x40020410
 8004f5c:	40020428 	.word	0x40020428
 8004f60:	40020440 	.word	0x40020440
 8004f64:	40020458 	.word	0x40020458
 8004f68:	40020470 	.word	0x40020470
 8004f6c:	40020488 	.word	0x40020488
 8004f70:	400204a0 	.word	0x400204a0
 8004f74:	400204b8 	.word	0x400204b8
 8004f78:	58025408 	.word	0x58025408
 8004f7c:	5802541c 	.word	0x5802541c
 8004f80:	58025430 	.word	0x58025430
 8004f84:	58025444 	.word	0x58025444
 8004f88:	58025458 	.word	0x58025458
 8004f8c:	5802546c 	.word	0x5802546c
 8004f90:	58025480 	.word	0x58025480
 8004f94:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a28      	ldr	r2, [pc, #160]	; (8005040 <DMA_SetConfig+0x338>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d022      	beq.n	8004fe8 <DMA_SetConfig+0x2e0>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a27      	ldr	r2, [pc, #156]	; (8005044 <DMA_SetConfig+0x33c>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d01d      	beq.n	8004fe8 <DMA_SetConfig+0x2e0>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a25      	ldr	r2, [pc, #148]	; (8005048 <DMA_SetConfig+0x340>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d018      	beq.n	8004fe8 <DMA_SetConfig+0x2e0>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a24      	ldr	r2, [pc, #144]	; (800504c <DMA_SetConfig+0x344>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d013      	beq.n	8004fe8 <DMA_SetConfig+0x2e0>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a22      	ldr	r2, [pc, #136]	; (8005050 <DMA_SetConfig+0x348>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d00e      	beq.n	8004fe8 <DMA_SetConfig+0x2e0>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a21      	ldr	r2, [pc, #132]	; (8005054 <DMA_SetConfig+0x34c>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d009      	beq.n	8004fe8 <DMA_SetConfig+0x2e0>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a1f      	ldr	r2, [pc, #124]	; (8005058 <DMA_SetConfig+0x350>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d004      	beq.n	8004fe8 <DMA_SetConfig+0x2e0>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a1e      	ldr	r2, [pc, #120]	; (800505c <DMA_SetConfig+0x354>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d101      	bne.n	8004fec <DMA_SetConfig+0x2e4>
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e000      	b.n	8004fee <DMA_SetConfig+0x2e6>
 8004fec:	2300      	movs	r3, #0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d020      	beq.n	8005034 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ff6:	f003 031f 	and.w	r3, r3, #31
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	409a      	lsls	r2, r3
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	2b40      	cmp	r3, #64	; 0x40
 8005010:	d108      	bne.n	8005024 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	60da      	str	r2, [r3, #12]
}
 8005022:	e007      	b.n	8005034 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	60da      	str	r2, [r3, #12]
}
 8005034:	bf00      	nop
 8005036:	371c      	adds	r7, #28
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	58025408 	.word	0x58025408
 8005044:	5802541c 	.word	0x5802541c
 8005048:	58025430 	.word	0x58025430
 800504c:	58025444 	.word	0x58025444
 8005050:	58025458 	.word	0x58025458
 8005054:	5802546c 	.word	0x5802546c
 8005058:	58025480 	.word	0x58025480
 800505c:	58025494 	.word	0x58025494

08005060 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a42      	ldr	r2, [pc, #264]	; (8005178 <DMA_CalcBaseAndBitshift+0x118>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d04a      	beq.n	8005108 <DMA_CalcBaseAndBitshift+0xa8>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a41      	ldr	r2, [pc, #260]	; (800517c <DMA_CalcBaseAndBitshift+0x11c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d045      	beq.n	8005108 <DMA_CalcBaseAndBitshift+0xa8>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a3f      	ldr	r2, [pc, #252]	; (8005180 <DMA_CalcBaseAndBitshift+0x120>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d040      	beq.n	8005108 <DMA_CalcBaseAndBitshift+0xa8>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a3e      	ldr	r2, [pc, #248]	; (8005184 <DMA_CalcBaseAndBitshift+0x124>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d03b      	beq.n	8005108 <DMA_CalcBaseAndBitshift+0xa8>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a3c      	ldr	r2, [pc, #240]	; (8005188 <DMA_CalcBaseAndBitshift+0x128>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d036      	beq.n	8005108 <DMA_CalcBaseAndBitshift+0xa8>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a3b      	ldr	r2, [pc, #236]	; (800518c <DMA_CalcBaseAndBitshift+0x12c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d031      	beq.n	8005108 <DMA_CalcBaseAndBitshift+0xa8>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a39      	ldr	r2, [pc, #228]	; (8005190 <DMA_CalcBaseAndBitshift+0x130>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d02c      	beq.n	8005108 <DMA_CalcBaseAndBitshift+0xa8>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a38      	ldr	r2, [pc, #224]	; (8005194 <DMA_CalcBaseAndBitshift+0x134>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d027      	beq.n	8005108 <DMA_CalcBaseAndBitshift+0xa8>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a36      	ldr	r2, [pc, #216]	; (8005198 <DMA_CalcBaseAndBitshift+0x138>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d022      	beq.n	8005108 <DMA_CalcBaseAndBitshift+0xa8>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a35      	ldr	r2, [pc, #212]	; (800519c <DMA_CalcBaseAndBitshift+0x13c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d01d      	beq.n	8005108 <DMA_CalcBaseAndBitshift+0xa8>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a33      	ldr	r2, [pc, #204]	; (80051a0 <DMA_CalcBaseAndBitshift+0x140>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d018      	beq.n	8005108 <DMA_CalcBaseAndBitshift+0xa8>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a32      	ldr	r2, [pc, #200]	; (80051a4 <DMA_CalcBaseAndBitshift+0x144>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d013      	beq.n	8005108 <DMA_CalcBaseAndBitshift+0xa8>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a30      	ldr	r2, [pc, #192]	; (80051a8 <DMA_CalcBaseAndBitshift+0x148>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d00e      	beq.n	8005108 <DMA_CalcBaseAndBitshift+0xa8>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a2f      	ldr	r2, [pc, #188]	; (80051ac <DMA_CalcBaseAndBitshift+0x14c>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d009      	beq.n	8005108 <DMA_CalcBaseAndBitshift+0xa8>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a2d      	ldr	r2, [pc, #180]	; (80051b0 <DMA_CalcBaseAndBitshift+0x150>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d004      	beq.n	8005108 <DMA_CalcBaseAndBitshift+0xa8>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a2c      	ldr	r2, [pc, #176]	; (80051b4 <DMA_CalcBaseAndBitshift+0x154>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d101      	bne.n	800510c <DMA_CalcBaseAndBitshift+0xac>
 8005108:	2301      	movs	r3, #1
 800510a:	e000      	b.n	800510e <DMA_CalcBaseAndBitshift+0xae>
 800510c:	2300      	movs	r3, #0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d024      	beq.n	800515c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	b2db      	uxtb	r3, r3
 8005118:	3b10      	subs	r3, #16
 800511a:	4a27      	ldr	r2, [pc, #156]	; (80051b8 <DMA_CalcBaseAndBitshift+0x158>)
 800511c:	fba2 2303 	umull	r2, r3, r2, r3
 8005120:	091b      	lsrs	r3, r3, #4
 8005122:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f003 0307 	and.w	r3, r3, #7
 800512a:	4a24      	ldr	r2, [pc, #144]	; (80051bc <DMA_CalcBaseAndBitshift+0x15c>)
 800512c:	5cd3      	ldrb	r3, [r2, r3]
 800512e:	461a      	mov	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2b03      	cmp	r3, #3
 8005138:	d908      	bls.n	800514c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	461a      	mov	r2, r3
 8005140:	4b1f      	ldr	r3, [pc, #124]	; (80051c0 <DMA_CalcBaseAndBitshift+0x160>)
 8005142:	4013      	ands	r3, r2
 8005144:	1d1a      	adds	r2, r3, #4
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	659a      	str	r2, [r3, #88]	; 0x58
 800514a:	e00d      	b.n	8005168 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	461a      	mov	r2, r3
 8005152:	4b1b      	ldr	r3, [pc, #108]	; (80051c0 <DMA_CalcBaseAndBitshift+0x160>)
 8005154:	4013      	ands	r3, r2
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	6593      	str	r3, [r2, #88]	; 0x58
 800515a:	e005      	b.n	8005168 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800516c:	4618      	mov	r0, r3
 800516e:	3714      	adds	r7, #20
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr
 8005178:	40020010 	.word	0x40020010
 800517c:	40020028 	.word	0x40020028
 8005180:	40020040 	.word	0x40020040
 8005184:	40020058 	.word	0x40020058
 8005188:	40020070 	.word	0x40020070
 800518c:	40020088 	.word	0x40020088
 8005190:	400200a0 	.word	0x400200a0
 8005194:	400200b8 	.word	0x400200b8
 8005198:	40020410 	.word	0x40020410
 800519c:	40020428 	.word	0x40020428
 80051a0:	40020440 	.word	0x40020440
 80051a4:	40020458 	.word	0x40020458
 80051a8:	40020470 	.word	0x40020470
 80051ac:	40020488 	.word	0x40020488
 80051b0:	400204a0 	.word	0x400204a0
 80051b4:	400204b8 	.word	0x400204b8
 80051b8:	aaaaaaab 	.word	0xaaaaaaab
 80051bc:	0801ac0c 	.word	0x0801ac0c
 80051c0:	fffffc00 	.word	0xfffffc00

080051c4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051cc:	2300      	movs	r3, #0
 80051ce:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d120      	bne.n	800521a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051dc:	2b03      	cmp	r3, #3
 80051de:	d858      	bhi.n	8005292 <DMA_CheckFifoParam+0xce>
 80051e0:	a201      	add	r2, pc, #4	; (adr r2, 80051e8 <DMA_CheckFifoParam+0x24>)
 80051e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e6:	bf00      	nop
 80051e8:	080051f9 	.word	0x080051f9
 80051ec:	0800520b 	.word	0x0800520b
 80051f0:	080051f9 	.word	0x080051f9
 80051f4:	08005293 	.word	0x08005293
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d048      	beq.n	8005296 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005208:	e045      	b.n	8005296 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005212:	d142      	bne.n	800529a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005218:	e03f      	b.n	800529a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005222:	d123      	bne.n	800526c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005228:	2b03      	cmp	r3, #3
 800522a:	d838      	bhi.n	800529e <DMA_CheckFifoParam+0xda>
 800522c:	a201      	add	r2, pc, #4	; (adr r2, 8005234 <DMA_CheckFifoParam+0x70>)
 800522e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005232:	bf00      	nop
 8005234:	08005245 	.word	0x08005245
 8005238:	0800524b 	.word	0x0800524b
 800523c:	08005245 	.word	0x08005245
 8005240:	0800525d 	.word	0x0800525d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	73fb      	strb	r3, [r7, #15]
        break;
 8005248:	e030      	b.n	80052ac <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d025      	beq.n	80052a2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800525a:	e022      	b.n	80052a2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005260:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005264:	d11f      	bne.n	80052a6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800526a:	e01c      	b.n	80052a6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005270:	2b02      	cmp	r3, #2
 8005272:	d902      	bls.n	800527a <DMA_CheckFifoParam+0xb6>
 8005274:	2b03      	cmp	r3, #3
 8005276:	d003      	beq.n	8005280 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005278:	e018      	b.n	80052ac <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	73fb      	strb	r3, [r7, #15]
        break;
 800527e:	e015      	b.n	80052ac <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005284:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00e      	beq.n	80052aa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	73fb      	strb	r3, [r7, #15]
    break;
 8005290:	e00b      	b.n	80052aa <DMA_CheckFifoParam+0xe6>
        break;
 8005292:	bf00      	nop
 8005294:	e00a      	b.n	80052ac <DMA_CheckFifoParam+0xe8>
        break;
 8005296:	bf00      	nop
 8005298:	e008      	b.n	80052ac <DMA_CheckFifoParam+0xe8>
        break;
 800529a:	bf00      	nop
 800529c:	e006      	b.n	80052ac <DMA_CheckFifoParam+0xe8>
        break;
 800529e:	bf00      	nop
 80052a0:	e004      	b.n	80052ac <DMA_CheckFifoParam+0xe8>
        break;
 80052a2:	bf00      	nop
 80052a4:	e002      	b.n	80052ac <DMA_CheckFifoParam+0xe8>
        break;
 80052a6:	bf00      	nop
 80052a8:	e000      	b.n	80052ac <DMA_CheckFifoParam+0xe8>
    break;
 80052aa:	bf00      	nop
    }
  }

  return status;
 80052ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3714      	adds	r7, #20
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop

080052bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a38      	ldr	r2, [pc, #224]	; (80053b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d022      	beq.n	800531a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a36      	ldr	r2, [pc, #216]	; (80053b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d01d      	beq.n	800531a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a35      	ldr	r2, [pc, #212]	; (80053b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d018      	beq.n	800531a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a33      	ldr	r2, [pc, #204]	; (80053bc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d013      	beq.n	800531a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a32      	ldr	r2, [pc, #200]	; (80053c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d00e      	beq.n	800531a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a30      	ldr	r2, [pc, #192]	; (80053c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d009      	beq.n	800531a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a2f      	ldr	r2, [pc, #188]	; (80053c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d004      	beq.n	800531a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a2d      	ldr	r2, [pc, #180]	; (80053cc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d101      	bne.n	800531e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800531a:	2301      	movs	r3, #1
 800531c:	e000      	b.n	8005320 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800531e:	2300      	movs	r3, #0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d01a      	beq.n	800535a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	b2db      	uxtb	r3, r3
 800532a:	3b08      	subs	r3, #8
 800532c:	4a28      	ldr	r2, [pc, #160]	; (80053d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800532e:	fba2 2303 	umull	r2, r3, r2, r3
 8005332:	091b      	lsrs	r3, r3, #4
 8005334:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	4b26      	ldr	r3, [pc, #152]	; (80053d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800533a:	4413      	add	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	461a      	mov	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a24      	ldr	r2, [pc, #144]	; (80053d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005348:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f003 031f 	and.w	r3, r3, #31
 8005350:	2201      	movs	r2, #1
 8005352:	409a      	lsls	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005358:	e024      	b.n	80053a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	b2db      	uxtb	r3, r3
 8005360:	3b10      	subs	r3, #16
 8005362:	4a1e      	ldr	r2, [pc, #120]	; (80053dc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005364:	fba2 2303 	umull	r2, r3, r2, r3
 8005368:	091b      	lsrs	r3, r3, #4
 800536a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	4a1c      	ldr	r2, [pc, #112]	; (80053e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d806      	bhi.n	8005382 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	4a1b      	ldr	r2, [pc, #108]	; (80053e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d902      	bls.n	8005382 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	3308      	adds	r3, #8
 8005380:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	4b18      	ldr	r3, [pc, #96]	; (80053e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005386:	4413      	add	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	461a      	mov	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a16      	ldr	r2, [pc, #88]	; (80053ec <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005394:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f003 031f 	and.w	r3, r3, #31
 800539c:	2201      	movs	r2, #1
 800539e:	409a      	lsls	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80053a4:	bf00      	nop
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr
 80053b0:	58025408 	.word	0x58025408
 80053b4:	5802541c 	.word	0x5802541c
 80053b8:	58025430 	.word	0x58025430
 80053bc:	58025444 	.word	0x58025444
 80053c0:	58025458 	.word	0x58025458
 80053c4:	5802546c 	.word	0x5802546c
 80053c8:	58025480 	.word	0x58025480
 80053cc:	58025494 	.word	0x58025494
 80053d0:	cccccccd 	.word	0xcccccccd
 80053d4:	16009600 	.word	0x16009600
 80053d8:	58025880 	.word	0x58025880
 80053dc:	aaaaaaab 	.word	0xaaaaaaab
 80053e0:	400204b8 	.word	0x400204b8
 80053e4:	4002040f 	.word	0x4002040f
 80053e8:	10008200 	.word	0x10008200
 80053ec:	40020880 	.word	0x40020880

080053f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d04a      	beq.n	800549c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2b08      	cmp	r3, #8
 800540a:	d847      	bhi.n	800549c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a25      	ldr	r2, [pc, #148]	; (80054a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d022      	beq.n	800545c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a24      	ldr	r2, [pc, #144]	; (80054ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d01d      	beq.n	800545c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a22      	ldr	r2, [pc, #136]	; (80054b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d018      	beq.n	800545c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a21      	ldr	r2, [pc, #132]	; (80054b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d013      	beq.n	800545c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a1f      	ldr	r2, [pc, #124]	; (80054b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d00e      	beq.n	800545c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a1e      	ldr	r2, [pc, #120]	; (80054bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d009      	beq.n	800545c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a1c      	ldr	r2, [pc, #112]	; (80054c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d004      	beq.n	800545c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a1b      	ldr	r2, [pc, #108]	; (80054c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d101      	bne.n	8005460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800545c:	2301      	movs	r3, #1
 800545e:	e000      	b.n	8005462 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005460:	2300      	movs	r3, #0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00a      	beq.n	800547c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	4b17      	ldr	r3, [pc, #92]	; (80054c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800546a:	4413      	add	r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	461a      	mov	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a15      	ldr	r2, [pc, #84]	; (80054cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005478:	671a      	str	r2, [r3, #112]	; 0x70
 800547a:	e009      	b.n	8005490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	4b14      	ldr	r3, [pc, #80]	; (80054d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005480:	4413      	add	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	461a      	mov	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a11      	ldr	r2, [pc, #68]	; (80054d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800548e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	3b01      	subs	r3, #1
 8005494:	2201      	movs	r2, #1
 8005496:	409a      	lsls	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800549c:	bf00      	nop
 800549e:	3714      	adds	r7, #20
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr
 80054a8:	58025408 	.word	0x58025408
 80054ac:	5802541c 	.word	0x5802541c
 80054b0:	58025430 	.word	0x58025430
 80054b4:	58025444 	.word	0x58025444
 80054b8:	58025458 	.word	0x58025458
 80054bc:	5802546c 	.word	0x5802546c
 80054c0:	58025480 	.word	0x58025480
 80054c4:	58025494 	.word	0x58025494
 80054c8:	1600963f 	.word	0x1600963f
 80054cc:	58025940 	.word	0x58025940
 80054d0:	1000823f 	.word	0x1000823f
 80054d4:	40020940 	.word	0x40020940

080054d8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e0c6      	b.n	8005678 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d102      	bne.n	80054f8 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f7fb ff4c 	bl	8001390 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2223      	movs	r2, #35	; 0x23
 80054fc:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054fe:	4b60      	ldr	r3, [pc, #384]	; (8005680 <HAL_ETH_Init+0x1a8>)
 8005500:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005504:	4a5e      	ldr	r2, [pc, #376]	; (8005680 <HAL_ETH_Init+0x1a8>)
 8005506:	f043 0302 	orr.w	r3, r3, #2
 800550a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800550e:	4b5c      	ldr	r3, [pc, #368]	; (8005680 <HAL_ETH_Init+0x1a8>)
 8005510:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	60bb      	str	r3, [r7, #8]
 800551a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	7a1b      	ldrb	r3, [r3, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d103      	bne.n	800552c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005524:	2000      	movs	r0, #0
 8005526:	f7fc fb45 	bl	8001bb4 <HAL_SYSCFG_ETHInterfaceSelect>
 800552a:	e003      	b.n	8005534 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800552c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005530:	f7fc fb40 	bl	8001bb4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0201 	orr.w	r2, r2, #1
 8005546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800554a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800554c:	f7fc faf8 	bl	8001b40 <HAL_GetTick>
 8005550:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005552:	e00f      	b.n	8005574 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8005554:	f7fc faf4 	bl	8001b40 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005562:	d907      	bls.n	8005574 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2204      	movs	r2, #4
 8005568:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	22e0      	movs	r2, #224	; 0xe0
 800556e:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e081      	b.n	8005678 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1e6      	bne.n	8005554 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 fac0 	bl	8005b0c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800558c:	f003 fdd0 	bl	8009130 <HAL_RCC_GetHCLKFreq>
 8005590:	4602      	mov	r2, r0
 8005592:	4b3c      	ldr	r3, [pc, #240]	; (8005684 <HAL_ETH_Init+0x1ac>)
 8005594:	fba3 2302 	umull	r2, r3, r3, r2
 8005598:	0c9a      	lsrs	r2, r3, #18
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	3a01      	subs	r2, #1
 80055a0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 fa13 	bl	80059d0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80055c0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80055c4:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	f003 0303 	and.w	r3, r3, #3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d007      	beq.n	80055e2 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	22e0      	movs	r2, #224	; 0xe0
 80055dc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e04a      	b.n	8005678 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	f241 1308 	movw	r3, #4360	; 0x1108
 80055ea:	4413      	add	r3, r2
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	4b26      	ldr	r3, [pc, #152]	; (8005688 <HAL_ETH_Init+0x1b0>)
 80055f0:	4013      	ands	r3, r2
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	6952      	ldr	r2, [r2, #20]
 80055f6:	0052      	lsls	r2, r2, #1
 80055f8:	6879      	ldr	r1, [r7, #4]
 80055fa:	6809      	ldr	r1, [r1, #0]
 80055fc:	431a      	orrs	r2, r3
 80055fe:	f241 1308 	movw	r3, #4360	; 0x1108
 8005602:	440b      	add	r3, r1
 8005604:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 fad8 	bl	8005bbc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 fb1c 	bl	8005c4a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	3305      	adds	r3, #5
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	021a      	lsls	r2, r3, #8
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	3304      	adds	r3, #4
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	4619      	mov	r1, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	3303      	adds	r3, #3
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	061a      	lsls	r2, r3, #24
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	3302      	adds	r3, #2
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	041b      	lsls	r3, r3, #16
 8005644:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	3301      	adds	r3, #1
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005650:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800565e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005660:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2210      	movs	r2, #16
 800566e:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2210      	movs	r2, #16
 8005674:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	58024400 	.word	0x58024400
 8005684:	431bde83 	.word	0x431bde83
 8005688:	ffff8001 	.word	0xffff8001

0800568c <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800569e:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	791b      	ldrb	r3, [r3, #4]
 80056a4:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80056a6:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	7b1b      	ldrb	r3, [r3, #12]
 80056ac:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80056ae:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	7b5b      	ldrb	r3, [r3, #13]
 80056b4:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80056b6:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	7b9b      	ldrb	r3, [r3, #14]
 80056bc:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80056be:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	7bdb      	ldrb	r3, [r3, #15]
 80056c4:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80056c6:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	7c12      	ldrb	r2, [r2, #16]
 80056cc:	2a00      	cmp	r2, #0
 80056ce:	d102      	bne.n	80056d6 <ETH_SetMACConfig+0x4a>
 80056d0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80056d4:	e000      	b.n	80056d8 <ETH_SetMACConfig+0x4c>
 80056d6:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80056d8:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	7c52      	ldrb	r2, [r2, #17]
 80056de:	2a00      	cmp	r2, #0
 80056e0:	d102      	bne.n	80056e8 <ETH_SetMACConfig+0x5c>
 80056e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80056e6:	e000      	b.n	80056ea <ETH_SetMACConfig+0x5e>
 80056e8:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80056ea:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	7c9b      	ldrb	r3, [r3, #18]
 80056f0:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80056f2:	431a      	orrs	r2, r3
                                macconf->Speed |
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80056f8:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80056fe:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	7f1b      	ldrb	r3, [r3, #28]
 8005704:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8005706:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	7f5b      	ldrb	r3, [r3, #29]
 800570c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800570e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	7f92      	ldrb	r2, [r2, #30]
 8005714:	2a00      	cmp	r2, #0
 8005716:	d102      	bne.n	800571e <ETH_SetMACConfig+0x92>
 8005718:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800571c:	e000      	b.n	8005720 <ETH_SetMACConfig+0x94>
 800571e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005720:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	7fdb      	ldrb	r3, [r3, #31]
 8005726:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005728:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005730:	2a00      	cmp	r2, #0
 8005732:	d102      	bne.n	800573a <ETH_SetMACConfig+0xae>
 8005734:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005738:	e000      	b.n	800573c <ETH_SetMACConfig+0xb0>
 800573a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800573c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8005742:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800574a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 800574c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8005752:	4313      	orrs	r3, r2
 8005754:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	4b56      	ldr	r3, [pc, #344]	; (80058b8 <ETH_SetMACConfig+0x22c>)
 800575e:	4013      	ands	r3, r2
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	6812      	ldr	r2, [r2, #0]
 8005764:	68f9      	ldr	r1, [r7, #12]
 8005766:	430b      	orrs	r3, r1
 8005768:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800576e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005776:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005778:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005780:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8005782:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800578a:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800578c:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800578e:	683a      	ldr	r2, [r7, #0]
 8005790:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005794:	2a00      	cmp	r2, #0
 8005796:	d102      	bne.n	800579e <ETH_SetMACConfig+0x112>
 8005798:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800579c:	e000      	b.n	80057a0 <ETH_SetMACConfig+0x114>
 800579e:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80057a0:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80057a6:	4313      	orrs	r3, r2
 80057a8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	4b42      	ldr	r3, [pc, #264]	; (80058bc <ETH_SetMACConfig+0x230>)
 80057b2:	4013      	ands	r3, r2
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	6812      	ldr	r2, [r2, #0]
 80057b8:	68f9      	ldr	r1, [r7, #12]
 80057ba:	430b      	orrs	r3, r1
 80057bc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057c4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80057ca:	4313      	orrs	r3, r2
 80057cc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68da      	ldr	r2, [r3, #12]
 80057d4:	4b3a      	ldr	r3, [pc, #232]	; (80058c0 <ETH_SetMACConfig+0x234>)
 80057d6:	4013      	ands	r3, r2
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	6812      	ldr	r2, [r2, #0]
 80057dc:	68f9      	ldr	r1, [r7, #12]
 80057de:	430b      	orrs	r3, r1
 80057e0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80057e8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80057ee:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80057f0:	683a      	ldr	r2, [r7, #0]
 80057f2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80057f6:	2a00      	cmp	r2, #0
 80057f8:	d101      	bne.n	80057fe <ETH_SetMACConfig+0x172>
 80057fa:	2280      	movs	r2, #128	; 0x80
 80057fc:	e000      	b.n	8005800 <ETH_SetMACConfig+0x174>
 80057fe:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005800:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005806:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005808:	4313      	orrs	r3, r2
 800580a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005812:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005816:	4013      	ands	r3, r2
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6812      	ldr	r2, [r2, #0]
 800581c:	68f9      	ldr	r1, [r7, #12]
 800581e:	430b      	orrs	r3, r1
 8005820:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005828:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005830:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005832:	4313      	orrs	r3, r2
 8005834:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800583e:	f023 0103 	bic.w	r1, r3, #3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	430a      	orrs	r2, r1
 800584a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005856:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	430a      	orrs	r2, r1
 8005864:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800586c:	683a      	ldr	r2, [r7, #0]
 800586e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005872:	2a00      	cmp	r2, #0
 8005874:	d101      	bne.n	800587a <ETH_SetMACConfig+0x1ee>
 8005876:	2240      	movs	r2, #64	; 0x40
 8005878:	e000      	b.n	800587c <ETH_SetMACConfig+0x1f0>
 800587a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800587c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005884:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005886:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800588e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005890:	4313      	orrs	r3, r2
 8005892:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800589c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80058ac:	bf00      	nop
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr
 80058b8:	00048083 	.word	0x00048083
 80058bc:	c0f88000 	.word	0xc0f88000
 80058c0:	fffffef0 	.word	0xfffffef0

080058c4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	4b38      	ldr	r3, [pc, #224]	; (80059bc <ETH_SetDMAConfig+0xf8>)
 80058da:	4013      	ands	r3, r2
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	6812      	ldr	r2, [r2, #0]
 80058e0:	6879      	ldr	r1, [r7, #4]
 80058e2:	6809      	ldr	r1, [r1, #0]
 80058e4:	431a      	orrs	r2, r3
 80058e6:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80058ea:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	791b      	ldrb	r3, [r3, #4]
 80058f0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80058f6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	7b1b      	ldrb	r3, [r3, #12]
 80058fc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80058fe:	4313      	orrs	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	f241 0304 	movw	r3, #4100	; 0x1004
 800590a:	4413      	add	r3, r2
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	4b2c      	ldr	r3, [pc, #176]	; (80059c0 <ETH_SetDMAConfig+0xfc>)
 8005910:	4013      	ands	r3, r2
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	6811      	ldr	r1, [r2, #0]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	431a      	orrs	r2, r3
 800591a:	f241 0304 	movw	r3, #4100	; 0x1004
 800591e:	440b      	add	r3, r1
 8005920:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	7b5b      	ldrb	r3, [r3, #13]
 8005926:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800592c:	4313      	orrs	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	4b22      	ldr	r3, [pc, #136]	; (80059c4 <ETH_SetDMAConfig+0x100>)
 800593c:	4013      	ands	r3, r2
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	6811      	ldr	r1, [r2, #0]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	431a      	orrs	r2, r3
 8005946:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800594a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	7d1b      	ldrb	r3, [r3, #20]
 8005954:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005956:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	7f5b      	ldrb	r3, [r3, #29]
 800595c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800595e:	4313      	orrs	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	f241 1304 	movw	r3, #4356	; 0x1104
 800596a:	4413      	add	r3, r2
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	4b16      	ldr	r3, [pc, #88]	; (80059c8 <ETH_SetDMAConfig+0x104>)
 8005970:	4013      	ands	r3, r2
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	6811      	ldr	r1, [r2, #0]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	431a      	orrs	r2, r3
 800597a:	f241 1304 	movw	r3, #4356	; 0x1104
 800597e:	440b      	add	r3, r1
 8005980:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	7f1b      	ldrb	r3, [r3, #28]
 8005986:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800598c:	4313      	orrs	r3, r2
 800598e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	f241 1308 	movw	r3, #4360	; 0x1108
 8005998:	4413      	add	r3, r2
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	4b0b      	ldr	r3, [pc, #44]	; (80059cc <ETH_SetDMAConfig+0x108>)
 800599e:	4013      	ands	r3, r2
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	6811      	ldr	r1, [r2, #0]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	431a      	orrs	r2, r3
 80059a8:	f241 1308 	movw	r3, #4360	; 0x1108
 80059ac:	440b      	add	r3, r1
 80059ae:	601a      	str	r2, [r3, #0]
}
 80059b0:	bf00      	nop
 80059b2:	3714      	adds	r7, #20
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr
 80059bc:	ffff87fd 	.word	0xffff87fd
 80059c0:	ffff2ffe 	.word	0xffff2ffe
 80059c4:	fffec000 	.word	0xfffec000
 80059c8:	ffc0efef 	.word	0xffc0efef
 80059cc:	7fc0ffff 	.word	0x7fc0ffff

080059d0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b0a4      	sub	sp, #144	; 0x90
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80059d8:	2301      	movs	r3, #1
 80059da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80059de:	2300      	movs	r3, #0
 80059e0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80059e2:	2300      	movs	r3, #0
 80059e4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80059e8:	2300      	movs	r3, #0
 80059ea:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80059ee:	2301      	movs	r3, #1
 80059f0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80059f4:	2301      	movs	r3, #1
 80059f6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80059fa:	2301      	movs	r3, #1
 80059fc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005a00:	2300      	movs	r3, #0
 8005a02:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005a06:	2301      	movs	r3, #1
 8005a08:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005a0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a10:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005a12:	2300      	movs	r3, #0
 8005a14:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005a22:	2300      	movs	r3, #0
 8005a24:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005a28:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005a2c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005a34:	2300      	movs	r3, #0
 8005a36:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005a44:	2300      	movs	r3, #0
 8005a46:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005a52:	2300      	movs	r3, #0
 8005a54:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005a56:	2300      	movs	r3, #0
 8005a58:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005a62:	2301      	movs	r3, #1
 8005a64:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005a68:	2320      	movs	r3, #32
 8005a6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005a74:	2300      	movs	r3, #0
 8005a76:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005a7a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8005a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005a80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005a84:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005a86:	2300      	movs	r3, #0
 8005a88:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005a92:	2300      	movs	r3, #0
 8005a94:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ab8:	4619      	mov	r1, r3
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7ff fde6 	bl	800568c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005acc:	2300      	movs	r3, #0
 8005ace:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005ada:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005ade:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005ae4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005ae8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005aea:	2300      	movs	r3, #0
 8005aec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8005af0:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005af4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005af6:	f107 0308 	add.w	r3, r7, #8
 8005afa:	4619      	mov	r1, r3
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f7ff fee1 	bl	80058c4 <ETH_SetDMAConfig>
}
 8005b02:	bf00      	nop
 8005b04:	3790      	adds	r7, #144	; 0x90
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
	...

08005b0c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b1c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005b24:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005b26:	f003 fb03 	bl	8009130 <HAL_RCC_GetHCLKFreq>
 8005b2a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	4a1e      	ldr	r2, [pc, #120]	; (8005ba8 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d908      	bls.n	8005b46 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	4a1d      	ldr	r2, [pc, #116]	; (8005bac <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d804      	bhi.n	8005b46 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b42:	60fb      	str	r3, [r7, #12]
 8005b44:	e027      	b.n	8005b96 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	4a18      	ldr	r2, [pc, #96]	; (8005bac <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d908      	bls.n	8005b60 <ETH_MAC_MDIO_ClkConfig+0x54>
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	4a17      	ldr	r2, [pc, #92]	; (8005bb0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d804      	bhi.n	8005b60 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005b5c:	60fb      	str	r3, [r7, #12]
 8005b5e:	e01a      	b.n	8005b96 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	4a13      	ldr	r2, [pc, #76]	; (8005bb0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d903      	bls.n	8005b70 <ETH_MAC_MDIO_ClkConfig+0x64>
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	4a12      	ldr	r2, [pc, #72]	; (8005bb4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d911      	bls.n	8005b94 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	4a10      	ldr	r2, [pc, #64]	; (8005bb4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d908      	bls.n	8005b8a <ETH_MAC_MDIO_ClkConfig+0x7e>
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	4a0f      	ldr	r2, [pc, #60]	; (8005bb8 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d804      	bhi.n	8005b8a <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b86:	60fb      	str	r3, [r7, #12]
 8005b88:	e005      	b.n	8005b96 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b90:	60fb      	str	r3, [r7, #12]
 8005b92:	e000      	b.n	8005b96 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005b94:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005ba0:	bf00      	nop
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	01312cff 	.word	0x01312cff
 8005bac:	02160ebf 	.word	0x02160ebf
 8005bb0:	039386ff 	.word	0x039386ff
 8005bb4:	05f5e0ff 	.word	0x05f5e0ff
 8005bb8:	08f0d17f 	.word	0x08f0d17f

08005bbc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	60fb      	str	r3, [r7, #12]
 8005bc8:	e01d      	b.n	8005c06 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68d9      	ldr	r1, [r3, #12]
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	005b      	lsls	r3, r3, #1
 8005bd4:	4413      	add	r3, r2
 8005bd6:	00db      	lsls	r3, r3, #3
 8005bd8:	440b      	add	r3, r1
 8005bda:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	2200      	movs	r2, #0
 8005be0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	2200      	movs	r2, #0
 8005be6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2200      	movs	r2, #0
 8005bec:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005bf4:	68b9      	ldr	r1, [r7, #8]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	3206      	adds	r2, #6
 8005bfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	3301      	adds	r3, #1
 8005c04:	60fb      	str	r3, [r7, #12]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2b03      	cmp	r3, #3
 8005c0a:	d9de      	bls.n	8005bca <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	f241 132c 	movw	r3, #4396	; 0x112c
 8005c1a:	4413      	add	r3, r2
 8005c1c:	2203      	movs	r2, #3
 8005c1e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	68d9      	ldr	r1, [r3, #12]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	f241 1314 	movw	r3, #4372	; 0x1114
 8005c2c:	4413      	add	r3, r2
 8005c2e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	68da      	ldr	r2, [r3, #12]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005c3c:	601a      	str	r2, [r3, #0]
}
 8005c3e:	bf00      	nop
 8005c40:	3714      	adds	r7, #20
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b085      	sub	sp, #20
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005c52:	2300      	movs	r3, #0
 8005c54:	60fb      	str	r3, [r7, #12]
 8005c56:	e024      	b.n	8005ca2 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6919      	ldr	r1, [r3, #16]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	005b      	lsls	r3, r3, #1
 8005c62:	4413      	add	r3, r2
 8005c64:	00db      	lsls	r3, r3, #3
 8005c66:	440b      	add	r3, r1
 8005c68:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	2200      	movs	r2, #0
 8005c74:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	2200      	movs	r2, #0
 8005c86:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	6879      	ldr	r1, [r7, #4]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	330a      	adds	r3, #10
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	440b      	add	r3, r1
 8005c9a:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	60fb      	str	r3, [r7, #12]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2b03      	cmp	r3, #3
 8005ca6:	d9d7      	bls.n	8005c58 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	f241 1330 	movw	r3, #4400	; 0x1130
 8005cce:	4413      	add	r3, r2
 8005cd0:	2203      	movs	r2, #3
 8005cd2:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6919      	ldr	r1, [r3, #16]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	f241 131c 	movw	r3, #4380	; 0x111c
 8005ce0:	4413      	add	r3, r2
 8005ce2:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	f241 1328 	movw	r3, #4392	; 0x1128
 8005cf4:	4413      	add	r3, r2
 8005cf6:	6019      	str	r1, [r3, #0]
}
 8005cf8:	bf00      	nop
 8005cfa:	3714      	adds	r7, #20
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b098      	sub	sp, #96	; 0x60
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005d0c:	4a84      	ldr	r2, [pc, #528]	; (8005f20 <HAL_FDCAN_Init+0x21c>)
 8005d0e:	f107 030c 	add.w	r3, r7, #12
 8005d12:	4611      	mov	r1, r2
 8005d14:	224c      	movs	r2, #76	; 0x4c
 8005d16:	4618      	mov	r0, r3
 8005d18:	f014 fe0a 	bl	801a930 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d101      	bne.n	8005d26 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e1ca      	b.n	80060bc <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a7e      	ldr	r2, [pc, #504]	; (8005f24 <HAL_FDCAN_Init+0x220>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d106      	bne.n	8005d3e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005d38:	461a      	mov	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d106      	bne.n	8005d58 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f7fb fbea 	bl	800152c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	699a      	ldr	r2, [r3, #24]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f022 0210 	bic.w	r2, r2, #16
 8005d66:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d68:	f7fb feea 	bl	8001b40 <HAL_GetTick>
 8005d6c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005d6e:	e014      	b.n	8005d9a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005d70:	f7fb fee6 	bl	8001b40 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	2b0a      	cmp	r3, #10
 8005d7c:	d90d      	bls.n	8005d9a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d84:	f043 0201 	orr.w	r2, r3, #1
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2203      	movs	r2, #3
 8005d92:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e190      	b.n	80060bc <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	f003 0308 	and.w	r3, r3, #8
 8005da4:	2b08      	cmp	r3, #8
 8005da6:	d0e3      	beq.n	8005d70 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	699a      	ldr	r2, [r3, #24]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f042 0201 	orr.w	r2, r2, #1
 8005db6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005db8:	f7fb fec2 	bl	8001b40 <HAL_GetTick>
 8005dbc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005dbe:	e014      	b.n	8005dea <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005dc0:	f7fb febe 	bl	8001b40 <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	2b0a      	cmp	r3, #10
 8005dcc:	d90d      	bls.n	8005dea <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005dd4:	f043 0201 	orr.w	r2, r3, #1
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2203      	movs	r2, #3
 8005de2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e168      	b.n	80060bc <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d0e3      	beq.n	8005dc0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	699a      	ldr	r2, [r3, #24]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f042 0202 	orr.w	r2, r2, #2
 8005e06:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	7c1b      	ldrb	r3, [r3, #16]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d108      	bne.n	8005e22 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	699a      	ldr	r2, [r3, #24]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e1e:	619a      	str	r2, [r3, #24]
 8005e20:	e007      	b.n	8005e32 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	699a      	ldr	r2, [r3, #24]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e30:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	7c5b      	ldrb	r3, [r3, #17]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d108      	bne.n	8005e4c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	699a      	ldr	r2, [r3, #24]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e48:	619a      	str	r2, [r3, #24]
 8005e4a:	e007      	b.n	8005e5c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	699a      	ldr	r2, [r3, #24]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e5a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	7c9b      	ldrb	r3, [r3, #18]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d108      	bne.n	8005e76 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	699a      	ldr	r2, [r3, #24]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e72:	619a      	str	r2, [r3, #24]
 8005e74:	e007      	b.n	8005e86 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	699a      	ldr	r2, [r3, #24]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e84:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	689a      	ldr	r2, [r3, #8]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	699a      	ldr	r2, [r3, #24]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8005eaa:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	691a      	ldr	r2, [r3, #16]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f022 0210 	bic.w	r2, r2, #16
 8005eba:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d108      	bne.n	8005ed6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	699a      	ldr	r2, [r3, #24]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f042 0204 	orr.w	r2, r2, #4
 8005ed2:	619a      	str	r2, [r3, #24]
 8005ed4:	e030      	b.n	8005f38 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d02c      	beq.n	8005f38 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d020      	beq.n	8005f28 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	699a      	ldr	r2, [r3, #24]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ef4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	691a      	ldr	r2, [r3, #16]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f042 0210 	orr.w	r2, r2, #16
 8005f04:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	2b03      	cmp	r3, #3
 8005f0c:	d114      	bne.n	8005f38 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	699a      	ldr	r2, [r3, #24]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f042 0220 	orr.w	r2, r2, #32
 8005f1c:	619a      	str	r2, [r3, #24]
 8005f1e:	e00b      	b.n	8005f38 <HAL_FDCAN_Init+0x234>
 8005f20:	0801ab08 	.word	0x0801ab08
 8005f24:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	699a      	ldr	r2, [r3, #24]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f042 0220 	orr.w	r2, r2, #32
 8005f36:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	69db      	ldr	r3, [r3, #28]
 8005f44:	3b01      	subs	r3, #1
 8005f46:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005f48:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005f50:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	695b      	ldr	r3, [r3, #20]
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005f60:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005f62:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f6c:	d115      	bne.n	8005f9a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f72:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005f7c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f82:	3b01      	subs	r3, #1
 8005f84:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005f86:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005f96:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005f98:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00a      	beq.n	8005fb8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	430a      	orrs	r2, r1
 8005fb4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fc0:	4413      	add	r3, r2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d012      	beq.n	8005fec <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005fce:	f023 0107 	bic.w	r1, r3, #7
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005fdc:	4413      	add	r3, r2
 8005fde:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d012      	beq.n	800601a <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005ffc:	f023 0107 	bic.w	r1, r3, #7
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800600a:	4413      	add	r3, r2
 800600c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	430a      	orrs	r2, r1
 8006016:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800601e:	2b00      	cmp	r3, #0
 8006020:	d013      	beq.n	800604a <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800602a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006038:	4413      	add	r3, r2
 800603a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800603e:	011a      	lsls	r2, r3, #4
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	430a      	orrs	r2, r1
 8006046:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800604e:	2b00      	cmp	r3, #0
 8006050:	d013      	beq.n	800607a <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800605a:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006068:	4413      	add	r3, r2
 800606a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800606e:	021a      	lsls	r2, r3, #8
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	430a      	orrs	r2, r1
 8006076:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a11      	ldr	r2, [pc, #68]	; (80060c4 <HAL_FDCAN_Init+0x3c0>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d107      	bne.n	8006094 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	689a      	ldr	r2, [r3, #8]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f022 0203 	bic.w	r2, r2, #3
 8006092:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 fb15 	bl	80066dc <FDCAN_CalcultateRamBlockAddresses>
 80060b2:	4603      	mov	r3, r0
 80060b4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80060b8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3760      	adds	r7, #96	; 0x60
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	4000a000 	.word	0x4000a000

080060c8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b092      	sub	sp, #72	; 0x48
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80060d0:	4b90      	ldr	r3, [pc, #576]	; (8006314 <HAL_FDCAN_IRQHandler+0x24c>)
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	079b      	lsls	r3, r3, #30
 80060d6:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80060d8:	4b8e      	ldr	r3, [pc, #568]	; (8006314 <HAL_FDCAN_IRQHandler+0x24c>)
 80060da:	695b      	ldr	r3, [r3, #20]
 80060dc:	079b      	lsls	r3, r3, #30
 80060de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060e0:	4013      	ands	r3, r2
 80060e2:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060ea:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80060ee:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060f8:	4013      	ands	r3, r2
 80060fa:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006102:	f003 030f 	and.w	r3, r3, #15
 8006106:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800610e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006110:	4013      	ands	r3, r2
 8006112:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800611a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800611e:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006126:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006128:	4013      	ands	r3, r2
 800612a:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006132:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8006136:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800613e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006140:	4013      	ands	r3, r2
 8006142:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800614a:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 800614e:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006158:	4013      	ands	r3, r2
 800615a:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006166:	2b00      	cmp	r3, #0
 8006168:	d011      	beq.n	800618e <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00a      	beq.n	800618e <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006180:	651a      	str	r2, [r3, #80]	; 0x50
 8006182:	4b64      	ldr	r3, [pc, #400]	; (8006314 <HAL_FDCAN_IRQHandler+0x24c>)
 8006184:	2200      	movs	r2, #0
 8006186:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 fa5a 	bl	8006642 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006198:	2b00      	cmp	r3, #0
 800619a:	d01e      	beq.n	80061da <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d017      	beq.n	80061da <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80061b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80061bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061be:	4013      	ands	r3, r2
 80061c0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061ca:	651a      	str	r2, [r3, #80]	; 0x50
 80061cc:	4b51      	ldr	r3, [pc, #324]	; (8006314 <HAL_FDCAN_IRQHandler+0x24c>)
 80061ce:	2200      	movs	r2, #0
 80061d0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80061d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 fa0b 	bl	80065f0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80061da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00d      	beq.n	80061fc <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061e6:	4b4c      	ldr	r3, [pc, #304]	; (8006318 <HAL_FDCAN_IRQHandler+0x250>)
 80061e8:	400b      	ands	r3, r1
 80061ea:	6513      	str	r3, [r2, #80]	; 0x50
 80061ec:	4a49      	ldr	r2, [pc, #292]	; (8006314 <HAL_FDCAN_IRQHandler+0x24c>)
 80061ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061f0:	0f9b      	lsrs	r3, r3, #30
 80061f2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80061f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 f9c4 	bl	8006584 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80061fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00d      	beq.n	800621e <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006208:	4b43      	ldr	r3, [pc, #268]	; (8006318 <HAL_FDCAN_IRQHandler+0x250>)
 800620a:	400b      	ands	r3, r1
 800620c:	6513      	str	r3, [r2, #80]	; 0x50
 800620e:	4a41      	ldr	r2, [pc, #260]	; (8006314 <HAL_FDCAN_IRQHandler+0x24c>)
 8006210:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006212:	0f9b      	lsrs	r3, r3, #30
 8006214:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006216:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 f9be 	bl	800659a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800621e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00d      	beq.n	8006240 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800622a:	4b3b      	ldr	r3, [pc, #236]	; (8006318 <HAL_FDCAN_IRQHandler+0x250>)
 800622c:	400b      	ands	r3, r1
 800622e:	6513      	str	r3, [r2, #80]	; 0x50
 8006230:	4a38      	ldr	r2, [pc, #224]	; (8006314 <HAL_FDCAN_IRQHandler+0x24c>)
 8006232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006234:	0f9b      	lsrs	r3, r3, #30
 8006236:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006238:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f7fa ff00 	bl	8001040 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00d      	beq.n	8006262 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800624c:	4b32      	ldr	r3, [pc, #200]	; (8006318 <HAL_FDCAN_IRQHandler+0x250>)
 800624e:	400b      	ands	r3, r1
 8006250:	6513      	str	r3, [r2, #80]	; 0x50
 8006252:	4a30      	ldr	r2, [pc, #192]	; (8006314 <HAL_FDCAN_IRQHandler+0x24c>)
 8006254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006256:	0f9b      	lsrs	r3, r3, #30
 8006258:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800625a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 f9a7 	bl	80065b0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006268:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800626c:	2b00      	cmp	r3, #0
 800626e:	d011      	beq.n	8006294 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006276:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00a      	beq.n	8006294 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006286:	651a      	str	r2, [r3, #80]	; 0x50
 8006288:	4b22      	ldr	r3, [pc, #136]	; (8006314 <HAL_FDCAN_IRQHandler+0x24c>)
 800628a:	2200      	movs	r2, #0
 800628c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f999 	bl	80065c6 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800629a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d01e      	beq.n	80062e0 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d017      	beq.n	80062e0 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80062b8:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80062c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062c4:	4013      	ands	r3, r2
 80062c6:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062d0:	651a      	str	r2, [r3, #80]	; 0x50
 80062d2:	4b10      	ldr	r3, [pc, #64]	; (8006314 <HAL_FDCAN_IRQHandler+0x24c>)
 80062d4:	2200      	movs	r2, #0
 80062d6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80062d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f97d 	bl	80065da <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d016      	beq.n	800631c <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00f      	beq.n	800631c <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006304:	651a      	str	r2, [r3, #80]	; 0x50
 8006306:	4b03      	ldr	r3, [pc, #12]	; (8006314 <HAL_FDCAN_IRQHandler+0x24c>)
 8006308:	2200      	movs	r2, #0
 800630a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 f97a 	bl	8006606 <HAL_FDCAN_RxBufferNewMessageCallback>
 8006312:	e003      	b.n	800631c <HAL_FDCAN_IRQHandler+0x254>
 8006314:	4000a800 	.word	0x4000a800
 8006318:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d011      	beq.n	800634e <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00a      	beq.n	800634e <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006340:	651a      	str	r2, [r3, #80]	; 0x50
 8006342:	4b8d      	ldr	r3, [pc, #564]	; (8006578 <HAL_FDCAN_IRQHandler+0x4b0>)
 8006344:	2200      	movs	r2, #0
 8006346:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 f966 	bl	800661a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006354:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d011      	beq.n	8006380 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006362:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00a      	beq.n	8006380 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006372:	651a      	str	r2, [r3, #80]	; 0x50
 8006374:	4b80      	ldr	r3, [pc, #512]	; (8006578 <HAL_FDCAN_IRQHandler+0x4b0>)
 8006376:	2200      	movs	r2, #0
 8006378:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 f957 	bl	800662e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800638a:	2b00      	cmp	r3, #0
 800638c:	d016      	beq.n	80063bc <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00f      	beq.n	80063bc <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80063a4:	651a      	str	r2, [r3, #80]	; 0x50
 80063a6:	4b74      	ldr	r3, [pc, #464]	; (8006578 <HAL_FDCAN_IRQHandler+0x4b0>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063b2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80063bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00d      	beq.n	80063de <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063c8:	4b6c      	ldr	r3, [pc, #432]	; (800657c <HAL_FDCAN_IRQHandler+0x4b4>)
 80063ca:	400b      	ands	r3, r1
 80063cc:	6513      	str	r3, [r2, #80]	; 0x50
 80063ce:	4a6a      	ldr	r2, [pc, #424]	; (8006578 <HAL_FDCAN_IRQHandler+0x4b0>)
 80063d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d2:	0f9b      	lsrs	r3, r3, #30
 80063d4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80063d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 f946 	bl	800666a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80063de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d011      	beq.n	8006408 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80063ea:	4b64      	ldr	r3, [pc, #400]	; (800657c <HAL_FDCAN_IRQHandler+0x4b4>)
 80063ec:	400b      	ands	r3, r1
 80063ee:	6513      	str	r3, [r2, #80]	; 0x50
 80063f0:	4a61      	ldr	r2, [pc, #388]	; (8006578 <HAL_FDCAN_IRQHandler+0x4b0>)
 80063f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f4:	0f9b      	lsrs	r3, r3, #30
 80063f6:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80063fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006400:	431a      	orrs	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a5c      	ldr	r2, [pc, #368]	; (8006580 <HAL_FDCAN_IRQHandler+0x4b8>)
 800640e:	4293      	cmp	r3, r2
 8006410:	f040 80a6 	bne.w	8006560 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	f003 0303 	and.w	r3, r3, #3
 800641e:	2b00      	cmp	r3, #0
 8006420:	f000 809e 	beq.w	8006560 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	6a1b      	ldr	r3, [r3, #32]
 800642a:	f003 030f 	and.w	r3, r3, #15
 800642e:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006438:	4013      	ands	r3, r2
 800643a:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006446:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644e:	6a3a      	ldr	r2, [r7, #32]
 8006450:	4013      	ands	r3, r2
 8006452:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800645e:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006466:	69fa      	ldr	r2, [r7, #28]
 8006468:	4013      	ands	r3, r2
 800646a:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8006476:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647e:	69ba      	ldr	r2, [r7, #24]
 8006480:	4013      	ands	r3, r2
 8006482:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 800648e:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	4013      	ands	r3, r2
 800649a:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d007      	beq.n	80064b2 <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064a8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80064aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 f8e7 	bl	8006680 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80064b2:	6a3b      	ldr	r3, [r7, #32]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d007      	beq.n	80064c8 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	6a3a      	ldr	r2, [r7, #32]
 80064be:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80064c0:	6a39      	ldr	r1, [r7, #32]
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 f8e7 	bl	8006696 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d01b      	beq.n	800650e <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	6a1b      	ldr	r3, [r3, #32]
 80064dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d014      	beq.n	800650e <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ea:	0c1b      	lsrs	r3, r3, #16
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064fa:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	2240      	movs	r2, #64	; 0x40
 8006502:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	6939      	ldr	r1, [r7, #16]
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 f8cf 	bl	80066ac <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d007      	beq.n	8006524 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	69fa      	ldr	r2, [r7, #28]
 800651a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800651c:	69f9      	ldr	r1, [r7, #28]
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f8d0 	bl	80066c4 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00b      	beq.n	8006542 <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	69ba      	ldr	r2, [r7, #24]
 8006530:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	431a      	orrs	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00b      	beq.n	8006560 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	431a      	orrs	r2, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006566:	2b00      	cmp	r3, #0
 8006568:	d002      	beq.n	8006570 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f873 	bl	8006656 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006570:	bf00      	nop
 8006572:	3748      	adds	r7, #72	; 0x48
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	4000a800 	.word	0x4000a800
 800657c:	3fcfffff 	.word	0x3fcfffff
 8006580:	4000a000 	.word	0x4000a000

08006584 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800658e:	bf00      	nop
 8006590:	370c      	adds	r7, #12
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr

0800659a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800659a:	b480      	push	{r7}
 800659c:	b083      	sub	sp, #12
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
 80065a2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80065ba:	bf00      	nop
 80065bc:	370c      	adds	r7, #12
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr

080065c6 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80065c6:	b480      	push	{r7}
 80065c8:	b083      	sub	sp, #12
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80065ce:	bf00      	nop
 80065d0:	370c      	adds	r7, #12
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr

080065da <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80065da:	b480      	push	{r7}
 80065dc:	b083      	sub	sp, #12
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
 80065e2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80065e4:	bf00      	nop
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80065fa:	bf00      	nop
 80065fc:	370c      	adds	r7, #12
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr

08006606 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006606:	b480      	push	{r7}
 8006608:	b083      	sub	sp, #12
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800660e:	bf00      	nop
 8006610:	370c      	adds	r7, #12
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800661a:	b480      	push	{r7}
 800661c:	b083      	sub	sp, #12
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8006622:	bf00      	nop
 8006624:	370c      	adds	r7, #12
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr

0800662e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800662e:	b480      	push	{r7}
 8006630:	b083      	sub	sp, #12
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006636:	bf00      	nop
 8006638:	370c      	adds	r7, #12
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006642:	b480      	push	{r7}
 8006644:	b083      	sub	sp, #12
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800664a:	bf00      	nop
 800664c:	370c      	adds	r7, #12
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006656:	b480      	push	{r7}
 8006658:	b083      	sub	sp, #12
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800665e:	bf00      	nop
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800666a:	b480      	push	{r7}
 800666c:	b083      	sub	sp, #12
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
 8006672:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800668a:	bf00      	nop
 800668c:	370c      	adds	r7, #12
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr

08006696 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8006696:	b480      	push	{r7}
 8006698:	b083      	sub	sp, #12
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
 800669e:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80066b8:	bf00      	nop
 80066ba:	3714      	adds	r7, #20
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80066ce:	bf00      	nop
 80066d0:	370c      	adds	r7, #12
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
	...

080066dc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066e8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80066f2:	4ba7      	ldr	r3, [pc, #668]	; (8006990 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80066f4:	4013      	ands	r3, r2
 80066f6:	68ba      	ldr	r2, [r7, #8]
 80066f8:	0091      	lsls	r1, r2, #2
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	6812      	ldr	r2, [r2, #0]
 80066fe:	430b      	orrs	r3, r1
 8006700:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800670c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006714:	041a      	lsls	r2, r3, #16
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	430a      	orrs	r2, r1
 800671c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	4413      	add	r3, r2
 8006728:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006732:	4b97      	ldr	r3, [pc, #604]	; (8006990 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006734:	4013      	ands	r3, r2
 8006736:	68ba      	ldr	r2, [r7, #8]
 8006738:	0091      	lsls	r1, r2, #2
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	6812      	ldr	r2, [r2, #0]
 800673e:	430b      	orrs	r3, r1
 8006740:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800674c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006754:	041a      	lsls	r2, r3, #16
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	430a      	orrs	r2, r1
 800675c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006764:	005b      	lsls	r3, r3, #1
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	4413      	add	r3, r2
 800676a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006774:	4b86      	ldr	r3, [pc, #536]	; (8006990 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006776:	4013      	ands	r3, r2
 8006778:	68ba      	ldr	r2, [r7, #8]
 800677a:	0091      	lsls	r1, r2, #2
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	6812      	ldr	r2, [r2, #0]
 8006780:	430b      	orrs	r3, r1
 8006782:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800678e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006796:	041a      	lsls	r2, r3, #16
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	430a      	orrs	r2, r1
 800679e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80067aa:	fb02 f303 	mul.w	r3, r2, r3
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	4413      	add	r3, r2
 80067b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80067bc:	4b74      	ldr	r3, [pc, #464]	; (8006990 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80067be:	4013      	ands	r3, r2
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	0091      	lsls	r1, r2, #2
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	6812      	ldr	r2, [r2, #0]
 80067c8:	430b      	orrs	r3, r1
 80067ca:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80067d6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067de:	041a      	lsls	r2, r3, #16
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	430a      	orrs	r2, r1
 80067e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80067f2:	fb02 f303 	mul.w	r3, r2, r3
 80067f6:	68ba      	ldr	r2, [r7, #8]
 80067f8:	4413      	add	r3, r2
 80067fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006804:	4b62      	ldr	r3, [pc, #392]	; (8006990 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006806:	4013      	ands	r3, r2
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	0091      	lsls	r1, r2, #2
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	6812      	ldr	r2, [r2, #0]
 8006810:	430b      	orrs	r3, r1
 8006812:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800681e:	fb02 f303 	mul.w	r3, r2, r3
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	4413      	add	r3, r2
 8006826:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006830:	4b57      	ldr	r3, [pc, #348]	; (8006990 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006832:	4013      	ands	r3, r2
 8006834:	68ba      	ldr	r2, [r7, #8]
 8006836:	0091      	lsls	r1, r2, #2
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	6812      	ldr	r2, [r2, #0]
 800683c:	430b      	orrs	r3, r1
 800683e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800684a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006852:	041a      	lsls	r2, r3, #16
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	430a      	orrs	r2, r1
 800685a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006862:	005b      	lsls	r3, r3, #1
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	4413      	add	r3, r2
 8006868:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006872:	4b47      	ldr	r3, [pc, #284]	; (8006990 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006874:	4013      	ands	r3, r2
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	0091      	lsls	r1, r2, #2
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	6812      	ldr	r2, [r2, #0]
 800687e:	430b      	orrs	r3, r1
 8006880:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800688c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006894:	041a      	lsls	r2, r3, #16
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	430a      	orrs	r2, r1
 800689c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80068a8:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068b0:	061a      	lsls	r2, r3, #24
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	430a      	orrs	r2, r1
 80068b8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068c0:	4b34      	ldr	r3, [pc, #208]	; (8006994 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80068c2:	4413      	add	r3, r2
 80068c4:	009a      	lsls	r2, r3, #2
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	441a      	add	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e2:	00db      	lsls	r3, r3, #3
 80068e4:	441a      	add	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f2:	6879      	ldr	r1, [r7, #4]
 80068f4:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80068f6:	fb01 f303 	mul.w	r3, r1, r3
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	441a      	add	r2, r3
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800690a:	6879      	ldr	r1, [r7, #4]
 800690c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800690e:	fb01 f303 	mul.w	r3, r1, r3
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	441a      	add	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006922:	6879      	ldr	r1, [r7, #4]
 8006924:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8006926:	fb01 f303 	mul.w	r3, r1, r3
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	441a      	add	r2, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800693e:	00db      	lsls	r3, r3, #3
 8006940:	441a      	add	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006952:	6879      	ldr	r1, [r7, #4]
 8006954:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006956:	fb01 f303 	mul.w	r3, r1, r3
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	441a      	add	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800696e:	6879      	ldr	r1, [r7, #4]
 8006970:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006972:	fb01 f303 	mul.w	r3, r1, r3
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	441a      	add	r2, r3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006986:	4a04      	ldr	r2, [pc, #16]	; (8006998 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d915      	bls.n	80069b8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800698c:	e006      	b.n	800699c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800698e:	bf00      	nop
 8006990:	ffff0003 	.word	0xffff0003
 8006994:	10002b00 	.word	0x10002b00
 8006998:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80069a2:	f043 0220 	orr.w	r2, r3, #32
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2203      	movs	r2, #3
 80069b0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e010      	b.n	80069da <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069bc:	60fb      	str	r3, [r7, #12]
 80069be:	e005      	b.n	80069cc <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	3304      	adds	r3, #4
 80069ca:	60fb      	str	r3, [r7, #12]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d3f3      	bcc.n	80069c0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3714      	adds	r7, #20
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop

080069e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b089      	sub	sp, #36	; 0x24
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80069f2:	2300      	movs	r3, #0
 80069f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80069f6:	4b89      	ldr	r3, [pc, #548]	; (8006c1c <HAL_GPIO_Init+0x234>)
 80069f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80069fa:	e194      	b.n	8006d26 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	2101      	movs	r1, #1
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	fa01 f303 	lsl.w	r3, r1, r3
 8006a08:	4013      	ands	r3, r2
 8006a0a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	f000 8186 	beq.w	8006d20 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d00b      	beq.n	8006a34 <HAL_GPIO_Init+0x4c>
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d007      	beq.n	8006a34 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006a28:	2b11      	cmp	r3, #17
 8006a2a:	d003      	beq.n	8006a34 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	2b12      	cmp	r3, #18
 8006a32:	d130      	bne.n	8006a96 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	005b      	lsls	r3, r3, #1
 8006a3e:	2203      	movs	r2, #3
 8006a40:	fa02 f303 	lsl.w	r3, r2, r3
 8006a44:	43db      	mvns	r3, r3
 8006a46:	69ba      	ldr	r2, [r7, #24]
 8006a48:	4013      	ands	r3, r2
 8006a4a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	68da      	ldr	r2, [r3, #12]
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	005b      	lsls	r3, r3, #1
 8006a54:	fa02 f303 	lsl.w	r3, r2, r3
 8006a58:	69ba      	ldr	r2, [r7, #24]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	69ba      	ldr	r2, [r7, #24]
 8006a62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a72:	43db      	mvns	r3, r3
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	4013      	ands	r3, r2
 8006a78:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	091b      	lsrs	r3, r3, #4
 8006a80:	f003 0201 	and.w	r2, r3, #1
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	fa02 f303 	lsl.w	r3, r2, r3
 8006a8a:	69ba      	ldr	r2, [r7, #24]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	69ba      	ldr	r2, [r7, #24]
 8006a94:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	005b      	lsls	r3, r3, #1
 8006aa0:	2203      	movs	r2, #3
 8006aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa6:	43db      	mvns	r3, r3
 8006aa8:	69ba      	ldr	r2, [r7, #24]
 8006aaa:	4013      	ands	r3, r2
 8006aac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	689a      	ldr	r2, [r3, #8]
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	005b      	lsls	r3, r3, #1
 8006ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aba:	69ba      	ldr	r2, [r7, #24]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	69ba      	ldr	r2, [r7, #24]
 8006ac4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d003      	beq.n	8006ad6 <HAL_GPIO_Init+0xee>
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	2b12      	cmp	r3, #18
 8006ad4:	d123      	bne.n	8006b1e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	08da      	lsrs	r2, r3, #3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	3208      	adds	r2, #8
 8006ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	f003 0307 	and.w	r3, r3, #7
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	220f      	movs	r2, #15
 8006aee:	fa02 f303 	lsl.w	r3, r2, r3
 8006af2:	43db      	mvns	r3, r3
 8006af4:	69ba      	ldr	r2, [r7, #24]
 8006af6:	4013      	ands	r3, r2
 8006af8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	691a      	ldr	r2, [r3, #16]
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	f003 0307 	and.w	r3, r3, #7
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0a:	69ba      	ldr	r2, [r7, #24]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	08da      	lsrs	r2, r3, #3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	3208      	adds	r2, #8
 8006b18:	69b9      	ldr	r1, [r7, #24]
 8006b1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	005b      	lsls	r3, r3, #1
 8006b28:	2203      	movs	r2, #3
 8006b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b2e:	43db      	mvns	r3, r3
 8006b30:	69ba      	ldr	r2, [r7, #24]
 8006b32:	4013      	ands	r3, r2
 8006b34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f003 0203 	and.w	r2, r3, #3
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	005b      	lsls	r3, r3, #1
 8006b42:	fa02 f303 	lsl.w	r3, r2, r3
 8006b46:	69ba      	ldr	r2, [r7, #24]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	69ba      	ldr	r2, [r7, #24]
 8006b50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f000 80e0 	beq.w	8006d20 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b60:	4b2f      	ldr	r3, [pc, #188]	; (8006c20 <HAL_GPIO_Init+0x238>)
 8006b62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006b66:	4a2e      	ldr	r2, [pc, #184]	; (8006c20 <HAL_GPIO_Init+0x238>)
 8006b68:	f043 0302 	orr.w	r3, r3, #2
 8006b6c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006b70:	4b2b      	ldr	r3, [pc, #172]	; (8006c20 <HAL_GPIO_Init+0x238>)
 8006b72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006b76:	f003 0302 	and.w	r3, r3, #2
 8006b7a:	60fb      	str	r3, [r7, #12]
 8006b7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b7e:	4a29      	ldr	r2, [pc, #164]	; (8006c24 <HAL_GPIO_Init+0x23c>)
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	089b      	lsrs	r3, r3, #2
 8006b84:	3302      	adds	r3, #2
 8006b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	f003 0303 	and.w	r3, r3, #3
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	220f      	movs	r2, #15
 8006b96:	fa02 f303 	lsl.w	r3, r2, r3
 8006b9a:	43db      	mvns	r3, r3
 8006b9c:	69ba      	ldr	r2, [r7, #24]
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a20      	ldr	r2, [pc, #128]	; (8006c28 <HAL_GPIO_Init+0x240>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d052      	beq.n	8006c50 <HAL_GPIO_Init+0x268>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a1f      	ldr	r2, [pc, #124]	; (8006c2c <HAL_GPIO_Init+0x244>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d031      	beq.n	8006c16 <HAL_GPIO_Init+0x22e>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a1e      	ldr	r2, [pc, #120]	; (8006c30 <HAL_GPIO_Init+0x248>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d02b      	beq.n	8006c12 <HAL_GPIO_Init+0x22a>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a1d      	ldr	r2, [pc, #116]	; (8006c34 <HAL_GPIO_Init+0x24c>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d025      	beq.n	8006c0e <HAL_GPIO_Init+0x226>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a1c      	ldr	r2, [pc, #112]	; (8006c38 <HAL_GPIO_Init+0x250>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d01f      	beq.n	8006c0a <HAL_GPIO_Init+0x222>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a1b      	ldr	r2, [pc, #108]	; (8006c3c <HAL_GPIO_Init+0x254>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d019      	beq.n	8006c06 <HAL_GPIO_Init+0x21e>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a1a      	ldr	r2, [pc, #104]	; (8006c40 <HAL_GPIO_Init+0x258>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d013      	beq.n	8006c02 <HAL_GPIO_Init+0x21a>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a19      	ldr	r2, [pc, #100]	; (8006c44 <HAL_GPIO_Init+0x25c>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d00d      	beq.n	8006bfe <HAL_GPIO_Init+0x216>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a18      	ldr	r2, [pc, #96]	; (8006c48 <HAL_GPIO_Init+0x260>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d007      	beq.n	8006bfa <HAL_GPIO_Init+0x212>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a17      	ldr	r2, [pc, #92]	; (8006c4c <HAL_GPIO_Init+0x264>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d101      	bne.n	8006bf6 <HAL_GPIO_Init+0x20e>
 8006bf2:	2309      	movs	r3, #9
 8006bf4:	e02d      	b.n	8006c52 <HAL_GPIO_Init+0x26a>
 8006bf6:	230a      	movs	r3, #10
 8006bf8:	e02b      	b.n	8006c52 <HAL_GPIO_Init+0x26a>
 8006bfa:	2308      	movs	r3, #8
 8006bfc:	e029      	b.n	8006c52 <HAL_GPIO_Init+0x26a>
 8006bfe:	2307      	movs	r3, #7
 8006c00:	e027      	b.n	8006c52 <HAL_GPIO_Init+0x26a>
 8006c02:	2306      	movs	r3, #6
 8006c04:	e025      	b.n	8006c52 <HAL_GPIO_Init+0x26a>
 8006c06:	2305      	movs	r3, #5
 8006c08:	e023      	b.n	8006c52 <HAL_GPIO_Init+0x26a>
 8006c0a:	2304      	movs	r3, #4
 8006c0c:	e021      	b.n	8006c52 <HAL_GPIO_Init+0x26a>
 8006c0e:	2303      	movs	r3, #3
 8006c10:	e01f      	b.n	8006c52 <HAL_GPIO_Init+0x26a>
 8006c12:	2302      	movs	r3, #2
 8006c14:	e01d      	b.n	8006c52 <HAL_GPIO_Init+0x26a>
 8006c16:	2301      	movs	r3, #1
 8006c18:	e01b      	b.n	8006c52 <HAL_GPIO_Init+0x26a>
 8006c1a:	bf00      	nop
 8006c1c:	58000080 	.word	0x58000080
 8006c20:	58024400 	.word	0x58024400
 8006c24:	58000400 	.word	0x58000400
 8006c28:	58020000 	.word	0x58020000
 8006c2c:	58020400 	.word	0x58020400
 8006c30:	58020800 	.word	0x58020800
 8006c34:	58020c00 	.word	0x58020c00
 8006c38:	58021000 	.word	0x58021000
 8006c3c:	58021400 	.word	0x58021400
 8006c40:	58021800 	.word	0x58021800
 8006c44:	58021c00 	.word	0x58021c00
 8006c48:	58022000 	.word	0x58022000
 8006c4c:	58022400 	.word	0x58022400
 8006c50:	2300      	movs	r3, #0
 8006c52:	69fa      	ldr	r2, [r7, #28]
 8006c54:	f002 0203 	and.w	r2, r2, #3
 8006c58:	0092      	lsls	r2, r2, #2
 8006c5a:	4093      	lsls	r3, r2
 8006c5c:	69ba      	ldr	r2, [r7, #24]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006c62:	4938      	ldr	r1, [pc, #224]	; (8006d44 <HAL_GPIO_Init+0x35c>)
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	089b      	lsrs	r3, r3, #2
 8006c68:	3302      	adds	r3, #2
 8006c6a:	69ba      	ldr	r2, [r7, #24]
 8006c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	43db      	mvns	r3, r3
 8006c7a:	69ba      	ldr	r2, [r7, #24]
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d003      	beq.n	8006c94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006c8c:	69ba      	ldr	r2, [r7, #24]
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	69ba      	ldr	r2, [r7, #24]
 8006c98:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	43db      	mvns	r3, r3
 8006ca4:	69ba      	ldr	r2, [r7, #24]
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d003      	beq.n	8006cbe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006cb6:	69ba      	ldr	r2, [r7, #24]
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	69ba      	ldr	r2, [r7, #24]
 8006cc2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	43db      	mvns	r3, r3
 8006cd0:	69ba      	ldr	r2, [r7, #24]
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d003      	beq.n	8006cea <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8006ce2:	69ba      	ldr	r2, [r7, #24]
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006cea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	43db      	mvns	r3, r3
 8006cfe:	69ba      	ldr	r2, [r7, #24]
 8006d00:	4013      	ands	r3, r2
 8006d02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d003      	beq.n	8006d18 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006d10:	69ba      	ldr	r2, [r7, #24]
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006d18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	3301      	adds	r3, #1
 8006d24:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f47f ae63 	bne.w	80069fc <HAL_GPIO_Init+0x14>
  }
}
 8006d36:	bf00      	nop
 8006d38:	3724      	adds	r7, #36	; 0x24
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	58000400 	.word	0x58000400

08006d48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	460b      	mov	r3, r1
 8006d52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	691a      	ldr	r2, [r3, #16]
 8006d58:	887b      	ldrh	r3, [r7, #2]
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d002      	beq.n	8006d66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006d60:	2301      	movs	r3, #1
 8006d62:	73fb      	strb	r3, [r7, #15]
 8006d64:	e001      	b.n	8006d6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006d66:	2300      	movs	r3, #0
 8006d68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3714      	adds	r7, #20
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	460b      	mov	r3, r1
 8006d82:	807b      	strh	r3, [r7, #2]
 8006d84:	4613      	mov	r3, r2
 8006d86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006d88:	787b      	ldrb	r3, [r7, #1]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d003      	beq.n	8006d96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d8e:	887a      	ldrh	r2, [r7, #2]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006d94:	e003      	b.n	8006d9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006d96:	887b      	ldrh	r3, [r7, #2]
 8006d98:	041a      	lsls	r2, r3, #16
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	619a      	str	r2, [r3, #24]
}
 8006d9e:	bf00      	nop
 8006da0:	370c      	adds	r7, #12
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006daa:	b480      	push	{r7}
 8006dac:	b083      	sub	sp, #12
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
 8006db2:	460b      	mov	r3, r1
 8006db4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	695a      	ldr	r2, [r3, #20]
 8006dba:	887b      	ldrh	r3, [r7, #2]
 8006dbc:	401a      	ands	r2, r3
 8006dbe:	887b      	ldrh	r3, [r7, #2]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d104      	bne.n	8006dce <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006dc4:	887b      	ldrh	r3, [r7, #2]
 8006dc6:	041a      	lsls	r2, r3, #16
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8006dcc:	e002      	b.n	8006dd4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8006dce:	887a      	ldrh	r2, [r7, #2]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	619a      	str	r2, [r3, #24]
}
 8006dd4:	bf00      	nop
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	4603      	mov	r3, r0
 8006de8:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006df2:	88fb      	ldrh	r3, [r7, #6]
 8006df4:	4013      	ands	r3, r2
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d008      	beq.n	8006e0c <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006dfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006dfe:	88fb      	ldrh	r3, [r7, #6]
 8006e00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006e04:	88fb      	ldrh	r3, [r7, #6]
 8006e06:	4618      	mov	r0, r3
 8006e08:	f000 f804 	bl	8006e14 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006e0c:	bf00      	nop
 8006e0e:	3708      	adds	r7, #8
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006e1e:	bf00      	nop
 8006e20:	370c      	adds	r7, #12
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr

08006e2a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006e2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e2c:	b08f      	sub	sp, #60	; 0x3c
 8006e2e:	af0a      	add	r7, sp, #40	; 0x28
 8006e30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d101      	bne.n	8006e3c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e116      	b.n	800706a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d106      	bne.n	8006e5c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f013 f9fc 	bl	801a254 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2203      	movs	r2, #3
 8006e60:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d102      	bne.n	8006e76 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f009 ff1f 	bl	8010cbe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	603b      	str	r3, [r7, #0]
 8006e86:	687e      	ldr	r6, [r7, #4]
 8006e88:	466d      	mov	r5, sp
 8006e8a:	f106 0410 	add.w	r4, r6, #16
 8006e8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006e92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006e96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006e9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8006e9e:	1d33      	adds	r3, r6, #4
 8006ea0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ea2:	6838      	ldr	r0, [r7, #0]
 8006ea4:	f009 fdf6 	bl	8010a94 <USB_CoreInit>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d005      	beq.n	8006eba <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2202      	movs	r2, #2
 8006eb2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e0d7      	b.n	800706a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f009 ff0d 	bl	8010ce0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	73fb      	strb	r3, [r7, #15]
 8006eca:	e04a      	b.n	8006f62 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006ecc:	7bfa      	ldrb	r2, [r7, #15]
 8006ece:	6879      	ldr	r1, [r7, #4]
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	00db      	lsls	r3, r3, #3
 8006ed4:	1a9b      	subs	r3, r3, r2
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	440b      	add	r3, r1
 8006eda:	333d      	adds	r3, #61	; 0x3d
 8006edc:	2201      	movs	r2, #1
 8006ede:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006ee0:	7bfa      	ldrb	r2, [r7, #15]
 8006ee2:	6879      	ldr	r1, [r7, #4]
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	00db      	lsls	r3, r3, #3
 8006ee8:	1a9b      	subs	r3, r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	440b      	add	r3, r1
 8006eee:	333c      	adds	r3, #60	; 0x3c
 8006ef0:	7bfa      	ldrb	r2, [r7, #15]
 8006ef2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006ef4:	7bfa      	ldrb	r2, [r7, #15]
 8006ef6:	7bfb      	ldrb	r3, [r7, #15]
 8006ef8:	b298      	uxth	r0, r3
 8006efa:	6879      	ldr	r1, [r7, #4]
 8006efc:	4613      	mov	r3, r2
 8006efe:	00db      	lsls	r3, r3, #3
 8006f00:	1a9b      	subs	r3, r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	440b      	add	r3, r1
 8006f06:	3342      	adds	r3, #66	; 0x42
 8006f08:	4602      	mov	r2, r0
 8006f0a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006f0c:	7bfa      	ldrb	r2, [r7, #15]
 8006f0e:	6879      	ldr	r1, [r7, #4]
 8006f10:	4613      	mov	r3, r2
 8006f12:	00db      	lsls	r3, r3, #3
 8006f14:	1a9b      	subs	r3, r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	440b      	add	r3, r1
 8006f1a:	333f      	adds	r3, #63	; 0x3f
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006f20:	7bfa      	ldrb	r2, [r7, #15]
 8006f22:	6879      	ldr	r1, [r7, #4]
 8006f24:	4613      	mov	r3, r2
 8006f26:	00db      	lsls	r3, r3, #3
 8006f28:	1a9b      	subs	r3, r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	440b      	add	r3, r1
 8006f2e:	3344      	adds	r3, #68	; 0x44
 8006f30:	2200      	movs	r2, #0
 8006f32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006f34:	7bfa      	ldrb	r2, [r7, #15]
 8006f36:	6879      	ldr	r1, [r7, #4]
 8006f38:	4613      	mov	r3, r2
 8006f3a:	00db      	lsls	r3, r3, #3
 8006f3c:	1a9b      	subs	r3, r3, r2
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	440b      	add	r3, r1
 8006f42:	3348      	adds	r3, #72	; 0x48
 8006f44:	2200      	movs	r2, #0
 8006f46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006f48:	7bfa      	ldrb	r2, [r7, #15]
 8006f4a:	6879      	ldr	r1, [r7, #4]
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	00db      	lsls	r3, r3, #3
 8006f50:	1a9b      	subs	r3, r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	440b      	add	r3, r1
 8006f56:	3350      	adds	r3, #80	; 0x50
 8006f58:	2200      	movs	r2, #0
 8006f5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f5c:	7bfb      	ldrb	r3, [r7, #15]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	73fb      	strb	r3, [r7, #15]
 8006f62:	7bfa      	ldrb	r2, [r7, #15]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d3af      	bcc.n	8006ecc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	73fb      	strb	r3, [r7, #15]
 8006f70:	e044      	b.n	8006ffc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006f72:	7bfa      	ldrb	r2, [r7, #15]
 8006f74:	6879      	ldr	r1, [r7, #4]
 8006f76:	4613      	mov	r3, r2
 8006f78:	00db      	lsls	r3, r3, #3
 8006f7a:	1a9b      	subs	r3, r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	440b      	add	r3, r1
 8006f80:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006f84:	2200      	movs	r2, #0
 8006f86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006f88:	7bfa      	ldrb	r2, [r7, #15]
 8006f8a:	6879      	ldr	r1, [r7, #4]
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	00db      	lsls	r3, r3, #3
 8006f90:	1a9b      	subs	r3, r3, r2
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	440b      	add	r3, r1
 8006f96:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006f9a:	7bfa      	ldrb	r2, [r7, #15]
 8006f9c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006f9e:	7bfa      	ldrb	r2, [r7, #15]
 8006fa0:	6879      	ldr	r1, [r7, #4]
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	00db      	lsls	r3, r3, #3
 8006fa6:	1a9b      	subs	r3, r3, r2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	440b      	add	r3, r1
 8006fac:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006fb4:	7bfa      	ldrb	r2, [r7, #15]
 8006fb6:	6879      	ldr	r1, [r7, #4]
 8006fb8:	4613      	mov	r3, r2
 8006fba:	00db      	lsls	r3, r3, #3
 8006fbc:	1a9b      	subs	r3, r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	440b      	add	r3, r1
 8006fc2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006fca:	7bfa      	ldrb	r2, [r7, #15]
 8006fcc:	6879      	ldr	r1, [r7, #4]
 8006fce:	4613      	mov	r3, r2
 8006fd0:	00db      	lsls	r3, r3, #3
 8006fd2:	1a9b      	subs	r3, r3, r2
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	440b      	add	r3, r1
 8006fd8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006fdc:	2200      	movs	r2, #0
 8006fde:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006fe0:	7bfa      	ldrb	r2, [r7, #15]
 8006fe2:	6879      	ldr	r1, [r7, #4]
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	00db      	lsls	r3, r3, #3
 8006fe8:	1a9b      	subs	r3, r3, r2
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	440b      	add	r3, r1
 8006fee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ff6:	7bfb      	ldrb	r3, [r7, #15]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	73fb      	strb	r3, [r7, #15]
 8006ffc:	7bfa      	ldrb	r2, [r7, #15]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	429a      	cmp	r2, r3
 8007004:	d3b5      	bcc.n	8006f72 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	603b      	str	r3, [r7, #0]
 800700c:	687e      	ldr	r6, [r7, #4]
 800700e:	466d      	mov	r5, sp
 8007010:	f106 0410 	add.w	r4, r6, #16
 8007014:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007016:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007018:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800701a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800701c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007020:	e885 0003 	stmia.w	r5, {r0, r1}
 8007024:	1d33      	adds	r3, r6, #4
 8007026:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007028:	6838      	ldr	r0, [r7, #0]
 800702a:	f009 fe83 	bl	8010d34 <USB_DevInit>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d005      	beq.n	8007040 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2202      	movs	r2, #2
 8007038:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e014      	b.n	800706a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007054:	2b01      	cmp	r3, #1
 8007056:	d102      	bne.n	800705e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f001 f8ef 	bl	800823c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4618      	mov	r0, r3
 8007064:	f00a feb9 	bl	8011dda <USB_DevDisconnect>

  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007072 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b084      	sub	sp, #16
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007086:	2b01      	cmp	r3, #1
 8007088:	d101      	bne.n	800708e <HAL_PCD_Start+0x1c>
 800708a:	2302      	movs	r3, #2
 800708c:	e020      	b.n	80070d0 <HAL_PCD_Start+0x5e>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800709a:	2b01      	cmp	r3, #1
 800709c:	d109      	bne.n	80070b2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d005      	beq.n	80070b2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4618      	mov	r0, r3
 80070b8:	f00a fe77 	bl	8011daa <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4618      	mov	r0, r3
 80070c2:	f009 fdeb 	bl	8010c9c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3710      	adds	r7, #16
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d101      	bne.n	80070ee <HAL_PCD_Stop+0x16>
 80070ea:	2302      	movs	r3, #2
 80070ec:	e020      	b.n	8007130 <HAL_PCD_Stop+0x58>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2201      	movs	r2, #1
 80070f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4618      	mov	r0, r3
 80070fc:	f009 fddf 	bl	8010cbe <USB_DisableGlobalInt>

  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4618      	mov	r0, r3
 8007106:	f00a fddb 	bl	8011cc0 <USB_StopDevice>
 800710a:	4603      	mov	r3, r0
 800710c:	2b00      	cmp	r3, #0
 800710e:	d005      	beq.n	800711c <HAL_PCD_Stop+0x44>
  {
    __HAL_UNLOCK(hpcd);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
    return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e009      	b.n	8007130 <HAL_PCD_Stop+0x58>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4618      	mov	r0, r3
 8007122:	f00a fe5a 	bl	8011dda <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3708      	adds	r7, #8
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007138:	b590      	push	{r4, r7, lr}
 800713a:	b08d      	sub	sp, #52	; 0x34
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007146:	6a3b      	ldr	r3, [r7, #32]
 8007148:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4618      	mov	r0, r3
 8007150:	f00a feee 	bl	8011f30 <USB_GetMode>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	f040 83ca 	bne.w	80078f0 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4618      	mov	r0, r3
 8007162:	f00a fe52 	bl	8011e0a <USB_ReadInterrupts>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	f000 83c0 	beq.w	80078ee <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4618      	mov	r0, r3
 8007174:	f00a fe49 	bl	8011e0a <USB_ReadInterrupts>
 8007178:	4603      	mov	r3, r0
 800717a:	f003 0302 	and.w	r3, r3, #2
 800717e:	2b02      	cmp	r3, #2
 8007180:	d107      	bne.n	8007192 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	695a      	ldr	r2, [r3, #20]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f002 0202 	and.w	r2, r2, #2
 8007190:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4618      	mov	r0, r3
 8007198:	f00a fe37 	bl	8011e0a <USB_ReadInterrupts>
 800719c:	4603      	mov	r3, r0
 800719e:	f003 0310 	and.w	r3, r3, #16
 80071a2:	2b10      	cmp	r3, #16
 80071a4:	d161      	bne.n	800726a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	699a      	ldr	r2, [r3, #24]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f022 0210 	bic.w	r2, r2, #16
 80071b4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80071b6:	6a3b      	ldr	r3, [r7, #32]
 80071b8:	6a1b      	ldr	r3, [r3, #32]
 80071ba:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	f003 020f 	and.w	r2, r3, #15
 80071c2:	4613      	mov	r3, r2
 80071c4:	00db      	lsls	r3, r3, #3
 80071c6:	1a9b      	subs	r3, r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	4413      	add	r3, r2
 80071d2:	3304      	adds	r3, #4
 80071d4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	0c5b      	lsrs	r3, r3, #17
 80071da:	f003 030f 	and.w	r3, r3, #15
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d124      	bne.n	800722c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80071e2:	69ba      	ldr	r2, [r7, #24]
 80071e4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80071e8:	4013      	ands	r3, r2
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d035      	beq.n	800725a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	091b      	lsrs	r3, r3, #4
 80071f6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80071f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	461a      	mov	r2, r3
 8007200:	6a38      	ldr	r0, [r7, #32]
 8007202:	f00a fc60 	bl	8011ac6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	68da      	ldr	r2, [r3, #12]
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	091b      	lsrs	r3, r3, #4
 800720e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007212:	441a      	add	r2, r3
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	699a      	ldr	r2, [r3, #24]
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	091b      	lsrs	r3, r3, #4
 8007220:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007224:	441a      	add	r2, r3
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	619a      	str	r2, [r3, #24]
 800722a:	e016      	b.n	800725a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	0c5b      	lsrs	r3, r3, #17
 8007230:	f003 030f 	and.w	r3, r3, #15
 8007234:	2b06      	cmp	r3, #6
 8007236:	d110      	bne.n	800725a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800723e:	2208      	movs	r2, #8
 8007240:	4619      	mov	r1, r3
 8007242:	6a38      	ldr	r0, [r7, #32]
 8007244:	f00a fc3f 	bl	8011ac6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	699a      	ldr	r2, [r3, #24]
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	091b      	lsrs	r3, r3, #4
 8007250:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007254:	441a      	add	r2, r3
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	699a      	ldr	r2, [r3, #24]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f042 0210 	orr.w	r2, r2, #16
 8007268:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4618      	mov	r0, r3
 8007270:	f00a fdcb 	bl	8011e0a <USB_ReadInterrupts>
 8007274:	4603      	mov	r3, r0
 8007276:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800727a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800727e:	d16e      	bne.n	800735e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8007280:	2300      	movs	r3, #0
 8007282:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4618      	mov	r0, r3
 800728a:	f00a fdd1 	bl	8011e30 <USB_ReadDevAllOutEpInterrupt>
 800728e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007290:	e062      	b.n	8007358 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007294:	f003 0301 	and.w	r3, r3, #1
 8007298:	2b00      	cmp	r3, #0
 800729a:	d057      	beq.n	800734c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072a2:	b2d2      	uxtb	r2, r2
 80072a4:	4611      	mov	r1, r2
 80072a6:	4618      	mov	r0, r3
 80072a8:	f00a fdf6 	bl	8011e98 <USB_ReadDevOutEPInterrupt>
 80072ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	f003 0301 	and.w	r3, r3, #1
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00c      	beq.n	80072d2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80072b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ba:	015a      	lsls	r2, r3, #5
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	4413      	add	r3, r2
 80072c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c4:	461a      	mov	r2, r3
 80072c6:	2301      	movs	r3, #1
 80072c8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80072ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fe0b 	bl	8007ee8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	f003 0308 	and.w	r3, r3, #8
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00c      	beq.n	80072f6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80072dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072de:	015a      	lsls	r2, r3, #5
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	4413      	add	r3, r2
 80072e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e8:	461a      	mov	r2, r3
 80072ea:	2308      	movs	r3, #8
 80072ec:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80072ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 ff05 	bl	8008100 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	f003 0310 	and.w	r3, r3, #16
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d008      	beq.n	8007312 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007302:	015a      	lsls	r2, r3, #5
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	4413      	add	r3, r2
 8007308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800730c:	461a      	mov	r2, r3
 800730e:	2310      	movs	r3, #16
 8007310:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	f003 0320 	and.w	r3, r3, #32
 8007318:	2b00      	cmp	r3, #0
 800731a:	d008      	beq.n	800732e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800731c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731e:	015a      	lsls	r2, r3, #5
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	4413      	add	r3, r2
 8007324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007328:	461a      	mov	r2, r3
 800732a:	2320      	movs	r3, #32
 800732c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007334:	2b00      	cmp	r3, #0
 8007336:	d009      	beq.n	800734c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733a:	015a      	lsls	r2, r3, #5
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	4413      	add	r3, r2
 8007340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007344:	461a      	mov	r2, r3
 8007346:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800734a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800734c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734e:	3301      	adds	r3, #1
 8007350:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007354:	085b      	lsrs	r3, r3, #1
 8007356:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735a:	2b00      	cmp	r3, #0
 800735c:	d199      	bne.n	8007292 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4618      	mov	r0, r3
 8007364:	f00a fd51 	bl	8011e0a <USB_ReadInterrupts>
 8007368:	4603      	mov	r3, r0
 800736a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800736e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007372:	f040 80c0 	bne.w	80074f6 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4618      	mov	r0, r3
 800737c:	f00a fd72 	bl	8011e64 <USB_ReadDevAllInEpInterrupt>
 8007380:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007382:	2300      	movs	r3, #0
 8007384:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007386:	e0b2      	b.n	80074ee <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738a:	f003 0301 	and.w	r3, r3, #1
 800738e:	2b00      	cmp	r3, #0
 8007390:	f000 80a7 	beq.w	80074e2 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800739a:	b2d2      	uxtb	r2, r2
 800739c:	4611      	mov	r1, r2
 800739e:	4618      	mov	r0, r3
 80073a0:	f00a fd98 	bl	8011ed4 <USB_ReadDevInEPInterrupt>
 80073a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	f003 0301 	and.w	r3, r3, #1
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d057      	beq.n	8007460 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80073b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b2:	f003 030f 	and.w	r3, r3, #15
 80073b6:	2201      	movs	r2, #1
 80073b8:	fa02 f303 	lsl.w	r3, r2, r3
 80073bc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	43db      	mvns	r3, r3
 80073ca:	69f9      	ldr	r1, [r7, #28]
 80073cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073d0:	4013      	ands	r3, r2
 80073d2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80073d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d6:	015a      	lsls	r2, r3, #5
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	4413      	add	r3, r2
 80073dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073e0:	461a      	mov	r2, r3
 80073e2:	2301      	movs	r3, #1
 80073e4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d132      	bne.n	8007454 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80073ee:	6879      	ldr	r1, [r7, #4]
 80073f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073f2:	4613      	mov	r3, r2
 80073f4:	00db      	lsls	r3, r3, #3
 80073f6:	1a9b      	subs	r3, r3, r2
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	440b      	add	r3, r1
 80073fc:	3348      	adds	r3, #72	; 0x48
 80073fe:	6819      	ldr	r1, [r3, #0]
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007404:	4613      	mov	r3, r2
 8007406:	00db      	lsls	r3, r3, #3
 8007408:	1a9b      	subs	r3, r3, r2
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	4403      	add	r3, r0
 800740e:	3344      	adds	r3, #68	; 0x44
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4419      	add	r1, r3
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007418:	4613      	mov	r3, r2
 800741a:	00db      	lsls	r3, r3, #3
 800741c:	1a9b      	subs	r3, r3, r2
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	4403      	add	r3, r0
 8007422:	3348      	adds	r3, #72	; 0x48
 8007424:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007428:	2b00      	cmp	r3, #0
 800742a:	d113      	bne.n	8007454 <HAL_PCD_IRQHandler+0x31c>
 800742c:	6879      	ldr	r1, [r7, #4]
 800742e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007430:	4613      	mov	r3, r2
 8007432:	00db      	lsls	r3, r3, #3
 8007434:	1a9b      	subs	r3, r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	440b      	add	r3, r1
 800743a:	3350      	adds	r3, #80	; 0x50
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d108      	bne.n	8007454 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6818      	ldr	r0, [r3, #0]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800744c:	461a      	mov	r2, r3
 800744e:	2101      	movs	r1, #1
 8007450:	f00a fda0 	bl	8011f94 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007456:	b2db      	uxtb	r3, r3
 8007458:	4619      	mov	r1, r3
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f012 ff71 	bl	801a342 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	f003 0308 	and.w	r3, r3, #8
 8007466:	2b00      	cmp	r3, #0
 8007468:	d008      	beq.n	800747c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800746a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746c:	015a      	lsls	r2, r3, #5
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	4413      	add	r3, r2
 8007472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007476:	461a      	mov	r2, r3
 8007478:	2308      	movs	r3, #8
 800747a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	f003 0310 	and.w	r3, r3, #16
 8007482:	2b00      	cmp	r3, #0
 8007484:	d008      	beq.n	8007498 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007488:	015a      	lsls	r2, r3, #5
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	4413      	add	r3, r2
 800748e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007492:	461a      	mov	r2, r3
 8007494:	2310      	movs	r3, #16
 8007496:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d008      	beq.n	80074b4 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80074a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a4:	015a      	lsls	r2, r3, #5
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	4413      	add	r3, r2
 80074aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ae:	461a      	mov	r2, r3
 80074b0:	2340      	movs	r3, #64	; 0x40
 80074b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	f003 0302 	and.w	r3, r3, #2
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d008      	beq.n	80074d0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80074be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c0:	015a      	lsls	r2, r3, #5
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	4413      	add	r3, r2
 80074c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ca:	461a      	mov	r2, r3
 80074cc:	2302      	movs	r3, #2
 80074ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d003      	beq.n	80074e2 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80074da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 fc75 	bl	8007dcc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80074e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e4:	3301      	adds	r3, #1
 80074e6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80074e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ea:	085b      	lsrs	r3, r3, #1
 80074ec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80074ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	f47f af49 	bne.w	8007388 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4618      	mov	r0, r3
 80074fc:	f00a fc85 	bl	8011e0a <USB_ReadInterrupts>
 8007500:	4603      	mov	r3, r0
 8007502:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007506:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800750a:	d122      	bne.n	8007552 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	69fa      	ldr	r2, [r7, #28]
 8007516:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800751a:	f023 0301 	bic.w	r3, r3, #1
 800751e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007526:	2b01      	cmp	r3, #1
 8007528:	d108      	bne.n	800753c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007532:	2100      	movs	r1, #0
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 fea5 	bl	8008284 <HAL_PCDEx_LPM_Callback>
 800753a:	e002      	b.n	8007542 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f012 ff77 	bl	801a430 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	695a      	ldr	r2, [r3, #20]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007550:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4618      	mov	r0, r3
 8007558:	f00a fc57 	bl	8011e0a <USB_ReadInterrupts>
 800755c:	4603      	mov	r3, r0
 800755e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007562:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007566:	d112      	bne.n	800758e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	f003 0301 	and.w	r3, r3, #1
 8007574:	2b01      	cmp	r3, #1
 8007576:	d102      	bne.n	800757e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f012 ff33 	bl	801a3e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	695a      	ldr	r2, [r3, #20]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800758c:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4618      	mov	r0, r3
 8007594:	f00a fc39 	bl	8011e0a <USB_ReadInterrupts>
 8007598:	4603      	mov	r3, r0
 800759a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800759e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075a2:	d121      	bne.n	80075e8 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	695a      	ldr	r2, [r3, #20]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80075b2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d111      	bne.n	80075e2 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075cc:	089b      	lsrs	r3, r3, #2
 80075ce:	f003 020f 	and.w	r2, r3, #15
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80075d8:	2101      	movs	r1, #1
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fe52 	bl	8008284 <HAL_PCDEx_LPM_Callback>
 80075e0:	e002      	b.n	80075e8 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f012 fefe 	bl	801a3e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4618      	mov	r0, r3
 80075ee:	f00a fc0c 	bl	8011e0a <USB_ReadInterrupts>
 80075f2:	4603      	mov	r3, r0
 80075f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075fc:	f040 80c7 	bne.w	800778e <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	69fa      	ldr	r2, [r7, #28]
 800760a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800760e:	f023 0301 	bic.w	r3, r3, #1
 8007612:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2110      	movs	r1, #16
 800761a:	4618      	mov	r0, r3
 800761c:	f009 fce8 	bl	8010ff0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007620:	2300      	movs	r3, #0
 8007622:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007624:	e056      	b.n	80076d4 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007628:	015a      	lsls	r2, r3, #5
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	4413      	add	r3, r2
 800762e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007632:	461a      	mov	r2, r3
 8007634:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007638:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800763a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800763c:	015a      	lsls	r2, r3, #5
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	4413      	add	r3, r2
 8007642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800764a:	0151      	lsls	r1, r2, #5
 800764c:	69fa      	ldr	r2, [r7, #28]
 800764e:	440a      	add	r2, r1
 8007650:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007654:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007658:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800765a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765c:	015a      	lsls	r2, r3, #5
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	4413      	add	r3, r2
 8007662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800766a:	0151      	lsls	r1, r2, #5
 800766c:	69fa      	ldr	r2, [r7, #28]
 800766e:	440a      	add	r2, r1
 8007670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007674:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007678:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800767a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767c:	015a      	lsls	r2, r3, #5
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	4413      	add	r3, r2
 8007682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007686:	461a      	mov	r2, r3
 8007688:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800768c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800768e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007690:	015a      	lsls	r2, r3, #5
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	4413      	add	r3, r2
 8007696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800769e:	0151      	lsls	r1, r2, #5
 80076a0:	69fa      	ldr	r2, [r7, #28]
 80076a2:	440a      	add	r2, r1
 80076a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80076ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80076ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b0:	015a      	lsls	r2, r3, #5
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	4413      	add	r3, r2
 80076b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076be:	0151      	lsls	r1, r2, #5
 80076c0:	69fa      	ldr	r2, [r7, #28]
 80076c2:	440a      	add	r2, r1
 80076c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80076cc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80076ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d0:	3301      	adds	r3, #1
 80076d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076da:	429a      	cmp	r2, r3
 80076dc:	d3a3      	bcc.n	8007626 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076e4:	69db      	ldr	r3, [r3, #28]
 80076e6:	69fa      	ldr	r2, [r7, #28]
 80076e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076ec:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80076f0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d016      	beq.n	8007728 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007700:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007704:	69fa      	ldr	r2, [r7, #28]
 8007706:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800770a:	f043 030b 	orr.w	r3, r3, #11
 800770e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800771a:	69fa      	ldr	r2, [r7, #28]
 800771c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007720:	f043 030b 	orr.w	r3, r3, #11
 8007724:	6453      	str	r3, [r2, #68]	; 0x44
 8007726:	e015      	b.n	8007754 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800772e:	695a      	ldr	r2, [r3, #20]
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007736:	4619      	mov	r1, r3
 8007738:	f242 032b 	movw	r3, #8235	; 0x202b
 800773c:	4313      	orrs	r3, r2
 800773e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	69fa      	ldr	r2, [r7, #28]
 800774a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800774e:	f043 030b 	orr.w	r3, r3, #11
 8007752:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	69fa      	ldr	r2, [r7, #28]
 800775e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007762:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007766:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6818      	ldr	r0, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007778:	461a      	mov	r2, r3
 800777a:	f00a fc0b 	bl	8011f94 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	695a      	ldr	r2, [r3, #20]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800778c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4618      	mov	r0, r3
 8007794:	f00a fb39 	bl	8011e0a <USB_ReadInterrupts>
 8007798:	4603      	mov	r3, r0
 800779a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800779e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077a2:	d124      	bne.n	80077ee <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4618      	mov	r0, r3
 80077aa:	f00a fbcf 	bl	8011f4c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4618      	mov	r0, r3
 80077b4:	f009 fc7d 	bl	80110b2 <USB_GetDevSpeed>
 80077b8:	4603      	mov	r3, r0
 80077ba:	461a      	mov	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681c      	ldr	r4, [r3, #0]
 80077c4:	f001 fcb4 	bl	8009130 <HAL_RCC_GetHCLKFreq>
 80077c8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	461a      	mov	r2, r3
 80077d2:	4620      	mov	r0, r4
 80077d4:	f009 f9c0 	bl	8010b58 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f012 fdda 	bl	801a392 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	695a      	ldr	r2, [r3, #20]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80077ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4618      	mov	r0, r3
 80077f4:	f00a fb09 	bl	8011e0a <USB_ReadInterrupts>
 80077f8:	4603      	mov	r3, r0
 80077fa:	f003 0308 	and.w	r3, r3, #8
 80077fe:	2b08      	cmp	r3, #8
 8007800:	d10a      	bne.n	8007818 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f012 fdb7 	bl	801a376 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	695a      	ldr	r2, [r3, #20]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f002 0208 	and.w	r2, r2, #8
 8007816:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4618      	mov	r0, r3
 800781e:	f00a faf4 	bl	8011e0a <USB_ReadInterrupts>
 8007822:	4603      	mov	r3, r0
 8007824:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007828:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800782c:	d10f      	bne.n	800784e <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800782e:	2300      	movs	r3, #0
 8007830:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007834:	b2db      	uxtb	r3, r3
 8007836:	4619      	mov	r1, r3
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f012 fe19 	bl	801a470 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	695a      	ldr	r2, [r3, #20]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800784c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4618      	mov	r0, r3
 8007854:	f00a fad9 	bl	8011e0a <USB_ReadInterrupts>
 8007858:	4603      	mov	r3, r0
 800785a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800785e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007862:	d10f      	bne.n	8007884 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007864:	2300      	movs	r3, #0
 8007866:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786a:	b2db      	uxtb	r3, r3
 800786c:	4619      	mov	r1, r3
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f012 fdec 	bl	801a44c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	695a      	ldr	r2, [r3, #20]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007882:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4618      	mov	r0, r3
 800788a:	f00a fabe 	bl	8011e0a <USB_ReadInterrupts>
 800788e:	4603      	mov	r3, r0
 8007890:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007898:	d10a      	bne.n	80078b0 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f012 fdfa 	bl	801a494 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	695a      	ldr	r2, [r3, #20]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80078ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4618      	mov	r0, r3
 80078b6:	f00a faa8 	bl	8011e0a <USB_ReadInterrupts>
 80078ba:	4603      	mov	r3, r0
 80078bc:	f003 0304 	and.w	r3, r3, #4
 80078c0:	2b04      	cmp	r3, #4
 80078c2:	d115      	bne.n	80078f0 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	f003 0304 	and.w	r3, r3, #4
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d002      	beq.n	80078dc <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f012 fdea 	bl	801a4b0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6859      	ldr	r1, [r3, #4]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	69ba      	ldr	r2, [r7, #24]
 80078e8:	430a      	orrs	r2, r1
 80078ea:	605a      	str	r2, [r3, #4]
 80078ec:	e000      	b.n	80078f0 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80078ee:	bf00      	nop
    }
  }
}
 80078f0:	3734      	adds	r7, #52	; 0x34
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd90      	pop	{r4, r7, pc}

080078f6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b082      	sub	sp, #8
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
 80078fe:	460b      	mov	r3, r1
 8007900:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007908:	2b01      	cmp	r3, #1
 800790a:	d101      	bne.n	8007910 <HAL_PCD_SetAddress+0x1a>
 800790c:	2302      	movs	r3, #2
 800790e:	e013      	b.n	8007938 <HAL_PCD_SetAddress+0x42>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	78fa      	ldrb	r2, [r7, #3]
 800791c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	78fa      	ldrb	r2, [r7, #3]
 8007926:	4611      	mov	r1, r2
 8007928:	4618      	mov	r0, r3
 800792a:	f00a fa18 	bl	8011d5e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	3708      	adds	r7, #8
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	4608      	mov	r0, r1
 800794a:	4611      	mov	r1, r2
 800794c:	461a      	mov	r2, r3
 800794e:	4603      	mov	r3, r0
 8007950:	70fb      	strb	r3, [r7, #3]
 8007952:	460b      	mov	r3, r1
 8007954:	803b      	strh	r3, [r7, #0]
 8007956:	4613      	mov	r3, r2
 8007958:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800795a:	2300      	movs	r3, #0
 800795c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800795e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007962:	2b00      	cmp	r3, #0
 8007964:	da0f      	bge.n	8007986 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007966:	78fb      	ldrb	r3, [r7, #3]
 8007968:	f003 020f 	and.w	r2, r3, #15
 800796c:	4613      	mov	r3, r2
 800796e:	00db      	lsls	r3, r3, #3
 8007970:	1a9b      	subs	r3, r3, r2
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	3338      	adds	r3, #56	; 0x38
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	4413      	add	r3, r2
 800797a:	3304      	adds	r3, #4
 800797c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2201      	movs	r2, #1
 8007982:	705a      	strb	r2, [r3, #1]
 8007984:	e00f      	b.n	80079a6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007986:	78fb      	ldrb	r3, [r7, #3]
 8007988:	f003 020f 	and.w	r2, r3, #15
 800798c:	4613      	mov	r3, r2
 800798e:	00db      	lsls	r3, r3, #3
 8007990:	1a9b      	subs	r3, r3, r2
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	4413      	add	r3, r2
 800799c:	3304      	adds	r3, #4
 800799e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80079a6:	78fb      	ldrb	r3, [r7, #3]
 80079a8:	f003 030f 	and.w	r3, r3, #15
 80079ac:	b2da      	uxtb	r2, r3
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80079b2:	883a      	ldrh	r2, [r7, #0]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	78ba      	ldrb	r2, [r7, #2]
 80079bc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	785b      	ldrb	r3, [r3, #1]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d004      	beq.n	80079d0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80079d0:	78bb      	ldrb	r3, [r7, #2]
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d102      	bne.n	80079dc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d101      	bne.n	80079ea <HAL_PCD_EP_Open+0xaa>
 80079e6:	2302      	movs	r3, #2
 80079e8:	e00e      	b.n	8007a08 <HAL_PCD_EP_Open+0xc8>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68f9      	ldr	r1, [r7, #12]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f009 fb7f 	bl	80110fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8007a06:	7afb      	ldrb	r3, [r7, #11]
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	460b      	mov	r3, r1
 8007a1a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007a1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	da0f      	bge.n	8007a44 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a24:	78fb      	ldrb	r3, [r7, #3]
 8007a26:	f003 020f 	and.w	r2, r3, #15
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	00db      	lsls	r3, r3, #3
 8007a2e:	1a9b      	subs	r3, r3, r2
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	3338      	adds	r3, #56	; 0x38
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	4413      	add	r3, r2
 8007a38:	3304      	adds	r3, #4
 8007a3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	705a      	strb	r2, [r3, #1]
 8007a42:	e00f      	b.n	8007a64 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a44:	78fb      	ldrb	r3, [r7, #3]
 8007a46:	f003 020f 	and.w	r2, r3, #15
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	00db      	lsls	r3, r3, #3
 8007a4e:	1a9b      	subs	r3, r3, r2
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	4413      	add	r3, r2
 8007a5a:	3304      	adds	r3, #4
 8007a5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007a64:	78fb      	ldrb	r3, [r7, #3]
 8007a66:	f003 030f 	and.w	r3, r3, #15
 8007a6a:	b2da      	uxtb	r2, r3
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d101      	bne.n	8007a7e <HAL_PCD_EP_Close+0x6e>
 8007a7a:	2302      	movs	r3, #2
 8007a7c:	e00e      	b.n	8007a9c <HAL_PCD_EP_Close+0x8c>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68f9      	ldr	r1, [r7, #12]
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f009 fbbd 	bl	801120c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b086      	sub	sp, #24
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	607a      	str	r2, [r7, #4]
 8007aae:	603b      	str	r3, [r7, #0]
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ab4:	7afb      	ldrb	r3, [r7, #11]
 8007ab6:	f003 020f 	and.w	r2, r3, #15
 8007aba:	4613      	mov	r3, r2
 8007abc:	00db      	lsls	r3, r3, #3
 8007abe:	1a9b      	subs	r3, r3, r2
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	4413      	add	r3, r2
 8007aca:	3304      	adds	r3, #4
 8007acc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	683a      	ldr	r2, [r7, #0]
 8007ad8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	2200      	movs	r2, #0
 8007ade:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ae6:	7afb      	ldrb	r3, [r7, #11]
 8007ae8:	f003 030f 	and.w	r3, r3, #15
 8007aec:	b2da      	uxtb	r2, r3
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d102      	bne.n	8007b00 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007b00:	7afb      	ldrb	r3, [r7, #11]
 8007b02:	f003 030f 	and.w	r3, r3, #15
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d109      	bne.n	8007b1e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6818      	ldr	r0, [r3, #0]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	461a      	mov	r2, r3
 8007b16:	6979      	ldr	r1, [r7, #20]
 8007b18:	f009 fe48 	bl	80117ac <USB_EP0StartXfer>
 8007b1c:	e008      	b.n	8007b30 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6818      	ldr	r0, [r3, #0]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	461a      	mov	r2, r3
 8007b2a:	6979      	ldr	r1, [r7, #20]
 8007b2c:	f009 fbf2 	bl	8011314 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3718      	adds	r7, #24
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007b3a:	b480      	push	{r7}
 8007b3c:	b083      	sub	sp, #12
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
 8007b42:	460b      	mov	r3, r1
 8007b44:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007b46:	78fb      	ldrb	r3, [r7, #3]
 8007b48:	f003 020f 	and.w	r2, r3, #15
 8007b4c:	6879      	ldr	r1, [r7, #4]
 8007b4e:	4613      	mov	r3, r2
 8007b50:	00db      	lsls	r3, r3, #3
 8007b52:	1a9b      	subs	r3, r3, r2
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	440b      	add	r3, r1
 8007b58:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007b5c:	681b      	ldr	r3, [r3, #0]
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr

08007b6a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b086      	sub	sp, #24
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	60f8      	str	r0, [r7, #12]
 8007b72:	607a      	str	r2, [r7, #4]
 8007b74:	603b      	str	r3, [r7, #0]
 8007b76:	460b      	mov	r3, r1
 8007b78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b7a:	7afb      	ldrb	r3, [r7, #11]
 8007b7c:	f003 020f 	and.w	r2, r3, #15
 8007b80:	4613      	mov	r3, r2
 8007b82:	00db      	lsls	r3, r3, #3
 8007b84:	1a9b      	subs	r3, r3, r2
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	3338      	adds	r3, #56	; 0x38
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	3304      	adds	r3, #4
 8007b90:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	683a      	ldr	r2, [r7, #0]
 8007b9c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007baa:	7afb      	ldrb	r3, [r7, #11]
 8007bac:	f003 030f 	and.w	r3, r3, #15
 8007bb0:	b2da      	uxtb	r2, r3
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d102      	bne.n	8007bc4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007bc4:	7afb      	ldrb	r3, [r7, #11]
 8007bc6:	f003 030f 	and.w	r3, r3, #15
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d109      	bne.n	8007be2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6818      	ldr	r0, [r3, #0]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	461a      	mov	r2, r3
 8007bda:	6979      	ldr	r1, [r7, #20]
 8007bdc:	f009 fde6 	bl	80117ac <USB_EP0StartXfer>
 8007be0:	e008      	b.n	8007bf4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6818      	ldr	r0, [r3, #0]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	461a      	mov	r2, r3
 8007bee:	6979      	ldr	r1, [r7, #20]
 8007bf0:	f009 fb90 	bl	8011314 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3718      	adds	r7, #24
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b084      	sub	sp, #16
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	460b      	mov	r3, r1
 8007c08:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007c0a:	78fb      	ldrb	r3, [r7, #3]
 8007c0c:	f003 020f 	and.w	r2, r3, #15
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d901      	bls.n	8007c1c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e050      	b.n	8007cbe <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007c1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	da0f      	bge.n	8007c44 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c24:	78fb      	ldrb	r3, [r7, #3]
 8007c26:	f003 020f 	and.w	r2, r3, #15
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	00db      	lsls	r3, r3, #3
 8007c2e:	1a9b      	subs	r3, r3, r2
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	3338      	adds	r3, #56	; 0x38
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	4413      	add	r3, r2
 8007c38:	3304      	adds	r3, #4
 8007c3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	705a      	strb	r2, [r3, #1]
 8007c42:	e00d      	b.n	8007c60 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007c44:	78fa      	ldrb	r2, [r7, #3]
 8007c46:	4613      	mov	r3, r2
 8007c48:	00db      	lsls	r3, r3, #3
 8007c4a:	1a9b      	subs	r3, r3, r2
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	4413      	add	r3, r2
 8007c56:	3304      	adds	r3, #4
 8007c58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2201      	movs	r2, #1
 8007c64:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007c66:	78fb      	ldrb	r3, [r7, #3]
 8007c68:	f003 030f 	and.w	r3, r3, #15
 8007c6c:	b2da      	uxtb	r2, r3
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d101      	bne.n	8007c80 <HAL_PCD_EP_SetStall+0x82>
 8007c7c:	2302      	movs	r3, #2
 8007c7e:	e01e      	b.n	8007cbe <HAL_PCD_EP_SetStall+0xc0>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	68f9      	ldr	r1, [r7, #12]
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f009 ff42 	bl	8011b18 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007c94:	78fb      	ldrb	r3, [r7, #3]
 8007c96:	f003 030f 	and.w	r3, r3, #15
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d10a      	bne.n	8007cb4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6818      	ldr	r0, [r3, #0]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	b2d9      	uxtb	r1, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007cae:	461a      	mov	r2, r3
 8007cb0:	f00a f970 	bl	8011f94 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b084      	sub	sp, #16
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
 8007cce:	460b      	mov	r3, r1
 8007cd0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007cd2:	78fb      	ldrb	r3, [r7, #3]
 8007cd4:	f003 020f 	and.w	r2, r3, #15
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d901      	bls.n	8007ce4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e042      	b.n	8007d6a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007ce4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	da0f      	bge.n	8007d0c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007cec:	78fb      	ldrb	r3, [r7, #3]
 8007cee:	f003 020f 	and.w	r2, r3, #15
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	00db      	lsls	r3, r3, #3
 8007cf6:	1a9b      	subs	r3, r3, r2
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	3338      	adds	r3, #56	; 0x38
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	4413      	add	r3, r2
 8007d00:	3304      	adds	r3, #4
 8007d02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2201      	movs	r2, #1
 8007d08:	705a      	strb	r2, [r3, #1]
 8007d0a:	e00f      	b.n	8007d2c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d0c:	78fb      	ldrb	r3, [r7, #3]
 8007d0e:	f003 020f 	and.w	r2, r3, #15
 8007d12:	4613      	mov	r3, r2
 8007d14:	00db      	lsls	r3, r3, #3
 8007d16:	1a9b      	subs	r3, r3, r2
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	4413      	add	r3, r2
 8007d22:	3304      	adds	r3, #4
 8007d24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d32:	78fb      	ldrb	r3, [r7, #3]
 8007d34:	f003 030f 	and.w	r3, r3, #15
 8007d38:	b2da      	uxtb	r2, r3
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d101      	bne.n	8007d4c <HAL_PCD_EP_ClrStall+0x86>
 8007d48:	2302      	movs	r3, #2
 8007d4a:	e00e      	b.n	8007d6a <HAL_PCD_EP_ClrStall+0xa4>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68f9      	ldr	r1, [r7, #12]
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f009 ff4a 	bl	8011bf4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b082      	sub	sp, #8
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d101      	bne.n	8007d8c <HAL_PCD_EP_Flush+0x1a>
 8007d88:	2302      	movs	r3, #2
 8007d8a:	e01b      	b.n	8007dc4 <HAL_PCD_EP_Flush+0x52>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8007d94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	da09      	bge.n	8007db0 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	78fb      	ldrb	r3, [r7, #3]
 8007da2:	f003 030f 	and.w	r3, r3, #15
 8007da6:	4619      	mov	r1, r3
 8007da8:	4610      	mov	r0, r2
 8007daa:	f009 f921 	bl	8010ff0 <USB_FlushTxFifo>
 8007dae:	e004      	b.n	8007dba <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4618      	mov	r0, r3
 8007db6:	f009 f941 	bl	801103c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3708      	adds	r7, #8
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b08a      	sub	sp, #40	; 0x28
 8007dd0:	af02      	add	r7, sp, #8
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007de0:	683a      	ldr	r2, [r7, #0]
 8007de2:	4613      	mov	r3, r2
 8007de4:	00db      	lsls	r3, r3, #3
 8007de6:	1a9b      	subs	r3, r3, r2
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	3338      	adds	r3, #56	; 0x38
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	4413      	add	r3, r2
 8007df0:	3304      	adds	r3, #4
 8007df2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	699a      	ldr	r2, [r3, #24]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	695b      	ldr	r3, [r3, #20]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d901      	bls.n	8007e04 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e06c      	b.n	8007ede <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	695a      	ldr	r2, [r3, #20]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	699b      	ldr	r3, [r3, #24]
 8007e0c:	1ad3      	subs	r3, r2, r3
 8007e0e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	69fa      	ldr	r2, [r7, #28]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d902      	bls.n	8007e20 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	3303      	adds	r3, #3
 8007e24:	089b      	lsrs	r3, r3, #2
 8007e26:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007e28:	e02b      	b.n	8007e82 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	695a      	ldr	r2, [r3, #20]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	699b      	ldr	r3, [r3, #24]
 8007e32:	1ad3      	subs	r3, r2, r3
 8007e34:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	69fa      	ldr	r2, [r7, #28]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d902      	bls.n	8007e46 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	3303      	adds	r3, #3
 8007e4a:	089b      	lsrs	r3, r3, #2
 8007e4c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	68d9      	ldr	r1, [r3, #12]
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	b2da      	uxtb	r2, r3
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	9300      	str	r3, [sp, #0]
 8007e62:	4603      	mov	r3, r0
 8007e64:	6978      	ldr	r0, [r7, #20]
 8007e66:	f009 fdf9 	bl	8011a5c <USB_WritePacket>

    ep->xfer_buff  += len;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	68da      	ldr	r2, [r3, #12]
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	441a      	add	r2, r3
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	699a      	ldr	r2, [r3, #24]
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	441a      	add	r2, r3
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	015a      	lsls	r2, r3, #5
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	4413      	add	r3, r2
 8007e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e8e:	699b      	ldr	r3, [r3, #24]
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	69ba      	ldr	r2, [r7, #24]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d809      	bhi.n	8007eac <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	699a      	ldr	r2, [r3, #24]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d203      	bcs.n	8007eac <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	695b      	ldr	r3, [r3, #20]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d1be      	bne.n	8007e2a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	695a      	ldr	r2, [r3, #20]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	699b      	ldr	r3, [r3, #24]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d811      	bhi.n	8007edc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	f003 030f 	and.w	r3, r3, #15
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ecc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	43db      	mvns	r3, r3
 8007ed2:	6939      	ldr	r1, [r7, #16]
 8007ed4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ed8:	4013      	ands	r3, r2
 8007eda:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3720      	adds	r7, #32
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
	...

08007ee8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b086      	sub	sp, #24
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	333c      	adds	r3, #60	; 0x3c
 8007f00:	3304      	adds	r3, #4
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	015a      	lsls	r2, r3, #5
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	f040 80a0 	bne.w	8008060 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	f003 0308 	and.w	r3, r3, #8
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d015      	beq.n	8007f56 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	4a72      	ldr	r2, [pc, #456]	; (80080f8 <PCD_EP_OutXfrComplete_int+0x210>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	f240 80dd 	bls.w	80080ee <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	f000 80d7 	beq.w	80080ee <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	015a      	lsls	r2, r3, #5
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	4413      	add	r3, r2
 8007f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f52:	6093      	str	r3, [r2, #8]
 8007f54:	e0cb      	b.n	80080ee <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	f003 0320 	and.w	r3, r3, #32
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d009      	beq.n	8007f74 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	015a      	lsls	r2, r3, #5
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	4413      	add	r3, r2
 8007f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	2320      	movs	r3, #32
 8007f70:	6093      	str	r3, [r2, #8]
 8007f72:	e0bc      	b.n	80080ee <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	f040 80b7 	bne.w	80080ee <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	4a5d      	ldr	r2, [pc, #372]	; (80080f8 <PCD_EP_OutXfrComplete_int+0x210>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d90f      	bls.n	8007fa8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00a      	beq.n	8007fa8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	015a      	lsls	r2, r3, #5
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	4413      	add	r3, r2
 8007f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fa4:	6093      	str	r3, [r2, #8]
 8007fa6:	e0a2      	b.n	80080ee <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8007fa8:	6879      	ldr	r1, [r7, #4]
 8007faa:	683a      	ldr	r2, [r7, #0]
 8007fac:	4613      	mov	r3, r2
 8007fae:	00db      	lsls	r3, r3, #3
 8007fb0:	1a9b      	subs	r3, r3, r2
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	440b      	add	r3, r1
 8007fb6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007fba:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	0159      	lsls	r1, r3, #5
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	440b      	add	r3, r1
 8007fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8007fce:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	683a      	ldr	r2, [r7, #0]
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	00db      	lsls	r3, r3, #3
 8007fd8:	1a9b      	subs	r3, r3, r2
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	4403      	add	r3, r0
 8007fde:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007fe2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007fe4:	6879      	ldr	r1, [r7, #4]
 8007fe6:	683a      	ldr	r2, [r7, #0]
 8007fe8:	4613      	mov	r3, r2
 8007fea:	00db      	lsls	r3, r3, #3
 8007fec:	1a9b      	subs	r3, r3, r2
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	440b      	add	r3, r1
 8007ff2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007ff6:	6819      	ldr	r1, [r3, #0]
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	683a      	ldr	r2, [r7, #0]
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	00db      	lsls	r3, r3, #3
 8008000:	1a9b      	subs	r3, r3, r2
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	4403      	add	r3, r0
 8008006:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4419      	add	r1, r3
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	683a      	ldr	r2, [r7, #0]
 8008012:	4613      	mov	r3, r2
 8008014:	00db      	lsls	r3, r3, #3
 8008016:	1a9b      	subs	r3, r3, r2
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	4403      	add	r3, r0
 800801c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008020:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d114      	bne.n	8008052 <PCD_EP_OutXfrComplete_int+0x16a>
 8008028:	6879      	ldr	r1, [r7, #4]
 800802a:	683a      	ldr	r2, [r7, #0]
 800802c:	4613      	mov	r3, r2
 800802e:	00db      	lsls	r3, r3, #3
 8008030:	1a9b      	subs	r3, r3, r2
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	440b      	add	r3, r1
 8008036:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d108      	bne.n	8008052 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6818      	ldr	r0, [r3, #0]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800804a:	461a      	mov	r2, r3
 800804c:	2101      	movs	r1, #1
 800804e:	f009 ffa1 	bl	8011f94 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	b2db      	uxtb	r3, r3
 8008056:	4619      	mov	r1, r3
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f012 f957 	bl	801a30c <HAL_PCD_DataOutStageCallback>
 800805e:	e046      	b.n	80080ee <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	4a26      	ldr	r2, [pc, #152]	; (80080fc <PCD_EP_OutXfrComplete_int+0x214>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d124      	bne.n	80080b2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00a      	beq.n	8008088 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	015a      	lsls	r2, r3, #5
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	4413      	add	r3, r2
 800807a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800807e:	461a      	mov	r2, r3
 8008080:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008084:	6093      	str	r3, [r2, #8]
 8008086:	e032      	b.n	80080ee <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	f003 0320 	and.w	r3, r3, #32
 800808e:	2b00      	cmp	r3, #0
 8008090:	d008      	beq.n	80080a4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	015a      	lsls	r2, r3, #5
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	4413      	add	r3, r2
 800809a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800809e:	461a      	mov	r2, r3
 80080a0:	2320      	movs	r3, #32
 80080a2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	4619      	mov	r1, r3
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f012 f92e 	bl	801a30c <HAL_PCD_DataOutStageCallback>
 80080b0:	e01d      	b.n	80080ee <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d114      	bne.n	80080e2 <PCD_EP_OutXfrComplete_int+0x1fa>
 80080b8:	6879      	ldr	r1, [r7, #4]
 80080ba:	683a      	ldr	r2, [r7, #0]
 80080bc:	4613      	mov	r3, r2
 80080be:	00db      	lsls	r3, r3, #3
 80080c0:	1a9b      	subs	r3, r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	440b      	add	r3, r1
 80080c6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d108      	bne.n	80080e2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6818      	ldr	r0, [r3, #0]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80080da:	461a      	mov	r2, r3
 80080dc:	2100      	movs	r1, #0
 80080de:	f009 ff59 	bl	8011f94 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	4619      	mov	r1, r3
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f012 f90f 	bl	801a30c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80080ee:	2300      	movs	r3, #0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3718      	adds	r7, #24
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	4f54300a 	.word	0x4f54300a
 80080fc:	4f54310a 	.word	0x4f54310a

08008100 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b086      	sub	sp, #24
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	333c      	adds	r3, #60	; 0x3c
 8008118:	3304      	adds	r3, #4
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	015a      	lsls	r2, r3, #5
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	4413      	add	r3, r2
 8008126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	4a15      	ldr	r2, [pc, #84]	; (8008188 <PCD_EP_OutSetupPacket_int+0x88>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d90e      	bls.n	8008154 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800813c:	2b00      	cmp	r3, #0
 800813e:	d009      	beq.n	8008154 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	015a      	lsls	r2, r3, #5
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	4413      	add	r3, r2
 8008148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800814c:	461a      	mov	r2, r3
 800814e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008152:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f012 f8c7 	bl	801a2e8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	4a0a      	ldr	r2, [pc, #40]	; (8008188 <PCD_EP_OutSetupPacket_int+0x88>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d90c      	bls.n	800817c <PCD_EP_OutSetupPacket_int+0x7c>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	2b01      	cmp	r3, #1
 8008168:	d108      	bne.n	800817c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6818      	ldr	r0, [r3, #0]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008174:	461a      	mov	r2, r3
 8008176:	2101      	movs	r1, #1
 8008178:	f009 ff0c 	bl	8011f94 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3718      	adds	r7, #24
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	4f54300a 	.word	0x4f54300a

0800818c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800818c:	b480      	push	{r7}
 800818e:	b085      	sub	sp, #20
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	460b      	mov	r3, r1
 8008196:	70fb      	strb	r3, [r7, #3]
 8008198:	4613      	mov	r3, r2
 800819a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80081a4:	78fb      	ldrb	r3, [r7, #3]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d107      	bne.n	80081ba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80081aa:	883b      	ldrh	r3, [r7, #0]
 80081ac:	0419      	lsls	r1, r3, #16
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68ba      	ldr	r2, [r7, #8]
 80081b4:	430a      	orrs	r2, r1
 80081b6:	629a      	str	r2, [r3, #40]	; 0x28
 80081b8:	e028      	b.n	800820c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c0:	0c1b      	lsrs	r3, r3, #16
 80081c2:	68ba      	ldr	r2, [r7, #8]
 80081c4:	4413      	add	r3, r2
 80081c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80081c8:	2300      	movs	r3, #0
 80081ca:	73fb      	strb	r3, [r7, #15]
 80081cc:	e00d      	b.n	80081ea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	7bfb      	ldrb	r3, [r7, #15]
 80081d4:	3340      	adds	r3, #64	; 0x40
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	4413      	add	r3, r2
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	0c1b      	lsrs	r3, r3, #16
 80081de:	68ba      	ldr	r2, [r7, #8]
 80081e0:	4413      	add	r3, r2
 80081e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80081e4:	7bfb      	ldrb	r3, [r7, #15]
 80081e6:	3301      	adds	r3, #1
 80081e8:	73fb      	strb	r3, [r7, #15]
 80081ea:	7bfa      	ldrb	r2, [r7, #15]
 80081ec:	78fb      	ldrb	r3, [r7, #3]
 80081ee:	3b01      	subs	r3, #1
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d3ec      	bcc.n	80081ce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80081f4:	883b      	ldrh	r3, [r7, #0]
 80081f6:	0418      	lsls	r0, r3, #16
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6819      	ldr	r1, [r3, #0]
 80081fc:	78fb      	ldrb	r3, [r7, #3]
 80081fe:	3b01      	subs	r3, #1
 8008200:	68ba      	ldr	r2, [r7, #8]
 8008202:	4302      	orrs	r2, r0
 8008204:	3340      	adds	r3, #64	; 0x40
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	440b      	add	r3, r1
 800820a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3714      	adds	r7, #20
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr

0800821a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800821a:	b480      	push	{r7}
 800821c:	b083      	sub	sp, #12
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
 8008222:	460b      	mov	r3, r1
 8008224:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	887a      	ldrh	r2, [r7, #2]
 800822c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800823c:	b480      	push	{r7}
 800823e:	b085      	sub	sp, #20
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2201      	movs	r2, #1
 800824e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	699b      	ldr	r3, [r3, #24]
 800825e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800826a:	4b05      	ldr	r3, [pc, #20]	; (8008280 <HAL_PCDEx_ActivateLPM+0x44>)
 800826c:	4313      	orrs	r3, r2
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8008272:	2300      	movs	r3, #0
}
 8008274:	4618      	mov	r0, r3
 8008276:	3714      	adds	r7, #20
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr
 8008280:	10000003 	.word	0x10000003

08008284 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	460b      	mov	r3, r1
 800828e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008290:	bf00      	nop
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80082a4:	4b19      	ldr	r3, [pc, #100]	; (800830c <HAL_PWREx_ConfigSupply+0x70>)
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	f003 0304 	and.w	r3, r3, #4
 80082ac:	2b04      	cmp	r3, #4
 80082ae:	d00a      	beq.n	80082c6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80082b0:	4b16      	ldr	r3, [pc, #88]	; (800830c <HAL_PWREx_ConfigSupply+0x70>)
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	f003 0307 	and.w	r3, r3, #7
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d001      	beq.n	80082c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	e01f      	b.n	8008302 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80082c2:	2300      	movs	r3, #0
 80082c4:	e01d      	b.n	8008302 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80082c6:	4b11      	ldr	r3, [pc, #68]	; (800830c <HAL_PWREx_ConfigSupply+0x70>)
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	f023 0207 	bic.w	r2, r3, #7
 80082ce:	490f      	ldr	r1, [pc, #60]	; (800830c <HAL_PWREx_ConfigSupply+0x70>)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80082d6:	f7f9 fc33 	bl	8001b40 <HAL_GetTick>
 80082da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80082dc:	e009      	b.n	80082f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80082de:	f7f9 fc2f 	bl	8001b40 <HAL_GetTick>
 80082e2:	4602      	mov	r2, r0
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	1ad3      	subs	r3, r2, r3
 80082e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082ec:	d901      	bls.n	80082f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	e007      	b.n	8008302 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80082f2:	4b06      	ldr	r3, [pc, #24]	; (800830c <HAL_PWREx_ConfigSupply+0x70>)
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082fe:	d1ee      	bne.n	80082de <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	58024800 	.word	0x58024800

08008310 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8008310:	b480      	push	{r7}
 8008312:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008314:	4b05      	ldr	r3, [pc, #20]	; (800832c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	4a04      	ldr	r2, [pc, #16]	; (800832c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800831a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800831e:	60d3      	str	r3, [r2, #12]
}
 8008320:	bf00      	nop
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr
 800832a:	bf00      	nop
 800832c:	58024800 	.word	0x58024800

08008330 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b08c      	sub	sp, #48	; 0x30
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d101      	bne.n	8008342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	e3c4      	b.n	8008acc <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f003 0301 	and.w	r3, r3, #1
 800834a:	2b00      	cmp	r3, #0
 800834c:	f000 8087 	beq.w	800845e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008350:	4ba2      	ldr	r3, [pc, #648]	; (80085dc <HAL_RCC_OscConfig+0x2ac>)
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008358:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800835a:	4ba0      	ldr	r3, [pc, #640]	; (80085dc <HAL_RCC_OscConfig+0x2ac>)
 800835c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800835e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008362:	2b10      	cmp	r3, #16
 8008364:	d007      	beq.n	8008376 <HAL_RCC_OscConfig+0x46>
 8008366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008368:	2b18      	cmp	r3, #24
 800836a:	d110      	bne.n	800838e <HAL_RCC_OscConfig+0x5e>
 800836c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836e:	f003 0303 	and.w	r3, r3, #3
 8008372:	2b02      	cmp	r3, #2
 8008374:	d10b      	bne.n	800838e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008376:	4b99      	ldr	r3, [pc, #612]	; (80085dc <HAL_RCC_OscConfig+0x2ac>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800837e:	2b00      	cmp	r3, #0
 8008380:	d06c      	beq.n	800845c <HAL_RCC_OscConfig+0x12c>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d168      	bne.n	800845c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	e39e      	b.n	8008acc <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008396:	d106      	bne.n	80083a6 <HAL_RCC_OscConfig+0x76>
 8008398:	4b90      	ldr	r3, [pc, #576]	; (80085dc <HAL_RCC_OscConfig+0x2ac>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a8f      	ldr	r2, [pc, #572]	; (80085dc <HAL_RCC_OscConfig+0x2ac>)
 800839e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083a2:	6013      	str	r3, [r2, #0]
 80083a4:	e02e      	b.n	8008404 <HAL_RCC_OscConfig+0xd4>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d10c      	bne.n	80083c8 <HAL_RCC_OscConfig+0x98>
 80083ae:	4b8b      	ldr	r3, [pc, #556]	; (80085dc <HAL_RCC_OscConfig+0x2ac>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a8a      	ldr	r2, [pc, #552]	; (80085dc <HAL_RCC_OscConfig+0x2ac>)
 80083b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083b8:	6013      	str	r3, [r2, #0]
 80083ba:	4b88      	ldr	r3, [pc, #544]	; (80085dc <HAL_RCC_OscConfig+0x2ac>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a87      	ldr	r2, [pc, #540]	; (80085dc <HAL_RCC_OscConfig+0x2ac>)
 80083c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083c4:	6013      	str	r3, [r2, #0]
 80083c6:	e01d      	b.n	8008404 <HAL_RCC_OscConfig+0xd4>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80083d0:	d10c      	bne.n	80083ec <HAL_RCC_OscConfig+0xbc>
 80083d2:	4b82      	ldr	r3, [pc, #520]	; (80085dc <HAL_RCC_OscConfig+0x2ac>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a81      	ldr	r2, [pc, #516]	; (80085dc <HAL_RCC_OscConfig+0x2ac>)
 80083d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80083dc:	6013      	str	r3, [r2, #0]
 80083de:	4b7f      	ldr	r3, [pc, #508]	; (80085dc <HAL_RCC_OscConfig+0x2ac>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a7e      	ldr	r2, [pc, #504]	; (80085dc <HAL_RCC_OscConfig+0x2ac>)
 80083e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083e8:	6013      	str	r3, [r2, #0]
 80083ea:	e00b      	b.n	8008404 <HAL_RCC_OscConfig+0xd4>
 80083ec:	4b7b      	ldr	r3, [pc, #492]	; (80085dc <HAL_RCC_OscConfig+0x2ac>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a7a      	ldr	r2, [pc, #488]	; (80085dc <HAL_RCC_OscConfig+0x2ac>)
 80083f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083f6:	6013      	str	r3, [r2, #0]
 80083f8:	4b78      	ldr	r3, [pc, #480]	; (80085dc <HAL_RCC_OscConfig+0x2ac>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a77      	ldr	r2, [pc, #476]	; (80085dc <HAL_RCC_OscConfig+0x2ac>)
 80083fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008402:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d013      	beq.n	8008434 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800840c:	f7f9 fb98 	bl	8001b40 <HAL_GetTick>
 8008410:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008412:	e008      	b.n	8008426 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008414:	f7f9 fb94 	bl	8001b40 <HAL_GetTick>
 8008418:	4602      	mov	r2, r0
 800841a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841c:	1ad3      	subs	r3, r2, r3
 800841e:	2b64      	cmp	r3, #100	; 0x64
 8008420:	d901      	bls.n	8008426 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008422:	2303      	movs	r3, #3
 8008424:	e352      	b.n	8008acc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008426:	4b6d      	ldr	r3, [pc, #436]	; (80085dc <HAL_RCC_OscConfig+0x2ac>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800842e:	2b00      	cmp	r3, #0
 8008430:	d0f0      	beq.n	8008414 <HAL_RCC_OscConfig+0xe4>
 8008432:	e014      	b.n	800845e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008434:	f7f9 fb84 	bl	8001b40 <HAL_GetTick>
 8008438:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800843a:	e008      	b.n	800844e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800843c:	f7f9 fb80 	bl	8001b40 <HAL_GetTick>
 8008440:	4602      	mov	r2, r0
 8008442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008444:	1ad3      	subs	r3, r2, r3
 8008446:	2b64      	cmp	r3, #100	; 0x64
 8008448:	d901      	bls.n	800844e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800844a:	2303      	movs	r3, #3
 800844c:	e33e      	b.n	8008acc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800844e:	4b63      	ldr	r3, [pc, #396]	; (80085dc <HAL_RCC_OscConfig+0x2ac>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008456:	2b00      	cmp	r3, #0
 8008458:	d1f0      	bne.n	800843c <HAL_RCC_OscConfig+0x10c>
 800845a:	e000      	b.n	800845e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800845c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 0302 	and.w	r3, r3, #2
 8008466:	2b00      	cmp	r3, #0
 8008468:	f000 8092 	beq.w	8008590 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800846c:	4b5b      	ldr	r3, [pc, #364]	; (80085dc <HAL_RCC_OscConfig+0x2ac>)
 800846e:	691b      	ldr	r3, [r3, #16]
 8008470:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008474:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008476:	4b59      	ldr	r3, [pc, #356]	; (80085dc <HAL_RCC_OscConfig+0x2ac>)
 8008478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800847a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800847c:	6a3b      	ldr	r3, [r7, #32]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d007      	beq.n	8008492 <HAL_RCC_OscConfig+0x162>
 8008482:	6a3b      	ldr	r3, [r7, #32]
 8008484:	2b18      	cmp	r3, #24
 8008486:	d12d      	bne.n	80084e4 <HAL_RCC_OscConfig+0x1b4>
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	f003 0303 	and.w	r3, r3, #3
 800848e:	2b00      	cmp	r3, #0
 8008490:	d128      	bne.n	80084e4 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008492:	4b52      	ldr	r3, [pc, #328]	; (80085dc <HAL_RCC_OscConfig+0x2ac>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f003 0304 	and.w	r3, r3, #4
 800849a:	2b00      	cmp	r3, #0
 800849c:	d005      	beq.n	80084aa <HAL_RCC_OscConfig+0x17a>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d101      	bne.n	80084aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	e310      	b.n	8008acc <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084aa:	f7f9 fb77 	bl	8001b9c <HAL_GetREVID>
 80084ae:	4602      	mov	r2, r0
 80084b0:	f241 0303 	movw	r3, #4099	; 0x1003
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d80a      	bhi.n	80084ce <HAL_RCC_OscConfig+0x19e>
 80084b8:	4b48      	ldr	r3, [pc, #288]	; (80085dc <HAL_RCC_OscConfig+0x2ac>)
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	691b      	ldr	r3, [r3, #16]
 80084c4:	031b      	lsls	r3, r3, #12
 80084c6:	4945      	ldr	r1, [pc, #276]	; (80085dc <HAL_RCC_OscConfig+0x2ac>)
 80084c8:	4313      	orrs	r3, r2
 80084ca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084cc:	e060      	b.n	8008590 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084ce:	4b43      	ldr	r3, [pc, #268]	; (80085dc <HAL_RCC_OscConfig+0x2ac>)
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	061b      	lsls	r3, r3, #24
 80084dc:	493f      	ldr	r1, [pc, #252]	; (80085dc <HAL_RCC_OscConfig+0x2ac>)
 80084de:	4313      	orrs	r3, r2
 80084e0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084e2:	e055      	b.n	8008590 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d038      	beq.n	800855e <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80084ec:	4b3b      	ldr	r3, [pc, #236]	; (80085dc <HAL_RCC_OscConfig+0x2ac>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f023 0219 	bic.w	r2, r3, #25
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	4938      	ldr	r1, [pc, #224]	; (80085dc <HAL_RCC_OscConfig+0x2ac>)
 80084fa:	4313      	orrs	r3, r2
 80084fc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084fe:	f7f9 fb1f 	bl	8001b40 <HAL_GetTick>
 8008502:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008504:	e008      	b.n	8008518 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008506:	f7f9 fb1b 	bl	8001b40 <HAL_GetTick>
 800850a:	4602      	mov	r2, r0
 800850c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850e:	1ad3      	subs	r3, r2, r3
 8008510:	2b02      	cmp	r3, #2
 8008512:	d901      	bls.n	8008518 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8008514:	2303      	movs	r3, #3
 8008516:	e2d9      	b.n	8008acc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008518:	4b30      	ldr	r3, [pc, #192]	; (80085dc <HAL_RCC_OscConfig+0x2ac>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f003 0304 	and.w	r3, r3, #4
 8008520:	2b00      	cmp	r3, #0
 8008522:	d0f0      	beq.n	8008506 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008524:	f7f9 fb3a 	bl	8001b9c <HAL_GetREVID>
 8008528:	4602      	mov	r2, r0
 800852a:	f241 0303 	movw	r3, #4099	; 0x1003
 800852e:	429a      	cmp	r2, r3
 8008530:	d80a      	bhi.n	8008548 <HAL_RCC_OscConfig+0x218>
 8008532:	4b2a      	ldr	r3, [pc, #168]	; (80085dc <HAL_RCC_OscConfig+0x2ac>)
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	031b      	lsls	r3, r3, #12
 8008540:	4926      	ldr	r1, [pc, #152]	; (80085dc <HAL_RCC_OscConfig+0x2ac>)
 8008542:	4313      	orrs	r3, r2
 8008544:	604b      	str	r3, [r1, #4]
 8008546:	e023      	b.n	8008590 <HAL_RCC_OscConfig+0x260>
 8008548:	4b24      	ldr	r3, [pc, #144]	; (80085dc <HAL_RCC_OscConfig+0x2ac>)
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	061b      	lsls	r3, r3, #24
 8008556:	4921      	ldr	r1, [pc, #132]	; (80085dc <HAL_RCC_OscConfig+0x2ac>)
 8008558:	4313      	orrs	r3, r2
 800855a:	604b      	str	r3, [r1, #4]
 800855c:	e018      	b.n	8008590 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800855e:	4b1f      	ldr	r3, [pc, #124]	; (80085dc <HAL_RCC_OscConfig+0x2ac>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a1e      	ldr	r2, [pc, #120]	; (80085dc <HAL_RCC_OscConfig+0x2ac>)
 8008564:	f023 0301 	bic.w	r3, r3, #1
 8008568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800856a:	f7f9 fae9 	bl	8001b40 <HAL_GetTick>
 800856e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008570:	e008      	b.n	8008584 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008572:	f7f9 fae5 	bl	8001b40 <HAL_GetTick>
 8008576:	4602      	mov	r2, r0
 8008578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857a:	1ad3      	subs	r3, r2, r3
 800857c:	2b02      	cmp	r3, #2
 800857e:	d901      	bls.n	8008584 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8008580:	2303      	movs	r3, #3
 8008582:	e2a3      	b.n	8008acc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008584:	4b15      	ldr	r3, [pc, #84]	; (80085dc <HAL_RCC_OscConfig+0x2ac>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 0304 	and.w	r3, r3, #4
 800858c:	2b00      	cmp	r3, #0
 800858e:	d1f0      	bne.n	8008572 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f003 0310 	and.w	r3, r3, #16
 8008598:	2b00      	cmp	r3, #0
 800859a:	f000 8091 	beq.w	80086c0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800859e:	4b0f      	ldr	r3, [pc, #60]	; (80085dc <HAL_RCC_OscConfig+0x2ac>)
 80085a0:	691b      	ldr	r3, [r3, #16]
 80085a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085a6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80085a8:	4b0c      	ldr	r3, [pc, #48]	; (80085dc <HAL_RCC_OscConfig+0x2ac>)
 80085aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ac:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80085ae:	69bb      	ldr	r3, [r7, #24]
 80085b0:	2b08      	cmp	r3, #8
 80085b2:	d007      	beq.n	80085c4 <HAL_RCC_OscConfig+0x294>
 80085b4:	69bb      	ldr	r3, [r7, #24]
 80085b6:	2b18      	cmp	r3, #24
 80085b8:	d12f      	bne.n	800861a <HAL_RCC_OscConfig+0x2ea>
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	f003 0303 	and.w	r3, r3, #3
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d12a      	bne.n	800861a <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80085c4:	4b05      	ldr	r3, [pc, #20]	; (80085dc <HAL_RCC_OscConfig+0x2ac>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d007      	beq.n	80085e0 <HAL_RCC_OscConfig+0x2b0>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	69db      	ldr	r3, [r3, #28]
 80085d4:	2b80      	cmp	r3, #128	; 0x80
 80085d6:	d003      	beq.n	80085e0 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 80085d8:	2301      	movs	r3, #1
 80085da:	e277      	b.n	8008acc <HAL_RCC_OscConfig+0x79c>
 80085dc:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80085e0:	f7f9 fadc 	bl	8001b9c <HAL_GetREVID>
 80085e4:	4602      	mov	r2, r0
 80085e6:	f241 0303 	movw	r3, #4099	; 0x1003
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d80a      	bhi.n	8008604 <HAL_RCC_OscConfig+0x2d4>
 80085ee:	4ba2      	ldr	r3, [pc, #648]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a1b      	ldr	r3, [r3, #32]
 80085fa:	069b      	lsls	r3, r3, #26
 80085fc:	499e      	ldr	r1, [pc, #632]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 80085fe:	4313      	orrs	r3, r2
 8008600:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008602:	e05d      	b.n	80086c0 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008604:	4b9c      	ldr	r3, [pc, #624]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6a1b      	ldr	r3, [r3, #32]
 8008610:	061b      	lsls	r3, r3, #24
 8008612:	4999      	ldr	r1, [pc, #612]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 8008614:	4313      	orrs	r3, r2
 8008616:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008618:	e052      	b.n	80086c0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	69db      	ldr	r3, [r3, #28]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d035      	beq.n	800868e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008622:	4b95      	ldr	r3, [pc, #596]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a94      	ldr	r2, [pc, #592]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 8008628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800862c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800862e:	f7f9 fa87 	bl	8001b40 <HAL_GetTick>
 8008632:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008634:	e008      	b.n	8008648 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008636:	f7f9 fa83 	bl	8001b40 <HAL_GetTick>
 800863a:	4602      	mov	r2, r0
 800863c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863e:	1ad3      	subs	r3, r2, r3
 8008640:	2b02      	cmp	r3, #2
 8008642:	d901      	bls.n	8008648 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8008644:	2303      	movs	r3, #3
 8008646:	e241      	b.n	8008acc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008648:	4b8b      	ldr	r3, [pc, #556]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008650:	2b00      	cmp	r3, #0
 8008652:	d0f0      	beq.n	8008636 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008654:	f7f9 faa2 	bl	8001b9c <HAL_GetREVID>
 8008658:	4602      	mov	r2, r0
 800865a:	f241 0303 	movw	r3, #4099	; 0x1003
 800865e:	429a      	cmp	r2, r3
 8008660:	d80a      	bhi.n	8008678 <HAL_RCC_OscConfig+0x348>
 8008662:	4b85      	ldr	r3, [pc, #532]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6a1b      	ldr	r3, [r3, #32]
 800866e:	069b      	lsls	r3, r3, #26
 8008670:	4981      	ldr	r1, [pc, #516]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 8008672:	4313      	orrs	r3, r2
 8008674:	604b      	str	r3, [r1, #4]
 8008676:	e023      	b.n	80086c0 <HAL_RCC_OscConfig+0x390>
 8008678:	4b7f      	ldr	r3, [pc, #508]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6a1b      	ldr	r3, [r3, #32]
 8008684:	061b      	lsls	r3, r3, #24
 8008686:	497c      	ldr	r1, [pc, #496]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 8008688:	4313      	orrs	r3, r2
 800868a:	60cb      	str	r3, [r1, #12]
 800868c:	e018      	b.n	80086c0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800868e:	4b7a      	ldr	r3, [pc, #488]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a79      	ldr	r2, [pc, #484]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 8008694:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008698:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800869a:	f7f9 fa51 	bl	8001b40 <HAL_GetTick>
 800869e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80086a0:	e008      	b.n	80086b4 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80086a2:	f7f9 fa4d 	bl	8001b40 <HAL_GetTick>
 80086a6:	4602      	mov	r2, r0
 80086a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086aa:	1ad3      	subs	r3, r2, r3
 80086ac:	2b02      	cmp	r3, #2
 80086ae:	d901      	bls.n	80086b4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80086b0:	2303      	movs	r3, #3
 80086b2:	e20b      	b.n	8008acc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80086b4:	4b70      	ldr	r3, [pc, #448]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d1f0      	bne.n	80086a2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f003 0308 	and.w	r3, r3, #8
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d036      	beq.n	800873a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	695b      	ldr	r3, [r3, #20]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d019      	beq.n	8008708 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80086d4:	4b68      	ldr	r3, [pc, #416]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 80086d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086d8:	4a67      	ldr	r2, [pc, #412]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 80086da:	f043 0301 	orr.w	r3, r3, #1
 80086de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086e0:	f7f9 fa2e 	bl	8001b40 <HAL_GetTick>
 80086e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80086e6:	e008      	b.n	80086fa <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086e8:	f7f9 fa2a 	bl	8001b40 <HAL_GetTick>
 80086ec:	4602      	mov	r2, r0
 80086ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f0:	1ad3      	subs	r3, r2, r3
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	d901      	bls.n	80086fa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80086f6:	2303      	movs	r3, #3
 80086f8:	e1e8      	b.n	8008acc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80086fa:	4b5f      	ldr	r3, [pc, #380]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 80086fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086fe:	f003 0302 	and.w	r3, r3, #2
 8008702:	2b00      	cmp	r3, #0
 8008704:	d0f0      	beq.n	80086e8 <HAL_RCC_OscConfig+0x3b8>
 8008706:	e018      	b.n	800873a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008708:	4b5b      	ldr	r3, [pc, #364]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 800870a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800870c:	4a5a      	ldr	r2, [pc, #360]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 800870e:	f023 0301 	bic.w	r3, r3, #1
 8008712:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008714:	f7f9 fa14 	bl	8001b40 <HAL_GetTick>
 8008718:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800871a:	e008      	b.n	800872e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800871c:	f7f9 fa10 	bl	8001b40 <HAL_GetTick>
 8008720:	4602      	mov	r2, r0
 8008722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	2b02      	cmp	r3, #2
 8008728:	d901      	bls.n	800872e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800872a:	2303      	movs	r3, #3
 800872c:	e1ce      	b.n	8008acc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800872e:	4b52      	ldr	r3, [pc, #328]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 8008730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008732:	f003 0302 	and.w	r3, r3, #2
 8008736:	2b00      	cmp	r3, #0
 8008738:	d1f0      	bne.n	800871c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f003 0320 	and.w	r3, r3, #32
 8008742:	2b00      	cmp	r3, #0
 8008744:	d036      	beq.n	80087b4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	699b      	ldr	r3, [r3, #24]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d019      	beq.n	8008782 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800874e:	4b4a      	ldr	r3, [pc, #296]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a49      	ldr	r2, [pc, #292]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 8008754:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008758:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800875a:	f7f9 f9f1 	bl	8001b40 <HAL_GetTick>
 800875e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008760:	e008      	b.n	8008774 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008762:	f7f9 f9ed 	bl	8001b40 <HAL_GetTick>
 8008766:	4602      	mov	r2, r0
 8008768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876a:	1ad3      	subs	r3, r2, r3
 800876c:	2b02      	cmp	r3, #2
 800876e:	d901      	bls.n	8008774 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8008770:	2303      	movs	r3, #3
 8008772:	e1ab      	b.n	8008acc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008774:	4b40      	ldr	r3, [pc, #256]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800877c:	2b00      	cmp	r3, #0
 800877e:	d0f0      	beq.n	8008762 <HAL_RCC_OscConfig+0x432>
 8008780:	e018      	b.n	80087b4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008782:	4b3d      	ldr	r3, [pc, #244]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a3c      	ldr	r2, [pc, #240]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 8008788:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800878c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800878e:	f7f9 f9d7 	bl	8001b40 <HAL_GetTick>
 8008792:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008794:	e008      	b.n	80087a8 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008796:	f7f9 f9d3 	bl	8001b40 <HAL_GetTick>
 800879a:	4602      	mov	r2, r0
 800879c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879e:	1ad3      	subs	r3, r2, r3
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	d901      	bls.n	80087a8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80087a4:	2303      	movs	r3, #3
 80087a6:	e191      	b.n	8008acc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80087a8:	4b33      	ldr	r3, [pc, #204]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d1f0      	bne.n	8008796 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 0304 	and.w	r3, r3, #4
 80087bc:	2b00      	cmp	r3, #0
 80087be:	f000 8086 	beq.w	80088ce <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80087c2:	4b2e      	ldr	r3, [pc, #184]	; (800887c <HAL_RCC_OscConfig+0x54c>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a2d      	ldr	r2, [pc, #180]	; (800887c <HAL_RCC_OscConfig+0x54c>)
 80087c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80087ce:	f7f9 f9b7 	bl	8001b40 <HAL_GetTick>
 80087d2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80087d4:	e008      	b.n	80087e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80087d6:	f7f9 f9b3 	bl	8001b40 <HAL_GetTick>
 80087da:	4602      	mov	r2, r0
 80087dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087de:	1ad3      	subs	r3, r2, r3
 80087e0:	2b64      	cmp	r3, #100	; 0x64
 80087e2:	d901      	bls.n	80087e8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80087e4:	2303      	movs	r3, #3
 80087e6:	e171      	b.n	8008acc <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80087e8:	4b24      	ldr	r3, [pc, #144]	; (800887c <HAL_RCC_OscConfig+0x54c>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d0f0      	beq.n	80087d6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d106      	bne.n	800880a <HAL_RCC_OscConfig+0x4da>
 80087fc:	4b1e      	ldr	r3, [pc, #120]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 80087fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008800:	4a1d      	ldr	r2, [pc, #116]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 8008802:	f043 0301 	orr.w	r3, r3, #1
 8008806:	6713      	str	r3, [r2, #112]	; 0x70
 8008808:	e02d      	b.n	8008866 <HAL_RCC_OscConfig+0x536>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d10c      	bne.n	800882c <HAL_RCC_OscConfig+0x4fc>
 8008812:	4b19      	ldr	r3, [pc, #100]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 8008814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008816:	4a18      	ldr	r2, [pc, #96]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 8008818:	f023 0301 	bic.w	r3, r3, #1
 800881c:	6713      	str	r3, [r2, #112]	; 0x70
 800881e:	4b16      	ldr	r3, [pc, #88]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 8008820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008822:	4a15      	ldr	r2, [pc, #84]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 8008824:	f023 0304 	bic.w	r3, r3, #4
 8008828:	6713      	str	r3, [r2, #112]	; 0x70
 800882a:	e01c      	b.n	8008866 <HAL_RCC_OscConfig+0x536>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	2b05      	cmp	r3, #5
 8008832:	d10c      	bne.n	800884e <HAL_RCC_OscConfig+0x51e>
 8008834:	4b10      	ldr	r3, [pc, #64]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 8008836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008838:	4a0f      	ldr	r2, [pc, #60]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 800883a:	f043 0304 	orr.w	r3, r3, #4
 800883e:	6713      	str	r3, [r2, #112]	; 0x70
 8008840:	4b0d      	ldr	r3, [pc, #52]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 8008842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008844:	4a0c      	ldr	r2, [pc, #48]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 8008846:	f043 0301 	orr.w	r3, r3, #1
 800884a:	6713      	str	r3, [r2, #112]	; 0x70
 800884c:	e00b      	b.n	8008866 <HAL_RCC_OscConfig+0x536>
 800884e:	4b0a      	ldr	r3, [pc, #40]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 8008850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008852:	4a09      	ldr	r2, [pc, #36]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 8008854:	f023 0301 	bic.w	r3, r3, #1
 8008858:	6713      	str	r3, [r2, #112]	; 0x70
 800885a:	4b07      	ldr	r3, [pc, #28]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 800885c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800885e:	4a06      	ldr	r2, [pc, #24]	; (8008878 <HAL_RCC_OscConfig+0x548>)
 8008860:	f023 0304 	bic.w	r3, r3, #4
 8008864:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d01a      	beq.n	80088a4 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800886e:	f7f9 f967 	bl	8001b40 <HAL_GetTick>
 8008872:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008874:	e00f      	b.n	8008896 <HAL_RCC_OscConfig+0x566>
 8008876:	bf00      	nop
 8008878:	58024400 	.word	0x58024400
 800887c:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008880:	f7f9 f95e 	bl	8001b40 <HAL_GetTick>
 8008884:	4602      	mov	r2, r0
 8008886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	f241 3288 	movw	r2, #5000	; 0x1388
 800888e:	4293      	cmp	r3, r2
 8008890:	d901      	bls.n	8008896 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	e11a      	b.n	8008acc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008896:	4b8f      	ldr	r3, [pc, #572]	; (8008ad4 <HAL_RCC_OscConfig+0x7a4>)
 8008898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800889a:	f003 0302 	and.w	r3, r3, #2
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d0ee      	beq.n	8008880 <HAL_RCC_OscConfig+0x550>
 80088a2:	e014      	b.n	80088ce <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088a4:	f7f9 f94c 	bl	8001b40 <HAL_GetTick>
 80088a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80088aa:	e00a      	b.n	80088c2 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80088ac:	f7f9 f948 	bl	8001b40 <HAL_GetTick>
 80088b0:	4602      	mov	r2, r0
 80088b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b4:	1ad3      	subs	r3, r2, r3
 80088b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d901      	bls.n	80088c2 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 80088be:	2303      	movs	r3, #3
 80088c0:	e104      	b.n	8008acc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80088c2:	4b84      	ldr	r3, [pc, #528]	; (8008ad4 <HAL_RCC_OscConfig+0x7a4>)
 80088c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088c6:	f003 0302 	and.w	r3, r3, #2
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d1ee      	bne.n	80088ac <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	f000 80f9 	beq.w	8008aca <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80088d8:	4b7e      	ldr	r3, [pc, #504]	; (8008ad4 <HAL_RCC_OscConfig+0x7a4>)
 80088da:	691b      	ldr	r3, [r3, #16]
 80088dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088e0:	2b18      	cmp	r3, #24
 80088e2:	f000 80b4 	beq.w	8008a4e <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	f040 8095 	bne.w	8008a1a <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088f0:	4b78      	ldr	r3, [pc, #480]	; (8008ad4 <HAL_RCC_OscConfig+0x7a4>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a77      	ldr	r2, [pc, #476]	; (8008ad4 <HAL_RCC_OscConfig+0x7a4>)
 80088f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80088fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088fc:	f7f9 f920 	bl	8001b40 <HAL_GetTick>
 8008900:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008902:	e008      	b.n	8008916 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008904:	f7f9 f91c 	bl	8001b40 <HAL_GetTick>
 8008908:	4602      	mov	r2, r0
 800890a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890c:	1ad3      	subs	r3, r2, r3
 800890e:	2b02      	cmp	r3, #2
 8008910:	d901      	bls.n	8008916 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8008912:	2303      	movs	r3, #3
 8008914:	e0da      	b.n	8008acc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008916:	4b6f      	ldr	r3, [pc, #444]	; (8008ad4 <HAL_RCC_OscConfig+0x7a4>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800891e:	2b00      	cmp	r3, #0
 8008920:	d1f0      	bne.n	8008904 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008922:	4b6c      	ldr	r3, [pc, #432]	; (8008ad4 <HAL_RCC_OscConfig+0x7a4>)
 8008924:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008926:	4b6c      	ldr	r3, [pc, #432]	; (8008ad8 <HAL_RCC_OscConfig+0x7a8>)
 8008928:	4013      	ands	r3, r2
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008932:	0112      	lsls	r2, r2, #4
 8008934:	430a      	orrs	r2, r1
 8008936:	4967      	ldr	r1, [pc, #412]	; (8008ad4 <HAL_RCC_OscConfig+0x7a4>)
 8008938:	4313      	orrs	r3, r2
 800893a:	628b      	str	r3, [r1, #40]	; 0x28
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008940:	3b01      	subs	r3, #1
 8008942:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800894a:	3b01      	subs	r3, #1
 800894c:	025b      	lsls	r3, r3, #9
 800894e:	b29b      	uxth	r3, r3
 8008950:	431a      	orrs	r2, r3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008956:	3b01      	subs	r3, #1
 8008958:	041b      	lsls	r3, r3, #16
 800895a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800895e:	431a      	orrs	r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008964:	3b01      	subs	r3, #1
 8008966:	061b      	lsls	r3, r3, #24
 8008968:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800896c:	4959      	ldr	r1, [pc, #356]	; (8008ad4 <HAL_RCC_OscConfig+0x7a4>)
 800896e:	4313      	orrs	r3, r2
 8008970:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008972:	4b58      	ldr	r3, [pc, #352]	; (8008ad4 <HAL_RCC_OscConfig+0x7a4>)
 8008974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008976:	4a57      	ldr	r2, [pc, #348]	; (8008ad4 <HAL_RCC_OscConfig+0x7a4>)
 8008978:	f023 0301 	bic.w	r3, r3, #1
 800897c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800897e:	4b55      	ldr	r3, [pc, #340]	; (8008ad4 <HAL_RCC_OscConfig+0x7a4>)
 8008980:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008982:	4b56      	ldr	r3, [pc, #344]	; (8008adc <HAL_RCC_OscConfig+0x7ac>)
 8008984:	4013      	ands	r3, r2
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800898a:	00d2      	lsls	r2, r2, #3
 800898c:	4951      	ldr	r1, [pc, #324]	; (8008ad4 <HAL_RCC_OscConfig+0x7a4>)
 800898e:	4313      	orrs	r3, r2
 8008990:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008992:	4b50      	ldr	r3, [pc, #320]	; (8008ad4 <HAL_RCC_OscConfig+0x7a4>)
 8008994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008996:	f023 020c 	bic.w	r2, r3, #12
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800899e:	494d      	ldr	r1, [pc, #308]	; (8008ad4 <HAL_RCC_OscConfig+0x7a4>)
 80089a0:	4313      	orrs	r3, r2
 80089a2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80089a4:	4b4b      	ldr	r3, [pc, #300]	; (8008ad4 <HAL_RCC_OscConfig+0x7a4>)
 80089a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a8:	f023 0202 	bic.w	r2, r3, #2
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089b0:	4948      	ldr	r1, [pc, #288]	; (8008ad4 <HAL_RCC_OscConfig+0x7a4>)
 80089b2:	4313      	orrs	r3, r2
 80089b4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80089b6:	4b47      	ldr	r3, [pc, #284]	; (8008ad4 <HAL_RCC_OscConfig+0x7a4>)
 80089b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ba:	4a46      	ldr	r2, [pc, #280]	; (8008ad4 <HAL_RCC_OscConfig+0x7a4>)
 80089bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089c2:	4b44      	ldr	r3, [pc, #272]	; (8008ad4 <HAL_RCC_OscConfig+0x7a4>)
 80089c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c6:	4a43      	ldr	r2, [pc, #268]	; (8008ad4 <HAL_RCC_OscConfig+0x7a4>)
 80089c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80089ce:	4b41      	ldr	r3, [pc, #260]	; (8008ad4 <HAL_RCC_OscConfig+0x7a4>)
 80089d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d2:	4a40      	ldr	r2, [pc, #256]	; (8008ad4 <HAL_RCC_OscConfig+0x7a4>)
 80089d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80089d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80089da:	4b3e      	ldr	r3, [pc, #248]	; (8008ad4 <HAL_RCC_OscConfig+0x7a4>)
 80089dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089de:	4a3d      	ldr	r2, [pc, #244]	; (8008ad4 <HAL_RCC_OscConfig+0x7a4>)
 80089e0:	f043 0301 	orr.w	r3, r3, #1
 80089e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80089e6:	4b3b      	ldr	r3, [pc, #236]	; (8008ad4 <HAL_RCC_OscConfig+0x7a4>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a3a      	ldr	r2, [pc, #232]	; (8008ad4 <HAL_RCC_OscConfig+0x7a4>)
 80089ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80089f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089f2:	f7f9 f8a5 	bl	8001b40 <HAL_GetTick>
 80089f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80089f8:	e008      	b.n	8008a0c <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089fa:	f7f9 f8a1 	bl	8001b40 <HAL_GetTick>
 80089fe:	4602      	mov	r2, r0
 8008a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a02:	1ad3      	subs	r3, r2, r3
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	d901      	bls.n	8008a0c <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8008a08:	2303      	movs	r3, #3
 8008a0a:	e05f      	b.n	8008acc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a0c:	4b31      	ldr	r3, [pc, #196]	; (8008ad4 <HAL_RCC_OscConfig+0x7a4>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d0f0      	beq.n	80089fa <HAL_RCC_OscConfig+0x6ca>
 8008a18:	e057      	b.n	8008aca <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a1a:	4b2e      	ldr	r3, [pc, #184]	; (8008ad4 <HAL_RCC_OscConfig+0x7a4>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a2d      	ldr	r2, [pc, #180]	; (8008ad4 <HAL_RCC_OscConfig+0x7a4>)
 8008a20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a26:	f7f9 f88b 	bl	8001b40 <HAL_GetTick>
 8008a2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a2c:	e008      	b.n	8008a40 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a2e:	f7f9 f887 	bl	8001b40 <HAL_GetTick>
 8008a32:	4602      	mov	r2, r0
 8008a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a36:	1ad3      	subs	r3, r2, r3
 8008a38:	2b02      	cmp	r3, #2
 8008a3a:	d901      	bls.n	8008a40 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8008a3c:	2303      	movs	r3, #3
 8008a3e:	e045      	b.n	8008acc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a40:	4b24      	ldr	r3, [pc, #144]	; (8008ad4 <HAL_RCC_OscConfig+0x7a4>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d1f0      	bne.n	8008a2e <HAL_RCC_OscConfig+0x6fe>
 8008a4c:	e03d      	b.n	8008aca <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008a4e:	4b21      	ldr	r3, [pc, #132]	; (8008ad4 <HAL_RCC_OscConfig+0x7a4>)
 8008a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a52:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008a54:	4b1f      	ldr	r3, [pc, #124]	; (8008ad4 <HAL_RCC_OscConfig+0x7a4>)
 8008a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a58:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d031      	beq.n	8008ac6 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	f003 0203 	and.w	r2, r3, #3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d12a      	bne.n	8008ac6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	091b      	lsrs	r3, r3, #4
 8008a74:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d122      	bne.n	8008ac6 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a8a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d11a      	bne.n	8008ac6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	0a5b      	lsrs	r3, r3, #9
 8008a94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a9c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d111      	bne.n	8008ac6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	0c1b      	lsrs	r3, r3, #16
 8008aa6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aae:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d108      	bne.n	8008ac6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	0e1b      	lsrs	r3, r3, #24
 8008ab8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ac0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d001      	beq.n	8008aca <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e000      	b.n	8008acc <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8008aca:	2300      	movs	r3, #0
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3730      	adds	r7, #48	; 0x30
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	58024400 	.word	0x58024400
 8008ad8:	fffffc0c 	.word	0xfffffc0c
 8008adc:	ffff0007 	.word	0xffff0007

08008ae0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b086      	sub	sp, #24
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d101      	bne.n	8008af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	e19c      	b.n	8008e2e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008af4:	4b8a      	ldr	r3, [pc, #552]	; (8008d20 <HAL_RCC_ClockConfig+0x240>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 030f 	and.w	r3, r3, #15
 8008afc:	683a      	ldr	r2, [r7, #0]
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d910      	bls.n	8008b24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b02:	4b87      	ldr	r3, [pc, #540]	; (8008d20 <HAL_RCC_ClockConfig+0x240>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f023 020f 	bic.w	r2, r3, #15
 8008b0a:	4985      	ldr	r1, [pc, #532]	; (8008d20 <HAL_RCC_ClockConfig+0x240>)
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b12:	4b83      	ldr	r3, [pc, #524]	; (8008d20 <HAL_RCC_ClockConfig+0x240>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f003 030f 	and.w	r3, r3, #15
 8008b1a:	683a      	ldr	r2, [r7, #0]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d001      	beq.n	8008b24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008b20:	2301      	movs	r3, #1
 8008b22:	e184      	b.n	8008e2e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f003 0304 	and.w	r3, r3, #4
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d010      	beq.n	8008b52 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	691a      	ldr	r2, [r3, #16]
 8008b34:	4b7b      	ldr	r3, [pc, #492]	; (8008d24 <HAL_RCC_ClockConfig+0x244>)
 8008b36:	699b      	ldr	r3, [r3, #24]
 8008b38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d908      	bls.n	8008b52 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008b40:	4b78      	ldr	r3, [pc, #480]	; (8008d24 <HAL_RCC_ClockConfig+0x244>)
 8008b42:	699b      	ldr	r3, [r3, #24]
 8008b44:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	691b      	ldr	r3, [r3, #16]
 8008b4c:	4975      	ldr	r1, [pc, #468]	; (8008d24 <HAL_RCC_ClockConfig+0x244>)
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f003 0308 	and.w	r3, r3, #8
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d010      	beq.n	8008b80 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	695a      	ldr	r2, [r3, #20]
 8008b62:	4b70      	ldr	r3, [pc, #448]	; (8008d24 <HAL_RCC_ClockConfig+0x244>)
 8008b64:	69db      	ldr	r3, [r3, #28]
 8008b66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d908      	bls.n	8008b80 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008b6e:	4b6d      	ldr	r3, [pc, #436]	; (8008d24 <HAL_RCC_ClockConfig+0x244>)
 8008b70:	69db      	ldr	r3, [r3, #28]
 8008b72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	695b      	ldr	r3, [r3, #20]
 8008b7a:	496a      	ldr	r1, [pc, #424]	; (8008d24 <HAL_RCC_ClockConfig+0x244>)
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f003 0310 	and.w	r3, r3, #16
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d010      	beq.n	8008bae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	699a      	ldr	r2, [r3, #24]
 8008b90:	4b64      	ldr	r3, [pc, #400]	; (8008d24 <HAL_RCC_ClockConfig+0x244>)
 8008b92:	69db      	ldr	r3, [r3, #28]
 8008b94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d908      	bls.n	8008bae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008b9c:	4b61      	ldr	r3, [pc, #388]	; (8008d24 <HAL_RCC_ClockConfig+0x244>)
 8008b9e:	69db      	ldr	r3, [r3, #28]
 8008ba0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	699b      	ldr	r3, [r3, #24]
 8008ba8:	495e      	ldr	r1, [pc, #376]	; (8008d24 <HAL_RCC_ClockConfig+0x244>)
 8008baa:	4313      	orrs	r3, r2
 8008bac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f003 0320 	and.w	r3, r3, #32
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d010      	beq.n	8008bdc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	69da      	ldr	r2, [r3, #28]
 8008bbe:	4b59      	ldr	r3, [pc, #356]	; (8008d24 <HAL_RCC_ClockConfig+0x244>)
 8008bc0:	6a1b      	ldr	r3, [r3, #32]
 8008bc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d908      	bls.n	8008bdc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008bca:	4b56      	ldr	r3, [pc, #344]	; (8008d24 <HAL_RCC_ClockConfig+0x244>)
 8008bcc:	6a1b      	ldr	r3, [r3, #32]
 8008bce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	69db      	ldr	r3, [r3, #28]
 8008bd6:	4953      	ldr	r1, [pc, #332]	; (8008d24 <HAL_RCC_ClockConfig+0x244>)
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f003 0302 	and.w	r3, r3, #2
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d010      	beq.n	8008c0a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	68da      	ldr	r2, [r3, #12]
 8008bec:	4b4d      	ldr	r3, [pc, #308]	; (8008d24 <HAL_RCC_ClockConfig+0x244>)
 8008bee:	699b      	ldr	r3, [r3, #24]
 8008bf0:	f003 030f 	and.w	r3, r3, #15
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d908      	bls.n	8008c0a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008bf8:	4b4a      	ldr	r3, [pc, #296]	; (8008d24 <HAL_RCC_ClockConfig+0x244>)
 8008bfa:	699b      	ldr	r3, [r3, #24]
 8008bfc:	f023 020f 	bic.w	r2, r3, #15
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	4947      	ldr	r1, [pc, #284]	; (8008d24 <HAL_RCC_ClockConfig+0x244>)
 8008c06:	4313      	orrs	r3, r2
 8008c08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f003 0301 	and.w	r3, r3, #1
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d055      	beq.n	8008cc2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008c16:	4b43      	ldr	r3, [pc, #268]	; (8008d24 <HAL_RCC_ClockConfig+0x244>)
 8008c18:	699b      	ldr	r3, [r3, #24]
 8008c1a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	4940      	ldr	r1, [pc, #256]	; (8008d24 <HAL_RCC_ClockConfig+0x244>)
 8008c24:	4313      	orrs	r3, r2
 8008c26:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	2b02      	cmp	r3, #2
 8008c2e:	d107      	bne.n	8008c40 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008c30:	4b3c      	ldr	r3, [pc, #240]	; (8008d24 <HAL_RCC_ClockConfig+0x244>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d121      	bne.n	8008c80 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	e0f6      	b.n	8008e2e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	2b03      	cmp	r3, #3
 8008c46:	d107      	bne.n	8008c58 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008c48:	4b36      	ldr	r3, [pc, #216]	; (8008d24 <HAL_RCC_ClockConfig+0x244>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d115      	bne.n	8008c80 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	e0ea      	b.n	8008e2e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d107      	bne.n	8008c70 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008c60:	4b30      	ldr	r3, [pc, #192]	; (8008d24 <HAL_RCC_ClockConfig+0x244>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d109      	bne.n	8008c80 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e0de      	b.n	8008e2e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c70:	4b2c      	ldr	r3, [pc, #176]	; (8008d24 <HAL_RCC_ClockConfig+0x244>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f003 0304 	and.w	r3, r3, #4
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d101      	bne.n	8008c80 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e0d6      	b.n	8008e2e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008c80:	4b28      	ldr	r3, [pc, #160]	; (8008d24 <HAL_RCC_ClockConfig+0x244>)
 8008c82:	691b      	ldr	r3, [r3, #16]
 8008c84:	f023 0207 	bic.w	r2, r3, #7
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	4925      	ldr	r1, [pc, #148]	; (8008d24 <HAL_RCC_ClockConfig+0x244>)
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c92:	f7f8 ff55 	bl	8001b40 <HAL_GetTick>
 8008c96:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c98:	e00a      	b.n	8008cb0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c9a:	f7f8 ff51 	bl	8001b40 <HAL_GetTick>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	1ad3      	subs	r3, r2, r3
 8008ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d901      	bls.n	8008cb0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008cac:	2303      	movs	r3, #3
 8008cae:	e0be      	b.n	8008e2e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cb0:	4b1c      	ldr	r3, [pc, #112]	; (8008d24 <HAL_RCC_ClockConfig+0x244>)
 8008cb2:	691b      	ldr	r3, [r3, #16]
 8008cb4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	00db      	lsls	r3, r3, #3
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d1eb      	bne.n	8008c9a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f003 0302 	and.w	r3, r3, #2
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d010      	beq.n	8008cf0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	68da      	ldr	r2, [r3, #12]
 8008cd2:	4b14      	ldr	r3, [pc, #80]	; (8008d24 <HAL_RCC_ClockConfig+0x244>)
 8008cd4:	699b      	ldr	r3, [r3, #24]
 8008cd6:	f003 030f 	and.w	r3, r3, #15
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d208      	bcs.n	8008cf0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008cde:	4b11      	ldr	r3, [pc, #68]	; (8008d24 <HAL_RCC_ClockConfig+0x244>)
 8008ce0:	699b      	ldr	r3, [r3, #24]
 8008ce2:	f023 020f 	bic.w	r2, r3, #15
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	490e      	ldr	r1, [pc, #56]	; (8008d24 <HAL_RCC_ClockConfig+0x244>)
 8008cec:	4313      	orrs	r3, r2
 8008cee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008cf0:	4b0b      	ldr	r3, [pc, #44]	; (8008d20 <HAL_RCC_ClockConfig+0x240>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f003 030f 	and.w	r3, r3, #15
 8008cf8:	683a      	ldr	r2, [r7, #0]
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d214      	bcs.n	8008d28 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cfe:	4b08      	ldr	r3, [pc, #32]	; (8008d20 <HAL_RCC_ClockConfig+0x240>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f023 020f 	bic.w	r2, r3, #15
 8008d06:	4906      	ldr	r1, [pc, #24]	; (8008d20 <HAL_RCC_ClockConfig+0x240>)
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d0e:	4b04      	ldr	r3, [pc, #16]	; (8008d20 <HAL_RCC_ClockConfig+0x240>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f003 030f 	and.w	r3, r3, #15
 8008d16:	683a      	ldr	r2, [r7, #0]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d005      	beq.n	8008d28 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e086      	b.n	8008e2e <HAL_RCC_ClockConfig+0x34e>
 8008d20:	52002000 	.word	0x52002000
 8008d24:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f003 0304 	and.w	r3, r3, #4
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d010      	beq.n	8008d56 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	691a      	ldr	r2, [r3, #16]
 8008d38:	4b3f      	ldr	r3, [pc, #252]	; (8008e38 <HAL_RCC_ClockConfig+0x358>)
 8008d3a:	699b      	ldr	r3, [r3, #24]
 8008d3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d208      	bcs.n	8008d56 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008d44:	4b3c      	ldr	r3, [pc, #240]	; (8008e38 <HAL_RCC_ClockConfig+0x358>)
 8008d46:	699b      	ldr	r3, [r3, #24]
 8008d48:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	691b      	ldr	r3, [r3, #16]
 8008d50:	4939      	ldr	r1, [pc, #228]	; (8008e38 <HAL_RCC_ClockConfig+0x358>)
 8008d52:	4313      	orrs	r3, r2
 8008d54:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f003 0308 	and.w	r3, r3, #8
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d010      	beq.n	8008d84 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	695a      	ldr	r2, [r3, #20]
 8008d66:	4b34      	ldr	r3, [pc, #208]	; (8008e38 <HAL_RCC_ClockConfig+0x358>)
 8008d68:	69db      	ldr	r3, [r3, #28]
 8008d6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d208      	bcs.n	8008d84 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008d72:	4b31      	ldr	r3, [pc, #196]	; (8008e38 <HAL_RCC_ClockConfig+0x358>)
 8008d74:	69db      	ldr	r3, [r3, #28]
 8008d76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	695b      	ldr	r3, [r3, #20]
 8008d7e:	492e      	ldr	r1, [pc, #184]	; (8008e38 <HAL_RCC_ClockConfig+0x358>)
 8008d80:	4313      	orrs	r3, r2
 8008d82:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f003 0310 	and.w	r3, r3, #16
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d010      	beq.n	8008db2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	699a      	ldr	r2, [r3, #24]
 8008d94:	4b28      	ldr	r3, [pc, #160]	; (8008e38 <HAL_RCC_ClockConfig+0x358>)
 8008d96:	69db      	ldr	r3, [r3, #28]
 8008d98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d208      	bcs.n	8008db2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008da0:	4b25      	ldr	r3, [pc, #148]	; (8008e38 <HAL_RCC_ClockConfig+0x358>)
 8008da2:	69db      	ldr	r3, [r3, #28]
 8008da4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	699b      	ldr	r3, [r3, #24]
 8008dac:	4922      	ldr	r1, [pc, #136]	; (8008e38 <HAL_RCC_ClockConfig+0x358>)
 8008dae:	4313      	orrs	r3, r2
 8008db0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 0320 	and.w	r3, r3, #32
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d010      	beq.n	8008de0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	69da      	ldr	r2, [r3, #28]
 8008dc2:	4b1d      	ldr	r3, [pc, #116]	; (8008e38 <HAL_RCC_ClockConfig+0x358>)
 8008dc4:	6a1b      	ldr	r3, [r3, #32]
 8008dc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d208      	bcs.n	8008de0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008dce:	4b1a      	ldr	r3, [pc, #104]	; (8008e38 <HAL_RCC_ClockConfig+0x358>)
 8008dd0:	6a1b      	ldr	r3, [r3, #32]
 8008dd2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	69db      	ldr	r3, [r3, #28]
 8008dda:	4917      	ldr	r1, [pc, #92]	; (8008e38 <HAL_RCC_ClockConfig+0x358>)
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008de0:	f000 f834 	bl	8008e4c <HAL_RCC_GetSysClockFreq>
 8008de4:	4601      	mov	r1, r0
 8008de6:	4b14      	ldr	r3, [pc, #80]	; (8008e38 <HAL_RCC_ClockConfig+0x358>)
 8008de8:	699b      	ldr	r3, [r3, #24]
 8008dea:	0a1b      	lsrs	r3, r3, #8
 8008dec:	f003 030f 	and.w	r3, r3, #15
 8008df0:	4a12      	ldr	r2, [pc, #72]	; (8008e3c <HAL_RCC_ClockConfig+0x35c>)
 8008df2:	5cd3      	ldrb	r3, [r2, r3]
 8008df4:	f003 031f 	and.w	r3, r3, #31
 8008df8:	fa21 f303 	lsr.w	r3, r1, r3
 8008dfc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008dfe:	4b0e      	ldr	r3, [pc, #56]	; (8008e38 <HAL_RCC_ClockConfig+0x358>)
 8008e00:	699b      	ldr	r3, [r3, #24]
 8008e02:	f003 030f 	and.w	r3, r3, #15
 8008e06:	4a0d      	ldr	r2, [pc, #52]	; (8008e3c <HAL_RCC_ClockConfig+0x35c>)
 8008e08:	5cd3      	ldrb	r3, [r2, r3]
 8008e0a:	f003 031f 	and.w	r3, r3, #31
 8008e0e:	693a      	ldr	r2, [r7, #16]
 8008e10:	fa22 f303 	lsr.w	r3, r2, r3
 8008e14:	4a0a      	ldr	r2, [pc, #40]	; (8008e40 <HAL_RCC_ClockConfig+0x360>)
 8008e16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008e18:	4a0a      	ldr	r2, [pc, #40]	; (8008e44 <HAL_RCC_ClockConfig+0x364>)
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008e1e:	4b0a      	ldr	r3, [pc, #40]	; (8008e48 <HAL_RCC_ClockConfig+0x368>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7f8 fe42 	bl	8001aac <HAL_InitTick>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3718      	adds	r7, #24
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	58024400 	.word	0x58024400
 8008e3c:	0801abfc 	.word	0x0801abfc
 8008e40:	24000010 	.word	0x24000010
 8008e44:	2400000c 	.word	0x2400000c
 8008e48:	24000014 	.word	0x24000014

08008e4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b089      	sub	sp, #36	; 0x24
 8008e50:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008e52:	4baf      	ldr	r3, [pc, #700]	; (8009110 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008e54:	691b      	ldr	r3, [r3, #16]
 8008e56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e5a:	2b18      	cmp	r3, #24
 8008e5c:	f200 814e 	bhi.w	80090fc <HAL_RCC_GetSysClockFreq+0x2b0>
 8008e60:	a201      	add	r2, pc, #4	; (adr r2, 8008e68 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e66:	bf00      	nop
 8008e68:	08008ecd 	.word	0x08008ecd
 8008e6c:	080090fd 	.word	0x080090fd
 8008e70:	080090fd 	.word	0x080090fd
 8008e74:	080090fd 	.word	0x080090fd
 8008e78:	080090fd 	.word	0x080090fd
 8008e7c:	080090fd 	.word	0x080090fd
 8008e80:	080090fd 	.word	0x080090fd
 8008e84:	080090fd 	.word	0x080090fd
 8008e88:	08008ef3 	.word	0x08008ef3
 8008e8c:	080090fd 	.word	0x080090fd
 8008e90:	080090fd 	.word	0x080090fd
 8008e94:	080090fd 	.word	0x080090fd
 8008e98:	080090fd 	.word	0x080090fd
 8008e9c:	080090fd 	.word	0x080090fd
 8008ea0:	080090fd 	.word	0x080090fd
 8008ea4:	080090fd 	.word	0x080090fd
 8008ea8:	08008ef9 	.word	0x08008ef9
 8008eac:	080090fd 	.word	0x080090fd
 8008eb0:	080090fd 	.word	0x080090fd
 8008eb4:	080090fd 	.word	0x080090fd
 8008eb8:	080090fd 	.word	0x080090fd
 8008ebc:	080090fd 	.word	0x080090fd
 8008ec0:	080090fd 	.word	0x080090fd
 8008ec4:	080090fd 	.word	0x080090fd
 8008ec8:	08008eff 	.word	0x08008eff
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ecc:	4b90      	ldr	r3, [pc, #576]	; (8009110 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f003 0320 	and.w	r3, r3, #32
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d009      	beq.n	8008eec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ed8:	4b8d      	ldr	r3, [pc, #564]	; (8009110 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	08db      	lsrs	r3, r3, #3
 8008ede:	f003 0303 	and.w	r3, r3, #3
 8008ee2:	4a8c      	ldr	r2, [pc, #560]	; (8009114 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8008ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ee8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008eea:	e10a      	b.n	8009102 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008eec:	4b89      	ldr	r3, [pc, #548]	; (8009114 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8008eee:	61bb      	str	r3, [r7, #24]
    break;
 8008ef0:	e107      	b.n	8009102 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008ef2:	4b89      	ldr	r3, [pc, #548]	; (8009118 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8008ef4:	61bb      	str	r3, [r7, #24]
    break;
 8008ef6:	e104      	b.n	8009102 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008ef8:	4b88      	ldr	r3, [pc, #544]	; (800911c <HAL_RCC_GetSysClockFreq+0x2d0>)
 8008efa:	61bb      	str	r3, [r7, #24]
    break;
 8008efc:	e101      	b.n	8009102 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008efe:	4b84      	ldr	r3, [pc, #528]	; (8009110 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f02:	f003 0303 	and.w	r3, r3, #3
 8008f06:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008f08:	4b81      	ldr	r3, [pc, #516]	; (8009110 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f0c:	091b      	lsrs	r3, r3, #4
 8008f0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f12:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008f14:	4b7e      	ldr	r3, [pc, #504]	; (8009110 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f18:	f003 0301 	and.w	r3, r3, #1
 8008f1c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008f1e:	4b7c      	ldr	r3, [pc, #496]	; (8009110 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f22:	08db      	lsrs	r3, r3, #3
 8008f24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f28:	68fa      	ldr	r2, [r7, #12]
 8008f2a:	fb02 f303 	mul.w	r3, r2, r3
 8008f2e:	ee07 3a90 	vmov	s15, r3
 8008f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f36:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	f000 80da 	beq.w	80090f6 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d05a      	beq.n	8008ffe <HAL_RCC_GetSysClockFreq+0x1b2>
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d302      	bcc.n	8008f52 <HAL_RCC_GetSysClockFreq+0x106>
 8008f4c:	2b02      	cmp	r3, #2
 8008f4e:	d078      	beq.n	8009042 <HAL_RCC_GetSysClockFreq+0x1f6>
 8008f50:	e099      	b.n	8009086 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f52:	4b6f      	ldr	r3, [pc, #444]	; (8009110 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f003 0320 	and.w	r3, r3, #32
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d02d      	beq.n	8008fba <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f5e:	4b6c      	ldr	r3, [pc, #432]	; (8009110 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	08db      	lsrs	r3, r3, #3
 8008f64:	f003 0303 	and.w	r3, r3, #3
 8008f68:	4a6a      	ldr	r2, [pc, #424]	; (8009114 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8008f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f6e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	ee07 3a90 	vmov	s15, r3
 8008f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	ee07 3a90 	vmov	s15, r3
 8008f80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f88:	4b61      	ldr	r3, [pc, #388]	; (8009110 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f90:	ee07 3a90 	vmov	s15, r3
 8008f94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f98:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f9c:	eddf 5a60 	vldr	s11, [pc, #384]	; 8009120 <HAL_RCC_GetSysClockFreq+0x2d4>
 8008fa0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fa4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fa8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fb4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008fb8:	e087      	b.n	80090ca <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	ee07 3a90 	vmov	s15, r3
 8008fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fc4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8009124 <HAL_RCC_GetSysClockFreq+0x2d8>
 8008fc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fcc:	4b50      	ldr	r3, [pc, #320]	; (8009110 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fd4:	ee07 3a90 	vmov	s15, r3
 8008fd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fdc:	ed97 6a02 	vldr	s12, [r7, #8]
 8008fe0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8009120 <HAL_RCC_GetSysClockFreq+0x2d4>
 8008fe4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fe8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ff0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ff4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ff8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ffc:	e065      	b.n	80090ca <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	ee07 3a90 	vmov	s15, r3
 8009004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009008:	eddf 6a47 	vldr	s13, [pc, #284]	; 8009128 <HAL_RCC_GetSysClockFreq+0x2dc>
 800900c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009010:	4b3f      	ldr	r3, [pc, #252]	; (8009110 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009018:	ee07 3a90 	vmov	s15, r3
 800901c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009020:	ed97 6a02 	vldr	s12, [r7, #8]
 8009024:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8009120 <HAL_RCC_GetSysClockFreq+0x2d4>
 8009028:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800902c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009030:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009034:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800903c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009040:	e043      	b.n	80090ca <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	ee07 3a90 	vmov	s15, r3
 8009048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800904c:	eddf 6a37 	vldr	s13, [pc, #220]	; 800912c <HAL_RCC_GetSysClockFreq+0x2e0>
 8009050:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009054:	4b2e      	ldr	r3, [pc, #184]	; (8009110 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8009056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800905c:	ee07 3a90 	vmov	s15, r3
 8009060:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009064:	ed97 6a02 	vldr	s12, [r7, #8]
 8009068:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8009120 <HAL_RCC_GetSysClockFreq+0x2d4>
 800906c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009070:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009074:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009078:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800907c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009080:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009084:	e021      	b.n	80090ca <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	ee07 3a90 	vmov	s15, r3
 800908c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009090:	eddf 6a25 	vldr	s13, [pc, #148]	; 8009128 <HAL_RCC_GetSysClockFreq+0x2dc>
 8009094:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009098:	4b1d      	ldr	r3, [pc, #116]	; (8009110 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800909a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800909c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090a0:	ee07 3a90 	vmov	s15, r3
 80090a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80090ac:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8009120 <HAL_RCC_GetSysClockFreq+0x2d4>
 80090b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090c8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80090ca:	4b11      	ldr	r3, [pc, #68]	; (8009110 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80090cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ce:	0a5b      	lsrs	r3, r3, #9
 80090d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090d4:	3301      	adds	r3, #1
 80090d6:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	ee07 3a90 	vmov	s15, r3
 80090de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80090e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80090e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090ee:	ee17 3a90 	vmov	r3, s15
 80090f2:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80090f4:	e005      	b.n	8009102 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80090f6:	2300      	movs	r3, #0
 80090f8:	61bb      	str	r3, [r7, #24]
    break;
 80090fa:	e002      	b.n	8009102 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80090fc:	4b06      	ldr	r3, [pc, #24]	; (8009118 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80090fe:	61bb      	str	r3, [r7, #24]
    break;
 8009100:	bf00      	nop
  }

  return sysclockfreq;
 8009102:	69bb      	ldr	r3, [r7, #24]
}
 8009104:	4618      	mov	r0, r3
 8009106:	3724      	adds	r7, #36	; 0x24
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr
 8009110:	58024400 	.word	0x58024400
 8009114:	03d09000 	.word	0x03d09000
 8009118:	003d0900 	.word	0x003d0900
 800911c:	007a1200 	.word	0x007a1200
 8009120:	46000000 	.word	0x46000000
 8009124:	4c742400 	.word	0x4c742400
 8009128:	4a742400 	.word	0x4a742400
 800912c:	4af42400 	.word	0x4af42400

08009130 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009136:	f7ff fe89 	bl	8008e4c <HAL_RCC_GetSysClockFreq>
 800913a:	4601      	mov	r1, r0
 800913c:	4b10      	ldr	r3, [pc, #64]	; (8009180 <HAL_RCC_GetHCLKFreq+0x50>)
 800913e:	699b      	ldr	r3, [r3, #24]
 8009140:	0a1b      	lsrs	r3, r3, #8
 8009142:	f003 030f 	and.w	r3, r3, #15
 8009146:	4a0f      	ldr	r2, [pc, #60]	; (8009184 <HAL_RCC_GetHCLKFreq+0x54>)
 8009148:	5cd3      	ldrb	r3, [r2, r3]
 800914a:	f003 031f 	and.w	r3, r3, #31
 800914e:	fa21 f303 	lsr.w	r3, r1, r3
 8009152:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009154:	4b0a      	ldr	r3, [pc, #40]	; (8009180 <HAL_RCC_GetHCLKFreq+0x50>)
 8009156:	699b      	ldr	r3, [r3, #24]
 8009158:	f003 030f 	and.w	r3, r3, #15
 800915c:	4a09      	ldr	r2, [pc, #36]	; (8009184 <HAL_RCC_GetHCLKFreq+0x54>)
 800915e:	5cd3      	ldrb	r3, [r2, r3]
 8009160:	f003 031f 	and.w	r3, r3, #31
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	fa22 f303 	lsr.w	r3, r2, r3
 800916a:	4a07      	ldr	r2, [pc, #28]	; (8009188 <HAL_RCC_GetHCLKFreq+0x58>)
 800916c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800916e:	4a07      	ldr	r2, [pc, #28]	; (800918c <HAL_RCC_GetHCLKFreq+0x5c>)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009174:	4b04      	ldr	r3, [pc, #16]	; (8009188 <HAL_RCC_GetHCLKFreq+0x58>)
 8009176:	681b      	ldr	r3, [r3, #0]
}
 8009178:	4618      	mov	r0, r3
 800917a:	3708      	adds	r7, #8
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}
 8009180:	58024400 	.word	0x58024400
 8009184:	0801abfc 	.word	0x0801abfc
 8009188:	24000010 	.word	0x24000010
 800918c:	2400000c 	.word	0x2400000c

08009190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009194:	f7ff ffcc 	bl	8009130 <HAL_RCC_GetHCLKFreq>
 8009198:	4601      	mov	r1, r0
 800919a:	4b06      	ldr	r3, [pc, #24]	; (80091b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800919c:	69db      	ldr	r3, [r3, #28]
 800919e:	091b      	lsrs	r3, r3, #4
 80091a0:	f003 0307 	and.w	r3, r3, #7
 80091a4:	4a04      	ldr	r2, [pc, #16]	; (80091b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80091a6:	5cd3      	ldrb	r3, [r2, r3]
 80091a8:	f003 031f 	and.w	r3, r3, #31
 80091ac:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	58024400 	.word	0x58024400
 80091b8:	0801abfc 	.word	0x0801abfc

080091bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80091c0:	f7ff ffb6 	bl	8009130 <HAL_RCC_GetHCLKFreq>
 80091c4:	4601      	mov	r1, r0
 80091c6:	4b06      	ldr	r3, [pc, #24]	; (80091e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80091c8:	69db      	ldr	r3, [r3, #28]
 80091ca:	0a1b      	lsrs	r3, r3, #8
 80091cc:	f003 0307 	and.w	r3, r3, #7
 80091d0:	4a04      	ldr	r2, [pc, #16]	; (80091e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80091d2:	5cd3      	ldrb	r3, [r2, r3]
 80091d4:	f003 031f 	and.w	r3, r3, #31
 80091d8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80091dc:	4618      	mov	r0, r3
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	58024400 	.word	0x58024400
 80091e4:	0801abfc 	.word	0x0801abfc

080091e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b086      	sub	sp, #24
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80091f0:	2300      	movs	r3, #0
 80091f2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80091f4:	2300      	movs	r3, #0
 80091f6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009200:	2b00      	cmp	r3, #0
 8009202:	d03d      	beq.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009208:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800920c:	d013      	beq.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800920e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009212:	d802      	bhi.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8009214:	2b00      	cmp	r3, #0
 8009216:	d007      	beq.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8009218:	e01f      	b.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800921a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800921e:	d013      	beq.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8009220:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009224:	d01c      	beq.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8009226:	e018      	b.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009228:	4baf      	ldr	r3, [pc, #700]	; (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800922a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800922c:	4aae      	ldr	r2, [pc, #696]	; (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800922e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009232:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009234:	e015      	b.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	3304      	adds	r3, #4
 800923a:	2102      	movs	r1, #2
 800923c:	4618      	mov	r0, r3
 800923e:	f001 fd23 	bl	800ac88 <RCCEx_PLL2_Config>
 8009242:	4603      	mov	r3, r0
 8009244:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009246:	e00c      	b.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	3324      	adds	r3, #36	; 0x24
 800924c:	2102      	movs	r1, #2
 800924e:	4618      	mov	r0, r3
 8009250:	f001 fdcc 	bl	800adec <RCCEx_PLL3_Config>
 8009254:	4603      	mov	r3, r0
 8009256:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009258:	e003      	b.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800925a:	2301      	movs	r3, #1
 800925c:	75fb      	strb	r3, [r7, #23]
      break;
 800925e:	e000      	b.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8009260:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009262:	7dfb      	ldrb	r3, [r7, #23]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d109      	bne.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009268:	4b9f      	ldr	r3, [pc, #636]	; (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800926a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800926c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009274:	499c      	ldr	r1, [pc, #624]	; (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009276:	4313      	orrs	r3, r2
 8009278:	650b      	str	r3, [r1, #80]	; 0x50
 800927a:	e001      	b.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800927c:	7dfb      	ldrb	r3, [r7, #23]
 800927e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009288:	2b00      	cmp	r3, #0
 800928a:	d03d      	beq.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009290:	2b04      	cmp	r3, #4
 8009292:	d826      	bhi.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8009294:	a201      	add	r2, pc, #4	; (adr r2, 800929c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8009296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800929a:	bf00      	nop
 800929c:	080092b1 	.word	0x080092b1
 80092a0:	080092bf 	.word	0x080092bf
 80092a4:	080092d1 	.word	0x080092d1
 80092a8:	080092e9 	.word	0x080092e9
 80092ac:	080092e9 	.word	0x080092e9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092b0:	4b8d      	ldr	r3, [pc, #564]	; (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80092b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b4:	4a8c      	ldr	r2, [pc, #560]	; (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80092b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80092bc:	e015      	b.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	3304      	adds	r3, #4
 80092c2:	2100      	movs	r1, #0
 80092c4:	4618      	mov	r0, r3
 80092c6:	f001 fcdf 	bl	800ac88 <RCCEx_PLL2_Config>
 80092ca:	4603      	mov	r3, r0
 80092cc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80092ce:	e00c      	b.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	3324      	adds	r3, #36	; 0x24
 80092d4:	2100      	movs	r1, #0
 80092d6:	4618      	mov	r0, r3
 80092d8:	f001 fd88 	bl	800adec <RCCEx_PLL3_Config>
 80092dc:	4603      	mov	r3, r0
 80092de:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80092e0:	e003      	b.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	75fb      	strb	r3, [r7, #23]
      break;
 80092e6:	e000      	b.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80092e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092ea:	7dfb      	ldrb	r3, [r7, #23]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d109      	bne.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80092f0:	4b7d      	ldr	r3, [pc, #500]	; (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80092f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092f4:	f023 0207 	bic.w	r2, r3, #7
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092fc:	497a      	ldr	r1, [pc, #488]	; (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80092fe:	4313      	orrs	r3, r2
 8009300:	650b      	str	r3, [r1, #80]	; 0x50
 8009302:	e001      	b.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009304:	7dfb      	ldrb	r3, [r7, #23]
 8009306:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009310:	2b00      	cmp	r3, #0
 8009312:	d03e      	beq.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009318:	2b80      	cmp	r3, #128	; 0x80
 800931a:	d01c      	beq.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800931c:	2b80      	cmp	r3, #128	; 0x80
 800931e:	d804      	bhi.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8009320:	2b00      	cmp	r3, #0
 8009322:	d008      	beq.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8009324:	2b40      	cmp	r3, #64	; 0x40
 8009326:	d00d      	beq.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8009328:	e01e      	b.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800932a:	2bc0      	cmp	r3, #192	; 0xc0
 800932c:	d01f      	beq.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x186>
 800932e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009332:	d01e      	beq.n	8009372 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8009334:	e018      	b.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009336:	4b6c      	ldr	r3, [pc, #432]	; (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800933a:	4a6b      	ldr	r2, [pc, #428]	; (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800933c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009340:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009342:	e017      	b.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	3304      	adds	r3, #4
 8009348:	2100      	movs	r1, #0
 800934a:	4618      	mov	r0, r3
 800934c:	f001 fc9c 	bl	800ac88 <RCCEx_PLL2_Config>
 8009350:	4603      	mov	r3, r0
 8009352:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009354:	e00e      	b.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	3324      	adds	r3, #36	; 0x24
 800935a:	2100      	movs	r1, #0
 800935c:	4618      	mov	r0, r3
 800935e:	f001 fd45 	bl	800adec <RCCEx_PLL3_Config>
 8009362:	4603      	mov	r3, r0
 8009364:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009366:	e005      	b.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009368:	2301      	movs	r3, #1
 800936a:	75fb      	strb	r3, [r7, #23]
      break;
 800936c:	e002      	b.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800936e:	bf00      	nop
 8009370:	e000      	b.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8009372:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009374:	7dfb      	ldrb	r3, [r7, #23]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d109      	bne.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800937a:	4b5b      	ldr	r3, [pc, #364]	; (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800937c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800937e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009386:	4958      	ldr	r1, [pc, #352]	; (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009388:	4313      	orrs	r3, r2
 800938a:	650b      	str	r3, [r1, #80]	; 0x50
 800938c:	e001      	b.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800938e:	7dfb      	ldrb	r3, [r7, #23]
 8009390:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800939a:	2b00      	cmp	r3, #0
 800939c:	d044      	beq.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80093a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80093a8:	d01f      	beq.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0x202>
 80093aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80093ae:	d805      	bhi.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d00a      	beq.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80093b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80093b8:	d00e      	beq.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80093ba:	e01f      	b.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x214>
 80093bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80093c0:	d01f      	beq.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80093c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80093c6:	d01e      	beq.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80093c8:	e018      	b.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093ca:	4b47      	ldr	r3, [pc, #284]	; (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80093cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ce:	4a46      	ldr	r2, [pc, #280]	; (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80093d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093d6:	e017      	b.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	3304      	adds	r3, #4
 80093dc:	2100      	movs	r1, #0
 80093de:	4618      	mov	r0, r3
 80093e0:	f001 fc52 	bl	800ac88 <RCCEx_PLL2_Config>
 80093e4:	4603      	mov	r3, r0
 80093e6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80093e8:	e00e      	b.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	3324      	adds	r3, #36	; 0x24
 80093ee:	2100      	movs	r1, #0
 80093f0:	4618      	mov	r0, r3
 80093f2:	f001 fcfb 	bl	800adec <RCCEx_PLL3_Config>
 80093f6:	4603      	mov	r3, r0
 80093f8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093fa:	e005      	b.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	75fb      	strb	r3, [r7, #23]
      break;
 8009400:	e002      	b.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8009402:	bf00      	nop
 8009404:	e000      	b.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8009406:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009408:	7dfb      	ldrb	r3, [r7, #23]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d10a      	bne.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800940e:	4b36      	ldr	r3, [pc, #216]	; (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009412:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800941c:	4932      	ldr	r1, [pc, #200]	; (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800941e:	4313      	orrs	r3, r2
 8009420:	658b      	str	r3, [r1, #88]	; 0x58
 8009422:	e001      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009424:	7dfb      	ldrb	r3, [r7, #23]
 8009426:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009430:	2b00      	cmp	r3, #0
 8009432:	d044      	beq.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800943a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800943e:	d01f      	beq.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009440:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009444:	d805      	bhi.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8009446:	2b00      	cmp	r3, #0
 8009448:	d00a      	beq.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800944a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800944e:	d00e      	beq.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8009450:	e01f      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8009452:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009456:	d01f      	beq.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009458:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800945c:	d01e      	beq.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800945e:	e018      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009460:	4b21      	ldr	r3, [pc, #132]	; (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009464:	4a20      	ldr	r2, [pc, #128]	; (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8009466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800946a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800946c:	e017      	b.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	3304      	adds	r3, #4
 8009472:	2100      	movs	r1, #0
 8009474:	4618      	mov	r0, r3
 8009476:	f001 fc07 	bl	800ac88 <RCCEx_PLL2_Config>
 800947a:	4603      	mov	r3, r0
 800947c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800947e:	e00e      	b.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	3324      	adds	r3, #36	; 0x24
 8009484:	2100      	movs	r1, #0
 8009486:	4618      	mov	r0, r3
 8009488:	f001 fcb0 	bl	800adec <RCCEx_PLL3_Config>
 800948c:	4603      	mov	r3, r0
 800948e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009490:	e005      	b.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	75fb      	strb	r3, [r7, #23]
      break;
 8009496:	e002      	b.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8009498:	bf00      	nop
 800949a:	e000      	b.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800949c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800949e:	7dfb      	ldrb	r3, [r7, #23]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d10a      	bne.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80094a4:	4b10      	ldr	r3, [pc, #64]	; (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80094a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094a8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80094b2:	490d      	ldr	r1, [pc, #52]	; (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80094b4:	4313      	orrs	r3, r2
 80094b6:	658b      	str	r3, [r1, #88]	; 0x58
 80094b8:	e001      	b.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094ba:	7dfb      	ldrb	r3, [r7, #23]
 80094bc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d035      	beq.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094ce:	2b10      	cmp	r3, #16
 80094d0:	d00c      	beq.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x304>
 80094d2:	2b10      	cmp	r3, #16
 80094d4:	d802      	bhi.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d01b      	beq.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80094da:	e017      	b.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x324>
 80094dc:	2b20      	cmp	r3, #32
 80094de:	d00c      	beq.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x312>
 80094e0:	2b30      	cmp	r3, #48	; 0x30
 80094e2:	d018      	beq.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80094e4:	e012      	b.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x324>
 80094e6:	bf00      	nop
 80094e8:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094ec:	4baf      	ldr	r3, [pc, #700]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80094ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f0:	4aae      	ldr	r2, [pc, #696]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80094f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80094f8:	e00e      	b.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	3304      	adds	r3, #4
 80094fe:	2102      	movs	r1, #2
 8009500:	4618      	mov	r0, r3
 8009502:	f001 fbc1 	bl	800ac88 <RCCEx_PLL2_Config>
 8009506:	4603      	mov	r3, r0
 8009508:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800950a:	e005      	b.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800950c:	2301      	movs	r3, #1
 800950e:	75fb      	strb	r3, [r7, #23]
      break;
 8009510:	e002      	b.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8009512:	bf00      	nop
 8009514:	e000      	b.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8009516:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009518:	7dfb      	ldrb	r3, [r7, #23]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d109      	bne.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800951e:	4ba3      	ldr	r3, [pc, #652]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009522:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800952a:	49a0      	ldr	r1, [pc, #640]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800952c:	4313      	orrs	r3, r2
 800952e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009530:	e001      	b.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009532:	7dfb      	ldrb	r3, [r7, #23]
 8009534:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800953e:	2b00      	cmp	r3, #0
 8009540:	d042      	beq.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800954a:	d01f      	beq.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800954c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009550:	d805      	bhi.n	800955e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009552:	2b00      	cmp	r3, #0
 8009554:	d00a      	beq.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8009556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800955a:	d00e      	beq.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x392>
 800955c:	e01f      	b.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800955e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009562:	d01f      	beq.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8009564:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009568:	d01e      	beq.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800956a:	e018      	b.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800956c:	4b8f      	ldr	r3, [pc, #572]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800956e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009570:	4a8e      	ldr	r2, [pc, #568]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009576:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009578:	e017      	b.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	3304      	adds	r3, #4
 800957e:	2100      	movs	r1, #0
 8009580:	4618      	mov	r0, r3
 8009582:	f001 fb81 	bl	800ac88 <RCCEx_PLL2_Config>
 8009586:	4603      	mov	r3, r0
 8009588:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800958a:	e00e      	b.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	3324      	adds	r3, #36	; 0x24
 8009590:	2100      	movs	r1, #0
 8009592:	4618      	mov	r0, r3
 8009594:	f001 fc2a 	bl	800adec <RCCEx_PLL3_Config>
 8009598:	4603      	mov	r3, r0
 800959a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800959c:	e005      	b.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800959e:	2301      	movs	r3, #1
 80095a0:	75fb      	strb	r3, [r7, #23]
      break;
 80095a2:	e002      	b.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80095a4:	bf00      	nop
 80095a6:	e000      	b.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80095a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095aa:	7dfb      	ldrb	r3, [r7, #23]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d109      	bne.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80095b0:	4b7e      	ldr	r3, [pc, #504]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80095b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095b4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095bc:	497b      	ldr	r1, [pc, #492]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80095be:	4313      	orrs	r3, r2
 80095c0:	650b      	str	r3, [r1, #80]	; 0x50
 80095c2:	e001      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095c4:	7dfb      	ldrb	r3, [r7, #23]
 80095c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d042      	beq.n	800965a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095dc:	d01b      	beq.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80095de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095e2:	d805      	bhi.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d022      	beq.n	800962e <HAL_RCCEx_PeriphCLKConfig+0x446>
 80095e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095ec:	d00a      	beq.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80095ee:	e01b      	b.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80095f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80095f4:	d01d      	beq.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80095f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80095fa:	d01c      	beq.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80095fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009600:	d01b      	beq.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8009602:	e011      	b.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	3304      	adds	r3, #4
 8009608:	2101      	movs	r1, #1
 800960a:	4618      	mov	r0, r3
 800960c:	f001 fb3c 	bl	800ac88 <RCCEx_PLL2_Config>
 8009610:	4603      	mov	r3, r0
 8009612:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009614:	e012      	b.n	800963c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	3324      	adds	r3, #36	; 0x24
 800961a:	2101      	movs	r1, #1
 800961c:	4618      	mov	r0, r3
 800961e:	f001 fbe5 	bl	800adec <RCCEx_PLL3_Config>
 8009622:	4603      	mov	r3, r0
 8009624:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009626:	e009      	b.n	800963c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009628:	2301      	movs	r3, #1
 800962a:	75fb      	strb	r3, [r7, #23]
      break;
 800962c:	e006      	b.n	800963c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800962e:	bf00      	nop
 8009630:	e004      	b.n	800963c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8009632:	bf00      	nop
 8009634:	e002      	b.n	800963c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8009636:	bf00      	nop
 8009638:	e000      	b.n	800963c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800963a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800963c:	7dfb      	ldrb	r3, [r7, #23]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d109      	bne.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009642:	4b5a      	ldr	r3, [pc, #360]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009646:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800964e:	4957      	ldr	r1, [pc, #348]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009650:	4313      	orrs	r3, r2
 8009652:	650b      	str	r3, [r1, #80]	; 0x50
 8009654:	e001      	b.n	800965a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009656:	7dfb      	ldrb	r3, [r7, #23]
 8009658:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009662:	2b00      	cmp	r3, #0
 8009664:	d044      	beq.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800966c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009670:	d01b      	beq.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8009672:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009676:	d805      	bhi.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8009678:	2b00      	cmp	r3, #0
 800967a:	d022      	beq.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800967c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009680:	d00a      	beq.n	8009698 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8009682:	e01b      	b.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8009684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009688:	d01d      	beq.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800968a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800968e:	d01c      	beq.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8009690:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009694:	d01b      	beq.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009696:	e011      	b.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	3304      	adds	r3, #4
 800969c:	2101      	movs	r1, #1
 800969e:	4618      	mov	r0, r3
 80096a0:	f001 faf2 	bl	800ac88 <RCCEx_PLL2_Config>
 80096a4:	4603      	mov	r3, r0
 80096a6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80096a8:	e012      	b.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	3324      	adds	r3, #36	; 0x24
 80096ae:	2101      	movs	r1, #1
 80096b0:	4618      	mov	r0, r3
 80096b2:	f001 fb9b 	bl	800adec <RCCEx_PLL3_Config>
 80096b6:	4603      	mov	r3, r0
 80096b8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80096ba:	e009      	b.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80096bc:	2301      	movs	r3, #1
 80096be:	75fb      	strb	r3, [r7, #23]
      break;
 80096c0:	e006      	b.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80096c2:	bf00      	nop
 80096c4:	e004      	b.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80096c6:	bf00      	nop
 80096c8:	e002      	b.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80096ca:	bf00      	nop
 80096cc:	e000      	b.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80096ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096d0:	7dfb      	ldrb	r3, [r7, #23]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d10a      	bne.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80096d6:	4b35      	ldr	r3, [pc, #212]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80096d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096da:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80096e4:	4931      	ldr	r1, [pc, #196]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80096e6:	4313      	orrs	r3, r2
 80096e8:	658b      	str	r3, [r1, #88]	; 0x58
 80096ea:	e001      	b.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096ec:	7dfb      	ldrb	r3, [r7, #23]
 80096ee:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d02d      	beq.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009700:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009704:	d005      	beq.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8009706:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800970a:	d009      	beq.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x538>
 800970c:	2b00      	cmp	r3, #0
 800970e:	d013      	beq.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8009710:	e00f      	b.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009712:	4b26      	ldr	r3, [pc, #152]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009716:	4a25      	ldr	r2, [pc, #148]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800971c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800971e:	e00c      	b.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	3304      	adds	r3, #4
 8009724:	2101      	movs	r1, #1
 8009726:	4618      	mov	r0, r3
 8009728:	f001 faae 	bl	800ac88 <RCCEx_PLL2_Config>
 800972c:	4603      	mov	r3, r0
 800972e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009730:	e003      	b.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009732:	2301      	movs	r3, #1
 8009734:	75fb      	strb	r3, [r7, #23]
      break;
 8009736:	e000      	b.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8009738:	bf00      	nop
    }

    if(ret == HAL_OK)
 800973a:	7dfb      	ldrb	r3, [r7, #23]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d109      	bne.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009740:	4b1a      	ldr	r3, [pc, #104]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009744:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800974c:	4917      	ldr	r1, [pc, #92]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800974e:	4313      	orrs	r3, r2
 8009750:	650b      	str	r3, [r1, #80]	; 0x50
 8009752:	e001      	b.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009754:	7dfb      	ldrb	r3, [r7, #23]
 8009756:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009760:	2b00      	cmp	r3, #0
 8009762:	d035      	beq.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009768:	2b03      	cmp	r3, #3
 800976a:	d81b      	bhi.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800976c:	a201      	add	r2, pc, #4	; (adr r2, 8009774 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800976e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009772:	bf00      	nop
 8009774:	080097b1 	.word	0x080097b1
 8009778:	08009785 	.word	0x08009785
 800977c:	08009793 	.word	0x08009793
 8009780:	080097b1 	.word	0x080097b1
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009784:	4b09      	ldr	r3, [pc, #36]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009788:	4a08      	ldr	r2, [pc, #32]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800978a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800978e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009790:	e00f      	b.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	3304      	adds	r3, #4
 8009796:	2102      	movs	r1, #2
 8009798:	4618      	mov	r0, r3
 800979a:	f001 fa75 	bl	800ac88 <RCCEx_PLL2_Config>
 800979e:	4603      	mov	r3, r0
 80097a0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80097a2:	e006      	b.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80097a4:	2301      	movs	r3, #1
 80097a6:	75fb      	strb	r3, [r7, #23]
      break;
 80097a8:	e003      	b.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80097aa:	bf00      	nop
 80097ac:	58024400 	.word	0x58024400
      break;
 80097b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097b2:	7dfb      	ldrb	r3, [r7, #23]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d109      	bne.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80097b8:	4bba      	ldr	r3, [pc, #744]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80097ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097bc:	f023 0203 	bic.w	r2, r3, #3
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097c4:	49b7      	ldr	r1, [pc, #732]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80097c6:	4313      	orrs	r3, r2
 80097c8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80097ca:	e001      	b.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097cc:	7dfb      	ldrb	r3, [r7, #23]
 80097ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097d8:	2b00      	cmp	r3, #0
 80097da:	f000 8086 	beq.w	80098ea <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80097de:	4bb2      	ldr	r3, [pc, #712]	; (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4ab1      	ldr	r2, [pc, #708]	; (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80097e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80097ea:	f7f8 f9a9 	bl	8001b40 <HAL_GetTick>
 80097ee:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80097f0:	e009      	b.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80097f2:	f7f8 f9a5 	bl	8001b40 <HAL_GetTick>
 80097f6:	4602      	mov	r2, r0
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	1ad3      	subs	r3, r2, r3
 80097fc:	2b64      	cmp	r3, #100	; 0x64
 80097fe:	d902      	bls.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8009800:	2303      	movs	r3, #3
 8009802:	75fb      	strb	r3, [r7, #23]
        break;
 8009804:	e005      	b.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009806:	4ba8      	ldr	r3, [pc, #672]	; (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800980e:	2b00      	cmp	r3, #0
 8009810:	d0ef      	beq.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8009812:	7dfb      	ldrb	r3, [r7, #23]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d166      	bne.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009818:	4ba2      	ldr	r3, [pc, #648]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800981a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009822:	4053      	eors	r3, r2
 8009824:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009828:	2b00      	cmp	r3, #0
 800982a:	d013      	beq.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800982c:	4b9d      	ldr	r3, [pc, #628]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800982e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009834:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009836:	4b9b      	ldr	r3, [pc, #620]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800983a:	4a9a      	ldr	r2, [pc, #616]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800983c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009840:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009842:	4b98      	ldr	r3, [pc, #608]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009846:	4a97      	ldr	r2, [pc, #604]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800984c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800984e:	4a95      	ldr	r2, [pc, #596]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800985a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800985e:	d115      	bne.n	800988c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009860:	f7f8 f96e 	bl	8001b40 <HAL_GetTick>
 8009864:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009866:	e00b      	b.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009868:	f7f8 f96a 	bl	8001b40 <HAL_GetTick>
 800986c:	4602      	mov	r2, r0
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	1ad3      	subs	r3, r2, r3
 8009872:	f241 3288 	movw	r2, #5000	; 0x1388
 8009876:	4293      	cmp	r3, r2
 8009878:	d902      	bls.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800987a:	2303      	movs	r3, #3
 800987c:	75fb      	strb	r3, [r7, #23]
            break;
 800987e:	e005      	b.n	800988c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009880:	4b88      	ldr	r3, [pc, #544]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009884:	f003 0302 	and.w	r3, r3, #2
 8009888:	2b00      	cmp	r3, #0
 800988a:	d0ed      	beq.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 800988c:	7dfb      	ldrb	r3, [r7, #23]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d126      	bne.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009898:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800989c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098a0:	d10d      	bne.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80098a2:	4b80      	ldr	r3, [pc, #512]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80098a4:	691b      	ldr	r3, [r3, #16]
 80098a6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80098b0:	0919      	lsrs	r1, r3, #4
 80098b2:	4b7e      	ldr	r3, [pc, #504]	; (8009aac <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80098b4:	400b      	ands	r3, r1
 80098b6:	497b      	ldr	r1, [pc, #492]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80098b8:	4313      	orrs	r3, r2
 80098ba:	610b      	str	r3, [r1, #16]
 80098bc:	e005      	b.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80098be:	4b79      	ldr	r3, [pc, #484]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80098c0:	691b      	ldr	r3, [r3, #16]
 80098c2:	4a78      	ldr	r2, [pc, #480]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80098c4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80098c8:	6113      	str	r3, [r2, #16]
 80098ca:	4b76      	ldr	r3, [pc, #472]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80098cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80098d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80098d8:	4972      	ldr	r1, [pc, #456]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80098da:	4313      	orrs	r3, r2
 80098dc:	670b      	str	r3, [r1, #112]	; 0x70
 80098de:	e004      	b.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80098e0:	7dfb      	ldrb	r3, [r7, #23]
 80098e2:	75bb      	strb	r3, [r7, #22]
 80098e4:	e001      	b.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098e6:	7dfb      	ldrb	r3, [r7, #23]
 80098e8:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f003 0301 	and.w	r3, r3, #1
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d07d      	beq.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098fa:	2b28      	cmp	r3, #40	; 0x28
 80098fc:	d866      	bhi.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80098fe:	a201      	add	r2, pc, #4	; (adr r2, 8009904 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8009900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009904:	080099d3 	.word	0x080099d3
 8009908:	080099cd 	.word	0x080099cd
 800990c:	080099cd 	.word	0x080099cd
 8009910:	080099cd 	.word	0x080099cd
 8009914:	080099cd 	.word	0x080099cd
 8009918:	080099cd 	.word	0x080099cd
 800991c:	080099cd 	.word	0x080099cd
 8009920:	080099cd 	.word	0x080099cd
 8009924:	080099a9 	.word	0x080099a9
 8009928:	080099cd 	.word	0x080099cd
 800992c:	080099cd 	.word	0x080099cd
 8009930:	080099cd 	.word	0x080099cd
 8009934:	080099cd 	.word	0x080099cd
 8009938:	080099cd 	.word	0x080099cd
 800993c:	080099cd 	.word	0x080099cd
 8009940:	080099cd 	.word	0x080099cd
 8009944:	080099bb 	.word	0x080099bb
 8009948:	080099cd 	.word	0x080099cd
 800994c:	080099cd 	.word	0x080099cd
 8009950:	080099cd 	.word	0x080099cd
 8009954:	080099cd 	.word	0x080099cd
 8009958:	080099cd 	.word	0x080099cd
 800995c:	080099cd 	.word	0x080099cd
 8009960:	080099cd 	.word	0x080099cd
 8009964:	080099d3 	.word	0x080099d3
 8009968:	080099cd 	.word	0x080099cd
 800996c:	080099cd 	.word	0x080099cd
 8009970:	080099cd 	.word	0x080099cd
 8009974:	080099cd 	.word	0x080099cd
 8009978:	080099cd 	.word	0x080099cd
 800997c:	080099cd 	.word	0x080099cd
 8009980:	080099cd 	.word	0x080099cd
 8009984:	080099d3 	.word	0x080099d3
 8009988:	080099cd 	.word	0x080099cd
 800998c:	080099cd 	.word	0x080099cd
 8009990:	080099cd 	.word	0x080099cd
 8009994:	080099cd 	.word	0x080099cd
 8009998:	080099cd 	.word	0x080099cd
 800999c:	080099cd 	.word	0x080099cd
 80099a0:	080099cd 	.word	0x080099cd
 80099a4:	080099d3 	.word	0x080099d3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	3304      	adds	r3, #4
 80099ac:	2101      	movs	r1, #1
 80099ae:	4618      	mov	r0, r3
 80099b0:	f001 f96a 	bl	800ac88 <RCCEx_PLL2_Config>
 80099b4:	4603      	mov	r3, r0
 80099b6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80099b8:	e00c      	b.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	3324      	adds	r3, #36	; 0x24
 80099be:	2101      	movs	r1, #1
 80099c0:	4618      	mov	r0, r3
 80099c2:	f001 fa13 	bl	800adec <RCCEx_PLL3_Config>
 80099c6:	4603      	mov	r3, r0
 80099c8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80099ca:	e003      	b.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099cc:	2301      	movs	r3, #1
 80099ce:	75fb      	strb	r3, [r7, #23]
      break;
 80099d0:	e000      	b.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80099d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099d4:	7dfb      	ldrb	r3, [r7, #23]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d109      	bne.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80099da:	4b32      	ldr	r3, [pc, #200]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80099dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099de:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099e6:	492f      	ldr	r1, [pc, #188]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80099e8:	4313      	orrs	r3, r2
 80099ea:	654b      	str	r3, [r1, #84]	; 0x54
 80099ec:	e001      	b.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099ee:	7dfb      	ldrb	r3, [r7, #23]
 80099f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f003 0302 	and.w	r3, r3, #2
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d037      	beq.n	8009a6e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a02:	2b05      	cmp	r3, #5
 8009a04:	d820      	bhi.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8009a06:	a201      	add	r2, pc, #4	; (adr r2, 8009a0c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a0c:	08009a4f 	.word	0x08009a4f
 8009a10:	08009a25 	.word	0x08009a25
 8009a14:	08009a37 	.word	0x08009a37
 8009a18:	08009a4f 	.word	0x08009a4f
 8009a1c:	08009a4f 	.word	0x08009a4f
 8009a20:	08009a4f 	.word	0x08009a4f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	3304      	adds	r3, #4
 8009a28:	2101      	movs	r1, #1
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f001 f92c 	bl	800ac88 <RCCEx_PLL2_Config>
 8009a30:	4603      	mov	r3, r0
 8009a32:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009a34:	e00c      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	3324      	adds	r3, #36	; 0x24
 8009a3a:	2101      	movs	r1, #1
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f001 f9d5 	bl	800adec <RCCEx_PLL3_Config>
 8009a42:	4603      	mov	r3, r0
 8009a44:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009a46:	e003      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	75fb      	strb	r3, [r7, #23]
      break;
 8009a4c:	e000      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8009a4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a50:	7dfb      	ldrb	r3, [r7, #23]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d109      	bne.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009a56:	4b13      	ldr	r3, [pc, #76]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a5a:	f023 0207 	bic.w	r2, r3, #7
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a62:	4910      	ldr	r1, [pc, #64]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009a64:	4313      	orrs	r3, r2
 8009a66:	654b      	str	r3, [r1, #84]	; 0x54
 8009a68:	e001      	b.n	8009a6e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a6a:	7dfb      	ldrb	r3, [r7, #23]
 8009a6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f003 0304 	and.w	r3, r3, #4
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d040      	beq.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a80:	2b05      	cmp	r3, #5
 8009a82:	d827      	bhi.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8009a84:	a201      	add	r2, pc, #4	; (adr r2, 8009a8c <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8009a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a8a:	bf00      	nop
 8009a8c:	08009adb 	.word	0x08009adb
 8009a90:	08009ab1 	.word	0x08009ab1
 8009a94:	08009ac3 	.word	0x08009ac3
 8009a98:	08009adb 	.word	0x08009adb
 8009a9c:	08009adb 	.word	0x08009adb
 8009aa0:	08009adb 	.word	0x08009adb
 8009aa4:	58024400 	.word	0x58024400
 8009aa8:	58024800 	.word	0x58024800
 8009aac:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	3304      	adds	r3, #4
 8009ab4:	2101      	movs	r1, #1
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f001 f8e6 	bl	800ac88 <RCCEx_PLL2_Config>
 8009abc:	4603      	mov	r3, r0
 8009abe:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009ac0:	e00c      	b.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	3324      	adds	r3, #36	; 0x24
 8009ac6:	2101      	movs	r1, #1
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f001 f98f 	bl	800adec <RCCEx_PLL3_Config>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009ad2:	e003      	b.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ad8:	e000      	b.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8009ada:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009adc:	7dfb      	ldrb	r3, [r7, #23]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d10a      	bne.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009ae2:	4bb2      	ldr	r3, [pc, #712]	; (8009dac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ae6:	f023 0207 	bic.w	r2, r3, #7
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009af0:	49ae      	ldr	r1, [pc, #696]	; (8009dac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009af2:	4313      	orrs	r3, r2
 8009af4:	658b      	str	r3, [r1, #88]	; 0x58
 8009af6:	e001      	b.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009af8:	7dfb      	ldrb	r3, [r7, #23]
 8009afa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f003 0320 	and.w	r3, r3, #32
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d044      	beq.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b12:	d01b      	beq.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0x964>
 8009b14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b18:	d805      	bhi.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d022      	beq.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8009b1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b22:	d00a      	beq.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8009b24:	e01b      	b.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8009b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b2a:	d01d      	beq.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8009b2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b30:	d01c      	beq.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8009b32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b36:	d01b      	beq.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8009b38:	e011      	b.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	3304      	adds	r3, #4
 8009b3e:	2100      	movs	r1, #0
 8009b40:	4618      	mov	r0, r3
 8009b42:	f001 f8a1 	bl	800ac88 <RCCEx_PLL2_Config>
 8009b46:	4603      	mov	r3, r0
 8009b48:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009b4a:	e012      	b.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	3324      	adds	r3, #36	; 0x24
 8009b50:	2102      	movs	r1, #2
 8009b52:	4618      	mov	r0, r3
 8009b54:	f001 f94a 	bl	800adec <RCCEx_PLL3_Config>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009b5c:	e009      	b.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	75fb      	strb	r3, [r7, #23]
      break;
 8009b62:	e006      	b.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8009b64:	bf00      	nop
 8009b66:	e004      	b.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8009b68:	bf00      	nop
 8009b6a:	e002      	b.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8009b6c:	bf00      	nop
 8009b6e:	e000      	b.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8009b70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b72:	7dfb      	ldrb	r3, [r7, #23]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d10a      	bne.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009b78:	4b8c      	ldr	r3, [pc, #560]	; (8009dac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b7c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b86:	4989      	ldr	r1, [pc, #548]	; (8009dac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	654b      	str	r3, [r1, #84]	; 0x54
 8009b8c:	e001      	b.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b8e:	7dfb      	ldrb	r3, [r7, #23]
 8009b90:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d044      	beq.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009ba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ba8:	d01b      	beq.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8009baa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bae:	d805      	bhi.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d022      	beq.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8009bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bb8:	d00a      	beq.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8009bba:	e01b      	b.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8009bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bc0:	d01d      	beq.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8009bc2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009bc6:	d01c      	beq.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8009bc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009bcc:	d01b      	beq.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8009bce:	e011      	b.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	3304      	adds	r3, #4
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f001 f856 	bl	800ac88 <RCCEx_PLL2_Config>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009be0:	e012      	b.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	3324      	adds	r3, #36	; 0x24
 8009be6:	2102      	movs	r1, #2
 8009be8:	4618      	mov	r0, r3
 8009bea:	f001 f8ff 	bl	800adec <RCCEx_PLL3_Config>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009bf2:	e009      	b.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8009bf8:	e006      	b.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8009bfa:	bf00      	nop
 8009bfc:	e004      	b.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8009bfe:	bf00      	nop
 8009c00:	e002      	b.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8009c02:	bf00      	nop
 8009c04:	e000      	b.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8009c06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c08:	7dfb      	ldrb	r3, [r7, #23]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d10a      	bne.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009c0e:	4b67      	ldr	r3, [pc, #412]	; (8009dac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c12:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009c1c:	4963      	ldr	r1, [pc, #396]	; (8009dac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	658b      	str	r3, [r1, #88]	; 0x58
 8009c22:	e001      	b.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c24:	7dfb      	ldrb	r3, [r7, #23]
 8009c26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d044      	beq.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c3e:	d01b      	beq.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8009c40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c44:	d805      	bhi.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d022      	beq.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8009c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c4e:	d00a      	beq.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009c50:	e01b      	b.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8009c52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c56:	d01d      	beq.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8009c58:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009c5c:	d01c      	beq.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8009c5e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009c62:	d01b      	beq.n	8009c9c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8009c64:	e011      	b.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	3304      	adds	r3, #4
 8009c6a:	2100      	movs	r1, #0
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f001 f80b 	bl	800ac88 <RCCEx_PLL2_Config>
 8009c72:	4603      	mov	r3, r0
 8009c74:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009c76:	e012      	b.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	3324      	adds	r3, #36	; 0x24
 8009c7c:	2102      	movs	r1, #2
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f001 f8b4 	bl	800adec <RCCEx_PLL3_Config>
 8009c84:	4603      	mov	r3, r0
 8009c86:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009c88:	e009      	b.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	75fb      	strb	r3, [r7, #23]
      break;
 8009c8e:	e006      	b.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8009c90:	bf00      	nop
 8009c92:	e004      	b.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8009c94:	bf00      	nop
 8009c96:	e002      	b.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8009c98:	bf00      	nop
 8009c9a:	e000      	b.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8009c9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c9e:	7dfb      	ldrb	r3, [r7, #23]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d10a      	bne.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009ca4:	4b41      	ldr	r3, [pc, #260]	; (8009dac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ca8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009cb2:	493e      	ldr	r1, [pc, #248]	; (8009dac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	658b      	str	r3, [r1, #88]	; 0x58
 8009cb8:	e001      	b.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cba:	7dfb      	ldrb	r3, [r7, #23]
 8009cbc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f003 0308 	and.w	r3, r3, #8
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d01a      	beq.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009cd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cd4:	d10a      	bne.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	3324      	adds	r3, #36	; 0x24
 8009cda:	2102      	movs	r1, #2
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f001 f885 	bl	800adec <RCCEx_PLL3_Config>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d001      	beq.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009cec:	4b2f      	ldr	r3, [pc, #188]	; (8009dac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cf0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009cfa:	492c      	ldr	r1, [pc, #176]	; (8009dac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f003 0310 	and.w	r3, r3, #16
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d01a      	beq.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d16:	d10a      	bne.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	3324      	adds	r3, #36	; 0x24
 8009d1c:	2102      	movs	r1, #2
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f001 f864 	bl	800adec <RCCEx_PLL3_Config>
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d001      	beq.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009d2e:	4b1f      	ldr	r3, [pc, #124]	; (8009dac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d3c:	491b      	ldr	r1, [pc, #108]	; (8009dac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d032      	beq.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d58:	d00d      	beq.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8009d5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d5e:	d016      	beq.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d111      	bne.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	3304      	adds	r3, #4
 8009d68:	2100      	movs	r1, #0
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f000 ff8c 	bl	800ac88 <RCCEx_PLL2_Config>
 8009d70:	4603      	mov	r3, r0
 8009d72:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009d74:	e00c      	b.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	3324      	adds	r3, #36	; 0x24
 8009d7a:	2102      	movs	r1, #2
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f001 f835 	bl	800adec <RCCEx_PLL3_Config>
 8009d82:	4603      	mov	r3, r0
 8009d84:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009d86:	e003      	b.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	75fb      	strb	r3, [r7, #23]
      break;
 8009d8c:	e000      	b.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8009d8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d90:	7dfb      	ldrb	r3, [r7, #23]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d10c      	bne.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009d96:	4b05      	ldr	r3, [pc, #20]	; (8009dac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009da4:	4901      	ldr	r1, [pc, #4]	; (8009dac <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009da6:	4313      	orrs	r3, r2
 8009da8:	658b      	str	r3, [r1, #88]	; 0x58
 8009daa:	e003      	b.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8009dac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009db0:	7dfb      	ldrb	r3, [r7, #23]
 8009db2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d02f      	beq.n	8009e20 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009dc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009dca:	d00c      	beq.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009dcc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009dd0:	d015      	beq.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8009dd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009dd6:	d10f      	bne.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dd8:	4b71      	ldr	r3, [pc, #452]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ddc:	4a70      	ldr	r2, [pc, #448]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009dde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009de2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009de4:	e00c      	b.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	3324      	adds	r3, #36	; 0x24
 8009dea:	2101      	movs	r1, #1
 8009dec:	4618      	mov	r0, r3
 8009dee:	f000 fffd 	bl	800adec <RCCEx_PLL3_Config>
 8009df2:	4603      	mov	r3, r0
 8009df4:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009df6:	e003      	b.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009df8:	2301      	movs	r3, #1
 8009dfa:	75fb      	strb	r3, [r7, #23]
      break;
 8009dfc:	e000      	b.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8009dfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e00:	7dfb      	ldrb	r3, [r7, #23]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d10a      	bne.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009e06:	4b66      	ldr	r3, [pc, #408]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e14:	4962      	ldr	r1, [pc, #392]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009e16:	4313      	orrs	r3, r2
 8009e18:	654b      	str	r3, [r1, #84]	; 0x54
 8009e1a:	e001      	b.n	8009e20 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e1c:	7dfb      	ldrb	r3, [r7, #23]
 8009e1e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d029      	beq.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d003      	beq.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8009e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e38:	d007      	beq.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8009e3a:	e00f      	b.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e3c:	4b58      	ldr	r3, [pc, #352]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e40:	4a57      	ldr	r2, [pc, #348]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009e42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009e48:	e00b      	b.n	8009e62 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	3304      	adds	r3, #4
 8009e4e:	2102      	movs	r1, #2
 8009e50:	4618      	mov	r0, r3
 8009e52:	f000 ff19 	bl	800ac88 <RCCEx_PLL2_Config>
 8009e56:	4603      	mov	r3, r0
 8009e58:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009e5a:	e002      	b.n	8009e62 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	75fb      	strb	r3, [r7, #23]
      break;
 8009e60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e62:	7dfb      	ldrb	r3, [r7, #23]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d109      	bne.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009e68:	4b4d      	ldr	r3, [pc, #308]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e74:	494a      	ldr	r1, [pc, #296]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009e76:	4313      	orrs	r3, r2
 8009e78:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009e7a:	e001      	b.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e7c:	7dfb      	ldrb	r3, [r7, #23]
 8009e7e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d00a      	beq.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	3324      	adds	r3, #36	; 0x24
 8009e90:	2102      	movs	r1, #2
 8009e92:	4618      	mov	r0, r3
 8009e94:	f000 ffaa 	bl	800adec <RCCEx_PLL3_Config>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d001      	beq.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d02f      	beq.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009eb6:	d00c      	beq.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009eb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ebc:	d802      	bhi.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d011      	beq.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8009ec2:	e00d      	b.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8009ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ec8:	d00f      	beq.n	8009eea <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8009eca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ece:	d00e      	beq.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8009ed0:	e006      	b.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ed2:	4b33      	ldr	r3, [pc, #204]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed6:	4a32      	ldr	r2, [pc, #200]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009edc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009ede:	e007      	b.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ee4:	e004      	b.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8009ee6:	bf00      	nop
 8009ee8:	e002      	b.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8009eea:	bf00      	nop
 8009eec:	e000      	b.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8009eee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ef0:	7dfb      	ldrb	r3, [r7, #23]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d109      	bne.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009ef6:	4b2a      	ldr	r3, [pc, #168]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009efa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f02:	4927      	ldr	r1, [pc, #156]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009f04:	4313      	orrs	r3, r2
 8009f06:	654b      	str	r3, [r1, #84]	; 0x54
 8009f08:	e001      	b.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f0a:	7dfb      	ldrb	r3, [r7, #23]
 8009f0c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d008      	beq.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009f1a:	4b21      	ldr	r3, [pc, #132]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f26:	491e      	ldr	r1, [pc, #120]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d008      	beq.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009f38:	4b19      	ldr	r3, [pc, #100]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f3c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f44:	4916      	ldr	r1, [pc, #88]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009f46:	4313      	orrs	r3, r2
 8009f48:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d00d      	beq.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009f56:	4b12      	ldr	r3, [pc, #72]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009f58:	691b      	ldr	r3, [r3, #16]
 8009f5a:	4a11      	ldr	r2, [pc, #68]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009f5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009f60:	6113      	str	r3, [r2, #16]
 8009f62:	4b0f      	ldr	r3, [pc, #60]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009f64:	691a      	ldr	r2, [r3, #16]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009f6c:	490c      	ldr	r1, [pc, #48]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009f6e:	4313      	orrs	r3, r2
 8009f70:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	da08      	bge.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009f7a:	4b09      	ldr	r3, [pc, #36]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f86:	4906      	ldr	r1, [pc, #24]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8009f8c:	7dbb      	ldrb	r3, [r7, #22]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d101      	bne.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8009f92:	2300      	movs	r3, #0
 8009f94:	e000      	b.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8009f96:	2301      	movs	r3, #1
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3718      	adds	r7, #24
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	58024400 	.word	0x58024400

08009fa4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b090      	sub	sp, #64	; 0x40
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fb2:	d150      	bne.n	800a056 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8009fb4:	4ba1      	ldr	r3, [pc, #644]	; (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fb8:	f003 0307 	and.w	r3, r3, #7
 8009fbc:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc0:	2b04      	cmp	r3, #4
 8009fc2:	d844      	bhi.n	800a04e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8009fc4:	a201      	add	r2, pc, #4	; (adr r2, 8009fcc <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8009fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fca:	bf00      	nop
 8009fcc:	08009fe1 	.word	0x08009fe1
 8009fd0:	08009ff1 	.word	0x08009ff1
 8009fd4:	0800a001 	.word	0x0800a001
 8009fd8:	0800a049 	.word	0x0800a049
 8009fdc:	0800a011 	.word	0x0800a011
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f000 fd03 	bl	800a9f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009fee:	e241      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ff0:	f107 0318 	add.w	r3, r7, #24
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f000 fa63 	bl	800a4c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009ffa:	69bb      	ldr	r3, [r7, #24]
 8009ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ffe:	e239      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a000:	f107 030c 	add.w	r3, r7, #12
 800a004:	4618      	mov	r0, r3
 800a006:	f000 fba7 	bl	800a758 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a00e:	e231      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a010:	4b8a      	ldr	r3, [pc, #552]	; (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a014:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a018:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a01a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d102      	bne.n	800a026 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a020:	4b87      	ldr	r3, [pc, #540]	; (800a240 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a022:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a024:	e226      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a028:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a02c:	d102      	bne.n	800a034 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800a02e:	4b85      	ldr	r3, [pc, #532]	; (800a244 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a030:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a032:	e21f      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a036:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a03a:	d102      	bne.n	800a042 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 800a03c:	4b82      	ldr	r3, [pc, #520]	; (800a248 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a03e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a040:	e218      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a042:	2300      	movs	r3, #0
 800a044:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a046:	e215      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a048:	4b80      	ldr	r3, [pc, #512]	; (800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a04a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a04c:	e212      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800a04e:	2300      	movs	r3, #0
 800a050:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a052:	bf00      	nop
 800a054:	e20e      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a05c:	d14f      	bne.n	800a0fe <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a05e:	4b77      	ldr	r3, [pc, #476]	; (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a062:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a066:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06a:	2b80      	cmp	r3, #128	; 0x80
 800a06c:	d01c      	beq.n	800a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800a06e:	2b80      	cmp	r3, #128	; 0x80
 800a070:	d804      	bhi.n	800a07c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800a072:	2b00      	cmp	r3, #0
 800a074:	d008      	beq.n	800a088 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800a076:	2b40      	cmp	r3, #64	; 0x40
 800a078:	d00e      	beq.n	800a098 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800a07a:	e03c      	b.n	800a0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800a07c:	2bc0      	cmp	r3, #192	; 0xc0
 800a07e:	d037      	beq.n	800a0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800a080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a084:	d018      	beq.n	800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800a086:	e036      	b.n	800a0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a08c:	4618      	mov	r0, r3
 800a08e:	f000 fcaf 	bl	800a9f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a094:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a096:	e1ed      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a098:	f107 0318 	add.w	r3, r7, #24
 800a09c:	4618      	mov	r0, r3
 800a09e:	f000 fa0f 	bl	800a4c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a0a2:	69bb      	ldr	r3, [r7, #24]
 800a0a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0a6:	e1e5      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0a8:	f107 030c 	add.w	r3, r7, #12
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f000 fb53 	bl	800a758 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0b6:	e1dd      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a0b8:	4b60      	ldr	r3, [pc, #384]	; (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a0ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a0c0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a0c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d102      	bne.n	800a0ce <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a0c8:	4b5d      	ldr	r3, [pc, #372]	; (800a240 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a0cc:	e1d2      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a0ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a0d4:	d102      	bne.n	800a0dc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800a0d6:	4b5b      	ldr	r3, [pc, #364]	; (800a244 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a0d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0da:	e1cb      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a0dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0e2:	d102      	bne.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800a0e4:	4b58      	ldr	r3, [pc, #352]	; (800a248 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0e8:	e1c4      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0ee:	e1c1      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a0f0:	4b56      	ldr	r3, [pc, #344]	; (800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0f4:	e1be      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0fa:	bf00      	nop
 800a0fc:	e1ba      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a104:	d153      	bne.n	800a1ae <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a106:	4b4d      	ldr	r3, [pc, #308]	; (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a10a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a10e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a112:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a116:	d01f      	beq.n	800a158 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800a118:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a11c:	d805      	bhi.n	800a12a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d00a      	beq.n	800a138 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800a122:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a126:	d00f      	beq.n	800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800a128:	e03d      	b.n	800a1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800a12a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a12e:	d037      	beq.n	800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800a130:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a134:	d018      	beq.n	800a168 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800a136:	e036      	b.n	800a1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a13c:	4618      	mov	r0, r3
 800a13e:	f000 fc57 	bl	800a9f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a144:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a146:	e195      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a148:	f107 0318 	add.w	r3, r7, #24
 800a14c:	4618      	mov	r0, r3
 800a14e:	f000 f9b7 	bl	800a4c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a156:	e18d      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a158:	f107 030c 	add.w	r3, r7, #12
 800a15c:	4618      	mov	r0, r3
 800a15e:	f000 fafb 	bl	800a758 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a166:	e185      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a168:	4b34      	ldr	r3, [pc, #208]	; (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a16a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a16c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a170:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a174:	2b00      	cmp	r3, #0
 800a176:	d102      	bne.n	800a17e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a178:	4b31      	ldr	r3, [pc, #196]	; (800a240 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a17a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a17c:	e17a      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a17e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a180:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a184:	d102      	bne.n	800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800a186:	4b2f      	ldr	r3, [pc, #188]	; (800a244 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a188:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a18a:	e173      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a18c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a18e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a192:	d102      	bne.n	800a19a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 800a194:	4b2c      	ldr	r3, [pc, #176]	; (800a248 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a196:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a198:	e16c      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a19a:	2300      	movs	r3, #0
 800a19c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a19e:	e169      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a1a0:	4b2a      	ldr	r3, [pc, #168]	; (800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1a4:	e166      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1aa:	bf00      	nop
 800a1ac:	e162      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1b4:	d15d      	bne.n	800a272 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a1b6:	4b21      	ldr	r3, [pc, #132]	; (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a1b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1ba:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a1be:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1c6:	d01f      	beq.n	800a208 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a1c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1cc:	d805      	bhi.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d00a      	beq.n	800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800a1d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a1d6:	d00f      	beq.n	800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800a1d8:	e047      	b.n	800a26a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800a1da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a1de:	d041      	beq.n	800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800a1e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a1e4:	d018      	beq.n	800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800a1e6:	e040      	b.n	800a26a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f000 fbff 	bl	800a9f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1f6:	e13d      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1f8:	f107 0318 	add.w	r3, r7, #24
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f000 f95f 	bl	800a4c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a202:	69bb      	ldr	r3, [r7, #24]
 800a204:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a206:	e135      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a208:	f107 030c 	add.w	r3, r7, #12
 800a20c:	4618      	mov	r0, r3
 800a20e:	f000 faa3 	bl	800a758 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a216:	e12d      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a218:	4b08      	ldr	r3, [pc, #32]	; (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a21a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a21c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a220:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a224:	2b00      	cmp	r3, #0
 800a226:	d102      	bne.n	800a22e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a228:	4b05      	ldr	r3, [pc, #20]	; (800a240 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a22a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a22c:	e122      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a22e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a230:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a234:	d10c      	bne.n	800a250 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800a236:	4b03      	ldr	r3, [pc, #12]	; (800a244 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a238:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a23a:	e11b      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800a23c:	58024400 	.word	0x58024400
 800a240:	03d09000 	.word	0x03d09000
 800a244:	003d0900 	.word	0x003d0900
 800a248:	007a1200 	.word	0x007a1200
 800a24c:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a252:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a256:	d102      	bne.n	800a25e <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 800a258:	4b89      	ldr	r3, [pc, #548]	; (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a25a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a25c:	e10a      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a25e:	2300      	movs	r3, #0
 800a260:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a262:	e107      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a264:	4b87      	ldr	r3, [pc, #540]	; (800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800a266:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a268:	e104      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a26a:	2300      	movs	r3, #0
 800a26c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a26e:	bf00      	nop
 800a270:	e100      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a278:	d153      	bne.n	800a322 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a27a:	4b83      	ldr	r3, [pc, #524]	; (800a488 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a27c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a27e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a282:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a286:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a28a:	d01f      	beq.n	800a2cc <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800a28c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a290:	d805      	bhi.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800a292:	2b00      	cmp	r3, #0
 800a294:	d00a      	beq.n	800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800a296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a29a:	d00f      	beq.n	800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800a29c:	e03d      	b.n	800a31a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800a29e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a2a2:	d037      	beq.n	800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800a2a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a2a8:	d018      	beq.n	800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800a2aa:	e036      	b.n	800a31a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f000 fb9d 	bl	800a9f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2ba:	e0db      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2bc:	f107 0318 	add.w	r3, r7, #24
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f000 f8fd 	bl	800a4c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a2c6:	69bb      	ldr	r3, [r7, #24]
 800a2c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2ca:	e0d3      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2cc:	f107 030c 	add.w	r3, r7, #12
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f000 fa41 	bl	800a758 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2da:	e0cb      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a2dc:	4b6a      	ldr	r3, [pc, #424]	; (800a488 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a2de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a2e4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a2e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d102      	bne.n	800a2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a2ec:	4b67      	ldr	r3, [pc, #412]	; (800a48c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800a2ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a2f0:	e0c0      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a2f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a2f8:	d102      	bne.n	800a300 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800a2fa:	4b65      	ldr	r3, [pc, #404]	; (800a490 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800a2fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2fe:	e0b9      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a302:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a306:	d102      	bne.n	800a30e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 800a308:	4b5d      	ldr	r3, [pc, #372]	; (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a30a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a30c:	e0b2      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a30e:	2300      	movs	r3, #0
 800a310:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a312:	e0af      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a314:	4b5b      	ldr	r3, [pc, #364]	; (800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800a316:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a318:	e0ac      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800a31a:	2300      	movs	r3, #0
 800a31c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a31e:	bf00      	nop
 800a320:	e0a8      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a328:	d13d      	bne.n	800a3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a32a:	4b57      	ldr	r3, [pc, #348]	; (800a488 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a32c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a32e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a332:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a33a:	d00c      	beq.n	800a356 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a33c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a340:	d011      	beq.n	800a366 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a342:	2b00      	cmp	r3, #0
 800a344:	d12b      	bne.n	800a39e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a346:	f107 0318 	add.w	r3, r7, #24
 800a34a:	4618      	mov	r0, r3
 800a34c:	f000 f8b8 	bl	800a4c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a350:	69bb      	ldr	r3, [r7, #24]
 800a352:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a354:	e08e      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a356:	f107 030c 	add.w	r3, r7, #12
 800a35a:	4618      	mov	r0, r3
 800a35c:	f000 f9fc 	bl	800a758 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a364:	e086      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a366:	4b48      	ldr	r3, [pc, #288]	; (800a488 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a36a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a36e:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800a370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a372:	2b00      	cmp	r3, #0
 800a374:	d102      	bne.n	800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800a376:	4b45      	ldr	r3, [pc, #276]	; (800a48c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800a378:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800a37a:	e07b      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800a37c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a37e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a382:	d102      	bne.n	800a38a <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 800a384:	4b42      	ldr	r3, [pc, #264]	; (800a490 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800a386:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a388:	e074      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800a38a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a38c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a390:	d102      	bne.n	800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800a392:	4b3b      	ldr	r3, [pc, #236]	; (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a394:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a396:	e06d      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800a398:	2300      	movs	r3, #0
 800a39a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a39c:	e06a      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3a2:	bf00      	nop
 800a3a4:	e066      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3ac:	d11f      	bne.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a3ae:	4b36      	ldr	r3, [pc, #216]	; (800a488 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a3b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3b6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d003      	beq.n	800a3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a3be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3c2:	d008      	beq.n	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800a3c4:	e00f      	b.n	800a3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a3c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f000 fb10 	bl	800a9f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3d4:	e04e      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3d6:	f107 0318 	add.w	r3, r7, #24
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f000 f870 	bl	800a4c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a3e0:	6a3b      	ldr	r3, [r7, #32]
 800a3e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3e4:	e046      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3ea:	bf00      	nop
 800a3ec:	e042      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3f4:	d13c      	bne.n	800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a3f6:	4b24      	ldr	r3, [pc, #144]	; (800a488 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800a3f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3fa:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a3fe:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a402:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a406:	d01e      	beq.n	800a446 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 800a408:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a40c:	d805      	bhi.n	800a41a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d00d      	beq.n	800a42e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800a412:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a416:	d00e      	beq.n	800a436 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 800a418:	e026      	b.n	800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800a41a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a41e:	d01d      	beq.n	800a45c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800a420:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a424:	d01d      	beq.n	800a462 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800a426:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a42a:	d014      	beq.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800a42c:	e01c      	b.n	800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a42e:	f000 f831 	bl	800a494 <HAL_RCCEx_GetD3PCLK1Freq>
 800a432:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800a434:	e01e      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a436:	f107 0318 	add.w	r3, r7, #24
 800a43a:	4618      	mov	r0, r3
 800a43c:	f000 f840 	bl	800a4c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a440:	69fb      	ldr	r3, [r7, #28]
 800a442:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a444:	e016      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a446:	f107 030c 	add.w	r3, r7, #12
 800a44a:	4618      	mov	r0, r3
 800a44c:	f000 f984 	bl	800a758 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a454:	e00e      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800a456:	4b0d      	ldr	r3, [pc, #52]	; (800a48c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800a458:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a45a:	e00b      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 800a45c:	4b0c      	ldr	r3, [pc, #48]	; (800a490 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800a45e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a460:	e008      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800a462:	4b07      	ldr	r3, [pc, #28]	; (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800a464:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a466:	e005      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800a468:	2300      	movs	r3, #0
 800a46a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a46c:	bf00      	nop
 800a46e:	e001      	b.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 800a470:	2300      	movs	r3, #0
 800a472:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800a474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a476:	4618      	mov	r0, r3
 800a478:	3740      	adds	r7, #64	; 0x40
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop
 800a480:	007a1200 	.word	0x007a1200
 800a484:	00bb8000 	.word	0x00bb8000
 800a488:	58024400 	.word	0x58024400
 800a48c:	03d09000 	.word	0x03d09000
 800a490:	003d0900 	.word	0x003d0900

0800a494 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a498:	f7fe fe4a 	bl	8009130 <HAL_RCC_GetHCLKFreq>
 800a49c:	4601      	mov	r1, r0
 800a49e:	4b06      	ldr	r3, [pc, #24]	; (800a4b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a4a0:	6a1b      	ldr	r3, [r3, #32]
 800a4a2:	091b      	lsrs	r3, r3, #4
 800a4a4:	f003 0307 	and.w	r3, r3, #7
 800a4a8:	4a04      	ldr	r2, [pc, #16]	; (800a4bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a4aa:	5cd3      	ldrb	r3, [r2, r3]
 800a4ac:	f003 031f 	and.w	r3, r3, #31
 800a4b0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	bd80      	pop	{r7, pc}
 800a4b8:	58024400 	.word	0x58024400
 800a4bc:	0801abfc 	.word	0x0801abfc

0800a4c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b089      	sub	sp, #36	; 0x24
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a4c8:	4b9d      	ldr	r3, [pc, #628]	; (800a740 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a4ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4cc:	f003 0303 	and.w	r3, r3, #3
 800a4d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a4d2:	4b9b      	ldr	r3, [pc, #620]	; (800a740 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a4d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4d6:	0b1b      	lsrs	r3, r3, #12
 800a4d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a4dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a4de:	4b98      	ldr	r3, [pc, #608]	; (800a740 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a4e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e2:	091b      	lsrs	r3, r3, #4
 800a4e4:	f003 0301 	and.w	r3, r3, #1
 800a4e8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a4ea:	4b95      	ldr	r3, [pc, #596]	; (800a740 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a4ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ee:	08db      	lsrs	r3, r3, #3
 800a4f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a4f4:	693a      	ldr	r2, [r7, #16]
 800a4f6:	fb02 f303 	mul.w	r3, r2, r3
 800a4fa:	ee07 3a90 	vmov	s15, r3
 800a4fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a502:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	f000 810a 	beq.w	800a722 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800a50e:	69bb      	ldr	r3, [r7, #24]
 800a510:	2b01      	cmp	r3, #1
 800a512:	d05a      	beq.n	800a5ca <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800a514:	2b01      	cmp	r3, #1
 800a516:	d302      	bcc.n	800a51e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800a518:	2b02      	cmp	r3, #2
 800a51a:	d078      	beq.n	800a60e <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800a51c:	e099      	b.n	800a652 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a51e:	4b88      	ldr	r3, [pc, #544]	; (800a740 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f003 0320 	and.w	r3, r3, #32
 800a526:	2b00      	cmp	r3, #0
 800a528:	d02d      	beq.n	800a586 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a52a:	4b85      	ldr	r3, [pc, #532]	; (800a740 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	08db      	lsrs	r3, r3, #3
 800a530:	f003 0303 	and.w	r3, r3, #3
 800a534:	4a83      	ldr	r2, [pc, #524]	; (800a744 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800a536:	fa22 f303 	lsr.w	r3, r2, r3
 800a53a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	ee07 3a90 	vmov	s15, r3
 800a542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	ee07 3a90 	vmov	s15, r3
 800a54c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a550:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a554:	4b7a      	ldr	r3, [pc, #488]	; (800a740 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a55c:	ee07 3a90 	vmov	s15, r3
 800a560:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a564:	ed97 6a03 	vldr	s12, [r7, #12]
 800a568:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a748 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a56c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a570:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a574:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a578:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a57c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a580:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a584:	e087      	b.n	800a696 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	ee07 3a90 	vmov	s15, r3
 800a58c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a590:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a74c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800a594:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a598:	4b69      	ldr	r3, [pc, #420]	; (800a740 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a59a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a59c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5a0:	ee07 3a90 	vmov	s15, r3
 800a5a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5a8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5ac:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a748 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a5b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a5c8:	e065      	b.n	800a696 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	ee07 3a90 	vmov	s15, r3
 800a5d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5d4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800a5d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5dc:	4b58      	ldr	r3, [pc, #352]	; (800a740 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a5de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5e4:	ee07 3a90 	vmov	s15, r3
 800a5e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5ec:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5f0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a748 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a5f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a600:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a604:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a608:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a60c:	e043      	b.n	800a696 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	ee07 3a90 	vmov	s15, r3
 800a614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a618:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a754 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800a61c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a620:	4b47      	ldr	r3, [pc, #284]	; (800a740 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a628:	ee07 3a90 	vmov	s15, r3
 800a62c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a630:	ed97 6a03 	vldr	s12, [r7, #12]
 800a634:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a748 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a638:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a63c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a640:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a644:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a64c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a650:	e021      	b.n	800a696 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	ee07 3a90 	vmov	s15, r3
 800a658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a65c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800a750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800a660:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a664:	4b36      	ldr	r3, [pc, #216]	; (800a740 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a66c:	ee07 3a90 	vmov	s15, r3
 800a670:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a674:	ed97 6a03 	vldr	s12, [r7, #12]
 800a678:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a748 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a67c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a680:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a684:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a688:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a68c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a690:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a694:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a696:	4b2a      	ldr	r3, [pc, #168]	; (800a740 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a69a:	0a5b      	lsrs	r3, r3, #9
 800a69c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6a0:	ee07 3a90 	vmov	s15, r3
 800a6a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a6ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a6b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6bc:	ee17 2a90 	vmov	r2, s15
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a6c4:	4b1e      	ldr	r3, [pc, #120]	; (800a740 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a6c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6c8:	0c1b      	lsrs	r3, r3, #16
 800a6ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6ce:	ee07 3a90 	vmov	s15, r3
 800a6d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a6da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a6de:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6ea:	ee17 2a90 	vmov	r2, s15
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a6f2:	4b13      	ldr	r3, [pc, #76]	; (800a740 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a6f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6f6:	0e1b      	lsrs	r3, r3, #24
 800a6f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6fc:	ee07 3a90 	vmov	s15, r3
 800a700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a704:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a708:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a70c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a710:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a714:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a718:	ee17 2a90 	vmov	r2, s15
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a720:	e008      	b.n	800a734 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2200      	movs	r2, #0
 800a726:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2200      	movs	r2, #0
 800a72c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2200      	movs	r2, #0
 800a732:	609a      	str	r2, [r3, #8]
}
 800a734:	bf00      	nop
 800a736:	3724      	adds	r7, #36	; 0x24
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr
 800a740:	58024400 	.word	0x58024400
 800a744:	03d09000 	.word	0x03d09000
 800a748:	46000000 	.word	0x46000000
 800a74c:	4c742400 	.word	0x4c742400
 800a750:	4a742400 	.word	0x4a742400
 800a754:	4af42400 	.word	0x4af42400

0800a758 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a758:	b480      	push	{r7}
 800a75a:	b089      	sub	sp, #36	; 0x24
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a760:	4b9d      	ldr	r3, [pc, #628]	; (800a9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a764:	f003 0303 	and.w	r3, r3, #3
 800a768:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a76a:	4b9b      	ldr	r3, [pc, #620]	; (800a9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a76c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a76e:	0d1b      	lsrs	r3, r3, #20
 800a770:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a774:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a776:	4b98      	ldr	r3, [pc, #608]	; (800a9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a77a:	0a1b      	lsrs	r3, r3, #8
 800a77c:	f003 0301 	and.w	r3, r3, #1
 800a780:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a782:	4b95      	ldr	r3, [pc, #596]	; (800a9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a786:	08db      	lsrs	r3, r3, #3
 800a788:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a78c:	693a      	ldr	r2, [r7, #16]
 800a78e:	fb02 f303 	mul.w	r3, r2, r3
 800a792:	ee07 3a90 	vmov	s15, r3
 800a796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a79a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	f000 810a 	beq.w	800a9ba <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800a7a6:	69bb      	ldr	r3, [r7, #24]
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d05a      	beq.n	800a862 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d302      	bcc.n	800a7b6 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800a7b0:	2b02      	cmp	r3, #2
 800a7b2:	d078      	beq.n	800a8a6 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800a7b4:	e099      	b.n	800a8ea <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7b6:	4b88      	ldr	r3, [pc, #544]	; (800a9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f003 0320 	and.w	r3, r3, #32
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d02d      	beq.n	800a81e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a7c2:	4b85      	ldr	r3, [pc, #532]	; (800a9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	08db      	lsrs	r3, r3, #3
 800a7c8:	f003 0303 	and.w	r3, r3, #3
 800a7cc:	4a83      	ldr	r2, [pc, #524]	; (800a9dc <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800a7ce:	fa22 f303 	lsr.w	r3, r2, r3
 800a7d2:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	ee07 3a90 	vmov	s15, r3
 800a7da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	ee07 3a90 	vmov	s15, r3
 800a7e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7ec:	4b7a      	ldr	r3, [pc, #488]	; (800a9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a7ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7f4:	ee07 3a90 	vmov	s15, r3
 800a7f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7fc:	ed97 6a03 	vldr	s12, [r7, #12]
 800a800:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a804:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a808:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a80c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a810:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a814:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a818:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a81c:	e087      	b.n	800a92e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	ee07 3a90 	vmov	s15, r3
 800a824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a828:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a9e4 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800a82c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a830:	4b69      	ldr	r3, [pc, #420]	; (800a9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a838:	ee07 3a90 	vmov	s15, r3
 800a83c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a840:	ed97 6a03 	vldr	s12, [r7, #12]
 800a844:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a848:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a84c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a850:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a854:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a85c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a860:	e065      	b.n	800a92e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	ee07 3a90 	vmov	s15, r3
 800a868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a86c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800a870:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a874:	4b58      	ldr	r3, [pc, #352]	; (800a9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a87c:	ee07 3a90 	vmov	s15, r3
 800a880:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a884:	ed97 6a03 	vldr	s12, [r7, #12]
 800a888:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a88c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a890:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a894:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a898:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a89c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a8a4:	e043      	b.n	800a92e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	ee07 3a90 	vmov	s15, r3
 800a8ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8b0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a9ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800a8b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8b8:	4b47      	ldr	r3, [pc, #284]	; (800a9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a8ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8c0:	ee07 3a90 	vmov	s15, r3
 800a8c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8c8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8cc:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a8d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a8e8:	e021      	b.n	800a92e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	ee07 3a90 	vmov	s15, r3
 800a8f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8f4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800a9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800a8f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8fc:	4b36      	ldr	r3, [pc, #216]	; (800a9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a8fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a904:	ee07 3a90 	vmov	s15, r3
 800a908:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a90c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a910:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a914:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a918:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a91c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a920:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a924:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a928:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a92c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a92e:	4b2a      	ldr	r3, [pc, #168]	; (800a9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a932:	0a5b      	lsrs	r3, r3, #9
 800a934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a938:	ee07 3a90 	vmov	s15, r3
 800a93c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a940:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a944:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a948:	edd7 6a07 	vldr	s13, [r7, #28]
 800a94c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a950:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a954:	ee17 2a90 	vmov	r2, s15
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a95c:	4b1e      	ldr	r3, [pc, #120]	; (800a9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a95e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a960:	0c1b      	lsrs	r3, r3, #16
 800a962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a966:	ee07 3a90 	vmov	s15, r3
 800a96a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a96e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a972:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a976:	edd7 6a07 	vldr	s13, [r7, #28]
 800a97a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a97e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a982:	ee17 2a90 	vmov	r2, s15
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a98a:	4b13      	ldr	r3, [pc, #76]	; (800a9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a98c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a98e:	0e1b      	lsrs	r3, r3, #24
 800a990:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a994:	ee07 3a90 	vmov	s15, r3
 800a998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a99c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a9a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a9a4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a9a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9b0:	ee17 2a90 	vmov	r2, s15
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a9b8:	e008      	b.n	800a9cc <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	609a      	str	r2, [r3, #8]
}
 800a9cc:	bf00      	nop
 800a9ce:	3724      	adds	r7, #36	; 0x24
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d6:	4770      	bx	lr
 800a9d8:	58024400 	.word	0x58024400
 800a9dc:	03d09000 	.word	0x03d09000
 800a9e0:	46000000 	.word	0x46000000
 800a9e4:	4c742400 	.word	0x4c742400
 800a9e8:	4a742400 	.word	0x4a742400
 800a9ec:	4af42400 	.word	0x4af42400

0800a9f0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b089      	sub	sp, #36	; 0x24
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a9f8:	4b9d      	ldr	r3, [pc, #628]	; (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a9fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9fc:	f003 0303 	and.w	r3, r3, #3
 800aa00:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800aa02:	4b9b      	ldr	r3, [pc, #620]	; (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800aa04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa06:	091b      	lsrs	r3, r3, #4
 800aa08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa0c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800aa0e:	4b98      	ldr	r3, [pc, #608]	; (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800aa10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa12:	f003 0301 	and.w	r3, r3, #1
 800aa16:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800aa18:	4b95      	ldr	r3, [pc, #596]	; (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800aa1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa1c:	08db      	lsrs	r3, r3, #3
 800aa1e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa22:	693a      	ldr	r2, [r7, #16]
 800aa24:	fb02 f303 	mul.w	r3, r2, r3
 800aa28:	ee07 3a90 	vmov	s15, r3
 800aa2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa30:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	f000 810a 	beq.w	800ac50 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 800aa3c:	69bb      	ldr	r3, [r7, #24]
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d05a      	beq.n	800aaf8 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d302      	bcc.n	800aa4c <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800aa46:	2b02      	cmp	r3, #2
 800aa48:	d078      	beq.n	800ab3c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800aa4a:	e099      	b.n	800ab80 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa4c:	4b88      	ldr	r3, [pc, #544]	; (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f003 0320 	and.w	r3, r3, #32
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d02d      	beq.n	800aab4 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aa58:	4b85      	ldr	r3, [pc, #532]	; (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	08db      	lsrs	r3, r3, #3
 800aa5e:	f003 0303 	and.w	r3, r3, #3
 800aa62:	4a84      	ldr	r2, [pc, #528]	; (800ac74 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800aa64:	fa22 f303 	lsr.w	r3, r2, r3
 800aa68:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	ee07 3a90 	vmov	s15, r3
 800aa70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	ee07 3a90 	vmov	s15, r3
 800aa7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa82:	4b7b      	ldr	r3, [pc, #492]	; (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800aa84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa8a:	ee07 3a90 	vmov	s15, r3
 800aa8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa92:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa96:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ac78 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800aa9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aaa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800aab2:	e087      	b.n	800abc4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	ee07 3a90 	vmov	s15, r3
 800aaba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aabe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ac7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800aac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aac6:	4b6a      	ldr	r3, [pc, #424]	; (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800aac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aace:	ee07 3a90 	vmov	s15, r3
 800aad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aad6:	ed97 6a03 	vldr	s12, [r7, #12]
 800aada:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ac78 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800aade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aaea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaf2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aaf6:	e065      	b.n	800abc4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	ee07 3a90 	vmov	s15, r3
 800aafe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab02:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ac80 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800ab06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab0a:	4b59      	ldr	r3, [pc, #356]	; (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800ab0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab12:	ee07 3a90 	vmov	s15, r3
 800ab16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab1e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ac78 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800ab22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab3a:	e043      	b.n	800abc4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	ee07 3a90 	vmov	s15, r3
 800ab42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab46:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ac84 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ab4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab4e:	4b48      	ldr	r3, [pc, #288]	; (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800ab50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab56:	ee07 3a90 	vmov	s15, r3
 800ab5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab62:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ac78 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800ab66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab7e:	e021      	b.n	800abc4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	ee07 3a90 	vmov	s15, r3
 800ab86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab8a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ac80 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800ab8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab92:	4b37      	ldr	r3, [pc, #220]	; (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800ab94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab9a:	ee07 3a90 	vmov	s15, r3
 800ab9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aba2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aba6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ac78 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800abaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800abc2:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800abc4:	4b2a      	ldr	r3, [pc, #168]	; (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800abc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abc8:	0a5b      	lsrs	r3, r3, #9
 800abca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abce:	ee07 3a90 	vmov	s15, r3
 800abd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abda:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abde:	edd7 6a07 	vldr	s13, [r7, #28]
 800abe2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abe6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abea:	ee17 2a90 	vmov	r2, s15
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800abf2:	4b1f      	ldr	r3, [pc, #124]	; (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800abf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abf6:	0c1b      	lsrs	r3, r3, #16
 800abf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abfc:	ee07 3a90 	vmov	s15, r3
 800ac00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac08:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac0c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac18:	ee17 2a90 	vmov	r2, s15
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800ac20:	4b13      	ldr	r3, [pc, #76]	; (800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800ac22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac24:	0e1b      	lsrs	r3, r3, #24
 800ac26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac2a:	ee07 3a90 	vmov	s15, r3
 800ac2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac36:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac3a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac46:	ee17 2a90 	vmov	r2, s15
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ac4e:	e008      	b.n	800ac62 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2200      	movs	r2, #0
 800ac54:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	609a      	str	r2, [r3, #8]
}
 800ac62:	bf00      	nop
 800ac64:	3724      	adds	r7, #36	; 0x24
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr
 800ac6e:	bf00      	nop
 800ac70:	58024400 	.word	0x58024400
 800ac74:	03d09000 	.word	0x03d09000
 800ac78:	46000000 	.word	0x46000000
 800ac7c:	4c742400 	.word	0x4c742400
 800ac80:	4a742400 	.word	0x4a742400
 800ac84:	4af42400 	.word	0x4af42400

0800ac88 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ac92:	2300      	movs	r3, #0
 800ac94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ac96:	4b53      	ldr	r3, [pc, #332]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ac98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac9a:	f003 0303 	and.w	r3, r3, #3
 800ac9e:	2b03      	cmp	r3, #3
 800aca0:	d101      	bne.n	800aca6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800aca2:	2301      	movs	r3, #1
 800aca4:	e099      	b.n	800adda <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800aca6:	4b4f      	ldr	r3, [pc, #316]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4a4e      	ldr	r2, [pc, #312]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800acac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800acb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800acb2:	f7f6 ff45 	bl	8001b40 <HAL_GetTick>
 800acb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800acb8:	e008      	b.n	800accc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800acba:	f7f6 ff41 	bl	8001b40 <HAL_GetTick>
 800acbe:	4602      	mov	r2, r0
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	1ad3      	subs	r3, r2, r3
 800acc4:	2b02      	cmp	r3, #2
 800acc6:	d901      	bls.n	800accc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800acc8:	2303      	movs	r3, #3
 800acca:	e086      	b.n	800adda <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800accc:	4b45      	ldr	r3, [pc, #276]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d1f0      	bne.n	800acba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800acd8:	4b42      	ldr	r3, [pc, #264]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800acda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acdc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	031b      	lsls	r3, r3, #12
 800ace6:	493f      	ldr	r1, [pc, #252]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ace8:	4313      	orrs	r3, r2
 800acea:	628b      	str	r3, [r1, #40]	; 0x28
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	3b01      	subs	r3, #1
 800acf2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	689b      	ldr	r3, [r3, #8]
 800acfa:	3b01      	subs	r3, #1
 800acfc:	025b      	lsls	r3, r3, #9
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	431a      	orrs	r2, r3
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	68db      	ldr	r3, [r3, #12]
 800ad06:	3b01      	subs	r3, #1
 800ad08:	041b      	lsls	r3, r3, #16
 800ad0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ad0e:	431a      	orrs	r2, r3
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	691b      	ldr	r3, [r3, #16]
 800ad14:	3b01      	subs	r3, #1
 800ad16:	061b      	lsls	r3, r3, #24
 800ad18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ad1c:	4931      	ldr	r1, [pc, #196]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ad22:	4b30      	ldr	r3, [pc, #192]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	695b      	ldr	r3, [r3, #20]
 800ad2e:	492d      	ldr	r1, [pc, #180]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad30:	4313      	orrs	r3, r2
 800ad32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ad34:	4b2b      	ldr	r3, [pc, #172]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad38:	f023 0220 	bic.w	r2, r3, #32
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	699b      	ldr	r3, [r3, #24]
 800ad40:	4928      	ldr	r1, [pc, #160]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad42:	4313      	orrs	r3, r2
 800ad44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ad46:	4b27      	ldr	r3, [pc, #156]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad4a:	4a26      	ldr	r2, [pc, #152]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad4c:	f023 0310 	bic.w	r3, r3, #16
 800ad50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ad52:	4b24      	ldr	r3, [pc, #144]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad56:	4b24      	ldr	r3, [pc, #144]	; (800ade8 <RCCEx_PLL2_Config+0x160>)
 800ad58:	4013      	ands	r3, r2
 800ad5a:	687a      	ldr	r2, [r7, #4]
 800ad5c:	69d2      	ldr	r2, [r2, #28]
 800ad5e:	00d2      	lsls	r2, r2, #3
 800ad60:	4920      	ldr	r1, [pc, #128]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad62:	4313      	orrs	r3, r2
 800ad64:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ad66:	4b1f      	ldr	r3, [pc, #124]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad6a:	4a1e      	ldr	r2, [pc, #120]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad6c:	f043 0310 	orr.w	r3, r3, #16
 800ad70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d106      	bne.n	800ad86 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ad78:	4b1a      	ldr	r3, [pc, #104]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad7c:	4a19      	ldr	r2, [pc, #100]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad82:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ad84:	e00f      	b.n	800ada6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d106      	bne.n	800ad9a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ad8c:	4b15      	ldr	r3, [pc, #84]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad90:	4a14      	ldr	r2, [pc, #80]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad96:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ad98:	e005      	b.n	800ada6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ad9a:	4b12      	ldr	r3, [pc, #72]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ad9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad9e:	4a11      	ldr	r2, [pc, #68]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ada0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ada4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ada6:	4b0f      	ldr	r3, [pc, #60]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a0e      	ldr	r2, [pc, #56]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800adac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800adb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800adb2:	f7f6 fec5 	bl	8001b40 <HAL_GetTick>
 800adb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800adb8:	e008      	b.n	800adcc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800adba:	f7f6 fec1 	bl	8001b40 <HAL_GetTick>
 800adbe:	4602      	mov	r2, r0
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	1ad3      	subs	r3, r2, r3
 800adc4:	2b02      	cmp	r3, #2
 800adc6:	d901      	bls.n	800adcc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800adc8:	2303      	movs	r3, #3
 800adca:	e006      	b.n	800adda <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800adcc:	4b05      	ldr	r3, [pc, #20]	; (800ade4 <RCCEx_PLL2_Config+0x15c>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800add4:	2b00      	cmp	r3, #0
 800add6:	d0f0      	beq.n	800adba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800add8:	7bfb      	ldrb	r3, [r7, #15]
}
 800adda:	4618      	mov	r0, r3
 800addc:	3710      	adds	r7, #16
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	bf00      	nop
 800ade4:	58024400 	.word	0x58024400
 800ade8:	ffff0007 	.word	0xffff0007

0800adec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800adf6:	2300      	movs	r3, #0
 800adf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800adfa:	4b53      	ldr	r3, [pc, #332]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800adfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adfe:	f003 0303 	and.w	r3, r3, #3
 800ae02:	2b03      	cmp	r3, #3
 800ae04:	d101      	bne.n	800ae0a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ae06:	2301      	movs	r3, #1
 800ae08:	e099      	b.n	800af3e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ae0a:	4b4f      	ldr	r3, [pc, #316]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	4a4e      	ldr	r2, [pc, #312]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800ae10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ae14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae16:	f7f6 fe93 	bl	8001b40 <HAL_GetTick>
 800ae1a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ae1c:	e008      	b.n	800ae30 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ae1e:	f7f6 fe8f 	bl	8001b40 <HAL_GetTick>
 800ae22:	4602      	mov	r2, r0
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	1ad3      	subs	r3, r2, r3
 800ae28:	2b02      	cmp	r3, #2
 800ae2a:	d901      	bls.n	800ae30 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ae2c:	2303      	movs	r3, #3
 800ae2e:	e086      	b.n	800af3e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ae30:	4b45      	ldr	r3, [pc, #276]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d1f0      	bne.n	800ae1e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ae3c:	4b42      	ldr	r3, [pc, #264]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800ae3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae40:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	051b      	lsls	r3, r3, #20
 800ae4a:	493f      	ldr	r1, [pc, #252]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800ae4c:	4313      	orrs	r3, r2
 800ae4e:	628b      	str	r3, [r1, #40]	; 0x28
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	3b01      	subs	r3, #1
 800ae56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	689b      	ldr	r3, [r3, #8]
 800ae5e:	3b01      	subs	r3, #1
 800ae60:	025b      	lsls	r3, r3, #9
 800ae62:	b29b      	uxth	r3, r3
 800ae64:	431a      	orrs	r2, r3
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	68db      	ldr	r3, [r3, #12]
 800ae6a:	3b01      	subs	r3, #1
 800ae6c:	041b      	lsls	r3, r3, #16
 800ae6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ae72:	431a      	orrs	r2, r3
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	691b      	ldr	r3, [r3, #16]
 800ae78:	3b01      	subs	r3, #1
 800ae7a:	061b      	lsls	r3, r3, #24
 800ae7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ae80:	4931      	ldr	r1, [pc, #196]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800ae82:	4313      	orrs	r3, r2
 800ae84:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ae86:	4b30      	ldr	r3, [pc, #192]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800ae88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	695b      	ldr	r3, [r3, #20]
 800ae92:	492d      	ldr	r1, [pc, #180]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800ae94:	4313      	orrs	r3, r2
 800ae96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ae98:	4b2b      	ldr	r3, [pc, #172]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800ae9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae9c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	699b      	ldr	r3, [r3, #24]
 800aea4:	4928      	ldr	r1, [pc, #160]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800aea6:	4313      	orrs	r3, r2
 800aea8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800aeaa:	4b27      	ldr	r3, [pc, #156]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800aeac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeae:	4a26      	ldr	r2, [pc, #152]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800aeb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aeb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800aeb6:	4b24      	ldr	r3, [pc, #144]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800aeb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aeba:	4b24      	ldr	r3, [pc, #144]	; (800af4c <RCCEx_PLL3_Config+0x160>)
 800aebc:	4013      	ands	r3, r2
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	69d2      	ldr	r2, [r2, #28]
 800aec2:	00d2      	lsls	r2, r2, #3
 800aec4:	4920      	ldr	r1, [pc, #128]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800aec6:	4313      	orrs	r3, r2
 800aec8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800aeca:	4b1f      	ldr	r3, [pc, #124]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800aecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aece:	4a1e      	ldr	r2, [pc, #120]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800aed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aed4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d106      	bne.n	800aeea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800aedc:	4b1a      	ldr	r3, [pc, #104]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800aede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aee0:	4a19      	ldr	r2, [pc, #100]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800aee2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800aee6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aee8:	e00f      	b.n	800af0a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d106      	bne.n	800aefe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800aef0:	4b15      	ldr	r3, [pc, #84]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800aef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef4:	4a14      	ldr	r2, [pc, #80]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800aef6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800aefa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aefc:	e005      	b.n	800af0a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800aefe:	4b12      	ldr	r3, [pc, #72]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800af00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af02:	4a11      	ldr	r2, [pc, #68]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800af04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800af08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800af0a:	4b0f      	ldr	r3, [pc, #60]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4a0e      	ldr	r2, [pc, #56]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800af10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af16:	f7f6 fe13 	bl	8001b40 <HAL_GetTick>
 800af1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800af1c:	e008      	b.n	800af30 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800af1e:	f7f6 fe0f 	bl	8001b40 <HAL_GetTick>
 800af22:	4602      	mov	r2, r0
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	1ad3      	subs	r3, r2, r3
 800af28:	2b02      	cmp	r3, #2
 800af2a:	d901      	bls.n	800af30 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800af2c:	2303      	movs	r3, #3
 800af2e:	e006      	b.n	800af3e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800af30:	4b05      	ldr	r3, [pc, #20]	; (800af48 <RCCEx_PLL3_Config+0x15c>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d0f0      	beq.n	800af1e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800af3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3710      	adds	r7, #16
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
 800af46:	bf00      	nop
 800af48:	58024400 	.word	0x58024400
 800af4c:	ffff0007 	.word	0xffff0007

0800af50 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800af58:	2301      	movs	r3, #1
 800af5a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	f000 808a 	beq.w	800b078 <HAL_RTC_Init+0x128>
  {
    status = HAL_OK;
 800af64:	2300      	movs	r3, #0
 800af66:	73fb      	strb	r3, [r7, #15]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800af6e:	b2db      	uxtb	r3, r3
 800af70:	2b00      	cmp	r3, #0
 800af72:	d106      	bne.n	800af82 <HAL_RTC_Init+0x32>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2200      	movs	r2, #0
 800af78:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f7f6 fb1f 	bl	80015c0 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2202      	movs	r2, #2
 800af86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	22ca      	movs	r2, #202	; 0xca
 800af90:	625a      	str	r2, [r3, #36]	; 0x24
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	2253      	movs	r2, #83	; 0x53
 800af98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 fab6 	bl	800b50c <RTC_EnterInitMode>
 800afa0:	4603      	mov	r3, r0
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d00a      	beq.n	800afbc <HAL_RTC_Init+0x6c>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	22ff      	movs	r2, #255	; 0xff
 800afac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2204      	movs	r2, #4
 800afb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 800afb6:	2301      	movs	r3, #1
 800afb8:	73fb      	strb	r3, [r7, #15]
 800afba:	e05d      	b.n	800b078 <HAL_RTC_Init+0x128>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	6899      	ldr	r1, [r3, #8]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681a      	ldr	r2, [r3, #0]
 800afc6:	4b2f      	ldr	r3, [pc, #188]	; (800b084 <HAL_RTC_Init+0x134>)
 800afc8:	400b      	ands	r3, r1
 800afca:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	6899      	ldr	r1, [r3, #8]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	685a      	ldr	r2, [r3, #4]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	691b      	ldr	r3, [r3, #16]
 800afda:	431a      	orrs	r2, r3
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	699b      	ldr	r3, [r3, #24]
 800afe0:	431a      	orrs	r2, r3
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	430a      	orrs	r2, r1
 800afe8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	689b      	ldr	r3, [r3, #8]
 800afee:	0419      	lsls	r1, r3, #16
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	68da      	ldr	r2, [r3, #12]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	430a      	orrs	r2, r1
 800affa:	611a      	str	r2, [r3, #16]
      /* Exit Initialization mode */
#if defined(RTC_ICSR_INIT)
      CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
#endif /* RTC_ICSR_INIT */
#if defined(RTC_ISR_INIT)
      CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	68da      	ldr	r2, [r3, #12]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b00a:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_INIT */

      /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	689b      	ldr	r3, [r3, #8]
 800b012:	f003 0320 	and.w	r3, r3, #32
 800b016:	2b00      	cmp	r3, #0
 800b018:	d10f      	bne.n	800b03a <HAL_RTC_Init+0xea>
      {
        if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f000 fa50 	bl	800b4c0 <HAL_RTC_WaitForSynchro>
 800b020:	4603      	mov	r3, r0
 800b022:	2b00      	cmp	r3, #0
 800b024:	d009      	beq.n	800b03a <HAL_RTC_Init+0xea>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	22ff      	movs	r2, #255	; 0xff
 800b02c:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2204      	movs	r2, #4
 800b032:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          status = HAL_ERROR;
 800b036:	2301      	movs	r3, #1
 800b038:	73fb      	strb	r3, [r7, #15]
        }
      }

      if(status == HAL_OK)
 800b03a:	7bfb      	ldrb	r3, [r7, #15]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d11b      	bne.n	800b078 <HAL_RTC_Init+0x128>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f022 0203 	bic.w	r2, r2, #3
 800b04e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	69da      	ldr	r2, [r3, #28]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	695b      	ldr	r3, [r3, #20]
 800b05e:	431a      	orrs	r2, r3
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	430a      	orrs	r2, r1
 800b066:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	22ff      	movs	r2, #255	; 0xff
 800b06e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2201      	movs	r2, #1
 800b074:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  /* return status */
  return status;
 800b078:	7bfb      	ldrb	r3, [r7, #15]
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3710      	adds	r7, #16
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	ff8fffbf 	.word	0xff8fffbf

0800b088 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b088:	b590      	push	{r4, r7, lr}
 800b08a:	b087      	sub	sp, #28
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	d101      	bne.n	800b0a2 <HAL_RTC_SetTime+0x1a>
 800b09e:	2302      	movs	r3, #2
 800b0a0:	e0b0      	b.n	800b204 <HAL_RTC_SetTime+0x17c>
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	2201      	movs	r2, #1
 800b0a6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	2202      	movs	r2, #2
 800b0ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	22ca      	movs	r2, #202	; 0xca
 800b0b8:	625a      	str	r2, [r3, #36]	; 0x24
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	2253      	movs	r2, #83	; 0x53
 800b0c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800b0c2:	68f8      	ldr	r0, [r7, #12]
 800b0c4:	f000 fa22 	bl	800b50c <RTC_EnterInitMode>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d00d      	beq.n	800b0ea <HAL_RTC_SetTime+0x62>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	22ff      	movs	r2, #255	; 0xff
 800b0d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	2204      	movs	r2, #4
 800b0da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	e08c      	b.n	800b204 <HAL_RTC_SetTime+0x17c>
  }
  else
  {
    if(Format == RTC_FORMAT_BIN)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d126      	bne.n	800b13e <HAL_RTC_SetTime+0xb6>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	689b      	ldr	r3, [r3, #8]
 800b0f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d102      	bne.n	800b104 <HAL_RTC_SetTime+0x7c>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	2200      	movs	r2, #0
 800b102:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	4618      	mov	r0, r3
 800b10a:	f000 fa29 	bl	800b560 <RTC_ByteToBcd2>
 800b10e:	4603      	mov	r3, r0
 800b110:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	785b      	ldrb	r3, [r3, #1]
 800b116:	4618      	mov	r0, r3
 800b118:	f000 fa22 	bl	800b560 <RTC_ByteToBcd2>
 800b11c:	4603      	mov	r3, r0
 800b11e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b120:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	789b      	ldrb	r3, [r3, #2]
 800b126:	4618      	mov	r0, r3
 800b128:	f000 fa1a 	bl	800b560 <RTC_ByteToBcd2>
 800b12c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b12e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	78db      	ldrb	r3, [r3, #3]
 800b136:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b138:	4313      	orrs	r3, r2
 800b13a:	617b      	str	r3, [r7, #20]
 800b13c:	e018      	b.n	800b170 <HAL_RTC_SetTime+0xe8>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	689b      	ldr	r3, [r3, #8]
 800b144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d102      	bne.n	800b152 <HAL_RTC_SetTime+0xca>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	2200      	movs	r2, #0
 800b150:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	781b      	ldrb	r3, [r3, #0]
 800b156:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	785b      	ldrb	r3, [r3, #1]
 800b15c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b15e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800b160:	68ba      	ldr	r2, [r7, #8]
 800b162:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b164:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	78db      	ldrb	r3, [r3, #3]
 800b16a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b16c:	4313      	orrs	r3, r2
 800b16e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681a      	ldr	r2, [r3, #0]
 800b174:	6979      	ldr	r1, [r7, #20]
 800b176:	4b25      	ldr	r3, [pc, #148]	; (800b20c <HAL_RTC_SetTime+0x184>)
 800b178:	400b      	ands	r3, r1
 800b17a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	689a      	ldr	r2, [r3, #8]
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b18a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	6899      	ldr	r1, [r3, #8]
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	68da      	ldr	r2, [r3, #12]
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	691b      	ldr	r3, [r3, #16]
 800b19a:	431a      	orrs	r2, r3
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	430a      	orrs	r2, r1
 800b1a2:	609a      	str	r2, [r3, #8]
    /* Exit Initialization mode */
#if defined(RTC_ICSR_INIT)
    CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
#endif /* RTC_ICSR_INIT */
#if defined(RTC_ISR_INIT)
    CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	68da      	ldr	r2, [r3, #12]
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b1b2:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_INIT */

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	689b      	ldr	r3, [r3, #8]
 800b1ba:	f003 0320 	and.w	r3, r3, #32
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d113      	bne.n	800b1ea <HAL_RTC_SetTime+0x162>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b1c2:	68f8      	ldr	r0, [r7, #12]
 800b1c4:	f000 f97c 	bl	800b4c0 <HAL_RTC_WaitForSynchro>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d00d      	beq.n	800b1ea <HAL_RTC_SetTime+0x162>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	22ff      	movs	r2, #255	; 0xff
 800b1d4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	2204      	movs	r2, #4
 800b1da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	e00c      	b.n	800b204 <HAL_RTC_SetTime+0x17c>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	22ff      	movs	r2, #255	; 0xff
 800b1f0:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2201      	movs	r2, #1
 800b1f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    __HAL_UNLOCK(hrtc);
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800b202:	2300      	movs	r3, #0
  }
}
 800b204:	4618      	mov	r0, r3
 800b206:	371c      	adds	r7, #28
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd90      	pop	{r4, r7, pc}
 800b20c:	007f7f7f 	.word	0x007f7f7f

0800b210 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b086      	sub	sp, #24
 800b214:	af00      	add	r7, sp, #0
 800b216:	60f8      	str	r0, [r7, #12]
 800b218:	60b9      	str	r1, [r7, #8]
 800b21a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	691b      	ldr	r3, [r3, #16]
 800b22c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	681a      	ldr	r2, [r3, #0]
 800b23a:	4b22      	ldr	r3, [pc, #136]	; (800b2c4 <HAL_RTC_GetTime+0xb4>)
 800b23c:	4013      	ands	r3, r2
 800b23e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	0c1b      	lsrs	r3, r3, #16
 800b244:	b2db      	uxtb	r3, r3
 800b246:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b24a:	b2da      	uxtb	r2, r3
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	0a1b      	lsrs	r3, r3, #8
 800b254:	b2db      	uxtb	r3, r3
 800b256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b25a:	b2da      	uxtb	r2, r3
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	b2db      	uxtb	r3, r3
 800b264:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b268:	b2da      	uxtb	r2, r3
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	0d9b      	lsrs	r3, r3, #22
 800b272:	b2db      	uxtb	r3, r3
 800b274:	f003 0301 	and.w	r3, r3, #1
 800b278:	b2da      	uxtb	r2, r3
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d11a      	bne.n	800b2ba <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	781b      	ldrb	r3, [r3, #0]
 800b288:	4618      	mov	r0, r3
 800b28a:	f000 f989 	bl	800b5a0 <RTC_Bcd2ToByte>
 800b28e:	4603      	mov	r3, r0
 800b290:	461a      	mov	r2, r3
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	785b      	ldrb	r3, [r3, #1]
 800b29a:	4618      	mov	r0, r3
 800b29c:	f000 f980 	bl	800b5a0 <RTC_Bcd2ToByte>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	789b      	ldrb	r3, [r3, #2]
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f000 f977 	bl	800b5a0 <RTC_Bcd2ToByte>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800b2ba:	2300      	movs	r3, #0
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3718      	adds	r7, #24
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}
 800b2c4:	007f7f7f 	.word	0x007f7f7f

0800b2c8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b2c8:	b590      	push	{r4, r7, lr}
 800b2ca:	b087      	sub	sp, #28
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	60f8      	str	r0, [r7, #12]
 800b2d0:	60b9      	str	r1, [r7, #8]
 800b2d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b2da:	2b01      	cmp	r3, #1
 800b2dc:	d101      	bne.n	800b2e2 <HAL_RTC_SetDate+0x1a>
 800b2de:	2302      	movs	r3, #2
 800b2e0:	e09a      	b.n	800b418 <HAL_RTC_SetDate+0x150>
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2202      	movs	r2, #2
 800b2ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d10e      	bne.n	800b316 <HAL_RTC_SetDate+0x4e>
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	785b      	ldrb	r3, [r3, #1]
 800b2fc:	f003 0310 	and.w	r3, r3, #16
 800b300:	2b00      	cmp	r3, #0
 800b302:	d008      	beq.n	800b316 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	785b      	ldrb	r3, [r3, #1]
 800b308:	f023 0310 	bic.w	r3, r3, #16
 800b30c:	b2db      	uxtb	r3, r3
 800b30e:	330a      	adds	r3, #10
 800b310:	b2da      	uxtb	r2, r3
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d11c      	bne.n	800b356 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	78db      	ldrb	r3, [r3, #3]
 800b320:	4618      	mov	r0, r3
 800b322:	f000 f91d 	bl	800b560 <RTC_ByteToBcd2>
 800b326:	4603      	mov	r3, r0
 800b328:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	785b      	ldrb	r3, [r3, #1]
 800b32e:	4618      	mov	r0, r3
 800b330:	f000 f916 	bl	800b560 <RTC_ByteToBcd2>
 800b334:	4603      	mov	r3, r0
 800b336:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b338:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	789b      	ldrb	r3, [r3, #2]
 800b33e:	4618      	mov	r0, r3
 800b340:	f000 f90e 	bl	800b560 <RTC_ByteToBcd2>
 800b344:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b346:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	781b      	ldrb	r3, [r3, #0]
 800b34e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b350:	4313      	orrs	r3, r2
 800b352:	617b      	str	r3, [r7, #20]
 800b354:	e00e      	b.n	800b374 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	78db      	ldrb	r3, [r3, #3]
 800b35a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	785b      	ldrb	r3, [r3, #1]
 800b360:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b362:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800b364:	68ba      	ldr	r2, [r7, #8]
 800b366:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b368:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b370:	4313      	orrs	r3, r2
 800b372:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	22ca      	movs	r2, #202	; 0xca
 800b37a:	625a      	str	r2, [r3, #36]	; 0x24
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	2253      	movs	r2, #83	; 0x53
 800b382:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800b384:	68f8      	ldr	r0, [r7, #12]
 800b386:	f000 f8c1 	bl	800b50c <RTC_EnterInitMode>
 800b38a:	4603      	mov	r3, r0
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d00d      	beq.n	800b3ac <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	22ff      	movs	r2, #255	; 0xff
 800b396:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2204      	movs	r2, #4
 800b39c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	e035      	b.n	800b418 <HAL_RTC_SetDate+0x150>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	681a      	ldr	r2, [r3, #0]
 800b3b0:	6979      	ldr	r1, [r7, #20]
 800b3b2:	4b1b      	ldr	r3, [pc, #108]	; (800b420 <HAL_RTC_SetDate+0x158>)
 800b3b4:	400b      	ands	r3, r1
 800b3b6:	6053      	str	r3, [r2, #4]
    /* Exit Initialization mode */
#if defined(RTC_ICSR_INIT)
    CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
#endif /* RTC_ISR_INIT */
#if defined(RTC_ISR_INIT)
    CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	68da      	ldr	r2, [r3, #12]
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b3c6:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_INIT */

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	689b      	ldr	r3, [r3, #8]
 800b3ce:	f003 0320 	and.w	r3, r3, #32
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d113      	bne.n	800b3fe <HAL_RTC_SetDate+0x136>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b3d6:	68f8      	ldr	r0, [r7, #12]
 800b3d8:	f000 f872 	bl	800b4c0 <HAL_RTC_WaitForSynchro>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d00d      	beq.n	800b3fe <HAL_RTC_SetDate+0x136>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	22ff      	movs	r2, #255	; 0xff
 800b3e8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2204      	movs	r2, #4
 800b3ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	e00c      	b.n	800b418 <HAL_RTC_SetDate+0x150>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	22ff      	movs	r2, #255	; 0xff
 800b404:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	2201      	movs	r2, #1
 800b40a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	2200      	movs	r2, #0
 800b412:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800b416:	2300      	movs	r3, #0
  }
}
 800b418:	4618      	mov	r0, r3
 800b41a:	371c      	adds	r7, #28
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd90      	pop	{r4, r7, pc}
 800b420:	00ffff3f 	.word	0x00ffff3f

0800b424 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b086      	sub	sp, #24
 800b428:	af00      	add	r7, sp, #0
 800b42a:	60f8      	str	r0, [r7, #12]
 800b42c:	60b9      	str	r1, [r7, #8]
 800b42e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	685a      	ldr	r2, [r3, #4]
 800b436:	4b21      	ldr	r3, [pc, #132]	; (800b4bc <HAL_RTC_GetDate+0x98>)
 800b438:	4013      	ands	r3, r2
 800b43a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	0c1b      	lsrs	r3, r3, #16
 800b440:	b2da      	uxtb	r2, r3
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	0a1b      	lsrs	r3, r3, #8
 800b44a:	b2db      	uxtb	r3, r3
 800b44c:	f003 031f 	and.w	r3, r3, #31
 800b450:	b2da      	uxtb	r2, r3
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	b2db      	uxtb	r3, r3
 800b45a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b45e:	b2da      	uxtb	r2, r3
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	0b5b      	lsrs	r3, r3, #13
 800b468:	b2db      	uxtb	r3, r3
 800b46a:	f003 0307 	and.w	r3, r3, #7
 800b46e:	b2da      	uxtb	r2, r3
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d11a      	bne.n	800b4b0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	78db      	ldrb	r3, [r3, #3]
 800b47e:	4618      	mov	r0, r3
 800b480:	f000 f88e 	bl	800b5a0 <RTC_Bcd2ToByte>
 800b484:	4603      	mov	r3, r0
 800b486:	461a      	mov	r2, r3
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	785b      	ldrb	r3, [r3, #1]
 800b490:	4618      	mov	r0, r3
 800b492:	f000 f885 	bl	800b5a0 <RTC_Bcd2ToByte>
 800b496:	4603      	mov	r3, r0
 800b498:	461a      	mov	r2, r3
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	789b      	ldrb	r3, [r3, #2]
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f000 f87c 	bl	800b5a0 <RTC_Bcd2ToByte>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	461a      	mov	r2, r3
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800b4b0:	2300      	movs	r3, #0
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3718      	adds	r7, #24
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	bf00      	nop
 800b4bc:	00ffff3f 	.word	0x00ffff3f

0800b4c0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b084      	sub	sp, #16
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	68da      	ldr	r2, [r3, #12]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b4d6:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800b4d8:	f7f6 fb32 	bl	8001b40 <HAL_GetTick>
 800b4dc:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b4de:	e009      	b.n	800b4f4 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b4e0:	f7f6 fb2e 	bl	8001b40 <HAL_GetTick>
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	1ad3      	subs	r3, r2, r3
 800b4ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b4ee:	d901      	bls.n	800b4f4 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800b4f0:	2303      	movs	r3, #3
 800b4f2:	e007      	b.n	800b504 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	68db      	ldr	r3, [r3, #12]
 800b4fa:	f003 0320 	and.w	r3, r3, #32
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d0ee      	beq.n	800b4e0 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800b502:	2300      	movs	r3, #0
}
 800b504:	4618      	mov	r0, r3
 800b506:	3710      	adds	r7, #16
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b084      	sub	sp, #16
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	68db      	ldr	r3, [r3, #12]
 800b51a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d119      	bne.n	800b556 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f04f 32ff 	mov.w	r2, #4294967295
 800b52a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b52c:	f7f6 fb08 	bl	8001b40 <HAL_GetTick>
 800b530:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b532:	e009      	b.n	800b548 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b534:	f7f6 fb04 	bl	8001b40 <HAL_GetTick>
 800b538:	4602      	mov	r2, r0
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	1ad3      	subs	r3, r2, r3
 800b53e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b542:	d901      	bls.n	800b548 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800b544:	2303      	movs	r3, #3
 800b546:	e007      	b.n	800b558 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	68db      	ldr	r3, [r3, #12]
 800b54e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b552:	2b00      	cmp	r3, #0
 800b554:	d0ee      	beq.n	800b534 <RTC_EnterInitMode+0x28>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return HAL_OK;
 800b556:	2300      	movs	r3, #0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3710      	adds	r7, #16
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800b560:	b480      	push	{r7}
 800b562:	b085      	sub	sp, #20
 800b564:	af00      	add	r7, sp, #0
 800b566:	4603      	mov	r3, r0
 800b568:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800b56a:	2300      	movs	r3, #0
 800b56c:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800b56e:	79fb      	ldrb	r3, [r7, #7]
 800b570:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800b572:	e005      	b.n	800b580 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	3301      	adds	r3, #1
 800b578:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800b57a:	7afb      	ldrb	r3, [r7, #11]
 800b57c:	3b0a      	subs	r3, #10
 800b57e:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800b580:	7afb      	ldrb	r3, [r7, #11]
 800b582:	2b09      	cmp	r3, #9
 800b584:	d8f6      	bhi.n	800b574 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	b2db      	uxtb	r3, r3
 800b58a:	011b      	lsls	r3, r3, #4
 800b58c:	b2da      	uxtb	r2, r3
 800b58e:	7afb      	ldrb	r3, [r7, #11]
 800b590:	4313      	orrs	r3, r2
 800b592:	b2db      	uxtb	r3, r3
}
 800b594:	4618      	mov	r0, r3
 800b596:	3714      	adds	r7, #20
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr

0800b5a0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b085      	sub	sp, #20
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800b5aa:	79fb      	ldrb	r3, [r7, #7]
 800b5ac:	091b      	lsrs	r3, r3, #4
 800b5ae:	b2db      	uxtb	r3, r3
 800b5b0:	461a      	mov	r2, r3
 800b5b2:	0092      	lsls	r2, r2, #2
 800b5b4:	4413      	add	r3, r2
 800b5b6:	005b      	lsls	r3, r3, #1
 800b5b8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800b5ba:	79fb      	ldrb	r3, [r7, #7]
 800b5bc:	f003 030f 	and.w	r3, r3, #15
 800b5c0:	b2da      	uxtb	r2, r3
 800b5c2:	7bfb      	ldrb	r3, [r7, #15]
 800b5c4:	4413      	add	r3, r2
 800b5c6:	b2db      	uxtb	r3, r3
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3714      	adds	r7, #20
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr

0800b5d4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b08a      	sub	sp, #40	; 0x28
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d101      	bne.n	800b5e6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	e07c      	b.n	800b6e0 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b5ec:	b2db      	uxtb	r3, r3
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d10c      	bne.n	800b60c <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	699b      	ldr	r3, [r3, #24]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d102      	bne.n	800b606 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2202      	movs	r2, #2
 800b604:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f7f5 fff4 	bl	80015f4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2203      	movs	r2, #3
 800b610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 f867 	bl	800b6e8 <HAL_SD_InitCard>
 800b61a:	4603      	mov	r3, r0
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d001      	beq.n	800b624 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 800b620:	2301      	movs	r3, #1
 800b622:	e05d      	b.n	800b6e0 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800b624:	f107 0308 	add.w	r3, r7, #8
 800b628:	4619      	mov	r1, r3
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f000 fdb8 	bl	800c1a0 <HAL_SD_GetCardStatus>
 800b630:	4603      	mov	r3, r0
 800b632:	2b00      	cmp	r3, #0
 800b634:	d001      	beq.n	800b63a <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 800b636:	2301      	movs	r3, #1
 800b638:	e052      	b.n	800b6e0 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800b63a:	7e3b      	ldrb	r3, [r7, #24]
 800b63c:	b2db      	uxtb	r3, r3
 800b63e:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800b640:	7e7b      	ldrb	r3, [r7, #25]
 800b642:	b2db      	uxtb	r3, r3
 800b644:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b64a:	2b01      	cmp	r3, #1
 800b64c:	d10a      	bne.n	800b664 <HAL_SD_Init+0x90>
 800b64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b650:	2b00      	cmp	r3, #0
 800b652:	d102      	bne.n	800b65a <HAL_SD_Init+0x86>
 800b654:	6a3b      	ldr	r3, [r7, #32]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d004      	beq.n	800b664 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b660:	65da      	str	r2, [r3, #92]	; 0x5c
 800b662:	e00b      	b.n	800b67c <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d104      	bne.n	800b676 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b672:	65da      	str	r2, [r3, #92]	; 0x5c
 800b674:	e002      	b.n	800b67c <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2200      	movs	r2, #0
 800b67a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	68db      	ldr	r3, [r3, #12]
 800b680:	4619      	mov	r1, r3
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 fe6e 	bl	800c364 <HAL_SD_ConfigWideBusOperation>
 800b688:	4603      	mov	r3, r0
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d001      	beq.n	800b692 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800b68e:	2301      	movs	r3, #1
 800b690:	e026      	b.n	800b6e0 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800b692:	f7f6 fa55 	bl	8001b40 <HAL_GetTick>
 800b696:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800b698:	e011      	b.n	800b6be <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800b69a:	f7f6 fa51 	bl	8001b40 <HAL_GetTick>
 800b69e:	4602      	mov	r2, r0
 800b6a0:	69fb      	ldr	r3, [r7, #28]
 800b6a2:	1ad3      	subs	r3, r2, r3
 800b6a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6a8:	d109      	bne.n	800b6be <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b6b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2201      	movs	r2, #1
 800b6b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800b6ba:	2303      	movs	r3, #3
 800b6bc:	e010      	b.n	800b6e0 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 fefa 	bl	800c4b8 <HAL_SD_GetCardState>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	2b04      	cmp	r3, #4
 800b6c8:	d1e7      	bne.n	800b69a <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2201      	movs	r2, #1
 800b6da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b6de:	2300      	movs	r3, #0
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3728      	adds	r7, #40	; 0x28
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b6e8:	b5b0      	push	{r4, r5, r7, lr}
 800b6ea:	b08e      	sub	sp, #56	; 0x38
 800b6ec:	af04      	add	r7, sp, #16
 800b6ee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	617b      	str	r3, [r7, #20]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800b700:	23fa      	movs	r3, #250	; 0xfa
 800b702:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	699b      	ldr	r3, [r3, #24]
 800b708:	2b02      	cmp	r3, #2
 800b70a:	d107      	bne.n	800b71c <HAL_SD_InitCard+0x34>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f042 0210 	orr.w	r2, r2, #16
 800b71a:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681d      	ldr	r5, [r3, #0]
 800b720:	466c      	mov	r4, sp
 800b722:	f107 0314 	add.w	r3, r7, #20
 800b726:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b72a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b72e:	f107 0308 	add.w	r3, r7, #8
 800b732:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b734:	4628      	mov	r0, r5
 800b736:	f004 fbd1 	bl	800fedc <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	4618      	mov	r0, r3
 800b740:	f004 fc14 	bl	800ff6c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting 
     the SD initialization sequence */
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC)/(2U*SDMMC_INIT_CLK_DIV);
 800b744:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800b748:	f7fe fc2c 	bl	8009fa4 <HAL_RCCEx_GetPeriphCLKFreq>
 800b74c:	4602      	mov	r2, r0
 800b74e:	4b2d      	ldr	r3, [pc, #180]	; (800b804 <HAL_SD_InitCard+0x11c>)
 800b750:	fba3 2302 	umull	r2, r3, r3, r2
 800b754:	095b      	lsrs	r3, r3, #5
 800b756:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 800b758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d008      	beq.n	800b770 <HAL_SD_InitCard+0x88>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800b75e:	4a2a      	ldr	r2, [pc, #168]	; (800b808 <HAL_SD_InitCard+0x120>)
 800b760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b762:	fbb2 f3f3 	udiv	r3, r2, r3
 800b766:	3301      	adds	r3, #1
 800b768:	4618      	mov	r0, r3
 800b76a:	f7f6 f9f5 	bl	8001b58 <HAL_Delay>
 800b76e:	e002      	b.n	800b776 <HAL_SD_InitCard+0x8e>
  }
  else
  {
    HAL_Delay(2U);
 800b770:	2002      	movs	r0, #2
 800b772:	f7f6 f9f1 	bl	8001b58 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f000 ff7c 	bl	800c674 <SD_PowerON>
 800b77c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b77e:	6a3b      	ldr	r3, [r7, #32]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d00b      	beq.n	800b79c <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2201      	movs	r2, #1
 800b788:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b790:	6a3b      	ldr	r3, [r7, #32]
 800b792:	431a      	orrs	r2, r3
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b798:	2301      	movs	r3, #1
 800b79a:	e02e      	b.n	800b7fa <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f000 feab 	bl	800c4f8 <SD_InitCard>
 800b7a2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b7a4:	6a3b      	ldr	r3, [r7, #32]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d00b      	beq.n	800b7c2 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2201      	movs	r2, #1
 800b7ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7b6:	6a3b      	ldr	r3, [r7, #32]
 800b7b8:	431a      	orrs	r2, r3
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b7be:	2301      	movs	r3, #1
 800b7c0:	e01b      	b.n	800b7fa <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f004 fc64 	bl	8010098 <SDMMC_CmdBlockLength>
 800b7d0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b7d2:	6a3b      	ldr	r3, [r7, #32]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d00f      	beq.n	800b7f8 <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4a0b      	ldr	r2, [pc, #44]	; (800b80c <HAL_SD_InitCard+0x124>)
 800b7de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7e4:	6a3b      	ldr	r3, [r7, #32]
 800b7e6:	431a      	orrs	r2, r3
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2201      	movs	r2, #1
 800b7f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	e000      	b.n	800b7fa <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 800b7f8:	2300      	movs	r3, #0
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3728      	adds	r7, #40	; 0x28
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bdb0      	pop	{r4, r5, r7, pc}
 800b802:	bf00      	nop
 800b804:	10624dd3 	.word	0x10624dd3
 800b808:	00012110 	.word	0x00012110
 800b80c:	1fe00fff 	.word	0x1fe00fff

0800b810 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b092      	sub	sp, #72	; 0x48
 800b814:	af00      	add	r7, sp, #0
 800b816:	60f8      	str	r0, [r7, #12]
 800b818:	60b9      	str	r1, [r7, #8]
 800b81a:	607a      	str	r2, [r7, #4]
 800b81c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b81e:	f7f6 f98f 	bl	8001b40 <HAL_GetTick>
 800b822:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d107      	bne.n	800b842 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b836:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b83e:	2301      	movs	r3, #1
 800b840:	e167      	b.n	800bb12 <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b848:	b2db      	uxtb	r3, r3
 800b84a:	2b01      	cmp	r3, #1
 800b84c:	f040 815a 	bne.w	800bb04 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	2200      	movs	r2, #0
 800b854:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b856:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	441a      	add	r2, r3
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b860:	429a      	cmp	r2, r3
 800b862:	d907      	bls.n	800b874 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b868:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b870:	2301      	movs	r3, #1
 800b872:	e14e      	b.n	800bb12 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2203      	movs	r2, #3
 800b878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	2200      	movs	r2, #0
 800b882:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b888:	2b01      	cmp	r3, #1
 800b88a:	d002      	beq.n	800b892 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800b88c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b88e:	025b      	lsls	r3, r3, #9
 800b890:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b892:	f04f 33ff 	mov.w	r3, #4294967295
 800b896:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	025b      	lsls	r3, r3, #9
 800b89c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b89e:	2390      	movs	r3, #144	; 0x90
 800b8a0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b8a2:	2302      	movs	r3, #2
 800b8a4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f107 0214 	add.w	r2, r7, #20
 800b8b6:	4611      	mov	r1, r2
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f004 fbc1 	bl	8010040 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	68da      	ldr	r2, [r3, #12]
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b8cc:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	d90a      	bls.n	800b8ea <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	2202      	movs	r2, #2
 800b8d8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f004 fc1f 	bl	8010124 <SDMMC_CmdReadMultiBlock>
 800b8e6:	6478      	str	r0, [r7, #68]	; 0x44
 800b8e8:	e009      	b.n	800b8fe <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f004 fbf1 	bl	80100de <SDMMC_CmdReadSingleBlock>
 800b8fc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b8fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b900:	2b00      	cmp	r3, #0
 800b902:	d012      	beq.n	800b92a <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	4a84      	ldr	r2, [pc, #528]	; (800bb1c <HAL_SD_ReadBlocks+0x30c>)
 800b90a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b912:	431a      	orrs	r2, r3
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2201      	movs	r2, #1
 800b91c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2200      	movs	r2, #0
 800b924:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b926:	2301      	movs	r3, #1
 800b928:	e0f3      	b.n	800bb12 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800b92a:	69bb      	ldr	r3, [r7, #24]
 800b92c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b92e:	e058      	b.n	800b9e2 <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b936:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d033      	beq.n	800b9a6 <HAL_SD_ReadBlocks+0x196>
 800b93e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b940:	2b1f      	cmp	r3, #31
 800b942:	d930      	bls.n	800b9a6 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800b944:	2300      	movs	r3, #0
 800b946:	643b      	str	r3, [r7, #64]	; 0x40
 800b948:	e027      	b.n	800b99a <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	4618      	mov	r0, r3
 800b950:	f004 faee 	bl	800ff30 <SDMMC_ReadFIFO>
 800b954:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800b956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b958:	b2da      	uxtb	r2, r3
 800b95a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b95c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b95e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b960:	3301      	adds	r3, #1
 800b962:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800b964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b966:	0a1b      	lsrs	r3, r3, #8
 800b968:	b2da      	uxtb	r2, r3
 800b96a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b96c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b96e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b970:	3301      	adds	r3, #1
 800b972:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800b974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b976:	0c1b      	lsrs	r3, r3, #16
 800b978:	b2da      	uxtb	r2, r3
 800b97a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b97c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b97e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b980:	3301      	adds	r3, #1
 800b982:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800b984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b986:	0e1b      	lsrs	r3, r3, #24
 800b988:	b2da      	uxtb	r2, r3
 800b98a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b98c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b98e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b990:	3301      	adds	r3, #1
 800b992:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 800b994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b996:	3301      	adds	r3, #1
 800b998:	643b      	str	r3, [r7, #64]	; 0x40
 800b99a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b99c:	2b07      	cmp	r3, #7
 800b99e:	d9d4      	bls.n	800b94a <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800b9a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9a2:	3b20      	subs	r3, #32
 800b9a4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b9a6:	f7f6 f8cb 	bl	8001b40 <HAL_GetTick>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ae:	1ad3      	subs	r3, r2, r3
 800b9b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d902      	bls.n	800b9bc <HAL_SD_ReadBlocks+0x1ac>
 800b9b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d112      	bne.n	800b9e2 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	4a56      	ldr	r2, [pc, #344]	; (800bb1c <HAL_SD_ReadBlocks+0x30c>)
 800b9c2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800b9de:	2303      	movs	r3, #3
 800b9e0:	e097      	b.n	800bb12 <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9e8:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d09f      	beq.n	800b930 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	68da      	ldr	r2, [r3, #12]
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b9fe:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d022      	beq.n	800ba54 <HAL_SD_ReadBlocks+0x244>
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	2b01      	cmp	r3, #1
 800ba12:	d91f      	bls.n	800ba54 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba18:	2b03      	cmp	r3, #3
 800ba1a:	d01b      	beq.n	800ba54 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	4618      	mov	r0, r3
 800ba22:	f004 fbe9 	bl	80101f8 <SDMMC_CmdStopTransfer>
 800ba26:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800ba28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d012      	beq.n	800ba54 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	4a3a      	ldr	r2, [pc, #232]	; (800bb1c <HAL_SD_ReadBlocks+0x30c>)
 800ba34:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba3c:	431a      	orrs	r2, r3
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	2201      	movs	r2, #1
 800ba46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800ba50:	2301      	movs	r3, #1
 800ba52:	e05e      	b.n	800bb12 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba5a:	f003 0308 	and.w	r3, r3, #8
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d012      	beq.n	800ba88 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	4a2d      	ldr	r2, [pc, #180]	; (800bb1c <HAL_SD_ReadBlocks+0x30c>)
 800ba68:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba6e:	f043 0208 	orr.w	r2, r3, #8
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	2201      	movs	r2, #1
 800ba7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2200      	movs	r2, #0
 800ba82:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ba84:	2301      	movs	r3, #1
 800ba86:	e044      	b.n	800bb12 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba8e:	f003 0302 	and.w	r3, r3, #2
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d012      	beq.n	800babc <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4a20      	ldr	r2, [pc, #128]	; (800bb1c <HAL_SD_ReadBlocks+0x30c>)
 800ba9c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baa2:	f043 0202 	orr.w	r2, r3, #2
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	2201      	movs	r2, #1
 800baae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2200      	movs	r2, #0
 800bab6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bab8:	2301      	movs	r3, #1
 800baba:	e02a      	b.n	800bb12 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bac2:	f003 0320 	and.w	r3, r3, #32
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d012      	beq.n	800baf0 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	4a13      	ldr	r2, [pc, #76]	; (800bb1c <HAL_SD_ReadBlocks+0x30c>)
 800bad0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bad6:	f043 0220 	orr.w	r2, r3, #32
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	2201      	movs	r2, #1
 800bae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	2200      	movs	r2, #0
 800baea:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800baec:	2301      	movs	r3, #1
 800baee:	e010      	b.n	800bb12 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	4a0a      	ldr	r2, [pc, #40]	; (800bb20 <HAL_SD_ReadBlocks+0x310>)
 800baf6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2201      	movs	r2, #1
 800bafc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800bb00:	2300      	movs	r3, #0
 800bb02:	e006      	b.n	800bb12 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb08:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bb10:	2301      	movs	r3, #1
  }
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3748      	adds	r7, #72	; 0x48
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}
 800bb1a:	bf00      	nop
 800bb1c:	1fe00fff 	.word	0x1fe00fff
 800bb20:	18000f3a 	.word	0x18000f3a

0800bb24 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b092      	sub	sp, #72	; 0x48
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	60f8      	str	r0, [r7, #12]
 800bb2c:	60b9      	str	r1, [r7, #8]
 800bb2e:	607a      	str	r2, [r7, #4]
 800bb30:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bb32:	f7f6 f805 	bl	8001b40 <HAL_GetTick>
 800bb36:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d107      	bne.n	800bb56 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb4a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bb52:	2301      	movs	r3, #1
 800bb54:	e16b      	b.n	800be2e <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bb5c:	b2db      	uxtb	r3, r3
 800bb5e:	2b01      	cmp	r3, #1
 800bb60:	f040 815e 	bne.w	800be20 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	2200      	movs	r2, #0
 800bb68:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bb6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	441a      	add	r2, r3
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d907      	bls.n	800bb88 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb7c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800bb84:	2301      	movs	r3, #1
 800bb86:	e152      	b.n	800be2e <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	2203      	movs	r2, #3
 800bb8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	2200      	movs	r2, #0
 800bb96:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb9c:	2b01      	cmp	r3, #1
 800bb9e:	d002      	beq.n	800bba6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800bba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bba2:	025b      	lsls	r3, r3, #9
 800bba4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bba6:	f04f 33ff 	mov.w	r3, #4294967295
 800bbaa:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	025b      	lsls	r3, r3, #9
 800bbb0:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800bbb2:	2390      	movs	r3, #144	; 0x90
 800bbb4:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	f107 0218 	add.w	r2, r7, #24
 800bbca:	4611      	mov	r1, r2
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f004 fa37 	bl	8010040 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	68da      	ldr	r2, [r3, #12]
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bbe0:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	2b01      	cmp	r3, #1
 800bbe6:	d90a      	bls.n	800bbfe <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	2220      	movs	r2, #32
 800bbec:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f004 fadb 	bl	80101b0 <SDMMC_CmdWriteMultiBlock>
 800bbfa:	6478      	str	r0, [r7, #68]	; 0x44
 800bbfc:	e009      	b.n	800bc12 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	2210      	movs	r2, #16
 800bc02:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f004 faad 	bl	801016a <SDMMC_CmdWriteSingleBlock>
 800bc10:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800bc12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d012      	beq.n	800bc3e <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	4a86      	ldr	r2, [pc, #536]	; (800be38 <HAL_SD_WriteBlocks+0x314>)
 800bc1e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc26:	431a      	orrs	r2, r3
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2201      	movs	r2, #1
 800bc30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	2200      	movs	r2, #0
 800bc38:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	e0f7      	b.n	800be2e <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800bc3e:	69fb      	ldr	r3, [r7, #28]
 800bc40:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bc42:	e05c      	b.n	800bcfe <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d037      	beq.n	800bcc2 <HAL_SD_WriteBlocks+0x19e>
 800bc52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc54:	2b1f      	cmp	r3, #31
 800bc56:	d934      	bls.n	800bcc2 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800bc58:	2300      	movs	r3, #0
 800bc5a:	643b      	str	r3, [r7, #64]	; 0x40
 800bc5c:	e02b      	b.n	800bcb6 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800bc5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc60:	781b      	ldrb	r3, [r3, #0]
 800bc62:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bc64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc66:	3301      	adds	r3, #1
 800bc68:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800bc6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc6c:	781b      	ldrb	r3, [r3, #0]
 800bc6e:	021a      	lsls	r2, r3, #8
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	4313      	orrs	r3, r2
 800bc74:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bc76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc78:	3301      	adds	r3, #1
 800bc7a:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800bc7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc7e:	781b      	ldrb	r3, [r3, #0]
 800bc80:	041a      	lsls	r2, r3, #16
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	4313      	orrs	r3, r2
 800bc86:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bc88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc8a:	3301      	adds	r3, #1
 800bc8c:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800bc8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc90:	781b      	ldrb	r3, [r3, #0]
 800bc92:	061a      	lsls	r2, r3, #24
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	4313      	orrs	r3, r2
 800bc98:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bc9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc9c:	3301      	adds	r3, #1
 800bc9e:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f107 0214 	add.w	r2, r7, #20
 800bca8:	4611      	mov	r1, r2
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f004 f94d 	bl	800ff4a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800bcb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcb2:	3301      	adds	r3, #1
 800bcb4:	643b      	str	r3, [r7, #64]	; 0x40
 800bcb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcb8:	2b07      	cmp	r3, #7
 800bcba:	d9d0      	bls.n	800bc5e <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800bcbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcbe:	3b20      	subs	r3, #32
 800bcc0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800bcc2:	f7f5 ff3d 	bl	8001b40 <HAL_GetTick>
 800bcc6:	4602      	mov	r2, r0
 800bcc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcca:	1ad3      	subs	r3, r2, r3
 800bccc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	d902      	bls.n	800bcd8 <HAL_SD_WriteBlocks+0x1b4>
 800bcd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d112      	bne.n	800bcfe <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	4a56      	ldr	r2, [pc, #344]	; (800be38 <HAL_SD_WriteBlocks+0x314>)
 800bcde:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bce6:	431a      	orrs	r2, r3
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	2201      	movs	r2, #1
 800bcf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800bcfa:	2303      	movs	r3, #3
 800bcfc:	e097      	b.n	800be2e <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd04:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d09b      	beq.n	800bc44 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	68da      	ldr	r2, [r3, #12]
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd1a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d022      	beq.n	800bd70 <HAL_SD_WriteBlocks+0x24c>
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	2b01      	cmp	r3, #1
 800bd2e:	d91f      	bls.n	800bd70 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd34:	2b03      	cmp	r3, #3
 800bd36:	d01b      	beq.n	800bd70 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f004 fa5b 	bl	80101f8 <SDMMC_CmdStopTransfer>
 800bd42:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800bd44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d012      	beq.n	800bd70 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	4a3a      	ldr	r2, [pc, #232]	; (800be38 <HAL_SD_WriteBlocks+0x314>)
 800bd50:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd58:	431a      	orrs	r2, r3
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2201      	movs	r2, #1
 800bd62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	e05e      	b.n	800be2e <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd76:	f003 0308 	and.w	r3, r3, #8
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d012      	beq.n	800bda4 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	4a2d      	ldr	r2, [pc, #180]	; (800be38 <HAL_SD_WriteBlocks+0x314>)
 800bd84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd8a:	f043 0208 	orr.w	r2, r3, #8
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	2201      	movs	r2, #1
 800bd96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bda0:	2301      	movs	r3, #1
 800bda2:	e044      	b.n	800be2e <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdaa:	f003 0302 	and.w	r3, r3, #2
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d012      	beq.n	800bdd8 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4a20      	ldr	r2, [pc, #128]	; (800be38 <HAL_SD_WriteBlocks+0x314>)
 800bdb8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdbe:	f043 0202 	orr.w	r2, r3, #2
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	2201      	movs	r2, #1
 800bdca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	e02a      	b.n	800be2e <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdde:	f003 0310 	and.w	r3, r3, #16
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d012      	beq.n	800be0c <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	4a13      	ldr	r2, [pc, #76]	; (800be38 <HAL_SD_WriteBlocks+0x314>)
 800bdec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdf2:	f043 0210 	orr.w	r2, r3, #16
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	2201      	movs	r2, #1
 800bdfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	2200      	movs	r2, #0
 800be06:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800be08:	2301      	movs	r3, #1
 800be0a:	e010      	b.n	800be2e <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	4a0a      	ldr	r2, [pc, #40]	; (800be3c <HAL_SD_WriteBlocks+0x318>)
 800be12:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	2201      	movs	r2, #1
 800be18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800be1c:	2300      	movs	r3, #0
 800be1e:	e006      	b.n	800be2e <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be24:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800be2c:	2301      	movs	r3, #1
  }
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3748      	adds	r7, #72	; 0x48
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
 800be36:	bf00      	nop
 800be38:	1fe00fff 	.word	0x1fe00fff
 800be3c:	18000f3a 	.word	0x18000f3a

0800be40 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800be40:	b480      	push	{r7}
 800be42:	b083      	sub	sp, #12
 800be44:	af00      	add	r7, sp, #0
 800be46:	4603      	mov	r3, r0
 800be48:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800be4a:	bf00      	nop
 800be4c:	370c      	adds	r7, #12
 800be4e:	46bd      	mov	sp, r7
 800be50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be54:	4770      	bx	lr
	...

0800be58 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800be58:	b480      	push	{r7}
 800be5a:	b083      	sub	sp, #12
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
 800be60:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be66:	0f9b      	lsrs	r3, r3, #30
 800be68:	b2da      	uxtb	r2, r3
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be72:	0e9b      	lsrs	r3, r3, #26
 800be74:	b2db      	uxtb	r3, r3
 800be76:	f003 030f 	and.w	r3, r3, #15
 800be7a:	b2da      	uxtb	r2, r3
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be84:	0e1b      	lsrs	r3, r3, #24
 800be86:	b2db      	uxtb	r3, r3
 800be88:	f003 0303 	and.w	r3, r3, #3
 800be8c:	b2da      	uxtb	r2, r3
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be96:	0c1b      	lsrs	r3, r3, #16
 800be98:	b2da      	uxtb	r2, r3
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bea2:	0a1b      	lsrs	r3, r3, #8
 800bea4:	b2da      	uxtb	r2, r3
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800beae:	b2da      	uxtb	r2, r3
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800beb8:	0d1b      	lsrs	r3, r3, #20
 800beba:	b29a      	uxth	r2, r3
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bec4:	0c1b      	lsrs	r3, r3, #16
 800bec6:	b2db      	uxtb	r3, r3
 800bec8:	f003 030f 	and.w	r3, r3, #15
 800becc:	b2da      	uxtb	r2, r3
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bed6:	0bdb      	lsrs	r3, r3, #15
 800bed8:	b2db      	uxtb	r3, r3
 800beda:	f003 0301 	and.w	r3, r3, #1
 800bede:	b2da      	uxtb	r2, r3
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bee8:	0b9b      	lsrs	r3, r3, #14
 800beea:	b2db      	uxtb	r3, r3
 800beec:	f003 0301 	and.w	r3, r3, #1
 800bef0:	b2da      	uxtb	r2, r3
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800befa:	0b5b      	lsrs	r3, r3, #13
 800befc:	b2db      	uxtb	r3, r3
 800befe:	f003 0301 	and.w	r3, r3, #1
 800bf02:	b2da      	uxtb	r2, r3
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf0c:	0b1b      	lsrs	r3, r3, #12
 800bf0e:	b2db      	uxtb	r3, r3
 800bf10:	f003 0301 	and.w	r3, r3, #1
 800bf14:	b2da      	uxtb	r2, r3
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d163      	bne.n	800bff0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf2c:	009a      	lsls	r2, r3, #2
 800bf2e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800bf32:	4013      	ands	r3, r2
 800bf34:	687a      	ldr	r2, [r7, #4]
 800bf36:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800bf38:	0f92      	lsrs	r2, r2, #30
 800bf3a:	431a      	orrs	r2, r3
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bf44:	0edb      	lsrs	r3, r3, #27
 800bf46:	b2db      	uxtb	r3, r3
 800bf48:	f003 0307 	and.w	r3, r3, #7
 800bf4c:	b2da      	uxtb	r2, r3
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bf56:	0e1b      	lsrs	r3, r3, #24
 800bf58:	b2db      	uxtb	r3, r3
 800bf5a:	f003 0307 	and.w	r3, r3, #7
 800bf5e:	b2da      	uxtb	r2, r3
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bf68:	0d5b      	lsrs	r3, r3, #21
 800bf6a:	b2db      	uxtb	r3, r3
 800bf6c:	f003 0307 	and.w	r3, r3, #7
 800bf70:	b2da      	uxtb	r2, r3
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bf7a:	0c9b      	lsrs	r3, r3, #18
 800bf7c:	b2db      	uxtb	r3, r3
 800bf7e:	f003 0307 	and.w	r3, r3, #7
 800bf82:	b2da      	uxtb	r2, r3
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bf8c:	0bdb      	lsrs	r3, r3, #15
 800bf8e:	b2db      	uxtb	r3, r3
 800bf90:	f003 0307 	and.w	r3, r3, #7
 800bf94:	b2da      	uxtb	r2, r3
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	691b      	ldr	r3, [r3, #16]
 800bf9e:	1c5a      	adds	r2, r3, #1
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	7e1b      	ldrb	r3, [r3, #24]
 800bfa8:	b2db      	uxtb	r3, r3
 800bfaa:	f003 0307 	and.w	r3, r3, #7
 800bfae:	3302      	adds	r3, #2
 800bfb0:	2201      	movs	r2, #1
 800bfb2:	fa02 f303 	lsl.w	r3, r2, r3
 800bfb6:	687a      	ldr	r2, [r7, #4]
 800bfb8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800bfba:	fb02 f203 	mul.w	r2, r2, r3
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	7a1b      	ldrb	r3, [r3, #8]
 800bfc6:	b2db      	uxtb	r3, r3
 800bfc8:	f003 030f 	and.w	r3, r3, #15
 800bfcc:	2201      	movs	r2, #1
 800bfce:	409a      	lsls	r2, r3
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfd8:	687a      	ldr	r2, [r7, #4]
 800bfda:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800bfdc:	0a52      	lsrs	r2, r2, #9
 800bfde:	fb02 f203 	mul.w	r2, r2, r3
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bfec:	659a      	str	r2, [r3, #88]	; 0x58
 800bfee:	e031      	b.n	800c054 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bff4:	2b01      	cmp	r3, #1
 800bff6:	d11d      	bne.n	800c034 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bffc:	041b      	lsls	r3, r3, #16
 800bffe:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c006:	0c1b      	lsrs	r3, r3, #16
 800c008:	431a      	orrs	r2, r3
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	691b      	ldr	r3, [r3, #16]
 800c012:	3301      	adds	r3, #1
 800c014:	029a      	lsls	r2, r3, #10
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c028:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	659a      	str	r2, [r3, #88]	; 0x58
 800c032:	e00f      	b.n	800c054 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	4a58      	ldr	r2, [pc, #352]	; (800c19c <HAL_SD_GetCardCSD+0x344>)
 800c03a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c040:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2201      	movs	r2, #1
 800c04c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c050:	2301      	movs	r3, #1
 800c052:	e09d      	b.n	800c190 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c058:	0b9b      	lsrs	r3, r3, #14
 800c05a:	b2db      	uxtb	r3, r3
 800c05c:	f003 0301 	and.w	r3, r3, #1
 800c060:	b2da      	uxtb	r2, r3
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c06a:	09db      	lsrs	r3, r3, #7
 800c06c:	b2db      	uxtb	r3, r3
 800c06e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c072:	b2da      	uxtb	r2, r3
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c07c:	b2db      	uxtb	r3, r3
 800c07e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c082:	b2da      	uxtb	r2, r3
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c08c:	0fdb      	lsrs	r3, r3, #31
 800c08e:	b2da      	uxtb	r2, r3
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c098:	0f5b      	lsrs	r3, r3, #29
 800c09a:	b2db      	uxtb	r3, r3
 800c09c:	f003 0303 	and.w	r3, r3, #3
 800c0a0:	b2da      	uxtb	r2, r3
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0aa:	0e9b      	lsrs	r3, r3, #26
 800c0ac:	b2db      	uxtb	r3, r3
 800c0ae:	f003 0307 	and.w	r3, r3, #7
 800c0b2:	b2da      	uxtb	r2, r3
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0bc:	0d9b      	lsrs	r3, r3, #22
 800c0be:	b2db      	uxtb	r3, r3
 800c0c0:	f003 030f 	and.w	r3, r3, #15
 800c0c4:	b2da      	uxtb	r2, r3
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0ce:	0d5b      	lsrs	r3, r3, #21
 800c0d0:	b2db      	uxtb	r3, r3
 800c0d2:	f003 0301 	and.w	r3, r3, #1
 800c0d6:	b2da      	uxtb	r2, r3
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0ea:	0c1b      	lsrs	r3, r3, #16
 800c0ec:	b2db      	uxtb	r3, r3
 800c0ee:	f003 0301 	and.w	r3, r3, #1
 800c0f2:	b2da      	uxtb	r2, r3
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0fe:	0bdb      	lsrs	r3, r3, #15
 800c100:	b2db      	uxtb	r3, r3
 800c102:	f003 0301 	and.w	r3, r3, #1
 800c106:	b2da      	uxtb	r2, r3
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c112:	0b9b      	lsrs	r3, r3, #14
 800c114:	b2db      	uxtb	r3, r3
 800c116:	f003 0301 	and.w	r3, r3, #1
 800c11a:	b2da      	uxtb	r2, r3
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c126:	0b5b      	lsrs	r3, r3, #13
 800c128:	b2db      	uxtb	r3, r3
 800c12a:	f003 0301 	and.w	r3, r3, #1
 800c12e:	b2da      	uxtb	r2, r3
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c13a:	0b1b      	lsrs	r3, r3, #12
 800c13c:	b2db      	uxtb	r3, r3
 800c13e:	f003 0301 	and.w	r3, r3, #1
 800c142:	b2da      	uxtb	r2, r3
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c14e:	0a9b      	lsrs	r3, r3, #10
 800c150:	b2db      	uxtb	r3, r3
 800c152:	f003 0303 	and.w	r3, r3, #3
 800c156:	b2da      	uxtb	r2, r3
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c162:	0a1b      	lsrs	r3, r3, #8
 800c164:	b2db      	uxtb	r3, r3
 800c166:	f003 0303 	and.w	r3, r3, #3
 800c16a:	b2da      	uxtb	r2, r3
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c176:	085b      	lsrs	r3, r3, #1
 800c178:	b2db      	uxtb	r3, r3
 800c17a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c17e:	b2da      	uxtb	r2, r3
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	2201      	movs	r2, #1
 800c18a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800c18e:	2300      	movs	r3, #0
}
 800c190:	4618      	mov	r0, r3
 800c192:	370c      	adds	r7, #12
 800c194:	46bd      	mov	sp, r7
 800c196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19a:	4770      	bx	lr
 800c19c:	1fe00fff 	.word	0x1fe00fff

0800c1a0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that 
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b094      	sub	sp, #80	; 0x50
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
 800c1a8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800c1b0:	f107 0308 	add.w	r3, r7, #8
 800c1b4:	4619      	mov	r1, r3
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f000 fb64 	bl	800c884 <SD_SendSDStatus>
 800c1bc:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800c1be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d011      	beq.n	800c1e8 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	4a4f      	ldr	r2, [pc, #316]	; (800c308 <HAL_SD_GetCardStatus+0x168>)
 800c1ca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1d2:	431a      	orrs	r2, r3
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2201      	movs	r2, #1
 800c1dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800c1e6:	e070      	b.n	800c2ca <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	099b      	lsrs	r3, r3, #6
 800c1ec:	b2db      	uxtb	r3, r3
 800c1ee:	f003 0303 	and.w	r3, r3, #3
 800c1f2:	b2da      	uxtb	r2, r3
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	095b      	lsrs	r3, r3, #5
 800c1fc:	b2db      	uxtb	r3, r3
 800c1fe:	f003 0301 	and.w	r3, r3, #1
 800c202:	b2da      	uxtb	r2, r3
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	0a1b      	lsrs	r3, r3, #8
 800c20c:	b29b      	uxth	r3, r3
 800c20e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c212:	b29a      	uxth	r2, r3
 800c214:	68bb      	ldr	r3, [r7, #8]
 800c216:	0e1b      	lsrs	r3, r3, #24
 800c218:	b29b      	uxth	r3, r3
 800c21a:	4313      	orrs	r3, r2
 800c21c:	b29a      	uxth	r2, r3
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	061a      	lsls	r2, r3, #24
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	021b      	lsls	r3, r3, #8
 800c22a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c22e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	0a1b      	lsrs	r3, r3, #8
 800c234:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c238:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	0e1b      	lsrs	r3, r3, #24
 800c23e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	b2da      	uxtb	r2, r3
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	0a1b      	lsrs	r3, r3, #8
 800c250:	b2da      	uxtb	r2, r3
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	0d1b      	lsrs	r3, r3, #20
 800c25a:	b2db      	uxtb	r3, r3
 800c25c:	f003 030f 	and.w	r3, r3, #15
 800c260:	b2da      	uxtb	r2, r3
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	0c1b      	lsrs	r3, r3, #16
 800c26a:	b29b      	uxth	r3, r3
 800c26c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c270:	b29a      	uxth	r2, r3
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	b29b      	uxth	r3, r3
 800c276:	b2db      	uxtb	r3, r3
 800c278:	b29b      	uxth	r3, r3
 800c27a:	4313      	orrs	r3, r2
 800c27c:	b29a      	uxth	r2, r3
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	0a9b      	lsrs	r3, r3, #10
 800c286:	b2db      	uxtb	r3, r3
 800c288:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c28c:	b2da      	uxtb	r2, r3
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	0a1b      	lsrs	r3, r3, #8
 800c296:	b2db      	uxtb	r3, r3
 800c298:	f003 0303 	and.w	r3, r3, #3
 800c29c:	b2da      	uxtb	r2, r3
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	091b      	lsrs	r3, r3, #4
 800c2a6:	b2db      	uxtb	r3, r3
 800c2a8:	f003 030f 	and.w	r3, r3, #15
 800c2ac:	b2da      	uxtb	r2, r3
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	b2db      	uxtb	r3, r3
 800c2b6:	f003 030f 	and.w	r3, r3, #15
 800c2ba:	b2da      	uxtb	r2, r3
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800c2c0:	69bb      	ldr	r3, [r7, #24]
 800c2c2:	0e1b      	lsrs	r3, r3, #24
 800c2c4:	b2da      	uxtb	r2, r3
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f003 fee0 	bl	8010098 <SDMMC_CmdBlockLength>
 800c2d8:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800c2da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d00d      	beq.n	800c2fc <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	4a08      	ldr	r2, [pc, #32]	; (800c308 <HAL_SD_GetCardStatus+0x168>)
 800c2e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c2ec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2201      	movs	r2, #1
 800c2f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800c2fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800c300:	4618      	mov	r0, r3
 800c302:	3750      	adds	r7, #80	; 0x50
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}
 800c308:	1fe00fff 	.word	0x1fe00fff

0800c30c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b083      	sub	sp, #12
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800c356:	2300      	movs	r3, #0
}
 800c358:	4618      	mov	r0, r3
 800c35a:	370c      	adds	r7, #12
 800c35c:	46bd      	mov	sp, r7
 800c35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c362:	4770      	bx	lr

0800c364 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800c364:	b5b0      	push	{r4, r5, r7, lr}
 800c366:	b08e      	sub	sp, #56	; 0x38
 800c368:	af04      	add	r7, sp, #16
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800c36e:	2300      	movs	r3, #0
 800c370:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2203      	movs	r2, #3
 800c378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c380:	2b03      	cmp	r3, #3
 800c382:	d02e      	beq.n	800c3e2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c38a:	d106      	bne.n	800c39a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c390:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	639a      	str	r2, [r3, #56]	; 0x38
 800c398:	e029      	b.n	800c3ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c3a0:	d10a      	bne.n	800c3b8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 fb66 	bl	800ca74 <SD_WideBus_Enable>
 800c3a8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3ae:	6a3b      	ldr	r3, [r7, #32]
 800c3b0:	431a      	orrs	r2, r3
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	639a      	str	r2, [r3, #56]	; 0x38
 800c3b6:	e01a      	b.n	800c3ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d10a      	bne.n	800c3d4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 fba3 	bl	800cb0a <SD_WideBus_Disable>
 800c3c4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3ca:	6a3b      	ldr	r3, [r7, #32]
 800c3cc:	431a      	orrs	r2, r3
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	639a      	str	r2, [r3, #56]	; 0x38
 800c3d2:	e00c      	b.n	800c3ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3d8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	639a      	str	r2, [r3, #56]	; 0x38
 800c3e0:	e005      	b.n	800c3ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3e6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d007      	beq.n	800c406 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	4a2e      	ldr	r2, [pc, #184]	; (800c4b4 <HAL_SD_ConfigWideBusOperation+0x150>)
 800c3fc:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800c3fe:	2301      	movs	r3, #1
 800c400:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c404:	e034      	b.n	800c470 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	685b      	ldr	r3, [r3, #4]
 800c40a:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	689b      	ldr	r3, [r3, #8]
 800c410:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	691b      	ldr	r3, [r3, #16]
 800c41a:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	695b      	ldr	r3, [r3, #20]
 800c420:	2b03      	cmp	r3, #3
 800c422:	d903      	bls.n	800c42c <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	695b      	ldr	r3, [r3, #20]
 800c428:	61bb      	str	r3, [r7, #24]
 800c42a:	e012      	b.n	800c452 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c434:	d103      	bne.n	800c43e <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	695b      	ldr	r3, [r3, #20]
 800c43a:	61bb      	str	r3, [r7, #24]
 800c43c:	e009      	b.n	800c452 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c446:	d102      	bne.n	800c44e <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800c448:	2302      	movs	r3, #2
 800c44a:	61bb      	str	r3, [r7, #24]
 800c44c:	e001      	b.n	800c452 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800c44e:	2304      	movs	r3, #4
 800c450:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681d      	ldr	r5, [r3, #0]
 800c456:	466c      	mov	r4, sp
 800c458:	f107 0314 	add.w	r3, r7, #20
 800c45c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c460:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c464:	f107 0308 	add.w	r3, r7, #8
 800c468:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c46a:	4628      	mov	r0, r5
 800c46c:	f003 fd36 	bl	800fedc <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c478:	4618      	mov	r0, r3
 800c47a:	f003 fe0d 	bl	8010098 <SDMMC_CmdBlockLength>
 800c47e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c480:	6a3b      	ldr	r3, [r7, #32]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d00c      	beq.n	800c4a0 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	4a0a      	ldr	r2, [pc, #40]	; (800c4b4 <HAL_SD_ConfigWideBusOperation+0x150>)
 800c48c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c492:	6a3b      	ldr	r3, [r7, #32]
 800c494:	431a      	orrs	r2, r3
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800c49a:	2301      	movs	r3, #1
 800c49c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2201      	movs	r2, #1
 800c4a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800c4a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3728      	adds	r7, #40	; 0x28
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bdb0      	pop	{r4, r5, r7, pc}
 800c4b4:	1fe00fff 	.word	0x1fe00fff

0800c4b8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b086      	sub	sp, #24
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c4c4:	f107 030c 	add.w	r3, r7, #12
 800c4c8:	4619      	mov	r1, r3
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f000 faaa 	bl	800ca24 <SD_SendStatus>
 800c4d0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d005      	beq.n	800c4e4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c4dc:	697b      	ldr	r3, [r7, #20]
 800c4de:	431a      	orrs	r2, r3
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	0a5b      	lsrs	r3, r3, #9
 800c4e8:	f003 030f 	and.w	r3, r3, #15
 800c4ec:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c4ee:	693b      	ldr	r3, [r7, #16]
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	3718      	adds	r7, #24
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}

0800c4f8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c4f8:	b590      	push	{r4, r7, lr}
 800c4fa:	b091      	sub	sp, #68	; 0x44
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800c500:	2301      	movs	r3, #1
 800c502:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	4618      	mov	r0, r3
 800c50a:	f003 fd40 	bl	800ff8e <SDMMC_GetPowerState>
 800c50e:	4603      	mov	r3, r0
 800c510:	2b00      	cmp	r3, #0
 800c512:	d102      	bne.n	800c51a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c514:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c518:	e0a8      	b.n	800c66c <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c51e:	2b03      	cmp	r3, #3
 800c520:	d02e      	beq.n	800c580 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	4618      	mov	r0, r3
 800c528:	f003 ff8c 	bl	8010444 <SDMMC_CmdSendCID>
 800c52c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c52e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c530:	2b00      	cmp	r3, #0
 800c532:	d001      	beq.n	800c538 <SD_InitCard+0x40>
    {
      return errorstate;
 800c534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c536:	e099      	b.n	800c66c <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	2100      	movs	r1, #0
 800c53e:	4618      	mov	r0, r3
 800c540:	f003 fd6b 	bl	801001a <SDMMC_GetResponse>
 800c544:	4602      	mov	r2, r0
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	2104      	movs	r1, #4
 800c550:	4618      	mov	r0, r3
 800c552:	f003 fd62 	bl	801001a <SDMMC_GetResponse>
 800c556:	4602      	mov	r2, r0
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	2108      	movs	r1, #8
 800c562:	4618      	mov	r0, r3
 800c564:	f003 fd59 	bl	801001a <SDMMC_GetResponse>
 800c568:	4602      	mov	r2, r0
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	210c      	movs	r1, #12
 800c574:	4618      	mov	r0, r3
 800c576:	f003 fd50 	bl	801001a <SDMMC_GetResponse>
 800c57a:	4602      	mov	r2, r0
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c584:	2b03      	cmp	r3, #3
 800c586:	d00d      	beq.n	800c5a4 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	f107 020e 	add.w	r2, r7, #14
 800c590:	4611      	mov	r1, r2
 800c592:	4618      	mov	r0, r3
 800c594:	f003 ff95 	bl	80104c2 <SDMMC_CmdSetRelAdd>
 800c598:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c59a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d001      	beq.n	800c5a4 <SD_InitCard+0xac>
    {
      return errorstate;
 800c5a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5a2:	e063      	b.n	800c66c <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5a8:	2b03      	cmp	r3, #3
 800c5aa:	d036      	beq.n	800c61a <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c5ac:	89fb      	ldrh	r3, [r7, #14]
 800c5ae:	461a      	mov	r2, r3
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681a      	ldr	r2, [r3, #0]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5bc:	041b      	lsls	r3, r3, #16
 800c5be:	4619      	mov	r1, r3
 800c5c0:	4610      	mov	r0, r2
 800c5c2:	f003 ff5e 	bl	8010482 <SDMMC_CmdSendCSD>
 800c5c6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c5c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d001      	beq.n	800c5d2 <SD_InitCard+0xda>
    {
      return errorstate;
 800c5ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5d0:	e04c      	b.n	800c66c <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	2100      	movs	r1, #0
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f003 fd1e 	bl	801001a <SDMMC_GetResponse>
 800c5de:	4602      	mov	r2, r0
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	2104      	movs	r1, #4
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f003 fd15 	bl	801001a <SDMMC_GetResponse>
 800c5f0:	4602      	mov	r2, r0
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	2108      	movs	r1, #8
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f003 fd0c 	bl	801001a <SDMMC_GetResponse>
 800c602:	4602      	mov	r2, r0
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	210c      	movs	r1, #12
 800c60e:	4618      	mov	r0, r3
 800c610:	f003 fd03 	bl	801001a <SDMMC_GetResponse>
 800c614:	4602      	mov	r2, r0
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	2104      	movs	r1, #4
 800c620:	4618      	mov	r0, r3
 800c622:	f003 fcfa 	bl	801001a <SDMMC_GetResponse>
 800c626:	4603      	mov	r3, r0
 800c628:	0d1a      	lsrs	r2, r3, #20
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c62e:	f107 0310 	add.w	r3, r7, #16
 800c632:	4619      	mov	r1, r3
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f7ff fc0f 	bl	800be58 <HAL_SD_GetCardCSD>
 800c63a:	4603      	mov	r3, r0
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d002      	beq.n	800c646 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c640:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c644:	e012      	b.n	800c66c <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6819      	ldr	r1, [r3, #0]
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c64e:	041b      	lsls	r3, r3, #16
 800c650:	f04f 0400 	mov.w	r4, #0
 800c654:	461a      	mov	r2, r3
 800c656:	4623      	mov	r3, r4
 800c658:	4608      	mov	r0, r1
 800c65a:	f003 fe09 	bl	8010270 <SDMMC_CmdSelDesel>
 800c65e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800c660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c662:	2b00      	cmp	r3, #0
 800c664:	d001      	beq.n	800c66a <SD_InitCard+0x172>
  {
    return errorstate;
 800c666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c668:	e000      	b.n	800c66c <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c66a:	2300      	movs	r3, #0
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	3744      	adds	r7, #68	; 0x44
 800c670:	46bd      	mov	sp, r7
 800c672:	bd90      	pop	{r4, r7, pc}

0800c674 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b088      	sub	sp, #32
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c67c:	2300      	movs	r3, #0
 800c67e:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800c680:	2300      	movs	r3, #0
 800c682:	61fb      	str	r3, [r7, #28]
 800c684:	2300      	movs	r3, #0
 800c686:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800c688:	f7f5 fa5a 	bl	8001b40 <HAL_GetTick>
 800c68c:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	4618      	mov	r0, r3
 800c694:	f003 fe10 	bl	80102b8 <SDMMC_CmdGoIdleState>
 800c698:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c69a:	693b      	ldr	r3, [r7, #16]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d001      	beq.n	800c6a4 <SD_PowerON+0x30>
  {
    return errorstate;
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	e0e9      	b.n	800c878 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f003 fe23 	bl	80102f4 <SDMMC_CmdOperCond>
 800c6ae:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d00d      	beq.n	800c6d2 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f003 fdf9 	bl	80102b8 <SDMMC_CmdGoIdleState>
 800c6c6:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d004      	beq.n	800c6d8 <SD_PowerON+0x64>
    {
      return errorstate;
 800c6ce:	693b      	ldr	r3, [r7, #16]
 800c6d0:	e0d2      	b.n	800c878 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2201      	movs	r2, #1
 800c6d6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6dc:	2b01      	cmp	r3, #1
 800c6de:	d137      	bne.n	800c750 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	2100      	movs	r1, #0
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f003 fe24 	bl	8010334 <SDMMC_CmdAppCommand>
 800c6ec:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d02d      	beq.n	800c750 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c6f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c6f8:	e0be      	b.n	800c878 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	2100      	movs	r1, #0
 800c700:	4618      	mov	r0, r3
 800c702:	f003 fe17 	bl	8010334 <SDMMC_CmdAppCommand>
 800c706:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c708:	693b      	ldr	r3, [r7, #16]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d001      	beq.n	800c712 <SD_PowerON+0x9e>
    {
      return errorstate;
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	e0b2      	b.n	800c878 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	495a      	ldr	r1, [pc, #360]	; (800c880 <SD_PowerON+0x20c>)
 800c718:	4618      	mov	r0, r3
 800c71a:	f003 fe2e 	bl	801037a <SDMMC_CmdAppOperCommand>
 800c71e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d002      	beq.n	800c72c <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c726:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c72a:	e0a5      	b.n	800c878 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	2100      	movs	r1, #0
 800c732:	4618      	mov	r0, r3
 800c734:	f003 fc71 	bl	801001a <SDMMC_GetResponse>
 800c738:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c73a:	69fb      	ldr	r3, [r7, #28]
 800c73c:	0fdb      	lsrs	r3, r3, #31
 800c73e:	2b01      	cmp	r3, #1
 800c740:	d101      	bne.n	800c746 <SD_PowerON+0xd2>
 800c742:	2301      	movs	r3, #1
 800c744:	e000      	b.n	800c748 <SD_PowerON+0xd4>
 800c746:	2300      	movs	r3, #0
 800c748:	61bb      	str	r3, [r7, #24]

    count++;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	3301      	adds	r3, #1
 800c74e:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c756:	4293      	cmp	r3, r2
 800c758:	d802      	bhi.n	800c760 <SD_PowerON+0xec>
 800c75a:	69bb      	ldr	r3, [r7, #24]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d0cc      	beq.n	800c6fa <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c766:	4293      	cmp	r3, r2
 800c768:	d902      	bls.n	800c770 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c76a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c76e:	e083      	b.n	800c878 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800c770:	69fb      	ldr	r3, [r7, #28]
 800c772:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c776:	2b00      	cmp	r3, #0
 800c778:	d07d      	beq.n	800c876 <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2201      	movs	r2, #1
 800c77e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	699b      	ldr	r3, [r3, #24]
 800c784:	2b02      	cmp	r3, #2
 800c786:	d176      	bne.n	800c876 <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800c788:	69fb      	ldr	r3, [r7, #28]
 800c78a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d071      	beq.n	800c876 <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c798:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	681a      	ldr	r2, [r3, #0]
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	f042 0208 	orr.w	r2, r2, #8
 800c7a8:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	f003 feee 	bl	8010590 <SDMMC_CmdVoltageSwitch>
 800c7b4:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c7b6:	693b      	ldr	r3, [r7, #16]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d00c      	beq.n	800c7d6 <SD_PowerON+0x162>
        {
          return errorstate;
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	e05b      	b.n	800c878 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c7c0:	f7f5 f9be 	bl	8001b40 <HAL_GetTick>
 800c7c4:	4602      	mov	r2, r0
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	1ad3      	subs	r3, r2, r3
 800c7ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7ce:	d102      	bne.n	800c7d6 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800c7d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c7d4:	e050      	b.n	800c878 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c7e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c7e4:	d1ec      	bne.n	800c7c0 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800c7ee:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c7fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c7fe:	d002      	beq.n	800c806 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800c800:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c804:	e038      	b.n	800c878 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800c806:	2001      	movs	r0, #1
 800c808:	f7ff fb1a 	bl	800be40 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	681a      	ldr	r2, [r3, #0]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f042 0204 	orr.w	r2, r2, #4
 800c81a:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800c81c:	e00a      	b.n	800c834 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c81e:	f7f5 f98f 	bl	8001b40 <HAL_GetTick>
 800c822:	4602      	mov	r2, r0
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	1ad3      	subs	r3, r2, r3
 800c828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c82c:	d102      	bne.n	800c834 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800c82e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c832:	e021      	b.n	800c878 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c83a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c83e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c842:	d1ec      	bne.n	800c81e <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800c84c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c854:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c858:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c85c:	d102      	bne.n	800c864 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c85e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c862:	e009      	b.n	800c878 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	2213      	movs	r2, #19
 800c86a:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f04f 32ff 	mov.w	r2, #4294967295
 800c874:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800c876:	2300      	movs	r3, #0
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3720      	adds	r7, #32
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}
 800c880:	c1100000 	.word	0xc1100000

0800c884 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b08c      	sub	sp, #48	; 0x30
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
 800c88c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c88e:	f7f5 f957 	bl	8001b40 <HAL_GetTick>
 800c892:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	2100      	movs	r1, #0
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f003 fbbb 	bl	801001a <SDMMC_GetResponse>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c8ae:	d102      	bne.n	800c8b6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c8b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c8b4:	e0b0      	b.n	800ca18 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	2140      	movs	r1, #64	; 0x40
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f003 fbeb 	bl	8010098 <SDMMC_CmdBlockLength>
 800c8c2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c8c4:	6a3b      	ldr	r3, [r7, #32]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d005      	beq.n	800c8d6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800c8d2:	6a3b      	ldr	r3, [r7, #32]
 800c8d4:	e0a0      	b.n	800ca18 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681a      	ldr	r2, [r3, #0]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c8de:	041b      	lsls	r3, r3, #16
 800c8e0:	4619      	mov	r1, r3
 800c8e2:	4610      	mov	r0, r2
 800c8e4:	f003 fd26 	bl	8010334 <SDMMC_CmdAppCommand>
 800c8e8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c8ea:	6a3b      	ldr	r3, [r7, #32]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d005      	beq.n	800c8fc <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800c8f8:	6a3b      	ldr	r3, [r7, #32]
 800c8fa:	e08d      	b.n	800ca18 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c8fc:	f04f 33ff 	mov.w	r3, #4294967295
 800c900:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800c902:	2340      	movs	r3, #64	; 0x40
 800c904:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800c906:	2360      	movs	r3, #96	; 0x60
 800c908:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c90a:	2302      	movs	r3, #2
 800c90c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c90e:	2300      	movs	r3, #0
 800c910:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800c912:	2301      	movs	r3, #1
 800c914:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	f107 0208 	add.w	r2, r7, #8
 800c91e:	4611      	mov	r1, r2
 800c920:	4618      	mov	r0, r3
 800c922:	f003 fb8d 	bl	8010040 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	4618      	mov	r0, r3
 800c92c:	f003 fe0e 	bl	801054c <SDMMC_CmdStatusRegister>
 800c930:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c932:	6a3b      	ldr	r3, [r7, #32]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d02b      	beq.n	800c990 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800c940:	6a3b      	ldr	r3, [r7, #32]
 800c942:	e069      	b.n	800ca18 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c94a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d013      	beq.n	800c97a <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800c952:	2300      	movs	r3, #0
 800c954:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c956:	e00d      	b.n	800c974 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	4618      	mov	r0, r3
 800c95e:	f003 fae7 	bl	800ff30 <SDMMC_ReadFIFO>
 800c962:	4602      	mov	r2, r0
 800c964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c966:	601a      	str	r2, [r3, #0]
        pData++;
 800c968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c96a:	3304      	adds	r3, #4
 800c96c:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800c96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c970:	3301      	adds	r3, #1
 800c972:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c976:	2b07      	cmp	r3, #7
 800c978:	d9ee      	bls.n	800c958 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c97a:	f7f5 f8e1 	bl	8001b40 <HAL_GetTick>
 800c97e:	4602      	mov	r2, r0
 800c980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c982:	1ad3      	subs	r3, r2, r3
 800c984:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c988:	d102      	bne.n	800c990 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c98a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c98e:	e043      	b.n	800ca18 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c996:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d0d2      	beq.n	800c944 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9a4:	f003 0308 	and.w	r3, r3, #8
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d001      	beq.n	800c9b0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c9ac:	2308      	movs	r3, #8
 800c9ae:	e033      	b.n	800ca18 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9b6:	f003 0302 	and.w	r3, r3, #2
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d001      	beq.n	800c9c2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c9be:	2302      	movs	r3, #2
 800c9c0:	e02a      	b.n	800ca18 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9c8:	f003 0320 	and.w	r3, r3, #32
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d017      	beq.n	800ca00 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800c9d0:	2320      	movs	r3, #32
 800c9d2:	e021      	b.n	800ca18 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f003 faa9 	bl	800ff30 <SDMMC_ReadFIFO>
 800c9de:	4602      	mov	r2, r0
 800c9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e2:	601a      	str	r2, [r3, #0]
    pData++;
 800c9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e6:	3304      	adds	r3, #4
 800c9e8:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c9ea:	f7f5 f8a9 	bl	8001b40 <HAL_GetTick>
 800c9ee:	4602      	mov	r2, r0
 800c9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f2:	1ad3      	subs	r3, r2, r3
 800c9f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9f8:	d102      	bne.n	800ca00 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c9fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c9fe:	e00b      	b.n	800ca18 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d1e2      	bne.n	800c9d4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	4a03      	ldr	r2, [pc, #12]	; (800ca20 <SD_SendSDStatus+0x19c>)
 800ca14:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800ca16:	2300      	movs	r3, #0
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3730      	adds	r7, #48	; 0x30
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}
 800ca20:	18000f3a 	.word	0x18000f3a

0800ca24 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b084      	sub	sp, #16
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
 800ca2c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d102      	bne.n	800ca3a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ca34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ca38:	e018      	b.n	800ca6c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681a      	ldr	r2, [r3, #0]
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca42:	041b      	lsls	r3, r3, #16
 800ca44:	4619      	mov	r1, r3
 800ca46:	4610      	mov	r0, r2
 800ca48:	f003 fd5d 	bl	8010506 <SDMMC_CmdSendStatus>
 800ca4c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d001      	beq.n	800ca58 <SD_SendStatus+0x34>
  {
    return errorstate;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	e009      	b.n	800ca6c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	2100      	movs	r1, #0
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f003 fadb 	bl	801001a <SDMMC_GetResponse>
 800ca64:	4602      	mov	r2, r0
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ca6a:	2300      	movs	r3, #0
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3710      	adds	r7, #16
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}

0800ca74 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b086      	sub	sp, #24
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	60fb      	str	r3, [r7, #12]
 800ca80:	2300      	movs	r3, #0
 800ca82:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	2100      	movs	r1, #0
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f003 fac5 	bl	801001a <SDMMC_GetResponse>
 800ca90:	4603      	mov	r3, r0
 800ca92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca9a:	d102      	bne.n	800caa2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ca9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800caa0:	e02f      	b.n	800cb02 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800caa2:	f107 030c 	add.w	r3, r7, #12
 800caa6:	4619      	mov	r1, r3
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f000 f879 	bl	800cba0 <SD_FindSCR>
 800caae:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d001      	beq.n	800caba <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	e023      	b.n	800cb02 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d01c      	beq.n	800cafe <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681a      	ldr	r2, [r3, #0]
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cacc:	041b      	lsls	r3, r3, #16
 800cace:	4619      	mov	r1, r3
 800cad0:	4610      	mov	r0, r2
 800cad2:	f003 fc2f 	bl	8010334 <SDMMC_CmdAppCommand>
 800cad6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d001      	beq.n	800cae2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	e00f      	b.n	800cb02 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	2102      	movs	r1, #2
 800cae8:	4618      	mov	r0, r3
 800caea:	f003 fc66 	bl	80103ba <SDMMC_CmdBusWidth>
 800caee:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800caf0:	697b      	ldr	r3, [r7, #20]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d001      	beq.n	800cafa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	e003      	b.n	800cb02 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800cafa:	2300      	movs	r3, #0
 800cafc:	e001      	b.n	800cb02 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cafe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	3718      	adds	r7, #24
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}

0800cb0a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800cb0a:	b580      	push	{r7, lr}
 800cb0c:	b086      	sub	sp, #24
 800cb0e:	af00      	add	r7, sp, #0
 800cb10:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800cb12:	2300      	movs	r3, #0
 800cb14:	60fb      	str	r3, [r7, #12]
 800cb16:	2300      	movs	r3, #0
 800cb18:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	2100      	movs	r1, #0
 800cb20:	4618      	mov	r0, r3
 800cb22:	f003 fa7a 	bl	801001a <SDMMC_GetResponse>
 800cb26:	4603      	mov	r3, r0
 800cb28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cb30:	d102      	bne.n	800cb38 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cb32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cb36:	e02f      	b.n	800cb98 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800cb38:	f107 030c 	add.w	r3, r7, #12
 800cb3c:	4619      	mov	r1, r3
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f000 f82e 	bl	800cba0 <SD_FindSCR>
 800cb44:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d001      	beq.n	800cb50 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800cb4c:	697b      	ldr	r3, [r7, #20]
 800cb4e:	e023      	b.n	800cb98 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800cb50:	693b      	ldr	r3, [r7, #16]
 800cb52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d01c      	beq.n	800cb94 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681a      	ldr	r2, [r3, #0]
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb62:	041b      	lsls	r3, r3, #16
 800cb64:	4619      	mov	r1, r3
 800cb66:	4610      	mov	r0, r2
 800cb68:	f003 fbe4 	bl	8010334 <SDMMC_CmdAppCommand>
 800cb6c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cb6e:	697b      	ldr	r3, [r7, #20]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d001      	beq.n	800cb78 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800cb74:	697b      	ldr	r3, [r7, #20]
 800cb76:	e00f      	b.n	800cb98 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	2100      	movs	r1, #0
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f003 fc1b 	bl	80103ba <SDMMC_CmdBusWidth>
 800cb84:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cb86:	697b      	ldr	r3, [r7, #20]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d001      	beq.n	800cb90 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800cb8c:	697b      	ldr	r3, [r7, #20]
 800cb8e:	e003      	b.n	800cb98 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800cb90:	2300      	movs	r3, #0
 800cb92:	e001      	b.n	800cb98 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cb94:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	3718      	adds	r7, #24
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}

0800cba0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b08e      	sub	sp, #56	; 0x38
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
 800cba8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cbaa:	f7f4 ffc9 	bl	8001b40 <HAL_GetTick>
 800cbae:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	60bb      	str	r3, [r7, #8]
 800cbb8:	2300      	movs	r3, #0
 800cbba:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	2108      	movs	r1, #8
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f003 fa66 	bl	8010098 <SDMMC_CmdBlockLength>
 800cbcc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800cbce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d001      	beq.n	800cbd8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800cbd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd6:	e0ad      	b.n	800cd34 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681a      	ldr	r2, [r3, #0]
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cbe0:	041b      	lsls	r3, r3, #16
 800cbe2:	4619      	mov	r1, r3
 800cbe4:	4610      	mov	r0, r2
 800cbe6:	f003 fba5 	bl	8010334 <SDMMC_CmdAppCommand>
 800cbea:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800cbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d001      	beq.n	800cbf6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800cbf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbf4:	e09e      	b.n	800cd34 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cbf6:	f04f 33ff 	mov.w	r3, #4294967295
 800cbfa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800cbfc:	2308      	movs	r3, #8
 800cbfe:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800cc00:	2330      	movs	r3, #48	; 0x30
 800cc02:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cc04:	2302      	movs	r3, #2
 800cc06:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	f107 0210 	add.w	r2, r7, #16
 800cc18:	4611      	mov	r1, r2
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f003 fa10 	bl	8010040 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	4618      	mov	r0, r3
 800cc26:	f003 fbeb 	bl	8010400 <SDMMC_CmdSendSCR>
 800cc2a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d027      	beq.n	800cc82 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800cc32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc34:	e07e      	b.n	800cd34 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d113      	bne.n	800cc6c <SD_FindSCR+0xcc>
 800cc44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d110      	bne.n	800cc6c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f003 f96e 	bl	800ff30 <SDMMC_ReadFIFO>
 800cc54:	4603      	mov	r3, r0
 800cc56:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f003 f967 	bl	800ff30 <SDMMC_ReadFIFO>
 800cc62:	4603      	mov	r3, r0
 800cc64:	60fb      	str	r3, [r7, #12]
      index++;
 800cc66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc68:	3301      	adds	r3, #1
 800cc6a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cc6c:	f7f4 ff68 	bl	8001b40 <HAL_GetTick>
 800cc70:	4602      	mov	r2, r0
 800cc72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc74:	1ad3      	subs	r3, r2, r3
 800cc76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc7a:	d102      	bne.n	800cc82 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800cc7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cc80:	e058      	b.n	800cd34 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc88:	f240 532a 	movw	r3, #1322	; 0x52a
 800cc8c:	4013      	ands	r3, r2
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d0d1      	beq.n	800cc36 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc98:	f003 0308 	and.w	r3, r3, #8
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d005      	beq.n	800ccac <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	2208      	movs	r2, #8
 800cca6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800cca8:	2308      	movs	r3, #8
 800ccaa:	e043      	b.n	800cd34 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccb2:	f003 0302 	and.w	r3, r3, #2
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d005      	beq.n	800ccc6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	2202      	movs	r2, #2
 800ccc0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ccc2:	2302      	movs	r3, #2
 800ccc4:	e036      	b.n	800cd34 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cccc:	f003 0320 	and.w	r3, r3, #32
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d005      	beq.n	800cce0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	2220      	movs	r2, #32
 800ccda:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ccdc:	2320      	movs	r3, #32
 800ccde:	e029      	b.n	800cd34 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	4a15      	ldr	r2, [pc, #84]	; (800cd3c <SD_FindSCR+0x19c>)
 800cce6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	061a      	lsls	r2, r3, #24
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	021b      	lsls	r3, r3, #8
 800ccf0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ccf4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	0a1b      	lsrs	r3, r3, #8
 800ccfa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ccfe:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	0e1b      	lsrs	r3, r3, #24
 800cd04:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800cd06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd08:	601a      	str	r2, [r3, #0]
    scr++;
 800cd0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd0c:	3304      	adds	r3, #4
 800cd0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	061a      	lsls	r2, r3, #24
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	021b      	lsls	r3, r3, #8
 800cd18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cd1c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800cd1e:	68bb      	ldr	r3, [r7, #8]
 800cd20:	0a1b      	lsrs	r3, r3, #8
 800cd22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800cd26:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	0e1b      	lsrs	r3, r3, #24
 800cd2c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800cd2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd30:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800cd32:	2300      	movs	r3, #0
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3738      	adds	r7, #56	; 0x38
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}
 800cd3c:	18000f3a 	.word	0x18000f3a

0800cd40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b082      	sub	sp, #8
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d101      	bne.n	800cd52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cd4e:	2301      	movs	r3, #1
 800cd50:	e01d      	b.n	800cd8e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd58:	b2db      	uxtb	r3, r3
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d106      	bne.n	800cd6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2200      	movs	r2, #0
 800cd62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f7f4 fcc0 	bl	80016ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2202      	movs	r2, #2
 800cd70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681a      	ldr	r2, [r3, #0]
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	3304      	adds	r3, #4
 800cd7c:	4619      	mov	r1, r3
 800cd7e:	4610      	mov	r0, r2
 800cd80:	f000 fa76 	bl	800d270 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2201      	movs	r2, #1
 800cd88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cd8c:	2300      	movs	r3, #0
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3708      	adds	r7, #8
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}
	...

0800cd98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cd98:	b480      	push	{r7}
 800cd9a:	b085      	sub	sp, #20
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	68da      	ldr	r2, [r3, #12]
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f042 0201 	orr.w	r2, r2, #1
 800cdae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	689a      	ldr	r2, [r3, #8]
 800cdb6:	4b0c      	ldr	r3, [pc, #48]	; (800cde8 <HAL_TIM_Base_Start_IT+0x50>)
 800cdb8:	4013      	ands	r3, r2
 800cdba:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	2b06      	cmp	r3, #6
 800cdc0:	d00b      	beq.n	800cdda <HAL_TIM_Base_Start_IT+0x42>
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cdc8:	d007      	beq.n	800cdda <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	681a      	ldr	r2, [r3, #0]
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	f042 0201 	orr.w	r2, r2, #1
 800cdd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cdda:	2300      	movs	r3, #0
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	3714      	adds	r7, #20
 800cde0:	46bd      	mov	sp, r7
 800cde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde6:	4770      	bx	lr
 800cde8:	00010007 	.word	0x00010007

0800cdec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800cdec:	b480      	push	{r7}
 800cdee:	b083      	sub	sp, #12
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	68da      	ldr	r2, [r3, #12]
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f022 0201 	bic.w	r2, r2, #1
 800ce02:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	6a1a      	ldr	r2, [r3, #32]
 800ce0a:	f241 1311 	movw	r3, #4369	; 0x1111
 800ce0e:	4013      	ands	r3, r2
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d10f      	bne.n	800ce34 <HAL_TIM_Base_Stop_IT+0x48>
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	6a1a      	ldr	r2, [r3, #32]
 800ce1a:	f240 4344 	movw	r3, #1092	; 0x444
 800ce1e:	4013      	ands	r3, r2
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d107      	bne.n	800ce34 <HAL_TIM_Base_Stop_IT+0x48>
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	681a      	ldr	r2, [r3, #0]
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	f022 0201 	bic.w	r2, r2, #1
 800ce32:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ce34:	2300      	movs	r3, #0
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	370c      	adds	r7, #12
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce40:	4770      	bx	lr

0800ce42 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ce42:	b580      	push	{r7, lr}
 800ce44:	b082      	sub	sp, #8
 800ce46:	af00      	add	r7, sp, #0
 800ce48:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	691b      	ldr	r3, [r3, #16]
 800ce50:	f003 0302 	and.w	r3, r3, #2
 800ce54:	2b02      	cmp	r3, #2
 800ce56:	d122      	bne.n	800ce9e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	68db      	ldr	r3, [r3, #12]
 800ce5e:	f003 0302 	and.w	r3, r3, #2
 800ce62:	2b02      	cmp	r3, #2
 800ce64:	d11b      	bne.n	800ce9e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f06f 0202 	mvn.w	r2, #2
 800ce6e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2201      	movs	r2, #1
 800ce74:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	699b      	ldr	r3, [r3, #24]
 800ce7c:	f003 0303 	and.w	r3, r3, #3
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d003      	beq.n	800ce8c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f000 f9d5 	bl	800d234 <HAL_TIM_IC_CaptureCallback>
 800ce8a:	e005      	b.n	800ce98 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f000 f9c7 	bl	800d220 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f000 f9d8 	bl	800d248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	691b      	ldr	r3, [r3, #16]
 800cea4:	f003 0304 	and.w	r3, r3, #4
 800cea8:	2b04      	cmp	r3, #4
 800ceaa:	d122      	bne.n	800cef2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	68db      	ldr	r3, [r3, #12]
 800ceb2:	f003 0304 	and.w	r3, r3, #4
 800ceb6:	2b04      	cmp	r3, #4
 800ceb8:	d11b      	bne.n	800cef2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f06f 0204 	mvn.w	r2, #4
 800cec2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2202      	movs	r2, #2
 800cec8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	699b      	ldr	r3, [r3, #24]
 800ced0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d003      	beq.n	800cee0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f000 f9ab 	bl	800d234 <HAL_TIM_IC_CaptureCallback>
 800cede:	e005      	b.n	800ceec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	f000 f99d 	bl	800d220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f000 f9ae 	bl	800d248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2200      	movs	r2, #0
 800cef0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	691b      	ldr	r3, [r3, #16]
 800cef8:	f003 0308 	and.w	r3, r3, #8
 800cefc:	2b08      	cmp	r3, #8
 800cefe:	d122      	bne.n	800cf46 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	68db      	ldr	r3, [r3, #12]
 800cf06:	f003 0308 	and.w	r3, r3, #8
 800cf0a:	2b08      	cmp	r3, #8
 800cf0c:	d11b      	bne.n	800cf46 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	f06f 0208 	mvn.w	r2, #8
 800cf16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2204      	movs	r2, #4
 800cf1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	69db      	ldr	r3, [r3, #28]
 800cf24:	f003 0303 	and.w	r3, r3, #3
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d003      	beq.n	800cf34 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f000 f981 	bl	800d234 <HAL_TIM_IC_CaptureCallback>
 800cf32:	e005      	b.n	800cf40 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f000 f973 	bl	800d220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f000 f984 	bl	800d248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2200      	movs	r2, #0
 800cf44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	691b      	ldr	r3, [r3, #16]
 800cf4c:	f003 0310 	and.w	r3, r3, #16
 800cf50:	2b10      	cmp	r3, #16
 800cf52:	d122      	bne.n	800cf9a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	68db      	ldr	r3, [r3, #12]
 800cf5a:	f003 0310 	and.w	r3, r3, #16
 800cf5e:	2b10      	cmp	r3, #16
 800cf60:	d11b      	bne.n	800cf9a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f06f 0210 	mvn.w	r2, #16
 800cf6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2208      	movs	r2, #8
 800cf70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	69db      	ldr	r3, [r3, #28]
 800cf78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d003      	beq.n	800cf88 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f000 f957 	bl	800d234 <HAL_TIM_IC_CaptureCallback>
 800cf86:	e005      	b.n	800cf94 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f000 f949 	bl	800d220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f000 f95a 	bl	800d248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2200      	movs	r2, #0
 800cf98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	691b      	ldr	r3, [r3, #16]
 800cfa0:	f003 0301 	and.w	r3, r3, #1
 800cfa4:	2b01      	cmp	r3, #1
 800cfa6:	d10e      	bne.n	800cfc6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	68db      	ldr	r3, [r3, #12]
 800cfae:	f003 0301 	and.w	r3, r3, #1
 800cfb2:	2b01      	cmp	r3, #1
 800cfb4:	d107      	bne.n	800cfc6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	f06f 0201 	mvn.w	r2, #1
 800cfbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cfc0:	6878      	ldr	r0, [r7, #4]
 800cfc2:	f7f4 f849 	bl	8001058 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	691b      	ldr	r3, [r3, #16]
 800cfcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfd0:	2b80      	cmp	r3, #128	; 0x80
 800cfd2:	d10e      	bne.n	800cff2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	68db      	ldr	r3, [r3, #12]
 800cfda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfde:	2b80      	cmp	r3, #128	; 0x80
 800cfe0:	d107      	bne.n	800cff2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cfea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f000 fb09 	bl	800d604 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	691b      	ldr	r3, [r3, #16]
 800cff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d000:	d10e      	bne.n	800d020 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	68db      	ldr	r3, [r3, #12]
 800d008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d00c:	2b80      	cmp	r3, #128	; 0x80
 800d00e:	d107      	bne.n	800d020 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f000 fafc 	bl	800d618 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	691b      	ldr	r3, [r3, #16]
 800d026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d02a:	2b40      	cmp	r3, #64	; 0x40
 800d02c:	d10e      	bne.n	800d04c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	68db      	ldr	r3, [r3, #12]
 800d034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d038:	2b40      	cmp	r3, #64	; 0x40
 800d03a:	d107      	bne.n	800d04c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f000 f908 	bl	800d25c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	691b      	ldr	r3, [r3, #16]
 800d052:	f003 0320 	and.w	r3, r3, #32
 800d056:	2b20      	cmp	r3, #32
 800d058:	d10e      	bne.n	800d078 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	68db      	ldr	r3, [r3, #12]
 800d060:	f003 0320 	and.w	r3, r3, #32
 800d064:	2b20      	cmp	r3, #32
 800d066:	d107      	bne.n	800d078 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	f06f 0220 	mvn.w	r2, #32
 800d070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f000 fabc 	bl	800d5f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d078:	bf00      	nop
 800d07a:	3708      	adds	r7, #8
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}

0800d080 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b084      	sub	sp, #16
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
 800d088:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d090:	2b01      	cmp	r3, #1
 800d092:	d101      	bne.n	800d098 <HAL_TIM_ConfigClockSource+0x18>
 800d094:	2302      	movs	r3, #2
 800d096:	e0b7      	b.n	800d208 <HAL_TIM_ConfigClockSource+0x188>
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2201      	movs	r2, #1
 800d09c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2202      	movs	r2, #2
 800d0a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	689b      	ldr	r3, [r3, #8]
 800d0ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d0b0:	68fa      	ldr	r2, [r7, #12]
 800d0b2:	4b57      	ldr	r3, [pc, #348]	; (800d210 <HAL_TIM_ConfigClockSource+0x190>)
 800d0b4:	4013      	ands	r3, r2
 800d0b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d0be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	68fa      	ldr	r2, [r7, #12]
 800d0c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	2b70      	cmp	r3, #112	; 0x70
 800d0ce:	d02e      	beq.n	800d12e <HAL_TIM_ConfigClockSource+0xae>
 800d0d0:	2b70      	cmp	r3, #112	; 0x70
 800d0d2:	d812      	bhi.n	800d0fa <HAL_TIM_ConfigClockSource+0x7a>
 800d0d4:	2b30      	cmp	r3, #48	; 0x30
 800d0d6:	f000 8084 	beq.w	800d1e2 <HAL_TIM_ConfigClockSource+0x162>
 800d0da:	2b30      	cmp	r3, #48	; 0x30
 800d0dc:	d806      	bhi.n	800d0ec <HAL_TIM_ConfigClockSource+0x6c>
 800d0de:	2b10      	cmp	r3, #16
 800d0e0:	d07f      	beq.n	800d1e2 <HAL_TIM_ConfigClockSource+0x162>
 800d0e2:	2b20      	cmp	r3, #32
 800d0e4:	d07d      	beq.n	800d1e2 <HAL_TIM_ConfigClockSource+0x162>
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d07b      	beq.n	800d1e2 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800d0ea:	e084      	b.n	800d1f6 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800d0ec:	2b50      	cmp	r3, #80	; 0x50
 800d0ee:	d048      	beq.n	800d182 <HAL_TIM_ConfigClockSource+0x102>
 800d0f0:	2b60      	cmp	r3, #96	; 0x60
 800d0f2:	d056      	beq.n	800d1a2 <HAL_TIM_ConfigClockSource+0x122>
 800d0f4:	2b40      	cmp	r3, #64	; 0x40
 800d0f6:	d064      	beq.n	800d1c2 <HAL_TIM_ConfigClockSource+0x142>
      break;
 800d0f8:	e07d      	b.n	800d1f6 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800d0fa:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d0fe:	d070      	beq.n	800d1e2 <HAL_TIM_ConfigClockSource+0x162>
 800d100:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d104:	d809      	bhi.n	800d11a <HAL_TIM_ConfigClockSource+0x9a>
 800d106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d10a:	d027      	beq.n	800d15c <HAL_TIM_ConfigClockSource+0xdc>
 800d10c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d110:	d067      	beq.n	800d1e2 <HAL_TIM_ConfigClockSource+0x162>
 800d112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d116:	d06d      	beq.n	800d1f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d118:	e06d      	b.n	800d1f6 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800d11a:	4a3e      	ldr	r2, [pc, #248]	; (800d214 <HAL_TIM_ConfigClockSource+0x194>)
 800d11c:	4293      	cmp	r3, r2
 800d11e:	d060      	beq.n	800d1e2 <HAL_TIM_ConfigClockSource+0x162>
 800d120:	4a3d      	ldr	r2, [pc, #244]	; (800d218 <HAL_TIM_ConfigClockSource+0x198>)
 800d122:	4293      	cmp	r3, r2
 800d124:	d05d      	beq.n	800d1e2 <HAL_TIM_ConfigClockSource+0x162>
 800d126:	4a3d      	ldr	r2, [pc, #244]	; (800d21c <HAL_TIM_ConfigClockSource+0x19c>)
 800d128:	4293      	cmp	r3, r2
 800d12a:	d05a      	beq.n	800d1e2 <HAL_TIM_ConfigClockSource+0x162>
      break;
 800d12c:	e063      	b.n	800d1f6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6818      	ldr	r0, [r3, #0]
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	6899      	ldr	r1, [r3, #8]
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	685a      	ldr	r2, [r3, #4]
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	68db      	ldr	r3, [r3, #12]
 800d13e:	f000 f9af 	bl	800d4a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	689b      	ldr	r3, [r3, #8]
 800d148:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d150:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	68fa      	ldr	r2, [r7, #12]
 800d158:	609a      	str	r2, [r3, #8]
      break;
 800d15a:	e04c      	b.n	800d1f6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6818      	ldr	r0, [r3, #0]
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	6899      	ldr	r1, [r3, #8]
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	685a      	ldr	r2, [r3, #4]
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	68db      	ldr	r3, [r3, #12]
 800d16c:	f000 f998 	bl	800d4a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	689a      	ldr	r2, [r3, #8]
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d17e:	609a      	str	r2, [r3, #8]
      break;
 800d180:	e039      	b.n	800d1f6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	6818      	ldr	r0, [r3, #0]
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	6859      	ldr	r1, [r3, #4]
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	68db      	ldr	r3, [r3, #12]
 800d18e:	461a      	mov	r2, r3
 800d190:	f000 f908 	bl	800d3a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	2150      	movs	r1, #80	; 0x50
 800d19a:	4618      	mov	r0, r3
 800d19c:	f000 f962 	bl	800d464 <TIM_ITRx_SetConfig>
      break;
 800d1a0:	e029      	b.n	800d1f6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6818      	ldr	r0, [r3, #0]
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	6859      	ldr	r1, [r3, #4]
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	68db      	ldr	r3, [r3, #12]
 800d1ae:	461a      	mov	r2, r3
 800d1b0:	f000 f927 	bl	800d402 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	2160      	movs	r1, #96	; 0x60
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f000 f952 	bl	800d464 <TIM_ITRx_SetConfig>
      break;
 800d1c0:	e019      	b.n	800d1f6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6818      	ldr	r0, [r3, #0]
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	6859      	ldr	r1, [r3, #4]
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	68db      	ldr	r3, [r3, #12]
 800d1ce:	461a      	mov	r2, r3
 800d1d0:	f000 f8e8 	bl	800d3a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	2140      	movs	r1, #64	; 0x40
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f000 f942 	bl	800d464 <TIM_ITRx_SetConfig>
      break;
 800d1e0:	e009      	b.n	800d1f6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681a      	ldr	r2, [r3, #0]
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	4619      	mov	r1, r3
 800d1ec:	4610      	mov	r0, r2
 800d1ee:	f000 f939 	bl	800d464 <TIM_ITRx_SetConfig>
      break;
 800d1f2:	e000      	b.n	800d1f6 <HAL_TIM_ConfigClockSource+0x176>
      break;
 800d1f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2201      	movs	r2, #1
 800d1fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2200      	movs	r2, #0
 800d202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d206:	2300      	movs	r3, #0
}
 800d208:	4618      	mov	r0, r3
 800d20a:	3710      	adds	r7, #16
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}
 800d210:	ffceff88 	.word	0xffceff88
 800d214:	00100030 	.word	0x00100030
 800d218:	00100040 	.word	0x00100040
 800d21c:	00100020 	.word	0x00100020

0800d220 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d220:	b480      	push	{r7}
 800d222:	b083      	sub	sp, #12
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d228:	bf00      	nop
 800d22a:	370c      	adds	r7, #12
 800d22c:	46bd      	mov	sp, r7
 800d22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d232:	4770      	bx	lr

0800d234 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d234:	b480      	push	{r7}
 800d236:	b083      	sub	sp, #12
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d23c:	bf00      	nop
 800d23e:	370c      	adds	r7, #12
 800d240:	46bd      	mov	sp, r7
 800d242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d246:	4770      	bx	lr

0800d248 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d248:	b480      	push	{r7}
 800d24a:	b083      	sub	sp, #12
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d250:	bf00      	nop
 800d252:	370c      	adds	r7, #12
 800d254:	46bd      	mov	sp, r7
 800d256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25a:	4770      	bx	lr

0800d25c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d25c:	b480      	push	{r7}
 800d25e:	b083      	sub	sp, #12
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d264:	bf00      	nop
 800d266:	370c      	adds	r7, #12
 800d268:	46bd      	mov	sp, r7
 800d26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26e:	4770      	bx	lr

0800d270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d270:	b480      	push	{r7}
 800d272:	b085      	sub	sp, #20
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	4a40      	ldr	r2, [pc, #256]	; (800d384 <TIM_Base_SetConfig+0x114>)
 800d284:	4293      	cmp	r3, r2
 800d286:	d013      	beq.n	800d2b0 <TIM_Base_SetConfig+0x40>
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d28e:	d00f      	beq.n	800d2b0 <TIM_Base_SetConfig+0x40>
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	4a3d      	ldr	r2, [pc, #244]	; (800d388 <TIM_Base_SetConfig+0x118>)
 800d294:	4293      	cmp	r3, r2
 800d296:	d00b      	beq.n	800d2b0 <TIM_Base_SetConfig+0x40>
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	4a3c      	ldr	r2, [pc, #240]	; (800d38c <TIM_Base_SetConfig+0x11c>)
 800d29c:	4293      	cmp	r3, r2
 800d29e:	d007      	beq.n	800d2b0 <TIM_Base_SetConfig+0x40>
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	4a3b      	ldr	r2, [pc, #236]	; (800d390 <TIM_Base_SetConfig+0x120>)
 800d2a4:	4293      	cmp	r3, r2
 800d2a6:	d003      	beq.n	800d2b0 <TIM_Base_SetConfig+0x40>
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	4a3a      	ldr	r2, [pc, #232]	; (800d394 <TIM_Base_SetConfig+0x124>)
 800d2ac:	4293      	cmp	r3, r2
 800d2ae:	d108      	bne.n	800d2c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	685b      	ldr	r3, [r3, #4]
 800d2bc:	68fa      	ldr	r2, [r7, #12]
 800d2be:	4313      	orrs	r3, r2
 800d2c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	4a2f      	ldr	r2, [pc, #188]	; (800d384 <TIM_Base_SetConfig+0x114>)
 800d2c6:	4293      	cmp	r3, r2
 800d2c8:	d01f      	beq.n	800d30a <TIM_Base_SetConfig+0x9a>
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2d0:	d01b      	beq.n	800d30a <TIM_Base_SetConfig+0x9a>
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	4a2c      	ldr	r2, [pc, #176]	; (800d388 <TIM_Base_SetConfig+0x118>)
 800d2d6:	4293      	cmp	r3, r2
 800d2d8:	d017      	beq.n	800d30a <TIM_Base_SetConfig+0x9a>
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	4a2b      	ldr	r2, [pc, #172]	; (800d38c <TIM_Base_SetConfig+0x11c>)
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d013      	beq.n	800d30a <TIM_Base_SetConfig+0x9a>
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	4a2a      	ldr	r2, [pc, #168]	; (800d390 <TIM_Base_SetConfig+0x120>)
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d00f      	beq.n	800d30a <TIM_Base_SetConfig+0x9a>
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	4a29      	ldr	r2, [pc, #164]	; (800d394 <TIM_Base_SetConfig+0x124>)
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d00b      	beq.n	800d30a <TIM_Base_SetConfig+0x9a>
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	4a28      	ldr	r2, [pc, #160]	; (800d398 <TIM_Base_SetConfig+0x128>)
 800d2f6:	4293      	cmp	r3, r2
 800d2f8:	d007      	beq.n	800d30a <TIM_Base_SetConfig+0x9a>
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	4a27      	ldr	r2, [pc, #156]	; (800d39c <TIM_Base_SetConfig+0x12c>)
 800d2fe:	4293      	cmp	r3, r2
 800d300:	d003      	beq.n	800d30a <TIM_Base_SetConfig+0x9a>
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	4a26      	ldr	r2, [pc, #152]	; (800d3a0 <TIM_Base_SetConfig+0x130>)
 800d306:	4293      	cmp	r3, r2
 800d308:	d108      	bne.n	800d31c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d310:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	68db      	ldr	r3, [r3, #12]
 800d316:	68fa      	ldr	r2, [r7, #12]
 800d318:	4313      	orrs	r3, r2
 800d31a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	695b      	ldr	r3, [r3, #20]
 800d326:	4313      	orrs	r3, r2
 800d328:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	68fa      	ldr	r2, [r7, #12]
 800d32e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	689a      	ldr	r2, [r3, #8]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	681a      	ldr	r2, [r3, #0]
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	4a10      	ldr	r2, [pc, #64]	; (800d384 <TIM_Base_SetConfig+0x114>)
 800d344:	4293      	cmp	r3, r2
 800d346:	d00f      	beq.n	800d368 <TIM_Base_SetConfig+0xf8>
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	4a12      	ldr	r2, [pc, #72]	; (800d394 <TIM_Base_SetConfig+0x124>)
 800d34c:	4293      	cmp	r3, r2
 800d34e:	d00b      	beq.n	800d368 <TIM_Base_SetConfig+0xf8>
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	4a11      	ldr	r2, [pc, #68]	; (800d398 <TIM_Base_SetConfig+0x128>)
 800d354:	4293      	cmp	r3, r2
 800d356:	d007      	beq.n	800d368 <TIM_Base_SetConfig+0xf8>
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	4a10      	ldr	r2, [pc, #64]	; (800d39c <TIM_Base_SetConfig+0x12c>)
 800d35c:	4293      	cmp	r3, r2
 800d35e:	d003      	beq.n	800d368 <TIM_Base_SetConfig+0xf8>
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	4a0f      	ldr	r2, [pc, #60]	; (800d3a0 <TIM_Base_SetConfig+0x130>)
 800d364:	4293      	cmp	r3, r2
 800d366:	d103      	bne.n	800d370 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	691a      	ldr	r2, [r3, #16]
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2201      	movs	r2, #1
 800d374:	615a      	str	r2, [r3, #20]
}
 800d376:	bf00      	nop
 800d378:	3714      	adds	r7, #20
 800d37a:	46bd      	mov	sp, r7
 800d37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d380:	4770      	bx	lr
 800d382:	bf00      	nop
 800d384:	40010000 	.word	0x40010000
 800d388:	40000400 	.word	0x40000400
 800d38c:	40000800 	.word	0x40000800
 800d390:	40000c00 	.word	0x40000c00
 800d394:	40010400 	.word	0x40010400
 800d398:	40014000 	.word	0x40014000
 800d39c:	40014400 	.word	0x40014400
 800d3a0:	40014800 	.word	0x40014800

0800d3a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b087      	sub	sp, #28
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	60f8      	str	r0, [r7, #12]
 800d3ac:	60b9      	str	r1, [r7, #8]
 800d3ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	6a1b      	ldr	r3, [r3, #32]
 800d3b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	6a1b      	ldr	r3, [r3, #32]
 800d3ba:	f023 0201 	bic.w	r2, r3, #1
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	699b      	ldr	r3, [r3, #24]
 800d3c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d3c8:	693b      	ldr	r3, [r7, #16]
 800d3ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d3ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	011b      	lsls	r3, r3, #4
 800d3d4:	693a      	ldr	r2, [r7, #16]
 800d3d6:	4313      	orrs	r3, r2
 800d3d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d3da:	697b      	ldr	r3, [r7, #20]
 800d3dc:	f023 030a 	bic.w	r3, r3, #10
 800d3e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d3e2:	697a      	ldr	r2, [r7, #20]
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	4313      	orrs	r3, r2
 800d3e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	693a      	ldr	r2, [r7, #16]
 800d3ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	697a      	ldr	r2, [r7, #20]
 800d3f4:	621a      	str	r2, [r3, #32]
}
 800d3f6:	bf00      	nop
 800d3f8:	371c      	adds	r7, #28
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d400:	4770      	bx	lr

0800d402 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d402:	b480      	push	{r7}
 800d404:	b087      	sub	sp, #28
 800d406:	af00      	add	r7, sp, #0
 800d408:	60f8      	str	r0, [r7, #12]
 800d40a:	60b9      	str	r1, [r7, #8]
 800d40c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	6a1b      	ldr	r3, [r3, #32]
 800d412:	f023 0210 	bic.w	r2, r3, #16
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	699b      	ldr	r3, [r3, #24]
 800d41e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	6a1b      	ldr	r3, [r3, #32]
 800d424:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d42c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	031b      	lsls	r3, r3, #12
 800d432:	697a      	ldr	r2, [r7, #20]
 800d434:	4313      	orrs	r3, r2
 800d436:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d438:	693b      	ldr	r3, [r7, #16]
 800d43a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d43e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	011b      	lsls	r3, r3, #4
 800d444:	693a      	ldr	r2, [r7, #16]
 800d446:	4313      	orrs	r3, r2
 800d448:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	697a      	ldr	r2, [r7, #20]
 800d44e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	693a      	ldr	r2, [r7, #16]
 800d454:	621a      	str	r2, [r3, #32]
}
 800d456:	bf00      	nop
 800d458:	371c      	adds	r7, #28
 800d45a:	46bd      	mov	sp, r7
 800d45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d460:	4770      	bx	lr
	...

0800d464 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d464:	b480      	push	{r7}
 800d466:	b085      	sub	sp, #20
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
 800d46c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	689b      	ldr	r3, [r3, #8]
 800d472:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d474:	68fa      	ldr	r2, [r7, #12]
 800d476:	4b09      	ldr	r3, [pc, #36]	; (800d49c <TIM_ITRx_SetConfig+0x38>)
 800d478:	4013      	ands	r3, r2
 800d47a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d47c:	683a      	ldr	r2, [r7, #0]
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	4313      	orrs	r3, r2
 800d482:	f043 0307 	orr.w	r3, r3, #7
 800d486:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	68fa      	ldr	r2, [r7, #12]
 800d48c:	609a      	str	r2, [r3, #8]
}
 800d48e:	bf00      	nop
 800d490:	3714      	adds	r7, #20
 800d492:	46bd      	mov	sp, r7
 800d494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d498:	4770      	bx	lr
 800d49a:	bf00      	nop
 800d49c:	ffcfff8f 	.word	0xffcfff8f

0800d4a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	b087      	sub	sp, #28
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	60f8      	str	r0, [r7, #12]
 800d4a8:	60b9      	str	r1, [r7, #8]
 800d4aa:	607a      	str	r2, [r7, #4]
 800d4ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	689b      	ldr	r3, [r3, #8]
 800d4b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d4ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	021a      	lsls	r2, r3, #8
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	431a      	orrs	r2, r3
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	4313      	orrs	r3, r2
 800d4c8:	697a      	ldr	r2, [r7, #20]
 800d4ca:	4313      	orrs	r3, r2
 800d4cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	697a      	ldr	r2, [r7, #20]
 800d4d2:	609a      	str	r2, [r3, #8]
}
 800d4d4:	bf00      	nop
 800d4d6:	371c      	adds	r7, #28
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4de:	4770      	bx	lr

0800d4e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b085      	sub	sp, #20
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
 800d4e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d4f0:	2b01      	cmp	r3, #1
 800d4f2:	d101      	bne.n	800d4f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d4f4:	2302      	movs	r3, #2
 800d4f6:	e068      	b.n	800d5ca <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2201      	movs	r2, #1
 800d4fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2202      	movs	r2, #2
 800d504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	685b      	ldr	r3, [r3, #4]
 800d50e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	689b      	ldr	r3, [r3, #8]
 800d516:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	4a2e      	ldr	r2, [pc, #184]	; (800d5d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800d51e:	4293      	cmp	r3, r2
 800d520:	d004      	beq.n	800d52c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	4a2d      	ldr	r2, [pc, #180]	; (800d5dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800d528:	4293      	cmp	r3, r2
 800d52a:	d108      	bne.n	800d53e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d532:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	685b      	ldr	r3, [r3, #4]
 800d538:	68fa      	ldr	r2, [r7, #12]
 800d53a:	4313      	orrs	r3, r2
 800d53c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d544:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	68fa      	ldr	r2, [r7, #12]
 800d54c:	4313      	orrs	r3, r2
 800d54e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	68fa      	ldr	r2, [r7, #12]
 800d556:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	4a1e      	ldr	r2, [pc, #120]	; (800d5d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800d55e:	4293      	cmp	r3, r2
 800d560:	d01d      	beq.n	800d59e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d56a:	d018      	beq.n	800d59e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	4a1b      	ldr	r2, [pc, #108]	; (800d5e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d572:	4293      	cmp	r3, r2
 800d574:	d013      	beq.n	800d59e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	4a1a      	ldr	r2, [pc, #104]	; (800d5e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d57c:	4293      	cmp	r3, r2
 800d57e:	d00e      	beq.n	800d59e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	4a18      	ldr	r2, [pc, #96]	; (800d5e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d586:	4293      	cmp	r3, r2
 800d588:	d009      	beq.n	800d59e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	4a13      	ldr	r2, [pc, #76]	; (800d5dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800d590:	4293      	cmp	r3, r2
 800d592:	d004      	beq.n	800d59e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	4a14      	ldr	r2, [pc, #80]	; (800d5ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d59a:	4293      	cmp	r3, r2
 800d59c:	d10c      	bne.n	800d5b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d5a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	689b      	ldr	r3, [r3, #8]
 800d5aa:	68ba      	ldr	r2, [r7, #8]
 800d5ac:	4313      	orrs	r3, r2
 800d5ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	68ba      	ldr	r2, [r7, #8]
 800d5b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2201      	movs	r2, #1
 800d5bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d5c8:	2300      	movs	r3, #0
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3714      	adds	r7, #20
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d4:	4770      	bx	lr
 800d5d6:	bf00      	nop
 800d5d8:	40010000 	.word	0x40010000
 800d5dc:	40010400 	.word	0x40010400
 800d5e0:	40000400 	.word	0x40000400
 800d5e4:	40000800 	.word	0x40000800
 800d5e8:	40000c00 	.word	0x40000c00
 800d5ec:	40001800 	.word	0x40001800

0800d5f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d5f0:	b480      	push	{r7}
 800d5f2:	b083      	sub	sp, #12
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d5f8:	bf00      	nop
 800d5fa:	370c      	adds	r7, #12
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d602:	4770      	bx	lr

0800d604 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d604:	b480      	push	{r7}
 800d606:	b083      	sub	sp, #12
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d60c:	bf00      	nop
 800d60e:	370c      	adds	r7, #12
 800d610:	46bd      	mov	sp, r7
 800d612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d616:	4770      	bx	lr

0800d618 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d618:	b480      	push	{r7}
 800d61a:	b083      	sub	sp, #12
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d620:	bf00      	nop
 800d622:	370c      	adds	r7, #12
 800d624:	46bd      	mov	sp, r7
 800d626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62a:	4770      	bx	lr

0800d62c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b082      	sub	sp, #8
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d101      	bne.n	800d63e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d63a:	2301      	movs	r3, #1
 800d63c:	e042      	b.n	800d6c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d644:	2b00      	cmp	r3, #0
 800d646:	d106      	bne.n	800d656 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2200      	movs	r2, #0
 800d64c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f7f4 f885 	bl	8001760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2224      	movs	r2, #36	; 0x24
 800d65a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	681a      	ldr	r2, [r3, #0]
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	f022 0201 	bic.w	r2, r2, #1
 800d66c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f000 f82e 	bl	800d6d0 <UART_SetConfig>
 800d674:	4603      	mov	r3, r0
 800d676:	2b01      	cmp	r3, #1
 800d678:	d101      	bne.n	800d67e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d67a:	2301      	movs	r3, #1
 800d67c:	e022      	b.n	800d6c4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d682:	2b00      	cmp	r3, #0
 800d684:	d002      	beq.n	800d68c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f002 f9a0 	bl	800f9cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	685a      	ldr	r2, [r3, #4]
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d69a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	689a      	ldr	r2, [r3, #8]
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d6aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	681a      	ldr	r2, [r3, #0]
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f042 0201 	orr.w	r2, r2, #1
 800d6ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f002 fa27 	bl	800fb10 <UART_CheckIdleState>
 800d6c2:	4603      	mov	r3, r0
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	3708      	adds	r7, #8
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd80      	pop	{r7, pc}
 800d6cc:	0000      	movs	r0, r0
	...

0800d6d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d6d0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800d6d4:	b090      	sub	sp, #64	; 0x40
 800d6d6:	af00      	add	r7, sp, #0
 800d6d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	689a      	ldr	r2, [r3, #8]
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	691b      	ldr	r3, [r3, #16]
 800d6f0:	431a      	orrs	r2, r3
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	695b      	ldr	r3, [r3, #20]
 800d6f6:	431a      	orrs	r2, r3
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	69db      	ldr	r3, [r3, #28]
 800d6fc:	4313      	orrs	r3, r2
 800d6fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d704:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d706:	4313      	orrs	r3, r2
 800d708:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	681a      	ldr	r2, [r3, #0]
 800d710:	4bc1      	ldr	r3, [pc, #772]	; (800da18 <UART_SetConfig+0x348>)
 800d712:	4013      	ands	r3, r2
 800d714:	687a      	ldr	r2, [r7, #4]
 800d716:	6812      	ldr	r2, [r2, #0]
 800d718:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d71a:	430b      	orrs	r3, r1
 800d71c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	685b      	ldr	r3, [r3, #4]
 800d724:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	68da      	ldr	r2, [r3, #12]
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	430a      	orrs	r2, r1
 800d732:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	699b      	ldr	r3, [r3, #24]
 800d738:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	4ab7      	ldr	r2, [pc, #732]	; (800da1c <UART_SetConfig+0x34c>)
 800d740:	4293      	cmp	r3, r2
 800d742:	d004      	beq.n	800d74e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	6a1b      	ldr	r3, [r3, #32]
 800d748:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d74a:	4313      	orrs	r3, r2
 800d74c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	689a      	ldr	r2, [r3, #8]
 800d754:	4bb2      	ldr	r3, [pc, #712]	; (800da20 <UART_SetConfig+0x350>)
 800d756:	4013      	ands	r3, r2
 800d758:	687a      	ldr	r2, [r7, #4]
 800d75a:	6812      	ldr	r2, [r2, #0]
 800d75c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d75e:	430b      	orrs	r3, r1
 800d760:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d768:	f023 010f 	bic.w	r1, r3, #15
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	430a      	orrs	r2, r1
 800d776:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	4aa9      	ldr	r2, [pc, #676]	; (800da24 <UART_SetConfig+0x354>)
 800d77e:	4293      	cmp	r3, r2
 800d780:	d177      	bne.n	800d872 <UART_SetConfig+0x1a2>
 800d782:	4ba9      	ldr	r3, [pc, #676]	; (800da28 <UART_SetConfig+0x358>)
 800d784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d786:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d78a:	2b28      	cmp	r3, #40	; 0x28
 800d78c:	d86c      	bhi.n	800d868 <UART_SetConfig+0x198>
 800d78e:	a201      	add	r2, pc, #4	; (adr r2, 800d794 <UART_SetConfig+0xc4>)
 800d790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d794:	0800d839 	.word	0x0800d839
 800d798:	0800d869 	.word	0x0800d869
 800d79c:	0800d869 	.word	0x0800d869
 800d7a0:	0800d869 	.word	0x0800d869
 800d7a4:	0800d869 	.word	0x0800d869
 800d7a8:	0800d869 	.word	0x0800d869
 800d7ac:	0800d869 	.word	0x0800d869
 800d7b0:	0800d869 	.word	0x0800d869
 800d7b4:	0800d841 	.word	0x0800d841
 800d7b8:	0800d869 	.word	0x0800d869
 800d7bc:	0800d869 	.word	0x0800d869
 800d7c0:	0800d869 	.word	0x0800d869
 800d7c4:	0800d869 	.word	0x0800d869
 800d7c8:	0800d869 	.word	0x0800d869
 800d7cc:	0800d869 	.word	0x0800d869
 800d7d0:	0800d869 	.word	0x0800d869
 800d7d4:	0800d849 	.word	0x0800d849
 800d7d8:	0800d869 	.word	0x0800d869
 800d7dc:	0800d869 	.word	0x0800d869
 800d7e0:	0800d869 	.word	0x0800d869
 800d7e4:	0800d869 	.word	0x0800d869
 800d7e8:	0800d869 	.word	0x0800d869
 800d7ec:	0800d869 	.word	0x0800d869
 800d7f0:	0800d869 	.word	0x0800d869
 800d7f4:	0800d851 	.word	0x0800d851
 800d7f8:	0800d869 	.word	0x0800d869
 800d7fc:	0800d869 	.word	0x0800d869
 800d800:	0800d869 	.word	0x0800d869
 800d804:	0800d869 	.word	0x0800d869
 800d808:	0800d869 	.word	0x0800d869
 800d80c:	0800d869 	.word	0x0800d869
 800d810:	0800d869 	.word	0x0800d869
 800d814:	0800d859 	.word	0x0800d859
 800d818:	0800d869 	.word	0x0800d869
 800d81c:	0800d869 	.word	0x0800d869
 800d820:	0800d869 	.word	0x0800d869
 800d824:	0800d869 	.word	0x0800d869
 800d828:	0800d869 	.word	0x0800d869
 800d82c:	0800d869 	.word	0x0800d869
 800d830:	0800d869 	.word	0x0800d869
 800d834:	0800d861 	.word	0x0800d861
 800d838:	2301      	movs	r3, #1
 800d83a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d83e:	e233      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800d840:	2304      	movs	r3, #4
 800d842:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d846:	e22f      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800d848:	2308      	movs	r3, #8
 800d84a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d84e:	e22b      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800d850:	2310      	movs	r3, #16
 800d852:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d856:	e227      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800d858:	2320      	movs	r3, #32
 800d85a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d85e:	e223      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800d860:	2340      	movs	r3, #64	; 0x40
 800d862:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d866:	e21f      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800d868:	2380      	movs	r3, #128	; 0x80
 800d86a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d86e:	bf00      	nop
 800d870:	e21a      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	4a6d      	ldr	r2, [pc, #436]	; (800da2c <UART_SetConfig+0x35c>)
 800d878:	4293      	cmp	r3, r2
 800d87a:	d132      	bne.n	800d8e2 <UART_SetConfig+0x212>
 800d87c:	4b6a      	ldr	r3, [pc, #424]	; (800da28 <UART_SetConfig+0x358>)
 800d87e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d880:	f003 0307 	and.w	r3, r3, #7
 800d884:	2b05      	cmp	r3, #5
 800d886:	d827      	bhi.n	800d8d8 <UART_SetConfig+0x208>
 800d888:	a201      	add	r2, pc, #4	; (adr r2, 800d890 <UART_SetConfig+0x1c0>)
 800d88a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d88e:	bf00      	nop
 800d890:	0800d8a9 	.word	0x0800d8a9
 800d894:	0800d8b1 	.word	0x0800d8b1
 800d898:	0800d8b9 	.word	0x0800d8b9
 800d89c:	0800d8c1 	.word	0x0800d8c1
 800d8a0:	0800d8c9 	.word	0x0800d8c9
 800d8a4:	0800d8d1 	.word	0x0800d8d1
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d8ae:	e1fb      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800d8b0:	2304      	movs	r3, #4
 800d8b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d8b6:	e1f7      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800d8b8:	2308      	movs	r3, #8
 800d8ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d8be:	e1f3      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800d8c0:	2310      	movs	r3, #16
 800d8c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d8c6:	e1ef      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800d8c8:	2320      	movs	r3, #32
 800d8ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d8ce:	e1eb      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800d8d0:	2340      	movs	r3, #64	; 0x40
 800d8d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d8d6:	e1e7      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800d8d8:	2380      	movs	r3, #128	; 0x80
 800d8da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d8de:	bf00      	nop
 800d8e0:	e1e2      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	4a52      	ldr	r2, [pc, #328]	; (800da30 <UART_SetConfig+0x360>)
 800d8e8:	4293      	cmp	r3, r2
 800d8ea:	d132      	bne.n	800d952 <UART_SetConfig+0x282>
 800d8ec:	4b4e      	ldr	r3, [pc, #312]	; (800da28 <UART_SetConfig+0x358>)
 800d8ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8f0:	f003 0307 	and.w	r3, r3, #7
 800d8f4:	2b05      	cmp	r3, #5
 800d8f6:	d827      	bhi.n	800d948 <UART_SetConfig+0x278>
 800d8f8:	a201      	add	r2, pc, #4	; (adr r2, 800d900 <UART_SetConfig+0x230>)
 800d8fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8fe:	bf00      	nop
 800d900:	0800d919 	.word	0x0800d919
 800d904:	0800d921 	.word	0x0800d921
 800d908:	0800d929 	.word	0x0800d929
 800d90c:	0800d931 	.word	0x0800d931
 800d910:	0800d939 	.word	0x0800d939
 800d914:	0800d941 	.word	0x0800d941
 800d918:	2300      	movs	r3, #0
 800d91a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d91e:	e1c3      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800d920:	2304      	movs	r3, #4
 800d922:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d926:	e1bf      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800d928:	2308      	movs	r3, #8
 800d92a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d92e:	e1bb      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800d930:	2310      	movs	r3, #16
 800d932:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d936:	e1b7      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800d938:	2320      	movs	r3, #32
 800d93a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d93e:	e1b3      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800d940:	2340      	movs	r3, #64	; 0x40
 800d942:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d946:	e1af      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800d948:	2380      	movs	r3, #128	; 0x80
 800d94a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d94e:	bf00      	nop
 800d950:	e1aa      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	4a37      	ldr	r2, [pc, #220]	; (800da34 <UART_SetConfig+0x364>)
 800d958:	4293      	cmp	r3, r2
 800d95a:	d132      	bne.n	800d9c2 <UART_SetConfig+0x2f2>
 800d95c:	4b32      	ldr	r3, [pc, #200]	; (800da28 <UART_SetConfig+0x358>)
 800d95e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d960:	f003 0307 	and.w	r3, r3, #7
 800d964:	2b05      	cmp	r3, #5
 800d966:	d827      	bhi.n	800d9b8 <UART_SetConfig+0x2e8>
 800d968:	a201      	add	r2, pc, #4	; (adr r2, 800d970 <UART_SetConfig+0x2a0>)
 800d96a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d96e:	bf00      	nop
 800d970:	0800d989 	.word	0x0800d989
 800d974:	0800d991 	.word	0x0800d991
 800d978:	0800d999 	.word	0x0800d999
 800d97c:	0800d9a1 	.word	0x0800d9a1
 800d980:	0800d9a9 	.word	0x0800d9a9
 800d984:	0800d9b1 	.word	0x0800d9b1
 800d988:	2300      	movs	r3, #0
 800d98a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d98e:	e18b      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800d990:	2304      	movs	r3, #4
 800d992:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d996:	e187      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800d998:	2308      	movs	r3, #8
 800d99a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d99e:	e183      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800d9a0:	2310      	movs	r3, #16
 800d9a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d9a6:	e17f      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800d9a8:	2320      	movs	r3, #32
 800d9aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d9ae:	e17b      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800d9b0:	2340      	movs	r3, #64	; 0x40
 800d9b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d9b6:	e177      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800d9b8:	2380      	movs	r3, #128	; 0x80
 800d9ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d9be:	bf00      	nop
 800d9c0:	e172      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	4a1c      	ldr	r2, [pc, #112]	; (800da38 <UART_SetConfig+0x368>)
 800d9c8:	4293      	cmp	r3, r2
 800d9ca:	d144      	bne.n	800da56 <UART_SetConfig+0x386>
 800d9cc:	4b16      	ldr	r3, [pc, #88]	; (800da28 <UART_SetConfig+0x358>)
 800d9ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9d0:	f003 0307 	and.w	r3, r3, #7
 800d9d4:	2b05      	cmp	r3, #5
 800d9d6:	d839      	bhi.n	800da4c <UART_SetConfig+0x37c>
 800d9d8:	a201      	add	r2, pc, #4	; (adr r2, 800d9e0 <UART_SetConfig+0x310>)
 800d9da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9de:	bf00      	nop
 800d9e0:	0800d9f9 	.word	0x0800d9f9
 800d9e4:	0800da01 	.word	0x0800da01
 800d9e8:	0800da09 	.word	0x0800da09
 800d9ec:	0800da11 	.word	0x0800da11
 800d9f0:	0800da3d 	.word	0x0800da3d
 800d9f4:	0800da45 	.word	0x0800da45
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d9fe:	e153      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800da00:	2304      	movs	r3, #4
 800da02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800da06:	e14f      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800da08:	2308      	movs	r3, #8
 800da0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800da0e:	e14b      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800da10:	2310      	movs	r3, #16
 800da12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800da16:	e147      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800da18:	cfff69f3 	.word	0xcfff69f3
 800da1c:	58000c00 	.word	0x58000c00
 800da20:	11fff4ff 	.word	0x11fff4ff
 800da24:	40011000 	.word	0x40011000
 800da28:	58024400 	.word	0x58024400
 800da2c:	40004400 	.word	0x40004400
 800da30:	40004800 	.word	0x40004800
 800da34:	40004c00 	.word	0x40004c00
 800da38:	40005000 	.word	0x40005000
 800da3c:	2320      	movs	r3, #32
 800da3e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800da42:	e131      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800da44:	2340      	movs	r3, #64	; 0x40
 800da46:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800da4a:	e12d      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800da4c:	2380      	movs	r3, #128	; 0x80
 800da4e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800da52:	bf00      	nop
 800da54:	e128      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	4ac3      	ldr	r2, [pc, #780]	; (800dd68 <UART_SetConfig+0x698>)
 800da5c:	4293      	cmp	r3, r2
 800da5e:	d178      	bne.n	800db52 <UART_SetConfig+0x482>
 800da60:	4bc2      	ldr	r3, [pc, #776]	; (800dd6c <UART_SetConfig+0x69c>)
 800da62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800da68:	2b28      	cmp	r3, #40	; 0x28
 800da6a:	d86d      	bhi.n	800db48 <UART_SetConfig+0x478>
 800da6c:	a201      	add	r2, pc, #4	; (adr r2, 800da74 <UART_SetConfig+0x3a4>)
 800da6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da72:	bf00      	nop
 800da74:	0800db19 	.word	0x0800db19
 800da78:	0800db49 	.word	0x0800db49
 800da7c:	0800db49 	.word	0x0800db49
 800da80:	0800db49 	.word	0x0800db49
 800da84:	0800db49 	.word	0x0800db49
 800da88:	0800db49 	.word	0x0800db49
 800da8c:	0800db49 	.word	0x0800db49
 800da90:	0800db49 	.word	0x0800db49
 800da94:	0800db21 	.word	0x0800db21
 800da98:	0800db49 	.word	0x0800db49
 800da9c:	0800db49 	.word	0x0800db49
 800daa0:	0800db49 	.word	0x0800db49
 800daa4:	0800db49 	.word	0x0800db49
 800daa8:	0800db49 	.word	0x0800db49
 800daac:	0800db49 	.word	0x0800db49
 800dab0:	0800db49 	.word	0x0800db49
 800dab4:	0800db29 	.word	0x0800db29
 800dab8:	0800db49 	.word	0x0800db49
 800dabc:	0800db49 	.word	0x0800db49
 800dac0:	0800db49 	.word	0x0800db49
 800dac4:	0800db49 	.word	0x0800db49
 800dac8:	0800db49 	.word	0x0800db49
 800dacc:	0800db49 	.word	0x0800db49
 800dad0:	0800db49 	.word	0x0800db49
 800dad4:	0800db31 	.word	0x0800db31
 800dad8:	0800db49 	.word	0x0800db49
 800dadc:	0800db49 	.word	0x0800db49
 800dae0:	0800db49 	.word	0x0800db49
 800dae4:	0800db49 	.word	0x0800db49
 800dae8:	0800db49 	.word	0x0800db49
 800daec:	0800db49 	.word	0x0800db49
 800daf0:	0800db49 	.word	0x0800db49
 800daf4:	0800db39 	.word	0x0800db39
 800daf8:	0800db49 	.word	0x0800db49
 800dafc:	0800db49 	.word	0x0800db49
 800db00:	0800db49 	.word	0x0800db49
 800db04:	0800db49 	.word	0x0800db49
 800db08:	0800db49 	.word	0x0800db49
 800db0c:	0800db49 	.word	0x0800db49
 800db10:	0800db49 	.word	0x0800db49
 800db14:	0800db41 	.word	0x0800db41
 800db18:	2301      	movs	r3, #1
 800db1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800db1e:	e0c3      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800db20:	2304      	movs	r3, #4
 800db22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800db26:	e0bf      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800db28:	2308      	movs	r3, #8
 800db2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800db2e:	e0bb      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800db30:	2310      	movs	r3, #16
 800db32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800db36:	e0b7      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800db38:	2320      	movs	r3, #32
 800db3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800db3e:	e0b3      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800db40:	2340      	movs	r3, #64	; 0x40
 800db42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800db46:	e0af      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800db48:	2380      	movs	r3, #128	; 0x80
 800db4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800db4e:	bf00      	nop
 800db50:	e0aa      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	4a86      	ldr	r2, [pc, #536]	; (800dd70 <UART_SetConfig+0x6a0>)
 800db58:	4293      	cmp	r3, r2
 800db5a:	d132      	bne.n	800dbc2 <UART_SetConfig+0x4f2>
 800db5c:	4b83      	ldr	r3, [pc, #524]	; (800dd6c <UART_SetConfig+0x69c>)
 800db5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db60:	f003 0307 	and.w	r3, r3, #7
 800db64:	2b05      	cmp	r3, #5
 800db66:	d827      	bhi.n	800dbb8 <UART_SetConfig+0x4e8>
 800db68:	a201      	add	r2, pc, #4	; (adr r2, 800db70 <UART_SetConfig+0x4a0>)
 800db6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db6e:	bf00      	nop
 800db70:	0800db89 	.word	0x0800db89
 800db74:	0800db91 	.word	0x0800db91
 800db78:	0800db99 	.word	0x0800db99
 800db7c:	0800dba1 	.word	0x0800dba1
 800db80:	0800dba9 	.word	0x0800dba9
 800db84:	0800dbb1 	.word	0x0800dbb1
 800db88:	2300      	movs	r3, #0
 800db8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800db8e:	e08b      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800db90:	2304      	movs	r3, #4
 800db92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800db96:	e087      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800db98:	2308      	movs	r3, #8
 800db9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800db9e:	e083      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800dba0:	2310      	movs	r3, #16
 800dba2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dba6:	e07f      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800dba8:	2320      	movs	r3, #32
 800dbaa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dbae:	e07b      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800dbb0:	2340      	movs	r3, #64	; 0x40
 800dbb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dbb6:	e077      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800dbb8:	2380      	movs	r3, #128	; 0x80
 800dbba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dbbe:	bf00      	nop
 800dbc0:	e072      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	4a6b      	ldr	r2, [pc, #428]	; (800dd74 <UART_SetConfig+0x6a4>)
 800dbc8:	4293      	cmp	r3, r2
 800dbca:	d132      	bne.n	800dc32 <UART_SetConfig+0x562>
 800dbcc:	4b67      	ldr	r3, [pc, #412]	; (800dd6c <UART_SetConfig+0x69c>)
 800dbce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbd0:	f003 0307 	and.w	r3, r3, #7
 800dbd4:	2b05      	cmp	r3, #5
 800dbd6:	d827      	bhi.n	800dc28 <UART_SetConfig+0x558>
 800dbd8:	a201      	add	r2, pc, #4	; (adr r2, 800dbe0 <UART_SetConfig+0x510>)
 800dbda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbde:	bf00      	nop
 800dbe0:	0800dbf9 	.word	0x0800dbf9
 800dbe4:	0800dc01 	.word	0x0800dc01
 800dbe8:	0800dc09 	.word	0x0800dc09
 800dbec:	0800dc11 	.word	0x0800dc11
 800dbf0:	0800dc19 	.word	0x0800dc19
 800dbf4:	0800dc21 	.word	0x0800dc21
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dbfe:	e053      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800dc00:	2304      	movs	r3, #4
 800dc02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dc06:	e04f      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800dc08:	2308      	movs	r3, #8
 800dc0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dc0e:	e04b      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800dc10:	2310      	movs	r3, #16
 800dc12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dc16:	e047      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800dc18:	2320      	movs	r3, #32
 800dc1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dc1e:	e043      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800dc20:	2340      	movs	r3, #64	; 0x40
 800dc22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dc26:	e03f      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800dc28:	2380      	movs	r3, #128	; 0x80
 800dc2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dc2e:	bf00      	nop
 800dc30:	e03a      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	4a50      	ldr	r2, [pc, #320]	; (800dd78 <UART_SetConfig+0x6a8>)
 800dc38:	4293      	cmp	r3, r2
 800dc3a:	d132      	bne.n	800dca2 <UART_SetConfig+0x5d2>
 800dc3c:	4b4b      	ldr	r3, [pc, #300]	; (800dd6c <UART_SetConfig+0x69c>)
 800dc3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc40:	f003 0307 	and.w	r3, r3, #7
 800dc44:	2b05      	cmp	r3, #5
 800dc46:	d827      	bhi.n	800dc98 <UART_SetConfig+0x5c8>
 800dc48:	a201      	add	r2, pc, #4	; (adr r2, 800dc50 <UART_SetConfig+0x580>)
 800dc4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc4e:	bf00      	nop
 800dc50:	0800dc69 	.word	0x0800dc69
 800dc54:	0800dc71 	.word	0x0800dc71
 800dc58:	0800dc79 	.word	0x0800dc79
 800dc5c:	0800dc81 	.word	0x0800dc81
 800dc60:	0800dc89 	.word	0x0800dc89
 800dc64:	0800dc91 	.word	0x0800dc91
 800dc68:	2302      	movs	r3, #2
 800dc6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dc6e:	e01b      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800dc70:	2304      	movs	r3, #4
 800dc72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dc76:	e017      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800dc78:	2308      	movs	r3, #8
 800dc7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dc7e:	e013      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800dc80:	2310      	movs	r3, #16
 800dc82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dc86:	e00f      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800dc88:	2320      	movs	r3, #32
 800dc8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dc8e:	e00b      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800dc90:	2340      	movs	r3, #64	; 0x40
 800dc92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dc96:	e007      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800dc98:	2380      	movs	r3, #128	; 0x80
 800dc9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800dc9e:	bf00      	nop
 800dca0:	e002      	b.n	800dca8 <UART_SetConfig+0x5d8>
 800dca2:	2380      	movs	r3, #128	; 0x80
 800dca4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	4a32      	ldr	r2, [pc, #200]	; (800dd78 <UART_SetConfig+0x6a8>)
 800dcae:	4293      	cmp	r3, r2
 800dcb0:	f040 86f7 	bne.w	800eaa2 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dcb4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800dcb8:	2b08      	cmp	r3, #8
 800dcba:	f000 80c0 	beq.w	800de3e <UART_SetConfig+0x76e>
 800dcbe:	2b08      	cmp	r3, #8
 800dcc0:	dc04      	bgt.n	800dccc <UART_SetConfig+0x5fc>
 800dcc2:	2b02      	cmp	r3, #2
 800dcc4:	d00c      	beq.n	800dce0 <UART_SetConfig+0x610>
 800dcc6:	2b04      	cmp	r3, #4
 800dcc8:	d065      	beq.n	800dd96 <UART_SetConfig+0x6c6>
 800dcca:	e27a      	b.n	800e1c2 <UART_SetConfig+0xaf2>
 800dccc:	2b20      	cmp	r3, #32
 800dcce:	f000 81b0 	beq.w	800e032 <UART_SetConfig+0x962>
 800dcd2:	2b40      	cmp	r3, #64	; 0x40
 800dcd4:	f000 821e 	beq.w	800e114 <UART_SetConfig+0xa44>
 800dcd8:	2b10      	cmp	r3, #16
 800dcda:	f000 8104 	beq.w	800dee6 <UART_SetConfig+0x816>
 800dcde:	e270      	b.n	800e1c2 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800dce0:	f7fc fbd8 	bl	800a494 <HAL_RCCEx_GetD3PCLK1Freq>
 800dce4:	4602      	mov	r2, r0
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d04e      	beq.n	800dd8c <UART_SetConfig+0x6bc>
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcf2:	2b01      	cmp	r3, #1
 800dcf4:	d048      	beq.n	800dd88 <UART_SetConfig+0x6b8>
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcfa:	2b02      	cmp	r3, #2
 800dcfc:	d042      	beq.n	800dd84 <UART_SetConfig+0x6b4>
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd02:	2b03      	cmp	r3, #3
 800dd04:	d03c      	beq.n	800dd80 <UART_SetConfig+0x6b0>
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd0a:	2b04      	cmp	r3, #4
 800dd0c:	d036      	beq.n	800dd7c <UART_SetConfig+0x6ac>
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd12:	2b05      	cmp	r3, #5
 800dd14:	d026      	beq.n	800dd64 <UART_SetConfig+0x694>
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd1a:	2b06      	cmp	r3, #6
 800dd1c:	d020      	beq.n	800dd60 <UART_SetConfig+0x690>
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd22:	2b07      	cmp	r3, #7
 800dd24:	d01a      	beq.n	800dd5c <UART_SetConfig+0x68c>
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd2a:	2b08      	cmp	r3, #8
 800dd2c:	d014      	beq.n	800dd58 <UART_SetConfig+0x688>
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd32:	2b09      	cmp	r3, #9
 800dd34:	d00e      	beq.n	800dd54 <UART_SetConfig+0x684>
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd3a:	2b0a      	cmp	r3, #10
 800dd3c:	d008      	beq.n	800dd50 <UART_SetConfig+0x680>
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd42:	2b0b      	cmp	r3, #11
 800dd44:	d102      	bne.n	800dd4c <UART_SetConfig+0x67c>
 800dd46:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd4a:	e020      	b.n	800dd8e <UART_SetConfig+0x6be>
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	e01e      	b.n	800dd8e <UART_SetConfig+0x6be>
 800dd50:	2380      	movs	r3, #128	; 0x80
 800dd52:	e01c      	b.n	800dd8e <UART_SetConfig+0x6be>
 800dd54:	2340      	movs	r3, #64	; 0x40
 800dd56:	e01a      	b.n	800dd8e <UART_SetConfig+0x6be>
 800dd58:	2320      	movs	r3, #32
 800dd5a:	e018      	b.n	800dd8e <UART_SetConfig+0x6be>
 800dd5c:	2310      	movs	r3, #16
 800dd5e:	e016      	b.n	800dd8e <UART_SetConfig+0x6be>
 800dd60:	230c      	movs	r3, #12
 800dd62:	e014      	b.n	800dd8e <UART_SetConfig+0x6be>
 800dd64:	230a      	movs	r3, #10
 800dd66:	e012      	b.n	800dd8e <UART_SetConfig+0x6be>
 800dd68:	40011400 	.word	0x40011400
 800dd6c:	58024400 	.word	0x58024400
 800dd70:	40007800 	.word	0x40007800
 800dd74:	40007c00 	.word	0x40007c00
 800dd78:	58000c00 	.word	0x58000c00
 800dd7c:	2308      	movs	r3, #8
 800dd7e:	e006      	b.n	800dd8e <UART_SetConfig+0x6be>
 800dd80:	2306      	movs	r3, #6
 800dd82:	e004      	b.n	800dd8e <UART_SetConfig+0x6be>
 800dd84:	2304      	movs	r3, #4
 800dd86:	e002      	b.n	800dd8e <UART_SetConfig+0x6be>
 800dd88:	2302      	movs	r3, #2
 800dd8a:	e000      	b.n	800dd8e <UART_SetConfig+0x6be>
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dd94:	e219      	b.n	800e1ca <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dd96:	f107 0318 	add.w	r3, r7, #24
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f7fc fb90 	bl	800a4c0 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800dda0:	69fa      	ldr	r2, [r7, #28]
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d044      	beq.n	800de34 <UART_SetConfig+0x764>
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddae:	2b01      	cmp	r3, #1
 800ddb0:	d03e      	beq.n	800de30 <UART_SetConfig+0x760>
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddb6:	2b02      	cmp	r3, #2
 800ddb8:	d038      	beq.n	800de2c <UART_SetConfig+0x75c>
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddbe:	2b03      	cmp	r3, #3
 800ddc0:	d032      	beq.n	800de28 <UART_SetConfig+0x758>
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddc6:	2b04      	cmp	r3, #4
 800ddc8:	d02c      	beq.n	800de24 <UART_SetConfig+0x754>
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddce:	2b05      	cmp	r3, #5
 800ddd0:	d026      	beq.n	800de20 <UART_SetConfig+0x750>
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddd6:	2b06      	cmp	r3, #6
 800ddd8:	d020      	beq.n	800de1c <UART_SetConfig+0x74c>
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddde:	2b07      	cmp	r3, #7
 800dde0:	d01a      	beq.n	800de18 <UART_SetConfig+0x748>
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dde6:	2b08      	cmp	r3, #8
 800dde8:	d014      	beq.n	800de14 <UART_SetConfig+0x744>
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddee:	2b09      	cmp	r3, #9
 800ddf0:	d00e      	beq.n	800de10 <UART_SetConfig+0x740>
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddf6:	2b0a      	cmp	r3, #10
 800ddf8:	d008      	beq.n	800de0c <UART_SetConfig+0x73c>
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddfe:	2b0b      	cmp	r3, #11
 800de00:	d102      	bne.n	800de08 <UART_SetConfig+0x738>
 800de02:	f44f 7380 	mov.w	r3, #256	; 0x100
 800de06:	e016      	b.n	800de36 <UART_SetConfig+0x766>
 800de08:	2301      	movs	r3, #1
 800de0a:	e014      	b.n	800de36 <UART_SetConfig+0x766>
 800de0c:	2380      	movs	r3, #128	; 0x80
 800de0e:	e012      	b.n	800de36 <UART_SetConfig+0x766>
 800de10:	2340      	movs	r3, #64	; 0x40
 800de12:	e010      	b.n	800de36 <UART_SetConfig+0x766>
 800de14:	2320      	movs	r3, #32
 800de16:	e00e      	b.n	800de36 <UART_SetConfig+0x766>
 800de18:	2310      	movs	r3, #16
 800de1a:	e00c      	b.n	800de36 <UART_SetConfig+0x766>
 800de1c:	230c      	movs	r3, #12
 800de1e:	e00a      	b.n	800de36 <UART_SetConfig+0x766>
 800de20:	230a      	movs	r3, #10
 800de22:	e008      	b.n	800de36 <UART_SetConfig+0x766>
 800de24:	2308      	movs	r3, #8
 800de26:	e006      	b.n	800de36 <UART_SetConfig+0x766>
 800de28:	2306      	movs	r3, #6
 800de2a:	e004      	b.n	800de36 <UART_SetConfig+0x766>
 800de2c:	2304      	movs	r3, #4
 800de2e:	e002      	b.n	800de36 <UART_SetConfig+0x766>
 800de30:	2302      	movs	r3, #2
 800de32:	e000      	b.n	800de36 <UART_SetConfig+0x766>
 800de34:	2301      	movs	r3, #1
 800de36:	fbb2 f3f3 	udiv	r3, r2, r3
 800de3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800de3c:	e1c5      	b.n	800e1ca <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800de3e:	f107 030c 	add.w	r3, r7, #12
 800de42:	4618      	mov	r0, r3
 800de44:	f7fc fc88 	bl	800a758 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800de48:	693a      	ldr	r2, [r7, #16]
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d044      	beq.n	800dedc <UART_SetConfig+0x80c>
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de56:	2b01      	cmp	r3, #1
 800de58:	d03e      	beq.n	800ded8 <UART_SetConfig+0x808>
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de5e:	2b02      	cmp	r3, #2
 800de60:	d038      	beq.n	800ded4 <UART_SetConfig+0x804>
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de66:	2b03      	cmp	r3, #3
 800de68:	d032      	beq.n	800ded0 <UART_SetConfig+0x800>
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de6e:	2b04      	cmp	r3, #4
 800de70:	d02c      	beq.n	800decc <UART_SetConfig+0x7fc>
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de76:	2b05      	cmp	r3, #5
 800de78:	d026      	beq.n	800dec8 <UART_SetConfig+0x7f8>
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de7e:	2b06      	cmp	r3, #6
 800de80:	d020      	beq.n	800dec4 <UART_SetConfig+0x7f4>
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de86:	2b07      	cmp	r3, #7
 800de88:	d01a      	beq.n	800dec0 <UART_SetConfig+0x7f0>
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de8e:	2b08      	cmp	r3, #8
 800de90:	d014      	beq.n	800debc <UART_SetConfig+0x7ec>
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de96:	2b09      	cmp	r3, #9
 800de98:	d00e      	beq.n	800deb8 <UART_SetConfig+0x7e8>
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de9e:	2b0a      	cmp	r3, #10
 800dea0:	d008      	beq.n	800deb4 <UART_SetConfig+0x7e4>
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dea6:	2b0b      	cmp	r3, #11
 800dea8:	d102      	bne.n	800deb0 <UART_SetConfig+0x7e0>
 800deaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800deae:	e016      	b.n	800dede <UART_SetConfig+0x80e>
 800deb0:	2301      	movs	r3, #1
 800deb2:	e014      	b.n	800dede <UART_SetConfig+0x80e>
 800deb4:	2380      	movs	r3, #128	; 0x80
 800deb6:	e012      	b.n	800dede <UART_SetConfig+0x80e>
 800deb8:	2340      	movs	r3, #64	; 0x40
 800deba:	e010      	b.n	800dede <UART_SetConfig+0x80e>
 800debc:	2320      	movs	r3, #32
 800debe:	e00e      	b.n	800dede <UART_SetConfig+0x80e>
 800dec0:	2310      	movs	r3, #16
 800dec2:	e00c      	b.n	800dede <UART_SetConfig+0x80e>
 800dec4:	230c      	movs	r3, #12
 800dec6:	e00a      	b.n	800dede <UART_SetConfig+0x80e>
 800dec8:	230a      	movs	r3, #10
 800deca:	e008      	b.n	800dede <UART_SetConfig+0x80e>
 800decc:	2308      	movs	r3, #8
 800dece:	e006      	b.n	800dede <UART_SetConfig+0x80e>
 800ded0:	2306      	movs	r3, #6
 800ded2:	e004      	b.n	800dede <UART_SetConfig+0x80e>
 800ded4:	2304      	movs	r3, #4
 800ded6:	e002      	b.n	800dede <UART_SetConfig+0x80e>
 800ded8:	2302      	movs	r3, #2
 800deda:	e000      	b.n	800dede <UART_SetConfig+0x80e>
 800dedc:	2301      	movs	r3, #1
 800dede:	fbb2 f3f3 	udiv	r3, r2, r3
 800dee2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dee4:	e171      	b.n	800e1ca <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dee6:	4b7a      	ldr	r3, [pc, #488]	; (800e0d0 <UART_SetConfig+0xa00>)
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	f003 0320 	and.w	r3, r3, #32
 800deee:	2b00      	cmp	r3, #0
 800def0:	d054      	beq.n	800df9c <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800def2:	4b77      	ldr	r3, [pc, #476]	; (800e0d0 <UART_SetConfig+0xa00>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	08db      	lsrs	r3, r3, #3
 800def8:	f003 0303 	and.w	r3, r3, #3
 800defc:	4a75      	ldr	r2, [pc, #468]	; (800e0d4 <UART_SetConfig+0xa04>)
 800defe:	40da      	lsrs	r2, r3
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df04:	2b00      	cmp	r3, #0
 800df06:	d044      	beq.n	800df92 <UART_SetConfig+0x8c2>
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df0c:	2b01      	cmp	r3, #1
 800df0e:	d03e      	beq.n	800df8e <UART_SetConfig+0x8be>
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df14:	2b02      	cmp	r3, #2
 800df16:	d038      	beq.n	800df8a <UART_SetConfig+0x8ba>
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df1c:	2b03      	cmp	r3, #3
 800df1e:	d032      	beq.n	800df86 <UART_SetConfig+0x8b6>
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df24:	2b04      	cmp	r3, #4
 800df26:	d02c      	beq.n	800df82 <UART_SetConfig+0x8b2>
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df2c:	2b05      	cmp	r3, #5
 800df2e:	d026      	beq.n	800df7e <UART_SetConfig+0x8ae>
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df34:	2b06      	cmp	r3, #6
 800df36:	d020      	beq.n	800df7a <UART_SetConfig+0x8aa>
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df3c:	2b07      	cmp	r3, #7
 800df3e:	d01a      	beq.n	800df76 <UART_SetConfig+0x8a6>
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df44:	2b08      	cmp	r3, #8
 800df46:	d014      	beq.n	800df72 <UART_SetConfig+0x8a2>
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df4c:	2b09      	cmp	r3, #9
 800df4e:	d00e      	beq.n	800df6e <UART_SetConfig+0x89e>
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df54:	2b0a      	cmp	r3, #10
 800df56:	d008      	beq.n	800df6a <UART_SetConfig+0x89a>
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df5c:	2b0b      	cmp	r3, #11
 800df5e:	d102      	bne.n	800df66 <UART_SetConfig+0x896>
 800df60:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df64:	e016      	b.n	800df94 <UART_SetConfig+0x8c4>
 800df66:	2301      	movs	r3, #1
 800df68:	e014      	b.n	800df94 <UART_SetConfig+0x8c4>
 800df6a:	2380      	movs	r3, #128	; 0x80
 800df6c:	e012      	b.n	800df94 <UART_SetConfig+0x8c4>
 800df6e:	2340      	movs	r3, #64	; 0x40
 800df70:	e010      	b.n	800df94 <UART_SetConfig+0x8c4>
 800df72:	2320      	movs	r3, #32
 800df74:	e00e      	b.n	800df94 <UART_SetConfig+0x8c4>
 800df76:	2310      	movs	r3, #16
 800df78:	e00c      	b.n	800df94 <UART_SetConfig+0x8c4>
 800df7a:	230c      	movs	r3, #12
 800df7c:	e00a      	b.n	800df94 <UART_SetConfig+0x8c4>
 800df7e:	230a      	movs	r3, #10
 800df80:	e008      	b.n	800df94 <UART_SetConfig+0x8c4>
 800df82:	2308      	movs	r3, #8
 800df84:	e006      	b.n	800df94 <UART_SetConfig+0x8c4>
 800df86:	2306      	movs	r3, #6
 800df88:	e004      	b.n	800df94 <UART_SetConfig+0x8c4>
 800df8a:	2304      	movs	r3, #4
 800df8c:	e002      	b.n	800df94 <UART_SetConfig+0x8c4>
 800df8e:	2302      	movs	r3, #2
 800df90:	e000      	b.n	800df94 <UART_SetConfig+0x8c4>
 800df92:	2301      	movs	r3, #1
 800df94:	fbb2 f3f3 	udiv	r3, r2, r3
 800df98:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800df9a:	e116      	b.n	800e1ca <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d043      	beq.n	800e02c <UART_SetConfig+0x95c>
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfa8:	2b01      	cmp	r3, #1
 800dfaa:	d03d      	beq.n	800e028 <UART_SetConfig+0x958>
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfb0:	2b02      	cmp	r3, #2
 800dfb2:	d037      	beq.n	800e024 <UART_SetConfig+0x954>
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfb8:	2b03      	cmp	r3, #3
 800dfba:	d031      	beq.n	800e020 <UART_SetConfig+0x950>
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfc0:	2b04      	cmp	r3, #4
 800dfc2:	d02b      	beq.n	800e01c <UART_SetConfig+0x94c>
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfc8:	2b05      	cmp	r3, #5
 800dfca:	d025      	beq.n	800e018 <UART_SetConfig+0x948>
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfd0:	2b06      	cmp	r3, #6
 800dfd2:	d01f      	beq.n	800e014 <UART_SetConfig+0x944>
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfd8:	2b07      	cmp	r3, #7
 800dfda:	d019      	beq.n	800e010 <UART_SetConfig+0x940>
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfe0:	2b08      	cmp	r3, #8
 800dfe2:	d013      	beq.n	800e00c <UART_SetConfig+0x93c>
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfe8:	2b09      	cmp	r3, #9
 800dfea:	d00d      	beq.n	800e008 <UART_SetConfig+0x938>
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dff0:	2b0a      	cmp	r3, #10
 800dff2:	d007      	beq.n	800e004 <UART_SetConfig+0x934>
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dff8:	2b0b      	cmp	r3, #11
 800dffa:	d101      	bne.n	800e000 <UART_SetConfig+0x930>
 800dffc:	4b36      	ldr	r3, [pc, #216]	; (800e0d8 <UART_SetConfig+0xa08>)
 800dffe:	e016      	b.n	800e02e <UART_SetConfig+0x95e>
 800e000:	4b34      	ldr	r3, [pc, #208]	; (800e0d4 <UART_SetConfig+0xa04>)
 800e002:	e014      	b.n	800e02e <UART_SetConfig+0x95e>
 800e004:	4b35      	ldr	r3, [pc, #212]	; (800e0dc <UART_SetConfig+0xa0c>)
 800e006:	e012      	b.n	800e02e <UART_SetConfig+0x95e>
 800e008:	4b35      	ldr	r3, [pc, #212]	; (800e0e0 <UART_SetConfig+0xa10>)
 800e00a:	e010      	b.n	800e02e <UART_SetConfig+0x95e>
 800e00c:	4b35      	ldr	r3, [pc, #212]	; (800e0e4 <UART_SetConfig+0xa14>)
 800e00e:	e00e      	b.n	800e02e <UART_SetConfig+0x95e>
 800e010:	4b35      	ldr	r3, [pc, #212]	; (800e0e8 <UART_SetConfig+0xa18>)
 800e012:	e00c      	b.n	800e02e <UART_SetConfig+0x95e>
 800e014:	4b35      	ldr	r3, [pc, #212]	; (800e0ec <UART_SetConfig+0xa1c>)
 800e016:	e00a      	b.n	800e02e <UART_SetConfig+0x95e>
 800e018:	4b35      	ldr	r3, [pc, #212]	; (800e0f0 <UART_SetConfig+0xa20>)
 800e01a:	e008      	b.n	800e02e <UART_SetConfig+0x95e>
 800e01c:	4b35      	ldr	r3, [pc, #212]	; (800e0f4 <UART_SetConfig+0xa24>)
 800e01e:	e006      	b.n	800e02e <UART_SetConfig+0x95e>
 800e020:	4b35      	ldr	r3, [pc, #212]	; (800e0f8 <UART_SetConfig+0xa28>)
 800e022:	e004      	b.n	800e02e <UART_SetConfig+0x95e>
 800e024:	4b35      	ldr	r3, [pc, #212]	; (800e0fc <UART_SetConfig+0xa2c>)
 800e026:	e002      	b.n	800e02e <UART_SetConfig+0x95e>
 800e028:	4b35      	ldr	r3, [pc, #212]	; (800e100 <UART_SetConfig+0xa30>)
 800e02a:	e000      	b.n	800e02e <UART_SetConfig+0x95e>
 800e02c:	4b29      	ldr	r3, [pc, #164]	; (800e0d4 <UART_SetConfig+0xa04>)
 800e02e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e030:	e0cb      	b.n	800e1ca <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e036:	2b00      	cmp	r3, #0
 800e038:	d046      	beq.n	800e0c8 <UART_SetConfig+0x9f8>
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e03e:	2b01      	cmp	r3, #1
 800e040:	d040      	beq.n	800e0c4 <UART_SetConfig+0x9f4>
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e046:	2b02      	cmp	r3, #2
 800e048:	d03a      	beq.n	800e0c0 <UART_SetConfig+0x9f0>
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e04e:	2b03      	cmp	r3, #3
 800e050:	d034      	beq.n	800e0bc <UART_SetConfig+0x9ec>
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e056:	2b04      	cmp	r3, #4
 800e058:	d02e      	beq.n	800e0b8 <UART_SetConfig+0x9e8>
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e05e:	2b05      	cmp	r3, #5
 800e060:	d028      	beq.n	800e0b4 <UART_SetConfig+0x9e4>
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e066:	2b06      	cmp	r3, #6
 800e068:	d022      	beq.n	800e0b0 <UART_SetConfig+0x9e0>
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e06e:	2b07      	cmp	r3, #7
 800e070:	d01c      	beq.n	800e0ac <UART_SetConfig+0x9dc>
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e076:	2b08      	cmp	r3, #8
 800e078:	d016      	beq.n	800e0a8 <UART_SetConfig+0x9d8>
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e07e:	2b09      	cmp	r3, #9
 800e080:	d00f      	beq.n	800e0a2 <UART_SetConfig+0x9d2>
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e086:	2b0a      	cmp	r3, #10
 800e088:	d008      	beq.n	800e09c <UART_SetConfig+0x9cc>
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e08e:	2b0b      	cmp	r3, #11
 800e090:	d102      	bne.n	800e098 <UART_SetConfig+0x9c8>
 800e092:	f643 5309 	movw	r3, #15625	; 0x3d09
 800e096:	e018      	b.n	800e0ca <UART_SetConfig+0x9fa>
 800e098:	4b13      	ldr	r3, [pc, #76]	; (800e0e8 <UART_SetConfig+0xa18>)
 800e09a:	e016      	b.n	800e0ca <UART_SetConfig+0x9fa>
 800e09c:	f647 2312 	movw	r3, #31250	; 0x7a12
 800e0a0:	e013      	b.n	800e0ca <UART_SetConfig+0x9fa>
 800e0a2:	f24f 4324 	movw	r3, #62500	; 0xf424
 800e0a6:	e010      	b.n	800e0ca <UART_SetConfig+0x9fa>
 800e0a8:	4b16      	ldr	r3, [pc, #88]	; (800e104 <UART_SetConfig+0xa34>)
 800e0aa:	e00e      	b.n	800e0ca <UART_SetConfig+0x9fa>
 800e0ac:	4b0a      	ldr	r3, [pc, #40]	; (800e0d8 <UART_SetConfig+0xa08>)
 800e0ae:	e00c      	b.n	800e0ca <UART_SetConfig+0x9fa>
 800e0b0:	4b15      	ldr	r3, [pc, #84]	; (800e108 <UART_SetConfig+0xa38>)
 800e0b2:	e00a      	b.n	800e0ca <UART_SetConfig+0x9fa>
 800e0b4:	4b15      	ldr	r3, [pc, #84]	; (800e10c <UART_SetConfig+0xa3c>)
 800e0b6:	e008      	b.n	800e0ca <UART_SetConfig+0x9fa>
 800e0b8:	4b08      	ldr	r3, [pc, #32]	; (800e0dc <UART_SetConfig+0xa0c>)
 800e0ba:	e006      	b.n	800e0ca <UART_SetConfig+0x9fa>
 800e0bc:	4b14      	ldr	r3, [pc, #80]	; (800e110 <UART_SetConfig+0xa40>)
 800e0be:	e004      	b.n	800e0ca <UART_SetConfig+0x9fa>
 800e0c0:	4b07      	ldr	r3, [pc, #28]	; (800e0e0 <UART_SetConfig+0xa10>)
 800e0c2:	e002      	b.n	800e0ca <UART_SetConfig+0x9fa>
 800e0c4:	4b07      	ldr	r3, [pc, #28]	; (800e0e4 <UART_SetConfig+0xa14>)
 800e0c6:	e000      	b.n	800e0ca <UART_SetConfig+0x9fa>
 800e0c8:	4b07      	ldr	r3, [pc, #28]	; (800e0e8 <UART_SetConfig+0xa18>)
 800e0ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e0cc:	e07d      	b.n	800e1ca <UART_SetConfig+0xafa>
 800e0ce:	bf00      	nop
 800e0d0:	58024400 	.word	0x58024400
 800e0d4:	03d09000 	.word	0x03d09000
 800e0d8:	0003d090 	.word	0x0003d090
 800e0dc:	0007a120 	.word	0x0007a120
 800e0e0:	000f4240 	.word	0x000f4240
 800e0e4:	001e8480 	.word	0x001e8480
 800e0e8:	003d0900 	.word	0x003d0900
 800e0ec:	00516155 	.word	0x00516155
 800e0f0:	0061a800 	.word	0x0061a800
 800e0f4:	007a1200 	.word	0x007a1200
 800e0f8:	00a2c2aa 	.word	0x00a2c2aa
 800e0fc:	00f42400 	.word	0x00f42400
 800e100:	01e84800 	.word	0x01e84800
 800e104:	0001e848 	.word	0x0001e848
 800e108:	00051615 	.word	0x00051615
 800e10c:	00061a80 	.word	0x00061a80
 800e110:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d04e      	beq.n	800e1ba <UART_SetConfig+0xaea>
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e120:	2b01      	cmp	r3, #1
 800e122:	d047      	beq.n	800e1b4 <UART_SetConfig+0xae4>
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e128:	2b02      	cmp	r3, #2
 800e12a:	d040      	beq.n	800e1ae <UART_SetConfig+0xade>
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e130:	2b03      	cmp	r3, #3
 800e132:	d039      	beq.n	800e1a8 <UART_SetConfig+0xad8>
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e138:	2b04      	cmp	r3, #4
 800e13a:	d032      	beq.n	800e1a2 <UART_SetConfig+0xad2>
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e140:	2b05      	cmp	r3, #5
 800e142:	d02b      	beq.n	800e19c <UART_SetConfig+0xacc>
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e148:	2b06      	cmp	r3, #6
 800e14a:	d024      	beq.n	800e196 <UART_SetConfig+0xac6>
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e150:	2b07      	cmp	r3, #7
 800e152:	d01d      	beq.n	800e190 <UART_SetConfig+0xac0>
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e158:	2b08      	cmp	r3, #8
 800e15a:	d016      	beq.n	800e18a <UART_SetConfig+0xaba>
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e160:	2b09      	cmp	r3, #9
 800e162:	d00f      	beq.n	800e184 <UART_SetConfig+0xab4>
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e168:	2b0a      	cmp	r3, #10
 800e16a:	d008      	beq.n	800e17e <UART_SetConfig+0xaae>
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e170:	2b0b      	cmp	r3, #11
 800e172:	d101      	bne.n	800e178 <UART_SetConfig+0xaa8>
 800e174:	2380      	movs	r3, #128	; 0x80
 800e176:	e022      	b.n	800e1be <UART_SetConfig+0xaee>
 800e178:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e17c:	e01f      	b.n	800e1be <UART_SetConfig+0xaee>
 800e17e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e182:	e01c      	b.n	800e1be <UART_SetConfig+0xaee>
 800e184:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e188:	e019      	b.n	800e1be <UART_SetConfig+0xaee>
 800e18a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e18e:	e016      	b.n	800e1be <UART_SetConfig+0xaee>
 800e190:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e194:	e013      	b.n	800e1be <UART_SetConfig+0xaee>
 800e196:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800e19a:	e010      	b.n	800e1be <UART_SetConfig+0xaee>
 800e19c:	f640 43cc 	movw	r3, #3276	; 0xccc
 800e1a0:	e00d      	b.n	800e1be <UART_SetConfig+0xaee>
 800e1a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e1a6:	e00a      	b.n	800e1be <UART_SetConfig+0xaee>
 800e1a8:	f241 5355 	movw	r3, #5461	; 0x1555
 800e1ac:	e007      	b.n	800e1be <UART_SetConfig+0xaee>
 800e1ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e1b2:	e004      	b.n	800e1be <UART_SetConfig+0xaee>
 800e1b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e1b8:	e001      	b.n	800e1be <UART_SetConfig+0xaee>
 800e1ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e1be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e1c0:	e003      	b.n	800e1ca <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800e1c8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800e1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	f001 83e8 	beq.w	800f9a2 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	685a      	ldr	r2, [r3, #4]
 800e1d6:	4613      	mov	r3, r2
 800e1d8:	005b      	lsls	r3, r3, #1
 800e1da:	4413      	add	r3, r2
 800e1dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e1de:	429a      	cmp	r2, r3
 800e1e0:	d305      	bcc.n	800e1ee <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	685b      	ldr	r3, [r3, #4]
 800e1e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e1e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e1ea:	429a      	cmp	r2, r3
 800e1ec:	d904      	bls.n	800e1f8 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e1f4:	f001 bbd5 	b.w	800f9a2 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 800e1f8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e1fc:	2b08      	cmp	r3, #8
 800e1fe:	f000 8154 	beq.w	800e4aa <UART_SetConfig+0xdda>
 800e202:	2b08      	cmp	r3, #8
 800e204:	dc06      	bgt.n	800e214 <UART_SetConfig+0xb44>
 800e206:	2b02      	cmp	r3, #2
 800e208:	d00f      	beq.n	800e22a <UART_SetConfig+0xb5a>
 800e20a:	2b04      	cmp	r3, #4
 800e20c:	f000 80ac 	beq.w	800e368 <UART_SetConfig+0xc98>
 800e210:	f000 bc30 	b.w	800ea74 <UART_SetConfig+0x13a4>
 800e214:	2b20      	cmp	r3, #32
 800e216:	f000 832d 	beq.w	800e874 <UART_SetConfig+0x11a4>
 800e21a:	2b40      	cmp	r3, #64	; 0x40
 800e21c:	f000 83a5 	beq.w	800e96a <UART_SetConfig+0x129a>
 800e220:	2b10      	cmp	r3, #16
 800e222:	f000 81e3 	beq.w	800e5ec <UART_SetConfig+0xf1c>
 800e226:	f000 bc25 	b.w	800ea74 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e22a:	f7fc f933 	bl	800a494 <HAL_RCCEx_GetD3PCLK1Freq>
 800e22e:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e232:	4618      	mov	r0, r3
 800e234:	f04f 0100 	mov.w	r1, #0
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d067      	beq.n	800e310 <UART_SetConfig+0xc40>
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e244:	2b01      	cmp	r3, #1
 800e246:	d05e      	beq.n	800e306 <UART_SetConfig+0xc36>
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e24c:	2b02      	cmp	r3, #2
 800e24e:	d055      	beq.n	800e2fc <UART_SetConfig+0xc2c>
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e254:	2b03      	cmp	r3, #3
 800e256:	d04c      	beq.n	800e2f2 <UART_SetConfig+0xc22>
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e25c:	2b04      	cmp	r3, #4
 800e25e:	d043      	beq.n	800e2e8 <UART_SetConfig+0xc18>
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e264:	2b05      	cmp	r3, #5
 800e266:	d03a      	beq.n	800e2de <UART_SetConfig+0xc0e>
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e26c:	2b06      	cmp	r3, #6
 800e26e:	d031      	beq.n	800e2d4 <UART_SetConfig+0xc04>
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e274:	2b07      	cmp	r3, #7
 800e276:	d028      	beq.n	800e2ca <UART_SetConfig+0xbfa>
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e27c:	2b08      	cmp	r3, #8
 800e27e:	d01f      	beq.n	800e2c0 <UART_SetConfig+0xbf0>
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e284:	2b09      	cmp	r3, #9
 800e286:	d016      	beq.n	800e2b6 <UART_SetConfig+0xbe6>
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e28c:	2b0a      	cmp	r3, #10
 800e28e:	d00d      	beq.n	800e2ac <UART_SetConfig+0xbdc>
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e294:	2b0b      	cmp	r3, #11
 800e296:	d104      	bne.n	800e2a2 <UART_SetConfig+0xbd2>
 800e298:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e29c:	f04f 0400 	mov.w	r4, #0
 800e2a0:	e03a      	b.n	800e318 <UART_SetConfig+0xc48>
 800e2a2:	f04f 0301 	mov.w	r3, #1
 800e2a6:	f04f 0400 	mov.w	r4, #0
 800e2aa:	e035      	b.n	800e318 <UART_SetConfig+0xc48>
 800e2ac:	f04f 0380 	mov.w	r3, #128	; 0x80
 800e2b0:	f04f 0400 	mov.w	r4, #0
 800e2b4:	e030      	b.n	800e318 <UART_SetConfig+0xc48>
 800e2b6:	f04f 0340 	mov.w	r3, #64	; 0x40
 800e2ba:	f04f 0400 	mov.w	r4, #0
 800e2be:	e02b      	b.n	800e318 <UART_SetConfig+0xc48>
 800e2c0:	f04f 0320 	mov.w	r3, #32
 800e2c4:	f04f 0400 	mov.w	r4, #0
 800e2c8:	e026      	b.n	800e318 <UART_SetConfig+0xc48>
 800e2ca:	f04f 0310 	mov.w	r3, #16
 800e2ce:	f04f 0400 	mov.w	r4, #0
 800e2d2:	e021      	b.n	800e318 <UART_SetConfig+0xc48>
 800e2d4:	f04f 030c 	mov.w	r3, #12
 800e2d8:	f04f 0400 	mov.w	r4, #0
 800e2dc:	e01c      	b.n	800e318 <UART_SetConfig+0xc48>
 800e2de:	f04f 030a 	mov.w	r3, #10
 800e2e2:	f04f 0400 	mov.w	r4, #0
 800e2e6:	e017      	b.n	800e318 <UART_SetConfig+0xc48>
 800e2e8:	f04f 0308 	mov.w	r3, #8
 800e2ec:	f04f 0400 	mov.w	r4, #0
 800e2f0:	e012      	b.n	800e318 <UART_SetConfig+0xc48>
 800e2f2:	f04f 0306 	mov.w	r3, #6
 800e2f6:	f04f 0400 	mov.w	r4, #0
 800e2fa:	e00d      	b.n	800e318 <UART_SetConfig+0xc48>
 800e2fc:	f04f 0304 	mov.w	r3, #4
 800e300:	f04f 0400 	mov.w	r4, #0
 800e304:	e008      	b.n	800e318 <UART_SetConfig+0xc48>
 800e306:	f04f 0302 	mov.w	r3, #2
 800e30a:	f04f 0400 	mov.w	r4, #0
 800e30e:	e003      	b.n	800e318 <UART_SetConfig+0xc48>
 800e310:	f04f 0301 	mov.w	r3, #1
 800e314:	f04f 0400 	mov.w	r4, #0
 800e318:	461a      	mov	r2, r3
 800e31a:	4623      	mov	r3, r4
 800e31c:	f7f1 ffdc 	bl	80002d8 <__aeabi_uldivmod>
 800e320:	4603      	mov	r3, r0
 800e322:	460c      	mov	r4, r1
 800e324:	4619      	mov	r1, r3
 800e326:	4622      	mov	r2, r4
 800e328:	f04f 0300 	mov.w	r3, #0
 800e32c:	f04f 0400 	mov.w	r4, #0
 800e330:	0214      	lsls	r4, r2, #8
 800e332:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800e336:	020b      	lsls	r3, r1, #8
 800e338:	687a      	ldr	r2, [r7, #4]
 800e33a:	6852      	ldr	r2, [r2, #4]
 800e33c:	0852      	lsrs	r2, r2, #1
 800e33e:	4611      	mov	r1, r2
 800e340:	f04f 0200 	mov.w	r2, #0
 800e344:	eb13 0b01 	adds.w	fp, r3, r1
 800e348:	eb44 0c02 	adc.w	ip, r4, r2
 800e34c:	4658      	mov	r0, fp
 800e34e:	4661      	mov	r1, ip
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	685b      	ldr	r3, [r3, #4]
 800e354:	f04f 0400 	mov.w	r4, #0
 800e358:	461a      	mov	r2, r3
 800e35a:	4623      	mov	r3, r4
 800e35c:	f7f1 ffbc 	bl	80002d8 <__aeabi_uldivmod>
 800e360:	4603      	mov	r3, r0
 800e362:	460c      	mov	r4, r1
 800e364:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800e366:	e389      	b.n	800ea7c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e368:	f107 0318 	add.w	r3, r7, #24
 800e36c:	4618      	mov	r0, r3
 800e36e:	f7fc f8a7 	bl	800a4c0 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e372:	69fb      	ldr	r3, [r7, #28]
 800e374:	4618      	mov	r0, r3
 800e376:	f04f 0100 	mov.w	r1, #0
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d067      	beq.n	800e452 <UART_SetConfig+0xd82>
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e386:	2b01      	cmp	r3, #1
 800e388:	d05e      	beq.n	800e448 <UART_SetConfig+0xd78>
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e38e:	2b02      	cmp	r3, #2
 800e390:	d055      	beq.n	800e43e <UART_SetConfig+0xd6e>
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e396:	2b03      	cmp	r3, #3
 800e398:	d04c      	beq.n	800e434 <UART_SetConfig+0xd64>
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e39e:	2b04      	cmp	r3, #4
 800e3a0:	d043      	beq.n	800e42a <UART_SetConfig+0xd5a>
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3a6:	2b05      	cmp	r3, #5
 800e3a8:	d03a      	beq.n	800e420 <UART_SetConfig+0xd50>
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3ae:	2b06      	cmp	r3, #6
 800e3b0:	d031      	beq.n	800e416 <UART_SetConfig+0xd46>
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3b6:	2b07      	cmp	r3, #7
 800e3b8:	d028      	beq.n	800e40c <UART_SetConfig+0xd3c>
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3be:	2b08      	cmp	r3, #8
 800e3c0:	d01f      	beq.n	800e402 <UART_SetConfig+0xd32>
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3c6:	2b09      	cmp	r3, #9
 800e3c8:	d016      	beq.n	800e3f8 <UART_SetConfig+0xd28>
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3ce:	2b0a      	cmp	r3, #10
 800e3d0:	d00d      	beq.n	800e3ee <UART_SetConfig+0xd1e>
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3d6:	2b0b      	cmp	r3, #11
 800e3d8:	d104      	bne.n	800e3e4 <UART_SetConfig+0xd14>
 800e3da:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e3de:	f04f 0400 	mov.w	r4, #0
 800e3e2:	e03a      	b.n	800e45a <UART_SetConfig+0xd8a>
 800e3e4:	f04f 0301 	mov.w	r3, #1
 800e3e8:	f04f 0400 	mov.w	r4, #0
 800e3ec:	e035      	b.n	800e45a <UART_SetConfig+0xd8a>
 800e3ee:	f04f 0380 	mov.w	r3, #128	; 0x80
 800e3f2:	f04f 0400 	mov.w	r4, #0
 800e3f6:	e030      	b.n	800e45a <UART_SetConfig+0xd8a>
 800e3f8:	f04f 0340 	mov.w	r3, #64	; 0x40
 800e3fc:	f04f 0400 	mov.w	r4, #0
 800e400:	e02b      	b.n	800e45a <UART_SetConfig+0xd8a>
 800e402:	f04f 0320 	mov.w	r3, #32
 800e406:	f04f 0400 	mov.w	r4, #0
 800e40a:	e026      	b.n	800e45a <UART_SetConfig+0xd8a>
 800e40c:	f04f 0310 	mov.w	r3, #16
 800e410:	f04f 0400 	mov.w	r4, #0
 800e414:	e021      	b.n	800e45a <UART_SetConfig+0xd8a>
 800e416:	f04f 030c 	mov.w	r3, #12
 800e41a:	f04f 0400 	mov.w	r4, #0
 800e41e:	e01c      	b.n	800e45a <UART_SetConfig+0xd8a>
 800e420:	f04f 030a 	mov.w	r3, #10
 800e424:	f04f 0400 	mov.w	r4, #0
 800e428:	e017      	b.n	800e45a <UART_SetConfig+0xd8a>
 800e42a:	f04f 0308 	mov.w	r3, #8
 800e42e:	f04f 0400 	mov.w	r4, #0
 800e432:	e012      	b.n	800e45a <UART_SetConfig+0xd8a>
 800e434:	f04f 0306 	mov.w	r3, #6
 800e438:	f04f 0400 	mov.w	r4, #0
 800e43c:	e00d      	b.n	800e45a <UART_SetConfig+0xd8a>
 800e43e:	f04f 0304 	mov.w	r3, #4
 800e442:	f04f 0400 	mov.w	r4, #0
 800e446:	e008      	b.n	800e45a <UART_SetConfig+0xd8a>
 800e448:	f04f 0302 	mov.w	r3, #2
 800e44c:	f04f 0400 	mov.w	r4, #0
 800e450:	e003      	b.n	800e45a <UART_SetConfig+0xd8a>
 800e452:	f04f 0301 	mov.w	r3, #1
 800e456:	f04f 0400 	mov.w	r4, #0
 800e45a:	461a      	mov	r2, r3
 800e45c:	4623      	mov	r3, r4
 800e45e:	f7f1 ff3b 	bl	80002d8 <__aeabi_uldivmod>
 800e462:	4603      	mov	r3, r0
 800e464:	460c      	mov	r4, r1
 800e466:	4619      	mov	r1, r3
 800e468:	4622      	mov	r2, r4
 800e46a:	f04f 0300 	mov.w	r3, #0
 800e46e:	f04f 0400 	mov.w	r4, #0
 800e472:	0214      	lsls	r4, r2, #8
 800e474:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800e478:	020b      	lsls	r3, r1, #8
 800e47a:	687a      	ldr	r2, [r7, #4]
 800e47c:	6852      	ldr	r2, [r2, #4]
 800e47e:	0852      	lsrs	r2, r2, #1
 800e480:	4611      	mov	r1, r2
 800e482:	f04f 0200 	mov.w	r2, #0
 800e486:	eb13 0b01 	adds.w	fp, r3, r1
 800e48a:	eb44 0c02 	adc.w	ip, r4, r2
 800e48e:	4658      	mov	r0, fp
 800e490:	4661      	mov	r1, ip
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	685b      	ldr	r3, [r3, #4]
 800e496:	f04f 0400 	mov.w	r4, #0
 800e49a:	461a      	mov	r2, r3
 800e49c:	4623      	mov	r3, r4
 800e49e:	f7f1 ff1b 	bl	80002d8 <__aeabi_uldivmod>
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	460c      	mov	r4, r1
 800e4a6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800e4a8:	e2e8      	b.n	800ea7c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e4aa:	f107 030c 	add.w	r3, r7, #12
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f7fc f952 	bl	800a758 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e4b4:	693b      	ldr	r3, [r7, #16]
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f04f 0100 	mov.w	r1, #0
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d067      	beq.n	800e594 <UART_SetConfig+0xec4>
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4c8:	2b01      	cmp	r3, #1
 800e4ca:	d05e      	beq.n	800e58a <UART_SetConfig+0xeba>
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4d0:	2b02      	cmp	r3, #2
 800e4d2:	d055      	beq.n	800e580 <UART_SetConfig+0xeb0>
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4d8:	2b03      	cmp	r3, #3
 800e4da:	d04c      	beq.n	800e576 <UART_SetConfig+0xea6>
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4e0:	2b04      	cmp	r3, #4
 800e4e2:	d043      	beq.n	800e56c <UART_SetConfig+0xe9c>
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4e8:	2b05      	cmp	r3, #5
 800e4ea:	d03a      	beq.n	800e562 <UART_SetConfig+0xe92>
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4f0:	2b06      	cmp	r3, #6
 800e4f2:	d031      	beq.n	800e558 <UART_SetConfig+0xe88>
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4f8:	2b07      	cmp	r3, #7
 800e4fa:	d028      	beq.n	800e54e <UART_SetConfig+0xe7e>
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e500:	2b08      	cmp	r3, #8
 800e502:	d01f      	beq.n	800e544 <UART_SetConfig+0xe74>
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e508:	2b09      	cmp	r3, #9
 800e50a:	d016      	beq.n	800e53a <UART_SetConfig+0xe6a>
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e510:	2b0a      	cmp	r3, #10
 800e512:	d00d      	beq.n	800e530 <UART_SetConfig+0xe60>
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e518:	2b0b      	cmp	r3, #11
 800e51a:	d104      	bne.n	800e526 <UART_SetConfig+0xe56>
 800e51c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e520:	f04f 0400 	mov.w	r4, #0
 800e524:	e03a      	b.n	800e59c <UART_SetConfig+0xecc>
 800e526:	f04f 0301 	mov.w	r3, #1
 800e52a:	f04f 0400 	mov.w	r4, #0
 800e52e:	e035      	b.n	800e59c <UART_SetConfig+0xecc>
 800e530:	f04f 0380 	mov.w	r3, #128	; 0x80
 800e534:	f04f 0400 	mov.w	r4, #0
 800e538:	e030      	b.n	800e59c <UART_SetConfig+0xecc>
 800e53a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800e53e:	f04f 0400 	mov.w	r4, #0
 800e542:	e02b      	b.n	800e59c <UART_SetConfig+0xecc>
 800e544:	f04f 0320 	mov.w	r3, #32
 800e548:	f04f 0400 	mov.w	r4, #0
 800e54c:	e026      	b.n	800e59c <UART_SetConfig+0xecc>
 800e54e:	f04f 0310 	mov.w	r3, #16
 800e552:	f04f 0400 	mov.w	r4, #0
 800e556:	e021      	b.n	800e59c <UART_SetConfig+0xecc>
 800e558:	f04f 030c 	mov.w	r3, #12
 800e55c:	f04f 0400 	mov.w	r4, #0
 800e560:	e01c      	b.n	800e59c <UART_SetConfig+0xecc>
 800e562:	f04f 030a 	mov.w	r3, #10
 800e566:	f04f 0400 	mov.w	r4, #0
 800e56a:	e017      	b.n	800e59c <UART_SetConfig+0xecc>
 800e56c:	f04f 0308 	mov.w	r3, #8
 800e570:	f04f 0400 	mov.w	r4, #0
 800e574:	e012      	b.n	800e59c <UART_SetConfig+0xecc>
 800e576:	f04f 0306 	mov.w	r3, #6
 800e57a:	f04f 0400 	mov.w	r4, #0
 800e57e:	e00d      	b.n	800e59c <UART_SetConfig+0xecc>
 800e580:	f04f 0304 	mov.w	r3, #4
 800e584:	f04f 0400 	mov.w	r4, #0
 800e588:	e008      	b.n	800e59c <UART_SetConfig+0xecc>
 800e58a:	f04f 0302 	mov.w	r3, #2
 800e58e:	f04f 0400 	mov.w	r4, #0
 800e592:	e003      	b.n	800e59c <UART_SetConfig+0xecc>
 800e594:	f04f 0301 	mov.w	r3, #1
 800e598:	f04f 0400 	mov.w	r4, #0
 800e59c:	461a      	mov	r2, r3
 800e59e:	4623      	mov	r3, r4
 800e5a0:	f7f1 fe9a 	bl	80002d8 <__aeabi_uldivmod>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	460c      	mov	r4, r1
 800e5a8:	4619      	mov	r1, r3
 800e5aa:	4622      	mov	r2, r4
 800e5ac:	f04f 0300 	mov.w	r3, #0
 800e5b0:	f04f 0400 	mov.w	r4, #0
 800e5b4:	0214      	lsls	r4, r2, #8
 800e5b6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800e5ba:	020b      	lsls	r3, r1, #8
 800e5bc:	687a      	ldr	r2, [r7, #4]
 800e5be:	6852      	ldr	r2, [r2, #4]
 800e5c0:	0852      	lsrs	r2, r2, #1
 800e5c2:	4611      	mov	r1, r2
 800e5c4:	f04f 0200 	mov.w	r2, #0
 800e5c8:	eb13 0b01 	adds.w	fp, r3, r1
 800e5cc:	eb44 0c02 	adc.w	ip, r4, r2
 800e5d0:	4658      	mov	r0, fp
 800e5d2:	4661      	mov	r1, ip
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	685b      	ldr	r3, [r3, #4]
 800e5d8:	f04f 0400 	mov.w	r4, #0
 800e5dc:	461a      	mov	r2, r3
 800e5de:	4623      	mov	r3, r4
 800e5e0:	f7f1 fe7a 	bl	80002d8 <__aeabi_uldivmod>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	460c      	mov	r4, r1
 800e5e8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800e5ea:	e247      	b.n	800ea7c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e5ec:	4b96      	ldr	r3, [pc, #600]	; (800e848 <UART_SetConfig+0x1178>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	f003 0320 	and.w	r3, r3, #32
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	f000 80a3 	beq.w	800e740 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e5fa:	4b93      	ldr	r3, [pc, #588]	; (800e848 <UART_SetConfig+0x1178>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	08db      	lsrs	r3, r3, #3
 800e600:	f003 0303 	and.w	r3, r3, #3
 800e604:	4a91      	ldr	r2, [pc, #580]	; (800e84c <UART_SetConfig+0x117c>)
 800e606:	fa22 f303 	lsr.w	r3, r2, r3
 800e60a:	4618      	mov	r0, r3
 800e60c:	f04f 0100 	mov.w	r1, #0
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e614:	2b00      	cmp	r3, #0
 800e616:	d067      	beq.n	800e6e8 <UART_SetConfig+0x1018>
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e61c:	2b01      	cmp	r3, #1
 800e61e:	d05e      	beq.n	800e6de <UART_SetConfig+0x100e>
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e624:	2b02      	cmp	r3, #2
 800e626:	d055      	beq.n	800e6d4 <UART_SetConfig+0x1004>
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e62c:	2b03      	cmp	r3, #3
 800e62e:	d04c      	beq.n	800e6ca <UART_SetConfig+0xffa>
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e634:	2b04      	cmp	r3, #4
 800e636:	d043      	beq.n	800e6c0 <UART_SetConfig+0xff0>
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e63c:	2b05      	cmp	r3, #5
 800e63e:	d03a      	beq.n	800e6b6 <UART_SetConfig+0xfe6>
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e644:	2b06      	cmp	r3, #6
 800e646:	d031      	beq.n	800e6ac <UART_SetConfig+0xfdc>
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e64c:	2b07      	cmp	r3, #7
 800e64e:	d028      	beq.n	800e6a2 <UART_SetConfig+0xfd2>
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e654:	2b08      	cmp	r3, #8
 800e656:	d01f      	beq.n	800e698 <UART_SetConfig+0xfc8>
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e65c:	2b09      	cmp	r3, #9
 800e65e:	d016      	beq.n	800e68e <UART_SetConfig+0xfbe>
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e664:	2b0a      	cmp	r3, #10
 800e666:	d00d      	beq.n	800e684 <UART_SetConfig+0xfb4>
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e66c:	2b0b      	cmp	r3, #11
 800e66e:	d104      	bne.n	800e67a <UART_SetConfig+0xfaa>
 800e670:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e674:	f04f 0400 	mov.w	r4, #0
 800e678:	e03a      	b.n	800e6f0 <UART_SetConfig+0x1020>
 800e67a:	f04f 0301 	mov.w	r3, #1
 800e67e:	f04f 0400 	mov.w	r4, #0
 800e682:	e035      	b.n	800e6f0 <UART_SetConfig+0x1020>
 800e684:	f04f 0380 	mov.w	r3, #128	; 0x80
 800e688:	f04f 0400 	mov.w	r4, #0
 800e68c:	e030      	b.n	800e6f0 <UART_SetConfig+0x1020>
 800e68e:	f04f 0340 	mov.w	r3, #64	; 0x40
 800e692:	f04f 0400 	mov.w	r4, #0
 800e696:	e02b      	b.n	800e6f0 <UART_SetConfig+0x1020>
 800e698:	f04f 0320 	mov.w	r3, #32
 800e69c:	f04f 0400 	mov.w	r4, #0
 800e6a0:	e026      	b.n	800e6f0 <UART_SetConfig+0x1020>
 800e6a2:	f04f 0310 	mov.w	r3, #16
 800e6a6:	f04f 0400 	mov.w	r4, #0
 800e6aa:	e021      	b.n	800e6f0 <UART_SetConfig+0x1020>
 800e6ac:	f04f 030c 	mov.w	r3, #12
 800e6b0:	f04f 0400 	mov.w	r4, #0
 800e6b4:	e01c      	b.n	800e6f0 <UART_SetConfig+0x1020>
 800e6b6:	f04f 030a 	mov.w	r3, #10
 800e6ba:	f04f 0400 	mov.w	r4, #0
 800e6be:	e017      	b.n	800e6f0 <UART_SetConfig+0x1020>
 800e6c0:	f04f 0308 	mov.w	r3, #8
 800e6c4:	f04f 0400 	mov.w	r4, #0
 800e6c8:	e012      	b.n	800e6f0 <UART_SetConfig+0x1020>
 800e6ca:	f04f 0306 	mov.w	r3, #6
 800e6ce:	f04f 0400 	mov.w	r4, #0
 800e6d2:	e00d      	b.n	800e6f0 <UART_SetConfig+0x1020>
 800e6d4:	f04f 0304 	mov.w	r3, #4
 800e6d8:	f04f 0400 	mov.w	r4, #0
 800e6dc:	e008      	b.n	800e6f0 <UART_SetConfig+0x1020>
 800e6de:	f04f 0302 	mov.w	r3, #2
 800e6e2:	f04f 0400 	mov.w	r4, #0
 800e6e6:	e003      	b.n	800e6f0 <UART_SetConfig+0x1020>
 800e6e8:	f04f 0301 	mov.w	r3, #1
 800e6ec:	f04f 0400 	mov.w	r4, #0
 800e6f0:	461a      	mov	r2, r3
 800e6f2:	4623      	mov	r3, r4
 800e6f4:	f7f1 fdf0 	bl	80002d8 <__aeabi_uldivmod>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	460c      	mov	r4, r1
 800e6fc:	4619      	mov	r1, r3
 800e6fe:	4622      	mov	r2, r4
 800e700:	f04f 0300 	mov.w	r3, #0
 800e704:	f04f 0400 	mov.w	r4, #0
 800e708:	0214      	lsls	r4, r2, #8
 800e70a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800e70e:	020b      	lsls	r3, r1, #8
 800e710:	687a      	ldr	r2, [r7, #4]
 800e712:	6852      	ldr	r2, [r2, #4]
 800e714:	0852      	lsrs	r2, r2, #1
 800e716:	4611      	mov	r1, r2
 800e718:	f04f 0200 	mov.w	r2, #0
 800e71c:	eb13 0b01 	adds.w	fp, r3, r1
 800e720:	eb44 0c02 	adc.w	ip, r4, r2
 800e724:	4658      	mov	r0, fp
 800e726:	4661      	mov	r1, ip
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	685b      	ldr	r3, [r3, #4]
 800e72c:	f04f 0400 	mov.w	r4, #0
 800e730:	461a      	mov	r2, r3
 800e732:	4623      	mov	r3, r4
 800e734:	f7f1 fdd0 	bl	80002d8 <__aeabi_uldivmod>
 800e738:	4603      	mov	r3, r0
 800e73a:	460c      	mov	r4, r1
 800e73c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800e73e:	e19d      	b.n	800ea7c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e744:	2b00      	cmp	r3, #0
 800e746:	d05b      	beq.n	800e800 <UART_SetConfig+0x1130>
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e74c:	2b01      	cmp	r3, #1
 800e74e:	d053      	beq.n	800e7f8 <UART_SetConfig+0x1128>
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e754:	2b02      	cmp	r3, #2
 800e756:	d04b      	beq.n	800e7f0 <UART_SetConfig+0x1120>
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e75c:	2b03      	cmp	r3, #3
 800e75e:	d043      	beq.n	800e7e8 <UART_SetConfig+0x1118>
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e764:	2b04      	cmp	r3, #4
 800e766:	d03b      	beq.n	800e7e0 <UART_SetConfig+0x1110>
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e76c:	2b05      	cmp	r3, #5
 800e76e:	d033      	beq.n	800e7d8 <UART_SetConfig+0x1108>
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e774:	2b06      	cmp	r3, #6
 800e776:	d02b      	beq.n	800e7d0 <UART_SetConfig+0x1100>
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e77c:	2b07      	cmp	r3, #7
 800e77e:	d023      	beq.n	800e7c8 <UART_SetConfig+0x10f8>
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e784:	2b08      	cmp	r3, #8
 800e786:	d01b      	beq.n	800e7c0 <UART_SetConfig+0x10f0>
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e78c:	2b09      	cmp	r3, #9
 800e78e:	d013      	beq.n	800e7b8 <UART_SetConfig+0x10e8>
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e794:	2b0a      	cmp	r3, #10
 800e796:	d00b      	beq.n	800e7b0 <UART_SetConfig+0x10e0>
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e79c:	2b0b      	cmp	r3, #11
 800e79e:	d103      	bne.n	800e7a8 <UART_SetConfig+0x10d8>
 800e7a0:	4b2a      	ldr	r3, [pc, #168]	; (800e84c <UART_SetConfig+0x117c>)
 800e7a2:	f04f 0400 	mov.w	r4, #0
 800e7a6:	e02e      	b.n	800e806 <UART_SetConfig+0x1136>
 800e7a8:	4b29      	ldr	r3, [pc, #164]	; (800e850 <UART_SetConfig+0x1180>)
 800e7aa:	f04f 0403 	mov.w	r4, #3
 800e7ae:	e02a      	b.n	800e806 <UART_SetConfig+0x1136>
 800e7b0:	4b28      	ldr	r3, [pc, #160]	; (800e854 <UART_SetConfig+0x1184>)
 800e7b2:	f04f 0400 	mov.w	r4, #0
 800e7b6:	e026      	b.n	800e806 <UART_SetConfig+0x1136>
 800e7b8:	4b27      	ldr	r3, [pc, #156]	; (800e858 <UART_SetConfig+0x1188>)
 800e7ba:	f04f 0400 	mov.w	r4, #0
 800e7be:	e022      	b.n	800e806 <UART_SetConfig+0x1136>
 800e7c0:	4b26      	ldr	r3, [pc, #152]	; (800e85c <UART_SetConfig+0x118c>)
 800e7c2:	f04f 0400 	mov.w	r4, #0
 800e7c6:	e01e      	b.n	800e806 <UART_SetConfig+0x1136>
 800e7c8:	4b25      	ldr	r3, [pc, #148]	; (800e860 <UART_SetConfig+0x1190>)
 800e7ca:	f04f 0400 	mov.w	r4, #0
 800e7ce:	e01a      	b.n	800e806 <UART_SetConfig+0x1136>
 800e7d0:	a419      	add	r4, pc, #100	; (adr r4, 800e838 <UART_SetConfig+0x1168>)
 800e7d2:	e9d4 3400 	ldrd	r3, r4, [r4]
 800e7d6:	e016      	b.n	800e806 <UART_SetConfig+0x1136>
 800e7d8:	4b22      	ldr	r3, [pc, #136]	; (800e864 <UART_SetConfig+0x1194>)
 800e7da:	f04f 0400 	mov.w	r4, #0
 800e7de:	e012      	b.n	800e806 <UART_SetConfig+0x1136>
 800e7e0:	4b21      	ldr	r3, [pc, #132]	; (800e868 <UART_SetConfig+0x1198>)
 800e7e2:	f04f 0400 	mov.w	r4, #0
 800e7e6:	e00e      	b.n	800e806 <UART_SetConfig+0x1136>
 800e7e8:	a415      	add	r4, pc, #84	; (adr r4, 800e840 <UART_SetConfig+0x1170>)
 800e7ea:	e9d4 3400 	ldrd	r3, r4, [r4]
 800e7ee:	e00a      	b.n	800e806 <UART_SetConfig+0x1136>
 800e7f0:	4b1e      	ldr	r3, [pc, #120]	; (800e86c <UART_SetConfig+0x119c>)
 800e7f2:	f04f 0400 	mov.w	r4, #0
 800e7f6:	e006      	b.n	800e806 <UART_SetConfig+0x1136>
 800e7f8:	4b1d      	ldr	r3, [pc, #116]	; (800e870 <UART_SetConfig+0x11a0>)
 800e7fa:	f04f 0401 	mov.w	r4, #1
 800e7fe:	e002      	b.n	800e806 <UART_SetConfig+0x1136>
 800e800:	4b13      	ldr	r3, [pc, #76]	; (800e850 <UART_SetConfig+0x1180>)
 800e802:	f04f 0403 	mov.w	r4, #3
 800e806:	687a      	ldr	r2, [r7, #4]
 800e808:	6852      	ldr	r2, [r2, #4]
 800e80a:	0852      	lsrs	r2, r2, #1
 800e80c:	4611      	mov	r1, r2
 800e80e:	f04f 0200 	mov.w	r2, #0
 800e812:	eb13 0b01 	adds.w	fp, r3, r1
 800e816:	eb44 0c02 	adc.w	ip, r4, r2
 800e81a:	4658      	mov	r0, fp
 800e81c:	4661      	mov	r1, ip
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	685b      	ldr	r3, [r3, #4]
 800e822:	f04f 0400 	mov.w	r4, #0
 800e826:	461a      	mov	r2, r3
 800e828:	4623      	mov	r3, r4
 800e82a:	f7f1 fd55 	bl	80002d8 <__aeabi_uldivmod>
 800e82e:	4603      	mov	r3, r0
 800e830:	460c      	mov	r4, r1
 800e832:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800e834:	e122      	b.n	800ea7c <UART_SetConfig+0x13ac>
 800e836:	bf00      	nop
 800e838:	51615500 	.word	0x51615500
 800e83c:	00000000 	.word	0x00000000
 800e840:	a2c2aa00 	.word	0xa2c2aa00
 800e844:	00000000 	.word	0x00000000
 800e848:	58024400 	.word	0x58024400
 800e84c:	03d09000 	.word	0x03d09000
 800e850:	d0900000 	.word	0xd0900000
 800e854:	07a12000 	.word	0x07a12000
 800e858:	0f424000 	.word	0x0f424000
 800e85c:	1e848000 	.word	0x1e848000
 800e860:	3d090000 	.word	0x3d090000
 800e864:	61a80000 	.word	0x61a80000
 800e868:	7a120000 	.word	0x7a120000
 800e86c:	f4240000 	.word	0xf4240000
 800e870:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d05b      	beq.n	800e934 <UART_SetConfig+0x1264>
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e880:	2b01      	cmp	r3, #1
 800e882:	d053      	beq.n	800e92c <UART_SetConfig+0x125c>
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e888:	2b02      	cmp	r3, #2
 800e88a:	d04b      	beq.n	800e924 <UART_SetConfig+0x1254>
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e890:	2b03      	cmp	r3, #3
 800e892:	d043      	beq.n	800e91c <UART_SetConfig+0x124c>
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e898:	2b04      	cmp	r3, #4
 800e89a:	d03b      	beq.n	800e914 <UART_SetConfig+0x1244>
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8a0:	2b05      	cmp	r3, #5
 800e8a2:	d033      	beq.n	800e90c <UART_SetConfig+0x123c>
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8a8:	2b06      	cmp	r3, #6
 800e8aa:	d02b      	beq.n	800e904 <UART_SetConfig+0x1234>
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8b0:	2b07      	cmp	r3, #7
 800e8b2:	d023      	beq.n	800e8fc <UART_SetConfig+0x122c>
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8b8:	2b08      	cmp	r3, #8
 800e8ba:	d01b      	beq.n	800e8f4 <UART_SetConfig+0x1224>
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8c0:	2b09      	cmp	r3, #9
 800e8c2:	d013      	beq.n	800e8ec <UART_SetConfig+0x121c>
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8c8:	2b0a      	cmp	r3, #10
 800e8ca:	d00b      	beq.n	800e8e4 <UART_SetConfig+0x1214>
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8d0:	2b0b      	cmp	r3, #11
 800e8d2:	d103      	bne.n	800e8dc <UART_SetConfig+0x120c>
 800e8d4:	4bc0      	ldr	r3, [pc, #768]	; (800ebd8 <UART_SetConfig+0x1508>)
 800e8d6:	f04f 0400 	mov.w	r4, #0
 800e8da:	e02e      	b.n	800e93a <UART_SetConfig+0x126a>
 800e8dc:	4bbf      	ldr	r3, [pc, #764]	; (800ebdc <UART_SetConfig+0x150c>)
 800e8de:	f04f 0400 	mov.w	r4, #0
 800e8e2:	e02a      	b.n	800e93a <UART_SetConfig+0x126a>
 800e8e4:	4bbe      	ldr	r3, [pc, #760]	; (800ebe0 <UART_SetConfig+0x1510>)
 800e8e6:	f04f 0400 	mov.w	r4, #0
 800e8ea:	e026      	b.n	800e93a <UART_SetConfig+0x126a>
 800e8ec:	4bbd      	ldr	r3, [pc, #756]	; (800ebe4 <UART_SetConfig+0x1514>)
 800e8ee:	f04f 0400 	mov.w	r4, #0
 800e8f2:	e022      	b.n	800e93a <UART_SetConfig+0x126a>
 800e8f4:	4bbc      	ldr	r3, [pc, #752]	; (800ebe8 <UART_SetConfig+0x1518>)
 800e8f6:	f04f 0400 	mov.w	r4, #0
 800e8fa:	e01e      	b.n	800e93a <UART_SetConfig+0x126a>
 800e8fc:	4bbb      	ldr	r3, [pc, #748]	; (800ebec <UART_SetConfig+0x151c>)
 800e8fe:	f04f 0400 	mov.w	r4, #0
 800e902:	e01a      	b.n	800e93a <UART_SetConfig+0x126a>
 800e904:	a4b0      	add	r4, pc, #704	; (adr r4, 800ebc8 <UART_SetConfig+0x14f8>)
 800e906:	e9d4 3400 	ldrd	r3, r4, [r4]
 800e90a:	e016      	b.n	800e93a <UART_SetConfig+0x126a>
 800e90c:	4bb8      	ldr	r3, [pc, #736]	; (800ebf0 <UART_SetConfig+0x1520>)
 800e90e:	f04f 0400 	mov.w	r4, #0
 800e912:	e012      	b.n	800e93a <UART_SetConfig+0x126a>
 800e914:	4bb7      	ldr	r3, [pc, #732]	; (800ebf4 <UART_SetConfig+0x1524>)
 800e916:	f04f 0400 	mov.w	r4, #0
 800e91a:	e00e      	b.n	800e93a <UART_SetConfig+0x126a>
 800e91c:	a4ac      	add	r4, pc, #688	; (adr r4, 800ebd0 <UART_SetConfig+0x1500>)
 800e91e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800e922:	e00a      	b.n	800e93a <UART_SetConfig+0x126a>
 800e924:	4bb4      	ldr	r3, [pc, #720]	; (800ebf8 <UART_SetConfig+0x1528>)
 800e926:	f04f 0400 	mov.w	r4, #0
 800e92a:	e006      	b.n	800e93a <UART_SetConfig+0x126a>
 800e92c:	4bb3      	ldr	r3, [pc, #716]	; (800ebfc <UART_SetConfig+0x152c>)
 800e92e:	f04f 0400 	mov.w	r4, #0
 800e932:	e002      	b.n	800e93a <UART_SetConfig+0x126a>
 800e934:	4ba9      	ldr	r3, [pc, #676]	; (800ebdc <UART_SetConfig+0x150c>)
 800e936:	f04f 0400 	mov.w	r4, #0
 800e93a:	687a      	ldr	r2, [r7, #4]
 800e93c:	6852      	ldr	r2, [r2, #4]
 800e93e:	0852      	lsrs	r2, r2, #1
 800e940:	4611      	mov	r1, r2
 800e942:	f04f 0200 	mov.w	r2, #0
 800e946:	eb13 0b01 	adds.w	fp, r3, r1
 800e94a:	eb44 0c02 	adc.w	ip, r4, r2
 800e94e:	4658      	mov	r0, fp
 800e950:	4661      	mov	r1, ip
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	685b      	ldr	r3, [r3, #4]
 800e956:	f04f 0400 	mov.w	r4, #0
 800e95a:	461a      	mov	r2, r3
 800e95c:	4623      	mov	r3, r4
 800e95e:	f7f1 fcbb 	bl	80002d8 <__aeabi_uldivmod>
 800e962:	4603      	mov	r3, r0
 800e964:	460c      	mov	r4, r1
 800e966:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800e968:	e088      	b.n	800ea7c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d064      	beq.n	800ea3c <UART_SetConfig+0x136c>
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e976:	2b01      	cmp	r3, #1
 800e978:	d05b      	beq.n	800ea32 <UART_SetConfig+0x1362>
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e97e:	2b02      	cmp	r3, #2
 800e980:	d052      	beq.n	800ea28 <UART_SetConfig+0x1358>
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e986:	2b03      	cmp	r3, #3
 800e988:	d04a      	beq.n	800ea20 <UART_SetConfig+0x1350>
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e98e:	2b04      	cmp	r3, #4
 800e990:	d041      	beq.n	800ea16 <UART_SetConfig+0x1346>
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e996:	2b05      	cmp	r3, #5
 800e998:	d039      	beq.n	800ea0e <UART_SetConfig+0x133e>
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e99e:	2b06      	cmp	r3, #6
 800e9a0:	d031      	beq.n	800ea06 <UART_SetConfig+0x1336>
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9a6:	2b07      	cmp	r3, #7
 800e9a8:	d028      	beq.n	800e9fc <UART_SetConfig+0x132c>
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9ae:	2b08      	cmp	r3, #8
 800e9b0:	d01f      	beq.n	800e9f2 <UART_SetConfig+0x1322>
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9b6:	2b09      	cmp	r3, #9
 800e9b8:	d016      	beq.n	800e9e8 <UART_SetConfig+0x1318>
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9be:	2b0a      	cmp	r3, #10
 800e9c0:	d00d      	beq.n	800e9de <UART_SetConfig+0x130e>
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9c6:	2b0b      	cmp	r3, #11
 800e9c8:	d104      	bne.n	800e9d4 <UART_SetConfig+0x1304>
 800e9ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e9ce:	f04f 0400 	mov.w	r4, #0
 800e9d2:	e037      	b.n	800ea44 <UART_SetConfig+0x1374>
 800e9d4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e9d8:	f04f 0400 	mov.w	r4, #0
 800e9dc:	e032      	b.n	800ea44 <UART_SetConfig+0x1374>
 800e9de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e9e2:	f04f 0400 	mov.w	r4, #0
 800e9e6:	e02d      	b.n	800ea44 <UART_SetConfig+0x1374>
 800e9e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e9ec:	f04f 0400 	mov.w	r4, #0
 800e9f0:	e028      	b.n	800ea44 <UART_SetConfig+0x1374>
 800e9f2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e9f6:	f04f 0400 	mov.w	r4, #0
 800e9fa:	e023      	b.n	800ea44 <UART_SetConfig+0x1374>
 800e9fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ea00:	f04f 0400 	mov.w	r4, #0
 800ea04:	e01e      	b.n	800ea44 <UART_SetConfig+0x1374>
 800ea06:	4b7e      	ldr	r3, [pc, #504]	; (800ec00 <UART_SetConfig+0x1530>)
 800ea08:	f04f 0400 	mov.w	r4, #0
 800ea0c:	e01a      	b.n	800ea44 <UART_SetConfig+0x1374>
 800ea0e:	4b7d      	ldr	r3, [pc, #500]	; (800ec04 <UART_SetConfig+0x1534>)
 800ea10:	f04f 0400 	mov.w	r4, #0
 800ea14:	e016      	b.n	800ea44 <UART_SetConfig+0x1374>
 800ea16:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ea1a:	f04f 0400 	mov.w	r4, #0
 800ea1e:	e011      	b.n	800ea44 <UART_SetConfig+0x1374>
 800ea20:	4b79      	ldr	r3, [pc, #484]	; (800ec08 <UART_SetConfig+0x1538>)
 800ea22:	f04f 0400 	mov.w	r4, #0
 800ea26:	e00d      	b.n	800ea44 <UART_SetConfig+0x1374>
 800ea28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ea2c:	f04f 0400 	mov.w	r4, #0
 800ea30:	e008      	b.n	800ea44 <UART_SetConfig+0x1374>
 800ea32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ea36:	f04f 0400 	mov.w	r4, #0
 800ea3a:	e003      	b.n	800ea44 <UART_SetConfig+0x1374>
 800ea3c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ea40:	f04f 0400 	mov.w	r4, #0
 800ea44:	687a      	ldr	r2, [r7, #4]
 800ea46:	6852      	ldr	r2, [r2, #4]
 800ea48:	0852      	lsrs	r2, r2, #1
 800ea4a:	4611      	mov	r1, r2
 800ea4c:	f04f 0200 	mov.w	r2, #0
 800ea50:	eb13 0b01 	adds.w	fp, r3, r1
 800ea54:	eb44 0c02 	adc.w	ip, r4, r2
 800ea58:	4658      	mov	r0, fp
 800ea5a:	4661      	mov	r1, ip
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	685b      	ldr	r3, [r3, #4]
 800ea60:	f04f 0400 	mov.w	r4, #0
 800ea64:	461a      	mov	r2, r3
 800ea66:	4623      	mov	r3, r4
 800ea68:	f7f1 fc36 	bl	80002d8 <__aeabi_uldivmod>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	460c      	mov	r4, r1
 800ea70:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ea72:	e003      	b.n	800ea7c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800ea74:	2301      	movs	r3, #1
 800ea76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800ea7a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ea7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ea82:	d309      	bcc.n	800ea98 <UART_SetConfig+0x13c8>
 800ea84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ea8a:	d205      	bcs.n	800ea98 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea92:	60da      	str	r2, [r3, #12]
 800ea94:	f000 bf85 	b.w	800f9a2 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800ea98:	2301      	movs	r3, #1
 800ea9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea9e:	f000 bf80 	b.w	800f9a2 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	69db      	ldr	r3, [r3, #28]
 800eaa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eaaa:	f040 83da 	bne.w	800f262 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800eaae:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800eab2:	2b40      	cmp	r3, #64	; 0x40
 800eab4:	f200 83b3 	bhi.w	800f21e <UART_SetConfig+0x1b4e>
 800eab8:	a201      	add	r2, pc, #4	; (adr r2, 800eac0 <UART_SetConfig+0x13f0>)
 800eaba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eabe:	bf00      	nop
 800eac0:	0800ec0d 	.word	0x0800ec0d
 800eac4:	0800ecc5 	.word	0x0800ecc5
 800eac8:	0800f21f 	.word	0x0800f21f
 800eacc:	0800f21f 	.word	0x0800f21f
 800ead0:	0800ed7d 	.word	0x0800ed7d
 800ead4:	0800f21f 	.word	0x0800f21f
 800ead8:	0800f21f 	.word	0x0800f21f
 800eadc:	0800f21f 	.word	0x0800f21f
 800eae0:	0800ee39 	.word	0x0800ee39
 800eae4:	0800f21f 	.word	0x0800f21f
 800eae8:	0800f21f 	.word	0x0800f21f
 800eaec:	0800f21f 	.word	0x0800f21f
 800eaf0:	0800f21f 	.word	0x0800f21f
 800eaf4:	0800f21f 	.word	0x0800f21f
 800eaf8:	0800f21f 	.word	0x0800f21f
 800eafc:	0800f21f 	.word	0x0800f21f
 800eb00:	0800eef5 	.word	0x0800eef5
 800eb04:	0800f21f 	.word	0x0800f21f
 800eb08:	0800f21f 	.word	0x0800f21f
 800eb0c:	0800f21f 	.word	0x0800f21f
 800eb10:	0800f21f 	.word	0x0800f21f
 800eb14:	0800f21f 	.word	0x0800f21f
 800eb18:	0800f21f 	.word	0x0800f21f
 800eb1c:	0800f21f 	.word	0x0800f21f
 800eb20:	0800f21f 	.word	0x0800f21f
 800eb24:	0800f21f 	.word	0x0800f21f
 800eb28:	0800f21f 	.word	0x0800f21f
 800eb2c:	0800f21f 	.word	0x0800f21f
 800eb30:	0800f21f 	.word	0x0800f21f
 800eb34:	0800f21f 	.word	0x0800f21f
 800eb38:	0800f21f 	.word	0x0800f21f
 800eb3c:	0800f21f 	.word	0x0800f21f
 800eb40:	0800f067 	.word	0x0800f067
 800eb44:	0800f21f 	.word	0x0800f21f
 800eb48:	0800f21f 	.word	0x0800f21f
 800eb4c:	0800f21f 	.word	0x0800f21f
 800eb50:	0800f21f 	.word	0x0800f21f
 800eb54:	0800f21f 	.word	0x0800f21f
 800eb58:	0800f21f 	.word	0x0800f21f
 800eb5c:	0800f21f 	.word	0x0800f21f
 800eb60:	0800f21f 	.word	0x0800f21f
 800eb64:	0800f21f 	.word	0x0800f21f
 800eb68:	0800f21f 	.word	0x0800f21f
 800eb6c:	0800f21f 	.word	0x0800f21f
 800eb70:	0800f21f 	.word	0x0800f21f
 800eb74:	0800f21f 	.word	0x0800f21f
 800eb78:	0800f21f 	.word	0x0800f21f
 800eb7c:	0800f21f 	.word	0x0800f21f
 800eb80:	0800f21f 	.word	0x0800f21f
 800eb84:	0800f21f 	.word	0x0800f21f
 800eb88:	0800f21f 	.word	0x0800f21f
 800eb8c:	0800f21f 	.word	0x0800f21f
 800eb90:	0800f21f 	.word	0x0800f21f
 800eb94:	0800f21f 	.word	0x0800f21f
 800eb98:	0800f21f 	.word	0x0800f21f
 800eb9c:	0800f21f 	.word	0x0800f21f
 800eba0:	0800f21f 	.word	0x0800f21f
 800eba4:	0800f21f 	.word	0x0800f21f
 800eba8:	0800f21f 	.word	0x0800f21f
 800ebac:	0800f21f 	.word	0x0800f21f
 800ebb0:	0800f21f 	.word	0x0800f21f
 800ebb4:	0800f21f 	.word	0x0800f21f
 800ebb8:	0800f21f 	.word	0x0800f21f
 800ebbc:	0800f21f 	.word	0x0800f21f
 800ebc0:	0800f15d 	.word	0x0800f15d
 800ebc4:	f3af 8000 	nop.w
 800ebc8:	05161500 	.word	0x05161500
 800ebcc:	00000000 	.word	0x00000000
 800ebd0:	0a2c2a00 	.word	0x0a2c2a00
 800ebd4:	00000000 	.word	0x00000000
 800ebd8:	003d0900 	.word	0x003d0900
 800ebdc:	3d090000 	.word	0x3d090000
 800ebe0:	007a1200 	.word	0x007a1200
 800ebe4:	00f42400 	.word	0x00f42400
 800ebe8:	01e84800 	.word	0x01e84800
 800ebec:	03d09000 	.word	0x03d09000
 800ebf0:	061a8000 	.word	0x061a8000
 800ebf4:	07a12000 	.word	0x07a12000
 800ebf8:	0f424000 	.word	0x0f424000
 800ebfc:	1e848000 	.word	0x1e848000
 800ec00:	000aaa00 	.word	0x000aaa00
 800ec04:	000ccc00 	.word	0x000ccc00
 800ec08:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ec0c:	f7fa fac0 	bl	8009190 <HAL_RCC_GetPCLK1Freq>
 800ec10:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d044      	beq.n	800eca4 <UART_SetConfig+0x15d4>
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec1e:	2b01      	cmp	r3, #1
 800ec20:	d03e      	beq.n	800eca0 <UART_SetConfig+0x15d0>
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec26:	2b02      	cmp	r3, #2
 800ec28:	d038      	beq.n	800ec9c <UART_SetConfig+0x15cc>
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec2e:	2b03      	cmp	r3, #3
 800ec30:	d032      	beq.n	800ec98 <UART_SetConfig+0x15c8>
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec36:	2b04      	cmp	r3, #4
 800ec38:	d02c      	beq.n	800ec94 <UART_SetConfig+0x15c4>
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec3e:	2b05      	cmp	r3, #5
 800ec40:	d026      	beq.n	800ec90 <UART_SetConfig+0x15c0>
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec46:	2b06      	cmp	r3, #6
 800ec48:	d020      	beq.n	800ec8c <UART_SetConfig+0x15bc>
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec4e:	2b07      	cmp	r3, #7
 800ec50:	d01a      	beq.n	800ec88 <UART_SetConfig+0x15b8>
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec56:	2b08      	cmp	r3, #8
 800ec58:	d014      	beq.n	800ec84 <UART_SetConfig+0x15b4>
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec5e:	2b09      	cmp	r3, #9
 800ec60:	d00e      	beq.n	800ec80 <UART_SetConfig+0x15b0>
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec66:	2b0a      	cmp	r3, #10
 800ec68:	d008      	beq.n	800ec7c <UART_SetConfig+0x15ac>
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec6e:	2b0b      	cmp	r3, #11
 800ec70:	d102      	bne.n	800ec78 <UART_SetConfig+0x15a8>
 800ec72:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ec76:	e016      	b.n	800eca6 <UART_SetConfig+0x15d6>
 800ec78:	2301      	movs	r3, #1
 800ec7a:	e014      	b.n	800eca6 <UART_SetConfig+0x15d6>
 800ec7c:	2380      	movs	r3, #128	; 0x80
 800ec7e:	e012      	b.n	800eca6 <UART_SetConfig+0x15d6>
 800ec80:	2340      	movs	r3, #64	; 0x40
 800ec82:	e010      	b.n	800eca6 <UART_SetConfig+0x15d6>
 800ec84:	2320      	movs	r3, #32
 800ec86:	e00e      	b.n	800eca6 <UART_SetConfig+0x15d6>
 800ec88:	2310      	movs	r3, #16
 800ec8a:	e00c      	b.n	800eca6 <UART_SetConfig+0x15d6>
 800ec8c:	230c      	movs	r3, #12
 800ec8e:	e00a      	b.n	800eca6 <UART_SetConfig+0x15d6>
 800ec90:	230a      	movs	r3, #10
 800ec92:	e008      	b.n	800eca6 <UART_SetConfig+0x15d6>
 800ec94:	2308      	movs	r3, #8
 800ec96:	e006      	b.n	800eca6 <UART_SetConfig+0x15d6>
 800ec98:	2306      	movs	r3, #6
 800ec9a:	e004      	b.n	800eca6 <UART_SetConfig+0x15d6>
 800ec9c:	2304      	movs	r3, #4
 800ec9e:	e002      	b.n	800eca6 <UART_SetConfig+0x15d6>
 800eca0:	2302      	movs	r3, #2
 800eca2:	e000      	b.n	800eca6 <UART_SetConfig+0x15d6>
 800eca4:	2301      	movs	r3, #1
 800eca6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eca8:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecac:	005a      	lsls	r2, r3, #1
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	685b      	ldr	r3, [r3, #4]
 800ecb2:	085b      	lsrs	r3, r3, #1
 800ecb4:	441a      	add	r2, r3
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	685b      	ldr	r3, [r3, #4]
 800ecba:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecbe:	b29b      	uxth	r3, r3
 800ecc0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ecc2:	e2b0      	b.n	800f226 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ecc4:	f7fa fa7a 	bl	80091bc <HAL_RCC_GetPCLK2Freq>
 800ecc8:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d044      	beq.n	800ed5c <UART_SetConfig+0x168c>
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecd6:	2b01      	cmp	r3, #1
 800ecd8:	d03e      	beq.n	800ed58 <UART_SetConfig+0x1688>
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecde:	2b02      	cmp	r3, #2
 800ece0:	d038      	beq.n	800ed54 <UART_SetConfig+0x1684>
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ece6:	2b03      	cmp	r3, #3
 800ece8:	d032      	beq.n	800ed50 <UART_SetConfig+0x1680>
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecee:	2b04      	cmp	r3, #4
 800ecf0:	d02c      	beq.n	800ed4c <UART_SetConfig+0x167c>
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecf6:	2b05      	cmp	r3, #5
 800ecf8:	d026      	beq.n	800ed48 <UART_SetConfig+0x1678>
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecfe:	2b06      	cmp	r3, #6
 800ed00:	d020      	beq.n	800ed44 <UART_SetConfig+0x1674>
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed06:	2b07      	cmp	r3, #7
 800ed08:	d01a      	beq.n	800ed40 <UART_SetConfig+0x1670>
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed0e:	2b08      	cmp	r3, #8
 800ed10:	d014      	beq.n	800ed3c <UART_SetConfig+0x166c>
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed16:	2b09      	cmp	r3, #9
 800ed18:	d00e      	beq.n	800ed38 <UART_SetConfig+0x1668>
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed1e:	2b0a      	cmp	r3, #10
 800ed20:	d008      	beq.n	800ed34 <UART_SetConfig+0x1664>
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed26:	2b0b      	cmp	r3, #11
 800ed28:	d102      	bne.n	800ed30 <UART_SetConfig+0x1660>
 800ed2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ed2e:	e016      	b.n	800ed5e <UART_SetConfig+0x168e>
 800ed30:	2301      	movs	r3, #1
 800ed32:	e014      	b.n	800ed5e <UART_SetConfig+0x168e>
 800ed34:	2380      	movs	r3, #128	; 0x80
 800ed36:	e012      	b.n	800ed5e <UART_SetConfig+0x168e>
 800ed38:	2340      	movs	r3, #64	; 0x40
 800ed3a:	e010      	b.n	800ed5e <UART_SetConfig+0x168e>
 800ed3c:	2320      	movs	r3, #32
 800ed3e:	e00e      	b.n	800ed5e <UART_SetConfig+0x168e>
 800ed40:	2310      	movs	r3, #16
 800ed42:	e00c      	b.n	800ed5e <UART_SetConfig+0x168e>
 800ed44:	230c      	movs	r3, #12
 800ed46:	e00a      	b.n	800ed5e <UART_SetConfig+0x168e>
 800ed48:	230a      	movs	r3, #10
 800ed4a:	e008      	b.n	800ed5e <UART_SetConfig+0x168e>
 800ed4c:	2308      	movs	r3, #8
 800ed4e:	e006      	b.n	800ed5e <UART_SetConfig+0x168e>
 800ed50:	2306      	movs	r3, #6
 800ed52:	e004      	b.n	800ed5e <UART_SetConfig+0x168e>
 800ed54:	2304      	movs	r3, #4
 800ed56:	e002      	b.n	800ed5e <UART_SetConfig+0x168e>
 800ed58:	2302      	movs	r3, #2
 800ed5a:	e000      	b.n	800ed5e <UART_SetConfig+0x168e>
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed60:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed64:	005a      	lsls	r2, r3, #1
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	685b      	ldr	r3, [r3, #4]
 800ed6a:	085b      	lsrs	r3, r3, #1
 800ed6c:	441a      	add	r2, r3
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	685b      	ldr	r3, [r3, #4]
 800ed72:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed76:	b29b      	uxth	r3, r3
 800ed78:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ed7a:	e254      	b.n	800f226 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ed7c:	f107 0318 	add.w	r3, r7, #24
 800ed80:	4618      	mov	r0, r3
 800ed82:	f7fb fb9d 	bl	800a4c0 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ed86:	69fa      	ldr	r2, [r7, #28]
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d044      	beq.n	800ee1a <UART_SetConfig+0x174a>
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed94:	2b01      	cmp	r3, #1
 800ed96:	d03e      	beq.n	800ee16 <UART_SetConfig+0x1746>
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed9c:	2b02      	cmp	r3, #2
 800ed9e:	d038      	beq.n	800ee12 <UART_SetConfig+0x1742>
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eda4:	2b03      	cmp	r3, #3
 800eda6:	d032      	beq.n	800ee0e <UART_SetConfig+0x173e>
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edac:	2b04      	cmp	r3, #4
 800edae:	d02c      	beq.n	800ee0a <UART_SetConfig+0x173a>
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edb4:	2b05      	cmp	r3, #5
 800edb6:	d026      	beq.n	800ee06 <UART_SetConfig+0x1736>
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edbc:	2b06      	cmp	r3, #6
 800edbe:	d020      	beq.n	800ee02 <UART_SetConfig+0x1732>
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edc4:	2b07      	cmp	r3, #7
 800edc6:	d01a      	beq.n	800edfe <UART_SetConfig+0x172e>
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edcc:	2b08      	cmp	r3, #8
 800edce:	d014      	beq.n	800edfa <UART_SetConfig+0x172a>
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edd4:	2b09      	cmp	r3, #9
 800edd6:	d00e      	beq.n	800edf6 <UART_SetConfig+0x1726>
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eddc:	2b0a      	cmp	r3, #10
 800edde:	d008      	beq.n	800edf2 <UART_SetConfig+0x1722>
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ede4:	2b0b      	cmp	r3, #11
 800ede6:	d102      	bne.n	800edee <UART_SetConfig+0x171e>
 800ede8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800edec:	e016      	b.n	800ee1c <UART_SetConfig+0x174c>
 800edee:	2301      	movs	r3, #1
 800edf0:	e014      	b.n	800ee1c <UART_SetConfig+0x174c>
 800edf2:	2380      	movs	r3, #128	; 0x80
 800edf4:	e012      	b.n	800ee1c <UART_SetConfig+0x174c>
 800edf6:	2340      	movs	r3, #64	; 0x40
 800edf8:	e010      	b.n	800ee1c <UART_SetConfig+0x174c>
 800edfa:	2320      	movs	r3, #32
 800edfc:	e00e      	b.n	800ee1c <UART_SetConfig+0x174c>
 800edfe:	2310      	movs	r3, #16
 800ee00:	e00c      	b.n	800ee1c <UART_SetConfig+0x174c>
 800ee02:	230c      	movs	r3, #12
 800ee04:	e00a      	b.n	800ee1c <UART_SetConfig+0x174c>
 800ee06:	230a      	movs	r3, #10
 800ee08:	e008      	b.n	800ee1c <UART_SetConfig+0x174c>
 800ee0a:	2308      	movs	r3, #8
 800ee0c:	e006      	b.n	800ee1c <UART_SetConfig+0x174c>
 800ee0e:	2306      	movs	r3, #6
 800ee10:	e004      	b.n	800ee1c <UART_SetConfig+0x174c>
 800ee12:	2304      	movs	r3, #4
 800ee14:	e002      	b.n	800ee1c <UART_SetConfig+0x174c>
 800ee16:	2302      	movs	r3, #2
 800ee18:	e000      	b.n	800ee1c <UART_SetConfig+0x174c>
 800ee1a:	2301      	movs	r3, #1
 800ee1c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee20:	005a      	lsls	r2, r3, #1
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	685b      	ldr	r3, [r3, #4]
 800ee26:	085b      	lsrs	r3, r3, #1
 800ee28:	441a      	add	r2, r3
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	685b      	ldr	r3, [r3, #4]
 800ee2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee32:	b29b      	uxth	r3, r3
 800ee34:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ee36:	e1f6      	b.n	800f226 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ee38:	f107 030c 	add.w	r3, r7, #12
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	f7fb fc8b 	bl	800a758 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ee42:	693a      	ldr	r2, [r7, #16]
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d044      	beq.n	800eed6 <UART_SetConfig+0x1806>
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee50:	2b01      	cmp	r3, #1
 800ee52:	d03e      	beq.n	800eed2 <UART_SetConfig+0x1802>
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee58:	2b02      	cmp	r3, #2
 800ee5a:	d038      	beq.n	800eece <UART_SetConfig+0x17fe>
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee60:	2b03      	cmp	r3, #3
 800ee62:	d032      	beq.n	800eeca <UART_SetConfig+0x17fa>
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee68:	2b04      	cmp	r3, #4
 800ee6a:	d02c      	beq.n	800eec6 <UART_SetConfig+0x17f6>
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee70:	2b05      	cmp	r3, #5
 800ee72:	d026      	beq.n	800eec2 <UART_SetConfig+0x17f2>
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee78:	2b06      	cmp	r3, #6
 800ee7a:	d020      	beq.n	800eebe <UART_SetConfig+0x17ee>
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee80:	2b07      	cmp	r3, #7
 800ee82:	d01a      	beq.n	800eeba <UART_SetConfig+0x17ea>
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee88:	2b08      	cmp	r3, #8
 800ee8a:	d014      	beq.n	800eeb6 <UART_SetConfig+0x17e6>
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee90:	2b09      	cmp	r3, #9
 800ee92:	d00e      	beq.n	800eeb2 <UART_SetConfig+0x17e2>
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee98:	2b0a      	cmp	r3, #10
 800ee9a:	d008      	beq.n	800eeae <UART_SetConfig+0x17de>
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eea0:	2b0b      	cmp	r3, #11
 800eea2:	d102      	bne.n	800eeaa <UART_SetConfig+0x17da>
 800eea4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eea8:	e016      	b.n	800eed8 <UART_SetConfig+0x1808>
 800eeaa:	2301      	movs	r3, #1
 800eeac:	e014      	b.n	800eed8 <UART_SetConfig+0x1808>
 800eeae:	2380      	movs	r3, #128	; 0x80
 800eeb0:	e012      	b.n	800eed8 <UART_SetConfig+0x1808>
 800eeb2:	2340      	movs	r3, #64	; 0x40
 800eeb4:	e010      	b.n	800eed8 <UART_SetConfig+0x1808>
 800eeb6:	2320      	movs	r3, #32
 800eeb8:	e00e      	b.n	800eed8 <UART_SetConfig+0x1808>
 800eeba:	2310      	movs	r3, #16
 800eebc:	e00c      	b.n	800eed8 <UART_SetConfig+0x1808>
 800eebe:	230c      	movs	r3, #12
 800eec0:	e00a      	b.n	800eed8 <UART_SetConfig+0x1808>
 800eec2:	230a      	movs	r3, #10
 800eec4:	e008      	b.n	800eed8 <UART_SetConfig+0x1808>
 800eec6:	2308      	movs	r3, #8
 800eec8:	e006      	b.n	800eed8 <UART_SetConfig+0x1808>
 800eeca:	2306      	movs	r3, #6
 800eecc:	e004      	b.n	800eed8 <UART_SetConfig+0x1808>
 800eece:	2304      	movs	r3, #4
 800eed0:	e002      	b.n	800eed8 <UART_SetConfig+0x1808>
 800eed2:	2302      	movs	r3, #2
 800eed4:	e000      	b.n	800eed8 <UART_SetConfig+0x1808>
 800eed6:	2301      	movs	r3, #1
 800eed8:	fbb2 f3f3 	udiv	r3, r2, r3
 800eedc:	005a      	lsls	r2, r3, #1
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	685b      	ldr	r3, [r3, #4]
 800eee2:	085b      	lsrs	r3, r3, #1
 800eee4:	441a      	add	r2, r3
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	685b      	ldr	r3, [r3, #4]
 800eeea:	fbb2 f3f3 	udiv	r3, r2, r3
 800eeee:	b29b      	uxth	r3, r3
 800eef0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800eef2:	e198      	b.n	800f226 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eef4:	4b87      	ldr	r3, [pc, #540]	; (800f114 <UART_SetConfig+0x1a44>)
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	f003 0320 	and.w	r3, r3, #32
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d05e      	beq.n	800efbe <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ef00:	4b84      	ldr	r3, [pc, #528]	; (800f114 <UART_SetConfig+0x1a44>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	08db      	lsrs	r3, r3, #3
 800ef06:	f003 0303 	and.w	r3, r3, #3
 800ef0a:	4a83      	ldr	r2, [pc, #524]	; (800f118 <UART_SetConfig+0x1a48>)
 800ef0c:	40da      	lsrs	r2, r3
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d044      	beq.n	800efa0 <UART_SetConfig+0x18d0>
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef1a:	2b01      	cmp	r3, #1
 800ef1c:	d03e      	beq.n	800ef9c <UART_SetConfig+0x18cc>
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef22:	2b02      	cmp	r3, #2
 800ef24:	d038      	beq.n	800ef98 <UART_SetConfig+0x18c8>
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef2a:	2b03      	cmp	r3, #3
 800ef2c:	d032      	beq.n	800ef94 <UART_SetConfig+0x18c4>
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef32:	2b04      	cmp	r3, #4
 800ef34:	d02c      	beq.n	800ef90 <UART_SetConfig+0x18c0>
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef3a:	2b05      	cmp	r3, #5
 800ef3c:	d026      	beq.n	800ef8c <UART_SetConfig+0x18bc>
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef42:	2b06      	cmp	r3, #6
 800ef44:	d020      	beq.n	800ef88 <UART_SetConfig+0x18b8>
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef4a:	2b07      	cmp	r3, #7
 800ef4c:	d01a      	beq.n	800ef84 <UART_SetConfig+0x18b4>
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef52:	2b08      	cmp	r3, #8
 800ef54:	d014      	beq.n	800ef80 <UART_SetConfig+0x18b0>
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef5a:	2b09      	cmp	r3, #9
 800ef5c:	d00e      	beq.n	800ef7c <UART_SetConfig+0x18ac>
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef62:	2b0a      	cmp	r3, #10
 800ef64:	d008      	beq.n	800ef78 <UART_SetConfig+0x18a8>
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef6a:	2b0b      	cmp	r3, #11
 800ef6c:	d102      	bne.n	800ef74 <UART_SetConfig+0x18a4>
 800ef6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ef72:	e016      	b.n	800efa2 <UART_SetConfig+0x18d2>
 800ef74:	2301      	movs	r3, #1
 800ef76:	e014      	b.n	800efa2 <UART_SetConfig+0x18d2>
 800ef78:	2380      	movs	r3, #128	; 0x80
 800ef7a:	e012      	b.n	800efa2 <UART_SetConfig+0x18d2>
 800ef7c:	2340      	movs	r3, #64	; 0x40
 800ef7e:	e010      	b.n	800efa2 <UART_SetConfig+0x18d2>
 800ef80:	2320      	movs	r3, #32
 800ef82:	e00e      	b.n	800efa2 <UART_SetConfig+0x18d2>
 800ef84:	2310      	movs	r3, #16
 800ef86:	e00c      	b.n	800efa2 <UART_SetConfig+0x18d2>
 800ef88:	230c      	movs	r3, #12
 800ef8a:	e00a      	b.n	800efa2 <UART_SetConfig+0x18d2>
 800ef8c:	230a      	movs	r3, #10
 800ef8e:	e008      	b.n	800efa2 <UART_SetConfig+0x18d2>
 800ef90:	2308      	movs	r3, #8
 800ef92:	e006      	b.n	800efa2 <UART_SetConfig+0x18d2>
 800ef94:	2306      	movs	r3, #6
 800ef96:	e004      	b.n	800efa2 <UART_SetConfig+0x18d2>
 800ef98:	2304      	movs	r3, #4
 800ef9a:	e002      	b.n	800efa2 <UART_SetConfig+0x18d2>
 800ef9c:	2302      	movs	r3, #2
 800ef9e:	e000      	b.n	800efa2 <UART_SetConfig+0x18d2>
 800efa0:	2301      	movs	r3, #1
 800efa2:	fbb2 f3f3 	udiv	r3, r2, r3
 800efa6:	005a      	lsls	r2, r3, #1
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	685b      	ldr	r3, [r3, #4]
 800efac:	085b      	lsrs	r3, r3, #1
 800efae:	441a      	add	r2, r3
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	685b      	ldr	r3, [r3, #4]
 800efb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800efb8:	b29b      	uxth	r3, r3
 800efba:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800efbc:	e133      	b.n	800f226 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d043      	beq.n	800f04e <UART_SetConfig+0x197e>
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efca:	2b01      	cmp	r3, #1
 800efcc:	d03d      	beq.n	800f04a <UART_SetConfig+0x197a>
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efd2:	2b02      	cmp	r3, #2
 800efd4:	d037      	beq.n	800f046 <UART_SetConfig+0x1976>
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efda:	2b03      	cmp	r3, #3
 800efdc:	d031      	beq.n	800f042 <UART_SetConfig+0x1972>
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efe2:	2b04      	cmp	r3, #4
 800efe4:	d02b      	beq.n	800f03e <UART_SetConfig+0x196e>
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efea:	2b05      	cmp	r3, #5
 800efec:	d025      	beq.n	800f03a <UART_SetConfig+0x196a>
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eff2:	2b06      	cmp	r3, #6
 800eff4:	d01f      	beq.n	800f036 <UART_SetConfig+0x1966>
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800effa:	2b07      	cmp	r3, #7
 800effc:	d019      	beq.n	800f032 <UART_SetConfig+0x1962>
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f002:	2b08      	cmp	r3, #8
 800f004:	d013      	beq.n	800f02e <UART_SetConfig+0x195e>
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f00a:	2b09      	cmp	r3, #9
 800f00c:	d00d      	beq.n	800f02a <UART_SetConfig+0x195a>
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f012:	2b0a      	cmp	r3, #10
 800f014:	d007      	beq.n	800f026 <UART_SetConfig+0x1956>
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f01a:	2b0b      	cmp	r3, #11
 800f01c:	d101      	bne.n	800f022 <UART_SetConfig+0x1952>
 800f01e:	4b3f      	ldr	r3, [pc, #252]	; (800f11c <UART_SetConfig+0x1a4c>)
 800f020:	e016      	b.n	800f050 <UART_SetConfig+0x1980>
 800f022:	4b3f      	ldr	r3, [pc, #252]	; (800f120 <UART_SetConfig+0x1a50>)
 800f024:	e014      	b.n	800f050 <UART_SetConfig+0x1980>
 800f026:	4b3f      	ldr	r3, [pc, #252]	; (800f124 <UART_SetConfig+0x1a54>)
 800f028:	e012      	b.n	800f050 <UART_SetConfig+0x1980>
 800f02a:	4b3f      	ldr	r3, [pc, #252]	; (800f128 <UART_SetConfig+0x1a58>)
 800f02c:	e010      	b.n	800f050 <UART_SetConfig+0x1980>
 800f02e:	4b3f      	ldr	r3, [pc, #252]	; (800f12c <UART_SetConfig+0x1a5c>)
 800f030:	e00e      	b.n	800f050 <UART_SetConfig+0x1980>
 800f032:	4b3f      	ldr	r3, [pc, #252]	; (800f130 <UART_SetConfig+0x1a60>)
 800f034:	e00c      	b.n	800f050 <UART_SetConfig+0x1980>
 800f036:	4b3f      	ldr	r3, [pc, #252]	; (800f134 <UART_SetConfig+0x1a64>)
 800f038:	e00a      	b.n	800f050 <UART_SetConfig+0x1980>
 800f03a:	4b3f      	ldr	r3, [pc, #252]	; (800f138 <UART_SetConfig+0x1a68>)
 800f03c:	e008      	b.n	800f050 <UART_SetConfig+0x1980>
 800f03e:	4b3f      	ldr	r3, [pc, #252]	; (800f13c <UART_SetConfig+0x1a6c>)
 800f040:	e006      	b.n	800f050 <UART_SetConfig+0x1980>
 800f042:	4b3f      	ldr	r3, [pc, #252]	; (800f140 <UART_SetConfig+0x1a70>)
 800f044:	e004      	b.n	800f050 <UART_SetConfig+0x1980>
 800f046:	4b3f      	ldr	r3, [pc, #252]	; (800f144 <UART_SetConfig+0x1a74>)
 800f048:	e002      	b.n	800f050 <UART_SetConfig+0x1980>
 800f04a:	4b33      	ldr	r3, [pc, #204]	; (800f118 <UART_SetConfig+0x1a48>)
 800f04c:	e000      	b.n	800f050 <UART_SetConfig+0x1980>
 800f04e:	4b34      	ldr	r3, [pc, #208]	; (800f120 <UART_SetConfig+0x1a50>)
 800f050:	687a      	ldr	r2, [r7, #4]
 800f052:	6852      	ldr	r2, [r2, #4]
 800f054:	0852      	lsrs	r2, r2, #1
 800f056:	441a      	add	r2, r3
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	685b      	ldr	r3, [r3, #4]
 800f05c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f060:	b29b      	uxth	r3, r3
 800f062:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f064:	e0df      	b.n	800f226 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d045      	beq.n	800f0fa <UART_SetConfig+0x1a2a>
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f072:	2b01      	cmp	r3, #1
 800f074:	d03f      	beq.n	800f0f6 <UART_SetConfig+0x1a26>
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f07a:	2b02      	cmp	r3, #2
 800f07c:	d039      	beq.n	800f0f2 <UART_SetConfig+0x1a22>
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f082:	2b03      	cmp	r3, #3
 800f084:	d033      	beq.n	800f0ee <UART_SetConfig+0x1a1e>
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f08a:	2b04      	cmp	r3, #4
 800f08c:	d02d      	beq.n	800f0ea <UART_SetConfig+0x1a1a>
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f092:	2b05      	cmp	r3, #5
 800f094:	d027      	beq.n	800f0e6 <UART_SetConfig+0x1a16>
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f09a:	2b06      	cmp	r3, #6
 800f09c:	d021      	beq.n	800f0e2 <UART_SetConfig+0x1a12>
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0a2:	2b07      	cmp	r3, #7
 800f0a4:	d01b      	beq.n	800f0de <UART_SetConfig+0x1a0e>
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0aa:	2b08      	cmp	r3, #8
 800f0ac:	d015      	beq.n	800f0da <UART_SetConfig+0x1a0a>
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0b2:	2b09      	cmp	r3, #9
 800f0b4:	d00f      	beq.n	800f0d6 <UART_SetConfig+0x1a06>
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0ba:	2b0a      	cmp	r3, #10
 800f0bc:	d008      	beq.n	800f0d0 <UART_SetConfig+0x1a00>
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0c2:	2b0b      	cmp	r3, #11
 800f0c4:	d102      	bne.n	800f0cc <UART_SetConfig+0x19fc>
 800f0c6:	f647 2312 	movw	r3, #31250	; 0x7a12
 800f0ca:	e017      	b.n	800f0fc <UART_SetConfig+0x1a2c>
 800f0cc:	4b18      	ldr	r3, [pc, #96]	; (800f130 <UART_SetConfig+0x1a60>)
 800f0ce:	e015      	b.n	800f0fc <UART_SetConfig+0x1a2c>
 800f0d0:	f24f 4324 	movw	r3, #62500	; 0xf424
 800f0d4:	e012      	b.n	800f0fc <UART_SetConfig+0x1a2c>
 800f0d6:	4b1c      	ldr	r3, [pc, #112]	; (800f148 <UART_SetConfig+0x1a78>)
 800f0d8:	e010      	b.n	800f0fc <UART_SetConfig+0x1a2c>
 800f0da:	4b1c      	ldr	r3, [pc, #112]	; (800f14c <UART_SetConfig+0x1a7c>)
 800f0dc:	e00e      	b.n	800f0fc <UART_SetConfig+0x1a2c>
 800f0de:	4b0f      	ldr	r3, [pc, #60]	; (800f11c <UART_SetConfig+0x1a4c>)
 800f0e0:	e00c      	b.n	800f0fc <UART_SetConfig+0x1a2c>
 800f0e2:	4b1b      	ldr	r3, [pc, #108]	; (800f150 <UART_SetConfig+0x1a80>)
 800f0e4:	e00a      	b.n	800f0fc <UART_SetConfig+0x1a2c>
 800f0e6:	4b1b      	ldr	r3, [pc, #108]	; (800f154 <UART_SetConfig+0x1a84>)
 800f0e8:	e008      	b.n	800f0fc <UART_SetConfig+0x1a2c>
 800f0ea:	4b0e      	ldr	r3, [pc, #56]	; (800f124 <UART_SetConfig+0x1a54>)
 800f0ec:	e006      	b.n	800f0fc <UART_SetConfig+0x1a2c>
 800f0ee:	4b1a      	ldr	r3, [pc, #104]	; (800f158 <UART_SetConfig+0x1a88>)
 800f0f0:	e004      	b.n	800f0fc <UART_SetConfig+0x1a2c>
 800f0f2:	4b0d      	ldr	r3, [pc, #52]	; (800f128 <UART_SetConfig+0x1a58>)
 800f0f4:	e002      	b.n	800f0fc <UART_SetConfig+0x1a2c>
 800f0f6:	4b0d      	ldr	r3, [pc, #52]	; (800f12c <UART_SetConfig+0x1a5c>)
 800f0f8:	e000      	b.n	800f0fc <UART_SetConfig+0x1a2c>
 800f0fa:	4b0d      	ldr	r3, [pc, #52]	; (800f130 <UART_SetConfig+0x1a60>)
 800f0fc:	687a      	ldr	r2, [r7, #4]
 800f0fe:	6852      	ldr	r2, [r2, #4]
 800f100:	0852      	lsrs	r2, r2, #1
 800f102:	441a      	add	r2, r3
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	685b      	ldr	r3, [r3, #4]
 800f108:	fbb2 f3f3 	udiv	r3, r2, r3
 800f10c:	b29b      	uxth	r3, r3
 800f10e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f110:	e089      	b.n	800f226 <UART_SetConfig+0x1b56>
 800f112:	bf00      	nop
 800f114:	58024400 	.word	0x58024400
 800f118:	03d09000 	.word	0x03d09000
 800f11c:	0007a120 	.word	0x0007a120
 800f120:	07a12000 	.word	0x07a12000
 800f124:	000f4240 	.word	0x000f4240
 800f128:	001e8480 	.word	0x001e8480
 800f12c:	003d0900 	.word	0x003d0900
 800f130:	007a1200 	.word	0x007a1200
 800f134:	00a2c2aa 	.word	0x00a2c2aa
 800f138:	00c35000 	.word	0x00c35000
 800f13c:	00f42400 	.word	0x00f42400
 800f140:	01458554 	.word	0x01458554
 800f144:	01e84800 	.word	0x01e84800
 800f148:	0001e848 	.word	0x0001e848
 800f14c:	0003d090 	.word	0x0003d090
 800f150:	000a2c2a 	.word	0x000a2c2a
 800f154:	000c3500 	.word	0x000c3500
 800f158:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f160:	2b00      	cmp	r3, #0
 800f162:	d04f      	beq.n	800f204 <UART_SetConfig+0x1b34>
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f168:	2b01      	cmp	r3, #1
 800f16a:	d048      	beq.n	800f1fe <UART_SetConfig+0x1b2e>
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f170:	2b02      	cmp	r3, #2
 800f172:	d041      	beq.n	800f1f8 <UART_SetConfig+0x1b28>
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f178:	2b03      	cmp	r3, #3
 800f17a:	d03a      	beq.n	800f1f2 <UART_SetConfig+0x1b22>
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f180:	2b04      	cmp	r3, #4
 800f182:	d033      	beq.n	800f1ec <UART_SetConfig+0x1b1c>
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f188:	2b05      	cmp	r3, #5
 800f18a:	d02c      	beq.n	800f1e6 <UART_SetConfig+0x1b16>
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f190:	2b06      	cmp	r3, #6
 800f192:	d025      	beq.n	800f1e0 <UART_SetConfig+0x1b10>
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f198:	2b07      	cmp	r3, #7
 800f19a:	d01e      	beq.n	800f1da <UART_SetConfig+0x1b0a>
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1a0:	2b08      	cmp	r3, #8
 800f1a2:	d017      	beq.n	800f1d4 <UART_SetConfig+0x1b04>
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1a8:	2b09      	cmp	r3, #9
 800f1aa:	d010      	beq.n	800f1ce <UART_SetConfig+0x1afe>
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1b0:	2b0a      	cmp	r3, #10
 800f1b2:	d009      	beq.n	800f1c8 <UART_SetConfig+0x1af8>
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1b8:	2b0b      	cmp	r3, #11
 800f1ba:	d102      	bne.n	800f1c2 <UART_SetConfig+0x1af2>
 800f1bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f1c0:	e022      	b.n	800f208 <UART_SetConfig+0x1b38>
 800f1c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f1c6:	e01f      	b.n	800f208 <UART_SetConfig+0x1b38>
 800f1c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f1cc:	e01c      	b.n	800f208 <UART_SetConfig+0x1b38>
 800f1ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f1d2:	e019      	b.n	800f208 <UART_SetConfig+0x1b38>
 800f1d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f1d8:	e016      	b.n	800f208 <UART_SetConfig+0x1b38>
 800f1da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f1de:	e013      	b.n	800f208 <UART_SetConfig+0x1b38>
 800f1e0:	f241 5354 	movw	r3, #5460	; 0x1554
 800f1e4:	e010      	b.n	800f208 <UART_SetConfig+0x1b38>
 800f1e6:	f641 1398 	movw	r3, #6552	; 0x1998
 800f1ea:	e00d      	b.n	800f208 <UART_SetConfig+0x1b38>
 800f1ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f1f0:	e00a      	b.n	800f208 <UART_SetConfig+0x1b38>
 800f1f2:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800f1f6:	e007      	b.n	800f208 <UART_SetConfig+0x1b38>
 800f1f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f1fc:	e004      	b.n	800f208 <UART_SetConfig+0x1b38>
 800f1fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f202:	e001      	b.n	800f208 <UART_SetConfig+0x1b38>
 800f204:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f208:	687a      	ldr	r2, [r7, #4]
 800f20a:	6852      	ldr	r2, [r2, #4]
 800f20c:	0852      	lsrs	r2, r2, #1
 800f20e:	441a      	add	r2, r3
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	685b      	ldr	r3, [r3, #4]
 800f214:	fbb2 f3f3 	udiv	r3, r2, r3
 800f218:	b29b      	uxth	r3, r3
 800f21a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f21c:	e003      	b.n	800f226 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800f21e:	2301      	movs	r3, #1
 800f220:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800f224:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f228:	2b0f      	cmp	r3, #15
 800f22a:	d916      	bls.n	800f25a <UART_SetConfig+0x1b8a>
 800f22c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f22e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f232:	d212      	bcs.n	800f25a <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f236:	b29b      	uxth	r3, r3
 800f238:	f023 030f 	bic.w	r3, r3, #15
 800f23c:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f23e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f240:	085b      	lsrs	r3, r3, #1
 800f242:	b29b      	uxth	r3, r3
 800f244:	f003 0307 	and.w	r3, r3, #7
 800f248:	b29a      	uxth	r2, r3
 800f24a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f24c:	4313      	orrs	r3, r2
 800f24e:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f256:	60da      	str	r2, [r3, #12]
 800f258:	e3a3      	b.n	800f9a2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800f25a:	2301      	movs	r3, #1
 800f25c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f260:	e39f      	b.n	800f9a2 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800f262:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f266:	2b40      	cmp	r3, #64	; 0x40
 800f268:	f200 8388 	bhi.w	800f97c <UART_SetConfig+0x22ac>
 800f26c:	a201      	add	r2, pc, #4	; (adr r2, 800f274 <UART_SetConfig+0x1ba4>)
 800f26e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f272:	bf00      	nop
 800f274:	0800f379 	.word	0x0800f379
 800f278:	0800f42f 	.word	0x0800f42f
 800f27c:	0800f97d 	.word	0x0800f97d
 800f280:	0800f97d 	.word	0x0800f97d
 800f284:	0800f4e5 	.word	0x0800f4e5
 800f288:	0800f97d 	.word	0x0800f97d
 800f28c:	0800f97d 	.word	0x0800f97d
 800f290:	0800f97d 	.word	0x0800f97d
 800f294:	0800f59f 	.word	0x0800f59f
 800f298:	0800f97d 	.word	0x0800f97d
 800f29c:	0800f97d 	.word	0x0800f97d
 800f2a0:	0800f97d 	.word	0x0800f97d
 800f2a4:	0800f97d 	.word	0x0800f97d
 800f2a8:	0800f97d 	.word	0x0800f97d
 800f2ac:	0800f97d 	.word	0x0800f97d
 800f2b0:	0800f97d 	.word	0x0800f97d
 800f2b4:	0800f659 	.word	0x0800f659
 800f2b8:	0800f97d 	.word	0x0800f97d
 800f2bc:	0800f97d 	.word	0x0800f97d
 800f2c0:	0800f97d 	.word	0x0800f97d
 800f2c4:	0800f97d 	.word	0x0800f97d
 800f2c8:	0800f97d 	.word	0x0800f97d
 800f2cc:	0800f97d 	.word	0x0800f97d
 800f2d0:	0800f97d 	.word	0x0800f97d
 800f2d4:	0800f97d 	.word	0x0800f97d
 800f2d8:	0800f97d 	.word	0x0800f97d
 800f2dc:	0800f97d 	.word	0x0800f97d
 800f2e0:	0800f97d 	.word	0x0800f97d
 800f2e4:	0800f97d 	.word	0x0800f97d
 800f2e8:	0800f97d 	.word	0x0800f97d
 800f2ec:	0800f97d 	.word	0x0800f97d
 800f2f0:	0800f97d 	.word	0x0800f97d
 800f2f4:	0800f7c9 	.word	0x0800f7c9
 800f2f8:	0800f97d 	.word	0x0800f97d
 800f2fc:	0800f97d 	.word	0x0800f97d
 800f300:	0800f97d 	.word	0x0800f97d
 800f304:	0800f97d 	.word	0x0800f97d
 800f308:	0800f97d 	.word	0x0800f97d
 800f30c:	0800f97d 	.word	0x0800f97d
 800f310:	0800f97d 	.word	0x0800f97d
 800f314:	0800f97d 	.word	0x0800f97d
 800f318:	0800f97d 	.word	0x0800f97d
 800f31c:	0800f97d 	.word	0x0800f97d
 800f320:	0800f97d 	.word	0x0800f97d
 800f324:	0800f97d 	.word	0x0800f97d
 800f328:	0800f97d 	.word	0x0800f97d
 800f32c:	0800f97d 	.word	0x0800f97d
 800f330:	0800f97d 	.word	0x0800f97d
 800f334:	0800f97d 	.word	0x0800f97d
 800f338:	0800f97d 	.word	0x0800f97d
 800f33c:	0800f97d 	.word	0x0800f97d
 800f340:	0800f97d 	.word	0x0800f97d
 800f344:	0800f97d 	.word	0x0800f97d
 800f348:	0800f97d 	.word	0x0800f97d
 800f34c:	0800f97d 	.word	0x0800f97d
 800f350:	0800f97d 	.word	0x0800f97d
 800f354:	0800f97d 	.word	0x0800f97d
 800f358:	0800f97d 	.word	0x0800f97d
 800f35c:	0800f97d 	.word	0x0800f97d
 800f360:	0800f97d 	.word	0x0800f97d
 800f364:	0800f97d 	.word	0x0800f97d
 800f368:	0800f97d 	.word	0x0800f97d
 800f36c:	0800f97d 	.word	0x0800f97d
 800f370:	0800f97d 	.word	0x0800f97d
 800f374:	0800f8bd 	.word	0x0800f8bd
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f378:	f7f9 ff0a 	bl	8009190 <HAL_RCC_GetPCLK1Freq>
 800f37c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f382:	2b00      	cmp	r3, #0
 800f384:	d044      	beq.n	800f410 <UART_SetConfig+0x1d40>
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f38a:	2b01      	cmp	r3, #1
 800f38c:	d03e      	beq.n	800f40c <UART_SetConfig+0x1d3c>
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f392:	2b02      	cmp	r3, #2
 800f394:	d038      	beq.n	800f408 <UART_SetConfig+0x1d38>
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f39a:	2b03      	cmp	r3, #3
 800f39c:	d032      	beq.n	800f404 <UART_SetConfig+0x1d34>
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3a2:	2b04      	cmp	r3, #4
 800f3a4:	d02c      	beq.n	800f400 <UART_SetConfig+0x1d30>
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3aa:	2b05      	cmp	r3, #5
 800f3ac:	d026      	beq.n	800f3fc <UART_SetConfig+0x1d2c>
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3b2:	2b06      	cmp	r3, #6
 800f3b4:	d020      	beq.n	800f3f8 <UART_SetConfig+0x1d28>
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3ba:	2b07      	cmp	r3, #7
 800f3bc:	d01a      	beq.n	800f3f4 <UART_SetConfig+0x1d24>
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3c2:	2b08      	cmp	r3, #8
 800f3c4:	d014      	beq.n	800f3f0 <UART_SetConfig+0x1d20>
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3ca:	2b09      	cmp	r3, #9
 800f3cc:	d00e      	beq.n	800f3ec <UART_SetConfig+0x1d1c>
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3d2:	2b0a      	cmp	r3, #10
 800f3d4:	d008      	beq.n	800f3e8 <UART_SetConfig+0x1d18>
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3da:	2b0b      	cmp	r3, #11
 800f3dc:	d102      	bne.n	800f3e4 <UART_SetConfig+0x1d14>
 800f3de:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f3e2:	e016      	b.n	800f412 <UART_SetConfig+0x1d42>
 800f3e4:	2301      	movs	r3, #1
 800f3e6:	e014      	b.n	800f412 <UART_SetConfig+0x1d42>
 800f3e8:	2380      	movs	r3, #128	; 0x80
 800f3ea:	e012      	b.n	800f412 <UART_SetConfig+0x1d42>
 800f3ec:	2340      	movs	r3, #64	; 0x40
 800f3ee:	e010      	b.n	800f412 <UART_SetConfig+0x1d42>
 800f3f0:	2320      	movs	r3, #32
 800f3f2:	e00e      	b.n	800f412 <UART_SetConfig+0x1d42>
 800f3f4:	2310      	movs	r3, #16
 800f3f6:	e00c      	b.n	800f412 <UART_SetConfig+0x1d42>
 800f3f8:	230c      	movs	r3, #12
 800f3fa:	e00a      	b.n	800f412 <UART_SetConfig+0x1d42>
 800f3fc:	230a      	movs	r3, #10
 800f3fe:	e008      	b.n	800f412 <UART_SetConfig+0x1d42>
 800f400:	2308      	movs	r3, #8
 800f402:	e006      	b.n	800f412 <UART_SetConfig+0x1d42>
 800f404:	2306      	movs	r3, #6
 800f406:	e004      	b.n	800f412 <UART_SetConfig+0x1d42>
 800f408:	2304      	movs	r3, #4
 800f40a:	e002      	b.n	800f412 <UART_SetConfig+0x1d42>
 800f40c:	2302      	movs	r3, #2
 800f40e:	e000      	b.n	800f412 <UART_SetConfig+0x1d42>
 800f410:	2301      	movs	r3, #1
 800f412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f414:	fbb2 f2f3 	udiv	r2, r2, r3
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	685b      	ldr	r3, [r3, #4]
 800f41c:	085b      	lsrs	r3, r3, #1
 800f41e:	441a      	add	r2, r3
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	685b      	ldr	r3, [r3, #4]
 800f424:	fbb2 f3f3 	udiv	r3, r2, r3
 800f428:	b29b      	uxth	r3, r3
 800f42a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f42c:	e2aa      	b.n	800f984 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f42e:	f7f9 fec5 	bl	80091bc <HAL_RCC_GetPCLK2Freq>
 800f432:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d044      	beq.n	800f4c6 <UART_SetConfig+0x1df6>
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f440:	2b01      	cmp	r3, #1
 800f442:	d03e      	beq.n	800f4c2 <UART_SetConfig+0x1df2>
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f448:	2b02      	cmp	r3, #2
 800f44a:	d038      	beq.n	800f4be <UART_SetConfig+0x1dee>
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f450:	2b03      	cmp	r3, #3
 800f452:	d032      	beq.n	800f4ba <UART_SetConfig+0x1dea>
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f458:	2b04      	cmp	r3, #4
 800f45a:	d02c      	beq.n	800f4b6 <UART_SetConfig+0x1de6>
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f460:	2b05      	cmp	r3, #5
 800f462:	d026      	beq.n	800f4b2 <UART_SetConfig+0x1de2>
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f468:	2b06      	cmp	r3, #6
 800f46a:	d020      	beq.n	800f4ae <UART_SetConfig+0x1dde>
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f470:	2b07      	cmp	r3, #7
 800f472:	d01a      	beq.n	800f4aa <UART_SetConfig+0x1dda>
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f478:	2b08      	cmp	r3, #8
 800f47a:	d014      	beq.n	800f4a6 <UART_SetConfig+0x1dd6>
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f480:	2b09      	cmp	r3, #9
 800f482:	d00e      	beq.n	800f4a2 <UART_SetConfig+0x1dd2>
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f488:	2b0a      	cmp	r3, #10
 800f48a:	d008      	beq.n	800f49e <UART_SetConfig+0x1dce>
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f490:	2b0b      	cmp	r3, #11
 800f492:	d102      	bne.n	800f49a <UART_SetConfig+0x1dca>
 800f494:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f498:	e016      	b.n	800f4c8 <UART_SetConfig+0x1df8>
 800f49a:	2301      	movs	r3, #1
 800f49c:	e014      	b.n	800f4c8 <UART_SetConfig+0x1df8>
 800f49e:	2380      	movs	r3, #128	; 0x80
 800f4a0:	e012      	b.n	800f4c8 <UART_SetConfig+0x1df8>
 800f4a2:	2340      	movs	r3, #64	; 0x40
 800f4a4:	e010      	b.n	800f4c8 <UART_SetConfig+0x1df8>
 800f4a6:	2320      	movs	r3, #32
 800f4a8:	e00e      	b.n	800f4c8 <UART_SetConfig+0x1df8>
 800f4aa:	2310      	movs	r3, #16
 800f4ac:	e00c      	b.n	800f4c8 <UART_SetConfig+0x1df8>
 800f4ae:	230c      	movs	r3, #12
 800f4b0:	e00a      	b.n	800f4c8 <UART_SetConfig+0x1df8>
 800f4b2:	230a      	movs	r3, #10
 800f4b4:	e008      	b.n	800f4c8 <UART_SetConfig+0x1df8>
 800f4b6:	2308      	movs	r3, #8
 800f4b8:	e006      	b.n	800f4c8 <UART_SetConfig+0x1df8>
 800f4ba:	2306      	movs	r3, #6
 800f4bc:	e004      	b.n	800f4c8 <UART_SetConfig+0x1df8>
 800f4be:	2304      	movs	r3, #4
 800f4c0:	e002      	b.n	800f4c8 <UART_SetConfig+0x1df8>
 800f4c2:	2302      	movs	r3, #2
 800f4c4:	e000      	b.n	800f4c8 <UART_SetConfig+0x1df8>
 800f4c6:	2301      	movs	r3, #1
 800f4c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f4ca:	fbb2 f2f3 	udiv	r2, r2, r3
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	685b      	ldr	r3, [r3, #4]
 800f4d2:	085b      	lsrs	r3, r3, #1
 800f4d4:	441a      	add	r2, r3
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	685b      	ldr	r3, [r3, #4]
 800f4da:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4de:	b29b      	uxth	r3, r3
 800f4e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f4e2:	e24f      	b.n	800f984 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f4e4:	f107 0318 	add.w	r3, r7, #24
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	f7fa ffe9 	bl	800a4c0 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f4ee:	69fa      	ldr	r2, [r7, #28]
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d044      	beq.n	800f582 <UART_SetConfig+0x1eb2>
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4fc:	2b01      	cmp	r3, #1
 800f4fe:	d03e      	beq.n	800f57e <UART_SetConfig+0x1eae>
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f504:	2b02      	cmp	r3, #2
 800f506:	d038      	beq.n	800f57a <UART_SetConfig+0x1eaa>
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f50c:	2b03      	cmp	r3, #3
 800f50e:	d032      	beq.n	800f576 <UART_SetConfig+0x1ea6>
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f514:	2b04      	cmp	r3, #4
 800f516:	d02c      	beq.n	800f572 <UART_SetConfig+0x1ea2>
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f51c:	2b05      	cmp	r3, #5
 800f51e:	d026      	beq.n	800f56e <UART_SetConfig+0x1e9e>
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f524:	2b06      	cmp	r3, #6
 800f526:	d020      	beq.n	800f56a <UART_SetConfig+0x1e9a>
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f52c:	2b07      	cmp	r3, #7
 800f52e:	d01a      	beq.n	800f566 <UART_SetConfig+0x1e96>
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f534:	2b08      	cmp	r3, #8
 800f536:	d014      	beq.n	800f562 <UART_SetConfig+0x1e92>
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f53c:	2b09      	cmp	r3, #9
 800f53e:	d00e      	beq.n	800f55e <UART_SetConfig+0x1e8e>
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f544:	2b0a      	cmp	r3, #10
 800f546:	d008      	beq.n	800f55a <UART_SetConfig+0x1e8a>
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f54c:	2b0b      	cmp	r3, #11
 800f54e:	d102      	bne.n	800f556 <UART_SetConfig+0x1e86>
 800f550:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f554:	e016      	b.n	800f584 <UART_SetConfig+0x1eb4>
 800f556:	2301      	movs	r3, #1
 800f558:	e014      	b.n	800f584 <UART_SetConfig+0x1eb4>
 800f55a:	2380      	movs	r3, #128	; 0x80
 800f55c:	e012      	b.n	800f584 <UART_SetConfig+0x1eb4>
 800f55e:	2340      	movs	r3, #64	; 0x40
 800f560:	e010      	b.n	800f584 <UART_SetConfig+0x1eb4>
 800f562:	2320      	movs	r3, #32
 800f564:	e00e      	b.n	800f584 <UART_SetConfig+0x1eb4>
 800f566:	2310      	movs	r3, #16
 800f568:	e00c      	b.n	800f584 <UART_SetConfig+0x1eb4>
 800f56a:	230c      	movs	r3, #12
 800f56c:	e00a      	b.n	800f584 <UART_SetConfig+0x1eb4>
 800f56e:	230a      	movs	r3, #10
 800f570:	e008      	b.n	800f584 <UART_SetConfig+0x1eb4>
 800f572:	2308      	movs	r3, #8
 800f574:	e006      	b.n	800f584 <UART_SetConfig+0x1eb4>
 800f576:	2306      	movs	r3, #6
 800f578:	e004      	b.n	800f584 <UART_SetConfig+0x1eb4>
 800f57a:	2304      	movs	r3, #4
 800f57c:	e002      	b.n	800f584 <UART_SetConfig+0x1eb4>
 800f57e:	2302      	movs	r3, #2
 800f580:	e000      	b.n	800f584 <UART_SetConfig+0x1eb4>
 800f582:	2301      	movs	r3, #1
 800f584:	fbb2 f2f3 	udiv	r2, r2, r3
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	685b      	ldr	r3, [r3, #4]
 800f58c:	085b      	lsrs	r3, r3, #1
 800f58e:	441a      	add	r2, r3
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	685b      	ldr	r3, [r3, #4]
 800f594:	fbb2 f3f3 	udiv	r3, r2, r3
 800f598:	b29b      	uxth	r3, r3
 800f59a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f59c:	e1f2      	b.n	800f984 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f59e:	f107 030c 	add.w	r3, r7, #12
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	f7fb f8d8 	bl	800a758 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f5a8:	693a      	ldr	r2, [r7, #16]
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d044      	beq.n	800f63c <UART_SetConfig+0x1f6c>
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5b6:	2b01      	cmp	r3, #1
 800f5b8:	d03e      	beq.n	800f638 <UART_SetConfig+0x1f68>
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5be:	2b02      	cmp	r3, #2
 800f5c0:	d038      	beq.n	800f634 <UART_SetConfig+0x1f64>
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5c6:	2b03      	cmp	r3, #3
 800f5c8:	d032      	beq.n	800f630 <UART_SetConfig+0x1f60>
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5ce:	2b04      	cmp	r3, #4
 800f5d0:	d02c      	beq.n	800f62c <UART_SetConfig+0x1f5c>
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5d6:	2b05      	cmp	r3, #5
 800f5d8:	d026      	beq.n	800f628 <UART_SetConfig+0x1f58>
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5de:	2b06      	cmp	r3, #6
 800f5e0:	d020      	beq.n	800f624 <UART_SetConfig+0x1f54>
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5e6:	2b07      	cmp	r3, #7
 800f5e8:	d01a      	beq.n	800f620 <UART_SetConfig+0x1f50>
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5ee:	2b08      	cmp	r3, #8
 800f5f0:	d014      	beq.n	800f61c <UART_SetConfig+0x1f4c>
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5f6:	2b09      	cmp	r3, #9
 800f5f8:	d00e      	beq.n	800f618 <UART_SetConfig+0x1f48>
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5fe:	2b0a      	cmp	r3, #10
 800f600:	d008      	beq.n	800f614 <UART_SetConfig+0x1f44>
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f606:	2b0b      	cmp	r3, #11
 800f608:	d102      	bne.n	800f610 <UART_SetConfig+0x1f40>
 800f60a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f60e:	e016      	b.n	800f63e <UART_SetConfig+0x1f6e>
 800f610:	2301      	movs	r3, #1
 800f612:	e014      	b.n	800f63e <UART_SetConfig+0x1f6e>
 800f614:	2380      	movs	r3, #128	; 0x80
 800f616:	e012      	b.n	800f63e <UART_SetConfig+0x1f6e>
 800f618:	2340      	movs	r3, #64	; 0x40
 800f61a:	e010      	b.n	800f63e <UART_SetConfig+0x1f6e>
 800f61c:	2320      	movs	r3, #32
 800f61e:	e00e      	b.n	800f63e <UART_SetConfig+0x1f6e>
 800f620:	2310      	movs	r3, #16
 800f622:	e00c      	b.n	800f63e <UART_SetConfig+0x1f6e>
 800f624:	230c      	movs	r3, #12
 800f626:	e00a      	b.n	800f63e <UART_SetConfig+0x1f6e>
 800f628:	230a      	movs	r3, #10
 800f62a:	e008      	b.n	800f63e <UART_SetConfig+0x1f6e>
 800f62c:	2308      	movs	r3, #8
 800f62e:	e006      	b.n	800f63e <UART_SetConfig+0x1f6e>
 800f630:	2306      	movs	r3, #6
 800f632:	e004      	b.n	800f63e <UART_SetConfig+0x1f6e>
 800f634:	2304      	movs	r3, #4
 800f636:	e002      	b.n	800f63e <UART_SetConfig+0x1f6e>
 800f638:	2302      	movs	r3, #2
 800f63a:	e000      	b.n	800f63e <UART_SetConfig+0x1f6e>
 800f63c:	2301      	movs	r3, #1
 800f63e:	fbb2 f2f3 	udiv	r2, r2, r3
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	685b      	ldr	r3, [r3, #4]
 800f646:	085b      	lsrs	r3, r3, #1
 800f648:	441a      	add	r2, r3
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	685b      	ldr	r3, [r3, #4]
 800f64e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f652:	b29b      	uxth	r3, r3
 800f654:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f656:	e195      	b.n	800f984 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f658:	4b87      	ldr	r3, [pc, #540]	; (800f878 <UART_SetConfig+0x21a8>)
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	f003 0320 	and.w	r3, r3, #32
 800f660:	2b00      	cmp	r3, #0
 800f662:	d05d      	beq.n	800f720 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f664:	4b84      	ldr	r3, [pc, #528]	; (800f878 <UART_SetConfig+0x21a8>)
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	08db      	lsrs	r3, r3, #3
 800f66a:	f003 0303 	and.w	r3, r3, #3
 800f66e:	4a83      	ldr	r2, [pc, #524]	; (800f87c <UART_SetConfig+0x21ac>)
 800f670:	40da      	lsrs	r2, r3
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f676:	2b00      	cmp	r3, #0
 800f678:	d044      	beq.n	800f704 <UART_SetConfig+0x2034>
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f67e:	2b01      	cmp	r3, #1
 800f680:	d03e      	beq.n	800f700 <UART_SetConfig+0x2030>
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f686:	2b02      	cmp	r3, #2
 800f688:	d038      	beq.n	800f6fc <UART_SetConfig+0x202c>
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f68e:	2b03      	cmp	r3, #3
 800f690:	d032      	beq.n	800f6f8 <UART_SetConfig+0x2028>
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f696:	2b04      	cmp	r3, #4
 800f698:	d02c      	beq.n	800f6f4 <UART_SetConfig+0x2024>
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f69e:	2b05      	cmp	r3, #5
 800f6a0:	d026      	beq.n	800f6f0 <UART_SetConfig+0x2020>
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6a6:	2b06      	cmp	r3, #6
 800f6a8:	d020      	beq.n	800f6ec <UART_SetConfig+0x201c>
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6ae:	2b07      	cmp	r3, #7
 800f6b0:	d01a      	beq.n	800f6e8 <UART_SetConfig+0x2018>
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6b6:	2b08      	cmp	r3, #8
 800f6b8:	d014      	beq.n	800f6e4 <UART_SetConfig+0x2014>
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6be:	2b09      	cmp	r3, #9
 800f6c0:	d00e      	beq.n	800f6e0 <UART_SetConfig+0x2010>
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6c6:	2b0a      	cmp	r3, #10
 800f6c8:	d008      	beq.n	800f6dc <UART_SetConfig+0x200c>
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6ce:	2b0b      	cmp	r3, #11
 800f6d0:	d102      	bne.n	800f6d8 <UART_SetConfig+0x2008>
 800f6d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f6d6:	e016      	b.n	800f706 <UART_SetConfig+0x2036>
 800f6d8:	2301      	movs	r3, #1
 800f6da:	e014      	b.n	800f706 <UART_SetConfig+0x2036>
 800f6dc:	2380      	movs	r3, #128	; 0x80
 800f6de:	e012      	b.n	800f706 <UART_SetConfig+0x2036>
 800f6e0:	2340      	movs	r3, #64	; 0x40
 800f6e2:	e010      	b.n	800f706 <UART_SetConfig+0x2036>
 800f6e4:	2320      	movs	r3, #32
 800f6e6:	e00e      	b.n	800f706 <UART_SetConfig+0x2036>
 800f6e8:	2310      	movs	r3, #16
 800f6ea:	e00c      	b.n	800f706 <UART_SetConfig+0x2036>
 800f6ec:	230c      	movs	r3, #12
 800f6ee:	e00a      	b.n	800f706 <UART_SetConfig+0x2036>
 800f6f0:	230a      	movs	r3, #10
 800f6f2:	e008      	b.n	800f706 <UART_SetConfig+0x2036>
 800f6f4:	2308      	movs	r3, #8
 800f6f6:	e006      	b.n	800f706 <UART_SetConfig+0x2036>
 800f6f8:	2306      	movs	r3, #6
 800f6fa:	e004      	b.n	800f706 <UART_SetConfig+0x2036>
 800f6fc:	2304      	movs	r3, #4
 800f6fe:	e002      	b.n	800f706 <UART_SetConfig+0x2036>
 800f700:	2302      	movs	r3, #2
 800f702:	e000      	b.n	800f706 <UART_SetConfig+0x2036>
 800f704:	2301      	movs	r3, #1
 800f706:	fbb2 f2f3 	udiv	r2, r2, r3
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	685b      	ldr	r3, [r3, #4]
 800f70e:	085b      	lsrs	r3, r3, #1
 800f710:	441a      	add	r2, r3
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	685b      	ldr	r3, [r3, #4]
 800f716:	fbb2 f3f3 	udiv	r3, r2, r3
 800f71a:	b29b      	uxth	r3, r3
 800f71c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800f71e:	e131      	b.n	800f984 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f724:	2b00      	cmp	r3, #0
 800f726:	d043      	beq.n	800f7b0 <UART_SetConfig+0x20e0>
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f72c:	2b01      	cmp	r3, #1
 800f72e:	d03d      	beq.n	800f7ac <UART_SetConfig+0x20dc>
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f734:	2b02      	cmp	r3, #2
 800f736:	d037      	beq.n	800f7a8 <UART_SetConfig+0x20d8>
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f73c:	2b03      	cmp	r3, #3
 800f73e:	d031      	beq.n	800f7a4 <UART_SetConfig+0x20d4>
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f744:	2b04      	cmp	r3, #4
 800f746:	d02b      	beq.n	800f7a0 <UART_SetConfig+0x20d0>
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f74c:	2b05      	cmp	r3, #5
 800f74e:	d025      	beq.n	800f79c <UART_SetConfig+0x20cc>
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f754:	2b06      	cmp	r3, #6
 800f756:	d01f      	beq.n	800f798 <UART_SetConfig+0x20c8>
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f75c:	2b07      	cmp	r3, #7
 800f75e:	d019      	beq.n	800f794 <UART_SetConfig+0x20c4>
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f764:	2b08      	cmp	r3, #8
 800f766:	d013      	beq.n	800f790 <UART_SetConfig+0x20c0>
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f76c:	2b09      	cmp	r3, #9
 800f76e:	d00d      	beq.n	800f78c <UART_SetConfig+0x20bc>
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f774:	2b0a      	cmp	r3, #10
 800f776:	d007      	beq.n	800f788 <UART_SetConfig+0x20b8>
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f77c:	2b0b      	cmp	r3, #11
 800f77e:	d101      	bne.n	800f784 <UART_SetConfig+0x20b4>
 800f780:	4b3f      	ldr	r3, [pc, #252]	; (800f880 <UART_SetConfig+0x21b0>)
 800f782:	e016      	b.n	800f7b2 <UART_SetConfig+0x20e2>
 800f784:	4b3d      	ldr	r3, [pc, #244]	; (800f87c <UART_SetConfig+0x21ac>)
 800f786:	e014      	b.n	800f7b2 <UART_SetConfig+0x20e2>
 800f788:	4b3e      	ldr	r3, [pc, #248]	; (800f884 <UART_SetConfig+0x21b4>)
 800f78a:	e012      	b.n	800f7b2 <UART_SetConfig+0x20e2>
 800f78c:	4b3e      	ldr	r3, [pc, #248]	; (800f888 <UART_SetConfig+0x21b8>)
 800f78e:	e010      	b.n	800f7b2 <UART_SetConfig+0x20e2>
 800f790:	4b3e      	ldr	r3, [pc, #248]	; (800f88c <UART_SetConfig+0x21bc>)
 800f792:	e00e      	b.n	800f7b2 <UART_SetConfig+0x20e2>
 800f794:	4b3e      	ldr	r3, [pc, #248]	; (800f890 <UART_SetConfig+0x21c0>)
 800f796:	e00c      	b.n	800f7b2 <UART_SetConfig+0x20e2>
 800f798:	4b3e      	ldr	r3, [pc, #248]	; (800f894 <UART_SetConfig+0x21c4>)
 800f79a:	e00a      	b.n	800f7b2 <UART_SetConfig+0x20e2>
 800f79c:	4b3e      	ldr	r3, [pc, #248]	; (800f898 <UART_SetConfig+0x21c8>)
 800f79e:	e008      	b.n	800f7b2 <UART_SetConfig+0x20e2>
 800f7a0:	4b3e      	ldr	r3, [pc, #248]	; (800f89c <UART_SetConfig+0x21cc>)
 800f7a2:	e006      	b.n	800f7b2 <UART_SetConfig+0x20e2>
 800f7a4:	4b3e      	ldr	r3, [pc, #248]	; (800f8a0 <UART_SetConfig+0x21d0>)
 800f7a6:	e004      	b.n	800f7b2 <UART_SetConfig+0x20e2>
 800f7a8:	4b3e      	ldr	r3, [pc, #248]	; (800f8a4 <UART_SetConfig+0x21d4>)
 800f7aa:	e002      	b.n	800f7b2 <UART_SetConfig+0x20e2>
 800f7ac:	4b3e      	ldr	r3, [pc, #248]	; (800f8a8 <UART_SetConfig+0x21d8>)
 800f7ae:	e000      	b.n	800f7b2 <UART_SetConfig+0x20e2>
 800f7b0:	4b32      	ldr	r3, [pc, #200]	; (800f87c <UART_SetConfig+0x21ac>)
 800f7b2:	687a      	ldr	r2, [r7, #4]
 800f7b4:	6852      	ldr	r2, [r2, #4]
 800f7b6:	0852      	lsrs	r2, r2, #1
 800f7b8:	441a      	add	r2, r3
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	685b      	ldr	r3, [r3, #4]
 800f7be:	fbb2 f3f3 	udiv	r3, r2, r3
 800f7c2:	b29b      	uxth	r3, r3
 800f7c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f7c6:	e0dd      	b.n	800f984 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d046      	beq.n	800f85e <UART_SetConfig+0x218e>
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7d4:	2b01      	cmp	r3, #1
 800f7d6:	d040      	beq.n	800f85a <UART_SetConfig+0x218a>
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7dc:	2b02      	cmp	r3, #2
 800f7de:	d03a      	beq.n	800f856 <UART_SetConfig+0x2186>
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7e4:	2b03      	cmp	r3, #3
 800f7e6:	d034      	beq.n	800f852 <UART_SetConfig+0x2182>
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7ec:	2b04      	cmp	r3, #4
 800f7ee:	d02e      	beq.n	800f84e <UART_SetConfig+0x217e>
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7f4:	2b05      	cmp	r3, #5
 800f7f6:	d028      	beq.n	800f84a <UART_SetConfig+0x217a>
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7fc:	2b06      	cmp	r3, #6
 800f7fe:	d022      	beq.n	800f846 <UART_SetConfig+0x2176>
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f804:	2b07      	cmp	r3, #7
 800f806:	d01c      	beq.n	800f842 <UART_SetConfig+0x2172>
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f80c:	2b08      	cmp	r3, #8
 800f80e:	d016      	beq.n	800f83e <UART_SetConfig+0x216e>
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f814:	2b09      	cmp	r3, #9
 800f816:	d00f      	beq.n	800f838 <UART_SetConfig+0x2168>
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f81c:	2b0a      	cmp	r3, #10
 800f81e:	d008      	beq.n	800f832 <UART_SetConfig+0x2162>
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f824:	2b0b      	cmp	r3, #11
 800f826:	d102      	bne.n	800f82e <UART_SetConfig+0x215e>
 800f828:	f643 5309 	movw	r3, #15625	; 0x3d09
 800f82c:	e018      	b.n	800f860 <UART_SetConfig+0x2190>
 800f82e:	4b18      	ldr	r3, [pc, #96]	; (800f890 <UART_SetConfig+0x21c0>)
 800f830:	e016      	b.n	800f860 <UART_SetConfig+0x2190>
 800f832:	f647 2312 	movw	r3, #31250	; 0x7a12
 800f836:	e013      	b.n	800f860 <UART_SetConfig+0x2190>
 800f838:	f24f 4324 	movw	r3, #62500	; 0xf424
 800f83c:	e010      	b.n	800f860 <UART_SetConfig+0x2190>
 800f83e:	4b1b      	ldr	r3, [pc, #108]	; (800f8ac <UART_SetConfig+0x21dc>)
 800f840:	e00e      	b.n	800f860 <UART_SetConfig+0x2190>
 800f842:	4b0f      	ldr	r3, [pc, #60]	; (800f880 <UART_SetConfig+0x21b0>)
 800f844:	e00c      	b.n	800f860 <UART_SetConfig+0x2190>
 800f846:	4b1a      	ldr	r3, [pc, #104]	; (800f8b0 <UART_SetConfig+0x21e0>)
 800f848:	e00a      	b.n	800f860 <UART_SetConfig+0x2190>
 800f84a:	4b1a      	ldr	r3, [pc, #104]	; (800f8b4 <UART_SetConfig+0x21e4>)
 800f84c:	e008      	b.n	800f860 <UART_SetConfig+0x2190>
 800f84e:	4b0d      	ldr	r3, [pc, #52]	; (800f884 <UART_SetConfig+0x21b4>)
 800f850:	e006      	b.n	800f860 <UART_SetConfig+0x2190>
 800f852:	4b19      	ldr	r3, [pc, #100]	; (800f8b8 <UART_SetConfig+0x21e8>)
 800f854:	e004      	b.n	800f860 <UART_SetConfig+0x2190>
 800f856:	4b0c      	ldr	r3, [pc, #48]	; (800f888 <UART_SetConfig+0x21b8>)
 800f858:	e002      	b.n	800f860 <UART_SetConfig+0x2190>
 800f85a:	4b0c      	ldr	r3, [pc, #48]	; (800f88c <UART_SetConfig+0x21bc>)
 800f85c:	e000      	b.n	800f860 <UART_SetConfig+0x2190>
 800f85e:	4b0c      	ldr	r3, [pc, #48]	; (800f890 <UART_SetConfig+0x21c0>)
 800f860:	687a      	ldr	r2, [r7, #4]
 800f862:	6852      	ldr	r2, [r2, #4]
 800f864:	0852      	lsrs	r2, r2, #1
 800f866:	441a      	add	r2, r3
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	685b      	ldr	r3, [r3, #4]
 800f86c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f870:	b29b      	uxth	r3, r3
 800f872:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f874:	e086      	b.n	800f984 <UART_SetConfig+0x22b4>
 800f876:	bf00      	nop
 800f878:	58024400 	.word	0x58024400
 800f87c:	03d09000 	.word	0x03d09000
 800f880:	0003d090 	.word	0x0003d090
 800f884:	0007a120 	.word	0x0007a120
 800f888:	000f4240 	.word	0x000f4240
 800f88c:	001e8480 	.word	0x001e8480
 800f890:	003d0900 	.word	0x003d0900
 800f894:	00516155 	.word	0x00516155
 800f898:	0061a800 	.word	0x0061a800
 800f89c:	007a1200 	.word	0x007a1200
 800f8a0:	00a2c2aa 	.word	0x00a2c2aa
 800f8a4:	00f42400 	.word	0x00f42400
 800f8a8:	01e84800 	.word	0x01e84800
 800f8ac:	0001e848 	.word	0x0001e848
 800f8b0:	00051615 	.word	0x00051615
 800f8b4:	00061a80 	.word	0x00061a80
 800f8b8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d04e      	beq.n	800f962 <UART_SetConfig+0x2292>
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8c8:	2b01      	cmp	r3, #1
 800f8ca:	d047      	beq.n	800f95c <UART_SetConfig+0x228c>
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8d0:	2b02      	cmp	r3, #2
 800f8d2:	d040      	beq.n	800f956 <UART_SetConfig+0x2286>
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8d8:	2b03      	cmp	r3, #3
 800f8da:	d039      	beq.n	800f950 <UART_SetConfig+0x2280>
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8e0:	2b04      	cmp	r3, #4
 800f8e2:	d032      	beq.n	800f94a <UART_SetConfig+0x227a>
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8e8:	2b05      	cmp	r3, #5
 800f8ea:	d02b      	beq.n	800f944 <UART_SetConfig+0x2274>
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8f0:	2b06      	cmp	r3, #6
 800f8f2:	d024      	beq.n	800f93e <UART_SetConfig+0x226e>
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8f8:	2b07      	cmp	r3, #7
 800f8fa:	d01d      	beq.n	800f938 <UART_SetConfig+0x2268>
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f900:	2b08      	cmp	r3, #8
 800f902:	d016      	beq.n	800f932 <UART_SetConfig+0x2262>
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f908:	2b09      	cmp	r3, #9
 800f90a:	d00f      	beq.n	800f92c <UART_SetConfig+0x225c>
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f910:	2b0a      	cmp	r3, #10
 800f912:	d008      	beq.n	800f926 <UART_SetConfig+0x2256>
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f918:	2b0b      	cmp	r3, #11
 800f91a:	d101      	bne.n	800f920 <UART_SetConfig+0x2250>
 800f91c:	2380      	movs	r3, #128	; 0x80
 800f91e:	e022      	b.n	800f966 <UART_SetConfig+0x2296>
 800f920:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f924:	e01f      	b.n	800f966 <UART_SetConfig+0x2296>
 800f926:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f92a:	e01c      	b.n	800f966 <UART_SetConfig+0x2296>
 800f92c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f930:	e019      	b.n	800f966 <UART_SetConfig+0x2296>
 800f932:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f936:	e016      	b.n	800f966 <UART_SetConfig+0x2296>
 800f938:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f93c:	e013      	b.n	800f966 <UART_SetConfig+0x2296>
 800f93e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800f942:	e010      	b.n	800f966 <UART_SetConfig+0x2296>
 800f944:	f640 43cc 	movw	r3, #3276	; 0xccc
 800f948:	e00d      	b.n	800f966 <UART_SetConfig+0x2296>
 800f94a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f94e:	e00a      	b.n	800f966 <UART_SetConfig+0x2296>
 800f950:	f241 5355 	movw	r3, #5461	; 0x1555
 800f954:	e007      	b.n	800f966 <UART_SetConfig+0x2296>
 800f956:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f95a:	e004      	b.n	800f966 <UART_SetConfig+0x2296>
 800f95c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f960:	e001      	b.n	800f966 <UART_SetConfig+0x2296>
 800f962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f966:	687a      	ldr	r2, [r7, #4]
 800f968:	6852      	ldr	r2, [r2, #4]
 800f96a:	0852      	lsrs	r2, r2, #1
 800f96c:	441a      	add	r2, r3
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	685b      	ldr	r3, [r3, #4]
 800f972:	fbb2 f3f3 	udiv	r3, r2, r3
 800f976:	b29b      	uxth	r3, r3
 800f978:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f97a:	e003      	b.n	800f984 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800f97c:	2301      	movs	r3, #1
 800f97e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800f982:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f986:	2b0f      	cmp	r3, #15
 800f988:	d908      	bls.n	800f99c <UART_SetConfig+0x22cc>
 800f98a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f98c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f990:	d204      	bcs.n	800f99c <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f998:	60da      	str	r2, [r3, #12]
 800f99a:	e002      	b.n	800f9a2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800f99c:	2301      	movs	r3, #1
 800f99e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	2201      	movs	r2, #1
 800f9a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	2201      	movs	r2, #1
 800f9ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800f9be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	3740      	adds	r7, #64	; 0x40
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800f9cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f9cc:	b480      	push	{r7}
 800f9ce:	b083      	sub	sp, #12
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9d8:	f003 0301 	and.w	r3, r3, #1
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d00a      	beq.n	800f9f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	685b      	ldr	r3, [r3, #4]
 800f9e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	430a      	orrs	r2, r1
 800f9f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9fa:	f003 0302 	and.w	r3, r3, #2
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d00a      	beq.n	800fa18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	685b      	ldr	r3, [r3, #4]
 800fa08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	430a      	orrs	r2, r1
 800fa16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa1c:	f003 0304 	and.w	r3, r3, #4
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d00a      	beq.n	800fa3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	685b      	ldr	r3, [r3, #4]
 800fa2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	430a      	orrs	r2, r1
 800fa38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa3e:	f003 0308 	and.w	r3, r3, #8
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d00a      	beq.n	800fa5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	685b      	ldr	r3, [r3, #4]
 800fa4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	430a      	orrs	r2, r1
 800fa5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa60:	f003 0310 	and.w	r3, r3, #16
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d00a      	beq.n	800fa7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	689b      	ldr	r3, [r3, #8]
 800fa6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	430a      	orrs	r2, r1
 800fa7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa82:	f003 0320 	and.w	r3, r3, #32
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d00a      	beq.n	800faa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	689b      	ldr	r3, [r3, #8]
 800fa90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	430a      	orrs	r2, r1
 800fa9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800faa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d01a      	beq.n	800fae2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	685b      	ldr	r3, [r3, #4]
 800fab2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	430a      	orrs	r2, r1
 800fac0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800faca:	d10a      	bne.n	800fae2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	685b      	ldr	r3, [r3, #4]
 800fad2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	430a      	orrs	r2, r1
 800fae0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800faea:	2b00      	cmp	r3, #0
 800faec:	d00a      	beq.n	800fb04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	685b      	ldr	r3, [r3, #4]
 800faf4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	430a      	orrs	r2, r1
 800fb02:	605a      	str	r2, [r3, #4]
  }
}
 800fb04:	bf00      	nop
 800fb06:	370c      	adds	r7, #12
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0e:	4770      	bx	lr

0800fb10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b086      	sub	sp, #24
 800fb14:	af02      	add	r7, sp, #8
 800fb16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800fb20:	f7f2 f80e 	bl	8001b40 <HAL_GetTick>
 800fb24:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	f003 0308 	and.w	r3, r3, #8
 800fb30:	2b08      	cmp	r3, #8
 800fb32:	d10e      	bne.n	800fb52 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fb34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fb38:	9300      	str	r3, [sp, #0]
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fb42:	6878      	ldr	r0, [r7, #4]
 800fb44:	f000 f82c 	bl	800fba0 <UART_WaitOnFlagUntilTimeout>
 800fb48:	4603      	mov	r3, r0
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d001      	beq.n	800fb52 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fb4e:	2303      	movs	r3, #3
 800fb50:	e022      	b.n	800fb98 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	f003 0304 	and.w	r3, r3, #4
 800fb5c:	2b04      	cmp	r3, #4
 800fb5e:	d10e      	bne.n	800fb7e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fb60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fb64:	9300      	str	r3, [sp, #0]
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	2200      	movs	r2, #0
 800fb6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fb6e:	6878      	ldr	r0, [r7, #4]
 800fb70:	f000 f816 	bl	800fba0 <UART_WaitOnFlagUntilTimeout>
 800fb74:	4603      	mov	r3, r0
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d001      	beq.n	800fb7e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fb7a:	2303      	movs	r3, #3
 800fb7c:	e00c      	b.n	800fb98 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	2220      	movs	r2, #32
 800fb82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	2220      	movs	r2, #32
 800fb8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	2200      	movs	r2, #0
 800fb92:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800fb96:	2300      	movs	r3, #0
}
 800fb98:	4618      	mov	r0, r3
 800fb9a:	3710      	adds	r7, #16
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}

0800fba0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b084      	sub	sp, #16
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	60f8      	str	r0, [r7, #12]
 800fba8:	60b9      	str	r1, [r7, #8]
 800fbaa:	603b      	str	r3, [r7, #0]
 800fbac:	4613      	mov	r3, r2
 800fbae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fbb0:	e062      	b.n	800fc78 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fbb2:	69bb      	ldr	r3, [r7, #24]
 800fbb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbb8:	d05e      	beq.n	800fc78 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fbba:	f7f1 ffc1 	bl	8001b40 <HAL_GetTick>
 800fbbe:	4602      	mov	r2, r0
 800fbc0:	683b      	ldr	r3, [r7, #0]
 800fbc2:	1ad3      	subs	r3, r2, r3
 800fbc4:	69ba      	ldr	r2, [r7, #24]
 800fbc6:	429a      	cmp	r2, r3
 800fbc8:	d302      	bcc.n	800fbd0 <UART_WaitOnFlagUntilTimeout+0x30>
 800fbca:	69bb      	ldr	r3, [r7, #24]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d11d      	bne.n	800fc0c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	681a      	ldr	r2, [r3, #0]
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800fbde:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	689a      	ldr	r2, [r3, #8]
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	f022 0201 	bic.w	r2, r2, #1
 800fbee:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	2220      	movs	r2, #32
 800fbf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	2220      	movs	r2, #32
 800fbfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	2200      	movs	r2, #0
 800fc04:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800fc08:	2303      	movs	r3, #3
 800fc0a:	e045      	b.n	800fc98 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	f003 0304 	and.w	r3, r3, #4
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d02e      	beq.n	800fc78 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	69db      	ldr	r3, [r3, #28]
 800fc20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fc24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fc28:	d126      	bne.n	800fc78 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fc32:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	681a      	ldr	r2, [r3, #0]
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800fc42:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	689a      	ldr	r2, [r3, #8]
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	f022 0201 	bic.w	r2, r2, #1
 800fc52:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	2220      	movs	r2, #32
 800fc58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	2220      	movs	r2, #32
 800fc60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	2220      	movs	r2, #32
 800fc68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	2200      	movs	r2, #0
 800fc70:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800fc74:	2303      	movs	r3, #3
 800fc76:	e00f      	b.n	800fc98 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	69da      	ldr	r2, [r3, #28]
 800fc7e:	68bb      	ldr	r3, [r7, #8]
 800fc80:	4013      	ands	r3, r2
 800fc82:	68ba      	ldr	r2, [r7, #8]
 800fc84:	429a      	cmp	r2, r3
 800fc86:	bf0c      	ite	eq
 800fc88:	2301      	moveq	r3, #1
 800fc8a:	2300      	movne	r3, #0
 800fc8c:	b2db      	uxtb	r3, r3
 800fc8e:	461a      	mov	r2, r3
 800fc90:	79fb      	ldrb	r3, [r7, #7]
 800fc92:	429a      	cmp	r2, r3
 800fc94:	d08d      	beq.n	800fbb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fc96:	2300      	movs	r3, #0
}
 800fc98:	4618      	mov	r0, r3
 800fc9a:	3710      	adds	r7, #16
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}

0800fca0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fca0:	b480      	push	{r7}
 800fca2:	b085      	sub	sp, #20
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800fcae:	2b01      	cmp	r3, #1
 800fcb0:	d101      	bne.n	800fcb6 <HAL_UARTEx_DisableFifoMode+0x16>
 800fcb2:	2302      	movs	r3, #2
 800fcb4:	e027      	b.n	800fd06 <HAL_UARTEx_DisableFifoMode+0x66>
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	2201      	movs	r2, #1
 800fcba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	2224      	movs	r2, #36	; 0x24
 800fcc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	681a      	ldr	r2, [r3, #0]
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	f022 0201 	bic.w	r2, r2, #1
 800fcdc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fce4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	2200      	movs	r2, #0
 800fcea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	68fa      	ldr	r2, [r7, #12]
 800fcf2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2220      	movs	r2, #32
 800fcf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2200      	movs	r2, #0
 800fd00:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800fd04:	2300      	movs	r3, #0
}
 800fd06:	4618      	mov	r0, r3
 800fd08:	3714      	adds	r7, #20
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd10:	4770      	bx	lr

0800fd12 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fd12:	b580      	push	{r7, lr}
 800fd14:	b084      	sub	sp, #16
 800fd16:	af00      	add	r7, sp, #0
 800fd18:	6078      	str	r0, [r7, #4]
 800fd1a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800fd22:	2b01      	cmp	r3, #1
 800fd24:	d101      	bne.n	800fd2a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fd26:	2302      	movs	r3, #2
 800fd28:	e02d      	b.n	800fd86 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	2201      	movs	r2, #1
 800fd2e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	2224      	movs	r2, #36	; 0x24
 800fd36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	681a      	ldr	r2, [r3, #0]
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	f022 0201 	bic.w	r2, r2, #1
 800fd50:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	689b      	ldr	r3, [r3, #8]
 800fd58:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	683a      	ldr	r2, [r7, #0]
 800fd62:	430a      	orrs	r2, r1
 800fd64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fd66:	6878      	ldr	r0, [r7, #4]
 800fd68:	f000 f850 	bl	800fe0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	68fa      	ldr	r2, [r7, #12]
 800fd72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	2220      	movs	r2, #32
 800fd78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	2200      	movs	r2, #0
 800fd80:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800fd84:	2300      	movs	r3, #0
}
 800fd86:	4618      	mov	r0, r3
 800fd88:	3710      	adds	r7, #16
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	bd80      	pop	{r7, pc}

0800fd8e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fd8e:	b580      	push	{r7, lr}
 800fd90:	b084      	sub	sp, #16
 800fd92:	af00      	add	r7, sp, #0
 800fd94:	6078      	str	r0, [r7, #4]
 800fd96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800fd9e:	2b01      	cmp	r3, #1
 800fda0:	d101      	bne.n	800fda6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fda2:	2302      	movs	r3, #2
 800fda4:	e02d      	b.n	800fe02 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	2201      	movs	r2, #1
 800fdaa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	2224      	movs	r2, #36	; 0x24
 800fdb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	681a      	ldr	r2, [r3, #0]
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	f022 0201 	bic.w	r2, r2, #1
 800fdcc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	689b      	ldr	r3, [r3, #8]
 800fdd4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	683a      	ldr	r2, [r7, #0]
 800fdde:	430a      	orrs	r2, r1
 800fde0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fde2:	6878      	ldr	r0, [r7, #4]
 800fde4:	f000 f812 	bl	800fe0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	68fa      	ldr	r2, [r7, #12]
 800fdee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	2220      	movs	r2, #32
 800fdf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800fe00:	2300      	movs	r3, #0
}
 800fe02:	4618      	mov	r0, r3
 800fe04:	3710      	adds	r7, #16
 800fe06:	46bd      	mov	sp, r7
 800fe08:	bd80      	pop	{r7, pc}
	...

0800fe0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fe0c:	b480      	push	{r7}
 800fe0e:	b089      	sub	sp, #36	; 0x24
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800fe14:	4a2f      	ldr	r2, [pc, #188]	; (800fed4 <UARTEx_SetNbDataToProcess+0xc8>)
 800fe16:	f107 0314 	add.w	r3, r7, #20
 800fe1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fe1e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800fe22:	4a2d      	ldr	r2, [pc, #180]	; (800fed8 <UARTEx_SetNbDataToProcess+0xcc>)
 800fe24:	f107 030c 	add.w	r3, r7, #12
 800fe28:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fe2c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d108      	bne.n	800fe4a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	2201      	movs	r2, #1
 800fe3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	2201      	movs	r2, #1
 800fe44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fe48:	e03d      	b.n	800fec6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fe4a:	2308      	movs	r3, #8
 800fe4c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fe4e:	2308      	movs	r3, #8
 800fe50:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	689b      	ldr	r3, [r3, #8]
 800fe58:	0e5b      	lsrs	r3, r3, #25
 800fe5a:	b2db      	uxtb	r3, r3
 800fe5c:	f003 0307 	and.w	r3, r3, #7
 800fe60:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	689b      	ldr	r3, [r3, #8]
 800fe68:	0f5b      	lsrs	r3, r3, #29
 800fe6a:	b2db      	uxtb	r3, r3
 800fe6c:	f003 0307 	and.w	r3, r3, #7
 800fe70:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800fe72:	7fbb      	ldrb	r3, [r7, #30]
 800fe74:	7f3a      	ldrb	r2, [r7, #28]
 800fe76:	f107 0120 	add.w	r1, r7, #32
 800fe7a:	440a      	add	r2, r1
 800fe7c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800fe80:	fb02 f303 	mul.w	r3, r2, r3
 800fe84:	7f3a      	ldrb	r2, [r7, #28]
 800fe86:	f107 0120 	add.w	r1, r7, #32
 800fe8a:	440a      	add	r2, r1
 800fe8c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800fe90:	fb93 f3f2 	sdiv	r3, r3, r2
 800fe94:	b29a      	uxth	r2, r3
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800fe9c:	7ffb      	ldrb	r3, [r7, #31]
 800fe9e:	7f7a      	ldrb	r2, [r7, #29]
 800fea0:	f107 0120 	add.w	r1, r7, #32
 800fea4:	440a      	add	r2, r1
 800fea6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800feaa:	fb02 f303 	mul.w	r3, r2, r3
 800feae:	7f7a      	ldrb	r2, [r7, #29]
 800feb0:	f107 0120 	add.w	r1, r7, #32
 800feb4:	440a      	add	r2, r1
 800feb6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800feba:	fb93 f3f2 	sdiv	r3, r3, r2
 800febe:	b29a      	uxth	r2, r3
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fec6:	bf00      	nop
 800fec8:	3724      	adds	r7, #36	; 0x24
 800feca:	46bd      	mov	sp, r7
 800fecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed0:	4770      	bx	lr
 800fed2:	bf00      	nop
 800fed4:	0801ab54 	.word	0x0801ab54
 800fed8:	0801ab5c 	.word	0x0801ab5c

0800fedc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800fedc:	b084      	sub	sp, #16
 800fede:	b480      	push	{r7}
 800fee0:	b085      	sub	sp, #20
 800fee2:	af00      	add	r7, sp, #0
 800fee4:	6078      	str	r0, [r7, #4]
 800fee6:	f107 001c 	add.w	r0, r7, #28
 800feea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800feee:	2300      	movs	r3, #0
 800fef0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800fef2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800fef4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800fef6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800fef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800fefa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800fefc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800fefe:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ff00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800ff02:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ff04:	68fa      	ldr	r2, [r7, #12]
 800ff06:	4313      	orrs	r3, r2
 800ff08:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	685a      	ldr	r2, [r3, #4]
 800ff0e:	4b07      	ldr	r3, [pc, #28]	; (800ff2c <SDMMC_Init+0x50>)
 800ff10:	4013      	ands	r3, r2
 800ff12:	68fa      	ldr	r2, [r7, #12]
 800ff14:	431a      	orrs	r2, r3
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ff1a:	2300      	movs	r3, #0
}
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	3714      	adds	r7, #20
 800ff20:	46bd      	mov	sp, r7
 800ff22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff26:	b004      	add	sp, #16
 800ff28:	4770      	bx	lr
 800ff2a:	bf00      	nop
 800ff2c:	ffc02c00 	.word	0xffc02c00

0800ff30 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ff30:	b480      	push	{r7}
 800ff32:	b083      	sub	sp, #12
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ff3e:	4618      	mov	r0, r3
 800ff40:	370c      	adds	r7, #12
 800ff42:	46bd      	mov	sp, r7
 800ff44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff48:	4770      	bx	lr

0800ff4a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800ff4a:	b480      	push	{r7}
 800ff4c:	b083      	sub	sp, #12
 800ff4e:	af00      	add	r7, sp, #0
 800ff50:	6078      	str	r0, [r7, #4]
 800ff52:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	681a      	ldr	r2, [r3, #0]
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ff5e:	2300      	movs	r3, #0
}
 800ff60:	4618      	mov	r0, r3
 800ff62:	370c      	adds	r7, #12
 800ff64:	46bd      	mov	sp, r7
 800ff66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6a:	4770      	bx	lr

0800ff6c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800ff6c:	b480      	push	{r7}
 800ff6e:	b083      	sub	sp, #12
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	f043 0203 	orr.w	r2, r3, #3
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ff80:	2300      	movs	r3, #0
}
 800ff82:	4618      	mov	r0, r3
 800ff84:	370c      	adds	r7, #12
 800ff86:	46bd      	mov	sp, r7
 800ff88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8c:	4770      	bx	lr

0800ff8e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800ff8e:	b480      	push	{r7}
 800ff90:	b083      	sub	sp, #12
 800ff92:	af00      	add	r7, sp, #0
 800ff94:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	f003 0303 	and.w	r3, r3, #3
}
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	370c      	adds	r7, #12
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa8:	4770      	bx	lr
	...

0800ffac <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ffac:	b480      	push	{r7}
 800ffae:	b085      	sub	sp, #20
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
 800ffb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	681a      	ldr	r2, [r3, #0]
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ffc6:	683b      	ldr	r3, [r7, #0]
 800ffc8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ffca:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ffcc:	683b      	ldr	r3, [r7, #0]
 800ffce:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ffd0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ffd2:	683b      	ldr	r3, [r7, #0]
 800ffd4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ffd6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ffd8:	68fa      	ldr	r2, [r7, #12]
 800ffda:	4313      	orrs	r3, r2
 800ffdc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	68da      	ldr	r2, [r3, #12]
 800ffe2:	4b06      	ldr	r3, [pc, #24]	; (800fffc <SDMMC_SendCommand+0x50>)
 800ffe4:	4013      	ands	r3, r2
 800ffe6:	68fa      	ldr	r2, [r7, #12]
 800ffe8:	431a      	orrs	r2, r3
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ffee:	2300      	movs	r3, #0
}
 800fff0:	4618      	mov	r0, r3
 800fff2:	3714      	adds	r7, #20
 800fff4:	46bd      	mov	sp, r7
 800fff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffa:	4770      	bx	lr
 800fffc:	fffee0c0 	.word	0xfffee0c0

08010000 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8010000:	b480      	push	{r7}
 8010002:	b083      	sub	sp, #12
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	691b      	ldr	r3, [r3, #16]
 801000c:	b2db      	uxtb	r3, r3
}
 801000e:	4618      	mov	r0, r3
 8010010:	370c      	adds	r7, #12
 8010012:	46bd      	mov	sp, r7
 8010014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010018:	4770      	bx	lr

0801001a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 801001a:	b480      	push	{r7}
 801001c:	b085      	sub	sp, #20
 801001e:	af00      	add	r7, sp, #0
 8010020:	6078      	str	r0, [r7, #4]
 8010022:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	3314      	adds	r3, #20
 8010028:	461a      	mov	r2, r3
 801002a:	683b      	ldr	r3, [r7, #0]
 801002c:	4413      	add	r3, r2
 801002e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	681b      	ldr	r3, [r3, #0]
}
 8010034:	4618      	mov	r0, r3
 8010036:	3714      	adds	r7, #20
 8010038:	46bd      	mov	sp, r7
 801003a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003e:	4770      	bx	lr

08010040 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8010040:	b480      	push	{r7}
 8010042:	b085      	sub	sp, #20
 8010044:	af00      	add	r7, sp, #0
 8010046:	6078      	str	r0, [r7, #4]
 8010048:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801004a:	2300      	movs	r3, #0
 801004c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801004e:	683b      	ldr	r3, [r7, #0]
 8010050:	681a      	ldr	r2, [r3, #0]
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8010056:	683b      	ldr	r3, [r7, #0]
 8010058:	685a      	ldr	r2, [r3, #4]
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801005e:	683b      	ldr	r3, [r7, #0]
 8010060:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010062:	683b      	ldr	r3, [r7, #0]
 8010064:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010066:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010068:	683b      	ldr	r3, [r7, #0]
 801006a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 801006c:	431a      	orrs	r2, r3
                       Data->DPSM);
 801006e:	683b      	ldr	r3, [r7, #0]
 8010070:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010072:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010074:	68fa      	ldr	r2, [r7, #12]
 8010076:	4313      	orrs	r3, r2
 8010078:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801007e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	431a      	orrs	r2, r3
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801008a:	2300      	movs	r3, #0

}
 801008c:	4618      	mov	r0, r3
 801008e:	3714      	adds	r7, #20
 8010090:	46bd      	mov	sp, r7
 8010092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010096:	4770      	bx	lr

08010098 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b088      	sub	sp, #32
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
 80100a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80100a2:	683b      	ldr	r3, [r7, #0]
 80100a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80100a6:	2310      	movs	r3, #16
 80100a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80100aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80100ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80100b0:	2300      	movs	r3, #0
 80100b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80100b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80100b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80100ba:	f107 0308 	add.w	r3, r7, #8
 80100be:	4619      	mov	r1, r3
 80100c0:	6878      	ldr	r0, [r7, #4]
 80100c2:	f7ff ff73 	bl	800ffac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80100c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80100ca:	2110      	movs	r1, #16
 80100cc:	6878      	ldr	r0, [r7, #4]
 80100ce:	f000 faab 	bl	8010628 <SDMMC_GetCmdResp1>
 80100d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80100d4:	69fb      	ldr	r3, [r7, #28]
}
 80100d6:	4618      	mov	r0, r3
 80100d8:	3720      	adds	r7, #32
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd80      	pop	{r7, pc}

080100de <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80100de:	b580      	push	{r7, lr}
 80100e0:	b088      	sub	sp, #32
 80100e2:	af00      	add	r7, sp, #0
 80100e4:	6078      	str	r0, [r7, #4]
 80100e6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80100e8:	683b      	ldr	r3, [r7, #0]
 80100ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80100ec:	2311      	movs	r3, #17
 80100ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80100f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80100f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80100f6:	2300      	movs	r3, #0
 80100f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80100fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80100fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010100:	f107 0308 	add.w	r3, r7, #8
 8010104:	4619      	mov	r1, r3
 8010106:	6878      	ldr	r0, [r7, #4]
 8010108:	f7ff ff50 	bl	800ffac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801010c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010110:	2111      	movs	r1, #17
 8010112:	6878      	ldr	r0, [r7, #4]
 8010114:	f000 fa88 	bl	8010628 <SDMMC_GetCmdResp1>
 8010118:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801011a:	69fb      	ldr	r3, [r7, #28]
}
 801011c:	4618      	mov	r0, r3
 801011e:	3720      	adds	r7, #32
 8010120:	46bd      	mov	sp, r7
 8010122:	bd80      	pop	{r7, pc}

08010124 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010124:	b580      	push	{r7, lr}
 8010126:	b088      	sub	sp, #32
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]
 801012c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801012e:	683b      	ldr	r3, [r7, #0]
 8010130:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010132:	2312      	movs	r3, #18
 8010134:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010136:	f44f 7380 	mov.w	r3, #256	; 0x100
 801013a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801013c:	2300      	movs	r3, #0
 801013e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010140:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010144:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010146:	f107 0308 	add.w	r3, r7, #8
 801014a:	4619      	mov	r1, r3
 801014c:	6878      	ldr	r0, [r7, #4]
 801014e:	f7ff ff2d 	bl	800ffac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010152:	f241 3288 	movw	r2, #5000	; 0x1388
 8010156:	2112      	movs	r1, #18
 8010158:	6878      	ldr	r0, [r7, #4]
 801015a:	f000 fa65 	bl	8010628 <SDMMC_GetCmdResp1>
 801015e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010160:	69fb      	ldr	r3, [r7, #28]
}
 8010162:	4618      	mov	r0, r3
 8010164:	3720      	adds	r7, #32
 8010166:	46bd      	mov	sp, r7
 8010168:	bd80      	pop	{r7, pc}

0801016a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801016a:	b580      	push	{r7, lr}
 801016c:	b088      	sub	sp, #32
 801016e:	af00      	add	r7, sp, #0
 8010170:	6078      	str	r0, [r7, #4]
 8010172:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010174:	683b      	ldr	r3, [r7, #0]
 8010176:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010178:	2318      	movs	r3, #24
 801017a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801017c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010180:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010182:	2300      	movs	r3, #0
 8010184:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010186:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801018a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801018c:	f107 0308 	add.w	r3, r7, #8
 8010190:	4619      	mov	r1, r3
 8010192:	6878      	ldr	r0, [r7, #4]
 8010194:	f7ff ff0a 	bl	800ffac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010198:	f241 3288 	movw	r2, #5000	; 0x1388
 801019c:	2118      	movs	r1, #24
 801019e:	6878      	ldr	r0, [r7, #4]
 80101a0:	f000 fa42 	bl	8010628 <SDMMC_GetCmdResp1>
 80101a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80101a6:	69fb      	ldr	r3, [r7, #28]
}
 80101a8:	4618      	mov	r0, r3
 80101aa:	3720      	adds	r7, #32
 80101ac:	46bd      	mov	sp, r7
 80101ae:	bd80      	pop	{r7, pc}

080101b0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b088      	sub	sp, #32
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
 80101b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80101ba:	683b      	ldr	r3, [r7, #0]
 80101bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80101be:	2319      	movs	r3, #25
 80101c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80101c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80101c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80101c8:	2300      	movs	r3, #0
 80101ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80101cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80101d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80101d2:	f107 0308 	add.w	r3, r7, #8
 80101d6:	4619      	mov	r1, r3
 80101d8:	6878      	ldr	r0, [r7, #4]
 80101da:	f7ff fee7 	bl	800ffac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80101de:	f241 3288 	movw	r2, #5000	; 0x1388
 80101e2:	2119      	movs	r1, #25
 80101e4:	6878      	ldr	r0, [r7, #4]
 80101e6:	f000 fa1f 	bl	8010628 <SDMMC_GetCmdResp1>
 80101ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80101ec:	69fb      	ldr	r3, [r7, #28]
}
 80101ee:	4618      	mov	r0, r3
 80101f0:	3720      	adds	r7, #32
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bd80      	pop	{r7, pc}
	...

080101f8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b088      	sub	sp, #32
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010200:	2300      	movs	r3, #0
 8010202:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010204:	230c      	movs	r3, #12
 8010206:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010208:	f44f 7380 	mov.w	r3, #256	; 0x100
 801020c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801020e:	2300      	movs	r3, #0
 8010210:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010216:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	68db      	ldr	r3, [r3, #12]
 801021c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	68db      	ldr	r3, [r3, #12]
 8010228:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010230:	f107 0308 	add.w	r3, r7, #8
 8010234:	4619      	mov	r1, r3
 8010236:	6878      	ldr	r0, [r7, #4]
 8010238:	f7ff feb8 	bl	800ffac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 801023c:	4a0b      	ldr	r2, [pc, #44]	; (801026c <SDMMC_CmdStopTransfer+0x74>)
 801023e:	210c      	movs	r1, #12
 8010240:	6878      	ldr	r0, [r7, #4]
 8010242:	f000 f9f1 	bl	8010628 <SDMMC_GetCmdResp1>
 8010246:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	68db      	ldr	r3, [r3, #12]
 801024c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010254:	69fb      	ldr	r3, [r7, #28]
 8010256:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801025a:	d101      	bne.n	8010260 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 801025c:	2300      	movs	r3, #0
 801025e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8010260:	69fb      	ldr	r3, [r7, #28]
}
 8010262:	4618      	mov	r0, r3
 8010264:	3720      	adds	r7, #32
 8010266:	46bd      	mov	sp, r7
 8010268:	bd80      	pop	{r7, pc}
 801026a:	bf00      	nop
 801026c:	05f5e100 	.word	0x05f5e100

08010270 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8010270:	b580      	push	{r7, lr}
 8010272:	b08a      	sub	sp, #40	; 0x28
 8010274:	af00      	add	r7, sp, #0
 8010276:	60f8      	str	r0, [r7, #12]
 8010278:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801027c:	683b      	ldr	r3, [r7, #0]
 801027e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010280:	2307      	movs	r3, #7
 8010282:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010284:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010288:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801028a:	2300      	movs	r3, #0
 801028c:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801028e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010292:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010294:	f107 0310 	add.w	r3, r7, #16
 8010298:	4619      	mov	r1, r3
 801029a:	68f8      	ldr	r0, [r7, #12]
 801029c:	f7ff fe86 	bl	800ffac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80102a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80102a4:	2107      	movs	r1, #7
 80102a6:	68f8      	ldr	r0, [r7, #12]
 80102a8:	f000 f9be 	bl	8010628 <SDMMC_GetCmdResp1>
 80102ac:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80102ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80102b0:	4618      	mov	r0, r3
 80102b2:	3728      	adds	r7, #40	; 0x28
 80102b4:	46bd      	mov	sp, r7
 80102b6:	bd80      	pop	{r7, pc}

080102b8 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b088      	sub	sp, #32
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80102c0:	2300      	movs	r3, #0
 80102c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80102c4:	2300      	movs	r3, #0
 80102c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80102c8:	2300      	movs	r3, #0
 80102ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80102cc:	2300      	movs	r3, #0
 80102ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80102d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80102d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80102d6:	f107 0308 	add.w	r3, r7, #8
 80102da:	4619      	mov	r1, r3
 80102dc:	6878      	ldr	r0, [r7, #4]
 80102de:	f7ff fe65 	bl	800ffac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80102e2:	6878      	ldr	r0, [r7, #4]
 80102e4:	f000 f976 	bl	80105d4 <SDMMC_GetCmdError>
 80102e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80102ea:	69fb      	ldr	r3, [r7, #28]
}
 80102ec:	4618      	mov	r0, r3
 80102ee:	3720      	adds	r7, #32
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}

080102f4 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b088      	sub	sp, #32
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80102fc:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010300:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010302:	2308      	movs	r3, #8
 8010304:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010306:	f44f 7380 	mov.w	r3, #256	; 0x100
 801030a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801030c:	2300      	movs	r3, #0
 801030e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010314:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010316:	f107 0308 	add.w	r3, r7, #8
 801031a:	4619      	mov	r1, r3
 801031c:	6878      	ldr	r0, [r7, #4]
 801031e:	f7ff fe45 	bl	800ffac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010322:	6878      	ldr	r0, [r7, #4]
 8010324:	f000 fb6a 	bl	80109fc <SDMMC_GetCmdResp7>
 8010328:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801032a:	69fb      	ldr	r3, [r7, #28]
}
 801032c:	4618      	mov	r0, r3
 801032e:	3720      	adds	r7, #32
 8010330:	46bd      	mov	sp, r7
 8010332:	bd80      	pop	{r7, pc}

08010334 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010334:	b580      	push	{r7, lr}
 8010336:	b088      	sub	sp, #32
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
 801033c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801033e:	683b      	ldr	r3, [r7, #0]
 8010340:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010342:	2337      	movs	r3, #55	; 0x37
 8010344:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010346:	f44f 7380 	mov.w	r3, #256	; 0x100
 801034a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801034c:	2300      	movs	r3, #0
 801034e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010354:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010356:	f107 0308 	add.w	r3, r7, #8
 801035a:	4619      	mov	r1, r3
 801035c:	6878      	ldr	r0, [r7, #4]
 801035e:	f7ff fe25 	bl	800ffac <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8010362:	f241 3288 	movw	r2, #5000	; 0x1388
 8010366:	2137      	movs	r1, #55	; 0x37
 8010368:	6878      	ldr	r0, [r7, #4]
 801036a:	f000 f95d 	bl	8010628 <SDMMC_GetCmdResp1>
 801036e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010370:	69fb      	ldr	r3, [r7, #28]
}
 8010372:	4618      	mov	r0, r3
 8010374:	3720      	adds	r7, #32
 8010376:	46bd      	mov	sp, r7
 8010378:	bd80      	pop	{r7, pc}

0801037a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801037a:	b580      	push	{r7, lr}
 801037c:	b088      	sub	sp, #32
 801037e:	af00      	add	r7, sp, #0
 8010380:	6078      	str	r0, [r7, #4]
 8010382:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010384:	683b      	ldr	r3, [r7, #0]
 8010386:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010388:	2329      	movs	r3, #41	; 0x29
 801038a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801038c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010390:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010392:	2300      	movs	r3, #0
 8010394:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801039a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801039c:	f107 0308 	add.w	r3, r7, #8
 80103a0:	4619      	mov	r1, r3
 80103a2:	6878      	ldr	r0, [r7, #4]
 80103a4:	f7ff fe02 	bl	800ffac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80103a8:	6878      	ldr	r0, [r7, #4]
 80103aa:	f000 fa75 	bl	8010898 <SDMMC_GetCmdResp3>
 80103ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103b0:	69fb      	ldr	r3, [r7, #28]
}
 80103b2:	4618      	mov	r0, r3
 80103b4:	3720      	adds	r7, #32
 80103b6:	46bd      	mov	sp, r7
 80103b8:	bd80      	pop	{r7, pc}

080103ba <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80103ba:	b580      	push	{r7, lr}
 80103bc:	b088      	sub	sp, #32
 80103be:	af00      	add	r7, sp, #0
 80103c0:	6078      	str	r0, [r7, #4]
 80103c2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80103c4:	683b      	ldr	r3, [r7, #0]
 80103c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80103c8:	2306      	movs	r3, #6
 80103ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80103cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80103d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80103d2:	2300      	movs	r3, #0
 80103d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80103d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80103da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80103dc:	f107 0308 	add.w	r3, r7, #8
 80103e0:	4619      	mov	r1, r3
 80103e2:	6878      	ldr	r0, [r7, #4]
 80103e4:	f7ff fde2 	bl	800ffac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80103e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80103ec:	2106      	movs	r1, #6
 80103ee:	6878      	ldr	r0, [r7, #4]
 80103f0:	f000 f91a 	bl	8010628 <SDMMC_GetCmdResp1>
 80103f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103f6:	69fb      	ldr	r3, [r7, #28]
}
 80103f8:	4618      	mov	r0, r3
 80103fa:	3720      	adds	r7, #32
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}

08010400 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b088      	sub	sp, #32
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010408:	2300      	movs	r3, #0
 801040a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801040c:	2333      	movs	r3, #51	; 0x33
 801040e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010410:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010414:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010416:	2300      	movs	r3, #0
 8010418:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801041a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801041e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010420:	f107 0308 	add.w	r3, r7, #8
 8010424:	4619      	mov	r1, r3
 8010426:	6878      	ldr	r0, [r7, #4]
 8010428:	f7ff fdc0 	bl	800ffac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801042c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010430:	2133      	movs	r1, #51	; 0x33
 8010432:	6878      	ldr	r0, [r7, #4]
 8010434:	f000 f8f8 	bl	8010628 <SDMMC_GetCmdResp1>
 8010438:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801043a:	69fb      	ldr	r3, [r7, #28]
}
 801043c:	4618      	mov	r0, r3
 801043e:	3720      	adds	r7, #32
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}

08010444 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b088      	sub	sp, #32
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801044c:	2300      	movs	r3, #0
 801044e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010450:	2302      	movs	r3, #2
 8010452:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010454:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010458:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801045a:	2300      	movs	r3, #0
 801045c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801045e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010462:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010464:	f107 0308 	add.w	r3, r7, #8
 8010468:	4619      	mov	r1, r3
 801046a:	6878      	ldr	r0, [r7, #4]
 801046c:	f7ff fd9e 	bl	800ffac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010470:	6878      	ldr	r0, [r7, #4]
 8010472:	f000 f9c9 	bl	8010808 <SDMMC_GetCmdResp2>
 8010476:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010478:	69fb      	ldr	r3, [r7, #28]
}
 801047a:	4618      	mov	r0, r3
 801047c:	3720      	adds	r7, #32
 801047e:	46bd      	mov	sp, r7
 8010480:	bd80      	pop	{r7, pc}

08010482 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010482:	b580      	push	{r7, lr}
 8010484:	b088      	sub	sp, #32
 8010486:	af00      	add	r7, sp, #0
 8010488:	6078      	str	r0, [r7, #4]
 801048a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801048c:	683b      	ldr	r3, [r7, #0]
 801048e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010490:	2309      	movs	r3, #9
 8010492:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010494:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010498:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801049a:	2300      	movs	r3, #0
 801049c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801049e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80104a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80104a4:	f107 0308 	add.w	r3, r7, #8
 80104a8:	4619      	mov	r1, r3
 80104aa:	6878      	ldr	r0, [r7, #4]
 80104ac:	f7ff fd7e 	bl	800ffac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80104b0:	6878      	ldr	r0, [r7, #4]
 80104b2:	f000 f9a9 	bl	8010808 <SDMMC_GetCmdResp2>
 80104b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104b8:	69fb      	ldr	r3, [r7, #28]
}
 80104ba:	4618      	mov	r0, r3
 80104bc:	3720      	adds	r7, #32
 80104be:	46bd      	mov	sp, r7
 80104c0:	bd80      	pop	{r7, pc}

080104c2 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80104c2:	b580      	push	{r7, lr}
 80104c4:	b088      	sub	sp, #32
 80104c6:	af00      	add	r7, sp, #0
 80104c8:	6078      	str	r0, [r7, #4]
 80104ca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80104cc:	2300      	movs	r3, #0
 80104ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80104d0:	2303      	movs	r3, #3
 80104d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80104d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80104d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80104da:	2300      	movs	r3, #0
 80104dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80104de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80104e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80104e4:	f107 0308 	add.w	r3, r7, #8
 80104e8:	4619      	mov	r1, r3
 80104ea:	6878      	ldr	r0, [r7, #4]
 80104ec:	f7ff fd5e 	bl	800ffac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80104f0:	683a      	ldr	r2, [r7, #0]
 80104f2:	2103      	movs	r1, #3
 80104f4:	6878      	ldr	r0, [r7, #4]
 80104f6:	f000 fa0b 	bl	8010910 <SDMMC_GetCmdResp6>
 80104fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104fc:	69fb      	ldr	r3, [r7, #28]
}
 80104fe:	4618      	mov	r0, r3
 8010500:	3720      	adds	r7, #32
 8010502:	46bd      	mov	sp, r7
 8010504:	bd80      	pop	{r7, pc}

08010506 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010506:	b580      	push	{r7, lr}
 8010508:	b088      	sub	sp, #32
 801050a:	af00      	add	r7, sp, #0
 801050c:	6078      	str	r0, [r7, #4]
 801050e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010510:	683b      	ldr	r3, [r7, #0]
 8010512:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010514:	230d      	movs	r3, #13
 8010516:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010518:	f44f 7380 	mov.w	r3, #256	; 0x100
 801051c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801051e:	2300      	movs	r3, #0
 8010520:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010522:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010526:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010528:	f107 0308 	add.w	r3, r7, #8
 801052c:	4619      	mov	r1, r3
 801052e:	6878      	ldr	r0, [r7, #4]
 8010530:	f7ff fd3c 	bl	800ffac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8010534:	f241 3288 	movw	r2, #5000	; 0x1388
 8010538:	210d      	movs	r1, #13
 801053a:	6878      	ldr	r0, [r7, #4]
 801053c:	f000 f874 	bl	8010628 <SDMMC_GetCmdResp1>
 8010540:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010542:	69fb      	ldr	r3, [r7, #28]
}
 8010544:	4618      	mov	r0, r3
 8010546:	3720      	adds	r7, #32
 8010548:	46bd      	mov	sp, r7
 801054a:	bd80      	pop	{r7, pc}

0801054c <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 801054c:	b580      	push	{r7, lr}
 801054e:	b088      	sub	sp, #32
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010554:	2300      	movs	r3, #0
 8010556:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8010558:	230d      	movs	r3, #13
 801055a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801055c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010560:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010562:	2300      	movs	r3, #0
 8010564:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010566:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801056a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801056c:	f107 0308 	add.w	r3, r7, #8
 8010570:	4619      	mov	r1, r3
 8010572:	6878      	ldr	r0, [r7, #4]
 8010574:	f7ff fd1a 	bl	800ffac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8010578:	f241 3288 	movw	r2, #5000	; 0x1388
 801057c:	210d      	movs	r1, #13
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f000 f852 	bl	8010628 <SDMMC_GetCmdResp1>
 8010584:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010586:	69fb      	ldr	r3, [r7, #28]
}
 8010588:	4618      	mov	r0, r3
 801058a:	3720      	adds	r7, #32
 801058c:	46bd      	mov	sp, r7
 801058e:	bd80      	pop	{r7, pc}

08010590 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8010590:	b580      	push	{r7, lr}
 8010592:	b088      	sub	sp, #32
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8010598:	2300      	movs	r3, #0
 801059a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 801059c:	230b      	movs	r3, #11
 801059e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80105a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80105a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80105a6:	2300      	movs	r3, #0
 80105a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80105aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80105ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80105b0:	f107 0308 	add.w	r3, r7, #8
 80105b4:	4619      	mov	r1, r3
 80105b6:	6878      	ldr	r0, [r7, #4]
 80105b8:	f7ff fcf8 	bl	800ffac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 80105bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80105c0:	210b      	movs	r1, #11
 80105c2:	6878      	ldr	r0, [r7, #4]
 80105c4:	f000 f830 	bl	8010628 <SDMMC_GetCmdResp1>
 80105c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105ca:	69fb      	ldr	r3, [r7, #28]
}
 80105cc:	4618      	mov	r0, r3
 80105ce:	3720      	adds	r7, #32
 80105d0:	46bd      	mov	sp, r7
 80105d2:	bd80      	pop	{r7, pc}

080105d4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80105d4:	b490      	push	{r4, r7}
 80105d6:	b082      	sub	sp, #8
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80105dc:	4b0f      	ldr	r3, [pc, #60]	; (801061c <SDMMC_GetCmdError+0x48>)
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	4a0f      	ldr	r2, [pc, #60]	; (8010620 <SDMMC_GetCmdError+0x4c>)
 80105e2:	fba2 2303 	umull	r2, r3, r2, r3
 80105e6:	0a5b      	lsrs	r3, r3, #9
 80105e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80105ec:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 80105f0:	4623      	mov	r3, r4
 80105f2:	1e5c      	subs	r4, r3, #1
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d102      	bne.n	80105fe <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80105f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80105fc:	e009      	b.n	8010612 <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010606:	2b00      	cmp	r3, #0
 8010608:	d0f2      	beq.n	80105f0 <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	4a05      	ldr	r2, [pc, #20]	; (8010624 <SDMMC_GetCmdError+0x50>)
 801060e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8010610:	2300      	movs	r3, #0
}
 8010612:	4618      	mov	r0, r3
 8010614:	3708      	adds	r7, #8
 8010616:	46bd      	mov	sp, r7
 8010618:	bc90      	pop	{r4, r7}
 801061a:	4770      	bx	lr
 801061c:	2400000c 	.word	0x2400000c
 8010620:	10624dd3 	.word	0x10624dd3
 8010624:	002000c5 	.word	0x002000c5

08010628 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010628:	b590      	push	{r4, r7, lr}
 801062a:	b087      	sub	sp, #28
 801062c:	af00      	add	r7, sp, #0
 801062e:	60f8      	str	r0, [r7, #12]
 8010630:	460b      	mov	r3, r1
 8010632:	607a      	str	r2, [r7, #4]
 8010634:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010636:	4b6f      	ldr	r3, [pc, #444]	; (80107f4 <SDMMC_GetCmdResp1+0x1cc>)
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	4a6f      	ldr	r2, [pc, #444]	; (80107f8 <SDMMC_GetCmdResp1+0x1d0>)
 801063c:	fba2 2303 	umull	r2, r3, r2, r3
 8010640:	0a5b      	lsrs	r3, r3, #9
 8010642:	687a      	ldr	r2, [r7, #4]
 8010644:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8010648:	4623      	mov	r3, r4
 801064a:	1e5c      	subs	r4, r3, #1
 801064c:	2b00      	cmp	r3, #0
 801064e:	d102      	bne.n	8010656 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010650:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010654:	e0c9      	b.n	80107ea <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801065a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801065c:	697a      	ldr	r2, [r7, #20]
 801065e:	4b67      	ldr	r3, [pc, #412]	; (80107fc <SDMMC_GetCmdResp1+0x1d4>)
 8010660:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010662:	2b00      	cmp	r3, #0
 8010664:	d0f0      	beq.n	8010648 <SDMMC_GetCmdResp1+0x20>
 8010666:	697b      	ldr	r3, [r7, #20]
 8010668:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801066c:	2b00      	cmp	r3, #0
 801066e:	d1eb      	bne.n	8010648 <SDMMC_GetCmdResp1+0x20>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010674:	f003 0304 	and.w	r3, r3, #4
 8010678:	2b00      	cmp	r3, #0
 801067a:	d004      	beq.n	8010686 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	2204      	movs	r2, #4
 8010680:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010682:	2304      	movs	r3, #4
 8010684:	e0b1      	b.n	80107ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801068a:	f003 0301 	and.w	r3, r3, #1
 801068e:	2b00      	cmp	r3, #0
 8010690:	d004      	beq.n	801069c <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	2201      	movs	r2, #1
 8010696:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010698:	2301      	movs	r3, #1
 801069a:	e0a6      	b.n	80107ea <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	4a58      	ldr	r2, [pc, #352]	; (8010800 <SDMMC_GetCmdResp1+0x1d8>)
 80106a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80106a2:	68f8      	ldr	r0, [r7, #12]
 80106a4:	f7ff fcac 	bl	8010000 <SDMMC_GetCommandResponse>
 80106a8:	4603      	mov	r3, r0
 80106aa:	461a      	mov	r2, r3
 80106ac:	7afb      	ldrb	r3, [r7, #11]
 80106ae:	4293      	cmp	r3, r2
 80106b0:	d001      	beq.n	80106b6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80106b2:	2301      	movs	r3, #1
 80106b4:	e099      	b.n	80107ea <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80106b6:	2100      	movs	r1, #0
 80106b8:	68f8      	ldr	r0, [r7, #12]
 80106ba:	f7ff fcae 	bl	801001a <SDMMC_GetResponse>
 80106be:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80106c0:	693a      	ldr	r2, [r7, #16]
 80106c2:	4b50      	ldr	r3, [pc, #320]	; (8010804 <SDMMC_GetCmdResp1+0x1dc>)
 80106c4:	4013      	ands	r3, r2
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d101      	bne.n	80106ce <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80106ca:	2300      	movs	r3, #0
 80106cc:	e08d      	b.n	80107ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80106ce:	693b      	ldr	r3, [r7, #16]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	da02      	bge.n	80106da <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80106d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80106d8:	e087      	b.n	80107ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80106da:	693b      	ldr	r3, [r7, #16]
 80106dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d001      	beq.n	80106e8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80106e4:	2340      	movs	r3, #64	; 0x40
 80106e6:	e080      	b.n	80107ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80106e8:	693b      	ldr	r3, [r7, #16]
 80106ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d001      	beq.n	80106f6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80106f2:	2380      	movs	r3, #128	; 0x80
 80106f4:	e079      	b.n	80107ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80106f6:	693b      	ldr	r3, [r7, #16]
 80106f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d002      	beq.n	8010706 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010700:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010704:	e071      	b.n	80107ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010706:	693b      	ldr	r3, [r7, #16]
 8010708:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801070c:	2b00      	cmp	r3, #0
 801070e:	d002      	beq.n	8010716 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010710:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010714:	e069      	b.n	80107ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010716:	693b      	ldr	r3, [r7, #16]
 8010718:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801071c:	2b00      	cmp	r3, #0
 801071e:	d002      	beq.n	8010726 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010720:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010724:	e061      	b.n	80107ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010726:	693b      	ldr	r3, [r7, #16]
 8010728:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801072c:	2b00      	cmp	r3, #0
 801072e:	d002      	beq.n	8010736 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010730:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010734:	e059      	b.n	80107ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010736:	693b      	ldr	r3, [r7, #16]
 8010738:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801073c:	2b00      	cmp	r3, #0
 801073e:	d002      	beq.n	8010746 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010744:	e051      	b.n	80107ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010746:	693b      	ldr	r3, [r7, #16]
 8010748:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801074c:	2b00      	cmp	r3, #0
 801074e:	d002      	beq.n	8010756 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010750:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010754:	e049      	b.n	80107ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010756:	693b      	ldr	r3, [r7, #16]
 8010758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801075c:	2b00      	cmp	r3, #0
 801075e:	d002      	beq.n	8010766 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010760:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010764:	e041      	b.n	80107ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010766:	693b      	ldr	r3, [r7, #16]
 8010768:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801076c:	2b00      	cmp	r3, #0
 801076e:	d002      	beq.n	8010776 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8010770:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010774:	e039      	b.n	80107ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010776:	693b      	ldr	r3, [r7, #16]
 8010778:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801077c:	2b00      	cmp	r3, #0
 801077e:	d002      	beq.n	8010786 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010780:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010784:	e031      	b.n	80107ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010786:	693b      	ldr	r3, [r7, #16]
 8010788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801078c:	2b00      	cmp	r3, #0
 801078e:	d002      	beq.n	8010796 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010790:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010794:	e029      	b.n	80107ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010796:	693b      	ldr	r3, [r7, #16]
 8010798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801079c:	2b00      	cmp	r3, #0
 801079e:	d002      	beq.n	80107a6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80107a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80107a4:	e021      	b.n	80107ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80107a6:	693b      	ldr	r3, [r7, #16]
 80107a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d002      	beq.n	80107b6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80107b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80107b4:	e019      	b.n	80107ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80107b6:	693b      	ldr	r3, [r7, #16]
 80107b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d002      	beq.n	80107c6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80107c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80107c4:	e011      	b.n	80107ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80107c6:	693b      	ldr	r3, [r7, #16]
 80107c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d002      	beq.n	80107d6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80107d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80107d4:	e009      	b.n	80107ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80107d6:	693b      	ldr	r3, [r7, #16]
 80107d8:	f003 0308 	and.w	r3, r3, #8
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d002      	beq.n	80107e6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80107e0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80107e4:	e001      	b.n	80107ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80107e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80107ea:	4618      	mov	r0, r3
 80107ec:	371c      	adds	r7, #28
 80107ee:	46bd      	mov	sp, r7
 80107f0:	bd90      	pop	{r4, r7, pc}
 80107f2:	bf00      	nop
 80107f4:	2400000c 	.word	0x2400000c
 80107f8:	10624dd3 	.word	0x10624dd3
 80107fc:	00200045 	.word	0x00200045
 8010800:	002000c5 	.word	0x002000c5
 8010804:	fdffe008 	.word	0xfdffe008

08010808 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8010808:	b490      	push	{r4, r7}
 801080a:	b084      	sub	sp, #16
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010810:	4b1e      	ldr	r3, [pc, #120]	; (801088c <SDMMC_GetCmdResp2+0x84>)
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	4a1e      	ldr	r2, [pc, #120]	; (8010890 <SDMMC_GetCmdResp2+0x88>)
 8010816:	fba2 2303 	umull	r2, r3, r2, r3
 801081a:	0a5b      	lsrs	r3, r3, #9
 801081c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010820:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8010824:	4623      	mov	r3, r4
 8010826:	1e5c      	subs	r4, r3, #1
 8010828:	2b00      	cmp	r3, #0
 801082a:	d102      	bne.n	8010832 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 801082c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010830:	e026      	b.n	8010880 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010836:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801083e:	2b00      	cmp	r3, #0
 8010840:	d0f0      	beq.n	8010824 <SDMMC_GetCmdResp2+0x1c>
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010848:	2b00      	cmp	r3, #0
 801084a:	d1eb      	bne.n	8010824 <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010850:	f003 0304 	and.w	r3, r3, #4
 8010854:	2b00      	cmp	r3, #0
 8010856:	d004      	beq.n	8010862 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	2204      	movs	r2, #4
 801085c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801085e:	2304      	movs	r3, #4
 8010860:	e00e      	b.n	8010880 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010866:	f003 0301 	and.w	r3, r3, #1
 801086a:	2b00      	cmp	r3, #0
 801086c:	d004      	beq.n	8010878 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	2201      	movs	r2, #1
 8010872:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010874:	2301      	movs	r3, #1
 8010876:	e003      	b.n	8010880 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	4a06      	ldr	r2, [pc, #24]	; (8010894 <SDMMC_GetCmdResp2+0x8c>)
 801087c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801087e:	2300      	movs	r3, #0
}
 8010880:	4618      	mov	r0, r3
 8010882:	3710      	adds	r7, #16
 8010884:	46bd      	mov	sp, r7
 8010886:	bc90      	pop	{r4, r7}
 8010888:	4770      	bx	lr
 801088a:	bf00      	nop
 801088c:	2400000c 	.word	0x2400000c
 8010890:	10624dd3 	.word	0x10624dd3
 8010894:	002000c5 	.word	0x002000c5

08010898 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010898:	b490      	push	{r4, r7}
 801089a:	b084      	sub	sp, #16
 801089c:	af00      	add	r7, sp, #0
 801089e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80108a0:	4b18      	ldr	r3, [pc, #96]	; (8010904 <SDMMC_GetCmdResp3+0x6c>)
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	4a18      	ldr	r2, [pc, #96]	; (8010908 <SDMMC_GetCmdResp3+0x70>)
 80108a6:	fba2 2303 	umull	r2, r3, r2, r3
 80108aa:	0a5b      	lsrs	r3, r3, #9
 80108ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80108b0:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 80108b4:	4623      	mov	r3, r4
 80108b6:	1e5c      	subs	r4, r3, #1
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d102      	bne.n	80108c2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80108bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80108c0:	e01b      	b.n	80108fa <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108c6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d0f0      	beq.n	80108b4 <SDMMC_GetCmdResp3+0x1c>
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d1eb      	bne.n	80108b4 <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108e0:	f003 0304 	and.w	r3, r3, #4
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d004      	beq.n	80108f2 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	2204      	movs	r2, #4
 80108ec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80108ee:	2304      	movs	r3, #4
 80108f0:	e003      	b.n	80108fa <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	4a05      	ldr	r2, [pc, #20]	; (801090c <SDMMC_GetCmdResp3+0x74>)
 80108f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80108f8:	2300      	movs	r3, #0
}
 80108fa:	4618      	mov	r0, r3
 80108fc:	3710      	adds	r7, #16
 80108fe:	46bd      	mov	sp, r7
 8010900:	bc90      	pop	{r4, r7}
 8010902:	4770      	bx	lr
 8010904:	2400000c 	.word	0x2400000c
 8010908:	10624dd3 	.word	0x10624dd3
 801090c:	002000c5 	.word	0x002000c5

08010910 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010910:	b590      	push	{r4, r7, lr}
 8010912:	b087      	sub	sp, #28
 8010914:	af00      	add	r7, sp, #0
 8010916:	60f8      	str	r0, [r7, #12]
 8010918:	460b      	mov	r3, r1
 801091a:	607a      	str	r2, [r7, #4]
 801091c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801091e:	4b34      	ldr	r3, [pc, #208]	; (80109f0 <SDMMC_GetCmdResp6+0xe0>)
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	4a34      	ldr	r2, [pc, #208]	; (80109f4 <SDMMC_GetCmdResp6+0xe4>)
 8010924:	fba2 2303 	umull	r2, r3, r2, r3
 8010928:	0a5b      	lsrs	r3, r3, #9
 801092a:	f241 3288 	movw	r2, #5000	; 0x1388
 801092e:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8010932:	4623      	mov	r3, r4
 8010934:	1e5c      	subs	r4, r3, #1
 8010936:	2b00      	cmp	r3, #0
 8010938:	d102      	bne.n	8010940 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 801093a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801093e:	e052      	b.n	80109e6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010944:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010946:	697b      	ldr	r3, [r7, #20]
 8010948:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801094c:	2b00      	cmp	r3, #0
 801094e:	d0f0      	beq.n	8010932 <SDMMC_GetCmdResp6+0x22>
 8010950:	697b      	ldr	r3, [r7, #20]
 8010952:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010956:	2b00      	cmp	r3, #0
 8010958:	d1eb      	bne.n	8010932 <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801095e:	f003 0304 	and.w	r3, r3, #4
 8010962:	2b00      	cmp	r3, #0
 8010964:	d004      	beq.n	8010970 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	2204      	movs	r2, #4
 801096a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801096c:	2304      	movs	r3, #4
 801096e:	e03a      	b.n	80109e6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010974:	f003 0301 	and.w	r3, r3, #1
 8010978:	2b00      	cmp	r3, #0
 801097a:	d004      	beq.n	8010986 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	2201      	movs	r2, #1
 8010980:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010982:	2301      	movs	r3, #1
 8010984:	e02f      	b.n	80109e6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010986:	68f8      	ldr	r0, [r7, #12]
 8010988:	f7ff fb3a 	bl	8010000 <SDMMC_GetCommandResponse>
 801098c:	4603      	mov	r3, r0
 801098e:	461a      	mov	r2, r3
 8010990:	7afb      	ldrb	r3, [r7, #11]
 8010992:	4293      	cmp	r3, r2
 8010994:	d001      	beq.n	801099a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010996:	2301      	movs	r3, #1
 8010998:	e025      	b.n	80109e6 <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	4a16      	ldr	r2, [pc, #88]	; (80109f8 <SDMMC_GetCmdResp6+0xe8>)
 801099e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80109a0:	2100      	movs	r1, #0
 80109a2:	68f8      	ldr	r0, [r7, #12]
 80109a4:	f7ff fb39 	bl	801001a <SDMMC_GetResponse>
 80109a8:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80109aa:	693b      	ldr	r3, [r7, #16]
 80109ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d106      	bne.n	80109c2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80109b4:	693b      	ldr	r3, [r7, #16]
 80109b6:	0c1b      	lsrs	r3, r3, #16
 80109b8:	b29a      	uxth	r2, r3
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80109be:	2300      	movs	r3, #0
 80109c0:	e011      	b.n	80109e6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80109c2:	693b      	ldr	r3, [r7, #16]
 80109c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d002      	beq.n	80109d2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80109cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80109d0:	e009      	b.n	80109e6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80109d2:	693b      	ldr	r3, [r7, #16]
 80109d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d002      	beq.n	80109e2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80109dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80109e0:	e001      	b.n	80109e6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80109e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80109e6:	4618      	mov	r0, r3
 80109e8:	371c      	adds	r7, #28
 80109ea:	46bd      	mov	sp, r7
 80109ec:	bd90      	pop	{r4, r7, pc}
 80109ee:	bf00      	nop
 80109f0:	2400000c 	.word	0x2400000c
 80109f4:	10624dd3 	.word	0x10624dd3
 80109f8:	002000c5 	.word	0x002000c5

080109fc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80109fc:	b490      	push	{r4, r7}
 80109fe:	b084      	sub	sp, #16
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010a04:	4b21      	ldr	r3, [pc, #132]	; (8010a8c <SDMMC_GetCmdResp7+0x90>)
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	4a21      	ldr	r2, [pc, #132]	; (8010a90 <SDMMC_GetCmdResp7+0x94>)
 8010a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8010a0e:	0a5b      	lsrs	r3, r3, #9
 8010a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a14:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8010a18:	4623      	mov	r3, r4
 8010a1a:	1e5c      	subs	r4, r3, #1
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d102      	bne.n	8010a26 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010a20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010a24:	e02c      	b.n	8010a80 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a2a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d0f0      	beq.n	8010a18 <SDMMC_GetCmdResp7+0x1c>
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d1eb      	bne.n	8010a18 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a44:	f003 0304 	and.w	r3, r3, #4
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d004      	beq.n	8010a56 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	2204      	movs	r2, #4
 8010a50:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010a52:	2304      	movs	r3, #4
 8010a54:	e014      	b.n	8010a80 <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a5a:	f003 0301 	and.w	r3, r3, #1
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d004      	beq.n	8010a6c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	2201      	movs	r2, #1
 8010a66:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010a68:	2301      	movs	r3, #1
 8010a6a:	e009      	b.n	8010a80 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d002      	beq.n	8010a7e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	2240      	movs	r2, #64	; 0x40
 8010a7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010a7e:	2300      	movs	r3, #0

}
 8010a80:	4618      	mov	r0, r3
 8010a82:	3710      	adds	r7, #16
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bc90      	pop	{r4, r7}
 8010a88:	4770      	bx	lr
 8010a8a:	bf00      	nop
 8010a8c:	2400000c 	.word	0x2400000c
 8010a90:	10624dd3 	.word	0x10624dd3

08010a94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010a94:	b084      	sub	sp, #16
 8010a96:	b580      	push	{r7, lr}
 8010a98:	b084      	sub	sp, #16
 8010a9a:	af00      	add	r7, sp, #0
 8010a9c:	6078      	str	r0, [r7, #4]
 8010a9e:	f107 001c 	add.w	r0, r7, #28
 8010aa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aa8:	2b01      	cmp	r3, #1
 8010aaa:	d120      	bne.n	8010aee <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ab0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	68da      	ldr	r2, [r3, #12]
 8010abc:	4b25      	ldr	r3, [pc, #148]	; (8010b54 <USB_CoreInit+0xc0>)
 8010abe:	4013      	ands	r3, r2
 8010ac0:	687a      	ldr	r2, [r7, #4]
 8010ac2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	68db      	ldr	r3, [r3, #12]
 8010ac8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8010ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ad2:	2b01      	cmp	r3, #1
 8010ad4:	d105      	bne.n	8010ae2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	68db      	ldr	r3, [r3, #12]
 8010ada:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8010ae2:	6878      	ldr	r0, [r7, #4]
 8010ae4:	f001 fab4 	bl	8012050 <USB_CoreReset>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	73fb      	strb	r3, [r7, #15]
 8010aec:	e01a      	b.n	8010b24 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	68db      	ldr	r3, [r3, #12]
 8010af2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8010afa:	6878      	ldr	r0, [r7, #4]
 8010afc:	f001 faa8 	bl	8012050 <USB_CoreReset>
 8010b00:	4603      	mov	r3, r0
 8010b02:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8010b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d106      	bne.n	8010b18 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	639a      	str	r2, [r3, #56]	; 0x38
 8010b16:	e005      	b.n	8010b24 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8010b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b26:	2b01      	cmp	r3, #1
 8010b28:	d10b      	bne.n	8010b42 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	689b      	ldr	r3, [r3, #8]
 8010b2e:	f043 0206 	orr.w	r2, r3, #6
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	689b      	ldr	r3, [r3, #8]
 8010b3a:	f043 0220 	orr.w	r2, r3, #32
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8010b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b44:	4618      	mov	r0, r3
 8010b46:	3710      	adds	r7, #16
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010b4e:	b004      	add	sp, #16
 8010b50:	4770      	bx	lr
 8010b52:	bf00      	nop
 8010b54:	ffbdffbf 	.word	0xffbdffbf

08010b58 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8010b58:	b480      	push	{r7}
 8010b5a:	b087      	sub	sp, #28
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	60f8      	str	r0, [r7, #12]
 8010b60:	60b9      	str	r1, [r7, #8]
 8010b62:	4613      	mov	r3, r2
 8010b64:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8010b66:	79fb      	ldrb	r3, [r7, #7]
 8010b68:	2b02      	cmp	r3, #2
 8010b6a:	d165      	bne.n	8010c38 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8010b6c:	68bb      	ldr	r3, [r7, #8]
 8010b6e:	4a41      	ldr	r2, [pc, #260]	; (8010c74 <USB_SetTurnaroundTime+0x11c>)
 8010b70:	4293      	cmp	r3, r2
 8010b72:	d906      	bls.n	8010b82 <USB_SetTurnaroundTime+0x2a>
 8010b74:	68bb      	ldr	r3, [r7, #8]
 8010b76:	4a40      	ldr	r2, [pc, #256]	; (8010c78 <USB_SetTurnaroundTime+0x120>)
 8010b78:	4293      	cmp	r3, r2
 8010b7a:	d802      	bhi.n	8010b82 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8010b7c:	230f      	movs	r3, #15
 8010b7e:	617b      	str	r3, [r7, #20]
 8010b80:	e062      	b.n	8010c48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8010b82:	68bb      	ldr	r3, [r7, #8]
 8010b84:	4a3c      	ldr	r2, [pc, #240]	; (8010c78 <USB_SetTurnaroundTime+0x120>)
 8010b86:	4293      	cmp	r3, r2
 8010b88:	d906      	bls.n	8010b98 <USB_SetTurnaroundTime+0x40>
 8010b8a:	68bb      	ldr	r3, [r7, #8]
 8010b8c:	4a3b      	ldr	r2, [pc, #236]	; (8010c7c <USB_SetTurnaroundTime+0x124>)
 8010b8e:	4293      	cmp	r3, r2
 8010b90:	d802      	bhi.n	8010b98 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8010b92:	230e      	movs	r3, #14
 8010b94:	617b      	str	r3, [r7, #20]
 8010b96:	e057      	b.n	8010c48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8010b98:	68bb      	ldr	r3, [r7, #8]
 8010b9a:	4a38      	ldr	r2, [pc, #224]	; (8010c7c <USB_SetTurnaroundTime+0x124>)
 8010b9c:	4293      	cmp	r3, r2
 8010b9e:	d906      	bls.n	8010bae <USB_SetTurnaroundTime+0x56>
 8010ba0:	68bb      	ldr	r3, [r7, #8]
 8010ba2:	4a37      	ldr	r2, [pc, #220]	; (8010c80 <USB_SetTurnaroundTime+0x128>)
 8010ba4:	4293      	cmp	r3, r2
 8010ba6:	d802      	bhi.n	8010bae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8010ba8:	230d      	movs	r3, #13
 8010baa:	617b      	str	r3, [r7, #20]
 8010bac:	e04c      	b.n	8010c48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8010bae:	68bb      	ldr	r3, [r7, #8]
 8010bb0:	4a33      	ldr	r2, [pc, #204]	; (8010c80 <USB_SetTurnaroundTime+0x128>)
 8010bb2:	4293      	cmp	r3, r2
 8010bb4:	d906      	bls.n	8010bc4 <USB_SetTurnaroundTime+0x6c>
 8010bb6:	68bb      	ldr	r3, [r7, #8]
 8010bb8:	4a32      	ldr	r2, [pc, #200]	; (8010c84 <USB_SetTurnaroundTime+0x12c>)
 8010bba:	4293      	cmp	r3, r2
 8010bbc:	d802      	bhi.n	8010bc4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8010bbe:	230c      	movs	r3, #12
 8010bc0:	617b      	str	r3, [r7, #20]
 8010bc2:	e041      	b.n	8010c48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8010bc4:	68bb      	ldr	r3, [r7, #8]
 8010bc6:	4a2f      	ldr	r2, [pc, #188]	; (8010c84 <USB_SetTurnaroundTime+0x12c>)
 8010bc8:	4293      	cmp	r3, r2
 8010bca:	d906      	bls.n	8010bda <USB_SetTurnaroundTime+0x82>
 8010bcc:	68bb      	ldr	r3, [r7, #8]
 8010bce:	4a2e      	ldr	r2, [pc, #184]	; (8010c88 <USB_SetTurnaroundTime+0x130>)
 8010bd0:	4293      	cmp	r3, r2
 8010bd2:	d802      	bhi.n	8010bda <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8010bd4:	230b      	movs	r3, #11
 8010bd6:	617b      	str	r3, [r7, #20]
 8010bd8:	e036      	b.n	8010c48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8010bda:	68bb      	ldr	r3, [r7, #8]
 8010bdc:	4a2a      	ldr	r2, [pc, #168]	; (8010c88 <USB_SetTurnaroundTime+0x130>)
 8010bde:	4293      	cmp	r3, r2
 8010be0:	d906      	bls.n	8010bf0 <USB_SetTurnaroundTime+0x98>
 8010be2:	68bb      	ldr	r3, [r7, #8]
 8010be4:	4a29      	ldr	r2, [pc, #164]	; (8010c8c <USB_SetTurnaroundTime+0x134>)
 8010be6:	4293      	cmp	r3, r2
 8010be8:	d802      	bhi.n	8010bf0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8010bea:	230a      	movs	r3, #10
 8010bec:	617b      	str	r3, [r7, #20]
 8010bee:	e02b      	b.n	8010c48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8010bf0:	68bb      	ldr	r3, [r7, #8]
 8010bf2:	4a26      	ldr	r2, [pc, #152]	; (8010c8c <USB_SetTurnaroundTime+0x134>)
 8010bf4:	4293      	cmp	r3, r2
 8010bf6:	d906      	bls.n	8010c06 <USB_SetTurnaroundTime+0xae>
 8010bf8:	68bb      	ldr	r3, [r7, #8]
 8010bfa:	4a25      	ldr	r2, [pc, #148]	; (8010c90 <USB_SetTurnaroundTime+0x138>)
 8010bfc:	4293      	cmp	r3, r2
 8010bfe:	d802      	bhi.n	8010c06 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8010c00:	2309      	movs	r3, #9
 8010c02:	617b      	str	r3, [r7, #20]
 8010c04:	e020      	b.n	8010c48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8010c06:	68bb      	ldr	r3, [r7, #8]
 8010c08:	4a21      	ldr	r2, [pc, #132]	; (8010c90 <USB_SetTurnaroundTime+0x138>)
 8010c0a:	4293      	cmp	r3, r2
 8010c0c:	d906      	bls.n	8010c1c <USB_SetTurnaroundTime+0xc4>
 8010c0e:	68bb      	ldr	r3, [r7, #8]
 8010c10:	4a20      	ldr	r2, [pc, #128]	; (8010c94 <USB_SetTurnaroundTime+0x13c>)
 8010c12:	4293      	cmp	r3, r2
 8010c14:	d802      	bhi.n	8010c1c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8010c16:	2308      	movs	r3, #8
 8010c18:	617b      	str	r3, [r7, #20]
 8010c1a:	e015      	b.n	8010c48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8010c1c:	68bb      	ldr	r3, [r7, #8]
 8010c1e:	4a1d      	ldr	r2, [pc, #116]	; (8010c94 <USB_SetTurnaroundTime+0x13c>)
 8010c20:	4293      	cmp	r3, r2
 8010c22:	d906      	bls.n	8010c32 <USB_SetTurnaroundTime+0xda>
 8010c24:	68bb      	ldr	r3, [r7, #8]
 8010c26:	4a1c      	ldr	r2, [pc, #112]	; (8010c98 <USB_SetTurnaroundTime+0x140>)
 8010c28:	4293      	cmp	r3, r2
 8010c2a:	d802      	bhi.n	8010c32 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8010c2c:	2307      	movs	r3, #7
 8010c2e:	617b      	str	r3, [r7, #20]
 8010c30:	e00a      	b.n	8010c48 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8010c32:	2306      	movs	r3, #6
 8010c34:	617b      	str	r3, [r7, #20]
 8010c36:	e007      	b.n	8010c48 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8010c38:	79fb      	ldrb	r3, [r7, #7]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d102      	bne.n	8010c44 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8010c3e:	2309      	movs	r3, #9
 8010c40:	617b      	str	r3, [r7, #20]
 8010c42:	e001      	b.n	8010c48 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8010c44:	2309      	movs	r3, #9
 8010c46:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	68db      	ldr	r3, [r3, #12]
 8010c4c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	68da      	ldr	r2, [r3, #12]
 8010c58:	697b      	ldr	r3, [r7, #20]
 8010c5a:	029b      	lsls	r3, r3, #10
 8010c5c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8010c60:	431a      	orrs	r2, r3
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010c66:	2300      	movs	r3, #0
}
 8010c68:	4618      	mov	r0, r3
 8010c6a:	371c      	adds	r7, #28
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c72:	4770      	bx	lr
 8010c74:	00d8acbf 	.word	0x00d8acbf
 8010c78:	00e4e1bf 	.word	0x00e4e1bf
 8010c7c:	00f423ff 	.word	0x00f423ff
 8010c80:	0106737f 	.word	0x0106737f
 8010c84:	011a499f 	.word	0x011a499f
 8010c88:	01312cff 	.word	0x01312cff
 8010c8c:	014ca43f 	.word	0x014ca43f
 8010c90:	016e35ff 	.word	0x016e35ff
 8010c94:	01a6ab1f 	.word	0x01a6ab1f
 8010c98:	01e847ff 	.word	0x01e847ff

08010c9c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010c9c:	b480      	push	{r7}
 8010c9e:	b083      	sub	sp, #12
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	689b      	ldr	r3, [r3, #8]
 8010ca8:	f043 0201 	orr.w	r2, r3, #1
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010cb0:	2300      	movs	r3, #0
}
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	370c      	adds	r7, #12
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cbc:	4770      	bx	lr

08010cbe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010cbe:	b480      	push	{r7}
 8010cc0:	b083      	sub	sp, #12
 8010cc2:	af00      	add	r7, sp, #0
 8010cc4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	689b      	ldr	r3, [r3, #8]
 8010cca:	f023 0201 	bic.w	r2, r3, #1
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010cd2:	2300      	movs	r3, #0
}
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	370c      	adds	r7, #12
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cde:	4770      	bx	lr

08010ce0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b082      	sub	sp, #8
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
 8010ce8:	460b      	mov	r3, r1
 8010cea:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	68db      	ldr	r3, [r3, #12]
 8010cf0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010cf8:	78fb      	ldrb	r3, [r7, #3]
 8010cfa:	2b01      	cmp	r3, #1
 8010cfc:	d106      	bne.n	8010d0c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	68db      	ldr	r3, [r3, #12]
 8010d02:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	60da      	str	r2, [r3, #12]
 8010d0a:	e00b      	b.n	8010d24 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8010d0c:	78fb      	ldrb	r3, [r7, #3]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d106      	bne.n	8010d20 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	68db      	ldr	r3, [r3, #12]
 8010d16:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	60da      	str	r2, [r3, #12]
 8010d1e:	e001      	b.n	8010d24 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8010d20:	2301      	movs	r3, #1
 8010d22:	e003      	b.n	8010d2c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8010d24:	2032      	movs	r0, #50	; 0x32
 8010d26:	f7f0 ff17 	bl	8001b58 <HAL_Delay>

  return HAL_OK;
 8010d2a:	2300      	movs	r3, #0
}
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	3708      	adds	r7, #8
 8010d30:	46bd      	mov	sp, r7
 8010d32:	bd80      	pop	{r7, pc}

08010d34 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010d34:	b084      	sub	sp, #16
 8010d36:	b580      	push	{r7, lr}
 8010d38:	b086      	sub	sp, #24
 8010d3a:	af00      	add	r7, sp, #0
 8010d3c:	6078      	str	r0, [r7, #4]
 8010d3e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010d42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010d46:	2300      	movs	r3, #0
 8010d48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8010d4e:	2300      	movs	r3, #0
 8010d50:	613b      	str	r3, [r7, #16]
 8010d52:	e009      	b.n	8010d68 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010d54:	687a      	ldr	r2, [r7, #4]
 8010d56:	693b      	ldr	r3, [r7, #16]
 8010d58:	3340      	adds	r3, #64	; 0x40
 8010d5a:	009b      	lsls	r3, r3, #2
 8010d5c:	4413      	add	r3, r2
 8010d5e:	2200      	movs	r2, #0
 8010d60:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8010d62:	693b      	ldr	r3, [r7, #16]
 8010d64:	3301      	adds	r3, #1
 8010d66:	613b      	str	r3, [r7, #16]
 8010d68:	693b      	ldr	r3, [r7, #16]
 8010d6a:	2b0e      	cmp	r3, #14
 8010d6c:	d9f2      	bls.n	8010d54 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d11c      	bne.n	8010dae <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d7a:	685b      	ldr	r3, [r3, #4]
 8010d7c:	68fa      	ldr	r2, [r7, #12]
 8010d7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010d82:	f043 0302 	orr.w	r3, r3, #2
 8010d86:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d8c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	601a      	str	r2, [r3, #0]
 8010dac:	e005      	b.n	8010dba <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010db2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010dc0:	461a      	mov	r2, r3
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010dcc:	4619      	mov	r1, r3
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010dd4:	461a      	mov	r2, r3
 8010dd6:	680b      	ldr	r3, [r1, #0]
 8010dd8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ddc:	2b01      	cmp	r3, #1
 8010dde:	d10c      	bne.n	8010dfa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d104      	bne.n	8010df0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8010de6:	2100      	movs	r1, #0
 8010de8:	6878      	ldr	r0, [r7, #4]
 8010dea:	f000 f949 	bl	8011080 <USB_SetDevSpeed>
 8010dee:	e008      	b.n	8010e02 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8010df0:	2101      	movs	r1, #1
 8010df2:	6878      	ldr	r0, [r7, #4]
 8010df4:	f000 f944 	bl	8011080 <USB_SetDevSpeed>
 8010df8:	e003      	b.n	8010e02 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010dfa:	2103      	movs	r1, #3
 8010dfc:	6878      	ldr	r0, [r7, #4]
 8010dfe:	f000 f93f 	bl	8011080 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010e02:	2110      	movs	r1, #16
 8010e04:	6878      	ldr	r0, [r7, #4]
 8010e06:	f000 f8f3 	bl	8010ff0 <USB_FlushTxFifo>
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d001      	beq.n	8010e14 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8010e10:	2301      	movs	r3, #1
 8010e12:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010e14:	6878      	ldr	r0, [r7, #4]
 8010e16:	f000 f911 	bl	801103c <USB_FlushRxFifo>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d001      	beq.n	8010e24 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8010e20:	2301      	movs	r3, #1
 8010e22:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e2a:	461a      	mov	r2, r3
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e36:	461a      	mov	r2, r3
 8010e38:	2300      	movs	r3, #0
 8010e3a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e42:	461a      	mov	r2, r3
 8010e44:	2300      	movs	r3, #0
 8010e46:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010e48:	2300      	movs	r3, #0
 8010e4a:	613b      	str	r3, [r7, #16]
 8010e4c:	e043      	b.n	8010ed6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010e4e:	693b      	ldr	r3, [r7, #16]
 8010e50:	015a      	lsls	r2, r3, #5
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	4413      	add	r3, r2
 8010e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010e60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010e64:	d118      	bne.n	8010e98 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8010e66:	693b      	ldr	r3, [r7, #16]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d10a      	bne.n	8010e82 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010e6c:	693b      	ldr	r3, [r7, #16]
 8010e6e:	015a      	lsls	r2, r3, #5
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	4413      	add	r3, r2
 8010e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e78:	461a      	mov	r2, r3
 8010e7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010e7e:	6013      	str	r3, [r2, #0]
 8010e80:	e013      	b.n	8010eaa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010e82:	693b      	ldr	r3, [r7, #16]
 8010e84:	015a      	lsls	r2, r3, #5
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	4413      	add	r3, r2
 8010e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e8e:	461a      	mov	r2, r3
 8010e90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010e94:	6013      	str	r3, [r2, #0]
 8010e96:	e008      	b.n	8010eaa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010e98:	693b      	ldr	r3, [r7, #16]
 8010e9a:	015a      	lsls	r2, r3, #5
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	4413      	add	r3, r2
 8010ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ea4:	461a      	mov	r2, r3
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010eaa:	693b      	ldr	r3, [r7, #16]
 8010eac:	015a      	lsls	r2, r3, #5
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	4413      	add	r3, r2
 8010eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010eb6:	461a      	mov	r2, r3
 8010eb8:	2300      	movs	r3, #0
 8010eba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010ebc:	693b      	ldr	r3, [r7, #16]
 8010ebe:	015a      	lsls	r2, r3, #5
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	4413      	add	r3, r2
 8010ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ec8:	461a      	mov	r2, r3
 8010eca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010ece:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010ed0:	693b      	ldr	r3, [r7, #16]
 8010ed2:	3301      	adds	r3, #1
 8010ed4:	613b      	str	r3, [r7, #16]
 8010ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ed8:	693a      	ldr	r2, [r7, #16]
 8010eda:	429a      	cmp	r2, r3
 8010edc:	d3b7      	bcc.n	8010e4e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010ede:	2300      	movs	r3, #0
 8010ee0:	613b      	str	r3, [r7, #16]
 8010ee2:	e043      	b.n	8010f6c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010ee4:	693b      	ldr	r3, [r7, #16]
 8010ee6:	015a      	lsls	r2, r3, #5
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	4413      	add	r3, r2
 8010eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010ef6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010efa:	d118      	bne.n	8010f2e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8010efc:	693b      	ldr	r3, [r7, #16]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d10a      	bne.n	8010f18 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010f02:	693b      	ldr	r3, [r7, #16]
 8010f04:	015a      	lsls	r2, r3, #5
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	4413      	add	r3, r2
 8010f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f0e:	461a      	mov	r2, r3
 8010f10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010f14:	6013      	str	r3, [r2, #0]
 8010f16:	e013      	b.n	8010f40 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010f18:	693b      	ldr	r3, [r7, #16]
 8010f1a:	015a      	lsls	r2, r3, #5
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	4413      	add	r3, r2
 8010f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f24:	461a      	mov	r2, r3
 8010f26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010f2a:	6013      	str	r3, [r2, #0]
 8010f2c:	e008      	b.n	8010f40 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8010f2e:	693b      	ldr	r3, [r7, #16]
 8010f30:	015a      	lsls	r2, r3, #5
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	4413      	add	r3, r2
 8010f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f3a:	461a      	mov	r2, r3
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8010f40:	693b      	ldr	r3, [r7, #16]
 8010f42:	015a      	lsls	r2, r3, #5
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	4413      	add	r3, r2
 8010f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f4c:	461a      	mov	r2, r3
 8010f4e:	2300      	movs	r3, #0
 8010f50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8010f52:	693b      	ldr	r3, [r7, #16]
 8010f54:	015a      	lsls	r2, r3, #5
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	4413      	add	r3, r2
 8010f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f5e:	461a      	mov	r2, r3
 8010f60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010f64:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010f66:	693b      	ldr	r3, [r7, #16]
 8010f68:	3301      	adds	r3, #1
 8010f6a:	613b      	str	r3, [r7, #16]
 8010f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f6e:	693a      	ldr	r2, [r7, #16]
 8010f70:	429a      	cmp	r2, r3
 8010f72:	d3b7      	bcc.n	8010ee4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f7a:	691b      	ldr	r3, [r3, #16]
 8010f7c:	68fa      	ldr	r2, [r7, #12]
 8010f7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010f82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010f86:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	2200      	movs	r2, #0
 8010f8c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8010f94:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8010f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d105      	bne.n	8010fa8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	699b      	ldr	r3, [r3, #24]
 8010fa0:	f043 0210 	orr.w	r2, r3, #16
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	699a      	ldr	r2, [r3, #24]
 8010fac:	4b0e      	ldr	r3, [pc, #56]	; (8010fe8 <USB_DevInit+0x2b4>)
 8010fae:	4313      	orrs	r3, r2
 8010fb0:	687a      	ldr	r2, [r7, #4]
 8010fb2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8010fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d005      	beq.n	8010fc6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	699b      	ldr	r3, [r3, #24]
 8010fbe:	f043 0208 	orr.w	r2, r3, #8
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8010fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010fc8:	2b01      	cmp	r3, #1
 8010fca:	d105      	bne.n	8010fd8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	699a      	ldr	r2, [r3, #24]
 8010fd0:	4b06      	ldr	r3, [pc, #24]	; (8010fec <USB_DevInit+0x2b8>)
 8010fd2:	4313      	orrs	r3, r2
 8010fd4:	687a      	ldr	r2, [r7, #4]
 8010fd6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8010fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010fda:	4618      	mov	r0, r3
 8010fdc:	3718      	adds	r7, #24
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010fe4:	b004      	add	sp, #16
 8010fe6:	4770      	bx	lr
 8010fe8:	803c3800 	.word	0x803c3800
 8010fec:	40000004 	.word	0x40000004

08010ff0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010ff0:	b480      	push	{r7}
 8010ff2:	b085      	sub	sp, #20
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	6078      	str	r0, [r7, #4]
 8010ff8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010ffe:	683b      	ldr	r3, [r7, #0]
 8011000:	019b      	lsls	r3, r3, #6
 8011002:	f043 0220 	orr.w	r2, r3, #32
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	3301      	adds	r3, #1
 801100e:	60fb      	str	r3, [r7, #12]
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	4a09      	ldr	r2, [pc, #36]	; (8011038 <USB_FlushTxFifo+0x48>)
 8011014:	4293      	cmp	r3, r2
 8011016:	d901      	bls.n	801101c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8011018:	2303      	movs	r3, #3
 801101a:	e006      	b.n	801102a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	691b      	ldr	r3, [r3, #16]
 8011020:	f003 0320 	and.w	r3, r3, #32
 8011024:	2b20      	cmp	r3, #32
 8011026:	d0f0      	beq.n	801100a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8011028:	2300      	movs	r3, #0
}
 801102a:	4618      	mov	r0, r3
 801102c:	3714      	adds	r7, #20
 801102e:	46bd      	mov	sp, r7
 8011030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011034:	4770      	bx	lr
 8011036:	bf00      	nop
 8011038:	00030d40 	.word	0x00030d40

0801103c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801103c:	b480      	push	{r7}
 801103e:	b085      	sub	sp, #20
 8011040:	af00      	add	r7, sp, #0
 8011042:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8011044:	2300      	movs	r3, #0
 8011046:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	2210      	movs	r2, #16
 801104c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	3301      	adds	r3, #1
 8011052:	60fb      	str	r3, [r7, #12]
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	4a09      	ldr	r2, [pc, #36]	; (801107c <USB_FlushRxFifo+0x40>)
 8011058:	4293      	cmp	r3, r2
 801105a:	d901      	bls.n	8011060 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 801105c:	2303      	movs	r3, #3
 801105e:	e006      	b.n	801106e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	691b      	ldr	r3, [r3, #16]
 8011064:	f003 0310 	and.w	r3, r3, #16
 8011068:	2b10      	cmp	r3, #16
 801106a:	d0f0      	beq.n	801104e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 801106c:	2300      	movs	r3, #0
}
 801106e:	4618      	mov	r0, r3
 8011070:	3714      	adds	r7, #20
 8011072:	46bd      	mov	sp, r7
 8011074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011078:	4770      	bx	lr
 801107a:	bf00      	nop
 801107c:	00030d40 	.word	0x00030d40

08011080 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8011080:	b480      	push	{r7}
 8011082:	b085      	sub	sp, #20
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]
 8011088:	460b      	mov	r3, r1
 801108a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011096:	681a      	ldr	r2, [r3, #0]
 8011098:	78fb      	ldrb	r3, [r7, #3]
 801109a:	68f9      	ldr	r1, [r7, #12]
 801109c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80110a0:	4313      	orrs	r3, r2
 80110a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80110a4:	2300      	movs	r3, #0
}
 80110a6:	4618      	mov	r0, r3
 80110a8:	3714      	adds	r7, #20
 80110aa:	46bd      	mov	sp, r7
 80110ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b0:	4770      	bx	lr

080110b2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80110b2:	b480      	push	{r7}
 80110b4:	b087      	sub	sp, #28
 80110b6:	af00      	add	r7, sp, #0
 80110b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80110be:	693b      	ldr	r3, [r7, #16]
 80110c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80110c4:	689b      	ldr	r3, [r3, #8]
 80110c6:	f003 0306 	and.w	r3, r3, #6
 80110ca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d102      	bne.n	80110d8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80110d2:	2300      	movs	r3, #0
 80110d4:	75fb      	strb	r3, [r7, #23]
 80110d6:	e00a      	b.n	80110ee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	2b02      	cmp	r3, #2
 80110dc:	d002      	beq.n	80110e4 <USB_GetDevSpeed+0x32>
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	2b06      	cmp	r3, #6
 80110e2:	d102      	bne.n	80110ea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80110e4:	2302      	movs	r3, #2
 80110e6:	75fb      	strb	r3, [r7, #23]
 80110e8:	e001      	b.n	80110ee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80110ea:	230f      	movs	r3, #15
 80110ec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80110ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80110f0:	4618      	mov	r0, r3
 80110f2:	371c      	adds	r7, #28
 80110f4:	46bd      	mov	sp, r7
 80110f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fa:	4770      	bx	lr

080110fc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80110fc:	b480      	push	{r7}
 80110fe:	b085      	sub	sp, #20
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
 8011104:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801110a:	683b      	ldr	r3, [r7, #0]
 801110c:	781b      	ldrb	r3, [r3, #0]
 801110e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011110:	683b      	ldr	r3, [r7, #0]
 8011112:	785b      	ldrb	r3, [r3, #1]
 8011114:	2b01      	cmp	r3, #1
 8011116:	d139      	bne.n	801118c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801111e:	69da      	ldr	r2, [r3, #28]
 8011120:	683b      	ldr	r3, [r7, #0]
 8011122:	781b      	ldrb	r3, [r3, #0]
 8011124:	f003 030f 	and.w	r3, r3, #15
 8011128:	2101      	movs	r1, #1
 801112a:	fa01 f303 	lsl.w	r3, r1, r3
 801112e:	b29b      	uxth	r3, r3
 8011130:	68f9      	ldr	r1, [r7, #12]
 8011132:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011136:	4313      	orrs	r3, r2
 8011138:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801113a:	68bb      	ldr	r3, [r7, #8]
 801113c:	015a      	lsls	r2, r3, #5
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	4413      	add	r3, r2
 8011142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801114c:	2b00      	cmp	r3, #0
 801114e:	d153      	bne.n	80111f8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011150:	68bb      	ldr	r3, [r7, #8]
 8011152:	015a      	lsls	r2, r3, #5
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	4413      	add	r3, r2
 8011158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801115c:	681a      	ldr	r2, [r3, #0]
 801115e:	683b      	ldr	r3, [r7, #0]
 8011160:	689b      	ldr	r3, [r3, #8]
 8011162:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011166:	683b      	ldr	r3, [r7, #0]
 8011168:	78db      	ldrb	r3, [r3, #3]
 801116a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801116c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801116e:	68bb      	ldr	r3, [r7, #8]
 8011170:	059b      	lsls	r3, r3, #22
 8011172:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011174:	431a      	orrs	r2, r3
 8011176:	68bb      	ldr	r3, [r7, #8]
 8011178:	0159      	lsls	r1, r3, #5
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	440b      	add	r3, r1
 801117e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011182:	4619      	mov	r1, r3
 8011184:	4b20      	ldr	r3, [pc, #128]	; (8011208 <USB_ActivateEndpoint+0x10c>)
 8011186:	4313      	orrs	r3, r2
 8011188:	600b      	str	r3, [r1, #0]
 801118a:	e035      	b.n	80111f8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011192:	69da      	ldr	r2, [r3, #28]
 8011194:	683b      	ldr	r3, [r7, #0]
 8011196:	781b      	ldrb	r3, [r3, #0]
 8011198:	f003 030f 	and.w	r3, r3, #15
 801119c:	2101      	movs	r1, #1
 801119e:	fa01 f303 	lsl.w	r3, r1, r3
 80111a2:	041b      	lsls	r3, r3, #16
 80111a4:	68f9      	ldr	r1, [r7, #12]
 80111a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80111aa:	4313      	orrs	r3, r2
 80111ac:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80111ae:	68bb      	ldr	r3, [r7, #8]
 80111b0:	015a      	lsls	r2, r3, #5
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	4413      	add	r3, r2
 80111b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d119      	bne.n	80111f8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80111c4:	68bb      	ldr	r3, [r7, #8]
 80111c6:	015a      	lsls	r2, r3, #5
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	4413      	add	r3, r2
 80111cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80111d0:	681a      	ldr	r2, [r3, #0]
 80111d2:	683b      	ldr	r3, [r7, #0]
 80111d4:	689b      	ldr	r3, [r3, #8]
 80111d6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80111da:	683b      	ldr	r3, [r7, #0]
 80111dc:	78db      	ldrb	r3, [r3, #3]
 80111de:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80111e0:	430b      	orrs	r3, r1
 80111e2:	431a      	orrs	r2, r3
 80111e4:	68bb      	ldr	r3, [r7, #8]
 80111e6:	0159      	lsls	r1, r3, #5
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	440b      	add	r3, r1
 80111ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80111f0:	4619      	mov	r1, r3
 80111f2:	4b05      	ldr	r3, [pc, #20]	; (8011208 <USB_ActivateEndpoint+0x10c>)
 80111f4:	4313      	orrs	r3, r2
 80111f6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80111f8:	2300      	movs	r3, #0
}
 80111fa:	4618      	mov	r0, r3
 80111fc:	3714      	adds	r7, #20
 80111fe:	46bd      	mov	sp, r7
 8011200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011204:	4770      	bx	lr
 8011206:	bf00      	nop
 8011208:	10008000 	.word	0x10008000

0801120c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801120c:	b480      	push	{r7}
 801120e:	b085      	sub	sp, #20
 8011210:	af00      	add	r7, sp, #0
 8011212:	6078      	str	r0, [r7, #4]
 8011214:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801121a:	683b      	ldr	r3, [r7, #0]
 801121c:	781b      	ldrb	r3, [r3, #0]
 801121e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	785b      	ldrb	r3, [r3, #1]
 8011224:	2b01      	cmp	r3, #1
 8011226:	d135      	bne.n	8011294 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801122e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011230:	683b      	ldr	r3, [r7, #0]
 8011232:	781b      	ldrb	r3, [r3, #0]
 8011234:	f003 030f 	and.w	r3, r3, #15
 8011238:	2101      	movs	r1, #1
 801123a:	fa01 f303 	lsl.w	r3, r1, r3
 801123e:	b29b      	uxth	r3, r3
 8011240:	43db      	mvns	r3, r3
 8011242:	68f9      	ldr	r1, [r7, #12]
 8011244:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011248:	4013      	ands	r3, r2
 801124a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011252:	69da      	ldr	r2, [r3, #28]
 8011254:	683b      	ldr	r3, [r7, #0]
 8011256:	781b      	ldrb	r3, [r3, #0]
 8011258:	f003 030f 	and.w	r3, r3, #15
 801125c:	2101      	movs	r1, #1
 801125e:	fa01 f303 	lsl.w	r3, r1, r3
 8011262:	b29b      	uxth	r3, r3
 8011264:	43db      	mvns	r3, r3
 8011266:	68f9      	ldr	r1, [r7, #12]
 8011268:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801126c:	4013      	ands	r3, r2
 801126e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8011270:	68bb      	ldr	r3, [r7, #8]
 8011272:	015a      	lsls	r2, r3, #5
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	4413      	add	r3, r2
 8011278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801127c:	681a      	ldr	r2, [r3, #0]
 801127e:	68bb      	ldr	r3, [r7, #8]
 8011280:	0159      	lsls	r1, r3, #5
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	440b      	add	r3, r1
 8011286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801128a:	4619      	mov	r1, r3
 801128c:	4b1f      	ldr	r3, [pc, #124]	; (801130c <USB_DeactivateEndpoint+0x100>)
 801128e:	4013      	ands	r3, r2
 8011290:	600b      	str	r3, [r1, #0]
 8011292:	e034      	b.n	80112fe <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801129a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801129c:	683b      	ldr	r3, [r7, #0]
 801129e:	781b      	ldrb	r3, [r3, #0]
 80112a0:	f003 030f 	and.w	r3, r3, #15
 80112a4:	2101      	movs	r1, #1
 80112a6:	fa01 f303 	lsl.w	r3, r1, r3
 80112aa:	041b      	lsls	r3, r3, #16
 80112ac:	43db      	mvns	r3, r3
 80112ae:	68f9      	ldr	r1, [r7, #12]
 80112b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80112b4:	4013      	ands	r3, r2
 80112b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80112be:	69da      	ldr	r2, [r3, #28]
 80112c0:	683b      	ldr	r3, [r7, #0]
 80112c2:	781b      	ldrb	r3, [r3, #0]
 80112c4:	f003 030f 	and.w	r3, r3, #15
 80112c8:	2101      	movs	r1, #1
 80112ca:	fa01 f303 	lsl.w	r3, r1, r3
 80112ce:	041b      	lsls	r3, r3, #16
 80112d0:	43db      	mvns	r3, r3
 80112d2:	68f9      	ldr	r1, [r7, #12]
 80112d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80112d8:	4013      	ands	r3, r2
 80112da:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80112dc:	68bb      	ldr	r3, [r7, #8]
 80112de:	015a      	lsls	r2, r3, #5
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	4413      	add	r3, r2
 80112e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80112e8:	681a      	ldr	r2, [r3, #0]
 80112ea:	68bb      	ldr	r3, [r7, #8]
 80112ec:	0159      	lsls	r1, r3, #5
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	440b      	add	r3, r1
 80112f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80112f6:	4619      	mov	r1, r3
 80112f8:	4b05      	ldr	r3, [pc, #20]	; (8011310 <USB_DeactivateEndpoint+0x104>)
 80112fa:	4013      	ands	r3, r2
 80112fc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80112fe:	2300      	movs	r3, #0
}
 8011300:	4618      	mov	r0, r3
 8011302:	3714      	adds	r7, #20
 8011304:	46bd      	mov	sp, r7
 8011306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801130a:	4770      	bx	lr
 801130c:	ec337800 	.word	0xec337800
 8011310:	eff37800 	.word	0xeff37800

08011314 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b08a      	sub	sp, #40	; 0x28
 8011318:	af02      	add	r7, sp, #8
 801131a:	60f8      	str	r0, [r7, #12]
 801131c:	60b9      	str	r1, [r7, #8]
 801131e:	4613      	mov	r3, r2
 8011320:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8011326:	68bb      	ldr	r3, [r7, #8]
 8011328:	781b      	ldrb	r3, [r3, #0]
 801132a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801132c:	68bb      	ldr	r3, [r7, #8]
 801132e:	785b      	ldrb	r3, [r3, #1]
 8011330:	2b01      	cmp	r3, #1
 8011332:	f040 8163 	bne.w	80115fc <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011336:	68bb      	ldr	r3, [r7, #8]
 8011338:	695b      	ldr	r3, [r3, #20]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d132      	bne.n	80113a4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801133e:	69bb      	ldr	r3, [r7, #24]
 8011340:	015a      	lsls	r2, r3, #5
 8011342:	69fb      	ldr	r3, [r7, #28]
 8011344:	4413      	add	r3, r2
 8011346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801134a:	691a      	ldr	r2, [r3, #16]
 801134c:	69bb      	ldr	r3, [r7, #24]
 801134e:	0159      	lsls	r1, r3, #5
 8011350:	69fb      	ldr	r3, [r7, #28]
 8011352:	440b      	add	r3, r1
 8011354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011358:	4619      	mov	r1, r3
 801135a:	4ba5      	ldr	r3, [pc, #660]	; (80115f0 <USB_EPStartXfer+0x2dc>)
 801135c:	4013      	ands	r3, r2
 801135e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011360:	69bb      	ldr	r3, [r7, #24]
 8011362:	015a      	lsls	r2, r3, #5
 8011364:	69fb      	ldr	r3, [r7, #28]
 8011366:	4413      	add	r3, r2
 8011368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801136c:	691b      	ldr	r3, [r3, #16]
 801136e:	69ba      	ldr	r2, [r7, #24]
 8011370:	0151      	lsls	r1, r2, #5
 8011372:	69fa      	ldr	r2, [r7, #28]
 8011374:	440a      	add	r2, r1
 8011376:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801137a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801137e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011380:	69bb      	ldr	r3, [r7, #24]
 8011382:	015a      	lsls	r2, r3, #5
 8011384:	69fb      	ldr	r3, [r7, #28]
 8011386:	4413      	add	r3, r2
 8011388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801138c:	691a      	ldr	r2, [r3, #16]
 801138e:	69bb      	ldr	r3, [r7, #24]
 8011390:	0159      	lsls	r1, r3, #5
 8011392:	69fb      	ldr	r3, [r7, #28]
 8011394:	440b      	add	r3, r1
 8011396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801139a:	4619      	mov	r1, r3
 801139c:	4b95      	ldr	r3, [pc, #596]	; (80115f4 <USB_EPStartXfer+0x2e0>)
 801139e:	4013      	ands	r3, r2
 80113a0:	610b      	str	r3, [r1, #16]
 80113a2:	e074      	b.n	801148e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80113a4:	69bb      	ldr	r3, [r7, #24]
 80113a6:	015a      	lsls	r2, r3, #5
 80113a8:	69fb      	ldr	r3, [r7, #28]
 80113aa:	4413      	add	r3, r2
 80113ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80113b0:	691a      	ldr	r2, [r3, #16]
 80113b2:	69bb      	ldr	r3, [r7, #24]
 80113b4:	0159      	lsls	r1, r3, #5
 80113b6:	69fb      	ldr	r3, [r7, #28]
 80113b8:	440b      	add	r3, r1
 80113ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80113be:	4619      	mov	r1, r3
 80113c0:	4b8c      	ldr	r3, [pc, #560]	; (80115f4 <USB_EPStartXfer+0x2e0>)
 80113c2:	4013      	ands	r3, r2
 80113c4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80113c6:	69bb      	ldr	r3, [r7, #24]
 80113c8:	015a      	lsls	r2, r3, #5
 80113ca:	69fb      	ldr	r3, [r7, #28]
 80113cc:	4413      	add	r3, r2
 80113ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80113d2:	691a      	ldr	r2, [r3, #16]
 80113d4:	69bb      	ldr	r3, [r7, #24]
 80113d6:	0159      	lsls	r1, r3, #5
 80113d8:	69fb      	ldr	r3, [r7, #28]
 80113da:	440b      	add	r3, r1
 80113dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80113e0:	4619      	mov	r1, r3
 80113e2:	4b83      	ldr	r3, [pc, #524]	; (80115f0 <USB_EPStartXfer+0x2dc>)
 80113e4:	4013      	ands	r3, r2
 80113e6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80113e8:	69bb      	ldr	r3, [r7, #24]
 80113ea:	015a      	lsls	r2, r3, #5
 80113ec:	69fb      	ldr	r3, [r7, #28]
 80113ee:	4413      	add	r3, r2
 80113f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80113f4:	691a      	ldr	r2, [r3, #16]
 80113f6:	68bb      	ldr	r3, [r7, #8]
 80113f8:	6959      	ldr	r1, [r3, #20]
 80113fa:	68bb      	ldr	r3, [r7, #8]
 80113fc:	689b      	ldr	r3, [r3, #8]
 80113fe:	440b      	add	r3, r1
 8011400:	1e59      	subs	r1, r3, #1
 8011402:	68bb      	ldr	r3, [r7, #8]
 8011404:	689b      	ldr	r3, [r3, #8]
 8011406:	fbb1 f3f3 	udiv	r3, r1, r3
 801140a:	04d9      	lsls	r1, r3, #19
 801140c:	4b7a      	ldr	r3, [pc, #488]	; (80115f8 <USB_EPStartXfer+0x2e4>)
 801140e:	400b      	ands	r3, r1
 8011410:	69b9      	ldr	r1, [r7, #24]
 8011412:	0148      	lsls	r0, r1, #5
 8011414:	69f9      	ldr	r1, [r7, #28]
 8011416:	4401      	add	r1, r0
 8011418:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801141c:	4313      	orrs	r3, r2
 801141e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011420:	69bb      	ldr	r3, [r7, #24]
 8011422:	015a      	lsls	r2, r3, #5
 8011424:	69fb      	ldr	r3, [r7, #28]
 8011426:	4413      	add	r3, r2
 8011428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801142c:	691a      	ldr	r2, [r3, #16]
 801142e:	68bb      	ldr	r3, [r7, #8]
 8011430:	695b      	ldr	r3, [r3, #20]
 8011432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011436:	69b9      	ldr	r1, [r7, #24]
 8011438:	0148      	lsls	r0, r1, #5
 801143a:	69f9      	ldr	r1, [r7, #28]
 801143c:	4401      	add	r1, r0
 801143e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011442:	4313      	orrs	r3, r2
 8011444:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8011446:	68bb      	ldr	r3, [r7, #8]
 8011448:	78db      	ldrb	r3, [r3, #3]
 801144a:	2b01      	cmp	r3, #1
 801144c:	d11f      	bne.n	801148e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801144e:	69bb      	ldr	r3, [r7, #24]
 8011450:	015a      	lsls	r2, r3, #5
 8011452:	69fb      	ldr	r3, [r7, #28]
 8011454:	4413      	add	r3, r2
 8011456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801145a:	691b      	ldr	r3, [r3, #16]
 801145c:	69ba      	ldr	r2, [r7, #24]
 801145e:	0151      	lsls	r1, r2, #5
 8011460:	69fa      	ldr	r2, [r7, #28]
 8011462:	440a      	add	r2, r1
 8011464:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011468:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801146c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801146e:	69bb      	ldr	r3, [r7, #24]
 8011470:	015a      	lsls	r2, r3, #5
 8011472:	69fb      	ldr	r3, [r7, #28]
 8011474:	4413      	add	r3, r2
 8011476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801147a:	691b      	ldr	r3, [r3, #16]
 801147c:	69ba      	ldr	r2, [r7, #24]
 801147e:	0151      	lsls	r1, r2, #5
 8011480:	69fa      	ldr	r2, [r7, #28]
 8011482:	440a      	add	r2, r1
 8011484:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011488:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801148c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801148e:	79fb      	ldrb	r3, [r7, #7]
 8011490:	2b01      	cmp	r3, #1
 8011492:	d14b      	bne.n	801152c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8011494:	68bb      	ldr	r3, [r7, #8]
 8011496:	691b      	ldr	r3, [r3, #16]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d009      	beq.n	80114b0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801149c:	69bb      	ldr	r3, [r7, #24]
 801149e:	015a      	lsls	r2, r3, #5
 80114a0:	69fb      	ldr	r3, [r7, #28]
 80114a2:	4413      	add	r3, r2
 80114a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114a8:	461a      	mov	r2, r3
 80114aa:	68bb      	ldr	r3, [r7, #8]
 80114ac:	691b      	ldr	r3, [r3, #16]
 80114ae:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80114b0:	68bb      	ldr	r3, [r7, #8]
 80114b2:	78db      	ldrb	r3, [r3, #3]
 80114b4:	2b01      	cmp	r3, #1
 80114b6:	d128      	bne.n	801150a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80114b8:	69fb      	ldr	r3, [r7, #28]
 80114ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80114be:	689b      	ldr	r3, [r3, #8]
 80114c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d110      	bne.n	80114ea <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80114c8:	69bb      	ldr	r3, [r7, #24]
 80114ca:	015a      	lsls	r2, r3, #5
 80114cc:	69fb      	ldr	r3, [r7, #28]
 80114ce:	4413      	add	r3, r2
 80114d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	69ba      	ldr	r2, [r7, #24]
 80114d8:	0151      	lsls	r1, r2, #5
 80114da:	69fa      	ldr	r2, [r7, #28]
 80114dc:	440a      	add	r2, r1
 80114de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80114e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80114e6:	6013      	str	r3, [r2, #0]
 80114e8:	e00f      	b.n	801150a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80114ea:	69bb      	ldr	r3, [r7, #24]
 80114ec:	015a      	lsls	r2, r3, #5
 80114ee:	69fb      	ldr	r3, [r7, #28]
 80114f0:	4413      	add	r3, r2
 80114f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	69ba      	ldr	r2, [r7, #24]
 80114fa:	0151      	lsls	r1, r2, #5
 80114fc:	69fa      	ldr	r2, [r7, #28]
 80114fe:	440a      	add	r2, r1
 8011500:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011508:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801150a:	69bb      	ldr	r3, [r7, #24]
 801150c:	015a      	lsls	r2, r3, #5
 801150e:	69fb      	ldr	r3, [r7, #28]
 8011510:	4413      	add	r3, r2
 8011512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	69ba      	ldr	r2, [r7, #24]
 801151a:	0151      	lsls	r1, r2, #5
 801151c:	69fa      	ldr	r2, [r7, #28]
 801151e:	440a      	add	r2, r1
 8011520:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011524:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011528:	6013      	str	r3, [r2, #0]
 801152a:	e133      	b.n	8011794 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801152c:	69bb      	ldr	r3, [r7, #24]
 801152e:	015a      	lsls	r2, r3, #5
 8011530:	69fb      	ldr	r3, [r7, #28]
 8011532:	4413      	add	r3, r2
 8011534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	69ba      	ldr	r2, [r7, #24]
 801153c:	0151      	lsls	r1, r2, #5
 801153e:	69fa      	ldr	r2, [r7, #28]
 8011540:	440a      	add	r2, r1
 8011542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011546:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801154a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801154c:	68bb      	ldr	r3, [r7, #8]
 801154e:	78db      	ldrb	r3, [r3, #3]
 8011550:	2b01      	cmp	r3, #1
 8011552:	d015      	beq.n	8011580 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8011554:	68bb      	ldr	r3, [r7, #8]
 8011556:	695b      	ldr	r3, [r3, #20]
 8011558:	2b00      	cmp	r3, #0
 801155a:	f000 811b 	beq.w	8011794 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801155e:	69fb      	ldr	r3, [r7, #28]
 8011560:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011564:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011566:	68bb      	ldr	r3, [r7, #8]
 8011568:	781b      	ldrb	r3, [r3, #0]
 801156a:	f003 030f 	and.w	r3, r3, #15
 801156e:	2101      	movs	r1, #1
 8011570:	fa01 f303 	lsl.w	r3, r1, r3
 8011574:	69f9      	ldr	r1, [r7, #28]
 8011576:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801157a:	4313      	orrs	r3, r2
 801157c:	634b      	str	r3, [r1, #52]	; 0x34
 801157e:	e109      	b.n	8011794 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011580:	69fb      	ldr	r3, [r7, #28]
 8011582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011586:	689b      	ldr	r3, [r3, #8]
 8011588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801158c:	2b00      	cmp	r3, #0
 801158e:	d110      	bne.n	80115b2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011590:	69bb      	ldr	r3, [r7, #24]
 8011592:	015a      	lsls	r2, r3, #5
 8011594:	69fb      	ldr	r3, [r7, #28]
 8011596:	4413      	add	r3, r2
 8011598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	69ba      	ldr	r2, [r7, #24]
 80115a0:	0151      	lsls	r1, r2, #5
 80115a2:	69fa      	ldr	r2, [r7, #28]
 80115a4:	440a      	add	r2, r1
 80115a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80115aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80115ae:	6013      	str	r3, [r2, #0]
 80115b0:	e00f      	b.n	80115d2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80115b2:	69bb      	ldr	r3, [r7, #24]
 80115b4:	015a      	lsls	r2, r3, #5
 80115b6:	69fb      	ldr	r3, [r7, #28]
 80115b8:	4413      	add	r3, r2
 80115ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	69ba      	ldr	r2, [r7, #24]
 80115c2:	0151      	lsls	r1, r2, #5
 80115c4:	69fa      	ldr	r2, [r7, #28]
 80115c6:	440a      	add	r2, r1
 80115c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80115cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80115d0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80115d2:	68bb      	ldr	r3, [r7, #8]
 80115d4:	68d9      	ldr	r1, [r3, #12]
 80115d6:	68bb      	ldr	r3, [r7, #8]
 80115d8:	781a      	ldrb	r2, [r3, #0]
 80115da:	68bb      	ldr	r3, [r7, #8]
 80115dc:	695b      	ldr	r3, [r3, #20]
 80115de:	b298      	uxth	r0, r3
 80115e0:	79fb      	ldrb	r3, [r7, #7]
 80115e2:	9300      	str	r3, [sp, #0]
 80115e4:	4603      	mov	r3, r0
 80115e6:	68f8      	ldr	r0, [r7, #12]
 80115e8:	f000 fa38 	bl	8011a5c <USB_WritePacket>
 80115ec:	e0d2      	b.n	8011794 <USB_EPStartXfer+0x480>
 80115ee:	bf00      	nop
 80115f0:	e007ffff 	.word	0xe007ffff
 80115f4:	fff80000 	.word	0xfff80000
 80115f8:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80115fc:	69bb      	ldr	r3, [r7, #24]
 80115fe:	015a      	lsls	r2, r3, #5
 8011600:	69fb      	ldr	r3, [r7, #28]
 8011602:	4413      	add	r3, r2
 8011604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011608:	691a      	ldr	r2, [r3, #16]
 801160a:	69bb      	ldr	r3, [r7, #24]
 801160c:	0159      	lsls	r1, r3, #5
 801160e:	69fb      	ldr	r3, [r7, #28]
 8011610:	440b      	add	r3, r1
 8011612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011616:	4619      	mov	r1, r3
 8011618:	4b61      	ldr	r3, [pc, #388]	; (80117a0 <USB_EPStartXfer+0x48c>)
 801161a:	4013      	ands	r3, r2
 801161c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801161e:	69bb      	ldr	r3, [r7, #24]
 8011620:	015a      	lsls	r2, r3, #5
 8011622:	69fb      	ldr	r3, [r7, #28]
 8011624:	4413      	add	r3, r2
 8011626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801162a:	691a      	ldr	r2, [r3, #16]
 801162c:	69bb      	ldr	r3, [r7, #24]
 801162e:	0159      	lsls	r1, r3, #5
 8011630:	69fb      	ldr	r3, [r7, #28]
 8011632:	440b      	add	r3, r1
 8011634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011638:	4619      	mov	r1, r3
 801163a:	4b5a      	ldr	r3, [pc, #360]	; (80117a4 <USB_EPStartXfer+0x490>)
 801163c:	4013      	ands	r3, r2
 801163e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8011640:	68bb      	ldr	r3, [r7, #8]
 8011642:	695b      	ldr	r3, [r3, #20]
 8011644:	2b00      	cmp	r3, #0
 8011646:	d123      	bne.n	8011690 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8011648:	69bb      	ldr	r3, [r7, #24]
 801164a:	015a      	lsls	r2, r3, #5
 801164c:	69fb      	ldr	r3, [r7, #28]
 801164e:	4413      	add	r3, r2
 8011650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011654:	691a      	ldr	r2, [r3, #16]
 8011656:	68bb      	ldr	r3, [r7, #8]
 8011658:	689b      	ldr	r3, [r3, #8]
 801165a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801165e:	69b9      	ldr	r1, [r7, #24]
 8011660:	0148      	lsls	r0, r1, #5
 8011662:	69f9      	ldr	r1, [r7, #28]
 8011664:	4401      	add	r1, r0
 8011666:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801166a:	4313      	orrs	r3, r2
 801166c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801166e:	69bb      	ldr	r3, [r7, #24]
 8011670:	015a      	lsls	r2, r3, #5
 8011672:	69fb      	ldr	r3, [r7, #28]
 8011674:	4413      	add	r3, r2
 8011676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801167a:	691b      	ldr	r3, [r3, #16]
 801167c:	69ba      	ldr	r2, [r7, #24]
 801167e:	0151      	lsls	r1, r2, #5
 8011680:	69fa      	ldr	r2, [r7, #28]
 8011682:	440a      	add	r2, r1
 8011684:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011688:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801168c:	6113      	str	r3, [r2, #16]
 801168e:	e033      	b.n	80116f8 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8011690:	68bb      	ldr	r3, [r7, #8]
 8011692:	695a      	ldr	r2, [r3, #20]
 8011694:	68bb      	ldr	r3, [r7, #8]
 8011696:	689b      	ldr	r3, [r3, #8]
 8011698:	4413      	add	r3, r2
 801169a:	1e5a      	subs	r2, r3, #1
 801169c:	68bb      	ldr	r3, [r7, #8]
 801169e:	689b      	ldr	r3, [r3, #8]
 80116a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80116a4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80116a6:	69bb      	ldr	r3, [r7, #24]
 80116a8:	015a      	lsls	r2, r3, #5
 80116aa:	69fb      	ldr	r3, [r7, #28]
 80116ac:	4413      	add	r3, r2
 80116ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80116b2:	691a      	ldr	r2, [r3, #16]
 80116b4:	8afb      	ldrh	r3, [r7, #22]
 80116b6:	04d9      	lsls	r1, r3, #19
 80116b8:	4b3b      	ldr	r3, [pc, #236]	; (80117a8 <USB_EPStartXfer+0x494>)
 80116ba:	400b      	ands	r3, r1
 80116bc:	69b9      	ldr	r1, [r7, #24]
 80116be:	0148      	lsls	r0, r1, #5
 80116c0:	69f9      	ldr	r1, [r7, #28]
 80116c2:	4401      	add	r1, r0
 80116c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80116c8:	4313      	orrs	r3, r2
 80116ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80116cc:	69bb      	ldr	r3, [r7, #24]
 80116ce:	015a      	lsls	r2, r3, #5
 80116d0:	69fb      	ldr	r3, [r7, #28]
 80116d2:	4413      	add	r3, r2
 80116d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80116d8:	691a      	ldr	r2, [r3, #16]
 80116da:	68bb      	ldr	r3, [r7, #8]
 80116dc:	689b      	ldr	r3, [r3, #8]
 80116de:	8af9      	ldrh	r1, [r7, #22]
 80116e0:	fb01 f303 	mul.w	r3, r1, r3
 80116e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80116e8:	69b9      	ldr	r1, [r7, #24]
 80116ea:	0148      	lsls	r0, r1, #5
 80116ec:	69f9      	ldr	r1, [r7, #28]
 80116ee:	4401      	add	r1, r0
 80116f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80116f4:	4313      	orrs	r3, r2
 80116f6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80116f8:	79fb      	ldrb	r3, [r7, #7]
 80116fa:	2b01      	cmp	r3, #1
 80116fc:	d10d      	bne.n	801171a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80116fe:	68bb      	ldr	r3, [r7, #8]
 8011700:	68db      	ldr	r3, [r3, #12]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d009      	beq.n	801171a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8011706:	68bb      	ldr	r3, [r7, #8]
 8011708:	68d9      	ldr	r1, [r3, #12]
 801170a:	69bb      	ldr	r3, [r7, #24]
 801170c:	015a      	lsls	r2, r3, #5
 801170e:	69fb      	ldr	r3, [r7, #28]
 8011710:	4413      	add	r3, r2
 8011712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011716:	460a      	mov	r2, r1
 8011718:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801171a:	68bb      	ldr	r3, [r7, #8]
 801171c:	78db      	ldrb	r3, [r3, #3]
 801171e:	2b01      	cmp	r3, #1
 8011720:	d128      	bne.n	8011774 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011722:	69fb      	ldr	r3, [r7, #28]
 8011724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011728:	689b      	ldr	r3, [r3, #8]
 801172a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801172e:	2b00      	cmp	r3, #0
 8011730:	d110      	bne.n	8011754 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8011732:	69bb      	ldr	r3, [r7, #24]
 8011734:	015a      	lsls	r2, r3, #5
 8011736:	69fb      	ldr	r3, [r7, #28]
 8011738:	4413      	add	r3, r2
 801173a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	69ba      	ldr	r2, [r7, #24]
 8011742:	0151      	lsls	r1, r2, #5
 8011744:	69fa      	ldr	r2, [r7, #28]
 8011746:	440a      	add	r2, r1
 8011748:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801174c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011750:	6013      	str	r3, [r2, #0]
 8011752:	e00f      	b.n	8011774 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8011754:	69bb      	ldr	r3, [r7, #24]
 8011756:	015a      	lsls	r2, r3, #5
 8011758:	69fb      	ldr	r3, [r7, #28]
 801175a:	4413      	add	r3, r2
 801175c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	69ba      	ldr	r2, [r7, #24]
 8011764:	0151      	lsls	r1, r2, #5
 8011766:	69fa      	ldr	r2, [r7, #28]
 8011768:	440a      	add	r2, r1
 801176a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801176e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011772:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011774:	69bb      	ldr	r3, [r7, #24]
 8011776:	015a      	lsls	r2, r3, #5
 8011778:	69fb      	ldr	r3, [r7, #28]
 801177a:	4413      	add	r3, r2
 801177c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	69ba      	ldr	r2, [r7, #24]
 8011784:	0151      	lsls	r1, r2, #5
 8011786:	69fa      	ldr	r2, [r7, #28]
 8011788:	440a      	add	r2, r1
 801178a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801178e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011792:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011794:	2300      	movs	r3, #0
}
 8011796:	4618      	mov	r0, r3
 8011798:	3720      	adds	r7, #32
 801179a:	46bd      	mov	sp, r7
 801179c:	bd80      	pop	{r7, pc}
 801179e:	bf00      	nop
 80117a0:	fff80000 	.word	0xfff80000
 80117a4:	e007ffff 	.word	0xe007ffff
 80117a8:	1ff80000 	.word	0x1ff80000

080117ac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80117ac:	b480      	push	{r7}
 80117ae:	b087      	sub	sp, #28
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	60f8      	str	r0, [r7, #12]
 80117b4:	60b9      	str	r1, [r7, #8]
 80117b6:	4613      	mov	r3, r2
 80117b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80117be:	68bb      	ldr	r3, [r7, #8]
 80117c0:	781b      	ldrb	r3, [r3, #0]
 80117c2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80117c4:	68bb      	ldr	r3, [r7, #8]
 80117c6:	785b      	ldrb	r3, [r3, #1]
 80117c8:	2b01      	cmp	r3, #1
 80117ca:	f040 80cd 	bne.w	8011968 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80117ce:	68bb      	ldr	r3, [r7, #8]
 80117d0:	695b      	ldr	r3, [r3, #20]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d132      	bne.n	801183c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80117d6:	693b      	ldr	r3, [r7, #16]
 80117d8:	015a      	lsls	r2, r3, #5
 80117da:	697b      	ldr	r3, [r7, #20]
 80117dc:	4413      	add	r3, r2
 80117de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80117e2:	691a      	ldr	r2, [r3, #16]
 80117e4:	693b      	ldr	r3, [r7, #16]
 80117e6:	0159      	lsls	r1, r3, #5
 80117e8:	697b      	ldr	r3, [r7, #20]
 80117ea:	440b      	add	r3, r1
 80117ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80117f0:	4619      	mov	r1, r3
 80117f2:	4b98      	ldr	r3, [pc, #608]	; (8011a54 <USB_EP0StartXfer+0x2a8>)
 80117f4:	4013      	ands	r3, r2
 80117f6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80117f8:	693b      	ldr	r3, [r7, #16]
 80117fa:	015a      	lsls	r2, r3, #5
 80117fc:	697b      	ldr	r3, [r7, #20]
 80117fe:	4413      	add	r3, r2
 8011800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011804:	691b      	ldr	r3, [r3, #16]
 8011806:	693a      	ldr	r2, [r7, #16]
 8011808:	0151      	lsls	r1, r2, #5
 801180a:	697a      	ldr	r2, [r7, #20]
 801180c:	440a      	add	r2, r1
 801180e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011812:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011816:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011818:	693b      	ldr	r3, [r7, #16]
 801181a:	015a      	lsls	r2, r3, #5
 801181c:	697b      	ldr	r3, [r7, #20]
 801181e:	4413      	add	r3, r2
 8011820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011824:	691a      	ldr	r2, [r3, #16]
 8011826:	693b      	ldr	r3, [r7, #16]
 8011828:	0159      	lsls	r1, r3, #5
 801182a:	697b      	ldr	r3, [r7, #20]
 801182c:	440b      	add	r3, r1
 801182e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011832:	4619      	mov	r1, r3
 8011834:	4b88      	ldr	r3, [pc, #544]	; (8011a58 <USB_EP0StartXfer+0x2ac>)
 8011836:	4013      	ands	r3, r2
 8011838:	610b      	str	r3, [r1, #16]
 801183a:	e04e      	b.n	80118da <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801183c:	693b      	ldr	r3, [r7, #16]
 801183e:	015a      	lsls	r2, r3, #5
 8011840:	697b      	ldr	r3, [r7, #20]
 8011842:	4413      	add	r3, r2
 8011844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011848:	691a      	ldr	r2, [r3, #16]
 801184a:	693b      	ldr	r3, [r7, #16]
 801184c:	0159      	lsls	r1, r3, #5
 801184e:	697b      	ldr	r3, [r7, #20]
 8011850:	440b      	add	r3, r1
 8011852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011856:	4619      	mov	r1, r3
 8011858:	4b7f      	ldr	r3, [pc, #508]	; (8011a58 <USB_EP0StartXfer+0x2ac>)
 801185a:	4013      	ands	r3, r2
 801185c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801185e:	693b      	ldr	r3, [r7, #16]
 8011860:	015a      	lsls	r2, r3, #5
 8011862:	697b      	ldr	r3, [r7, #20]
 8011864:	4413      	add	r3, r2
 8011866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801186a:	691a      	ldr	r2, [r3, #16]
 801186c:	693b      	ldr	r3, [r7, #16]
 801186e:	0159      	lsls	r1, r3, #5
 8011870:	697b      	ldr	r3, [r7, #20]
 8011872:	440b      	add	r3, r1
 8011874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011878:	4619      	mov	r1, r3
 801187a:	4b76      	ldr	r3, [pc, #472]	; (8011a54 <USB_EP0StartXfer+0x2a8>)
 801187c:	4013      	ands	r3, r2
 801187e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8011880:	68bb      	ldr	r3, [r7, #8]
 8011882:	695a      	ldr	r2, [r3, #20]
 8011884:	68bb      	ldr	r3, [r7, #8]
 8011886:	689b      	ldr	r3, [r3, #8]
 8011888:	429a      	cmp	r2, r3
 801188a:	d903      	bls.n	8011894 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 801188c:	68bb      	ldr	r3, [r7, #8]
 801188e:	689a      	ldr	r2, [r3, #8]
 8011890:	68bb      	ldr	r3, [r7, #8]
 8011892:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011894:	693b      	ldr	r3, [r7, #16]
 8011896:	015a      	lsls	r2, r3, #5
 8011898:	697b      	ldr	r3, [r7, #20]
 801189a:	4413      	add	r3, r2
 801189c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118a0:	691b      	ldr	r3, [r3, #16]
 80118a2:	693a      	ldr	r2, [r7, #16]
 80118a4:	0151      	lsls	r1, r2, #5
 80118a6:	697a      	ldr	r2, [r7, #20]
 80118a8:	440a      	add	r2, r1
 80118aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80118ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80118b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80118b4:	693b      	ldr	r3, [r7, #16]
 80118b6:	015a      	lsls	r2, r3, #5
 80118b8:	697b      	ldr	r3, [r7, #20]
 80118ba:	4413      	add	r3, r2
 80118bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118c0:	691a      	ldr	r2, [r3, #16]
 80118c2:	68bb      	ldr	r3, [r7, #8]
 80118c4:	695b      	ldr	r3, [r3, #20]
 80118c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80118ca:	6939      	ldr	r1, [r7, #16]
 80118cc:	0148      	lsls	r0, r1, #5
 80118ce:	6979      	ldr	r1, [r7, #20]
 80118d0:	4401      	add	r1, r0
 80118d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80118d6:	4313      	orrs	r3, r2
 80118d8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80118da:	79fb      	ldrb	r3, [r7, #7]
 80118dc:	2b01      	cmp	r3, #1
 80118de:	d11e      	bne.n	801191e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80118e0:	68bb      	ldr	r3, [r7, #8]
 80118e2:	691b      	ldr	r3, [r3, #16]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d009      	beq.n	80118fc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80118e8:	693b      	ldr	r3, [r7, #16]
 80118ea:	015a      	lsls	r2, r3, #5
 80118ec:	697b      	ldr	r3, [r7, #20]
 80118ee:	4413      	add	r3, r2
 80118f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118f4:	461a      	mov	r2, r3
 80118f6:	68bb      	ldr	r3, [r7, #8]
 80118f8:	691b      	ldr	r3, [r3, #16]
 80118fa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80118fc:	693b      	ldr	r3, [r7, #16]
 80118fe:	015a      	lsls	r2, r3, #5
 8011900:	697b      	ldr	r3, [r7, #20]
 8011902:	4413      	add	r3, r2
 8011904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	693a      	ldr	r2, [r7, #16]
 801190c:	0151      	lsls	r1, r2, #5
 801190e:	697a      	ldr	r2, [r7, #20]
 8011910:	440a      	add	r2, r1
 8011912:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011916:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801191a:	6013      	str	r3, [r2, #0]
 801191c:	e092      	b.n	8011a44 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801191e:	693b      	ldr	r3, [r7, #16]
 8011920:	015a      	lsls	r2, r3, #5
 8011922:	697b      	ldr	r3, [r7, #20]
 8011924:	4413      	add	r3, r2
 8011926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	693a      	ldr	r2, [r7, #16]
 801192e:	0151      	lsls	r1, r2, #5
 8011930:	697a      	ldr	r2, [r7, #20]
 8011932:	440a      	add	r2, r1
 8011934:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011938:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801193c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801193e:	68bb      	ldr	r3, [r7, #8]
 8011940:	695b      	ldr	r3, [r3, #20]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d07e      	beq.n	8011a44 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011946:	697b      	ldr	r3, [r7, #20]
 8011948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801194c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801194e:	68bb      	ldr	r3, [r7, #8]
 8011950:	781b      	ldrb	r3, [r3, #0]
 8011952:	f003 030f 	and.w	r3, r3, #15
 8011956:	2101      	movs	r1, #1
 8011958:	fa01 f303 	lsl.w	r3, r1, r3
 801195c:	6979      	ldr	r1, [r7, #20]
 801195e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011962:	4313      	orrs	r3, r2
 8011964:	634b      	str	r3, [r1, #52]	; 0x34
 8011966:	e06d      	b.n	8011a44 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011968:	693b      	ldr	r3, [r7, #16]
 801196a:	015a      	lsls	r2, r3, #5
 801196c:	697b      	ldr	r3, [r7, #20]
 801196e:	4413      	add	r3, r2
 8011970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011974:	691a      	ldr	r2, [r3, #16]
 8011976:	693b      	ldr	r3, [r7, #16]
 8011978:	0159      	lsls	r1, r3, #5
 801197a:	697b      	ldr	r3, [r7, #20]
 801197c:	440b      	add	r3, r1
 801197e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011982:	4619      	mov	r1, r3
 8011984:	4b34      	ldr	r3, [pc, #208]	; (8011a58 <USB_EP0StartXfer+0x2ac>)
 8011986:	4013      	ands	r3, r2
 8011988:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801198a:	693b      	ldr	r3, [r7, #16]
 801198c:	015a      	lsls	r2, r3, #5
 801198e:	697b      	ldr	r3, [r7, #20]
 8011990:	4413      	add	r3, r2
 8011992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011996:	691a      	ldr	r2, [r3, #16]
 8011998:	693b      	ldr	r3, [r7, #16]
 801199a:	0159      	lsls	r1, r3, #5
 801199c:	697b      	ldr	r3, [r7, #20]
 801199e:	440b      	add	r3, r1
 80119a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119a4:	4619      	mov	r1, r3
 80119a6:	4b2b      	ldr	r3, [pc, #172]	; (8011a54 <USB_EP0StartXfer+0x2a8>)
 80119a8:	4013      	ands	r3, r2
 80119aa:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80119ac:	68bb      	ldr	r3, [r7, #8]
 80119ae:	695b      	ldr	r3, [r3, #20]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d003      	beq.n	80119bc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80119b4:	68bb      	ldr	r3, [r7, #8]
 80119b6:	689a      	ldr	r2, [r3, #8]
 80119b8:	68bb      	ldr	r3, [r7, #8]
 80119ba:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80119bc:	693b      	ldr	r3, [r7, #16]
 80119be:	015a      	lsls	r2, r3, #5
 80119c0:	697b      	ldr	r3, [r7, #20]
 80119c2:	4413      	add	r3, r2
 80119c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119c8:	691b      	ldr	r3, [r3, #16]
 80119ca:	693a      	ldr	r2, [r7, #16]
 80119cc:	0151      	lsls	r1, r2, #5
 80119ce:	697a      	ldr	r2, [r7, #20]
 80119d0:	440a      	add	r2, r1
 80119d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80119d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80119da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80119dc:	693b      	ldr	r3, [r7, #16]
 80119de:	015a      	lsls	r2, r3, #5
 80119e0:	697b      	ldr	r3, [r7, #20]
 80119e2:	4413      	add	r3, r2
 80119e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119e8:	691a      	ldr	r2, [r3, #16]
 80119ea:	68bb      	ldr	r3, [r7, #8]
 80119ec:	689b      	ldr	r3, [r3, #8]
 80119ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80119f2:	6939      	ldr	r1, [r7, #16]
 80119f4:	0148      	lsls	r0, r1, #5
 80119f6:	6979      	ldr	r1, [r7, #20]
 80119f8:	4401      	add	r1, r0
 80119fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80119fe:	4313      	orrs	r3, r2
 8011a00:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8011a02:	79fb      	ldrb	r3, [r7, #7]
 8011a04:	2b01      	cmp	r3, #1
 8011a06:	d10d      	bne.n	8011a24 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8011a08:	68bb      	ldr	r3, [r7, #8]
 8011a0a:	68db      	ldr	r3, [r3, #12]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d009      	beq.n	8011a24 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8011a10:	68bb      	ldr	r3, [r7, #8]
 8011a12:	68d9      	ldr	r1, [r3, #12]
 8011a14:	693b      	ldr	r3, [r7, #16]
 8011a16:	015a      	lsls	r2, r3, #5
 8011a18:	697b      	ldr	r3, [r7, #20]
 8011a1a:	4413      	add	r3, r2
 8011a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a20:	460a      	mov	r2, r1
 8011a22:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011a24:	693b      	ldr	r3, [r7, #16]
 8011a26:	015a      	lsls	r2, r3, #5
 8011a28:	697b      	ldr	r3, [r7, #20]
 8011a2a:	4413      	add	r3, r2
 8011a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	693a      	ldr	r2, [r7, #16]
 8011a34:	0151      	lsls	r1, r2, #5
 8011a36:	697a      	ldr	r2, [r7, #20]
 8011a38:	440a      	add	r2, r1
 8011a3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011a3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011a42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011a44:	2300      	movs	r3, #0
}
 8011a46:	4618      	mov	r0, r3
 8011a48:	371c      	adds	r7, #28
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a50:	4770      	bx	lr
 8011a52:	bf00      	nop
 8011a54:	e007ffff 	.word	0xe007ffff
 8011a58:	fff80000 	.word	0xfff80000

08011a5c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8011a5c:	b480      	push	{r7}
 8011a5e:	b089      	sub	sp, #36	; 0x24
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	60f8      	str	r0, [r7, #12]
 8011a64:	60b9      	str	r1, [r7, #8]
 8011a66:	4611      	mov	r1, r2
 8011a68:	461a      	mov	r2, r3
 8011a6a:	460b      	mov	r3, r1
 8011a6c:	71fb      	strb	r3, [r7, #7]
 8011a6e:	4613      	mov	r3, r2
 8011a70:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8011a76:	68bb      	ldr	r3, [r7, #8]
 8011a78:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8011a7a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d11a      	bne.n	8011ab8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8011a82:	88bb      	ldrh	r3, [r7, #4]
 8011a84:	3303      	adds	r3, #3
 8011a86:	089b      	lsrs	r3, r3, #2
 8011a88:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	61bb      	str	r3, [r7, #24]
 8011a8e:	e00f      	b.n	8011ab0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011a90:	79fb      	ldrb	r3, [r7, #7]
 8011a92:	031a      	lsls	r2, r3, #12
 8011a94:	697b      	ldr	r3, [r7, #20]
 8011a96:	4413      	add	r3, r2
 8011a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011a9c:	461a      	mov	r2, r3
 8011a9e:	69fb      	ldr	r3, [r7, #28]
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8011aa4:	69fb      	ldr	r3, [r7, #28]
 8011aa6:	3304      	adds	r3, #4
 8011aa8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8011aaa:	69bb      	ldr	r3, [r7, #24]
 8011aac:	3301      	adds	r3, #1
 8011aae:	61bb      	str	r3, [r7, #24]
 8011ab0:	69ba      	ldr	r2, [r7, #24]
 8011ab2:	693b      	ldr	r3, [r7, #16]
 8011ab4:	429a      	cmp	r2, r3
 8011ab6:	d3eb      	bcc.n	8011a90 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8011ab8:	2300      	movs	r3, #0
}
 8011aba:	4618      	mov	r0, r3
 8011abc:	3724      	adds	r7, #36	; 0x24
 8011abe:	46bd      	mov	sp, r7
 8011ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac4:	4770      	bx	lr

08011ac6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011ac6:	b480      	push	{r7}
 8011ac8:	b089      	sub	sp, #36	; 0x24
 8011aca:	af00      	add	r7, sp, #0
 8011acc:	60f8      	str	r0, [r7, #12]
 8011ace:	60b9      	str	r1, [r7, #8]
 8011ad0:	4613      	mov	r3, r2
 8011ad2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8011ad8:	68bb      	ldr	r3, [r7, #8]
 8011ada:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8011adc:	88fb      	ldrh	r3, [r7, #6]
 8011ade:	3303      	adds	r3, #3
 8011ae0:	089b      	lsrs	r3, r3, #2
 8011ae2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	61bb      	str	r3, [r7, #24]
 8011ae8:	e00b      	b.n	8011b02 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011aea:	697b      	ldr	r3, [r7, #20]
 8011aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011af0:	681a      	ldr	r2, [r3, #0]
 8011af2:	69fb      	ldr	r3, [r7, #28]
 8011af4:	601a      	str	r2, [r3, #0]
    pDest++;
 8011af6:	69fb      	ldr	r3, [r7, #28]
 8011af8:	3304      	adds	r3, #4
 8011afa:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8011afc:	69bb      	ldr	r3, [r7, #24]
 8011afe:	3301      	adds	r3, #1
 8011b00:	61bb      	str	r3, [r7, #24]
 8011b02:	69ba      	ldr	r2, [r7, #24]
 8011b04:	693b      	ldr	r3, [r7, #16]
 8011b06:	429a      	cmp	r2, r3
 8011b08:	d3ef      	bcc.n	8011aea <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8011b0a:	69fb      	ldr	r3, [r7, #28]
}
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	3724      	adds	r7, #36	; 0x24
 8011b10:	46bd      	mov	sp, r7
 8011b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b16:	4770      	bx	lr

08011b18 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011b18:	b480      	push	{r7}
 8011b1a:	b085      	sub	sp, #20
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	6078      	str	r0, [r7, #4]
 8011b20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011b26:	683b      	ldr	r3, [r7, #0]
 8011b28:	781b      	ldrb	r3, [r3, #0]
 8011b2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011b2c:	683b      	ldr	r3, [r7, #0]
 8011b2e:	785b      	ldrb	r3, [r3, #1]
 8011b30:	2b01      	cmp	r3, #1
 8011b32:	d12c      	bne.n	8011b8e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011b34:	68bb      	ldr	r3, [r7, #8]
 8011b36:	015a      	lsls	r2, r3, #5
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	4413      	add	r3, r2
 8011b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	db12      	blt.n	8011b6c <USB_EPSetStall+0x54>
 8011b46:	68bb      	ldr	r3, [r7, #8]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d00f      	beq.n	8011b6c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8011b4c:	68bb      	ldr	r3, [r7, #8]
 8011b4e:	015a      	lsls	r2, r3, #5
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	4413      	add	r3, r2
 8011b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	68ba      	ldr	r2, [r7, #8]
 8011b5c:	0151      	lsls	r1, r2, #5
 8011b5e:	68fa      	ldr	r2, [r7, #12]
 8011b60:	440a      	add	r2, r1
 8011b62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011b66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011b6a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8011b6c:	68bb      	ldr	r3, [r7, #8]
 8011b6e:	015a      	lsls	r2, r3, #5
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	4413      	add	r3, r2
 8011b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	68ba      	ldr	r2, [r7, #8]
 8011b7c:	0151      	lsls	r1, r2, #5
 8011b7e:	68fa      	ldr	r2, [r7, #12]
 8011b80:	440a      	add	r2, r1
 8011b82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011b86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011b8a:	6013      	str	r3, [r2, #0]
 8011b8c:	e02b      	b.n	8011be6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011b8e:	68bb      	ldr	r3, [r7, #8]
 8011b90:	015a      	lsls	r2, r3, #5
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	4413      	add	r3, r2
 8011b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	db12      	blt.n	8011bc6 <USB_EPSetStall+0xae>
 8011ba0:	68bb      	ldr	r3, [r7, #8]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d00f      	beq.n	8011bc6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8011ba6:	68bb      	ldr	r3, [r7, #8]
 8011ba8:	015a      	lsls	r2, r3, #5
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	4413      	add	r3, r2
 8011bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	68ba      	ldr	r2, [r7, #8]
 8011bb6:	0151      	lsls	r1, r2, #5
 8011bb8:	68fa      	ldr	r2, [r7, #12]
 8011bba:	440a      	add	r2, r1
 8011bbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011bc0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011bc4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8011bc6:	68bb      	ldr	r3, [r7, #8]
 8011bc8:	015a      	lsls	r2, r3, #5
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	4413      	add	r3, r2
 8011bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	68ba      	ldr	r2, [r7, #8]
 8011bd6:	0151      	lsls	r1, r2, #5
 8011bd8:	68fa      	ldr	r2, [r7, #12]
 8011bda:	440a      	add	r2, r1
 8011bdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011be0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011be4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011be6:	2300      	movs	r3, #0
}
 8011be8:	4618      	mov	r0, r3
 8011bea:	3714      	adds	r7, #20
 8011bec:	46bd      	mov	sp, r7
 8011bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf2:	4770      	bx	lr

08011bf4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011bf4:	b480      	push	{r7}
 8011bf6:	b085      	sub	sp, #20
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	6078      	str	r0, [r7, #4]
 8011bfc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011c02:	683b      	ldr	r3, [r7, #0]
 8011c04:	781b      	ldrb	r3, [r3, #0]
 8011c06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011c08:	683b      	ldr	r3, [r7, #0]
 8011c0a:	785b      	ldrb	r3, [r3, #1]
 8011c0c:	2b01      	cmp	r3, #1
 8011c0e:	d128      	bne.n	8011c62 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011c10:	68bb      	ldr	r3, [r7, #8]
 8011c12:	015a      	lsls	r2, r3, #5
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	4413      	add	r3, r2
 8011c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	68ba      	ldr	r2, [r7, #8]
 8011c20:	0151      	lsls	r1, r2, #5
 8011c22:	68fa      	ldr	r2, [r7, #12]
 8011c24:	440a      	add	r2, r1
 8011c26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011c2e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011c30:	683b      	ldr	r3, [r7, #0]
 8011c32:	78db      	ldrb	r3, [r3, #3]
 8011c34:	2b03      	cmp	r3, #3
 8011c36:	d003      	beq.n	8011c40 <USB_EPClearStall+0x4c>
 8011c38:	683b      	ldr	r3, [r7, #0]
 8011c3a:	78db      	ldrb	r3, [r3, #3]
 8011c3c:	2b02      	cmp	r3, #2
 8011c3e:	d138      	bne.n	8011cb2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011c40:	68bb      	ldr	r3, [r7, #8]
 8011c42:	015a      	lsls	r2, r3, #5
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	4413      	add	r3, r2
 8011c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	68ba      	ldr	r2, [r7, #8]
 8011c50:	0151      	lsls	r1, r2, #5
 8011c52:	68fa      	ldr	r2, [r7, #12]
 8011c54:	440a      	add	r2, r1
 8011c56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011c5e:	6013      	str	r3, [r2, #0]
 8011c60:	e027      	b.n	8011cb2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011c62:	68bb      	ldr	r3, [r7, #8]
 8011c64:	015a      	lsls	r2, r3, #5
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	4413      	add	r3, r2
 8011c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	68ba      	ldr	r2, [r7, #8]
 8011c72:	0151      	lsls	r1, r2, #5
 8011c74:	68fa      	ldr	r2, [r7, #12]
 8011c76:	440a      	add	r2, r1
 8011c78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011c7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011c80:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011c82:	683b      	ldr	r3, [r7, #0]
 8011c84:	78db      	ldrb	r3, [r3, #3]
 8011c86:	2b03      	cmp	r3, #3
 8011c88:	d003      	beq.n	8011c92 <USB_EPClearStall+0x9e>
 8011c8a:	683b      	ldr	r3, [r7, #0]
 8011c8c:	78db      	ldrb	r3, [r3, #3]
 8011c8e:	2b02      	cmp	r3, #2
 8011c90:	d10f      	bne.n	8011cb2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011c92:	68bb      	ldr	r3, [r7, #8]
 8011c94:	015a      	lsls	r2, r3, #5
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	4413      	add	r3, r2
 8011c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	68ba      	ldr	r2, [r7, #8]
 8011ca2:	0151      	lsls	r1, r2, #5
 8011ca4:	68fa      	ldr	r2, [r7, #12]
 8011ca6:	440a      	add	r2, r1
 8011ca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011cb0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8011cb2:	2300      	movs	r3, #0
}
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	3714      	adds	r7, #20
 8011cb8:	46bd      	mov	sp, r7
 8011cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cbe:	4770      	bx	lr

08011cc0 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b086      	sub	sp, #24
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	613b      	str	r3, [r7, #16]
  uint32_t i;

  /* Clear Pending interrupt */
  for (i = 0U; i < 15U; i++)
 8011ccc:	2300      	movs	r3, #0
 8011cce:	617b      	str	r3, [r7, #20]
 8011cd0:	e016      	b.n	8011d00 <USB_StopDevice+0x40>
  {
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8011cd2:	697b      	ldr	r3, [r7, #20]
 8011cd4:	015a      	lsls	r2, r3, #5
 8011cd6:	693b      	ldr	r3, [r7, #16]
 8011cd8:	4413      	add	r3, r2
 8011cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011cde:	461a      	mov	r2, r3
 8011ce0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011ce4:	6093      	str	r3, [r2, #8]
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8011ce6:	697b      	ldr	r3, [r7, #20]
 8011ce8:	015a      	lsls	r2, r3, #5
 8011cea:	693b      	ldr	r3, [r7, #16]
 8011cec:	4413      	add	r3, r2
 8011cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011cf2:	461a      	mov	r2, r3
 8011cf4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011cf8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < 15U; i++)
 8011cfa:	697b      	ldr	r3, [r7, #20]
 8011cfc:	3301      	adds	r3, #1
 8011cfe:	617b      	str	r3, [r7, #20]
 8011d00:	697b      	ldr	r3, [r7, #20]
 8011d02:	2b0e      	cmp	r3, #14
 8011d04:	d9e5      	bls.n	8011cd2 <USB_StopDevice+0x12>
  }

  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 8011d06:	693b      	ldr	r3, [r7, #16]
 8011d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d0c:	461a      	mov	r2, r3
 8011d0e:	2300      	movs	r3, #0
 8011d10:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK  = 0U;
 8011d12:	693b      	ldr	r3, [r7, #16]
 8011d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d18:	461a      	mov	r2, r3
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8011d1e:	693b      	ldr	r3, [r7, #16]
 8011d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d24:	461a      	mov	r2, r3
 8011d26:	2300      	movs	r3, #0
 8011d28:	61d3      	str	r3, [r2, #28]

  /* Flush the FIFO */
  ret = USB_FlushRxFifo(USBx);
 8011d2a:	6878      	ldr	r0, [r7, #4]
 8011d2c:	f7ff f986 	bl	801103c <USB_FlushRxFifo>
 8011d30:	4603      	mov	r3, r0
 8011d32:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 8011d34:	7bfb      	ldrb	r3, [r7, #15]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d001      	beq.n	8011d3e <USB_StopDevice+0x7e>
  {
    return ret;
 8011d3a:	7bfb      	ldrb	r3, [r7, #15]
 8011d3c:	e00b      	b.n	8011d56 <USB_StopDevice+0x96>
  }

  ret = USB_FlushTxFifo(USBx,  0x10U);
 8011d3e:	2110      	movs	r1, #16
 8011d40:	6878      	ldr	r0, [r7, #4]
 8011d42:	f7ff f955 	bl	8010ff0 <USB_FlushTxFifo>
 8011d46:	4603      	mov	r3, r0
 8011d48:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 8011d4a:	7bfb      	ldrb	r3, [r7, #15]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d001      	beq.n	8011d54 <USB_StopDevice+0x94>
  {
    return ret;
 8011d50:	7bfb      	ldrb	r3, [r7, #15]
 8011d52:	e000      	b.n	8011d56 <USB_StopDevice+0x96>
  }

  return ret;
 8011d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d56:	4618      	mov	r0, r3
 8011d58:	3718      	adds	r7, #24
 8011d5a:	46bd      	mov	sp, r7
 8011d5c:	bd80      	pop	{r7, pc}

08011d5e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8011d5e:	b480      	push	{r7}
 8011d60:	b085      	sub	sp, #20
 8011d62:	af00      	add	r7, sp, #0
 8011d64:	6078      	str	r0, [r7, #4]
 8011d66:	460b      	mov	r3, r1
 8011d68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	68fa      	ldr	r2, [r7, #12]
 8011d78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011d7c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8011d80:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d88:	681a      	ldr	r2, [r3, #0]
 8011d8a:	78fb      	ldrb	r3, [r7, #3]
 8011d8c:	011b      	lsls	r3, r3, #4
 8011d8e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8011d92:	68f9      	ldr	r1, [r7, #12]
 8011d94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011d98:	4313      	orrs	r3, r2
 8011d9a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8011d9c:	2300      	movs	r3, #0
}
 8011d9e:	4618      	mov	r0, r3
 8011da0:	3714      	adds	r7, #20
 8011da2:	46bd      	mov	sp, r7
 8011da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da8:	4770      	bx	lr

08011daa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011daa:	b580      	push	{r7, lr}
 8011dac:	b084      	sub	sp, #16
 8011dae:	af00      	add	r7, sp, #0
 8011db0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011dbc:	685b      	ldr	r3, [r3, #4]
 8011dbe:	68fa      	ldr	r2, [r7, #12]
 8011dc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011dc4:	f023 0302 	bic.w	r3, r3, #2
 8011dc8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8011dca:	2003      	movs	r0, #3
 8011dcc:	f7ef fec4 	bl	8001b58 <HAL_Delay>

  return HAL_OK;
 8011dd0:	2300      	movs	r3, #0
}
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	3710      	adds	r7, #16
 8011dd6:	46bd      	mov	sp, r7
 8011dd8:	bd80      	pop	{r7, pc}

08011dda <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011dda:	b580      	push	{r7, lr}
 8011ddc:	b084      	sub	sp, #16
 8011dde:	af00      	add	r7, sp, #0
 8011de0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011dec:	685b      	ldr	r3, [r3, #4]
 8011dee:	68fa      	ldr	r2, [r7, #12]
 8011df0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011df4:	f043 0302 	orr.w	r3, r3, #2
 8011df8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8011dfa:	2003      	movs	r0, #3
 8011dfc:	f7ef feac 	bl	8001b58 <HAL_Delay>

  return HAL_OK;
 8011e00:	2300      	movs	r3, #0
}
 8011e02:	4618      	mov	r0, r3
 8011e04:	3710      	adds	r7, #16
 8011e06:	46bd      	mov	sp, r7
 8011e08:	bd80      	pop	{r7, pc}

08011e0a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8011e0a:	b480      	push	{r7}
 8011e0c:	b085      	sub	sp, #20
 8011e0e:	af00      	add	r7, sp, #0
 8011e10:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	695b      	ldr	r3, [r3, #20]
 8011e16:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	699b      	ldr	r3, [r3, #24]
 8011e1c:	68fa      	ldr	r2, [r7, #12]
 8011e1e:	4013      	ands	r3, r2
 8011e20:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011e22:	68fb      	ldr	r3, [r7, #12]
}
 8011e24:	4618      	mov	r0, r3
 8011e26:	3714      	adds	r7, #20
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e2e:	4770      	bx	lr

08011e30 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011e30:	b480      	push	{r7}
 8011e32:	b085      	sub	sp, #20
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e42:	699b      	ldr	r3, [r3, #24]
 8011e44:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e4c:	69db      	ldr	r3, [r3, #28]
 8011e4e:	68ba      	ldr	r2, [r7, #8]
 8011e50:	4013      	ands	r3, r2
 8011e52:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8011e54:	68bb      	ldr	r3, [r7, #8]
 8011e56:	0c1b      	lsrs	r3, r3, #16
}
 8011e58:	4618      	mov	r0, r3
 8011e5a:	3714      	adds	r7, #20
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e62:	4770      	bx	lr

08011e64 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011e64:	b480      	push	{r7}
 8011e66:	b085      	sub	sp, #20
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e76:	699b      	ldr	r3, [r3, #24]
 8011e78:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e80:	69db      	ldr	r3, [r3, #28]
 8011e82:	68ba      	ldr	r2, [r7, #8]
 8011e84:	4013      	ands	r3, r2
 8011e86:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8011e88:	68bb      	ldr	r3, [r7, #8]
 8011e8a:	b29b      	uxth	r3, r3
}
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	3714      	adds	r7, #20
 8011e90:	46bd      	mov	sp, r7
 8011e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e96:	4770      	bx	lr

08011e98 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011e98:	b480      	push	{r7}
 8011e9a:	b085      	sub	sp, #20
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	6078      	str	r0, [r7, #4]
 8011ea0:	460b      	mov	r3, r1
 8011ea2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8011ea8:	78fb      	ldrb	r3, [r7, #3]
 8011eaa:	015a      	lsls	r2, r3, #5
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	4413      	add	r3, r2
 8011eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011eb4:	689b      	ldr	r3, [r3, #8]
 8011eb6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ebe:	695b      	ldr	r3, [r3, #20]
 8011ec0:	68ba      	ldr	r2, [r7, #8]
 8011ec2:	4013      	ands	r3, r2
 8011ec4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011ec6:	68bb      	ldr	r3, [r7, #8]
}
 8011ec8:	4618      	mov	r0, r3
 8011eca:	3714      	adds	r7, #20
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed2:	4770      	bx	lr

08011ed4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011ed4:	b480      	push	{r7}
 8011ed6:	b087      	sub	sp, #28
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	6078      	str	r0, [r7, #4]
 8011edc:	460b      	mov	r3, r1
 8011ede:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8011ee4:	697b      	ldr	r3, [r7, #20]
 8011ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011eea:	691b      	ldr	r3, [r3, #16]
 8011eec:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8011eee:	697b      	ldr	r3, [r7, #20]
 8011ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ef6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8011ef8:	78fb      	ldrb	r3, [r7, #3]
 8011efa:	f003 030f 	and.w	r3, r3, #15
 8011efe:	68fa      	ldr	r2, [r7, #12]
 8011f00:	fa22 f303 	lsr.w	r3, r2, r3
 8011f04:	01db      	lsls	r3, r3, #7
 8011f06:	b2db      	uxtb	r3, r3
 8011f08:	693a      	ldr	r2, [r7, #16]
 8011f0a:	4313      	orrs	r3, r2
 8011f0c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8011f0e:	78fb      	ldrb	r3, [r7, #3]
 8011f10:	015a      	lsls	r2, r3, #5
 8011f12:	697b      	ldr	r3, [r7, #20]
 8011f14:	4413      	add	r3, r2
 8011f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f1a:	689b      	ldr	r3, [r3, #8]
 8011f1c:	693a      	ldr	r2, [r7, #16]
 8011f1e:	4013      	ands	r3, r2
 8011f20:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011f22:	68bb      	ldr	r3, [r7, #8]
}
 8011f24:	4618      	mov	r0, r3
 8011f26:	371c      	adds	r7, #28
 8011f28:	46bd      	mov	sp, r7
 8011f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f2e:	4770      	bx	lr

08011f30 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8011f30:	b480      	push	{r7}
 8011f32:	b083      	sub	sp, #12
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	695b      	ldr	r3, [r3, #20]
 8011f3c:	f003 0301 	and.w	r3, r3, #1
}
 8011f40:	4618      	mov	r0, r3
 8011f42:	370c      	adds	r7, #12
 8011f44:	46bd      	mov	sp, r7
 8011f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f4a:	4770      	bx	lr

08011f4c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8011f4c:	b480      	push	{r7}
 8011f4e:	b085      	sub	sp, #20
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f5e:	681a      	ldr	r2, [r3, #0]
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f66:	4619      	mov	r1, r3
 8011f68:	4b09      	ldr	r3, [pc, #36]	; (8011f90 <USB_ActivateSetup+0x44>)
 8011f6a:	4013      	ands	r3, r2
 8011f6c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f74:	685b      	ldr	r3, [r3, #4]
 8011f76:	68fa      	ldr	r2, [r7, #12]
 8011f78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011f80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011f82:	2300      	movs	r3, #0
}
 8011f84:	4618      	mov	r0, r3
 8011f86:	3714      	adds	r7, #20
 8011f88:	46bd      	mov	sp, r7
 8011f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f8e:	4770      	bx	lr
 8011f90:	fffff800 	.word	0xfffff800

08011f94 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8011f94:	b480      	push	{r7}
 8011f96:	b087      	sub	sp, #28
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	60f8      	str	r0, [r7, #12]
 8011f9c:	460b      	mov	r3, r1
 8011f9e:	607a      	str	r2, [r7, #4]
 8011fa0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	333c      	adds	r3, #60	; 0x3c
 8011faa:	3304      	adds	r3, #4
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8011fb0:	693b      	ldr	r3, [r7, #16]
 8011fb2:	4a26      	ldr	r2, [pc, #152]	; (801204c <USB_EP0_OutStart+0xb8>)
 8011fb4:	4293      	cmp	r3, r2
 8011fb6:	d90a      	bls.n	8011fce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011fb8:	697b      	ldr	r3, [r7, #20]
 8011fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011fc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011fc8:	d101      	bne.n	8011fce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8011fca:	2300      	movs	r3, #0
 8011fcc:	e037      	b.n	801203e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8011fce:	697b      	ldr	r3, [r7, #20]
 8011fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fd4:	461a      	mov	r2, r3
 8011fd6:	2300      	movs	r3, #0
 8011fd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011fda:	697b      	ldr	r3, [r7, #20]
 8011fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fe0:	691b      	ldr	r3, [r3, #16]
 8011fe2:	697a      	ldr	r2, [r7, #20]
 8011fe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011fe8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011fec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8011fee:	697b      	ldr	r3, [r7, #20]
 8011ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ff4:	691b      	ldr	r3, [r3, #16]
 8011ff6:	697a      	ldr	r2, [r7, #20]
 8011ff8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011ffc:	f043 0318 	orr.w	r3, r3, #24
 8012000:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8012002:	697b      	ldr	r3, [r7, #20]
 8012004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012008:	691b      	ldr	r3, [r3, #16]
 801200a:	697a      	ldr	r2, [r7, #20]
 801200c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012010:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8012014:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8012016:	7afb      	ldrb	r3, [r7, #11]
 8012018:	2b01      	cmp	r3, #1
 801201a:	d10f      	bne.n	801203c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801201c:	697b      	ldr	r3, [r7, #20]
 801201e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012022:	461a      	mov	r2, r3
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8012028:	697b      	ldr	r3, [r7, #20]
 801202a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	697a      	ldr	r2, [r7, #20]
 8012032:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012036:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801203a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801203c:	2300      	movs	r3, #0
}
 801203e:	4618      	mov	r0, r3
 8012040:	371c      	adds	r7, #28
 8012042:	46bd      	mov	sp, r7
 8012044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012048:	4770      	bx	lr
 801204a:	bf00      	nop
 801204c:	4f54300a 	.word	0x4f54300a

08012050 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012050:	b480      	push	{r7}
 8012052:	b085      	sub	sp, #20
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8012058:	2300      	movs	r3, #0
 801205a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	3301      	adds	r3, #1
 8012060:	60fb      	str	r3, [r7, #12]
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	4a13      	ldr	r2, [pc, #76]	; (80120b4 <USB_CoreReset+0x64>)
 8012066:	4293      	cmp	r3, r2
 8012068:	d901      	bls.n	801206e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801206a:	2303      	movs	r3, #3
 801206c:	e01b      	b.n	80120a6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	691b      	ldr	r3, [r3, #16]
 8012072:	2b00      	cmp	r3, #0
 8012074:	daf2      	bge.n	801205c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8012076:	2300      	movs	r3, #0
 8012078:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	691b      	ldr	r3, [r3, #16]
 801207e:	f043 0201 	orr.w	r2, r3, #1
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	3301      	adds	r3, #1
 801208a:	60fb      	str	r3, [r7, #12]
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	4a09      	ldr	r2, [pc, #36]	; (80120b4 <USB_CoreReset+0x64>)
 8012090:	4293      	cmp	r3, r2
 8012092:	d901      	bls.n	8012098 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8012094:	2303      	movs	r3, #3
 8012096:	e006      	b.n	80120a6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	691b      	ldr	r3, [r3, #16]
 801209c:	f003 0301 	and.w	r3, r3, #1
 80120a0:	2b01      	cmp	r3, #1
 80120a2:	d0f0      	beq.n	8012086 <USB_CoreReset+0x36>

  return HAL_OK;
 80120a4:	2300      	movs	r3, #0
}
 80120a6:	4618      	mov	r0, r3
 80120a8:	3714      	adds	r7, #20
 80120aa:	46bd      	mov	sp, r7
 80120ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b0:	4770      	bx	lr
 80120b2:	bf00      	nop
 80120b4:	00030d40 	.word	0x00030d40

080120b8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80120bc:	4904      	ldr	r1, [pc, #16]	; (80120d0 <MX_FATFS_Init+0x18>)
 80120be:	4805      	ldr	r0, [pc, #20]	; (80120d4 <MX_FATFS_Init+0x1c>)
 80120c0:	f007 fe10 	bl	8019ce4 <FATFS_LinkDriver>
 80120c4:	4603      	mov	r3, r0
 80120c6:	461a      	mov	r2, r3
 80120c8:	4b03      	ldr	r3, [pc, #12]	; (80120d8 <MX_FATFS_Init+0x20>)
 80120ca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80120cc:	bf00      	nop
 80120ce:	bd80      	pop	{r7, pc}
 80120d0:	24075d5c 	.word	0x24075d5c
 80120d4:	0801ac14 	.word	0x0801ac14
 80120d8:	24075d58 	.word	0x24075d58

080120dc <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80120dc:	b480      	push	{r7}
 80120de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80120e0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 80120e2:	4618      	mov	r0, r3
 80120e4:	46bd      	mov	sp, r7
 80120e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ea:	4770      	bx	lr

080120ec <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80120ec:	b580      	push	{r7, lr}
 80120ee:	b082      	sub	sp, #8
 80120f0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80120f2:	2300      	movs	r3, #0
 80120f4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80120f6:	f000 f86b 	bl	80121d0 <BSP_SD_IsDetected>
 80120fa:	4603      	mov	r3, r0
 80120fc:	2b01      	cmp	r3, #1
 80120fe:	d001      	beq.n	8012104 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8012100:	2302      	movs	r3, #2
 8012102:	e005      	b.n	8012110 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8012104:	4804      	ldr	r0, [pc, #16]	; (8012118 <BSP_SD_Init+0x2c>)
 8012106:	f7f9 fa65 	bl	800b5d4 <HAL_SD_Init>
 801210a:	4603      	mov	r3, r0
 801210c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 801210e:	79fb      	ldrb	r3, [r7, #7]
}
 8012110:	4618      	mov	r0, r3
 8012112:	3708      	adds	r7, #8
 8012114:	46bd      	mov	sp, r7
 8012116:	bd80      	pop	{r7, pc}
 8012118:	24001438 	.word	0x24001438

0801211c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 801211c:	b580      	push	{r7, lr}
 801211e:	b088      	sub	sp, #32
 8012120:	af02      	add	r7, sp, #8
 8012122:	60f8      	str	r0, [r7, #12]
 8012124:	60b9      	str	r1, [r7, #8]
 8012126:	607a      	str	r2, [r7, #4]
 8012128:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 801212a:	2300      	movs	r3, #0
 801212c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 801212e:	683b      	ldr	r3, [r7, #0]
 8012130:	9300      	str	r3, [sp, #0]
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	68ba      	ldr	r2, [r7, #8]
 8012136:	68f9      	ldr	r1, [r7, #12]
 8012138:	4806      	ldr	r0, [pc, #24]	; (8012154 <BSP_SD_ReadBlocks+0x38>)
 801213a:	f7f9 fb69 	bl	800b810 <HAL_SD_ReadBlocks>
 801213e:	4603      	mov	r3, r0
 8012140:	2b00      	cmp	r3, #0
 8012142:	d001      	beq.n	8012148 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8012144:	2301      	movs	r3, #1
 8012146:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8012148:	7dfb      	ldrb	r3, [r7, #23]
}
 801214a:	4618      	mov	r0, r3
 801214c:	3718      	adds	r7, #24
 801214e:	46bd      	mov	sp, r7
 8012150:	bd80      	pop	{r7, pc}
 8012152:	bf00      	nop
 8012154:	24001438 	.word	0x24001438

08012158 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8012158:	b580      	push	{r7, lr}
 801215a:	b088      	sub	sp, #32
 801215c:	af02      	add	r7, sp, #8
 801215e:	60f8      	str	r0, [r7, #12]
 8012160:	60b9      	str	r1, [r7, #8]
 8012162:	607a      	str	r2, [r7, #4]
 8012164:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8012166:	2300      	movs	r3, #0
 8012168:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 801216a:	683b      	ldr	r3, [r7, #0]
 801216c:	9300      	str	r3, [sp, #0]
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	68ba      	ldr	r2, [r7, #8]
 8012172:	68f9      	ldr	r1, [r7, #12]
 8012174:	4806      	ldr	r0, [pc, #24]	; (8012190 <BSP_SD_WriteBlocks+0x38>)
 8012176:	f7f9 fcd5 	bl	800bb24 <HAL_SD_WriteBlocks>
 801217a:	4603      	mov	r3, r0
 801217c:	2b00      	cmp	r3, #0
 801217e:	d001      	beq.n	8012184 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8012180:	2301      	movs	r3, #1
 8012182:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8012184:	7dfb      	ldrb	r3, [r7, #23]
}
 8012186:	4618      	mov	r0, r3
 8012188:	3718      	adds	r7, #24
 801218a:	46bd      	mov	sp, r7
 801218c:	bd80      	pop	{r7, pc}
 801218e:	bf00      	nop
 8012190:	24001438 	.word	0x24001438

08012194 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8012194:	b580      	push	{r7, lr}
 8012196:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8012198:	4805      	ldr	r0, [pc, #20]	; (80121b0 <BSP_SD_GetCardState+0x1c>)
 801219a:	f7fa f98d 	bl	800c4b8 <HAL_SD_GetCardState>
 801219e:	4603      	mov	r3, r0
 80121a0:	2b04      	cmp	r3, #4
 80121a2:	bf14      	ite	ne
 80121a4:	2301      	movne	r3, #1
 80121a6:	2300      	moveq	r3, #0
 80121a8:	b2db      	uxtb	r3, r3
}
 80121aa:	4618      	mov	r0, r3
 80121ac:	bd80      	pop	{r7, pc}
 80121ae:	bf00      	nop
 80121b0:	24001438 	.word	0x24001438

080121b4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80121b4:	b580      	push	{r7, lr}
 80121b6:	b082      	sub	sp, #8
 80121b8:	af00      	add	r7, sp, #0
 80121ba:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80121bc:	6879      	ldr	r1, [r7, #4]
 80121be:	4803      	ldr	r0, [pc, #12]	; (80121cc <BSP_SD_GetCardInfo+0x18>)
 80121c0:	f7fa f8a4 	bl	800c30c <HAL_SD_GetCardInfo>
}
 80121c4:	bf00      	nop
 80121c6:	3708      	adds	r7, #8
 80121c8:	46bd      	mov	sp, r7
 80121ca:	bd80      	pop	{r7, pc}
 80121cc:	24001438 	.word	0x24001438

080121d0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80121d0:	b580      	push	{r7, lr}
 80121d2:	b082      	sub	sp, #8
 80121d4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80121d6:	2301      	movs	r3, #1
 80121d8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 80121da:	f000 f80b 	bl	80121f4 <BSP_PlatformIsDetected>
 80121de:	4603      	mov	r3, r0
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d101      	bne.n	80121e8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80121e4:	2300      	movs	r3, #0
 80121e6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80121e8:	79fb      	ldrb	r3, [r7, #7]
 80121ea:	b2db      	uxtb	r3, r3
}
 80121ec:	4618      	mov	r0, r3
 80121ee:	3708      	adds	r7, #8
 80121f0:	46bd      	mov	sp, r7
 80121f2:	bd80      	pop	{r7, pc}

080121f4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80121f4:	b580      	push	{r7, lr}
 80121f6:	b082      	sub	sp, #8
 80121f8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80121fa:	2301      	movs	r3, #1
 80121fc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80121fe:	2120      	movs	r1, #32
 8012200:	4806      	ldr	r0, [pc, #24]	; (801221c <BSP_PlatformIsDetected+0x28>)
 8012202:	f7f4 fda1 	bl	8006d48 <HAL_GPIO_ReadPin>
 8012206:	4603      	mov	r3, r0
 8012208:	2b00      	cmp	r3, #0
 801220a:	d001      	beq.n	8012210 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 801220c:	2300      	movs	r3, #0
 801220e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8012210:	79fb      	ldrb	r3, [r7, #7]
}  
 8012212:	4618      	mov	r0, r3
 8012214:	3708      	adds	r7, #8
 8012216:	46bd      	mov	sp, r7
 8012218:	bd80      	pop	{r7, pc}
 801221a:	bf00      	nop
 801221c:	58021800 	.word	0x58021800

08012220 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8012220:	b580      	push	{r7, lr}
 8012222:	b082      	sub	sp, #8
 8012224:	af00      	add	r7, sp, #0
 8012226:	4603      	mov	r3, r0
 8012228:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801222a:	4b0b      	ldr	r3, [pc, #44]	; (8012258 <SD_CheckStatus+0x38>)
 801222c:	2201      	movs	r2, #1
 801222e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8012230:	f7ff ffb0 	bl	8012194 <BSP_SD_GetCardState>
 8012234:	4603      	mov	r3, r0
 8012236:	2b00      	cmp	r3, #0
 8012238:	d107      	bne.n	801224a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801223a:	4b07      	ldr	r3, [pc, #28]	; (8012258 <SD_CheckStatus+0x38>)
 801223c:	781b      	ldrb	r3, [r3, #0]
 801223e:	b2db      	uxtb	r3, r3
 8012240:	f023 0301 	bic.w	r3, r3, #1
 8012244:	b2da      	uxtb	r2, r3
 8012246:	4b04      	ldr	r3, [pc, #16]	; (8012258 <SD_CheckStatus+0x38>)
 8012248:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801224a:	4b03      	ldr	r3, [pc, #12]	; (8012258 <SD_CheckStatus+0x38>)
 801224c:	781b      	ldrb	r3, [r3, #0]
 801224e:	b2db      	uxtb	r3, r3
}
 8012250:	4618      	mov	r0, r3
 8012252:	3708      	adds	r7, #8
 8012254:	46bd      	mov	sp, r7
 8012256:	bd80      	pop	{r7, pc}
 8012258:	24000019 	.word	0x24000019

0801225c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801225c:	b580      	push	{r7, lr}
 801225e:	b082      	sub	sp, #8
 8012260:	af00      	add	r7, sp, #0
 8012262:	4603      	mov	r3, r0
 8012264:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 8012266:	4b0b      	ldr	r3, [pc, #44]	; (8012294 <SD_initialize+0x38>)
 8012268:	2201      	movs	r2, #1
 801226a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801226c:	f7ff ff3e 	bl	80120ec <BSP_SD_Init>
 8012270:	4603      	mov	r3, r0
 8012272:	2b00      	cmp	r3, #0
 8012274:	d107      	bne.n	8012286 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8012276:	79fb      	ldrb	r3, [r7, #7]
 8012278:	4618      	mov	r0, r3
 801227a:	f7ff ffd1 	bl	8012220 <SD_CheckStatus>
 801227e:	4603      	mov	r3, r0
 8012280:	461a      	mov	r2, r3
 8012282:	4b04      	ldr	r3, [pc, #16]	; (8012294 <SD_initialize+0x38>)
 8012284:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8012286:	4b03      	ldr	r3, [pc, #12]	; (8012294 <SD_initialize+0x38>)
 8012288:	781b      	ldrb	r3, [r3, #0]
 801228a:	b2db      	uxtb	r3, r3
}
 801228c:	4618      	mov	r0, r3
 801228e:	3708      	adds	r7, #8
 8012290:	46bd      	mov	sp, r7
 8012292:	bd80      	pop	{r7, pc}
 8012294:	24000019 	.word	0x24000019

08012298 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8012298:	b580      	push	{r7, lr}
 801229a:	b082      	sub	sp, #8
 801229c:	af00      	add	r7, sp, #0
 801229e:	4603      	mov	r3, r0
 80122a0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80122a2:	79fb      	ldrb	r3, [r7, #7]
 80122a4:	4618      	mov	r0, r3
 80122a6:	f7ff ffbb 	bl	8012220 <SD_CheckStatus>
 80122aa:	4603      	mov	r3, r0
}
 80122ac:	4618      	mov	r0, r3
 80122ae:	3708      	adds	r7, #8
 80122b0:	46bd      	mov	sp, r7
 80122b2:	bd80      	pop	{r7, pc}

080122b4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b086      	sub	sp, #24
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	60b9      	str	r1, [r7, #8]
 80122bc:	607a      	str	r2, [r7, #4]
 80122be:	603b      	str	r3, [r7, #0]
 80122c0:	4603      	mov	r3, r0
 80122c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80122c4:	2301      	movs	r3, #1
 80122c6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80122c8:	f04f 33ff 	mov.w	r3, #4294967295
 80122cc:	683a      	ldr	r2, [r7, #0]
 80122ce:	6879      	ldr	r1, [r7, #4]
 80122d0:	68b8      	ldr	r0, [r7, #8]
 80122d2:	f7ff ff23 	bl	801211c <BSP_SD_ReadBlocks>
 80122d6:	4603      	mov	r3, r0
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d107      	bne.n	80122ec <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80122dc:	bf00      	nop
 80122de:	f7ff ff59 	bl	8012194 <BSP_SD_GetCardState>
 80122e2:	4603      	mov	r3, r0
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d1fa      	bne.n	80122de <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80122e8:	2300      	movs	r3, #0
 80122ea:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80122ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80122ee:	4618      	mov	r0, r3
 80122f0:	3718      	adds	r7, #24
 80122f2:	46bd      	mov	sp, r7
 80122f4:	bd80      	pop	{r7, pc}

080122f6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80122f6:	b580      	push	{r7, lr}
 80122f8:	b086      	sub	sp, #24
 80122fa:	af00      	add	r7, sp, #0
 80122fc:	60b9      	str	r1, [r7, #8]
 80122fe:	607a      	str	r2, [r7, #4]
 8012300:	603b      	str	r3, [r7, #0]
 8012302:	4603      	mov	r3, r0
 8012304:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012306:	2301      	movs	r3, #1
 8012308:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 801230a:	f04f 33ff 	mov.w	r3, #4294967295
 801230e:	683a      	ldr	r2, [r7, #0]
 8012310:	6879      	ldr	r1, [r7, #4]
 8012312:	68b8      	ldr	r0, [r7, #8]
 8012314:	f7ff ff20 	bl	8012158 <BSP_SD_WriteBlocks>
 8012318:	4603      	mov	r3, r0
 801231a:	2b00      	cmp	r3, #0
 801231c:	d107      	bne.n	801232e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 801231e:	bf00      	nop
 8012320:	f7ff ff38 	bl	8012194 <BSP_SD_GetCardState>
 8012324:	4603      	mov	r3, r0
 8012326:	2b00      	cmp	r3, #0
 8012328:	d1fa      	bne.n	8012320 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 801232a:	2300      	movs	r3, #0
 801232c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 801232e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012330:	4618      	mov	r0, r3
 8012332:	3718      	adds	r7, #24
 8012334:	46bd      	mov	sp, r7
 8012336:	bd80      	pop	{r7, pc}

08012338 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8012338:	b580      	push	{r7, lr}
 801233a:	b08c      	sub	sp, #48	; 0x30
 801233c:	af00      	add	r7, sp, #0
 801233e:	4603      	mov	r3, r0
 8012340:	603a      	str	r2, [r7, #0]
 8012342:	71fb      	strb	r3, [r7, #7]
 8012344:	460b      	mov	r3, r1
 8012346:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8012348:	2301      	movs	r3, #1
 801234a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801234e:	4b25      	ldr	r3, [pc, #148]	; (80123e4 <SD_ioctl+0xac>)
 8012350:	781b      	ldrb	r3, [r3, #0]
 8012352:	b2db      	uxtb	r3, r3
 8012354:	f003 0301 	and.w	r3, r3, #1
 8012358:	2b00      	cmp	r3, #0
 801235a:	d001      	beq.n	8012360 <SD_ioctl+0x28>
 801235c:	2303      	movs	r3, #3
 801235e:	e03c      	b.n	80123da <SD_ioctl+0xa2>

  switch (cmd)
 8012360:	79bb      	ldrb	r3, [r7, #6]
 8012362:	2b03      	cmp	r3, #3
 8012364:	d834      	bhi.n	80123d0 <SD_ioctl+0x98>
 8012366:	a201      	add	r2, pc, #4	; (adr r2, 801236c <SD_ioctl+0x34>)
 8012368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801236c:	0801237d 	.word	0x0801237d
 8012370:	08012385 	.word	0x08012385
 8012374:	0801239d 	.word	0x0801239d
 8012378:	080123b7 	.word	0x080123b7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801237c:	2300      	movs	r3, #0
 801237e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012382:	e028      	b.n	80123d6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8012384:	f107 0308 	add.w	r3, r7, #8
 8012388:	4618      	mov	r0, r3
 801238a:	f7ff ff13 	bl	80121b4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801238e:	6a3a      	ldr	r2, [r7, #32]
 8012390:	683b      	ldr	r3, [r7, #0]
 8012392:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012394:	2300      	movs	r3, #0
 8012396:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801239a:	e01c      	b.n	80123d6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801239c:	f107 0308 	add.w	r3, r7, #8
 80123a0:	4618      	mov	r0, r3
 80123a2:	f7ff ff07 	bl	80121b4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80123a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123a8:	b29a      	uxth	r2, r3
 80123aa:	683b      	ldr	r3, [r7, #0]
 80123ac:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80123ae:	2300      	movs	r3, #0
 80123b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80123b4:	e00f      	b.n	80123d6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80123b6:	f107 0308 	add.w	r3, r7, #8
 80123ba:	4618      	mov	r0, r3
 80123bc:	f7ff fefa 	bl	80121b4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80123c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123c2:	0a5a      	lsrs	r2, r3, #9
 80123c4:	683b      	ldr	r3, [r7, #0]
 80123c6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80123c8:	2300      	movs	r3, #0
 80123ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80123ce:	e002      	b.n	80123d6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80123d0:	2304      	movs	r3, #4
 80123d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80123d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80123da:	4618      	mov	r0, r3
 80123dc:	3730      	adds	r7, #48	; 0x30
 80123de:	46bd      	mov	sp, r7
 80123e0:	bd80      	pop	{r7, pc}
 80123e2:	bf00      	nop
 80123e4:	24000019 	.word	0x24000019

080123e8 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80123e8:	b580      	push	{r7, lr}
 80123ea:	b082      	sub	sp, #8
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	6078      	str	r0, [r7, #4]
 80123f0:	460b      	mov	r3, r1
 80123f2:	70fb      	strb	r3, [r7, #3]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	7c1b      	ldrb	r3, [r3, #16]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d115      	bne.n	8012428 <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80123fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012400:	2202      	movs	r2, #2
 8012402:	2101      	movs	r1, #1
 8012404:	6878      	ldr	r0, [r7, #4]
 8012406:	f008 f8e7 	bl	801a5d8 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	2201      	movs	r2, #1
 801240e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8012412:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012416:	2202      	movs	r2, #2
 8012418:	2181      	movs	r1, #129	; 0x81
 801241a:	6878      	ldr	r0, [r7, #4]
 801241c:	f008 f8dc 	bl	801a5d8 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	2201      	movs	r2, #1
 8012424:	62da      	str	r2, [r3, #44]	; 0x2c
 8012426:	e012      	b.n	801244e <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8012428:	2340      	movs	r3, #64	; 0x40
 801242a:	2202      	movs	r2, #2
 801242c:	2101      	movs	r1, #1
 801242e:	6878      	ldr	r0, [r7, #4]
 8012430:	f008 f8d2 	bl	801a5d8 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	2201      	movs	r2, #1
 8012438:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801243c:	2340      	movs	r3, #64	; 0x40
 801243e:	2202      	movs	r2, #2
 8012440:	2181      	movs	r1, #129	; 0x81
 8012442:	6878      	ldr	r0, [r7, #4]
 8012444:	f008 f8c8 	bl	801a5d8 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	2201      	movs	r2, #1
 801244c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 801244e:	f44f 701b 	mov.w	r0, #620	; 0x26c
 8012452:	f008 fa5d 	bl	801a910 <malloc>
 8012456:	4603      	mov	r3, r0
 8012458:	461a      	mov	r2, r3
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012466:	2b00      	cmp	r3, #0
 8012468:	d101      	bne.n	801246e <USBD_MSC_Init+0x86>
  {
    return USBD_FAIL;
 801246a:	2302      	movs	r3, #2
 801246c:	e003      	b.n	8012476 <USBD_MSC_Init+0x8e>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 801246e:	6878      	ldr	r0, [r7, #4]
 8012470:	f000 f9db 	bl	801282a <MSC_BOT_Init>

  return USBD_OK;
 8012474:	2300      	movs	r3, #0
}
 8012476:	4618      	mov	r0, r3
 8012478:	3708      	adds	r7, #8
 801247a:	46bd      	mov	sp, r7
 801247c:	bd80      	pop	{r7, pc}

0801247e <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 801247e:	b580      	push	{r7, lr}
 8012480:	b082      	sub	sp, #8
 8012482:	af00      	add	r7, sp, #0
 8012484:	6078      	str	r0, [r7, #4]
 8012486:	460b      	mov	r3, r1
 8012488:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 801248a:	2101      	movs	r1, #1
 801248c:	6878      	ldr	r0, [r7, #4]
 801248e:	f008 f8c9 	bl	801a624 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	2200      	movs	r2, #0
 8012496:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 801249a:	2181      	movs	r1, #129	; 0x81
 801249c:	6878      	ldr	r0, [r7, #4]
 801249e:	f008 f8c1 	bl	801a624 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	2200      	movs	r2, #0
 80124a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 80124a8:	6878      	ldr	r0, [r7, #4]
 80124aa:	f000 fa08 	bl	80128be <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d009      	beq.n	80124cc <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80124be:	4618      	mov	r0, r3
 80124c0:	f008 fa2e 	bl	801a920 <free>
    pdev->pClassData  = NULL;
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	2200      	movs	r2, #0
 80124c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 80124cc:	2300      	movs	r3, #0
}
 80124ce:	4618      	mov	r0, r3
 80124d0:	3708      	adds	r7, #8
 80124d2:	46bd      	mov	sp, r7
 80124d4:	bd80      	pop	{r7, pc}
	...

080124d8 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80124d8:	b580      	push	{r7, lr}
 80124da:	b086      	sub	sp, #24
 80124dc:	af00      	add	r7, sp, #0
 80124de:	6078      	str	r0, [r7, #4]
 80124e0:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80124e8:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 80124ea:	2300      	movs	r3, #0
 80124ec:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80124ee:	2300      	movs	r3, #0
 80124f0:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80124f2:	683b      	ldr	r3, [r7, #0]
 80124f4:	781b      	ldrb	r3, [r3, #0]
 80124f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d04d      	beq.n	801259a <USBD_MSC_Setup+0xc2>
 80124fe:	2b20      	cmp	r3, #32
 8012500:	f040 8113 	bne.w	801272a <USBD_MSC_Setup+0x252>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8012504:	683b      	ldr	r3, [r7, #0]
 8012506:	785b      	ldrb	r3, [r3, #1]
 8012508:	2bfe      	cmp	r3, #254	; 0xfe
 801250a:	d002      	beq.n	8012512 <USBD_MSC_Setup+0x3a>
 801250c:	2bff      	cmp	r3, #255	; 0xff
 801250e:	d024      	beq.n	801255a <USBD_MSC_Setup+0x82>
 8012510:	e03b      	b.n	801258a <USBD_MSC_Setup+0xb2>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8012512:	683b      	ldr	r3, [r7, #0]
 8012514:	885b      	ldrh	r3, [r3, #2]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d118      	bne.n	801254c <USBD_MSC_Setup+0x74>
 801251a:	683b      	ldr	r3, [r7, #0]
 801251c:	88db      	ldrh	r3, [r3, #6]
 801251e:	2b01      	cmp	r3, #1
 8012520:	d114      	bne.n	801254c <USBD_MSC_Setup+0x74>
              ((req->bmRequest & 0x80U) == 0x80U))
 8012522:	683b      	ldr	r3, [r7, #0]
 8012524:	781b      	ldrb	r3, [r3, #0]
 8012526:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8012528:	2b00      	cmp	r3, #0
 801252a:	da0f      	bge.n	801254c <USBD_MSC_Setup+0x74>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012532:	699b      	ldr	r3, [r3, #24]
 8012534:	4798      	blx	r3
 8012536:	4603      	mov	r3, r0
 8012538:	461a      	mov	r2, r3
 801253a:	693b      	ldr	r3, [r7, #16]
 801253c:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 801253e:	693b      	ldr	r3, [r7, #16]
 8012540:	2201      	movs	r2, #1
 8012542:	4619      	mov	r1, r3
 8012544:	6878      	ldr	r0, [r7, #4]
 8012546:	f002 f9e3 	bl	8014910 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801254a:	e025      	b.n	8012598 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 801254c:	6839      	ldr	r1, [r7, #0]
 801254e:	6878      	ldr	r0, [r7, #4]
 8012550:	f002 f973 	bl	801483a <USBD_CtlError>
            ret = USBD_FAIL;
 8012554:	2302      	movs	r3, #2
 8012556:	75fb      	strb	r3, [r7, #23]
          break;
 8012558:	e01e      	b.n	8012598 <USBD_MSC_Setup+0xc0>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801255a:	683b      	ldr	r3, [r7, #0]
 801255c:	885b      	ldrh	r3, [r3, #2]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d10c      	bne.n	801257c <USBD_MSC_Setup+0xa4>
 8012562:	683b      	ldr	r3, [r7, #0]
 8012564:	88db      	ldrh	r3, [r3, #6]
 8012566:	2b00      	cmp	r3, #0
 8012568:	d108      	bne.n	801257c <USBD_MSC_Setup+0xa4>
              ((req->bmRequest & 0x80U) != 0x80U))
 801256a:	683b      	ldr	r3, [r7, #0]
 801256c:	781b      	ldrb	r3, [r3, #0]
 801256e:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8012570:	2b00      	cmp	r3, #0
 8012572:	db03      	blt.n	801257c <USBD_MSC_Setup+0xa4>
          {
            MSC_BOT_Reset(pdev);
 8012574:	6878      	ldr	r0, [r7, #4]
 8012576:	f000 f988 	bl	801288a <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801257a:	e00d      	b.n	8012598 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 801257c:	6839      	ldr	r1, [r7, #0]
 801257e:	6878      	ldr	r0, [r7, #4]
 8012580:	f002 f95b 	bl	801483a <USBD_CtlError>
            ret = USBD_FAIL;
 8012584:	2302      	movs	r3, #2
 8012586:	75fb      	strb	r3, [r7, #23]
          break;
 8012588:	e006      	b.n	8012598 <USBD_MSC_Setup+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801258a:	6839      	ldr	r1, [r7, #0]
 801258c:	6878      	ldr	r0, [r7, #4]
 801258e:	f002 f954 	bl	801483a <USBD_CtlError>
          ret = USBD_FAIL;
 8012592:	2302      	movs	r3, #2
 8012594:	75fb      	strb	r3, [r7, #23]
          break;
 8012596:	bf00      	nop
      }
      break;
 8012598:	e0ce      	b.n	8012738 <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801259a:	683b      	ldr	r3, [r7, #0]
 801259c:	785b      	ldrb	r3, [r3, #1]
 801259e:	2b0b      	cmp	r3, #11
 80125a0:	f200 80bb 	bhi.w	801271a <USBD_MSC_Setup+0x242>
 80125a4:	a201      	add	r2, pc, #4	; (adr r2, 80125ac <USBD_MSC_Setup+0xd4>)
 80125a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125aa:	bf00      	nop
 80125ac:	080125dd 	.word	0x080125dd
 80125b0:	08012653 	.word	0x08012653
 80125b4:	0801271b 	.word	0x0801271b
 80125b8:	0801271b 	.word	0x0801271b
 80125bc:	0801271b 	.word	0x0801271b
 80125c0:	0801271b 	.word	0x0801271b
 80125c4:	0801271b 	.word	0x0801271b
 80125c8:	0801271b 	.word	0x0801271b
 80125cc:	0801271b 	.word	0x0801271b
 80125d0:	0801271b 	.word	0x0801271b
 80125d4:	08012605 	.word	0x08012605
 80125d8:	0801262d 	.word	0x0801262d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80125e2:	2b03      	cmp	r3, #3
 80125e4:	d107      	bne.n	80125f6 <USBD_MSC_Setup+0x11e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80125e6:	f107 030e 	add.w	r3, r7, #14
 80125ea:	2202      	movs	r2, #2
 80125ec:	4619      	mov	r1, r3
 80125ee:	6878      	ldr	r0, [r7, #4]
 80125f0:	f002 f98e 	bl	8014910 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80125f4:	e098      	b.n	8012728 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 80125f6:	6839      	ldr	r1, [r7, #0]
 80125f8:	6878      	ldr	r0, [r7, #4]
 80125fa:	f002 f91e 	bl	801483a <USBD_CtlError>
            ret = USBD_FAIL;
 80125fe:	2302      	movs	r3, #2
 8012600:	75fb      	strb	r3, [r7, #23]
          break;
 8012602:	e091      	b.n	8012728 <USBD_MSC_Setup+0x250>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801260a:	2b03      	cmp	r3, #3
 801260c:	d107      	bne.n	801261e <USBD_MSC_Setup+0x146>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 801260e:	693b      	ldr	r3, [r7, #16]
 8012610:	3304      	adds	r3, #4
 8012612:	2201      	movs	r2, #1
 8012614:	4619      	mov	r1, r3
 8012616:	6878      	ldr	r0, [r7, #4]
 8012618:	f002 f97a 	bl	8014910 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801261c:	e084      	b.n	8012728 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 801261e:	6839      	ldr	r1, [r7, #0]
 8012620:	6878      	ldr	r0, [r7, #4]
 8012622:	f002 f90a 	bl	801483a <USBD_CtlError>
            ret = USBD_FAIL;
 8012626:	2302      	movs	r3, #2
 8012628:	75fb      	strb	r3, [r7, #23]
          break;
 801262a:	e07d      	b.n	8012728 <USBD_MSC_Setup+0x250>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012632:	2b03      	cmp	r3, #3
 8012634:	d106      	bne.n	8012644 <USBD_MSC_Setup+0x16c>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8012636:	683b      	ldr	r3, [r7, #0]
 8012638:	885b      	ldrh	r3, [r3, #2]
 801263a:	b2db      	uxtb	r3, r3
 801263c:	461a      	mov	r2, r3
 801263e:	693b      	ldr	r3, [r7, #16]
 8012640:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012642:	e071      	b.n	8012728 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8012644:	6839      	ldr	r1, [r7, #0]
 8012646:	6878      	ldr	r0, [r7, #4]
 8012648:	f002 f8f7 	bl	801483a <USBD_CtlError>
            ret = USBD_FAIL;
 801264c:	2302      	movs	r3, #2
 801264e:	75fb      	strb	r3, [r7, #23]
          break;
 8012650:	e06a      	b.n	8012728 <USBD_MSC_Setup+0x250>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8012652:	683b      	ldr	r3, [r7, #0]
 8012654:	889b      	ldrh	r3, [r3, #4]
 8012656:	b2db      	uxtb	r3, r3
 8012658:	4619      	mov	r1, r3
 801265a:	6878      	ldr	r0, [r7, #4]
 801265c:	f008 f801 	bl	801a662 <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 8012660:	683b      	ldr	r3, [r7, #0]
 8012662:	889b      	ldrh	r3, [r3, #4]
 8012664:	b2db      	uxtb	r3, r3
 8012666:	4619      	mov	r1, r3
 8012668:	6878      	ldr	r0, [r7, #4]
 801266a:	f007 ffdb 	bl	801a624 <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 801266e:	683b      	ldr	r3, [r7, #0]
 8012670:	889b      	ldrh	r3, [r3, #4]
 8012672:	b25b      	sxtb	r3, r3
 8012674:	2b00      	cmp	r3, #0
 8012676:	da23      	bge.n	80126c0 <USBD_MSC_Setup+0x1e8>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8012678:	683b      	ldr	r3, [r7, #0]
 801267a:	889b      	ldrh	r3, [r3, #4]
 801267c:	b2db      	uxtb	r3, r3
 801267e:	f003 020f 	and.w	r2, r3, #15
 8012682:	6879      	ldr	r1, [r7, #4]
 8012684:	4613      	mov	r3, r2
 8012686:	009b      	lsls	r3, r3, #2
 8012688:	4413      	add	r3, r2
 801268a:	009b      	lsls	r3, r3, #2
 801268c:	440b      	add	r3, r1
 801268e:	3318      	adds	r3, #24
 8012690:	2200      	movs	r2, #0
 8012692:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	7c1b      	ldrb	r3, [r3, #16]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d107      	bne.n	80126ac <USBD_MSC_Setup+0x1d4>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 801269c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80126a0:	2202      	movs	r2, #2
 80126a2:	2181      	movs	r1, #129	; 0x81
 80126a4:	6878      	ldr	r0, [r7, #4]
 80126a6:	f007 ff97 	bl	801a5d8 <USBD_LL_OpenEP>
 80126aa:	e005      	b.n	80126b8 <USBD_MSC_Setup+0x1e0>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 80126ac:	2340      	movs	r3, #64	; 0x40
 80126ae:	2202      	movs	r2, #2
 80126b0:	2181      	movs	r1, #129	; 0x81
 80126b2:	6878      	ldr	r0, [r7, #4]
 80126b4:	f007 ff90 	bl	801a5d8 <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	2201      	movs	r2, #1
 80126bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80126be:	e024      	b.n	801270a <USBD_MSC_Setup+0x232>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 80126c0:	683b      	ldr	r3, [r7, #0]
 80126c2:	889b      	ldrh	r3, [r3, #4]
 80126c4:	b2db      	uxtb	r3, r3
 80126c6:	f003 020f 	and.w	r2, r3, #15
 80126ca:	6879      	ldr	r1, [r7, #4]
 80126cc:	4613      	mov	r3, r2
 80126ce:	009b      	lsls	r3, r3, #2
 80126d0:	4413      	add	r3, r2
 80126d2:	009b      	lsls	r3, r3, #2
 80126d4:	440b      	add	r3, r1
 80126d6:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80126da:	2200      	movs	r2, #0
 80126dc:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	7c1b      	ldrb	r3, [r3, #16]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d107      	bne.n	80126f6 <USBD_MSC_Setup+0x21e>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 80126e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80126ea:	2202      	movs	r2, #2
 80126ec:	2101      	movs	r1, #1
 80126ee:	6878      	ldr	r0, [r7, #4]
 80126f0:	f007 ff72 	bl	801a5d8 <USBD_LL_OpenEP>
 80126f4:	e005      	b.n	8012702 <USBD_MSC_Setup+0x22a>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 80126f6:	2340      	movs	r3, #64	; 0x40
 80126f8:	2202      	movs	r2, #2
 80126fa:	2101      	movs	r1, #1
 80126fc:	6878      	ldr	r0, [r7, #4]
 80126fe:	f007 ff6b 	bl	801a5d8 <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	2201      	movs	r2, #1
 8012706:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801270a:	683b      	ldr	r3, [r7, #0]
 801270c:	889b      	ldrh	r3, [r3, #4]
 801270e:	b2db      	uxtb	r3, r3
 8012710:	4619      	mov	r1, r3
 8012712:	6878      	ldr	r0, [r7, #4]
 8012714:	f000 fa52 	bl	8012bbc <MSC_BOT_CplClrFeature>
          break;
 8012718:	e006      	b.n	8012728 <USBD_MSC_Setup+0x250>

        default:
          USBD_CtlError(pdev, req);
 801271a:	6839      	ldr	r1, [r7, #0]
 801271c:	6878      	ldr	r0, [r7, #4]
 801271e:	f002 f88c 	bl	801483a <USBD_CtlError>
          ret = USBD_FAIL;
 8012722:	2302      	movs	r3, #2
 8012724:	75fb      	strb	r3, [r7, #23]
          break;
 8012726:	bf00      	nop
      }
      break;
 8012728:	e006      	b.n	8012738 <USBD_MSC_Setup+0x260>

    default:
      USBD_CtlError(pdev, req);
 801272a:	6839      	ldr	r1, [r7, #0]
 801272c:	6878      	ldr	r0, [r7, #4]
 801272e:	f002 f884 	bl	801483a <USBD_CtlError>
      ret = USBD_FAIL;
 8012732:	2302      	movs	r3, #2
 8012734:	75fb      	strb	r3, [r7, #23]
      break;
 8012736:	bf00      	nop
  }

  return ret;
 8012738:	7dfb      	ldrb	r3, [r7, #23]
}
 801273a:	4618      	mov	r0, r3
 801273c:	3718      	adds	r7, #24
 801273e:	46bd      	mov	sp, r7
 8012740:	bd80      	pop	{r7, pc}
 8012742:	bf00      	nop

08012744 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012744:	b580      	push	{r7, lr}
 8012746:	b082      	sub	sp, #8
 8012748:	af00      	add	r7, sp, #0
 801274a:	6078      	str	r0, [r7, #4]
 801274c:	460b      	mov	r3, r1
 801274e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8012750:	78fb      	ldrb	r3, [r7, #3]
 8012752:	4619      	mov	r1, r3
 8012754:	6878      	ldr	r0, [r7, #4]
 8012756:	f000 f8c3 	bl	80128e0 <MSC_BOT_DataIn>

  return USBD_OK;
 801275a:	2300      	movs	r3, #0
}
 801275c:	4618      	mov	r0, r3
 801275e:	3708      	adds	r7, #8
 8012760:	46bd      	mov	sp, r7
 8012762:	bd80      	pop	{r7, pc}

08012764 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012764:	b580      	push	{r7, lr}
 8012766:	b082      	sub	sp, #8
 8012768:	af00      	add	r7, sp, #0
 801276a:	6078      	str	r0, [r7, #4]
 801276c:	460b      	mov	r3, r1
 801276e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8012770:	78fb      	ldrb	r3, [r7, #3]
 8012772:	4619      	mov	r1, r3
 8012774:	6878      	ldr	r0, [r7, #4]
 8012776:	f000 f8e4 	bl	8012942 <MSC_BOT_DataOut>

  return USBD_OK;
 801277a:	2300      	movs	r3, #0
}
 801277c:	4618      	mov	r0, r3
 801277e:	3708      	adds	r7, #8
 8012780:	46bd      	mov	sp, r7
 8012782:	bd80      	pop	{r7, pc}

08012784 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8012784:	b480      	push	{r7}
 8012786:	b083      	sub	sp, #12
 8012788:	af00      	add	r7, sp, #0
 801278a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	2220      	movs	r2, #32
 8012790:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8012792:	4b03      	ldr	r3, [pc, #12]	; (80127a0 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8012794:	4618      	mov	r0, r3
 8012796:	370c      	adds	r7, #12
 8012798:	46bd      	mov	sp, r7
 801279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801279e:	4770      	bx	lr
 80127a0:	24000054 	.word	0x24000054

080127a4 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80127a4:	b480      	push	{r7}
 80127a6:	b083      	sub	sp, #12
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	2220      	movs	r2, #32
 80127b0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 80127b2:	4b03      	ldr	r3, [pc, #12]	; (80127c0 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 80127b4:	4618      	mov	r0, r3
 80127b6:	370c      	adds	r7, #12
 80127b8:	46bd      	mov	sp, r7
 80127ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127be:	4770      	bx	lr
 80127c0:	24000074 	.word	0x24000074

080127c4 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80127c4:	b480      	push	{r7}
 80127c6:	b083      	sub	sp, #12
 80127c8:	af00      	add	r7, sp, #0
 80127ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	2220      	movs	r2, #32
 80127d0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 80127d2:	4b03      	ldr	r3, [pc, #12]	; (80127e0 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 80127d4:	4618      	mov	r0, r3
 80127d6:	370c      	adds	r7, #12
 80127d8:	46bd      	mov	sp, r7
 80127da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127de:	4770      	bx	lr
 80127e0:	24000094 	.word	0x24000094

080127e4 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80127e4:	b480      	push	{r7}
 80127e6:	b083      	sub	sp, #12
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	220a      	movs	r2, #10
 80127f0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80127f2:	4b03      	ldr	r3, [pc, #12]	; (8012800 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80127f4:	4618      	mov	r0, r3
 80127f6:	370c      	adds	r7, #12
 80127f8:	46bd      	mov	sp, r7
 80127fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127fe:	4770      	bx	lr
 8012800:	240000b4 	.word	0x240000b4

08012804 <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 8012804:	b480      	push	{r7}
 8012806:	b083      	sub	sp, #12
 8012808:	af00      	add	r7, sp, #0
 801280a:	6078      	str	r0, [r7, #4]
 801280c:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 801280e:	683b      	ldr	r3, [r7, #0]
 8012810:	2b00      	cmp	r3, #0
 8012812:	d003      	beq.n	801281c <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	683a      	ldr	r2, [r7, #0]
 8012818:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 801281c:	2300      	movs	r3, #0
}
 801281e:	4618      	mov	r0, r3
 8012820:	370c      	adds	r7, #12
 8012822:	46bd      	mov	sp, r7
 8012824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012828:	4770      	bx	lr

0801282a <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 801282a:	b580      	push	{r7, lr}
 801282c:	b084      	sub	sp, #16
 801282e:	af00      	add	r7, sp, #0
 8012830:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012838:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	2200      	movs	r2, #0
 801283e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	2200      	movs	r2, #0
 8012844:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	2200      	movs	r2, #0
 801284a:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	2200      	movs	r2, #0
 8012852:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	2000      	movs	r0, #0
 8012860:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8012862:	2101      	movs	r1, #1
 8012864:	6878      	ldr	r0, [r7, #4]
 8012866:	f007 fefc 	bl	801a662 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 801286a:	2181      	movs	r1, #129	; 0x81
 801286c:	6878      	ldr	r0, [r7, #4]
 801286e:	f007 fef8 	bl	801a662 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8012878:	231f      	movs	r3, #31
 801287a:	2101      	movs	r1, #1
 801287c:	6878      	ldr	r0, [r7, #4]
 801287e:	f007 ffbb 	bl	801a7f8 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8012882:	bf00      	nop
 8012884:	3710      	adds	r7, #16
 8012886:	46bd      	mov	sp, r7
 8012888:	bd80      	pop	{r7, pc}

0801288a <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 801288a:	b580      	push	{r7, lr}
 801288c:	b084      	sub	sp, #16
 801288e:	af00      	add	r7, sp, #0
 8012890:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012898:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	2200      	movs	r2, #0
 801289e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	2201      	movs	r2, #1
 80128a4:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 80128ac:	231f      	movs	r3, #31
 80128ae:	2101      	movs	r1, #1
 80128b0:	6878      	ldr	r0, [r7, #4]
 80128b2:	f007 ffa1 	bl	801a7f8 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 80128b6:	bf00      	nop
 80128b8:	3710      	adds	r7, #16
 80128ba:	46bd      	mov	sp, r7
 80128bc:	bd80      	pop	{r7, pc}

080128be <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80128be:	b480      	push	{r7}
 80128c0:	b085      	sub	sp, #20
 80128c2:	af00      	add	r7, sp, #0
 80128c4:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80128cc:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	2200      	movs	r2, #0
 80128d2:	721a      	strb	r2, [r3, #8]
}
 80128d4:	bf00      	nop
 80128d6:	3714      	adds	r7, #20
 80128d8:	46bd      	mov	sp, r7
 80128da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128de:	4770      	bx	lr

080128e0 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 80128e0:	b580      	push	{r7, lr}
 80128e2:	b084      	sub	sp, #16
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	6078      	str	r0, [r7, #4]
 80128e8:	460b      	mov	r3, r1
 80128ea:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80128f2:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	7a1b      	ldrb	r3, [r3, #8]
 80128f8:	2b02      	cmp	r3, #2
 80128fa:	d004      	beq.n	8012906 <MSC_BOT_DataIn+0x26>
 80128fc:	2b02      	cmp	r3, #2
 80128fe:	db19      	blt.n	8012934 <MSC_BOT_DataIn+0x54>
 8012900:	2b04      	cmp	r3, #4
 8012902:	dc17      	bgt.n	8012934 <MSC_BOT_DataIn+0x54>
 8012904:	e011      	b.n	801292a <MSC_BOT_DataIn+0x4a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8012912:	461a      	mov	r2, r3
 8012914:	6878      	ldr	r0, [r7, #4]
 8012916:	f000 f979 	bl	8012c0c <SCSI_ProcessCmd>
 801291a:	4603      	mov	r3, r0
 801291c:	2b00      	cmp	r3, #0
 801291e:	da0b      	bge.n	8012938 <MSC_BOT_DataIn+0x58>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8012920:	2101      	movs	r1, #1
 8012922:	6878      	ldr	r0, [r7, #4]
 8012924:	f000 f8f0 	bl	8012b08 <MSC_BOT_SendCSW>
      }
      break;
 8012928:	e006      	b.n	8012938 <MSC_BOT_DataIn+0x58>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801292a:	2100      	movs	r1, #0
 801292c:	6878      	ldr	r0, [r7, #4]
 801292e:	f000 f8eb 	bl	8012b08 <MSC_BOT_SendCSW>
      break;
 8012932:	e002      	b.n	801293a <MSC_BOT_DataIn+0x5a>

    default:
      break;
 8012934:	bf00      	nop
 8012936:	e000      	b.n	801293a <MSC_BOT_DataIn+0x5a>
      break;
 8012938:	bf00      	nop
  }
}
 801293a:	bf00      	nop
 801293c:	3710      	adds	r7, #16
 801293e:	46bd      	mov	sp, r7
 8012940:	bd80      	pop	{r7, pc}

08012942 <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 8012942:	b580      	push	{r7, lr}
 8012944:	b084      	sub	sp, #16
 8012946:	af00      	add	r7, sp, #0
 8012948:	6078      	str	r0, [r7, #4]
 801294a:	460b      	mov	r3, r1
 801294c:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012954:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	7a1b      	ldrb	r3, [r3, #8]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d002      	beq.n	8012964 <MSC_BOT_DataOut+0x22>
 801295e:	2b01      	cmp	r3, #1
 8012960:	d004      	beq.n	801296c <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8012962:	e015      	b.n	8012990 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 8012964:	6878      	ldr	r0, [r7, #4]
 8012966:	f000 f817 	bl	8012998 <MSC_BOT_CBW_Decode>
      break;
 801296a:	e011      	b.n	8012990 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8012978:	461a      	mov	r2, r3
 801297a:	6878      	ldr	r0, [r7, #4]
 801297c:	f000 f946 	bl	8012c0c <SCSI_ProcessCmd>
 8012980:	4603      	mov	r3, r0
 8012982:	2b00      	cmp	r3, #0
 8012984:	da03      	bge.n	801298e <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8012986:	2101      	movs	r1, #1
 8012988:	6878      	ldr	r0, [r7, #4]
 801298a:	f000 f8bd 	bl	8012b08 <MSC_BOT_SendCSW>
      break;
 801298e:	bf00      	nop
  }
}
 8012990:	bf00      	nop
 8012992:	3710      	adds	r7, #16
 8012994:	46bd      	mov	sp, r7
 8012996:	bd80      	pop	{r7, pc}

08012998 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 8012998:	b580      	push	{r7, lr}
 801299a:	b084      	sub	sp, #16
 801299c:	af00      	add	r7, sp, #0
 801299e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80129a6:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80129c0:	2101      	movs	r1, #1
 80129c2:	6878      	ldr	r0, [r7, #4]
 80129c4:	f007 ff3b 	bl	801a83e <USBD_LL_GetRxDataSize>
 80129c8:	4603      	mov	r3, r0
 80129ca:	2b1f      	cmp	r3, #31
 80129cc:	d114      	bne.n	80129f8 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80129d4:	4a32      	ldr	r2, [pc, #200]	; (8012aa0 <MSC_BOT_CBW_Decode+0x108>)
 80129d6:	4293      	cmp	r3, r2
 80129d8:	d10e      	bne.n	80129f8 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) ||
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80129e0:	2b01      	cmp	r3, #1
 80129e2:	d809      	bhi.n	80129f8 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
      (hmsc->cbw.bLUN > 1U) ||
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d004      	beq.n	80129f8 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 80129f4:	2b10      	cmp	r3, #16
 80129f6:	d90e      	bls.n	8012a16 <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80129fe:	2320      	movs	r3, #32
 8012a00:	2205      	movs	r2, #5
 8012a02:	6878      	ldr	r0, [r7, #4]
 8012a04:	f000 fc4b 	bl	801329e <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	2202      	movs	r2, #2
 8012a0c:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8012a0e:	6878      	ldr	r0, [r7, #4]
 8012a10:	f000 f8a6 	bl	8012b60 <MSC_BOT_Abort>
 8012a14:	e041      	b.n	8012a9a <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8012a22:	461a      	mov	r2, r3
 8012a24:	6878      	ldr	r0, [r7, #4]
 8012a26:	f000 f8f1 	bl	8012c0c <SCSI_ProcessCmd>
 8012a2a:	4603      	mov	r3, r0
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	da0c      	bge.n	8012a4a <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	7a1b      	ldrb	r3, [r3, #8]
 8012a34:	2b05      	cmp	r3, #5
 8012a36:	d104      	bne.n	8012a42 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8012a38:	2101      	movs	r1, #1
 8012a3a:	6878      	ldr	r0, [r7, #4]
 8012a3c:	f000 f864 	bl	8012b08 <MSC_BOT_SendCSW>
 8012a40:	e02b      	b.n	8012a9a <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8012a42:	6878      	ldr	r0, [r7, #4]
 8012a44:	f000 f88c 	bl	8012b60 <MSC_BOT_Abort>
 8012a48:	e027      	b.n	8012a9a <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	7a1b      	ldrb	r3, [r3, #8]
 8012a4e:	2b02      	cmp	r3, #2
 8012a50:	d022      	beq.n	8012a98 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8012a56:	2b01      	cmp	r3, #1
 8012a58:	d01e      	beq.n	8012a98 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8012a5e:	2b03      	cmp	r3, #3
 8012a60:	d01a      	beq.n	8012a98 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	895b      	ldrh	r3, [r3, #10]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d009      	beq.n	8012a7e <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	f103 010c 	add.w	r1, r3, #12
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	895b      	ldrh	r3, [r3, #10]
 8012a74:	461a      	mov	r2, r3
 8012a76:	6878      	ldr	r0, [r7, #4]
 8012a78:	f000 f814 	bl	8012aa4 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8012a7c:	e00d      	b.n	8012a9a <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	895b      	ldrh	r3, [r3, #10]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d104      	bne.n	8012a90 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8012a86:	2100      	movs	r1, #0
 8012a88:	6878      	ldr	r0, [r7, #4]
 8012a8a:	f000 f83d 	bl	8012b08 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8012a8e:	e004      	b.n	8012a9a <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8012a90:	6878      	ldr	r0, [r7, #4]
 8012a92:	f000 f865 	bl	8012b60 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8012a96:	e000      	b.n	8012a9a <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 8012a98:	bf00      	nop
    }
  }
}
 8012a9a:	3710      	adds	r7, #16
 8012a9c:	46bd      	mov	sp, r7
 8012a9e:	bd80      	pop	{r7, pc}
 8012aa0:	43425355 	.word	0x43425355

08012aa4 <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 8012aa4:	b580      	push	{r7, lr}
 8012aa6:	b086      	sub	sp, #24
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	60f8      	str	r0, [r7, #12]
 8012aac:	60b9      	str	r1, [r7, #8]
 8012aae:	4613      	mov	r3, r2
 8012ab0:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012ab8:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 8012aba:	697b      	ldr	r3, [r7, #20]
 8012abc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8012ac0:	88fb      	ldrh	r3, [r7, #6]
 8012ac2:	429a      	cmp	r2, r3
 8012ac4:	d204      	bcs.n	8012ad0 <MSC_BOT_SendData+0x2c>
 8012ac6:	697b      	ldr	r3, [r7, #20]
 8012ac8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012acc:	b29b      	uxth	r3, r3
 8012ace:	e000      	b.n	8012ad2 <MSC_BOT_SendData+0x2e>
 8012ad0:	88fb      	ldrh	r3, [r7, #6]
 8012ad2:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 8012ad4:	697b      	ldr	r3, [r7, #20]
 8012ad6:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8012ada:	88fb      	ldrh	r3, [r7, #6]
 8012adc:	1ad2      	subs	r2, r2, r3
 8012ade:	697b      	ldr	r3, [r7, #20]
 8012ae0:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8012ae4:	697b      	ldr	r3, [r7, #20]
 8012ae6:	2200      	movs	r2, #0
 8012ae8:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8012aec:	697b      	ldr	r3, [r7, #20]
 8012aee:	2204      	movs	r2, #4
 8012af0:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8012af2:	8a7b      	ldrh	r3, [r7, #18]
 8012af4:	68ba      	ldr	r2, [r7, #8]
 8012af6:	2181      	movs	r1, #129	; 0x81
 8012af8:	68f8      	ldr	r0, [r7, #12]
 8012afa:	f007 fe5a 	bl	801a7b2 <USBD_LL_Transmit>
}
 8012afe:	bf00      	nop
 8012b00:	3718      	adds	r7, #24
 8012b02:	46bd      	mov	sp, r7
 8012b04:	bd80      	pop	{r7, pc}
	...

08012b08 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 8012b08:	b580      	push	{r7, lr}
 8012b0a:	b084      	sub	sp, #16
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	6078      	str	r0, [r7, #4]
 8012b10:	460b      	mov	r3, r1
 8012b12:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012b1a:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	4a0f      	ldr	r2, [pc, #60]	; (8012b5c <MSC_BOT_SendCSW+0x54>)
 8012b20:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	78fa      	ldrb	r2, [r7, #3]
 8012b28:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	2200      	movs	r2, #0
 8012b30:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 8012b38:	230d      	movs	r3, #13
 8012b3a:	2181      	movs	r1, #129	; 0x81
 8012b3c:	6878      	ldr	r0, [r7, #4]
 8012b3e:	f007 fe38 	bl	801a7b2 <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8012b48:	231f      	movs	r3, #31
 8012b4a:	2101      	movs	r1, #1
 8012b4c:	6878      	ldr	r0, [r7, #4]
 8012b4e:	f007 fe53 	bl	801a7f8 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8012b52:	bf00      	nop
 8012b54:	3710      	adds	r7, #16
 8012b56:	46bd      	mov	sp, r7
 8012b58:	bd80      	pop	{r7, pc}
 8012b5a:	bf00      	nop
 8012b5c:	53425355 	.word	0x53425355

08012b60 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b084      	sub	sp, #16
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012b6e:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d10c      	bne.n	8012b94 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d007      	beq.n	8012b94 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d103      	bne.n	8012b94 <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8012b8c:	2101      	movs	r1, #1
 8012b8e:	6878      	ldr	r0, [r7, #4]
 8012b90:	f007 fd86 	bl	801a6a0 <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8012b94:	2181      	movs	r1, #129	; 0x81
 8012b96:	6878      	ldr	r0, [r7, #4]
 8012b98:	f007 fd82 	bl	801a6a0 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	7a5b      	ldrb	r3, [r3, #9]
 8012ba0:	2b02      	cmp	r3, #2
 8012ba2:	d107      	bne.n	8012bb4 <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8012baa:	231f      	movs	r3, #31
 8012bac:	2101      	movs	r1, #1
 8012bae:	6878      	ldr	r0, [r7, #4]
 8012bb0:	f007 fe22 	bl	801a7f8 <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 8012bb4:	bf00      	nop
 8012bb6:	3710      	adds	r7, #16
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	bd80      	pop	{r7, pc}

08012bbc <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8012bbc:	b580      	push	{r7, lr}
 8012bbe:	b084      	sub	sp, #16
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	6078      	str	r0, [r7, #4]
 8012bc4:	460b      	mov	r3, r1
 8012bc6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012bce:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	7a5b      	ldrb	r3, [r3, #9]
 8012bd4:	2b02      	cmp	r3, #2
 8012bd6:	d107      	bne.n	8012be8 <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8012bd8:	2181      	movs	r1, #129	; 0x81
 8012bda:	6878      	ldr	r0, [r7, #4]
 8012bdc:	f007 fd60 	bl	801a6a0 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	2200      	movs	r2, #0
 8012be4:	725a      	strb	r2, [r3, #9]
 8012be6:	e00d      	b.n	8012c04 <MSC_BOT_CplClrFeature+0x48>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8012be8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	da08      	bge.n	8012c02 <MSC_BOT_CplClrFeature+0x46>
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	7a5b      	ldrb	r3, [r3, #9]
 8012bf4:	2b01      	cmp	r3, #1
 8012bf6:	d004      	beq.n	8012c02 <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8012bf8:	2101      	movs	r1, #1
 8012bfa:	6878      	ldr	r0, [r7, #4]
 8012bfc:	f7ff ff84 	bl	8012b08 <MSC_BOT_SendCSW>
 8012c00:	e000      	b.n	8012c04 <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 8012c02:	bf00      	nop
  }
}
 8012c04:	3710      	adds	r7, #16
 8012c06:	46bd      	mov	sp, r7
 8012c08:	bd80      	pop	{r7, pc}
	...

08012c0c <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8012c0c:	b580      	push	{r7, lr}
 8012c0e:	b084      	sub	sp, #16
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	60f8      	str	r0, [r7, #12]
 8012c14:	460b      	mov	r3, r1
 8012c16:	607a      	str	r2, [r7, #4]
 8012c18:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	781b      	ldrb	r3, [r3, #0]
 8012c1e:	2b5a      	cmp	r3, #90	; 0x5a
 8012c20:	f200 810e 	bhi.w	8012e40 <SCSI_ProcessCmd+0x234>
 8012c24:	a201      	add	r2, pc, #4	; (adr r2, 8012c2c <SCSI_ProcessCmd+0x20>)
 8012c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c2a:	bf00      	nop
 8012c2c:	08012d99 	.word	0x08012d99
 8012c30:	08012e41 	.word	0x08012e41
 8012c34:	08012e41 	.word	0x08012e41
 8012c38:	08012da7 	.word	0x08012da7
 8012c3c:	08012e41 	.word	0x08012e41
 8012c40:	08012e41 	.word	0x08012e41
 8012c44:	08012e41 	.word	0x08012e41
 8012c48:	08012e41 	.word	0x08012e41
 8012c4c:	08012e41 	.word	0x08012e41
 8012c50:	08012e41 	.word	0x08012e41
 8012c54:	08012e41 	.word	0x08012e41
 8012c58:	08012e41 	.word	0x08012e41
 8012c5c:	08012e41 	.word	0x08012e41
 8012c60:	08012e41 	.word	0x08012e41
 8012c64:	08012e41 	.word	0x08012e41
 8012c68:	08012e41 	.word	0x08012e41
 8012c6c:	08012e41 	.word	0x08012e41
 8012c70:	08012e41 	.word	0x08012e41
 8012c74:	08012db5 	.word	0x08012db5
 8012c78:	08012e41 	.word	0x08012e41
 8012c7c:	08012e41 	.word	0x08012e41
 8012c80:	08012e41 	.word	0x08012e41
 8012c84:	08012e41 	.word	0x08012e41
 8012c88:	08012e41 	.word	0x08012e41
 8012c8c:	08012e41 	.word	0x08012e41
 8012c90:	08012e41 	.word	0x08012e41
 8012c94:	08012ddf 	.word	0x08012ddf
 8012c98:	08012dc3 	.word	0x08012dc3
 8012c9c:	08012e41 	.word	0x08012e41
 8012ca0:	08012e41 	.word	0x08012e41
 8012ca4:	08012dd1 	.word	0x08012dd1
 8012ca8:	08012e41 	.word	0x08012e41
 8012cac:	08012e41 	.word	0x08012e41
 8012cb0:	08012e41 	.word	0x08012e41
 8012cb4:	08012e41 	.word	0x08012e41
 8012cb8:	08012dfb 	.word	0x08012dfb
 8012cbc:	08012e41 	.word	0x08012e41
 8012cc0:	08012e09 	.word	0x08012e09
 8012cc4:	08012e41 	.word	0x08012e41
 8012cc8:	08012e41 	.word	0x08012e41
 8012ccc:	08012e17 	.word	0x08012e17
 8012cd0:	08012e41 	.word	0x08012e41
 8012cd4:	08012e25 	.word	0x08012e25
 8012cd8:	08012e41 	.word	0x08012e41
 8012cdc:	08012e41 	.word	0x08012e41
 8012ce0:	08012e41 	.word	0x08012e41
 8012ce4:	08012e41 	.word	0x08012e41
 8012ce8:	08012e33 	.word	0x08012e33
 8012cec:	08012e41 	.word	0x08012e41
 8012cf0:	08012e41 	.word	0x08012e41
 8012cf4:	08012e41 	.word	0x08012e41
 8012cf8:	08012e41 	.word	0x08012e41
 8012cfc:	08012e41 	.word	0x08012e41
 8012d00:	08012e41 	.word	0x08012e41
 8012d04:	08012e41 	.word	0x08012e41
 8012d08:	08012e41 	.word	0x08012e41
 8012d0c:	08012e41 	.word	0x08012e41
 8012d10:	08012e41 	.word	0x08012e41
 8012d14:	08012e41 	.word	0x08012e41
 8012d18:	08012e41 	.word	0x08012e41
 8012d1c:	08012e41 	.word	0x08012e41
 8012d20:	08012e41 	.word	0x08012e41
 8012d24:	08012e41 	.word	0x08012e41
 8012d28:	08012e41 	.word	0x08012e41
 8012d2c:	08012e41 	.word	0x08012e41
 8012d30:	08012e41 	.word	0x08012e41
 8012d34:	08012e41 	.word	0x08012e41
 8012d38:	08012e41 	.word	0x08012e41
 8012d3c:	08012e41 	.word	0x08012e41
 8012d40:	08012e41 	.word	0x08012e41
 8012d44:	08012e41 	.word	0x08012e41
 8012d48:	08012e41 	.word	0x08012e41
 8012d4c:	08012e41 	.word	0x08012e41
 8012d50:	08012e41 	.word	0x08012e41
 8012d54:	08012e41 	.word	0x08012e41
 8012d58:	08012e41 	.word	0x08012e41
 8012d5c:	08012e41 	.word	0x08012e41
 8012d60:	08012e41 	.word	0x08012e41
 8012d64:	08012e41 	.word	0x08012e41
 8012d68:	08012e41 	.word	0x08012e41
 8012d6c:	08012e41 	.word	0x08012e41
 8012d70:	08012e41 	.word	0x08012e41
 8012d74:	08012e41 	.word	0x08012e41
 8012d78:	08012e41 	.word	0x08012e41
 8012d7c:	08012e41 	.word	0x08012e41
 8012d80:	08012e41 	.word	0x08012e41
 8012d84:	08012e41 	.word	0x08012e41
 8012d88:	08012e41 	.word	0x08012e41
 8012d8c:	08012e41 	.word	0x08012e41
 8012d90:	08012e41 	.word	0x08012e41
 8012d94:	08012ded 	.word	0x08012ded
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 8012d98:	7afb      	ldrb	r3, [r7, #11]
 8012d9a:	687a      	ldr	r2, [r7, #4]
 8012d9c:	4619      	mov	r1, r3
 8012d9e:	68f8      	ldr	r0, [r7, #12]
 8012da0:	f000 f85c 	bl	8012e5c <SCSI_TestUnitReady>
      break;
 8012da4:	e055      	b.n	8012e52 <SCSI_ProcessCmd+0x246>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 8012da6:	7afb      	ldrb	r3, [r7, #11]
 8012da8:	687a      	ldr	r2, [r7, #4]
 8012daa:	4619      	mov	r1, r3
 8012dac:	68f8      	ldr	r0, [r7, #12]
 8012dae:	f000 fa0b 	bl	80131c8 <SCSI_RequestSense>
      break;
 8012db2:	e04e      	b.n	8012e52 <SCSI_ProcessCmd+0x246>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 8012db4:	7afb      	ldrb	r3, [r7, #11]
 8012db6:	687a      	ldr	r2, [r7, #4]
 8012db8:	4619      	mov	r1, r3
 8012dba:	68f8      	ldr	r0, [r7, #12]
 8012dbc:	f000 f888 	bl	8012ed0 <SCSI_Inquiry>
      break;
 8012dc0:	e047      	b.n	8012e52 <SCSI_ProcessCmd+0x246>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8012dc2:	7afb      	ldrb	r3, [r7, #11]
 8012dc4:	687a      	ldr	r2, [r7, #4]
 8012dc6:	4619      	mov	r1, r3
 8012dc8:	68f8      	ldr	r0, [r7, #12]
 8012dca:	f000 faa2 	bl	8013312 <SCSI_StartStopUnit>
      break;
 8012dce:	e040      	b.n	8012e52 <SCSI_ProcessCmd+0x246>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8012dd0:	7afb      	ldrb	r3, [r7, #11]
 8012dd2:	687a      	ldr	r2, [r7, #4]
 8012dd4:	4619      	mov	r1, r3
 8012dd6:	68f8      	ldr	r0, [r7, #12]
 8012dd8:	f000 fa9b 	bl	8013312 <SCSI_StartStopUnit>
      break;
 8012ddc:	e039      	b.n	8012e52 <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 8012dde:	7afb      	ldrb	r3, [r7, #11]
 8012de0:	687a      	ldr	r2, [r7, #4]
 8012de2:	4619      	mov	r1, r3
 8012de4:	68f8      	ldr	r0, [r7, #12]
 8012de6:	f000 f99f 	bl	8013128 <SCSI_ModeSense6>
      break;
 8012dea:	e032      	b.n	8012e52 <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 8012dec:	7afb      	ldrb	r3, [r7, #11]
 8012dee:	687a      	ldr	r2, [r7, #4]
 8012df0:	4619      	mov	r1, r3
 8012df2:	68f8      	ldr	r0, [r7, #12]
 8012df4:	f000 f9c0 	bl	8013178 <SCSI_ModeSense10>
      break;
 8012df8:	e02b      	b.n	8012e52 <SCSI_ProcessCmd+0x246>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8012dfa:	7afb      	ldrb	r3, [r7, #11]
 8012dfc:	687a      	ldr	r2, [r7, #4]
 8012dfe:	4619      	mov	r1, r3
 8012e00:	68f8      	ldr	r0, [r7, #12]
 8012e02:	f000 f92c 	bl	801305e <SCSI_ReadFormatCapacity>
      break;
 8012e06:	e024      	b.n	8012e52 <SCSI_ProcessCmd+0x246>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 8012e08:	7afb      	ldrb	r3, [r7, #11]
 8012e0a:	687a      	ldr	r2, [r7, #4]
 8012e0c:	4619      	mov	r1, r3
 8012e0e:	68f8      	ldr	r0, [r7, #12]
 8012e10:	f000 f8be 	bl	8012f90 <SCSI_ReadCapacity10>
      break;
 8012e14:	e01d      	b.n	8012e52 <SCSI_ProcessCmd+0x246>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 8012e16:	7afb      	ldrb	r3, [r7, #11]
 8012e18:	687a      	ldr	r2, [r7, #4]
 8012e1a:	4619      	mov	r1, r3
 8012e1c:	68f8      	ldr	r0, [r7, #12]
 8012e1e:	f000 fa8d 	bl	801333c <SCSI_Read10>
      break;
 8012e22:	e016      	b.n	8012e52 <SCSI_ProcessCmd+0x246>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 8012e24:	7afb      	ldrb	r3, [r7, #11]
 8012e26:	687a      	ldr	r2, [r7, #4]
 8012e28:	4619      	mov	r1, r3
 8012e2a:	68f8      	ldr	r0, [r7, #12]
 8012e2c:	f000 fb12 	bl	8013454 <SCSI_Write10>
      break;
 8012e30:	e00f      	b.n	8012e52 <SCSI_ProcessCmd+0x246>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 8012e32:	7afb      	ldrb	r3, [r7, #11]
 8012e34:	687a      	ldr	r2, [r7, #4]
 8012e36:	4619      	mov	r1, r3
 8012e38:	68f8      	ldr	r0, [r7, #12]
 8012e3a:	f000 fbbb 	bl	80135b4 <SCSI_Verify10>
      break;
 8012e3e:	e008      	b.n	8012e52 <SCSI_ProcessCmd+0x246>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8012e40:	7af9      	ldrb	r1, [r7, #11]
 8012e42:	2320      	movs	r3, #32
 8012e44:	2205      	movs	r2, #5
 8012e46:	68f8      	ldr	r0, [r7, #12]
 8012e48:	f000 fa29 	bl	801329e <SCSI_SenseCode>
      return -1;
 8012e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8012e50:	e000      	b.n	8012e54 <SCSI_ProcessCmd+0x248>
  }

  return 0;
 8012e52:	2300      	movs	r3, #0
}
 8012e54:	4618      	mov	r0, r3
 8012e56:	3710      	adds	r7, #16
 8012e58:	46bd      	mov	sp, r7
 8012e5a:	bd80      	pop	{r7, pc}

08012e5c <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8012e5c:	b580      	push	{r7, lr}
 8012e5e:	b086      	sub	sp, #24
 8012e60:	af00      	add	r7, sp, #0
 8012e62:	60f8      	str	r0, [r7, #12]
 8012e64:	460b      	mov	r3, r1
 8012e66:	607a      	str	r2, [r7, #4]
 8012e68:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012e70:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8012e72:	697b      	ldr	r3, [r7, #20]
 8012e74:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d00a      	beq.n	8012e92 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012e7c:	697b      	ldr	r3, [r7, #20]
 8012e7e:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8012e82:	2320      	movs	r3, #32
 8012e84:	2205      	movs	r2, #5
 8012e86:	68f8      	ldr	r0, [r7, #12]
 8012e88:	f000 fa09 	bl	801329e <SCSI_SenseCode>

    return -1;
 8012e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8012e90:	e019      	b.n	8012ec6 <SCSI_TestUnitReady+0x6a>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012e98:	689b      	ldr	r3, [r3, #8]
 8012e9a:	7afa      	ldrb	r2, [r7, #11]
 8012e9c:	4610      	mov	r0, r2
 8012e9e:	4798      	blx	r3
 8012ea0:	4603      	mov	r3, r0
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d00b      	beq.n	8012ebe <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012ea6:	7af9      	ldrb	r1, [r7, #11]
 8012ea8:	233a      	movs	r3, #58	; 0x3a
 8012eaa:	2202      	movs	r2, #2
 8012eac:	68f8      	ldr	r0, [r7, #12]
 8012eae:	f000 f9f6 	bl	801329e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8012eb2:	697b      	ldr	r3, [r7, #20]
 8012eb4:	2205      	movs	r2, #5
 8012eb6:	721a      	strb	r2, [r3, #8]

    return -1;
 8012eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8012ebc:	e003      	b.n	8012ec6 <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 8012ebe:	697b      	ldr	r3, [r7, #20]
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	815a      	strh	r2, [r3, #10]

  return 0;
 8012ec4:	2300      	movs	r3, #0
}
 8012ec6:	4618      	mov	r0, r3
 8012ec8:	3718      	adds	r7, #24
 8012eca:	46bd      	mov	sp, r7
 8012ecc:	bd80      	pop	{r7, pc}
	...

08012ed0 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8012ed0:	b480      	push	{r7}
 8012ed2:	b089      	sub	sp, #36	; 0x24
 8012ed4:	af00      	add	r7, sp, #0
 8012ed6:	60f8      	str	r0, [r7, #12]
 8012ed8:	460b      	mov	r3, r1
 8012eda:	607a      	str	r2, [r7, #4]
 8012edc:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012ee4:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	3301      	adds	r3, #1
 8012eea:	781b      	ldrb	r3, [r3, #0]
 8012eec:	f003 0301 	and.w	r3, r3, #1
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d014      	beq.n	8012f1e <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 8012ef4:	2307      	movs	r3, #7
 8012ef6:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 8012ef8:	69bb      	ldr	r3, [r7, #24]
 8012efa:	8bfa      	ldrh	r2, [r7, #30]
 8012efc:	815a      	strh	r2, [r3, #10]

    while (len)
 8012efe:	e00a      	b.n	8012f16 <SCSI_Inquiry+0x46>
    {
      len--;
 8012f00:	8bfb      	ldrh	r3, [r7, #30]
 8012f02:	3b01      	subs	r3, #1
 8012f04:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 8012f06:	8bfa      	ldrh	r2, [r7, #30]
 8012f08:	8bfb      	ldrh	r3, [r7, #30]
 8012f0a:	4920      	ldr	r1, [pc, #128]	; (8012f8c <SCSI_Inquiry+0xbc>)
 8012f0c:	5c89      	ldrb	r1, [r1, r2]
 8012f0e:	69ba      	ldr	r2, [r7, #24]
 8012f10:	4413      	add	r3, r2
 8012f12:	460a      	mov	r2, r1
 8012f14:	731a      	strb	r2, [r3, #12]
    while (len)
 8012f16:	8bfb      	ldrh	r3, [r7, #30]
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d1f1      	bne.n	8012f00 <SCSI_Inquiry+0x30>
 8012f1c:	e02e      	b.n	8012f7c <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012f24:	69d9      	ldr	r1, [r3, #28]
 8012f26:	7afa      	ldrb	r2, [r7, #11]
 8012f28:	4613      	mov	r3, r2
 8012f2a:	00db      	lsls	r3, r3, #3
 8012f2c:	4413      	add	r3, r2
 8012f2e:	009b      	lsls	r3, r3, #2
 8012f30:	440b      	add	r3, r1
 8012f32:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8012f34:	697b      	ldr	r3, [r7, #20]
 8012f36:	3304      	adds	r3, #4
 8012f38:	781b      	ldrb	r3, [r3, #0]
 8012f3a:	b29b      	uxth	r3, r3
 8012f3c:	3305      	adds	r3, #5
 8012f3e:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	3304      	adds	r3, #4
 8012f44:	781b      	ldrb	r3, [r3, #0]
 8012f46:	b29b      	uxth	r3, r3
 8012f48:	8bfa      	ldrh	r2, [r7, #30]
 8012f4a:	429a      	cmp	r2, r3
 8012f4c:	d303      	bcc.n	8012f56 <SCSI_Inquiry+0x86>
    {
      len = params[4];
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	3304      	adds	r3, #4
 8012f52:	781b      	ldrb	r3, [r3, #0]
 8012f54:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 8012f56:	69bb      	ldr	r3, [r7, #24]
 8012f58:	8bfa      	ldrh	r2, [r7, #30]
 8012f5a:	815a      	strh	r2, [r3, #10]

    while (len)
 8012f5c:	e00b      	b.n	8012f76 <SCSI_Inquiry+0xa6>
    {
      len--;
 8012f5e:	8bfb      	ldrh	r3, [r7, #30]
 8012f60:	3b01      	subs	r3, #1
 8012f62:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 8012f64:	8bfb      	ldrh	r3, [r7, #30]
 8012f66:	697a      	ldr	r2, [r7, #20]
 8012f68:	441a      	add	r2, r3
 8012f6a:	8bfb      	ldrh	r3, [r7, #30]
 8012f6c:	7811      	ldrb	r1, [r2, #0]
 8012f6e:	69ba      	ldr	r2, [r7, #24]
 8012f70:	4413      	add	r3, r2
 8012f72:	460a      	mov	r2, r1
 8012f74:	731a      	strb	r2, [r3, #12]
    while (len)
 8012f76:	8bfb      	ldrh	r3, [r7, #30]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d1f0      	bne.n	8012f5e <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 8012f7c:	2300      	movs	r3, #0
}
 8012f7e:	4618      	mov	r0, r3
 8012f80:	3724      	adds	r7, #36	; 0x24
 8012f82:	46bd      	mov	sp, r7
 8012f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f88:	4770      	bx	lr
 8012f8a:	bf00      	nop
 8012f8c:	0801ac28 	.word	0x0801ac28

08012f90 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8012f90:	b580      	push	{r7, lr}
 8012f92:	b086      	sub	sp, #24
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	60f8      	str	r0, [r7, #12]
 8012f98:	460b      	mov	r3, r1
 8012f9a:	607a      	str	r2, [r7, #4]
 8012f9c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012fa4:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012fac:	685b      	ldr	r3, [r3, #4]
 8012fae:	697a      	ldr	r2, [r7, #20]
 8012fb0:	f502 7118 	add.w	r1, r2, #608	; 0x260
 8012fb4:	697a      	ldr	r2, [r7, #20]
 8012fb6:	f202 225e 	addw	r2, r2, #606	; 0x25e
 8012fba:	7af8      	ldrb	r0, [r7, #11]
 8012fbc:	4798      	blx	r3
 8012fbe:	4603      	mov	r3, r0
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d008      	beq.n	8012fd6 <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012fc4:	7af9      	ldrb	r1, [r7, #11]
 8012fc6:	233a      	movs	r3, #58	; 0x3a
 8012fc8:	2202      	movs	r2, #2
 8012fca:	68f8      	ldr	r0, [r7, #12]
 8012fcc:	f000 f967 	bl	801329e <SCSI_SenseCode>
    return -1;
 8012fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8012fd4:	e03f      	b.n	8013056 <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8012fd6:	697b      	ldr	r3, [r7, #20]
 8012fd8:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8012fdc:	3b01      	subs	r3, #1
 8012fde:	0e1b      	lsrs	r3, r3, #24
 8012fe0:	b2da      	uxtb	r2, r3
 8012fe2:	697b      	ldr	r3, [r7, #20]
 8012fe4:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8012fe6:	697b      	ldr	r3, [r7, #20]
 8012fe8:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8012fec:	3b01      	subs	r3, #1
 8012fee:	0c1b      	lsrs	r3, r3, #16
 8012ff0:	b2da      	uxtb	r2, r3
 8012ff2:	697b      	ldr	r3, [r7, #20]
 8012ff4:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8012ff6:	697b      	ldr	r3, [r7, #20]
 8012ff8:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8012ffc:	3b01      	subs	r3, #1
 8012ffe:	0a1b      	lsrs	r3, r3, #8
 8013000:	b2da      	uxtb	r2, r3
 8013002:	697b      	ldr	r3, [r7, #20]
 8013004:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8013006:	697b      	ldr	r3, [r7, #20]
 8013008:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 801300c:	b2db      	uxtb	r3, r3
 801300e:	3b01      	subs	r3, #1
 8013010:	b2da      	uxtb	r2, r3
 8013012:	697b      	ldr	r3, [r7, #20]
 8013014:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8013016:	697b      	ldr	r3, [r7, #20]
 8013018:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 801301c:	161b      	asrs	r3, r3, #24
 801301e:	b2da      	uxtb	r2, r3
 8013020:	697b      	ldr	r3, [r7, #20]
 8013022:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8013024:	697b      	ldr	r3, [r7, #20]
 8013026:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 801302a:	141b      	asrs	r3, r3, #16
 801302c:	b2da      	uxtb	r2, r3
 801302e:	697b      	ldr	r3, [r7, #20]
 8013030:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8013032:	697b      	ldr	r3, [r7, #20]
 8013034:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8013038:	0a1b      	lsrs	r3, r3, #8
 801303a:	b29b      	uxth	r3, r3
 801303c:	b2da      	uxtb	r2, r3
 801303e:	697b      	ldr	r3, [r7, #20]
 8013040:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8013042:	697b      	ldr	r3, [r7, #20]
 8013044:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8013048:	b2da      	uxtb	r2, r3
 801304a:	697b      	ldr	r3, [r7, #20]
 801304c:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 801304e:	697b      	ldr	r3, [r7, #20]
 8013050:	2208      	movs	r2, #8
 8013052:	815a      	strh	r2, [r3, #10]
    return 0;
 8013054:	2300      	movs	r3, #0
  }
}
 8013056:	4618      	mov	r0, r3
 8013058:	3718      	adds	r7, #24
 801305a:	46bd      	mov	sp, r7
 801305c:	bd80      	pop	{r7, pc}

0801305e <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 801305e:	b580      	push	{r7, lr}
 8013060:	b088      	sub	sp, #32
 8013062:	af00      	add	r7, sp, #0
 8013064:	60f8      	str	r0, [r7, #12]
 8013066:	460b      	mov	r3, r1
 8013068:	607a      	str	r2, [r7, #4]
 801306a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013072:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 8013074:	2300      	movs	r3, #0
 8013076:	83fb      	strh	r3, [r7, #30]
 8013078:	e007      	b.n	801308a <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 801307a:	8bfb      	ldrh	r3, [r7, #30]
 801307c:	69ba      	ldr	r2, [r7, #24]
 801307e:	4413      	add	r3, r2
 8013080:	2200      	movs	r2, #0
 8013082:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 8013084:	8bfb      	ldrh	r3, [r7, #30]
 8013086:	3301      	adds	r3, #1
 8013088:	83fb      	strh	r3, [r7, #30]
 801308a:	8bfb      	ldrh	r3, [r7, #30]
 801308c:	2b0b      	cmp	r3, #11
 801308e:	d9f4      	bls.n	801307a <SCSI_ReadFormatCapacity+0x1c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013096:	685b      	ldr	r3, [r3, #4]
 8013098:	f107 0216 	add.w	r2, r7, #22
 801309c:	f107 0110 	add.w	r1, r7, #16
 80130a0:	7af8      	ldrb	r0, [r7, #11]
 80130a2:	4798      	blx	r3
 80130a4:	4603      	mov	r3, r0
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d008      	beq.n	80130bc <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80130aa:	7af9      	ldrb	r1, [r7, #11]
 80130ac:	233a      	movs	r3, #58	; 0x3a
 80130ae:	2202      	movs	r2, #2
 80130b0:	68f8      	ldr	r0, [r7, #12]
 80130b2:	f000 f8f4 	bl	801329e <SCSI_SenseCode>
    return -1;
 80130b6:	f04f 33ff 	mov.w	r3, #4294967295
 80130ba:	e030      	b.n	801311e <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 80130bc:	69bb      	ldr	r3, [r7, #24]
 80130be:	2208      	movs	r2, #8
 80130c0:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80130c2:	693b      	ldr	r3, [r7, #16]
 80130c4:	3b01      	subs	r3, #1
 80130c6:	0e1b      	lsrs	r3, r3, #24
 80130c8:	b2da      	uxtb	r2, r3
 80130ca:	69bb      	ldr	r3, [r7, #24]
 80130cc:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80130ce:	693b      	ldr	r3, [r7, #16]
 80130d0:	3b01      	subs	r3, #1
 80130d2:	0c1b      	lsrs	r3, r3, #16
 80130d4:	b2da      	uxtb	r2, r3
 80130d6:	69bb      	ldr	r3, [r7, #24]
 80130d8:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80130da:	693b      	ldr	r3, [r7, #16]
 80130dc:	3b01      	subs	r3, #1
 80130de:	0a1b      	lsrs	r3, r3, #8
 80130e0:	b2da      	uxtb	r2, r3
 80130e2:	69bb      	ldr	r3, [r7, #24]
 80130e4:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80130e6:	693b      	ldr	r3, [r7, #16]
 80130e8:	b2db      	uxtb	r3, r3
 80130ea:	3b01      	subs	r3, #1
 80130ec:	b2da      	uxtb	r2, r3
 80130ee:	69bb      	ldr	r3, [r7, #24]
 80130f0:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 80130f2:	69bb      	ldr	r3, [r7, #24]
 80130f4:	2202      	movs	r2, #2
 80130f6:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80130f8:	8afb      	ldrh	r3, [r7, #22]
 80130fa:	141b      	asrs	r3, r3, #16
 80130fc:	b2da      	uxtb	r2, r3
 80130fe:	69bb      	ldr	r3, [r7, #24]
 8013100:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8013102:	8afb      	ldrh	r3, [r7, #22]
 8013104:	0a1b      	lsrs	r3, r3, #8
 8013106:	b29b      	uxth	r3, r3
 8013108:	b2da      	uxtb	r2, r3
 801310a:	69bb      	ldr	r3, [r7, #24]
 801310c:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 801310e:	8afb      	ldrh	r3, [r7, #22]
 8013110:	b2da      	uxtb	r2, r3
 8013112:	69bb      	ldr	r3, [r7, #24]
 8013114:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 8013116:	69bb      	ldr	r3, [r7, #24]
 8013118:	220c      	movs	r2, #12
 801311a:	815a      	strh	r2, [r3, #10]
    return 0;
 801311c:	2300      	movs	r3, #0
  }
}
 801311e:	4618      	mov	r0, r3
 8013120:	3720      	adds	r7, #32
 8013122:	46bd      	mov	sp, r7
 8013124:	bd80      	pop	{r7, pc}
	...

08013128 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8013128:	b480      	push	{r7}
 801312a:	b087      	sub	sp, #28
 801312c:	af00      	add	r7, sp, #0
 801312e:	60f8      	str	r0, [r7, #12]
 8013130:	460b      	mov	r3, r1
 8013132:	607a      	str	r2, [r7, #4]
 8013134:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801313c:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 801313e:	2308      	movs	r3, #8
 8013140:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 8013142:	693b      	ldr	r3, [r7, #16]
 8013144:	8afa      	ldrh	r2, [r7, #22]
 8013146:	815a      	strh	r2, [r3, #10]

  while (len)
 8013148:	e00a      	b.n	8013160 <SCSI_ModeSense6+0x38>
  {
    len--;
 801314a:	8afb      	ldrh	r3, [r7, #22]
 801314c:	3b01      	subs	r3, #1
 801314e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 8013150:	8afa      	ldrh	r2, [r7, #22]
 8013152:	8afb      	ldrh	r3, [r7, #22]
 8013154:	4907      	ldr	r1, [pc, #28]	; (8013174 <SCSI_ModeSense6+0x4c>)
 8013156:	5c89      	ldrb	r1, [r1, r2]
 8013158:	693a      	ldr	r2, [r7, #16]
 801315a:	4413      	add	r3, r2
 801315c:	460a      	mov	r2, r1
 801315e:	731a      	strb	r2, [r3, #12]
  while (len)
 8013160:	8afb      	ldrh	r3, [r7, #22]
 8013162:	2b00      	cmp	r3, #0
 8013164:	d1f1      	bne.n	801314a <SCSI_ModeSense6+0x22>
  }
  return 0;
 8013166:	2300      	movs	r3, #0
}
 8013168:	4618      	mov	r0, r3
 801316a:	371c      	adds	r7, #28
 801316c:	46bd      	mov	sp, r7
 801316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013172:	4770      	bx	lr
 8013174:	0801ac30 	.word	0x0801ac30

08013178 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8013178:	b480      	push	{r7}
 801317a:	b087      	sub	sp, #28
 801317c:	af00      	add	r7, sp, #0
 801317e:	60f8      	str	r0, [r7, #12]
 8013180:	460b      	mov	r3, r1
 8013182:	607a      	str	r2, [r7, #4]
 8013184:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 8013186:	2308      	movs	r3, #8
 8013188:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013190:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 8013192:	693b      	ldr	r3, [r7, #16]
 8013194:	8afa      	ldrh	r2, [r7, #22]
 8013196:	815a      	strh	r2, [r3, #10]

  while (len)
 8013198:	e00a      	b.n	80131b0 <SCSI_ModeSense10+0x38>
  {
    len--;
 801319a:	8afb      	ldrh	r3, [r7, #22]
 801319c:	3b01      	subs	r3, #1
 801319e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 80131a0:	8afa      	ldrh	r2, [r7, #22]
 80131a2:	8afb      	ldrh	r3, [r7, #22]
 80131a4:	4907      	ldr	r1, [pc, #28]	; (80131c4 <SCSI_ModeSense10+0x4c>)
 80131a6:	5c89      	ldrb	r1, [r1, r2]
 80131a8:	693a      	ldr	r2, [r7, #16]
 80131aa:	4413      	add	r3, r2
 80131ac:	460a      	mov	r2, r1
 80131ae:	731a      	strb	r2, [r3, #12]
  while (len)
 80131b0:	8afb      	ldrh	r3, [r7, #22]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d1f1      	bne.n	801319a <SCSI_ModeSense10+0x22>
  }

  return 0;
 80131b6:	2300      	movs	r3, #0
}
 80131b8:	4618      	mov	r0, r3
 80131ba:	371c      	adds	r7, #28
 80131bc:	46bd      	mov	sp, r7
 80131be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c2:	4770      	bx	lr
 80131c4:	0801ac38 	.word	0x0801ac38

080131c8 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80131c8:	b480      	push	{r7}
 80131ca:	b087      	sub	sp, #28
 80131cc:	af00      	add	r7, sp, #0
 80131ce:	60f8      	str	r0, [r7, #12]
 80131d0:	460b      	mov	r3, r1
 80131d2:	607a      	str	r2, [r7, #4]
 80131d4:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80131dc:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 80131de:	2300      	movs	r3, #0
 80131e0:	75fb      	strb	r3, [r7, #23]
 80131e2:	e007      	b.n	80131f4 <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 80131e4:	7dfb      	ldrb	r3, [r7, #23]
 80131e6:	693a      	ldr	r2, [r7, #16]
 80131e8:	4413      	add	r3, r2
 80131ea:	2200      	movs	r2, #0
 80131ec:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 80131ee:	7dfb      	ldrb	r3, [r7, #23]
 80131f0:	3301      	adds	r3, #1
 80131f2:	75fb      	strb	r3, [r7, #23]
 80131f4:	7dfb      	ldrb	r3, [r7, #23]
 80131f6:	2b11      	cmp	r3, #17
 80131f8:	d9f4      	bls.n	80131e4 <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0] = 0x70U;
 80131fa:	693b      	ldr	r3, [r7, #16]
 80131fc:	2270      	movs	r2, #112	; 0x70
 80131fe:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8013200:	693b      	ldr	r3, [r7, #16]
 8013202:	220c      	movs	r2, #12
 8013204:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8013206:	693b      	ldr	r3, [r7, #16]
 8013208:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 801320c:	693b      	ldr	r3, [r7, #16]
 801320e:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8013212:	429a      	cmp	r2, r3
 8013214:	d02e      	beq.n	8013274 <SCSI_RequestSense+0xac>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8013216:	693b      	ldr	r3, [r7, #16]
 8013218:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 801321c:	693a      	ldr	r2, [r7, #16]
 801321e:	3347      	adds	r3, #71	; 0x47
 8013220:	00db      	lsls	r3, r3, #3
 8013222:	4413      	add	r3, r2
 8013224:	791a      	ldrb	r2, [r3, #4]
 8013226:	693b      	ldr	r3, [r7, #16]
 8013228:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 801322a:	693b      	ldr	r3, [r7, #16]
 801322c:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8013230:	693a      	ldr	r2, [r7, #16]
 8013232:	3347      	adds	r3, #71	; 0x47
 8013234:	00db      	lsls	r3, r3, #3
 8013236:	4413      	add	r3, r2
 8013238:	7a5a      	ldrb	r2, [r3, #9]
 801323a:	693b      	ldr	r3, [r7, #16]
 801323c:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 801323e:	693b      	ldr	r3, [r7, #16]
 8013240:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8013244:	693a      	ldr	r2, [r7, #16]
 8013246:	3347      	adds	r3, #71	; 0x47
 8013248:	00db      	lsls	r3, r3, #3
 801324a:	4413      	add	r3, r2
 801324c:	7a1a      	ldrb	r2, [r3, #8]
 801324e:	693b      	ldr	r3, [r7, #16]
 8013250:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 8013252:	693b      	ldr	r3, [r7, #16]
 8013254:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8013258:	3301      	adds	r3, #1
 801325a:	b2da      	uxtb	r2, r3
 801325c:	693b      	ldr	r3, [r7, #16]
 801325e:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8013262:	693b      	ldr	r3, [r7, #16]
 8013264:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8013268:	2b04      	cmp	r3, #4
 801326a:	d103      	bne.n	8013274 <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 801326c:	693b      	ldr	r3, [r7, #16]
 801326e:	2200      	movs	r2, #0
 8013270:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8013274:	693b      	ldr	r3, [r7, #16]
 8013276:	2212      	movs	r2, #18
 8013278:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	3304      	adds	r3, #4
 801327e:	781b      	ldrb	r3, [r3, #0]
 8013280:	2b12      	cmp	r3, #18
 8013282:	d805      	bhi.n	8013290 <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	3304      	adds	r3, #4
 8013288:	781b      	ldrb	r3, [r3, #0]
 801328a:	b29a      	uxth	r2, r3
 801328c:	693b      	ldr	r3, [r7, #16]
 801328e:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 8013290:	2300      	movs	r3, #0
}
 8013292:	4618      	mov	r0, r3
 8013294:	371c      	adds	r7, #28
 8013296:	46bd      	mov	sp, r7
 8013298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801329c:	4770      	bx	lr

0801329e <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 801329e:	b480      	push	{r7}
 80132a0:	b085      	sub	sp, #20
 80132a2:	af00      	add	r7, sp, #0
 80132a4:	6078      	str	r0, [r7, #4]
 80132a6:	4608      	mov	r0, r1
 80132a8:	4611      	mov	r1, r2
 80132aa:	461a      	mov	r2, r3
 80132ac:	4603      	mov	r3, r0
 80132ae:	70fb      	strb	r3, [r7, #3]
 80132b0:	460b      	mov	r3, r1
 80132b2:	70bb      	strb	r3, [r7, #2]
 80132b4:	4613      	mov	r3, r2
 80132b6:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80132be:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80132c6:	68fa      	ldr	r2, [r7, #12]
 80132c8:	3347      	adds	r3, #71	; 0x47
 80132ca:	00db      	lsls	r3, r3, #3
 80132cc:	4413      	add	r3, r2
 80132ce:	78ba      	ldrb	r2, [r7, #2]
 80132d0:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80132d8:	68fa      	ldr	r2, [r7, #12]
 80132da:	3347      	adds	r3, #71	; 0x47
 80132dc:	00db      	lsls	r3, r3, #3
 80132de:	4413      	add	r3, r2
 80132e0:	2200      	movs	r2, #0
 80132e2:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80132ea:	3301      	adds	r3, #1
 80132ec:	b2da      	uxtb	r2, r3
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80132fa:	2b04      	cmp	r3, #4
 80132fc:	d103      	bne.n	8013306 <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	2200      	movs	r2, #0
 8013302:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 8013306:	bf00      	nop
 8013308:	3714      	adds	r7, #20
 801330a:	46bd      	mov	sp, r7
 801330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013310:	4770      	bx	lr

08013312 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8013312:	b480      	push	{r7}
 8013314:	b087      	sub	sp, #28
 8013316:	af00      	add	r7, sp, #0
 8013318:	60f8      	str	r0, [r7, #12]
 801331a:	460b      	mov	r3, r1
 801331c:	607a      	str	r2, [r7, #4]
 801331e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013326:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 8013328:	697b      	ldr	r3, [r7, #20]
 801332a:	2200      	movs	r2, #0
 801332c:	815a      	strh	r2, [r3, #10]
  return 0;
 801332e:	2300      	movs	r3, #0
}
 8013330:	4618      	mov	r0, r3
 8013332:	371c      	adds	r7, #28
 8013334:	46bd      	mov	sp, r7
 8013336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801333a:	4770      	bx	lr

0801333c <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801333c:	b580      	push	{r7, lr}
 801333e:	b086      	sub	sp, #24
 8013340:	af00      	add	r7, sp, #0
 8013342:	60f8      	str	r0, [r7, #12]
 8013344:	460b      	mov	r3, r1
 8013346:	607a      	str	r2, [r7, #4]
 8013348:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013350:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8013352:	697b      	ldr	r3, [r7, #20]
 8013354:	7a1b      	ldrb	r3, [r3, #8]
 8013356:	2b00      	cmp	r3, #0
 8013358:	d16e      	bne.n	8013438 <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 801335a:	697b      	ldr	r3, [r7, #20]
 801335c:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8013360:	b25b      	sxtb	r3, r3
 8013362:	2b00      	cmp	r3, #0
 8013364:	db0a      	blt.n	801337c <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013366:	697b      	ldr	r3, [r7, #20]
 8013368:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 801336c:	2320      	movs	r3, #32
 801336e:	2205      	movs	r2, #5
 8013370:	68f8      	ldr	r0, [r7, #12]
 8013372:	f7ff ff94 	bl	801329e <SCSI_SenseCode>
      return -1;
 8013376:	f04f 33ff 	mov.w	r3, #4294967295
 801337a:	e067      	b.n	801344c <SCSI_Read10+0x110>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013382:	689b      	ldr	r3, [r3, #8]
 8013384:	7afa      	ldrb	r2, [r7, #11]
 8013386:	4610      	mov	r0, r2
 8013388:	4798      	blx	r3
 801338a:	4603      	mov	r3, r0
 801338c:	2b00      	cmp	r3, #0
 801338e:	d008      	beq.n	80133a2 <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013390:	7af9      	ldrb	r1, [r7, #11]
 8013392:	233a      	movs	r3, #58	; 0x3a
 8013394:	2202      	movs	r2, #2
 8013396:	68f8      	ldr	r0, [r7, #12]
 8013398:	f7ff ff81 	bl	801329e <SCSI_SenseCode>
      return -1;
 801339c:	f04f 33ff 	mov.w	r3, #4294967295
 80133a0:	e054      	b.n	801344c <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	3302      	adds	r3, #2
 80133a6:	781b      	ldrb	r3, [r3, #0]
 80133a8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	3303      	adds	r3, #3
 80133ae:	781b      	ldrb	r3, [r3, #0]
 80133b0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80133b2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	3304      	adds	r3, #4
 80133b8:	781b      	ldrb	r3, [r3, #0]
 80133ba:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80133bc:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80133be:	687a      	ldr	r2, [r7, #4]
 80133c0:	3205      	adds	r2, #5
 80133c2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80133c4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80133c6:	697b      	ldr	r3, [r7, #20]
 80133c8:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	3307      	adds	r3, #7
 80133d0:	781b      	ldrb	r3, [r3, #0]
 80133d2:	021b      	lsls	r3, r3, #8
 80133d4:	687a      	ldr	r2, [r7, #4]
 80133d6:	3208      	adds	r2, #8
 80133d8:	7812      	ldrb	r2, [r2, #0]
 80133da:	431a      	orrs	r2, r3
 80133dc:	697b      	ldr	r3, [r7, #20]
 80133de:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80133e2:	697b      	ldr	r3, [r7, #20]
 80133e4:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80133e8:	697b      	ldr	r3, [r7, #20]
 80133ea:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80133ee:	7af9      	ldrb	r1, [r7, #11]
 80133f0:	68f8      	ldr	r0, [r7, #12]
 80133f2:	f000 f912 	bl	801361a <SCSI_CheckAddressRange>
 80133f6:	4603      	mov	r3, r0
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	da02      	bge.n	8013402 <SCSI_Read10+0xc6>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80133fc:	f04f 33ff 	mov.w	r3, #4294967295
 8013400:	e024      	b.n	801344c <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8013402:	697b      	ldr	r3, [r7, #20]
 8013404:	2202      	movs	r2, #2
 8013406:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8013408:	697b      	ldr	r3, [r7, #20]
 801340a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801340e:	697b      	ldr	r3, [r7, #20]
 8013410:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8013414:	6979      	ldr	r1, [r7, #20]
 8013416:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
 801341a:	fb01 f303 	mul.w	r3, r1, r3
 801341e:	429a      	cmp	r2, r3
 8013420:	d00a      	beq.n	8013438 <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013422:	697b      	ldr	r3, [r7, #20]
 8013424:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8013428:	2320      	movs	r3, #32
 801342a:	2205      	movs	r2, #5
 801342c:	68f8      	ldr	r0, [r7, #12]
 801342e:	f7ff ff36 	bl	801329e <SCSI_SenseCode>
      return -1;
 8013432:	f04f 33ff 	mov.w	r3, #4294967295
 8013436:	e009      	b.n	801344c <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8013438:	697b      	ldr	r3, [r7, #20]
 801343a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801343e:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 8013440:	7afb      	ldrb	r3, [r7, #11]
 8013442:	4619      	mov	r1, r3
 8013444:	68f8      	ldr	r0, [r7, #12]
 8013446:	f000 f90a 	bl	801365e <SCSI_ProcessRead>
 801344a:	4603      	mov	r3, r0
}
 801344c:	4618      	mov	r0, r3
 801344e:	3718      	adds	r7, #24
 8013450:	46bd      	mov	sp, r7
 8013452:	bd80      	pop	{r7, pc}

08013454 <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8013454:	b580      	push	{r7, lr}
 8013456:	b086      	sub	sp, #24
 8013458:	af00      	add	r7, sp, #0
 801345a:	60f8      	str	r0, [r7, #12]
 801345c:	460b      	mov	r3, r1
 801345e:	607a      	str	r2, [r7, #4]
 8013460:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013468:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801346a:	697b      	ldr	r3, [r7, #20]
 801346c:	7a1b      	ldrb	r3, [r3, #8]
 801346e:	2b00      	cmp	r3, #0
 8013470:	f040 8096 	bne.w	80135a0 <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8013474:	697b      	ldr	r3, [r7, #20]
 8013476:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 801347a:	b25b      	sxtb	r3, r3
 801347c:	2b00      	cmp	r3, #0
 801347e:	da0a      	bge.n	8013496 <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013480:	697b      	ldr	r3, [r7, #20]
 8013482:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8013486:	2320      	movs	r3, #32
 8013488:	2205      	movs	r2, #5
 801348a:	68f8      	ldr	r0, [r7, #12]
 801348c:	f7ff ff07 	bl	801329e <SCSI_SenseCode>
      return -1;
 8013490:	f04f 33ff 	mov.w	r3, #4294967295
 8013494:	e08a      	b.n	80135ac <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801349c:	689b      	ldr	r3, [r3, #8]
 801349e:	7afa      	ldrb	r2, [r7, #11]
 80134a0:	4610      	mov	r0, r2
 80134a2:	4798      	blx	r3
 80134a4:	4603      	mov	r3, r0
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d008      	beq.n	80134bc <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80134aa:	7af9      	ldrb	r1, [r7, #11]
 80134ac:	233a      	movs	r3, #58	; 0x3a
 80134ae:	2202      	movs	r2, #2
 80134b0:	68f8      	ldr	r0, [r7, #12]
 80134b2:	f7ff fef4 	bl	801329e <SCSI_SenseCode>
      return -1;
 80134b6:	f04f 33ff 	mov.w	r3, #4294967295
 80134ba:	e077      	b.n	80135ac <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80134c2:	68db      	ldr	r3, [r3, #12]
 80134c4:	7afa      	ldrb	r2, [r7, #11]
 80134c6:	4610      	mov	r0, r2
 80134c8:	4798      	blx	r3
 80134ca:	4603      	mov	r3, r0
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d008      	beq.n	80134e2 <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80134d0:	7af9      	ldrb	r1, [r7, #11]
 80134d2:	2327      	movs	r3, #39	; 0x27
 80134d4:	2202      	movs	r2, #2
 80134d6:	68f8      	ldr	r0, [r7, #12]
 80134d8:	f7ff fee1 	bl	801329e <SCSI_SenseCode>
      return -1;
 80134dc:	f04f 33ff 	mov.w	r3, #4294967295
 80134e0:	e064      	b.n	80135ac <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	3302      	adds	r3, #2
 80134e6:	781b      	ldrb	r3, [r3, #0]
 80134e8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	3303      	adds	r3, #3
 80134ee:	781b      	ldrb	r3, [r3, #0]
 80134f0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80134f2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	3304      	adds	r3, #4
 80134f8:	781b      	ldrb	r3, [r3, #0]
 80134fa:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80134fc:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80134fe:	687a      	ldr	r2, [r7, #4]
 8013500:	3205      	adds	r2, #5
 8013502:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8013504:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013506:	697b      	ldr	r3, [r7, #20]
 8013508:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	3307      	adds	r3, #7
 8013510:	781b      	ldrb	r3, [r3, #0]
 8013512:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8013514:	687a      	ldr	r2, [r7, #4]
 8013516:	3208      	adds	r2, #8
 8013518:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 801351a:	431a      	orrs	r2, r3
 801351c:	697b      	ldr	r3, [r7, #20]
 801351e:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8013522:	697b      	ldr	r3, [r7, #20]
 8013524:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8013528:	697b      	ldr	r3, [r7, #20]
 801352a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801352e:	7af9      	ldrb	r1, [r7, #11]
 8013530:	68f8      	ldr	r0, [r7, #12]
 8013532:	f000 f872 	bl	801361a <SCSI_CheckAddressRange>
 8013536:	4603      	mov	r3, r0
 8013538:	2b00      	cmp	r3, #0
 801353a:	da02      	bge.n	8013542 <SCSI_Write10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801353c:	f04f 33ff 	mov.w	r3, #4294967295
 8013540:	e034      	b.n	80135ac <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8013542:	697b      	ldr	r3, [r7, #20]
 8013544:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8013548:	697a      	ldr	r2, [r7, #20]
 801354a:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 801354e:	fb02 f303 	mul.w	r3, r2, r3
 8013552:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8013554:	697b      	ldr	r3, [r7, #20]
 8013556:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801355a:	693a      	ldr	r2, [r7, #16]
 801355c:	429a      	cmp	r2, r3
 801355e:	d00a      	beq.n	8013576 <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013560:	697b      	ldr	r3, [r7, #20]
 8013562:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8013566:	2320      	movs	r3, #32
 8013568:	2205      	movs	r2, #5
 801356a:	68f8      	ldr	r0, [r7, #12]
 801356c:	f7ff fe97 	bl	801329e <SCSI_SenseCode>
      return -1;
 8013570:	f04f 33ff 	mov.w	r3, #4294967295
 8013574:	e01a      	b.n	80135ac <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8013576:	693b      	ldr	r3, [r7, #16]
 8013578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801357c:	bf28      	it	cs
 801357e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8013582:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8013584:	697b      	ldr	r3, [r7, #20]
 8013586:	2201      	movs	r2, #1
 8013588:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 801358a:	697b      	ldr	r3, [r7, #20]
 801358c:	f103 020c 	add.w	r2, r3, #12
 8013590:	693b      	ldr	r3, [r7, #16]
 8013592:	b29b      	uxth	r3, r3
 8013594:	2101      	movs	r1, #1
 8013596:	68f8      	ldr	r0, [r7, #12]
 8013598:	f007 f92e 	bl	801a7f8 <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 801359c:	2300      	movs	r3, #0
 801359e:	e005      	b.n	80135ac <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 80135a0:	7afb      	ldrb	r3, [r7, #11]
 80135a2:	4619      	mov	r1, r3
 80135a4:	68f8      	ldr	r0, [r7, #12]
 80135a6:	f000 f8ce 	bl	8013746 <SCSI_ProcessWrite>
 80135aa:	4603      	mov	r3, r0
}
 80135ac:	4618      	mov	r0, r3
 80135ae:	3718      	adds	r7, #24
 80135b0:	46bd      	mov	sp, r7
 80135b2:	bd80      	pop	{r7, pc}

080135b4 <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80135b4:	b580      	push	{r7, lr}
 80135b6:	b086      	sub	sp, #24
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	60f8      	str	r0, [r7, #12]
 80135bc:	460b      	mov	r3, r1
 80135be:	607a      	str	r2, [r7, #4]
 80135c0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80135c8:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	3301      	adds	r3, #1
 80135ce:	781b      	ldrb	r3, [r3, #0]
 80135d0:	f003 0302 	and.w	r3, r3, #2
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d008      	beq.n	80135ea <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80135d8:	7af9      	ldrb	r1, [r7, #11]
 80135da:	2324      	movs	r3, #36	; 0x24
 80135dc:	2205      	movs	r2, #5
 80135de:	68f8      	ldr	r0, [r7, #12]
 80135e0:	f7ff fe5d 	bl	801329e <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80135e4:	f04f 33ff 	mov.w	r3, #4294967295
 80135e8:	e013      	b.n	8013612 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80135ea:	697b      	ldr	r3, [r7, #20]
 80135ec:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80135f0:	697b      	ldr	r3, [r7, #20]
 80135f2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80135f6:	7af9      	ldrb	r1, [r7, #11]
 80135f8:	68f8      	ldr	r0, [r7, #12]
 80135fa:	f000 f80e 	bl	801361a <SCSI_CheckAddressRange>
 80135fe:	4603      	mov	r3, r0
 8013600:	2b00      	cmp	r3, #0
 8013602:	da02      	bge.n	801360a <SCSI_Verify10+0x56>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 8013604:	f04f 33ff 	mov.w	r3, #4294967295
 8013608:	e003      	b.n	8013612 <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 801360a:	697b      	ldr	r3, [r7, #20]
 801360c:	2200      	movs	r2, #0
 801360e:	815a      	strh	r2, [r3, #10]
  return 0;
 8013610:	2300      	movs	r3, #0
}
 8013612:	4618      	mov	r0, r3
 8013614:	3718      	adds	r7, #24
 8013616:	46bd      	mov	sp, r7
 8013618:	bd80      	pop	{r7, pc}

0801361a <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 801361a:	b580      	push	{r7, lr}
 801361c:	b086      	sub	sp, #24
 801361e:	af00      	add	r7, sp, #0
 8013620:	60f8      	str	r0, [r7, #12]
 8013622:	607a      	str	r2, [r7, #4]
 8013624:	603b      	str	r3, [r7, #0]
 8013626:	460b      	mov	r3, r1
 8013628:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013630:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8013632:	687a      	ldr	r2, [r7, #4]
 8013634:	683b      	ldr	r3, [r7, #0]
 8013636:	441a      	add	r2, r3
 8013638:	697b      	ldr	r3, [r7, #20]
 801363a:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 801363e:	429a      	cmp	r2, r3
 8013640:	d908      	bls.n	8013654 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8013642:	7af9      	ldrb	r1, [r7, #11]
 8013644:	2321      	movs	r3, #33	; 0x21
 8013646:	2205      	movs	r2, #5
 8013648:	68f8      	ldr	r0, [r7, #12]
 801364a:	f7ff fe28 	bl	801329e <SCSI_SenseCode>
    return -1;
 801364e:	f04f 33ff 	mov.w	r3, #4294967295
 8013652:	e000      	b.n	8013656 <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 8013654:	2300      	movs	r3, #0
}
 8013656:	4618      	mov	r0, r3
 8013658:	3718      	adds	r7, #24
 801365a:	46bd      	mov	sp, r7
 801365c:	bd80      	pop	{r7, pc}

0801365e <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 801365e:	b590      	push	{r4, r7, lr}
 8013660:	b085      	sub	sp, #20
 8013662:	af00      	add	r7, sp, #0
 8013664:	6078      	str	r0, [r7, #4]
 8013666:	460b      	mov	r3, r1
 8013668:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013670:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8013678:	68fa      	ldr	r2, [r7, #12]
 801367a:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 801367e:	fb02 f303 	mul.w	r3, r2, r3
 8013682:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8013684:	68bb      	ldr	r3, [r7, #8]
 8013686:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801368a:	bf28      	it	cs
 801368c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8013690:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013698:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	f103 010c 	add.w	r1, r3, #12
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80136ac:	4618      	mov	r0, r3
 80136ae:	68bb      	ldr	r3, [r7, #8]
 80136b0:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 80136b4:	b29b      	uxth	r3, r3
 80136b6:	78f8      	ldrb	r0, [r7, #3]
 80136b8:	47a0      	blx	r4
 80136ba:	4603      	mov	r3, r0
 80136bc:	2b00      	cmp	r3, #0
 80136be:	da08      	bge.n	80136d2 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 80136c0:	78f9      	ldrb	r1, [r7, #3]
 80136c2:	2311      	movs	r3, #17
 80136c4:	2204      	movs	r2, #4
 80136c6:	6878      	ldr	r0, [r7, #4]
 80136c8:	f7ff fde9 	bl	801329e <SCSI_SenseCode>
    return -1;
 80136cc:	f04f 33ff 	mov.w	r3, #4294967295
 80136d0:	e035      	b.n	801373e <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	f103 020c 	add.w	r2, r3, #12
 80136d8:	68bb      	ldr	r3, [r7, #8]
 80136da:	b29b      	uxth	r3, r3
 80136dc:	2181      	movs	r1, #129	; 0x81
 80136de:	6878      	ldr	r0, [r7, #4]
 80136e0:	f007 f867 	bl	801a7b2 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80136f0:	4619      	mov	r1, r3
 80136f2:	68bb      	ldr	r3, [r7, #8]
 80136f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80136f8:	441a      	add	r2, r3
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 801370c:	4619      	mov	r1, r3
 801370e:	68bb      	ldr	r3, [r7, #8]
 8013710:	fbb3 f3f1 	udiv	r3, r3, r1
 8013714:	1ad2      	subs	r2, r2, r3
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8013722:	68bb      	ldr	r3, [r7, #8]
 8013724:	1ad2      	subs	r2, r2, r3
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8013732:	2b00      	cmp	r3, #0
 8013734:	d102      	bne.n	801373c <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	2203      	movs	r2, #3
 801373a:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 801373c:	2300      	movs	r3, #0
}
 801373e:	4618      	mov	r0, r3
 8013740:	3714      	adds	r7, #20
 8013742:	46bd      	mov	sp, r7
 8013744:	bd90      	pop	{r4, r7, pc}

08013746 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8013746:	b590      	push	{r4, r7, lr}
 8013748:	b085      	sub	sp, #20
 801374a:	af00      	add	r7, sp, #0
 801374c:	6078      	str	r0, [r7, #4]
 801374e:	460b      	mov	r3, r1
 8013750:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013758:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8013760:	68fa      	ldr	r2, [r7, #12]
 8013762:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8013766:	fb02 f303 	mul.w	r3, r2, r3
 801376a:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 801376c:	68bb      	ldr	r3, [r7, #8]
 801376e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013772:	bf28      	it	cs
 8013774:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8013778:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013780:	695c      	ldr	r4, [r3, #20]
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	f103 010c 	add.w	r1, r3, #12
 8013788:	68fb      	ldr	r3, [r7, #12]
 801378a:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8013794:	4618      	mov	r0, r3
 8013796:	68bb      	ldr	r3, [r7, #8]
 8013798:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 801379c:	b29b      	uxth	r3, r3
 801379e:	78f8      	ldrb	r0, [r7, #3]
 80137a0:	47a0      	blx	r4
 80137a2:	4603      	mov	r3, r0
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	da08      	bge.n	80137ba <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 80137a8:	78f9      	ldrb	r1, [r7, #3]
 80137aa:	2303      	movs	r3, #3
 80137ac:	2204      	movs	r2, #4
 80137ae:	6878      	ldr	r0, [r7, #4]
 80137b0:	f7ff fd75 	bl	801329e <SCSI_SenseCode>

    return -1;
 80137b4:	f04f 33ff 	mov.w	r3, #4294967295
 80137b8:	e045      	b.n	8013846 <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80137c6:	4619      	mov	r1, r3
 80137c8:	68bb      	ldr	r3, [r7, #8]
 80137ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80137ce:	441a      	add	r2, r3
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80137e2:	4619      	mov	r1, r3
 80137e4:	68bb      	ldr	r3, [r7, #8]
 80137e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80137ea:	1ad2      	subs	r2, r2, r3
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 80137f8:	68bb      	ldr	r3, [r7, #8]
 80137fa:	1ad2      	subs	r2, r2, r3
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8013808:	2b00      	cmp	r3, #0
 801380a:	d104      	bne.n	8013816 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801380c:	2100      	movs	r1, #0
 801380e:	6878      	ldr	r0, [r7, #4]
 8013810:	f7ff f97a 	bl	8012b08 <MSC_BOT_SendCSW>
 8013814:	e016      	b.n	8013844 <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801381c:	68fa      	ldr	r2, [r7, #12]
 801381e:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8013822:	fb02 f303 	mul.w	r3, r2, r3
 8013826:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801382a:	bf28      	it	cs
 801382c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8013830:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	f103 020c 	add.w	r2, r3, #12
 8013838:	68bb      	ldr	r3, [r7, #8]
 801383a:	b29b      	uxth	r3, r3
 801383c:	2101      	movs	r1, #1
 801383e:	6878      	ldr	r0, [r7, #4]
 8013840:	f006 ffda 	bl	801a7f8 <USBD_LL_PrepareReceive>
  }

  return 0;
 8013844:	2300      	movs	r3, #0
}
 8013846:	4618      	mov	r0, r3
 8013848:	3714      	adds	r7, #20
 801384a:	46bd      	mov	sp, r7
 801384c:	bd90      	pop	{r4, r7, pc}

0801384e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801384e:	b580      	push	{r7, lr}
 8013850:	b084      	sub	sp, #16
 8013852:	af00      	add	r7, sp, #0
 8013854:	60f8      	str	r0, [r7, #12]
 8013856:	60b9      	str	r1, [r7, #8]
 8013858:	4613      	mov	r3, r2
 801385a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	2b00      	cmp	r3, #0
 8013860:	d101      	bne.n	8013866 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8013862:	2302      	movs	r3, #2
 8013864:	e01a      	b.n	801389c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801386c:	2b00      	cmp	r3, #0
 801386e:	d003      	beq.n	8013878 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8013870:	68fb      	ldr	r3, [r7, #12]
 8013872:	2200      	movs	r2, #0
 8013874:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013878:	68bb      	ldr	r3, [r7, #8]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d003      	beq.n	8013886 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	68ba      	ldr	r2, [r7, #8]
 8013882:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	2201      	movs	r2, #1
 801388a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	79fa      	ldrb	r2, [r7, #7]
 8013892:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8013894:	68f8      	ldr	r0, [r7, #12]
 8013896:	f006 fe19 	bl	801a4cc <USBD_LL_Init>

  return USBD_OK;
 801389a:	2300      	movs	r3, #0
}
 801389c:	4618      	mov	r0, r3
 801389e:	3710      	adds	r7, #16
 80138a0:	46bd      	mov	sp, r7
 80138a2:	bd80      	pop	{r7, pc}

080138a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80138a4:	b480      	push	{r7}
 80138a6:	b085      	sub	sp, #20
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	6078      	str	r0, [r7, #4]
 80138ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80138ae:	2300      	movs	r3, #0
 80138b0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80138b2:	683b      	ldr	r3, [r7, #0]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d006      	beq.n	80138c6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	683a      	ldr	r2, [r7, #0]
 80138bc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80138c0:	2300      	movs	r3, #0
 80138c2:	73fb      	strb	r3, [r7, #15]
 80138c4:	e001      	b.n	80138ca <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80138c6:	2302      	movs	r3, #2
 80138c8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80138ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80138cc:	4618      	mov	r0, r3
 80138ce:	3714      	adds	r7, #20
 80138d0:	46bd      	mov	sp, r7
 80138d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d6:	4770      	bx	lr

080138d8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80138d8:	b580      	push	{r7, lr}
 80138da:	b082      	sub	sp, #8
 80138dc:	af00      	add	r7, sp, #0
 80138de:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80138e0:	6878      	ldr	r0, [r7, #4]
 80138e2:	f006 fe43 	bl	801a56c <USBD_LL_Start>

  return USBD_OK;
 80138e6:	2300      	movs	r3, #0
}
 80138e8:	4618      	mov	r0, r3
 80138ea:	3708      	adds	r7, #8
 80138ec:	46bd      	mov	sp, r7
 80138ee:	bd80      	pop	{r7, pc}

080138f0 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop(USBD_HandleTypeDef *pdev)
{
 80138f0:	b580      	push	{r7, lr}
 80138f2:	b082      	sub	sp, #8
 80138f4:	af00      	add	r7, sp, #0
 80138f6:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80138fe:	685b      	ldr	r3, [r3, #4]
 8013900:	687a      	ldr	r2, [r7, #4]
 8013902:	6852      	ldr	r2, [r2, #4]
 8013904:	b2d2      	uxtb	r2, r2
 8013906:	4611      	mov	r1, r2
 8013908:	6878      	ldr	r0, [r7, #4]
 801390a:	4798      	blx	r3

  /* Stop the low level driver */
  USBD_LL_Stop(pdev);
 801390c:	6878      	ldr	r0, [r7, #4]
 801390e:	f006 fe48 	bl	801a5a2 <USBD_LL_Stop>

  return USBD_OK;
 8013912:	2300      	movs	r3, #0
}
 8013914:	4618      	mov	r0, r3
 8013916:	3708      	adds	r7, #8
 8013918:	46bd      	mov	sp, r7
 801391a:	bd80      	pop	{r7, pc}

0801391c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801391c:	b480      	push	{r7}
 801391e:	b083      	sub	sp, #12
 8013920:	af00      	add	r7, sp, #0
 8013922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013924:	2300      	movs	r3, #0
}
 8013926:	4618      	mov	r0, r3
 8013928:	370c      	adds	r7, #12
 801392a:	46bd      	mov	sp, r7
 801392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013930:	4770      	bx	lr

08013932 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8013932:	b580      	push	{r7, lr}
 8013934:	b084      	sub	sp, #16
 8013936:	af00      	add	r7, sp, #0
 8013938:	6078      	str	r0, [r7, #4]
 801393a:	460b      	mov	r3, r1
 801393c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801393e:	2302      	movs	r3, #2
 8013940:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013948:	2b00      	cmp	r3, #0
 801394a:	d00c      	beq.n	8013966 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	78fa      	ldrb	r2, [r7, #3]
 8013956:	4611      	mov	r1, r2
 8013958:	6878      	ldr	r0, [r7, #4]
 801395a:	4798      	blx	r3
 801395c:	4603      	mov	r3, r0
 801395e:	2b00      	cmp	r3, #0
 8013960:	d101      	bne.n	8013966 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8013962:	2300      	movs	r3, #0
 8013964:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8013966:	7bfb      	ldrb	r3, [r7, #15]
}
 8013968:	4618      	mov	r0, r3
 801396a:	3710      	adds	r7, #16
 801396c:	46bd      	mov	sp, r7
 801396e:	bd80      	pop	{r7, pc}

08013970 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8013970:	b580      	push	{r7, lr}
 8013972:	b082      	sub	sp, #8
 8013974:	af00      	add	r7, sp, #0
 8013976:	6078      	str	r0, [r7, #4]
 8013978:	460b      	mov	r3, r1
 801397a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013982:	685b      	ldr	r3, [r3, #4]
 8013984:	78fa      	ldrb	r2, [r7, #3]
 8013986:	4611      	mov	r1, r2
 8013988:	6878      	ldr	r0, [r7, #4]
 801398a:	4798      	blx	r3

  return USBD_OK;
 801398c:	2300      	movs	r3, #0
}
 801398e:	4618      	mov	r0, r3
 8013990:	3708      	adds	r7, #8
 8013992:	46bd      	mov	sp, r7
 8013994:	bd80      	pop	{r7, pc}

08013996 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013996:	b580      	push	{r7, lr}
 8013998:	b082      	sub	sp, #8
 801399a:	af00      	add	r7, sp, #0
 801399c:	6078      	str	r0, [r7, #4]
 801399e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80139a6:	6839      	ldr	r1, [r7, #0]
 80139a8:	4618      	mov	r0, r3
 80139aa:	f000 ff09 	bl	80147c0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	2201      	movs	r2, #1
 80139b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80139bc:	461a      	mov	r2, r3
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80139ca:	f003 031f 	and.w	r3, r3, #31
 80139ce:	2b01      	cmp	r3, #1
 80139d0:	d00c      	beq.n	80139ec <USBD_LL_SetupStage+0x56>
 80139d2:	2b01      	cmp	r3, #1
 80139d4:	d302      	bcc.n	80139dc <USBD_LL_SetupStage+0x46>
 80139d6:	2b02      	cmp	r3, #2
 80139d8:	d010      	beq.n	80139fc <USBD_LL_SetupStage+0x66>
 80139da:	e017      	b.n	8013a0c <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80139e2:	4619      	mov	r1, r3
 80139e4:	6878      	ldr	r0, [r7, #4]
 80139e6:	f000 fa09 	bl	8013dfc <USBD_StdDevReq>
      break;
 80139ea:	e01a      	b.n	8013a22 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80139f2:	4619      	mov	r1, r3
 80139f4:	6878      	ldr	r0, [r7, #4]
 80139f6:	f000 fa6b 	bl	8013ed0 <USBD_StdItfReq>
      break;
 80139fa:	e012      	b.n	8013a22 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8013a02:	4619      	mov	r1, r3
 8013a04:	6878      	ldr	r0, [r7, #4]
 8013a06:	f000 faa9 	bl	8013f5c <USBD_StdEPReq>
      break;
 8013a0a:	e00a      	b.n	8013a22 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8013a12:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013a16:	b2db      	uxtb	r3, r3
 8013a18:	4619      	mov	r1, r3
 8013a1a:	6878      	ldr	r0, [r7, #4]
 8013a1c:	f006 fe40 	bl	801a6a0 <USBD_LL_StallEP>
      break;
 8013a20:	bf00      	nop
  }

  return USBD_OK;
 8013a22:	2300      	movs	r3, #0
}
 8013a24:	4618      	mov	r0, r3
 8013a26:	3708      	adds	r7, #8
 8013a28:	46bd      	mov	sp, r7
 8013a2a:	bd80      	pop	{r7, pc}

08013a2c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013a2c:	b580      	push	{r7, lr}
 8013a2e:	b086      	sub	sp, #24
 8013a30:	af00      	add	r7, sp, #0
 8013a32:	60f8      	str	r0, [r7, #12]
 8013a34:	460b      	mov	r3, r1
 8013a36:	607a      	str	r2, [r7, #4]
 8013a38:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8013a3a:	7afb      	ldrb	r3, [r7, #11]
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d14b      	bne.n	8013ad8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8013a46:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013a4e:	2b03      	cmp	r3, #3
 8013a50:	d134      	bne.n	8013abc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8013a52:	697b      	ldr	r3, [r7, #20]
 8013a54:	68da      	ldr	r2, [r3, #12]
 8013a56:	697b      	ldr	r3, [r7, #20]
 8013a58:	691b      	ldr	r3, [r3, #16]
 8013a5a:	429a      	cmp	r2, r3
 8013a5c:	d919      	bls.n	8013a92 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8013a5e:	697b      	ldr	r3, [r7, #20]
 8013a60:	68da      	ldr	r2, [r3, #12]
 8013a62:	697b      	ldr	r3, [r7, #20]
 8013a64:	691b      	ldr	r3, [r3, #16]
 8013a66:	1ad2      	subs	r2, r2, r3
 8013a68:	697b      	ldr	r3, [r7, #20]
 8013a6a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8013a6c:	697b      	ldr	r3, [r7, #20]
 8013a6e:	68da      	ldr	r2, [r3, #12]
 8013a70:	697b      	ldr	r3, [r7, #20]
 8013a72:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8013a74:	429a      	cmp	r2, r3
 8013a76:	d203      	bcs.n	8013a80 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8013a78:	697b      	ldr	r3, [r7, #20]
 8013a7a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8013a7c:	b29b      	uxth	r3, r3
 8013a7e:	e002      	b.n	8013a86 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8013a80:	697b      	ldr	r3, [r7, #20]
 8013a82:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8013a84:	b29b      	uxth	r3, r3
 8013a86:	461a      	mov	r2, r3
 8013a88:	6879      	ldr	r1, [r7, #4]
 8013a8a:	68f8      	ldr	r0, [r7, #12]
 8013a8c:	f000 ff6e 	bl	801496c <USBD_CtlContinueRx>
 8013a90:	e038      	b.n	8013b04 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013a98:	691b      	ldr	r3, [r3, #16]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d00a      	beq.n	8013ab4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8013aa4:	2b03      	cmp	r3, #3
 8013aa6:	d105      	bne.n	8013ab4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013aae:	691b      	ldr	r3, [r3, #16]
 8013ab0:	68f8      	ldr	r0, [r7, #12]
 8013ab2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8013ab4:	68f8      	ldr	r0, [r7, #12]
 8013ab6:	f000 ff6b 	bl	8014990 <USBD_CtlSendStatus>
 8013aba:	e023      	b.n	8013b04 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013ac2:	2b05      	cmp	r3, #5
 8013ac4:	d11e      	bne.n	8013b04 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	2200      	movs	r2, #0
 8013aca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8013ace:	2100      	movs	r1, #0
 8013ad0:	68f8      	ldr	r0, [r7, #12]
 8013ad2:	f006 fde5 	bl	801a6a0 <USBD_LL_StallEP>
 8013ad6:	e015      	b.n	8013b04 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013ade:	699b      	ldr	r3, [r3, #24]
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d00d      	beq.n	8013b00 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8013aea:	2b03      	cmp	r3, #3
 8013aec:	d108      	bne.n	8013b00 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013af4:	699b      	ldr	r3, [r3, #24]
 8013af6:	7afa      	ldrb	r2, [r7, #11]
 8013af8:	4611      	mov	r1, r2
 8013afa:	68f8      	ldr	r0, [r7, #12]
 8013afc:	4798      	blx	r3
 8013afe:	e001      	b.n	8013b04 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8013b00:	2302      	movs	r3, #2
 8013b02:	e000      	b.n	8013b06 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8013b04:	2300      	movs	r3, #0
}
 8013b06:	4618      	mov	r0, r3
 8013b08:	3718      	adds	r7, #24
 8013b0a:	46bd      	mov	sp, r7
 8013b0c:	bd80      	pop	{r7, pc}

08013b0e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013b0e:	b580      	push	{r7, lr}
 8013b10:	b086      	sub	sp, #24
 8013b12:	af00      	add	r7, sp, #0
 8013b14:	60f8      	str	r0, [r7, #12]
 8013b16:	460b      	mov	r3, r1
 8013b18:	607a      	str	r2, [r7, #4]
 8013b1a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8013b1c:	7afb      	ldrb	r3, [r7, #11]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d17f      	bne.n	8013c22 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	3314      	adds	r3, #20
 8013b26:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013b2e:	2b02      	cmp	r3, #2
 8013b30:	d15c      	bne.n	8013bec <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8013b32:	697b      	ldr	r3, [r7, #20]
 8013b34:	68da      	ldr	r2, [r3, #12]
 8013b36:	697b      	ldr	r3, [r7, #20]
 8013b38:	691b      	ldr	r3, [r3, #16]
 8013b3a:	429a      	cmp	r2, r3
 8013b3c:	d915      	bls.n	8013b6a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8013b3e:	697b      	ldr	r3, [r7, #20]
 8013b40:	68da      	ldr	r2, [r3, #12]
 8013b42:	697b      	ldr	r3, [r7, #20]
 8013b44:	691b      	ldr	r3, [r3, #16]
 8013b46:	1ad2      	subs	r2, r2, r3
 8013b48:	697b      	ldr	r3, [r7, #20]
 8013b4a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8013b4c:	697b      	ldr	r3, [r7, #20]
 8013b4e:	68db      	ldr	r3, [r3, #12]
 8013b50:	b29b      	uxth	r3, r3
 8013b52:	461a      	mov	r2, r3
 8013b54:	6879      	ldr	r1, [r7, #4]
 8013b56:	68f8      	ldr	r0, [r7, #12]
 8013b58:	f000 fef6 	bl	8014948 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013b5c:	2300      	movs	r3, #0
 8013b5e:	2200      	movs	r2, #0
 8013b60:	2100      	movs	r1, #0
 8013b62:	68f8      	ldr	r0, [r7, #12]
 8013b64:	f006 fe48 	bl	801a7f8 <USBD_LL_PrepareReceive>
 8013b68:	e04e      	b.n	8013c08 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8013b6a:	697b      	ldr	r3, [r7, #20]
 8013b6c:	689b      	ldr	r3, [r3, #8]
 8013b6e:	697a      	ldr	r2, [r7, #20]
 8013b70:	6912      	ldr	r2, [r2, #16]
 8013b72:	fbb3 f1f2 	udiv	r1, r3, r2
 8013b76:	fb02 f201 	mul.w	r2, r2, r1
 8013b7a:	1a9b      	subs	r3, r3, r2
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d11c      	bne.n	8013bba <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8013b80:	697b      	ldr	r3, [r7, #20]
 8013b82:	689a      	ldr	r2, [r3, #8]
 8013b84:	697b      	ldr	r3, [r7, #20]
 8013b86:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8013b88:	429a      	cmp	r2, r3
 8013b8a:	d316      	bcc.n	8013bba <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8013b8c:	697b      	ldr	r3, [r7, #20]
 8013b8e:	689a      	ldr	r2, [r3, #8]
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013b96:	429a      	cmp	r2, r3
 8013b98:	d20f      	bcs.n	8013bba <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013b9a:	2200      	movs	r2, #0
 8013b9c:	2100      	movs	r1, #0
 8013b9e:	68f8      	ldr	r0, [r7, #12]
 8013ba0:	f000 fed2 	bl	8014948 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	2200      	movs	r2, #0
 8013ba8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013bac:	2300      	movs	r3, #0
 8013bae:	2200      	movs	r2, #0
 8013bb0:	2100      	movs	r1, #0
 8013bb2:	68f8      	ldr	r0, [r7, #12]
 8013bb4:	f006 fe20 	bl	801a7f8 <USBD_LL_PrepareReceive>
 8013bb8:	e026      	b.n	8013c08 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013bc0:	68db      	ldr	r3, [r3, #12]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d00a      	beq.n	8013bdc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8013bcc:	2b03      	cmp	r3, #3
 8013bce:	d105      	bne.n	8013bdc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013bd6:	68db      	ldr	r3, [r3, #12]
 8013bd8:	68f8      	ldr	r0, [r7, #12]
 8013bda:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8013bdc:	2180      	movs	r1, #128	; 0x80
 8013bde:	68f8      	ldr	r0, [r7, #12]
 8013be0:	f006 fd5e 	bl	801a6a0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8013be4:	68f8      	ldr	r0, [r7, #12]
 8013be6:	f000 fee6 	bl	80149b6 <USBD_CtlReceiveStatus>
 8013bea:	e00d      	b.n	8013c08 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013bf2:	2b04      	cmp	r3, #4
 8013bf4:	d004      	beq.n	8013c00 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d103      	bne.n	8013c08 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8013c00:	2180      	movs	r1, #128	; 0x80
 8013c02:	68f8      	ldr	r0, [r7, #12]
 8013c04:	f006 fd4c 	bl	801a6a0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8013c0e:	2b01      	cmp	r3, #1
 8013c10:	d11d      	bne.n	8013c4e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8013c12:	68f8      	ldr	r0, [r7, #12]
 8013c14:	f7ff fe82 	bl	801391c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	2200      	movs	r2, #0
 8013c1c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8013c20:	e015      	b.n	8013c4e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013c28:	695b      	ldr	r3, [r3, #20]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d00d      	beq.n	8013c4a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8013c34:	2b03      	cmp	r3, #3
 8013c36:	d108      	bne.n	8013c4a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013c3e:	695b      	ldr	r3, [r3, #20]
 8013c40:	7afa      	ldrb	r2, [r7, #11]
 8013c42:	4611      	mov	r1, r2
 8013c44:	68f8      	ldr	r0, [r7, #12]
 8013c46:	4798      	blx	r3
 8013c48:	e001      	b.n	8013c4e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8013c4a:	2302      	movs	r3, #2
 8013c4c:	e000      	b.n	8013c50 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8013c4e:	2300      	movs	r3, #0
}
 8013c50:	4618      	mov	r0, r3
 8013c52:	3718      	adds	r7, #24
 8013c54:	46bd      	mov	sp, r7
 8013c56:	bd80      	pop	{r7, pc}

08013c58 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013c58:	b580      	push	{r7, lr}
 8013c5a:	b082      	sub	sp, #8
 8013c5c:	af00      	add	r7, sp, #0
 8013c5e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013c60:	2340      	movs	r3, #64	; 0x40
 8013c62:	2200      	movs	r2, #0
 8013c64:	2100      	movs	r1, #0
 8013c66:	6878      	ldr	r0, [r7, #4]
 8013c68:	f006 fcb6 	bl	801a5d8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	2201      	movs	r2, #1
 8013c70:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	2240      	movs	r2, #64	; 0x40
 8013c78:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013c7c:	2340      	movs	r3, #64	; 0x40
 8013c7e:	2200      	movs	r2, #0
 8013c80:	2180      	movs	r1, #128	; 0x80
 8013c82:	6878      	ldr	r0, [r7, #4]
 8013c84:	f006 fca8 	bl	801a5d8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	2201      	movs	r2, #1
 8013c8c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	2240      	movs	r2, #64	; 0x40
 8013c92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	2201      	movs	r2, #1
 8013c98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	2200      	movs	r2, #0
 8013ca0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	2200      	movs	r2, #0
 8013ca8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	2200      	movs	r2, #0
 8013cae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d009      	beq.n	8013cd0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013cc2:	685b      	ldr	r3, [r3, #4]
 8013cc4:	687a      	ldr	r2, [r7, #4]
 8013cc6:	6852      	ldr	r2, [r2, #4]
 8013cc8:	b2d2      	uxtb	r2, r2
 8013cca:	4611      	mov	r1, r2
 8013ccc:	6878      	ldr	r0, [r7, #4]
 8013cce:	4798      	blx	r3
  }

  return USBD_OK;
 8013cd0:	2300      	movs	r3, #0
}
 8013cd2:	4618      	mov	r0, r3
 8013cd4:	3708      	adds	r7, #8
 8013cd6:	46bd      	mov	sp, r7
 8013cd8:	bd80      	pop	{r7, pc}

08013cda <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013cda:	b480      	push	{r7}
 8013cdc:	b083      	sub	sp, #12
 8013cde:	af00      	add	r7, sp, #0
 8013ce0:	6078      	str	r0, [r7, #4]
 8013ce2:	460b      	mov	r3, r1
 8013ce4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	78fa      	ldrb	r2, [r7, #3]
 8013cea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013cec:	2300      	movs	r3, #0
}
 8013cee:	4618      	mov	r0, r3
 8013cf0:	370c      	adds	r7, #12
 8013cf2:	46bd      	mov	sp, r7
 8013cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf8:	4770      	bx	lr

08013cfa <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013cfa:	b480      	push	{r7}
 8013cfc:	b083      	sub	sp, #12
 8013cfe:	af00      	add	r7, sp, #0
 8013d00:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	2204      	movs	r2, #4
 8013d12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8013d16:	2300      	movs	r3, #0
}
 8013d18:	4618      	mov	r0, r3
 8013d1a:	370c      	adds	r7, #12
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d22:	4770      	bx	lr

08013d24 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013d24:	b480      	push	{r7}
 8013d26:	b083      	sub	sp, #12
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013d32:	2b04      	cmp	r3, #4
 8013d34:	d105      	bne.n	8013d42 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8013d42:	2300      	movs	r3, #0
}
 8013d44:	4618      	mov	r0, r3
 8013d46:	370c      	adds	r7, #12
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d4e:	4770      	bx	lr

08013d50 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013d50:	b580      	push	{r7, lr}
 8013d52:	b082      	sub	sp, #8
 8013d54:	af00      	add	r7, sp, #0
 8013d56:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013d5e:	2b03      	cmp	r3, #3
 8013d60:	d10b      	bne.n	8013d7a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013d68:	69db      	ldr	r3, [r3, #28]
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d005      	beq.n	8013d7a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013d74:	69db      	ldr	r3, [r3, #28]
 8013d76:	6878      	ldr	r0, [r7, #4]
 8013d78:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013d7a:	2300      	movs	r3, #0
}
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	3708      	adds	r7, #8
 8013d80:	46bd      	mov	sp, r7
 8013d82:	bd80      	pop	{r7, pc}

08013d84 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8013d84:	b480      	push	{r7}
 8013d86:	b083      	sub	sp, #12
 8013d88:	af00      	add	r7, sp, #0
 8013d8a:	6078      	str	r0, [r7, #4]
 8013d8c:	460b      	mov	r3, r1
 8013d8e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8013d90:	2300      	movs	r3, #0
}
 8013d92:	4618      	mov	r0, r3
 8013d94:	370c      	adds	r7, #12
 8013d96:	46bd      	mov	sp, r7
 8013d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d9c:	4770      	bx	lr

08013d9e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8013d9e:	b480      	push	{r7}
 8013da0:	b083      	sub	sp, #12
 8013da2:	af00      	add	r7, sp, #0
 8013da4:	6078      	str	r0, [r7, #4]
 8013da6:	460b      	mov	r3, r1
 8013da8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8013daa:	2300      	movs	r3, #0
}
 8013dac:	4618      	mov	r0, r3
 8013dae:	370c      	adds	r7, #12
 8013db0:	46bd      	mov	sp, r7
 8013db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013db6:	4770      	bx	lr

08013db8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8013db8:	b480      	push	{r7}
 8013dba:	b083      	sub	sp, #12
 8013dbc:	af00      	add	r7, sp, #0
 8013dbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013dc0:	2300      	movs	r3, #0
}
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	370c      	adds	r7, #12
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dcc:	4770      	bx	lr

08013dce <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8013dce:	b580      	push	{r7, lr}
 8013dd0:	b082      	sub	sp, #8
 8013dd2:	af00      	add	r7, sp, #0
 8013dd4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	2201      	movs	r2, #1
 8013dda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013de4:	685b      	ldr	r3, [r3, #4]
 8013de6:	687a      	ldr	r2, [r7, #4]
 8013de8:	6852      	ldr	r2, [r2, #4]
 8013dea:	b2d2      	uxtb	r2, r2
 8013dec:	4611      	mov	r1, r2
 8013dee:	6878      	ldr	r0, [r7, #4]
 8013df0:	4798      	blx	r3

  return USBD_OK;
 8013df2:	2300      	movs	r3, #0
}
 8013df4:	4618      	mov	r0, r3
 8013df6:	3708      	adds	r7, #8
 8013df8:	46bd      	mov	sp, r7
 8013dfa:	bd80      	pop	{r7, pc}

08013dfc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8013dfc:	b580      	push	{r7, lr}
 8013dfe:	b084      	sub	sp, #16
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	6078      	str	r0, [r7, #4]
 8013e04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013e06:	2300      	movs	r3, #0
 8013e08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013e0a:	683b      	ldr	r3, [r7, #0]
 8013e0c:	781b      	ldrb	r3, [r3, #0]
 8013e0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013e12:	2b20      	cmp	r3, #32
 8013e14:	d004      	beq.n	8013e20 <USBD_StdDevReq+0x24>
 8013e16:	2b40      	cmp	r3, #64	; 0x40
 8013e18:	d002      	beq.n	8013e20 <USBD_StdDevReq+0x24>
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d008      	beq.n	8013e30 <USBD_StdDevReq+0x34>
 8013e1e:	e04c      	b.n	8013eba <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e26:	689b      	ldr	r3, [r3, #8]
 8013e28:	6839      	ldr	r1, [r7, #0]
 8013e2a:	6878      	ldr	r0, [r7, #4]
 8013e2c:	4798      	blx	r3
      break;
 8013e2e:	e049      	b.n	8013ec4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013e30:	683b      	ldr	r3, [r7, #0]
 8013e32:	785b      	ldrb	r3, [r3, #1]
 8013e34:	2b09      	cmp	r3, #9
 8013e36:	d83a      	bhi.n	8013eae <USBD_StdDevReq+0xb2>
 8013e38:	a201      	add	r2, pc, #4	; (adr r2, 8013e40 <USBD_StdDevReq+0x44>)
 8013e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e3e:	bf00      	nop
 8013e40:	08013e91 	.word	0x08013e91
 8013e44:	08013ea5 	.word	0x08013ea5
 8013e48:	08013eaf 	.word	0x08013eaf
 8013e4c:	08013e9b 	.word	0x08013e9b
 8013e50:	08013eaf 	.word	0x08013eaf
 8013e54:	08013e73 	.word	0x08013e73
 8013e58:	08013e69 	.word	0x08013e69
 8013e5c:	08013eaf 	.word	0x08013eaf
 8013e60:	08013e87 	.word	0x08013e87
 8013e64:	08013e7d 	.word	0x08013e7d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8013e68:	6839      	ldr	r1, [r7, #0]
 8013e6a:	6878      	ldr	r0, [r7, #4]
 8013e6c:	f000 f9d4 	bl	8014218 <USBD_GetDescriptor>
          break;
 8013e70:	e022      	b.n	8013eb8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8013e72:	6839      	ldr	r1, [r7, #0]
 8013e74:	6878      	ldr	r0, [r7, #4]
 8013e76:	f000 fb37 	bl	80144e8 <USBD_SetAddress>
          break;
 8013e7a:	e01d      	b.n	8013eb8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8013e7c:	6839      	ldr	r1, [r7, #0]
 8013e7e:	6878      	ldr	r0, [r7, #4]
 8013e80:	f000 fb74 	bl	801456c <USBD_SetConfig>
          break;
 8013e84:	e018      	b.n	8013eb8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8013e86:	6839      	ldr	r1, [r7, #0]
 8013e88:	6878      	ldr	r0, [r7, #4]
 8013e8a:	f000 fbfd 	bl	8014688 <USBD_GetConfig>
          break;
 8013e8e:	e013      	b.n	8013eb8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013e90:	6839      	ldr	r1, [r7, #0]
 8013e92:	6878      	ldr	r0, [r7, #4]
 8013e94:	f000 fc2c 	bl	80146f0 <USBD_GetStatus>
          break;
 8013e98:	e00e      	b.n	8013eb8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8013e9a:	6839      	ldr	r1, [r7, #0]
 8013e9c:	6878      	ldr	r0, [r7, #4]
 8013e9e:	f000 fc5a 	bl	8014756 <USBD_SetFeature>
          break;
 8013ea2:	e009      	b.n	8013eb8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8013ea4:	6839      	ldr	r1, [r7, #0]
 8013ea6:	6878      	ldr	r0, [r7, #4]
 8013ea8:	f000 fc69 	bl	801477e <USBD_ClrFeature>
          break;
 8013eac:	e004      	b.n	8013eb8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8013eae:	6839      	ldr	r1, [r7, #0]
 8013eb0:	6878      	ldr	r0, [r7, #4]
 8013eb2:	f000 fcc2 	bl	801483a <USBD_CtlError>
          break;
 8013eb6:	bf00      	nop
      }
      break;
 8013eb8:	e004      	b.n	8013ec4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8013eba:	6839      	ldr	r1, [r7, #0]
 8013ebc:	6878      	ldr	r0, [r7, #4]
 8013ebe:	f000 fcbc 	bl	801483a <USBD_CtlError>
      break;
 8013ec2:	bf00      	nop
  }

  return ret;
 8013ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ec6:	4618      	mov	r0, r3
 8013ec8:	3710      	adds	r7, #16
 8013eca:	46bd      	mov	sp, r7
 8013ecc:	bd80      	pop	{r7, pc}
 8013ece:	bf00      	nop

08013ed0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8013ed0:	b580      	push	{r7, lr}
 8013ed2:	b084      	sub	sp, #16
 8013ed4:	af00      	add	r7, sp, #0
 8013ed6:	6078      	str	r0, [r7, #4]
 8013ed8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013eda:	2300      	movs	r3, #0
 8013edc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013ede:	683b      	ldr	r3, [r7, #0]
 8013ee0:	781b      	ldrb	r3, [r3, #0]
 8013ee2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013ee6:	2b20      	cmp	r3, #32
 8013ee8:	d003      	beq.n	8013ef2 <USBD_StdItfReq+0x22>
 8013eea:	2b40      	cmp	r3, #64	; 0x40
 8013eec:	d001      	beq.n	8013ef2 <USBD_StdItfReq+0x22>
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d12a      	bne.n	8013f48 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013ef8:	3b01      	subs	r3, #1
 8013efa:	2b02      	cmp	r3, #2
 8013efc:	d81d      	bhi.n	8013f3a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013efe:	683b      	ldr	r3, [r7, #0]
 8013f00:	889b      	ldrh	r3, [r3, #4]
 8013f02:	b2db      	uxtb	r3, r3
 8013f04:	2b01      	cmp	r3, #1
 8013f06:	d813      	bhi.n	8013f30 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013f0e:	689b      	ldr	r3, [r3, #8]
 8013f10:	6839      	ldr	r1, [r7, #0]
 8013f12:	6878      	ldr	r0, [r7, #4]
 8013f14:	4798      	blx	r3
 8013f16:	4603      	mov	r3, r0
 8013f18:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8013f1a:	683b      	ldr	r3, [r7, #0]
 8013f1c:	88db      	ldrh	r3, [r3, #6]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d110      	bne.n	8013f44 <USBD_StdItfReq+0x74>
 8013f22:	7bfb      	ldrb	r3, [r7, #15]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d10d      	bne.n	8013f44 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8013f28:	6878      	ldr	r0, [r7, #4]
 8013f2a:	f000 fd31 	bl	8014990 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8013f2e:	e009      	b.n	8013f44 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8013f30:	6839      	ldr	r1, [r7, #0]
 8013f32:	6878      	ldr	r0, [r7, #4]
 8013f34:	f000 fc81 	bl	801483a <USBD_CtlError>
          break;
 8013f38:	e004      	b.n	8013f44 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8013f3a:	6839      	ldr	r1, [r7, #0]
 8013f3c:	6878      	ldr	r0, [r7, #4]
 8013f3e:	f000 fc7c 	bl	801483a <USBD_CtlError>
          break;
 8013f42:	e000      	b.n	8013f46 <USBD_StdItfReq+0x76>
          break;
 8013f44:	bf00      	nop
      }
      break;
 8013f46:	e004      	b.n	8013f52 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8013f48:	6839      	ldr	r1, [r7, #0]
 8013f4a:	6878      	ldr	r0, [r7, #4]
 8013f4c:	f000 fc75 	bl	801483a <USBD_CtlError>
      break;
 8013f50:	bf00      	nop
  }

  return USBD_OK;
 8013f52:	2300      	movs	r3, #0
}
 8013f54:	4618      	mov	r0, r3
 8013f56:	3710      	adds	r7, #16
 8013f58:	46bd      	mov	sp, r7
 8013f5a:	bd80      	pop	{r7, pc}

08013f5c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b084      	sub	sp, #16
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	6078      	str	r0, [r7, #4]
 8013f64:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8013f66:	2300      	movs	r3, #0
 8013f68:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8013f6a:	683b      	ldr	r3, [r7, #0]
 8013f6c:	889b      	ldrh	r3, [r3, #4]
 8013f6e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013f70:	683b      	ldr	r3, [r7, #0]
 8013f72:	781b      	ldrb	r3, [r3, #0]
 8013f74:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013f78:	2b20      	cmp	r3, #32
 8013f7a:	d004      	beq.n	8013f86 <USBD_StdEPReq+0x2a>
 8013f7c:	2b40      	cmp	r3, #64	; 0x40
 8013f7e:	d002      	beq.n	8013f86 <USBD_StdEPReq+0x2a>
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d008      	beq.n	8013f96 <USBD_StdEPReq+0x3a>
 8013f84:	e13d      	b.n	8014202 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013f8c:	689b      	ldr	r3, [r3, #8]
 8013f8e:	6839      	ldr	r1, [r7, #0]
 8013f90:	6878      	ldr	r0, [r7, #4]
 8013f92:	4798      	blx	r3
      break;
 8013f94:	e13a      	b.n	801420c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8013f96:	683b      	ldr	r3, [r7, #0]
 8013f98:	781b      	ldrb	r3, [r3, #0]
 8013f9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013f9e:	2b20      	cmp	r3, #32
 8013fa0:	d10a      	bne.n	8013fb8 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013fa8:	689b      	ldr	r3, [r3, #8]
 8013faa:	6839      	ldr	r1, [r7, #0]
 8013fac:	6878      	ldr	r0, [r7, #4]
 8013fae:	4798      	blx	r3
 8013fb0:	4603      	mov	r3, r0
 8013fb2:	73fb      	strb	r3, [r7, #15]

        return ret;
 8013fb4:	7bfb      	ldrb	r3, [r7, #15]
 8013fb6:	e12a      	b.n	801420e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8013fb8:	683b      	ldr	r3, [r7, #0]
 8013fba:	785b      	ldrb	r3, [r3, #1]
 8013fbc:	2b01      	cmp	r3, #1
 8013fbe:	d03e      	beq.n	801403e <USBD_StdEPReq+0xe2>
 8013fc0:	2b03      	cmp	r3, #3
 8013fc2:	d002      	beq.n	8013fca <USBD_StdEPReq+0x6e>
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d070      	beq.n	80140aa <USBD_StdEPReq+0x14e>
 8013fc8:	e115      	b.n	80141f6 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013fd0:	2b02      	cmp	r3, #2
 8013fd2:	d002      	beq.n	8013fda <USBD_StdEPReq+0x7e>
 8013fd4:	2b03      	cmp	r3, #3
 8013fd6:	d015      	beq.n	8014004 <USBD_StdEPReq+0xa8>
 8013fd8:	e02b      	b.n	8014032 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013fda:	7bbb      	ldrb	r3, [r7, #14]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d00c      	beq.n	8013ffa <USBD_StdEPReq+0x9e>
 8013fe0:	7bbb      	ldrb	r3, [r7, #14]
 8013fe2:	2b80      	cmp	r3, #128	; 0x80
 8013fe4:	d009      	beq.n	8013ffa <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8013fe6:	7bbb      	ldrb	r3, [r7, #14]
 8013fe8:	4619      	mov	r1, r3
 8013fea:	6878      	ldr	r0, [r7, #4]
 8013fec:	f006 fb58 	bl	801a6a0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8013ff0:	2180      	movs	r1, #128	; 0x80
 8013ff2:	6878      	ldr	r0, [r7, #4]
 8013ff4:	f006 fb54 	bl	801a6a0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013ff8:	e020      	b.n	801403c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8013ffa:	6839      	ldr	r1, [r7, #0]
 8013ffc:	6878      	ldr	r0, [r7, #4]
 8013ffe:	f000 fc1c 	bl	801483a <USBD_CtlError>
              break;
 8014002:	e01b      	b.n	801403c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014004:	683b      	ldr	r3, [r7, #0]
 8014006:	885b      	ldrh	r3, [r3, #2]
 8014008:	2b00      	cmp	r3, #0
 801400a:	d10e      	bne.n	801402a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 801400c:	7bbb      	ldrb	r3, [r7, #14]
 801400e:	2b00      	cmp	r3, #0
 8014010:	d00b      	beq.n	801402a <USBD_StdEPReq+0xce>
 8014012:	7bbb      	ldrb	r3, [r7, #14]
 8014014:	2b80      	cmp	r3, #128	; 0x80
 8014016:	d008      	beq.n	801402a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014018:	683b      	ldr	r3, [r7, #0]
 801401a:	88db      	ldrh	r3, [r3, #6]
 801401c:	2b00      	cmp	r3, #0
 801401e:	d104      	bne.n	801402a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8014020:	7bbb      	ldrb	r3, [r7, #14]
 8014022:	4619      	mov	r1, r3
 8014024:	6878      	ldr	r0, [r7, #4]
 8014026:	f006 fb3b 	bl	801a6a0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801402a:	6878      	ldr	r0, [r7, #4]
 801402c:	f000 fcb0 	bl	8014990 <USBD_CtlSendStatus>

              break;
 8014030:	e004      	b.n	801403c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8014032:	6839      	ldr	r1, [r7, #0]
 8014034:	6878      	ldr	r0, [r7, #4]
 8014036:	f000 fc00 	bl	801483a <USBD_CtlError>
              break;
 801403a:	bf00      	nop
          }
          break;
 801403c:	e0e0      	b.n	8014200 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014044:	2b02      	cmp	r3, #2
 8014046:	d002      	beq.n	801404e <USBD_StdEPReq+0xf2>
 8014048:	2b03      	cmp	r3, #3
 801404a:	d015      	beq.n	8014078 <USBD_StdEPReq+0x11c>
 801404c:	e026      	b.n	801409c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801404e:	7bbb      	ldrb	r3, [r7, #14]
 8014050:	2b00      	cmp	r3, #0
 8014052:	d00c      	beq.n	801406e <USBD_StdEPReq+0x112>
 8014054:	7bbb      	ldrb	r3, [r7, #14]
 8014056:	2b80      	cmp	r3, #128	; 0x80
 8014058:	d009      	beq.n	801406e <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801405a:	7bbb      	ldrb	r3, [r7, #14]
 801405c:	4619      	mov	r1, r3
 801405e:	6878      	ldr	r0, [r7, #4]
 8014060:	f006 fb1e 	bl	801a6a0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8014064:	2180      	movs	r1, #128	; 0x80
 8014066:	6878      	ldr	r0, [r7, #4]
 8014068:	f006 fb1a 	bl	801a6a0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801406c:	e01c      	b.n	80140a8 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 801406e:	6839      	ldr	r1, [r7, #0]
 8014070:	6878      	ldr	r0, [r7, #4]
 8014072:	f000 fbe2 	bl	801483a <USBD_CtlError>
              break;
 8014076:	e017      	b.n	80140a8 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014078:	683b      	ldr	r3, [r7, #0]
 801407a:	885b      	ldrh	r3, [r3, #2]
 801407c:	2b00      	cmp	r3, #0
 801407e:	d112      	bne.n	80140a6 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014080:	7bbb      	ldrb	r3, [r7, #14]
 8014082:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014086:	2b00      	cmp	r3, #0
 8014088:	d004      	beq.n	8014094 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801408a:	7bbb      	ldrb	r3, [r7, #14]
 801408c:	4619      	mov	r1, r3
 801408e:	6878      	ldr	r0, [r7, #4]
 8014090:	f006 fb25 	bl	801a6de <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8014094:	6878      	ldr	r0, [r7, #4]
 8014096:	f000 fc7b 	bl	8014990 <USBD_CtlSendStatus>
              }
              break;
 801409a:	e004      	b.n	80140a6 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 801409c:	6839      	ldr	r1, [r7, #0]
 801409e:	6878      	ldr	r0, [r7, #4]
 80140a0:	f000 fbcb 	bl	801483a <USBD_CtlError>
              break;
 80140a4:	e000      	b.n	80140a8 <USBD_StdEPReq+0x14c>
              break;
 80140a6:	bf00      	nop
          }
          break;
 80140a8:	e0aa      	b.n	8014200 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80140b0:	2b02      	cmp	r3, #2
 80140b2:	d002      	beq.n	80140ba <USBD_StdEPReq+0x15e>
 80140b4:	2b03      	cmp	r3, #3
 80140b6:	d032      	beq.n	801411e <USBD_StdEPReq+0x1c2>
 80140b8:	e097      	b.n	80141ea <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80140ba:	7bbb      	ldrb	r3, [r7, #14]
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d007      	beq.n	80140d0 <USBD_StdEPReq+0x174>
 80140c0:	7bbb      	ldrb	r3, [r7, #14]
 80140c2:	2b80      	cmp	r3, #128	; 0x80
 80140c4:	d004      	beq.n	80140d0 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80140c6:	6839      	ldr	r1, [r7, #0]
 80140c8:	6878      	ldr	r0, [r7, #4]
 80140ca:	f000 fbb6 	bl	801483a <USBD_CtlError>
                break;
 80140ce:	e091      	b.n	80141f4 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80140d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	da0b      	bge.n	80140f0 <USBD_StdEPReq+0x194>
 80140d8:	7bbb      	ldrb	r3, [r7, #14]
 80140da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80140de:	4613      	mov	r3, r2
 80140e0:	009b      	lsls	r3, r3, #2
 80140e2:	4413      	add	r3, r2
 80140e4:	009b      	lsls	r3, r3, #2
 80140e6:	3310      	adds	r3, #16
 80140e8:	687a      	ldr	r2, [r7, #4]
 80140ea:	4413      	add	r3, r2
 80140ec:	3304      	adds	r3, #4
 80140ee:	e00b      	b.n	8014108 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80140f0:	7bbb      	ldrb	r3, [r7, #14]
 80140f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80140f6:	4613      	mov	r3, r2
 80140f8:	009b      	lsls	r3, r3, #2
 80140fa:	4413      	add	r3, r2
 80140fc:	009b      	lsls	r3, r3, #2
 80140fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014102:	687a      	ldr	r2, [r7, #4]
 8014104:	4413      	add	r3, r2
 8014106:	3304      	adds	r3, #4
 8014108:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801410a:	68bb      	ldr	r3, [r7, #8]
 801410c:	2200      	movs	r2, #0
 801410e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8014110:	68bb      	ldr	r3, [r7, #8]
 8014112:	2202      	movs	r2, #2
 8014114:	4619      	mov	r1, r3
 8014116:	6878      	ldr	r0, [r7, #4]
 8014118:	f000 fbfa 	bl	8014910 <USBD_CtlSendData>
              break;
 801411c:	e06a      	b.n	80141f4 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801411e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014122:	2b00      	cmp	r3, #0
 8014124:	da11      	bge.n	801414a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014126:	7bbb      	ldrb	r3, [r7, #14]
 8014128:	f003 020f 	and.w	r2, r3, #15
 801412c:	6879      	ldr	r1, [r7, #4]
 801412e:	4613      	mov	r3, r2
 8014130:	009b      	lsls	r3, r3, #2
 8014132:	4413      	add	r3, r2
 8014134:	009b      	lsls	r3, r3, #2
 8014136:	440b      	add	r3, r1
 8014138:	3318      	adds	r3, #24
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d117      	bne.n	8014170 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8014140:	6839      	ldr	r1, [r7, #0]
 8014142:	6878      	ldr	r0, [r7, #4]
 8014144:	f000 fb79 	bl	801483a <USBD_CtlError>
                  break;
 8014148:	e054      	b.n	80141f4 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801414a:	7bbb      	ldrb	r3, [r7, #14]
 801414c:	f003 020f 	and.w	r2, r3, #15
 8014150:	6879      	ldr	r1, [r7, #4]
 8014152:	4613      	mov	r3, r2
 8014154:	009b      	lsls	r3, r3, #2
 8014156:	4413      	add	r3, r2
 8014158:	009b      	lsls	r3, r3, #2
 801415a:	440b      	add	r3, r1
 801415c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	2b00      	cmp	r3, #0
 8014164:	d104      	bne.n	8014170 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8014166:	6839      	ldr	r1, [r7, #0]
 8014168:	6878      	ldr	r0, [r7, #4]
 801416a:	f000 fb66 	bl	801483a <USBD_CtlError>
                  break;
 801416e:	e041      	b.n	80141f4 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014170:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014174:	2b00      	cmp	r3, #0
 8014176:	da0b      	bge.n	8014190 <USBD_StdEPReq+0x234>
 8014178:	7bbb      	ldrb	r3, [r7, #14]
 801417a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801417e:	4613      	mov	r3, r2
 8014180:	009b      	lsls	r3, r3, #2
 8014182:	4413      	add	r3, r2
 8014184:	009b      	lsls	r3, r3, #2
 8014186:	3310      	adds	r3, #16
 8014188:	687a      	ldr	r2, [r7, #4]
 801418a:	4413      	add	r3, r2
 801418c:	3304      	adds	r3, #4
 801418e:	e00b      	b.n	80141a8 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014190:	7bbb      	ldrb	r3, [r7, #14]
 8014192:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014196:	4613      	mov	r3, r2
 8014198:	009b      	lsls	r3, r3, #2
 801419a:	4413      	add	r3, r2
 801419c:	009b      	lsls	r3, r3, #2
 801419e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80141a2:	687a      	ldr	r2, [r7, #4]
 80141a4:	4413      	add	r3, r2
 80141a6:	3304      	adds	r3, #4
 80141a8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80141aa:	7bbb      	ldrb	r3, [r7, #14]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d002      	beq.n	80141b6 <USBD_StdEPReq+0x25a>
 80141b0:	7bbb      	ldrb	r3, [r7, #14]
 80141b2:	2b80      	cmp	r3, #128	; 0x80
 80141b4:	d103      	bne.n	80141be <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80141b6:	68bb      	ldr	r3, [r7, #8]
 80141b8:	2200      	movs	r2, #0
 80141ba:	601a      	str	r2, [r3, #0]
 80141bc:	e00e      	b.n	80141dc <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80141be:	7bbb      	ldrb	r3, [r7, #14]
 80141c0:	4619      	mov	r1, r3
 80141c2:	6878      	ldr	r0, [r7, #4]
 80141c4:	f006 faaa 	bl	801a71c <USBD_LL_IsStallEP>
 80141c8:	4603      	mov	r3, r0
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d003      	beq.n	80141d6 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80141ce:	68bb      	ldr	r3, [r7, #8]
 80141d0:	2201      	movs	r2, #1
 80141d2:	601a      	str	r2, [r3, #0]
 80141d4:	e002      	b.n	80141dc <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80141d6:	68bb      	ldr	r3, [r7, #8]
 80141d8:	2200      	movs	r2, #0
 80141da:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80141dc:	68bb      	ldr	r3, [r7, #8]
 80141de:	2202      	movs	r2, #2
 80141e0:	4619      	mov	r1, r3
 80141e2:	6878      	ldr	r0, [r7, #4]
 80141e4:	f000 fb94 	bl	8014910 <USBD_CtlSendData>
              break;
 80141e8:	e004      	b.n	80141f4 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80141ea:	6839      	ldr	r1, [r7, #0]
 80141ec:	6878      	ldr	r0, [r7, #4]
 80141ee:	f000 fb24 	bl	801483a <USBD_CtlError>
              break;
 80141f2:	bf00      	nop
          }
          break;
 80141f4:	e004      	b.n	8014200 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80141f6:	6839      	ldr	r1, [r7, #0]
 80141f8:	6878      	ldr	r0, [r7, #4]
 80141fa:	f000 fb1e 	bl	801483a <USBD_CtlError>
          break;
 80141fe:	bf00      	nop
      }
      break;
 8014200:	e004      	b.n	801420c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8014202:	6839      	ldr	r1, [r7, #0]
 8014204:	6878      	ldr	r0, [r7, #4]
 8014206:	f000 fb18 	bl	801483a <USBD_CtlError>
      break;
 801420a:	bf00      	nop
  }

  return ret;
 801420c:	7bfb      	ldrb	r3, [r7, #15]
}
 801420e:	4618      	mov	r0, r3
 8014210:	3710      	adds	r7, #16
 8014212:	46bd      	mov	sp, r7
 8014214:	bd80      	pop	{r7, pc}
	...

08014218 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8014218:	b580      	push	{r7, lr}
 801421a:	b084      	sub	sp, #16
 801421c:	af00      	add	r7, sp, #0
 801421e:	6078      	str	r0, [r7, #4]
 8014220:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014222:	2300      	movs	r3, #0
 8014224:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014226:	2300      	movs	r3, #0
 8014228:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801422a:	2300      	movs	r3, #0
 801422c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801422e:	683b      	ldr	r3, [r7, #0]
 8014230:	885b      	ldrh	r3, [r3, #2]
 8014232:	0a1b      	lsrs	r3, r3, #8
 8014234:	b29b      	uxth	r3, r3
 8014236:	3b01      	subs	r3, #1
 8014238:	2b06      	cmp	r3, #6
 801423a:	f200 8128 	bhi.w	801448e <USBD_GetDescriptor+0x276>
 801423e:	a201      	add	r2, pc, #4	; (adr r2, 8014244 <USBD_GetDescriptor+0x2c>)
 8014240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014244:	08014261 	.word	0x08014261
 8014248:	08014279 	.word	0x08014279
 801424c:	080142b9 	.word	0x080142b9
 8014250:	0801448f 	.word	0x0801448f
 8014254:	0801448f 	.word	0x0801448f
 8014258:	0801442f 	.word	0x0801442f
 801425c:	0801445b 	.word	0x0801445b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	687a      	ldr	r2, [r7, #4]
 801426a:	7c12      	ldrb	r2, [r2, #16]
 801426c:	f107 0108 	add.w	r1, r7, #8
 8014270:	4610      	mov	r0, r2
 8014272:	4798      	blx	r3
 8014274:	60f8      	str	r0, [r7, #12]
      break;
 8014276:	e112      	b.n	801449e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	7c1b      	ldrb	r3, [r3, #16]
 801427c:	2b00      	cmp	r3, #0
 801427e:	d10d      	bne.n	801429c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014288:	f107 0208 	add.w	r2, r7, #8
 801428c:	4610      	mov	r0, r2
 801428e:	4798      	blx	r3
 8014290:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014292:	68fb      	ldr	r3, [r7, #12]
 8014294:	3301      	adds	r3, #1
 8014296:	2202      	movs	r2, #2
 8014298:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801429a:	e100      	b.n	801449e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80142a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142a4:	f107 0208 	add.w	r2, r7, #8
 80142a8:	4610      	mov	r0, r2
 80142aa:	4798      	blx	r3
 80142ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	3301      	adds	r3, #1
 80142b2:	2202      	movs	r2, #2
 80142b4:	701a      	strb	r2, [r3, #0]
      break;
 80142b6:	e0f2      	b.n	801449e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80142b8:	683b      	ldr	r3, [r7, #0]
 80142ba:	885b      	ldrh	r3, [r3, #2]
 80142bc:	b2db      	uxtb	r3, r3
 80142be:	2b05      	cmp	r3, #5
 80142c0:	f200 80ac 	bhi.w	801441c <USBD_GetDescriptor+0x204>
 80142c4:	a201      	add	r2, pc, #4	; (adr r2, 80142cc <USBD_GetDescriptor+0xb4>)
 80142c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142ca:	bf00      	nop
 80142cc:	080142e5 	.word	0x080142e5
 80142d0:	08014319 	.word	0x08014319
 80142d4:	0801434d 	.word	0x0801434d
 80142d8:	08014381 	.word	0x08014381
 80142dc:	080143b5 	.word	0x080143b5
 80142e0:	080143e9 	.word	0x080143e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80142ea:	685b      	ldr	r3, [r3, #4]
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d00b      	beq.n	8014308 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80142f6:	685b      	ldr	r3, [r3, #4]
 80142f8:	687a      	ldr	r2, [r7, #4]
 80142fa:	7c12      	ldrb	r2, [r2, #16]
 80142fc:	f107 0108 	add.w	r1, r7, #8
 8014300:	4610      	mov	r0, r2
 8014302:	4798      	blx	r3
 8014304:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014306:	e091      	b.n	801442c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014308:	6839      	ldr	r1, [r7, #0]
 801430a:	6878      	ldr	r0, [r7, #4]
 801430c:	f000 fa95 	bl	801483a <USBD_CtlError>
            err++;
 8014310:	7afb      	ldrb	r3, [r7, #11]
 8014312:	3301      	adds	r3, #1
 8014314:	72fb      	strb	r3, [r7, #11]
          break;
 8014316:	e089      	b.n	801442c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801431e:	689b      	ldr	r3, [r3, #8]
 8014320:	2b00      	cmp	r3, #0
 8014322:	d00b      	beq.n	801433c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801432a:	689b      	ldr	r3, [r3, #8]
 801432c:	687a      	ldr	r2, [r7, #4]
 801432e:	7c12      	ldrb	r2, [r2, #16]
 8014330:	f107 0108 	add.w	r1, r7, #8
 8014334:	4610      	mov	r0, r2
 8014336:	4798      	blx	r3
 8014338:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801433a:	e077      	b.n	801442c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801433c:	6839      	ldr	r1, [r7, #0]
 801433e:	6878      	ldr	r0, [r7, #4]
 8014340:	f000 fa7b 	bl	801483a <USBD_CtlError>
            err++;
 8014344:	7afb      	ldrb	r3, [r7, #11]
 8014346:	3301      	adds	r3, #1
 8014348:	72fb      	strb	r3, [r7, #11]
          break;
 801434a:	e06f      	b.n	801442c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014352:	68db      	ldr	r3, [r3, #12]
 8014354:	2b00      	cmp	r3, #0
 8014356:	d00b      	beq.n	8014370 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801435e:	68db      	ldr	r3, [r3, #12]
 8014360:	687a      	ldr	r2, [r7, #4]
 8014362:	7c12      	ldrb	r2, [r2, #16]
 8014364:	f107 0108 	add.w	r1, r7, #8
 8014368:	4610      	mov	r0, r2
 801436a:	4798      	blx	r3
 801436c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801436e:	e05d      	b.n	801442c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014370:	6839      	ldr	r1, [r7, #0]
 8014372:	6878      	ldr	r0, [r7, #4]
 8014374:	f000 fa61 	bl	801483a <USBD_CtlError>
            err++;
 8014378:	7afb      	ldrb	r3, [r7, #11]
 801437a:	3301      	adds	r3, #1
 801437c:	72fb      	strb	r3, [r7, #11]
          break;
 801437e:	e055      	b.n	801442c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014386:	691b      	ldr	r3, [r3, #16]
 8014388:	2b00      	cmp	r3, #0
 801438a:	d00b      	beq.n	80143a4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014392:	691b      	ldr	r3, [r3, #16]
 8014394:	687a      	ldr	r2, [r7, #4]
 8014396:	7c12      	ldrb	r2, [r2, #16]
 8014398:	f107 0108 	add.w	r1, r7, #8
 801439c:	4610      	mov	r0, r2
 801439e:	4798      	blx	r3
 80143a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80143a2:	e043      	b.n	801442c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80143a4:	6839      	ldr	r1, [r7, #0]
 80143a6:	6878      	ldr	r0, [r7, #4]
 80143a8:	f000 fa47 	bl	801483a <USBD_CtlError>
            err++;
 80143ac:	7afb      	ldrb	r3, [r7, #11]
 80143ae:	3301      	adds	r3, #1
 80143b0:	72fb      	strb	r3, [r7, #11]
          break;
 80143b2:	e03b      	b.n	801442c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80143ba:	695b      	ldr	r3, [r3, #20]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d00b      	beq.n	80143d8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80143c6:	695b      	ldr	r3, [r3, #20]
 80143c8:	687a      	ldr	r2, [r7, #4]
 80143ca:	7c12      	ldrb	r2, [r2, #16]
 80143cc:	f107 0108 	add.w	r1, r7, #8
 80143d0:	4610      	mov	r0, r2
 80143d2:	4798      	blx	r3
 80143d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80143d6:	e029      	b.n	801442c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80143d8:	6839      	ldr	r1, [r7, #0]
 80143da:	6878      	ldr	r0, [r7, #4]
 80143dc:	f000 fa2d 	bl	801483a <USBD_CtlError>
            err++;
 80143e0:	7afb      	ldrb	r3, [r7, #11]
 80143e2:	3301      	adds	r3, #1
 80143e4:	72fb      	strb	r3, [r7, #11]
          break;
 80143e6:	e021      	b.n	801442c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80143ee:	699b      	ldr	r3, [r3, #24]
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d00b      	beq.n	801440c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80143fa:	699b      	ldr	r3, [r3, #24]
 80143fc:	687a      	ldr	r2, [r7, #4]
 80143fe:	7c12      	ldrb	r2, [r2, #16]
 8014400:	f107 0108 	add.w	r1, r7, #8
 8014404:	4610      	mov	r0, r2
 8014406:	4798      	blx	r3
 8014408:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801440a:	e00f      	b.n	801442c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801440c:	6839      	ldr	r1, [r7, #0]
 801440e:	6878      	ldr	r0, [r7, #4]
 8014410:	f000 fa13 	bl	801483a <USBD_CtlError>
            err++;
 8014414:	7afb      	ldrb	r3, [r7, #11]
 8014416:	3301      	adds	r3, #1
 8014418:	72fb      	strb	r3, [r7, #11]
          break;
 801441a:	e007      	b.n	801442c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801441c:	6839      	ldr	r1, [r7, #0]
 801441e:	6878      	ldr	r0, [r7, #4]
 8014420:	f000 fa0b 	bl	801483a <USBD_CtlError>
          err++;
 8014424:	7afb      	ldrb	r3, [r7, #11]
 8014426:	3301      	adds	r3, #1
 8014428:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 801442a:	e038      	b.n	801449e <USBD_GetDescriptor+0x286>
 801442c:	e037      	b.n	801449e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	7c1b      	ldrb	r3, [r3, #16]
 8014432:	2b00      	cmp	r3, #0
 8014434:	d109      	bne.n	801444a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801443c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801443e:	f107 0208 	add.w	r2, r7, #8
 8014442:	4610      	mov	r0, r2
 8014444:	4798      	blx	r3
 8014446:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014448:	e029      	b.n	801449e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801444a:	6839      	ldr	r1, [r7, #0]
 801444c:	6878      	ldr	r0, [r7, #4]
 801444e:	f000 f9f4 	bl	801483a <USBD_CtlError>
        err++;
 8014452:	7afb      	ldrb	r3, [r7, #11]
 8014454:	3301      	adds	r3, #1
 8014456:	72fb      	strb	r3, [r7, #11]
      break;
 8014458:	e021      	b.n	801449e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	7c1b      	ldrb	r3, [r3, #16]
 801445e:	2b00      	cmp	r3, #0
 8014460:	d10d      	bne.n	801447e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801446a:	f107 0208 	add.w	r2, r7, #8
 801446e:	4610      	mov	r0, r2
 8014470:	4798      	blx	r3
 8014472:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014474:	68fb      	ldr	r3, [r7, #12]
 8014476:	3301      	adds	r3, #1
 8014478:	2207      	movs	r2, #7
 801447a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801447c:	e00f      	b.n	801449e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801447e:	6839      	ldr	r1, [r7, #0]
 8014480:	6878      	ldr	r0, [r7, #4]
 8014482:	f000 f9da 	bl	801483a <USBD_CtlError>
        err++;
 8014486:	7afb      	ldrb	r3, [r7, #11]
 8014488:	3301      	adds	r3, #1
 801448a:	72fb      	strb	r3, [r7, #11]
      break;
 801448c:	e007      	b.n	801449e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801448e:	6839      	ldr	r1, [r7, #0]
 8014490:	6878      	ldr	r0, [r7, #4]
 8014492:	f000 f9d2 	bl	801483a <USBD_CtlError>
      err++;
 8014496:	7afb      	ldrb	r3, [r7, #11]
 8014498:	3301      	adds	r3, #1
 801449a:	72fb      	strb	r3, [r7, #11]
      break;
 801449c:	bf00      	nop
  }

  if (err != 0U)
 801449e:	7afb      	ldrb	r3, [r7, #11]
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d11c      	bne.n	80144de <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80144a4:	893b      	ldrh	r3, [r7, #8]
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d011      	beq.n	80144ce <USBD_GetDescriptor+0x2b6>
 80144aa:	683b      	ldr	r3, [r7, #0]
 80144ac:	88db      	ldrh	r3, [r3, #6]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d00d      	beq.n	80144ce <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80144b2:	683b      	ldr	r3, [r7, #0]
 80144b4:	88da      	ldrh	r2, [r3, #6]
 80144b6:	893b      	ldrh	r3, [r7, #8]
 80144b8:	4293      	cmp	r3, r2
 80144ba:	bf28      	it	cs
 80144bc:	4613      	movcs	r3, r2
 80144be:	b29b      	uxth	r3, r3
 80144c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80144c2:	893b      	ldrh	r3, [r7, #8]
 80144c4:	461a      	mov	r2, r3
 80144c6:	68f9      	ldr	r1, [r7, #12]
 80144c8:	6878      	ldr	r0, [r7, #4]
 80144ca:	f000 fa21 	bl	8014910 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80144ce:	683b      	ldr	r3, [r7, #0]
 80144d0:	88db      	ldrh	r3, [r3, #6]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d104      	bne.n	80144e0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80144d6:	6878      	ldr	r0, [r7, #4]
 80144d8:	f000 fa5a 	bl	8014990 <USBD_CtlSendStatus>
 80144dc:	e000      	b.n	80144e0 <USBD_GetDescriptor+0x2c8>
    return;
 80144de:	bf00      	nop
    }
  }
}
 80144e0:	3710      	adds	r7, #16
 80144e2:	46bd      	mov	sp, r7
 80144e4:	bd80      	pop	{r7, pc}
 80144e6:	bf00      	nop

080144e8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80144e8:	b580      	push	{r7, lr}
 80144ea:	b084      	sub	sp, #16
 80144ec:	af00      	add	r7, sp, #0
 80144ee:	6078      	str	r0, [r7, #4]
 80144f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80144f2:	683b      	ldr	r3, [r7, #0]
 80144f4:	889b      	ldrh	r3, [r3, #4]
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d130      	bne.n	801455c <USBD_SetAddress+0x74>
 80144fa:	683b      	ldr	r3, [r7, #0]
 80144fc:	88db      	ldrh	r3, [r3, #6]
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d12c      	bne.n	801455c <USBD_SetAddress+0x74>
 8014502:	683b      	ldr	r3, [r7, #0]
 8014504:	885b      	ldrh	r3, [r3, #2]
 8014506:	2b7f      	cmp	r3, #127	; 0x7f
 8014508:	d828      	bhi.n	801455c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801450a:	683b      	ldr	r3, [r7, #0]
 801450c:	885b      	ldrh	r3, [r3, #2]
 801450e:	b2db      	uxtb	r3, r3
 8014510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014514:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801451c:	2b03      	cmp	r3, #3
 801451e:	d104      	bne.n	801452a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8014520:	6839      	ldr	r1, [r7, #0]
 8014522:	6878      	ldr	r0, [r7, #4]
 8014524:	f000 f989 	bl	801483a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014528:	e01c      	b.n	8014564 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	7bfa      	ldrb	r2, [r7, #15]
 801452e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014532:	7bfb      	ldrb	r3, [r7, #15]
 8014534:	4619      	mov	r1, r3
 8014536:	6878      	ldr	r0, [r7, #4]
 8014538:	f006 f91c 	bl	801a774 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801453c:	6878      	ldr	r0, [r7, #4]
 801453e:	f000 fa27 	bl	8014990 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014542:	7bfb      	ldrb	r3, [r7, #15]
 8014544:	2b00      	cmp	r3, #0
 8014546:	d004      	beq.n	8014552 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	2202      	movs	r2, #2
 801454c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014550:	e008      	b.n	8014564 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	2201      	movs	r2, #1
 8014556:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801455a:	e003      	b.n	8014564 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801455c:	6839      	ldr	r1, [r7, #0]
 801455e:	6878      	ldr	r0, [r7, #4]
 8014560:	f000 f96b 	bl	801483a <USBD_CtlError>
  }
}
 8014564:	bf00      	nop
 8014566:	3710      	adds	r7, #16
 8014568:	46bd      	mov	sp, r7
 801456a:	bd80      	pop	{r7, pc}

0801456c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801456c:	b580      	push	{r7, lr}
 801456e:	b082      	sub	sp, #8
 8014570:	af00      	add	r7, sp, #0
 8014572:	6078      	str	r0, [r7, #4]
 8014574:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014576:	683b      	ldr	r3, [r7, #0]
 8014578:	885b      	ldrh	r3, [r3, #2]
 801457a:	b2da      	uxtb	r2, r3
 801457c:	4b41      	ldr	r3, [pc, #260]	; (8014684 <USBD_SetConfig+0x118>)
 801457e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014580:	4b40      	ldr	r3, [pc, #256]	; (8014684 <USBD_SetConfig+0x118>)
 8014582:	781b      	ldrb	r3, [r3, #0]
 8014584:	2b01      	cmp	r3, #1
 8014586:	d904      	bls.n	8014592 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8014588:	6839      	ldr	r1, [r7, #0]
 801458a:	6878      	ldr	r0, [r7, #4]
 801458c:	f000 f955 	bl	801483a <USBD_CtlError>
 8014590:	e075      	b.n	801467e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014598:	2b02      	cmp	r3, #2
 801459a:	d002      	beq.n	80145a2 <USBD_SetConfig+0x36>
 801459c:	2b03      	cmp	r3, #3
 801459e:	d023      	beq.n	80145e8 <USBD_SetConfig+0x7c>
 80145a0:	e062      	b.n	8014668 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80145a2:	4b38      	ldr	r3, [pc, #224]	; (8014684 <USBD_SetConfig+0x118>)
 80145a4:	781b      	ldrb	r3, [r3, #0]
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d01a      	beq.n	80145e0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80145aa:	4b36      	ldr	r3, [pc, #216]	; (8014684 <USBD_SetConfig+0x118>)
 80145ac:	781b      	ldrb	r3, [r3, #0]
 80145ae:	461a      	mov	r2, r3
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	2203      	movs	r2, #3
 80145b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80145bc:	4b31      	ldr	r3, [pc, #196]	; (8014684 <USBD_SetConfig+0x118>)
 80145be:	781b      	ldrb	r3, [r3, #0]
 80145c0:	4619      	mov	r1, r3
 80145c2:	6878      	ldr	r0, [r7, #4]
 80145c4:	f7ff f9b5 	bl	8013932 <USBD_SetClassConfig>
 80145c8:	4603      	mov	r3, r0
 80145ca:	2b02      	cmp	r3, #2
 80145cc:	d104      	bne.n	80145d8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80145ce:	6839      	ldr	r1, [r7, #0]
 80145d0:	6878      	ldr	r0, [r7, #4]
 80145d2:	f000 f932 	bl	801483a <USBD_CtlError>
            return;
 80145d6:	e052      	b.n	801467e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80145d8:	6878      	ldr	r0, [r7, #4]
 80145da:	f000 f9d9 	bl	8014990 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80145de:	e04e      	b.n	801467e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80145e0:	6878      	ldr	r0, [r7, #4]
 80145e2:	f000 f9d5 	bl	8014990 <USBD_CtlSendStatus>
        break;
 80145e6:	e04a      	b.n	801467e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80145e8:	4b26      	ldr	r3, [pc, #152]	; (8014684 <USBD_SetConfig+0x118>)
 80145ea:	781b      	ldrb	r3, [r3, #0]
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d112      	bne.n	8014616 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	2202      	movs	r2, #2
 80145f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80145f8:	4b22      	ldr	r3, [pc, #136]	; (8014684 <USBD_SetConfig+0x118>)
 80145fa:	781b      	ldrb	r3, [r3, #0]
 80145fc:	461a      	mov	r2, r3
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8014602:	4b20      	ldr	r3, [pc, #128]	; (8014684 <USBD_SetConfig+0x118>)
 8014604:	781b      	ldrb	r3, [r3, #0]
 8014606:	4619      	mov	r1, r3
 8014608:	6878      	ldr	r0, [r7, #4]
 801460a:	f7ff f9b1 	bl	8013970 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801460e:	6878      	ldr	r0, [r7, #4]
 8014610:	f000 f9be 	bl	8014990 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8014614:	e033      	b.n	801467e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8014616:	4b1b      	ldr	r3, [pc, #108]	; (8014684 <USBD_SetConfig+0x118>)
 8014618:	781b      	ldrb	r3, [r3, #0]
 801461a:	461a      	mov	r2, r3
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	685b      	ldr	r3, [r3, #4]
 8014620:	429a      	cmp	r2, r3
 8014622:	d01d      	beq.n	8014660 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	685b      	ldr	r3, [r3, #4]
 8014628:	b2db      	uxtb	r3, r3
 801462a:	4619      	mov	r1, r3
 801462c:	6878      	ldr	r0, [r7, #4]
 801462e:	f7ff f99f 	bl	8013970 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8014632:	4b14      	ldr	r3, [pc, #80]	; (8014684 <USBD_SetConfig+0x118>)
 8014634:	781b      	ldrb	r3, [r3, #0]
 8014636:	461a      	mov	r2, r3
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801463c:	4b11      	ldr	r3, [pc, #68]	; (8014684 <USBD_SetConfig+0x118>)
 801463e:	781b      	ldrb	r3, [r3, #0]
 8014640:	4619      	mov	r1, r3
 8014642:	6878      	ldr	r0, [r7, #4]
 8014644:	f7ff f975 	bl	8013932 <USBD_SetClassConfig>
 8014648:	4603      	mov	r3, r0
 801464a:	2b02      	cmp	r3, #2
 801464c:	d104      	bne.n	8014658 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 801464e:	6839      	ldr	r1, [r7, #0]
 8014650:	6878      	ldr	r0, [r7, #4]
 8014652:	f000 f8f2 	bl	801483a <USBD_CtlError>
            return;
 8014656:	e012      	b.n	801467e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8014658:	6878      	ldr	r0, [r7, #4]
 801465a:	f000 f999 	bl	8014990 <USBD_CtlSendStatus>
        break;
 801465e:	e00e      	b.n	801467e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8014660:	6878      	ldr	r0, [r7, #4]
 8014662:	f000 f995 	bl	8014990 <USBD_CtlSendStatus>
        break;
 8014666:	e00a      	b.n	801467e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8014668:	6839      	ldr	r1, [r7, #0]
 801466a:	6878      	ldr	r0, [r7, #4]
 801466c:	f000 f8e5 	bl	801483a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8014670:	4b04      	ldr	r3, [pc, #16]	; (8014684 <USBD_SetConfig+0x118>)
 8014672:	781b      	ldrb	r3, [r3, #0]
 8014674:	4619      	mov	r1, r3
 8014676:	6878      	ldr	r0, [r7, #4]
 8014678:	f7ff f97a 	bl	8013970 <USBD_ClrClassConfig>
        break;
 801467c:	bf00      	nop
    }
  }
}
 801467e:	3708      	adds	r7, #8
 8014680:	46bd      	mov	sp, r7
 8014682:	bd80      	pop	{r7, pc}
 8014684:	24000280 	.word	0x24000280

08014688 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014688:	b580      	push	{r7, lr}
 801468a:	b082      	sub	sp, #8
 801468c:	af00      	add	r7, sp, #0
 801468e:	6078      	str	r0, [r7, #4]
 8014690:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014692:	683b      	ldr	r3, [r7, #0]
 8014694:	88db      	ldrh	r3, [r3, #6]
 8014696:	2b01      	cmp	r3, #1
 8014698:	d004      	beq.n	80146a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801469a:	6839      	ldr	r1, [r7, #0]
 801469c:	6878      	ldr	r0, [r7, #4]
 801469e:	f000 f8cc 	bl	801483a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80146a2:	e021      	b.n	80146e8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80146aa:	2b01      	cmp	r3, #1
 80146ac:	db17      	blt.n	80146de <USBD_GetConfig+0x56>
 80146ae:	2b02      	cmp	r3, #2
 80146b0:	dd02      	ble.n	80146b8 <USBD_GetConfig+0x30>
 80146b2:	2b03      	cmp	r3, #3
 80146b4:	d00b      	beq.n	80146ce <USBD_GetConfig+0x46>
 80146b6:	e012      	b.n	80146de <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	2200      	movs	r2, #0
 80146bc:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	3308      	adds	r3, #8
 80146c2:	2201      	movs	r2, #1
 80146c4:	4619      	mov	r1, r3
 80146c6:	6878      	ldr	r0, [r7, #4]
 80146c8:	f000 f922 	bl	8014910 <USBD_CtlSendData>
        break;
 80146cc:	e00c      	b.n	80146e8 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	3304      	adds	r3, #4
 80146d2:	2201      	movs	r2, #1
 80146d4:	4619      	mov	r1, r3
 80146d6:	6878      	ldr	r0, [r7, #4]
 80146d8:	f000 f91a 	bl	8014910 <USBD_CtlSendData>
        break;
 80146dc:	e004      	b.n	80146e8 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80146de:	6839      	ldr	r1, [r7, #0]
 80146e0:	6878      	ldr	r0, [r7, #4]
 80146e2:	f000 f8aa 	bl	801483a <USBD_CtlError>
        break;
 80146e6:	bf00      	nop
}
 80146e8:	bf00      	nop
 80146ea:	3708      	adds	r7, #8
 80146ec:	46bd      	mov	sp, r7
 80146ee:	bd80      	pop	{r7, pc}

080146f0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80146f0:	b580      	push	{r7, lr}
 80146f2:	b082      	sub	sp, #8
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	6078      	str	r0, [r7, #4]
 80146f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014700:	3b01      	subs	r3, #1
 8014702:	2b02      	cmp	r3, #2
 8014704:	d81e      	bhi.n	8014744 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014706:	683b      	ldr	r3, [r7, #0]
 8014708:	88db      	ldrh	r3, [r3, #6]
 801470a:	2b02      	cmp	r3, #2
 801470c:	d004      	beq.n	8014718 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 801470e:	6839      	ldr	r1, [r7, #0]
 8014710:	6878      	ldr	r0, [r7, #4]
 8014712:	f000 f892 	bl	801483a <USBD_CtlError>
        break;
 8014716:	e01a      	b.n	801474e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	2201      	movs	r2, #1
 801471c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8014724:	2b00      	cmp	r3, #0
 8014726:	d005      	beq.n	8014734 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	68db      	ldr	r3, [r3, #12]
 801472c:	f043 0202 	orr.w	r2, r3, #2
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	330c      	adds	r3, #12
 8014738:	2202      	movs	r2, #2
 801473a:	4619      	mov	r1, r3
 801473c:	6878      	ldr	r0, [r7, #4]
 801473e:	f000 f8e7 	bl	8014910 <USBD_CtlSendData>
      break;
 8014742:	e004      	b.n	801474e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8014744:	6839      	ldr	r1, [r7, #0]
 8014746:	6878      	ldr	r0, [r7, #4]
 8014748:	f000 f877 	bl	801483a <USBD_CtlError>
      break;
 801474c:	bf00      	nop
  }
}
 801474e:	bf00      	nop
 8014750:	3708      	adds	r7, #8
 8014752:	46bd      	mov	sp, r7
 8014754:	bd80      	pop	{r7, pc}

08014756 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8014756:	b580      	push	{r7, lr}
 8014758:	b082      	sub	sp, #8
 801475a:	af00      	add	r7, sp, #0
 801475c:	6078      	str	r0, [r7, #4]
 801475e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014760:	683b      	ldr	r3, [r7, #0]
 8014762:	885b      	ldrh	r3, [r3, #2]
 8014764:	2b01      	cmp	r3, #1
 8014766:	d106      	bne.n	8014776 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	2201      	movs	r2, #1
 801476c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8014770:	6878      	ldr	r0, [r7, #4]
 8014772:	f000 f90d 	bl	8014990 <USBD_CtlSendStatus>
  }
}
 8014776:	bf00      	nop
 8014778:	3708      	adds	r7, #8
 801477a:	46bd      	mov	sp, r7
 801477c:	bd80      	pop	{r7, pc}

0801477e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801477e:	b580      	push	{r7, lr}
 8014780:	b082      	sub	sp, #8
 8014782:	af00      	add	r7, sp, #0
 8014784:	6078      	str	r0, [r7, #4]
 8014786:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801478e:	3b01      	subs	r3, #1
 8014790:	2b02      	cmp	r3, #2
 8014792:	d80b      	bhi.n	80147ac <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014794:	683b      	ldr	r3, [r7, #0]
 8014796:	885b      	ldrh	r3, [r3, #2]
 8014798:	2b01      	cmp	r3, #1
 801479a:	d10c      	bne.n	80147b6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	2200      	movs	r2, #0
 80147a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80147a4:	6878      	ldr	r0, [r7, #4]
 80147a6:	f000 f8f3 	bl	8014990 <USBD_CtlSendStatus>
      }
      break;
 80147aa:	e004      	b.n	80147b6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80147ac:	6839      	ldr	r1, [r7, #0]
 80147ae:	6878      	ldr	r0, [r7, #4]
 80147b0:	f000 f843 	bl	801483a <USBD_CtlError>
      break;
 80147b4:	e000      	b.n	80147b8 <USBD_ClrFeature+0x3a>
      break;
 80147b6:	bf00      	nop
  }
}
 80147b8:	bf00      	nop
 80147ba:	3708      	adds	r7, #8
 80147bc:	46bd      	mov	sp, r7
 80147be:	bd80      	pop	{r7, pc}

080147c0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80147c0:	b480      	push	{r7}
 80147c2:	b083      	sub	sp, #12
 80147c4:	af00      	add	r7, sp, #0
 80147c6:	6078      	str	r0, [r7, #4]
 80147c8:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80147ca:	683b      	ldr	r3, [r7, #0]
 80147cc:	781a      	ldrb	r2, [r3, #0]
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80147d2:	683b      	ldr	r3, [r7, #0]
 80147d4:	785a      	ldrb	r2, [r3, #1]
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80147da:	683b      	ldr	r3, [r7, #0]
 80147dc:	3302      	adds	r3, #2
 80147de:	781b      	ldrb	r3, [r3, #0]
 80147e0:	b29a      	uxth	r2, r3
 80147e2:	683b      	ldr	r3, [r7, #0]
 80147e4:	3303      	adds	r3, #3
 80147e6:	781b      	ldrb	r3, [r3, #0]
 80147e8:	b29b      	uxth	r3, r3
 80147ea:	021b      	lsls	r3, r3, #8
 80147ec:	b29b      	uxth	r3, r3
 80147ee:	4413      	add	r3, r2
 80147f0:	b29a      	uxth	r2, r3
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80147f6:	683b      	ldr	r3, [r7, #0]
 80147f8:	3304      	adds	r3, #4
 80147fa:	781b      	ldrb	r3, [r3, #0]
 80147fc:	b29a      	uxth	r2, r3
 80147fe:	683b      	ldr	r3, [r7, #0]
 8014800:	3305      	adds	r3, #5
 8014802:	781b      	ldrb	r3, [r3, #0]
 8014804:	b29b      	uxth	r3, r3
 8014806:	021b      	lsls	r3, r3, #8
 8014808:	b29b      	uxth	r3, r3
 801480a:	4413      	add	r3, r2
 801480c:	b29a      	uxth	r2, r3
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8014812:	683b      	ldr	r3, [r7, #0]
 8014814:	3306      	adds	r3, #6
 8014816:	781b      	ldrb	r3, [r3, #0]
 8014818:	b29a      	uxth	r2, r3
 801481a:	683b      	ldr	r3, [r7, #0]
 801481c:	3307      	adds	r3, #7
 801481e:	781b      	ldrb	r3, [r3, #0]
 8014820:	b29b      	uxth	r3, r3
 8014822:	021b      	lsls	r3, r3, #8
 8014824:	b29b      	uxth	r3, r3
 8014826:	4413      	add	r3, r2
 8014828:	b29a      	uxth	r2, r3
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	80da      	strh	r2, [r3, #6]

}
 801482e:	bf00      	nop
 8014830:	370c      	adds	r7, #12
 8014832:	46bd      	mov	sp, r7
 8014834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014838:	4770      	bx	lr

0801483a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801483a:	b580      	push	{r7, lr}
 801483c:	b082      	sub	sp, #8
 801483e:	af00      	add	r7, sp, #0
 8014840:	6078      	str	r0, [r7, #4]
 8014842:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8014844:	2180      	movs	r1, #128	; 0x80
 8014846:	6878      	ldr	r0, [r7, #4]
 8014848:	f005 ff2a 	bl	801a6a0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801484c:	2100      	movs	r1, #0
 801484e:	6878      	ldr	r0, [r7, #4]
 8014850:	f005 ff26 	bl	801a6a0 <USBD_LL_StallEP>
}
 8014854:	bf00      	nop
 8014856:	3708      	adds	r7, #8
 8014858:	46bd      	mov	sp, r7
 801485a:	bd80      	pop	{r7, pc}

0801485c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801485c:	b580      	push	{r7, lr}
 801485e:	b086      	sub	sp, #24
 8014860:	af00      	add	r7, sp, #0
 8014862:	60f8      	str	r0, [r7, #12]
 8014864:	60b9      	str	r1, [r7, #8]
 8014866:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014868:	2300      	movs	r3, #0
 801486a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	2b00      	cmp	r3, #0
 8014870:	d032      	beq.n	80148d8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8014872:	68f8      	ldr	r0, [r7, #12]
 8014874:	f000 f834 	bl	80148e0 <USBD_GetLen>
 8014878:	4603      	mov	r3, r0
 801487a:	3301      	adds	r3, #1
 801487c:	b29b      	uxth	r3, r3
 801487e:	005b      	lsls	r3, r3, #1
 8014880:	b29a      	uxth	r2, r3
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8014886:	7dfb      	ldrb	r3, [r7, #23]
 8014888:	1c5a      	adds	r2, r3, #1
 801488a:	75fa      	strb	r2, [r7, #23]
 801488c:	461a      	mov	r2, r3
 801488e:	68bb      	ldr	r3, [r7, #8]
 8014890:	4413      	add	r3, r2
 8014892:	687a      	ldr	r2, [r7, #4]
 8014894:	7812      	ldrb	r2, [r2, #0]
 8014896:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8014898:	7dfb      	ldrb	r3, [r7, #23]
 801489a:	1c5a      	adds	r2, r3, #1
 801489c:	75fa      	strb	r2, [r7, #23]
 801489e:	461a      	mov	r2, r3
 80148a0:	68bb      	ldr	r3, [r7, #8]
 80148a2:	4413      	add	r3, r2
 80148a4:	2203      	movs	r2, #3
 80148a6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80148a8:	e012      	b.n	80148d0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	1c5a      	adds	r2, r3, #1
 80148ae:	60fa      	str	r2, [r7, #12]
 80148b0:	7dfa      	ldrb	r2, [r7, #23]
 80148b2:	1c51      	adds	r1, r2, #1
 80148b4:	75f9      	strb	r1, [r7, #23]
 80148b6:	4611      	mov	r1, r2
 80148b8:	68ba      	ldr	r2, [r7, #8]
 80148ba:	440a      	add	r2, r1
 80148bc:	781b      	ldrb	r3, [r3, #0]
 80148be:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80148c0:	7dfb      	ldrb	r3, [r7, #23]
 80148c2:	1c5a      	adds	r2, r3, #1
 80148c4:	75fa      	strb	r2, [r7, #23]
 80148c6:	461a      	mov	r2, r3
 80148c8:	68bb      	ldr	r3, [r7, #8]
 80148ca:	4413      	add	r3, r2
 80148cc:	2200      	movs	r2, #0
 80148ce:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	781b      	ldrb	r3, [r3, #0]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d1e8      	bne.n	80148aa <USBD_GetString+0x4e>
    }
  }
}
 80148d8:	bf00      	nop
 80148da:	3718      	adds	r7, #24
 80148dc:	46bd      	mov	sp, r7
 80148de:	bd80      	pop	{r7, pc}

080148e0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80148e0:	b480      	push	{r7}
 80148e2:	b085      	sub	sp, #20
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80148e8:	2300      	movs	r3, #0
 80148ea:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80148ec:	e005      	b.n	80148fa <USBD_GetLen+0x1a>
  {
    len++;
 80148ee:	7bfb      	ldrb	r3, [r7, #15]
 80148f0:	3301      	adds	r3, #1
 80148f2:	73fb      	strb	r3, [r7, #15]
    buf++;
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	3301      	adds	r3, #1
 80148f8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	781b      	ldrb	r3, [r3, #0]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d1f5      	bne.n	80148ee <USBD_GetLen+0xe>
  }

  return len;
 8014902:	7bfb      	ldrb	r3, [r7, #15]
}
 8014904:	4618      	mov	r0, r3
 8014906:	3714      	adds	r7, #20
 8014908:	46bd      	mov	sp, r7
 801490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801490e:	4770      	bx	lr

08014910 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8014910:	b580      	push	{r7, lr}
 8014912:	b084      	sub	sp, #16
 8014914:	af00      	add	r7, sp, #0
 8014916:	60f8      	str	r0, [r7, #12]
 8014918:	60b9      	str	r1, [r7, #8]
 801491a:	4613      	mov	r3, r2
 801491c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	2202      	movs	r2, #2
 8014922:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8014926:	88fa      	ldrh	r2, [r7, #6]
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801492c:	88fa      	ldrh	r2, [r7, #6]
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014932:	88fb      	ldrh	r3, [r7, #6]
 8014934:	68ba      	ldr	r2, [r7, #8]
 8014936:	2100      	movs	r1, #0
 8014938:	68f8      	ldr	r0, [r7, #12]
 801493a:	f005 ff3a 	bl	801a7b2 <USBD_LL_Transmit>

  return USBD_OK;
 801493e:	2300      	movs	r3, #0
}
 8014940:	4618      	mov	r0, r3
 8014942:	3710      	adds	r7, #16
 8014944:	46bd      	mov	sp, r7
 8014946:	bd80      	pop	{r7, pc}

08014948 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8014948:	b580      	push	{r7, lr}
 801494a:	b084      	sub	sp, #16
 801494c:	af00      	add	r7, sp, #0
 801494e:	60f8      	str	r0, [r7, #12]
 8014950:	60b9      	str	r1, [r7, #8]
 8014952:	4613      	mov	r3, r2
 8014954:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014956:	88fb      	ldrh	r3, [r7, #6]
 8014958:	68ba      	ldr	r2, [r7, #8]
 801495a:	2100      	movs	r1, #0
 801495c:	68f8      	ldr	r0, [r7, #12]
 801495e:	f005 ff28 	bl	801a7b2 <USBD_LL_Transmit>

  return USBD_OK;
 8014962:	2300      	movs	r3, #0
}
 8014964:	4618      	mov	r0, r3
 8014966:	3710      	adds	r7, #16
 8014968:	46bd      	mov	sp, r7
 801496a:	bd80      	pop	{r7, pc}

0801496c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801496c:	b580      	push	{r7, lr}
 801496e:	b084      	sub	sp, #16
 8014970:	af00      	add	r7, sp, #0
 8014972:	60f8      	str	r0, [r7, #12]
 8014974:	60b9      	str	r1, [r7, #8]
 8014976:	4613      	mov	r3, r2
 8014978:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801497a:	88fb      	ldrh	r3, [r7, #6]
 801497c:	68ba      	ldr	r2, [r7, #8]
 801497e:	2100      	movs	r1, #0
 8014980:	68f8      	ldr	r0, [r7, #12]
 8014982:	f005 ff39 	bl	801a7f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014986:	2300      	movs	r3, #0
}
 8014988:	4618      	mov	r0, r3
 801498a:	3710      	adds	r7, #16
 801498c:	46bd      	mov	sp, r7
 801498e:	bd80      	pop	{r7, pc}

08014990 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014990:	b580      	push	{r7, lr}
 8014992:	b082      	sub	sp, #8
 8014994:	af00      	add	r7, sp, #0
 8014996:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	2204      	movs	r2, #4
 801499c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80149a0:	2300      	movs	r3, #0
 80149a2:	2200      	movs	r2, #0
 80149a4:	2100      	movs	r1, #0
 80149a6:	6878      	ldr	r0, [r7, #4]
 80149a8:	f005 ff03 	bl	801a7b2 <USBD_LL_Transmit>

  return USBD_OK;
 80149ac:	2300      	movs	r3, #0
}
 80149ae:	4618      	mov	r0, r3
 80149b0:	3708      	adds	r7, #8
 80149b2:	46bd      	mov	sp, r7
 80149b4:	bd80      	pop	{r7, pc}

080149b6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80149b6:	b580      	push	{r7, lr}
 80149b8:	b082      	sub	sp, #8
 80149ba:	af00      	add	r7, sp, #0
 80149bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	2205      	movs	r2, #5
 80149c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80149c6:	2300      	movs	r3, #0
 80149c8:	2200      	movs	r2, #0
 80149ca:	2100      	movs	r1, #0
 80149cc:	6878      	ldr	r0, [r7, #4]
 80149ce:	f005 ff13 	bl	801a7f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80149d2:	2300      	movs	r3, #0
}
 80149d4:	4618      	mov	r0, r3
 80149d6:	3708      	adds	r7, #8
 80149d8:	46bd      	mov	sp, r7
 80149da:	bd80      	pop	{r7, pc}

080149dc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80149dc:	b580      	push	{r7, lr}
 80149de:	b084      	sub	sp, #16
 80149e0:	af00      	add	r7, sp, #0
 80149e2:	4603      	mov	r3, r0
 80149e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80149e6:	79fb      	ldrb	r3, [r7, #7]
 80149e8:	4a08      	ldr	r2, [pc, #32]	; (8014a0c <disk_status+0x30>)
 80149ea:	009b      	lsls	r3, r3, #2
 80149ec:	4413      	add	r3, r2
 80149ee:	685b      	ldr	r3, [r3, #4]
 80149f0:	685b      	ldr	r3, [r3, #4]
 80149f2:	79fa      	ldrb	r2, [r7, #7]
 80149f4:	4905      	ldr	r1, [pc, #20]	; (8014a0c <disk_status+0x30>)
 80149f6:	440a      	add	r2, r1
 80149f8:	7b12      	ldrb	r2, [r2, #12]
 80149fa:	4610      	mov	r0, r2
 80149fc:	4798      	blx	r3
 80149fe:	4603      	mov	r3, r0
 8014a00:	73fb      	strb	r3, [r7, #15]
  return stat;
 8014a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a04:	4618      	mov	r0, r3
 8014a06:	3710      	adds	r7, #16
 8014a08:	46bd      	mov	sp, r7
 8014a0a:	bd80      	pop	{r7, pc}
 8014a0c:	240002b0 	.word	0x240002b0

08014a10 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8014a10:	b580      	push	{r7, lr}
 8014a12:	b084      	sub	sp, #16
 8014a14:	af00      	add	r7, sp, #0
 8014a16:	4603      	mov	r3, r0
 8014a18:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8014a1a:	2300      	movs	r3, #0
 8014a1c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8014a1e:	79fb      	ldrb	r3, [r7, #7]
 8014a20:	4a0d      	ldr	r2, [pc, #52]	; (8014a58 <disk_initialize+0x48>)
 8014a22:	5cd3      	ldrb	r3, [r2, r3]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d111      	bne.n	8014a4c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8014a28:	79fb      	ldrb	r3, [r7, #7]
 8014a2a:	4a0b      	ldr	r2, [pc, #44]	; (8014a58 <disk_initialize+0x48>)
 8014a2c:	2101      	movs	r1, #1
 8014a2e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8014a30:	79fb      	ldrb	r3, [r7, #7]
 8014a32:	4a09      	ldr	r2, [pc, #36]	; (8014a58 <disk_initialize+0x48>)
 8014a34:	009b      	lsls	r3, r3, #2
 8014a36:	4413      	add	r3, r2
 8014a38:	685b      	ldr	r3, [r3, #4]
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	79fa      	ldrb	r2, [r7, #7]
 8014a3e:	4906      	ldr	r1, [pc, #24]	; (8014a58 <disk_initialize+0x48>)
 8014a40:	440a      	add	r2, r1
 8014a42:	7b12      	ldrb	r2, [r2, #12]
 8014a44:	4610      	mov	r0, r2
 8014a46:	4798      	blx	r3
 8014a48:	4603      	mov	r3, r0
 8014a4a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8014a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a4e:	4618      	mov	r0, r3
 8014a50:	3710      	adds	r7, #16
 8014a52:	46bd      	mov	sp, r7
 8014a54:	bd80      	pop	{r7, pc}
 8014a56:	bf00      	nop
 8014a58:	240002b0 	.word	0x240002b0

08014a5c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8014a5c:	b590      	push	{r4, r7, lr}
 8014a5e:	b087      	sub	sp, #28
 8014a60:	af00      	add	r7, sp, #0
 8014a62:	60b9      	str	r1, [r7, #8]
 8014a64:	607a      	str	r2, [r7, #4]
 8014a66:	603b      	str	r3, [r7, #0]
 8014a68:	4603      	mov	r3, r0
 8014a6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8014a6c:	7bfb      	ldrb	r3, [r7, #15]
 8014a6e:	4a0a      	ldr	r2, [pc, #40]	; (8014a98 <disk_read+0x3c>)
 8014a70:	009b      	lsls	r3, r3, #2
 8014a72:	4413      	add	r3, r2
 8014a74:	685b      	ldr	r3, [r3, #4]
 8014a76:	689c      	ldr	r4, [r3, #8]
 8014a78:	7bfb      	ldrb	r3, [r7, #15]
 8014a7a:	4a07      	ldr	r2, [pc, #28]	; (8014a98 <disk_read+0x3c>)
 8014a7c:	4413      	add	r3, r2
 8014a7e:	7b18      	ldrb	r0, [r3, #12]
 8014a80:	683b      	ldr	r3, [r7, #0]
 8014a82:	687a      	ldr	r2, [r7, #4]
 8014a84:	68b9      	ldr	r1, [r7, #8]
 8014a86:	47a0      	blx	r4
 8014a88:	4603      	mov	r3, r0
 8014a8a:	75fb      	strb	r3, [r7, #23]
  return res;
 8014a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a8e:	4618      	mov	r0, r3
 8014a90:	371c      	adds	r7, #28
 8014a92:	46bd      	mov	sp, r7
 8014a94:	bd90      	pop	{r4, r7, pc}
 8014a96:	bf00      	nop
 8014a98:	240002b0 	.word	0x240002b0

08014a9c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8014a9c:	b590      	push	{r4, r7, lr}
 8014a9e:	b087      	sub	sp, #28
 8014aa0:	af00      	add	r7, sp, #0
 8014aa2:	60b9      	str	r1, [r7, #8]
 8014aa4:	607a      	str	r2, [r7, #4]
 8014aa6:	603b      	str	r3, [r7, #0]
 8014aa8:	4603      	mov	r3, r0
 8014aaa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8014aac:	7bfb      	ldrb	r3, [r7, #15]
 8014aae:	4a0a      	ldr	r2, [pc, #40]	; (8014ad8 <disk_write+0x3c>)
 8014ab0:	009b      	lsls	r3, r3, #2
 8014ab2:	4413      	add	r3, r2
 8014ab4:	685b      	ldr	r3, [r3, #4]
 8014ab6:	68dc      	ldr	r4, [r3, #12]
 8014ab8:	7bfb      	ldrb	r3, [r7, #15]
 8014aba:	4a07      	ldr	r2, [pc, #28]	; (8014ad8 <disk_write+0x3c>)
 8014abc:	4413      	add	r3, r2
 8014abe:	7b18      	ldrb	r0, [r3, #12]
 8014ac0:	683b      	ldr	r3, [r7, #0]
 8014ac2:	687a      	ldr	r2, [r7, #4]
 8014ac4:	68b9      	ldr	r1, [r7, #8]
 8014ac6:	47a0      	blx	r4
 8014ac8:	4603      	mov	r3, r0
 8014aca:	75fb      	strb	r3, [r7, #23]
  return res;
 8014acc:	7dfb      	ldrb	r3, [r7, #23]
}
 8014ace:	4618      	mov	r0, r3
 8014ad0:	371c      	adds	r7, #28
 8014ad2:	46bd      	mov	sp, r7
 8014ad4:	bd90      	pop	{r4, r7, pc}
 8014ad6:	bf00      	nop
 8014ad8:	240002b0 	.word	0x240002b0

08014adc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8014adc:	b580      	push	{r7, lr}
 8014ade:	b084      	sub	sp, #16
 8014ae0:	af00      	add	r7, sp, #0
 8014ae2:	4603      	mov	r3, r0
 8014ae4:	603a      	str	r2, [r7, #0]
 8014ae6:	71fb      	strb	r3, [r7, #7]
 8014ae8:	460b      	mov	r3, r1
 8014aea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8014aec:	79fb      	ldrb	r3, [r7, #7]
 8014aee:	4a09      	ldr	r2, [pc, #36]	; (8014b14 <disk_ioctl+0x38>)
 8014af0:	009b      	lsls	r3, r3, #2
 8014af2:	4413      	add	r3, r2
 8014af4:	685b      	ldr	r3, [r3, #4]
 8014af6:	691b      	ldr	r3, [r3, #16]
 8014af8:	79fa      	ldrb	r2, [r7, #7]
 8014afa:	4906      	ldr	r1, [pc, #24]	; (8014b14 <disk_ioctl+0x38>)
 8014afc:	440a      	add	r2, r1
 8014afe:	7b10      	ldrb	r0, [r2, #12]
 8014b00:	79b9      	ldrb	r1, [r7, #6]
 8014b02:	683a      	ldr	r2, [r7, #0]
 8014b04:	4798      	blx	r3
 8014b06:	4603      	mov	r3, r0
 8014b08:	73fb      	strb	r3, [r7, #15]
  return res;
 8014b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b0c:	4618      	mov	r0, r3
 8014b0e:	3710      	adds	r7, #16
 8014b10:	46bd      	mov	sp, r7
 8014b12:	bd80      	pop	{r7, pc}
 8014b14:	240002b0 	.word	0x240002b0

08014b18 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8014b18:	b480      	push	{r7}
 8014b1a:	b085      	sub	sp, #20
 8014b1c:	af00      	add	r7, sp, #0
 8014b1e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	3301      	adds	r3, #1
 8014b24:	781b      	ldrb	r3, [r3, #0]
 8014b26:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8014b28:	89fb      	ldrh	r3, [r7, #14]
 8014b2a:	021b      	lsls	r3, r3, #8
 8014b2c:	b21a      	sxth	r2, r3
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	781b      	ldrb	r3, [r3, #0]
 8014b32:	b21b      	sxth	r3, r3
 8014b34:	4313      	orrs	r3, r2
 8014b36:	b21b      	sxth	r3, r3
 8014b38:	81fb      	strh	r3, [r7, #14]
	return rv;
 8014b3a:	89fb      	ldrh	r3, [r7, #14]
}
 8014b3c:	4618      	mov	r0, r3
 8014b3e:	3714      	adds	r7, #20
 8014b40:	46bd      	mov	sp, r7
 8014b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b46:	4770      	bx	lr

08014b48 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8014b48:	b480      	push	{r7}
 8014b4a:	b085      	sub	sp, #20
 8014b4c:	af00      	add	r7, sp, #0
 8014b4e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	3303      	adds	r3, #3
 8014b54:	781b      	ldrb	r3, [r3, #0]
 8014b56:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	021b      	lsls	r3, r3, #8
 8014b5c:	687a      	ldr	r2, [r7, #4]
 8014b5e:	3202      	adds	r2, #2
 8014b60:	7812      	ldrb	r2, [r2, #0]
 8014b62:	4313      	orrs	r3, r2
 8014b64:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	021b      	lsls	r3, r3, #8
 8014b6a:	687a      	ldr	r2, [r7, #4]
 8014b6c:	3201      	adds	r2, #1
 8014b6e:	7812      	ldrb	r2, [r2, #0]
 8014b70:	4313      	orrs	r3, r2
 8014b72:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	021b      	lsls	r3, r3, #8
 8014b78:	687a      	ldr	r2, [r7, #4]
 8014b7a:	7812      	ldrb	r2, [r2, #0]
 8014b7c:	4313      	orrs	r3, r2
 8014b7e:	60fb      	str	r3, [r7, #12]
	return rv;
 8014b80:	68fb      	ldr	r3, [r7, #12]
}
 8014b82:	4618      	mov	r0, r3
 8014b84:	3714      	adds	r7, #20
 8014b86:	46bd      	mov	sp, r7
 8014b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b8c:	4770      	bx	lr

08014b8e <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8014b8e:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8014b92:	b085      	sub	sp, #20
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	6078      	str	r0, [r7, #4]
	QWORD rv;

	rv = ptr[7];
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	3307      	adds	r3, #7
 8014b9c:	781b      	ldrb	r3, [r3, #0]
 8014b9e:	b2db      	uxtb	r3, r3
 8014ba0:	f04f 0400 	mov.w	r4, #0
 8014ba4:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[6];
 8014ba8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8014bac:	f04f 0b00 	mov.w	fp, #0
 8014bb0:	f04f 0c00 	mov.w	ip, #0
 8014bb4:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8014bb8:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8014bbc:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8014bc0:	687a      	ldr	r2, [r7, #4]
 8014bc2:	3206      	adds	r2, #6
 8014bc4:	7812      	ldrb	r2, [r2, #0]
 8014bc6:	b2d1      	uxtb	r1, r2
 8014bc8:	f04f 0200 	mov.w	r2, #0
 8014bcc:	ea4b 0301 	orr.w	r3, fp, r1
 8014bd0:	ea4c 0402 	orr.w	r4, ip, r2
 8014bd4:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[5];
 8014bd8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8014bdc:	f04f 0b00 	mov.w	fp, #0
 8014be0:	f04f 0c00 	mov.w	ip, #0
 8014be4:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8014be8:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8014bec:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8014bf0:	687a      	ldr	r2, [r7, #4]
 8014bf2:	3205      	adds	r2, #5
 8014bf4:	7812      	ldrb	r2, [r2, #0]
 8014bf6:	b2d1      	uxtb	r1, r2
 8014bf8:	f04f 0200 	mov.w	r2, #0
 8014bfc:	ea4b 0301 	orr.w	r3, fp, r1
 8014c00:	ea4c 0402 	orr.w	r4, ip, r2
 8014c04:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[4];
 8014c08:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8014c0c:	f04f 0b00 	mov.w	fp, #0
 8014c10:	f04f 0c00 	mov.w	ip, #0
 8014c14:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8014c18:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8014c1c:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8014c20:	687a      	ldr	r2, [r7, #4]
 8014c22:	3204      	adds	r2, #4
 8014c24:	7812      	ldrb	r2, [r2, #0]
 8014c26:	b2d1      	uxtb	r1, r2
 8014c28:	f04f 0200 	mov.w	r2, #0
 8014c2c:	ea4b 0301 	orr.w	r3, fp, r1
 8014c30:	ea4c 0402 	orr.w	r4, ip, r2
 8014c34:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[3];
 8014c38:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8014c3c:	f04f 0b00 	mov.w	fp, #0
 8014c40:	f04f 0c00 	mov.w	ip, #0
 8014c44:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8014c48:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8014c4c:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8014c50:	687a      	ldr	r2, [r7, #4]
 8014c52:	3203      	adds	r2, #3
 8014c54:	7812      	ldrb	r2, [r2, #0]
 8014c56:	b2d1      	uxtb	r1, r2
 8014c58:	f04f 0200 	mov.w	r2, #0
 8014c5c:	ea4b 0301 	orr.w	r3, fp, r1
 8014c60:	ea4c 0402 	orr.w	r4, ip, r2
 8014c64:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[2];
 8014c68:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8014c6c:	f04f 0b00 	mov.w	fp, #0
 8014c70:	f04f 0c00 	mov.w	ip, #0
 8014c74:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8014c78:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8014c7c:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8014c80:	687a      	ldr	r2, [r7, #4]
 8014c82:	3202      	adds	r2, #2
 8014c84:	7812      	ldrb	r2, [r2, #0]
 8014c86:	b2d1      	uxtb	r1, r2
 8014c88:	f04f 0200 	mov.w	r2, #0
 8014c8c:	ea4b 0301 	orr.w	r3, fp, r1
 8014c90:	ea4c 0402 	orr.w	r4, ip, r2
 8014c94:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[1];
 8014c98:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8014c9c:	f04f 0b00 	mov.w	fp, #0
 8014ca0:	f04f 0c00 	mov.w	ip, #0
 8014ca4:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8014ca8:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8014cac:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8014cb0:	687a      	ldr	r2, [r7, #4]
 8014cb2:	3201      	adds	r2, #1
 8014cb4:	7812      	ldrb	r2, [r2, #0]
 8014cb6:	b2d1      	uxtb	r1, r2
 8014cb8:	f04f 0200 	mov.w	r2, #0
 8014cbc:	ea4b 0301 	orr.w	r3, fp, r1
 8014cc0:	ea4c 0402 	orr.w	r4, ip, r2
 8014cc4:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[0];
 8014cc8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8014ccc:	f04f 0b00 	mov.w	fp, #0
 8014cd0:	f04f 0c00 	mov.w	ip, #0
 8014cd4:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8014cd8:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8014cdc:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8014ce0:	687a      	ldr	r2, [r7, #4]
 8014ce2:	7812      	ldrb	r2, [r2, #0]
 8014ce4:	b2d1      	uxtb	r1, r2
 8014ce6:	f04f 0200 	mov.w	r2, #0
 8014cea:	ea4b 0301 	orr.w	r3, fp, r1
 8014cee:	ea4c 0402 	orr.w	r4, ip, r2
 8014cf2:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return rv;
 8014cf6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 8014cfa:	4618      	mov	r0, r3
 8014cfc:	4621      	mov	r1, r4
 8014cfe:	3714      	adds	r7, #20
 8014d00:	46bd      	mov	sp, r7
 8014d02:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8014d06:	4770      	bx	lr

08014d08 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8014d08:	b480      	push	{r7}
 8014d0a:	b083      	sub	sp, #12
 8014d0c:	af00      	add	r7, sp, #0
 8014d0e:	6078      	str	r0, [r7, #4]
 8014d10:	460b      	mov	r3, r1
 8014d12:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	1c5a      	adds	r2, r3, #1
 8014d18:	607a      	str	r2, [r7, #4]
 8014d1a:	887a      	ldrh	r2, [r7, #2]
 8014d1c:	b2d2      	uxtb	r2, r2
 8014d1e:	701a      	strb	r2, [r3, #0]
 8014d20:	887b      	ldrh	r3, [r7, #2]
 8014d22:	0a1b      	lsrs	r3, r3, #8
 8014d24:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	1c5a      	adds	r2, r3, #1
 8014d2a:	607a      	str	r2, [r7, #4]
 8014d2c:	887a      	ldrh	r2, [r7, #2]
 8014d2e:	b2d2      	uxtb	r2, r2
 8014d30:	701a      	strb	r2, [r3, #0]
}
 8014d32:	bf00      	nop
 8014d34:	370c      	adds	r7, #12
 8014d36:	46bd      	mov	sp, r7
 8014d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d3c:	4770      	bx	lr

08014d3e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8014d3e:	b480      	push	{r7}
 8014d40:	b083      	sub	sp, #12
 8014d42:	af00      	add	r7, sp, #0
 8014d44:	6078      	str	r0, [r7, #4]
 8014d46:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	1c5a      	adds	r2, r3, #1
 8014d4c:	607a      	str	r2, [r7, #4]
 8014d4e:	683a      	ldr	r2, [r7, #0]
 8014d50:	b2d2      	uxtb	r2, r2
 8014d52:	701a      	strb	r2, [r3, #0]
 8014d54:	683b      	ldr	r3, [r7, #0]
 8014d56:	0a1b      	lsrs	r3, r3, #8
 8014d58:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	1c5a      	adds	r2, r3, #1
 8014d5e:	607a      	str	r2, [r7, #4]
 8014d60:	683a      	ldr	r2, [r7, #0]
 8014d62:	b2d2      	uxtb	r2, r2
 8014d64:	701a      	strb	r2, [r3, #0]
 8014d66:	683b      	ldr	r3, [r7, #0]
 8014d68:	0a1b      	lsrs	r3, r3, #8
 8014d6a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	1c5a      	adds	r2, r3, #1
 8014d70:	607a      	str	r2, [r7, #4]
 8014d72:	683a      	ldr	r2, [r7, #0]
 8014d74:	b2d2      	uxtb	r2, r2
 8014d76:	701a      	strb	r2, [r3, #0]
 8014d78:	683b      	ldr	r3, [r7, #0]
 8014d7a:	0a1b      	lsrs	r3, r3, #8
 8014d7c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	1c5a      	adds	r2, r3, #1
 8014d82:	607a      	str	r2, [r7, #4]
 8014d84:	683a      	ldr	r2, [r7, #0]
 8014d86:	b2d2      	uxtb	r2, r2
 8014d88:	701a      	strb	r2, [r3, #0]
}
 8014d8a:	bf00      	nop
 8014d8c:	370c      	adds	r7, #12
 8014d8e:	46bd      	mov	sp, r7
 8014d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d94:	4770      	bx	lr

08014d96 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 8014d96:	b490      	push	{r4, r7}
 8014d98:	b084      	sub	sp, #16
 8014d9a:	af00      	add	r7, sp, #0
 8014d9c:	60f8      	str	r0, [r7, #12]
 8014d9e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	1c5a      	adds	r2, r3, #1
 8014da6:	60fa      	str	r2, [r7, #12]
 8014da8:	783a      	ldrb	r2, [r7, #0]
 8014daa:	701a      	strb	r2, [r3, #0]
 8014dac:	e9d7 1200 	ldrd	r1, r2, [r7]
 8014db0:	f04f 0300 	mov.w	r3, #0
 8014db4:	f04f 0400 	mov.w	r4, #0
 8014db8:	0a0b      	lsrs	r3, r1, #8
 8014dba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8014dbe:	0a14      	lsrs	r4, r2, #8
 8014dc0:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	1c5a      	adds	r2, r3, #1
 8014dc8:	60fa      	str	r2, [r7, #12]
 8014dca:	783a      	ldrb	r2, [r7, #0]
 8014dcc:	701a      	strb	r2, [r3, #0]
 8014dce:	e9d7 1200 	ldrd	r1, r2, [r7]
 8014dd2:	f04f 0300 	mov.w	r3, #0
 8014dd6:	f04f 0400 	mov.w	r4, #0
 8014dda:	0a0b      	lsrs	r3, r1, #8
 8014ddc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8014de0:	0a14      	lsrs	r4, r2, #8
 8014de2:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8014de6:	68fb      	ldr	r3, [r7, #12]
 8014de8:	1c5a      	adds	r2, r3, #1
 8014dea:	60fa      	str	r2, [r7, #12]
 8014dec:	783a      	ldrb	r2, [r7, #0]
 8014dee:	701a      	strb	r2, [r3, #0]
 8014df0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8014df4:	f04f 0300 	mov.w	r3, #0
 8014df8:	f04f 0400 	mov.w	r4, #0
 8014dfc:	0a0b      	lsrs	r3, r1, #8
 8014dfe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8014e02:	0a14      	lsrs	r4, r2, #8
 8014e04:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	1c5a      	adds	r2, r3, #1
 8014e0c:	60fa      	str	r2, [r7, #12]
 8014e0e:	783a      	ldrb	r2, [r7, #0]
 8014e10:	701a      	strb	r2, [r3, #0]
 8014e12:	e9d7 1200 	ldrd	r1, r2, [r7]
 8014e16:	f04f 0300 	mov.w	r3, #0
 8014e1a:	f04f 0400 	mov.w	r4, #0
 8014e1e:	0a0b      	lsrs	r3, r1, #8
 8014e20:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8014e24:	0a14      	lsrs	r4, r2, #8
 8014e26:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	1c5a      	adds	r2, r3, #1
 8014e2e:	60fa      	str	r2, [r7, #12]
 8014e30:	783a      	ldrb	r2, [r7, #0]
 8014e32:	701a      	strb	r2, [r3, #0]
 8014e34:	e9d7 1200 	ldrd	r1, r2, [r7]
 8014e38:	f04f 0300 	mov.w	r3, #0
 8014e3c:	f04f 0400 	mov.w	r4, #0
 8014e40:	0a0b      	lsrs	r3, r1, #8
 8014e42:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8014e46:	0a14      	lsrs	r4, r2, #8
 8014e48:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	1c5a      	adds	r2, r3, #1
 8014e50:	60fa      	str	r2, [r7, #12]
 8014e52:	783a      	ldrb	r2, [r7, #0]
 8014e54:	701a      	strb	r2, [r3, #0]
 8014e56:	e9d7 1200 	ldrd	r1, r2, [r7]
 8014e5a:	f04f 0300 	mov.w	r3, #0
 8014e5e:	f04f 0400 	mov.w	r4, #0
 8014e62:	0a0b      	lsrs	r3, r1, #8
 8014e64:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8014e68:	0a14      	lsrs	r4, r2, #8
 8014e6a:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	1c5a      	adds	r2, r3, #1
 8014e72:	60fa      	str	r2, [r7, #12]
 8014e74:	783a      	ldrb	r2, [r7, #0]
 8014e76:	701a      	strb	r2, [r3, #0]
 8014e78:	e9d7 1200 	ldrd	r1, r2, [r7]
 8014e7c:	f04f 0300 	mov.w	r3, #0
 8014e80:	f04f 0400 	mov.w	r4, #0
 8014e84:	0a0b      	lsrs	r3, r1, #8
 8014e86:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8014e8a:	0a14      	lsrs	r4, r2, #8
 8014e8c:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val;
 8014e90:	68fb      	ldr	r3, [r7, #12]
 8014e92:	1c5a      	adds	r2, r3, #1
 8014e94:	60fa      	str	r2, [r7, #12]
 8014e96:	783a      	ldrb	r2, [r7, #0]
 8014e98:	701a      	strb	r2, [r3, #0]
}
 8014e9a:	bf00      	nop
 8014e9c:	3710      	adds	r7, #16
 8014e9e:	46bd      	mov	sp, r7
 8014ea0:	bc90      	pop	{r4, r7}
 8014ea2:	4770      	bx	lr

08014ea4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8014ea4:	b480      	push	{r7}
 8014ea6:	b087      	sub	sp, #28
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	60f8      	str	r0, [r7, #12]
 8014eac:	60b9      	str	r1, [r7, #8]
 8014eae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8014eb4:	68bb      	ldr	r3, [r7, #8]
 8014eb6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d00d      	beq.n	8014eda <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8014ebe:	693a      	ldr	r2, [r7, #16]
 8014ec0:	1c53      	adds	r3, r2, #1
 8014ec2:	613b      	str	r3, [r7, #16]
 8014ec4:	697b      	ldr	r3, [r7, #20]
 8014ec6:	1c59      	adds	r1, r3, #1
 8014ec8:	6179      	str	r1, [r7, #20]
 8014eca:	7812      	ldrb	r2, [r2, #0]
 8014ecc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	3b01      	subs	r3, #1
 8014ed2:	607b      	str	r3, [r7, #4]
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d1f1      	bne.n	8014ebe <mem_cpy+0x1a>
	}
}
 8014eda:	bf00      	nop
 8014edc:	371c      	adds	r7, #28
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ee4:	4770      	bx	lr

08014ee6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8014ee6:	b480      	push	{r7}
 8014ee8:	b087      	sub	sp, #28
 8014eea:	af00      	add	r7, sp, #0
 8014eec:	60f8      	str	r0, [r7, #12]
 8014eee:	60b9      	str	r1, [r7, #8]
 8014ef0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8014ef6:	697b      	ldr	r3, [r7, #20]
 8014ef8:	1c5a      	adds	r2, r3, #1
 8014efa:	617a      	str	r2, [r7, #20]
 8014efc:	68ba      	ldr	r2, [r7, #8]
 8014efe:	b2d2      	uxtb	r2, r2
 8014f00:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	3b01      	subs	r3, #1
 8014f06:	607b      	str	r3, [r7, #4]
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d1f3      	bne.n	8014ef6 <mem_set+0x10>
}
 8014f0e:	bf00      	nop
 8014f10:	371c      	adds	r7, #28
 8014f12:	46bd      	mov	sp, r7
 8014f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f18:	4770      	bx	lr

08014f1a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8014f1a:	b480      	push	{r7}
 8014f1c:	b089      	sub	sp, #36	; 0x24
 8014f1e:	af00      	add	r7, sp, #0
 8014f20:	60f8      	str	r0, [r7, #12]
 8014f22:	60b9      	str	r1, [r7, #8]
 8014f24:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	61fb      	str	r3, [r7, #28]
 8014f2a:	68bb      	ldr	r3, [r7, #8]
 8014f2c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8014f2e:	2300      	movs	r3, #0
 8014f30:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8014f32:	69fb      	ldr	r3, [r7, #28]
 8014f34:	1c5a      	adds	r2, r3, #1
 8014f36:	61fa      	str	r2, [r7, #28]
 8014f38:	781b      	ldrb	r3, [r3, #0]
 8014f3a:	4619      	mov	r1, r3
 8014f3c:	69bb      	ldr	r3, [r7, #24]
 8014f3e:	1c5a      	adds	r2, r3, #1
 8014f40:	61ba      	str	r2, [r7, #24]
 8014f42:	781b      	ldrb	r3, [r3, #0]
 8014f44:	1acb      	subs	r3, r1, r3
 8014f46:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	3b01      	subs	r3, #1
 8014f4c:	607b      	str	r3, [r7, #4]
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d002      	beq.n	8014f5a <mem_cmp+0x40>
 8014f54:	697b      	ldr	r3, [r7, #20]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d0eb      	beq.n	8014f32 <mem_cmp+0x18>

	return r;
 8014f5a:	697b      	ldr	r3, [r7, #20]
}
 8014f5c:	4618      	mov	r0, r3
 8014f5e:	3724      	adds	r7, #36	; 0x24
 8014f60:	46bd      	mov	sp, r7
 8014f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f66:	4770      	bx	lr

08014f68 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8014f68:	b480      	push	{r7}
 8014f6a:	b083      	sub	sp, #12
 8014f6c:	af00      	add	r7, sp, #0
 8014f6e:	6078      	str	r0, [r7, #4]
 8014f70:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8014f72:	e002      	b.n	8014f7a <chk_chr+0x12>
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	3301      	adds	r3, #1
 8014f78:	607b      	str	r3, [r7, #4]
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	781b      	ldrb	r3, [r3, #0]
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d005      	beq.n	8014f8e <chk_chr+0x26>
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	781b      	ldrb	r3, [r3, #0]
 8014f86:	461a      	mov	r2, r3
 8014f88:	683b      	ldr	r3, [r7, #0]
 8014f8a:	4293      	cmp	r3, r2
 8014f8c:	d1f2      	bne.n	8014f74 <chk_chr+0xc>
	return *str;
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	781b      	ldrb	r3, [r3, #0]
}
 8014f92:	4618      	mov	r0, r3
 8014f94:	370c      	adds	r7, #12
 8014f96:	46bd      	mov	sp, r7
 8014f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f9c:	4770      	bx	lr
	...

08014fa0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8014fa0:	b480      	push	{r7}
 8014fa2:	b085      	sub	sp, #20
 8014fa4:	af00      	add	r7, sp, #0
 8014fa6:	6078      	str	r0, [r7, #4]
 8014fa8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8014faa:	2300      	movs	r3, #0
 8014fac:	60bb      	str	r3, [r7, #8]
 8014fae:	68bb      	ldr	r3, [r7, #8]
 8014fb0:	60fb      	str	r3, [r7, #12]
 8014fb2:	e029      	b.n	8015008 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8014fb4:	4a27      	ldr	r2, [pc, #156]	; (8015054 <chk_lock+0xb4>)
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	011b      	lsls	r3, r3, #4
 8014fba:	4413      	add	r3, r2
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d01d      	beq.n	8014ffe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8014fc2:	4a24      	ldr	r2, [pc, #144]	; (8015054 <chk_lock+0xb4>)
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	011b      	lsls	r3, r3, #4
 8014fc8:	4413      	add	r3, r2
 8014fca:	681a      	ldr	r2, [r3, #0]
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	429a      	cmp	r2, r3
 8014fd2:	d116      	bne.n	8015002 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8014fd4:	4a1f      	ldr	r2, [pc, #124]	; (8015054 <chk_lock+0xb4>)
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	011b      	lsls	r3, r3, #4
 8014fda:	4413      	add	r3, r2
 8014fdc:	3304      	adds	r3, #4
 8014fde:	681a      	ldr	r2, [r3, #0]
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8014fe4:	429a      	cmp	r2, r3
 8014fe6:	d10c      	bne.n	8015002 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8014fe8:	4a1a      	ldr	r2, [pc, #104]	; (8015054 <chk_lock+0xb4>)
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	011b      	lsls	r3, r3, #4
 8014fee:	4413      	add	r3, r2
 8014ff0:	3308      	adds	r3, #8
 8014ff2:	681a      	ldr	r2, [r3, #0]
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 8014ff8:	429a      	cmp	r2, r3
 8014ffa:	d102      	bne.n	8015002 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8014ffc:	e007      	b.n	801500e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8014ffe:	2301      	movs	r3, #1
 8015000:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8015002:	68fb      	ldr	r3, [r7, #12]
 8015004:	3301      	adds	r3, #1
 8015006:	60fb      	str	r3, [r7, #12]
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	2b01      	cmp	r3, #1
 801500c:	d9d2      	bls.n	8014fb4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	2b02      	cmp	r3, #2
 8015012:	d109      	bne.n	8015028 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8015014:	68bb      	ldr	r3, [r7, #8]
 8015016:	2b00      	cmp	r3, #0
 8015018:	d102      	bne.n	8015020 <chk_lock+0x80>
 801501a:	683b      	ldr	r3, [r7, #0]
 801501c:	2b02      	cmp	r3, #2
 801501e:	d101      	bne.n	8015024 <chk_lock+0x84>
 8015020:	2300      	movs	r3, #0
 8015022:	e010      	b.n	8015046 <chk_lock+0xa6>
 8015024:	2312      	movs	r3, #18
 8015026:	e00e      	b.n	8015046 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8015028:	683b      	ldr	r3, [r7, #0]
 801502a:	2b00      	cmp	r3, #0
 801502c:	d108      	bne.n	8015040 <chk_lock+0xa0>
 801502e:	4a09      	ldr	r2, [pc, #36]	; (8015054 <chk_lock+0xb4>)
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	011b      	lsls	r3, r3, #4
 8015034:	4413      	add	r3, r2
 8015036:	330c      	adds	r3, #12
 8015038:	881b      	ldrh	r3, [r3, #0]
 801503a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801503e:	d101      	bne.n	8015044 <chk_lock+0xa4>
 8015040:	2310      	movs	r3, #16
 8015042:	e000      	b.n	8015046 <chk_lock+0xa6>
 8015044:	2300      	movs	r3, #0
}
 8015046:	4618      	mov	r0, r3
 8015048:	3714      	adds	r7, #20
 801504a:	46bd      	mov	sp, r7
 801504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015050:	4770      	bx	lr
 8015052:	bf00      	nop
 8015054:	24000290 	.word	0x24000290

08015058 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8015058:	b480      	push	{r7}
 801505a:	b083      	sub	sp, #12
 801505c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801505e:	2300      	movs	r3, #0
 8015060:	607b      	str	r3, [r7, #4]
 8015062:	e002      	b.n	801506a <enq_lock+0x12>
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	3301      	adds	r3, #1
 8015068:	607b      	str	r3, [r7, #4]
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	2b01      	cmp	r3, #1
 801506e:	d806      	bhi.n	801507e <enq_lock+0x26>
 8015070:	4a09      	ldr	r2, [pc, #36]	; (8015098 <enq_lock+0x40>)
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	011b      	lsls	r3, r3, #4
 8015076:	4413      	add	r3, r2
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	2b00      	cmp	r3, #0
 801507c:	d1f2      	bne.n	8015064 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	2b02      	cmp	r3, #2
 8015082:	bf14      	ite	ne
 8015084:	2301      	movne	r3, #1
 8015086:	2300      	moveq	r3, #0
 8015088:	b2db      	uxtb	r3, r3
}
 801508a:	4618      	mov	r0, r3
 801508c:	370c      	adds	r7, #12
 801508e:	46bd      	mov	sp, r7
 8015090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015094:	4770      	bx	lr
 8015096:	bf00      	nop
 8015098:	24000290 	.word	0x24000290

0801509c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801509c:	b480      	push	{r7}
 801509e:	b085      	sub	sp, #20
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	6078      	str	r0, [r7, #4]
 80150a4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80150a6:	2300      	movs	r3, #0
 80150a8:	60fb      	str	r3, [r7, #12]
 80150aa:	e01f      	b.n	80150ec <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80150ac:	4a41      	ldr	r2, [pc, #260]	; (80151b4 <inc_lock+0x118>)
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	011b      	lsls	r3, r3, #4
 80150b2:	4413      	add	r3, r2
 80150b4:	681a      	ldr	r2, [r3, #0]
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	429a      	cmp	r2, r3
 80150bc:	d113      	bne.n	80150e6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80150be:	4a3d      	ldr	r2, [pc, #244]	; (80151b4 <inc_lock+0x118>)
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	011b      	lsls	r3, r3, #4
 80150c4:	4413      	add	r3, r2
 80150c6:	3304      	adds	r3, #4
 80150c8:	681a      	ldr	r2, [r3, #0]
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80150ce:	429a      	cmp	r2, r3
 80150d0:	d109      	bne.n	80150e6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80150d2:	4a38      	ldr	r2, [pc, #224]	; (80151b4 <inc_lock+0x118>)
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	011b      	lsls	r3, r3, #4
 80150d8:	4413      	add	r3, r2
 80150da:	3308      	adds	r3, #8
 80150dc:	681a      	ldr	r2, [r3, #0]
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 80150e2:	429a      	cmp	r2, r3
 80150e4:	d006      	beq.n	80150f4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	3301      	adds	r3, #1
 80150ea:	60fb      	str	r3, [r7, #12]
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	2b01      	cmp	r3, #1
 80150f0:	d9dc      	bls.n	80150ac <inc_lock+0x10>
 80150f2:	e000      	b.n	80150f6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80150f4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	2b02      	cmp	r3, #2
 80150fa:	d132      	bne.n	8015162 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80150fc:	2300      	movs	r3, #0
 80150fe:	60fb      	str	r3, [r7, #12]
 8015100:	e002      	b.n	8015108 <inc_lock+0x6c>
 8015102:	68fb      	ldr	r3, [r7, #12]
 8015104:	3301      	adds	r3, #1
 8015106:	60fb      	str	r3, [r7, #12]
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	2b01      	cmp	r3, #1
 801510c:	d806      	bhi.n	801511c <inc_lock+0x80>
 801510e:	4a29      	ldr	r2, [pc, #164]	; (80151b4 <inc_lock+0x118>)
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	011b      	lsls	r3, r3, #4
 8015114:	4413      	add	r3, r2
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	2b00      	cmp	r3, #0
 801511a:	d1f2      	bne.n	8015102 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801511c:	68fb      	ldr	r3, [r7, #12]
 801511e:	2b02      	cmp	r3, #2
 8015120:	d101      	bne.n	8015126 <inc_lock+0x8a>
 8015122:	2300      	movs	r3, #0
 8015124:	e040      	b.n	80151a8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	681a      	ldr	r2, [r3, #0]
 801512a:	4922      	ldr	r1, [pc, #136]	; (80151b4 <inc_lock+0x118>)
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	011b      	lsls	r3, r3, #4
 8015130:	440b      	add	r3, r1
 8015132:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	689a      	ldr	r2, [r3, #8]
 8015138:	491e      	ldr	r1, [pc, #120]	; (80151b4 <inc_lock+0x118>)
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	011b      	lsls	r3, r3, #4
 801513e:	440b      	add	r3, r1
 8015140:	3304      	adds	r3, #4
 8015142:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015148:	491a      	ldr	r1, [pc, #104]	; (80151b4 <inc_lock+0x118>)
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	011b      	lsls	r3, r3, #4
 801514e:	440b      	add	r3, r1
 8015150:	3308      	adds	r3, #8
 8015152:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8015154:	4a17      	ldr	r2, [pc, #92]	; (80151b4 <inc_lock+0x118>)
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	011b      	lsls	r3, r3, #4
 801515a:	4413      	add	r3, r2
 801515c:	330c      	adds	r3, #12
 801515e:	2200      	movs	r2, #0
 8015160:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8015162:	683b      	ldr	r3, [r7, #0]
 8015164:	2b00      	cmp	r3, #0
 8015166:	d009      	beq.n	801517c <inc_lock+0xe0>
 8015168:	4a12      	ldr	r2, [pc, #72]	; (80151b4 <inc_lock+0x118>)
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	011b      	lsls	r3, r3, #4
 801516e:	4413      	add	r3, r2
 8015170:	330c      	adds	r3, #12
 8015172:	881b      	ldrh	r3, [r3, #0]
 8015174:	2b00      	cmp	r3, #0
 8015176:	d001      	beq.n	801517c <inc_lock+0xe0>
 8015178:	2300      	movs	r3, #0
 801517a:	e015      	b.n	80151a8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801517c:	683b      	ldr	r3, [r7, #0]
 801517e:	2b00      	cmp	r3, #0
 8015180:	d108      	bne.n	8015194 <inc_lock+0xf8>
 8015182:	4a0c      	ldr	r2, [pc, #48]	; (80151b4 <inc_lock+0x118>)
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	011b      	lsls	r3, r3, #4
 8015188:	4413      	add	r3, r2
 801518a:	330c      	adds	r3, #12
 801518c:	881b      	ldrh	r3, [r3, #0]
 801518e:	3301      	adds	r3, #1
 8015190:	b29a      	uxth	r2, r3
 8015192:	e001      	b.n	8015198 <inc_lock+0xfc>
 8015194:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015198:	4906      	ldr	r1, [pc, #24]	; (80151b4 <inc_lock+0x118>)
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	011b      	lsls	r3, r3, #4
 801519e:	440b      	add	r3, r1
 80151a0:	330c      	adds	r3, #12
 80151a2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	3301      	adds	r3, #1
}
 80151a8:	4618      	mov	r0, r3
 80151aa:	3714      	adds	r7, #20
 80151ac:	46bd      	mov	sp, r7
 80151ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151b2:	4770      	bx	lr
 80151b4:	24000290 	.word	0x24000290

080151b8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80151b8:	b480      	push	{r7}
 80151ba:	b085      	sub	sp, #20
 80151bc:	af00      	add	r7, sp, #0
 80151be:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	3b01      	subs	r3, #1
 80151c4:	607b      	str	r3, [r7, #4]
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	2b01      	cmp	r3, #1
 80151ca:	d825      	bhi.n	8015218 <dec_lock+0x60>
		n = Files[i].ctr;
 80151cc:	4a17      	ldr	r2, [pc, #92]	; (801522c <dec_lock+0x74>)
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	011b      	lsls	r3, r3, #4
 80151d2:	4413      	add	r3, r2
 80151d4:	330c      	adds	r3, #12
 80151d6:	881b      	ldrh	r3, [r3, #0]
 80151d8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80151da:	89fb      	ldrh	r3, [r7, #14]
 80151dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80151e0:	d101      	bne.n	80151e6 <dec_lock+0x2e>
 80151e2:	2300      	movs	r3, #0
 80151e4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80151e6:	89fb      	ldrh	r3, [r7, #14]
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d002      	beq.n	80151f2 <dec_lock+0x3a>
 80151ec:	89fb      	ldrh	r3, [r7, #14]
 80151ee:	3b01      	subs	r3, #1
 80151f0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80151f2:	4a0e      	ldr	r2, [pc, #56]	; (801522c <dec_lock+0x74>)
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	011b      	lsls	r3, r3, #4
 80151f8:	4413      	add	r3, r2
 80151fa:	330c      	adds	r3, #12
 80151fc:	89fa      	ldrh	r2, [r7, #14]
 80151fe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8015200:	89fb      	ldrh	r3, [r7, #14]
 8015202:	2b00      	cmp	r3, #0
 8015204:	d105      	bne.n	8015212 <dec_lock+0x5a>
 8015206:	4a09      	ldr	r2, [pc, #36]	; (801522c <dec_lock+0x74>)
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	011b      	lsls	r3, r3, #4
 801520c:	4413      	add	r3, r2
 801520e:	2200      	movs	r2, #0
 8015210:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8015212:	2300      	movs	r3, #0
 8015214:	737b      	strb	r3, [r7, #13]
 8015216:	e001      	b.n	801521c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8015218:	2302      	movs	r3, #2
 801521a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801521c:	7b7b      	ldrb	r3, [r7, #13]
}
 801521e:	4618      	mov	r0, r3
 8015220:	3714      	adds	r7, #20
 8015222:	46bd      	mov	sp, r7
 8015224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015228:	4770      	bx	lr
 801522a:	bf00      	nop
 801522c:	24000290 	.word	0x24000290

08015230 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8015230:	b480      	push	{r7}
 8015232:	b085      	sub	sp, #20
 8015234:	af00      	add	r7, sp, #0
 8015236:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8015238:	2300      	movs	r3, #0
 801523a:	60fb      	str	r3, [r7, #12]
 801523c:	e010      	b.n	8015260 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801523e:	4a0d      	ldr	r2, [pc, #52]	; (8015274 <clear_lock+0x44>)
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	011b      	lsls	r3, r3, #4
 8015244:	4413      	add	r3, r2
 8015246:	681b      	ldr	r3, [r3, #0]
 8015248:	687a      	ldr	r2, [r7, #4]
 801524a:	429a      	cmp	r2, r3
 801524c:	d105      	bne.n	801525a <clear_lock+0x2a>
 801524e:	4a09      	ldr	r2, [pc, #36]	; (8015274 <clear_lock+0x44>)
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	011b      	lsls	r3, r3, #4
 8015254:	4413      	add	r3, r2
 8015256:	2200      	movs	r2, #0
 8015258:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801525a:	68fb      	ldr	r3, [r7, #12]
 801525c:	3301      	adds	r3, #1
 801525e:	60fb      	str	r3, [r7, #12]
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	2b01      	cmp	r3, #1
 8015264:	d9eb      	bls.n	801523e <clear_lock+0xe>
	}
}
 8015266:	bf00      	nop
 8015268:	3714      	adds	r7, #20
 801526a:	46bd      	mov	sp, r7
 801526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015270:	4770      	bx	lr
 8015272:	bf00      	nop
 8015274:	24000290 	.word	0x24000290

08015278 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8015278:	b580      	push	{r7, lr}
 801527a:	b086      	sub	sp, #24
 801527c:	af00      	add	r7, sp, #0
 801527e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8015280:	2300      	movs	r3, #0
 8015282:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	78db      	ldrb	r3, [r3, #3]
 8015288:	2b00      	cmp	r3, #0
 801528a:	d034      	beq.n	80152f6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015290:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	7858      	ldrb	r0, [r3, #1]
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801529c:	2301      	movs	r3, #1
 801529e:	697a      	ldr	r2, [r7, #20]
 80152a0:	f7ff fbfc 	bl	8014a9c <disk_write>
 80152a4:	4603      	mov	r3, r0
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d002      	beq.n	80152b0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80152aa:	2301      	movs	r3, #1
 80152ac:	73fb      	strb	r3, [r7, #15]
 80152ae:	e022      	b.n	80152f6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	2200      	movs	r2, #0
 80152b4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152ba:	697a      	ldr	r2, [r7, #20]
 80152bc:	1ad2      	subs	r2, r2, r3
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152c2:	429a      	cmp	r2, r3
 80152c4:	d217      	bcs.n	80152f6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	789b      	ldrb	r3, [r3, #2]
 80152ca:	613b      	str	r3, [r7, #16]
 80152cc:	e010      	b.n	80152f0 <sync_window+0x78>
					wsect += fs->fsize;
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152d2:	697a      	ldr	r2, [r7, #20]
 80152d4:	4413      	add	r3, r2
 80152d6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	7858      	ldrb	r0, [r3, #1]
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80152e2:	2301      	movs	r3, #1
 80152e4:	697a      	ldr	r2, [r7, #20]
 80152e6:	f7ff fbd9 	bl	8014a9c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80152ea:	693b      	ldr	r3, [r7, #16]
 80152ec:	3b01      	subs	r3, #1
 80152ee:	613b      	str	r3, [r7, #16]
 80152f0:	693b      	ldr	r3, [r7, #16]
 80152f2:	2b01      	cmp	r3, #1
 80152f4:	d8eb      	bhi.n	80152ce <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80152f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80152f8:	4618      	mov	r0, r3
 80152fa:	3718      	adds	r7, #24
 80152fc:	46bd      	mov	sp, r7
 80152fe:	bd80      	pop	{r7, pc}

08015300 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8015300:	b580      	push	{r7, lr}
 8015302:	b084      	sub	sp, #16
 8015304:	af00      	add	r7, sp, #0
 8015306:	6078      	str	r0, [r7, #4]
 8015308:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801530a:	2300      	movs	r3, #0
 801530c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015312:	683a      	ldr	r2, [r7, #0]
 8015314:	429a      	cmp	r2, r3
 8015316:	d01b      	beq.n	8015350 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8015318:	6878      	ldr	r0, [r7, #4]
 801531a:	f7ff ffad 	bl	8015278 <sync_window>
 801531e:	4603      	mov	r3, r0
 8015320:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8015322:	7bfb      	ldrb	r3, [r7, #15]
 8015324:	2b00      	cmp	r3, #0
 8015326:	d113      	bne.n	8015350 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	7858      	ldrb	r0, [r3, #1]
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8015332:	2301      	movs	r3, #1
 8015334:	683a      	ldr	r2, [r7, #0]
 8015336:	f7ff fb91 	bl	8014a5c <disk_read>
 801533a:	4603      	mov	r3, r0
 801533c:	2b00      	cmp	r3, #0
 801533e:	d004      	beq.n	801534a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8015340:	f04f 33ff 	mov.w	r3, #4294967295
 8015344:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8015346:	2301      	movs	r3, #1
 8015348:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	683a      	ldr	r2, [r7, #0]
 801534e:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 8015350:	7bfb      	ldrb	r3, [r7, #15]
}
 8015352:	4618      	mov	r0, r3
 8015354:	3710      	adds	r7, #16
 8015356:	46bd      	mov	sp, r7
 8015358:	bd80      	pop	{r7, pc}
	...

0801535c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801535c:	b580      	push	{r7, lr}
 801535e:	b084      	sub	sp, #16
 8015360:	af00      	add	r7, sp, #0
 8015362:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8015364:	6878      	ldr	r0, [r7, #4]
 8015366:	f7ff ff87 	bl	8015278 <sync_window>
 801536a:	4603      	mov	r3, r0
 801536c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801536e:	7bfb      	ldrb	r3, [r7, #15]
 8015370:	2b00      	cmp	r3, #0
 8015372:	d159      	bne.n	8015428 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	781b      	ldrb	r3, [r3, #0]
 8015378:	2b03      	cmp	r3, #3
 801537a:	d149      	bne.n	8015410 <sync_fs+0xb4>
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	791b      	ldrb	r3, [r3, #4]
 8015380:	2b01      	cmp	r3, #1
 8015382:	d145      	bne.n	8015410 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	899b      	ldrh	r3, [r3, #12]
 801538e:	461a      	mov	r2, r3
 8015390:	2100      	movs	r1, #0
 8015392:	f7ff fda8 	bl	8014ee6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	333c      	adds	r3, #60	; 0x3c
 801539a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801539e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80153a2:	4618      	mov	r0, r3
 80153a4:	f7ff fcb0 	bl	8014d08 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	333c      	adds	r3, #60	; 0x3c
 80153ac:	4921      	ldr	r1, [pc, #132]	; (8015434 <sync_fs+0xd8>)
 80153ae:	4618      	mov	r0, r3
 80153b0:	f7ff fcc5 	bl	8014d3e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	333c      	adds	r3, #60	; 0x3c
 80153b8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80153bc:	491e      	ldr	r1, [pc, #120]	; (8015438 <sync_fs+0xdc>)
 80153be:	4618      	mov	r0, r3
 80153c0:	f7ff fcbd 	bl	8014d3e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	333c      	adds	r3, #60	; 0x3c
 80153c8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	69db      	ldr	r3, [r3, #28]
 80153d0:	4619      	mov	r1, r3
 80153d2:	4610      	mov	r0, r2
 80153d4:	f7ff fcb3 	bl	8014d3e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	333c      	adds	r3, #60	; 0x3c
 80153dc:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	699b      	ldr	r3, [r3, #24]
 80153e4:	4619      	mov	r1, r3
 80153e6:	4610      	mov	r0, r2
 80153e8:	f7ff fca9 	bl	8014d3e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80153f0:	1c5a      	adds	r2, r3, #1
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	7858      	ldrb	r0, [r3, #1]
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015404:	2301      	movs	r3, #1
 8015406:	f7ff fb49 	bl	8014a9c <disk_write>
			fs->fsi_flag = 0;
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	2200      	movs	r2, #0
 801540e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	785b      	ldrb	r3, [r3, #1]
 8015414:	2200      	movs	r2, #0
 8015416:	2100      	movs	r1, #0
 8015418:	4618      	mov	r0, r3
 801541a:	f7ff fb5f 	bl	8014adc <disk_ioctl>
 801541e:	4603      	mov	r3, r0
 8015420:	2b00      	cmp	r3, #0
 8015422:	d001      	beq.n	8015428 <sync_fs+0xcc>
 8015424:	2301      	movs	r3, #1
 8015426:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8015428:	7bfb      	ldrb	r3, [r7, #15]
}
 801542a:	4618      	mov	r0, r3
 801542c:	3710      	adds	r7, #16
 801542e:	46bd      	mov	sp, r7
 8015430:	bd80      	pop	{r7, pc}
 8015432:	bf00      	nop
 8015434:	41615252 	.word	0x41615252
 8015438:	61417272 	.word	0x61417272

0801543c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801543c:	b480      	push	{r7}
 801543e:	b083      	sub	sp, #12
 8015440:	af00      	add	r7, sp, #0
 8015442:	6078      	str	r0, [r7, #4]
 8015444:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8015446:	683b      	ldr	r3, [r7, #0]
 8015448:	3b02      	subs	r3, #2
 801544a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	6a1b      	ldr	r3, [r3, #32]
 8015450:	3b02      	subs	r3, #2
 8015452:	683a      	ldr	r2, [r7, #0]
 8015454:	429a      	cmp	r2, r3
 8015456:	d301      	bcc.n	801545c <clust2sect+0x20>
 8015458:	2300      	movs	r3, #0
 801545a:	e008      	b.n	801546e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	895b      	ldrh	r3, [r3, #10]
 8015460:	461a      	mov	r2, r3
 8015462:	683b      	ldr	r3, [r7, #0]
 8015464:	fb03 f202 	mul.w	r2, r3, r2
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801546c:	4413      	add	r3, r2
}
 801546e:	4618      	mov	r0, r3
 8015470:	370c      	adds	r7, #12
 8015472:	46bd      	mov	sp, r7
 8015474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015478:	4770      	bx	lr
	...

0801547c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801547c:	b590      	push	{r4, r7, lr}
 801547e:	b089      	sub	sp, #36	; 0x24
 8015480:	af00      	add	r7, sp, #0
 8015482:	6078      	str	r0, [r7, #4]
 8015484:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801548c:	683b      	ldr	r3, [r7, #0]
 801548e:	2b01      	cmp	r3, #1
 8015490:	d904      	bls.n	801549c <get_fat+0x20>
 8015492:	69bb      	ldr	r3, [r7, #24]
 8015494:	6a1b      	ldr	r3, [r3, #32]
 8015496:	683a      	ldr	r2, [r7, #0]
 8015498:	429a      	cmp	r2, r3
 801549a:	d302      	bcc.n	80154a2 <get_fat+0x26>
		val = 1;	/* Internal error */
 801549c:	2301      	movs	r3, #1
 801549e:	61fb      	str	r3, [r7, #28]
 80154a0:	e13a      	b.n	8015718 <get_fat+0x29c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80154a2:	f04f 33ff 	mov.w	r3, #4294967295
 80154a6:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 80154a8:	69bb      	ldr	r3, [r7, #24]
 80154aa:	781b      	ldrb	r3, [r3, #0]
 80154ac:	3b01      	subs	r3, #1
 80154ae:	2b03      	cmp	r3, #3
 80154b0:	f200 8126 	bhi.w	8015700 <get_fat+0x284>
 80154b4:	a201      	add	r2, pc, #4	; (adr r2, 80154bc <get_fat+0x40>)
 80154b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80154ba:	bf00      	nop
 80154bc:	080154cd 	.word	0x080154cd
 80154c0:	0801557b 	.word	0x0801557b
 80154c4:	080155c7 	.word	0x080155c7
 80154c8:	08015617 	.word	0x08015617
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80154cc:	683b      	ldr	r3, [r7, #0]
 80154ce:	60fb      	str	r3, [r7, #12]
 80154d0:	68fb      	ldr	r3, [r7, #12]
 80154d2:	085b      	lsrs	r3, r3, #1
 80154d4:	68fa      	ldr	r2, [r7, #12]
 80154d6:	4413      	add	r3, r2
 80154d8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80154da:	69bb      	ldr	r3, [r7, #24]
 80154dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154de:	69bb      	ldr	r3, [r7, #24]
 80154e0:	899b      	ldrh	r3, [r3, #12]
 80154e2:	4619      	mov	r1, r3
 80154e4:	68fb      	ldr	r3, [r7, #12]
 80154e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80154ea:	4413      	add	r3, r2
 80154ec:	4619      	mov	r1, r3
 80154ee:	69b8      	ldr	r0, [r7, #24]
 80154f0:	f7ff ff06 	bl	8015300 <move_window>
 80154f4:	4603      	mov	r3, r0
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	f040 8105 	bne.w	8015706 <get_fat+0x28a>
			wc = fs->win[bc++ % SS(fs)];
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	1c5a      	adds	r2, r3, #1
 8015500:	60fa      	str	r2, [r7, #12]
 8015502:	69ba      	ldr	r2, [r7, #24]
 8015504:	8992      	ldrh	r2, [r2, #12]
 8015506:	fbb3 f1f2 	udiv	r1, r3, r2
 801550a:	fb02 f201 	mul.w	r2, r2, r1
 801550e:	1a9b      	subs	r3, r3, r2
 8015510:	69ba      	ldr	r2, [r7, #24]
 8015512:	4413      	add	r3, r2
 8015514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015518:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801551a:	69bb      	ldr	r3, [r7, #24]
 801551c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801551e:	69bb      	ldr	r3, [r7, #24]
 8015520:	899b      	ldrh	r3, [r3, #12]
 8015522:	4619      	mov	r1, r3
 8015524:	68fb      	ldr	r3, [r7, #12]
 8015526:	fbb3 f3f1 	udiv	r3, r3, r1
 801552a:	4413      	add	r3, r2
 801552c:	4619      	mov	r1, r3
 801552e:	69b8      	ldr	r0, [r7, #24]
 8015530:	f7ff fee6 	bl	8015300 <move_window>
 8015534:	4603      	mov	r3, r0
 8015536:	2b00      	cmp	r3, #0
 8015538:	f040 80e7 	bne.w	801570a <get_fat+0x28e>
			wc |= fs->win[bc % SS(fs)] << 8;
 801553c:	69bb      	ldr	r3, [r7, #24]
 801553e:	899b      	ldrh	r3, [r3, #12]
 8015540:	461a      	mov	r2, r3
 8015542:	68fb      	ldr	r3, [r7, #12]
 8015544:	fbb3 f1f2 	udiv	r1, r3, r2
 8015548:	fb02 f201 	mul.w	r2, r2, r1
 801554c:	1a9b      	subs	r3, r3, r2
 801554e:	69ba      	ldr	r2, [r7, #24]
 8015550:	4413      	add	r3, r2
 8015552:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015556:	021b      	lsls	r3, r3, #8
 8015558:	461a      	mov	r2, r3
 801555a:	68bb      	ldr	r3, [r7, #8]
 801555c:	4313      	orrs	r3, r2
 801555e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8015560:	683b      	ldr	r3, [r7, #0]
 8015562:	f003 0301 	and.w	r3, r3, #1
 8015566:	2b00      	cmp	r3, #0
 8015568:	d002      	beq.n	8015570 <get_fat+0xf4>
 801556a:	68bb      	ldr	r3, [r7, #8]
 801556c:	091b      	lsrs	r3, r3, #4
 801556e:	e002      	b.n	8015576 <get_fat+0xfa>
 8015570:	68bb      	ldr	r3, [r7, #8]
 8015572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015576:	61fb      	str	r3, [r7, #28]
			break;
 8015578:	e0ce      	b.n	8015718 <get_fat+0x29c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801557a:	69bb      	ldr	r3, [r7, #24]
 801557c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801557e:	69bb      	ldr	r3, [r7, #24]
 8015580:	899b      	ldrh	r3, [r3, #12]
 8015582:	085b      	lsrs	r3, r3, #1
 8015584:	b29b      	uxth	r3, r3
 8015586:	4619      	mov	r1, r3
 8015588:	683b      	ldr	r3, [r7, #0]
 801558a:	fbb3 f3f1 	udiv	r3, r3, r1
 801558e:	4413      	add	r3, r2
 8015590:	4619      	mov	r1, r3
 8015592:	69b8      	ldr	r0, [r7, #24]
 8015594:	f7ff feb4 	bl	8015300 <move_window>
 8015598:	4603      	mov	r3, r0
 801559a:	2b00      	cmp	r3, #0
 801559c:	f040 80b7 	bne.w	801570e <get_fat+0x292>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80155a0:	69bb      	ldr	r3, [r7, #24]
 80155a2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80155a6:	683b      	ldr	r3, [r7, #0]
 80155a8:	005b      	lsls	r3, r3, #1
 80155aa:	69ba      	ldr	r2, [r7, #24]
 80155ac:	8992      	ldrh	r2, [r2, #12]
 80155ae:	fbb3 f0f2 	udiv	r0, r3, r2
 80155b2:	fb02 f200 	mul.w	r2, r2, r0
 80155b6:	1a9b      	subs	r3, r3, r2
 80155b8:	440b      	add	r3, r1
 80155ba:	4618      	mov	r0, r3
 80155bc:	f7ff faac 	bl	8014b18 <ld_word>
 80155c0:	4603      	mov	r3, r0
 80155c2:	61fb      	str	r3, [r7, #28]
			break;
 80155c4:	e0a8      	b.n	8015718 <get_fat+0x29c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80155c6:	69bb      	ldr	r3, [r7, #24]
 80155c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80155ca:	69bb      	ldr	r3, [r7, #24]
 80155cc:	899b      	ldrh	r3, [r3, #12]
 80155ce:	089b      	lsrs	r3, r3, #2
 80155d0:	b29b      	uxth	r3, r3
 80155d2:	4619      	mov	r1, r3
 80155d4:	683b      	ldr	r3, [r7, #0]
 80155d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80155da:	4413      	add	r3, r2
 80155dc:	4619      	mov	r1, r3
 80155de:	69b8      	ldr	r0, [r7, #24]
 80155e0:	f7ff fe8e 	bl	8015300 <move_window>
 80155e4:	4603      	mov	r3, r0
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	f040 8093 	bne.w	8015712 <get_fat+0x296>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80155ec:	69bb      	ldr	r3, [r7, #24]
 80155ee:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80155f2:	683b      	ldr	r3, [r7, #0]
 80155f4:	009b      	lsls	r3, r3, #2
 80155f6:	69ba      	ldr	r2, [r7, #24]
 80155f8:	8992      	ldrh	r2, [r2, #12]
 80155fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80155fe:	fb02 f200 	mul.w	r2, r2, r0
 8015602:	1a9b      	subs	r3, r3, r2
 8015604:	440b      	add	r3, r1
 8015606:	4618      	mov	r0, r3
 8015608:	f7ff fa9e 	bl	8014b48 <ld_dword>
 801560c:	4603      	mov	r3, r0
 801560e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8015612:	61fb      	str	r3, [r7, #28]
			break;
 8015614:	e080      	b.n	8015718 <get_fat+0x29c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 801561c:	4323      	orrs	r3, r4
 801561e:	d06f      	beq.n	8015700 <get_fat+0x284>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	689b      	ldr	r3, [r3, #8]
 8015624:	683a      	ldr	r2, [r7, #0]
 8015626:	1ad3      	subs	r3, r2, r3
 8015628:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8015630:	f113 30ff 	adds.w	r0, r3, #4294967295
 8015634:	f144 31ff 	adc.w	r1, r4, #4294967295
 8015638:	69bb      	ldr	r3, [r7, #24]
 801563a:	899b      	ldrh	r3, [r3, #12]
 801563c:	b29b      	uxth	r3, r3
 801563e:	f04f 0400 	mov.w	r4, #0
 8015642:	461a      	mov	r2, r3
 8015644:	4623      	mov	r3, r4
 8015646:	f7ea fe47 	bl	80002d8 <__aeabi_uldivmod>
 801564a:	4603      	mov	r3, r0
 801564c:	460c      	mov	r4, r1
 801564e:	461a      	mov	r2, r3
 8015650:	69bb      	ldr	r3, [r7, #24]
 8015652:	895b      	ldrh	r3, [r3, #10]
 8015654:	fbb2 f3f3 	udiv	r3, r2, r3
 8015658:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	79db      	ldrb	r3, [r3, #7]
 801565e:	2b02      	cmp	r3, #2
 8015660:	d10e      	bne.n	8015680 <get_fat+0x204>
					if (cofs <= clen) {
 8015662:	697a      	ldr	r2, [r7, #20]
 8015664:	693b      	ldr	r3, [r7, #16]
 8015666:	429a      	cmp	r2, r3
 8015668:	d80a      	bhi.n	8015680 <get_fat+0x204>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 801566a:	697a      	ldr	r2, [r7, #20]
 801566c:	693b      	ldr	r3, [r7, #16]
 801566e:	429a      	cmp	r2, r3
 8015670:	d002      	beq.n	8015678 <get_fat+0x1fc>
 8015672:	683b      	ldr	r3, [r7, #0]
 8015674:	3301      	adds	r3, #1
 8015676:	e001      	b.n	801567c <get_fat+0x200>
 8015678:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801567c:	61fb      	str	r3, [r7, #28]
						break;
 801567e:	e04b      	b.n	8015718 <get_fat+0x29c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	79db      	ldrb	r3, [r3, #7]
 8015684:	2b03      	cmp	r3, #3
 8015686:	d108      	bne.n	801569a <get_fat+0x21e>
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	699b      	ldr	r3, [r3, #24]
 801568c:	697a      	ldr	r2, [r7, #20]
 801568e:	429a      	cmp	r2, r3
 8015690:	d203      	bcs.n	801569a <get_fat+0x21e>
					val = clst + 1; 	/* Generate the value */
 8015692:	683b      	ldr	r3, [r7, #0]
 8015694:	3301      	adds	r3, #1
 8015696:	61fb      	str	r3, [r7, #28]
					break;
 8015698:	e03e      	b.n	8015718 <get_fat+0x29c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	79db      	ldrb	r3, [r3, #7]
 801569e:	2b02      	cmp	r3, #2
 80156a0:	d02e      	beq.n	8015700 <get_fat+0x284>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	69db      	ldr	r3, [r3, #28]
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d003      	beq.n	80156b2 <get_fat+0x236>
						val = 0x7FFFFFFF;	/* Generate EOC */
 80156aa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80156ae:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 80156b0:	e032      	b.n	8015718 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80156b2:	69bb      	ldr	r3, [r7, #24]
 80156b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80156b6:	69bb      	ldr	r3, [r7, #24]
 80156b8:	899b      	ldrh	r3, [r3, #12]
 80156ba:	089b      	lsrs	r3, r3, #2
 80156bc:	b29b      	uxth	r3, r3
 80156be:	4619      	mov	r1, r3
 80156c0:	683b      	ldr	r3, [r7, #0]
 80156c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80156c6:	4413      	add	r3, r2
 80156c8:	4619      	mov	r1, r3
 80156ca:	69b8      	ldr	r0, [r7, #24]
 80156cc:	f7ff fe18 	bl	8015300 <move_window>
 80156d0:	4603      	mov	r3, r0
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d11f      	bne.n	8015716 <get_fat+0x29a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 80156d6:	69bb      	ldr	r3, [r7, #24]
 80156d8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80156dc:	683b      	ldr	r3, [r7, #0]
 80156de:	009b      	lsls	r3, r3, #2
 80156e0:	69ba      	ldr	r2, [r7, #24]
 80156e2:	8992      	ldrh	r2, [r2, #12]
 80156e4:	fbb3 f0f2 	udiv	r0, r3, r2
 80156e8:	fb02 f200 	mul.w	r2, r2, r0
 80156ec:	1a9b      	subs	r3, r3, r2
 80156ee:	440b      	add	r3, r1
 80156f0:	4618      	mov	r0, r3
 80156f2:	f7ff fa29 	bl	8014b48 <ld_dword>
 80156f6:	4603      	mov	r3, r0
 80156f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80156fc:	61fb      	str	r3, [r7, #28]
					break;
 80156fe:	e00b      	b.n	8015718 <get_fat+0x29c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8015700:	2301      	movs	r3, #1
 8015702:	61fb      	str	r3, [r7, #28]
 8015704:	e008      	b.n	8015718 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015706:	bf00      	nop
 8015708:	e006      	b.n	8015718 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801570a:	bf00      	nop
 801570c:	e004      	b.n	8015718 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801570e:	bf00      	nop
 8015710:	e002      	b.n	8015718 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015712:	bf00      	nop
 8015714:	e000      	b.n	8015718 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015716:	bf00      	nop
		}
	}

	return val;
 8015718:	69fb      	ldr	r3, [r7, #28]
}
 801571a:	4618      	mov	r0, r3
 801571c:	3724      	adds	r7, #36	; 0x24
 801571e:	46bd      	mov	sp, r7
 8015720:	bd90      	pop	{r4, r7, pc}
 8015722:	bf00      	nop

08015724 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8015724:	b590      	push	{r4, r7, lr}
 8015726:	b089      	sub	sp, #36	; 0x24
 8015728:	af00      	add	r7, sp, #0
 801572a:	60f8      	str	r0, [r7, #12]
 801572c:	60b9      	str	r1, [r7, #8]
 801572e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8015730:	2302      	movs	r3, #2
 8015732:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8015734:	68bb      	ldr	r3, [r7, #8]
 8015736:	2b01      	cmp	r3, #1
 8015738:	f240 8111 	bls.w	801595e <put_fat+0x23a>
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	6a1b      	ldr	r3, [r3, #32]
 8015740:	68ba      	ldr	r2, [r7, #8]
 8015742:	429a      	cmp	r2, r3
 8015744:	f080 810b 	bcs.w	801595e <put_fat+0x23a>
		switch (fs->fs_type) {
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	781b      	ldrb	r3, [r3, #0]
 801574c:	3b01      	subs	r3, #1
 801574e:	2b03      	cmp	r3, #3
 8015750:	f200 8105 	bhi.w	801595e <put_fat+0x23a>
 8015754:	a201      	add	r2, pc, #4	; (adr r2, 801575c <put_fat+0x38>)
 8015756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801575a:	bf00      	nop
 801575c:	0801576d 	.word	0x0801576d
 8015760:	08015871 	.word	0x08015871
 8015764:	080158c7 	.word	0x080158c7
 8015768:	080158c7 	.word	0x080158c7
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801576c:	68bb      	ldr	r3, [r7, #8]
 801576e:	61bb      	str	r3, [r7, #24]
 8015770:	69bb      	ldr	r3, [r7, #24]
 8015772:	085b      	lsrs	r3, r3, #1
 8015774:	69ba      	ldr	r2, [r7, #24]
 8015776:	4413      	add	r3, r2
 8015778:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801577a:	68fb      	ldr	r3, [r7, #12]
 801577c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	899b      	ldrh	r3, [r3, #12]
 8015782:	4619      	mov	r1, r3
 8015784:	69bb      	ldr	r3, [r7, #24]
 8015786:	fbb3 f3f1 	udiv	r3, r3, r1
 801578a:	4413      	add	r3, r2
 801578c:	4619      	mov	r1, r3
 801578e:	68f8      	ldr	r0, [r7, #12]
 8015790:	f7ff fdb6 	bl	8015300 <move_window>
 8015794:	4603      	mov	r3, r0
 8015796:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015798:	7ffb      	ldrb	r3, [r7, #31]
 801579a:	2b00      	cmp	r3, #0
 801579c:	f040 80d8 	bne.w	8015950 <put_fat+0x22c>
			p = fs->win + bc++ % SS(fs);
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80157a6:	69bb      	ldr	r3, [r7, #24]
 80157a8:	1c5a      	adds	r2, r3, #1
 80157aa:	61ba      	str	r2, [r7, #24]
 80157ac:	68fa      	ldr	r2, [r7, #12]
 80157ae:	8992      	ldrh	r2, [r2, #12]
 80157b0:	fbb3 f0f2 	udiv	r0, r3, r2
 80157b4:	fb02 f200 	mul.w	r2, r2, r0
 80157b8:	1a9b      	subs	r3, r3, r2
 80157ba:	440b      	add	r3, r1
 80157bc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80157be:	68bb      	ldr	r3, [r7, #8]
 80157c0:	f003 0301 	and.w	r3, r3, #1
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d00d      	beq.n	80157e4 <put_fat+0xc0>
 80157c8:	697b      	ldr	r3, [r7, #20]
 80157ca:	781b      	ldrb	r3, [r3, #0]
 80157cc:	b25b      	sxtb	r3, r3
 80157ce:	f003 030f 	and.w	r3, r3, #15
 80157d2:	b25a      	sxtb	r2, r3
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	b2db      	uxtb	r3, r3
 80157d8:	011b      	lsls	r3, r3, #4
 80157da:	b25b      	sxtb	r3, r3
 80157dc:	4313      	orrs	r3, r2
 80157de:	b25b      	sxtb	r3, r3
 80157e0:	b2db      	uxtb	r3, r3
 80157e2:	e001      	b.n	80157e8 <put_fat+0xc4>
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	b2db      	uxtb	r3, r3
 80157e8:	697a      	ldr	r2, [r7, #20]
 80157ea:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	2201      	movs	r2, #1
 80157f0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80157f2:	68fb      	ldr	r3, [r7, #12]
 80157f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	899b      	ldrh	r3, [r3, #12]
 80157fa:	4619      	mov	r1, r3
 80157fc:	69bb      	ldr	r3, [r7, #24]
 80157fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8015802:	4413      	add	r3, r2
 8015804:	4619      	mov	r1, r3
 8015806:	68f8      	ldr	r0, [r7, #12]
 8015808:	f7ff fd7a 	bl	8015300 <move_window>
 801580c:	4603      	mov	r3, r0
 801580e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015810:	7ffb      	ldrb	r3, [r7, #31]
 8015812:	2b00      	cmp	r3, #0
 8015814:	f040 809e 	bne.w	8015954 <put_fat+0x230>
			p = fs->win + bc % SS(fs);
 8015818:	68fb      	ldr	r3, [r7, #12]
 801581a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	899b      	ldrh	r3, [r3, #12]
 8015822:	461a      	mov	r2, r3
 8015824:	69bb      	ldr	r3, [r7, #24]
 8015826:	fbb3 f0f2 	udiv	r0, r3, r2
 801582a:	fb02 f200 	mul.w	r2, r2, r0
 801582e:	1a9b      	subs	r3, r3, r2
 8015830:	440b      	add	r3, r1
 8015832:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8015834:	68bb      	ldr	r3, [r7, #8]
 8015836:	f003 0301 	and.w	r3, r3, #1
 801583a:	2b00      	cmp	r3, #0
 801583c:	d003      	beq.n	8015846 <put_fat+0x122>
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	091b      	lsrs	r3, r3, #4
 8015842:	b2db      	uxtb	r3, r3
 8015844:	e00e      	b.n	8015864 <put_fat+0x140>
 8015846:	697b      	ldr	r3, [r7, #20]
 8015848:	781b      	ldrb	r3, [r3, #0]
 801584a:	b25b      	sxtb	r3, r3
 801584c:	f023 030f 	bic.w	r3, r3, #15
 8015850:	b25a      	sxtb	r2, r3
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	0a1b      	lsrs	r3, r3, #8
 8015856:	b25b      	sxtb	r3, r3
 8015858:	f003 030f 	and.w	r3, r3, #15
 801585c:	b25b      	sxtb	r3, r3
 801585e:	4313      	orrs	r3, r2
 8015860:	b25b      	sxtb	r3, r3
 8015862:	b2db      	uxtb	r3, r3
 8015864:	697a      	ldr	r2, [r7, #20]
 8015866:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	2201      	movs	r2, #1
 801586c:	70da      	strb	r2, [r3, #3]
			break;
 801586e:	e076      	b.n	801595e <put_fat+0x23a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8015870:	68fb      	ldr	r3, [r7, #12]
 8015872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	899b      	ldrh	r3, [r3, #12]
 8015878:	085b      	lsrs	r3, r3, #1
 801587a:	b29b      	uxth	r3, r3
 801587c:	4619      	mov	r1, r3
 801587e:	68bb      	ldr	r3, [r7, #8]
 8015880:	fbb3 f3f1 	udiv	r3, r3, r1
 8015884:	4413      	add	r3, r2
 8015886:	4619      	mov	r1, r3
 8015888:	68f8      	ldr	r0, [r7, #12]
 801588a:	f7ff fd39 	bl	8015300 <move_window>
 801588e:	4603      	mov	r3, r0
 8015890:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015892:	7ffb      	ldrb	r3, [r7, #31]
 8015894:	2b00      	cmp	r3, #0
 8015896:	d15f      	bne.n	8015958 <put_fat+0x234>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801589e:	68bb      	ldr	r3, [r7, #8]
 80158a0:	005b      	lsls	r3, r3, #1
 80158a2:	68fa      	ldr	r2, [r7, #12]
 80158a4:	8992      	ldrh	r2, [r2, #12]
 80158a6:	fbb3 f0f2 	udiv	r0, r3, r2
 80158aa:	fb02 f200 	mul.w	r2, r2, r0
 80158ae:	1a9b      	subs	r3, r3, r2
 80158b0:	440b      	add	r3, r1
 80158b2:	687a      	ldr	r2, [r7, #4]
 80158b4:	b292      	uxth	r2, r2
 80158b6:	4611      	mov	r1, r2
 80158b8:	4618      	mov	r0, r3
 80158ba:	f7ff fa25 	bl	8014d08 <st_word>
			fs->wflag = 1;
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	2201      	movs	r2, #1
 80158c2:	70da      	strb	r2, [r3, #3]
			break;
 80158c4:	e04b      	b.n	801595e <put_fat+0x23a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80158c6:	68fb      	ldr	r3, [r7, #12]
 80158c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	899b      	ldrh	r3, [r3, #12]
 80158ce:	089b      	lsrs	r3, r3, #2
 80158d0:	b29b      	uxth	r3, r3
 80158d2:	4619      	mov	r1, r3
 80158d4:	68bb      	ldr	r3, [r7, #8]
 80158d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80158da:	4413      	add	r3, r2
 80158dc:	4619      	mov	r1, r3
 80158de:	68f8      	ldr	r0, [r7, #12]
 80158e0:	f7ff fd0e 	bl	8015300 <move_window>
 80158e4:	4603      	mov	r3, r0
 80158e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80158e8:	7ffb      	ldrb	r3, [r7, #31]
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d136      	bne.n	801595c <put_fat+0x238>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	781b      	ldrb	r3, [r3, #0]
 80158f2:	2b04      	cmp	r3, #4
 80158f4:	d017      	beq.n	8015926 <put_fat+0x202>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8015902:	68bb      	ldr	r3, [r7, #8]
 8015904:	009b      	lsls	r3, r3, #2
 8015906:	68fa      	ldr	r2, [r7, #12]
 8015908:	8992      	ldrh	r2, [r2, #12]
 801590a:	fbb3 f0f2 	udiv	r0, r3, r2
 801590e:	fb02 f200 	mul.w	r2, r2, r0
 8015912:	1a9b      	subs	r3, r3, r2
 8015914:	440b      	add	r3, r1
 8015916:	4618      	mov	r0, r3
 8015918:	f7ff f916 	bl	8014b48 <ld_dword>
 801591c:	4603      	mov	r3, r0
 801591e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8015922:	4323      	orrs	r3, r4
 8015924:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8015926:	68fb      	ldr	r3, [r7, #12]
 8015928:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801592c:	68bb      	ldr	r3, [r7, #8]
 801592e:	009b      	lsls	r3, r3, #2
 8015930:	68fa      	ldr	r2, [r7, #12]
 8015932:	8992      	ldrh	r2, [r2, #12]
 8015934:	fbb3 f0f2 	udiv	r0, r3, r2
 8015938:	fb02 f200 	mul.w	r2, r2, r0
 801593c:	1a9b      	subs	r3, r3, r2
 801593e:	440b      	add	r3, r1
 8015940:	6879      	ldr	r1, [r7, #4]
 8015942:	4618      	mov	r0, r3
 8015944:	f7ff f9fb 	bl	8014d3e <st_dword>
			fs->wflag = 1;
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	2201      	movs	r2, #1
 801594c:	70da      	strb	r2, [r3, #3]
			break;
 801594e:	e006      	b.n	801595e <put_fat+0x23a>
			if (res != FR_OK) break;
 8015950:	bf00      	nop
 8015952:	e004      	b.n	801595e <put_fat+0x23a>
			if (res != FR_OK) break;
 8015954:	bf00      	nop
 8015956:	e002      	b.n	801595e <put_fat+0x23a>
			if (res != FR_OK) break;
 8015958:	bf00      	nop
 801595a:	e000      	b.n	801595e <put_fat+0x23a>
			if (res != FR_OK) break;
 801595c:	bf00      	nop
		}
	}
	return res;
 801595e:	7ffb      	ldrb	r3, [r7, #31]
}
 8015960:	4618      	mov	r0, r3
 8015962:	3724      	adds	r7, #36	; 0x24
 8015964:	46bd      	mov	sp, r7
 8015966:	bd90      	pop	{r4, r7, pc}

08015968 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8015968:	b580      	push	{r7, lr}
 801596a:	b08a      	sub	sp, #40	; 0x28
 801596c:	af00      	add	r7, sp, #0
 801596e:	60f8      	str	r0, [r7, #12]
 8015970:	60b9      	str	r1, [r7, #8]
 8015972:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8015974:	68bb      	ldr	r3, [r7, #8]
 8015976:	3b02      	subs	r3, #2
 8015978:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	6a1b      	ldr	r3, [r3, #32]
 801597e:	3b02      	subs	r3, #2
 8015980:	68ba      	ldr	r2, [r7, #8]
 8015982:	429a      	cmp	r2, r3
 8015984:	d301      	bcc.n	801598a <find_bitmap+0x22>
 8015986:	2300      	movs	r3, #0
 8015988:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 801598a:	68bb      	ldr	r3, [r7, #8]
 801598c:	61fb      	str	r3, [r7, #28]
 801598e:	69fb      	ldr	r3, [r7, #28]
 8015990:	61bb      	str	r3, [r7, #24]
 8015992:	2300      	movs	r3, #0
 8015994:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8015996:	68fb      	ldr	r3, [r7, #12]
 8015998:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801599a:	69fb      	ldr	r3, [r7, #28]
 801599c:	08db      	lsrs	r3, r3, #3
 801599e:	68f9      	ldr	r1, [r7, #12]
 80159a0:	8989      	ldrh	r1, [r1, #12]
 80159a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80159a6:	4413      	add	r3, r2
 80159a8:	4619      	mov	r1, r3
 80159aa:	68f8      	ldr	r0, [r7, #12]
 80159ac:	f7ff fca8 	bl	8015300 <move_window>
 80159b0:	4603      	mov	r3, r0
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d002      	beq.n	80159bc <find_bitmap+0x54>
 80159b6:	f04f 33ff 	mov.w	r3, #4294967295
 80159ba:	e058      	b.n	8015a6e <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 80159bc:	69fb      	ldr	r3, [r7, #28]
 80159be:	08db      	lsrs	r3, r3, #3
 80159c0:	68fa      	ldr	r2, [r7, #12]
 80159c2:	8992      	ldrh	r2, [r2, #12]
 80159c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80159c8:	fb02 f201 	mul.w	r2, r2, r1
 80159cc:	1a9b      	subs	r3, r3, r2
 80159ce:	623b      	str	r3, [r7, #32]
 80159d0:	69fb      	ldr	r3, [r7, #28]
 80159d2:	f003 0307 	and.w	r3, r3, #7
 80159d6:	2201      	movs	r2, #1
 80159d8:	fa02 f303 	lsl.w	r3, r2, r3
 80159dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 80159e0:	68fa      	ldr	r2, [r7, #12]
 80159e2:	6a3b      	ldr	r3, [r7, #32]
 80159e4:	4413      	add	r3, r2
 80159e6:	333c      	adds	r3, #60	; 0x3c
 80159e8:	781a      	ldrb	r2, [r3, #0]
 80159ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80159ee:	4013      	ands	r3, r2
 80159f0:	74fb      	strb	r3, [r7, #19]
 80159f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80159f6:	005b      	lsls	r3, r3, #1
 80159f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 80159fc:	69fb      	ldr	r3, [r7, #28]
 80159fe:	3301      	adds	r3, #1
 8015a00:	61fb      	str	r3, [r7, #28]
 8015a02:	68fb      	ldr	r3, [r7, #12]
 8015a04:	6a1b      	ldr	r3, [r3, #32]
 8015a06:	3b02      	subs	r3, #2
 8015a08:	69fa      	ldr	r2, [r7, #28]
 8015a0a:	429a      	cmp	r2, r3
 8015a0c:	d307      	bcc.n	8015a1e <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 8015a0e:	2300      	movs	r3, #0
 8015a10:	61fb      	str	r3, [r7, #28]
 8015a12:	2300      	movs	r3, #0
 8015a14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	899b      	ldrh	r3, [r3, #12]
 8015a1c:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 8015a1e:	7cfb      	ldrb	r3, [r7, #19]
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d109      	bne.n	8015a38 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8015a24:	697b      	ldr	r3, [r7, #20]
 8015a26:	3301      	adds	r3, #1
 8015a28:	617b      	str	r3, [r7, #20]
 8015a2a:	697a      	ldr	r2, [r7, #20]
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	429a      	cmp	r2, r3
 8015a30:	d106      	bne.n	8015a40 <find_bitmap+0xd8>
 8015a32:	69bb      	ldr	r3, [r7, #24]
 8015a34:	3302      	adds	r3, #2
 8015a36:	e01a      	b.n	8015a6e <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8015a38:	69fb      	ldr	r3, [r7, #28]
 8015a3a:	61bb      	str	r3, [r7, #24]
 8015a3c:	2300      	movs	r3, #0
 8015a3e:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 8015a40:	69fa      	ldr	r2, [r7, #28]
 8015a42:	68bb      	ldr	r3, [r7, #8]
 8015a44:	429a      	cmp	r2, r3
 8015a46:	d101      	bne.n	8015a4c <find_bitmap+0xe4>
 8015a48:	2300      	movs	r3, #0
 8015a4a:	e010      	b.n	8015a6e <find_bitmap+0x106>
			} while (bm);
 8015a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d1c5      	bne.n	80159e0 <find_bitmap+0x78>
			bm = 1;
 8015a54:	2301      	movs	r3, #1
 8015a56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 8015a5a:	6a3b      	ldr	r3, [r7, #32]
 8015a5c:	3301      	adds	r3, #1
 8015a5e:	623b      	str	r3, [r7, #32]
 8015a60:	68fb      	ldr	r3, [r7, #12]
 8015a62:	899b      	ldrh	r3, [r3, #12]
 8015a64:	461a      	mov	r2, r3
 8015a66:	6a3b      	ldr	r3, [r7, #32]
 8015a68:	4293      	cmp	r3, r2
 8015a6a:	d3b9      	bcc.n	80159e0 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8015a6c:	e793      	b.n	8015996 <find_bitmap+0x2e>
	}
}
 8015a6e:	4618      	mov	r0, r3
 8015a70:	3728      	adds	r7, #40	; 0x28
 8015a72:	46bd      	mov	sp, r7
 8015a74:	bd80      	pop	{r7, pc}

08015a76 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8015a76:	b580      	push	{r7, lr}
 8015a78:	b088      	sub	sp, #32
 8015a7a:	af00      	add	r7, sp, #0
 8015a7c:	60f8      	str	r0, [r7, #12]
 8015a7e:	60b9      	str	r1, [r7, #8]
 8015a80:	607a      	str	r2, [r7, #4]
 8015a82:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8015a84:	68bb      	ldr	r3, [r7, #8]
 8015a86:	3b02      	subs	r3, #2
 8015a88:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8015a8a:	68fb      	ldr	r3, [r7, #12]
 8015a8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015a8e:	68bb      	ldr	r3, [r7, #8]
 8015a90:	08db      	lsrs	r3, r3, #3
 8015a92:	68f9      	ldr	r1, [r7, #12]
 8015a94:	8989      	ldrh	r1, [r1, #12]
 8015a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8015a9a:	4413      	add	r3, r2
 8015a9c:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8015a9e:	68bb      	ldr	r3, [r7, #8]
 8015aa0:	08db      	lsrs	r3, r3, #3
 8015aa2:	68fa      	ldr	r2, [r7, #12]
 8015aa4:	8992      	ldrh	r2, [r2, #12]
 8015aa6:	fbb3 f1f2 	udiv	r1, r3, r2
 8015aaa:	fb02 f201 	mul.w	r2, r2, r1
 8015aae:	1a9b      	subs	r3, r3, r2
 8015ab0:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8015ab2:	68bb      	ldr	r3, [r7, #8]
 8015ab4:	f003 0307 	and.w	r3, r3, #7
 8015ab8:	2201      	movs	r2, #1
 8015aba:	fa02 f303 	lsl.w	r3, r2, r3
 8015abe:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8015ac0:	697b      	ldr	r3, [r7, #20]
 8015ac2:	1c5a      	adds	r2, r3, #1
 8015ac4:	617a      	str	r2, [r7, #20]
 8015ac6:	4619      	mov	r1, r3
 8015ac8:	68f8      	ldr	r0, [r7, #12]
 8015aca:	f7ff fc19 	bl	8015300 <move_window>
 8015ace:	4603      	mov	r3, r0
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	d001      	beq.n	8015ad8 <change_bitmap+0x62>
 8015ad4:	2301      	movs	r3, #1
 8015ad6:	e03f      	b.n	8015b58 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8015ad8:	68fa      	ldr	r2, [r7, #12]
 8015ada:	69bb      	ldr	r3, [r7, #24]
 8015adc:	4413      	add	r3, r2
 8015ade:	333c      	adds	r3, #60	; 0x3c
 8015ae0:	781a      	ldrb	r2, [r3, #0]
 8015ae2:	7ffb      	ldrb	r3, [r7, #31]
 8015ae4:	4013      	ands	r3, r2
 8015ae6:	b2db      	uxtb	r3, r3
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	bf14      	ite	ne
 8015aec:	2301      	movne	r3, #1
 8015aee:	2300      	moveq	r3, #0
 8015af0:	b2db      	uxtb	r3, r3
 8015af2:	461a      	mov	r2, r3
 8015af4:	683b      	ldr	r3, [r7, #0]
 8015af6:	4293      	cmp	r3, r2
 8015af8:	d101      	bne.n	8015afe <change_bitmap+0x88>
 8015afa:	2302      	movs	r3, #2
 8015afc:	e02c      	b.n	8015b58 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 8015afe:	68fa      	ldr	r2, [r7, #12]
 8015b00:	69bb      	ldr	r3, [r7, #24]
 8015b02:	4413      	add	r3, r2
 8015b04:	333c      	adds	r3, #60	; 0x3c
 8015b06:	781a      	ldrb	r2, [r3, #0]
 8015b08:	7ffb      	ldrb	r3, [r7, #31]
 8015b0a:	4053      	eors	r3, r2
 8015b0c:	b2d9      	uxtb	r1, r3
 8015b0e:	68fa      	ldr	r2, [r7, #12]
 8015b10:	69bb      	ldr	r3, [r7, #24]
 8015b12:	4413      	add	r3, r2
 8015b14:	333c      	adds	r3, #60	; 0x3c
 8015b16:	460a      	mov	r2, r1
 8015b18:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	2201      	movs	r2, #1
 8015b1e:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	3b01      	subs	r3, #1
 8015b24:	607b      	str	r3, [r7, #4]
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d101      	bne.n	8015b30 <change_bitmap+0xba>
 8015b2c:	2300      	movs	r3, #0
 8015b2e:	e013      	b.n	8015b58 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 8015b30:	7ffb      	ldrb	r3, [r7, #31]
 8015b32:	005b      	lsls	r3, r3, #1
 8015b34:	77fb      	strb	r3, [r7, #31]
 8015b36:	7ffb      	ldrb	r3, [r7, #31]
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d1cd      	bne.n	8015ad8 <change_bitmap+0x62>
			bm = 1;
 8015b3c:	2301      	movs	r3, #1
 8015b3e:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8015b40:	69bb      	ldr	r3, [r7, #24]
 8015b42:	3301      	adds	r3, #1
 8015b44:	61bb      	str	r3, [r7, #24]
 8015b46:	68fb      	ldr	r3, [r7, #12]
 8015b48:	899b      	ldrh	r3, [r3, #12]
 8015b4a:	461a      	mov	r2, r3
 8015b4c:	69bb      	ldr	r3, [r7, #24]
 8015b4e:	4293      	cmp	r3, r2
 8015b50:	d3c2      	bcc.n	8015ad8 <change_bitmap+0x62>
		i = 0;
 8015b52:	2300      	movs	r3, #0
 8015b54:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8015b56:	e7b3      	b.n	8015ac0 <change_bitmap+0x4a>
	}
}
 8015b58:	4618      	mov	r0, r3
 8015b5a:	3720      	adds	r7, #32
 8015b5c:	46bd      	mov	sp, r7
 8015b5e:	bd80      	pop	{r7, pc}

08015b60 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8015b60:	b580      	push	{r7, lr}
 8015b62:	b086      	sub	sp, #24
 8015b64:	af00      	add	r7, sp, #0
 8015b66:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	79db      	ldrb	r3, [r3, #7]
 8015b6c:	2b03      	cmp	r3, #3
 8015b6e:	d121      	bne.n	8015bb4 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	689b      	ldr	r3, [r3, #8]
 8015b74:	617b      	str	r3, [r7, #20]
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	699b      	ldr	r3, [r3, #24]
 8015b7a:	613b      	str	r3, [r7, #16]
 8015b7c:	e014      	b.n	8015ba8 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	6818      	ldr	r0, [r3, #0]
 8015b82:	697b      	ldr	r3, [r7, #20]
 8015b84:	3301      	adds	r3, #1
 8015b86:	461a      	mov	r2, r3
 8015b88:	6979      	ldr	r1, [r7, #20]
 8015b8a:	f7ff fdcb 	bl	8015724 <put_fat>
 8015b8e:	4603      	mov	r3, r0
 8015b90:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8015b92:	7bfb      	ldrb	r3, [r7, #15]
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d001      	beq.n	8015b9c <fill_first_frag+0x3c>
 8015b98:	7bfb      	ldrb	r3, [r7, #15]
 8015b9a:	e00c      	b.n	8015bb6 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8015b9c:	697b      	ldr	r3, [r7, #20]
 8015b9e:	3301      	adds	r3, #1
 8015ba0:	617b      	str	r3, [r7, #20]
 8015ba2:	693b      	ldr	r3, [r7, #16]
 8015ba4:	3b01      	subs	r3, #1
 8015ba6:	613b      	str	r3, [r7, #16]
 8015ba8:	693b      	ldr	r3, [r7, #16]
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d1e7      	bne.n	8015b7e <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	2200      	movs	r2, #0
 8015bb2:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8015bb4:	2300      	movs	r3, #0
}
 8015bb6:	4618      	mov	r0, r3
 8015bb8:	3718      	adds	r7, #24
 8015bba:	46bd      	mov	sp, r7
 8015bbc:	bd80      	pop	{r7, pc}

08015bbe <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 8015bbe:	b580      	push	{r7, lr}
 8015bc0:	b086      	sub	sp, #24
 8015bc2:	af00      	add	r7, sp, #0
 8015bc4:	60f8      	str	r0, [r7, #12]
 8015bc6:	60b9      	str	r1, [r7, #8]
 8015bc8:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8015bca:	e020      	b.n	8015c0e <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8015bcc:	68fb      	ldr	r3, [r7, #12]
 8015bce:	6818      	ldr	r0, [r3, #0]
 8015bd0:	68fb      	ldr	r3, [r7, #12]
 8015bd2:	69db      	ldr	r3, [r3, #28]
 8015bd4:	68ba      	ldr	r2, [r7, #8]
 8015bd6:	1ad3      	subs	r3, r2, r3
 8015bd8:	1c59      	adds	r1, r3, #1
 8015bda:	68fb      	ldr	r3, [r7, #12]
 8015bdc:	69db      	ldr	r3, [r3, #28]
 8015bde:	2b01      	cmp	r3, #1
 8015be0:	d905      	bls.n	8015bee <fill_last_frag+0x30>
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	69db      	ldr	r3, [r3, #28]
 8015be6:	68ba      	ldr	r2, [r7, #8]
 8015be8:	1ad3      	subs	r3, r2, r3
 8015bea:	3302      	adds	r3, #2
 8015bec:	e000      	b.n	8015bf0 <fill_last_frag+0x32>
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	461a      	mov	r2, r3
 8015bf2:	f7ff fd97 	bl	8015724 <put_fat>
 8015bf6:	4603      	mov	r3, r0
 8015bf8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8015bfa:	7dfb      	ldrb	r3, [r7, #23]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d001      	beq.n	8015c04 <fill_last_frag+0x46>
 8015c00:	7dfb      	ldrb	r3, [r7, #23]
 8015c02:	e009      	b.n	8015c18 <fill_last_frag+0x5a>
		obj->n_frag--;
 8015c04:	68fb      	ldr	r3, [r7, #12]
 8015c06:	69db      	ldr	r3, [r3, #28]
 8015c08:	1e5a      	subs	r2, r3, #1
 8015c0a:	68fb      	ldr	r3, [r7, #12]
 8015c0c:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8015c0e:	68fb      	ldr	r3, [r7, #12]
 8015c10:	69db      	ldr	r3, [r3, #28]
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d1da      	bne.n	8015bcc <fill_last_frag+0xe>
	}
	return FR_OK;
 8015c16:	2300      	movs	r3, #0
}
 8015c18:	4618      	mov	r0, r3
 8015c1a:	3718      	adds	r7, #24
 8015c1c:	46bd      	mov	sp, r7
 8015c1e:	bd80      	pop	{r7, pc}

08015c20 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8015c20:	b580      	push	{r7, lr}
 8015c22:	b08a      	sub	sp, #40	; 0x28
 8015c24:	af00      	add	r7, sp, #0
 8015c26:	60f8      	str	r0, [r7, #12]
 8015c28:	60b9      	str	r1, [r7, #8]
 8015c2a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8015c2c:	2300      	movs	r3, #0
 8015c2e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 8015c36:	68bb      	ldr	r3, [r7, #8]
 8015c38:	627b      	str	r3, [r7, #36]	; 0x24
 8015c3a:	68bb      	ldr	r3, [r7, #8]
 8015c3c:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8015c3e:	68bb      	ldr	r3, [r7, #8]
 8015c40:	2b01      	cmp	r3, #1
 8015c42:	d904      	bls.n	8015c4e <remove_chain+0x2e>
 8015c44:	69bb      	ldr	r3, [r7, #24]
 8015c46:	6a1b      	ldr	r3, [r3, #32]
 8015c48:	68ba      	ldr	r2, [r7, #8]
 8015c4a:	429a      	cmp	r2, r3
 8015c4c:	d301      	bcc.n	8015c52 <remove_chain+0x32>
 8015c4e:	2302      	movs	r3, #2
 8015c50:	e096      	b.n	8015d80 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d014      	beq.n	8015c82 <remove_chain+0x62>
 8015c58:	69bb      	ldr	r3, [r7, #24]
 8015c5a:	781b      	ldrb	r3, [r3, #0]
 8015c5c:	2b04      	cmp	r3, #4
 8015c5e:	d103      	bne.n	8015c68 <remove_chain+0x48>
 8015c60:	68fb      	ldr	r3, [r7, #12]
 8015c62:	79db      	ldrb	r3, [r3, #7]
 8015c64:	2b02      	cmp	r3, #2
 8015c66:	d00c      	beq.n	8015c82 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8015c68:	f04f 32ff 	mov.w	r2, #4294967295
 8015c6c:	6879      	ldr	r1, [r7, #4]
 8015c6e:	69b8      	ldr	r0, [r7, #24]
 8015c70:	f7ff fd58 	bl	8015724 <put_fat>
 8015c74:	4603      	mov	r3, r0
 8015c76:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8015c78:	7ffb      	ldrb	r3, [r7, #31]
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d001      	beq.n	8015c82 <remove_chain+0x62>
 8015c7e:	7ffb      	ldrb	r3, [r7, #31]
 8015c80:	e07e      	b.n	8015d80 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8015c82:	68b9      	ldr	r1, [r7, #8]
 8015c84:	68f8      	ldr	r0, [r7, #12]
 8015c86:	f7ff fbf9 	bl	801547c <get_fat>
 8015c8a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8015c8c:	697b      	ldr	r3, [r7, #20]
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d055      	beq.n	8015d3e <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8015c92:	697b      	ldr	r3, [r7, #20]
 8015c94:	2b01      	cmp	r3, #1
 8015c96:	d101      	bne.n	8015c9c <remove_chain+0x7c>
 8015c98:	2302      	movs	r3, #2
 8015c9a:	e071      	b.n	8015d80 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8015c9c:	697b      	ldr	r3, [r7, #20]
 8015c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ca2:	d101      	bne.n	8015ca8 <remove_chain+0x88>
 8015ca4:	2301      	movs	r3, #1
 8015ca6:	e06b      	b.n	8015d80 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8015ca8:	69bb      	ldr	r3, [r7, #24]
 8015caa:	781b      	ldrb	r3, [r3, #0]
 8015cac:	2b04      	cmp	r3, #4
 8015cae:	d00b      	beq.n	8015cc8 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8015cb0:	2200      	movs	r2, #0
 8015cb2:	68b9      	ldr	r1, [r7, #8]
 8015cb4:	69b8      	ldr	r0, [r7, #24]
 8015cb6:	f7ff fd35 	bl	8015724 <put_fat>
 8015cba:	4603      	mov	r3, r0
 8015cbc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8015cbe:	7ffb      	ldrb	r3, [r7, #31]
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d001      	beq.n	8015cc8 <remove_chain+0xa8>
 8015cc4:	7ffb      	ldrb	r3, [r7, #31]
 8015cc6:	e05b      	b.n	8015d80 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8015cc8:	69bb      	ldr	r3, [r7, #24]
 8015cca:	69da      	ldr	r2, [r3, #28]
 8015ccc:	69bb      	ldr	r3, [r7, #24]
 8015cce:	6a1b      	ldr	r3, [r3, #32]
 8015cd0:	3b02      	subs	r3, #2
 8015cd2:	429a      	cmp	r2, r3
 8015cd4:	d20b      	bcs.n	8015cee <remove_chain+0xce>
			fs->free_clst++;
 8015cd6:	69bb      	ldr	r3, [r7, #24]
 8015cd8:	69db      	ldr	r3, [r3, #28]
 8015cda:	1c5a      	adds	r2, r3, #1
 8015cdc:	69bb      	ldr	r3, [r7, #24]
 8015cde:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 8015ce0:	69bb      	ldr	r3, [r7, #24]
 8015ce2:	791b      	ldrb	r3, [r3, #4]
 8015ce4:	f043 0301 	orr.w	r3, r3, #1
 8015ce8:	b2da      	uxtb	r2, r3
 8015cea:	69bb      	ldr	r3, [r7, #24]
 8015cec:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8015cee:	6a3b      	ldr	r3, [r7, #32]
 8015cf0:	3301      	adds	r3, #1
 8015cf2:	697a      	ldr	r2, [r7, #20]
 8015cf4:	429a      	cmp	r2, r3
 8015cf6:	d102      	bne.n	8015cfe <remove_chain+0xde>
			ecl = nxt;
 8015cf8:	697b      	ldr	r3, [r7, #20]
 8015cfa:	623b      	str	r3, [r7, #32]
 8015cfc:	e017      	b.n	8015d2e <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8015cfe:	69bb      	ldr	r3, [r7, #24]
 8015d00:	781b      	ldrb	r3, [r3, #0]
 8015d02:	2b04      	cmp	r3, #4
 8015d04:	d10f      	bne.n	8015d26 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8015d06:	6a3a      	ldr	r2, [r7, #32]
 8015d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d0a:	1ad3      	subs	r3, r2, r3
 8015d0c:	1c5a      	adds	r2, r3, #1
 8015d0e:	2300      	movs	r3, #0
 8015d10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015d12:	69b8      	ldr	r0, [r7, #24]
 8015d14:	f7ff feaf 	bl	8015a76 <change_bitmap>
 8015d18:	4603      	mov	r3, r0
 8015d1a:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 8015d1c:	7ffb      	ldrb	r3, [r7, #31]
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d001      	beq.n	8015d26 <remove_chain+0x106>
 8015d22:	7ffb      	ldrb	r3, [r7, #31]
 8015d24:	e02c      	b.n	8015d80 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 8015d26:	697b      	ldr	r3, [r7, #20]
 8015d28:	623b      	str	r3, [r7, #32]
 8015d2a:	6a3b      	ldr	r3, [r7, #32]
 8015d2c:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 8015d2e:	697b      	ldr	r3, [r7, #20]
 8015d30:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8015d32:	69bb      	ldr	r3, [r7, #24]
 8015d34:	6a1b      	ldr	r3, [r3, #32]
 8015d36:	68ba      	ldr	r2, [r7, #8]
 8015d38:	429a      	cmp	r2, r3
 8015d3a:	d3a2      	bcc.n	8015c82 <remove_chain+0x62>
 8015d3c:	e000      	b.n	8015d40 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 8015d3e:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8015d40:	69bb      	ldr	r3, [r7, #24]
 8015d42:	781b      	ldrb	r3, [r3, #0]
 8015d44:	2b04      	cmp	r3, #4
 8015d46:	d11a      	bne.n	8015d7e <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d103      	bne.n	8015d56 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 8015d4e:	68fb      	ldr	r3, [r7, #12]
 8015d50:	2200      	movs	r2, #0
 8015d52:	71da      	strb	r2, [r3, #7]
 8015d54:	e013      	b.n	8015d7e <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	79db      	ldrb	r3, [r3, #7]
 8015d5a:	2b03      	cmp	r3, #3
 8015d5c:	d10f      	bne.n	8015d7e <remove_chain+0x15e>
 8015d5e:	68fb      	ldr	r3, [r7, #12]
 8015d60:	689b      	ldr	r3, [r3, #8]
 8015d62:	687a      	ldr	r2, [r7, #4]
 8015d64:	429a      	cmp	r2, r3
 8015d66:	d30a      	bcc.n	8015d7e <remove_chain+0x15e>
 8015d68:	68fb      	ldr	r3, [r7, #12]
 8015d6a:	689a      	ldr	r2, [r3, #8]
 8015d6c:	68fb      	ldr	r3, [r7, #12]
 8015d6e:	699b      	ldr	r3, [r3, #24]
 8015d70:	4413      	add	r3, r2
 8015d72:	687a      	ldr	r2, [r7, #4]
 8015d74:	429a      	cmp	r2, r3
 8015d76:	d802      	bhi.n	8015d7e <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8015d78:	68fb      	ldr	r3, [r7, #12]
 8015d7a:	2202      	movs	r2, #2
 8015d7c:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 8015d7e:	2300      	movs	r3, #0
}
 8015d80:	4618      	mov	r0, r3
 8015d82:	3728      	adds	r7, #40	; 0x28
 8015d84:	46bd      	mov	sp, r7
 8015d86:	bd80      	pop	{r7, pc}

08015d88 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8015d88:	b580      	push	{r7, lr}
 8015d8a:	b088      	sub	sp, #32
 8015d8c:	af00      	add	r7, sp, #0
 8015d8e:	6078      	str	r0, [r7, #4]
 8015d90:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	681b      	ldr	r3, [r3, #0]
 8015d96:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8015d98:	683b      	ldr	r3, [r7, #0]
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d10d      	bne.n	8015dba <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8015d9e:	693b      	ldr	r3, [r7, #16]
 8015da0:	699b      	ldr	r3, [r3, #24]
 8015da2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8015da4:	69bb      	ldr	r3, [r7, #24]
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d004      	beq.n	8015db4 <create_chain+0x2c>
 8015daa:	693b      	ldr	r3, [r7, #16]
 8015dac:	6a1b      	ldr	r3, [r3, #32]
 8015dae:	69ba      	ldr	r2, [r7, #24]
 8015db0:	429a      	cmp	r2, r3
 8015db2:	d31b      	bcc.n	8015dec <create_chain+0x64>
 8015db4:	2301      	movs	r3, #1
 8015db6:	61bb      	str	r3, [r7, #24]
 8015db8:	e018      	b.n	8015dec <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8015dba:	6839      	ldr	r1, [r7, #0]
 8015dbc:	6878      	ldr	r0, [r7, #4]
 8015dbe:	f7ff fb5d 	bl	801547c <get_fat>
 8015dc2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8015dc4:	68fb      	ldr	r3, [r7, #12]
 8015dc6:	2b01      	cmp	r3, #1
 8015dc8:	d801      	bhi.n	8015dce <create_chain+0x46>
 8015dca:	2301      	movs	r3, #1
 8015dcc:	e0d9      	b.n	8015f82 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8015dce:	68fb      	ldr	r3, [r7, #12]
 8015dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015dd4:	d101      	bne.n	8015dda <create_chain+0x52>
 8015dd6:	68fb      	ldr	r3, [r7, #12]
 8015dd8:	e0d3      	b.n	8015f82 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8015dda:	693b      	ldr	r3, [r7, #16]
 8015ddc:	6a1b      	ldr	r3, [r3, #32]
 8015dde:	68fa      	ldr	r2, [r7, #12]
 8015de0:	429a      	cmp	r2, r3
 8015de2:	d201      	bcs.n	8015de8 <create_chain+0x60>
 8015de4:	68fb      	ldr	r3, [r7, #12]
 8015de6:	e0cc      	b.n	8015f82 <create_chain+0x1fa>
		scl = clst;
 8015de8:	683b      	ldr	r3, [r7, #0]
 8015dea:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8015dec:	693b      	ldr	r3, [r7, #16]
 8015dee:	781b      	ldrb	r3, [r3, #0]
 8015df0:	2b04      	cmp	r3, #4
 8015df2:	d164      	bne.n	8015ebe <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8015df4:	2201      	movs	r2, #1
 8015df6:	69b9      	ldr	r1, [r7, #24]
 8015df8:	6938      	ldr	r0, [r7, #16]
 8015dfa:	f7ff fdb5 	bl	8015968 <find_bitmap>
 8015dfe:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8015e00:	69fb      	ldr	r3, [r7, #28]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d003      	beq.n	8015e0e <create_chain+0x86>
 8015e06:	69fb      	ldr	r3, [r7, #28]
 8015e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e0c:	d101      	bne.n	8015e12 <create_chain+0x8a>
 8015e0e:	69fb      	ldr	r3, [r7, #28]
 8015e10:	e0b7      	b.n	8015f82 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8015e12:	2301      	movs	r3, #1
 8015e14:	2201      	movs	r2, #1
 8015e16:	69f9      	ldr	r1, [r7, #28]
 8015e18:	6938      	ldr	r0, [r7, #16]
 8015e1a:	f7ff fe2c 	bl	8015a76 <change_bitmap>
 8015e1e:	4603      	mov	r3, r0
 8015e20:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 8015e22:	7dfb      	ldrb	r3, [r7, #23]
 8015e24:	2b02      	cmp	r3, #2
 8015e26:	d101      	bne.n	8015e2c <create_chain+0xa4>
 8015e28:	2301      	movs	r3, #1
 8015e2a:	e0aa      	b.n	8015f82 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8015e2c:	7dfb      	ldrb	r3, [r7, #23]
 8015e2e:	2b01      	cmp	r3, #1
 8015e30:	d102      	bne.n	8015e38 <create_chain+0xb0>
 8015e32:	f04f 33ff 	mov.w	r3, #4294967295
 8015e36:	e0a4      	b.n	8015f82 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 8015e38:	683b      	ldr	r3, [r7, #0]
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d103      	bne.n	8015e46 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	2202      	movs	r2, #2
 8015e42:	71da      	strb	r2, [r3, #7]
 8015e44:	e011      	b.n	8015e6a <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	79db      	ldrb	r3, [r3, #7]
 8015e4a:	2b02      	cmp	r3, #2
 8015e4c:	d10d      	bne.n	8015e6a <create_chain+0xe2>
 8015e4e:	69bb      	ldr	r3, [r7, #24]
 8015e50:	3301      	adds	r3, #1
 8015e52:	69fa      	ldr	r2, [r7, #28]
 8015e54:	429a      	cmp	r2, r3
 8015e56:	d008      	beq.n	8015e6a <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	689b      	ldr	r3, [r3, #8]
 8015e5c:	69ba      	ldr	r2, [r7, #24]
 8015e5e:	1ad2      	subs	r2, r2, r3
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	2203      	movs	r2, #3
 8015e68:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	79db      	ldrb	r3, [r3, #7]
 8015e6e:	2b02      	cmp	r3, #2
 8015e70:	d064      	beq.n	8015f3c <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8015e72:	683b      	ldr	r3, [r7, #0]
 8015e74:	3301      	adds	r3, #1
 8015e76:	69fa      	ldr	r2, [r7, #28]
 8015e78:	429a      	cmp	r2, r3
 8015e7a:	d10b      	bne.n	8015e94 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	69db      	ldr	r3, [r3, #28]
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d003      	beq.n	8015e8c <create_chain+0x104>
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	69db      	ldr	r3, [r3, #28]
 8015e88:	3301      	adds	r3, #1
 8015e8a:	e000      	b.n	8015e8e <create_chain+0x106>
 8015e8c:	2302      	movs	r3, #2
 8015e8e:	687a      	ldr	r2, [r7, #4]
 8015e90:	61d3      	str	r3, [r2, #28]
 8015e92:	e053      	b.n	8015f3c <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	69db      	ldr	r3, [r3, #28]
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d102      	bne.n	8015ea2 <create_chain+0x11a>
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	2201      	movs	r2, #1
 8015ea0:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8015ea2:	69fa      	ldr	r2, [r7, #28]
 8015ea4:	6839      	ldr	r1, [r7, #0]
 8015ea6:	6878      	ldr	r0, [r7, #4]
 8015ea8:	f7ff fe89 	bl	8015bbe <fill_last_frag>
 8015eac:	4603      	mov	r3, r0
 8015eae:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 8015eb0:	7dfb      	ldrb	r3, [r7, #23]
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d142      	bne.n	8015f3c <create_chain+0x1b4>
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	2201      	movs	r2, #1
 8015eba:	61da      	str	r2, [r3, #28]
 8015ebc:	e03e      	b.n	8015f3c <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8015ebe:	69bb      	ldr	r3, [r7, #24]
 8015ec0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8015ec2:	69fb      	ldr	r3, [r7, #28]
 8015ec4:	3301      	adds	r3, #1
 8015ec6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8015ec8:	693b      	ldr	r3, [r7, #16]
 8015eca:	6a1b      	ldr	r3, [r3, #32]
 8015ecc:	69fa      	ldr	r2, [r7, #28]
 8015ece:	429a      	cmp	r2, r3
 8015ed0:	d307      	bcc.n	8015ee2 <create_chain+0x15a>
				ncl = 2;
 8015ed2:	2302      	movs	r3, #2
 8015ed4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8015ed6:	69fa      	ldr	r2, [r7, #28]
 8015ed8:	69bb      	ldr	r3, [r7, #24]
 8015eda:	429a      	cmp	r2, r3
 8015edc:	d901      	bls.n	8015ee2 <create_chain+0x15a>
 8015ede:	2300      	movs	r3, #0
 8015ee0:	e04f      	b.n	8015f82 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8015ee2:	69f9      	ldr	r1, [r7, #28]
 8015ee4:	6878      	ldr	r0, [r7, #4]
 8015ee6:	f7ff fac9 	bl	801547c <get_fat>
 8015eea:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8015eec:	68fb      	ldr	r3, [r7, #12]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d00e      	beq.n	8015f10 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8015ef2:	68fb      	ldr	r3, [r7, #12]
 8015ef4:	2b01      	cmp	r3, #1
 8015ef6:	d003      	beq.n	8015f00 <create_chain+0x178>
 8015ef8:	68fb      	ldr	r3, [r7, #12]
 8015efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015efe:	d101      	bne.n	8015f04 <create_chain+0x17c>
 8015f00:	68fb      	ldr	r3, [r7, #12]
 8015f02:	e03e      	b.n	8015f82 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 8015f04:	69fa      	ldr	r2, [r7, #28]
 8015f06:	69bb      	ldr	r3, [r7, #24]
 8015f08:	429a      	cmp	r2, r3
 8015f0a:	d1da      	bne.n	8015ec2 <create_chain+0x13a>
 8015f0c:	2300      	movs	r3, #0
 8015f0e:	e038      	b.n	8015f82 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 8015f10:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8015f12:	f04f 32ff 	mov.w	r2, #4294967295
 8015f16:	69f9      	ldr	r1, [r7, #28]
 8015f18:	6938      	ldr	r0, [r7, #16]
 8015f1a:	f7ff fc03 	bl	8015724 <put_fat>
 8015f1e:	4603      	mov	r3, r0
 8015f20:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8015f22:	7dfb      	ldrb	r3, [r7, #23]
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d109      	bne.n	8015f3c <create_chain+0x1b4>
 8015f28:	683b      	ldr	r3, [r7, #0]
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d006      	beq.n	8015f3c <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8015f2e:	69fa      	ldr	r2, [r7, #28]
 8015f30:	6839      	ldr	r1, [r7, #0]
 8015f32:	6938      	ldr	r0, [r7, #16]
 8015f34:	f7ff fbf6 	bl	8015724 <put_fat>
 8015f38:	4603      	mov	r3, r0
 8015f3a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8015f3c:	7dfb      	ldrb	r3, [r7, #23]
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d116      	bne.n	8015f70 <create_chain+0x1e8>
		fs->last_clst = ncl;
 8015f42:	693b      	ldr	r3, [r7, #16]
 8015f44:	69fa      	ldr	r2, [r7, #28]
 8015f46:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8015f48:	693b      	ldr	r3, [r7, #16]
 8015f4a:	69da      	ldr	r2, [r3, #28]
 8015f4c:	693b      	ldr	r3, [r7, #16]
 8015f4e:	6a1b      	ldr	r3, [r3, #32]
 8015f50:	3b02      	subs	r3, #2
 8015f52:	429a      	cmp	r2, r3
 8015f54:	d804      	bhi.n	8015f60 <create_chain+0x1d8>
 8015f56:	693b      	ldr	r3, [r7, #16]
 8015f58:	69db      	ldr	r3, [r3, #28]
 8015f5a:	1e5a      	subs	r2, r3, #1
 8015f5c:	693b      	ldr	r3, [r7, #16]
 8015f5e:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 8015f60:	693b      	ldr	r3, [r7, #16]
 8015f62:	791b      	ldrb	r3, [r3, #4]
 8015f64:	f043 0301 	orr.w	r3, r3, #1
 8015f68:	b2da      	uxtb	r2, r3
 8015f6a:	693b      	ldr	r3, [r7, #16]
 8015f6c:	711a      	strb	r2, [r3, #4]
 8015f6e:	e007      	b.n	8015f80 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8015f70:	7dfb      	ldrb	r3, [r7, #23]
 8015f72:	2b01      	cmp	r3, #1
 8015f74:	d102      	bne.n	8015f7c <create_chain+0x1f4>
 8015f76:	f04f 33ff 	mov.w	r3, #4294967295
 8015f7a:	e000      	b.n	8015f7e <create_chain+0x1f6>
 8015f7c:	2301      	movs	r3, #1
 8015f7e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8015f80:	69fb      	ldr	r3, [r7, #28]
}
 8015f82:	4618      	mov	r0, r3
 8015f84:	3720      	adds	r7, #32
 8015f86:	46bd      	mov	sp, r7
 8015f88:	bd80      	pop	{r7, pc}

08015f8a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8015f8a:	b590      	push	{r4, r7, lr}
 8015f8c:	b089      	sub	sp, #36	; 0x24
 8015f8e:	af00      	add	r7, sp, #0
 8015f90:	60f8      	str	r0, [r7, #12]
 8015f92:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8015f96:	68fb      	ldr	r3, [r7, #12]
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015fa0:	3304      	adds	r3, #4
 8015fa2:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8015fa4:	697b      	ldr	r3, [r7, #20]
 8015fa6:	899b      	ldrh	r3, [r3, #12]
 8015fa8:	b29b      	uxth	r3, r3
 8015faa:	f04f 0400 	mov.w	r4, #0
 8015fae:	461a      	mov	r2, r3
 8015fb0:	4623      	mov	r3, r4
 8015fb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8015fb6:	f7ea f98f 	bl	80002d8 <__aeabi_uldivmod>
 8015fba:	4603      	mov	r3, r0
 8015fbc:	460c      	mov	r4, r1
 8015fbe:	4618      	mov	r0, r3
 8015fc0:	4621      	mov	r1, r4
 8015fc2:	697b      	ldr	r3, [r7, #20]
 8015fc4:	895b      	ldrh	r3, [r3, #10]
 8015fc6:	b29b      	uxth	r3, r3
 8015fc8:	f04f 0400 	mov.w	r4, #0
 8015fcc:	461a      	mov	r2, r3
 8015fce:	4623      	mov	r3, r4
 8015fd0:	f7ea f982 	bl	80002d8 <__aeabi_uldivmod>
 8015fd4:	4603      	mov	r3, r0
 8015fd6:	460c      	mov	r4, r1
 8015fd8:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8015fda:	69bb      	ldr	r3, [r7, #24]
 8015fdc:	1d1a      	adds	r2, r3, #4
 8015fde:	61ba      	str	r2, [r7, #24]
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8015fe4:	693b      	ldr	r3, [r7, #16]
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	d101      	bne.n	8015fee <clmt_clust+0x64>
 8015fea:	2300      	movs	r3, #0
 8015fec:	e010      	b.n	8016010 <clmt_clust+0x86>
		if (cl < ncl) break;	/* In this fragment? */
 8015fee:	69fa      	ldr	r2, [r7, #28]
 8015ff0:	693b      	ldr	r3, [r7, #16]
 8015ff2:	429a      	cmp	r2, r3
 8015ff4:	d307      	bcc.n	8016006 <clmt_clust+0x7c>
		cl -= ncl; tbl++;		/* Next fragment */
 8015ff6:	69fa      	ldr	r2, [r7, #28]
 8015ff8:	693b      	ldr	r3, [r7, #16]
 8015ffa:	1ad3      	subs	r3, r2, r3
 8015ffc:	61fb      	str	r3, [r7, #28]
 8015ffe:	69bb      	ldr	r3, [r7, #24]
 8016000:	3304      	adds	r3, #4
 8016002:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8016004:	e7e9      	b.n	8015fda <clmt_clust+0x50>
		if (cl < ncl) break;	/* In this fragment? */
 8016006:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8016008:	69bb      	ldr	r3, [r7, #24]
 801600a:	681a      	ldr	r2, [r3, #0]
 801600c:	69fb      	ldr	r3, [r7, #28]
 801600e:	4413      	add	r3, r2
}
 8016010:	4618      	mov	r0, r3
 8016012:	3724      	adds	r7, #36	; 0x24
 8016014:	46bd      	mov	sp, r7
 8016016:	bd90      	pop	{r4, r7, pc}

08016018 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8016018:	b580      	push	{r7, lr}
 801601a:	b086      	sub	sp, #24
 801601c:	af00      	add	r7, sp, #0
 801601e:	6078      	str	r0, [r7, #4]
 8016020:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8016028:	693b      	ldr	r3, [r7, #16]
 801602a:	781b      	ldrb	r3, [r3, #0]
 801602c:	2b04      	cmp	r3, #4
 801602e:	d102      	bne.n	8016036 <dir_sdi+0x1e>
 8016030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016034:	e001      	b.n	801603a <dir_sdi+0x22>
 8016036:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801603a:	683b      	ldr	r3, [r7, #0]
 801603c:	429a      	cmp	r2, r3
 801603e:	d904      	bls.n	801604a <dir_sdi+0x32>
 8016040:	683b      	ldr	r3, [r7, #0]
 8016042:	f003 031f 	and.w	r3, r3, #31
 8016046:	2b00      	cmp	r3, #0
 8016048:	d001      	beq.n	801604e <dir_sdi+0x36>
		return FR_INT_ERR;
 801604a:	2302      	movs	r3, #2
 801604c:	e074      	b.n	8016138 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	683a      	ldr	r2, [r7, #0]
 8016052:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	689b      	ldr	r3, [r3, #8]
 8016058:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801605a:	697b      	ldr	r3, [r7, #20]
 801605c:	2b00      	cmp	r3, #0
 801605e:	d109      	bne.n	8016074 <dir_sdi+0x5c>
 8016060:	693b      	ldr	r3, [r7, #16]
 8016062:	781b      	ldrb	r3, [r3, #0]
 8016064:	2b02      	cmp	r3, #2
 8016066:	d905      	bls.n	8016074 <dir_sdi+0x5c>
		clst = fs->dirbase;
 8016068:	693b      	ldr	r3, [r7, #16]
 801606a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801606c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	2200      	movs	r2, #0
 8016072:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8016074:	697b      	ldr	r3, [r7, #20]
 8016076:	2b00      	cmp	r3, #0
 8016078:	d10c      	bne.n	8016094 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801607a:	683b      	ldr	r3, [r7, #0]
 801607c:	095b      	lsrs	r3, r3, #5
 801607e:	693a      	ldr	r2, [r7, #16]
 8016080:	8912      	ldrh	r2, [r2, #8]
 8016082:	4293      	cmp	r3, r2
 8016084:	d301      	bcc.n	801608a <dir_sdi+0x72>
 8016086:	2302      	movs	r3, #2
 8016088:	e056      	b.n	8016138 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 801608a:	693b      	ldr	r3, [r7, #16]
 801608c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	639a      	str	r2, [r3, #56]	; 0x38
 8016092:	e02d      	b.n	80160f0 <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8016094:	693b      	ldr	r3, [r7, #16]
 8016096:	895b      	ldrh	r3, [r3, #10]
 8016098:	461a      	mov	r2, r3
 801609a:	693b      	ldr	r3, [r7, #16]
 801609c:	899b      	ldrh	r3, [r3, #12]
 801609e:	fb03 f302 	mul.w	r3, r3, r2
 80160a2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80160a4:	e019      	b.n	80160da <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	6979      	ldr	r1, [r7, #20]
 80160aa:	4618      	mov	r0, r3
 80160ac:	f7ff f9e6 	bl	801547c <get_fat>
 80160b0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80160b2:	697b      	ldr	r3, [r7, #20]
 80160b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80160b8:	d101      	bne.n	80160be <dir_sdi+0xa6>
 80160ba:	2301      	movs	r3, #1
 80160bc:	e03c      	b.n	8016138 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80160be:	697b      	ldr	r3, [r7, #20]
 80160c0:	2b01      	cmp	r3, #1
 80160c2:	d904      	bls.n	80160ce <dir_sdi+0xb6>
 80160c4:	693b      	ldr	r3, [r7, #16]
 80160c6:	6a1b      	ldr	r3, [r3, #32]
 80160c8:	697a      	ldr	r2, [r7, #20]
 80160ca:	429a      	cmp	r2, r3
 80160cc:	d301      	bcc.n	80160d2 <dir_sdi+0xba>
 80160ce:	2302      	movs	r3, #2
 80160d0:	e032      	b.n	8016138 <dir_sdi+0x120>
			ofs -= csz;
 80160d2:	683a      	ldr	r2, [r7, #0]
 80160d4:	68fb      	ldr	r3, [r7, #12]
 80160d6:	1ad3      	subs	r3, r2, r3
 80160d8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80160da:	683a      	ldr	r2, [r7, #0]
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	429a      	cmp	r2, r3
 80160e0:	d2e1      	bcs.n	80160a6 <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 80160e2:	6979      	ldr	r1, [r7, #20]
 80160e4:	6938      	ldr	r0, [r7, #16]
 80160e6:	f7ff f9a9 	bl	801543c <clust2sect>
 80160ea:	4602      	mov	r2, r0
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	697a      	ldr	r2, [r7, #20]
 80160f4:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d101      	bne.n	8016102 <dir_sdi+0xea>
 80160fe:	2302      	movs	r3, #2
 8016100:	e01a      	b.n	8016138 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016106:	693b      	ldr	r3, [r7, #16]
 8016108:	899b      	ldrh	r3, [r3, #12]
 801610a:	4619      	mov	r1, r3
 801610c:	683b      	ldr	r3, [r7, #0]
 801610e:	fbb3 f3f1 	udiv	r3, r3, r1
 8016112:	441a      	add	r2, r3
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8016118:	693b      	ldr	r3, [r7, #16]
 801611a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801611e:	693b      	ldr	r3, [r7, #16]
 8016120:	899b      	ldrh	r3, [r3, #12]
 8016122:	461a      	mov	r2, r3
 8016124:	683b      	ldr	r3, [r7, #0]
 8016126:	fbb3 f0f2 	udiv	r0, r3, r2
 801612a:	fb02 f200 	mul.w	r2, r2, r0
 801612e:	1a9b      	subs	r3, r3, r2
 8016130:	18ca      	adds	r2, r1, r3
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8016136:	2300      	movs	r3, #0
}
 8016138:	4618      	mov	r0, r3
 801613a:	3718      	adds	r7, #24
 801613c:	46bd      	mov	sp, r7
 801613e:	bd80      	pop	{r7, pc}

08016140 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8016140:	b580      	push	{r7, lr}
 8016142:	b086      	sub	sp, #24
 8016144:	af00      	add	r7, sp, #0
 8016146:	6078      	str	r0, [r7, #4]
 8016148:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	681b      	ldr	r3, [r3, #0]
 801614e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016154:	3320      	adds	r3, #32
 8016156:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801615c:	2b00      	cmp	r3, #0
 801615e:	d00b      	beq.n	8016178 <dir_next+0x38>
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	781b      	ldrb	r3, [r3, #0]
 8016164:	2b04      	cmp	r3, #4
 8016166:	d102      	bne.n	801616e <dir_next+0x2e>
 8016168:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801616c:	e001      	b.n	8016172 <dir_next+0x32>
 801616e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8016172:	68bb      	ldr	r3, [r7, #8]
 8016174:	429a      	cmp	r2, r3
 8016176:	d801      	bhi.n	801617c <dir_next+0x3c>
 8016178:	2304      	movs	r3, #4
 801617a:	e0c3      	b.n	8016304 <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	899b      	ldrh	r3, [r3, #12]
 8016180:	461a      	mov	r2, r3
 8016182:	68bb      	ldr	r3, [r7, #8]
 8016184:	fbb3 f1f2 	udiv	r1, r3, r2
 8016188:	fb02 f201 	mul.w	r2, r2, r1
 801618c:	1a9b      	subs	r3, r3, r2
 801618e:	2b00      	cmp	r3, #0
 8016190:	f040 80a5 	bne.w	80162de <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016198:	1c5a      	adds	r2, r3, #1
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d10b      	bne.n	80161be <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80161a6:	68bb      	ldr	r3, [r7, #8]
 80161a8:	095b      	lsrs	r3, r3, #5
 80161aa:	68fa      	ldr	r2, [r7, #12]
 80161ac:	8912      	ldrh	r2, [r2, #8]
 80161ae:	4293      	cmp	r3, r2
 80161b0:	f0c0 8095 	bcc.w	80162de <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	2200      	movs	r2, #0
 80161b8:	639a      	str	r2, [r3, #56]	; 0x38
 80161ba:	2304      	movs	r3, #4
 80161bc:	e0a2      	b.n	8016304 <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	899b      	ldrh	r3, [r3, #12]
 80161c2:	461a      	mov	r2, r3
 80161c4:	68bb      	ldr	r3, [r7, #8]
 80161c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80161ca:	68fa      	ldr	r2, [r7, #12]
 80161cc:	8952      	ldrh	r2, [r2, #10]
 80161ce:	3a01      	subs	r2, #1
 80161d0:	4013      	ands	r3, r2
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	f040 8083 	bne.w	80162de <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80161d8:	687a      	ldr	r2, [r7, #4]
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80161de:	4619      	mov	r1, r3
 80161e0:	4610      	mov	r0, r2
 80161e2:	f7ff f94b 	bl	801547c <get_fat>
 80161e6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80161e8:	697b      	ldr	r3, [r7, #20]
 80161ea:	2b01      	cmp	r3, #1
 80161ec:	d801      	bhi.n	80161f2 <dir_next+0xb2>
 80161ee:	2302      	movs	r3, #2
 80161f0:	e088      	b.n	8016304 <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80161f2:	697b      	ldr	r3, [r7, #20]
 80161f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161f8:	d101      	bne.n	80161fe <dir_next+0xbe>
 80161fa:	2301      	movs	r3, #1
 80161fc:	e082      	b.n	8016304 <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	6a1b      	ldr	r3, [r3, #32]
 8016202:	697a      	ldr	r2, [r7, #20]
 8016204:	429a      	cmp	r2, r3
 8016206:	d360      	bcc.n	80162ca <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8016208:	683b      	ldr	r3, [r7, #0]
 801620a:	2b00      	cmp	r3, #0
 801620c:	d104      	bne.n	8016218 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	2200      	movs	r2, #0
 8016212:	639a      	str	r2, [r3, #56]	; 0x38
 8016214:	2304      	movs	r3, #4
 8016216:	e075      	b.n	8016304 <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8016218:	687a      	ldr	r2, [r7, #4]
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801621e:	4619      	mov	r1, r3
 8016220:	4610      	mov	r0, r2
 8016222:	f7ff fdb1 	bl	8015d88 <create_chain>
 8016226:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8016228:	697b      	ldr	r3, [r7, #20]
 801622a:	2b00      	cmp	r3, #0
 801622c:	d101      	bne.n	8016232 <dir_next+0xf2>
 801622e:	2307      	movs	r3, #7
 8016230:	e068      	b.n	8016304 <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8016232:	697b      	ldr	r3, [r7, #20]
 8016234:	2b01      	cmp	r3, #1
 8016236:	d101      	bne.n	801623c <dir_next+0xfc>
 8016238:	2302      	movs	r3, #2
 801623a:	e063      	b.n	8016304 <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801623c:	697b      	ldr	r3, [r7, #20]
 801623e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016242:	d101      	bne.n	8016248 <dir_next+0x108>
 8016244:	2301      	movs	r3, #1
 8016246:	e05d      	b.n	8016304 <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	79db      	ldrb	r3, [r3, #7]
 801624c:	f043 0304 	orr.w	r3, r3, #4
 8016250:	b2da      	uxtb	r2, r3
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8016256:	68f8      	ldr	r0, [r7, #12]
 8016258:	f7ff f80e 	bl	8015278 <sync_window>
 801625c:	4603      	mov	r3, r0
 801625e:	2b00      	cmp	r3, #0
 8016260:	d001      	beq.n	8016266 <dir_next+0x126>
 8016262:	2301      	movs	r3, #1
 8016264:	e04e      	b.n	8016304 <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8016266:	68fb      	ldr	r3, [r7, #12]
 8016268:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 801626c:	68fb      	ldr	r3, [r7, #12]
 801626e:	899b      	ldrh	r3, [r3, #12]
 8016270:	461a      	mov	r2, r3
 8016272:	2100      	movs	r1, #0
 8016274:	f7fe fe37 	bl	8014ee6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8016278:	2300      	movs	r3, #0
 801627a:	613b      	str	r3, [r7, #16]
 801627c:	6979      	ldr	r1, [r7, #20]
 801627e:	68f8      	ldr	r0, [r7, #12]
 8016280:	f7ff f8dc 	bl	801543c <clust2sect>
 8016284:	4602      	mov	r2, r0
 8016286:	68fb      	ldr	r3, [r7, #12]
 8016288:	639a      	str	r2, [r3, #56]	; 0x38
 801628a:	e012      	b.n	80162b2 <dir_next+0x172>
						fs->wflag = 1;
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	2201      	movs	r2, #1
 8016290:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8016292:	68f8      	ldr	r0, [r7, #12]
 8016294:	f7fe fff0 	bl	8015278 <sync_window>
 8016298:	4603      	mov	r3, r0
 801629a:	2b00      	cmp	r3, #0
 801629c:	d001      	beq.n	80162a2 <dir_next+0x162>
 801629e:	2301      	movs	r3, #1
 80162a0:	e030      	b.n	8016304 <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80162a2:	693b      	ldr	r3, [r7, #16]
 80162a4:	3301      	adds	r3, #1
 80162a6:	613b      	str	r3, [r7, #16]
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80162ac:	1c5a      	adds	r2, r3, #1
 80162ae:	68fb      	ldr	r3, [r7, #12]
 80162b0:	639a      	str	r2, [r3, #56]	; 0x38
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	895b      	ldrh	r3, [r3, #10]
 80162b6:	461a      	mov	r2, r3
 80162b8:	693b      	ldr	r3, [r7, #16]
 80162ba:	4293      	cmp	r3, r2
 80162bc:	d3e6      	bcc.n	801628c <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80162c2:	693b      	ldr	r3, [r7, #16]
 80162c4:	1ad2      	subs	r2, r2, r3
 80162c6:	68fb      	ldr	r3, [r7, #12]
 80162c8:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	697a      	ldr	r2, [r7, #20]
 80162ce:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 80162d0:	6979      	ldr	r1, [r7, #20]
 80162d2:	68f8      	ldr	r0, [r7, #12]
 80162d4:	f7ff f8b2 	bl	801543c <clust2sect>
 80162d8:	4602      	mov	r2, r0
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	68ba      	ldr	r2, [r7, #8]
 80162e2:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80162ea:	68fb      	ldr	r3, [r7, #12]
 80162ec:	899b      	ldrh	r3, [r3, #12]
 80162ee:	461a      	mov	r2, r3
 80162f0:	68bb      	ldr	r3, [r7, #8]
 80162f2:	fbb3 f0f2 	udiv	r0, r3, r2
 80162f6:	fb02 f200 	mul.w	r2, r2, r0
 80162fa:	1a9b      	subs	r3, r3, r2
 80162fc:	18ca      	adds	r2, r1, r3
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8016302:	2300      	movs	r3, #0
}
 8016304:	4618      	mov	r0, r3
 8016306:	3718      	adds	r7, #24
 8016308:	46bd      	mov	sp, r7
 801630a:	bd80      	pop	{r7, pc}

0801630c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801630c:	b580      	push	{r7, lr}
 801630e:	b086      	sub	sp, #24
 8016310:	af00      	add	r7, sp, #0
 8016312:	6078      	str	r0, [r7, #4]
 8016314:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801631c:	2100      	movs	r1, #0
 801631e:	6878      	ldr	r0, [r7, #4]
 8016320:	f7ff fe7a 	bl	8016018 <dir_sdi>
 8016324:	4603      	mov	r3, r0
 8016326:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8016328:	7dfb      	ldrb	r3, [r7, #23]
 801632a:	2b00      	cmp	r3, #0
 801632c:	d140      	bne.n	80163b0 <dir_alloc+0xa4>
		n = 0;
 801632e:	2300      	movs	r3, #0
 8016330:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016336:	4619      	mov	r1, r3
 8016338:	68f8      	ldr	r0, [r7, #12]
 801633a:	f7fe ffe1 	bl	8015300 <move_window>
 801633e:	4603      	mov	r3, r0
 8016340:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8016342:	7dfb      	ldrb	r3, [r7, #23]
 8016344:	2b00      	cmp	r3, #0
 8016346:	d132      	bne.n	80163ae <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8016348:	68fb      	ldr	r3, [r7, #12]
 801634a:	781b      	ldrb	r3, [r3, #0]
 801634c:	2b04      	cmp	r3, #4
 801634e:	d108      	bne.n	8016362 <dir_alloc+0x56>
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016354:	781b      	ldrb	r3, [r3, #0]
 8016356:	b25b      	sxtb	r3, r3
 8016358:	43db      	mvns	r3, r3
 801635a:	b2db      	uxtb	r3, r3
 801635c:	09db      	lsrs	r3, r3, #7
 801635e:	b2db      	uxtb	r3, r3
 8016360:	e00f      	b.n	8016382 <dir_alloc+0x76>
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016366:	781b      	ldrb	r3, [r3, #0]
 8016368:	2be5      	cmp	r3, #229	; 0xe5
 801636a:	d004      	beq.n	8016376 <dir_alloc+0x6a>
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016370:	781b      	ldrb	r3, [r3, #0]
 8016372:	2b00      	cmp	r3, #0
 8016374:	d101      	bne.n	801637a <dir_alloc+0x6e>
 8016376:	2301      	movs	r3, #1
 8016378:	e000      	b.n	801637c <dir_alloc+0x70>
 801637a:	2300      	movs	r3, #0
 801637c:	f003 0301 	and.w	r3, r3, #1
 8016380:	b2db      	uxtb	r3, r3
 8016382:	2b00      	cmp	r3, #0
 8016384:	d007      	beq.n	8016396 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8016386:	693b      	ldr	r3, [r7, #16]
 8016388:	3301      	adds	r3, #1
 801638a:	613b      	str	r3, [r7, #16]
 801638c:	693a      	ldr	r2, [r7, #16]
 801638e:	683b      	ldr	r3, [r7, #0]
 8016390:	429a      	cmp	r2, r3
 8016392:	d102      	bne.n	801639a <dir_alloc+0x8e>
 8016394:	e00c      	b.n	80163b0 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8016396:	2300      	movs	r3, #0
 8016398:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801639a:	2101      	movs	r1, #1
 801639c:	6878      	ldr	r0, [r7, #4]
 801639e:	f7ff fecf 	bl	8016140 <dir_next>
 80163a2:	4603      	mov	r3, r0
 80163a4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80163a6:	7dfb      	ldrb	r3, [r7, #23]
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d0c2      	beq.n	8016332 <dir_alloc+0x26>
 80163ac:	e000      	b.n	80163b0 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 80163ae:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80163b0:	7dfb      	ldrb	r3, [r7, #23]
 80163b2:	2b04      	cmp	r3, #4
 80163b4:	d101      	bne.n	80163ba <dir_alloc+0xae>
 80163b6:	2307      	movs	r3, #7
 80163b8:	75fb      	strb	r3, [r7, #23]
	return res;
 80163ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80163bc:	4618      	mov	r0, r3
 80163be:	3718      	adds	r7, #24
 80163c0:	46bd      	mov	sp, r7
 80163c2:	bd80      	pop	{r7, pc}

080163c4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80163c4:	b580      	push	{r7, lr}
 80163c6:	b084      	sub	sp, #16
 80163c8:	af00      	add	r7, sp, #0
 80163ca:	6078      	str	r0, [r7, #4]
 80163cc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80163ce:	683b      	ldr	r3, [r7, #0]
 80163d0:	331a      	adds	r3, #26
 80163d2:	4618      	mov	r0, r3
 80163d4:	f7fe fba0 	bl	8014b18 <ld_word>
 80163d8:	4603      	mov	r3, r0
 80163da:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	781b      	ldrb	r3, [r3, #0]
 80163e0:	2b03      	cmp	r3, #3
 80163e2:	d109      	bne.n	80163f8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80163e4:	683b      	ldr	r3, [r7, #0]
 80163e6:	3314      	adds	r3, #20
 80163e8:	4618      	mov	r0, r3
 80163ea:	f7fe fb95 	bl	8014b18 <ld_word>
 80163ee:	4603      	mov	r3, r0
 80163f0:	041b      	lsls	r3, r3, #16
 80163f2:	68fa      	ldr	r2, [r7, #12]
 80163f4:	4313      	orrs	r3, r2
 80163f6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80163f8:	68fb      	ldr	r3, [r7, #12]
}
 80163fa:	4618      	mov	r0, r3
 80163fc:	3710      	adds	r7, #16
 80163fe:	46bd      	mov	sp, r7
 8016400:	bd80      	pop	{r7, pc}

08016402 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8016402:	b580      	push	{r7, lr}
 8016404:	b084      	sub	sp, #16
 8016406:	af00      	add	r7, sp, #0
 8016408:	60f8      	str	r0, [r7, #12]
 801640a:	60b9      	str	r1, [r7, #8]
 801640c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801640e:	68bb      	ldr	r3, [r7, #8]
 8016410:	331a      	adds	r3, #26
 8016412:	687a      	ldr	r2, [r7, #4]
 8016414:	b292      	uxth	r2, r2
 8016416:	4611      	mov	r1, r2
 8016418:	4618      	mov	r0, r3
 801641a:	f7fe fc75 	bl	8014d08 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	781b      	ldrb	r3, [r3, #0]
 8016422:	2b03      	cmp	r3, #3
 8016424:	d109      	bne.n	801643a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8016426:	68bb      	ldr	r3, [r7, #8]
 8016428:	f103 0214 	add.w	r2, r3, #20
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	0c1b      	lsrs	r3, r3, #16
 8016430:	b29b      	uxth	r3, r3
 8016432:	4619      	mov	r1, r3
 8016434:	4610      	mov	r0, r2
 8016436:	f7fe fc67 	bl	8014d08 <st_word>
	}
}
 801643a:	bf00      	nop
 801643c:	3710      	adds	r7, #16
 801643e:	46bd      	mov	sp, r7
 8016440:	bd80      	pop	{r7, pc}
	...

08016444 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8016444:	b590      	push	{r4, r7, lr}
 8016446:	b087      	sub	sp, #28
 8016448:	af00      	add	r7, sp, #0
 801644a:	6078      	str	r0, [r7, #4]
 801644c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801644e:	683b      	ldr	r3, [r7, #0]
 8016450:	331a      	adds	r3, #26
 8016452:	4618      	mov	r0, r3
 8016454:	f7fe fb60 	bl	8014b18 <ld_word>
 8016458:	4603      	mov	r3, r0
 801645a:	2b00      	cmp	r3, #0
 801645c:	d001      	beq.n	8016462 <cmp_lfn+0x1e>
 801645e:	2300      	movs	r3, #0
 8016460:	e059      	b.n	8016516 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8016462:	683b      	ldr	r3, [r7, #0]
 8016464:	781b      	ldrb	r3, [r3, #0]
 8016466:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801646a:	1e5a      	subs	r2, r3, #1
 801646c:	4613      	mov	r3, r2
 801646e:	005b      	lsls	r3, r3, #1
 8016470:	4413      	add	r3, r2
 8016472:	009b      	lsls	r3, r3, #2
 8016474:	4413      	add	r3, r2
 8016476:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8016478:	2301      	movs	r3, #1
 801647a:	81fb      	strh	r3, [r7, #14]
 801647c:	2300      	movs	r3, #0
 801647e:	613b      	str	r3, [r7, #16]
 8016480:	e033      	b.n	80164ea <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8016482:	4a27      	ldr	r2, [pc, #156]	; (8016520 <cmp_lfn+0xdc>)
 8016484:	693b      	ldr	r3, [r7, #16]
 8016486:	4413      	add	r3, r2
 8016488:	781b      	ldrb	r3, [r3, #0]
 801648a:	461a      	mov	r2, r3
 801648c:	683b      	ldr	r3, [r7, #0]
 801648e:	4413      	add	r3, r2
 8016490:	4618      	mov	r0, r3
 8016492:	f7fe fb41 	bl	8014b18 <ld_word>
 8016496:	4603      	mov	r3, r0
 8016498:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801649a:	89fb      	ldrh	r3, [r7, #14]
 801649c:	2b00      	cmp	r3, #0
 801649e:	d01a      	beq.n	80164d6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80164a0:	697b      	ldr	r3, [r7, #20]
 80164a2:	2bfe      	cmp	r3, #254	; 0xfe
 80164a4:	d812      	bhi.n	80164cc <cmp_lfn+0x88>
 80164a6:	89bb      	ldrh	r3, [r7, #12]
 80164a8:	4618      	mov	r0, r3
 80164aa:	f003 fc67 	bl	8019d7c <ff_wtoupper>
 80164ae:	4603      	mov	r3, r0
 80164b0:	461c      	mov	r4, r3
 80164b2:	697b      	ldr	r3, [r7, #20]
 80164b4:	1c5a      	adds	r2, r3, #1
 80164b6:	617a      	str	r2, [r7, #20]
 80164b8:	005b      	lsls	r3, r3, #1
 80164ba:	687a      	ldr	r2, [r7, #4]
 80164bc:	4413      	add	r3, r2
 80164be:	881b      	ldrh	r3, [r3, #0]
 80164c0:	4618      	mov	r0, r3
 80164c2:	f003 fc5b 	bl	8019d7c <ff_wtoupper>
 80164c6:	4603      	mov	r3, r0
 80164c8:	429c      	cmp	r4, r3
 80164ca:	d001      	beq.n	80164d0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80164cc:	2300      	movs	r3, #0
 80164ce:	e022      	b.n	8016516 <cmp_lfn+0xd2>
			}
			wc = uc;
 80164d0:	89bb      	ldrh	r3, [r7, #12]
 80164d2:	81fb      	strh	r3, [r7, #14]
 80164d4:	e006      	b.n	80164e4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80164d6:	89bb      	ldrh	r3, [r7, #12]
 80164d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80164dc:	4293      	cmp	r3, r2
 80164de:	d001      	beq.n	80164e4 <cmp_lfn+0xa0>
 80164e0:	2300      	movs	r3, #0
 80164e2:	e018      	b.n	8016516 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80164e4:	693b      	ldr	r3, [r7, #16]
 80164e6:	3301      	adds	r3, #1
 80164e8:	613b      	str	r3, [r7, #16]
 80164ea:	693b      	ldr	r3, [r7, #16]
 80164ec:	2b0c      	cmp	r3, #12
 80164ee:	d9c8      	bls.n	8016482 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80164f0:	683b      	ldr	r3, [r7, #0]
 80164f2:	781b      	ldrb	r3, [r3, #0]
 80164f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d00b      	beq.n	8016514 <cmp_lfn+0xd0>
 80164fc:	89fb      	ldrh	r3, [r7, #14]
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d008      	beq.n	8016514 <cmp_lfn+0xd0>
 8016502:	697b      	ldr	r3, [r7, #20]
 8016504:	005b      	lsls	r3, r3, #1
 8016506:	687a      	ldr	r2, [r7, #4]
 8016508:	4413      	add	r3, r2
 801650a:	881b      	ldrh	r3, [r3, #0]
 801650c:	2b00      	cmp	r3, #0
 801650e:	d001      	beq.n	8016514 <cmp_lfn+0xd0>
 8016510:	2300      	movs	r3, #0
 8016512:	e000      	b.n	8016516 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8016514:	2301      	movs	r3, #1
}
 8016516:	4618      	mov	r0, r3
 8016518:	371c      	adds	r7, #28
 801651a:	46bd      	mov	sp, r7
 801651c:	bd90      	pop	{r4, r7, pc}
 801651e:	bf00      	nop
 8016520:	0801acc0 	.word	0x0801acc0

08016524 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8016524:	b580      	push	{r7, lr}
 8016526:	b086      	sub	sp, #24
 8016528:	af00      	add	r7, sp, #0
 801652a:	6078      	str	r0, [r7, #4]
 801652c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 801652e:	683b      	ldr	r3, [r7, #0]
 8016530:	331a      	adds	r3, #26
 8016532:	4618      	mov	r0, r3
 8016534:	f7fe faf0 	bl	8014b18 <ld_word>
 8016538:	4603      	mov	r3, r0
 801653a:	2b00      	cmp	r3, #0
 801653c:	d001      	beq.n	8016542 <pick_lfn+0x1e>
 801653e:	2300      	movs	r3, #0
 8016540:	e04d      	b.n	80165de <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8016542:	683b      	ldr	r3, [r7, #0]
 8016544:	781b      	ldrb	r3, [r3, #0]
 8016546:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801654a:	1e5a      	subs	r2, r3, #1
 801654c:	4613      	mov	r3, r2
 801654e:	005b      	lsls	r3, r3, #1
 8016550:	4413      	add	r3, r2
 8016552:	009b      	lsls	r3, r3, #2
 8016554:	4413      	add	r3, r2
 8016556:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8016558:	2301      	movs	r3, #1
 801655a:	81fb      	strh	r3, [r7, #14]
 801655c:	2300      	movs	r3, #0
 801655e:	613b      	str	r3, [r7, #16]
 8016560:	e028      	b.n	80165b4 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8016562:	4a21      	ldr	r2, [pc, #132]	; (80165e8 <pick_lfn+0xc4>)
 8016564:	693b      	ldr	r3, [r7, #16]
 8016566:	4413      	add	r3, r2
 8016568:	781b      	ldrb	r3, [r3, #0]
 801656a:	461a      	mov	r2, r3
 801656c:	683b      	ldr	r3, [r7, #0]
 801656e:	4413      	add	r3, r2
 8016570:	4618      	mov	r0, r3
 8016572:	f7fe fad1 	bl	8014b18 <ld_word>
 8016576:	4603      	mov	r3, r0
 8016578:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801657a:	89fb      	ldrh	r3, [r7, #14]
 801657c:	2b00      	cmp	r3, #0
 801657e:	d00f      	beq.n	80165a0 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8016580:	697b      	ldr	r3, [r7, #20]
 8016582:	2bfe      	cmp	r3, #254	; 0xfe
 8016584:	d901      	bls.n	801658a <pick_lfn+0x66>
 8016586:	2300      	movs	r3, #0
 8016588:	e029      	b.n	80165de <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801658a:	89bb      	ldrh	r3, [r7, #12]
 801658c:	81fb      	strh	r3, [r7, #14]
 801658e:	697b      	ldr	r3, [r7, #20]
 8016590:	1c5a      	adds	r2, r3, #1
 8016592:	617a      	str	r2, [r7, #20]
 8016594:	005b      	lsls	r3, r3, #1
 8016596:	687a      	ldr	r2, [r7, #4]
 8016598:	4413      	add	r3, r2
 801659a:	89fa      	ldrh	r2, [r7, #14]
 801659c:	801a      	strh	r2, [r3, #0]
 801659e:	e006      	b.n	80165ae <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80165a0:	89bb      	ldrh	r3, [r7, #12]
 80165a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80165a6:	4293      	cmp	r3, r2
 80165a8:	d001      	beq.n	80165ae <pick_lfn+0x8a>
 80165aa:	2300      	movs	r3, #0
 80165ac:	e017      	b.n	80165de <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80165ae:	693b      	ldr	r3, [r7, #16]
 80165b0:	3301      	adds	r3, #1
 80165b2:	613b      	str	r3, [r7, #16]
 80165b4:	693b      	ldr	r3, [r7, #16]
 80165b6:	2b0c      	cmp	r3, #12
 80165b8:	d9d3      	bls.n	8016562 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80165ba:	683b      	ldr	r3, [r7, #0]
 80165bc:	781b      	ldrb	r3, [r3, #0]
 80165be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d00a      	beq.n	80165dc <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80165c6:	697b      	ldr	r3, [r7, #20]
 80165c8:	2bfe      	cmp	r3, #254	; 0xfe
 80165ca:	d901      	bls.n	80165d0 <pick_lfn+0xac>
 80165cc:	2300      	movs	r3, #0
 80165ce:	e006      	b.n	80165de <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80165d0:	697b      	ldr	r3, [r7, #20]
 80165d2:	005b      	lsls	r3, r3, #1
 80165d4:	687a      	ldr	r2, [r7, #4]
 80165d6:	4413      	add	r3, r2
 80165d8:	2200      	movs	r2, #0
 80165da:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80165dc:	2301      	movs	r3, #1
}
 80165de:	4618      	mov	r0, r3
 80165e0:	3718      	adds	r7, #24
 80165e2:	46bd      	mov	sp, r7
 80165e4:	bd80      	pop	{r7, pc}
 80165e6:	bf00      	nop
 80165e8:	0801acc0 	.word	0x0801acc0

080165ec <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80165ec:	b580      	push	{r7, lr}
 80165ee:	b088      	sub	sp, #32
 80165f0:	af00      	add	r7, sp, #0
 80165f2:	60f8      	str	r0, [r7, #12]
 80165f4:	60b9      	str	r1, [r7, #8]
 80165f6:	4611      	mov	r1, r2
 80165f8:	461a      	mov	r2, r3
 80165fa:	460b      	mov	r3, r1
 80165fc:	71fb      	strb	r3, [r7, #7]
 80165fe:	4613      	mov	r3, r2
 8016600:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8016602:	68bb      	ldr	r3, [r7, #8]
 8016604:	330d      	adds	r3, #13
 8016606:	79ba      	ldrb	r2, [r7, #6]
 8016608:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801660a:	68bb      	ldr	r3, [r7, #8]
 801660c:	330b      	adds	r3, #11
 801660e:	220f      	movs	r2, #15
 8016610:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8016612:	68bb      	ldr	r3, [r7, #8]
 8016614:	330c      	adds	r3, #12
 8016616:	2200      	movs	r2, #0
 8016618:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801661a:	68bb      	ldr	r3, [r7, #8]
 801661c:	331a      	adds	r3, #26
 801661e:	2100      	movs	r1, #0
 8016620:	4618      	mov	r0, r3
 8016622:	f7fe fb71 	bl	8014d08 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8016626:	79fb      	ldrb	r3, [r7, #7]
 8016628:	1e5a      	subs	r2, r3, #1
 801662a:	4613      	mov	r3, r2
 801662c:	005b      	lsls	r3, r3, #1
 801662e:	4413      	add	r3, r2
 8016630:	009b      	lsls	r3, r3, #2
 8016632:	4413      	add	r3, r2
 8016634:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8016636:	2300      	movs	r3, #0
 8016638:	82fb      	strh	r3, [r7, #22]
 801663a:	2300      	movs	r3, #0
 801663c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801663e:	8afb      	ldrh	r3, [r7, #22]
 8016640:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016644:	4293      	cmp	r3, r2
 8016646:	d007      	beq.n	8016658 <put_lfn+0x6c>
 8016648:	69fb      	ldr	r3, [r7, #28]
 801664a:	1c5a      	adds	r2, r3, #1
 801664c:	61fa      	str	r2, [r7, #28]
 801664e:	005b      	lsls	r3, r3, #1
 8016650:	68fa      	ldr	r2, [r7, #12]
 8016652:	4413      	add	r3, r2
 8016654:	881b      	ldrh	r3, [r3, #0]
 8016656:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8016658:	4a17      	ldr	r2, [pc, #92]	; (80166b8 <put_lfn+0xcc>)
 801665a:	69bb      	ldr	r3, [r7, #24]
 801665c:	4413      	add	r3, r2
 801665e:	781b      	ldrb	r3, [r3, #0]
 8016660:	461a      	mov	r2, r3
 8016662:	68bb      	ldr	r3, [r7, #8]
 8016664:	4413      	add	r3, r2
 8016666:	8afa      	ldrh	r2, [r7, #22]
 8016668:	4611      	mov	r1, r2
 801666a:	4618      	mov	r0, r3
 801666c:	f7fe fb4c 	bl	8014d08 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8016670:	8afb      	ldrh	r3, [r7, #22]
 8016672:	2b00      	cmp	r3, #0
 8016674:	d102      	bne.n	801667c <put_lfn+0x90>
 8016676:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801667a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801667c:	69bb      	ldr	r3, [r7, #24]
 801667e:	3301      	adds	r3, #1
 8016680:	61bb      	str	r3, [r7, #24]
 8016682:	69bb      	ldr	r3, [r7, #24]
 8016684:	2b0c      	cmp	r3, #12
 8016686:	d9da      	bls.n	801663e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8016688:	8afb      	ldrh	r3, [r7, #22]
 801668a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801668e:	4293      	cmp	r3, r2
 8016690:	d006      	beq.n	80166a0 <put_lfn+0xb4>
 8016692:	69fb      	ldr	r3, [r7, #28]
 8016694:	005b      	lsls	r3, r3, #1
 8016696:	68fa      	ldr	r2, [r7, #12]
 8016698:	4413      	add	r3, r2
 801669a:	881b      	ldrh	r3, [r3, #0]
 801669c:	2b00      	cmp	r3, #0
 801669e:	d103      	bne.n	80166a8 <put_lfn+0xbc>
 80166a0:	79fb      	ldrb	r3, [r7, #7]
 80166a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80166a6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80166a8:	68bb      	ldr	r3, [r7, #8]
 80166aa:	79fa      	ldrb	r2, [r7, #7]
 80166ac:	701a      	strb	r2, [r3, #0]
}
 80166ae:	bf00      	nop
 80166b0:	3720      	adds	r7, #32
 80166b2:	46bd      	mov	sp, r7
 80166b4:	bd80      	pop	{r7, pc}
 80166b6:	bf00      	nop
 80166b8:	0801acc0 	.word	0x0801acc0

080166bc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80166bc:	b580      	push	{r7, lr}
 80166be:	b08c      	sub	sp, #48	; 0x30
 80166c0:	af00      	add	r7, sp, #0
 80166c2:	60f8      	str	r0, [r7, #12]
 80166c4:	60b9      	str	r1, [r7, #8]
 80166c6:	607a      	str	r2, [r7, #4]
 80166c8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80166ca:	220b      	movs	r2, #11
 80166cc:	68b9      	ldr	r1, [r7, #8]
 80166ce:	68f8      	ldr	r0, [r7, #12]
 80166d0:	f7fe fbe8 	bl	8014ea4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80166d4:	683b      	ldr	r3, [r7, #0]
 80166d6:	2b05      	cmp	r3, #5
 80166d8:	d929      	bls.n	801672e <gen_numname+0x72>
		sr = seq;
 80166da:	683b      	ldr	r3, [r7, #0]
 80166dc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80166de:	e020      	b.n	8016722 <gen_numname+0x66>
			wc = *lfn++;
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	1c9a      	adds	r2, r3, #2
 80166e4:	607a      	str	r2, [r7, #4]
 80166e6:	881b      	ldrh	r3, [r3, #0]
 80166e8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80166ea:	2300      	movs	r3, #0
 80166ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80166ee:	e015      	b.n	801671c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 80166f0:	69fb      	ldr	r3, [r7, #28]
 80166f2:	005a      	lsls	r2, r3, #1
 80166f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80166f6:	f003 0301 	and.w	r3, r3, #1
 80166fa:	4413      	add	r3, r2
 80166fc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80166fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016700:	085b      	lsrs	r3, r3, #1
 8016702:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8016704:	69fb      	ldr	r3, [r7, #28]
 8016706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801670a:	2b00      	cmp	r3, #0
 801670c:	d003      	beq.n	8016716 <gen_numname+0x5a>
 801670e:	69fa      	ldr	r2, [r7, #28]
 8016710:	4b31      	ldr	r3, [pc, #196]	; (80167d8 <gen_numname+0x11c>)
 8016712:	4053      	eors	r3, r2
 8016714:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8016716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016718:	3301      	adds	r3, #1
 801671a:	62bb      	str	r3, [r7, #40]	; 0x28
 801671c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801671e:	2b0f      	cmp	r3, #15
 8016720:	d9e6      	bls.n	80166f0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	881b      	ldrh	r3, [r3, #0]
 8016726:	2b00      	cmp	r3, #0
 8016728:	d1da      	bne.n	80166e0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801672a:	69fb      	ldr	r3, [r7, #28]
 801672c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801672e:	2307      	movs	r3, #7
 8016730:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8016732:	683b      	ldr	r3, [r7, #0]
 8016734:	b2db      	uxtb	r3, r3
 8016736:	f003 030f 	and.w	r3, r3, #15
 801673a:	b2db      	uxtb	r3, r3
 801673c:	3330      	adds	r3, #48	; 0x30
 801673e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8016742:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016746:	2b39      	cmp	r3, #57	; 0x39
 8016748:	d904      	bls.n	8016754 <gen_numname+0x98>
 801674a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801674e:	3307      	adds	r3, #7
 8016750:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8016754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016756:	1e5a      	subs	r2, r3, #1
 8016758:	62ba      	str	r2, [r7, #40]	; 0x28
 801675a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801675e:	4413      	add	r3, r2
 8016760:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8016764:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8016768:	683b      	ldr	r3, [r7, #0]
 801676a:	091b      	lsrs	r3, r3, #4
 801676c:	603b      	str	r3, [r7, #0]
	} while (seq);
 801676e:	683b      	ldr	r3, [r7, #0]
 8016770:	2b00      	cmp	r3, #0
 8016772:	d1de      	bne.n	8016732 <gen_numname+0x76>
	ns[i] = '~';
 8016774:	f107 0214 	add.w	r2, r7, #20
 8016778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801677a:	4413      	add	r3, r2
 801677c:	227e      	movs	r2, #126	; 0x7e
 801677e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8016780:	2300      	movs	r3, #0
 8016782:	627b      	str	r3, [r7, #36]	; 0x24
 8016784:	e002      	b.n	801678c <gen_numname+0xd0>
 8016786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016788:	3301      	adds	r3, #1
 801678a:	627b      	str	r3, [r7, #36]	; 0x24
 801678c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801678e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016790:	429a      	cmp	r2, r3
 8016792:	d205      	bcs.n	80167a0 <gen_numname+0xe4>
 8016794:	68fa      	ldr	r2, [r7, #12]
 8016796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016798:	4413      	add	r3, r2
 801679a:	781b      	ldrb	r3, [r3, #0]
 801679c:	2b20      	cmp	r3, #32
 801679e:	d1f2      	bne.n	8016786 <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80167a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167a2:	2b07      	cmp	r3, #7
 80167a4:	d808      	bhi.n	80167b8 <gen_numname+0xfc>
 80167a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167a8:	1c5a      	adds	r2, r3, #1
 80167aa:	62ba      	str	r2, [r7, #40]	; 0x28
 80167ac:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80167b0:	4413      	add	r3, r2
 80167b2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80167b6:	e000      	b.n	80167ba <gen_numname+0xfe>
 80167b8:	2120      	movs	r1, #32
 80167ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167bc:	1c5a      	adds	r2, r3, #1
 80167be:	627a      	str	r2, [r7, #36]	; 0x24
 80167c0:	68fa      	ldr	r2, [r7, #12]
 80167c2:	4413      	add	r3, r2
 80167c4:	460a      	mov	r2, r1
 80167c6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80167c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167ca:	2b07      	cmp	r3, #7
 80167cc:	d9e8      	bls.n	80167a0 <gen_numname+0xe4>
}
 80167ce:	bf00      	nop
 80167d0:	3730      	adds	r7, #48	; 0x30
 80167d2:	46bd      	mov	sp, r7
 80167d4:	bd80      	pop	{r7, pc}
 80167d6:	bf00      	nop
 80167d8:	00011021 	.word	0x00011021

080167dc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80167dc:	b480      	push	{r7}
 80167de:	b085      	sub	sp, #20
 80167e0:	af00      	add	r7, sp, #0
 80167e2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80167e4:	2300      	movs	r3, #0
 80167e6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80167e8:	230b      	movs	r3, #11
 80167ea:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80167ec:	7bfb      	ldrb	r3, [r7, #15]
 80167ee:	b2da      	uxtb	r2, r3
 80167f0:	0852      	lsrs	r2, r2, #1
 80167f2:	01db      	lsls	r3, r3, #7
 80167f4:	4313      	orrs	r3, r2
 80167f6:	b2da      	uxtb	r2, r3
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	1c59      	adds	r1, r3, #1
 80167fc:	6079      	str	r1, [r7, #4]
 80167fe:	781b      	ldrb	r3, [r3, #0]
 8016800:	4413      	add	r3, r2
 8016802:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8016804:	68bb      	ldr	r3, [r7, #8]
 8016806:	3b01      	subs	r3, #1
 8016808:	60bb      	str	r3, [r7, #8]
 801680a:	68bb      	ldr	r3, [r7, #8]
 801680c:	2b00      	cmp	r3, #0
 801680e:	d1ed      	bne.n	80167ec <sum_sfn+0x10>
	return sum;
 8016810:	7bfb      	ldrb	r3, [r7, #15]
}
 8016812:	4618      	mov	r0, r3
 8016814:	3714      	adds	r7, #20
 8016816:	46bd      	mov	sp, r7
 8016818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801681c:	4770      	bx	lr

0801681e <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 801681e:	b480      	push	{r7}
 8016820:	b087      	sub	sp, #28
 8016822:	af00      	add	r7, sp, #0
 8016824:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	3301      	adds	r3, #1
 801682a:	781b      	ldrb	r3, [r3, #0]
 801682c:	3301      	adds	r3, #1
 801682e:	015b      	lsls	r3, r3, #5
 8016830:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 8016832:	2300      	movs	r3, #0
 8016834:	827b      	strh	r3, [r7, #18]
 8016836:	2300      	movs	r3, #0
 8016838:	617b      	str	r3, [r7, #20]
 801683a:	e018      	b.n	801686e <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 801683c:	697b      	ldr	r3, [r7, #20]
 801683e:	2b02      	cmp	r3, #2
 8016840:	d103      	bne.n	801684a <xdir_sum+0x2c>
			i++;
 8016842:	697b      	ldr	r3, [r7, #20]
 8016844:	3301      	adds	r3, #1
 8016846:	617b      	str	r3, [r7, #20]
 8016848:	e00e      	b.n	8016868 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 801684a:	8a7b      	ldrh	r3, [r7, #18]
 801684c:	03db      	lsls	r3, r3, #15
 801684e:	b29a      	uxth	r2, r3
 8016850:	8a7b      	ldrh	r3, [r7, #18]
 8016852:	085b      	lsrs	r3, r3, #1
 8016854:	b29b      	uxth	r3, r3
 8016856:	4413      	add	r3, r2
 8016858:	b29a      	uxth	r2, r3
 801685a:	6879      	ldr	r1, [r7, #4]
 801685c:	697b      	ldr	r3, [r7, #20]
 801685e:	440b      	add	r3, r1
 8016860:	781b      	ldrb	r3, [r3, #0]
 8016862:	b29b      	uxth	r3, r3
 8016864:	4413      	add	r3, r2
 8016866:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 8016868:	697b      	ldr	r3, [r7, #20]
 801686a:	3301      	adds	r3, #1
 801686c:	617b      	str	r3, [r7, #20]
 801686e:	697a      	ldr	r2, [r7, #20]
 8016870:	68fb      	ldr	r3, [r7, #12]
 8016872:	429a      	cmp	r2, r3
 8016874:	d3e2      	bcc.n	801683c <xdir_sum+0x1e>
		}
	}
	return sum;
 8016876:	8a7b      	ldrh	r3, [r7, #18]
}
 8016878:	4618      	mov	r0, r3
 801687a:	371c      	adds	r7, #28
 801687c:	46bd      	mov	sp, r7
 801687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016882:	4770      	bx	lr

08016884 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 8016884:	b580      	push	{r7, lr}
 8016886:	b084      	sub	sp, #16
 8016888:	af00      	add	r7, sp, #0
 801688a:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 801688c:	2300      	movs	r3, #0
 801688e:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 8016890:	e01f      	b.n	80168d2 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 8016892:	89bb      	ldrh	r3, [r7, #12]
 8016894:	4618      	mov	r0, r3
 8016896:	f003 fa71 	bl	8019d7c <ff_wtoupper>
 801689a:	4603      	mov	r3, r0
 801689c:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 801689e:	89fb      	ldrh	r3, [r7, #14]
 80168a0:	03db      	lsls	r3, r3, #15
 80168a2:	b29a      	uxth	r2, r3
 80168a4:	89fb      	ldrh	r3, [r7, #14]
 80168a6:	085b      	lsrs	r3, r3, #1
 80168a8:	b29b      	uxth	r3, r3
 80168aa:	4413      	add	r3, r2
 80168ac:	b29a      	uxth	r2, r3
 80168ae:	89bb      	ldrh	r3, [r7, #12]
 80168b0:	b2db      	uxtb	r3, r3
 80168b2:	b29b      	uxth	r3, r3
 80168b4:	4413      	add	r3, r2
 80168b6:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 80168b8:	89fb      	ldrh	r3, [r7, #14]
 80168ba:	03db      	lsls	r3, r3, #15
 80168bc:	b29a      	uxth	r2, r3
 80168be:	89fb      	ldrh	r3, [r7, #14]
 80168c0:	085b      	lsrs	r3, r3, #1
 80168c2:	b29b      	uxth	r3, r3
 80168c4:	4413      	add	r3, r2
 80168c6:	b29a      	uxth	r2, r3
 80168c8:	89bb      	ldrh	r3, [r7, #12]
 80168ca:	0a1b      	lsrs	r3, r3, #8
 80168cc:	b29b      	uxth	r3, r3
 80168ce:	4413      	add	r3, r2
 80168d0:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	1c9a      	adds	r2, r3, #2
 80168d6:	607a      	str	r2, [r7, #4]
 80168d8:	881b      	ldrh	r3, [r3, #0]
 80168da:	81bb      	strh	r3, [r7, #12]
 80168dc:	89bb      	ldrh	r3, [r7, #12]
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d1d7      	bne.n	8016892 <xname_sum+0xe>
	}
	return sum;
 80168e2:	89fb      	ldrh	r3, [r7, #14]
}
 80168e4:	4618      	mov	r0, r3
 80168e6:	3710      	adds	r7, #16
 80168e8:	46bd      	mov	sp, r7
 80168ea:	bd80      	pop	{r7, pc}

080168ec <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 80168ec:	b590      	push	{r4, r7, lr}
 80168ee:	b087      	sub	sp, #28
 80168f0:	af00      	add	r7, sp, #0
 80168f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	681b      	ldr	r3, [r3, #0]
 80168f8:	695b      	ldr	r3, [r3, #20]
 80168fa:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	681a      	ldr	r2, [r3, #0]
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016904:	4619      	mov	r1, r3
 8016906:	4610      	mov	r0, r2
 8016908:	f7fe fcfa 	bl	8015300 <move_window>
 801690c:	4603      	mov	r3, r0
 801690e:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8016910:	7bfb      	ldrb	r3, [r7, #15]
 8016912:	2b00      	cmp	r3, #0
 8016914:	d001      	beq.n	801691a <load_xdir+0x2e>
 8016916:	7bfb      	ldrb	r3, [r7, #15]
 8016918:	e09f      	b.n	8016a5a <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801691e:	781b      	ldrb	r3, [r3, #0]
 8016920:	2b85      	cmp	r3, #133	; 0x85
 8016922:	d001      	beq.n	8016928 <load_xdir+0x3c>
 8016924:	2302      	movs	r3, #2
 8016926:	e098      	b.n	8016a5a <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801692c:	2220      	movs	r2, #32
 801692e:	4619      	mov	r1, r3
 8016930:	6938      	ldr	r0, [r7, #16]
 8016932:	f7fe fab7 	bl	8014ea4 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 8016936:	693b      	ldr	r3, [r7, #16]
 8016938:	3301      	adds	r3, #1
 801693a:	781b      	ldrb	r3, [r3, #0]
 801693c:	3301      	adds	r3, #1
 801693e:	015b      	lsls	r3, r3, #5
 8016940:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 8016942:	68bb      	ldr	r3, [r7, #8]
 8016944:	2b5f      	cmp	r3, #95	; 0x5f
 8016946:	d903      	bls.n	8016950 <load_xdir+0x64>
 8016948:	68bb      	ldr	r3, [r7, #8]
 801694a:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 801694e:	d901      	bls.n	8016954 <load_xdir+0x68>
 8016950:	2302      	movs	r3, #2
 8016952:	e082      	b.n	8016a5a <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 8016954:	2100      	movs	r1, #0
 8016956:	6878      	ldr	r0, [r7, #4]
 8016958:	f7ff fbf2 	bl	8016140 <dir_next>
 801695c:	4603      	mov	r3, r0
 801695e:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8016960:	7bfb      	ldrb	r3, [r7, #15]
 8016962:	2b00      	cmp	r3, #0
 8016964:	d001      	beq.n	801696a <load_xdir+0x7e>
 8016966:	7bfb      	ldrb	r3, [r7, #15]
 8016968:	e077      	b.n	8016a5a <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	681a      	ldr	r2, [r3, #0]
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016972:	4619      	mov	r1, r3
 8016974:	4610      	mov	r0, r2
 8016976:	f7fe fcc3 	bl	8015300 <move_window>
 801697a:	4603      	mov	r3, r0
 801697c:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 801697e:	7bfb      	ldrb	r3, [r7, #15]
 8016980:	2b00      	cmp	r3, #0
 8016982:	d001      	beq.n	8016988 <load_xdir+0x9c>
 8016984:	7bfb      	ldrb	r3, [r7, #15]
 8016986:	e068      	b.n	8016a5a <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801698c:	781b      	ldrb	r3, [r3, #0]
 801698e:	2bc0      	cmp	r3, #192	; 0xc0
 8016990:	d001      	beq.n	8016996 <load_xdir+0xaa>
 8016992:	2302      	movs	r3, #2
 8016994:	e061      	b.n	8016a5a <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 8016996:	693b      	ldr	r3, [r7, #16]
 8016998:	f103 0020 	add.w	r0, r3, #32
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80169a0:	2220      	movs	r2, #32
 80169a2:	4619      	mov	r1, r3
 80169a4:	f7fe fa7e 	bl	8014ea4 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 80169a8:	693b      	ldr	r3, [r7, #16]
 80169aa:	3323      	adds	r3, #35	; 0x23
 80169ac:	781b      	ldrb	r3, [r3, #0]
 80169ae:	332c      	adds	r3, #44	; 0x2c
 80169b0:	4a2c      	ldr	r2, [pc, #176]	; (8016a64 <load_xdir+0x178>)
 80169b2:	fba2 2303 	umull	r2, r3, r2, r3
 80169b6:	08db      	lsrs	r3, r3, #3
 80169b8:	015b      	lsls	r3, r3, #5
 80169ba:	68ba      	ldr	r2, [r7, #8]
 80169bc:	429a      	cmp	r2, r3
 80169be:	d201      	bcs.n	80169c4 <load_xdir+0xd8>
 80169c0:	2302      	movs	r3, #2
 80169c2:	e04a      	b.n	8016a5a <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 80169c4:	2340      	movs	r3, #64	; 0x40
 80169c6:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 80169c8:	2100      	movs	r1, #0
 80169ca:	6878      	ldr	r0, [r7, #4]
 80169cc:	f7ff fbb8 	bl	8016140 <dir_next>
 80169d0:	4603      	mov	r3, r0
 80169d2:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 80169d4:	7bfb      	ldrb	r3, [r7, #15]
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d001      	beq.n	80169de <load_xdir+0xf2>
 80169da:	7bfb      	ldrb	r3, [r7, #15]
 80169dc:	e03d      	b.n	8016a5a <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	681a      	ldr	r2, [r3, #0]
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80169e6:	4619      	mov	r1, r3
 80169e8:	4610      	mov	r0, r2
 80169ea:	f7fe fc89 	bl	8015300 <move_window>
 80169ee:	4603      	mov	r3, r0
 80169f0:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 80169f2:	7bfb      	ldrb	r3, [r7, #15]
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d001      	beq.n	80169fc <load_xdir+0x110>
 80169f8:	7bfb      	ldrb	r3, [r7, #15]
 80169fa:	e02e      	b.n	8016a5a <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016a00:	781b      	ldrb	r3, [r3, #0]
 8016a02:	2bc1      	cmp	r3, #193	; 0xc1
 8016a04:	d001      	beq.n	8016a0a <load_xdir+0x11e>
 8016a06:	2302      	movs	r3, #2
 8016a08:	e027      	b.n	8016a5a <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 8016a0a:	697b      	ldr	r3, [r7, #20]
 8016a0c:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8016a10:	d208      	bcs.n	8016a24 <load_xdir+0x138>
 8016a12:	693a      	ldr	r2, [r7, #16]
 8016a14:	697b      	ldr	r3, [r7, #20]
 8016a16:	18d0      	adds	r0, r2, r3
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016a1c:	2220      	movs	r2, #32
 8016a1e:	4619      	mov	r1, r3
 8016a20:	f7fe fa40 	bl	8014ea4 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 8016a24:	697b      	ldr	r3, [r7, #20]
 8016a26:	3320      	adds	r3, #32
 8016a28:	617b      	str	r3, [r7, #20]
 8016a2a:	697a      	ldr	r2, [r7, #20]
 8016a2c:	68bb      	ldr	r3, [r7, #8]
 8016a2e:	429a      	cmp	r2, r3
 8016a30:	d3ca      	bcc.n	80169c8 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 8016a32:	697b      	ldr	r3, [r7, #20]
 8016a34:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8016a38:	d80e      	bhi.n	8016a58 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8016a3a:	6938      	ldr	r0, [r7, #16]
 8016a3c:	f7ff feef 	bl	801681e <xdir_sum>
 8016a40:	4603      	mov	r3, r0
 8016a42:	461c      	mov	r4, r3
 8016a44:	693b      	ldr	r3, [r7, #16]
 8016a46:	3302      	adds	r3, #2
 8016a48:	4618      	mov	r0, r3
 8016a4a:	f7fe f865 	bl	8014b18 <ld_word>
 8016a4e:	4603      	mov	r3, r0
 8016a50:	429c      	cmp	r4, r3
 8016a52:	d001      	beq.n	8016a58 <load_xdir+0x16c>
 8016a54:	2302      	movs	r3, #2
 8016a56:	e000      	b.n	8016a5a <load_xdir+0x16e>
	}
	return FR_OK;
 8016a58:	2300      	movs	r3, #0
}
 8016a5a:	4618      	mov	r0, r3
 8016a5c:	371c      	adds	r7, #28
 8016a5e:	46bd      	mov	sp, r7
 8016a60:	bd90      	pop	{r4, r7, pc}
 8016a62:	bf00      	nop
 8016a64:	88888889 	.word	0x88888889

08016a68 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 8016a68:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8016a6c:	b084      	sub	sp, #16
 8016a6e:	af00      	add	r7, sp, #0
 8016a70:	6078      	str	r0, [r7, #4]
 8016a72:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 8016a74:	683b      	ldr	r3, [r7, #0]
 8016a76:	681a      	ldr	r2, [r3, #0]
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	601a      	str	r2, [r3, #0]
	dp->obj.sclust = obj->c_scl;
 8016a7c:	683b      	ldr	r3, [r7, #0]
 8016a7e:	6a1a      	ldr	r2, [r3, #32]
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	609a      	str	r2, [r3, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 8016a84:	683b      	ldr	r3, [r7, #0]
 8016a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a88:	b2da      	uxtb	r2, r3
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	71da      	strb	r2, [r3, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8016a8e:	683b      	ldr	r3, [r7, #0]
 8016a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a92:	469b      	mov	fp, r3
 8016a94:	f04f 0c00 	mov.w	ip, #0
 8016a98:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8016a9c:	f04f 0200 	mov.w	r2, #0
 8016aa0:	ea0b 0301 	and.w	r3, fp, r1
 8016aa4:	ea0c 0402 	and.w	r4, ip, r2
 8016aa8:	687a      	ldr	r2, [r7, #4]
 8016aaa:	e9c2 3404 	strd	r3, r4, [r2, #16]
	dp->blk_ofs = obj->c_ofs;
 8016aae:	683b      	ldr	r3, [r7, #0]
 8016ab0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016aba:	4619      	mov	r1, r3
 8016abc:	6878      	ldr	r0, [r7, #4]
 8016abe:	f7ff faab 	bl	8016018 <dir_sdi>
 8016ac2:	4603      	mov	r3, r0
 8016ac4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8016ac6:	7bfb      	ldrb	r3, [r7, #15]
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d104      	bne.n	8016ad6 <load_obj_dir+0x6e>
		res = load_xdir(dp);		/* Load the object's entry block */
 8016acc:	6878      	ldr	r0, [r7, #4]
 8016ace:	f7ff ff0d 	bl	80168ec <load_xdir>
 8016ad2:	4603      	mov	r3, r0
 8016ad4:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 8016ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ad8:	4618      	mov	r0, r3
 8016ada:	3710      	adds	r7, #16
 8016adc:	46bd      	mov	sp, r7
 8016ade:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08016ae2 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 8016ae2:	b590      	push	{r4, r7, lr}
 8016ae4:	b087      	sub	sp, #28
 8016ae6:	af00      	add	r7, sp, #0
 8016ae8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	681b      	ldr	r3, [r3, #0]
 8016aee:	695b      	ldr	r3, [r3, #20]
 8016af0:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 8016af2:	68fb      	ldr	r3, [r7, #12]
 8016af4:	1c9c      	adds	r4, r3, #2
 8016af6:	68f8      	ldr	r0, [r7, #12]
 8016af8:	f7ff fe91 	bl	801681e <xdir_sum>
 8016afc:	4603      	mov	r3, r0
 8016afe:	4619      	mov	r1, r3
 8016b00:	4620      	mov	r0, r4
 8016b02:	f7fe f901 	bl	8014d08 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 8016b06:	68fb      	ldr	r3, [r7, #12]
 8016b08:	3301      	adds	r3, #1
 8016b0a:	781b      	ldrb	r3, [r3, #0]
 8016b0c:	3301      	adds	r3, #1
 8016b0e:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016b14:	4619      	mov	r1, r3
 8016b16:	6878      	ldr	r0, [r7, #4]
 8016b18:	f7ff fa7e 	bl	8016018 <dir_sdi>
 8016b1c:	4603      	mov	r3, r0
 8016b1e:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8016b20:	e026      	b.n	8016b70 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	681a      	ldr	r2, [r3, #0]
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016b2a:	4619      	mov	r1, r3
 8016b2c:	4610      	mov	r0, r2
 8016b2e:	f7fe fbe7 	bl	8015300 <move_window>
 8016b32:	4603      	mov	r3, r0
 8016b34:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8016b36:	7dfb      	ldrb	r3, [r7, #23]
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d11d      	bne.n	8016b78 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016b40:	2220      	movs	r2, #32
 8016b42:	68f9      	ldr	r1, [r7, #12]
 8016b44:	4618      	mov	r0, r3
 8016b46:	f7fe f9ad 	bl	8014ea4 <mem_cpy>
		dp->obj.fs->wflag = 1;
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	681b      	ldr	r3, [r3, #0]
 8016b4e:	2201      	movs	r2, #1
 8016b50:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 8016b52:	693b      	ldr	r3, [r7, #16]
 8016b54:	3b01      	subs	r3, #1
 8016b56:	613b      	str	r3, [r7, #16]
 8016b58:	693b      	ldr	r3, [r7, #16]
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d00e      	beq.n	8016b7c <store_xdir+0x9a>
		dirb += SZDIRE;
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	3320      	adds	r3, #32
 8016b62:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 8016b64:	2100      	movs	r1, #0
 8016b66:	6878      	ldr	r0, [r7, #4]
 8016b68:	f7ff faea 	bl	8016140 <dir_next>
 8016b6c:	4603      	mov	r3, r0
 8016b6e:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8016b70:	7dfb      	ldrb	r3, [r7, #23]
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d0d5      	beq.n	8016b22 <store_xdir+0x40>
 8016b76:	e002      	b.n	8016b7e <store_xdir+0x9c>
		if (res != FR_OK) break;
 8016b78:	bf00      	nop
 8016b7a:	e000      	b.n	8016b7e <store_xdir+0x9c>
		if (--nent == 0) break;
 8016b7c:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 8016b7e:	7dfb      	ldrb	r3, [r7, #23]
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	d002      	beq.n	8016b8a <store_xdir+0xa8>
 8016b84:	7dfb      	ldrb	r3, [r7, #23]
 8016b86:	2b01      	cmp	r3, #1
 8016b88:	d101      	bne.n	8016b8e <store_xdir+0xac>
 8016b8a:	7dfb      	ldrb	r3, [r7, #23]
 8016b8c:	e000      	b.n	8016b90 <store_xdir+0xae>
 8016b8e:	2302      	movs	r3, #2
}
 8016b90:	4618      	mov	r0, r3
 8016b92:	371c      	adds	r7, #28
 8016b94:	46bd      	mov	sp, r7
 8016b96:	bd90      	pop	{r4, r7, pc}

08016b98 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 8016b98:	b590      	push	{r4, r7, lr}
 8016b9a:	b085      	sub	sp, #20
 8016b9c:	af00      	add	r7, sp, #0
 8016b9e:	6078      	str	r0, [r7, #4]
 8016ba0:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 8016ba2:	2240      	movs	r2, #64	; 0x40
 8016ba4:	2100      	movs	r1, #0
 8016ba6:	6878      	ldr	r0, [r7, #4]
 8016ba8:	f7fe f99d 	bl	8014ee6 <mem_set>
	dirb[XDIR_Type] = 0x85;
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	2285      	movs	r2, #133	; 0x85
 8016bb0:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	3320      	adds	r3, #32
 8016bb6:	22c0      	movs	r2, #192	; 0xc0
 8016bb8:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 8016bba:	2300      	movs	r3, #0
 8016bbc:	72bb      	strb	r3, [r7, #10]
 8016bbe:	2301      	movs	r3, #1
 8016bc0:	72fb      	strb	r3, [r7, #11]
 8016bc2:	2301      	movs	r3, #1
 8016bc4:	813b      	strh	r3, [r7, #8]
 8016bc6:	2340      	movs	r3, #64	; 0x40
 8016bc8:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 8016bca:	68fb      	ldr	r3, [r7, #12]
 8016bcc:	1c5a      	adds	r2, r3, #1
 8016bce:	60fa      	str	r2, [r7, #12]
 8016bd0:	687a      	ldr	r2, [r7, #4]
 8016bd2:	4413      	add	r3, r2
 8016bd4:	22c1      	movs	r2, #193	; 0xc1
 8016bd6:	701a      	strb	r2, [r3, #0]
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	1c5a      	adds	r2, r3, #1
 8016bdc:	60fa      	str	r2, [r7, #12]
 8016bde:	687a      	ldr	r2, [r7, #4]
 8016be0:	4413      	add	r3, r2
 8016be2:	2200      	movs	r2, #0
 8016be4:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 8016be6:	893b      	ldrh	r3, [r7, #8]
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d00b      	beq.n	8016c04 <create_xdir+0x6c>
 8016bec:	7abb      	ldrb	r3, [r7, #10]
 8016bee:	005b      	lsls	r3, r3, #1
 8016bf0:	683a      	ldr	r2, [r7, #0]
 8016bf2:	4413      	add	r3, r2
 8016bf4:	881b      	ldrh	r3, [r3, #0]
 8016bf6:	813b      	strh	r3, [r7, #8]
 8016bf8:	893b      	ldrh	r3, [r7, #8]
 8016bfa:	2b00      	cmp	r3, #0
 8016bfc:	d002      	beq.n	8016c04 <create_xdir+0x6c>
 8016bfe:	7abb      	ldrb	r3, [r7, #10]
 8016c00:	3301      	adds	r3, #1
 8016c02:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 8016c04:	687a      	ldr	r2, [r7, #4]
 8016c06:	68fb      	ldr	r3, [r7, #12]
 8016c08:	4413      	add	r3, r2
 8016c0a:	893a      	ldrh	r2, [r7, #8]
 8016c0c:	4611      	mov	r1, r2
 8016c0e:	4618      	mov	r0, r3
 8016c10:	f7fe f87a 	bl	8014d08 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 8016c14:	68fb      	ldr	r3, [r7, #12]
 8016c16:	3302      	adds	r3, #2
 8016c18:	60fb      	str	r3, [r7, #12]
 8016c1a:	68fb      	ldr	r3, [r7, #12]
 8016c1c:	f003 031f 	and.w	r3, r3, #31
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	d1e0      	bne.n	8016be6 <create_xdir+0x4e>
		nb++;
 8016c24:	7afb      	ldrb	r3, [r7, #11]
 8016c26:	3301      	adds	r3, #1
 8016c28:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 8016c2a:	7abb      	ldrb	r3, [r7, #10]
 8016c2c:	005b      	lsls	r3, r3, #1
 8016c2e:	683a      	ldr	r2, [r7, #0]
 8016c30:	4413      	add	r3, r2
 8016c32:	881b      	ldrh	r3, [r3, #0]
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d1c8      	bne.n	8016bca <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	3323      	adds	r3, #35	; 0x23
 8016c3c:	7aba      	ldrb	r2, [r7, #10]
 8016c3e:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	3301      	adds	r3, #1
 8016c44:	7afa      	ldrb	r2, [r7, #11]
 8016c46:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8016c4e:	6838      	ldr	r0, [r7, #0]
 8016c50:	f7ff fe18 	bl	8016884 <xname_sum>
 8016c54:	4603      	mov	r3, r0
 8016c56:	4619      	mov	r1, r3
 8016c58:	4620      	mov	r0, r4
 8016c5a:	f7fe f855 	bl	8014d08 <st_word>
}
 8016c5e:	bf00      	nop
 8016c60:	3714      	adds	r7, #20
 8016c62:	46bd      	mov	sp, r7
 8016c64:	bd90      	pop	{r4, r7, pc}

08016c66 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8016c66:	b580      	push	{r7, lr}
 8016c68:	b086      	sub	sp, #24
 8016c6a:	af00      	add	r7, sp, #0
 8016c6c:	6078      	str	r0, [r7, #4]
 8016c6e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8016c70:	2304      	movs	r3, #4
 8016c72:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	681b      	ldr	r3, [r3, #0]
 8016c78:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8016c7a:	23ff      	movs	r3, #255	; 0xff
 8016c7c:	757b      	strb	r3, [r7, #21]
 8016c7e:	23ff      	movs	r3, #255	; 0xff
 8016c80:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8016c82:	e09f      	b.n	8016dc4 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c88:	4619      	mov	r1, r3
 8016c8a:	6938      	ldr	r0, [r7, #16]
 8016c8c:	f7fe fb38 	bl	8015300 <move_window>
 8016c90:	4603      	mov	r3, r0
 8016c92:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8016c94:	7dfb      	ldrb	r3, [r7, #23]
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	f040 809a 	bne.w	8016dd0 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016ca0:	781b      	ldrb	r3, [r3, #0]
 8016ca2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8016ca4:	7dbb      	ldrb	r3, [r7, #22]
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d102      	bne.n	8016cb0 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8016caa:	2304      	movs	r3, #4
 8016cac:	75fb      	strb	r3, [r7, #23]
 8016cae:	e096      	b.n	8016dde <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8016cb0:	693b      	ldr	r3, [r7, #16]
 8016cb2:	781b      	ldrb	r3, [r3, #0]
 8016cb4:	2b04      	cmp	r3, #4
 8016cb6:	d118      	bne.n	8016cea <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 8016cb8:	7dbb      	ldrb	r3, [r7, #22]
 8016cba:	2b85      	cmp	r3, #133	; 0x85
 8016cbc:	d179      	bne.n	8016db2 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 8016cc6:	6878      	ldr	r0, [r7, #4]
 8016cc8:	f7ff fe10 	bl	80168ec <load_xdir>
 8016ccc:	4603      	mov	r3, r0
 8016cce:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 8016cd0:	7dfb      	ldrb	r3, [r7, #23]
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d17e      	bne.n	8016dd4 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8016cd6:	693b      	ldr	r3, [r7, #16]
 8016cd8:	695b      	ldr	r3, [r3, #20]
 8016cda:	3304      	adds	r3, #4
 8016cdc:	781b      	ldrb	r3, [r3, #0]
 8016cde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016ce2:	b2da      	uxtb	r2, r3
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	719a      	strb	r2, [r3, #6]
					}
					break;
 8016ce8:	e074      	b.n	8016dd4 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016cee:	330b      	adds	r3, #11
 8016cf0:	781b      	ldrb	r3, [r3, #0]
 8016cf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016cf6:	73fb      	strb	r3, [r7, #15]
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	7bfa      	ldrb	r2, [r7, #15]
 8016cfc:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8016cfe:	7dbb      	ldrb	r3, [r7, #22]
 8016d00:	2be5      	cmp	r3, #229	; 0xe5
 8016d02:	d00e      	beq.n	8016d22 <dir_read+0xbc>
 8016d04:	7dbb      	ldrb	r3, [r7, #22]
 8016d06:	2b2e      	cmp	r3, #46	; 0x2e
 8016d08:	d00b      	beq.n	8016d22 <dir_read+0xbc>
 8016d0a:	7bfb      	ldrb	r3, [r7, #15]
 8016d0c:	f023 0320 	bic.w	r3, r3, #32
 8016d10:	2b08      	cmp	r3, #8
 8016d12:	bf0c      	ite	eq
 8016d14:	2301      	moveq	r3, #1
 8016d16:	2300      	movne	r3, #0
 8016d18:	b2db      	uxtb	r3, r3
 8016d1a:	461a      	mov	r2, r3
 8016d1c:	683b      	ldr	r3, [r7, #0]
 8016d1e:	4293      	cmp	r3, r2
 8016d20:	d002      	beq.n	8016d28 <dir_read+0xc2>
				ord = 0xFF;
 8016d22:	23ff      	movs	r3, #255	; 0xff
 8016d24:	757b      	strb	r3, [r7, #21]
 8016d26:	e044      	b.n	8016db2 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8016d28:	7bfb      	ldrb	r3, [r7, #15]
 8016d2a:	2b0f      	cmp	r3, #15
 8016d2c:	d12f      	bne.n	8016d8e <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8016d2e:	7dbb      	ldrb	r3, [r7, #22]
 8016d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	d00d      	beq.n	8016d54 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016d3c:	7b5b      	ldrb	r3, [r3, #13]
 8016d3e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8016d40:	7dbb      	ldrb	r3, [r7, #22]
 8016d42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016d46:	75bb      	strb	r3, [r7, #22]
 8016d48:	7dbb      	ldrb	r3, [r7, #22]
 8016d4a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8016d54:	7dba      	ldrb	r2, [r7, #22]
 8016d56:	7d7b      	ldrb	r3, [r7, #21]
 8016d58:	429a      	cmp	r2, r3
 8016d5a:	d115      	bne.n	8016d88 <dir_read+0x122>
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016d60:	330d      	adds	r3, #13
 8016d62:	781b      	ldrb	r3, [r3, #0]
 8016d64:	7d3a      	ldrb	r2, [r7, #20]
 8016d66:	429a      	cmp	r2, r3
 8016d68:	d10e      	bne.n	8016d88 <dir_read+0x122>
 8016d6a:	693b      	ldr	r3, [r7, #16]
 8016d6c:	691a      	ldr	r2, [r3, #16]
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016d72:	4619      	mov	r1, r3
 8016d74:	4610      	mov	r0, r2
 8016d76:	f7ff fbd5 	bl	8016524 <pick_lfn>
 8016d7a:	4603      	mov	r3, r0
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d003      	beq.n	8016d88 <dir_read+0x122>
 8016d80:	7d7b      	ldrb	r3, [r7, #21]
 8016d82:	3b01      	subs	r3, #1
 8016d84:	b2db      	uxtb	r3, r3
 8016d86:	e000      	b.n	8016d8a <dir_read+0x124>
 8016d88:	23ff      	movs	r3, #255	; 0xff
 8016d8a:	757b      	strb	r3, [r7, #21]
 8016d8c:	e011      	b.n	8016db2 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8016d8e:	7d7b      	ldrb	r3, [r7, #21]
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d109      	bne.n	8016da8 <dir_read+0x142>
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016d98:	4618      	mov	r0, r3
 8016d9a:	f7ff fd1f 	bl	80167dc <sum_sfn>
 8016d9e:	4603      	mov	r3, r0
 8016da0:	461a      	mov	r2, r3
 8016da2:	7d3b      	ldrb	r3, [r7, #20]
 8016da4:	4293      	cmp	r3, r2
 8016da6:	d017      	beq.n	8016dd8 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	f04f 32ff 	mov.w	r2, #4294967295
 8016dae:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 8016db0:	e012      	b.n	8016dd8 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8016db2:	2100      	movs	r1, #0
 8016db4:	6878      	ldr	r0, [r7, #4]
 8016db6:	f7ff f9c3 	bl	8016140 <dir_next>
 8016dba:	4603      	mov	r3, r0
 8016dbc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8016dbe:	7dfb      	ldrb	r3, [r7, #23]
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	d10b      	bne.n	8016ddc <dir_read+0x176>
	while (dp->sect) {
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	f47f af5b 	bne.w	8016c84 <dir_read+0x1e>
 8016dce:	e006      	b.n	8016dde <dir_read+0x178>
		if (res != FR_OK) break;
 8016dd0:	bf00      	nop
 8016dd2:	e004      	b.n	8016dde <dir_read+0x178>
					break;
 8016dd4:	bf00      	nop
 8016dd6:	e002      	b.n	8016dde <dir_read+0x178>
					break;
 8016dd8:	bf00      	nop
 8016dda:	e000      	b.n	8016dde <dir_read+0x178>
		if (res != FR_OK) break;
 8016ddc:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8016dde:	7dfb      	ldrb	r3, [r7, #23]
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d002      	beq.n	8016dea <dir_read+0x184>
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	2200      	movs	r2, #0
 8016de8:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 8016dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8016dec:	4618      	mov	r0, r3
 8016dee:	3718      	adds	r7, #24
 8016df0:	46bd      	mov	sp, r7
 8016df2:	bd80      	pop	{r7, pc}

08016df4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8016df4:	b590      	push	{r4, r7, lr}
 8016df6:	b089      	sub	sp, #36	; 0x24
 8016df8:	af00      	add	r7, sp, #0
 8016dfa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	681b      	ldr	r3, [r3, #0]
 8016e00:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8016e02:	2100      	movs	r1, #0
 8016e04:	6878      	ldr	r0, [r7, #4]
 8016e06:	f7ff f907 	bl	8016018 <dir_sdi>
 8016e0a:	4603      	mov	r3, r0
 8016e0c:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 8016e0e:	7ffb      	ldrb	r3, [r7, #31]
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d001      	beq.n	8016e18 <dir_find+0x24>
 8016e14:	7ffb      	ldrb	r3, [r7, #31]
 8016e16:	e112      	b.n	801703e <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8016e18:	68fb      	ldr	r3, [r7, #12]
 8016e1a:	781b      	ldrb	r3, [r3, #0]
 8016e1c:	2b04      	cmp	r3, #4
 8016e1e:	d164      	bne.n	8016eea <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8016e20:	68fb      	ldr	r3, [r7, #12]
 8016e22:	691b      	ldr	r3, [r3, #16]
 8016e24:	4618      	mov	r0, r3
 8016e26:	f7ff fd2d 	bl	8016884 <xname_sum>
 8016e2a:	4603      	mov	r3, r0
 8016e2c:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8016e2e:	e04f      	b.n	8016ed0 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8016e30:	68fb      	ldr	r3, [r7, #12]
 8016e32:	695b      	ldr	r3, [r3, #20]
 8016e34:	3324      	adds	r3, #36	; 0x24
 8016e36:	4618      	mov	r0, r3
 8016e38:	f7fd fe6e 	bl	8014b18 <ld_word>
 8016e3c:	4603      	mov	r3, r0
 8016e3e:	461a      	mov	r2, r3
 8016e40:	893b      	ldrh	r3, [r7, #8]
 8016e42:	4293      	cmp	r3, r2
 8016e44:	d000      	beq.n	8016e48 <dir_find+0x54>
 8016e46:	e043      	b.n	8016ed0 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8016e48:	68fb      	ldr	r3, [r7, #12]
 8016e4a:	695b      	ldr	r3, [r3, #20]
 8016e4c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8016e50:	76fb      	strb	r3, [r7, #27]
 8016e52:	2340      	movs	r3, #64	; 0x40
 8016e54:	617b      	str	r3, [r7, #20]
 8016e56:	2300      	movs	r3, #0
 8016e58:	613b      	str	r3, [r7, #16]
 8016e5a:	e029      	b.n	8016eb0 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 8016e5c:	697b      	ldr	r3, [r7, #20]
 8016e5e:	f003 031f 	and.w	r3, r3, #31
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d102      	bne.n	8016e6c <dir_find+0x78>
 8016e66:	697b      	ldr	r3, [r7, #20]
 8016e68:	3302      	adds	r3, #2
 8016e6a:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8016e6c:	68fb      	ldr	r3, [r7, #12]
 8016e6e:	695a      	ldr	r2, [r3, #20]
 8016e70:	697b      	ldr	r3, [r7, #20]
 8016e72:	4413      	add	r3, r2
 8016e74:	4618      	mov	r0, r3
 8016e76:	f7fd fe4f 	bl	8014b18 <ld_word>
 8016e7a:	4603      	mov	r3, r0
 8016e7c:	4618      	mov	r0, r3
 8016e7e:	f002 ff7d 	bl	8019d7c <ff_wtoupper>
 8016e82:	4603      	mov	r3, r0
 8016e84:	461c      	mov	r4, r3
 8016e86:	68fb      	ldr	r3, [r7, #12]
 8016e88:	691a      	ldr	r2, [r3, #16]
 8016e8a:	693b      	ldr	r3, [r7, #16]
 8016e8c:	005b      	lsls	r3, r3, #1
 8016e8e:	4413      	add	r3, r2
 8016e90:	881b      	ldrh	r3, [r3, #0]
 8016e92:	4618      	mov	r0, r3
 8016e94:	f002 ff72 	bl	8019d7c <ff_wtoupper>
 8016e98:	4603      	mov	r3, r0
 8016e9a:	429c      	cmp	r4, r3
 8016e9c:	d10c      	bne.n	8016eb8 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8016e9e:	7efb      	ldrb	r3, [r7, #27]
 8016ea0:	3b01      	subs	r3, #1
 8016ea2:	76fb      	strb	r3, [r7, #27]
 8016ea4:	697b      	ldr	r3, [r7, #20]
 8016ea6:	3302      	adds	r3, #2
 8016ea8:	617b      	str	r3, [r7, #20]
 8016eaa:	693b      	ldr	r3, [r7, #16]
 8016eac:	3301      	adds	r3, #1
 8016eae:	613b      	str	r3, [r7, #16]
 8016eb0:	7efb      	ldrb	r3, [r7, #27]
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d1d2      	bne.n	8016e5c <dir_find+0x68>
 8016eb6:	e000      	b.n	8016eba <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8016eb8:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8016eba:	7efb      	ldrb	r3, [r7, #27]
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d107      	bne.n	8016ed0 <dir_find+0xdc>
 8016ec0:	68fb      	ldr	r3, [r7, #12]
 8016ec2:	691a      	ldr	r2, [r3, #16]
 8016ec4:	693b      	ldr	r3, [r7, #16]
 8016ec6:	005b      	lsls	r3, r3, #1
 8016ec8:	4413      	add	r3, r2
 8016eca:	881b      	ldrh	r3, [r3, #0]
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d009      	beq.n	8016ee4 <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8016ed0:	2100      	movs	r1, #0
 8016ed2:	6878      	ldr	r0, [r7, #4]
 8016ed4:	f7ff fec7 	bl	8016c66 <dir_read>
 8016ed8:	4603      	mov	r3, r0
 8016eda:	77fb      	strb	r3, [r7, #31]
 8016edc:	7ffb      	ldrb	r3, [r7, #31]
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d0a6      	beq.n	8016e30 <dir_find+0x3c>
 8016ee2:	e000      	b.n	8016ee6 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8016ee4:	bf00      	nop
		}
		return res;
 8016ee6:	7ffb      	ldrb	r3, [r7, #31]
 8016ee8:	e0a9      	b.n	801703e <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8016eea:	23ff      	movs	r3, #255	; 0xff
 8016eec:	773b      	strb	r3, [r7, #28]
 8016eee:	7f3b      	ldrb	r3, [r7, #28]
 8016ef0:	777b      	strb	r3, [r7, #29]
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8016ef8:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016efe:	4619      	mov	r1, r3
 8016f00:	68f8      	ldr	r0, [r7, #12]
 8016f02:	f7fe f9fd 	bl	8015300 <move_window>
 8016f06:	4603      	mov	r3, r0
 8016f08:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 8016f0a:	7ffb      	ldrb	r3, [r7, #31]
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	f040 8090 	bne.w	8017032 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016f16:	781b      	ldrb	r3, [r3, #0]
 8016f18:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8016f1a:	7fbb      	ldrb	r3, [r7, #30]
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d102      	bne.n	8016f26 <dir_find+0x132>
 8016f20:	2304      	movs	r3, #4
 8016f22:	77fb      	strb	r3, [r7, #31]
 8016f24:	e08a      	b.n	801703c <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016f2a:	330b      	adds	r3, #11
 8016f2c:	781b      	ldrb	r3, [r3, #0]
 8016f2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016f32:	72fb      	strb	r3, [r7, #11]
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	7afa      	ldrb	r2, [r7, #11]
 8016f38:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8016f3a:	7fbb      	ldrb	r3, [r7, #30]
 8016f3c:	2be5      	cmp	r3, #229	; 0xe5
 8016f3e:	d007      	beq.n	8016f50 <dir_find+0x15c>
 8016f40:	7afb      	ldrb	r3, [r7, #11]
 8016f42:	f003 0308 	and.w	r3, r3, #8
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	d009      	beq.n	8016f5e <dir_find+0x16a>
 8016f4a:	7afb      	ldrb	r3, [r7, #11]
 8016f4c:	2b0f      	cmp	r3, #15
 8016f4e:	d006      	beq.n	8016f5e <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8016f50:	23ff      	movs	r3, #255	; 0xff
 8016f52:	777b      	strb	r3, [r7, #29]
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	f04f 32ff 	mov.w	r2, #4294967295
 8016f5a:	64da      	str	r2, [r3, #76]	; 0x4c
 8016f5c:	e05e      	b.n	801701c <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8016f5e:	7afb      	ldrb	r3, [r7, #11]
 8016f60:	2b0f      	cmp	r3, #15
 8016f62:	d136      	bne.n	8016fd2 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8016f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	d154      	bne.n	801701c <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8016f72:	7fbb      	ldrb	r3, [r7, #30]
 8016f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	d00d      	beq.n	8016f98 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016f80:	7b5b      	ldrb	r3, [r3, #13]
 8016f82:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8016f84:	7fbb      	ldrb	r3, [r7, #30]
 8016f86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016f8a:	77bb      	strb	r3, [r7, #30]
 8016f8c:	7fbb      	ldrb	r3, [r7, #30]
 8016f8e:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8016f98:	7fba      	ldrb	r2, [r7, #30]
 8016f9a:	7f7b      	ldrb	r3, [r7, #29]
 8016f9c:	429a      	cmp	r2, r3
 8016f9e:	d115      	bne.n	8016fcc <dir_find+0x1d8>
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016fa4:	330d      	adds	r3, #13
 8016fa6:	781b      	ldrb	r3, [r3, #0]
 8016fa8:	7f3a      	ldrb	r2, [r7, #28]
 8016faa:	429a      	cmp	r2, r3
 8016fac:	d10e      	bne.n	8016fcc <dir_find+0x1d8>
 8016fae:	68fb      	ldr	r3, [r7, #12]
 8016fb0:	691a      	ldr	r2, [r3, #16]
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016fb6:	4619      	mov	r1, r3
 8016fb8:	4610      	mov	r0, r2
 8016fba:	f7ff fa43 	bl	8016444 <cmp_lfn>
 8016fbe:	4603      	mov	r3, r0
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d003      	beq.n	8016fcc <dir_find+0x1d8>
 8016fc4:	7f7b      	ldrb	r3, [r7, #29]
 8016fc6:	3b01      	subs	r3, #1
 8016fc8:	b2db      	uxtb	r3, r3
 8016fca:	e000      	b.n	8016fce <dir_find+0x1da>
 8016fcc:	23ff      	movs	r3, #255	; 0xff
 8016fce:	777b      	strb	r3, [r7, #29]
 8016fd0:	e024      	b.n	801701c <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8016fd2:	7f7b      	ldrb	r3, [r7, #29]
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	d109      	bne.n	8016fec <dir_find+0x1f8>
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016fdc:	4618      	mov	r0, r3
 8016fde:	f7ff fbfd 	bl	80167dc <sum_sfn>
 8016fe2:	4603      	mov	r3, r0
 8016fe4:	461a      	mov	r2, r3
 8016fe6:	7f3b      	ldrb	r3, [r7, #28]
 8016fe8:	4293      	cmp	r3, r2
 8016fea:	d024      	beq.n	8017036 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8016ff2:	f003 0301 	and.w	r3, r3, #1
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d10a      	bne.n	8017010 <dir_find+0x21c>
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	3340      	adds	r3, #64	; 0x40
 8017002:	220b      	movs	r2, #11
 8017004:	4619      	mov	r1, r3
 8017006:	f7fd ff88 	bl	8014f1a <mem_cmp>
 801700a:	4603      	mov	r3, r0
 801700c:	2b00      	cmp	r3, #0
 801700e:	d014      	beq.n	801703a <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8017010:	23ff      	movs	r3, #255	; 0xff
 8017012:	777b      	strb	r3, [r7, #29]
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	f04f 32ff 	mov.w	r2, #4294967295
 801701a:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801701c:	2100      	movs	r1, #0
 801701e:	6878      	ldr	r0, [r7, #4]
 8017020:	f7ff f88e 	bl	8016140 <dir_next>
 8017024:	4603      	mov	r3, r0
 8017026:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 8017028:	7ffb      	ldrb	r3, [r7, #31]
 801702a:	2b00      	cmp	r3, #0
 801702c:	f43f af65 	beq.w	8016efa <dir_find+0x106>
 8017030:	e004      	b.n	801703c <dir_find+0x248>
		if (res != FR_OK) break;
 8017032:	bf00      	nop
 8017034:	e002      	b.n	801703c <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8017036:	bf00      	nop
 8017038:	e000      	b.n	801703c <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801703a:	bf00      	nop

	return res;
 801703c:	7ffb      	ldrb	r3, [r7, #31]
}
 801703e:	4618      	mov	r0, r3
 8017040:	3724      	adds	r7, #36	; 0x24
 8017042:	46bd      	mov	sp, r7
 8017044:	bd90      	pop	{r4, r7, pc}
	...

08017048 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8017048:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 801704c:	b0a0      	sub	sp, #128	; 0x80
 801704e:	af00      	add	r7, sp, #0
 8017050:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	681b      	ldr	r3, [r3, #0]
 8017056:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 801705e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8017062:	2b00      	cmp	r3, #0
 8017064:	d001      	beq.n	801706a <dir_register+0x22>
 8017066:	2306      	movs	r3, #6
 8017068:	e198      	b.n	801739c <dir_register+0x354>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801706a:	2300      	movs	r3, #0
 801706c:	677b      	str	r3, [r7, #116]	; 0x74
 801706e:	e002      	b.n	8017076 <dir_register+0x2e>
 8017070:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017072:	3301      	adds	r3, #1
 8017074:	677b      	str	r3, [r7, #116]	; 0x74
 8017076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017078:	691a      	ldr	r2, [r3, #16]
 801707a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801707c:	005b      	lsls	r3, r3, #1
 801707e:	4413      	add	r3, r2
 8017080:	881b      	ldrh	r3, [r3, #0]
 8017082:	2b00      	cmp	r3, #0
 8017084:	d1f4      	bne.n	8017070 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8017086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017088:	781b      	ldrb	r3, [r3, #0]
 801708a:	2b04      	cmp	r3, #4
 801708c:	f040 80a9 	bne.w	80171e2 <dir_register+0x19a>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8017090:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017092:	330e      	adds	r3, #14
 8017094:	4aa7      	ldr	r2, [pc, #668]	; (8017334 <dir_register+0x2ec>)
 8017096:	fba2 2303 	umull	r2, r3, r2, r3
 801709a:	08db      	lsrs	r3, r3, #3
 801709c:	3302      	adds	r3, #2
 801709e:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 80170a0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80170a2:	6878      	ldr	r0, [r7, #4]
 80170a4:	f7ff f932 	bl	801630c <dir_alloc>
 80170a8:	4603      	mov	r3, r0
 80170aa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 80170ae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80170b2:	2b00      	cmp	r3, #0
 80170b4:	d002      	beq.n	80170bc <dir_register+0x74>
 80170b6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80170ba:	e16f      	b.n	801739c <dir_register+0x354>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80170c0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80170c2:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 80170c6:	440b      	add	r3, r1
 80170c8:	015b      	lsls	r3, r3, #5
 80170ca:	1ad2      	subs	r2, r2, r3
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	689b      	ldr	r3, [r3, #8]
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	d07a      	beq.n	80171ce <dir_register+0x186>
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	79db      	ldrb	r3, [r3, #7]
 80170dc:	f003 0304 	and.w	r3, r3, #4
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	d074      	beq.n	80171ce <dir_register+0x186>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 80170ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80170ec:	895b      	ldrh	r3, [r3, #10]
 80170ee:	4618      	mov	r0, r3
 80170f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80170f2:	899b      	ldrh	r3, [r3, #12]
 80170f4:	fb03 f300 	mul.w	r3, r3, r0
 80170f8:	469b      	mov	fp, r3
 80170fa:	f04f 0c00 	mov.w	ip, #0
 80170fe:	eb1b 0301 	adds.w	r3, fp, r1
 8017102:	eb4c 0402 	adc.w	r4, ip, r2
 8017106:	687a      	ldr	r2, [r7, #4]
 8017108:	e9c2 3404 	strd	r3, r4, [r2, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	4618      	mov	r0, r3
 8017110:	f7fe fd26 	bl	8015b60 <fill_first_frag>
 8017114:	4603      	mov	r3, r0
 8017116:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 801711a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801711e:	2b00      	cmp	r3, #0
 8017120:	d002      	beq.n	8017128 <dir_register+0xe0>
 8017122:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8017126:	e139      	b.n	801739c <dir_register+0x354>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8017128:	6878      	ldr	r0, [r7, #4]
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801712e:	f04f 32ff 	mov.w	r2, #4294967295
 8017132:	4619      	mov	r1, r3
 8017134:	f7fe fd43 	bl	8015bbe <fill_last_frag>
 8017138:	4603      	mov	r3, r0
 801713a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 801713e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8017142:	2b00      	cmp	r3, #0
 8017144:	d002      	beq.n	801714c <dir_register+0x104>
 8017146:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801714a:	e127      	b.n	801739c <dir_register+0x354>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 801714c:	687a      	ldr	r2, [r7, #4]
 801714e:	f107 0308 	add.w	r3, r7, #8
 8017152:	4611      	mov	r1, r2
 8017154:	4618      	mov	r0, r3
 8017156:	f7ff fc87 	bl	8016a68 <load_obj_dir>
 801715a:	4603      	mov	r3, r0
 801715c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8017160:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8017164:	2b00      	cmp	r3, #0
 8017166:	d002      	beq.n	801716e <dir_register+0x126>
 8017168:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801716c:	e116      	b.n	801739c <dir_register+0x354>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 801716e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017170:	695b      	ldr	r3, [r3, #20]
 8017172:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 801717c:	461a      	mov	r2, r3
 801717e:	4623      	mov	r3, r4
 8017180:	4608      	mov	r0, r1
 8017182:	f7fd fe08 	bl	8014d96 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8017186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017188:	695b      	ldr	r3, [r3, #20]
 801718a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8017194:	461a      	mov	r2, r3
 8017196:	4623      	mov	r3, r4
 8017198:	4608      	mov	r0, r1
 801719a:	f7fd fdfc 	bl	8014d96 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	79da      	ldrb	r2, [r3, #7]
 80171a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80171a4:	695b      	ldr	r3, [r3, #20]
 80171a6:	3321      	adds	r3, #33	; 0x21
 80171a8:	f042 0201 	orr.w	r2, r2, #1
 80171ac:	b2d2      	uxtb	r2, r2
 80171ae:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 80171b0:	f107 0308 	add.w	r3, r7, #8
 80171b4:	4618      	mov	r0, r3
 80171b6:	f7ff fc94 	bl	8016ae2 <store_xdir>
 80171ba:	4603      	mov	r3, r0
 80171bc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 80171c0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	d002      	beq.n	80171ce <dir_register+0x186>
 80171c8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80171cc:	e0e6      	b.n	801739c <dir_register+0x354>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 80171ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80171d0:	695a      	ldr	r2, [r3, #20]
 80171d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80171d4:	691b      	ldr	r3, [r3, #16]
 80171d6:	4619      	mov	r1, r3
 80171d8:	4610      	mov	r0, r2
 80171da:	f7ff fcdd 	bl	8016b98 <create_xdir>
		return FR_OK;
 80171de:	2300      	movs	r3, #0
 80171e0:	e0dc      	b.n	801739c <dir_register+0x354>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80171e8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80171ec:	220c      	movs	r2, #12
 80171ee:	4618      	mov	r0, r3
 80171f0:	f7fd fe58 	bl	8014ea4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80171f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80171f8:	f003 0301 	and.w	r3, r3, #1
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d033      	beq.n	8017268 <dir_register+0x220>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	2240      	movs	r2, #64	; 0x40
 8017204:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 8017208:	2301      	movs	r3, #1
 801720a:	67bb      	str	r3, [r7, #120]	; 0x78
 801720c:	e016      	b.n	801723c <dir_register+0x1f4>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8017214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017216:	691a      	ldr	r2, [r3, #16]
 8017218:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 801721c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801721e:	f7ff fa4d 	bl	80166bc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8017222:	6878      	ldr	r0, [r7, #4]
 8017224:	f7ff fde6 	bl	8016df4 <dir_find>
 8017228:	4603      	mov	r3, r0
 801722a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 801722e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8017232:	2b00      	cmp	r3, #0
 8017234:	d106      	bne.n	8017244 <dir_register+0x1fc>
		for (n = 1; n < 100; n++) {
 8017236:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017238:	3301      	adds	r3, #1
 801723a:	67bb      	str	r3, [r7, #120]	; 0x78
 801723c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801723e:	2b63      	cmp	r3, #99	; 0x63
 8017240:	d9e5      	bls.n	801720e <dir_register+0x1c6>
 8017242:	e000      	b.n	8017246 <dir_register+0x1fe>
			if (res != FR_OK) break;
 8017244:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8017246:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017248:	2b64      	cmp	r3, #100	; 0x64
 801724a:	d101      	bne.n	8017250 <dir_register+0x208>
 801724c:	2307      	movs	r3, #7
 801724e:	e0a5      	b.n	801739c <dir_register+0x354>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8017250:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8017254:	2b04      	cmp	r3, #4
 8017256:	d002      	beq.n	801725e <dir_register+0x216>
 8017258:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801725c:	e09e      	b.n	801739c <dir_register+0x354>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801725e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8017268:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801726c:	f003 0302 	and.w	r3, r3, #2
 8017270:	2b00      	cmp	r3, #0
 8017272:	d007      	beq.n	8017284 <dir_register+0x23c>
 8017274:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017276:	330c      	adds	r3, #12
 8017278:	4a2f      	ldr	r2, [pc, #188]	; (8017338 <dir_register+0x2f0>)
 801727a:	fba2 2303 	umull	r2, r3, r2, r3
 801727e:	089b      	lsrs	r3, r3, #2
 8017280:	3301      	adds	r3, #1
 8017282:	e000      	b.n	8017286 <dir_register+0x23e>
 8017284:	2301      	movs	r3, #1
 8017286:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8017288:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801728a:	6878      	ldr	r0, [r7, #4]
 801728c:	f7ff f83e 	bl	801630c <dir_alloc>
 8017290:	4603      	mov	r3, r0
 8017292:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8017296:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801729a:	2b00      	cmp	r3, #0
 801729c:	d14f      	bne.n	801733e <dir_register+0x2f6>
 801729e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80172a0:	3b01      	subs	r3, #1
 80172a2:	673b      	str	r3, [r7, #112]	; 0x70
 80172a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d049      	beq.n	801733e <dir_register+0x2f6>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80172ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80172b0:	015b      	lsls	r3, r3, #5
 80172b2:	1ad3      	subs	r3, r2, r3
 80172b4:	4619      	mov	r1, r3
 80172b6:	6878      	ldr	r0, [r7, #4]
 80172b8:	f7fe feae 	bl	8016018 <dir_sdi>
 80172bc:	4603      	mov	r3, r0
 80172be:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 80172c2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d139      	bne.n	801733e <dir_register+0x2f6>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	3340      	adds	r3, #64	; 0x40
 80172ce:	4618      	mov	r0, r3
 80172d0:	f7ff fa84 	bl	80167dc <sum_sfn>
 80172d4:	4603      	mov	r3, r0
 80172d6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80172de:	4619      	mov	r1, r3
 80172e0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80172e2:	f7fe f80d 	bl	8015300 <move_window>
 80172e6:	4603      	mov	r3, r0
 80172e8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 80172ec:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	d123      	bne.n	801733c <dir_register+0x2f4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80172f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80172f6:	6918      	ldr	r0, [r3, #16]
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80172fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80172fe:	b2da      	uxtb	r2, r3
 8017300:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8017304:	f7ff f972 	bl	80165ec <put_lfn>
				fs->wflag = 1;
 8017308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801730a:	2201      	movs	r2, #1
 801730c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801730e:	2100      	movs	r1, #0
 8017310:	6878      	ldr	r0, [r7, #4]
 8017312:	f7fe ff15 	bl	8016140 <dir_next>
 8017316:	4603      	mov	r3, r0
 8017318:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 801731c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8017320:	2b00      	cmp	r3, #0
 8017322:	d10c      	bne.n	801733e <dir_register+0x2f6>
 8017324:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017326:	3b01      	subs	r3, #1
 8017328:	673b      	str	r3, [r7, #112]	; 0x70
 801732a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801732c:	2b00      	cmp	r3, #0
 801732e:	d1d4      	bne.n	80172da <dir_register+0x292>
 8017330:	e005      	b.n	801733e <dir_register+0x2f6>
 8017332:	bf00      	nop
 8017334:	88888889 	.word	0x88888889
 8017338:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 801733c:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801733e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8017342:	2b00      	cmp	r3, #0
 8017344:	d128      	bne.n	8017398 <dir_register+0x350>
		res = move_window(fs, dp->sect);
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801734a:	4619      	mov	r1, r3
 801734c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801734e:	f7fd ffd7 	bl	8015300 <move_window>
 8017352:	4603      	mov	r3, r0
 8017354:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8017358:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801735c:	2b00      	cmp	r3, #0
 801735e:	d11b      	bne.n	8017398 <dir_register+0x350>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017364:	2220      	movs	r2, #32
 8017366:	2100      	movs	r1, #0
 8017368:	4618      	mov	r0, r3
 801736a:	f7fd fdbc 	bl	8014ee6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	3340      	adds	r3, #64	; 0x40
 8017376:	220b      	movs	r2, #11
 8017378:	4619      	mov	r1, r3
 801737a:	f7fd fd93 	bl	8014ea4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017388:	330c      	adds	r3, #12
 801738a:	f002 0218 	and.w	r2, r2, #24
 801738e:	b2d2      	uxtb	r2, r2
 8017390:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8017392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017394:	2201      	movs	r2, #1
 8017396:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8017398:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 801739c:	4618      	mov	r0, r3
 801739e:	3780      	adds	r7, #128	; 0x80
 80173a0:	46bd      	mov	sp, r7
 80173a2:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80173a6:	bf00      	nop

080173a8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80173a8:	b580      	push	{r7, lr}
 80173aa:	b08a      	sub	sp, #40	; 0x28
 80173ac:	af00      	add	r7, sp, #0
 80173ae:	6078      	str	r0, [r7, #4]
 80173b0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80173b2:	683b      	ldr	r3, [r7, #0]
 80173b4:	681b      	ldr	r3, [r3, #0]
 80173b6:	613b      	str	r3, [r7, #16]
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	681b      	ldr	r3, [r3, #0]
 80173bc:	691b      	ldr	r3, [r3, #16]
 80173be:	60fb      	str	r3, [r7, #12]
 80173c0:	2300      	movs	r3, #0
 80173c2:	617b      	str	r3, [r7, #20]
 80173c4:	697b      	ldr	r3, [r7, #20]
 80173c6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80173c8:	69bb      	ldr	r3, [r7, #24]
 80173ca:	1c5a      	adds	r2, r3, #1
 80173cc:	61ba      	str	r2, [r7, #24]
 80173ce:	693a      	ldr	r2, [r7, #16]
 80173d0:	4413      	add	r3, r2
 80173d2:	781b      	ldrb	r3, [r3, #0]
 80173d4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80173d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80173d8:	2b1f      	cmp	r3, #31
 80173da:	d940      	bls.n	801745e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80173dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80173de:	2b2f      	cmp	r3, #47	; 0x2f
 80173e0:	d006      	beq.n	80173f0 <create_name+0x48>
 80173e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80173e4:	2b5c      	cmp	r3, #92	; 0x5c
 80173e6:	d110      	bne.n	801740a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80173e8:	e002      	b.n	80173f0 <create_name+0x48>
 80173ea:	69bb      	ldr	r3, [r7, #24]
 80173ec:	3301      	adds	r3, #1
 80173ee:	61bb      	str	r3, [r7, #24]
 80173f0:	693a      	ldr	r2, [r7, #16]
 80173f2:	69bb      	ldr	r3, [r7, #24]
 80173f4:	4413      	add	r3, r2
 80173f6:	781b      	ldrb	r3, [r3, #0]
 80173f8:	2b2f      	cmp	r3, #47	; 0x2f
 80173fa:	d0f6      	beq.n	80173ea <create_name+0x42>
 80173fc:	693a      	ldr	r2, [r7, #16]
 80173fe:	69bb      	ldr	r3, [r7, #24]
 8017400:	4413      	add	r3, r2
 8017402:	781b      	ldrb	r3, [r3, #0]
 8017404:	2b5c      	cmp	r3, #92	; 0x5c
 8017406:	d0f0      	beq.n	80173ea <create_name+0x42>
			break;
 8017408:	e02a      	b.n	8017460 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801740a:	697b      	ldr	r3, [r7, #20]
 801740c:	2bfe      	cmp	r3, #254	; 0xfe
 801740e:	d901      	bls.n	8017414 <create_name+0x6c>
 8017410:	2306      	movs	r3, #6
 8017412:	e177      	b.n	8017704 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8017414:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017416:	b2db      	uxtb	r3, r3
 8017418:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801741a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801741c:	2101      	movs	r1, #1
 801741e:	4618      	mov	r0, r3
 8017420:	f002 fc70 	bl	8019d04 <ff_convert>
 8017424:	4603      	mov	r3, r0
 8017426:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8017428:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801742a:	2b00      	cmp	r3, #0
 801742c:	d101      	bne.n	8017432 <create_name+0x8a>
 801742e:	2306      	movs	r3, #6
 8017430:	e168      	b.n	8017704 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8017432:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017434:	2b7f      	cmp	r3, #127	; 0x7f
 8017436:	d809      	bhi.n	801744c <create_name+0xa4>
 8017438:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801743a:	4619      	mov	r1, r3
 801743c:	48b3      	ldr	r0, [pc, #716]	; (801770c <create_name+0x364>)
 801743e:	f7fd fd93 	bl	8014f68 <chk_chr>
 8017442:	4603      	mov	r3, r0
 8017444:	2b00      	cmp	r3, #0
 8017446:	d001      	beq.n	801744c <create_name+0xa4>
 8017448:	2306      	movs	r3, #6
 801744a:	e15b      	b.n	8017704 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 801744c:	697b      	ldr	r3, [r7, #20]
 801744e:	1c5a      	adds	r2, r3, #1
 8017450:	617a      	str	r2, [r7, #20]
 8017452:	005b      	lsls	r3, r3, #1
 8017454:	68fa      	ldr	r2, [r7, #12]
 8017456:	4413      	add	r3, r2
 8017458:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801745a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801745c:	e7b4      	b.n	80173c8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801745e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8017460:	693a      	ldr	r2, [r7, #16]
 8017462:	69bb      	ldr	r3, [r7, #24]
 8017464:	441a      	add	r2, r3
 8017466:	683b      	ldr	r3, [r7, #0]
 8017468:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801746a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801746c:	2b1f      	cmp	r3, #31
 801746e:	d801      	bhi.n	8017474 <create_name+0xcc>
 8017470:	2304      	movs	r3, #4
 8017472:	e000      	b.n	8017476 <create_name+0xce>
 8017474:	2300      	movs	r3, #0
 8017476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801747a:	e011      	b.n	80174a0 <create_name+0xf8>
		w = lfn[di - 1];
 801747c:	697a      	ldr	r2, [r7, #20]
 801747e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017482:	4413      	add	r3, r2
 8017484:	005b      	lsls	r3, r3, #1
 8017486:	68fa      	ldr	r2, [r7, #12]
 8017488:	4413      	add	r3, r2
 801748a:	881b      	ldrh	r3, [r3, #0]
 801748c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 801748e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017490:	2b20      	cmp	r3, #32
 8017492:	d002      	beq.n	801749a <create_name+0xf2>
 8017494:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017496:	2b2e      	cmp	r3, #46	; 0x2e
 8017498:	d106      	bne.n	80174a8 <create_name+0x100>
		di--;
 801749a:	697b      	ldr	r3, [r7, #20]
 801749c:	3b01      	subs	r3, #1
 801749e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80174a0:	697b      	ldr	r3, [r7, #20]
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d1ea      	bne.n	801747c <create_name+0xd4>
 80174a6:	e000      	b.n	80174aa <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80174a8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80174aa:	697b      	ldr	r3, [r7, #20]
 80174ac:	005b      	lsls	r3, r3, #1
 80174ae:	68fa      	ldr	r2, [r7, #12]
 80174b0:	4413      	add	r3, r2
 80174b2:	2200      	movs	r2, #0
 80174b4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80174b6:	697b      	ldr	r3, [r7, #20]
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d101      	bne.n	80174c0 <create_name+0x118>
 80174bc:	2306      	movs	r3, #6
 80174be:	e121      	b.n	8017704 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	3340      	adds	r3, #64	; 0x40
 80174c4:	220b      	movs	r2, #11
 80174c6:	2120      	movs	r1, #32
 80174c8:	4618      	mov	r0, r3
 80174ca:	f7fd fd0c 	bl	8014ee6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80174ce:	2300      	movs	r3, #0
 80174d0:	61bb      	str	r3, [r7, #24]
 80174d2:	e002      	b.n	80174da <create_name+0x132>
 80174d4:	69bb      	ldr	r3, [r7, #24]
 80174d6:	3301      	adds	r3, #1
 80174d8:	61bb      	str	r3, [r7, #24]
 80174da:	69bb      	ldr	r3, [r7, #24]
 80174dc:	005b      	lsls	r3, r3, #1
 80174de:	68fa      	ldr	r2, [r7, #12]
 80174e0:	4413      	add	r3, r2
 80174e2:	881b      	ldrh	r3, [r3, #0]
 80174e4:	2b20      	cmp	r3, #32
 80174e6:	d0f5      	beq.n	80174d4 <create_name+0x12c>
 80174e8:	69bb      	ldr	r3, [r7, #24]
 80174ea:	005b      	lsls	r3, r3, #1
 80174ec:	68fa      	ldr	r2, [r7, #12]
 80174ee:	4413      	add	r3, r2
 80174f0:	881b      	ldrh	r3, [r3, #0]
 80174f2:	2b2e      	cmp	r3, #46	; 0x2e
 80174f4:	d0ee      	beq.n	80174d4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80174f6:	69bb      	ldr	r3, [r7, #24]
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d009      	beq.n	8017510 <create_name+0x168>
 80174fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017500:	f043 0303 	orr.w	r3, r3, #3
 8017504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8017508:	e002      	b.n	8017510 <create_name+0x168>
 801750a:	697b      	ldr	r3, [r7, #20]
 801750c:	3b01      	subs	r3, #1
 801750e:	617b      	str	r3, [r7, #20]
 8017510:	697b      	ldr	r3, [r7, #20]
 8017512:	2b00      	cmp	r3, #0
 8017514:	d009      	beq.n	801752a <create_name+0x182>
 8017516:	697a      	ldr	r2, [r7, #20]
 8017518:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801751c:	4413      	add	r3, r2
 801751e:	005b      	lsls	r3, r3, #1
 8017520:	68fa      	ldr	r2, [r7, #12]
 8017522:	4413      	add	r3, r2
 8017524:	881b      	ldrh	r3, [r3, #0]
 8017526:	2b2e      	cmp	r3, #46	; 0x2e
 8017528:	d1ef      	bne.n	801750a <create_name+0x162>

	i = b = 0; ni = 8;
 801752a:	2300      	movs	r3, #0
 801752c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017530:	2300      	movs	r3, #0
 8017532:	623b      	str	r3, [r7, #32]
 8017534:	2308      	movs	r3, #8
 8017536:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8017538:	69bb      	ldr	r3, [r7, #24]
 801753a:	1c5a      	adds	r2, r3, #1
 801753c:	61ba      	str	r2, [r7, #24]
 801753e:	005b      	lsls	r3, r3, #1
 8017540:	68fa      	ldr	r2, [r7, #12]
 8017542:	4413      	add	r3, r2
 8017544:	881b      	ldrh	r3, [r3, #0]
 8017546:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8017548:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801754a:	2b00      	cmp	r3, #0
 801754c:	f000 8090 	beq.w	8017670 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8017550:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017552:	2b20      	cmp	r3, #32
 8017554:	d006      	beq.n	8017564 <create_name+0x1bc>
 8017556:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017558:	2b2e      	cmp	r3, #46	; 0x2e
 801755a:	d10a      	bne.n	8017572 <create_name+0x1ca>
 801755c:	69ba      	ldr	r2, [r7, #24]
 801755e:	697b      	ldr	r3, [r7, #20]
 8017560:	429a      	cmp	r2, r3
 8017562:	d006      	beq.n	8017572 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8017564:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017568:	f043 0303 	orr.w	r3, r3, #3
 801756c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017570:	e07d      	b.n	801766e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8017572:	6a3a      	ldr	r2, [r7, #32]
 8017574:	69fb      	ldr	r3, [r7, #28]
 8017576:	429a      	cmp	r2, r3
 8017578:	d203      	bcs.n	8017582 <create_name+0x1da>
 801757a:	69ba      	ldr	r2, [r7, #24]
 801757c:	697b      	ldr	r3, [r7, #20]
 801757e:	429a      	cmp	r2, r3
 8017580:	d123      	bne.n	80175ca <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8017582:	69fb      	ldr	r3, [r7, #28]
 8017584:	2b0b      	cmp	r3, #11
 8017586:	d106      	bne.n	8017596 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8017588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801758c:	f043 0303 	orr.w	r3, r3, #3
 8017590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017594:	e06f      	b.n	8017676 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8017596:	69ba      	ldr	r2, [r7, #24]
 8017598:	697b      	ldr	r3, [r7, #20]
 801759a:	429a      	cmp	r2, r3
 801759c:	d005      	beq.n	80175aa <create_name+0x202>
 801759e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80175a2:	f043 0303 	orr.w	r3, r3, #3
 80175a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80175aa:	69ba      	ldr	r2, [r7, #24]
 80175ac:	697b      	ldr	r3, [r7, #20]
 80175ae:	429a      	cmp	r2, r3
 80175b0:	d860      	bhi.n	8017674 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80175b2:	697b      	ldr	r3, [r7, #20]
 80175b4:	61bb      	str	r3, [r7, #24]
 80175b6:	2308      	movs	r3, #8
 80175b8:	623b      	str	r3, [r7, #32]
 80175ba:	230b      	movs	r3, #11
 80175bc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80175be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80175c2:	009b      	lsls	r3, r3, #2
 80175c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80175c8:	e051      	b.n	801766e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80175ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80175cc:	2b7f      	cmp	r3, #127	; 0x7f
 80175ce:	d914      	bls.n	80175fa <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80175d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80175d2:	2100      	movs	r1, #0
 80175d4:	4618      	mov	r0, r3
 80175d6:	f002 fb95 	bl	8019d04 <ff_convert>
 80175da:	4603      	mov	r3, r0
 80175dc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80175de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d004      	beq.n	80175ee <create_name+0x246>
 80175e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80175e6:	3b80      	subs	r3, #128	; 0x80
 80175e8:	4a49      	ldr	r2, [pc, #292]	; (8017710 <create_name+0x368>)
 80175ea:	5cd3      	ldrb	r3, [r2, r3]
 80175ec:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80175ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80175f2:	f043 0302 	orr.w	r3, r3, #2
 80175f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80175fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d007      	beq.n	8017610 <create_name+0x268>
 8017600:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017602:	4619      	mov	r1, r3
 8017604:	4843      	ldr	r0, [pc, #268]	; (8017714 <create_name+0x36c>)
 8017606:	f7fd fcaf 	bl	8014f68 <chk_chr>
 801760a:	4603      	mov	r3, r0
 801760c:	2b00      	cmp	r3, #0
 801760e:	d008      	beq.n	8017622 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8017610:	235f      	movs	r3, #95	; 0x5f
 8017612:	84bb      	strh	r3, [r7, #36]	; 0x24
 8017614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017618:	f043 0303 	orr.w	r3, r3, #3
 801761c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017620:	e01b      	b.n	801765a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8017622:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017624:	2b40      	cmp	r3, #64	; 0x40
 8017626:	d909      	bls.n	801763c <create_name+0x294>
 8017628:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801762a:	2b5a      	cmp	r3, #90	; 0x5a
 801762c:	d806      	bhi.n	801763c <create_name+0x294>
					b |= 2;
 801762e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017632:	f043 0302 	orr.w	r3, r3, #2
 8017636:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801763a:	e00e      	b.n	801765a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801763c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801763e:	2b60      	cmp	r3, #96	; 0x60
 8017640:	d90b      	bls.n	801765a <create_name+0x2b2>
 8017642:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017644:	2b7a      	cmp	r3, #122	; 0x7a
 8017646:	d808      	bhi.n	801765a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8017648:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801764c:	f043 0301 	orr.w	r3, r3, #1
 8017650:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017654:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017656:	3b20      	subs	r3, #32
 8017658:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801765a:	6a3b      	ldr	r3, [r7, #32]
 801765c:	1c5a      	adds	r2, r3, #1
 801765e:	623a      	str	r2, [r7, #32]
 8017660:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017662:	b2d1      	uxtb	r1, r2
 8017664:	687a      	ldr	r2, [r7, #4]
 8017666:	4413      	add	r3, r2
 8017668:	460a      	mov	r2, r1
 801766a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 801766e:	e763      	b.n	8017538 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8017670:	bf00      	nop
 8017672:	e000      	b.n	8017676 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8017674:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801767c:	2be5      	cmp	r3, #229	; 0xe5
 801767e:	d103      	bne.n	8017688 <create_name+0x2e0>
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	2205      	movs	r2, #5
 8017684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 8017688:	69fb      	ldr	r3, [r7, #28]
 801768a:	2b08      	cmp	r3, #8
 801768c:	d104      	bne.n	8017698 <create_name+0x2f0>
 801768e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017692:	009b      	lsls	r3, r3, #2
 8017694:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8017698:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801769c:	f003 030c 	and.w	r3, r3, #12
 80176a0:	2b0c      	cmp	r3, #12
 80176a2:	d005      	beq.n	80176b0 <create_name+0x308>
 80176a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80176a8:	f003 0303 	and.w	r3, r3, #3
 80176ac:	2b03      	cmp	r3, #3
 80176ae:	d105      	bne.n	80176bc <create_name+0x314>
 80176b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80176b4:	f043 0302 	orr.w	r3, r3, #2
 80176b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80176bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80176c0:	f003 0302 	and.w	r3, r3, #2
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	d117      	bne.n	80176f8 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80176c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80176cc:	f003 0303 	and.w	r3, r3, #3
 80176d0:	2b01      	cmp	r3, #1
 80176d2:	d105      	bne.n	80176e0 <create_name+0x338>
 80176d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80176d8:	f043 0310 	orr.w	r3, r3, #16
 80176dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80176e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80176e4:	f003 030c 	and.w	r3, r3, #12
 80176e8:	2b04      	cmp	r3, #4
 80176ea:	d105      	bne.n	80176f8 <create_name+0x350>
 80176ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80176f0:	f043 0308 	orr.w	r3, r3, #8
 80176f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80176fe:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 8017702:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8017704:	4618      	mov	r0, r3
 8017706:	3728      	adds	r7, #40	; 0x28
 8017708:	46bd      	mov	sp, r7
 801770a:	bd80      	pop	{r7, pc}
 801770c:	0801ab64 	.word	0x0801ab64
 8017710:	0801ac40 	.word	0x0801ac40
 8017714:	0801ab70 	.word	0x0801ab70

08017718 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8017718:	b590      	push	{r4, r7, lr}
 801771a:	b087      	sub	sp, #28
 801771c:	af00      	add	r7, sp, #0
 801771e:	6078      	str	r0, [r7, #4]
 8017720:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8017726:	693b      	ldr	r3, [r7, #16]
 8017728:	681b      	ldr	r3, [r3, #0]
 801772a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801772c:	e002      	b.n	8017734 <follow_path+0x1c>
 801772e:	683b      	ldr	r3, [r7, #0]
 8017730:	3301      	adds	r3, #1
 8017732:	603b      	str	r3, [r7, #0]
 8017734:	683b      	ldr	r3, [r7, #0]
 8017736:	781b      	ldrb	r3, [r3, #0]
 8017738:	2b2f      	cmp	r3, #47	; 0x2f
 801773a:	d0f8      	beq.n	801772e <follow_path+0x16>
 801773c:	683b      	ldr	r3, [r7, #0]
 801773e:	781b      	ldrb	r3, [r3, #0]
 8017740:	2b5c      	cmp	r3, #92	; 0x5c
 8017742:	d0f4      	beq.n	801772e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8017744:	693b      	ldr	r3, [r7, #16]
 8017746:	2200      	movs	r2, #0
 8017748:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 801774a:	693b      	ldr	r3, [r7, #16]
 801774c:	2200      	movs	r2, #0
 801774e:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8017750:	683b      	ldr	r3, [r7, #0]
 8017752:	781b      	ldrb	r3, [r3, #0]
 8017754:	2b1f      	cmp	r3, #31
 8017756:	d80a      	bhi.n	801776e <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	2280      	movs	r2, #128	; 0x80
 801775c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 8017760:	2100      	movs	r1, #0
 8017762:	6878      	ldr	r0, [r7, #4]
 8017764:	f7fe fc58 	bl	8016018 <dir_sdi>
 8017768:	4603      	mov	r3, r0
 801776a:	75fb      	strb	r3, [r7, #23]
 801776c:	e07c      	b.n	8017868 <follow_path+0x150>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801776e:	463b      	mov	r3, r7
 8017770:	4619      	mov	r1, r3
 8017772:	6878      	ldr	r0, [r7, #4]
 8017774:	f7ff fe18 	bl	80173a8 <create_name>
 8017778:	4603      	mov	r3, r0
 801777a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801777c:	7dfb      	ldrb	r3, [r7, #23]
 801777e:	2b00      	cmp	r3, #0
 8017780:	d16d      	bne.n	801785e <follow_path+0x146>
			res = dir_find(dp);				/* Find an object with the segment name */
 8017782:	6878      	ldr	r0, [r7, #4]
 8017784:	f7ff fb36 	bl	8016df4 <dir_find>
 8017788:	4603      	mov	r3, r0
 801778a:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8017792:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8017794:	7dfb      	ldrb	r3, [r7, #23]
 8017796:	2b00      	cmp	r3, #0
 8017798:	d00a      	beq.n	80177b0 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801779a:	7dfb      	ldrb	r3, [r7, #23]
 801779c:	2b04      	cmp	r3, #4
 801779e:	d160      	bne.n	8017862 <follow_path+0x14a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80177a0:	7afb      	ldrb	r3, [r7, #11]
 80177a2:	f003 0304 	and.w	r3, r3, #4
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d15b      	bne.n	8017862 <follow_path+0x14a>
 80177aa:	2305      	movs	r3, #5
 80177ac:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80177ae:	e058      	b.n	8017862 <follow_path+0x14a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80177b0:	7afb      	ldrb	r3, [r7, #11]
 80177b2:	f003 0304 	and.w	r3, r3, #4
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	d155      	bne.n	8017866 <follow_path+0x14e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80177ba:	693b      	ldr	r3, [r7, #16]
 80177bc:	799b      	ldrb	r3, [r3, #6]
 80177be:	f003 0310 	and.w	r3, r3, #16
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	d102      	bne.n	80177cc <follow_path+0xb4>
				res = FR_NO_PATH; break;
 80177c6:	2305      	movs	r3, #5
 80177c8:	75fb      	strb	r3, [r7, #23]
 80177ca:	e04d      	b.n	8017868 <follow_path+0x150>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 80177cc:	68fb      	ldr	r3, [r7, #12]
 80177ce:	781b      	ldrb	r3, [r3, #0]
 80177d0:	2b04      	cmp	r3, #4
 80177d2:	d12f      	bne.n	8017834 <follow_path+0x11c>
				obj->c_scl = obj->sclust;
 80177d4:	693b      	ldr	r3, [r7, #16]
 80177d6:	689a      	ldr	r2, [r3, #8]
 80177d8:	693b      	ldr	r3, [r7, #16]
 80177da:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 80177dc:	693b      	ldr	r3, [r7, #16]
 80177de:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80177e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80177e6:	693a      	ldr	r2, [r7, #16]
 80177e8:	79d2      	ldrb	r2, [r2, #7]
 80177ea:	431a      	orrs	r2, r3
 80177ec:	693b      	ldr	r3, [r7, #16]
 80177ee:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80177f4:	693b      	ldr	r3, [r7, #16]
 80177f6:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 80177f8:	68fb      	ldr	r3, [r7, #12]
 80177fa:	695b      	ldr	r3, [r3, #20]
 80177fc:	3334      	adds	r3, #52	; 0x34
 80177fe:	4618      	mov	r0, r3
 8017800:	f7fd f9a2 	bl	8014b48 <ld_dword>
 8017804:	4602      	mov	r2, r0
 8017806:	693b      	ldr	r3, [r7, #16]
 8017808:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 801780a:	68fb      	ldr	r3, [r7, #12]
 801780c:	695b      	ldr	r3, [r3, #20]
 801780e:	3321      	adds	r3, #33	; 0x21
 8017810:	781b      	ldrb	r3, [r3, #0]
 8017812:	f003 0302 	and.w	r3, r3, #2
 8017816:	b2da      	uxtb	r2, r3
 8017818:	693b      	ldr	r3, [r7, #16]
 801781a:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 801781c:	68fb      	ldr	r3, [r7, #12]
 801781e:	695b      	ldr	r3, [r3, #20]
 8017820:	3338      	adds	r3, #56	; 0x38
 8017822:	4618      	mov	r0, r3
 8017824:	f7fd f9b3 	bl	8014b8e <ld_qword>
 8017828:	4603      	mov	r3, r0
 801782a:	460c      	mov	r4, r1
 801782c:	693a      	ldr	r2, [r7, #16]
 801782e:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8017832:	e79c      	b.n	801776e <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8017834:	68fb      	ldr	r3, [r7, #12]
 8017836:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801783e:	68fa      	ldr	r2, [r7, #12]
 8017840:	8992      	ldrh	r2, [r2, #12]
 8017842:	fbb3 f0f2 	udiv	r0, r3, r2
 8017846:	fb02 f200 	mul.w	r2, r2, r0
 801784a:	1a9b      	subs	r3, r3, r2
 801784c:	440b      	add	r3, r1
 801784e:	4619      	mov	r1, r3
 8017850:	68f8      	ldr	r0, [r7, #12]
 8017852:	f7fe fdb7 	bl	80163c4 <ld_clust>
 8017856:	4602      	mov	r2, r0
 8017858:	693b      	ldr	r3, [r7, #16]
 801785a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801785c:	e787      	b.n	801776e <follow_path+0x56>
			if (res != FR_OK) break;
 801785e:	bf00      	nop
 8017860:	e002      	b.n	8017868 <follow_path+0x150>
				break;
 8017862:	bf00      	nop
 8017864:	e000      	b.n	8017868 <follow_path+0x150>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8017866:	bf00      	nop
			}
		}
	}

	return res;
 8017868:	7dfb      	ldrb	r3, [r7, #23]
}
 801786a:	4618      	mov	r0, r3
 801786c:	371c      	adds	r7, #28
 801786e:	46bd      	mov	sp, r7
 8017870:	bd90      	pop	{r4, r7, pc}

08017872 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8017872:	b480      	push	{r7}
 8017874:	b087      	sub	sp, #28
 8017876:	af00      	add	r7, sp, #0
 8017878:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801787a:	f04f 33ff 	mov.w	r3, #4294967295
 801787e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	681b      	ldr	r3, [r3, #0]
 8017884:	2b00      	cmp	r3, #0
 8017886:	d031      	beq.n	80178ec <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	617b      	str	r3, [r7, #20]
 801788e:	e002      	b.n	8017896 <get_ldnumber+0x24>
 8017890:	697b      	ldr	r3, [r7, #20]
 8017892:	3301      	adds	r3, #1
 8017894:	617b      	str	r3, [r7, #20]
 8017896:	697b      	ldr	r3, [r7, #20]
 8017898:	781b      	ldrb	r3, [r3, #0]
 801789a:	2b1f      	cmp	r3, #31
 801789c:	d903      	bls.n	80178a6 <get_ldnumber+0x34>
 801789e:	697b      	ldr	r3, [r7, #20]
 80178a0:	781b      	ldrb	r3, [r3, #0]
 80178a2:	2b3a      	cmp	r3, #58	; 0x3a
 80178a4:	d1f4      	bne.n	8017890 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80178a6:	697b      	ldr	r3, [r7, #20]
 80178a8:	781b      	ldrb	r3, [r3, #0]
 80178aa:	2b3a      	cmp	r3, #58	; 0x3a
 80178ac:	d11c      	bne.n	80178e8 <get_ldnumber+0x76>
			tp = *path;
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	681b      	ldr	r3, [r3, #0]
 80178b2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80178b4:	68fb      	ldr	r3, [r7, #12]
 80178b6:	1c5a      	adds	r2, r3, #1
 80178b8:	60fa      	str	r2, [r7, #12]
 80178ba:	781b      	ldrb	r3, [r3, #0]
 80178bc:	3b30      	subs	r3, #48	; 0x30
 80178be:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80178c0:	68bb      	ldr	r3, [r7, #8]
 80178c2:	2b09      	cmp	r3, #9
 80178c4:	d80e      	bhi.n	80178e4 <get_ldnumber+0x72>
 80178c6:	68fa      	ldr	r2, [r7, #12]
 80178c8:	697b      	ldr	r3, [r7, #20]
 80178ca:	429a      	cmp	r2, r3
 80178cc:	d10a      	bne.n	80178e4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80178ce:	68bb      	ldr	r3, [r7, #8]
 80178d0:	2b01      	cmp	r3, #1
 80178d2:	d807      	bhi.n	80178e4 <get_ldnumber+0x72>
					vol = (int)i;
 80178d4:	68bb      	ldr	r3, [r7, #8]
 80178d6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80178d8:	697b      	ldr	r3, [r7, #20]
 80178da:	3301      	adds	r3, #1
 80178dc:	617b      	str	r3, [r7, #20]
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	697a      	ldr	r2, [r7, #20]
 80178e2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80178e4:	693b      	ldr	r3, [r7, #16]
 80178e6:	e002      	b.n	80178ee <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80178e8:	2300      	movs	r3, #0
 80178ea:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80178ec:	693b      	ldr	r3, [r7, #16]
}
 80178ee:	4618      	mov	r0, r3
 80178f0:	371c      	adds	r7, #28
 80178f2:	46bd      	mov	sp, r7
 80178f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178f8:	4770      	bx	lr
	...

080178fc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80178fc:	b580      	push	{r7, lr}
 80178fe:	b082      	sub	sp, #8
 8017900:	af00      	add	r7, sp, #0
 8017902:	6078      	str	r0, [r7, #4]
 8017904:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	2200      	movs	r2, #0
 801790a:	70da      	strb	r2, [r3, #3]
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	f04f 32ff 	mov.w	r2, #4294967295
 8017912:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8017914:	6839      	ldr	r1, [r7, #0]
 8017916:	6878      	ldr	r0, [r7, #4]
 8017918:	f7fd fcf2 	bl	8015300 <move_window>
 801791c:	4603      	mov	r3, r0
 801791e:	2b00      	cmp	r3, #0
 8017920:	d001      	beq.n	8017926 <check_fs+0x2a>
 8017922:	2304      	movs	r3, #4
 8017924:	e044      	b.n	80179b0 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	333c      	adds	r3, #60	; 0x3c
 801792a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801792e:	4618      	mov	r0, r3
 8017930:	f7fd f8f2 	bl	8014b18 <ld_word>
 8017934:	4603      	mov	r3, r0
 8017936:	461a      	mov	r2, r3
 8017938:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801793c:	429a      	cmp	r2, r3
 801793e:	d001      	beq.n	8017944 <check_fs+0x48>
 8017940:	2303      	movs	r3, #3
 8017942:	e035      	b.n	80179b0 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801794a:	2be9      	cmp	r3, #233	; 0xe9
 801794c:	d009      	beq.n	8017962 <check_fs+0x66>
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017954:	2beb      	cmp	r3, #235	; 0xeb
 8017956:	d11e      	bne.n	8017996 <check_fs+0x9a>
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801795e:	2b90      	cmp	r3, #144	; 0x90
 8017960:	d119      	bne.n	8017996 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	333c      	adds	r3, #60	; 0x3c
 8017966:	3336      	adds	r3, #54	; 0x36
 8017968:	4618      	mov	r0, r3
 801796a:	f7fd f8ed 	bl	8014b48 <ld_dword>
 801796e:	4603      	mov	r3, r0
 8017970:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8017974:	4a10      	ldr	r2, [pc, #64]	; (80179b8 <check_fs+0xbc>)
 8017976:	4293      	cmp	r3, r2
 8017978:	d101      	bne.n	801797e <check_fs+0x82>
 801797a:	2300      	movs	r3, #0
 801797c:	e018      	b.n	80179b0 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801797e:	687b      	ldr	r3, [r7, #4]
 8017980:	333c      	adds	r3, #60	; 0x3c
 8017982:	3352      	adds	r3, #82	; 0x52
 8017984:	4618      	mov	r0, r3
 8017986:	f7fd f8df 	bl	8014b48 <ld_dword>
 801798a:	4602      	mov	r2, r0
 801798c:	4b0b      	ldr	r3, [pc, #44]	; (80179bc <check_fs+0xc0>)
 801798e:	429a      	cmp	r2, r3
 8017990:	d101      	bne.n	8017996 <check_fs+0x9a>
 8017992:	2300      	movs	r3, #0
 8017994:	e00c      	b.n	80179b0 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	333c      	adds	r3, #60	; 0x3c
 801799a:	220b      	movs	r2, #11
 801799c:	4908      	ldr	r1, [pc, #32]	; (80179c0 <check_fs+0xc4>)
 801799e:	4618      	mov	r0, r3
 80179a0:	f7fd fabb 	bl	8014f1a <mem_cmp>
 80179a4:	4603      	mov	r3, r0
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d101      	bne.n	80179ae <check_fs+0xb2>
 80179aa:	2301      	movs	r3, #1
 80179ac:	e000      	b.n	80179b0 <check_fs+0xb4>
#endif
	return 2;
 80179ae:	2302      	movs	r3, #2
}
 80179b0:	4618      	mov	r0, r3
 80179b2:	3708      	adds	r7, #8
 80179b4:	46bd      	mov	sp, r7
 80179b6:	bd80      	pop	{r7, pc}
 80179b8:	00544146 	.word	0x00544146
 80179bc:	33544146 	.word	0x33544146
 80179c0:	0801ab78 	.word	0x0801ab78

080179c4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80179c4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80179c8:	b098      	sub	sp, #96	; 0x60
 80179ca:	af00      	add	r7, sp, #0
 80179cc:	60f8      	str	r0, [r7, #12]
 80179ce:	60b9      	str	r1, [r7, #8]
 80179d0:	4613      	mov	r3, r2
 80179d2:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80179d4:	68bb      	ldr	r3, [r7, #8]
 80179d6:	2200      	movs	r2, #0
 80179d8:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80179da:	68f8      	ldr	r0, [r7, #12]
 80179dc:	f7ff ff49 	bl	8017872 <get_ldnumber>
 80179e0:	6478      	str	r0, [r7, #68]	; 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 80179e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80179e4:	2b00      	cmp	r3, #0
 80179e6:	da01      	bge.n	80179ec <find_volume+0x28>
 80179e8:	230b      	movs	r3, #11
 80179ea:	e368      	b.n	80180be <find_volume+0x6fa>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80179ec:	4aaa      	ldr	r2, [pc, #680]	; (8017c98 <find_volume+0x2d4>)
 80179ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80179f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80179f4:	643b      	str	r3, [r7, #64]	; 0x40
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80179f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80179f8:	2b00      	cmp	r3, #0
 80179fa:	d101      	bne.n	8017a00 <find_volume+0x3c>
 80179fc:	230c      	movs	r3, #12
 80179fe:	e35e      	b.n	80180be <find_volume+0x6fa>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8017a00:	68bb      	ldr	r3, [r7, #8]
 8017a02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017a04:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8017a06:	79fb      	ldrb	r3, [r7, #7]
 8017a08:	f023 0301 	bic.w	r3, r3, #1
 8017a0c:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8017a0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a10:	781b      	ldrb	r3, [r3, #0]
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d01a      	beq.n	8017a4c <find_volume+0x88>
		stat = disk_status(fs->drv);
 8017a16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a18:	785b      	ldrb	r3, [r3, #1]
 8017a1a:	4618      	mov	r0, r3
 8017a1c:	f7fc ffde 	bl	80149dc <disk_status>
 8017a20:	4603      	mov	r3, r0
 8017a22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8017a26:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017a2a:	f003 0301 	and.w	r3, r3, #1
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	d10c      	bne.n	8017a4c <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8017a32:	79fb      	ldrb	r3, [r7, #7]
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	d007      	beq.n	8017a48 <find_volume+0x84>
 8017a38:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017a3c:	f003 0304 	and.w	r3, r3, #4
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	d001      	beq.n	8017a48 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 8017a44:	230a      	movs	r3, #10
 8017a46:	e33a      	b.n	80180be <find_volume+0x6fa>
			}
			return FR_OK;				/* The file system object is valid */
 8017a48:	2300      	movs	r3, #0
 8017a4a:	e338      	b.n	80180be <find_volume+0x6fa>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8017a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a4e:	2200      	movs	r2, #0
 8017a50:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8017a52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017a54:	b2da      	uxtb	r2, r3
 8017a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a58:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8017a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a5c:	785b      	ldrb	r3, [r3, #1]
 8017a5e:	4618      	mov	r0, r3
 8017a60:	f7fc ffd6 	bl	8014a10 <disk_initialize>
 8017a64:	4603      	mov	r3, r0
 8017a66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8017a6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017a6e:	f003 0301 	and.w	r3, r3, #1
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	d001      	beq.n	8017a7a <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8017a76:	2303      	movs	r3, #3
 8017a78:	e321      	b.n	80180be <find_volume+0x6fa>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8017a7a:	79fb      	ldrb	r3, [r7, #7]
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d007      	beq.n	8017a90 <find_volume+0xcc>
 8017a80:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017a84:	f003 0304 	and.w	r3, r3, #4
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	d001      	beq.n	8017a90 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8017a8c:	230a      	movs	r3, #10
 8017a8e:	e316      	b.n	80180be <find_volume+0x6fa>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8017a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a92:	7858      	ldrb	r0, [r3, #1]
 8017a94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a96:	330c      	adds	r3, #12
 8017a98:	461a      	mov	r2, r3
 8017a9a:	2102      	movs	r1, #2
 8017a9c:	f7fd f81e 	bl	8014adc <disk_ioctl>
 8017aa0:	4603      	mov	r3, r0
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d001      	beq.n	8017aaa <find_volume+0xe6>
 8017aa6:	2301      	movs	r3, #1
 8017aa8:	e309      	b.n	80180be <find_volume+0x6fa>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8017aaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017aac:	899b      	ldrh	r3, [r3, #12]
 8017aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017ab2:	d80d      	bhi.n	8017ad0 <find_volume+0x10c>
 8017ab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ab6:	899b      	ldrh	r3, [r3, #12]
 8017ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017abc:	d308      	bcc.n	8017ad0 <find_volume+0x10c>
 8017abe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ac0:	899b      	ldrh	r3, [r3, #12]
 8017ac2:	461a      	mov	r2, r3
 8017ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ac6:	899b      	ldrh	r3, [r3, #12]
 8017ac8:	3b01      	subs	r3, #1
 8017aca:	4013      	ands	r3, r2
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d001      	beq.n	8017ad4 <find_volume+0x110>
 8017ad0:	2301      	movs	r3, #1
 8017ad2:	e2f4      	b.n	80180be <find_volume+0x6fa>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8017ad4:	2300      	movs	r3, #0
 8017ad6:	65bb      	str	r3, [r7, #88]	; 0x58
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8017ad8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8017ada:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8017adc:	f7ff ff0e 	bl	80178fc <check_fs>
 8017ae0:	4603      	mov	r3, r0
 8017ae2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8017ae6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017aea:	2b02      	cmp	r3, #2
 8017aec:	d14b      	bne.n	8017b86 <find_volume+0x1c2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8017aee:	2300      	movs	r3, #0
 8017af0:	64bb      	str	r3, [r7, #72]	; 0x48
 8017af2:	e01f      	b.n	8017b34 <find_volume+0x170>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8017af4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017af6:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8017afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017afc:	011b      	lsls	r3, r3, #4
 8017afe:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8017b02:	4413      	add	r3, r2
 8017b04:	63bb      	str	r3, [r7, #56]	; 0x38
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8017b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b08:	3304      	adds	r3, #4
 8017b0a:	781b      	ldrb	r3, [r3, #0]
 8017b0c:	2b00      	cmp	r3, #0
 8017b0e:	d006      	beq.n	8017b1e <find_volume+0x15a>
 8017b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b12:	3308      	adds	r3, #8
 8017b14:	4618      	mov	r0, r3
 8017b16:	f7fd f817 	bl	8014b48 <ld_dword>
 8017b1a:	4602      	mov	r2, r0
 8017b1c:	e000      	b.n	8017b20 <find_volume+0x15c>
 8017b1e:	2200      	movs	r2, #0
 8017b20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017b22:	009b      	lsls	r3, r3, #2
 8017b24:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8017b28:	440b      	add	r3, r1
 8017b2a:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8017b2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017b30:	3301      	adds	r3, #1
 8017b32:	64bb      	str	r3, [r7, #72]	; 0x48
 8017b34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017b36:	2b03      	cmp	r3, #3
 8017b38:	d9dc      	bls.n	8017af4 <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8017b3a:	2300      	movs	r3, #0
 8017b3c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (i) i--;
 8017b3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d002      	beq.n	8017b4a <find_volume+0x186>
 8017b44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017b46:	3b01      	subs	r3, #1
 8017b48:	64bb      	str	r3, [r7, #72]	; 0x48
		do {							/* Find an FAT volume */
			bsect = br[i];
 8017b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017b4c:	009b      	lsls	r3, r3, #2
 8017b4e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8017b52:	4413      	add	r3, r2
 8017b54:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8017b58:	65bb      	str	r3, [r7, #88]	; 0x58
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8017b5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	d005      	beq.n	8017b6c <find_volume+0x1a8>
 8017b60:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8017b62:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8017b64:	f7ff feca 	bl	80178fc <check_fs>
 8017b68:	4603      	mov	r3, r0
 8017b6a:	e000      	b.n	8017b6e <find_volume+0x1aa>
 8017b6c:	2303      	movs	r3, #3
 8017b6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8017b72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017b76:	2b01      	cmp	r3, #1
 8017b78:	d905      	bls.n	8017b86 <find_volume+0x1c2>
 8017b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017b7c:	3301      	adds	r3, #1
 8017b7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8017b80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017b82:	2b03      	cmp	r3, #3
 8017b84:	d9e1      	bls.n	8017b4a <find_volume+0x186>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8017b86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017b8a:	2b04      	cmp	r3, #4
 8017b8c:	d101      	bne.n	8017b92 <find_volume+0x1ce>
 8017b8e:	2301      	movs	r3, #1
 8017b90:	e295      	b.n	80180be <find_volume+0x6fa>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8017b92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017b96:	2b01      	cmp	r3, #1
 8017b98:	d901      	bls.n	8017b9e <find_volume+0x1da>
 8017b9a:	230d      	movs	r3, #13
 8017b9c:	e28f      	b.n	80180be <find_volume+0x6fa>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 8017b9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017ba2:	2b01      	cmp	r3, #1
 8017ba4:	f040 8101 	bne.w	8017daa <find_volume+0x3e6>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8017ba8:	230b      	movs	r3, #11
 8017baa:	64bb      	str	r3, [r7, #72]	; 0x48
 8017bac:	e002      	b.n	8017bb4 <find_volume+0x1f0>
 8017bae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017bb0:	3301      	adds	r3, #1
 8017bb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8017bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017bb6:	2b3f      	cmp	r3, #63	; 0x3f
 8017bb8:	d806      	bhi.n	8017bc8 <find_volume+0x204>
 8017bba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017bbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017bbe:	4413      	add	r3, r2
 8017bc0:	333c      	adds	r3, #60	; 0x3c
 8017bc2:	781b      	ldrb	r3, [r3, #0]
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d0f2      	beq.n	8017bae <find_volume+0x1ea>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8017bc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017bca:	2b3f      	cmp	r3, #63	; 0x3f
 8017bcc:	d801      	bhi.n	8017bd2 <find_volume+0x20e>
 8017bce:	230d      	movs	r3, #13
 8017bd0:	e275      	b.n	80180be <find_volume+0x6fa>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 8017bd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017bd4:	333c      	adds	r3, #60	; 0x3c
 8017bd6:	3368      	adds	r3, #104	; 0x68
 8017bd8:	4618      	mov	r0, r3
 8017bda:	f7fc ff9d 	bl	8014b18 <ld_word>
 8017bde:	4603      	mov	r3, r0
 8017be0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017be4:	d001      	beq.n	8017bea <find_volume+0x226>
 8017be6:	230d      	movs	r3, #13
 8017be8:	e269      	b.n	80180be <find_volume+0x6fa>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 8017bea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017bec:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8017bf0:	461a      	mov	r2, r3
 8017bf2:	2301      	movs	r3, #1
 8017bf4:	4093      	lsls	r3, r2
 8017bf6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017bf8:	8992      	ldrh	r2, [r2, #12]
 8017bfa:	4293      	cmp	r3, r2
 8017bfc:	d001      	beq.n	8017c02 <find_volume+0x23e>
			return FR_NO_FILESYSTEM;
 8017bfe:	230d      	movs	r3, #13
 8017c00:	e25d      	b.n	80180be <find_volume+0x6fa>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 8017c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017c04:	333c      	adds	r3, #60	; 0x3c
 8017c06:	3348      	adds	r3, #72	; 0x48
 8017c08:	4618      	mov	r0, r3
 8017c0a:	f7fc ffc0 	bl	8014b8e <ld_qword>
 8017c0e:	460a      	mov	r2, r1
 8017c10:	4601      	mov	r1, r0
 8017c12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017c14:	469b      	mov	fp, r3
 8017c16:	f04f 0c00 	mov.w	ip, #0
 8017c1a:	eb1b 0301 	adds.w	r3, fp, r1
 8017c1e:	eb4c 0402 	adc.w	r4, ip, r2
 8017c22:	e9c7 3408 	strd	r3, r4, [r7, #32]
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 8017c26:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8017c2a:	2c01      	cmp	r4, #1
 8017c2c:	bf08      	it	eq
 8017c2e:	2b00      	cmpeq	r3, #0
 8017c30:	d301      	bcc.n	8017c36 <find_volume+0x272>
 8017c32:	230d      	movs	r3, #13
 8017c34:	e243      	b.n	80180be <find_volume+0x6fa>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 8017c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017c38:	333c      	adds	r3, #60	; 0x3c
 8017c3a:	3354      	adds	r3, #84	; 0x54
 8017c3c:	4618      	mov	r0, r3
 8017c3e:	f7fc ff83 	bl	8014b48 <ld_dword>
 8017c42:	4602      	mov	r2, r0
 8017c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017c46:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8017c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017c4a:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8017c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017c50:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8017c52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017c54:	789b      	ldrb	r3, [r3, #2]
 8017c56:	2b01      	cmp	r3, #1
 8017c58:	d001      	beq.n	8017c5e <find_volume+0x29a>
 8017c5a:	230d      	movs	r3, #13
 8017c5c:	e22f      	b.n	80180be <find_volume+0x6fa>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8017c5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017c60:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8017c64:	461a      	mov	r2, r3
 8017c66:	2301      	movs	r3, #1
 8017c68:	4093      	lsls	r3, r2
 8017c6a:	b29a      	uxth	r2, r3
 8017c6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017c6e:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8017c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017c72:	895b      	ldrh	r3, [r3, #10]
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d101      	bne.n	8017c7c <find_volume+0x2b8>
 8017c78:	230d      	movs	r3, #13
 8017c7a:	e220      	b.n	80180be <find_volume+0x6fa>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8017c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017c7e:	333c      	adds	r3, #60	; 0x3c
 8017c80:	335c      	adds	r3, #92	; 0x5c
 8017c82:	4618      	mov	r0, r3
 8017c84:	f7fc ff60 	bl	8014b48 <ld_dword>
 8017c88:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8017c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c8c:	4a03      	ldr	r2, [pc, #12]	; (8017c9c <find_volume+0x2d8>)
 8017c8e:	4293      	cmp	r3, r2
 8017c90:	d906      	bls.n	8017ca0 <find_volume+0x2dc>
 8017c92:	230d      	movs	r3, #13
 8017c94:	e213      	b.n	80180be <find_volume+0x6fa>
 8017c96:	bf00      	nop
 8017c98:	24000284 	.word	0x24000284
 8017c9c:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 8017ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ca2:	1c9a      	adds	r2, r3, #2
 8017ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ca6:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 8017ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017caa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017cac:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 8017cae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017cb0:	333c      	adds	r3, #60	; 0x3c
 8017cb2:	3358      	adds	r3, #88	; 0x58
 8017cb4:	4618      	mov	r0, r3
 8017cb6:	f7fc ff47 	bl	8014b48 <ld_dword>
 8017cba:	4602      	mov	r2, r0
 8017cbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017cbe:	441a      	add	r2, r3
 8017cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017cc2:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8017cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017cc6:	333c      	adds	r3, #60	; 0x3c
 8017cc8:	3350      	adds	r3, #80	; 0x50
 8017cca:	4618      	mov	r0, r3
 8017ccc:	f7fc ff3c 	bl	8014b48 <ld_dword>
 8017cd0:	4602      	mov	r2, r0
 8017cd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017cd4:	441a      	add	r2, r3
 8017cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017cd8:	62da      	str	r2, [r3, #44]	; 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8017cda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017cde:	4619      	mov	r1, r3
 8017ce0:	f04f 0200 	mov.w	r2, #0
 8017ce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ce6:	895b      	ldrh	r3, [r3, #10]
 8017ce8:	4618      	mov	r0, r3
 8017cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cec:	fb03 f300 	mul.w	r3, r3, r0
 8017cf0:	469b      	mov	fp, r3
 8017cf2:	f04f 0c00 	mov.w	ip, #0
 8017cf6:	eb1b 0301 	adds.w	r3, fp, r1
 8017cfa:	eb4c 0402 	adc.w	r4, ip, r2
 8017cfe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8017d02:	42a2      	cmp	r2, r4
 8017d04:	bf08      	it	eq
 8017d06:	4299      	cmpeq	r1, r3
 8017d08:	d201      	bcs.n	8017d0e <find_volume+0x34a>
 8017d0a:	230d      	movs	r3, #13
 8017d0c:	e1d7      	b.n	80180be <find_volume+0x6fa>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8017d0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017d10:	333c      	adds	r3, #60	; 0x3c
 8017d12:	3360      	adds	r3, #96	; 0x60
 8017d14:	4618      	mov	r0, r3
 8017d16:	f7fc ff17 	bl	8014b48 <ld_dword>
 8017d1a:	4602      	mov	r2, r0
 8017d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017d1e:	631a      	str	r2, [r3, #48]	; 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 8017d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d24:	4619      	mov	r1, r3
 8017d26:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8017d28:	f7fd fb88 	bl	801543c <clust2sect>
 8017d2c:	4603      	mov	r3, r0
 8017d2e:	4619      	mov	r1, r3
 8017d30:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8017d32:	f7fd fae5 	bl	8015300 <move_window>
 8017d36:	4603      	mov	r3, r0
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	d001      	beq.n	8017d40 <find_volume+0x37c>
 8017d3c:	2301      	movs	r3, #1
 8017d3e:	e1be      	b.n	80180be <find_volume+0x6fa>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8017d40:	2300      	movs	r3, #0
 8017d42:	64bb      	str	r3, [r7, #72]	; 0x48
 8017d44:	e015      	b.n	8017d72 <find_volume+0x3ae>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8017d46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017d48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017d4a:	4413      	add	r3, r2
 8017d4c:	333c      	adds	r3, #60	; 0x3c
 8017d4e:	781b      	ldrb	r3, [r3, #0]
 8017d50:	2b81      	cmp	r3, #129	; 0x81
 8017d52:	d10b      	bne.n	8017d6c <find_volume+0x3a8>
 8017d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017d56:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8017d5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017d5c:	3314      	adds	r3, #20
 8017d5e:	4413      	add	r3, r2
 8017d60:	4618      	mov	r0, r3
 8017d62:	f7fc fef1 	bl	8014b48 <ld_dword>
 8017d66:	4603      	mov	r3, r0
 8017d68:	2b02      	cmp	r3, #2
 8017d6a:	d009      	beq.n	8017d80 <find_volume+0x3bc>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8017d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017d6e:	3320      	adds	r3, #32
 8017d70:	64bb      	str	r3, [r7, #72]	; 0x48
 8017d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017d74:	899b      	ldrh	r3, [r3, #12]
 8017d76:	461a      	mov	r2, r3
 8017d78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017d7a:	4293      	cmp	r3, r2
 8017d7c:	d3e3      	bcc.n	8017d46 <find_volume+0x382>
 8017d7e:	e000      	b.n	8017d82 <find_volume+0x3be>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8017d80:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 8017d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017d84:	899b      	ldrh	r3, [r3, #12]
 8017d86:	461a      	mov	r2, r3
 8017d88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017d8a:	4293      	cmp	r3, r2
 8017d8c:	d101      	bne.n	8017d92 <find_volume+0x3ce>
 8017d8e:	230d      	movs	r3, #13
 8017d90:	e195      	b.n	80180be <find_volume+0x6fa>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8017d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017d94:	f04f 32ff 	mov.w	r2, #4294967295
 8017d98:	61da      	str	r2, [r3, #28]
 8017d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017d9c:	69da      	ldr	r2, [r3, #28]
 8017d9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017da0:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 8017da2:	2304      	movs	r3, #4
 8017da4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8017da8:	e177      	b.n	801809a <find_volume+0x6d6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8017daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017dac:	333c      	adds	r3, #60	; 0x3c
 8017dae:	330b      	adds	r3, #11
 8017db0:	4618      	mov	r0, r3
 8017db2:	f7fc feb1 	bl	8014b18 <ld_word>
 8017db6:	4603      	mov	r3, r0
 8017db8:	461a      	mov	r2, r3
 8017dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017dbc:	899b      	ldrh	r3, [r3, #12]
 8017dbe:	429a      	cmp	r2, r3
 8017dc0:	d001      	beq.n	8017dc6 <find_volume+0x402>
 8017dc2:	230d      	movs	r3, #13
 8017dc4:	e17b      	b.n	80180be <find_volume+0x6fa>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8017dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017dc8:	333c      	adds	r3, #60	; 0x3c
 8017dca:	3316      	adds	r3, #22
 8017dcc:	4618      	mov	r0, r3
 8017dce:	f7fc fea3 	bl	8014b18 <ld_word>
 8017dd2:	4603      	mov	r3, r0
 8017dd4:	657b      	str	r3, [r7, #84]	; 0x54
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8017dd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017dd8:	2b00      	cmp	r3, #0
 8017dda:	d106      	bne.n	8017dea <find_volume+0x426>
 8017ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017dde:	333c      	adds	r3, #60	; 0x3c
 8017de0:	3324      	adds	r3, #36	; 0x24
 8017de2:	4618      	mov	r0, r3
 8017de4:	f7fc feb0 	bl	8014b48 <ld_dword>
 8017de8:	6578      	str	r0, [r7, #84]	; 0x54
		fs->fsize = fasize;
 8017dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017dec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017dee:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8017df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017df2:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8017df6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017df8:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8017dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017dfc:	789b      	ldrb	r3, [r3, #2]
 8017dfe:	2b01      	cmp	r3, #1
 8017e00:	d005      	beq.n	8017e0e <find_volume+0x44a>
 8017e02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017e04:	789b      	ldrb	r3, [r3, #2]
 8017e06:	2b02      	cmp	r3, #2
 8017e08:	d001      	beq.n	8017e0e <find_volume+0x44a>
 8017e0a:	230d      	movs	r3, #13
 8017e0c:	e157      	b.n	80180be <find_volume+0x6fa>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8017e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017e10:	789b      	ldrb	r3, [r3, #2]
 8017e12:	461a      	mov	r2, r3
 8017e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017e16:	fb02 f303 	mul.w	r3, r2, r3
 8017e1a:	657b      	str	r3, [r7, #84]	; 0x54

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8017e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017e1e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8017e22:	b29a      	uxth	r2, r3
 8017e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017e26:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8017e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017e2a:	895b      	ldrh	r3, [r3, #10]
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	d008      	beq.n	8017e42 <find_volume+0x47e>
 8017e30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017e32:	895b      	ldrh	r3, [r3, #10]
 8017e34:	461a      	mov	r2, r3
 8017e36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017e38:	895b      	ldrh	r3, [r3, #10]
 8017e3a:	3b01      	subs	r3, #1
 8017e3c:	4013      	ands	r3, r2
 8017e3e:	2b00      	cmp	r3, #0
 8017e40:	d001      	beq.n	8017e46 <find_volume+0x482>
 8017e42:	230d      	movs	r3, #13
 8017e44:	e13b      	b.n	80180be <find_volume+0x6fa>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8017e46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017e48:	333c      	adds	r3, #60	; 0x3c
 8017e4a:	3311      	adds	r3, #17
 8017e4c:	4618      	mov	r0, r3
 8017e4e:	f7fc fe63 	bl	8014b18 <ld_word>
 8017e52:	4603      	mov	r3, r0
 8017e54:	461a      	mov	r2, r3
 8017e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017e58:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8017e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017e5c:	891b      	ldrh	r3, [r3, #8]
 8017e5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017e60:	8992      	ldrh	r2, [r2, #12]
 8017e62:	0952      	lsrs	r2, r2, #5
 8017e64:	b292      	uxth	r2, r2
 8017e66:	fbb3 f1f2 	udiv	r1, r3, r2
 8017e6a:	fb02 f201 	mul.w	r2, r2, r1
 8017e6e:	1a9b      	subs	r3, r3, r2
 8017e70:	b29b      	uxth	r3, r3
 8017e72:	2b00      	cmp	r3, #0
 8017e74:	d001      	beq.n	8017e7a <find_volume+0x4b6>
 8017e76:	230d      	movs	r3, #13
 8017e78:	e121      	b.n	80180be <find_volume+0x6fa>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8017e7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017e7c:	333c      	adds	r3, #60	; 0x3c
 8017e7e:	3313      	adds	r3, #19
 8017e80:	4618      	mov	r0, r3
 8017e82:	f7fc fe49 	bl	8014b18 <ld_word>
 8017e86:	4603      	mov	r3, r0
 8017e88:	653b      	str	r3, [r7, #80]	; 0x50
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8017e8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d106      	bne.n	8017e9e <find_volume+0x4da>
 8017e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017e92:	333c      	adds	r3, #60	; 0x3c
 8017e94:	3320      	adds	r3, #32
 8017e96:	4618      	mov	r0, r3
 8017e98:	f7fc fe56 	bl	8014b48 <ld_dword>
 8017e9c:	6538      	str	r0, [r7, #80]	; 0x50

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8017e9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ea0:	333c      	adds	r3, #60	; 0x3c
 8017ea2:	330e      	adds	r3, #14
 8017ea4:	4618      	mov	r0, r3
 8017ea6:	f7fc fe37 	bl	8014b18 <ld_word>
 8017eaa:	4603      	mov	r3, r0
 8017eac:	86fb      	strh	r3, [r7, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8017eae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017eb0:	2b00      	cmp	r3, #0
 8017eb2:	d101      	bne.n	8017eb8 <find_volume+0x4f4>
 8017eb4:	230d      	movs	r3, #13
 8017eb6:	e102      	b.n	80180be <find_volume+0x6fa>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8017eb8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8017eba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017ebc:	4413      	add	r3, r2
 8017ebe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017ec0:	8911      	ldrh	r1, [r2, #8]
 8017ec2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017ec4:	8992      	ldrh	r2, [r2, #12]
 8017ec6:	0952      	lsrs	r2, r2, #5
 8017ec8:	b292      	uxth	r2, r2
 8017eca:	fbb1 f2f2 	udiv	r2, r1, r2
 8017ece:	b292      	uxth	r2, r2
 8017ed0:	4413      	add	r3, r2
 8017ed2:	633b      	str	r3, [r7, #48]	; 0x30
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8017ed4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ed8:	429a      	cmp	r2, r3
 8017eda:	d201      	bcs.n	8017ee0 <find_volume+0x51c>
 8017edc:	230d      	movs	r3, #13
 8017ede:	e0ee      	b.n	80180be <find_volume+0x6fa>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8017ee0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ee4:	1ad3      	subs	r3, r2, r3
 8017ee6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017ee8:	8952      	ldrh	r2, [r2, #10]
 8017eea:	fbb3 f3f2 	udiv	r3, r3, r2
 8017eee:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8017ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	d101      	bne.n	8017efa <find_volume+0x536>
 8017ef6:	230d      	movs	r3, #13
 8017ef8:	e0e1      	b.n	80180be <find_volume+0x6fa>
		fmt = FS_FAT32;
 8017efa:	2303      	movs	r3, #3
 8017efc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8017f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f02:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8017f06:	4293      	cmp	r3, r2
 8017f08:	d802      	bhi.n	8017f10 <find_volume+0x54c>
 8017f0a:	2302      	movs	r3, #2
 8017f0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8017f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f12:	f640 72f5 	movw	r2, #4085	; 0xff5
 8017f16:	4293      	cmp	r3, r2
 8017f18:	d802      	bhi.n	8017f20 <find_volume+0x55c>
 8017f1a:	2301      	movs	r3, #1
 8017f1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8017f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f22:	1c9a      	adds	r2, r3, #2
 8017f24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017f26:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8017f28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017f2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017f2c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8017f2e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8017f30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017f32:	441a      	add	r2, r3
 8017f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017f36:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8017f38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f3c:	441a      	add	r2, r3
 8017f3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017f40:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 8017f42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017f46:	2b03      	cmp	r3, #3
 8017f48:	d11e      	bne.n	8017f88 <find_volume+0x5c4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8017f4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017f4c:	333c      	adds	r3, #60	; 0x3c
 8017f4e:	332a      	adds	r3, #42	; 0x2a
 8017f50:	4618      	mov	r0, r3
 8017f52:	f7fc fde1 	bl	8014b18 <ld_word>
 8017f56:	4603      	mov	r3, r0
 8017f58:	2b00      	cmp	r3, #0
 8017f5a:	d001      	beq.n	8017f60 <find_volume+0x59c>
 8017f5c:	230d      	movs	r3, #13
 8017f5e:	e0ae      	b.n	80180be <find_volume+0x6fa>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8017f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017f62:	891b      	ldrh	r3, [r3, #8]
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d001      	beq.n	8017f6c <find_volume+0x5a8>
 8017f68:	230d      	movs	r3, #13
 8017f6a:	e0a8      	b.n	80180be <find_volume+0x6fa>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8017f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017f6e:	333c      	adds	r3, #60	; 0x3c
 8017f70:	332c      	adds	r3, #44	; 0x2c
 8017f72:	4618      	mov	r0, r3
 8017f74:	f7fc fde8 	bl	8014b48 <ld_dword>
 8017f78:	4602      	mov	r2, r0
 8017f7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017f7c:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8017f7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017f80:	6a1b      	ldr	r3, [r3, #32]
 8017f82:	009b      	lsls	r3, r3, #2
 8017f84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017f86:	e01f      	b.n	8017fc8 <find_volume+0x604>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8017f88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017f8a:	891b      	ldrh	r3, [r3, #8]
 8017f8c:	2b00      	cmp	r3, #0
 8017f8e:	d101      	bne.n	8017f94 <find_volume+0x5d0>
 8017f90:	230d      	movs	r3, #13
 8017f92:	e094      	b.n	80180be <find_volume+0x6fa>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8017f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017f98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017f9a:	441a      	add	r2, r3
 8017f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017f9e:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8017fa0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017fa4:	2b02      	cmp	r3, #2
 8017fa6:	d103      	bne.n	8017fb0 <find_volume+0x5ec>
 8017fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017faa:	6a1b      	ldr	r3, [r3, #32]
 8017fac:	005b      	lsls	r3, r3, #1
 8017fae:	e00a      	b.n	8017fc6 <find_volume+0x602>
 8017fb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017fb2:	6a1a      	ldr	r2, [r3, #32]
 8017fb4:	4613      	mov	r3, r2
 8017fb6:	005b      	lsls	r3, r3, #1
 8017fb8:	4413      	add	r3, r2
 8017fba:	085a      	lsrs	r2, r3, #1
 8017fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017fbe:	6a1b      	ldr	r3, [r3, #32]
 8017fc0:	f003 0301 	and.w	r3, r3, #1
 8017fc4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8017fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8017fc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017fca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017fcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017fce:	899b      	ldrh	r3, [r3, #12]
 8017fd0:	4619      	mov	r1, r3
 8017fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017fd4:	440b      	add	r3, r1
 8017fd6:	3b01      	subs	r3, #1
 8017fd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017fda:	8989      	ldrh	r1, [r1, #12]
 8017fdc:	fbb3 f3f1 	udiv	r3, r3, r1
 8017fe0:	429a      	cmp	r2, r3
 8017fe2:	d201      	bcs.n	8017fe8 <find_volume+0x624>
 8017fe4:	230d      	movs	r3, #13
 8017fe6:	e06a      	b.n	80180be <find_volume+0x6fa>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8017fe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017fea:	f04f 32ff 	mov.w	r2, #4294967295
 8017fee:	61da      	str	r2, [r3, #28]
 8017ff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ff2:	69da      	ldr	r2, [r3, #28]
 8017ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ff6:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 8017ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ffa:	2280      	movs	r2, #128	; 0x80
 8017ffc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8017ffe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018002:	2b03      	cmp	r3, #3
 8018004:	d149      	bne.n	801809a <find_volume+0x6d6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8018006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018008:	333c      	adds	r3, #60	; 0x3c
 801800a:	3330      	adds	r3, #48	; 0x30
 801800c:	4618      	mov	r0, r3
 801800e:	f7fc fd83 	bl	8014b18 <ld_word>
 8018012:	4603      	mov	r3, r0
 8018014:	2b01      	cmp	r3, #1
 8018016:	d140      	bne.n	801809a <find_volume+0x6d6>
			&& move_window(fs, bsect + 1) == FR_OK)
 8018018:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801801a:	3301      	adds	r3, #1
 801801c:	4619      	mov	r1, r3
 801801e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8018020:	f7fd f96e 	bl	8015300 <move_window>
 8018024:	4603      	mov	r3, r0
 8018026:	2b00      	cmp	r3, #0
 8018028:	d137      	bne.n	801809a <find_volume+0x6d6>
		{
			fs->fsi_flag = 0;
 801802a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801802c:	2200      	movs	r2, #0
 801802e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8018030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018032:	333c      	adds	r3, #60	; 0x3c
 8018034:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8018038:	4618      	mov	r0, r3
 801803a:	f7fc fd6d 	bl	8014b18 <ld_word>
 801803e:	4603      	mov	r3, r0
 8018040:	461a      	mov	r2, r3
 8018042:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8018046:	429a      	cmp	r2, r3
 8018048:	d127      	bne.n	801809a <find_volume+0x6d6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801804a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801804c:	333c      	adds	r3, #60	; 0x3c
 801804e:	4618      	mov	r0, r3
 8018050:	f7fc fd7a 	bl	8014b48 <ld_dword>
 8018054:	4602      	mov	r2, r0
 8018056:	4b1c      	ldr	r3, [pc, #112]	; (80180c8 <find_volume+0x704>)
 8018058:	429a      	cmp	r2, r3
 801805a:	d11e      	bne.n	801809a <find_volume+0x6d6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801805c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801805e:	333c      	adds	r3, #60	; 0x3c
 8018060:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8018064:	4618      	mov	r0, r3
 8018066:	f7fc fd6f 	bl	8014b48 <ld_dword>
 801806a:	4602      	mov	r2, r0
 801806c:	4b17      	ldr	r3, [pc, #92]	; (80180cc <find_volume+0x708>)
 801806e:	429a      	cmp	r2, r3
 8018070:	d113      	bne.n	801809a <find_volume+0x6d6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8018072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018074:	333c      	adds	r3, #60	; 0x3c
 8018076:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801807a:	4618      	mov	r0, r3
 801807c:	f7fc fd64 	bl	8014b48 <ld_dword>
 8018080:	4602      	mov	r2, r0
 8018082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018084:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8018086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018088:	333c      	adds	r3, #60	; 0x3c
 801808a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801808e:	4618      	mov	r0, r3
 8018090:	f7fc fd5a 	bl	8014b48 <ld_dword>
 8018094:	4602      	mov	r2, r0
 8018096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018098:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801809a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801809c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80180a0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80180a2:	4b0b      	ldr	r3, [pc, #44]	; (80180d0 <find_volume+0x70c>)
 80180a4:	881b      	ldrh	r3, [r3, #0]
 80180a6:	3301      	adds	r3, #1
 80180a8:	b29a      	uxth	r2, r3
 80180aa:	4b09      	ldr	r3, [pc, #36]	; (80180d0 <find_volume+0x70c>)
 80180ac:	801a      	strh	r2, [r3, #0]
 80180ae:	4b08      	ldr	r3, [pc, #32]	; (80180d0 <find_volume+0x70c>)
 80180b0:	881a      	ldrh	r2, [r3, #0]
 80180b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80180b4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80180b6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80180b8:	f7fd f8ba 	bl	8015230 <clear_lock>
#endif
	return FR_OK;
 80180bc:	2300      	movs	r3, #0
}
 80180be:	4618      	mov	r0, r3
 80180c0:	3760      	adds	r7, #96	; 0x60
 80180c2:	46bd      	mov	sp, r7
 80180c4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80180c8:	41615252 	.word	0x41615252
 80180cc:	61417272 	.word	0x61417272
 80180d0:	2400028c 	.word	0x2400028c

080180d4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80180d4:	b580      	push	{r7, lr}
 80180d6:	b084      	sub	sp, #16
 80180d8:	af00      	add	r7, sp, #0
 80180da:	6078      	str	r0, [r7, #4]
 80180dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80180de:	2309      	movs	r3, #9
 80180e0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	d01c      	beq.n	8018122 <validate+0x4e>
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	681b      	ldr	r3, [r3, #0]
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	d018      	beq.n	8018122 <validate+0x4e>
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	681b      	ldr	r3, [r3, #0]
 80180f4:	781b      	ldrb	r3, [r3, #0]
 80180f6:	2b00      	cmp	r3, #0
 80180f8:	d013      	beq.n	8018122 <validate+0x4e>
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	889a      	ldrh	r2, [r3, #4]
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	681b      	ldr	r3, [r3, #0]
 8018102:	88db      	ldrh	r3, [r3, #6]
 8018104:	429a      	cmp	r2, r3
 8018106:	d10c      	bne.n	8018122 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	681b      	ldr	r3, [r3, #0]
 801810c:	785b      	ldrb	r3, [r3, #1]
 801810e:	4618      	mov	r0, r3
 8018110:	f7fc fc64 	bl	80149dc <disk_status>
 8018114:	4603      	mov	r3, r0
 8018116:	f003 0301 	and.w	r3, r3, #1
 801811a:	2b00      	cmp	r3, #0
 801811c:	d101      	bne.n	8018122 <validate+0x4e>
			res = FR_OK;
 801811e:	2300      	movs	r3, #0
 8018120:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8018122:	7bfb      	ldrb	r3, [r7, #15]
 8018124:	2b00      	cmp	r3, #0
 8018126:	d102      	bne.n	801812e <validate+0x5a>
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	681b      	ldr	r3, [r3, #0]
 801812c:	e000      	b.n	8018130 <validate+0x5c>
 801812e:	2300      	movs	r3, #0
 8018130:	683a      	ldr	r2, [r7, #0]
 8018132:	6013      	str	r3, [r2, #0]
	return res;
 8018134:	7bfb      	ldrb	r3, [r7, #15]
}
 8018136:	4618      	mov	r0, r3
 8018138:	3710      	adds	r7, #16
 801813a:	46bd      	mov	sp, r7
 801813c:	bd80      	pop	{r7, pc}
	...

08018140 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8018140:	b580      	push	{r7, lr}
 8018142:	b088      	sub	sp, #32
 8018144:	af00      	add	r7, sp, #0
 8018146:	60f8      	str	r0, [r7, #12]
 8018148:	60b9      	str	r1, [r7, #8]
 801814a:	4613      	mov	r3, r2
 801814c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801814e:	68bb      	ldr	r3, [r7, #8]
 8018150:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8018152:	f107 0310 	add.w	r3, r7, #16
 8018156:	4618      	mov	r0, r3
 8018158:	f7ff fb8b 	bl	8017872 <get_ldnumber>
 801815c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801815e:	69fb      	ldr	r3, [r7, #28]
 8018160:	2b00      	cmp	r3, #0
 8018162:	da01      	bge.n	8018168 <f_mount+0x28>
 8018164:	230b      	movs	r3, #11
 8018166:	e02b      	b.n	80181c0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8018168:	4a17      	ldr	r2, [pc, #92]	; (80181c8 <f_mount+0x88>)
 801816a:	69fb      	ldr	r3, [r7, #28]
 801816c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018170:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8018172:	69bb      	ldr	r3, [r7, #24]
 8018174:	2b00      	cmp	r3, #0
 8018176:	d005      	beq.n	8018184 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8018178:	69b8      	ldr	r0, [r7, #24]
 801817a:	f7fd f859 	bl	8015230 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801817e:	69bb      	ldr	r3, [r7, #24]
 8018180:	2200      	movs	r2, #0
 8018182:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8018184:	68fb      	ldr	r3, [r7, #12]
 8018186:	2b00      	cmp	r3, #0
 8018188:	d002      	beq.n	8018190 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801818a:	68fb      	ldr	r3, [r7, #12]
 801818c:	2200      	movs	r2, #0
 801818e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8018190:	68fa      	ldr	r2, [r7, #12]
 8018192:	490d      	ldr	r1, [pc, #52]	; (80181c8 <f_mount+0x88>)
 8018194:	69fb      	ldr	r3, [r7, #28]
 8018196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801819a:	68fb      	ldr	r3, [r7, #12]
 801819c:	2b00      	cmp	r3, #0
 801819e:	d002      	beq.n	80181a6 <f_mount+0x66>
 80181a0:	79fb      	ldrb	r3, [r7, #7]
 80181a2:	2b01      	cmp	r3, #1
 80181a4:	d001      	beq.n	80181aa <f_mount+0x6a>
 80181a6:	2300      	movs	r3, #0
 80181a8:	e00a      	b.n	80181c0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80181aa:	f107 010c 	add.w	r1, r7, #12
 80181ae:	f107 0308 	add.w	r3, r7, #8
 80181b2:	2200      	movs	r2, #0
 80181b4:	4618      	mov	r0, r3
 80181b6:	f7ff fc05 	bl	80179c4 <find_volume>
 80181ba:	4603      	mov	r3, r0
 80181bc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80181be:	7dfb      	ldrb	r3, [r7, #23]
}
 80181c0:	4618      	mov	r0, r3
 80181c2:	3720      	adds	r7, #32
 80181c4:	46bd      	mov	sp, r7
 80181c6:	bd80      	pop	{r7, pc}
 80181c8:	24000284 	.word	0x24000284

080181cc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80181cc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80181d0:	b0a4      	sub	sp, #144	; 0x90
 80181d2:	af00      	add	r7, sp, #0
 80181d4:	60f8      	str	r0, [r7, #12]
 80181d6:	60b9      	str	r1, [r7, #8]
 80181d8:	4613      	mov	r3, r2
 80181da:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80181dc:	68fb      	ldr	r3, [r7, #12]
 80181de:	2b00      	cmp	r3, #0
 80181e0:	d101      	bne.n	80181e6 <f_open+0x1a>
 80181e2:	2309      	movs	r3, #9
 80181e4:	e2bd      	b.n	8018762 <f_open+0x596>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80181e6:	79fb      	ldrb	r3, [r7, #7]
 80181e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80181ec:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80181ee:	79fa      	ldrb	r2, [r7, #7]
 80181f0:	f107 0114 	add.w	r1, r7, #20
 80181f4:	f107 0308 	add.w	r3, r7, #8
 80181f8:	4618      	mov	r0, r3
 80181fa:	f7ff fbe3 	bl	80179c4 <find_volume>
 80181fe:	4603      	mov	r3, r0
 8018200:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (res == FR_OK) {
 8018204:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8018208:	2b00      	cmp	r3, #0
 801820a:	f040 82a1 	bne.w	8018750 <f_open+0x584>
		dj.obj.fs = fs;
 801820e:	697b      	ldr	r3, [r7, #20]
 8018210:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
 8018212:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8018216:	f001 fe3b 	bl	8019e90 <ff_memalloc>
 801821a:	67f8      	str	r0, [r7, #124]	; 0x7c
 801821c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801821e:	2b00      	cmp	r3, #0
 8018220:	d101      	bne.n	8018226 <f_open+0x5a>
 8018222:	2311      	movs	r3, #17
 8018224:	e29d      	b.n	8018762 <f_open+0x596>
 8018226:	697b      	ldr	r3, [r7, #20]
 8018228:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801822a:	611a      	str	r2, [r3, #16]
 801822c:	697b      	ldr	r3, [r7, #20]
 801822e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8018230:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8018234:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 8018236:	68ba      	ldr	r2, [r7, #8]
 8018238:	f107 0318 	add.w	r3, r7, #24
 801823c:	4611      	mov	r1, r2
 801823e:	4618      	mov	r0, r3
 8018240:	f7ff fa6a 	bl	8017718 <follow_path>
 8018244:	4603      	mov	r3, r0
 8018246:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801824a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801824e:	2b00      	cmp	r3, #0
 8018250:	d11a      	bne.n	8018288 <f_open+0xbc>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8018252:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8018256:	b25b      	sxtb	r3, r3
 8018258:	2b00      	cmp	r3, #0
 801825a:	da03      	bge.n	8018264 <f_open+0x98>
				res = FR_INVALID_NAME;
 801825c:	2306      	movs	r3, #6
 801825e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8018262:	e011      	b.n	8018288 <f_open+0xbc>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8018264:	79fb      	ldrb	r3, [r7, #7]
 8018266:	f023 0301 	bic.w	r3, r3, #1
 801826a:	2b00      	cmp	r3, #0
 801826c:	bf14      	ite	ne
 801826e:	2301      	movne	r3, #1
 8018270:	2300      	moveq	r3, #0
 8018272:	b2db      	uxtb	r3, r3
 8018274:	461a      	mov	r2, r3
 8018276:	f107 0318 	add.w	r3, r7, #24
 801827a:	4611      	mov	r1, r2
 801827c:	4618      	mov	r0, r3
 801827e:	f7fc fe8f 	bl	8014fa0 <chk_lock>
 8018282:	4603      	mov	r3, r0
 8018284:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8018288:	79fb      	ldrb	r3, [r7, #7]
 801828a:	f003 031c 	and.w	r3, r3, #28
 801828e:	2b00      	cmp	r3, #0
 8018290:	f000 8109 	beq.w	80184a6 <f_open+0x2da>
			if (res != FR_OK) {					/* No file, create new */
 8018294:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8018298:	2b00      	cmp	r3, #0
 801829a:	d017      	beq.n	80182cc <f_open+0x100>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801829c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80182a0:	2b04      	cmp	r3, #4
 80182a2:	d10e      	bne.n	80182c2 <f_open+0xf6>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80182a4:	f7fc fed8 	bl	8015058 <enq_lock>
 80182a8:	4603      	mov	r3, r0
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	d006      	beq.n	80182bc <f_open+0xf0>
 80182ae:	f107 0318 	add.w	r3, r7, #24
 80182b2:	4618      	mov	r0, r3
 80182b4:	f7fe fec8 	bl	8017048 <dir_register>
 80182b8:	4603      	mov	r3, r0
 80182ba:	e000      	b.n	80182be <f_open+0xf2>
 80182bc:	2312      	movs	r3, #18
 80182be:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80182c2:	79fb      	ldrb	r3, [r7, #7]
 80182c4:	f043 0308 	orr.w	r3, r3, #8
 80182c8:	71fb      	strb	r3, [r7, #7]
 80182ca:	e010      	b.n	80182ee <f_open+0x122>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80182cc:	7fbb      	ldrb	r3, [r7, #30]
 80182ce:	f003 0311 	and.w	r3, r3, #17
 80182d2:	2b00      	cmp	r3, #0
 80182d4:	d003      	beq.n	80182de <f_open+0x112>
					res = FR_DENIED;
 80182d6:	2307      	movs	r3, #7
 80182d8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80182dc:	e007      	b.n	80182ee <f_open+0x122>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80182de:	79fb      	ldrb	r3, [r7, #7]
 80182e0:	f003 0304 	and.w	r3, r3, #4
 80182e4:	2b00      	cmp	r3, #0
 80182e6:	d002      	beq.n	80182ee <f_open+0x122>
 80182e8:	2308      	movs	r3, #8
 80182ea:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80182ee:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	f040 80f1 	bne.w	80184da <f_open+0x30e>
 80182f8:	79fb      	ldrb	r3, [r7, #7]
 80182fa:	f003 0308 	and.w	r3, r3, #8
 80182fe:	2b00      	cmp	r3, #0
 8018300:	f000 80eb 	beq.w	80184da <f_open+0x30e>
				dw = GET_FATTIME();
 8018304:	f7f9 feea 	bl	80120dc <get_fattime>
 8018308:	67b8      	str	r0, [r7, #120]	; 0x78
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 801830a:	697b      	ldr	r3, [r7, #20]
 801830c:	781b      	ldrb	r3, [r3, #0]
 801830e:	2b04      	cmp	r3, #4
 8018310:	f040 8082 	bne.w	8018418 <f_open+0x24c>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8018314:	697a      	ldr	r2, [r7, #20]
 8018316:	68fb      	ldr	r3, [r7, #12]
 8018318:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 801831a:	697b      	ldr	r3, [r7, #20]
 801831c:	695b      	ldr	r3, [r3, #20]
 801831e:	3334      	adds	r3, #52	; 0x34
 8018320:	4618      	mov	r0, r3
 8018322:	f7fc fc11 	bl	8014b48 <ld_dword>
 8018326:	4602      	mov	r2, r0
 8018328:	68fb      	ldr	r3, [r7, #12]
 801832a:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 801832c:	697b      	ldr	r3, [r7, #20]
 801832e:	695b      	ldr	r3, [r3, #20]
 8018330:	3338      	adds	r3, #56	; 0x38
 8018332:	4618      	mov	r0, r3
 8018334:	f7fc fc2b 	bl	8014b8e <ld_qword>
 8018338:	4603      	mov	r3, r0
 801833a:	460c      	mov	r4, r1
 801833c:	68fa      	ldr	r2, [r7, #12]
 801833e:	e9c2 3404 	strd	r3, r4, [r2, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8018342:	697b      	ldr	r3, [r7, #20]
 8018344:	695b      	ldr	r3, [r3, #20]
 8018346:	3321      	adds	r3, #33	; 0x21
 8018348:	781b      	ldrb	r3, [r3, #0]
 801834a:	f003 0302 	and.w	r3, r3, #2
 801834e:	b2da      	uxtb	r2, r3
 8018350:	68fb      	ldr	r3, [r7, #12]
 8018352:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 8018354:	68fb      	ldr	r3, [r7, #12]
 8018356:	2200      	movs	r2, #0
 8018358:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 801835a:	697b      	ldr	r3, [r7, #20]
 801835c:	695b      	ldr	r3, [r3, #20]
 801835e:	3308      	adds	r3, #8
 8018360:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8018362:	4618      	mov	r0, r3
 8018364:	f7fc fceb 	bl	8014d3e <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 8018368:	697b      	ldr	r3, [r7, #20]
 801836a:	695b      	ldr	r3, [r3, #20]
 801836c:	3314      	adds	r3, #20
 801836e:	2200      	movs	r2, #0
 8018370:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 8018372:	697b      	ldr	r3, [r7, #20]
 8018374:	695b      	ldr	r3, [r3, #20]
 8018376:	330c      	adds	r3, #12
 8018378:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801837a:	4618      	mov	r0, r3
 801837c:	f7fc fcdf 	bl	8014d3e <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 8018380:	697b      	ldr	r3, [r7, #20]
 8018382:	695b      	ldr	r3, [r3, #20]
 8018384:	3315      	adds	r3, #21
 8018386:	2200      	movs	r2, #0
 8018388:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 801838a:	697b      	ldr	r3, [r7, #20]
 801838c:	695b      	ldr	r3, [r3, #20]
 801838e:	3304      	adds	r3, #4
 8018390:	2220      	movs	r2, #32
 8018392:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 8018394:	697b      	ldr	r3, [r7, #20]
 8018396:	695b      	ldr	r3, [r3, #20]
 8018398:	3334      	adds	r3, #52	; 0x34
 801839a:	2100      	movs	r1, #0
 801839c:	4618      	mov	r0, r3
 801839e:	f7fc fcce 	bl	8014d3e <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 80183a2:	697b      	ldr	r3, [r7, #20]
 80183a4:	695b      	ldr	r3, [r3, #20]
 80183a6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80183aa:	f04f 0200 	mov.w	r2, #0
 80183ae:	f04f 0300 	mov.w	r3, #0
 80183b2:	4608      	mov	r0, r1
 80183b4:	f7fc fcef 	bl	8014d96 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 80183b8:	697b      	ldr	r3, [r7, #20]
 80183ba:	695b      	ldr	r3, [r3, #20]
 80183bc:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80183c0:	f04f 0200 	mov.w	r2, #0
 80183c4:	f04f 0300 	mov.w	r3, #0
 80183c8:	4608      	mov	r0, r1
 80183ca:	f7fc fce4 	bl	8014d96 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 80183ce:	697b      	ldr	r3, [r7, #20]
 80183d0:	695b      	ldr	r3, [r3, #20]
 80183d2:	3321      	adds	r3, #33	; 0x21
 80183d4:	2201      	movs	r2, #1
 80183d6:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 80183d8:	f107 0318 	add.w	r3, r7, #24
 80183dc:	4618      	mov	r0, r3
 80183de:	f7fe fb80 	bl	8016ae2 <store_xdir>
 80183e2:	4603      	mov	r3, r0
 80183e4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 80183e8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	d174      	bne.n	80184da <f_open+0x30e>
 80183f0:	68fb      	ldr	r3, [r7, #12]
 80183f2:	689b      	ldr	r3, [r3, #8]
 80183f4:	2b00      	cmp	r3, #0
 80183f6:	d070      	beq.n	80184da <f_open+0x30e>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 80183f8:	68f8      	ldr	r0, [r7, #12]
 80183fa:	68fb      	ldr	r3, [r7, #12]
 80183fc:	689b      	ldr	r3, [r3, #8]
 80183fe:	2200      	movs	r2, #0
 8018400:	4619      	mov	r1, r3
 8018402:	f7fd fc0d 	bl	8015c20 <remove_chain>
 8018406:	4603      	mov	r3, r0
 8018408:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 801840c:	68fb      	ldr	r3, [r7, #12]
 801840e:	689a      	ldr	r2, [r3, #8]
 8018410:	697b      	ldr	r3, [r7, #20]
 8018412:	3a01      	subs	r2, #1
 8018414:	619a      	str	r2, [r3, #24]
 8018416:	e060      	b.n	80184da <f_open+0x30e>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8018418:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801841a:	330e      	adds	r3, #14
 801841c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801841e:	4618      	mov	r0, r3
 8018420:	f7fc fc8d 	bl	8014d3e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8018424:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018426:	3316      	adds	r3, #22
 8018428:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801842a:	4618      	mov	r0, r3
 801842c:	f7fc fc87 	bl	8014d3e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8018430:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018432:	330b      	adds	r3, #11
 8018434:	2220      	movs	r2, #32
 8018436:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8018438:	697b      	ldr	r3, [r7, #20]
 801843a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801843c:	4611      	mov	r1, r2
 801843e:	4618      	mov	r0, r3
 8018440:	f7fd ffc0 	bl	80163c4 <ld_clust>
 8018444:	6778      	str	r0, [r7, #116]	; 0x74
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8018446:	697b      	ldr	r3, [r7, #20]
 8018448:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801844a:	2200      	movs	r2, #0
 801844c:	4618      	mov	r0, r3
 801844e:	f7fd ffd8 	bl	8016402 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8018452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018454:	331c      	adds	r3, #28
 8018456:	2100      	movs	r1, #0
 8018458:	4618      	mov	r0, r3
 801845a:	f7fc fc70 	bl	8014d3e <st_dword>
					fs->wflag = 1;
 801845e:	697b      	ldr	r3, [r7, #20]
 8018460:	2201      	movs	r2, #1
 8018462:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8018464:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018466:	2b00      	cmp	r3, #0
 8018468:	d037      	beq.n	80184da <f_open+0x30e>
						dw = fs->winsect;
 801846a:	697b      	ldr	r3, [r7, #20]
 801846c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801846e:	67bb      	str	r3, [r7, #120]	; 0x78
						res = remove_chain(&dj.obj, cl, 0);
 8018470:	f107 0318 	add.w	r3, r7, #24
 8018474:	2200      	movs	r2, #0
 8018476:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8018478:	4618      	mov	r0, r3
 801847a:	f7fd fbd1 	bl	8015c20 <remove_chain>
 801847e:	4603      	mov	r3, r0
 8018480:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						if (res == FR_OK) {
 8018484:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8018488:	2b00      	cmp	r3, #0
 801848a:	d126      	bne.n	80184da <f_open+0x30e>
							res = move_window(fs, dw);
 801848c:	697b      	ldr	r3, [r7, #20]
 801848e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8018490:	4618      	mov	r0, r3
 8018492:	f7fc ff35 	bl	8015300 <move_window>
 8018496:	4603      	mov	r3, r0
 8018498:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801849c:	697b      	ldr	r3, [r7, #20]
 801849e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80184a0:	3a01      	subs	r2, #1
 80184a2:	619a      	str	r2, [r3, #24]
 80184a4:	e019      	b.n	80184da <f_open+0x30e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80184a6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d115      	bne.n	80184da <f_open+0x30e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80184ae:	7fbb      	ldrb	r3, [r7, #30]
 80184b0:	f003 0310 	and.w	r3, r3, #16
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d003      	beq.n	80184c0 <f_open+0x2f4>
					res = FR_NO_FILE;
 80184b8:	2304      	movs	r3, #4
 80184ba:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80184be:	e00c      	b.n	80184da <f_open+0x30e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80184c0:	79fb      	ldrb	r3, [r7, #7]
 80184c2:	f003 0302 	and.w	r3, r3, #2
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	d007      	beq.n	80184da <f_open+0x30e>
 80184ca:	7fbb      	ldrb	r3, [r7, #30]
 80184cc:	f003 0301 	and.w	r3, r3, #1
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	d002      	beq.n	80184da <f_open+0x30e>
						res = FR_DENIED;
 80184d4:	2307      	movs	r3, #7
 80184d6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					}
				}
			}
		}
		if (res == FR_OK) {
 80184da:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80184de:	2b00      	cmp	r3, #0
 80184e0:	d128      	bne.n	8018534 <f_open+0x368>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80184e2:	79fb      	ldrb	r3, [r7, #7]
 80184e4:	f003 0308 	and.w	r3, r3, #8
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	d003      	beq.n	80184f4 <f_open+0x328>
				mode |= FA_MODIFIED;
 80184ec:	79fb      	ldrb	r3, [r7, #7]
 80184ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80184f2:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80184f4:	697b      	ldr	r3, [r7, #20]
 80184f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80184f8:	68fb      	ldr	r3, [r7, #12]
 80184fa:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 80184fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80184fe:	68fb      	ldr	r3, [r7, #12]
 8018500:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8018502:	79fb      	ldrb	r3, [r7, #7]
 8018504:	f023 0301 	bic.w	r3, r3, #1
 8018508:	2b00      	cmp	r3, #0
 801850a:	bf14      	ite	ne
 801850c:	2301      	movne	r3, #1
 801850e:	2300      	moveq	r3, #0
 8018510:	b2db      	uxtb	r3, r3
 8018512:	461a      	mov	r2, r3
 8018514:	f107 0318 	add.w	r3, r7, #24
 8018518:	4611      	mov	r1, r2
 801851a:	4618      	mov	r0, r3
 801851c:	f7fc fdbe 	bl	801509c <inc_lock>
 8018520:	4602      	mov	r2, r0
 8018522:	68fb      	ldr	r3, [r7, #12]
 8018524:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8018526:	68fb      	ldr	r3, [r7, #12]
 8018528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801852a:	2b00      	cmp	r3, #0
 801852c:	d102      	bne.n	8018534 <f_open+0x368>
 801852e:	2302      	movs	r3, #2
 8018530:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8018534:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8018538:	2b00      	cmp	r3, #0
 801853a:	f040 8106 	bne.w	801874a <f_open+0x57e>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 801853e:	697b      	ldr	r3, [r7, #20]
 8018540:	781b      	ldrb	r3, [r3, #0]
 8018542:	2b04      	cmp	r3, #4
 8018544:	d12b      	bne.n	801859e <f_open+0x3d2>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 8018546:	6a3a      	ldr	r2, [r7, #32]
 8018548:	68fb      	ldr	r3, [r7, #12]
 801854a:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 801854c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8018550:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8018554:	7ffa      	ldrb	r2, [r7, #31]
 8018556:	431a      	orrs	r2, r3
 8018558:	68fb      	ldr	r3, [r7, #12]
 801855a:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 801855c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801855e:	68fb      	ldr	r3, [r7, #12]
 8018560:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 8018562:	697b      	ldr	r3, [r7, #20]
 8018564:	695b      	ldr	r3, [r3, #20]
 8018566:	3334      	adds	r3, #52	; 0x34
 8018568:	4618      	mov	r0, r3
 801856a:	f7fc faed 	bl	8014b48 <ld_dword>
 801856e:	4602      	mov	r2, r0
 8018570:	68fb      	ldr	r3, [r7, #12]
 8018572:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8018574:	697b      	ldr	r3, [r7, #20]
 8018576:	695b      	ldr	r3, [r3, #20]
 8018578:	3338      	adds	r3, #56	; 0x38
 801857a:	4618      	mov	r0, r3
 801857c:	f7fc fb07 	bl	8014b8e <ld_qword>
 8018580:	4603      	mov	r3, r0
 8018582:	460c      	mov	r4, r1
 8018584:	68fa      	ldr	r2, [r7, #12]
 8018586:	e9c2 3404 	strd	r3, r4, [r2, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 801858a:	697b      	ldr	r3, [r7, #20]
 801858c:	695b      	ldr	r3, [r3, #20]
 801858e:	3321      	adds	r3, #33	; 0x21
 8018590:	781b      	ldrb	r3, [r3, #0]
 8018592:	f003 0302 	and.w	r3, r3, #2
 8018596:	b2da      	uxtb	r2, r3
 8018598:	68fb      	ldr	r3, [r7, #12]
 801859a:	71da      	strb	r2, [r3, #7]
 801859c:	e013      	b.n	80185c6 <f_open+0x3fa>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801859e:	697b      	ldr	r3, [r7, #20]
 80185a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80185a2:	4611      	mov	r1, r2
 80185a4:	4618      	mov	r0, r3
 80185a6:	f7fd ff0d 	bl	80163c4 <ld_clust>
 80185aa:	4602      	mov	r2, r0
 80185ac:	68fb      	ldr	r3, [r7, #12]
 80185ae:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80185b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80185b2:	331c      	adds	r3, #28
 80185b4:	4618      	mov	r0, r3
 80185b6:	f7fc fac7 	bl	8014b48 <ld_dword>
 80185ba:	4603      	mov	r3, r0
 80185bc:	f04f 0400 	mov.w	r4, #0
 80185c0:	68fa      	ldr	r2, [r7, #12]
 80185c2:	e9c2 3404 	strd	r3, r4, [r2, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80185c6:	68fb      	ldr	r3, [r7, #12]
 80185c8:	2200      	movs	r2, #0
 80185ca:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80185cc:	697a      	ldr	r2, [r7, #20]
 80185ce:	68fb      	ldr	r3, [r7, #12]
 80185d0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80185d2:	697b      	ldr	r3, [r7, #20]
 80185d4:	88da      	ldrh	r2, [r3, #6]
 80185d6:	68fb      	ldr	r3, [r7, #12]
 80185d8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80185da:	68fb      	ldr	r3, [r7, #12]
 80185dc:	79fa      	ldrb	r2, [r7, #7]
 80185de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 80185e2:	68fb      	ldr	r3, [r7, #12]
 80185e4:	2200      	movs	r2, #0
 80185e6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 80185ea:	68fb      	ldr	r3, [r7, #12]
 80185ec:	2200      	movs	r2, #0
 80185ee:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 80185f0:	68fa      	ldr	r2, [r7, #12]
 80185f2:	f04f 0300 	mov.w	r3, #0
 80185f6:	f04f 0400 	mov.w	r4, #0
 80185fa:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80185fe:	68fb      	ldr	r3, [r7, #12]
 8018600:	3354      	adds	r3, #84	; 0x54
 8018602:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8018606:	2100      	movs	r1, #0
 8018608:	4618      	mov	r0, r3
 801860a:	f7fc fc6c 	bl	8014ee6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801860e:	79fb      	ldrb	r3, [r7, #7]
 8018610:	f003 0320 	and.w	r3, r3, #32
 8018614:	2b00      	cmp	r3, #0
 8018616:	f000 8098 	beq.w	801874a <f_open+0x57e>
 801861a:	68fb      	ldr	r3, [r7, #12]
 801861c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8018620:	4323      	orrs	r3, r4
 8018622:	f000 8092 	beq.w	801874a <f_open+0x57e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8018626:	68fb      	ldr	r3, [r7, #12]
 8018628:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 801862c:	68fa      	ldr	r2, [r7, #12]
 801862e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8018632:	697b      	ldr	r3, [r7, #20]
 8018634:	895b      	ldrh	r3, [r3, #10]
 8018636:	461a      	mov	r2, r3
 8018638:	697b      	ldr	r3, [r7, #20]
 801863a:	899b      	ldrh	r3, [r3, #12]
 801863c:	fb03 f302 	mul.w	r3, r3, r2
 8018640:	673b      	str	r3, [r7, #112]	; 0x70
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8018642:	68fb      	ldr	r3, [r7, #12]
 8018644:	689b      	ldr	r3, [r3, #8]
 8018646:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801864a:	68fb      	ldr	r3, [r7, #12]
 801864c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8018650:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 8018654:	e024      	b.n	80186a0 <f_open+0x4d4>
					clst = get_fat(&fp->obj, clst);
 8018656:	68fb      	ldr	r3, [r7, #12]
 8018658:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 801865c:	4618      	mov	r0, r3
 801865e:	f7fc ff0d 	bl	801547c <get_fat>
 8018662:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
					if (clst <= 1) res = FR_INT_ERR;
 8018666:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801866a:	2b01      	cmp	r3, #1
 801866c:	d802      	bhi.n	8018674 <f_open+0x4a8>
 801866e:	2302      	movs	r3, #2
 8018670:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8018674:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018678:	f1b3 3fff 	cmp.w	r3, #4294967295
 801867c:	d102      	bne.n	8018684 <f_open+0x4b8>
 801867e:	2301      	movs	r3, #1
 8018680:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8018684:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018686:	469b      	mov	fp, r3
 8018688:	f04f 0c00 	mov.w	ip, #0
 801868c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8018690:	460b      	mov	r3, r1
 8018692:	4614      	mov	r4, r2
 8018694:	ebb3 030b 	subs.w	r3, r3, fp
 8018698:	eb64 040c 	sbc.w	r4, r4, ip
 801869c:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 80186a0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80186a4:	2b00      	cmp	r3, #0
 80186a6:	d109      	bne.n	80186bc <f_open+0x4f0>
 80186a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80186aa:	4619      	mov	r1, r3
 80186ac:	f04f 0200 	mov.w	r2, #0
 80186b0:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80186b4:	42a2      	cmp	r2, r4
 80186b6:	bf08      	it	eq
 80186b8:	4299      	cmpeq	r1, r3
 80186ba:	d3cc      	bcc.n	8018656 <f_open+0x48a>
				}
				fp->clust = clst;
 80186bc:	68fb      	ldr	r3, [r7, #12]
 80186be:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80186c2:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80186c4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80186c8:	2b00      	cmp	r3, #0
 80186ca:	d13e      	bne.n	801874a <f_open+0x57e>
 80186cc:	697b      	ldr	r3, [r7, #20]
 80186ce:	899b      	ldrh	r3, [r3, #12]
 80186d0:	b29b      	uxth	r3, r3
 80186d2:	f04f 0400 	mov.w	r4, #0
 80186d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80186da:	461a      	mov	r2, r3
 80186dc:	4623      	mov	r3, r4
 80186de:	f7e7 fdfb 	bl	80002d8 <__aeabi_uldivmod>
 80186e2:	461c      	mov	r4, r3
 80186e4:	4613      	mov	r3, r2
 80186e6:	4323      	orrs	r3, r4
 80186e8:	d02f      	beq.n	801874a <f_open+0x57e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80186ea:	697b      	ldr	r3, [r7, #20]
 80186ec:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80186f0:	4618      	mov	r0, r3
 80186f2:	f7fc fea3 	bl	801543c <clust2sect>
 80186f6:	66f8      	str	r0, [r7, #108]	; 0x6c
 80186f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	d103      	bne.n	8018706 <f_open+0x53a>
						res = FR_INT_ERR;
 80186fe:	2302      	movs	r3, #2
 8018700:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8018704:	e021      	b.n	801874a <f_open+0x57e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8018706:	697b      	ldr	r3, [r7, #20]
 8018708:	899b      	ldrh	r3, [r3, #12]
 801870a:	b29b      	uxth	r3, r3
 801870c:	f04f 0400 	mov.w	r4, #0
 8018710:	461a      	mov	r2, r3
 8018712:	4623      	mov	r3, r4
 8018714:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8018718:	f7e7 fdde 	bl	80002d8 <__aeabi_uldivmod>
 801871c:	4603      	mov	r3, r0
 801871e:	460c      	mov	r4, r1
 8018720:	461a      	mov	r2, r3
 8018722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018724:	441a      	add	r2, r3
 8018726:	68fb      	ldr	r3, [r7, #12]
 8018728:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801872a:	697b      	ldr	r3, [r7, #20]
 801872c:	7858      	ldrb	r0, [r3, #1]
 801872e:	68fb      	ldr	r3, [r7, #12]
 8018730:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8018734:	68fb      	ldr	r3, [r7, #12]
 8018736:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018738:	2301      	movs	r3, #1
 801873a:	f7fc f98f 	bl	8014a5c <disk_read>
 801873e:	4603      	mov	r3, r0
 8018740:	2b00      	cmp	r3, #0
 8018742:	d002      	beq.n	801874a <f_open+0x57e>
 8018744:	2301      	movs	r3, #1
 8018746:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
#endif
		}

		FREE_NAMBUF();
 801874a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 801874c:	f001 fbac 	bl	8019ea8 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8018750:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8018754:	2b00      	cmp	r3, #0
 8018756:	d002      	beq.n	801875e <f_open+0x592>
 8018758:	68fb      	ldr	r3, [r7, #12]
 801875a:	2200      	movs	r2, #0
 801875c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801875e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8018762:	4618      	mov	r0, r3
 8018764:	3790      	adds	r7, #144	; 0x90
 8018766:	46bd      	mov	sp, r7
 8018768:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0801876c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801876c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801876e:	b091      	sub	sp, #68	; 0x44
 8018770:	af00      	add	r7, sp, #0
 8018772:	60f8      	str	r0, [r7, #12]
 8018774:	60b9      	str	r1, [r7, #8]
 8018776:	607a      	str	r2, [r7, #4]
 8018778:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801877a:	68bb      	ldr	r3, [r7, #8]
 801877c:	62fb      	str	r3, [r7, #44]	; 0x2c


	*br = 0;	/* Clear read byte counter */
 801877e:	683b      	ldr	r3, [r7, #0]
 8018780:	2200      	movs	r2, #0
 8018782:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8018784:	68fb      	ldr	r3, [r7, #12]
 8018786:	f107 0214 	add.w	r2, r7, #20
 801878a:	4611      	mov	r1, r2
 801878c:	4618      	mov	r0, r3
 801878e:	f7ff fca1 	bl	80180d4 <validate>
 8018792:	4603      	mov	r3, r0
 8018794:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8018798:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801879c:	2b00      	cmp	r3, #0
 801879e:	d108      	bne.n	80187b2 <f_read+0x46>
 80187a0:	68fb      	ldr	r3, [r7, #12]
 80187a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80187a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80187aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80187ae:	2b00      	cmp	r3, #0
 80187b0:	d002      	beq.n	80187b8 <f_read+0x4c>
 80187b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80187b6:	e16a      	b.n	8018a8e <f_read+0x322>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80187b8:	68fb      	ldr	r3, [r7, #12]
 80187ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80187be:	f003 0301 	and.w	r3, r3, #1
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	d101      	bne.n	80187ca <f_read+0x5e>
 80187c6:	2307      	movs	r3, #7
 80187c8:	e161      	b.n	8018a8e <f_read+0x322>
	remain = fp->obj.objsize - fp->fptr;
 80187ca:	68fb      	ldr	r3, [r7, #12]
 80187cc:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 80187d0:	68fb      	ldr	r3, [r7, #12]
 80187d2:	e9d3 560e 	ldrd	r5, r6, [r3, #56]	; 0x38
 80187d6:	460b      	mov	r3, r1
 80187d8:	4614      	mov	r4, r2
 80187da:	1b5b      	subs	r3, r3, r5
 80187dc:	eb64 0406 	sbc.w	r4, r4, r6
 80187e0:	e9c7 3408 	strd	r3, r4, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	f04f 0400 	mov.w	r4, #0
 80187ea:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80187ee:	42a2      	cmp	r2, r4
 80187f0:	bf08      	it	eq
 80187f2:	4299      	cmpeq	r1, r3
 80187f4:	f080 8146 	bcs.w	8018a84 <f_read+0x318>
 80187f8:	6a3b      	ldr	r3, [r7, #32]
 80187fa:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80187fc:	e142      	b.n	8018a84 <f_read+0x318>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80187fe:	68fb      	ldr	r3, [r7, #12]
 8018800:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8018804:	697b      	ldr	r3, [r7, #20]
 8018806:	899b      	ldrh	r3, [r3, #12]
 8018808:	b29b      	uxth	r3, r3
 801880a:	f04f 0400 	mov.w	r4, #0
 801880e:	461a      	mov	r2, r3
 8018810:	4623      	mov	r3, r4
 8018812:	f7e7 fd61 	bl	80002d8 <__aeabi_uldivmod>
 8018816:	461c      	mov	r4, r3
 8018818:	4613      	mov	r3, r2
 801881a:	4323      	orrs	r3, r4
 801881c:	f040 80eb 	bne.w	80189f6 <f_read+0x28a>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8018820:	68fb      	ldr	r3, [r7, #12]
 8018822:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8018826:	697b      	ldr	r3, [r7, #20]
 8018828:	899b      	ldrh	r3, [r3, #12]
 801882a:	b29b      	uxth	r3, r3
 801882c:	f04f 0400 	mov.w	r4, #0
 8018830:	461a      	mov	r2, r3
 8018832:	4623      	mov	r3, r4
 8018834:	f7e7 fd50 	bl	80002d8 <__aeabi_uldivmod>
 8018838:	4603      	mov	r3, r0
 801883a:	460c      	mov	r4, r1
 801883c:	461a      	mov	r2, r3
 801883e:	697b      	ldr	r3, [r7, #20]
 8018840:	895b      	ldrh	r3, [r3, #10]
 8018842:	3b01      	subs	r3, #1
 8018844:	4013      	ands	r3, r2
 8018846:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8018848:	69fb      	ldr	r3, [r7, #28]
 801884a:	2b00      	cmp	r3, #0
 801884c:	d134      	bne.n	80188b8 <f_read+0x14c>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801884e:	68fb      	ldr	r3, [r7, #12]
 8018850:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8018854:	4323      	orrs	r3, r4
 8018856:	d103      	bne.n	8018860 <f_read+0xf4>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8018858:	68fb      	ldr	r3, [r7, #12]
 801885a:	689b      	ldr	r3, [r3, #8]
 801885c:	63bb      	str	r3, [r7, #56]	; 0x38
 801885e:	e015      	b.n	801888c <f_read+0x120>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8018860:	68fb      	ldr	r3, [r7, #12]
 8018862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018864:	2b00      	cmp	r3, #0
 8018866:	d009      	beq.n	801887c <f_read+0x110>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8018868:	68fb      	ldr	r3, [r7, #12]
 801886a:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 801886e:	461a      	mov	r2, r3
 8018870:	4623      	mov	r3, r4
 8018872:	68f8      	ldr	r0, [r7, #12]
 8018874:	f7fd fb89 	bl	8015f8a <clmt_clust>
 8018878:	63b8      	str	r0, [r7, #56]	; 0x38
 801887a:	e007      	b.n	801888c <f_read+0x120>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801887c:	68fa      	ldr	r2, [r7, #12]
 801887e:	68fb      	ldr	r3, [r7, #12]
 8018880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018882:	4619      	mov	r1, r3
 8018884:	4610      	mov	r0, r2
 8018886:	f7fc fdf9 	bl	801547c <get_fat>
 801888a:	63b8      	str	r0, [r7, #56]	; 0x38
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801888c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801888e:	2b01      	cmp	r3, #1
 8018890:	d805      	bhi.n	801889e <f_read+0x132>
 8018892:	68fb      	ldr	r3, [r7, #12]
 8018894:	2202      	movs	r2, #2
 8018896:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801889a:	2302      	movs	r3, #2
 801889c:	e0f7      	b.n	8018a8e <f_read+0x322>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801889e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80188a4:	d105      	bne.n	80188b2 <f_read+0x146>
 80188a6:	68fb      	ldr	r3, [r7, #12]
 80188a8:	2201      	movs	r2, #1
 80188aa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80188ae:	2301      	movs	r3, #1
 80188b0:	e0ed      	b.n	8018a8e <f_read+0x322>
				fp->clust = clst;				/* Update current cluster */
 80188b2:	68fb      	ldr	r3, [r7, #12]
 80188b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80188b6:	641a      	str	r2, [r3, #64]	; 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80188b8:	697a      	ldr	r2, [r7, #20]
 80188ba:	68fb      	ldr	r3, [r7, #12]
 80188bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80188be:	4619      	mov	r1, r3
 80188c0:	4610      	mov	r0, r2
 80188c2:	f7fc fdbb 	bl	801543c <clust2sect>
 80188c6:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80188c8:	69bb      	ldr	r3, [r7, #24]
 80188ca:	2b00      	cmp	r3, #0
 80188cc:	d105      	bne.n	80188da <f_read+0x16e>
 80188ce:	68fb      	ldr	r3, [r7, #12]
 80188d0:	2202      	movs	r2, #2
 80188d2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80188d6:	2302      	movs	r3, #2
 80188d8:	e0d9      	b.n	8018a8e <f_read+0x322>
			sect += csect;
 80188da:	69ba      	ldr	r2, [r7, #24]
 80188dc:	69fb      	ldr	r3, [r7, #28]
 80188de:	4413      	add	r3, r2
 80188e0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80188e2:	697b      	ldr	r3, [r7, #20]
 80188e4:	899b      	ldrh	r3, [r3, #12]
 80188e6:	461a      	mov	r2, r3
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80188ee:	633b      	str	r3, [r7, #48]	; 0x30
			if (cc) {							/* Read maximum contiguous sectors directly */
 80188f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188f2:	2b00      	cmp	r3, #0
 80188f4:	d043      	beq.n	801897e <f_read+0x212>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80188f6:	69fa      	ldr	r2, [r7, #28]
 80188f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188fa:	4413      	add	r3, r2
 80188fc:	697a      	ldr	r2, [r7, #20]
 80188fe:	8952      	ldrh	r2, [r2, #10]
 8018900:	4293      	cmp	r3, r2
 8018902:	d905      	bls.n	8018910 <f_read+0x1a4>
					cc = fs->csize - csect;
 8018904:	697b      	ldr	r3, [r7, #20]
 8018906:	895b      	ldrh	r3, [r3, #10]
 8018908:	461a      	mov	r2, r3
 801890a:	69fb      	ldr	r3, [r7, #28]
 801890c:	1ad3      	subs	r3, r2, r3
 801890e:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018910:	697b      	ldr	r3, [r7, #20]
 8018912:	7858      	ldrb	r0, [r3, #1]
 8018914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018916:	69ba      	ldr	r2, [r7, #24]
 8018918:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801891a:	f7fc f89f 	bl	8014a5c <disk_read>
 801891e:	4603      	mov	r3, r0
 8018920:	2b00      	cmp	r3, #0
 8018922:	d005      	beq.n	8018930 <f_read+0x1c4>
 8018924:	68fb      	ldr	r3, [r7, #12]
 8018926:	2201      	movs	r2, #1
 8018928:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801892c:	2301      	movs	r3, #1
 801892e:	e0ae      	b.n	8018a8e <f_read+0x322>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8018930:	68fb      	ldr	r3, [r7, #12]
 8018932:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018936:	b25b      	sxtb	r3, r3
 8018938:	2b00      	cmp	r3, #0
 801893a:	da18      	bge.n	801896e <f_read+0x202>
 801893c:	68fb      	ldr	r3, [r7, #12]
 801893e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018940:	69bb      	ldr	r3, [r7, #24]
 8018942:	1ad3      	subs	r3, r2, r3
 8018944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018946:	429a      	cmp	r2, r3
 8018948:	d911      	bls.n	801896e <f_read+0x202>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801894a:	68fb      	ldr	r3, [r7, #12]
 801894c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801894e:	69bb      	ldr	r3, [r7, #24]
 8018950:	1ad3      	subs	r3, r2, r3
 8018952:	697a      	ldr	r2, [r7, #20]
 8018954:	8992      	ldrh	r2, [r2, #12]
 8018956:	fb02 f303 	mul.w	r3, r2, r3
 801895a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801895c:	18d0      	adds	r0, r2, r3
 801895e:	68fb      	ldr	r3, [r7, #12]
 8018960:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8018964:	697b      	ldr	r3, [r7, #20]
 8018966:	899b      	ldrh	r3, [r3, #12]
 8018968:	461a      	mov	r2, r3
 801896a:	f7fc fa9b 	bl	8014ea4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801896e:	697b      	ldr	r3, [r7, #20]
 8018970:	899b      	ldrh	r3, [r3, #12]
 8018972:	461a      	mov	r2, r3
 8018974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018976:	fb02 f303 	mul.w	r3, r2, r3
 801897a:	637b      	str	r3, [r7, #52]	; 0x34
				continue;
 801897c:	e067      	b.n	8018a4e <f_read+0x2e2>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801897e:	68fb      	ldr	r3, [r7, #12]
 8018980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018982:	69ba      	ldr	r2, [r7, #24]
 8018984:	429a      	cmp	r2, r3
 8018986:	d033      	beq.n	80189f0 <f_read+0x284>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8018988:	68fb      	ldr	r3, [r7, #12]
 801898a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801898e:	b25b      	sxtb	r3, r3
 8018990:	2b00      	cmp	r3, #0
 8018992:	da1b      	bge.n	80189cc <f_read+0x260>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018994:	697b      	ldr	r3, [r7, #20]
 8018996:	7858      	ldrb	r0, [r3, #1]
 8018998:	68fb      	ldr	r3, [r7, #12]
 801899a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 801899e:	68fb      	ldr	r3, [r7, #12]
 80189a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80189a2:	2301      	movs	r3, #1
 80189a4:	f7fc f87a 	bl	8014a9c <disk_write>
 80189a8:	4603      	mov	r3, r0
 80189aa:	2b00      	cmp	r3, #0
 80189ac:	d005      	beq.n	80189ba <f_read+0x24e>
 80189ae:	68fb      	ldr	r3, [r7, #12]
 80189b0:	2201      	movs	r2, #1
 80189b2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80189b6:	2301      	movs	r3, #1
 80189b8:	e069      	b.n	8018a8e <f_read+0x322>
					fp->flag &= (BYTE)~FA_DIRTY;
 80189ba:	68fb      	ldr	r3, [r7, #12]
 80189bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80189c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80189c4:	b2da      	uxtb	r2, r3
 80189c6:	68fb      	ldr	r3, [r7, #12]
 80189c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80189cc:	697b      	ldr	r3, [r7, #20]
 80189ce:	7858      	ldrb	r0, [r3, #1]
 80189d0:	68fb      	ldr	r3, [r7, #12]
 80189d2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80189d6:	2301      	movs	r3, #1
 80189d8:	69ba      	ldr	r2, [r7, #24]
 80189da:	f7fc f83f 	bl	8014a5c <disk_read>
 80189de:	4603      	mov	r3, r0
 80189e0:	2b00      	cmp	r3, #0
 80189e2:	d005      	beq.n	80189f0 <f_read+0x284>
 80189e4:	68fb      	ldr	r3, [r7, #12]
 80189e6:	2201      	movs	r2, #1
 80189e8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80189ec:	2301      	movs	r3, #1
 80189ee:	e04e      	b.n	8018a8e <f_read+0x322>
			}
#endif
			fp->sect = sect;
 80189f0:	68fb      	ldr	r3, [r7, #12]
 80189f2:	69ba      	ldr	r2, [r7, #24]
 80189f4:	645a      	str	r2, [r3, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80189f6:	697b      	ldr	r3, [r7, #20]
 80189f8:	899b      	ldrh	r3, [r3, #12]
 80189fa:	4618      	mov	r0, r3
 80189fc:	68fb      	ldr	r3, [r7, #12]
 80189fe:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8018a02:	697a      	ldr	r2, [r7, #20]
 8018a04:	8992      	ldrh	r2, [r2, #12]
 8018a06:	fbb3 f1f2 	udiv	r1, r3, r2
 8018a0a:	fb02 f201 	mul.w	r2, r2, r1
 8018a0e:	1a9b      	subs	r3, r3, r2
 8018a10:	1ac3      	subs	r3, r0, r3
 8018a12:	637b      	str	r3, [r7, #52]	; 0x34
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8018a14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018a16:	687b      	ldr	r3, [r7, #4]
 8018a18:	429a      	cmp	r2, r3
 8018a1a:	d901      	bls.n	8018a20 <f_read+0x2b4>
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	637b      	str	r3, [r7, #52]	; 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8018a20:	68fb      	ldr	r3, [r7, #12]
 8018a22:	f103 0554 	add.w	r5, r3, #84	; 0x54
 8018a26:	68fb      	ldr	r3, [r7, #12]
 8018a28:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8018a2c:	697b      	ldr	r3, [r7, #20]
 8018a2e:	899b      	ldrh	r3, [r3, #12]
 8018a30:	b29b      	uxth	r3, r3
 8018a32:	f04f 0400 	mov.w	r4, #0
 8018a36:	461a      	mov	r2, r3
 8018a38:	4623      	mov	r3, r4
 8018a3a:	f7e7 fc4d 	bl	80002d8 <__aeabi_uldivmod>
 8018a3e:	461c      	mov	r4, r3
 8018a40:	4613      	mov	r3, r2
 8018a42:	442b      	add	r3, r5
 8018a44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018a46:	4619      	mov	r1, r3
 8018a48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018a4a:	f7fc fa2b 	bl	8014ea4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8018a4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a52:	4413      	add	r3, r2
 8018a54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018a56:	68fb      	ldr	r3, [r7, #12]
 8018a58:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8018a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a5e:	461d      	mov	r5, r3
 8018a60:	f04f 0600 	mov.w	r6, #0
 8018a64:	186b      	adds	r3, r5, r1
 8018a66:	eb46 0402 	adc.w	r4, r6, r2
 8018a6a:	68fa      	ldr	r2, [r7, #12]
 8018a6c:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 8018a70:	683b      	ldr	r3, [r7, #0]
 8018a72:	681a      	ldr	r2, [r3, #0]
 8018a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a76:	441a      	add	r2, r3
 8018a78:	683b      	ldr	r3, [r7, #0]
 8018a7a:	601a      	str	r2, [r3, #0]
 8018a7c:	687a      	ldr	r2, [r7, #4]
 8018a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a80:	1ad3      	subs	r3, r2, r3
 8018a82:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8018a84:	687b      	ldr	r3, [r7, #4]
 8018a86:	2b00      	cmp	r3, #0
 8018a88:	f47f aeb9 	bne.w	80187fe <f_read+0x92>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8018a8c:	2300      	movs	r3, #0
}
 8018a8e:	4618      	mov	r0, r3
 8018a90:	3744      	adds	r7, #68	; 0x44
 8018a92:	46bd      	mov	sp, r7
 8018a94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018a96 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8018a96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a98:	b08d      	sub	sp, #52	; 0x34
 8018a9a:	af00      	add	r7, sp, #0
 8018a9c:	60f8      	str	r0, [r7, #12]
 8018a9e:	60b9      	str	r1, [r7, #8]
 8018aa0:	607a      	str	r2, [r7, #4]
 8018aa2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8018aa4:	68bb      	ldr	r3, [r7, #8]
 8018aa6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8018aa8:	683b      	ldr	r3, [r7, #0]
 8018aaa:	2200      	movs	r2, #0
 8018aac:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8018aae:	68fb      	ldr	r3, [r7, #12]
 8018ab0:	f107 0210 	add.w	r2, r7, #16
 8018ab4:	4611      	mov	r1, r2
 8018ab6:	4618      	mov	r0, r3
 8018ab8:	f7ff fb0c 	bl	80180d4 <validate>
 8018abc:	4603      	mov	r3, r0
 8018abe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8018ac2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d108      	bne.n	8018adc <f_write+0x46>
 8018aca:	68fb      	ldr	r3, [r7, #12]
 8018acc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018ad0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8018ad4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018ad8:	2b00      	cmp	r3, #0
 8018ada:	d002      	beq.n	8018ae2 <f_write+0x4c>
 8018adc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018ae0:	e1ab      	b.n	8018e3a <f_write+0x3a4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8018ae2:	68fb      	ldr	r3, [r7, #12]
 8018ae4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018ae8:	f003 0302 	and.w	r3, r3, #2
 8018aec:	2b00      	cmp	r3, #0
 8018aee:	d101      	bne.n	8018af4 <f_write+0x5e>
 8018af0:	2307      	movs	r3, #7
 8018af2:	e1a2      	b.n	8018e3a <f_write+0x3a4>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8018af4:	693b      	ldr	r3, [r7, #16]
 8018af6:	781b      	ldrb	r3, [r3, #0]
 8018af8:	2b04      	cmp	r3, #4
 8018afa:	f000 818e 	beq.w	8018e1a <f_write+0x384>
 8018afe:	68fb      	ldr	r3, [r7, #12]
 8018b00:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8018b04:	461a      	mov	r2, r3
 8018b06:	687b      	ldr	r3, [r7, #4]
 8018b08:	441a      	add	r2, r3
 8018b0a:	68fb      	ldr	r3, [r7, #12]
 8018b0c:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8018b10:	429a      	cmp	r2, r3
 8018b12:	f080 8182 	bcs.w	8018e1a <f_write+0x384>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8018b16:	68fb      	ldr	r3, [r7, #12]
 8018b18:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8018b1c:	43db      	mvns	r3, r3
 8018b1e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8018b20:	e17b      	b.n	8018e1a <f_write+0x384>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8018b22:	68fb      	ldr	r3, [r7, #12]
 8018b24:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8018b28:	693b      	ldr	r3, [r7, #16]
 8018b2a:	899b      	ldrh	r3, [r3, #12]
 8018b2c:	b29b      	uxth	r3, r3
 8018b2e:	f04f 0400 	mov.w	r4, #0
 8018b32:	461a      	mov	r2, r3
 8018b34:	4623      	mov	r3, r4
 8018b36:	f7e7 fbcf 	bl	80002d8 <__aeabi_uldivmod>
 8018b3a:	461c      	mov	r4, r3
 8018b3c:	4613      	mov	r3, r2
 8018b3e:	4323      	orrs	r3, r4
 8018b40:	f040 810c 	bne.w	8018d5c <f_write+0x2c6>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8018b44:	68fb      	ldr	r3, [r7, #12]
 8018b46:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8018b4a:	693b      	ldr	r3, [r7, #16]
 8018b4c:	899b      	ldrh	r3, [r3, #12]
 8018b4e:	b29b      	uxth	r3, r3
 8018b50:	f04f 0400 	mov.w	r4, #0
 8018b54:	461a      	mov	r2, r3
 8018b56:	4623      	mov	r3, r4
 8018b58:	f7e7 fbbe 	bl	80002d8 <__aeabi_uldivmod>
 8018b5c:	4603      	mov	r3, r0
 8018b5e:	460c      	mov	r4, r1
 8018b60:	461a      	mov	r2, r3
 8018b62:	693b      	ldr	r3, [r7, #16]
 8018b64:	895b      	ldrh	r3, [r3, #10]
 8018b66:	3b01      	subs	r3, #1
 8018b68:	4013      	ands	r3, r2
 8018b6a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8018b6c:	69bb      	ldr	r3, [r7, #24]
 8018b6e:	2b00      	cmp	r3, #0
 8018b70:	d148      	bne.n	8018c04 <f_write+0x16e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8018b72:	68fb      	ldr	r3, [r7, #12]
 8018b74:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8018b78:	4323      	orrs	r3, r4
 8018b7a:	d10c      	bne.n	8018b96 <f_write+0x100>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8018b7c:	68fb      	ldr	r3, [r7, #12]
 8018b7e:	689b      	ldr	r3, [r3, #8]
 8018b80:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8018b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b84:	2b00      	cmp	r3, #0
 8018b86:	d11c      	bne.n	8018bc2 <f_write+0x12c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8018b88:	68fb      	ldr	r3, [r7, #12]
 8018b8a:	2100      	movs	r1, #0
 8018b8c:	4618      	mov	r0, r3
 8018b8e:	f7fd f8fb 	bl	8015d88 <create_chain>
 8018b92:	62b8      	str	r0, [r7, #40]	; 0x28
 8018b94:	e015      	b.n	8018bc2 <f_write+0x12c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8018b96:	68fb      	ldr	r3, [r7, #12]
 8018b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018b9a:	2b00      	cmp	r3, #0
 8018b9c:	d009      	beq.n	8018bb2 <f_write+0x11c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8018b9e:	68fb      	ldr	r3, [r7, #12]
 8018ba0:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8018ba4:	461a      	mov	r2, r3
 8018ba6:	4623      	mov	r3, r4
 8018ba8:	68f8      	ldr	r0, [r7, #12]
 8018baa:	f7fd f9ee 	bl	8015f8a <clmt_clust>
 8018bae:	62b8      	str	r0, [r7, #40]	; 0x28
 8018bb0:	e007      	b.n	8018bc2 <f_write+0x12c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8018bb2:	68fa      	ldr	r2, [r7, #12]
 8018bb4:	68fb      	ldr	r3, [r7, #12]
 8018bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018bb8:	4619      	mov	r1, r3
 8018bba:	4610      	mov	r0, r2
 8018bbc:	f7fd f8e4 	bl	8015d88 <create_chain>
 8018bc0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8018bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bc4:	2b00      	cmp	r3, #0
 8018bc6:	f000 812d 	beq.w	8018e24 <f_write+0x38e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8018bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bcc:	2b01      	cmp	r3, #1
 8018bce:	d105      	bne.n	8018bdc <f_write+0x146>
 8018bd0:	68fb      	ldr	r3, [r7, #12]
 8018bd2:	2202      	movs	r2, #2
 8018bd4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8018bd8:	2302      	movs	r3, #2
 8018bda:	e12e      	b.n	8018e3a <f_write+0x3a4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8018bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018be2:	d105      	bne.n	8018bf0 <f_write+0x15a>
 8018be4:	68fb      	ldr	r3, [r7, #12]
 8018be6:	2201      	movs	r2, #1
 8018be8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8018bec:	2301      	movs	r3, #1
 8018bee:	e124      	b.n	8018e3a <f_write+0x3a4>
				fp->clust = clst;			/* Update current cluster */
 8018bf0:	68fb      	ldr	r3, [r7, #12]
 8018bf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018bf4:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8018bf6:	68fb      	ldr	r3, [r7, #12]
 8018bf8:	689b      	ldr	r3, [r3, #8]
 8018bfa:	2b00      	cmp	r3, #0
 8018bfc:	d102      	bne.n	8018c04 <f_write+0x16e>
 8018bfe:	68fb      	ldr	r3, [r7, #12]
 8018c00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018c02:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8018c04:	68fb      	ldr	r3, [r7, #12]
 8018c06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018c0a:	b25b      	sxtb	r3, r3
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	da1b      	bge.n	8018c48 <f_write+0x1b2>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018c10:	693b      	ldr	r3, [r7, #16]
 8018c12:	7858      	ldrb	r0, [r3, #1]
 8018c14:	68fb      	ldr	r3, [r7, #12]
 8018c16:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8018c1a:	68fb      	ldr	r3, [r7, #12]
 8018c1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018c1e:	2301      	movs	r3, #1
 8018c20:	f7fb ff3c 	bl	8014a9c <disk_write>
 8018c24:	4603      	mov	r3, r0
 8018c26:	2b00      	cmp	r3, #0
 8018c28:	d005      	beq.n	8018c36 <f_write+0x1a0>
 8018c2a:	68fb      	ldr	r3, [r7, #12]
 8018c2c:	2201      	movs	r2, #1
 8018c2e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8018c32:	2301      	movs	r3, #1
 8018c34:	e101      	b.n	8018e3a <f_write+0x3a4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8018c36:	68fb      	ldr	r3, [r7, #12]
 8018c38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018c3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018c40:	b2da      	uxtb	r2, r3
 8018c42:	68fb      	ldr	r3, [r7, #12]
 8018c44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8018c48:	693a      	ldr	r2, [r7, #16]
 8018c4a:	68fb      	ldr	r3, [r7, #12]
 8018c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c4e:	4619      	mov	r1, r3
 8018c50:	4610      	mov	r0, r2
 8018c52:	f7fc fbf3 	bl	801543c <clust2sect>
 8018c56:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8018c58:	697b      	ldr	r3, [r7, #20]
 8018c5a:	2b00      	cmp	r3, #0
 8018c5c:	d105      	bne.n	8018c6a <f_write+0x1d4>
 8018c5e:	68fb      	ldr	r3, [r7, #12]
 8018c60:	2202      	movs	r2, #2
 8018c62:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8018c66:	2302      	movs	r3, #2
 8018c68:	e0e7      	b.n	8018e3a <f_write+0x3a4>
			sect += csect;
 8018c6a:	697a      	ldr	r2, [r7, #20]
 8018c6c:	69bb      	ldr	r3, [r7, #24]
 8018c6e:	4413      	add	r3, r2
 8018c70:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8018c72:	693b      	ldr	r3, [r7, #16]
 8018c74:	899b      	ldrh	r3, [r3, #12]
 8018c76:	461a      	mov	r2, r3
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8018c7e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8018c80:	6a3b      	ldr	r3, [r7, #32]
 8018c82:	2b00      	cmp	r3, #0
 8018c84:	d046      	beq.n	8018d14 <f_write+0x27e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8018c86:	69ba      	ldr	r2, [r7, #24]
 8018c88:	6a3b      	ldr	r3, [r7, #32]
 8018c8a:	4413      	add	r3, r2
 8018c8c:	693a      	ldr	r2, [r7, #16]
 8018c8e:	8952      	ldrh	r2, [r2, #10]
 8018c90:	4293      	cmp	r3, r2
 8018c92:	d905      	bls.n	8018ca0 <f_write+0x20a>
					cc = fs->csize - csect;
 8018c94:	693b      	ldr	r3, [r7, #16]
 8018c96:	895b      	ldrh	r3, [r3, #10]
 8018c98:	461a      	mov	r2, r3
 8018c9a:	69bb      	ldr	r3, [r7, #24]
 8018c9c:	1ad3      	subs	r3, r2, r3
 8018c9e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018ca0:	693b      	ldr	r3, [r7, #16]
 8018ca2:	7858      	ldrb	r0, [r3, #1]
 8018ca4:	6a3b      	ldr	r3, [r7, #32]
 8018ca6:	697a      	ldr	r2, [r7, #20]
 8018ca8:	69f9      	ldr	r1, [r7, #28]
 8018caa:	f7fb fef7 	bl	8014a9c <disk_write>
 8018cae:	4603      	mov	r3, r0
 8018cb0:	2b00      	cmp	r3, #0
 8018cb2:	d005      	beq.n	8018cc0 <f_write+0x22a>
 8018cb4:	68fb      	ldr	r3, [r7, #12]
 8018cb6:	2201      	movs	r2, #1
 8018cb8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8018cbc:	2301      	movs	r3, #1
 8018cbe:	e0bc      	b.n	8018e3a <f_write+0x3a4>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8018cc0:	68fb      	ldr	r3, [r7, #12]
 8018cc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018cc4:	697b      	ldr	r3, [r7, #20]
 8018cc6:	1ad3      	subs	r3, r2, r3
 8018cc8:	6a3a      	ldr	r2, [r7, #32]
 8018cca:	429a      	cmp	r2, r3
 8018ccc:	d91a      	bls.n	8018d04 <f_write+0x26e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8018cce:	68fb      	ldr	r3, [r7, #12]
 8018cd0:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8018cd4:	68fb      	ldr	r3, [r7, #12]
 8018cd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018cd8:	697b      	ldr	r3, [r7, #20]
 8018cda:	1ad3      	subs	r3, r2, r3
 8018cdc:	693a      	ldr	r2, [r7, #16]
 8018cde:	8992      	ldrh	r2, [r2, #12]
 8018ce0:	fb02 f303 	mul.w	r3, r2, r3
 8018ce4:	69fa      	ldr	r2, [r7, #28]
 8018ce6:	18d1      	adds	r1, r2, r3
 8018ce8:	693b      	ldr	r3, [r7, #16]
 8018cea:	899b      	ldrh	r3, [r3, #12]
 8018cec:	461a      	mov	r2, r3
 8018cee:	f7fc f8d9 	bl	8014ea4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8018cf2:	68fb      	ldr	r3, [r7, #12]
 8018cf4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018cf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018cfc:	b2da      	uxtb	r2, r3
 8018cfe:	68fb      	ldr	r3, [r7, #12]
 8018d00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8018d04:	693b      	ldr	r3, [r7, #16]
 8018d06:	899b      	ldrh	r3, [r3, #12]
 8018d08:	461a      	mov	r2, r3
 8018d0a:	6a3b      	ldr	r3, [r7, #32]
 8018d0c:	fb02 f303 	mul.w	r3, r2, r3
 8018d10:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8018d12:	e058      	b.n	8018dc6 <f_write+0x330>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8018d14:	68fb      	ldr	r3, [r7, #12]
 8018d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018d18:	697a      	ldr	r2, [r7, #20]
 8018d1a:	429a      	cmp	r2, r3
 8018d1c:	d01b      	beq.n	8018d56 <f_write+0x2c0>
				fp->fptr < fp->obj.objsize &&
 8018d1e:	68fb      	ldr	r3, [r7, #12]
 8018d20:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8018d24:	68fb      	ldr	r3, [r7, #12]
 8018d26:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8018d2a:	42a2      	cmp	r2, r4
 8018d2c:	bf08      	it	eq
 8018d2e:	4299      	cmpeq	r1, r3
 8018d30:	d211      	bcs.n	8018d56 <f_write+0x2c0>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8018d32:	693b      	ldr	r3, [r7, #16]
 8018d34:	7858      	ldrb	r0, [r3, #1]
 8018d36:	68fb      	ldr	r3, [r7, #12]
 8018d38:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8018d3c:	2301      	movs	r3, #1
 8018d3e:	697a      	ldr	r2, [r7, #20]
 8018d40:	f7fb fe8c 	bl	8014a5c <disk_read>
 8018d44:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8018d46:	2b00      	cmp	r3, #0
 8018d48:	d005      	beq.n	8018d56 <f_write+0x2c0>
					ABORT(fs, FR_DISK_ERR);
 8018d4a:	68fb      	ldr	r3, [r7, #12]
 8018d4c:	2201      	movs	r2, #1
 8018d4e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8018d52:	2301      	movs	r3, #1
 8018d54:	e071      	b.n	8018e3a <f_write+0x3a4>
			}
#endif
			fp->sect = sect;
 8018d56:	68fb      	ldr	r3, [r7, #12]
 8018d58:	697a      	ldr	r2, [r7, #20]
 8018d5a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8018d5c:	693b      	ldr	r3, [r7, #16]
 8018d5e:	899b      	ldrh	r3, [r3, #12]
 8018d60:	4618      	mov	r0, r3
 8018d62:	68fb      	ldr	r3, [r7, #12]
 8018d64:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8018d68:	693a      	ldr	r2, [r7, #16]
 8018d6a:	8992      	ldrh	r2, [r2, #12]
 8018d6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8018d70:	fb02 f201 	mul.w	r2, r2, r1
 8018d74:	1a9b      	subs	r3, r3, r2
 8018d76:	1ac3      	subs	r3, r0, r3
 8018d78:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8018d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	429a      	cmp	r2, r3
 8018d80:	d901      	bls.n	8018d86 <f_write+0x2f0>
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8018d86:	68fb      	ldr	r3, [r7, #12]
 8018d88:	f103 0554 	add.w	r5, r3, #84	; 0x54
 8018d8c:	68fb      	ldr	r3, [r7, #12]
 8018d8e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8018d92:	693b      	ldr	r3, [r7, #16]
 8018d94:	899b      	ldrh	r3, [r3, #12]
 8018d96:	b29b      	uxth	r3, r3
 8018d98:	f04f 0400 	mov.w	r4, #0
 8018d9c:	461a      	mov	r2, r3
 8018d9e:	4623      	mov	r3, r4
 8018da0:	f7e7 fa9a 	bl	80002d8 <__aeabi_uldivmod>
 8018da4:	461c      	mov	r4, r3
 8018da6:	4613      	mov	r3, r2
 8018da8:	442b      	add	r3, r5
 8018daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018dac:	69f9      	ldr	r1, [r7, #28]
 8018dae:	4618      	mov	r0, r3
 8018db0:	f7fc f878 	bl	8014ea4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8018db4:	68fb      	ldr	r3, [r7, #12]
 8018db6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018dba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8018dbe:	b2da      	uxtb	r2, r3
 8018dc0:	68fb      	ldr	r3, [r7, #12]
 8018dc2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8018dc6:	69fa      	ldr	r2, [r7, #28]
 8018dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018dca:	4413      	add	r3, r2
 8018dcc:	61fb      	str	r3, [r7, #28]
 8018dce:	68fb      	ldr	r3, [r7, #12]
 8018dd0:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8018dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018dd6:	461d      	mov	r5, r3
 8018dd8:	f04f 0600 	mov.w	r6, #0
 8018ddc:	186b      	adds	r3, r5, r1
 8018dde:	eb46 0402 	adc.w	r4, r6, r2
 8018de2:	68fa      	ldr	r2, [r7, #12]
 8018de4:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 8018de8:	68fb      	ldr	r3, [r7, #12]
 8018dea:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8018dee:	68fa      	ldr	r2, [r7, #12]
 8018df0:	e9d2 120e 	ldrd	r1, r2, [r2, #56]	; 0x38
 8018df4:	4294      	cmp	r4, r2
 8018df6:	bf08      	it	eq
 8018df8:	428b      	cmpeq	r3, r1
 8018dfa:	d201      	bcs.n	8018e00 <f_write+0x36a>
 8018dfc:	460b      	mov	r3, r1
 8018dfe:	4614      	mov	r4, r2
 8018e00:	68fa      	ldr	r2, [r7, #12]
 8018e02:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8018e06:	683b      	ldr	r3, [r7, #0]
 8018e08:	681a      	ldr	r2, [r3, #0]
 8018e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e0c:	441a      	add	r2, r3
 8018e0e:	683b      	ldr	r3, [r7, #0]
 8018e10:	601a      	str	r2, [r3, #0]
 8018e12:	687a      	ldr	r2, [r7, #4]
 8018e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e16:	1ad3      	subs	r3, r2, r3
 8018e18:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	2b00      	cmp	r3, #0
 8018e1e:	f47f ae80 	bne.w	8018b22 <f_write+0x8c>
 8018e22:	e000      	b.n	8018e26 <f_write+0x390>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8018e24:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8018e26:	68fb      	ldr	r3, [r7, #12]
 8018e28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018e2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018e30:	b2da      	uxtb	r2, r3
 8018e32:	68fb      	ldr	r3, [r7, #12]
 8018e34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 8018e38:	2300      	movs	r3, #0
}
 8018e3a:	4618      	mov	r0, r3
 8018e3c:	3734      	adds	r7, #52	; 0x34
 8018e3e:	46bd      	mov	sp, r7
 8018e40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018e42 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8018e42:	b590      	push	{r4, r7, lr}
 8018e44:	b09d      	sub	sp, #116	; 0x74
 8018e46:	af00      	add	r7, sp, #0
 8018e48:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8018e4a:	687b      	ldr	r3, [r7, #4]
 8018e4c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8018e50:	4611      	mov	r1, r2
 8018e52:	4618      	mov	r0, r3
 8018e54:	f7ff f93e 	bl	80180d4 <validate>
 8018e58:	4603      	mov	r3, r0
 8018e5a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (res == FR_OK) {
 8018e5e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8018e62:	2b00      	cmp	r3, #0
 8018e64:	f040 811d 	bne.w	80190a2 <f_sync+0x260>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8018e68:	687b      	ldr	r3, [r7, #4]
 8018e6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	f000 8115 	beq.w	80190a2 <f_sync+0x260>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018e7e:	b25b      	sxtb	r3, r3
 8018e80:	2b00      	cmp	r3, #0
 8018e82:	da17      	bge.n	8018eb4 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8018e84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018e86:	7858      	ldrb	r0, [r3, #1]
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018e92:	2301      	movs	r3, #1
 8018e94:	f7fb fe02 	bl	8014a9c <disk_write>
 8018e98:	4603      	mov	r3, r0
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	d001      	beq.n	8018ea2 <f_sync+0x60>
 8018e9e:	2301      	movs	r3, #1
 8018ea0:	e101      	b.n	80190a6 <f_sync+0x264>
				fp->flag &= (BYTE)~FA_DIRTY;
 8018ea2:	687b      	ldr	r3, [r7, #4]
 8018ea4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018eac:	b2da      	uxtb	r2, r3
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8018eb4:	f7f9 f912 	bl	80120dc <get_fattime>
 8018eb8:	66b8      	str	r0, [r7, #104]	; 0x68
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8018eba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018ebc:	781b      	ldrb	r3, [r3, #0]
 8018ebe:	2b04      	cmp	r3, #4
 8018ec0:	f040 80a4 	bne.w	801900c <f_sync+0x1ca>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	4618      	mov	r0, r3
 8018ec8:	f7fc fe4a 	bl	8015b60 <fill_first_frag>
 8018ecc:	4603      	mov	r3, r0
 8018ece:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 8018ed2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8018ed6:	2b00      	cmp	r3, #0
 8018ed8:	d10a      	bne.n	8018ef0 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8018eda:	6878      	ldr	r0, [r7, #4]
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8018ee4:	4619      	mov	r1, r3
 8018ee6:	f7fc fe6a 	bl	8015bbe <fill_last_frag>
 8018eea:	4603      	mov	r3, r0
 8018eec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				}
				if (res == FR_OK) {
 8018ef0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8018ef4:	2b00      	cmp	r3, #0
 8018ef6:	f040 80d4 	bne.w	80190a2 <f_sync+0x260>
					INIT_NAMBUF(fs);
 8018efa:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8018efe:	f000 ffc7 	bl	8019e90 <ff_memalloc>
 8018f02:	6638      	str	r0, [r7, #96]	; 0x60
 8018f04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018f06:	2b00      	cmp	r3, #0
 8018f08:	d101      	bne.n	8018f0e <f_sync+0xcc>
 8018f0a:	2311      	movs	r3, #17
 8018f0c:	e0cb      	b.n	80190a6 <f_sync+0x264>
 8018f0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018f10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8018f12:	611a      	str	r2, [r3, #16]
 8018f14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018f16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8018f18:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8018f1c:	615a      	str	r2, [r3, #20]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 8018f1e:	687a      	ldr	r2, [r7, #4]
 8018f20:	f107 0308 	add.w	r3, r7, #8
 8018f24:	4611      	mov	r1, r2
 8018f26:	4618      	mov	r0, r3
 8018f28:	f7fd fd9e 	bl	8016a68 <load_obj_dir>
 8018f2c:	4603      	mov	r3, r0
 8018f2e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					if (res == FR_OK) {
 8018f32:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	d164      	bne.n	8019004 <f_sync+0x1c2>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 8018f3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018f3c:	695b      	ldr	r3, [r3, #20]
 8018f3e:	3304      	adds	r3, #4
 8018f40:	781a      	ldrb	r2, [r3, #0]
 8018f42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018f44:	695b      	ldr	r3, [r3, #20]
 8018f46:	3304      	adds	r3, #4
 8018f48:	f042 0220 	orr.w	r2, r2, #32
 8018f4c:	b2d2      	uxtb	r2, r2
 8018f4e:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	79da      	ldrb	r2, [r3, #7]
 8018f54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018f56:	695b      	ldr	r3, [r3, #20]
 8018f58:	3321      	adds	r3, #33	; 0x21
 8018f5a:	f042 0201 	orr.w	r2, r2, #1
 8018f5e:	b2d2      	uxtb	r2, r2
 8018f60:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 8018f62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018f64:	695b      	ldr	r3, [r3, #20]
 8018f66:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	689b      	ldr	r3, [r3, #8]
 8018f6e:	4619      	mov	r1, r3
 8018f70:	4610      	mov	r0, r2
 8018f72:	f7fb fee4 	bl	8014d3e <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 8018f76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018f78:	695b      	ldr	r3, [r3, #20]
 8018f7a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8018f7e:	687b      	ldr	r3, [r7, #4]
 8018f80:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8018f84:	461a      	mov	r2, r3
 8018f86:	4623      	mov	r3, r4
 8018f88:	4608      	mov	r0, r1
 8018f8a:	f7fb ff04 	bl	8014d96 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 8018f8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018f90:	695b      	ldr	r3, [r3, #20]
 8018f92:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8018f9c:	461a      	mov	r2, r3
 8018f9e:	4623      	mov	r3, r4
 8018fa0:	4608      	mov	r0, r1
 8018fa2:	f7fb fef8 	bl	8014d96 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8018fa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018fa8:	695b      	ldr	r3, [r3, #20]
 8018faa:	330c      	adds	r3, #12
 8018fac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8018fae:	4618      	mov	r0, r3
 8018fb0:	f7fb fec5 	bl	8014d3e <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 8018fb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018fb6:	695b      	ldr	r3, [r3, #20]
 8018fb8:	3315      	adds	r3, #21
 8018fba:	2200      	movs	r2, #0
 8018fbc:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8018fbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018fc0:	695b      	ldr	r3, [r3, #20]
 8018fc2:	3310      	adds	r3, #16
 8018fc4:	2100      	movs	r1, #0
 8018fc6:	4618      	mov	r0, r3
 8018fc8:	f7fb feb9 	bl	8014d3e <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 8018fcc:	f107 0308 	add.w	r3, r7, #8
 8018fd0:	4618      	mov	r0, r3
 8018fd2:	f7fd fd86 	bl	8016ae2 <store_xdir>
 8018fd6:	4603      	mov	r3, r0
 8018fd8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						if (res == FR_OK) {
 8018fdc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8018fe0:	2b00      	cmp	r3, #0
 8018fe2:	d10f      	bne.n	8019004 <f_sync+0x1c2>
							res = sync_fs(fs);
 8018fe4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018fe6:	4618      	mov	r0, r3
 8018fe8:	f7fc f9b8 	bl	801535c <sync_fs>
 8018fec:	4603      	mov	r3, r0
 8018fee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018ff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8018ffc:	b2da      	uxtb	r2, r3
 8018ffe:	687b      	ldr	r3, [r7, #4]
 8019000:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
						}
					}
					FREE_NAMBUF();
 8019004:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8019006:	f000 ff4f 	bl	8019ea8 <ff_memfree>
 801900a:	e04a      	b.n	80190a2 <f_sync+0x260>
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801900c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019012:	4619      	mov	r1, r3
 8019014:	4610      	mov	r0, r2
 8019016:	f7fc f973 	bl	8015300 <move_window>
 801901a:	4603      	mov	r3, r0
 801901c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 8019020:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8019024:	2b00      	cmp	r3, #0
 8019026:	d13c      	bne.n	80190a2 <f_sync+0x260>
					dir = fp->dir_ptr;
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801902c:	667b      	str	r3, [r7, #100]	; 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801902e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019030:	330b      	adds	r3, #11
 8019032:	781a      	ldrb	r2, [r3, #0]
 8019034:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019036:	330b      	adds	r3, #11
 8019038:	f042 0220 	orr.w	r2, r2, #32
 801903c:	b2d2      	uxtb	r2, r2
 801903e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	6818      	ldr	r0, [r3, #0]
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	689b      	ldr	r3, [r3, #8]
 8019048:	461a      	mov	r2, r3
 801904a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801904c:	f7fd f9d9 	bl	8016402 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8019050:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019052:	f103 021c 	add.w	r2, r3, #28
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 801905c:	4619      	mov	r1, r3
 801905e:	4610      	mov	r0, r2
 8019060:	f7fb fe6d 	bl	8014d3e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8019064:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019066:	3316      	adds	r3, #22
 8019068:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801906a:	4618      	mov	r0, r3
 801906c:	f7fb fe67 	bl	8014d3e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8019070:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019072:	3312      	adds	r3, #18
 8019074:	2100      	movs	r1, #0
 8019076:	4618      	mov	r0, r3
 8019078:	f7fb fe46 	bl	8014d08 <st_word>
					fs->wflag = 1;
 801907c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801907e:	2201      	movs	r2, #1
 8019080:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8019082:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019084:	4618      	mov	r0, r3
 8019086:	f7fc f969 	bl	801535c <sync_fs>
 801908a:	4603      	mov	r3, r0
 801908c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801909a:	b2da      	uxtb	r2, r3
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80190a2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80190a6:	4618      	mov	r0, r3
 80190a8:	3774      	adds	r7, #116	; 0x74
 80190aa:	46bd      	mov	sp, r7
 80190ac:	bd90      	pop	{r4, r7, pc}

080190ae <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80190ae:	b580      	push	{r7, lr}
 80190b0:	b084      	sub	sp, #16
 80190b2:	af00      	add	r7, sp, #0
 80190b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80190b6:	6878      	ldr	r0, [r7, #4]
 80190b8:	f7ff fec3 	bl	8018e42 <f_sync>
 80190bc:	4603      	mov	r3, r0
 80190be:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80190c0:	7bfb      	ldrb	r3, [r7, #15]
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	d118      	bne.n	80190f8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80190c6:	687b      	ldr	r3, [r7, #4]
 80190c8:	f107 0208 	add.w	r2, r7, #8
 80190cc:	4611      	mov	r1, r2
 80190ce:	4618      	mov	r0, r3
 80190d0:	f7ff f800 	bl	80180d4 <validate>
 80190d4:	4603      	mov	r3, r0
 80190d6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80190d8:	7bfb      	ldrb	r3, [r7, #15]
 80190da:	2b00      	cmp	r3, #0
 80190dc:	d10c      	bne.n	80190f8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80190de:	687b      	ldr	r3, [r7, #4]
 80190e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80190e2:	4618      	mov	r0, r3
 80190e4:	f7fc f868 	bl	80151b8 <dec_lock>
 80190e8:	4603      	mov	r3, r0
 80190ea:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80190ec:	7bfb      	ldrb	r3, [r7, #15]
 80190ee:	2b00      	cmp	r3, #0
 80190f0:	d102      	bne.n	80190f8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80190f2:	687b      	ldr	r3, [r7, #4]
 80190f4:	2200      	movs	r2, #0
 80190f6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80190f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80190fa:	4618      	mov	r0, r3
 80190fc:	3710      	adds	r7, #16
 80190fe:	46bd      	mov	sp, r7
 8019100:	bd80      	pop	{r7, pc}

08019102 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8019102:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019104:	b095      	sub	sp, #84	; 0x54
 8019106:	af00      	add	r7, sp, #0
 8019108:	60f8      	str	r0, [r7, #12]
 801910a:	e9c7 2300 	strd	r2, r3, [r7]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801910e:	68fb      	ldr	r3, [r7, #12]
 8019110:	f107 0210 	add.w	r2, r7, #16
 8019114:	4611      	mov	r1, r2
 8019116:	4618      	mov	r0, r3
 8019118:	f7fe ffdc 	bl	80180d4 <validate>
 801911c:	4603      	mov	r3, r0
 801911e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8019122:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8019126:	2b00      	cmp	r3, #0
 8019128:	d104      	bne.n	8019134 <f_lseek+0x32>
 801912a:	68fb      	ldr	r3, [r7, #12]
 801912c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019130:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
 8019134:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8019138:	2b00      	cmp	r3, #0
 801913a:	d10e      	bne.n	801915a <f_lseek+0x58>
 801913c:	693b      	ldr	r3, [r7, #16]
 801913e:	781b      	ldrb	r3, [r3, #0]
 8019140:	2b04      	cmp	r3, #4
 8019142:	d10a      	bne.n	801915a <f_lseek+0x58>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8019144:	68f8      	ldr	r0, [r7, #12]
 8019146:	68fb      	ldr	r3, [r7, #12]
 8019148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801914a:	f04f 32ff 	mov.w	r2, #4294967295
 801914e:	4619      	mov	r1, r3
 8019150:	f7fc fd35 	bl	8015bbe <fill_last_frag>
 8019154:	4603      	mov	r3, r0
 8019156:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801915a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801915e:	2b00      	cmp	r3, #0
 8019160:	d002      	beq.n	8019168 <f_lseek+0x66>
 8019162:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8019166:	e2d5      	b.n	8019714 <f_lseek+0x612>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8019168:	68fb      	ldr	r3, [r7, #12]
 801916a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801916c:	2b00      	cmp	r3, #0
 801916e:	f000 8104 	beq.w	801937a <f_lseek+0x278>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8019172:	e9d7 3400 	ldrd	r3, r4, [r7]
 8019176:	f1b4 3fff 	cmp.w	r4, #4294967295
 801917a:	bf08      	it	eq
 801917c:	f1b3 3fff 	cmpeq.w	r3, #4294967295
 8019180:	d15c      	bne.n	801923c <f_lseek+0x13a>
			tbl = fp->cltbl;
 8019182:	68fb      	ldr	r3, [r7, #12]
 8019184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019186:	637b      	str	r3, [r7, #52]	; 0x34
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8019188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801918a:	1d1a      	adds	r2, r3, #4
 801918c:	637a      	str	r2, [r7, #52]	; 0x34
 801918e:	681b      	ldr	r3, [r3, #0]
 8019190:	61fb      	str	r3, [r7, #28]
 8019192:	2302      	movs	r3, #2
 8019194:	63bb      	str	r3, [r7, #56]	; 0x38
			cl = fp->obj.sclust;		/* Origin of the chain */
 8019196:	68fb      	ldr	r3, [r7, #12]
 8019198:	689b      	ldr	r3, [r3, #8]
 801919a:	643b      	str	r3, [r7, #64]	; 0x40
			if (cl) {
 801919c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801919e:	2b00      	cmp	r3, #0
 80191a0:	d03c      	beq.n	801921c <f_lseek+0x11a>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80191a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80191a4:	61bb      	str	r3, [r7, #24]
 80191a6:	2300      	movs	r3, #0
 80191a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80191aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191ac:	3302      	adds	r3, #2
 80191ae:	63bb      	str	r3, [r7, #56]	; 0x38
					do {
						pcl = cl; ncl++;
 80191b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80191b2:	617b      	str	r3, [r7, #20]
 80191b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80191b6:	3301      	adds	r3, #1
 80191b8:	63fb      	str	r3, [r7, #60]	; 0x3c
						cl = get_fat(&fp->obj, cl);
 80191ba:	68fb      	ldr	r3, [r7, #12]
 80191bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80191be:	4618      	mov	r0, r3
 80191c0:	f7fc f95c 	bl	801547c <get_fat>
 80191c4:	6438      	str	r0, [r7, #64]	; 0x40
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80191c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80191c8:	2b01      	cmp	r3, #1
 80191ca:	d805      	bhi.n	80191d8 <f_lseek+0xd6>
 80191cc:	68fb      	ldr	r3, [r7, #12]
 80191ce:	2202      	movs	r2, #2
 80191d0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80191d4:	2302      	movs	r3, #2
 80191d6:	e29d      	b.n	8019714 <f_lseek+0x612>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80191d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80191da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80191de:	d105      	bne.n	80191ec <f_lseek+0xea>
 80191e0:	68fb      	ldr	r3, [r7, #12]
 80191e2:	2201      	movs	r2, #1
 80191e4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80191e8:	2301      	movs	r3, #1
 80191ea:	e293      	b.n	8019714 <f_lseek+0x612>
					} while (cl == pcl + 1);
 80191ec:	697b      	ldr	r3, [r7, #20]
 80191ee:	3301      	adds	r3, #1
 80191f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80191f2:	429a      	cmp	r2, r3
 80191f4:	d0dc      	beq.n	80191b0 <f_lseek+0xae>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80191f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80191f8:	69fb      	ldr	r3, [r7, #28]
 80191fa:	429a      	cmp	r2, r3
 80191fc:	d809      	bhi.n	8019212 <f_lseek+0x110>
						*tbl++ = ncl; *tbl++ = tcl;
 80191fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019200:	1d1a      	adds	r2, r3, #4
 8019202:	637a      	str	r2, [r7, #52]	; 0x34
 8019204:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019206:	601a      	str	r2, [r3, #0]
 8019208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801920a:	1d1a      	adds	r2, r3, #4
 801920c:	637a      	str	r2, [r7, #52]	; 0x34
 801920e:	69ba      	ldr	r2, [r7, #24]
 8019210:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8019212:	693b      	ldr	r3, [r7, #16]
 8019214:	6a1b      	ldr	r3, [r3, #32]
 8019216:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019218:	429a      	cmp	r2, r3
 801921a:	d3c2      	bcc.n	80191a2 <f_lseek+0xa0>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801921c:	68fb      	ldr	r3, [r7, #12]
 801921e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019220:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019222:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8019224:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019226:	69fb      	ldr	r3, [r7, #28]
 8019228:	429a      	cmp	r2, r3
 801922a:	d803      	bhi.n	8019234 <f_lseek+0x132>
				*tbl = 0;		/* Terminate table */
 801922c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801922e:	2200      	movs	r2, #0
 8019230:	601a      	str	r2, [r3, #0]
 8019232:	e26d      	b.n	8019710 <f_lseek+0x60e>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8019234:	2311      	movs	r3, #17
 8019236:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801923a:	e269      	b.n	8019710 <f_lseek+0x60e>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801923c:	68fb      	ldr	r3, [r7, #12]
 801923e:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8019242:	e9d7 3400 	ldrd	r3, r4, [r7]
 8019246:	42a2      	cmp	r2, r4
 8019248:	bf08      	it	eq
 801924a:	4299      	cmpeq	r1, r3
 801924c:	d204      	bcs.n	8019258 <f_lseek+0x156>
 801924e:	68fb      	ldr	r3, [r7, #12]
 8019250:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8019254:	e9c7 3400 	strd	r3, r4, [r7]
			fp->fptr = ofs;				/* Set file pointer */
 8019258:	68fa      	ldr	r2, [r7, #12]
 801925a:	e9d7 3400 	ldrd	r3, r4, [r7]
 801925e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
			if (ofs) {
 8019262:	e9d7 3400 	ldrd	r3, r4, [r7]
 8019266:	4323      	orrs	r3, r4
 8019268:	f000 8252 	beq.w	8019710 <f_lseek+0x60e>
				fp->clust = clmt_clust(fp, ofs - 1);
 801926c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8019270:	f113 31ff 	adds.w	r1, r3, #4294967295
 8019274:	f144 32ff 	adc.w	r2, r4, #4294967295
 8019278:	4613      	mov	r3, r2
 801927a:	460a      	mov	r2, r1
 801927c:	68f8      	ldr	r0, [r7, #12]
 801927e:	f7fc fe84 	bl	8015f8a <clmt_clust>
 8019282:	4602      	mov	r2, r0
 8019284:	68fb      	ldr	r3, [r7, #12]
 8019286:	641a      	str	r2, [r3, #64]	; 0x40
				dsc = clust2sect(fs, fp->clust);
 8019288:	693a      	ldr	r2, [r7, #16]
 801928a:	68fb      	ldr	r3, [r7, #12]
 801928c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801928e:	4619      	mov	r1, r3
 8019290:	4610      	mov	r0, r2
 8019292:	f7fc f8d3 	bl	801543c <clust2sect>
 8019296:	6238      	str	r0, [r7, #32]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8019298:	6a3b      	ldr	r3, [r7, #32]
 801929a:	2b00      	cmp	r3, #0
 801929c:	d105      	bne.n	80192aa <f_lseek+0x1a8>
 801929e:	68fb      	ldr	r3, [r7, #12]
 80192a0:	2202      	movs	r2, #2
 80192a2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80192a6:	2302      	movs	r3, #2
 80192a8:	e234      	b.n	8019714 <f_lseek+0x612>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80192aa:	e9d7 3400 	ldrd	r3, r4, [r7]
 80192ae:	f113 30ff 	adds.w	r0, r3, #4294967295
 80192b2:	f144 31ff 	adc.w	r1, r4, #4294967295
 80192b6:	693b      	ldr	r3, [r7, #16]
 80192b8:	899b      	ldrh	r3, [r3, #12]
 80192ba:	b29b      	uxth	r3, r3
 80192bc:	f04f 0400 	mov.w	r4, #0
 80192c0:	461a      	mov	r2, r3
 80192c2:	4623      	mov	r3, r4
 80192c4:	f7e7 f808 	bl	80002d8 <__aeabi_uldivmod>
 80192c8:	4603      	mov	r3, r0
 80192ca:	460c      	mov	r4, r1
 80192cc:	461a      	mov	r2, r3
 80192ce:	693b      	ldr	r3, [r7, #16]
 80192d0:	895b      	ldrh	r3, [r3, #10]
 80192d2:	3b01      	subs	r3, #1
 80192d4:	4013      	ands	r3, r2
 80192d6:	6a3a      	ldr	r2, [r7, #32]
 80192d8:	4413      	add	r3, r2
 80192da:	623b      	str	r3, [r7, #32]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80192dc:	68fb      	ldr	r3, [r7, #12]
 80192de:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80192e2:	693b      	ldr	r3, [r7, #16]
 80192e4:	899b      	ldrh	r3, [r3, #12]
 80192e6:	b29b      	uxth	r3, r3
 80192e8:	f04f 0400 	mov.w	r4, #0
 80192ec:	461a      	mov	r2, r3
 80192ee:	4623      	mov	r3, r4
 80192f0:	f7e6 fff2 	bl	80002d8 <__aeabi_uldivmod>
 80192f4:	461c      	mov	r4, r3
 80192f6:	4613      	mov	r3, r2
 80192f8:	4323      	orrs	r3, r4
 80192fa:	f000 8209 	beq.w	8019710 <f_lseek+0x60e>
 80192fe:	68fb      	ldr	r3, [r7, #12]
 8019300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019302:	6a3a      	ldr	r2, [r7, #32]
 8019304:	429a      	cmp	r2, r3
 8019306:	f000 8203 	beq.w	8019710 <f_lseek+0x60e>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801930a:	68fb      	ldr	r3, [r7, #12]
 801930c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019310:	b25b      	sxtb	r3, r3
 8019312:	2b00      	cmp	r3, #0
 8019314:	da1b      	bge.n	801934e <f_lseek+0x24c>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8019316:	693b      	ldr	r3, [r7, #16]
 8019318:	7858      	ldrb	r0, [r3, #1]
 801931a:	68fb      	ldr	r3, [r7, #12]
 801931c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8019320:	68fb      	ldr	r3, [r7, #12]
 8019322:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8019324:	2301      	movs	r3, #1
 8019326:	f7fb fbb9 	bl	8014a9c <disk_write>
 801932a:	4603      	mov	r3, r0
 801932c:	2b00      	cmp	r3, #0
 801932e:	d005      	beq.n	801933c <f_lseek+0x23a>
 8019330:	68fb      	ldr	r3, [r7, #12]
 8019332:	2201      	movs	r2, #1
 8019334:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8019338:	2301      	movs	r3, #1
 801933a:	e1eb      	b.n	8019714 <f_lseek+0x612>
						fp->flag &= (BYTE)~FA_DIRTY;
 801933c:	68fb      	ldr	r3, [r7, #12]
 801933e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019342:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019346:	b2da      	uxtb	r2, r3
 8019348:	68fb      	ldr	r3, [r7, #12]
 801934a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801934e:	693b      	ldr	r3, [r7, #16]
 8019350:	7858      	ldrb	r0, [r3, #1]
 8019352:	68fb      	ldr	r3, [r7, #12]
 8019354:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8019358:	2301      	movs	r3, #1
 801935a:	6a3a      	ldr	r2, [r7, #32]
 801935c:	f7fb fb7e 	bl	8014a5c <disk_read>
 8019360:	4603      	mov	r3, r0
 8019362:	2b00      	cmp	r3, #0
 8019364:	d005      	beq.n	8019372 <f_lseek+0x270>
 8019366:	68fb      	ldr	r3, [r7, #12]
 8019368:	2201      	movs	r2, #1
 801936a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801936e:	2301      	movs	r3, #1
 8019370:	e1d0      	b.n	8019714 <f_lseek+0x612>
#endif
					fp->sect = dsc;
 8019372:	68fb      	ldr	r3, [r7, #12]
 8019374:	6a3a      	ldr	r2, [r7, #32]
 8019376:	645a      	str	r2, [r3, #68]	; 0x44
 8019378:	e1ca      	b.n	8019710 <f_lseek+0x60e>
#endif

	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
 801937a:	693b      	ldr	r3, [r7, #16]
 801937c:	781b      	ldrb	r3, [r3, #0]
 801937e:	2b04      	cmp	r3, #4
 8019380:	d00b      	beq.n	801939a <f_lseek+0x298>
 8019382:	e9d7 3400 	ldrd	r3, r4, [r7]
 8019386:	2c01      	cmp	r4, #1
 8019388:	bf08      	it	eq
 801938a:	2b00      	cmpeq	r3, #0
 801938c:	d305      	bcc.n	801939a <f_lseek+0x298>
 801938e:	f04f 33ff 	mov.w	r3, #4294967295
 8019392:	f04f 0400 	mov.w	r4, #0
 8019396:	e9c7 3400 	strd	r3, r4, [r7]
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801939a:	68fb      	ldr	r3, [r7, #12]
 801939c:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 80193a0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80193a4:	42a2      	cmp	r2, r4
 80193a6:	bf08      	it	eq
 80193a8:	4299      	cmpeq	r1, r3
 80193aa:	d20b      	bcs.n	80193c4 <f_lseek+0x2c2>
 80193ac:	68fb      	ldr	r3, [r7, #12]
 80193ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80193b2:	f003 0302 	and.w	r3, r3, #2
 80193b6:	2b00      	cmp	r3, #0
 80193b8:	d104      	bne.n	80193c4 <f_lseek+0x2c2>
			ofs = fp->obj.objsize;
 80193ba:	68fb      	ldr	r3, [r7, #12]
 80193bc:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80193c0:	e9c7 3400 	strd	r3, r4, [r7]
		}
		ifptr = fp->fptr;
 80193c4:	68fb      	ldr	r3, [r7, #12]
 80193c6:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80193ca:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		fp->fptr = nsect = 0;
 80193ce:	2300      	movs	r3, #0
 80193d0:	647b      	str	r3, [r7, #68]	; 0x44
 80193d2:	68fa      	ldr	r2, [r7, #12]
 80193d4:	f04f 0300 	mov.w	r3, #0
 80193d8:	f04f 0400 	mov.w	r4, #0
 80193dc:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		if (ofs) {
 80193e0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80193e4:	4323      	orrs	r3, r4
 80193e6:	f000 812e 	beq.w	8019646 <f_lseek+0x544>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80193ea:	693b      	ldr	r3, [r7, #16]
 80193ec:	895b      	ldrh	r3, [r3, #10]
 80193ee:	461a      	mov	r2, r3
 80193f0:	693b      	ldr	r3, [r7, #16]
 80193f2:	899b      	ldrh	r3, [r3, #12]
 80193f4:	fb03 f302 	mul.w	r3, r3, r2
 80193f8:	627b      	str	r3, [r7, #36]	; 0x24
			if (ifptr > 0 &&
 80193fa:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80193fe:	4323      	orrs	r3, r4
 8019400:	d048      	beq.n	8019494 <f_lseek+0x392>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8019402:	e9d7 3400 	ldrd	r3, r4, [r7]
 8019406:	f113 30ff 	adds.w	r0, r3, #4294967295
 801940a:	f144 31ff 	adc.w	r1, r4, #4294967295
 801940e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019410:	f04f 0400 	mov.w	r4, #0
 8019414:	461a      	mov	r2, r3
 8019416:	4623      	mov	r3, r4
 8019418:	f7e6 ff5e 	bl	80002d8 <__aeabi_uldivmod>
 801941c:	4603      	mov	r3, r0
 801941e:	460c      	mov	r4, r1
 8019420:	461d      	mov	r5, r3
 8019422:	4626      	mov	r6, r4
 8019424:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8019428:	f113 30ff 	adds.w	r0, r3, #4294967295
 801942c:	f144 31ff 	adc.w	r1, r4, #4294967295
 8019430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019432:	f04f 0400 	mov.w	r4, #0
 8019436:	461a      	mov	r2, r3
 8019438:	4623      	mov	r3, r4
 801943a:	f7e6 ff4d 	bl	80002d8 <__aeabi_uldivmod>
 801943e:	4603      	mov	r3, r0
 8019440:	460c      	mov	r4, r1
			if (ifptr > 0 &&
 8019442:	42a6      	cmp	r6, r4
 8019444:	bf08      	it	eq
 8019446:	429d      	cmpeq	r5, r3
 8019448:	d324      	bcc.n	8019494 <f_lseek+0x392>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801944a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 801944e:	f113 31ff 	adds.w	r1, r3, #4294967295
 8019452:	f144 32ff 	adc.w	r2, r4, #4294967295
 8019456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019458:	3b01      	subs	r3, #1
 801945a:	f04f 0400 	mov.w	r4, #0
 801945e:	ea6f 0503 	mvn.w	r5, r3
 8019462:	ea6f 0604 	mvn.w	r6, r4
 8019466:	ea05 0301 	and.w	r3, r5, r1
 801946a:	ea06 0402 	and.w	r4, r6, r2
 801946e:	68fa      	ldr	r2, [r7, #12]
 8019470:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
				ofs -= fp->fptr;
 8019474:	68fb      	ldr	r3, [r7, #12]
 8019476:	e9d3 560e 	ldrd	r5, r6, [r3, #56]	; 0x38
 801947a:	e9d7 1200 	ldrd	r1, r2, [r7]
 801947e:	460b      	mov	r3, r1
 8019480:	4614      	mov	r4, r2
 8019482:	1b5b      	subs	r3, r3, r5
 8019484:	eb64 0406 	sbc.w	r4, r4, r6
 8019488:	e9c7 3400 	strd	r3, r4, [r7]
				clst = fp->clust;
 801948c:	68fb      	ldr	r3, [r7, #12]
 801948e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019490:	64bb      	str	r3, [r7, #72]	; 0x48
 8019492:	e024      	b.n	80194de <f_lseek+0x3dc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8019494:	68fb      	ldr	r3, [r7, #12]
 8019496:	689b      	ldr	r3, [r3, #8]
 8019498:	64bb      	str	r3, [r7, #72]	; 0x48
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801949a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801949c:	2b00      	cmp	r3, #0
 801949e:	d11b      	bne.n	80194d8 <f_lseek+0x3d6>
					clst = create_chain(&fp->obj, 0);
 80194a0:	68fb      	ldr	r3, [r7, #12]
 80194a2:	2100      	movs	r1, #0
 80194a4:	4618      	mov	r0, r3
 80194a6:	f7fc fc6f 	bl	8015d88 <create_chain>
 80194aa:	64b8      	str	r0, [r7, #72]	; 0x48
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80194ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80194ae:	2b01      	cmp	r3, #1
 80194b0:	d105      	bne.n	80194be <f_lseek+0x3bc>
 80194b2:	68fb      	ldr	r3, [r7, #12]
 80194b4:	2202      	movs	r2, #2
 80194b6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80194ba:	2302      	movs	r3, #2
 80194bc:	e12a      	b.n	8019714 <f_lseek+0x612>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80194be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80194c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80194c4:	d105      	bne.n	80194d2 <f_lseek+0x3d0>
 80194c6:	68fb      	ldr	r3, [r7, #12]
 80194c8:	2201      	movs	r2, #1
 80194ca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80194ce:	2301      	movs	r3, #1
 80194d0:	e120      	b.n	8019714 <f_lseek+0x612>
					fp->obj.sclust = clst;
 80194d2:	68fb      	ldr	r3, [r7, #12]
 80194d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80194d6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80194d8:	68fb      	ldr	r3, [r7, #12]
 80194da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80194dc:	641a      	str	r2, [r3, #64]	; 0x40
			}
			if (clst != 0) {
 80194de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80194e0:	2b00      	cmp	r3, #0
 80194e2:	f000 80b0 	beq.w	8019646 <f_lseek+0x544>
				while (ofs > bcs) {						/* Cluster following loop */
 80194e6:	e06a      	b.n	80195be <f_lseek+0x4bc>
					ofs -= bcs; fp->fptr += bcs;
 80194e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194ea:	461d      	mov	r5, r3
 80194ec:	f04f 0600 	mov.w	r6, #0
 80194f0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80194f4:	460b      	mov	r3, r1
 80194f6:	4614      	mov	r4, r2
 80194f8:	1b5b      	subs	r3, r3, r5
 80194fa:	eb64 0406 	sbc.w	r4, r4, r6
 80194fe:	e9c7 3400 	strd	r3, r4, [r7]
 8019502:	68fb      	ldr	r3, [r7, #12]
 8019504:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8019508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801950a:	461d      	mov	r5, r3
 801950c:	f04f 0600 	mov.w	r6, #0
 8019510:	186b      	adds	r3, r5, r1
 8019512:	eb46 0402 	adc.w	r4, r6, r2
 8019516:	68fa      	ldr	r2, [r7, #12]
 8019518:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801951c:	68fb      	ldr	r3, [r7, #12]
 801951e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019522:	f003 0302 	and.w	r3, r3, #2
 8019526:	2b00      	cmp	r3, #0
 8019528:	d028      	beq.n	801957c <f_lseek+0x47a>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
 801952a:	68fb      	ldr	r3, [r7, #12]
 801952c:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8019530:	68fa      	ldr	r2, [r7, #12]
 8019532:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 8019536:	42a2      	cmp	r2, r4
 8019538:	bf08      	it	eq
 801953a:	4299      	cmpeq	r1, r3
 801953c:	d20e      	bcs.n	801955c <f_lseek+0x45a>
							fp->obj.objsize = fp->fptr;
 801953e:	68fb      	ldr	r3, [r7, #12]
 8019540:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8019544:	68fa      	ldr	r2, [r7, #12]
 8019546:	e9c2 3404 	strd	r3, r4, [r2, #16]
							fp->flag |= FA_MODIFIED;
 801954a:	68fb      	ldr	r3, [r7, #12]
 801954c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019554:	b2da      	uxtb	r2, r3
 8019556:	68fb      	ldr	r3, [r7, #12]
 8019558:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801955c:	68fb      	ldr	r3, [r7, #12]
 801955e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8019560:	4618      	mov	r0, r3
 8019562:	f7fc fc11 	bl	8015d88 <create_chain>
 8019566:	64b8      	str	r0, [r7, #72]	; 0x48
						if (clst == 0) {				/* Clip file size in case of disk full */
 8019568:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801956a:	2b00      	cmp	r3, #0
 801956c:	d10c      	bne.n	8019588 <f_lseek+0x486>
							ofs = 0; break;
 801956e:	f04f 0300 	mov.w	r3, #0
 8019572:	f04f 0400 	mov.w	r4, #0
 8019576:	e9c7 3400 	strd	r3, r4, [r7]
 801957a:	e02a      	b.n	80195d2 <f_lseek+0x4d0>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801957c:	68fb      	ldr	r3, [r7, #12]
 801957e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8019580:	4618      	mov	r0, r3
 8019582:	f7fb ff7b 	bl	801547c <get_fat>
 8019586:	64b8      	str	r0, [r7, #72]	; 0x48
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8019588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801958a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801958e:	d105      	bne.n	801959c <f_lseek+0x49a>
 8019590:	68fb      	ldr	r3, [r7, #12]
 8019592:	2201      	movs	r2, #1
 8019594:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8019598:	2301      	movs	r3, #1
 801959a:	e0bb      	b.n	8019714 <f_lseek+0x612>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801959c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801959e:	2b01      	cmp	r3, #1
 80195a0:	d904      	bls.n	80195ac <f_lseek+0x4aa>
 80195a2:	693b      	ldr	r3, [r7, #16]
 80195a4:	6a1b      	ldr	r3, [r3, #32]
 80195a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80195a8:	429a      	cmp	r2, r3
 80195aa:	d305      	bcc.n	80195b8 <f_lseek+0x4b6>
 80195ac:	68fb      	ldr	r3, [r7, #12]
 80195ae:	2202      	movs	r2, #2
 80195b0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80195b4:	2302      	movs	r3, #2
 80195b6:	e0ad      	b.n	8019714 <f_lseek+0x612>
					fp->clust = clst;
 80195b8:	68fb      	ldr	r3, [r7, #12]
 80195ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80195bc:	641a      	str	r2, [r3, #64]	; 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 80195be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195c0:	4619      	mov	r1, r3
 80195c2:	f04f 0200 	mov.w	r2, #0
 80195c6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80195ca:	42a2      	cmp	r2, r4
 80195cc:	bf08      	it	eq
 80195ce:	4299      	cmpeq	r1, r3
 80195d0:	d38a      	bcc.n	80194e8 <f_lseek+0x3e6>
				}
				fp->fptr += ofs;
 80195d2:	68fb      	ldr	r3, [r7, #12]
 80195d4:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 80195d8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80195dc:	185d      	adds	r5, r3, r1
 80195de:	eb44 0602 	adc.w	r6, r4, r2
 80195e2:	68fa      	ldr	r2, [r7, #12]
 80195e4:	e9c2 560e 	strd	r5, r6, [r2, #56]	; 0x38
				if (ofs % SS(fs)) {
 80195e8:	693b      	ldr	r3, [r7, #16]
 80195ea:	899b      	ldrh	r3, [r3, #12]
 80195ec:	b29b      	uxth	r3, r3
 80195ee:	f04f 0400 	mov.w	r4, #0
 80195f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80195f6:	461a      	mov	r2, r3
 80195f8:	4623      	mov	r3, r4
 80195fa:	f7e6 fe6d 	bl	80002d8 <__aeabi_uldivmod>
 80195fe:	461c      	mov	r4, r3
 8019600:	4613      	mov	r3, r2
 8019602:	4323      	orrs	r3, r4
 8019604:	d01f      	beq.n	8019646 <f_lseek+0x544>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8019606:	693b      	ldr	r3, [r7, #16]
 8019608:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801960a:	4618      	mov	r0, r3
 801960c:	f7fb ff16 	bl	801543c <clust2sect>
 8019610:	6478      	str	r0, [r7, #68]	; 0x44
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8019612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019614:	2b00      	cmp	r3, #0
 8019616:	d105      	bne.n	8019624 <f_lseek+0x522>
 8019618:	68fb      	ldr	r3, [r7, #12]
 801961a:	2202      	movs	r2, #2
 801961c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8019620:	2302      	movs	r3, #2
 8019622:	e077      	b.n	8019714 <f_lseek+0x612>
					nsect += (DWORD)(ofs / SS(fs));
 8019624:	693b      	ldr	r3, [r7, #16]
 8019626:	899b      	ldrh	r3, [r3, #12]
 8019628:	b29b      	uxth	r3, r3
 801962a:	f04f 0400 	mov.w	r4, #0
 801962e:	461a      	mov	r2, r3
 8019630:	4623      	mov	r3, r4
 8019632:	e9d7 0100 	ldrd	r0, r1, [r7]
 8019636:	f7e6 fe4f 	bl	80002d8 <__aeabi_uldivmod>
 801963a:	4603      	mov	r3, r0
 801963c:	460c      	mov	r4, r1
 801963e:	461a      	mov	r2, r3
 8019640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019642:	4413      	add	r3, r2
 8019644:	647b      	str	r3, [r7, #68]	; 0x44
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8019646:	68fb      	ldr	r3, [r7, #12]
 8019648:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 801964c:	68fa      	ldr	r2, [r7, #12]
 801964e:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 8019652:	42a2      	cmp	r2, r4
 8019654:	bf08      	it	eq
 8019656:	4299      	cmpeq	r1, r3
 8019658:	d20e      	bcs.n	8019678 <f_lseek+0x576>
			fp->obj.objsize = fp->fptr;
 801965a:	68fb      	ldr	r3, [r7, #12]
 801965c:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8019660:	68fa      	ldr	r2, [r7, #12]
 8019662:	e9c2 3404 	strd	r3, r4, [r2, #16]
			fp->flag |= FA_MODIFIED;
 8019666:	68fb      	ldr	r3, [r7, #12]
 8019668:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801966c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019670:	b2da      	uxtb	r2, r3
 8019672:	68fb      	ldr	r3, [r7, #12]
 8019674:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8019678:	68fb      	ldr	r3, [r7, #12]
 801967a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801967e:	693b      	ldr	r3, [r7, #16]
 8019680:	899b      	ldrh	r3, [r3, #12]
 8019682:	b29b      	uxth	r3, r3
 8019684:	f04f 0400 	mov.w	r4, #0
 8019688:	461a      	mov	r2, r3
 801968a:	4623      	mov	r3, r4
 801968c:	f7e6 fe24 	bl	80002d8 <__aeabi_uldivmod>
 8019690:	461c      	mov	r4, r3
 8019692:	4613      	mov	r3, r2
 8019694:	4323      	orrs	r3, r4
 8019696:	d03b      	beq.n	8019710 <f_lseek+0x60e>
 8019698:	68fb      	ldr	r3, [r7, #12]
 801969a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801969c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801969e:	429a      	cmp	r2, r3
 80196a0:	d036      	beq.n	8019710 <f_lseek+0x60e>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80196a2:	68fb      	ldr	r3, [r7, #12]
 80196a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80196a8:	b25b      	sxtb	r3, r3
 80196aa:	2b00      	cmp	r3, #0
 80196ac:	da1b      	bge.n	80196e6 <f_lseek+0x5e4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80196ae:	693b      	ldr	r3, [r7, #16]
 80196b0:	7858      	ldrb	r0, [r3, #1]
 80196b2:	68fb      	ldr	r3, [r7, #12]
 80196b4:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80196b8:	68fb      	ldr	r3, [r7, #12]
 80196ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80196bc:	2301      	movs	r3, #1
 80196be:	f7fb f9ed 	bl	8014a9c <disk_write>
 80196c2:	4603      	mov	r3, r0
 80196c4:	2b00      	cmp	r3, #0
 80196c6:	d005      	beq.n	80196d4 <f_lseek+0x5d2>
 80196c8:	68fb      	ldr	r3, [r7, #12]
 80196ca:	2201      	movs	r2, #1
 80196cc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80196d0:	2301      	movs	r3, #1
 80196d2:	e01f      	b.n	8019714 <f_lseek+0x612>
				fp->flag &= (BYTE)~FA_DIRTY;
 80196d4:	68fb      	ldr	r3, [r7, #12]
 80196d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80196da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80196de:	b2da      	uxtb	r2, r3
 80196e0:	68fb      	ldr	r3, [r7, #12]
 80196e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80196e6:	693b      	ldr	r3, [r7, #16]
 80196e8:	7858      	ldrb	r0, [r3, #1]
 80196ea:	68fb      	ldr	r3, [r7, #12]
 80196ec:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80196f0:	2301      	movs	r3, #1
 80196f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80196f4:	f7fb f9b2 	bl	8014a5c <disk_read>
 80196f8:	4603      	mov	r3, r0
 80196fa:	2b00      	cmp	r3, #0
 80196fc:	d005      	beq.n	801970a <f_lseek+0x608>
 80196fe:	68fb      	ldr	r3, [r7, #12]
 8019700:	2201      	movs	r2, #1
 8019702:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8019706:	2301      	movs	r3, #1
 8019708:	e004      	b.n	8019714 <f_lseek+0x612>
#endif
			fp->sect = nsect;
 801970a:	68fb      	ldr	r3, [r7, #12]
 801970c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801970e:	645a      	str	r2, [r3, #68]	; 0x44
		}
	}

	LEAVE_FF(fs, res);
 8019710:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8019714:	4618      	mov	r0, r3
 8019716:	3754      	adds	r7, #84	; 0x54
 8019718:	46bd      	mov	sp, r7
 801971a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801971c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 801971c:	b580      	push	{r7, lr}
 801971e:	b084      	sub	sp, #16
 8019720:	af00      	add	r7, sp, #0
 8019722:	6078      	str	r0, [r7, #4]
 8019724:	460b      	mov	r3, r1
 8019726:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8019728:	78fb      	ldrb	r3, [r7, #3]
 801972a:	2b0a      	cmp	r3, #10
 801972c:	d103      	bne.n	8019736 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 801972e:	210d      	movs	r1, #13
 8019730:	6878      	ldr	r0, [r7, #4]
 8019732:	f7ff fff3 	bl	801971c <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8019736:	687b      	ldr	r3, [r7, #4]
 8019738:	685b      	ldr	r3, [r3, #4]
 801973a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 801973c:	68fb      	ldr	r3, [r7, #12]
 801973e:	2b00      	cmp	r3, #0
 8019740:	db25      	blt.n	801978e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8019742:	68fb      	ldr	r3, [r7, #12]
 8019744:	1c5a      	adds	r2, r3, #1
 8019746:	60fa      	str	r2, [r7, #12]
 8019748:	687a      	ldr	r2, [r7, #4]
 801974a:	4413      	add	r3, r2
 801974c:	78fa      	ldrb	r2, [r7, #3]
 801974e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8019750:	68fb      	ldr	r3, [r7, #12]
 8019752:	2b3c      	cmp	r3, #60	; 0x3c
 8019754:	dd12      	ble.n	801977c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8019756:	687b      	ldr	r3, [r7, #4]
 8019758:	6818      	ldr	r0, [r3, #0]
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	f103 010c 	add.w	r1, r3, #12
 8019760:	68fa      	ldr	r2, [r7, #12]
 8019762:	f107 0308 	add.w	r3, r7, #8
 8019766:	f7ff f996 	bl	8018a96 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801976a:	68ba      	ldr	r2, [r7, #8]
 801976c:	68fb      	ldr	r3, [r7, #12]
 801976e:	429a      	cmp	r2, r3
 8019770:	d101      	bne.n	8019776 <putc_bfd+0x5a>
 8019772:	2300      	movs	r3, #0
 8019774:	e001      	b.n	801977a <putc_bfd+0x5e>
 8019776:	f04f 33ff 	mov.w	r3, #4294967295
 801977a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 801977c:	687b      	ldr	r3, [r7, #4]
 801977e:	68fa      	ldr	r2, [r7, #12]
 8019780:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	689b      	ldr	r3, [r3, #8]
 8019786:	1c5a      	adds	r2, r3, #1
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	609a      	str	r2, [r3, #8]
 801978c:	e000      	b.n	8019790 <putc_bfd+0x74>
	if (i < 0) return;
 801978e:	bf00      	nop
}
 8019790:	3710      	adds	r7, #16
 8019792:	46bd      	mov	sp, r7
 8019794:	bd80      	pop	{r7, pc}

08019796 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8019796:	b580      	push	{r7, lr}
 8019798:	b084      	sub	sp, #16
 801979a:	af00      	add	r7, sp, #0
 801979c:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 801979e:	687b      	ldr	r3, [r7, #4]
 80197a0:	685b      	ldr	r3, [r3, #4]
 80197a2:	2b00      	cmp	r3, #0
 80197a4:	db17      	blt.n	80197d6 <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80197a6:	687b      	ldr	r3, [r7, #4]
 80197a8:	6818      	ldr	r0, [r3, #0]
 80197aa:	687b      	ldr	r3, [r7, #4]
 80197ac:	f103 010c 	add.w	r1, r3, #12
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	685b      	ldr	r3, [r3, #4]
 80197b4:	461a      	mov	r2, r3
 80197b6:	f107 030c 	add.w	r3, r7, #12
 80197ba:	f7ff f96c 	bl	8018a96 <f_write>
 80197be:	4603      	mov	r3, r0
 80197c0:	2b00      	cmp	r3, #0
 80197c2:	d108      	bne.n	80197d6 <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	685b      	ldr	r3, [r3, #4]
 80197c8:	461a      	mov	r2, r3
 80197ca:	68fb      	ldr	r3, [r7, #12]
 80197cc:	429a      	cmp	r2, r3
 80197ce:	d102      	bne.n	80197d6 <putc_flush+0x40>
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	689b      	ldr	r3, [r3, #8]
 80197d4:	e001      	b.n	80197da <putc_flush+0x44>
	return EOF;
 80197d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80197da:	4618      	mov	r0, r3
 80197dc:	3710      	adds	r7, #16
 80197de:	46bd      	mov	sp, r7
 80197e0:	bd80      	pop	{r7, pc}

080197e2 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80197e2:	b480      	push	{r7}
 80197e4:	b083      	sub	sp, #12
 80197e6:	af00      	add	r7, sp, #0
 80197e8:	6078      	str	r0, [r7, #4]
 80197ea:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80197ec:	687b      	ldr	r3, [r7, #4]
 80197ee:	683a      	ldr	r2, [r7, #0]
 80197f0:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	2200      	movs	r2, #0
 80197f6:	605a      	str	r2, [r3, #4]
 80197f8:	687b      	ldr	r3, [r7, #4]
 80197fa:	685a      	ldr	r2, [r3, #4]
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	609a      	str	r2, [r3, #8]
}
 8019800:	bf00      	nop
 8019802:	370c      	adds	r7, #12
 8019804:	46bd      	mov	sp, r7
 8019806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801980a:	4770      	bx	lr

0801980c <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 801980c:	b40e      	push	{r1, r2, r3}
 801980e:	b580      	push	{r7, lr}
 8019810:	b0a7      	sub	sp, #156	; 0x9c
 8019812:	af00      	add	r7, sp, #0
 8019814:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8019816:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801981a:	6879      	ldr	r1, [r7, #4]
 801981c:	4618      	mov	r0, r3
 801981e:	f7ff ffe0 	bl	80197e2 <putc_init>

	va_start(arp, fmt);
 8019822:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8019826:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 8019828:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801982c:	1c5a      	adds	r2, r3, #1
 801982e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8019832:	781b      	ldrb	r3, [r3, #0]
 8019834:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 8019838:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801983c:	2b00      	cmp	r3, #0
 801983e:	f000 81f4 	beq.w	8019c2a <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 8019842:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8019846:	2b25      	cmp	r3, #37	; 0x25
 8019848:	d008      	beq.n	801985c <f_printf+0x50>
			putc_bfd(&pb, c);
 801984a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 801984e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019852:	4611      	mov	r1, r2
 8019854:	4618      	mov	r0, r3
 8019856:	f7ff ff61 	bl	801971c <putc_bfd>
			continue;
 801985a:	e1e5      	b.n	8019c28 <f_printf+0x41c>
		}
		w = f = 0;
 801985c:	2300      	movs	r3, #0
 801985e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8019862:	2300      	movs	r3, #0
 8019864:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 8019868:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801986c:	1c5a      	adds	r2, r3, #1
 801986e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8019872:	781b      	ldrb	r3, [r3, #0]
 8019874:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8019878:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801987c:	2b30      	cmp	r3, #48	; 0x30
 801987e:	d10b      	bne.n	8019898 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8019880:	2301      	movs	r3, #1
 8019882:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8019886:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801988a:	1c5a      	adds	r2, r3, #1
 801988c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8019890:	781b      	ldrb	r3, [r3, #0]
 8019892:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8019896:	e024      	b.n	80198e2 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8019898:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801989c:	2b2d      	cmp	r3, #45	; 0x2d
 801989e:	d120      	bne.n	80198e2 <f_printf+0xd6>
				f = 2; c = *fmt++;
 80198a0:	2302      	movs	r3, #2
 80198a2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80198a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80198aa:	1c5a      	adds	r2, r3, #1
 80198ac:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80198b0:	781b      	ldrb	r3, [r3, #0]
 80198b2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 80198b6:	e014      	b.n	80198e2 <f_printf+0xd6>
			w = w * 10 + c - '0';
 80198b8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80198bc:	4613      	mov	r3, r2
 80198be:	009b      	lsls	r3, r3, #2
 80198c0:	4413      	add	r3, r2
 80198c2:	005b      	lsls	r3, r3, #1
 80198c4:	461a      	mov	r2, r3
 80198c6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80198ca:	4413      	add	r3, r2
 80198cc:	3b30      	subs	r3, #48	; 0x30
 80198ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 80198d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80198d6:	1c5a      	adds	r2, r3, #1
 80198d8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80198dc:	781b      	ldrb	r3, [r3, #0]
 80198de:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 80198e2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80198e6:	2b2f      	cmp	r3, #47	; 0x2f
 80198e8:	d903      	bls.n	80198f2 <f_printf+0xe6>
 80198ea:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80198ee:	2b39      	cmp	r3, #57	; 0x39
 80198f0:	d9e2      	bls.n	80198b8 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 80198f2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80198f6:	2b6c      	cmp	r3, #108	; 0x6c
 80198f8:	d003      	beq.n	8019902 <f_printf+0xf6>
 80198fa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80198fe:	2b4c      	cmp	r3, #76	; 0x4c
 8019900:	d10d      	bne.n	801991e <f_printf+0x112>
			f |= 4; c = *fmt++;
 8019902:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8019906:	f043 0304 	orr.w	r3, r3, #4
 801990a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 801990e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8019912:	1c5a      	adds	r2, r3, #1
 8019914:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8019918:	781b      	ldrb	r3, [r3, #0]
 801991a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 801991e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8019922:	2b00      	cmp	r3, #0
 8019924:	f000 8183 	beq.w	8019c2e <f_printf+0x422>
		d = c;
 8019928:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801992c:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8019930:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8019934:	2b60      	cmp	r3, #96	; 0x60
 8019936:	d908      	bls.n	801994a <f_printf+0x13e>
 8019938:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801993c:	2b7a      	cmp	r3, #122	; 0x7a
 801993e:	d804      	bhi.n	801994a <f_printf+0x13e>
 8019940:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8019944:	3b20      	subs	r3, #32
 8019946:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 801994a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801994e:	3b42      	subs	r3, #66	; 0x42
 8019950:	2b16      	cmp	r3, #22
 8019952:	f200 8098 	bhi.w	8019a86 <f_printf+0x27a>
 8019956:	a201      	add	r2, pc, #4	; (adr r2, 801995c <f_printf+0x150>)
 8019958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801995c:	08019a67 	.word	0x08019a67
 8019960:	08019a4f 	.word	0x08019a4f
 8019964:	08019a77 	.word	0x08019a77
 8019968:	08019a87 	.word	0x08019a87
 801996c:	08019a87 	.word	0x08019a87
 8019970:	08019a87 	.word	0x08019a87
 8019974:	08019a87 	.word	0x08019a87
 8019978:	08019a87 	.word	0x08019a87
 801997c:	08019a87 	.word	0x08019a87
 8019980:	08019a87 	.word	0x08019a87
 8019984:	08019a87 	.word	0x08019a87
 8019988:	08019a87 	.word	0x08019a87
 801998c:	08019a87 	.word	0x08019a87
 8019990:	08019a6f 	.word	0x08019a6f
 8019994:	08019a87 	.word	0x08019a87
 8019998:	08019a87 	.word	0x08019a87
 801999c:	08019a87 	.word	0x08019a87
 80199a0:	080199b9 	.word	0x080199b9
 80199a4:	08019a87 	.word	0x08019a87
 80199a8:	08019a77 	.word	0x08019a77
 80199ac:	08019a87 	.word	0x08019a87
 80199b0:	08019a87 	.word	0x08019a87
 80199b4:	08019a7f 	.word	0x08019a7f
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 80199b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80199ba:	1d1a      	adds	r2, r3, #4
 80199bc:	67ba      	str	r2, [r7, #120]	; 0x78
 80199be:	681b      	ldr	r3, [r3, #0]
 80199c0:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 80199c2:	2300      	movs	r3, #0
 80199c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80199c8:	e004      	b.n	80199d4 <f_printf+0x1c8>
 80199ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80199ce:	3301      	adds	r3, #1
 80199d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80199d4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80199d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80199da:	4413      	add	r3, r2
 80199dc:	781b      	ldrb	r3, [r3, #0]
 80199de:	2b00      	cmp	r3, #0
 80199e0:	d1f3      	bne.n	80199ca <f_printf+0x1be>
			if (!(f & 2)) {
 80199e2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80199e6:	f003 0302 	and.w	r3, r3, #2
 80199ea:	2b00      	cmp	r3, #0
 80199ec:	d11a      	bne.n	8019a24 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 80199ee:	e005      	b.n	80199fc <f_printf+0x1f0>
 80199f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80199f4:	2120      	movs	r1, #32
 80199f6:	4618      	mov	r0, r3
 80199f8:	f7ff fe90 	bl	801971c <putc_bfd>
 80199fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019a00:	1c5a      	adds	r2, r3, #1
 8019a02:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8019a06:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019a0a:	429a      	cmp	r2, r3
 8019a0c:	d8f0      	bhi.n	80199f0 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8019a0e:	e009      	b.n	8019a24 <f_printf+0x218>
 8019a10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019a12:	1c5a      	adds	r2, r3, #1
 8019a14:	67fa      	str	r2, [r7, #124]	; 0x7c
 8019a16:	781a      	ldrb	r2, [r3, #0]
 8019a18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019a1c:	4611      	mov	r1, r2
 8019a1e:	4618      	mov	r0, r3
 8019a20:	f7ff fe7c 	bl	801971c <putc_bfd>
 8019a24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019a26:	781b      	ldrb	r3, [r3, #0]
 8019a28:	2b00      	cmp	r3, #0
 8019a2a:	d1f1      	bne.n	8019a10 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8019a2c:	e005      	b.n	8019a3a <f_printf+0x22e>
 8019a2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019a32:	2120      	movs	r1, #32
 8019a34:	4618      	mov	r0, r3
 8019a36:	f7ff fe71 	bl	801971c <putc_bfd>
 8019a3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019a3e:	1c5a      	adds	r2, r3, #1
 8019a40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8019a44:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019a48:	429a      	cmp	r2, r3
 8019a4a:	d8f0      	bhi.n	8019a2e <f_printf+0x222>
			continue;
 8019a4c:	e0ec      	b.n	8019c28 <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8019a4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019a50:	1d1a      	adds	r2, r3, #4
 8019a52:	67ba      	str	r2, [r7, #120]	; 0x78
 8019a54:	681b      	ldr	r3, [r3, #0]
 8019a56:	b2da      	uxtb	r2, r3
 8019a58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019a5c:	4611      	mov	r1, r2
 8019a5e:	4618      	mov	r0, r3
 8019a60:	f7ff fe5c 	bl	801971c <putc_bfd>
 8019a64:	e0e0      	b.n	8019c28 <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 8019a66:	2302      	movs	r3, #2
 8019a68:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8019a6c:	e014      	b.n	8019a98 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8019a6e:	2308      	movs	r3, #8
 8019a70:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8019a74:	e010      	b.n	8019a98 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8019a76:	230a      	movs	r3, #10
 8019a78:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8019a7c:	e00c      	b.n	8019a98 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8019a7e:	2310      	movs	r3, #16
 8019a80:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8019a84:	e008      	b.n	8019a98 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8019a86:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8019a8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019a8e:	4611      	mov	r1, r2
 8019a90:	4618      	mov	r0, r3
 8019a92:	f7ff fe43 	bl	801971c <putc_bfd>
 8019a96:	e0c7      	b.n	8019c28 <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8019a98:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8019a9c:	f003 0304 	and.w	r3, r3, #4
 8019aa0:	2b00      	cmp	r3, #0
 8019aa2:	d004      	beq.n	8019aae <f_printf+0x2a2>
 8019aa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019aa6:	1d1a      	adds	r2, r3, #4
 8019aa8:	67ba      	str	r2, [r7, #120]	; 0x78
 8019aaa:	681b      	ldr	r3, [r3, #0]
 8019aac:	e00c      	b.n	8019ac8 <f_printf+0x2bc>
 8019aae:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8019ab2:	2b44      	cmp	r3, #68	; 0x44
 8019ab4:	d104      	bne.n	8019ac0 <f_printf+0x2b4>
 8019ab6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019ab8:	1d1a      	adds	r2, r3, #4
 8019aba:	67ba      	str	r2, [r7, #120]	; 0x78
 8019abc:	681b      	ldr	r3, [r3, #0]
 8019abe:	e003      	b.n	8019ac8 <f_printf+0x2bc>
 8019ac0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019ac2:	1d1a      	adds	r2, r3, #4
 8019ac4:	67ba      	str	r2, [r7, #120]	; 0x78
 8019ac6:	681b      	ldr	r3, [r3, #0]
 8019ac8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8019acc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8019ad0:	2b44      	cmp	r3, #68	; 0x44
 8019ad2:	d10e      	bne.n	8019af2 <f_printf+0x2e6>
 8019ad4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8019ad8:	2b00      	cmp	r3, #0
 8019ada:	da0a      	bge.n	8019af2 <f_printf+0x2e6>
			v = 0 - v;
 8019adc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8019ae0:	425b      	negs	r3, r3
 8019ae2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 8019ae6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8019aea:	f043 0308 	orr.w	r3, r3, #8
 8019aee:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 8019af2:	2300      	movs	r3, #0
 8019af4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8019af8:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8019afc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8019b00:	fbb3 f1f2 	udiv	r1, r3, r2
 8019b04:	fb02 f201 	mul.w	r2, r2, r1
 8019b08:	1a9b      	subs	r3, r3, r2
 8019b0a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8019b0e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8019b12:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8019b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8019b1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8019b1e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8019b22:	2b09      	cmp	r3, #9
 8019b24:	d90b      	bls.n	8019b3e <f_printf+0x332>
 8019b26:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8019b2a:	2b78      	cmp	r3, #120	; 0x78
 8019b2c:	d101      	bne.n	8019b32 <f_printf+0x326>
 8019b2e:	2227      	movs	r2, #39	; 0x27
 8019b30:	e000      	b.n	8019b34 <f_printf+0x328>
 8019b32:	2207      	movs	r2, #7
 8019b34:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8019b38:	4413      	add	r3, r2
 8019b3a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 8019b3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019b42:	1c5a      	adds	r2, r3, #1
 8019b44:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8019b48:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8019b4c:	3230      	adds	r2, #48	; 0x30
 8019b4e:	b2d2      	uxtb	r2, r2
 8019b50:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8019b54:	440b      	add	r3, r1
 8019b56:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8019b5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8019b5e:	2b00      	cmp	r3, #0
 8019b60:	d003      	beq.n	8019b6a <f_printf+0x35e>
 8019b62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019b66:	2b1f      	cmp	r3, #31
 8019b68:	d9c6      	bls.n	8019af8 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8019b6a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8019b6e:	f003 0308 	and.w	r3, r3, #8
 8019b72:	2b00      	cmp	r3, #0
 8019b74:	d00a      	beq.n	8019b8c <f_printf+0x380>
 8019b76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019b7a:	1c5a      	adds	r2, r3, #1
 8019b7c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8019b80:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8019b84:	4413      	add	r3, r2
 8019b86:	222d      	movs	r2, #45	; 0x2d
 8019b88:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8019b8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019b90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8019b94:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8019b98:	f003 0301 	and.w	r3, r3, #1
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	d001      	beq.n	8019ba4 <f_printf+0x398>
 8019ba0:	2330      	movs	r3, #48	; 0x30
 8019ba2:	e000      	b.n	8019ba6 <f_printf+0x39a>
 8019ba4:	2320      	movs	r3, #32
 8019ba6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8019baa:	e007      	b.n	8019bbc <f_printf+0x3b0>
 8019bac:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8019bb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019bb4:	4611      	mov	r1, r2
 8019bb6:	4618      	mov	r0, r3
 8019bb8:	f7ff fdb0 	bl	801971c <putc_bfd>
 8019bbc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8019bc0:	f003 0302 	and.w	r3, r3, #2
 8019bc4:	2b00      	cmp	r3, #0
 8019bc6:	d108      	bne.n	8019bda <f_printf+0x3ce>
 8019bc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019bcc:	1c5a      	adds	r2, r3, #1
 8019bce:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8019bd2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019bd6:	429a      	cmp	r2, r3
 8019bd8:	d8e8      	bhi.n	8019bac <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 8019bda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019bde:	3b01      	subs	r3, #1
 8019be0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8019be4:	f107 020c 	add.w	r2, r7, #12
 8019be8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019bec:	4413      	add	r3, r2
 8019bee:	781a      	ldrb	r2, [r3, #0]
 8019bf0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019bf4:	4611      	mov	r1, r2
 8019bf6:	4618      	mov	r0, r3
 8019bf8:	f7ff fd90 	bl	801971c <putc_bfd>
		} while (i);
 8019bfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	d1ea      	bne.n	8019bda <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 8019c04:	e007      	b.n	8019c16 <f_printf+0x40a>
 8019c06:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8019c0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019c0e:	4611      	mov	r1, r2
 8019c10:	4618      	mov	r0, r3
 8019c12:	f7ff fd83 	bl	801971c <putc_bfd>
 8019c16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019c1a:	1c5a      	adds	r2, r3, #1
 8019c1c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8019c20:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019c24:	429a      	cmp	r2, r3
 8019c26:	d8ee      	bhi.n	8019c06 <f_printf+0x3fa>
		c = *fmt++;
 8019c28:	e5fe      	b.n	8019828 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8019c2a:	bf00      	nop
 8019c2c:	e000      	b.n	8019c30 <f_printf+0x424>
		if (!c) break;
 8019c2e:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8019c30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019c34:	4618      	mov	r0, r3
 8019c36:	f7ff fdae 	bl	8019796 <putc_flush>
 8019c3a:	4603      	mov	r3, r0
}
 8019c3c:	4618      	mov	r0, r3
 8019c3e:	379c      	adds	r7, #156	; 0x9c
 8019c40:	46bd      	mov	sp, r7
 8019c42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8019c46:	b003      	add	sp, #12
 8019c48:	4770      	bx	lr
 8019c4a:	bf00      	nop

08019c4c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8019c4c:	b480      	push	{r7}
 8019c4e:	b087      	sub	sp, #28
 8019c50:	af00      	add	r7, sp, #0
 8019c52:	60f8      	str	r0, [r7, #12]
 8019c54:	60b9      	str	r1, [r7, #8]
 8019c56:	4613      	mov	r3, r2
 8019c58:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8019c5a:	2301      	movs	r3, #1
 8019c5c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8019c5e:	2300      	movs	r3, #0
 8019c60:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8019c62:	4b1f      	ldr	r3, [pc, #124]	; (8019ce0 <FATFS_LinkDriverEx+0x94>)
 8019c64:	7b9b      	ldrb	r3, [r3, #14]
 8019c66:	b2db      	uxtb	r3, r3
 8019c68:	2b01      	cmp	r3, #1
 8019c6a:	d831      	bhi.n	8019cd0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8019c6c:	4b1c      	ldr	r3, [pc, #112]	; (8019ce0 <FATFS_LinkDriverEx+0x94>)
 8019c6e:	7b9b      	ldrb	r3, [r3, #14]
 8019c70:	b2db      	uxtb	r3, r3
 8019c72:	461a      	mov	r2, r3
 8019c74:	4b1a      	ldr	r3, [pc, #104]	; (8019ce0 <FATFS_LinkDriverEx+0x94>)
 8019c76:	2100      	movs	r1, #0
 8019c78:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8019c7a:	4b19      	ldr	r3, [pc, #100]	; (8019ce0 <FATFS_LinkDriverEx+0x94>)
 8019c7c:	7b9b      	ldrb	r3, [r3, #14]
 8019c7e:	b2db      	uxtb	r3, r3
 8019c80:	4a17      	ldr	r2, [pc, #92]	; (8019ce0 <FATFS_LinkDriverEx+0x94>)
 8019c82:	009b      	lsls	r3, r3, #2
 8019c84:	4413      	add	r3, r2
 8019c86:	68fa      	ldr	r2, [r7, #12]
 8019c88:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8019c8a:	4b15      	ldr	r3, [pc, #84]	; (8019ce0 <FATFS_LinkDriverEx+0x94>)
 8019c8c:	7b9b      	ldrb	r3, [r3, #14]
 8019c8e:	b2db      	uxtb	r3, r3
 8019c90:	461a      	mov	r2, r3
 8019c92:	4b13      	ldr	r3, [pc, #76]	; (8019ce0 <FATFS_LinkDriverEx+0x94>)
 8019c94:	4413      	add	r3, r2
 8019c96:	79fa      	ldrb	r2, [r7, #7]
 8019c98:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 8019c9a:	4b11      	ldr	r3, [pc, #68]	; (8019ce0 <FATFS_LinkDriverEx+0x94>)
 8019c9c:	7b9b      	ldrb	r3, [r3, #14]
 8019c9e:	b2db      	uxtb	r3, r3
 8019ca0:	1c5a      	adds	r2, r3, #1
 8019ca2:	b2d1      	uxtb	r1, r2
 8019ca4:	4a0e      	ldr	r2, [pc, #56]	; (8019ce0 <FATFS_LinkDriverEx+0x94>)
 8019ca6:	7391      	strb	r1, [r2, #14]
 8019ca8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8019caa:	7dbb      	ldrb	r3, [r7, #22]
 8019cac:	3330      	adds	r3, #48	; 0x30
 8019cae:	b2da      	uxtb	r2, r3
 8019cb0:	68bb      	ldr	r3, [r7, #8]
 8019cb2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8019cb4:	68bb      	ldr	r3, [r7, #8]
 8019cb6:	3301      	adds	r3, #1
 8019cb8:	223a      	movs	r2, #58	; 0x3a
 8019cba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8019cbc:	68bb      	ldr	r3, [r7, #8]
 8019cbe:	3302      	adds	r3, #2
 8019cc0:	222f      	movs	r2, #47	; 0x2f
 8019cc2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8019cc4:	68bb      	ldr	r3, [r7, #8]
 8019cc6:	3303      	adds	r3, #3
 8019cc8:	2200      	movs	r2, #0
 8019cca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8019ccc:	2300      	movs	r3, #0
 8019cce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8019cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8019cd2:	4618      	mov	r0, r3
 8019cd4:	371c      	adds	r7, #28
 8019cd6:	46bd      	mov	sp, r7
 8019cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cdc:	4770      	bx	lr
 8019cde:	bf00      	nop
 8019ce0:	240002b0 	.word	0x240002b0

08019ce4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8019ce4:	b580      	push	{r7, lr}
 8019ce6:	b082      	sub	sp, #8
 8019ce8:	af00      	add	r7, sp, #0
 8019cea:	6078      	str	r0, [r7, #4]
 8019cec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8019cee:	2200      	movs	r2, #0
 8019cf0:	6839      	ldr	r1, [r7, #0]
 8019cf2:	6878      	ldr	r0, [r7, #4]
 8019cf4:	f7ff ffaa 	bl	8019c4c <FATFS_LinkDriverEx>
 8019cf8:	4603      	mov	r3, r0
}
 8019cfa:	4618      	mov	r0, r3
 8019cfc:	3708      	adds	r7, #8
 8019cfe:	46bd      	mov	sp, r7
 8019d00:	bd80      	pop	{r7, pc}
	...

08019d04 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8019d04:	b480      	push	{r7}
 8019d06:	b085      	sub	sp, #20
 8019d08:	af00      	add	r7, sp, #0
 8019d0a:	4603      	mov	r3, r0
 8019d0c:	6039      	str	r1, [r7, #0]
 8019d0e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8019d10:	88fb      	ldrh	r3, [r7, #6]
 8019d12:	2b7f      	cmp	r3, #127	; 0x7f
 8019d14:	d802      	bhi.n	8019d1c <ff_convert+0x18>
		c = chr;
 8019d16:	88fb      	ldrh	r3, [r7, #6]
 8019d18:	81fb      	strh	r3, [r7, #14]
 8019d1a:	e025      	b.n	8019d68 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8019d1c:	683b      	ldr	r3, [r7, #0]
 8019d1e:	2b00      	cmp	r3, #0
 8019d20:	d00b      	beq.n	8019d3a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8019d22:	88fb      	ldrh	r3, [r7, #6]
 8019d24:	2bff      	cmp	r3, #255	; 0xff
 8019d26:	d805      	bhi.n	8019d34 <ff_convert+0x30>
 8019d28:	88fb      	ldrh	r3, [r7, #6]
 8019d2a:	3b80      	subs	r3, #128	; 0x80
 8019d2c:	4a12      	ldr	r2, [pc, #72]	; (8019d78 <ff_convert+0x74>)
 8019d2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019d32:	e000      	b.n	8019d36 <ff_convert+0x32>
 8019d34:	2300      	movs	r3, #0
 8019d36:	81fb      	strh	r3, [r7, #14]
 8019d38:	e016      	b.n	8019d68 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8019d3a:	2300      	movs	r3, #0
 8019d3c:	81fb      	strh	r3, [r7, #14]
 8019d3e:	e009      	b.n	8019d54 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8019d40:	89fb      	ldrh	r3, [r7, #14]
 8019d42:	4a0d      	ldr	r2, [pc, #52]	; (8019d78 <ff_convert+0x74>)
 8019d44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019d48:	88fa      	ldrh	r2, [r7, #6]
 8019d4a:	429a      	cmp	r2, r3
 8019d4c:	d006      	beq.n	8019d5c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8019d4e:	89fb      	ldrh	r3, [r7, #14]
 8019d50:	3301      	adds	r3, #1
 8019d52:	81fb      	strh	r3, [r7, #14]
 8019d54:	89fb      	ldrh	r3, [r7, #14]
 8019d56:	2b7f      	cmp	r3, #127	; 0x7f
 8019d58:	d9f2      	bls.n	8019d40 <ff_convert+0x3c>
 8019d5a:	e000      	b.n	8019d5e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8019d5c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8019d5e:	89fb      	ldrh	r3, [r7, #14]
 8019d60:	3380      	adds	r3, #128	; 0x80
 8019d62:	b29b      	uxth	r3, r3
 8019d64:	b2db      	uxtb	r3, r3
 8019d66:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8019d68:	89fb      	ldrh	r3, [r7, #14]
}
 8019d6a:	4618      	mov	r0, r3
 8019d6c:	3714      	adds	r7, #20
 8019d6e:	46bd      	mov	sp, r7
 8019d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d74:	4770      	bx	lr
 8019d76:	bf00      	nop
 8019d78:	0801acd0 	.word	0x0801acd0

08019d7c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8019d7c:	b480      	push	{r7}
 8019d7e:	b087      	sub	sp, #28
 8019d80:	af00      	add	r7, sp, #0
 8019d82:	4603      	mov	r3, r0
 8019d84:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8019d86:	88fb      	ldrh	r3, [r7, #6]
 8019d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8019d8c:	d201      	bcs.n	8019d92 <ff_wtoupper+0x16>
 8019d8e:	4b3e      	ldr	r3, [pc, #248]	; (8019e88 <ff_wtoupper+0x10c>)
 8019d90:	e000      	b.n	8019d94 <ff_wtoupper+0x18>
 8019d92:	4b3e      	ldr	r3, [pc, #248]	; (8019e8c <ff_wtoupper+0x110>)
 8019d94:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8019d96:	697b      	ldr	r3, [r7, #20]
 8019d98:	1c9a      	adds	r2, r3, #2
 8019d9a:	617a      	str	r2, [r7, #20]
 8019d9c:	881b      	ldrh	r3, [r3, #0]
 8019d9e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8019da0:	8a7b      	ldrh	r3, [r7, #18]
 8019da2:	2b00      	cmp	r3, #0
 8019da4:	d068      	beq.n	8019e78 <ff_wtoupper+0xfc>
 8019da6:	88fa      	ldrh	r2, [r7, #6]
 8019da8:	8a7b      	ldrh	r3, [r7, #18]
 8019daa:	429a      	cmp	r2, r3
 8019dac:	d364      	bcc.n	8019e78 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8019dae:	697b      	ldr	r3, [r7, #20]
 8019db0:	1c9a      	adds	r2, r3, #2
 8019db2:	617a      	str	r2, [r7, #20]
 8019db4:	881b      	ldrh	r3, [r3, #0]
 8019db6:	823b      	strh	r3, [r7, #16]
 8019db8:	8a3b      	ldrh	r3, [r7, #16]
 8019dba:	0a1b      	lsrs	r3, r3, #8
 8019dbc:	81fb      	strh	r3, [r7, #14]
 8019dbe:	8a3b      	ldrh	r3, [r7, #16]
 8019dc0:	b2db      	uxtb	r3, r3
 8019dc2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8019dc4:	88fa      	ldrh	r2, [r7, #6]
 8019dc6:	8a79      	ldrh	r1, [r7, #18]
 8019dc8:	8a3b      	ldrh	r3, [r7, #16]
 8019dca:	440b      	add	r3, r1
 8019dcc:	429a      	cmp	r2, r3
 8019dce:	da49      	bge.n	8019e64 <ff_wtoupper+0xe8>
			switch (cmd) {
 8019dd0:	89fb      	ldrh	r3, [r7, #14]
 8019dd2:	2b08      	cmp	r3, #8
 8019dd4:	d84f      	bhi.n	8019e76 <ff_wtoupper+0xfa>
 8019dd6:	a201      	add	r2, pc, #4	; (adr r2, 8019ddc <ff_wtoupper+0x60>)
 8019dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019ddc:	08019e01 	.word	0x08019e01
 8019de0:	08019e13 	.word	0x08019e13
 8019de4:	08019e29 	.word	0x08019e29
 8019de8:	08019e31 	.word	0x08019e31
 8019dec:	08019e39 	.word	0x08019e39
 8019df0:	08019e41 	.word	0x08019e41
 8019df4:	08019e49 	.word	0x08019e49
 8019df8:	08019e51 	.word	0x08019e51
 8019dfc:	08019e59 	.word	0x08019e59
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8019e00:	88fa      	ldrh	r2, [r7, #6]
 8019e02:	8a7b      	ldrh	r3, [r7, #18]
 8019e04:	1ad3      	subs	r3, r2, r3
 8019e06:	005b      	lsls	r3, r3, #1
 8019e08:	697a      	ldr	r2, [r7, #20]
 8019e0a:	4413      	add	r3, r2
 8019e0c:	881b      	ldrh	r3, [r3, #0]
 8019e0e:	80fb      	strh	r3, [r7, #6]
 8019e10:	e027      	b.n	8019e62 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8019e12:	88fa      	ldrh	r2, [r7, #6]
 8019e14:	8a7b      	ldrh	r3, [r7, #18]
 8019e16:	1ad3      	subs	r3, r2, r3
 8019e18:	b29b      	uxth	r3, r3
 8019e1a:	f003 0301 	and.w	r3, r3, #1
 8019e1e:	b29b      	uxth	r3, r3
 8019e20:	88fa      	ldrh	r2, [r7, #6]
 8019e22:	1ad3      	subs	r3, r2, r3
 8019e24:	80fb      	strh	r3, [r7, #6]
 8019e26:	e01c      	b.n	8019e62 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8019e28:	88fb      	ldrh	r3, [r7, #6]
 8019e2a:	3b10      	subs	r3, #16
 8019e2c:	80fb      	strh	r3, [r7, #6]
 8019e2e:	e018      	b.n	8019e62 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8019e30:	88fb      	ldrh	r3, [r7, #6]
 8019e32:	3b20      	subs	r3, #32
 8019e34:	80fb      	strh	r3, [r7, #6]
 8019e36:	e014      	b.n	8019e62 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8019e38:	88fb      	ldrh	r3, [r7, #6]
 8019e3a:	3b30      	subs	r3, #48	; 0x30
 8019e3c:	80fb      	strh	r3, [r7, #6]
 8019e3e:	e010      	b.n	8019e62 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8019e40:	88fb      	ldrh	r3, [r7, #6]
 8019e42:	3b1a      	subs	r3, #26
 8019e44:	80fb      	strh	r3, [r7, #6]
 8019e46:	e00c      	b.n	8019e62 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8019e48:	88fb      	ldrh	r3, [r7, #6]
 8019e4a:	3308      	adds	r3, #8
 8019e4c:	80fb      	strh	r3, [r7, #6]
 8019e4e:	e008      	b.n	8019e62 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8019e50:	88fb      	ldrh	r3, [r7, #6]
 8019e52:	3b50      	subs	r3, #80	; 0x50
 8019e54:	80fb      	strh	r3, [r7, #6]
 8019e56:	e004      	b.n	8019e62 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8019e58:	88fb      	ldrh	r3, [r7, #6]
 8019e5a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8019e5e:	80fb      	strh	r3, [r7, #6]
 8019e60:	bf00      	nop
			}
			break;
 8019e62:	e008      	b.n	8019e76 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8019e64:	89fb      	ldrh	r3, [r7, #14]
 8019e66:	2b00      	cmp	r3, #0
 8019e68:	d195      	bne.n	8019d96 <ff_wtoupper+0x1a>
 8019e6a:	8a3b      	ldrh	r3, [r7, #16]
 8019e6c:	005b      	lsls	r3, r3, #1
 8019e6e:	697a      	ldr	r2, [r7, #20]
 8019e70:	4413      	add	r3, r2
 8019e72:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8019e74:	e78f      	b.n	8019d96 <ff_wtoupper+0x1a>
			break;
 8019e76:	bf00      	nop
	}

	return chr;
 8019e78:	88fb      	ldrh	r3, [r7, #6]
}
 8019e7a:	4618      	mov	r0, r3
 8019e7c:	371c      	adds	r7, #28
 8019e7e:	46bd      	mov	sp, r7
 8019e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e84:	4770      	bx	lr
 8019e86:	bf00      	nop
 8019e88:	0801add0 	.word	0x0801add0
 8019e8c:	0801afc4 	.word	0x0801afc4

08019e90 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8019e90:	b580      	push	{r7, lr}
 8019e92:	b082      	sub	sp, #8
 8019e94:	af00      	add	r7, sp, #0
 8019e96:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8019e98:	6878      	ldr	r0, [r7, #4]
 8019e9a:	f000 fd39 	bl	801a910 <malloc>
 8019e9e:	4603      	mov	r3, r0
}
 8019ea0:	4618      	mov	r0, r3
 8019ea2:	3708      	adds	r7, #8
 8019ea4:	46bd      	mov	sp, r7
 8019ea6:	bd80      	pop	{r7, pc}

08019ea8 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8019ea8:	b580      	push	{r7, lr}
 8019eaa:	b082      	sub	sp, #8
 8019eac:	af00      	add	r7, sp, #0
 8019eae:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8019eb0:	6878      	ldr	r0, [r7, #4]
 8019eb2:	f000 fd35 	bl	801a920 <free>
}
 8019eb6:	bf00      	nop
 8019eb8:	3708      	adds	r7, #8
 8019eba:	46bd      	mov	sp, r7
 8019ebc:	bd80      	pop	{r7, pc}
	...

08019ec0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8019ec0:	b580      	push	{r7, lr}
 8019ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8019ec4:	2200      	movs	r2, #0
 8019ec6:	4913      	ldr	r1, [pc, #76]	; (8019f14 <MX_USB_DEVICE_Init+0x54>)
 8019ec8:	4813      	ldr	r0, [pc, #76]	; (8019f18 <MX_USB_DEVICE_Init+0x58>)
 8019eca:	f7f9 fcc0 	bl	801384e <USBD_Init>
 8019ece:	4603      	mov	r3, r0
 8019ed0:	2b00      	cmp	r3, #0
 8019ed2:	d001      	beq.n	8019ed8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8019ed4:	f7e7 f9c0 	bl	8001258 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8019ed8:	4910      	ldr	r1, [pc, #64]	; (8019f1c <MX_USB_DEVICE_Init+0x5c>)
 8019eda:	480f      	ldr	r0, [pc, #60]	; (8019f18 <MX_USB_DEVICE_Init+0x58>)
 8019edc:	f7f9 fce2 	bl	80138a4 <USBD_RegisterClass>
 8019ee0:	4603      	mov	r3, r0
 8019ee2:	2b00      	cmp	r3, #0
 8019ee4:	d001      	beq.n	8019eea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8019ee6:	f7e7 f9b7 	bl	8001258 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8019eea:	490d      	ldr	r1, [pc, #52]	; (8019f20 <MX_USB_DEVICE_Init+0x60>)
 8019eec:	480a      	ldr	r0, [pc, #40]	; (8019f18 <MX_USB_DEVICE_Init+0x58>)
 8019eee:	f7f8 fc89 	bl	8012804 <USBD_MSC_RegisterStorage>
 8019ef2:	4603      	mov	r3, r0
 8019ef4:	2b00      	cmp	r3, #0
 8019ef6:	d001      	beq.n	8019efc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8019ef8:	f7e7 f9ae 	bl	8001258 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8019efc:	4806      	ldr	r0, [pc, #24]	; (8019f18 <MX_USB_DEVICE_Init+0x58>)
 8019efe:	f7f9 fceb 	bl	80138d8 <USBD_Start>
 8019f02:	4603      	mov	r3, r0
 8019f04:	2b00      	cmp	r3, #0
 8019f06:	d001      	beq.n	8019f0c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8019f08:	f7e7 f9a6 	bl	8001258 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8019f0c:	f7ee fa00 	bl	8008310 <HAL_PWREx_EnableUSBVoltageDetector>
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8019f10:	bf00      	nop
 8019f12:	bd80      	pop	{r7, pc}
 8019f14:	240000c0 	.word	0x240000c0
 8019f18:	24077df4 	.word	0x24077df4
 8019f1c:	2400001c 	.word	0x2400001c
 8019f20:	24000110 	.word	0x24000110

08019f24 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019f24:	b480      	push	{r7}
 8019f26:	b083      	sub	sp, #12
 8019f28:	af00      	add	r7, sp, #0
 8019f2a:	4603      	mov	r3, r0
 8019f2c:	6039      	str	r1, [r7, #0]
 8019f2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8019f30:	683b      	ldr	r3, [r7, #0]
 8019f32:	2212      	movs	r2, #18
 8019f34:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8019f36:	4b03      	ldr	r3, [pc, #12]	; (8019f44 <USBD_FS_DeviceDescriptor+0x20>)
}
 8019f38:	4618      	mov	r0, r3
 8019f3a:	370c      	adds	r7, #12
 8019f3c:	46bd      	mov	sp, r7
 8019f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f42:	4770      	bx	lr
 8019f44:	240000dc 	.word	0x240000dc

08019f48 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019f48:	b480      	push	{r7}
 8019f4a:	b083      	sub	sp, #12
 8019f4c:	af00      	add	r7, sp, #0
 8019f4e:	4603      	mov	r3, r0
 8019f50:	6039      	str	r1, [r7, #0]
 8019f52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8019f54:	683b      	ldr	r3, [r7, #0]
 8019f56:	2204      	movs	r2, #4
 8019f58:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8019f5a:	4b03      	ldr	r3, [pc, #12]	; (8019f68 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8019f5c:	4618      	mov	r0, r3
 8019f5e:	370c      	adds	r7, #12
 8019f60:	46bd      	mov	sp, r7
 8019f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f66:	4770      	bx	lr
 8019f68:	240000f0 	.word	0x240000f0

08019f6c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019f6c:	b580      	push	{r7, lr}
 8019f6e:	b082      	sub	sp, #8
 8019f70:	af00      	add	r7, sp, #0
 8019f72:	4603      	mov	r3, r0
 8019f74:	6039      	str	r1, [r7, #0]
 8019f76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019f78:	79fb      	ldrb	r3, [r7, #7]
 8019f7a:	2b00      	cmp	r3, #0
 8019f7c:	d105      	bne.n	8019f8a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019f7e:	683a      	ldr	r2, [r7, #0]
 8019f80:	4907      	ldr	r1, [pc, #28]	; (8019fa0 <USBD_FS_ProductStrDescriptor+0x34>)
 8019f82:	4808      	ldr	r0, [pc, #32]	; (8019fa4 <USBD_FS_ProductStrDescriptor+0x38>)
 8019f84:	f7fa fc6a 	bl	801485c <USBD_GetString>
 8019f88:	e004      	b.n	8019f94 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019f8a:	683a      	ldr	r2, [r7, #0]
 8019f8c:	4904      	ldr	r1, [pc, #16]	; (8019fa0 <USBD_FS_ProductStrDescriptor+0x34>)
 8019f8e:	4805      	ldr	r0, [pc, #20]	; (8019fa4 <USBD_FS_ProductStrDescriptor+0x38>)
 8019f90:	f7fa fc64 	bl	801485c <USBD_GetString>
  }
  return USBD_StrDesc;
 8019f94:	4b02      	ldr	r3, [pc, #8]	; (8019fa0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8019f96:	4618      	mov	r0, r3
 8019f98:	3708      	adds	r7, #8
 8019f9a:	46bd      	mov	sp, r7
 8019f9c:	bd80      	pop	{r7, pc}
 8019f9e:	bf00      	nop
 8019fa0:	240780b8 	.word	0x240780b8
 8019fa4:	0801abb8 	.word	0x0801abb8

08019fa8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019fa8:	b580      	push	{r7, lr}
 8019faa:	b082      	sub	sp, #8
 8019fac:	af00      	add	r7, sp, #0
 8019fae:	4603      	mov	r3, r0
 8019fb0:	6039      	str	r1, [r7, #0]
 8019fb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8019fb4:	683a      	ldr	r2, [r7, #0]
 8019fb6:	4904      	ldr	r1, [pc, #16]	; (8019fc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8019fb8:	4804      	ldr	r0, [pc, #16]	; (8019fcc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8019fba:	f7fa fc4f 	bl	801485c <USBD_GetString>
  return USBD_StrDesc;
 8019fbe:	4b02      	ldr	r3, [pc, #8]	; (8019fc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8019fc0:	4618      	mov	r0, r3
 8019fc2:	3708      	adds	r7, #8
 8019fc4:	46bd      	mov	sp, r7
 8019fc6:	bd80      	pop	{r7, pc}
 8019fc8:	240780b8 	.word	0x240780b8
 8019fcc:	0801abcc 	.word	0x0801abcc

08019fd0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019fd0:	b580      	push	{r7, lr}
 8019fd2:	b082      	sub	sp, #8
 8019fd4:	af00      	add	r7, sp, #0
 8019fd6:	4603      	mov	r3, r0
 8019fd8:	6039      	str	r1, [r7, #0]
 8019fda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8019fdc:	683b      	ldr	r3, [r7, #0]
 8019fde:	221a      	movs	r2, #26
 8019fe0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8019fe2:	f000 f843 	bl	801a06c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8019fe6:	4b02      	ldr	r3, [pc, #8]	; (8019ff0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8019fe8:	4618      	mov	r0, r3
 8019fea:	3708      	adds	r7, #8
 8019fec:	46bd      	mov	sp, r7
 8019fee:	bd80      	pop	{r7, pc}
 8019ff0:	240000f4 	.word	0x240000f4

08019ff4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019ff4:	b580      	push	{r7, lr}
 8019ff6:	b082      	sub	sp, #8
 8019ff8:	af00      	add	r7, sp, #0
 8019ffa:	4603      	mov	r3, r0
 8019ffc:	6039      	str	r1, [r7, #0]
 8019ffe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801a000:	79fb      	ldrb	r3, [r7, #7]
 801a002:	2b00      	cmp	r3, #0
 801a004:	d105      	bne.n	801a012 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801a006:	683a      	ldr	r2, [r7, #0]
 801a008:	4907      	ldr	r1, [pc, #28]	; (801a028 <USBD_FS_ConfigStrDescriptor+0x34>)
 801a00a:	4808      	ldr	r0, [pc, #32]	; (801a02c <USBD_FS_ConfigStrDescriptor+0x38>)
 801a00c:	f7fa fc26 	bl	801485c <USBD_GetString>
 801a010:	e004      	b.n	801a01c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801a012:	683a      	ldr	r2, [r7, #0]
 801a014:	4904      	ldr	r1, [pc, #16]	; (801a028 <USBD_FS_ConfigStrDescriptor+0x34>)
 801a016:	4805      	ldr	r0, [pc, #20]	; (801a02c <USBD_FS_ConfigStrDescriptor+0x38>)
 801a018:	f7fa fc20 	bl	801485c <USBD_GetString>
  }
  return USBD_StrDesc;
 801a01c:	4b02      	ldr	r3, [pc, #8]	; (801a028 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801a01e:	4618      	mov	r0, r3
 801a020:	3708      	adds	r7, #8
 801a022:	46bd      	mov	sp, r7
 801a024:	bd80      	pop	{r7, pc}
 801a026:	bf00      	nop
 801a028:	240780b8 	.word	0x240780b8
 801a02c:	0801abe0 	.word	0x0801abe0

0801a030 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a030:	b580      	push	{r7, lr}
 801a032:	b082      	sub	sp, #8
 801a034:	af00      	add	r7, sp, #0
 801a036:	4603      	mov	r3, r0
 801a038:	6039      	str	r1, [r7, #0]
 801a03a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a03c:	79fb      	ldrb	r3, [r7, #7]
 801a03e:	2b00      	cmp	r3, #0
 801a040:	d105      	bne.n	801a04e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801a042:	683a      	ldr	r2, [r7, #0]
 801a044:	4907      	ldr	r1, [pc, #28]	; (801a064 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801a046:	4808      	ldr	r0, [pc, #32]	; (801a068 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801a048:	f7fa fc08 	bl	801485c <USBD_GetString>
 801a04c:	e004      	b.n	801a058 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801a04e:	683a      	ldr	r2, [r7, #0]
 801a050:	4904      	ldr	r1, [pc, #16]	; (801a064 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801a052:	4805      	ldr	r0, [pc, #20]	; (801a068 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801a054:	f7fa fc02 	bl	801485c <USBD_GetString>
  }
  return USBD_StrDesc;
 801a058:	4b02      	ldr	r3, [pc, #8]	; (801a064 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801a05a:	4618      	mov	r0, r3
 801a05c:	3708      	adds	r7, #8
 801a05e:	46bd      	mov	sp, r7
 801a060:	bd80      	pop	{r7, pc}
 801a062:	bf00      	nop
 801a064:	240780b8 	.word	0x240780b8
 801a068:	0801abec 	.word	0x0801abec

0801a06c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 801a06c:	b580      	push	{r7, lr}
 801a06e:	b084      	sub	sp, #16
 801a070:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801a072:	4b0f      	ldr	r3, [pc, #60]	; (801a0b0 <Get_SerialNum+0x44>)
 801a074:	681b      	ldr	r3, [r3, #0]
 801a076:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801a078:	4b0e      	ldr	r3, [pc, #56]	; (801a0b4 <Get_SerialNum+0x48>)
 801a07a:	681b      	ldr	r3, [r3, #0]
 801a07c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801a07e:	4b0e      	ldr	r3, [pc, #56]	; (801a0b8 <Get_SerialNum+0x4c>)
 801a080:	681b      	ldr	r3, [r3, #0]
 801a082:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801a084:	68fa      	ldr	r2, [r7, #12]
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	4413      	add	r3, r2
 801a08a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801a08c:	68fb      	ldr	r3, [r7, #12]
 801a08e:	2b00      	cmp	r3, #0
 801a090:	d009      	beq.n	801a0a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801a092:	2208      	movs	r2, #8
 801a094:	4909      	ldr	r1, [pc, #36]	; (801a0bc <Get_SerialNum+0x50>)
 801a096:	68f8      	ldr	r0, [r7, #12]
 801a098:	f000 f814 	bl	801a0c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801a09c:	2204      	movs	r2, #4
 801a09e:	4908      	ldr	r1, [pc, #32]	; (801a0c0 <Get_SerialNum+0x54>)
 801a0a0:	68b8      	ldr	r0, [r7, #8]
 801a0a2:	f000 f80f 	bl	801a0c4 <IntToUnicode>
  }
}
 801a0a6:	bf00      	nop
 801a0a8:	3710      	adds	r7, #16
 801a0aa:	46bd      	mov	sp, r7
 801a0ac:	bd80      	pop	{r7, pc}
 801a0ae:	bf00      	nop
 801a0b0:	1ff1e800 	.word	0x1ff1e800
 801a0b4:	1ff1e804 	.word	0x1ff1e804
 801a0b8:	1ff1e808 	.word	0x1ff1e808
 801a0bc:	240000f6 	.word	0x240000f6
 801a0c0:	24000106 	.word	0x24000106

0801a0c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801a0c4:	b480      	push	{r7}
 801a0c6:	b087      	sub	sp, #28
 801a0c8:	af00      	add	r7, sp, #0
 801a0ca:	60f8      	str	r0, [r7, #12]
 801a0cc:	60b9      	str	r1, [r7, #8]
 801a0ce:	4613      	mov	r3, r2
 801a0d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801a0d2:	2300      	movs	r3, #0
 801a0d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801a0d6:	2300      	movs	r3, #0
 801a0d8:	75fb      	strb	r3, [r7, #23]
 801a0da:	e027      	b.n	801a12c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801a0dc:	68fb      	ldr	r3, [r7, #12]
 801a0de:	0f1b      	lsrs	r3, r3, #28
 801a0e0:	2b09      	cmp	r3, #9
 801a0e2:	d80b      	bhi.n	801a0fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801a0e4:	68fb      	ldr	r3, [r7, #12]
 801a0e6:	0f1b      	lsrs	r3, r3, #28
 801a0e8:	b2da      	uxtb	r2, r3
 801a0ea:	7dfb      	ldrb	r3, [r7, #23]
 801a0ec:	005b      	lsls	r3, r3, #1
 801a0ee:	4619      	mov	r1, r3
 801a0f0:	68bb      	ldr	r3, [r7, #8]
 801a0f2:	440b      	add	r3, r1
 801a0f4:	3230      	adds	r2, #48	; 0x30
 801a0f6:	b2d2      	uxtb	r2, r2
 801a0f8:	701a      	strb	r2, [r3, #0]
 801a0fa:	e00a      	b.n	801a112 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801a0fc:	68fb      	ldr	r3, [r7, #12]
 801a0fe:	0f1b      	lsrs	r3, r3, #28
 801a100:	b2da      	uxtb	r2, r3
 801a102:	7dfb      	ldrb	r3, [r7, #23]
 801a104:	005b      	lsls	r3, r3, #1
 801a106:	4619      	mov	r1, r3
 801a108:	68bb      	ldr	r3, [r7, #8]
 801a10a:	440b      	add	r3, r1
 801a10c:	3237      	adds	r2, #55	; 0x37
 801a10e:	b2d2      	uxtb	r2, r2
 801a110:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801a112:	68fb      	ldr	r3, [r7, #12]
 801a114:	011b      	lsls	r3, r3, #4
 801a116:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801a118:	7dfb      	ldrb	r3, [r7, #23]
 801a11a:	005b      	lsls	r3, r3, #1
 801a11c:	3301      	adds	r3, #1
 801a11e:	68ba      	ldr	r2, [r7, #8]
 801a120:	4413      	add	r3, r2
 801a122:	2200      	movs	r2, #0
 801a124:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801a126:	7dfb      	ldrb	r3, [r7, #23]
 801a128:	3301      	adds	r3, #1
 801a12a:	75fb      	strb	r3, [r7, #23]
 801a12c:	7dfa      	ldrb	r2, [r7, #23]
 801a12e:	79fb      	ldrb	r3, [r7, #7]
 801a130:	429a      	cmp	r2, r3
 801a132:	d3d3      	bcc.n	801a0dc <IntToUnicode+0x18>
  }
}
 801a134:	bf00      	nop
 801a136:	371c      	adds	r7, #28
 801a138:	46bd      	mov	sp, r7
 801a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a13e:	4770      	bx	lr

0801a140 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801a140:	b480      	push	{r7}
 801a142:	b083      	sub	sp, #12
 801a144:	af00      	add	r7, sp, #0
 801a146:	4603      	mov	r3, r0
 801a148:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 801a14a:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801a14c:	4618      	mov	r0, r3
 801a14e:	370c      	adds	r7, #12
 801a150:	46bd      	mov	sp, r7
 801a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a156:	4770      	bx	lr

0801a158 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 801a158:	b580      	push	{r7, lr}
 801a15a:	b084      	sub	sp, #16
 801a15c:	af00      	add	r7, sp, #0
 801a15e:	4603      	mov	r3, r0
 801a160:	60b9      	str	r1, [r7, #8]
 801a162:	607a      	str	r2, [r7, #4]
 801a164:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  if(HAL_SD_GetCardInfo(&hsd1,&SDCardInfo)==HAL_OK){
 801a166:	490b      	ldr	r1, [pc, #44]	; (801a194 <STORAGE_GetCapacity_FS+0x3c>)
 801a168:	480b      	ldr	r0, [pc, #44]	; (801a198 <STORAGE_GetCapacity_FS+0x40>)
 801a16a:	f7f2 f8cf 	bl	800c30c <HAL_SD_GetCardInfo>
 801a16e:	4603      	mov	r3, r0
 801a170:	2b00      	cmp	r3, #0
 801a172:	d10a      	bne.n	801a18a <STORAGE_GetCapacity_FS+0x32>
  *block_num  = SDCardInfo.LogBlockNbr;
 801a174:	4b07      	ldr	r3, [pc, #28]	; (801a194 <STORAGE_GetCapacity_FS+0x3c>)
 801a176:	699a      	ldr	r2, [r3, #24]
 801a178:	68bb      	ldr	r3, [r7, #8]
 801a17a:	601a      	str	r2, [r3, #0]
  *block_size = SDCardInfo.LogBlockSize;
 801a17c:	4b05      	ldr	r3, [pc, #20]	; (801a194 <STORAGE_GetCapacity_FS+0x3c>)
 801a17e:	69db      	ldr	r3, [r3, #28]
 801a180:	b29a      	uxth	r2, r3
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 801a186:	2300      	movs	r3, #0
 801a188:	e7ff      	b.n	801a18a <STORAGE_GetCapacity_FS+0x32>
  }
  /* USER CODE END 3 */
}
 801a18a:	4618      	mov	r0, r3
 801a18c:	3710      	adds	r7, #16
 801a18e:	46bd      	mov	sp, r7
 801a190:	bd80      	pop	{r7, pc}
 801a192:	bf00      	nop
 801a194:	240025d8 	.word	0x240025d8
 801a198:	24001438 	.word	0x24001438

0801a19c <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 801a19c:	b480      	push	{r7}
 801a19e:	b083      	sub	sp, #12
 801a1a0:	af00      	add	r7, sp, #0
 801a1a2:	4603      	mov	r3, r0
 801a1a4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801a1a6:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801a1a8:	4618      	mov	r0, r3
 801a1aa:	370c      	adds	r7, #12
 801a1ac:	46bd      	mov	sp, r7
 801a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1b2:	4770      	bx	lr

0801a1b4 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 801a1b4:	b480      	push	{r7}
 801a1b6:	b083      	sub	sp, #12
 801a1b8:	af00      	add	r7, sp, #0
 801a1ba:	4603      	mov	r3, r0
 801a1bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 801a1be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801a1c0:	4618      	mov	r0, r3
 801a1c2:	370c      	adds	r7, #12
 801a1c4:	46bd      	mov	sp, r7
 801a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1ca:	4770      	bx	lr

0801a1cc <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801a1cc:	b580      	push	{r7, lr}
 801a1ce:	b086      	sub	sp, #24
 801a1d0:	af02      	add	r7, sp, #8
 801a1d2:	60b9      	str	r1, [r7, #8]
 801a1d4:	607a      	str	r2, [r7, #4]
 801a1d6:	461a      	mov	r2, r3
 801a1d8:	4603      	mov	r3, r0
 801a1da:	73fb      	strb	r3, [r7, #15]
 801a1dc:	4613      	mov	r3, r2
 801a1de:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
 if(HAL_SD_ReadBlocks(&hsd1,buf,blk_addr,blk_len,10)==HAL_OK){
 801a1e0:	89ba      	ldrh	r2, [r7, #12]
 801a1e2:	230a      	movs	r3, #10
 801a1e4:	9300      	str	r3, [sp, #0]
 801a1e6:	4613      	mov	r3, r2
 801a1e8:	687a      	ldr	r2, [r7, #4]
 801a1ea:	68b9      	ldr	r1, [r7, #8]
 801a1ec:	4805      	ldr	r0, [pc, #20]	; (801a204 <STORAGE_Read_FS+0x38>)
 801a1ee:	f7f1 fb0f 	bl	800b810 <HAL_SD_ReadBlocks>
 801a1f2:	4603      	mov	r3, r0
 801a1f4:	2b00      	cmp	r3, #0
 801a1f6:	d101      	bne.n	801a1fc <STORAGE_Read_FS+0x30>

  return (USBD_OK);
 801a1f8:	2300      	movs	r3, #0
 801a1fa:	e7ff      	b.n	801a1fc <STORAGE_Read_FS+0x30>
 }
  /* USER CODE END 6 */
}
 801a1fc:	4618      	mov	r0, r3
 801a1fe:	3710      	adds	r7, #16
 801a200:	46bd      	mov	sp, r7
 801a202:	bd80      	pop	{r7, pc}
 801a204:	24001438 	.word	0x24001438

0801a208 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801a208:	b580      	push	{r7, lr}
 801a20a:	b086      	sub	sp, #24
 801a20c:	af02      	add	r7, sp, #8
 801a20e:	60b9      	str	r1, [r7, #8]
 801a210:	607a      	str	r2, [r7, #4]
 801a212:	461a      	mov	r2, r3
 801a214:	4603      	mov	r3, r0
 801a216:	73fb      	strb	r3, [r7, #15]
 801a218:	4613      	mov	r3, r2
 801a21a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	if(HAL_SD_WriteBlocks(&hsd1,buf,blk_addr,blk_len,10)==HAL_OK){
 801a21c:	89ba      	ldrh	r2, [r7, #12]
 801a21e:	230a      	movs	r3, #10
 801a220:	9300      	str	r3, [sp, #0]
 801a222:	4613      	mov	r3, r2
 801a224:	687a      	ldr	r2, [r7, #4]
 801a226:	68b9      	ldr	r1, [r7, #8]
 801a228:	4805      	ldr	r0, [pc, #20]	; (801a240 <STORAGE_Write_FS+0x38>)
 801a22a:	f7f1 fc7b 	bl	800bb24 <HAL_SD_WriteBlocks>
 801a22e:	4603      	mov	r3, r0
 801a230:	2b00      	cmp	r3, #0
 801a232:	d101      	bne.n	801a238 <STORAGE_Write_FS+0x30>

	  return (USBD_OK);
 801a234:	2300      	movs	r3, #0
 801a236:	e7ff      	b.n	801a238 <STORAGE_Write_FS+0x30>
	 }
  /* USER CODE END 7 */
}
 801a238:	4618      	mov	r0, r3
 801a23a:	3710      	adds	r7, #16
 801a23c:	46bd      	mov	sp, r7
 801a23e:	bd80      	pop	{r7, pc}
 801a240:	24001438 	.word	0x24001438

0801a244 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 801a244:	b480      	push	{r7}
 801a246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801a248:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801a24a:	4618      	mov	r0, r3
 801a24c:	46bd      	mov	sp, r7
 801a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a252:	4770      	bx	lr

0801a254 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801a254:	b580      	push	{r7, lr}
 801a256:	b08a      	sub	sp, #40	; 0x28
 801a258:	af00      	add	r7, sp, #0
 801a25a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801a25c:	f107 0314 	add.w	r3, r7, #20
 801a260:	2200      	movs	r2, #0
 801a262:	601a      	str	r2, [r3, #0]
 801a264:	605a      	str	r2, [r3, #4]
 801a266:	609a      	str	r2, [r3, #8]
 801a268:	60da      	str	r2, [r3, #12]
 801a26a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801a26c:	687b      	ldr	r3, [r7, #4]
 801a26e:	681b      	ldr	r3, [r3, #0]
 801a270:	4a1a      	ldr	r2, [pc, #104]	; (801a2dc <HAL_PCD_MspInit+0x88>)
 801a272:	4293      	cmp	r3, r2
 801a274:	d12e      	bne.n	801a2d4 <HAL_PCD_MspInit+0x80>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801a276:	4b1a      	ldr	r3, [pc, #104]	; (801a2e0 <HAL_PCD_MspInit+0x8c>)
 801a278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801a27c:	4a18      	ldr	r2, [pc, #96]	; (801a2e0 <HAL_PCD_MspInit+0x8c>)
 801a27e:	f043 0301 	orr.w	r3, r3, #1
 801a282:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801a286:	4b16      	ldr	r3, [pc, #88]	; (801a2e0 <HAL_PCD_MspInit+0x8c>)
 801a288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801a28c:	f003 0301 	and.w	r3, r3, #1
 801a290:	613b      	str	r3, [r7, #16]
 801a292:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 801a294:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 801a298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a29a:	2302      	movs	r3, #2
 801a29c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a29e:	2300      	movs	r3, #0
 801a2a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801a2a2:	2300      	movs	r3, #0
 801a2a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801a2a6:	230a      	movs	r3, #10
 801a2a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801a2aa:	f107 0314 	add.w	r3, r7, #20
 801a2ae:	4619      	mov	r1, r3
 801a2b0:	480c      	ldr	r0, [pc, #48]	; (801a2e4 <HAL_PCD_MspInit+0x90>)
 801a2b2:	f7ec fb99 	bl	80069e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801a2b6:	4b0a      	ldr	r3, [pc, #40]	; (801a2e0 <HAL_PCD_MspInit+0x8c>)
 801a2b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801a2bc:	4a08      	ldr	r2, [pc, #32]	; (801a2e0 <HAL_PCD_MspInit+0x8c>)
 801a2be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801a2c2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801a2c6:	4b06      	ldr	r3, [pc, #24]	; (801a2e0 <HAL_PCD_MspInit+0x8c>)
 801a2c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801a2cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801a2d0:	60fb      	str	r3, [r7, #12]
 801a2d2:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral interrupt init */
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801a2d4:	bf00      	nop
 801a2d6:	3728      	adds	r7, #40	; 0x28
 801a2d8:	46bd      	mov	sp, r7
 801a2da:	bd80      	pop	{r7, pc}
 801a2dc:	40080000 	.word	0x40080000
 801a2e0:	58024400 	.word	0x58024400
 801a2e4:	58020000 	.word	0x58020000

0801a2e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a2e8:	b580      	push	{r7, lr}
 801a2ea:	b082      	sub	sp, #8
 801a2ec:	af00      	add	r7, sp, #0
 801a2ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801a2f0:	687b      	ldr	r3, [r7, #4]
 801a2f2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801a2f6:	687b      	ldr	r3, [r7, #4]
 801a2f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801a2fc:	4619      	mov	r1, r3
 801a2fe:	4610      	mov	r0, r2
 801a300:	f7f9 fb49 	bl	8013996 <USBD_LL_SetupStage>
}
 801a304:	bf00      	nop
 801a306:	3708      	adds	r7, #8
 801a308:	46bd      	mov	sp, r7
 801a30a:	bd80      	pop	{r7, pc}

0801a30c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a30c:	b580      	push	{r7, lr}
 801a30e:	b082      	sub	sp, #8
 801a310:	af00      	add	r7, sp, #0
 801a312:	6078      	str	r0, [r7, #4]
 801a314:	460b      	mov	r3, r1
 801a316:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801a31e:	78fa      	ldrb	r2, [r7, #3]
 801a320:	6879      	ldr	r1, [r7, #4]
 801a322:	4613      	mov	r3, r2
 801a324:	00db      	lsls	r3, r3, #3
 801a326:	1a9b      	subs	r3, r3, r2
 801a328:	009b      	lsls	r3, r3, #2
 801a32a:	440b      	add	r3, r1
 801a32c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801a330:	681a      	ldr	r2, [r3, #0]
 801a332:	78fb      	ldrb	r3, [r7, #3]
 801a334:	4619      	mov	r1, r3
 801a336:	f7f9 fb79 	bl	8013a2c <USBD_LL_DataOutStage>
}
 801a33a:	bf00      	nop
 801a33c:	3708      	adds	r7, #8
 801a33e:	46bd      	mov	sp, r7
 801a340:	bd80      	pop	{r7, pc}

0801a342 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a342:	b580      	push	{r7, lr}
 801a344:	b082      	sub	sp, #8
 801a346:	af00      	add	r7, sp, #0
 801a348:	6078      	str	r0, [r7, #4]
 801a34a:	460b      	mov	r3, r1
 801a34c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801a354:	78fa      	ldrb	r2, [r7, #3]
 801a356:	6879      	ldr	r1, [r7, #4]
 801a358:	4613      	mov	r3, r2
 801a35a:	00db      	lsls	r3, r3, #3
 801a35c:	1a9b      	subs	r3, r3, r2
 801a35e:	009b      	lsls	r3, r3, #2
 801a360:	440b      	add	r3, r1
 801a362:	3348      	adds	r3, #72	; 0x48
 801a364:	681a      	ldr	r2, [r3, #0]
 801a366:	78fb      	ldrb	r3, [r7, #3]
 801a368:	4619      	mov	r1, r3
 801a36a:	f7f9 fbd0 	bl	8013b0e <USBD_LL_DataInStage>
}
 801a36e:	bf00      	nop
 801a370:	3708      	adds	r7, #8
 801a372:	46bd      	mov	sp, r7
 801a374:	bd80      	pop	{r7, pc}

0801a376 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a376:	b580      	push	{r7, lr}
 801a378:	b082      	sub	sp, #8
 801a37a:	af00      	add	r7, sp, #0
 801a37c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801a37e:	687b      	ldr	r3, [r7, #4]
 801a380:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a384:	4618      	mov	r0, r3
 801a386:	f7f9 fce3 	bl	8013d50 <USBD_LL_SOF>
}
 801a38a:	bf00      	nop
 801a38c:	3708      	adds	r7, #8
 801a38e:	46bd      	mov	sp, r7
 801a390:	bd80      	pop	{r7, pc}

0801a392 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 801a392:	b580      	push	{r7, lr}
 801a394:	b084      	sub	sp, #16
 801a396:	af00      	add	r7, sp, #0
 801a398:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801a39a:	2301      	movs	r3, #1
 801a39c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801a39e:	687b      	ldr	r3, [r7, #4]
 801a3a0:	68db      	ldr	r3, [r3, #12]
 801a3a2:	2b00      	cmp	r3, #0
 801a3a4:	d102      	bne.n	801a3ac <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801a3a6:	2300      	movs	r3, #0
 801a3a8:	73fb      	strb	r3, [r7, #15]
 801a3aa:	e008      	b.n	801a3be <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801a3ac:	687b      	ldr	r3, [r7, #4]
 801a3ae:	68db      	ldr	r3, [r3, #12]
 801a3b0:	2b02      	cmp	r3, #2
 801a3b2:	d102      	bne.n	801a3ba <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801a3b4:	2301      	movs	r3, #1
 801a3b6:	73fb      	strb	r3, [r7, #15]
 801a3b8:	e001      	b.n	801a3be <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801a3ba:	f7e6 ff4d 	bl	8001258 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801a3be:	687b      	ldr	r3, [r7, #4]
 801a3c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a3c4:	7bfa      	ldrb	r2, [r7, #15]
 801a3c6:	4611      	mov	r1, r2
 801a3c8:	4618      	mov	r0, r3
 801a3ca:	f7f9 fc86 	bl	8013cda <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801a3ce:	687b      	ldr	r3, [r7, #4]
 801a3d0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a3d4:	4618      	mov	r0, r3
 801a3d6:	f7f9 fc3f 	bl	8013c58 <USBD_LL_Reset>
}
 801a3da:	bf00      	nop
 801a3dc:	3710      	adds	r7, #16
 801a3de:	46bd      	mov	sp, r7
 801a3e0:	bd80      	pop	{r7, pc}
	...

0801a3e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a3e4:	b580      	push	{r7, lr}
 801a3e6:	b082      	sub	sp, #8
 801a3e8:	af00      	add	r7, sp, #0
 801a3ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801a3ec:	687b      	ldr	r3, [r7, #4]
 801a3ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a3f2:	4618      	mov	r0, r3
 801a3f4:	f7f9 fc81 	bl	8013cfa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801a3f8:	687b      	ldr	r3, [r7, #4]
 801a3fa:	681b      	ldr	r3, [r3, #0]
 801a3fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801a400:	681b      	ldr	r3, [r3, #0]
 801a402:	687a      	ldr	r2, [r7, #4]
 801a404:	6812      	ldr	r2, [r2, #0]
 801a406:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801a40a:	f043 0301 	orr.w	r3, r3, #1
 801a40e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801a410:	687b      	ldr	r3, [r7, #4]
 801a412:	6a1b      	ldr	r3, [r3, #32]
 801a414:	2b00      	cmp	r3, #0
 801a416:	d005      	beq.n	801a424 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a418:	4b04      	ldr	r3, [pc, #16]	; (801a42c <HAL_PCD_SuspendCallback+0x48>)
 801a41a:	691b      	ldr	r3, [r3, #16]
 801a41c:	4a03      	ldr	r2, [pc, #12]	; (801a42c <HAL_PCD_SuspendCallback+0x48>)
 801a41e:	f043 0306 	orr.w	r3, r3, #6
 801a422:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801a424:	bf00      	nop
 801a426:	3708      	adds	r7, #8
 801a428:	46bd      	mov	sp, r7
 801a42a:	bd80      	pop	{r7, pc}
 801a42c:	e000ed00 	.word	0xe000ed00

0801a430 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a430:	b580      	push	{r7, lr}
 801a432:	b082      	sub	sp, #8
 801a434:	af00      	add	r7, sp, #0
 801a436:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801a438:	687b      	ldr	r3, [r7, #4]
 801a43a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a43e:	4618      	mov	r0, r3
 801a440:	f7f9 fc70 	bl	8013d24 <USBD_LL_Resume>
}
 801a444:	bf00      	nop
 801a446:	3708      	adds	r7, #8
 801a448:	46bd      	mov	sp, r7
 801a44a:	bd80      	pop	{r7, pc}

0801a44c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a44c:	b580      	push	{r7, lr}
 801a44e:	b082      	sub	sp, #8
 801a450:	af00      	add	r7, sp, #0
 801a452:	6078      	str	r0, [r7, #4]
 801a454:	460b      	mov	r3, r1
 801a456:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a458:	687b      	ldr	r3, [r7, #4]
 801a45a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a45e:	78fa      	ldrb	r2, [r7, #3]
 801a460:	4611      	mov	r1, r2
 801a462:	4618      	mov	r0, r3
 801a464:	f7f9 fc9b 	bl	8013d9e <USBD_LL_IsoOUTIncomplete>
}
 801a468:	bf00      	nop
 801a46a:	3708      	adds	r7, #8
 801a46c:	46bd      	mov	sp, r7
 801a46e:	bd80      	pop	{r7, pc}

0801a470 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a470:	b580      	push	{r7, lr}
 801a472:	b082      	sub	sp, #8
 801a474:	af00      	add	r7, sp, #0
 801a476:	6078      	str	r0, [r7, #4]
 801a478:	460b      	mov	r3, r1
 801a47a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a47c:	687b      	ldr	r3, [r7, #4]
 801a47e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a482:	78fa      	ldrb	r2, [r7, #3]
 801a484:	4611      	mov	r1, r2
 801a486:	4618      	mov	r0, r3
 801a488:	f7f9 fc7c 	bl	8013d84 <USBD_LL_IsoINIncomplete>
}
 801a48c:	bf00      	nop
 801a48e:	3708      	adds	r7, #8
 801a490:	46bd      	mov	sp, r7
 801a492:	bd80      	pop	{r7, pc}

0801a494 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a494:	b580      	push	{r7, lr}
 801a496:	b082      	sub	sp, #8
 801a498:	af00      	add	r7, sp, #0
 801a49a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801a49c:	687b      	ldr	r3, [r7, #4]
 801a49e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a4a2:	4618      	mov	r0, r3
 801a4a4:	f7f9 fc88 	bl	8013db8 <USBD_LL_DevConnected>
}
 801a4a8:	bf00      	nop
 801a4aa:	3708      	adds	r7, #8
 801a4ac:	46bd      	mov	sp, r7
 801a4ae:	bd80      	pop	{r7, pc}

0801a4b0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a4b0:	b580      	push	{r7, lr}
 801a4b2:	b082      	sub	sp, #8
 801a4b4:	af00      	add	r7, sp, #0
 801a4b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801a4b8:	687b      	ldr	r3, [r7, #4]
 801a4ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a4be:	4618      	mov	r0, r3
 801a4c0:	f7f9 fc85 	bl	8013dce <USBD_LL_DevDisconnected>
}
 801a4c4:	bf00      	nop
 801a4c6:	3708      	adds	r7, #8
 801a4c8:	46bd      	mov	sp, r7
 801a4ca:	bd80      	pop	{r7, pc}

0801a4cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801a4cc:	b580      	push	{r7, lr}
 801a4ce:	b082      	sub	sp, #8
 801a4d0:	af00      	add	r7, sp, #0
 801a4d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801a4d4:	687b      	ldr	r3, [r7, #4]
 801a4d6:	781b      	ldrb	r3, [r3, #0]
 801a4d8:	2b00      	cmp	r3, #0
 801a4da:	d13e      	bne.n	801a55a <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801a4dc:	4a21      	ldr	r2, [pc, #132]	; (801a564 <USBD_LL_Init+0x98>)
 801a4de:	687b      	ldr	r3, [r7, #4]
 801a4e0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801a4e4:	687b      	ldr	r3, [r7, #4]
 801a4e6:	4a1f      	ldr	r2, [pc, #124]	; (801a564 <USBD_LL_Init+0x98>)
 801a4e8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801a4ec:	4b1d      	ldr	r3, [pc, #116]	; (801a564 <USBD_LL_Init+0x98>)
 801a4ee:	4a1e      	ldr	r2, [pc, #120]	; (801a568 <USBD_LL_Init+0x9c>)
 801a4f0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801a4f2:	4b1c      	ldr	r3, [pc, #112]	; (801a564 <USBD_LL_Init+0x98>)
 801a4f4:	2209      	movs	r2, #9
 801a4f6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801a4f8:	4b1a      	ldr	r3, [pc, #104]	; (801a564 <USBD_LL_Init+0x98>)
 801a4fa:	2202      	movs	r2, #2
 801a4fc:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801a4fe:	4b19      	ldr	r3, [pc, #100]	; (801a564 <USBD_LL_Init+0x98>)
 801a500:	2200      	movs	r2, #0
 801a502:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801a504:	4b17      	ldr	r3, [pc, #92]	; (801a564 <USBD_LL_Init+0x98>)
 801a506:	2202      	movs	r2, #2
 801a508:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801a50a:	4b16      	ldr	r3, [pc, #88]	; (801a564 <USBD_LL_Init+0x98>)
 801a50c:	2200      	movs	r2, #0
 801a50e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801a510:	4b14      	ldr	r3, [pc, #80]	; (801a564 <USBD_LL_Init+0x98>)
 801a512:	2200      	movs	r2, #0
 801a514:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801a516:	4b13      	ldr	r3, [pc, #76]	; (801a564 <USBD_LL_Init+0x98>)
 801a518:	2200      	movs	r2, #0
 801a51a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801a51c:	4b11      	ldr	r3, [pc, #68]	; (801a564 <USBD_LL_Init+0x98>)
 801a51e:	2200      	movs	r2, #0
 801a520:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801a522:	4b10      	ldr	r3, [pc, #64]	; (801a564 <USBD_LL_Init+0x98>)
 801a524:	2200      	movs	r2, #0
 801a526:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801a528:	4b0e      	ldr	r3, [pc, #56]	; (801a564 <USBD_LL_Init+0x98>)
 801a52a:	2200      	movs	r2, #0
 801a52c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801a52e:	480d      	ldr	r0, [pc, #52]	; (801a564 <USBD_LL_Init+0x98>)
 801a530:	f7ec fc7b 	bl	8006e2a <HAL_PCD_Init>
 801a534:	4603      	mov	r3, r0
 801a536:	2b00      	cmp	r3, #0
 801a538:	d001      	beq.n	801a53e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801a53a:	f7e6 fe8d 	bl	8001258 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801a53e:	2180      	movs	r1, #128	; 0x80
 801a540:	4808      	ldr	r0, [pc, #32]	; (801a564 <USBD_LL_Init+0x98>)
 801a542:	f7ed fe6a 	bl	800821a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801a546:	2240      	movs	r2, #64	; 0x40
 801a548:	2100      	movs	r1, #0
 801a54a:	4806      	ldr	r0, [pc, #24]	; (801a564 <USBD_LL_Init+0x98>)
 801a54c:	f7ed fe1e 	bl	800818c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801a550:	2280      	movs	r2, #128	; 0x80
 801a552:	2101      	movs	r1, #1
 801a554:	4803      	ldr	r0, [pc, #12]	; (801a564 <USBD_LL_Init+0x98>)
 801a556:	f7ed fe19 	bl	800818c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801a55a:	2300      	movs	r3, #0
}
 801a55c:	4618      	mov	r0, r3
 801a55e:	3708      	adds	r7, #8
 801a560:	46bd      	mov	sp, r7
 801a562:	bd80      	pop	{r7, pc}
 801a564:	240782b8 	.word	0x240782b8
 801a568:	40080000 	.word	0x40080000

0801a56c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801a56c:	b580      	push	{r7, lr}
 801a56e:	b084      	sub	sp, #16
 801a570:	af00      	add	r7, sp, #0
 801a572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a574:	2300      	movs	r3, #0
 801a576:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a578:	2300      	movs	r3, #0
 801a57a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 801a57c:	687b      	ldr	r3, [r7, #4]
 801a57e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801a582:	4618      	mov	r0, r3
 801a584:	f7ec fd75 	bl	8007072 <HAL_PCD_Start>
 801a588:	4603      	mov	r3, r0
 801a58a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 801a58c:	7bfb      	ldrb	r3, [r7, #15]
 801a58e:	4618      	mov	r0, r3
 801a590:	f000 f968 	bl	801a864 <USBD_Get_USB_Status>
 801a594:	4603      	mov	r3, r0
 801a596:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801a598:	7bbb      	ldrb	r3, [r7, #14]
}
 801a59a:	4618      	mov	r0, r3
 801a59c:	3710      	adds	r7, #16
 801a59e:	46bd      	mov	sp, r7
 801a5a0:	bd80      	pop	{r7, pc}

0801a5a2 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 801a5a2:	b580      	push	{r7, lr}
 801a5a4:	b084      	sub	sp, #16
 801a5a6:	af00      	add	r7, sp, #0
 801a5a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a5aa:	2300      	movs	r3, #0
 801a5ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a5ae:	2300      	movs	r3, #0
 801a5b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 801a5b2:	687b      	ldr	r3, [r7, #4]
 801a5b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801a5b8:	4618      	mov	r0, r3
 801a5ba:	f7ec fd8d 	bl	80070d8 <HAL_PCD_Stop>
 801a5be:	4603      	mov	r3, r0
 801a5c0:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 801a5c2:	7bfb      	ldrb	r3, [r7, #15]
 801a5c4:	4618      	mov	r0, r3
 801a5c6:	f000 f94d 	bl	801a864 <USBD_Get_USB_Status>
 801a5ca:	4603      	mov	r3, r0
 801a5cc:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 801a5ce:	7bbb      	ldrb	r3, [r7, #14]
}
 801a5d0:	4618      	mov	r0, r3
 801a5d2:	3710      	adds	r7, #16
 801a5d4:	46bd      	mov	sp, r7
 801a5d6:	bd80      	pop	{r7, pc}

0801a5d8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801a5d8:	b580      	push	{r7, lr}
 801a5da:	b084      	sub	sp, #16
 801a5dc:	af00      	add	r7, sp, #0
 801a5de:	6078      	str	r0, [r7, #4]
 801a5e0:	4608      	mov	r0, r1
 801a5e2:	4611      	mov	r1, r2
 801a5e4:	461a      	mov	r2, r3
 801a5e6:	4603      	mov	r3, r0
 801a5e8:	70fb      	strb	r3, [r7, #3]
 801a5ea:	460b      	mov	r3, r1
 801a5ec:	70bb      	strb	r3, [r7, #2]
 801a5ee:	4613      	mov	r3, r2
 801a5f0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a5f2:	2300      	movs	r3, #0
 801a5f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a5f6:	2300      	movs	r3, #0
 801a5f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801a5fa:	687b      	ldr	r3, [r7, #4]
 801a5fc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801a600:	78bb      	ldrb	r3, [r7, #2]
 801a602:	883a      	ldrh	r2, [r7, #0]
 801a604:	78f9      	ldrb	r1, [r7, #3]
 801a606:	f7ed f99b 	bl	8007940 <HAL_PCD_EP_Open>
 801a60a:	4603      	mov	r3, r0
 801a60c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a60e:	7bfb      	ldrb	r3, [r7, #15]
 801a610:	4618      	mov	r0, r3
 801a612:	f000 f927 	bl	801a864 <USBD_Get_USB_Status>
 801a616:	4603      	mov	r3, r0
 801a618:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801a61a:	7bbb      	ldrb	r3, [r7, #14]
}
 801a61c:	4618      	mov	r0, r3
 801a61e:	3710      	adds	r7, #16
 801a620:	46bd      	mov	sp, r7
 801a622:	bd80      	pop	{r7, pc}

0801a624 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a624:	b580      	push	{r7, lr}
 801a626:	b084      	sub	sp, #16
 801a628:	af00      	add	r7, sp, #0
 801a62a:	6078      	str	r0, [r7, #4]
 801a62c:	460b      	mov	r3, r1
 801a62e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a630:	2300      	movs	r3, #0
 801a632:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a634:	2300      	movs	r3, #0
 801a636:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801a63e:	78fa      	ldrb	r2, [r7, #3]
 801a640:	4611      	mov	r1, r2
 801a642:	4618      	mov	r0, r3
 801a644:	f7ed f9e4 	bl	8007a10 <HAL_PCD_EP_Close>
 801a648:	4603      	mov	r3, r0
 801a64a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 801a64c:	7bfb      	ldrb	r3, [r7, #15]
 801a64e:	4618      	mov	r0, r3
 801a650:	f000 f908 	bl	801a864 <USBD_Get_USB_Status>
 801a654:	4603      	mov	r3, r0
 801a656:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 801a658:	7bbb      	ldrb	r3, [r7, #14]
}
 801a65a:	4618      	mov	r0, r3
 801a65c:	3710      	adds	r7, #16
 801a65e:	46bd      	mov	sp, r7
 801a660:	bd80      	pop	{r7, pc}

0801a662 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a662:	b580      	push	{r7, lr}
 801a664:	b084      	sub	sp, #16
 801a666:	af00      	add	r7, sp, #0
 801a668:	6078      	str	r0, [r7, #4]
 801a66a:	460b      	mov	r3, r1
 801a66c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a66e:	2300      	movs	r3, #0
 801a670:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a672:	2300      	movs	r3, #0
 801a674:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801a676:	687b      	ldr	r3, [r7, #4]
 801a678:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801a67c:	78fa      	ldrb	r2, [r7, #3]
 801a67e:	4611      	mov	r1, r2
 801a680:	4618      	mov	r0, r3
 801a682:	f7ed fb76 	bl	8007d72 <HAL_PCD_EP_Flush>
 801a686:	4603      	mov	r3, r0
 801a688:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 801a68a:	7bfb      	ldrb	r3, [r7, #15]
 801a68c:	4618      	mov	r0, r3
 801a68e:	f000 f8e9 	bl	801a864 <USBD_Get_USB_Status>
 801a692:	4603      	mov	r3, r0
 801a694:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 801a696:	7bbb      	ldrb	r3, [r7, #14]
}
 801a698:	4618      	mov	r0, r3
 801a69a:	3710      	adds	r7, #16
 801a69c:	46bd      	mov	sp, r7
 801a69e:	bd80      	pop	{r7, pc}

0801a6a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a6a0:	b580      	push	{r7, lr}
 801a6a2:	b084      	sub	sp, #16
 801a6a4:	af00      	add	r7, sp, #0
 801a6a6:	6078      	str	r0, [r7, #4]
 801a6a8:	460b      	mov	r3, r1
 801a6aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a6ac:	2300      	movs	r3, #0
 801a6ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a6b0:	2300      	movs	r3, #0
 801a6b2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801a6b4:	687b      	ldr	r3, [r7, #4]
 801a6b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801a6ba:	78fa      	ldrb	r2, [r7, #3]
 801a6bc:	4611      	mov	r1, r2
 801a6be:	4618      	mov	r0, r3
 801a6c0:	f7ed fa9d 	bl	8007bfe <HAL_PCD_EP_SetStall>
 801a6c4:	4603      	mov	r3, r0
 801a6c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a6c8:	7bfb      	ldrb	r3, [r7, #15]
 801a6ca:	4618      	mov	r0, r3
 801a6cc:	f000 f8ca 	bl	801a864 <USBD_Get_USB_Status>
 801a6d0:	4603      	mov	r3, r0
 801a6d2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 801a6d4:	7bbb      	ldrb	r3, [r7, #14]
}
 801a6d6:	4618      	mov	r0, r3
 801a6d8:	3710      	adds	r7, #16
 801a6da:	46bd      	mov	sp, r7
 801a6dc:	bd80      	pop	{r7, pc}

0801a6de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a6de:	b580      	push	{r7, lr}
 801a6e0:	b084      	sub	sp, #16
 801a6e2:	af00      	add	r7, sp, #0
 801a6e4:	6078      	str	r0, [r7, #4]
 801a6e6:	460b      	mov	r3, r1
 801a6e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a6ea:	2300      	movs	r3, #0
 801a6ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a6ee:	2300      	movs	r3, #0
 801a6f0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801a6f2:	687b      	ldr	r3, [r7, #4]
 801a6f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801a6f8:	78fa      	ldrb	r2, [r7, #3]
 801a6fa:	4611      	mov	r1, r2
 801a6fc:	4618      	mov	r0, r3
 801a6fe:	f7ed fae2 	bl	8007cc6 <HAL_PCD_EP_ClrStall>
 801a702:	4603      	mov	r3, r0
 801a704:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 801a706:	7bfb      	ldrb	r3, [r7, #15]
 801a708:	4618      	mov	r0, r3
 801a70a:	f000 f8ab 	bl	801a864 <USBD_Get_USB_Status>
 801a70e:	4603      	mov	r3, r0
 801a710:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 801a712:	7bbb      	ldrb	r3, [r7, #14]
}
 801a714:	4618      	mov	r0, r3
 801a716:	3710      	adds	r7, #16
 801a718:	46bd      	mov	sp, r7
 801a71a:	bd80      	pop	{r7, pc}

0801a71c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a71c:	b480      	push	{r7}
 801a71e:	b085      	sub	sp, #20
 801a720:	af00      	add	r7, sp, #0
 801a722:	6078      	str	r0, [r7, #4]
 801a724:	460b      	mov	r3, r1
 801a726:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801a728:	687b      	ldr	r3, [r7, #4]
 801a72a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801a72e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 801a730:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a734:	2b00      	cmp	r3, #0
 801a736:	da0b      	bge.n	801a750 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 801a738:	78fb      	ldrb	r3, [r7, #3]
 801a73a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a73e:	68f9      	ldr	r1, [r7, #12]
 801a740:	4613      	mov	r3, r2
 801a742:	00db      	lsls	r3, r3, #3
 801a744:	1a9b      	subs	r3, r3, r2
 801a746:	009b      	lsls	r3, r3, #2
 801a748:	440b      	add	r3, r1
 801a74a:	333e      	adds	r3, #62	; 0x3e
 801a74c:	781b      	ldrb	r3, [r3, #0]
 801a74e:	e00b      	b.n	801a768 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 801a750:	78fb      	ldrb	r3, [r7, #3]
 801a752:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a756:	68f9      	ldr	r1, [r7, #12]
 801a758:	4613      	mov	r3, r2
 801a75a:	00db      	lsls	r3, r3, #3
 801a75c:	1a9b      	subs	r3, r3, r2
 801a75e:	009b      	lsls	r3, r3, #2
 801a760:	440b      	add	r3, r1
 801a762:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801a766:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a768:	4618      	mov	r0, r3
 801a76a:	3714      	adds	r7, #20
 801a76c:	46bd      	mov	sp, r7
 801a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a772:	4770      	bx	lr

0801a774 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801a774:	b580      	push	{r7, lr}
 801a776:	b084      	sub	sp, #16
 801a778:	af00      	add	r7, sp, #0
 801a77a:	6078      	str	r0, [r7, #4]
 801a77c:	460b      	mov	r3, r1
 801a77e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a780:	2300      	movs	r3, #0
 801a782:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a784:	2300      	movs	r3, #0
 801a786:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801a788:	687b      	ldr	r3, [r7, #4]
 801a78a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801a78e:	78fa      	ldrb	r2, [r7, #3]
 801a790:	4611      	mov	r1, r2
 801a792:	4618      	mov	r0, r3
 801a794:	f7ed f8af 	bl	80078f6 <HAL_PCD_SetAddress>
 801a798:	4603      	mov	r3, r0
 801a79a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 801a79c:	7bfb      	ldrb	r3, [r7, #15]
 801a79e:	4618      	mov	r0, r3
 801a7a0:	f000 f860 	bl	801a864 <USBD_Get_USB_Status>
 801a7a4:	4603      	mov	r3, r0
 801a7a6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 801a7a8:	7bbb      	ldrb	r3, [r7, #14]
}
 801a7aa:	4618      	mov	r0, r3
 801a7ac:	3710      	adds	r7, #16
 801a7ae:	46bd      	mov	sp, r7
 801a7b0:	bd80      	pop	{r7, pc}

0801a7b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801a7b2:	b580      	push	{r7, lr}
 801a7b4:	b086      	sub	sp, #24
 801a7b6:	af00      	add	r7, sp, #0
 801a7b8:	60f8      	str	r0, [r7, #12]
 801a7ba:	607a      	str	r2, [r7, #4]
 801a7bc:	461a      	mov	r2, r3
 801a7be:	460b      	mov	r3, r1
 801a7c0:	72fb      	strb	r3, [r7, #11]
 801a7c2:	4613      	mov	r3, r2
 801a7c4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a7c6:	2300      	movs	r3, #0
 801a7c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a7ca:	2300      	movs	r3, #0
 801a7cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801a7ce:	68fb      	ldr	r3, [r7, #12]
 801a7d0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801a7d4:	893b      	ldrh	r3, [r7, #8]
 801a7d6:	7af9      	ldrb	r1, [r7, #11]
 801a7d8:	687a      	ldr	r2, [r7, #4]
 801a7da:	f7ed f9c6 	bl	8007b6a <HAL_PCD_EP_Transmit>
 801a7de:	4603      	mov	r3, r0
 801a7e0:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 801a7e2:	7dfb      	ldrb	r3, [r7, #23]
 801a7e4:	4618      	mov	r0, r3
 801a7e6:	f000 f83d 	bl	801a864 <USBD_Get_USB_Status>
 801a7ea:	4603      	mov	r3, r0
 801a7ec:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 801a7ee:	7dbb      	ldrb	r3, [r7, #22]
}
 801a7f0:	4618      	mov	r0, r3
 801a7f2:	3718      	adds	r7, #24
 801a7f4:	46bd      	mov	sp, r7
 801a7f6:	bd80      	pop	{r7, pc}

0801a7f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801a7f8:	b580      	push	{r7, lr}
 801a7fa:	b086      	sub	sp, #24
 801a7fc:	af00      	add	r7, sp, #0
 801a7fe:	60f8      	str	r0, [r7, #12]
 801a800:	607a      	str	r2, [r7, #4]
 801a802:	461a      	mov	r2, r3
 801a804:	460b      	mov	r3, r1
 801a806:	72fb      	strb	r3, [r7, #11]
 801a808:	4613      	mov	r3, r2
 801a80a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a80c:	2300      	movs	r3, #0
 801a80e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a810:	2300      	movs	r3, #0
 801a812:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801a814:	68fb      	ldr	r3, [r7, #12]
 801a816:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801a81a:	893b      	ldrh	r3, [r7, #8]
 801a81c:	7af9      	ldrb	r1, [r7, #11]
 801a81e:	687a      	ldr	r2, [r7, #4]
 801a820:	f7ed f940 	bl	8007aa4 <HAL_PCD_EP_Receive>
 801a824:	4603      	mov	r3, r0
 801a826:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 801a828:	7dfb      	ldrb	r3, [r7, #23]
 801a82a:	4618      	mov	r0, r3
 801a82c:	f000 f81a 	bl	801a864 <USBD_Get_USB_Status>
 801a830:	4603      	mov	r3, r0
 801a832:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 801a834:	7dbb      	ldrb	r3, [r7, #22]
}
 801a836:	4618      	mov	r0, r3
 801a838:	3718      	adds	r7, #24
 801a83a:	46bd      	mov	sp, r7
 801a83c:	bd80      	pop	{r7, pc}

0801a83e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a83e:	b580      	push	{r7, lr}
 801a840:	b082      	sub	sp, #8
 801a842:	af00      	add	r7, sp, #0
 801a844:	6078      	str	r0, [r7, #4]
 801a846:	460b      	mov	r3, r1
 801a848:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801a84a:	687b      	ldr	r3, [r7, #4]
 801a84c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801a850:	78fa      	ldrb	r2, [r7, #3]
 801a852:	4611      	mov	r1, r2
 801a854:	4618      	mov	r0, r3
 801a856:	f7ed f970 	bl	8007b3a <HAL_PCD_EP_GetRxCount>
 801a85a:	4603      	mov	r3, r0
}
 801a85c:	4618      	mov	r0, r3
 801a85e:	3708      	adds	r7, #8
 801a860:	46bd      	mov	sp, r7
 801a862:	bd80      	pop	{r7, pc}

0801a864 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801a864:	b480      	push	{r7}
 801a866:	b085      	sub	sp, #20
 801a868:	af00      	add	r7, sp, #0
 801a86a:	4603      	mov	r3, r0
 801a86c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a86e:	2300      	movs	r3, #0
 801a870:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801a872:	79fb      	ldrb	r3, [r7, #7]
 801a874:	2b03      	cmp	r3, #3
 801a876:	d817      	bhi.n	801a8a8 <USBD_Get_USB_Status+0x44>
 801a878:	a201      	add	r2, pc, #4	; (adr r2, 801a880 <USBD_Get_USB_Status+0x1c>)
 801a87a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a87e:	bf00      	nop
 801a880:	0801a891 	.word	0x0801a891
 801a884:	0801a897 	.word	0x0801a897
 801a888:	0801a89d 	.word	0x0801a89d
 801a88c:	0801a8a3 	.word	0x0801a8a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801a890:	2300      	movs	r3, #0
 801a892:	73fb      	strb	r3, [r7, #15]
    break;
 801a894:	e00b      	b.n	801a8ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a896:	2302      	movs	r3, #2
 801a898:	73fb      	strb	r3, [r7, #15]
    break;
 801a89a:	e008      	b.n	801a8ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a89c:	2301      	movs	r3, #1
 801a89e:	73fb      	strb	r3, [r7, #15]
    break;
 801a8a0:	e005      	b.n	801a8ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a8a2:	2302      	movs	r3, #2
 801a8a4:	73fb      	strb	r3, [r7, #15]
    break;
 801a8a6:	e002      	b.n	801a8ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801a8a8:	2302      	movs	r3, #2
 801a8aa:	73fb      	strb	r3, [r7, #15]
    break;
 801a8ac:	bf00      	nop
  }
  return usb_status;
 801a8ae:	7bfb      	ldrb	r3, [r7, #15]
}
 801a8b0:	4618      	mov	r0, r3
 801a8b2:	3714      	adds	r7, #20
 801a8b4:	46bd      	mov	sp, r7
 801a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8ba:	4770      	bx	lr

0801a8bc <__errno>:
 801a8bc:	4b01      	ldr	r3, [pc, #4]	; (801a8c4 <__errno+0x8>)
 801a8be:	6818      	ldr	r0, [r3, #0]
 801a8c0:	4770      	bx	lr
 801a8c2:	bf00      	nop
 801a8c4:	24000130 	.word	0x24000130

0801a8c8 <__libc_init_array>:
 801a8c8:	b570      	push	{r4, r5, r6, lr}
 801a8ca:	4e0d      	ldr	r6, [pc, #52]	; (801a900 <__libc_init_array+0x38>)
 801a8cc:	4c0d      	ldr	r4, [pc, #52]	; (801a904 <__libc_init_array+0x3c>)
 801a8ce:	1ba4      	subs	r4, r4, r6
 801a8d0:	10a4      	asrs	r4, r4, #2
 801a8d2:	2500      	movs	r5, #0
 801a8d4:	42a5      	cmp	r5, r4
 801a8d6:	d109      	bne.n	801a8ec <__libc_init_array+0x24>
 801a8d8:	4e0b      	ldr	r6, [pc, #44]	; (801a908 <__libc_init_array+0x40>)
 801a8da:	4c0c      	ldr	r4, [pc, #48]	; (801a90c <__libc_init_array+0x44>)
 801a8dc:	f000 f8f6 	bl	801aacc <_init>
 801a8e0:	1ba4      	subs	r4, r4, r6
 801a8e2:	10a4      	asrs	r4, r4, #2
 801a8e4:	2500      	movs	r5, #0
 801a8e6:	42a5      	cmp	r5, r4
 801a8e8:	d105      	bne.n	801a8f6 <__libc_init_array+0x2e>
 801a8ea:	bd70      	pop	{r4, r5, r6, pc}
 801a8ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a8f0:	4798      	blx	r3
 801a8f2:	3501      	adds	r5, #1
 801a8f4:	e7ee      	b.n	801a8d4 <__libc_init_array+0xc>
 801a8f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a8fa:	4798      	blx	r3
 801a8fc:	3501      	adds	r5, #1
 801a8fe:	e7f2      	b.n	801a8e6 <__libc_init_array+0x1e>
 801a900:	0801b0ac 	.word	0x0801b0ac
 801a904:	0801b0ac 	.word	0x0801b0ac
 801a908:	0801b0ac 	.word	0x0801b0ac
 801a90c:	0801b0b0 	.word	0x0801b0b0

0801a910 <malloc>:
 801a910:	4b02      	ldr	r3, [pc, #8]	; (801a91c <malloc+0xc>)
 801a912:	4601      	mov	r1, r0
 801a914:	6818      	ldr	r0, [r3, #0]
 801a916:	f000 b86d 	b.w	801a9f4 <_malloc_r>
 801a91a:	bf00      	nop
 801a91c:	24000130 	.word	0x24000130

0801a920 <free>:
 801a920:	4b02      	ldr	r3, [pc, #8]	; (801a92c <free+0xc>)
 801a922:	4601      	mov	r1, r0
 801a924:	6818      	ldr	r0, [r3, #0]
 801a926:	f000 b817 	b.w	801a958 <_free_r>
 801a92a:	bf00      	nop
 801a92c:	24000130 	.word	0x24000130

0801a930 <memcpy>:
 801a930:	b510      	push	{r4, lr}
 801a932:	1e43      	subs	r3, r0, #1
 801a934:	440a      	add	r2, r1
 801a936:	4291      	cmp	r1, r2
 801a938:	d100      	bne.n	801a93c <memcpy+0xc>
 801a93a:	bd10      	pop	{r4, pc}
 801a93c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a940:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a944:	e7f7      	b.n	801a936 <memcpy+0x6>

0801a946 <memset>:
 801a946:	4402      	add	r2, r0
 801a948:	4603      	mov	r3, r0
 801a94a:	4293      	cmp	r3, r2
 801a94c:	d100      	bne.n	801a950 <memset+0xa>
 801a94e:	4770      	bx	lr
 801a950:	f803 1b01 	strb.w	r1, [r3], #1
 801a954:	e7f9      	b.n	801a94a <memset+0x4>
	...

0801a958 <_free_r>:
 801a958:	b538      	push	{r3, r4, r5, lr}
 801a95a:	4605      	mov	r5, r0
 801a95c:	2900      	cmp	r1, #0
 801a95e:	d045      	beq.n	801a9ec <_free_r+0x94>
 801a960:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a964:	1f0c      	subs	r4, r1, #4
 801a966:	2b00      	cmp	r3, #0
 801a968:	bfb8      	it	lt
 801a96a:	18e4      	addlt	r4, r4, r3
 801a96c:	f000 f8ac 	bl	801aac8 <__malloc_lock>
 801a970:	4a1f      	ldr	r2, [pc, #124]	; (801a9f0 <_free_r+0x98>)
 801a972:	6813      	ldr	r3, [r2, #0]
 801a974:	4610      	mov	r0, r2
 801a976:	b933      	cbnz	r3, 801a986 <_free_r+0x2e>
 801a978:	6063      	str	r3, [r4, #4]
 801a97a:	6014      	str	r4, [r2, #0]
 801a97c:	4628      	mov	r0, r5
 801a97e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a982:	f000 b8a2 	b.w	801aaca <__malloc_unlock>
 801a986:	42a3      	cmp	r3, r4
 801a988:	d90c      	bls.n	801a9a4 <_free_r+0x4c>
 801a98a:	6821      	ldr	r1, [r4, #0]
 801a98c:	1862      	adds	r2, r4, r1
 801a98e:	4293      	cmp	r3, r2
 801a990:	bf04      	itt	eq
 801a992:	681a      	ldreq	r2, [r3, #0]
 801a994:	685b      	ldreq	r3, [r3, #4]
 801a996:	6063      	str	r3, [r4, #4]
 801a998:	bf04      	itt	eq
 801a99a:	1852      	addeq	r2, r2, r1
 801a99c:	6022      	streq	r2, [r4, #0]
 801a99e:	6004      	str	r4, [r0, #0]
 801a9a0:	e7ec      	b.n	801a97c <_free_r+0x24>
 801a9a2:	4613      	mov	r3, r2
 801a9a4:	685a      	ldr	r2, [r3, #4]
 801a9a6:	b10a      	cbz	r2, 801a9ac <_free_r+0x54>
 801a9a8:	42a2      	cmp	r2, r4
 801a9aa:	d9fa      	bls.n	801a9a2 <_free_r+0x4a>
 801a9ac:	6819      	ldr	r1, [r3, #0]
 801a9ae:	1858      	adds	r0, r3, r1
 801a9b0:	42a0      	cmp	r0, r4
 801a9b2:	d10b      	bne.n	801a9cc <_free_r+0x74>
 801a9b4:	6820      	ldr	r0, [r4, #0]
 801a9b6:	4401      	add	r1, r0
 801a9b8:	1858      	adds	r0, r3, r1
 801a9ba:	4282      	cmp	r2, r0
 801a9bc:	6019      	str	r1, [r3, #0]
 801a9be:	d1dd      	bne.n	801a97c <_free_r+0x24>
 801a9c0:	6810      	ldr	r0, [r2, #0]
 801a9c2:	6852      	ldr	r2, [r2, #4]
 801a9c4:	605a      	str	r2, [r3, #4]
 801a9c6:	4401      	add	r1, r0
 801a9c8:	6019      	str	r1, [r3, #0]
 801a9ca:	e7d7      	b.n	801a97c <_free_r+0x24>
 801a9cc:	d902      	bls.n	801a9d4 <_free_r+0x7c>
 801a9ce:	230c      	movs	r3, #12
 801a9d0:	602b      	str	r3, [r5, #0]
 801a9d2:	e7d3      	b.n	801a97c <_free_r+0x24>
 801a9d4:	6820      	ldr	r0, [r4, #0]
 801a9d6:	1821      	adds	r1, r4, r0
 801a9d8:	428a      	cmp	r2, r1
 801a9da:	bf04      	itt	eq
 801a9dc:	6811      	ldreq	r1, [r2, #0]
 801a9de:	6852      	ldreq	r2, [r2, #4]
 801a9e0:	6062      	str	r2, [r4, #4]
 801a9e2:	bf04      	itt	eq
 801a9e4:	1809      	addeq	r1, r1, r0
 801a9e6:	6021      	streq	r1, [r4, #0]
 801a9e8:	605c      	str	r4, [r3, #4]
 801a9ea:	e7c7      	b.n	801a97c <_free_r+0x24>
 801a9ec:	bd38      	pop	{r3, r4, r5, pc}
 801a9ee:	bf00      	nop
 801a9f0:	240002c0 	.word	0x240002c0

0801a9f4 <_malloc_r>:
 801a9f4:	b570      	push	{r4, r5, r6, lr}
 801a9f6:	1ccd      	adds	r5, r1, #3
 801a9f8:	f025 0503 	bic.w	r5, r5, #3
 801a9fc:	3508      	adds	r5, #8
 801a9fe:	2d0c      	cmp	r5, #12
 801aa00:	bf38      	it	cc
 801aa02:	250c      	movcc	r5, #12
 801aa04:	2d00      	cmp	r5, #0
 801aa06:	4606      	mov	r6, r0
 801aa08:	db01      	blt.n	801aa0e <_malloc_r+0x1a>
 801aa0a:	42a9      	cmp	r1, r5
 801aa0c:	d903      	bls.n	801aa16 <_malloc_r+0x22>
 801aa0e:	230c      	movs	r3, #12
 801aa10:	6033      	str	r3, [r6, #0]
 801aa12:	2000      	movs	r0, #0
 801aa14:	bd70      	pop	{r4, r5, r6, pc}
 801aa16:	f000 f857 	bl	801aac8 <__malloc_lock>
 801aa1a:	4a21      	ldr	r2, [pc, #132]	; (801aaa0 <_malloc_r+0xac>)
 801aa1c:	6814      	ldr	r4, [r2, #0]
 801aa1e:	4621      	mov	r1, r4
 801aa20:	b991      	cbnz	r1, 801aa48 <_malloc_r+0x54>
 801aa22:	4c20      	ldr	r4, [pc, #128]	; (801aaa4 <_malloc_r+0xb0>)
 801aa24:	6823      	ldr	r3, [r4, #0]
 801aa26:	b91b      	cbnz	r3, 801aa30 <_malloc_r+0x3c>
 801aa28:	4630      	mov	r0, r6
 801aa2a:	f000 f83d 	bl	801aaa8 <_sbrk_r>
 801aa2e:	6020      	str	r0, [r4, #0]
 801aa30:	4629      	mov	r1, r5
 801aa32:	4630      	mov	r0, r6
 801aa34:	f000 f838 	bl	801aaa8 <_sbrk_r>
 801aa38:	1c43      	adds	r3, r0, #1
 801aa3a:	d124      	bne.n	801aa86 <_malloc_r+0x92>
 801aa3c:	230c      	movs	r3, #12
 801aa3e:	6033      	str	r3, [r6, #0]
 801aa40:	4630      	mov	r0, r6
 801aa42:	f000 f842 	bl	801aaca <__malloc_unlock>
 801aa46:	e7e4      	b.n	801aa12 <_malloc_r+0x1e>
 801aa48:	680b      	ldr	r3, [r1, #0]
 801aa4a:	1b5b      	subs	r3, r3, r5
 801aa4c:	d418      	bmi.n	801aa80 <_malloc_r+0x8c>
 801aa4e:	2b0b      	cmp	r3, #11
 801aa50:	d90f      	bls.n	801aa72 <_malloc_r+0x7e>
 801aa52:	600b      	str	r3, [r1, #0]
 801aa54:	50cd      	str	r5, [r1, r3]
 801aa56:	18cc      	adds	r4, r1, r3
 801aa58:	4630      	mov	r0, r6
 801aa5a:	f000 f836 	bl	801aaca <__malloc_unlock>
 801aa5e:	f104 000b 	add.w	r0, r4, #11
 801aa62:	1d23      	adds	r3, r4, #4
 801aa64:	f020 0007 	bic.w	r0, r0, #7
 801aa68:	1ac3      	subs	r3, r0, r3
 801aa6a:	d0d3      	beq.n	801aa14 <_malloc_r+0x20>
 801aa6c:	425a      	negs	r2, r3
 801aa6e:	50e2      	str	r2, [r4, r3]
 801aa70:	e7d0      	b.n	801aa14 <_malloc_r+0x20>
 801aa72:	428c      	cmp	r4, r1
 801aa74:	684b      	ldr	r3, [r1, #4]
 801aa76:	bf16      	itet	ne
 801aa78:	6063      	strne	r3, [r4, #4]
 801aa7a:	6013      	streq	r3, [r2, #0]
 801aa7c:	460c      	movne	r4, r1
 801aa7e:	e7eb      	b.n	801aa58 <_malloc_r+0x64>
 801aa80:	460c      	mov	r4, r1
 801aa82:	6849      	ldr	r1, [r1, #4]
 801aa84:	e7cc      	b.n	801aa20 <_malloc_r+0x2c>
 801aa86:	1cc4      	adds	r4, r0, #3
 801aa88:	f024 0403 	bic.w	r4, r4, #3
 801aa8c:	42a0      	cmp	r0, r4
 801aa8e:	d005      	beq.n	801aa9c <_malloc_r+0xa8>
 801aa90:	1a21      	subs	r1, r4, r0
 801aa92:	4630      	mov	r0, r6
 801aa94:	f000 f808 	bl	801aaa8 <_sbrk_r>
 801aa98:	3001      	adds	r0, #1
 801aa9a:	d0cf      	beq.n	801aa3c <_malloc_r+0x48>
 801aa9c:	6025      	str	r5, [r4, #0]
 801aa9e:	e7db      	b.n	801aa58 <_malloc_r+0x64>
 801aaa0:	240002c0 	.word	0x240002c0
 801aaa4:	240002c4 	.word	0x240002c4

0801aaa8 <_sbrk_r>:
 801aaa8:	b538      	push	{r3, r4, r5, lr}
 801aaaa:	4c06      	ldr	r4, [pc, #24]	; (801aac4 <_sbrk_r+0x1c>)
 801aaac:	2300      	movs	r3, #0
 801aaae:	4605      	mov	r5, r0
 801aab0:	4608      	mov	r0, r1
 801aab2:	6023      	str	r3, [r4, #0]
 801aab4:	f7e6 ff06 	bl	80018c4 <_sbrk>
 801aab8:	1c43      	adds	r3, r0, #1
 801aaba:	d102      	bne.n	801aac2 <_sbrk_r+0x1a>
 801aabc:	6823      	ldr	r3, [r4, #0]
 801aabe:	b103      	cbz	r3, 801aac2 <_sbrk_r+0x1a>
 801aac0:	602b      	str	r3, [r5, #0]
 801aac2:	bd38      	pop	{r3, r4, r5, pc}
 801aac4:	240786c0 	.word	0x240786c0

0801aac8 <__malloc_lock>:
 801aac8:	4770      	bx	lr

0801aaca <__malloc_unlock>:
 801aaca:	4770      	bx	lr

0801aacc <_init>:
 801aacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aace:	bf00      	nop
 801aad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801aad2:	bc08      	pop	{r3}
 801aad4:	469e      	mov	lr, r3
 801aad6:	4770      	bx	lr

0801aad8 <_fini>:
 801aad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aada:	bf00      	nop
 801aadc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801aade:	bc08      	pop	{r3}
 801aae0:	469e      	mov	lr, r3
 801aae2:	4770      	bx	lr
