
SD_USB_H7_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016f70  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005dc  08017208  08017208  00027208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080177e4  080177e4  00030248  2**0
                  CONTENTS
  4 .ARM          00000008  080177e4  080177e4  000277e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080177ec  080177ec  00030248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080177ec  080177ec  000277ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080177f0  080177f0  000277f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  24000000  080177f4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000188  0801797c  00030188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240001e8  080179dc  000301e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00007fac  24000248  08017a3c  00030248  2**3
                  ALLOC
 12 ._user_heap_stack 00006004  240081f4  08017a3c  000381f4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY
 14 .debug_info   00046b40  00000000  00000000  00030276  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00006d27  00000000  00000000  00076db6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00002570  00000000  00000000  0007dae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000022e0  00000000  00000000  00080050  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0004247c  00000000  00000000  00082330  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00026bb0  00000000  00000000  000c47ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    0018398b  00000000  00000000  000eb35c  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0026ece7  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a0f4  00000000  00000000  0026ed64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000248 	.word	0x24000248
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080171f0 	.word	0x080171f0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400024c 	.word	0x2400024c
 80002d4:	080171f0 	.word	0x080171f0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f001 f92f 	bl	8001840 <HAL_Init>

  /* USER CODE BEGIN Init */
  int i=0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	607b      	str	r3, [r7, #4]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f885 	bl	80006f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 fb59 	bl	8000ca0 <MX_GPIO_Init>
  MX_ETH_Init();
 80005ee:	f000 f987 	bl	8000900 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005f2:	f000 fb09 	bl	8000c08 <MX_USART3_UART_Init>
  MX_SDMMC1_SD_Init();
 80005f6:	f000 fa95 	bl	8000b24 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80005fa:	f00e f917 	bl	800e82c <MX_FATFS_Init>
  MX_RTC_Init();
 80005fe:	f000 fa35 	bl	8000a6c <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 8000602:	f016 f801 	bl	8016608 <MX_USB_DEVICE_Init>
  MX_TIM17_Init();
 8000606:	f000 fad7 	bl	8000bb8 <MX_TIM17_Init>
  MX_FDCAN1_Init();
 800060a:	f000 f9cb 	bl	80009a4 <MX_FDCAN1_Init>
  MX_TIM16_Init();
 800060e:	f000 faab 	bl	8000b68 <MX_TIM16_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000612:	f000 f969 	bl	80008e8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  //HAL_SD_Init(&hsd1);
  //HAL_SD_GetCardInfo(&hsd1, &SDCardInfo);
  //HAL_SD_Init(&hsd1);
  FRESULT res;
  res=f_mount(&myFatFS, SDPath, 1);
 8000616:	2201      	movs	r2, #1
 8000618:	4931      	ldr	r1, [pc, #196]	; (80006e0 <main+0x108>)
 800061a:	4832      	ldr	r0, [pc, #200]	; (80006e4 <main+0x10c>)
 800061c:	f014 f934 	bl	8014888 <f_mount>
 8000620:	4603      	mov	r3, r0
 8000622:	70fb      	strb	r3, [r7, #3]
  TxHeader.Identifier = 0x0;
 8000624:	4b30      	ldr	r3, [pc, #192]	; (80006e8 <main+0x110>)
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_EXTENDED_ID;
 800062a:	4b2f      	ldr	r3, [pc, #188]	; (80006e8 <main+0x110>)
 800062c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000630:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000632:	4b2d      	ldr	r3, [pc, #180]	; (80006e8 <main+0x110>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000638:	4b2b      	ldr	r3, [pc, #172]	; (80006e8 <main+0x110>)
 800063a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800063e:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000640:	4b29      	ldr	r3, [pc, #164]	; (80006e8 <main+0x110>)
 8000642:	2200      	movs	r2, #0
 8000644:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000646:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <main+0x110>)
 8000648:	2200      	movs	r2, #0
 800064a:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800064c:	4b26      	ldr	r3, [pc, #152]	; (80006e8 <main+0x110>)
 800064e:	2200      	movs	r2, #0
 8000650:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000652:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <main+0x110>)
 8000654:	2200      	movs	r2, #0
 8000656:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000658:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <main+0x110>)
 800065a:	2200      	movs	r2, #0
 800065c:	621a      	str	r2, [r3, #32]

  TxData[0] = 0xAA;
 800065e:	4b23      	ldr	r3, [pc, #140]	; (80006ec <main+0x114>)
 8000660:	22aa      	movs	r2, #170	; 0xaa
 8000662:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0xAD;
 8000664:	4b21      	ldr	r3, [pc, #132]	; (80006ec <main+0x114>)
 8000666:	22ad      	movs	r2, #173	; 0xad
 8000668:	705a      	strb	r2, [r3, #1]
  TxData[2] = 0xDE;
 800066a:	4b20      	ldr	r3, [pc, #128]	; (80006ec <main+0x114>)
 800066c:	22de      	movs	r2, #222	; 0xde
 800066e:	709a      	strb	r2, [r3, #2]
  TxData[3] = 0xAD;
 8000670:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <main+0x114>)
 8000672:	22ad      	movs	r2, #173	; 0xad
 8000674:	70da      	strb	r2, [r3, #3]
  TxData[4] = 0xBE;
 8000676:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <main+0x114>)
 8000678:	22be      	movs	r2, #190	; 0xbe
 800067a:	711a      	strb	r2, [r3, #4]
  TxData[5] = 0xEF;
 800067c:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <main+0x114>)
 800067e:	22ef      	movs	r2, #239	; 0xef
 8000680:	715a      	strb	r2, [r3, #5]
  TxData[6] = 0xFA;
 8000682:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <main+0x114>)
 8000684:	22fa      	movs	r2, #250	; 0xfa
 8000686:	719a      	strb	r2, [r3, #6]
  TxData[7] = 0xCE;
 8000688:	4b18      	ldr	r3, [pc, #96]	; (80006ec <main+0x114>)
 800068a:	22ce      	movs	r2, #206	; 0xce
 800068c:	71da      	strb	r2, [r3, #7]
  uint16_t aug=3456;
 800068e:	f44f 6358 	mov.w	r3, #3456	; 0xd80
 8000692:	803b      	strh	r3, [r7, #0]
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8000694:	4816      	ldr	r0, [pc, #88]	; (80006f0 <main+0x118>)
 8000696:	f002 f8dc 	bl	8002852 <HAL_FDCAN_Start>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <main+0xcc>
	  {
		/* Start Error */
		Error_Handler();
 80006a0:	f000 fd56 	bl	8001150 <Error_Handler>
	  }

	if ( HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80006a4:	2200      	movs	r2, #0
 80006a6:	2101      	movs	r1, #1
 80006a8:	4811      	ldr	r0, [pc, #68]	; (80006f0 <main+0x118>)
 80006aa:	f002 fa99 	bl	8002be0 <HAL_FDCAN_ActivateNotification>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <main+0xe0>
	  {
		/* Notification Error */
		Error_Handler();
 80006b4:	f000 fd4c 	bl	8001150 <Error_Handler>
	  }
	HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, 3,3,0,1);
 80006b8:	2301      	movs	r3, #1
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	2300      	movs	r3, #0
 80006be:	2203      	movs	r2, #3
 80006c0:	2103      	movs	r1, #3
 80006c2:	480b      	ldr	r0, [pc, #44]	; (80006f0 <main+0x118>)
 80006c4:	f002 f898 	bl	80027f8 <HAL_FDCAN_ConfigGlobalFilter>
  {



	//HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK)
 80006c8:	4a08      	ldr	r2, [pc, #32]	; (80006ec <main+0x114>)
 80006ca:	4907      	ldr	r1, [pc, #28]	; (80006e8 <main+0x110>)
 80006cc:	4808      	ldr	r0, [pc, #32]	; (80006f0 <main+0x118>)
 80006ce:	f002 f8eb 	bl	80028a8 <HAL_FDCAN_AddMessageToTxFifoQ>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d0f7      	beq.n	80006c8 <main+0xf0>
	  	  	  	{
	  	  	  	  // Transmission request Error
	  	  	  	  Error_Handler();
 80006d8:	f000 fd3a 	bl	8001150 <Error_Handler>
	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK)
 80006dc:	e7f4      	b.n	80006c8 <main+0xf0>
 80006de:	bf00      	nop
 80006e0:	2400588c 	.word	0x2400588c
 80006e4:	24003558 	.word	0x24003558
 80006e8:	240046f8 	.word	0x240046f8
 80006ec:	240046c0 	.word	0x240046c0
 80006f0:	24004620 	.word	0x24004620

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b0cc      	sub	sp, #304	; 0x130
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80006fe:	224c      	movs	r2, #76	; 0x4c
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f016 fcb1 	bl	801706a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800070c:	2220      	movs	r2, #32
 800070e:	2100      	movs	r1, #0
 8000710:	4618      	mov	r0, r3
 8000712:	f016 fcaa 	bl	801706a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000716:	f107 0308 	add.w	r3, r7, #8
 800071a:	4618      	mov	r0, r3
 800071c:	23bc      	movs	r3, #188	; 0xbc
 800071e:	461a      	mov	r2, r3
 8000720:	2100      	movs	r1, #0
 8000722:	f016 fca2 	bl	801706a <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000726:	2002      	movs	r0, #2
 8000728:	f004 fc0c 	bl	8004f44 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	4b69      	ldr	r3, [pc, #420]	; (80008d8 <SystemClock_Config+0x1e4>)
 8000734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000736:	4a68      	ldr	r2, [pc, #416]	; (80008d8 <SystemClock_Config+0x1e4>)
 8000738:	f023 0301 	bic.w	r3, r3, #1
 800073c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800073e:	4b66      	ldr	r3, [pc, #408]	; (80008d8 <SystemClock_Config+0x1e4>)
 8000740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000742:	f003 0201 	and.w	r2, r3, #1
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	4b64      	ldr	r3, [pc, #400]	; (80008dc <SystemClock_Config+0x1e8>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	4a63      	ldr	r2, [pc, #396]	; (80008dc <SystemClock_Config+0x1e8>)
 8000750:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000754:	6193      	str	r3, [r2, #24]
 8000756:	4b61      	ldr	r3, [pc, #388]	; (80008dc <SystemClock_Config+0x1e8>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000766:	bf00      	nop
 8000768:	4b5c      	ldr	r3, [pc, #368]	; (80008dc <SystemClock_Config+0x1e8>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000774:	d1f8      	bne.n	8000768 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000776:	4b5a      	ldr	r3, [pc, #360]	; (80008e0 <SystemClock_Config+0x1ec>)
 8000778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800077a:	f023 0303 	bic.w	r3, r3, #3
 800077e:	4a58      	ldr	r2, [pc, #352]	; (80008e0 <SystemClock_Config+0x1ec>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8000786:	2329      	movs	r3, #41	; 0x29
 8000788:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800078c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000790:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000794:	2301      	movs	r3, #1
 8000796:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800079a:	2301      	movs	r3, #1
 800079c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a0:	2302      	movs	r3, #2
 80007a2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a6:	2302      	movs	r3, #2
 80007a8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007ac:	2301      	movs	r3, #1
 80007ae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 18;
 80007b2:	2312      	movs	r3, #18
 80007b4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007b8:	2302      	movs	r3, #2
 80007ba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 1;
 80007be:	2301      	movs	r3, #1
 80007c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007ca:	230c      	movs	r3, #12
 80007cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80007d0:	2302      	movs	r3, #2
 80007d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 80007d6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007de:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80007e2:	4618      	mov	r0, r3
 80007e4:	f004 fbf8 	bl	8004fd8 <HAL_RCC_OscConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 80007ee:	f000 fcaf 	bl	8001150 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f2:	233f      	movs	r3, #63	; 0x3f
 80007f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f8:	2303      	movs	r3, #3
 80007fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800080a:	2340      	movs	r3, #64	; 0x40
 800080c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000810:	2340      	movs	r3, #64	; 0x40
 8000812:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800081a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800081e:	2340      	movs	r3, #64	; 0x40
 8000820:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000824:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000828:	2101      	movs	r1, #1
 800082a:	4618      	mov	r0, r3
 800082c:	f004 ffac 	bl	8005788 <HAL_RCC_ClockConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0x146>
  {
    Error_Handler();
 8000836:	f000 fc8b 	bl	8001150 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 800083a:	f107 0308 	add.w	r3, r7, #8
 800083e:	4a29      	ldr	r2, [pc, #164]	; (80008e4 <SystemClock_Config+0x1f0>)
 8000840:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_FDCAN|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000842:	f107 0308 	add.w	r3, r7, #8
 8000846:	2201      	movs	r2, #1
 8000848:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 800084a:	f107 0308 	add.w	r3, r7, #8
 800084e:	2218      	movs	r2, #24
 8000850:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000852:	f107 0308 	add.w	r3, r7, #8
 8000856:	2202      	movs	r2, #2
 8000858:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 3;
 800085a:	f107 0308 	add.w	r3, r7, #8
 800085e:	2203      	movs	r2, #3
 8000860:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000862:	f107 0308 	add.w	r3, r7, #8
 8000866:	2202      	movs	r2, #2
 8000868:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800086a:	f107 0308 	add.w	r3, r7, #8
 800086e:	22c0      	movs	r2, #192	; 0xc0
 8000870:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000872:	f107 0308 	add.w	r3, r7, #8
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800087a:	f107 0308 	add.w	r3, r7, #8
 800087e:	2200      	movs	r2, #0
 8000880:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000882:	f107 0308 	add.w	r3, r7, #8
 8000886:	2200      	movs	r2, #0
 8000888:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 800088a:	f107 0308 	add.w	r3, r7, #8
 800088e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000892:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000894:	f107 0308 	add.w	r3, r7, #8
 8000898:	2200      	movs	r2, #0
 800089a:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800089c:	f107 0308 	add.w	r3, r7, #8
 80008a0:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80008a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80008a8:	f107 0308 	add.w	r3, r7, #8
 80008ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008b4:	f107 0308 	add.w	r3, r7, #8
 80008b8:	4618      	mov	r0, r3
 80008ba:	f005 fae9 	bl	8005e90 <HAL_RCCEx_PeriphCLKConfig>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0x1d4>
  {
    Error_Handler();
 80008c4:	f000 fc44 	bl	8001150 <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80008c8:	f004 fb76 	bl	8004fb8 <HAL_PWREx_EnableUSBVoltageDetector>
}
 80008cc:	bf00      	nop
 80008ce:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	58000400 	.word	0x58000400
 80008dc:	58024800 	.word	0x58024800
 80008e0:	58024400 	.word	0x58024400
 80008e4:	00458002 	.word	0x00458002

080008e8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* FDCAN1_IT0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2100      	movs	r1, #0
 80008f0:	2013      	movs	r0, #19
 80008f2:	f001 f954 	bl	8001b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80008f6:	2013      	movs	r0, #19
 80008f8:	f001 f96b 	bl	8001bd2 <HAL_NVIC_EnableIRQ>
}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}

08000900 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000904:	4b22      	ldr	r3, [pc, #136]	; (8000990 <MX_ETH_Init+0x90>)
 8000906:	4a23      	ldr	r2, [pc, #140]	; (8000994 <MX_ETH_Init+0x94>)
 8000908:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 800090a:	4b21      	ldr	r3, [pc, #132]	; (8000990 <MX_ETH_Init+0x90>)
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	2200      	movs	r2, #0
 8000910:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000912:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <MX_ETH_Init+0x90>)
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	3301      	adds	r3, #1
 8000918:	2280      	movs	r2, #128	; 0x80
 800091a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 800091c:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <MX_ETH_Init+0x90>)
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	3302      	adds	r3, #2
 8000922:	22e1      	movs	r2, #225	; 0xe1
 8000924:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000926:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <MX_ETH_Init+0x90>)
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	3303      	adds	r3, #3
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000930:	4b17      	ldr	r3, [pc, #92]	; (8000990 <MX_ETH_Init+0x90>)
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	3304      	adds	r3, #4
 8000936:	2200      	movs	r2, #0
 8000938:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <MX_ETH_Init+0x90>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	3305      	adds	r3, #5
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <MX_ETH_Init+0x90>)
 8000946:	2201      	movs	r2, #1
 8000948:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_ETH_Init+0x90>)
 800094c:	4a12      	ldr	r2, [pc, #72]	; (8000998 <MX_ETH_Init+0x98>)
 800094e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_ETH_Init+0x90>)
 8000952:	4a12      	ldr	r2, [pc, #72]	; (800099c <MX_ETH_Init+0x9c>)
 8000954:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_ETH_Init+0x90>)
 8000958:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800095c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800095e:	480c      	ldr	r0, [pc, #48]	; (8000990 <MX_ETH_Init+0x90>)
 8000960:	f001 f952 	bl	8001c08 <HAL_ETH_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 800096a:	f000 fbf1 	bl	8001150 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800096e:	2234      	movs	r2, #52	; 0x34
 8000970:	2100      	movs	r1, #0
 8000972:	480b      	ldr	r0, [pc, #44]	; (80009a0 <MX_ETH_Init+0xa0>)
 8000974:	f016 fb79 	bl	801706a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_ETH_Init+0xa0>)
 800097a:	2221      	movs	r2, #33	; 0x21
 800097c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <MX_ETH_Init+0xa0>)
 8000980:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000984:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_ETH_Init+0xa0>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	24004748 	.word	0x24004748
 8000994:	40028000 	.word	0x40028000
 8000998:	240001e8 	.word	0x240001e8
 800099c:	24000188 	.word	0x24000188
 80009a0:	240047c0 	.word	0x240047c0

080009a4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80009a8:	4b2e      	ldr	r3, [pc, #184]	; (8000a64 <MX_FDCAN1_Init+0xc0>)
 80009aa:	4a2f      	ldr	r2, [pc, #188]	; (8000a68 <MX_FDCAN1_Init+0xc4>)
 80009ac:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80009ae:	4b2d      	ldr	r3, [pc, #180]	; (8000a64 <MX_FDCAN1_Init+0xc0>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80009b4:	4b2b      	ldr	r3, [pc, #172]	; (8000a64 <MX_FDCAN1_Init+0xc0>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80009ba:	4b2a      	ldr	r3, [pc, #168]	; (8000a64 <MX_FDCAN1_Init+0xc0>)
 80009bc:	2201      	movs	r2, #1
 80009be:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80009c0:	4b28      	ldr	r3, [pc, #160]	; (8000a64 <MX_FDCAN1_Init+0xc0>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 80009c6:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <MX_FDCAN1_Init+0xc0>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 80009cc:	4b25      	ldr	r3, [pc, #148]	; (8000a64 <MX_FDCAN1_Init+0xc0>)
 80009ce:	2205      	movs	r2, #5
 80009d0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80009d2:	4b24      	ldr	r3, [pc, #144]	; (8000a64 <MX_FDCAN1_Init+0xc0>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 80009d8:	4b22      	ldr	r3, [pc, #136]	; (8000a64 <MX_FDCAN1_Init+0xc0>)
 80009da:	220d      	movs	r2, #13
 80009dc:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80009de:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <MX_FDCAN1_Init+0xc0>)
 80009e0:	2202      	movs	r2, #2
 80009e2:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80009e4:	4b1f      	ldr	r3, [pc, #124]	; (8000a64 <MX_FDCAN1_Init+0xc0>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80009ea:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <MX_FDCAN1_Init+0xc0>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80009f0:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <MX_FDCAN1_Init+0xc0>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80009f6:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <MX_FDCAN1_Init+0xc0>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80009fc:	4b19      	ldr	r3, [pc, #100]	; (8000a64 <MX_FDCAN1_Init+0xc0>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000a02:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <MX_FDCAN1_Init+0xc0>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000a08:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <MX_FDCAN1_Init+0xc0>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <MX_FDCAN1_Init+0xc0>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000a14:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <MX_FDCAN1_Init+0xc0>)
 8000a16:	2204      	movs	r2, #4
 8000a18:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000a1a:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <MX_FDCAN1_Init+0xc0>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000a20:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <MX_FDCAN1_Init+0xc0>)
 8000a22:	2204      	movs	r2, #4
 8000a24:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000a26:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_FDCAN1_Init+0xc0>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000a2c:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <MX_FDCAN1_Init+0xc0>)
 8000a2e:	2204      	movs	r2, #4
 8000a30:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_FDCAN1_Init+0xc0>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000a38:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <MX_FDCAN1_Init+0xc0>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_FDCAN1_Init+0xc0>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000a44:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <MX_FDCAN1_Init+0xc0>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_FDCAN1_Init+0xc0>)
 8000a4c:	2204      	movs	r2, #4
 8000a4e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000a50:	4804      	ldr	r0, [pc, #16]	; (8000a64 <MX_FDCAN1_Init+0xc0>)
 8000a52:	f001 fcef 	bl	8002434 <HAL_FDCAN_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000a5c:	f000 fb78 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	24004620 	.word	0x24004620
 8000a68:	4000a000 	.word	0x4000a000

08000a6c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000a80:	2300      	movs	r3, #0
 8000a82:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000a84:	4b25      	ldr	r3, [pc, #148]	; (8000b1c <MX_RTC_Init+0xb0>)
 8000a86:	4a26      	ldr	r2, [pc, #152]	; (8000b20 <MX_RTC_Init+0xb4>)
 8000a88:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a8a:	4b24      	ldr	r3, [pc, #144]	; (8000b1c <MX_RTC_Init+0xb0>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a90:	4b22      	ldr	r3, [pc, #136]	; (8000b1c <MX_RTC_Init+0xb0>)
 8000a92:	227f      	movs	r2, #127	; 0x7f
 8000a94:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a96:	4b21      	ldr	r3, [pc, #132]	; (8000b1c <MX_RTC_Init+0xb0>)
 8000a98:	22ff      	movs	r2, #255	; 0xff
 8000a9a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a9c:	4b1f      	ldr	r3, [pc, #124]	; (8000b1c <MX_RTC_Init+0xb0>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000aa2:	4b1e      	ldr	r3, [pc, #120]	; (8000b1c <MX_RTC_Init+0xb0>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000aa8:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <MX_RTC_Init+0xb0>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000aae:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <MX_RTC_Init+0xb0>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ab4:	4819      	ldr	r0, [pc, #100]	; (8000b1c <MX_RTC_Init+0xb0>)
 8000ab6:	f007 f89f 	bl	8007bf8 <HAL_RTC_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000ac0:	f000 fb46 	bl	8001150 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	2201      	movs	r2, #1
 8000adc:	4619      	mov	r1, r3
 8000ade:	480f      	ldr	r0, [pc, #60]	; (8000b1c <MX_RTC_Init+0xb0>)
 8000ae0:	f007 f926 	bl	8007d30 <HAL_RTC_SetTime>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000aea:	f000 fb31 	bl	8001150 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000aee:	2301      	movs	r3, #1
 8000af0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000af2:	2301      	movs	r3, #1
 8000af4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000af6:	2301      	movs	r3, #1
 8000af8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000afe:	463b      	mov	r3, r7
 8000b00:	2201      	movs	r2, #1
 8000b02:	4619      	mov	r1, r3
 8000b04:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_RTC_Init+0xb0>)
 8000b06:	f007 fa33 	bl	8007f70 <HAL_RTC_SetDate>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000b10:	f000 fb1e 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	240045fc 	.word	0x240045fc
 8000b20:	58004000 	.word	0x58004000

08000b24 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000b28:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <MX_SDMMC1_SD_Init+0x3c>)
 8000b2a:	4a0e      	ldr	r2, [pc, #56]	; (8000b64 <MX_SDMMC1_SD_Init+0x40>)
 8000b2c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <MX_SDMMC1_SD_Init+0x3c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000b34:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <MX_SDMMC1_SD_Init+0x3c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000b3a:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <MX_SDMMC1_SD_Init+0x3c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8000b40:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <MX_SDMMC1_SD_Init+0x3c>)
 8000b42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b46:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <MX_SDMMC1_SD_Init+0x3c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8000b4e:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <MX_SDMMC1_SD_Init+0x3c>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	240013f4 	.word	0x240013f4
 8000b64:	52007000 	.word	0x52007000

08000b68 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000b6c:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <MX_TIM16_Init+0x48>)
 8000b6e:	4a11      	ldr	r2, [pc, #68]	; (8000bb4 <MX_TIM16_Init+0x4c>)
 8000b70:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 37500;
 8000b72:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <MX_TIM16_Init+0x48>)
 8000b74:	f249 227c 	movw	r2, #37500	; 0x927c
 8000b78:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <MX_TIM16_Init+0x48>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2100;
 8000b80:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <MX_TIM16_Init+0x48>)
 8000b82:	f640 0234 	movw	r2, #2100	; 0x834
 8000b86:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b88:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <MX_TIM16_Init+0x48>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <MX_TIM16_Init+0x48>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <MX_TIM16_Init+0x48>)
 8000b96:	2280      	movs	r2, #128	; 0x80
 8000b98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000b9a:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <MX_TIM16_Init+0x48>)
 8000b9c:	f008 ff24 	bl	80099e8 <HAL_TIM_Base_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000ba6:	f000 fad3 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	240047f4 	.word	0x240047f4
 8000bb4:	40014400 	.word	0x40014400

08000bb8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000bbc:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <MX_TIM17_Init+0x48>)
 8000bbe:	4a11      	ldr	r2, [pc, #68]	; (8000c04 <MX_TIM17_Init+0x4c>)
 8000bc0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 63999;
 8000bc2:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <MX_TIM17_Init+0x48>)
 8000bc4:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000bc8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bca:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <MX_TIM17_Init+0x48>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 400;
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <MX_TIM17_Init+0x48>)
 8000bd2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000bd6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd8:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <MX_TIM17_Init+0x48>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000bde:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <MX_TIM17_Init+0x48>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <MX_TIM17_Init+0x48>)
 8000be6:	2280      	movs	r2, #128	; 0x80
 8000be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000bea:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_TIM17_Init+0x48>)
 8000bec:	f008 fefc 	bl	80099e8 <HAL_TIM_Base_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8000bf6:	f000 faab 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	24001478 	.word	0x24001478
 8000c04:	40014800 	.word	0x40014800

08000c08 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c0c:	4b22      	ldr	r3, [pc, #136]	; (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c0e:	4a23      	ldr	r2, [pc, #140]	; (8000c9c <MX_USART3_UART_Init+0x94>)
 8000c10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c12:	4b21      	ldr	r3, [pc, #132]	; (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1a:	4b1f      	ldr	r3, [pc, #124]	; (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c20:	4b1d      	ldr	r3, [pc, #116]	; (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c26:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c2c:	4b1a      	ldr	r3, [pc, #104]	; (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c2e:	220c      	movs	r2, #12
 8000c30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c32:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c38:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c3e:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c44:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c4a:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c50:	4811      	ldr	r0, [pc, #68]	; (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c52:	f009 f8f3 	bl	8009e3c <HAL_UART_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c5c:	f000 fa78 	bl	8001150 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c60:	2100      	movs	r1, #0
 8000c62:	480d      	ldr	r0, [pc, #52]	; (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c64:	f00b fc5d 	bl	800c522 <HAL_UARTEx_SetTxFifoThreshold>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c6e:	f000 fa6f 	bl	8001150 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c72:	2100      	movs	r1, #0
 8000c74:	4808      	ldr	r0, [pc, #32]	; (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c76:	f00b fc92 	bl	800c59e <HAL_UARTEx_SetRxFifoThreshold>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c80:	f000 fa66 	bl	8001150 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c84:	4804      	ldr	r0, [pc, #16]	; (8000c98 <MX_USART3_UART_Init+0x90>)
 8000c86:	f00b fc13 	bl	800c4b0 <HAL_UARTEx_DisableFifoMode>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c90:	f000 fa5e 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	24001320 	.word	0x24001320
 8000c9c:	40004800 	.word	0x40004800

08000ca0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08c      	sub	sp, #48	; 0x30
 8000ca4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca6:	f107 031c 	add.w	r3, r7, #28
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]
 8000cb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb6:	4b59      	ldr	r3, [pc, #356]	; (8000e1c <MX_GPIO_Init+0x17c>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbc:	4a57      	ldr	r2, [pc, #348]	; (8000e1c <MX_GPIO_Init+0x17c>)
 8000cbe:	f043 0304 	orr.w	r3, r3, #4
 8000cc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc6:	4b55      	ldr	r3, [pc, #340]	; (8000e1c <MX_GPIO_Init+0x17c>)
 8000cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ccc:	f003 0304 	and.w	r3, r3, #4
 8000cd0:	61bb      	str	r3, [r7, #24]
 8000cd2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cd4:	4b51      	ldr	r3, [pc, #324]	; (8000e1c <MX_GPIO_Init+0x17c>)
 8000cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cda:	4a50      	ldr	r2, [pc, #320]	; (8000e1c <MX_GPIO_Init+0x17c>)
 8000cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ce0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce4:	4b4d      	ldr	r3, [pc, #308]	; (8000e1c <MX_GPIO_Init+0x17c>)
 8000ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	4b4a      	ldr	r3, [pc, #296]	; (8000e1c <MX_GPIO_Init+0x17c>)
 8000cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf8:	4a48      	ldr	r2, [pc, #288]	; (8000e1c <MX_GPIO_Init+0x17c>)
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d02:	4b46      	ldr	r3, [pc, #280]	; (8000e1c <MX_GPIO_Init+0x17c>)
 8000d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d10:	4b42      	ldr	r3, [pc, #264]	; (8000e1c <MX_GPIO_Init+0x17c>)
 8000d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d16:	4a41      	ldr	r2, [pc, #260]	; (8000e1c <MX_GPIO_Init+0x17c>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d20:	4b3e      	ldr	r3, [pc, #248]	; (8000e1c <MX_GPIO_Init+0x17c>)
 8000d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2e:	4b3b      	ldr	r3, [pc, #236]	; (8000e1c <MX_GPIO_Init+0x17c>)
 8000d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d34:	4a39      	ldr	r2, [pc, #228]	; (8000e1c <MX_GPIO_Init+0x17c>)
 8000d36:	f043 0308 	orr.w	r3, r3, #8
 8000d3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d3e:	4b37      	ldr	r3, [pc, #220]	; (8000e1c <MX_GPIO_Init+0x17c>)
 8000d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d44:	f003 0308 	and.w	r3, r3, #8
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d4c:	4b33      	ldr	r3, [pc, #204]	; (8000e1c <MX_GPIO_Init+0x17c>)
 8000d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d52:	4a32      	ldr	r2, [pc, #200]	; (8000e1c <MX_GPIO_Init+0x17c>)
 8000d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d5c:	4b2f      	ldr	r3, [pc, #188]	; (8000e1c <MX_GPIO_Init+0x17c>)
 8000d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000d70:	482b      	ldr	r0, [pc, #172]	; (8000e20 <MX_GPIO_Init+0x180>)
 8000d72:	f002 fe85 	bl	8003a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2140      	movs	r1, #64	; 0x40
 8000d7a:	482a      	ldr	r0, [pc, #168]	; (8000e24 <MX_GPIO_Init+0x184>)
 8000d7c:	f002 fe80 	bl	8003a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d86:	4b28      	ldr	r3, [pc, #160]	; (8000e28 <MX_GPIO_Init+0x188>)
 8000d88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	4619      	mov	r1, r3
 8000d94:	4825      	ldr	r0, [pc, #148]	; (8000e2c <MX_GPIO_Init+0x18c>)
 8000d96:	f002 fcab 	bl	80036f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000d9a:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000d9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da0:	2301      	movs	r3, #1
 8000da2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dac:	f107 031c 	add.w	r3, r7, #28
 8000db0:	4619      	mov	r1, r3
 8000db2:	481b      	ldr	r0, [pc, #108]	; (8000e20 <MX_GPIO_Init+0x180>)
 8000db4:	f002 fc9c 	bl	80036f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000db8:	2320      	movs	r3, #32
 8000dba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dc4:	f107 031c 	add.w	r3, r7, #28
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4816      	ldr	r0, [pc, #88]	; (8000e24 <MX_GPIO_Init+0x184>)
 8000dcc:	f002 fc90 	bl	80036f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000dd0:	2340      	movs	r3, #64	; 0x40
 8000dd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000de0:	f107 031c 	add.w	r3, r7, #28
 8000de4:	4619      	mov	r1, r3
 8000de6:	480f      	ldr	r0, [pc, #60]	; (8000e24 <MX_GPIO_Init+0x184>)
 8000de8:	f002 fc82 	bl	80036f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000dec:	2380      	movs	r3, #128	; 0x80
 8000dee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df0:	2300      	movs	r3, #0
 8000df2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000df8:	f107 031c 	add.w	r3, r7, #28
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4809      	ldr	r0, [pc, #36]	; (8000e24 <MX_GPIO_Init+0x184>)
 8000e00:	f002 fc76 	bl	80036f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2100      	movs	r1, #0
 8000e08:	2028      	movs	r0, #40	; 0x28
 8000e0a:	f000 fec8 	bl	8001b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e0e:	2028      	movs	r0, #40	; 0x28
 8000e10:	f000 fedf 	bl	8001bd2 <HAL_NVIC_EnableIRQ>

}
 8000e14:	bf00      	nop
 8000e16:	3730      	adds	r7, #48	; 0x30
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	58024400 	.word	0x58024400
 8000e20:	58020400 	.word	0x58020400
 8000e24:	58021800 	.word	0x58021800
 8000e28:	11110000 	.word	0x11110000
 8000e2c:	58020800 	.word	0x58020800

08000e30 <HAL_FDCAN_RxFifo0Callback>:
 if(__HAL_GPIO_EXTI_GET_FLAG(USER_Btn_Pin)){
 LD2_GPIO_Port -> ODR ^= LD2_Pin; // toggle LD2 LED
 }

}*/
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef*hcan, uint32_t RxFifo0ITs){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
	HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000e3a:	2180      	movs	r1, #128	; 0x80
 8000e3c:	484b      	ldr	r0, [pc, #300]	; (8000f6c <HAL_FDCAN_RxFifo0Callback+0x13c>)
 8000e3e:	f002 fe38 	bl	8003ab2 <HAL_GPIO_TogglePin>
	if(HAL_FDCAN_GetRxMessage(&hfdcan1,FDCAN_RX_FIFO0,&RxHeader,rxData.Data8u) == HAL_OK){
 8000e42:	4b4b      	ldr	r3, [pc, #300]	; (8000f70 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000e44:	4a4b      	ldr	r2, [pc, #300]	; (8000f74 <HAL_FDCAN_RxFifo0Callback+0x144>)
 8000e46:	2140      	movs	r1, #64	; 0x40
 8000e48:	484b      	ldr	r0, [pc, #300]	; (8000f78 <HAL_FDCAN_RxFifo0Callback+0x148>)
 8000e4a:	f001 fd89 	bl	8002960 <HAL_FDCAN_GetRxMessage>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	f040 8087 	bne.w	8000f64 <HAL_FDCAN_RxFifo0Callback+0x134>
			if((RxHeader.Identifier>>5) == 0x00){
 8000e56:	4b47      	ldr	r3, [pc, #284]	; (8000f74 <HAL_FDCAN_RxFifo0Callback+0x144>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	095b      	lsrs	r3, r3, #5
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d12d      	bne.n	8000ebc <HAL_FDCAN_RxFifo0Callback+0x8c>
				Dati.ID = (uint8_t)RxHeader.Identifier;
 8000e60:	4b44      	ldr	r3, [pc, #272]	; (8000f74 <HAL_FDCAN_RxFifo0Callback+0x144>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	4b45      	ldr	r3, [pc, #276]	; (8000f7c <HAL_FDCAN_RxFifo0Callback+0x14c>)
 8000e68:	771a      	strb	r2, [r3, #28]
				Dati.Timer = rxData.Data8u[0] | rxData.Data8u[1]<<8 | rxData.Data8u[2]<<16 | rxData.Data8u[3]<<24;
 8000e6a:	4b41      	ldr	r3, [pc, #260]	; (8000f70 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	4b3f      	ldr	r3, [pc, #252]	; (8000f70 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000e72:	785b      	ldrb	r3, [r3, #1]
 8000e74:	021b      	lsls	r3, r3, #8
 8000e76:	431a      	orrs	r2, r3
 8000e78:	4b3d      	ldr	r3, [pc, #244]	; (8000f70 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000e7a:	789b      	ldrb	r3, [r3, #2]
 8000e7c:	041b      	lsls	r3, r3, #16
 8000e7e:	431a      	orrs	r2, r3
 8000e80:	4b3b      	ldr	r3, [pc, #236]	; (8000f70 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000e82:	78db      	ldrb	r3, [r3, #3]
 8000e84:	061b      	lsls	r3, r3, #24
 8000e86:	4313      	orrs	r3, r2
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b3c      	ldr	r3, [pc, #240]	; (8000f7c <HAL_FDCAN_RxFifo0Callback+0x14c>)
 8000e8c:	619a      	str	r2, [r3, #24]
				Dati.Gir_x = rxData.Data8u[4] | rxData.Data8u[5]<<8;
 8000e8e:	4b38      	ldr	r3, [pc, #224]	; (8000f70 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000e90:	791b      	ldrb	r3, [r3, #4]
 8000e92:	b21a      	sxth	r2, r3
 8000e94:	4b36      	ldr	r3, [pc, #216]	; (8000f70 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000e96:	795b      	ldrb	r3, [r3, #5]
 8000e98:	021b      	lsls	r3, r3, #8
 8000e9a:	b21b      	sxth	r3, r3
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	b21a      	sxth	r2, r3
 8000ea0:	4b36      	ldr	r3, [pc, #216]	; (8000f7c <HAL_FDCAN_RxFifo0Callback+0x14c>)
 8000ea2:	80da      	strh	r2, [r3, #6]
				Dati.Gir_y = rxData.Data8u[6] | rxData.Data8u[7]<<8;
 8000ea4:	4b32      	ldr	r3, [pc, #200]	; (8000f70 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000ea6:	799b      	ldrb	r3, [r3, #6]
 8000ea8:	b21a      	sxth	r2, r3
 8000eaa:	4b31      	ldr	r3, [pc, #196]	; (8000f70 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000eac:	79db      	ldrb	r3, [r3, #7]
 8000eae:	021b      	lsls	r3, r3, #8
 8000eb0:	b21b      	sxth	r3, r3
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	b21a      	sxth	r2, r3
 8000eb6:	4b31      	ldr	r3, [pc, #196]	; (8000f7c <HAL_FDCAN_RxFifo0Callback+0x14c>)
 8000eb8:	811a      	strh	r2, [r3, #8]
			else{
				Dati.ID = (uint8_t)RxHeader.Identifier & 0x1F;
				Dati.Pres = rxData.Data8u[0] | rxData.Data8u[1]<<8 | rxData.Data8u[2]<<16 | rxData.Data8u[3]<<24;
			}
		}
}
 8000eba:	e053      	b.n	8000f64 <HAL_FDCAN_RxFifo0Callback+0x134>
			else if((RxHeader.Identifier>>5) == 0x01){
 8000ebc:	4b2d      	ldr	r3, [pc, #180]	; (8000f74 <HAL_FDCAN_RxFifo0Callback+0x144>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	095b      	lsrs	r3, r3, #5
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d134      	bne.n	8000f30 <HAL_FDCAN_RxFifo0Callback+0x100>
				Dati.ID = (uint8_t)RxHeader.Identifier & 0x1F;
 8000ec6:	4b2b      	ldr	r3, [pc, #172]	; (8000f74 <HAL_FDCAN_RxFifo0Callback+0x144>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	f003 031f 	and.w	r3, r3, #31
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4b2a      	ldr	r3, [pc, #168]	; (8000f7c <HAL_FDCAN_RxFifo0Callback+0x14c>)
 8000ed4:	771a      	strb	r2, [r3, #28]
				Dati.Acc_x = rxData.Data8u[0] | rxData.Data8u[1]<<8;
 8000ed6:	4b26      	ldr	r3, [pc, #152]	; (8000f70 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	b21a      	sxth	r2, r3
 8000edc:	4b24      	ldr	r3, [pc, #144]	; (8000f70 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000ede:	785b      	ldrb	r3, [r3, #1]
 8000ee0:	021b      	lsls	r3, r3, #8
 8000ee2:	b21b      	sxth	r3, r3
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	b21a      	sxth	r2, r3
 8000ee8:	4b24      	ldr	r3, [pc, #144]	; (8000f7c <HAL_FDCAN_RxFifo0Callback+0x14c>)
 8000eea:	801a      	strh	r2, [r3, #0]
				Dati.Acc_y = rxData.Data8u[2] | rxData.Data8u[3]<<8;
 8000eec:	4b20      	ldr	r3, [pc, #128]	; (8000f70 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000eee:	789b      	ldrb	r3, [r3, #2]
 8000ef0:	b21a      	sxth	r2, r3
 8000ef2:	4b1f      	ldr	r3, [pc, #124]	; (8000f70 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000ef4:	78db      	ldrb	r3, [r3, #3]
 8000ef6:	021b      	lsls	r3, r3, #8
 8000ef8:	b21b      	sxth	r3, r3
 8000efa:	4313      	orrs	r3, r2
 8000efc:	b21a      	sxth	r2, r3
 8000efe:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <HAL_FDCAN_RxFifo0Callback+0x14c>)
 8000f00:	805a      	strh	r2, [r3, #2]
				Dati.Acc_z = rxData.Data8u[4] | rxData.Data8u[5]<<8;
 8000f02:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000f04:	791b      	ldrb	r3, [r3, #4]
 8000f06:	b21a      	sxth	r2, r3
 8000f08:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000f0a:	795b      	ldrb	r3, [r3, #5]
 8000f0c:	021b      	lsls	r3, r3, #8
 8000f0e:	b21b      	sxth	r3, r3
 8000f10:	4313      	orrs	r3, r2
 8000f12:	b21a      	sxth	r2, r3
 8000f14:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <HAL_FDCAN_RxFifo0Callback+0x14c>)
 8000f16:	809a      	strh	r2, [r3, #4]
				Dati.T_b = rxData.Data8u[6] | rxData.Data8u[7]<<8;
 8000f18:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000f1a:	799b      	ldrb	r3, [r3, #6]
 8000f1c:	b21a      	sxth	r2, r3
 8000f1e:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000f20:	79db      	ldrb	r3, [r3, #7]
 8000f22:	021b      	lsls	r3, r3, #8
 8000f24:	b21b      	sxth	r3, r3
 8000f26:	4313      	orrs	r3, r2
 8000f28:	b21a      	sxth	r2, r3
 8000f2a:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <HAL_FDCAN_RxFifo0Callback+0x14c>)
 8000f2c:	81da      	strh	r2, [r3, #14]
}
 8000f2e:	e019      	b.n	8000f64 <HAL_FDCAN_RxFifo0Callback+0x134>
				Dati.ID = (uint8_t)RxHeader.Identifier & 0x1F;
 8000f30:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <HAL_FDCAN_RxFifo0Callback+0x144>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	f003 031f 	and.w	r3, r3, #31
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <HAL_FDCAN_RxFifo0Callback+0x14c>)
 8000f3e:	771a      	strb	r2, [r3, #28]
				Dati.Pres = rxData.Data8u[0] | rxData.Data8u[1]<<8 | rxData.Data8u[2]<<16 | rxData.Data8u[3]<<24;
 8000f40:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000f48:	785b      	ldrb	r3, [r3, #1]
 8000f4a:	021b      	lsls	r3, r3, #8
 8000f4c:	431a      	orrs	r2, r3
 8000f4e:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000f50:	789b      	ldrb	r3, [r3, #2]
 8000f52:	041b      	lsls	r3, r3, #16
 8000f54:	431a      	orrs	r2, r3
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_FDCAN_RxFifo0Callback+0x140>)
 8000f58:	78db      	ldrb	r3, [r3, #3]
 8000f5a:	061b      	lsls	r3, r3, #24
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	461a      	mov	r2, r3
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_FDCAN_RxFifo0Callback+0x14c>)
 8000f62:	611a      	str	r2, [r3, #16]
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	58020400 	.word	0x58020400
 8000f70:	240002bc 	.word	0x240002bc
 8000f74:	2400471c 	.word	0x2400471c
 8000f78:	24004620 	.word	0x24004620
 8000f7c:	240046cc 	.word	0x240046cc

08000f80 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
    if (htim->Instance==TIM17) //check if the interrupt comes from TIM2
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a06      	ldr	r2, [pc, #24]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d105      	bne.n	8000f9e <HAL_TIM_PeriodElapsedCallback+0x1e>
        {
    	HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000f92:	2180      	movs	r1, #128	; 0x80
 8000f94:	4805      	ldr	r0, [pc, #20]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000f96:	f002 fd8c 	bl	8003ab2 <HAL_GPIO_TogglePin>
    	leggi();
 8000f9a:	f000 f887 	bl	80010ac <leggi>
    if (htim->Instance==TIM16) //check if the interrupt comes from TIM2
            {

        	//leggi();

            }}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40014800 	.word	0x40014800
 8000fac:	58020400 	.word	0x58020400

08000fb0 <scrivi>:
FRESULT scrivi(){
 8000fb0:	b590      	push	{r4, r7, lr}
 8000fb2:	b089      	sub	sp, #36	; 0x24
 8000fb4:	af04      	add	r7, sp, #16
	      /* File  object for USER */
	   /* File system object for USER logical drive */
	//FIL USERFile;     /* File  object for USER */
	char USERPath[4];   /* USER logical drive path */
	uint8_t bytesWrote;
	uint8_t path1[] = "ST.TXT";
 8000fb6:	4a34      	ldr	r2, [pc, #208]	; (8001088 <scrivi+0xd8>)
 8000fb8:	463b      	mov	r3, r7
 8000fba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fbe:	6018      	str	r0, [r3, #0]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	8019      	strh	r1, [r3, #0]
 8000fc4:	3302      	adds	r3, #2
 8000fc6:	0c0a      	lsrs	r2, r1, #16
 8000fc8:	701a      	strb	r2, [r3, #0]
	//res = f_mount(&USERFatFs, (TCHAR const*)USERPath, 1);
	//res=f_mount(&myFatFS, USERPath, 1);
	res = f_open(&writeFile, &path1, FA_CREATE_ALWAYS);
 8000fca:	463b      	mov	r3, r7
 8000fcc:	2208      	movs	r2, #8
 8000fce:	4619      	mov	r1, r3
 8000fd0:	482e      	ldr	r0, [pc, #184]	; (800108c <scrivi+0xdc>)
 8000fd2:	f013 fc9f 	bl	8014914 <f_open>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	73fb      	strb	r3, [r7, #15]
	res = f_close(&writeFile);
 8000fda:	482c      	ldr	r0, [pc, #176]	; (800108c <scrivi+0xdc>)
 8000fdc:	f014 fc0b 	bl	80157f6 <f_close>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	73fb      	strb	r3, [r7, #15]
	res = f_open(&writeFile, &path1, FA_WRITE | FA_OPEN_ALWAYS);
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	2212      	movs	r2, #18
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4828      	ldr	r0, [pc, #160]	; (800108c <scrivi+0xdc>)
 8000fec:	f013 fc92 	bl	8014914 <f_open>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	73fb      	strb	r3, [r7, #15]
	if(res==FR_OK) {
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d13b      	bne.n	8001072 <scrivi+0xc2>
		f_lseek(&writeFile, indox);
 8000ffa:	4b25      	ldr	r3, [pc, #148]	; (8001090 <scrivi+0xe0>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f04f 0400 	mov.w	r4, #0
 8001002:	461a      	mov	r2, r3
 8001004:	4623      	mov	r3, r4
 8001006:	4821      	ldr	r0, [pc, #132]	; (800108c <scrivi+0xdc>)
 8001008:	f014 fc1f 	bl	801584a <f_lseek>

		//res1 = f_write(&writeFile, readBuf, size, &bytesWrote);}
		HAL_RTC_GetTime(&hrtc, &stimeststuctureget, RTC_FORMAT_BIN);
 800100c:	2200      	movs	r2, #0
 800100e:	4921      	ldr	r1, [pc, #132]	; (8001094 <scrivi+0xe4>)
 8001010:	4821      	ldr	r0, [pc, #132]	; (8001098 <scrivi+0xe8>)
 8001012:	f006 ff51 	bl	8007eb8 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &Data, RTC_FORMAT_BIN);
 8001016:	2200      	movs	r2, #0
 8001018:	4920      	ldr	r1, [pc, #128]	; (800109c <scrivi+0xec>)
 800101a:	481f      	ldr	r0, [pc, #124]	; (8001098 <scrivi+0xe8>)
 800101c:	f007 f856 	bl	80080cc <HAL_RTC_GetDate>
		Time[0] = stimeststuctureget.Hours;
 8001020:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <scrivi+0xe4>)
 8001022:	781a      	ldrb	r2, [r3, #0]
 8001024:	4b1e      	ldr	r3, [pc, #120]	; (80010a0 <scrivi+0xf0>)
 8001026:	701a      	strb	r2, [r3, #0]
		Time[1] = stimeststuctureget.Minutes;
 8001028:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <scrivi+0xe4>)
 800102a:	785a      	ldrb	r2, [r3, #1]
 800102c:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <scrivi+0xf0>)
 800102e:	705a      	strb	r2, [r3, #1]
		Time[2] = stimeststuctureget.Seconds;
 8001030:	4b18      	ldr	r3, [pc, #96]	; (8001094 <scrivi+0xe4>)
 8001032:	789a      	ldrb	r2, [r3, #2]
 8001034:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <scrivi+0xf0>)
 8001036:	709a      	strb	r2, [r3, #2]

		indox=indox+f_printf(&writeFile,"%d:%d.%d,%d,%d\n",Time[0],Time[1],Time[2],curr,indox);}
 8001038:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <scrivi+0xf0>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <scrivi+0xf0>)
 8001040:	785b      	ldrb	r3, [r3, #1]
 8001042:	461c      	mov	r4, r3
 8001044:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <scrivi+0xf0>)
 8001046:	789b      	ldrb	r3, [r3, #2]
 8001048:	4619      	mov	r1, r3
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <scrivi+0xf4>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a10      	ldr	r2, [pc, #64]	; (8001090 <scrivi+0xe0>)
 8001050:	6812      	ldr	r2, [r2, #0]
 8001052:	9202      	str	r2, [sp, #8]
 8001054:	9301      	str	r3, [sp, #4]
 8001056:	9100      	str	r1, [sp, #0]
 8001058:	4623      	mov	r3, r4
 800105a:	4602      	mov	r2, r0
 800105c:	4912      	ldr	r1, [pc, #72]	; (80010a8 <scrivi+0xf8>)
 800105e:	480b      	ldr	r0, [pc, #44]	; (800108c <scrivi+0xdc>)
 8001060:	f014 ff78 	bl	8015f54 <f_printf>
 8001064:	4603      	mov	r3, r0
 8001066:	461a      	mov	r2, r3
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <scrivi+0xe0>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4413      	add	r3, r2
 800106e:	4a08      	ldr	r2, [pc, #32]	; (8001090 <scrivi+0xe0>)
 8001070:	6013      	str	r3, [r2, #0]
		res = f_close(&writeFile);
 8001072:	4806      	ldr	r0, [pc, #24]	; (800108c <scrivi+0xdc>)
 8001074:	f014 fbbf 	bl	80157f6 <f_close>
 8001078:	4603      	mov	r3, r0
 800107a:	73fb      	strb	r3, [r7, #15]

	return res;
 800107c:	7bfb      	ldrb	r3, [r7, #15]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	bd90      	pop	{r4, r7, pc}
 8001086:	bf00      	nop
 8001088:	08017218 	.word	0x08017218
 800108c:	240014d0 	.word	0x240014d0
 8001090:	24000264 	.word	0x24000264
 8001094:	24005870 	.word	0x24005870
 8001098:	240045fc 	.word	0x240045fc
 800109c:	24004594 	.word	0x24004594
 80010a0:	240046f4 	.word	0x240046f4
 80010a4:	24002528 	.word	0x24002528
 80010a8:	08017208 	.word	0x08017208

080010ac <leggi>:
FRESULT leggi(){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	f5ad 5d83 	sub.w	sp, sp, #4192	; 0x1060
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
    	FIL readFile;       /* File  object for USER */
    		   /* File system object for USER logical drive */
    		//FIL USERFile;     /* File  object for USER */
    	char USERPath[4];
    	uint8_t bytesWrote;
    	uint8_t pat[] = "current.txt";
 80010b6:	4b21      	ldr	r3, [pc, #132]	; (800113c <leggi+0x90>)
 80010b8:	f241 0270 	movw	r2, #4208	; 0x1070
 80010bc:	443a      	add	r2, r7
 80010be:	4413      	add	r3, r2
 80010c0:	4a1f      	ldr	r2, [pc, #124]	; (8001140 <leggi+0x94>)
 80010c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80010c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    	res = f_open(&readFile, &pat, FA_READ);
 80010c8:	4b1c      	ldr	r3, [pc, #112]	; (800113c <leggi+0x90>)
 80010ca:	f241 0270 	movw	r2, #4208	; 0x1070
 80010ce:	443a      	add	r2, r7
 80010d0:	4413      	add	r3, r2
 80010d2:	f107 0010 	add.w	r0, r7, #16
 80010d6:	2201      	movs	r2, #1
 80010d8:	4619      	mov	r1, r3
 80010da:	f013 fc1b 	bl	8014914 <f_open>
 80010de:	4603      	mov	r3, r0
 80010e0:	f241 026f 	movw	r2, #4207	; 0x106f
 80010e4:	443a      	add	r2, r7
 80010e6:	7013      	strb	r3, [r2, #0]
    	res = f_read(&readFile,readBuff,1, &br);
 80010e8:	f107 0010 	add.w	r0, r7, #16
 80010ec:	4b15      	ldr	r3, [pc, #84]	; (8001144 <leggi+0x98>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	4915      	ldr	r1, [pc, #84]	; (8001148 <leggi+0x9c>)
 80010f2:	f013 fedf 	bl	8014eb4 <f_read>
 80010f6:	4603      	mov	r3, r0
 80010f8:	f241 026f 	movw	r2, #4207	; 0x106f
 80010fc:	443a      	add	r2, r7
 80010fe:	7013      	strb	r3, [r2, #0]
    	if(readBuff[0]=='1'){flag++;}
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <leggi+0x9c>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b31      	cmp	r3, #49	; 0x31
 8001106:	d105      	bne.n	8001114 <leggi+0x68>
 8001108:	4b10      	ldr	r3, [pc, #64]	; (800114c <leggi+0xa0>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	3301      	adds	r3, #1
 800110e:	b2da      	uxtb	r2, r3
 8001110:	4b0e      	ldr	r3, [pc, #56]	; (800114c <leggi+0xa0>)
 8001112:	701a      	strb	r2, [r3, #0]
    	scrivi();
 8001114:	f7ff ff4c 	bl	8000fb0 <scrivi>
    	res = f_close(&readFile);
 8001118:	f107 0310 	add.w	r3, r7, #16
 800111c:	4618      	mov	r0, r3
 800111e:	f014 fb6a 	bl	80157f6 <f_close>
 8001122:	4603      	mov	r3, r0
 8001124:	f241 026f 	movw	r2, #4207	; 0x106f
 8001128:	443a      	add	r2, r7
 800112a:	7013      	strb	r3, [r2, #0]





    	}
 800112c:	bf00      	nop
 800112e:	4618      	mov	r0, r3
 8001130:	f507 5783 	add.w	r7, r7, #4192	; 0x1060
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	ffffef90 	.word	0xffffef90
 8001140:	08017220 	.word	0x08017220
 8001144:	240014cc 	.word	0x240014cc
 8001148:	240013b4 	.word	0x240013b4
 800114c:	24000268 	.word	0x24000268

08001150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
	...

08001160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001166:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <HAL_MspInit+0x30>)
 8001168:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800116c:	4a08      	ldr	r2, [pc, #32]	; (8001190 <HAL_MspInit+0x30>)
 800116e:	f043 0302 	orr.w	r3, r3, #2
 8001172:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_MspInit+0x30>)
 8001178:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800117c:	f003 0302 	and.w	r3, r3, #2
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	58024400 	.word	0x58024400

08001194 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08e      	sub	sp, #56	; 0x38
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a59      	ldr	r2, [pc, #356]	; (8001318 <HAL_ETH_MspInit+0x184>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	f040 80ab 	bne.w	800130e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80011b8:	4b58      	ldr	r3, [pc, #352]	; (800131c <HAL_ETH_MspInit+0x188>)
 80011ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011be:	4a57      	ldr	r2, [pc, #348]	; (800131c <HAL_ETH_MspInit+0x188>)
 80011c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011c4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011c8:	4b54      	ldr	r3, [pc, #336]	; (800131c <HAL_ETH_MspInit+0x188>)
 80011ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011d2:	623b      	str	r3, [r7, #32]
 80011d4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80011d6:	4b51      	ldr	r3, [pc, #324]	; (800131c <HAL_ETH_MspInit+0x188>)
 80011d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011dc:	4a4f      	ldr	r2, [pc, #316]	; (800131c <HAL_ETH_MspInit+0x188>)
 80011de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011e6:	4b4d      	ldr	r3, [pc, #308]	; (800131c <HAL_ETH_MspInit+0x188>)
 80011e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f0:	61fb      	str	r3, [r7, #28]
 80011f2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80011f4:	4b49      	ldr	r3, [pc, #292]	; (800131c <HAL_ETH_MspInit+0x188>)
 80011f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011fa:	4a48      	ldr	r2, [pc, #288]	; (800131c <HAL_ETH_MspInit+0x188>)
 80011fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001200:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001204:	4b45      	ldr	r3, [pc, #276]	; (800131c <HAL_ETH_MspInit+0x188>)
 8001206:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800120a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120e:	61bb      	str	r3, [r7, #24]
 8001210:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001212:	4b42      	ldr	r3, [pc, #264]	; (800131c <HAL_ETH_MspInit+0x188>)
 8001214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001218:	4a40      	ldr	r2, [pc, #256]	; (800131c <HAL_ETH_MspInit+0x188>)
 800121a:	f043 0304 	orr.w	r3, r3, #4
 800121e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001222:	4b3e      	ldr	r3, [pc, #248]	; (800131c <HAL_ETH_MspInit+0x188>)
 8001224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001230:	4b3a      	ldr	r3, [pc, #232]	; (800131c <HAL_ETH_MspInit+0x188>)
 8001232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001236:	4a39      	ldr	r2, [pc, #228]	; (800131c <HAL_ETH_MspInit+0x188>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001240:	4b36      	ldr	r3, [pc, #216]	; (800131c <HAL_ETH_MspInit+0x188>)
 8001242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800124e:	4b33      	ldr	r3, [pc, #204]	; (800131c <HAL_ETH_MspInit+0x188>)
 8001250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001254:	4a31      	ldr	r2, [pc, #196]	; (800131c <HAL_ETH_MspInit+0x188>)
 8001256:	f043 0302 	orr.w	r3, r3, #2
 800125a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800125e:	4b2f      	ldr	r3, [pc, #188]	; (800131c <HAL_ETH_MspInit+0x188>)
 8001260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800126c:	4b2b      	ldr	r3, [pc, #172]	; (800131c <HAL_ETH_MspInit+0x188>)
 800126e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001272:	4a2a      	ldr	r2, [pc, #168]	; (800131c <HAL_ETH_MspInit+0x188>)
 8001274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001278:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800127c:	4b27      	ldr	r3, [pc, #156]	; (800131c <HAL_ETH_MspInit+0x188>)
 800127e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800128a:	2332      	movs	r3, #50	; 0x32
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128e:	2302      	movs	r3, #2
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	2300      	movs	r3, #0
 8001298:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800129a:	230b      	movs	r3, #11
 800129c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a2:	4619      	mov	r1, r3
 80012a4:	481e      	ldr	r0, [pc, #120]	; (8001320 <HAL_ETH_MspInit+0x18c>)
 80012a6:	f002 fa23 	bl	80036f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80012aa:	2386      	movs	r3, #134	; 0x86
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012ba:	230b      	movs	r3, #11
 80012bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c2:	4619      	mov	r1, r3
 80012c4:	4817      	ldr	r0, [pc, #92]	; (8001324 <HAL_ETH_MspInit+0x190>)
 80012c6:	f002 fa13 	bl	80036f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80012ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012dc:	230b      	movs	r3, #11
 80012de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80012e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e4:	4619      	mov	r1, r3
 80012e6:	4810      	ldr	r0, [pc, #64]	; (8001328 <HAL_ETH_MspInit+0x194>)
 80012e8:	f002 fa02 	bl	80036f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80012ec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2300      	movs	r3, #0
 80012fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012fe:	230b      	movs	r3, #11
 8001300:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001306:	4619      	mov	r1, r3
 8001308:	4808      	ldr	r0, [pc, #32]	; (800132c <HAL_ETH_MspInit+0x198>)
 800130a:	f002 f9f1 	bl	80036f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800130e:	bf00      	nop
 8001310:	3738      	adds	r7, #56	; 0x38
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40028000 	.word	0x40028000
 800131c:	58024400 	.word	0x58024400
 8001320:	58020800 	.word	0x58020800
 8001324:	58020000 	.word	0x58020000
 8001328:	58020400 	.word	0x58020400
 800132c:	58021800 	.word	0x58021800

08001330 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	; 0x28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a1a      	ldr	r2, [pc, #104]	; (80013b8 <HAL_FDCAN_MspInit+0x88>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d12d      	bne.n	80013ae <HAL_FDCAN_MspInit+0x7e>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001352:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <HAL_FDCAN_MspInit+0x8c>)
 8001354:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001358:	4a18      	ldr	r2, [pc, #96]	; (80013bc <HAL_FDCAN_MspInit+0x8c>)
 800135a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800135e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001362:	4b16      	ldr	r3, [pc, #88]	; (80013bc <HAL_FDCAN_MspInit+0x8c>)
 8001364:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <HAL_FDCAN_MspInit+0x8c>)
 8001372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001376:	4a11      	ldr	r2, [pc, #68]	; (80013bc <HAL_FDCAN_MspInit+0x8c>)
 8001378:	f043 0308 	orr.w	r3, r3, #8
 800137c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001380:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <HAL_FDCAN_MspInit+0x8c>)
 8001382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration    
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800138e:	2303      	movs	r3, #3
 8001390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2300      	movs	r3, #0
 800139c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800139e:	2309      	movs	r3, #9
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	4805      	ldr	r0, [pc, #20]	; (80013c0 <HAL_FDCAN_MspInit+0x90>)
 80013aa:	f002 f9a1 	bl	80036f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80013ae:	bf00      	nop
 80013b0:	3728      	adds	r7, #40	; 0x28
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	4000a000 	.word	0x4000a000
 80013bc:	58024400 	.word	0x58024400
 80013c0:	58020c00 	.word	0x58020c00

080013c4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a07      	ldr	r2, [pc, #28]	; (80013f0 <HAL_RTC_MspInit+0x2c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d105      	bne.n	80013e2 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80013d6:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <HAL_RTC_MspInit+0x30>)
 80013d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013da:	4a06      	ldr	r2, [pc, #24]	; (80013f4 <HAL_RTC_MspInit+0x30>)
 80013dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013e0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	58004000 	.word	0x58004000
 80013f4:	58024400 	.word	0x58024400

080013f8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	; 0x28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a32      	ldr	r2, [pc, #200]	; (80014e0 <HAL_SD_MspInit+0xe8>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d15e      	bne.n	80014d8 <HAL_SD_MspInit+0xe0>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800141a:	4b32      	ldr	r3, [pc, #200]	; (80014e4 <HAL_SD_MspInit+0xec>)
 800141c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001420:	4a30      	ldr	r2, [pc, #192]	; (80014e4 <HAL_SD_MspInit+0xec>)
 8001422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001426:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800142a:	4b2e      	ldr	r3, [pc, #184]	; (80014e4 <HAL_SD_MspInit+0xec>)
 800142c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001438:	4b2a      	ldr	r3, [pc, #168]	; (80014e4 <HAL_SD_MspInit+0xec>)
 800143a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800143e:	4a29      	ldr	r2, [pc, #164]	; (80014e4 <HAL_SD_MspInit+0xec>)
 8001440:	f043 0304 	orr.w	r3, r3, #4
 8001444:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001448:	4b26      	ldr	r3, [pc, #152]	; (80014e4 <HAL_SD_MspInit+0xec>)
 800144a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001456:	4b23      	ldr	r3, [pc, #140]	; (80014e4 <HAL_SD_MspInit+0xec>)
 8001458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145c:	4a21      	ldr	r2, [pc, #132]	; (80014e4 <HAL_SD_MspInit+0xec>)
 800145e:	f043 0308 	orr.w	r3, r3, #8
 8001462:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001466:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <HAL_SD_MspInit+0xec>)
 8001468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146c:	f003 0308 	and.w	r3, r3, #8
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration    
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001474:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147a:	2302      	movs	r3, #2
 800147c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800147e:	2301      	movs	r3, #1
 8001480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001482:	2303      	movs	r3, #3
 8001484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001486:	230c      	movs	r3, #12
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	4619      	mov	r1, r3
 8001490:	4815      	ldr	r0, [pc, #84]	; (80014e8 <HAL_SD_MspInit+0xf0>)
 8001492:	f002 f92d 	bl	80036f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001496:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800149a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149c:	2302      	movs	r3, #2
 800149e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a4:	2303      	movs	r3, #3
 80014a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80014a8:	230c      	movs	r3, #12
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	480d      	ldr	r0, [pc, #52]	; (80014e8 <HAL_SD_MspInit+0xf0>)
 80014b4:	f002 f91c 	bl	80036f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014b8:	2304      	movs	r3, #4
 80014ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014bc:	2302      	movs	r3, #2
 80014be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014c0:	2301      	movs	r3, #1
 80014c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c4:	2303      	movs	r3, #3
 80014c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80014c8:	230c      	movs	r3, #12
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	4619      	mov	r1, r3
 80014d2:	4806      	ldr	r0, [pc, #24]	; (80014ec <HAL_SD_MspInit+0xf4>)
 80014d4:	f002 f90c 	bl	80036f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80014d8:	bf00      	nop
 80014da:	3728      	adds	r7, #40	; 0x28
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	52007000 	.word	0x52007000
 80014e4:	58024400 	.word	0x58024400
 80014e8:	58020800 	.word	0x58020800
 80014ec:	58020c00 	.word	0x58020c00

080014f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a1d      	ldr	r2, [pc, #116]	; (8001574 <HAL_TIM_Base_MspInit+0x84>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d117      	bne.n	8001532 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001502:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <HAL_TIM_Base_MspInit+0x88>)
 8001504:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001508:	4a1b      	ldr	r2, [pc, #108]	; (8001578 <HAL_TIM_Base_MspInit+0x88>)
 800150a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800150e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001512:	4b19      	ldr	r3, [pc, #100]	; (8001578 <HAL_TIM_Base_MspInit+0x88>)
 8001514:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001520:	2200      	movs	r2, #0
 8001522:	2100      	movs	r1, #0
 8001524:	2075      	movs	r0, #117	; 0x75
 8001526:	f000 fb3a 	bl	8001b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800152a:	2075      	movs	r0, #117	; 0x75
 800152c:	f000 fb51 	bl	8001bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001530:	e01b      	b.n	800156a <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM17)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a11      	ldr	r2, [pc, #68]	; (800157c <HAL_TIM_Base_MspInit+0x8c>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d116      	bne.n	800156a <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800153c:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <HAL_TIM_Base_MspInit+0x88>)
 800153e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001542:	4a0d      	ldr	r2, [pc, #52]	; (8001578 <HAL_TIM_Base_MspInit+0x88>)
 8001544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001548:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800154c:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <HAL_TIM_Base_MspInit+0x88>)
 800154e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001552:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800155a:	2200      	movs	r2, #0
 800155c:	2100      	movs	r1, #0
 800155e:	2076      	movs	r0, #118	; 0x76
 8001560:	f000 fb1d 	bl	8001b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001564:	2076      	movs	r0, #118	; 0x76
 8001566:	f000 fb34 	bl	8001bd2 <HAL_NVIC_EnableIRQ>
}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40014400 	.word	0x40014400
 8001578:	58024400 	.word	0x58024400
 800157c:	40014800 	.word	0x40014800

08001580 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08a      	sub	sp, #40	; 0x28
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a1a      	ldr	r2, [pc, #104]	; (8001608 <HAL_UART_MspInit+0x88>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d12e      	bne.n	8001600 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015a2:	4b1a      	ldr	r3, [pc, #104]	; (800160c <HAL_UART_MspInit+0x8c>)
 80015a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015a8:	4a18      	ldr	r2, [pc, #96]	; (800160c <HAL_UART_MspInit+0x8c>)
 80015aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015b2:	4b16      	ldr	r3, [pc, #88]	; (800160c <HAL_UART_MspInit+0x8c>)
 80015b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015c0:	4b12      	ldr	r3, [pc, #72]	; (800160c <HAL_UART_MspInit+0x8c>)
 80015c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c6:	4a11      	ldr	r2, [pc, #68]	; (800160c <HAL_UART_MspInit+0x8c>)
 80015c8:	f043 0308 	orr.w	r3, r3, #8
 80015cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015d0:	4b0e      	ldr	r3, [pc, #56]	; (800160c <HAL_UART_MspInit+0x8c>)
 80015d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d6:	f003 0308 	and.w	r3, r3, #8
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015f0:	2307      	movs	r3, #7
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	4619      	mov	r1, r3
 80015fa:	4805      	ldr	r0, [pc, #20]	; (8001610 <HAL_UART_MspInit+0x90>)
 80015fc:	f002 f878 	bl	80036f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001600:	bf00      	nop
 8001602:	3728      	adds	r7, #40	; 0x28
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40004800 	.word	0x40004800
 800160c:	58024400 	.word	0x58024400
 8001610:	58020c00 	.word	0x58020c00

08001614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001626:	e7fe      	b.n	8001626 <HardFault_Handler+0x4>

08001628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800162c:	e7fe      	b.n	800162c <MemManage_Handler+0x4>

0800162e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001632:	e7fe      	b.n	8001632 <BusFault_Handler+0x4>

08001634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <UsageFault_Handler+0x4>

0800163a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001668:	f000 f95c 	bl	8001924 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}

08001670 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001674:	4802      	ldr	r0, [pc, #8]	; (8001680 <FDCAN1_IT0_IRQHandler+0x10>)
 8001676:	f001 fb2d 	bl	8002cd4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	24004620 	.word	0x24004620

08001684 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001688:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800168c:	f002 fa2c 	bl	8003ae8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}

08001694 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001698:	4802      	ldr	r0, [pc, #8]	; (80016a4 <OTG_FS_IRQHandler+0x10>)
 800169a:	f002 fba1 	bl	8003de0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	24007de8 	.word	0x24007de8

080016a8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80016ac:	4802      	ldr	r0, [pc, #8]	; (80016b8 <TIM16_IRQHandler+0x10>)
 80016ae:	f008 f9c6 	bl	8009a3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	240047f4 	.word	0x240047f4

080016bc <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80016c0:	4802      	ldr	r0, [pc, #8]	; (80016cc <TIM17_IRQHandler+0x10>)
 80016c2:	f008 f9bc 	bl	8009a3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	24001478 	.word	0x24001478

080016d0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <_sbrk+0x50>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d102      	bne.n	80016e6 <_sbrk+0x16>
		heap_end = &end;
 80016e0:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <_sbrk+0x50>)
 80016e2:	4a10      	ldr	r2, [pc, #64]	; (8001724 <_sbrk+0x54>)
 80016e4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <_sbrk+0x50>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <_sbrk+0x50>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4413      	add	r3, r2
 80016f4:	466a      	mov	r2, sp
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d907      	bls.n	800170a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80016fa:	f015 fc71 	bl	8016fe0 <__errno>
 80016fe:	4602      	mov	r2, r0
 8001700:	230c      	movs	r3, #12
 8001702:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001704:	f04f 33ff 	mov.w	r3, #4294967295
 8001708:	e006      	b.n	8001718 <_sbrk+0x48>
	}

	heap_end += incr;
 800170a:	4b05      	ldr	r3, [pc, #20]	; (8001720 <_sbrk+0x50>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	4a03      	ldr	r2, [pc, #12]	; (8001720 <_sbrk+0x50>)
 8001714:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001716:	68fb      	ldr	r3, [r7, #12]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	2400026c 	.word	0x2400026c
 8001724:	240081f8 	.word	0x240081f8

08001728 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800172c:	4b29      	ldr	r3, [pc, #164]	; (80017d4 <SystemInit+0xac>)
 800172e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001732:	4a28      	ldr	r2, [pc, #160]	; (80017d4 <SystemInit+0xac>)
 8001734:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001738:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800173c:	4b26      	ldr	r3, [pc, #152]	; (80017d8 <SystemInit+0xb0>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a25      	ldr	r2, [pc, #148]	; (80017d8 <SystemInit+0xb0>)
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001748:	4b23      	ldr	r3, [pc, #140]	; (80017d8 <SystemInit+0xb0>)
 800174a:	2200      	movs	r2, #0
 800174c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800174e:	4b22      	ldr	r3, [pc, #136]	; (80017d8 <SystemInit+0xb0>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	4921      	ldr	r1, [pc, #132]	; (80017d8 <SystemInit+0xb0>)
 8001754:	4b21      	ldr	r3, [pc, #132]	; (80017dc <SystemInit+0xb4>)
 8001756:	4013      	ands	r3, r2
 8001758:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800175a:	4b1f      	ldr	r3, [pc, #124]	; (80017d8 <SystemInit+0xb0>)
 800175c:	2200      	movs	r2, #0
 800175e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001760:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <SystemInit+0xb0>)
 8001762:	2200      	movs	r2, #0
 8001764:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001766:	4b1c      	ldr	r3, [pc, #112]	; (80017d8 <SystemInit+0xb0>)
 8001768:	2200      	movs	r2, #0
 800176a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800176c:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <SystemInit+0xb0>)
 800176e:	2200      	movs	r2, #0
 8001770:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8001772:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <SystemInit+0xb0>)
 8001774:	2200      	movs	r2, #0
 8001776:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001778:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <SystemInit+0xb0>)
 800177a:	2200      	movs	r2, #0
 800177c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800177e:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <SystemInit+0xb0>)
 8001780:	2200      	movs	r2, #0
 8001782:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001784:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <SystemInit+0xb0>)
 8001786:	2200      	movs	r2, #0
 8001788:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800178a:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <SystemInit+0xb0>)
 800178c:	2200      	movs	r2, #0
 800178e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001790:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <SystemInit+0xb0>)
 8001792:	2200      	movs	r2, #0
 8001794:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <SystemInit+0xb0>)
 8001798:	2200      	movs	r2, #0
 800179a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800179c:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <SystemInit+0xb0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a0d      	ldr	r2, [pc, #52]	; (80017d8 <SystemInit+0xb0>)
 80017a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80017a8:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <SystemInit+0xb0>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80017ae:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <SystemInit+0xb8>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <SystemInit+0xbc>)
 80017b4:	4013      	ands	r3, r2
 80017b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017ba:	d202      	bcs.n	80017c2 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80017bc:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <SystemInit+0xc0>)
 80017be:	2201      	movs	r2, #1
 80017c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017c2:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <SystemInit+0xac>)
 80017c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017c8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000ed00 	.word	0xe000ed00
 80017d8:	58024400 	.word	0x58024400
 80017dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80017e0:	5c001000 	.word	0x5c001000
 80017e4:	ffff0000 	.word	0xffff0000
 80017e8:	51008108 	.word	0x51008108

080017ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001824 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80017f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80017f2:	e003      	b.n	80017fc <LoopCopyDataInit>

080017f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80017f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80017f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80017fa:	3104      	adds	r1, #4

080017fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80017fc:	480b      	ldr	r0, [pc, #44]	; (800182c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80017fe:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001800:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001802:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001804:	d3f6      	bcc.n	80017f4 <CopyDataInit>
  ldr  r2, =_sbss
 8001806:	4a0b      	ldr	r2, [pc, #44]	; (8001834 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001808:	e002      	b.n	8001810 <LoopFillZerobss>

0800180a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800180a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800180c:	f842 3b04 	str.w	r3, [r2], #4

08001810 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001810:	4b09      	ldr	r3, [pc, #36]	; (8001838 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001812:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001814:	d3f9      	bcc.n	800180a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001816:	f7ff ff87 	bl	8001728 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800181a:	f015 fbe7 	bl	8016fec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800181e:	f7fe fedb 	bl	80005d8 <main>
  bx  lr    
 8001822:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001824:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001828:	080177f4 	.word	0x080177f4
  ldr  r0, =_sdata
 800182c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001830:	24000188 	.word	0x24000188
  ldr  r2, =_sbss
 8001834:	24000248 	.word	0x24000248
  ldr  r3, = _ebss
 8001838:	240081f4 	.word	0x240081f4

0800183c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800183c:	e7fe      	b.n	800183c <ADC3_IRQHandler>
	...

08001840 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001846:	2003      	movs	r0, #3
 8001848:	f000 f99e 	bl	8001b88 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800184c:	f004 f952 	bl	8005af4 <HAL_RCC_GetSysClockFreq>
 8001850:	4601      	mov	r1, r0
 8001852:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <HAL_Init+0x68>)
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	0a1b      	lsrs	r3, r3, #8
 8001858:	f003 030f 	and.w	r3, r3, #15
 800185c:	4a13      	ldr	r2, [pc, #76]	; (80018ac <HAL_Init+0x6c>)
 800185e:	5cd3      	ldrb	r3, [r2, r3]
 8001860:	f003 031f 	and.w	r3, r3, #31
 8001864:	fa21 f303 	lsr.w	r3, r1, r3
 8001868:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800186a:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <HAL_Init+0x68>)
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	4a0e      	ldr	r2, [pc, #56]	; (80018ac <HAL_Init+0x6c>)
 8001874:	5cd3      	ldrb	r3, [r2, r3]
 8001876:	f003 031f 	and.w	r3, r3, #31
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	fa22 f303 	lsr.w	r3, r2, r3
 8001880:	4a0b      	ldr	r2, [pc, #44]	; (80018b0 <HAL_Init+0x70>)
 8001882:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001884:	4a0b      	ldr	r2, [pc, #44]	; (80018b4 <HAL_Init+0x74>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800188a:	2000      	movs	r0, #0
 800188c:	f000 f814 	bl	80018b8 <HAL_InitTick>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e002      	b.n	80018a0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800189a:	f7ff fc61 	bl	8001160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	58024400 	.word	0x58024400
 80018ac:	08017334 	.word	0x08017334
 80018b0:	24000004 	.word	0x24000004
 80018b4:	24000000 	.word	0x24000000

080018b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80018c0:	4b15      	ldr	r3, [pc, #84]	; (8001918 <HAL_InitTick+0x60>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d101      	bne.n	80018cc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e021      	b.n	8001910 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80018cc:	4b13      	ldr	r3, [pc, #76]	; (800191c <HAL_InitTick+0x64>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <HAL_InitTick+0x60>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	4619      	mov	r1, r3
 80018d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018da:	fbb3 f3f1 	udiv	r3, r3, r1
 80018de:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 f983 	bl	8001bee <HAL_SYSTICK_Config>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e00e      	b.n	8001910 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b0f      	cmp	r3, #15
 80018f6:	d80a      	bhi.n	800190e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f8:	2200      	movs	r2, #0
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001900:	f000 f94d 	bl	8001b9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001904:	4a06      	ldr	r2, [pc, #24]	; (8001920 <HAL_InitTick+0x68>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800190a:	2300      	movs	r3, #0
 800190c:	e000      	b.n	8001910 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
}
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	2400000c 	.word	0x2400000c
 800191c:	24000000 	.word	0x24000000
 8001920:	24000008 	.word	0x24000008

08001924 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <HAL_IncTick+0x20>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <HAL_IncTick+0x24>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4413      	add	r3, r2
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <HAL_IncTick+0x24>)
 8001936:	6013      	str	r3, [r2, #0]
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	2400000c 	.word	0x2400000c
 8001948:	24005884 	.word	0x24005884

0800194c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return uwTick;
 8001950:	4b03      	ldr	r3, [pc, #12]	; (8001960 <HAL_GetTick+0x14>)
 8001952:	681b      	ldr	r3, [r3, #0]
}
 8001954:	4618      	mov	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	24005884 	.word	0x24005884

08001964 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800196c:	f7ff ffee 	bl	800194c <HAL_GetTick>
 8001970:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800197c:	d005      	beq.n	800198a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <HAL_Delay+0x40>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	461a      	mov	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4413      	add	r3, r2
 8001988:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800198a:	bf00      	nop
 800198c:	f7ff ffde 	bl	800194c <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	429a      	cmp	r2, r3
 800199a:	d8f7      	bhi.n	800198c <HAL_Delay+0x28>
  {
  }
}
 800199c:	bf00      	nop
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	2400000c 	.word	0x2400000c

080019a8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80019ac:	4b03      	ldr	r3, [pc, #12]	; (80019bc <HAL_GetREVID+0x14>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	0c1b      	lsrs	r3, r3, #16
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	5c001000 	.word	0x5c001000

080019c0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80019d0:	4904      	ldr	r1, [pc, #16]	; (80019e4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	604b      	str	r3, [r1, #4]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	58000400 	.word	0x58000400

080019e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <__NVIC_SetPriorityGrouping+0x40>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019fe:	68ba      	ldr	r2, [r7, #8]
 8001a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a04:	4013      	ands	r3, r2
 8001a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <__NVIC_SetPriorityGrouping+0x44>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a16:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <__NVIC_SetPriorityGrouping+0x40>)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	60d3      	str	r3, [r2, #12]
}
 8001a1c:	bf00      	nop
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000ed00 	.word	0xe000ed00
 8001a2c:	05fa0000 	.word	0x05fa0000

08001a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a34:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <__NVIC_GetPriorityGrouping+0x18>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	0a1b      	lsrs	r3, r3, #8
 8001a3a:	f003 0307 	and.w	r3, r3, #7
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	db0b      	blt.n	8001a76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a5e:	88fb      	ldrh	r3, [r7, #6]
 8001a60:	f003 021f 	and.w	r2, r3, #31
 8001a64:	4907      	ldr	r1, [pc, #28]	; (8001a84 <__NVIC_EnableIRQ+0x38>)
 8001a66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a6a:	095b      	lsrs	r3, r3, #5
 8001a6c:	2001      	movs	r0, #1
 8001a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	e000e100 	.word	0xe000e100

08001a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	6039      	str	r1, [r7, #0]
 8001a92:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	db0a      	blt.n	8001ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	490c      	ldr	r1, [pc, #48]	; (8001ad4 <__NVIC_SetPriority+0x4c>)
 8001aa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aa6:	0112      	lsls	r2, r2, #4
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	440b      	add	r3, r1
 8001aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab0:	e00a      	b.n	8001ac8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	4908      	ldr	r1, [pc, #32]	; (8001ad8 <__NVIC_SetPriority+0x50>)
 8001ab8:	88fb      	ldrh	r3, [r7, #6]
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	3b04      	subs	r3, #4
 8001ac0:	0112      	lsls	r2, r2, #4
 8001ac2:	b2d2      	uxtb	r2, r2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	761a      	strb	r2, [r3, #24]
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	e000e100 	.word	0xe000e100
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b089      	sub	sp, #36	; 0x24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f1c3 0307 	rsb	r3, r3, #7
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	bf28      	it	cs
 8001afa:	2304      	movcs	r3, #4
 8001afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3304      	adds	r3, #4
 8001b02:	2b06      	cmp	r3, #6
 8001b04:	d902      	bls.n	8001b0c <NVIC_EncodePriority+0x30>
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3b03      	subs	r3, #3
 8001b0a:	e000      	b.n	8001b0e <NVIC_EncodePriority+0x32>
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b10:	f04f 32ff 	mov.w	r2, #4294967295
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43da      	mvns	r2, r3
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	401a      	ands	r2, r3
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b24:	f04f 31ff 	mov.w	r1, #4294967295
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2e:	43d9      	mvns	r1, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b34:	4313      	orrs	r3, r2
         );
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3724      	adds	r7, #36	; 0x24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
	...

08001b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b54:	d301      	bcc.n	8001b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b56:	2301      	movs	r3, #1
 8001b58:	e00f      	b.n	8001b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b5a:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <SysTick_Config+0x40>)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b62:	210f      	movs	r1, #15
 8001b64:	f04f 30ff 	mov.w	r0, #4294967295
 8001b68:	f7ff ff8e 	bl	8001a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <SysTick_Config+0x40>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b72:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <SysTick_Config+0x40>)
 8001b74:	2207      	movs	r2, #7
 8001b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	e000e010 	.word	0xe000e010

08001b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff ff29 	bl	80019e8 <__NVIC_SetPriorityGrouping>
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b086      	sub	sp, #24
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	60b9      	str	r1, [r7, #8]
 8001ba8:	607a      	str	r2, [r7, #4]
 8001baa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bac:	f7ff ff40 	bl	8001a30 <__NVIC_GetPriorityGrouping>
 8001bb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	68b9      	ldr	r1, [r7, #8]
 8001bb6:	6978      	ldr	r0, [r7, #20]
 8001bb8:	f7ff ff90 	bl	8001adc <NVIC_EncodePriority>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff5f 	bl	8001a88 <__NVIC_SetPriority>
}
 8001bca:	bf00      	nop
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	4603      	mov	r3, r0
 8001bda:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ff33 	bl	8001a4c <__NVIC_EnableIRQ>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff ffa4 	bl	8001b44 <SysTick_Config>
 8001bfc:	4603      	mov	r3, r0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
	...

08001c08 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e0c6      	b.n	8001da8 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d102      	bne.n	8001c28 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff fab6 	bl	8001194 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2223      	movs	r2, #35	; 0x23
 8001c2c:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2e:	4b60      	ldr	r3, [pc, #384]	; (8001db0 <HAL_ETH_Init+0x1a8>)
 8001c30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c34:	4a5e      	ldr	r2, [pc, #376]	; (8001db0 <HAL_ETH_Init+0x1a8>)
 8001c36:	f043 0302 	orr.w	r3, r3, #2
 8001c3a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c3e:	4b5c      	ldr	r3, [pc, #368]	; (8001db0 <HAL_ETH_Init+0x1a8>)
 8001c40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	7a1b      	ldrb	r3, [r3, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d103      	bne.n	8001c5c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001c54:	2000      	movs	r0, #0
 8001c56:	f7ff feb3 	bl	80019c0 <HAL_SYSCFG_ETHInterfaceSelect>
 8001c5a:	e003      	b.n	8001c64 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001c5c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001c60:	f7ff feae 	bl	80019c0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 0201 	orr.w	r2, r2, #1
 8001c76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c7c:	f7ff fe66 	bl	800194c <HAL_GetTick>
 8001c80:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001c82:	e00f      	b.n	8001ca4 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001c84:	f7ff fe62 	bl	800194c <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c92:	d907      	bls.n	8001ca4 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2204      	movs	r2, #4
 8001c98:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	22e0      	movs	r2, #224	; 0xe0
 8001c9e:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e081      	b.n	8001da8 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1e6      	bne.n	8001c84 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 fac0 	bl	800223c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001cbc:	f004 f88c 	bl	8005dd8 <HAL_RCC_GetHCLKFreq>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	4b3c      	ldr	r3, [pc, #240]	; (8001db4 <HAL_ETH_Init+0x1ac>)
 8001cc4:	fba3 2302 	umull	r2, r3, r3, r2
 8001cc8:	0c9a      	lsrs	r2, r3, #18
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	3a01      	subs	r2, #1
 8001cd0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 fa13 	bl	8002100 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001cf0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001cf4:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	f003 0303 	and.w	r3, r3, #3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d007      	beq.n	8001d12 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	22e0      	movs	r2, #224	; 0xe0
 8001d0c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e04a      	b.n	8001da8 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	f241 1308 	movw	r3, #4360	; 0x1108
 8001d1a:	4413      	add	r3, r2
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	4b26      	ldr	r3, [pc, #152]	; (8001db8 <HAL_ETH_Init+0x1b0>)
 8001d20:	4013      	ands	r3, r2
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6952      	ldr	r2, [r2, #20]
 8001d26:	0052      	lsls	r2, r2, #1
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	6809      	ldr	r1, [r1, #0]
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	f241 1308 	movw	r3, #4360	; 0x1108
 8001d32:	440b      	add	r3, r1
 8001d34:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 fad8 	bl	80022ec <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 fb1c 	bl	800237a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	3305      	adds	r3, #5
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	021a      	lsls	r2, r3, #8
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	3304      	adds	r3, #4
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	4619      	mov	r1, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	3303      	adds	r3, #3
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	061a      	lsls	r2, r3, #24
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	3302      	adds	r3, #2
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	041b      	lsls	r3, r3, #16
 8001d74:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001d80:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001d8e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001d90:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2210      	movs	r2, #16
 8001d9e:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2210      	movs	r2, #16
 8001da4:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	58024400 	.word	0x58024400
 8001db4:	431bde83 	.word	0x431bde83
 8001db8:	ffff8001 	.word	0xffff8001

08001dbc <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001dce:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	791b      	ldrb	r3, [r3, #4]
 8001dd4:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001dd6:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	7b1b      	ldrb	r3, [r3, #12]
 8001ddc:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001dde:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	7b5b      	ldrb	r3, [r3, #13]
 8001de4:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001de6:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	7b9b      	ldrb	r3, [r3, #14]
 8001dec:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001dee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	7bdb      	ldrb	r3, [r3, #15]
 8001df4:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001df6:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	7c12      	ldrb	r2, [r2, #16]
 8001dfc:	2a00      	cmp	r2, #0
 8001dfe:	d102      	bne.n	8001e06 <ETH_SetMACConfig+0x4a>
 8001e00:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001e04:	e000      	b.n	8001e08 <ETH_SetMACConfig+0x4c>
 8001e06:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001e08:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	7c52      	ldrb	r2, [r2, #17]
 8001e0e:	2a00      	cmp	r2, #0
 8001e10:	d102      	bne.n	8001e18 <ETH_SetMACConfig+0x5c>
 8001e12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e16:	e000      	b.n	8001e1a <ETH_SetMACConfig+0x5e>
 8001e18:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001e1a:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	7c9b      	ldrb	r3, [r3, #18]
 8001e20:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001e22:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001e28:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001e2e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	7f1b      	ldrb	r3, [r3, #28]
 8001e34:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8001e36:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	7f5b      	ldrb	r3, [r3, #29]
 8001e3c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001e3e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	7f92      	ldrb	r2, [r2, #30]
 8001e44:	2a00      	cmp	r2, #0
 8001e46:	d102      	bne.n	8001e4e <ETH_SetMACConfig+0x92>
 8001e48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e4c:	e000      	b.n	8001e50 <ETH_SetMACConfig+0x94>
 8001e4e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001e50:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	7fdb      	ldrb	r3, [r3, #31]
 8001e56:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001e58:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001e60:	2a00      	cmp	r2, #0
 8001e62:	d102      	bne.n	8001e6a <ETH_SetMACConfig+0xae>
 8001e64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e68:	e000      	b.n	8001e6c <ETH_SetMACConfig+0xb0>
 8001e6a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001e6c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001e72:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001e7a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001e7c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8001e82:	4313      	orrs	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4b56      	ldr	r3, [pc, #344]	; (8001fe8 <ETH_SetMACConfig+0x22c>)
 8001e8e:	4013      	ands	r3, r2
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	68f9      	ldr	r1, [r7, #12]
 8001e96:	430b      	orrs	r3, r1
 8001e98:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e9e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ea6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001ea8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001eb0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001eb2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001eba:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001ebc:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001ec4:	2a00      	cmp	r2, #0
 8001ec6:	d102      	bne.n	8001ece <ETH_SetMACConfig+0x112>
 8001ec8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ecc:	e000      	b.n	8001ed0 <ETH_SetMACConfig+0x114>
 8001ece:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001ed0:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	4b42      	ldr	r3, [pc, #264]	; (8001fec <ETH_SetMACConfig+0x230>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	68f9      	ldr	r1, [r7, #12]
 8001eea:	430b      	orrs	r3, r1
 8001eec:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ef4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001efa:	4313      	orrs	r3, r2
 8001efc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68da      	ldr	r2, [r3, #12]
 8001f04:	4b3a      	ldr	r3, [pc, #232]	; (8001ff0 <ETH_SetMACConfig+0x234>)
 8001f06:	4013      	ands	r3, r2
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6812      	ldr	r2, [r2, #0]
 8001f0c:	68f9      	ldr	r1, [r7, #12]
 8001f0e:	430b      	orrs	r3, r1
 8001f10:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001f18:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001f1e:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001f26:	2a00      	cmp	r2, #0
 8001f28:	d101      	bne.n	8001f2e <ETH_SetMACConfig+0x172>
 8001f2a:	2280      	movs	r2, #128	; 0x80
 8001f2c:	e000      	b.n	8001f30 <ETH_SetMACConfig+0x174>
 8001f2e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001f30:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f36:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f42:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001f46:	4013      	ands	r3, r2
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	68f9      	ldr	r1, [r7, #12]
 8001f4e:	430b      	orrs	r3, r1
 8001f50:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001f58:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001f60:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001f62:	4313      	orrs	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6e:	f023 0103 	bic.w	r1, r3, #3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001f86:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001fa2:	2a00      	cmp	r2, #0
 8001fa4:	d101      	bne.n	8001faa <ETH_SetMACConfig+0x1ee>
 8001fa6:	2240      	movs	r2, #64	; 0x40
 8001fa8:	e000      	b.n	8001fac <ETH_SetMACConfig+0x1f0>
 8001faa:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001fac:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001fb4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001fb6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001fbe:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001fcc:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001fdc:	bf00      	nop
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	00048083 	.word	0x00048083
 8001fec:	c0f88000 	.word	0xc0f88000
 8001ff0:	fffffef0 	.word	0xfffffef0

08001ff4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	4b38      	ldr	r3, [pc, #224]	; (80020ec <ETH_SetDMAConfig+0xf8>)
 800200a:	4013      	ands	r3, r2
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	6812      	ldr	r2, [r2, #0]
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	6809      	ldr	r1, [r1, #0]
 8002014:	431a      	orrs	r2, r3
 8002016:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800201a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	791b      	ldrb	r3, [r3, #4]
 8002020:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002026:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	7b1b      	ldrb	r3, [r3, #12]
 800202c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800202e:	4313      	orrs	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	f241 0304 	movw	r3, #4100	; 0x1004
 800203a:	4413      	add	r3, r2
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	4b2c      	ldr	r3, [pc, #176]	; (80020f0 <ETH_SetDMAConfig+0xfc>)
 8002040:	4013      	ands	r3, r2
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6811      	ldr	r1, [r2, #0]
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	431a      	orrs	r2, r3
 800204a:	f241 0304 	movw	r3, #4100	; 0x1004
 800204e:	440b      	add	r3, r1
 8002050:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	7b5b      	ldrb	r3, [r3, #13]
 8002056:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800205c:	4313      	orrs	r3, r2
 800205e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	4b22      	ldr	r3, [pc, #136]	; (80020f4 <ETH_SetDMAConfig+0x100>)
 800206c:	4013      	ands	r3, r2
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6811      	ldr	r1, [r2, #0]
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	431a      	orrs	r2, r3
 8002076:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800207a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	7d1b      	ldrb	r3, [r3, #20]
 8002084:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002086:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	7f5b      	ldrb	r3, [r3, #29]
 800208c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800208e:	4313      	orrs	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	f241 1304 	movw	r3, #4356	; 0x1104
 800209a:	4413      	add	r3, r2
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <ETH_SetDMAConfig+0x104>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6811      	ldr	r1, [r2, #0]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	431a      	orrs	r2, r3
 80020aa:	f241 1304 	movw	r3, #4356	; 0x1104
 80020ae:	440b      	add	r3, r1
 80020b0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	7f1b      	ldrb	r3, [r3, #28]
 80020b6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80020bc:	4313      	orrs	r3, r2
 80020be:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	f241 1308 	movw	r3, #4360	; 0x1108
 80020c8:	4413      	add	r3, r2
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <ETH_SetDMAConfig+0x108>)
 80020ce:	4013      	ands	r3, r2
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6811      	ldr	r1, [r2, #0]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	431a      	orrs	r2, r3
 80020d8:	f241 1308 	movw	r3, #4360	; 0x1108
 80020dc:	440b      	add	r3, r1
 80020de:	601a      	str	r2, [r3, #0]
}
 80020e0:	bf00      	nop
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	ffff87fd 	.word	0xffff87fd
 80020f0:	ffff2ffe 	.word	0xffff2ffe
 80020f4:	fffec000 	.word	0xfffec000
 80020f8:	ffc0efef 	.word	0xffc0efef
 80020fc:	7fc0ffff 	.word	0x7fc0ffff

08002100 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b0a4      	sub	sp, #144	; 0x90
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002108:	2301      	movs	r3, #1
 800210a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800210e:	2300      	movs	r3, #0
 8002110:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002112:	2300      	movs	r3, #0
 8002114:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002118:	2300      	movs	r3, #0
 800211a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800211e:	2301      	movs	r3, #1
 8002120:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002124:	2301      	movs	r3, #1
 8002126:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800212a:	2301      	movs	r3, #1
 800212c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002130:	2300      	movs	r3, #0
 8002132:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002136:	2301      	movs	r3, #1
 8002138:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800213c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002140:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002142:	2300      	movs	r3, #0
 8002144:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002148:	2300      	movs	r3, #0
 800214a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800214c:	2300      	movs	r3, #0
 800214e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002152:	2300      	movs	r3, #0
 8002154:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002158:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800215c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800215e:	2300      	movs	r3, #0
 8002160:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002164:	2300      	movs	r3, #0
 8002166:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002168:	2301      	movs	r3, #1
 800216a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800216e:	2300      	movs	r3, #0
 8002170:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002174:	2300      	movs	r3, #0
 8002176:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800217a:	2300      	movs	r3, #0
 800217c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800217e:	2300      	movs	r3, #0
 8002180:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002182:	2300      	movs	r3, #0
 8002184:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002186:	2300      	movs	r3, #0
 8002188:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800218c:	2300      	movs	r3, #0
 800218e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002192:	2301      	movs	r3, #1
 8002194:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002198:	2320      	movs	r3, #32
 800219a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800219e:	2301      	movs	r3, #1
 80021a0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80021a4:	2300      	movs	r3, #0
 80021a6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80021aa:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80021ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80021b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021b4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80021b6:	2300      	movs	r3, #0
 80021b8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80021bc:	2302      	movs	r3, #2
 80021be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80021c8:	2300      	movs	r3, #0
 80021ca:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80021ce:	2300      	movs	r3, #0
 80021d0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80021d4:	2301      	movs	r3, #1
 80021d6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80021da:	2300      	movs	r3, #0
 80021dc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80021de:	2301      	movs	r3, #1
 80021e0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80021e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021e8:	4619      	mov	r1, r3
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff fde6 	bl	8001dbc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80021f0:	2301      	movs	r3, #1
 80021f2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80021f4:	2301      	movs	r3, #1
 80021f6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80021f8:	2300      	movs	r3, #0
 80021fa:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80021fc:	2300      	movs	r3, #0
 80021fe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002202:	2300      	movs	r3, #0
 8002204:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002206:	2300      	movs	r3, #0
 8002208:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800220a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800220e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002210:	2300      	movs	r3, #0
 8002212:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002214:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002218:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800221a:	2300      	movs	r3, #0
 800221c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002220:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002224:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002226:	f107 0308 	add.w	r3, r7, #8
 800222a:	4619      	mov	r1, r3
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff fee1 	bl	8001ff4 <ETH_SetDMAConfig>
}
 8002232:	bf00      	nop
 8002234:	3790      	adds	r7, #144	; 0x90
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800224c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002254:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002256:	f003 fdbf 	bl	8005dd8 <HAL_RCC_GetHCLKFreq>
 800225a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	4a1e      	ldr	r2, [pc, #120]	; (80022d8 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d908      	bls.n	8002276 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	4a1d      	ldr	r2, [pc, #116]	; (80022dc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d804      	bhi.n	8002276 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	e027      	b.n	80022c6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	4a18      	ldr	r2, [pc, #96]	; (80022dc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d908      	bls.n	8002290 <ETH_MAC_MDIO_ClkConfig+0x54>
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	4a17      	ldr	r2, [pc, #92]	; (80022e0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d804      	bhi.n	8002290 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	e01a      	b.n	80022c6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	4a13      	ldr	r2, [pc, #76]	; (80022e0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d903      	bls.n	80022a0 <ETH_MAC_MDIO_ClkConfig+0x64>
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	4a12      	ldr	r2, [pc, #72]	; (80022e4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d911      	bls.n	80022c4 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	4a10      	ldr	r2, [pc, #64]	; (80022e4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d908      	bls.n	80022ba <ETH_MAC_MDIO_ClkConfig+0x7e>
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	4a0f      	ldr	r2, [pc, #60]	; (80022e8 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d804      	bhi.n	80022ba <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	e005      	b.n	80022c6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	e000      	b.n	80022c6 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80022c4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80022d0:	bf00      	nop
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	01312cff 	.word	0x01312cff
 80022dc:	02160ebf 	.word	0x02160ebf
 80022e0:	039386ff 	.word	0x039386ff
 80022e4:	05f5e0ff 	.word	0x05f5e0ff
 80022e8:	08f0d17f 	.word	0x08f0d17f

080022ec <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80022f4:	2300      	movs	r3, #0
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	e01d      	b.n	8002336 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68d9      	ldr	r1, [r3, #12]
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	4613      	mov	r3, r2
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	4413      	add	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	440b      	add	r3, r1
 800230a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	2200      	movs	r2, #0
 8002316:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2200      	movs	r2, #0
 800231c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	2200      	movs	r2, #0
 8002322:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002324:	68b9      	ldr	r1, [r7, #8]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	3206      	adds	r2, #6
 800232c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	3301      	adds	r3, #1
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2b03      	cmp	r3, #3
 800233a:	d9de      	bls.n	80022fa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	f241 132c 	movw	r3, #4396	; 0x112c
 800234a:	4413      	add	r3, r2
 800234c:	2203      	movs	r2, #3
 800234e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68d9      	ldr	r1, [r3, #12]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	f241 1314 	movw	r3, #4372	; 0x1114
 800235c:	4413      	add	r3, r2
 800235e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68da      	ldr	r2, [r3, #12]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800236c:	601a      	str	r2, [r3, #0]
}
 800236e:	bf00      	nop
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800237a:	b480      	push	{r7}
 800237c:	b085      	sub	sp, #20
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002382:	2300      	movs	r3, #0
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	e024      	b.n	80023d2 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6919      	ldr	r1, [r3, #16]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	4613      	mov	r3, r2
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	4413      	add	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	440b      	add	r3, r1
 8002398:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2200      	movs	r2, #0
 80023a4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	2200      	movs	r2, #0
 80023aa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	2200      	movs	r2, #0
 80023b0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2200      	movs	r2, #0
 80023b6:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2200      	movs	r2, #0
 80023bc:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	330a      	adds	r3, #10
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	3301      	adds	r3, #1
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2b03      	cmp	r3, #3
 80023d6:	d9d7      	bls.n	8002388 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	f241 1330 	movw	r3, #4400	; 0x1130
 80023fe:	4413      	add	r3, r2
 8002400:	2203      	movs	r2, #3
 8002402:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6919      	ldr	r1, [r3, #16]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	f241 131c 	movw	r3, #4380	; 0x111c
 8002410:	4413      	add	r3, r2
 8002412:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	f241 1328 	movw	r3, #4392	; 0x1128
 8002424:	4413      	add	r3, r2
 8002426:	6019      	str	r1, [r3, #0]
}
 8002428:	bf00      	nop
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b098      	sub	sp, #96	; 0x60
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800243c:	4a84      	ldr	r2, [pc, #528]	; (8002650 <HAL_FDCAN_Init+0x21c>)
 800243e:	f107 030c 	add.w	r3, r7, #12
 8002442:	4611      	mov	r1, r2
 8002444:	224c      	movs	r2, #76	; 0x4c
 8002446:	4618      	mov	r0, r3
 8002448:	f014 fe04 	bl	8017054 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e1ca      	b.n	80027ec <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a7e      	ldr	r2, [pc, #504]	; (8002654 <HAL_FDCAN_Init+0x220>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d106      	bne.n	800246e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002468:	461a      	mov	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d106      	bne.n	8002488 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7fe ff54 	bl	8001330 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	699a      	ldr	r2, [r3, #24]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0210 	bic.w	r2, r2, #16
 8002496:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002498:	f7ff fa58 	bl	800194c <HAL_GetTick>
 800249c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800249e:	e014      	b.n	80024ca <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80024a0:	f7ff fa54 	bl	800194c <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b0a      	cmp	r3, #10
 80024ac:	d90d      	bls.n	80024ca <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80024b4:	f043 0201 	orr.w	r2, r3, #1
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2203      	movs	r2, #3
 80024c2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e190      	b.n	80027ec <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	f003 0308 	and.w	r3, r3, #8
 80024d4:	2b08      	cmp	r3, #8
 80024d6:	d0e3      	beq.n	80024a0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	699a      	ldr	r2, [r3, #24]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0201 	orr.w	r2, r2, #1
 80024e6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024e8:	f7ff fa30 	bl	800194c <HAL_GetTick>
 80024ec:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80024ee:	e014      	b.n	800251a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80024f0:	f7ff fa2c 	bl	800194c <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b0a      	cmp	r3, #10
 80024fc:	d90d      	bls.n	800251a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002504:	f043 0201 	orr.w	r2, r3, #1
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2203      	movs	r2, #3
 8002512:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e168      	b.n	80027ec <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0e3      	beq.n	80024f0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	699a      	ldr	r2, [r3, #24]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0202 	orr.w	r2, r2, #2
 8002536:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	7c1b      	ldrb	r3, [r3, #16]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d108      	bne.n	8002552 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	699a      	ldr	r2, [r3, #24]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800254e:	619a      	str	r2, [r3, #24]
 8002550:	e007      	b.n	8002562 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	699a      	ldr	r2, [r3, #24]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002560:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	7c5b      	ldrb	r3, [r3, #17]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d108      	bne.n	800257c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	699a      	ldr	r2, [r3, #24]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002578:	619a      	str	r2, [r3, #24]
 800257a:	e007      	b.n	800258c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	699a      	ldr	r2, [r3, #24]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800258a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	7c9b      	ldrb	r3, [r3, #18]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d108      	bne.n	80025a6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	699a      	ldr	r2, [r3, #24]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80025a2:	619a      	str	r2, [r3, #24]
 80025a4:	e007      	b.n	80025b6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	699a      	ldr	r2, [r3, #24]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80025b4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	699a      	ldr	r2, [r3, #24]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80025da:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	691a      	ldr	r2, [r3, #16]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0210 	bic.w	r2, r2, #16
 80025ea:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d108      	bne.n	8002606 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	699a      	ldr	r2, [r3, #24]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f042 0204 	orr.w	r2, r2, #4
 8002602:	619a      	str	r2, [r3, #24]
 8002604:	e030      	b.n	8002668 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d02c      	beq.n	8002668 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d020      	beq.n	8002658 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	699a      	ldr	r2, [r3, #24]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002624:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f042 0210 	orr.w	r2, r2, #16
 8002634:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	2b03      	cmp	r3, #3
 800263c:	d114      	bne.n	8002668 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	699a      	ldr	r2, [r3, #24]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f042 0220 	orr.w	r2, r2, #32
 800264c:	619a      	str	r2, [r3, #24]
 800264e:	e00b      	b.n	8002668 <HAL_FDCAN_Init+0x234>
 8002650:	08017240 	.word	0x08017240
 8002654:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	699a      	ldr	r2, [r3, #24]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0220 	orr.w	r2, r2, #32
 8002666:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	3b01      	subs	r3, #1
 800266e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	3b01      	subs	r3, #1
 8002676:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002678:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002680:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	3b01      	subs	r3, #1
 800268a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002690:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002692:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800269c:	d115      	bne.n	80026ca <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a8:	3b01      	subs	r3, #1
 80026aa:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80026ac:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	3b01      	subs	r3, #1
 80026b4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80026b6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	3b01      	subs	r3, #1
 80026c0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80026c6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80026c8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00a      	beq.n	80026e8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f0:	4413      	add	r3, r2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d012      	beq.n	800271c <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80026fe:	f023 0107 	bic.w	r1, r3, #7
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800270c:	4413      	add	r3, r2
 800270e:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	2b00      	cmp	r3, #0
 8002722:	d012      	beq.n	800274a <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800272c:	f023 0107 	bic.w	r1, r3, #7
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800273a:	4413      	add	r3, r2
 800273c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800274e:	2b00      	cmp	r3, #0
 8002750:	d013      	beq.n	800277a <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800275a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002768:	4413      	add	r3, r2
 800276a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800276e:	011a      	lsls	r2, r3, #4
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800277e:	2b00      	cmp	r3, #0
 8002780:	d013      	beq.n	80027aa <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800278a:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002798:	4413      	add	r3, r2
 800279a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800279e:	021a      	lsls	r2, r3, #8
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a11      	ldr	r2, [pc, #68]	; (80027f4 <HAL_FDCAN_Init+0x3c0>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d107      	bne.n	80027c4 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f022 0203 	bic.w	r2, r2, #3
 80027c2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 fd83 	bl	80032e8 <FDCAN_CalcultateRamBlockAddresses>
 80027e2:	4603      	mov	r3, r0
 80027e4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80027e8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3760      	adds	r7, #96	; 0x60
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	4000a000 	.word	0x4000a000

080027f8 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b01      	cmp	r3, #1
 8002810:	d110      	bne.n	8002834 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800281a:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8002820:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800282c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8002830:	2300      	movs	r3, #0
 8002832:	e008      	b.n	8002846 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800283a:	f043 0204 	orr.w	r2, r3, #4
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
  }
}
 8002846:	4618      	mov	r0, r3
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b01      	cmp	r3, #1
 8002864:	d111      	bne.n	800288a <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2202      	movs	r2, #2
 800286a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	699a      	ldr	r2, [r3, #24]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 0201 	bic.w	r2, r2, #1
 800287c:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	e008      	b.n	800289c <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002890:	f043 0204 	orr.w	r2, r3, #4
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
  }
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d141      	bne.n	8002944 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80028c8:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d109      	bne.n	80028e4 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028d6:	f043 0220 	orr.w	r2, r3, #32
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e038      	b.n	8002956 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80028ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d009      	beq.n	8002908 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e026      	b.n	8002956 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002910:	0c1b      	lsrs	r3, r3, #16
 8002912:	f003 031f 	and.w	r3, r3, #31
 8002916:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	68b9      	ldr	r1, [r7, #8]
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 fe68 	bl	80035f4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2101      	movs	r1, #1
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	fa01 f202 	lsl.w	r2, r1, r2
 8002930:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002934:	2201      	movs	r2, #1
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	409a      	lsls	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8002940:	2300      	movs	r3, #0
 8002942:	e008      	b.n	8002956 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800294a:	f043 0208 	orr.w	r2, r3, #8
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
  }
}
 8002956:	4618      	mov	r0, r3
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8002960:	b480      	push	{r7}
 8002962:	b08b      	sub	sp, #44	; 0x2c
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
 800296c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002978:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800297a:	7efb      	ldrb	r3, [r7, #27]
 800297c:	2b02      	cmp	r3, #2
 800297e:	f040 811d 	bne.w	8002bbc <HAL_FDCAN_GetRxMessage+0x25c>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2b40      	cmp	r3, #64	; 0x40
 8002986:	d136      	bne.n	80029f6 <HAL_FDCAN_GetRxMessage+0x96>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002990:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d109      	bne.n	80029ac <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800299e:	f043 0220 	orr.w	r2, r3, #32
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e110      	b.n	8002bce <HAL_FDCAN_GetRxMessage+0x26e>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80029b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d109      	bne.n	80029d0 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e0fe      	b.n	8002bce <HAL_FDCAN_GetRxMessage+0x26e>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80029d8:	0a1b      	lsrs	r3, r3, #8
 80029da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029de:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e8:	69f9      	ldr	r1, [r7, #28]
 80029ea:	fb01 f303 	mul.w	r3, r1, r3
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	627b      	str	r3, [r7, #36]	; 0x24
 80029f4:	e052      	b.n	8002a9c <HAL_FDCAN_GetRxMessage+0x13c>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2b41      	cmp	r3, #65	; 0x41
 80029fa:	d136      	bne.n	8002a6a <HAL_FDCAN_GetRxMessage+0x10a>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a04:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d109      	bne.n	8002a20 <HAL_FDCAN_GetRxMessage+0xc0>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a12:	f043 0220 	orr.w	r2, r3, #32
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e0d6      	b.n	8002bce <HAL_FDCAN_GetRxMessage+0x26e>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002a28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d109      	bne.n	8002a44 <HAL_FDCAN_GetRxMessage+0xe4>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e0c4      	b.n	8002bce <HAL_FDCAN_GetRxMessage+0x26e>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002a4c:	0a1b      	lsrs	r3, r3, #8
 8002a4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a52:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a5c:	69f9      	ldr	r1, [r7, #28]
 8002a5e:	fb01 f303 	mul.w	r3, r1, r3
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	627b      	str	r3, [r7, #36]	; 0x24
 8002a68:	e018      	b.n	8002a9c <HAL_FDCAN_GetRxMessage+0x13c>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d309      	bcc.n	8002a88 <HAL_FDCAN_GetRxMessage+0x128>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a7a:	f043 0220 	orr.w	r2, r3, #32
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e0a2      	b.n	8002bce <HAL_FDCAN_GetRxMessage+0x26e>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a90:	68b9      	ldr	r1, [r7, #8]
 8002a92:	fb01 f303 	mul.w	r3, r1, r3
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d107      	bne.n	8002ac0 <HAL_FDCAN_GetRxMessage+0x160>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	0c9b      	lsrs	r3, r3, #18
 8002ab6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	e005      	b.n	8002acc <HAL_FDCAN_GetRxMessage+0x16c>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	3304      	adds	r3, #4
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8002b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	0e1b      	lsrs	r3, r3, #24
 8002b1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	0fda      	lsrs	r2, r3, #31
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	3304      	adds	r3, #4
 8002b34:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	623b      	str	r3, [r7, #32]
 8002b3e:	e00a      	b.n	8002b56 <HAL_FDCAN_GetRxMessage+0x1f6>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	6a3b      	ldr	r3, [r7, #32]
 8002b44:	441a      	add	r2, r3
 8002b46:	6839      	ldr	r1, [r7, #0]
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	440b      	add	r3, r1
 8002b4c:	7812      	ldrb	r2, [r2, #0]
 8002b4e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	3301      	adds	r3, #1
 8002b54:	623b      	str	r3, [r7, #32]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	0c1b      	lsrs	r3, r3, #16
 8002b5c:	4a1f      	ldr	r2, [pc, #124]	; (8002bdc <HAL_FDCAN_GetRxMessage+0x27c>)
 8002b5e:	5cd3      	ldrb	r3, [r2, r3]
 8002b60:	461a      	mov	r2, r3
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d3eb      	bcc.n	8002b40 <HAL_FDCAN_GetRxMessage+0x1e0>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2b40      	cmp	r3, #64	; 0x40
 8002b6c:	d105      	bne.n	8002b7a <HAL_FDCAN_GetRxMessage+0x21a>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	69fa      	ldr	r2, [r7, #28]
 8002b74:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8002b78:	e01e      	b.n	8002bb8 <HAL_FDCAN_GetRxMessage+0x258>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2b41      	cmp	r3, #65	; 0x41
 8002b7e:	d105      	bne.n	8002b8c <HAL_FDCAN_GetRxMessage+0x22c>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	69fa      	ldr	r2, [r7, #28]
 8002b86:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8002b8a:	e015      	b.n	8002bb8 <HAL_FDCAN_GetRxMessage+0x258>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2b1f      	cmp	r3, #31
 8002b90:	d808      	bhi.n	8002ba4 <HAL_FDCAN_GetRxMessage+0x244>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2101      	movs	r1, #1
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b9e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8002ba2:	e009      	b.n	8002bb8 <HAL_FDCAN_GetRxMessage+0x258>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f003 021f 	and.w	r2, r3, #31
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2101      	movs	r1, #1
 8002bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	e008      	b.n	8002bce <HAL_FDCAN_GetRxMessage+0x26e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bc2:	f043 0208 	orr.w	r2, r3, #8
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
  }
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	372c      	adds	r7, #44	; 0x2c
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	08017344 	.word	0x08017344

08002be0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b087      	sub	sp, #28
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002bf2:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002bf4:	7dfb      	ldrb	r3, [r7, #23]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d002      	beq.n	8002c00 <HAL_FDCAN_ActivateNotification+0x20>
 8002bfa:	7dfb      	ldrb	r3, [r7, #23]
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d155      	bne.n	8002cac <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d108      	bne.n	8002c20 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f042 0201 	orr.w	r2, r2, #1
 8002c1c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c1e:	e014      	b.n	8002c4a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d108      	bne.n	8002c42 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0202 	orr.w	r2, r2, #2
 8002c3e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c40:	e003      	b.n	8002c4a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2203      	movs	r2, #3
 8002c48:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d009      	beq.n	8002c68 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d009      	beq.n	8002c86 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	4b0f      	ldr	r3, [pc, #60]	; (8002ccc <HAL_FDCAN_ActivateNotification+0xec>)
 8002c90:	4013      	ands	r3, r2
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	6812      	ldr	r2, [r2, #0]
 8002c96:	430b      	orrs	r3, r1
 8002c98:	6553      	str	r3, [r2, #84]	; 0x54
 8002c9a:	4b0d      	ldr	r3, [pc, #52]	; (8002cd0 <HAL_FDCAN_ActivateNotification+0xf0>)
 8002c9c:	695a      	ldr	r2, [r3, #20]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	0f9b      	lsrs	r3, r3, #30
 8002ca2:	490b      	ldr	r1, [pc, #44]	; (8002cd0 <HAL_FDCAN_ActivateNotification+0xf0>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	e008      	b.n	8002cbe <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cb2:	f043 0202 	orr.w	r2, r3, #2
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
  }
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	371c      	adds	r7, #28
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	3fcfffff 	.word	0x3fcfffff
 8002cd0:	4000a800 	.word	0x4000a800

08002cd4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b092      	sub	sp, #72	; 0x48
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8002cdc:	4b90      	ldr	r3, [pc, #576]	; (8002f20 <HAL_FDCAN_IRQHandler+0x24c>)
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	079b      	lsls	r3, r3, #30
 8002ce2:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8002ce4:	4b8e      	ldr	r3, [pc, #568]	; (8002f20 <HAL_FDCAN_IRQHandler+0x24c>)
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	079b      	lsls	r3, r3, #30
 8002cea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cec:	4013      	ands	r3, r2
 8002cee:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cf6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002cfa:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d04:	4013      	ands	r3, r2
 8002d06:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d2a:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d34:	4013      	ands	r3, r2
 8002d36:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d3e:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8002d42:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d56:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8002d5a:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d64:	4013      	ands	r3, r2
 8002d66:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d011      	beq.n	8002d9a <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00a      	beq.n	8002d9a <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d8c:	651a      	str	r2, [r3, #80]	; 0x50
 8002d8e:	4b64      	ldr	r3, [pc, #400]	; (8002f20 <HAL_FDCAN_IRQHandler+0x24c>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 fa5a 	bl	800324e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d01e      	beq.n	8002de6 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d017      	beq.n	8002de6 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002dc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dca:	4013      	ands	r3, r2
 8002dcc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dd6:	651a      	str	r2, [r3, #80]	; 0x50
 8002dd8:	4b51      	ldr	r3, [pc, #324]	; (8002f20 <HAL_FDCAN_IRQHandler+0x24c>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002dde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 fa0b 	bl	80031fc <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8002de6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00d      	beq.n	8002e08 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002df2:	4b4c      	ldr	r3, [pc, #304]	; (8002f24 <HAL_FDCAN_IRQHandler+0x250>)
 8002df4:	400b      	ands	r3, r1
 8002df6:	6513      	str	r3, [r2, #80]	; 0x50
 8002df8:	4a49      	ldr	r2, [pc, #292]	; (8002f20 <HAL_FDCAN_IRQHandler+0x24c>)
 8002dfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dfc:	0f9b      	lsrs	r3, r3, #30
 8002dfe:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8002e00:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f9c4 	bl	8003190 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002e08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00d      	beq.n	8002e2a <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e14:	4b43      	ldr	r3, [pc, #268]	; (8002f24 <HAL_FDCAN_IRQHandler+0x250>)
 8002e16:	400b      	ands	r3, r1
 8002e18:	6513      	str	r3, [r2, #80]	; 0x50
 8002e1a:	4a41      	ldr	r2, [pc, #260]	; (8002f20 <HAL_FDCAN_IRQHandler+0x24c>)
 8002e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e1e:	0f9b      	lsrs	r3, r3, #30
 8002e20:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002e22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 f9be 	bl	80031a6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00d      	beq.n	8002e4c <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002e36:	4b3b      	ldr	r3, [pc, #236]	; (8002f24 <HAL_FDCAN_IRQHandler+0x250>)
 8002e38:	400b      	ands	r3, r1
 8002e3a:	6513      	str	r3, [r2, #80]	; 0x50
 8002e3c:	4a38      	ldr	r2, [pc, #224]	; (8002f20 <HAL_FDCAN_IRQHandler+0x24c>)
 8002e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e40:	0f9b      	lsrs	r3, r3, #30
 8002e42:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002e44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7fd fff2 	bl	8000e30 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00d      	beq.n	8002e6e <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e58:	4b32      	ldr	r3, [pc, #200]	; (8002f24 <HAL_FDCAN_IRQHandler+0x250>)
 8002e5a:	400b      	ands	r3, r1
 8002e5c:	6513      	str	r3, [r2, #80]	; 0x50
 8002e5e:	4a30      	ldr	r2, [pc, #192]	; (8002f20 <HAL_FDCAN_IRQHandler+0x24c>)
 8002e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e62:	0f9b      	lsrs	r3, r3, #30
 8002e64:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002e66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f9a7 	bl	80031bc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d011      	beq.n	8002ea0 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00a      	beq.n	8002ea0 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e92:	651a      	str	r2, [r3, #80]	; 0x50
 8002e94:	4b22      	ldr	r3, [pc, #136]	; (8002f20 <HAL_FDCAN_IRQHandler+0x24c>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f999 	bl	80031d2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d01e      	beq.n	8002eec <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d017      	beq.n	8002eec <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002ec4:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ece:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002edc:	651a      	str	r2, [r3, #80]	; 0x50
 8002ede:	4b10      	ldr	r3, [pc, #64]	; (8002f20 <HAL_FDCAN_IRQHandler+0x24c>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002ee4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f97d 	bl	80031e6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d016      	beq.n	8002f28 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00f      	beq.n	8002f28 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002f10:	651a      	str	r2, [r3, #80]	; 0x50
 8002f12:	4b03      	ldr	r3, [pc, #12]	; (8002f20 <HAL_FDCAN_IRQHandler+0x24c>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f97a 	bl	8003212 <HAL_FDCAN_RxBufferNewMessageCallback>
 8002f1e:	e003      	b.n	8002f28 <HAL_FDCAN_IRQHandler+0x254>
 8002f20:	4000a800 	.word	0x4000a800
 8002f24:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d011      	beq.n	8002f5a <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00a      	beq.n	8002f5a <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f4c:	651a      	str	r2, [r3, #80]	; 0x50
 8002f4e:	4b8d      	ldr	r3, [pc, #564]	; (8003184 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 f966 	bl	8003226 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d011      	beq.n	8002f8c <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00a      	beq.n	8002f8c <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002f7e:	651a      	str	r2, [r3, #80]	; 0x50
 8002f80:	4b80      	ldr	r3, [pc, #512]	; (8003184 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f957 	bl	800323a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d016      	beq.n	8002fc8 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00f      	beq.n	8002fc8 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fb0:	651a      	str	r2, [r3, #80]	; 0x50
 8002fb2:	4b74      	ldr	r3, [pc, #464]	; (8003184 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fbe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00d      	beq.n	8002fea <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fd4:	4b6c      	ldr	r3, [pc, #432]	; (8003188 <HAL_FDCAN_IRQHandler+0x4b4>)
 8002fd6:	400b      	ands	r3, r1
 8002fd8:	6513      	str	r3, [r2, #80]	; 0x50
 8002fda:	4a6a      	ldr	r2, [pc, #424]	; (8003184 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fde:	0f9b      	lsrs	r3, r3, #30
 8002fe0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002fe2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 f946 	bl	8003276 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d011      	beq.n	8003014 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002ff6:	4b64      	ldr	r3, [pc, #400]	; (8003188 <HAL_FDCAN_IRQHandler+0x4b4>)
 8002ff8:	400b      	ands	r3, r1
 8002ffa:	6513      	str	r3, [r2, #80]	; 0x50
 8002ffc:	4a61      	ldr	r2, [pc, #388]	; (8003184 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003000:	0f9b      	lsrs	r3, r3, #30
 8003002:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800300a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300c:	431a      	orrs	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a5c      	ldr	r2, [pc, #368]	; (800318c <HAL_FDCAN_IRQHandler+0x4b8>)
 800301a:	4293      	cmp	r3, r2
 800301c:	f040 80a6 	bne.w	800316c <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 809e 	beq.w	800316c <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003044:	4013      	ands	r3, r2
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003052:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305a:	6a3a      	ldr	r2, [r7, #32]
 800305c:	4013      	ands	r3, r2
 800305e:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800306a:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	69fa      	ldr	r2, [r7, #28]
 8003074:	4013      	ands	r3, r2
 8003076:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8003082:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4013      	ands	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 800309a:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	4013      	ands	r3, r2
 80030a6:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d007      	beq.n	80030be <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80030b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f8e7 	bl	800328c <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d007      	beq.n	80030d4 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	6a3a      	ldr	r2, [r7, #32]
 80030ca:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80030cc:	6a39      	ldr	r1, [r7, #32]
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f8e7 	bl	80032a2 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d01b      	beq.n	800311a <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d014      	beq.n	800311a <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f6:	0c1b      	lsrs	r3, r3, #16
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003102:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003106:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2240      	movs	r2, #64	; 0x40
 800310e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	6939      	ldr	r1, [r7, #16]
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f8cf 	bl	80032b8 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d007      	beq.n	8003130 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	69fa      	ldr	r2, [r7, #28]
 8003126:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8003128:	69f9      	ldr	r1, [r7, #28]
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f8d0 	bl	80032d0 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00b      	beq.n	800314e <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00b      	beq.n	800316c <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003172:	2b00      	cmp	r3, #0
 8003174:	d002      	beq.n	800317c <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f873 	bl	8003262 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800317c:	bf00      	nop
 800317e:	3748      	adds	r7, #72	; 0x48
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	4000a800 	.word	0x4000a800
 8003188:	3fcfffff 	.word	0x3fcfffff
 800318c:	4000a000 	.word	0x4000a000

08003190 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
 80031ae:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr

080031d2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80031da:	bf00      	nop
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
 80031ee:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
 800327e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
 80032aa:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80032c4:	bf00      	nop
 80032c6:	3714      	adds	r7, #20
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
	...

080032e8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80032fe:	4ba7      	ldr	r3, [pc, #668]	; (800359c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003300:	4013      	ands	r3, r2
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	0091      	lsls	r1, r2, #2
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6812      	ldr	r2, [r2, #0]
 800330a:	430b      	orrs	r3, r1
 800330c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003318:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003320:	041a      	lsls	r2, r3, #16
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	4413      	add	r3, r2
 8003334:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800333e:	4b97      	ldr	r3, [pc, #604]	; (800359c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003340:	4013      	ands	r3, r2
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	0091      	lsls	r1, r2, #2
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6812      	ldr	r2, [r2, #0]
 800334a:	430b      	orrs	r3, r1
 800334c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003358:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003360:	041a      	lsls	r2, r3, #16
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	4413      	add	r3, r2
 8003376:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003380:	4b86      	ldr	r3, [pc, #536]	; (800359c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003382:	4013      	ands	r3, r2
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	0091      	lsls	r1, r2, #2
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6812      	ldr	r2, [r2, #0]
 800338c:	430b      	orrs	r3, r1
 800338e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800339a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	041a      	lsls	r2, r3, #16
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80033b6:	fb02 f303 	mul.w	r3, r2, r3
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	4413      	add	r3, r2
 80033be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80033c8:	4b74      	ldr	r3, [pc, #464]	; (800359c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80033ca:	4013      	ands	r3, r2
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	0091      	lsls	r1, r2, #2
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	6812      	ldr	r2, [r2, #0]
 80033d4:	430b      	orrs	r3, r1
 80033d6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80033e2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ea:	041a      	lsls	r2, r3, #16
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80033fe:	fb02 f303 	mul.w	r3, r2, r3
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	4413      	add	r3, r2
 8003406:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003410:	4b62      	ldr	r3, [pc, #392]	; (800359c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003412:	4013      	ands	r3, r2
 8003414:	68ba      	ldr	r2, [r7, #8]
 8003416:	0091      	lsls	r1, r2, #2
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6812      	ldr	r2, [r2, #0]
 800341c:	430b      	orrs	r3, r1
 800341e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800342a:	fb02 f303 	mul.w	r3, r2, r3
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	4413      	add	r3, r2
 8003432:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800343c:	4b57      	ldr	r3, [pc, #348]	; (800359c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800343e:	4013      	ands	r3, r2
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	0091      	lsls	r1, r2, #2
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6812      	ldr	r2, [r2, #0]
 8003448:	430b      	orrs	r3, r1
 800344a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003456:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345e:	041a      	lsls	r2, r3, #16
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	430a      	orrs	r2, r1
 8003466:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	4413      	add	r3, r2
 8003474:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800347e:	4b47      	ldr	r3, [pc, #284]	; (800359c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003480:	4013      	ands	r3, r2
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	0091      	lsls	r1, r2, #2
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6812      	ldr	r2, [r2, #0]
 800348a:	430b      	orrs	r3, r1
 800348c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003498:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a0:	041a      	lsls	r2, r3, #16
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80034b4:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034bc:	061a      	lsls	r2, r3, #24
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034cc:	4b34      	ldr	r3, [pc, #208]	; (80035a0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80034ce:	4413      	add	r3, r2
 80034d0:	009a      	lsls	r2, r3, #2
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	441a      	add	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	441a      	add	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003502:	fb01 f303 	mul.w	r3, r1, r3
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	441a      	add	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800351a:	fb01 f303 	mul.w	r3, r1, r3
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	441a      	add	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003532:	fb01 f303 	mul.w	r3, r1, r3
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	441a      	add	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	441a      	add	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003562:	fb01 f303 	mul.w	r3, r1, r3
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	441a      	add	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800357e:	fb01 f303 	mul.w	r3, r1, r3
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	441a      	add	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003592:	4a04      	ldr	r2, [pc, #16]	; (80035a4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d915      	bls.n	80035c4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003598:	e006      	b.n	80035a8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800359a:	bf00      	nop
 800359c:	ffff0003 	.word	0xffff0003
 80035a0:	10002b00 	.word	0x10002b00
 80035a4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035ae:	f043 0220 	orr.w	r2, r3, #32
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2203      	movs	r2, #3
 80035bc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e010      	b.n	80035e6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035c8:	60fb      	str	r3, [r7, #12]
 80035ca:	e005      	b.n	80035d8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	3304      	adds	r3, #4
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d3f3      	bcc.n	80035cc <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop

080035f4 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b089      	sub	sp, #36	; 0x24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10a      	bne.n	8003620 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003612:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800361a:	4313      	orrs	r3, r2
 800361c:	61fb      	str	r3, [r7, #28]
 800361e:	e00a      	b.n	8003636 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003628:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800362e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003630:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003634:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8003640:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003646:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800364c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8003652:	4313      	orrs	r3, r2
 8003654:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003660:	6839      	ldr	r1, [r7, #0]
 8003662:	fb01 f303 	mul.w	r3, r1, r3
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	69fa      	ldr	r2, [r7, #28]
 8003670:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	3304      	adds	r3, #4
 8003676:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	3304      	adds	r3, #4
 8003682:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8003684:	2300      	movs	r3, #0
 8003686:	617b      	str	r3, [r7, #20]
 8003688:	e020      	b.n	80036cc <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	3303      	adds	r3, #3
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	4413      	add	r3, r2
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	3302      	adds	r3, #2
 800369a:	6879      	ldr	r1, [r7, #4]
 800369c:	440b      	add	r3, r1
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80036a2:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	3301      	adds	r3, #1
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	440b      	add	r3, r1
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80036b0:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	440a      	add	r2, r1
 80036b8:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80036ba:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	3304      	adds	r3, #4
 80036c4:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	3304      	adds	r3, #4
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	0c1b      	lsrs	r3, r3, #16
 80036d2:	4a06      	ldr	r2, [pc, #24]	; (80036ec <FDCAN_CopyMessageToRAM+0xf8>)
 80036d4:	5cd3      	ldrb	r3, [r2, r3]
 80036d6:	461a      	mov	r2, r3
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	4293      	cmp	r3, r2
 80036dc:	d3d5      	bcc.n	800368a <FDCAN_CopyMessageToRAM+0x96>
  }
}
 80036de:	bf00      	nop
 80036e0:	3724      	adds	r7, #36	; 0x24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	08017344 	.word	0x08017344

080036f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b089      	sub	sp, #36	; 0x24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80036fe:	4b89      	ldr	r3, [pc, #548]	; (8003924 <HAL_GPIO_Init+0x234>)
 8003700:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003702:	e194      	b.n	8003a2e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	2101      	movs	r1, #1
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	fa01 f303 	lsl.w	r3, r1, r3
 8003710:	4013      	ands	r3, r2
 8003712:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 8186 	beq.w	8003a28 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d00b      	beq.n	800373c <HAL_GPIO_Init+0x4c>
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	2b02      	cmp	r3, #2
 800372a:	d007      	beq.n	800373c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003730:	2b11      	cmp	r3, #17
 8003732:	d003      	beq.n	800373c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2b12      	cmp	r3, #18
 800373a:	d130      	bne.n	800379e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	2203      	movs	r2, #3
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	43db      	mvns	r3, r3
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	4013      	ands	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	68da      	ldr	r2, [r3, #12]
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	4313      	orrs	r3, r2
 8003764:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003772:	2201      	movs	r2, #1
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	43db      	mvns	r3, r3
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	4013      	ands	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	091b      	lsrs	r3, r3, #4
 8003788:	f003 0201 	and.w	r2, r3, #1
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4313      	orrs	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	2203      	movs	r2, #3
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	43db      	mvns	r3, r3
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	4013      	ands	r3, r2
 80037b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	fa02 f303 	lsl.w	r3, r2, r3
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d003      	beq.n	80037de <HAL_GPIO_Init+0xee>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2b12      	cmp	r3, #18
 80037dc:	d123      	bne.n	8003826 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	08da      	lsrs	r2, r3, #3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	3208      	adds	r2, #8
 80037e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	220f      	movs	r2, #15
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	43db      	mvns	r3, r3
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	4013      	ands	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	691a      	ldr	r2, [r3, #16]
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4313      	orrs	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	08da      	lsrs	r2, r3, #3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	3208      	adds	r2, #8
 8003820:	69b9      	ldr	r1, [r7, #24]
 8003822:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	2203      	movs	r2, #3
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	43db      	mvns	r3, r3
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	4013      	ands	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f003 0203 	and.w	r2, r3, #3
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	4313      	orrs	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 80e0 	beq.w	8003a28 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003868:	4b2f      	ldr	r3, [pc, #188]	; (8003928 <HAL_GPIO_Init+0x238>)
 800386a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800386e:	4a2e      	ldr	r2, [pc, #184]	; (8003928 <HAL_GPIO_Init+0x238>)
 8003870:	f043 0302 	orr.w	r3, r3, #2
 8003874:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003878:	4b2b      	ldr	r3, [pc, #172]	; (8003928 <HAL_GPIO_Init+0x238>)
 800387a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	60fb      	str	r3, [r7, #12]
 8003884:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003886:	4a29      	ldr	r2, [pc, #164]	; (800392c <HAL_GPIO_Init+0x23c>)
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	089b      	lsrs	r3, r3, #2
 800388c:	3302      	adds	r3, #2
 800388e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003892:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	220f      	movs	r2, #15
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	43db      	mvns	r3, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4013      	ands	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a20      	ldr	r2, [pc, #128]	; (8003930 <HAL_GPIO_Init+0x240>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d052      	beq.n	8003958 <HAL_GPIO_Init+0x268>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a1f      	ldr	r2, [pc, #124]	; (8003934 <HAL_GPIO_Init+0x244>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d031      	beq.n	800391e <HAL_GPIO_Init+0x22e>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a1e      	ldr	r2, [pc, #120]	; (8003938 <HAL_GPIO_Init+0x248>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d02b      	beq.n	800391a <HAL_GPIO_Init+0x22a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a1d      	ldr	r2, [pc, #116]	; (800393c <HAL_GPIO_Init+0x24c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d025      	beq.n	8003916 <HAL_GPIO_Init+0x226>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a1c      	ldr	r2, [pc, #112]	; (8003940 <HAL_GPIO_Init+0x250>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d01f      	beq.n	8003912 <HAL_GPIO_Init+0x222>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a1b      	ldr	r2, [pc, #108]	; (8003944 <HAL_GPIO_Init+0x254>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d019      	beq.n	800390e <HAL_GPIO_Init+0x21e>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a1a      	ldr	r2, [pc, #104]	; (8003948 <HAL_GPIO_Init+0x258>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d013      	beq.n	800390a <HAL_GPIO_Init+0x21a>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a19      	ldr	r2, [pc, #100]	; (800394c <HAL_GPIO_Init+0x25c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00d      	beq.n	8003906 <HAL_GPIO_Init+0x216>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a18      	ldr	r2, [pc, #96]	; (8003950 <HAL_GPIO_Init+0x260>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d007      	beq.n	8003902 <HAL_GPIO_Init+0x212>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a17      	ldr	r2, [pc, #92]	; (8003954 <HAL_GPIO_Init+0x264>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d101      	bne.n	80038fe <HAL_GPIO_Init+0x20e>
 80038fa:	2309      	movs	r3, #9
 80038fc:	e02d      	b.n	800395a <HAL_GPIO_Init+0x26a>
 80038fe:	230a      	movs	r3, #10
 8003900:	e02b      	b.n	800395a <HAL_GPIO_Init+0x26a>
 8003902:	2308      	movs	r3, #8
 8003904:	e029      	b.n	800395a <HAL_GPIO_Init+0x26a>
 8003906:	2307      	movs	r3, #7
 8003908:	e027      	b.n	800395a <HAL_GPIO_Init+0x26a>
 800390a:	2306      	movs	r3, #6
 800390c:	e025      	b.n	800395a <HAL_GPIO_Init+0x26a>
 800390e:	2305      	movs	r3, #5
 8003910:	e023      	b.n	800395a <HAL_GPIO_Init+0x26a>
 8003912:	2304      	movs	r3, #4
 8003914:	e021      	b.n	800395a <HAL_GPIO_Init+0x26a>
 8003916:	2303      	movs	r3, #3
 8003918:	e01f      	b.n	800395a <HAL_GPIO_Init+0x26a>
 800391a:	2302      	movs	r3, #2
 800391c:	e01d      	b.n	800395a <HAL_GPIO_Init+0x26a>
 800391e:	2301      	movs	r3, #1
 8003920:	e01b      	b.n	800395a <HAL_GPIO_Init+0x26a>
 8003922:	bf00      	nop
 8003924:	58000080 	.word	0x58000080
 8003928:	58024400 	.word	0x58024400
 800392c:	58000400 	.word	0x58000400
 8003930:	58020000 	.word	0x58020000
 8003934:	58020400 	.word	0x58020400
 8003938:	58020800 	.word	0x58020800
 800393c:	58020c00 	.word	0x58020c00
 8003940:	58021000 	.word	0x58021000
 8003944:	58021400 	.word	0x58021400
 8003948:	58021800 	.word	0x58021800
 800394c:	58021c00 	.word	0x58021c00
 8003950:	58022000 	.word	0x58022000
 8003954:	58022400 	.word	0x58022400
 8003958:	2300      	movs	r3, #0
 800395a:	69fa      	ldr	r2, [r7, #28]
 800395c:	f002 0203 	and.w	r2, r2, #3
 8003960:	0092      	lsls	r2, r2, #2
 8003962:	4093      	lsls	r3, r2
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	4313      	orrs	r3, r2
 8003968:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800396a:	4938      	ldr	r1, [pc, #224]	; (8003a4c <HAL_GPIO_Init+0x35c>)
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	089b      	lsrs	r3, r3, #2
 8003970:	3302      	adds	r3, #2
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	43db      	mvns	r3, r3
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	4013      	ands	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d003      	beq.n	800399c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	43db      	mvns	r3, r3
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	4013      	ands	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	43db      	mvns	r3, r3
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	4013      	ands	r3, r2
 80039dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80039f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80039fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	43db      	mvns	r3, r3
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003a20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	fa22 f303 	lsr.w	r3, r2, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f47f ae63 	bne.w	8003704 <HAL_GPIO_Init+0x14>
  }
}
 8003a3e:	bf00      	nop
 8003a40:	3724      	adds	r7, #36	; 0x24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	58000400 	.word	0x58000400

08003a50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	691a      	ldr	r2, [r3, #16]
 8003a60:	887b      	ldrh	r3, [r7, #2]
 8003a62:	4013      	ands	r3, r2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	73fb      	strb	r3, [r7, #15]
 8003a6c:	e001      	b.n	8003a72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	807b      	strh	r3, [r7, #2]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a90:	787b      	ldrb	r3, [r7, #1]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a96:	887a      	ldrh	r2, [r7, #2]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003a9c:	e003      	b.n	8003aa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003a9e:	887b      	ldrh	r3, [r7, #2]
 8003aa0:	041a      	lsls	r2, r3, #16
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	619a      	str	r2, [r3, #24]
}
 8003aa6:	bf00      	nop
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b083      	sub	sp, #12
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
 8003aba:	460b      	mov	r3, r1
 8003abc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	695a      	ldr	r2, [r3, #20]
 8003ac2:	887b      	ldrh	r3, [r7, #2]
 8003ac4:	401a      	ands	r2, r3
 8003ac6:	887b      	ldrh	r3, [r7, #2]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d104      	bne.n	8003ad6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003acc:	887b      	ldrh	r3, [r7, #2]
 8003ace:	041a      	lsls	r2, r3, #16
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003ad4:	e002      	b.n	8003adc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003ad6:	887a      	ldrh	r2, [r7, #2]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	619a      	str	r2, [r3, #24]
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	4603      	mov	r3, r0
 8003af0:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003af6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003afa:	88fb      	ldrh	r3, [r7, #6]
 8003afc:	4013      	ands	r3, r2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d008      	beq.n	8003b14 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b06:	88fb      	ldrh	r3, [r7, #6]
 8003b08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b0c:	88fb      	ldrh	r3, [r7, #6]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 f804 	bl	8003b1c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003b14:	bf00      	nop
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4603      	mov	r3, r0
 8003b24:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b34:	b08f      	sub	sp, #60	; 0x3c
 8003b36:	af0a      	add	r7, sp, #40	; 0x28
 8003b38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e116      	b.n	8003d72 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d106      	bne.n	8003b64 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f012 ff1c 	bl	801699c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2203      	movs	r2, #3
 8003b68:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d102      	bne.n	8003b7e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f009 fca3 	bl	800d4ce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	603b      	str	r3, [r7, #0]
 8003b8e:	687e      	ldr	r6, [r7, #4]
 8003b90:	466d      	mov	r5, sp
 8003b92:	f106 0410 	add.w	r4, r6, #16
 8003b96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ba2:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ba6:	1d33      	adds	r3, r6, #4
 8003ba8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003baa:	6838      	ldr	r0, [r7, #0]
 8003bac:	f009 fb7a 	bl	800d2a4 <USB_CoreInit>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d005      	beq.n	8003bc2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2202      	movs	r2, #2
 8003bba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e0d7      	b.n	8003d72 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f009 fc91 	bl	800d4f0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bce:	2300      	movs	r3, #0
 8003bd0:	73fb      	strb	r3, [r7, #15]
 8003bd2:	e04a      	b.n	8003c6a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003bd4:	7bfa      	ldrb	r2, [r7, #15]
 8003bd6:	6879      	ldr	r1, [r7, #4]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	1a9b      	subs	r3, r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	333d      	adds	r3, #61	; 0x3d
 8003be4:	2201      	movs	r2, #1
 8003be6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003be8:	7bfa      	ldrb	r2, [r7, #15]
 8003bea:	6879      	ldr	r1, [r7, #4]
 8003bec:	4613      	mov	r3, r2
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	1a9b      	subs	r3, r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	333c      	adds	r3, #60	; 0x3c
 8003bf8:	7bfa      	ldrb	r2, [r7, #15]
 8003bfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003bfc:	7bfa      	ldrb	r2, [r7, #15]
 8003bfe:	7bfb      	ldrb	r3, [r7, #15]
 8003c00:	b298      	uxth	r0, r3
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	4613      	mov	r3, r2
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	1a9b      	subs	r3, r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	440b      	add	r3, r1
 8003c0e:	3342      	adds	r3, #66	; 0x42
 8003c10:	4602      	mov	r2, r0
 8003c12:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c14:	7bfa      	ldrb	r2, [r7, #15]
 8003c16:	6879      	ldr	r1, [r7, #4]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	1a9b      	subs	r3, r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	440b      	add	r3, r1
 8003c22:	333f      	adds	r3, #63	; 0x3f
 8003c24:	2200      	movs	r2, #0
 8003c26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c28:	7bfa      	ldrb	r2, [r7, #15]
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	1a9b      	subs	r3, r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	440b      	add	r3, r1
 8003c36:	3344      	adds	r3, #68	; 0x44
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c3c:	7bfa      	ldrb	r2, [r7, #15]
 8003c3e:	6879      	ldr	r1, [r7, #4]
 8003c40:	4613      	mov	r3, r2
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	1a9b      	subs	r3, r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	440b      	add	r3, r1
 8003c4a:	3348      	adds	r3, #72	; 0x48
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c50:	7bfa      	ldrb	r2, [r7, #15]
 8003c52:	6879      	ldr	r1, [r7, #4]
 8003c54:	4613      	mov	r3, r2
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	1a9b      	subs	r3, r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	3350      	adds	r3, #80	; 0x50
 8003c60:	2200      	movs	r2, #0
 8003c62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c64:	7bfb      	ldrb	r3, [r7, #15]
 8003c66:	3301      	adds	r3, #1
 8003c68:	73fb      	strb	r3, [r7, #15]
 8003c6a:	7bfa      	ldrb	r2, [r7, #15]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d3af      	bcc.n	8003bd4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c74:	2300      	movs	r3, #0
 8003c76:	73fb      	strb	r3, [r7, #15]
 8003c78:	e044      	b.n	8003d04 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c7a:	7bfa      	ldrb	r2, [r7, #15]
 8003c7c:	6879      	ldr	r1, [r7, #4]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	1a9b      	subs	r3, r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	440b      	add	r3, r1
 8003c88:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c90:	7bfa      	ldrb	r2, [r7, #15]
 8003c92:	6879      	ldr	r1, [r7, #4]
 8003c94:	4613      	mov	r3, r2
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	1a9b      	subs	r3, r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003ca2:	7bfa      	ldrb	r2, [r7, #15]
 8003ca4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ca6:	7bfa      	ldrb	r2, [r7, #15]
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	4613      	mov	r3, r2
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	1a9b      	subs	r3, r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	440b      	add	r3, r1
 8003cb4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003cb8:	2200      	movs	r2, #0
 8003cba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003cbc:	7bfa      	ldrb	r2, [r7, #15]
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	1a9b      	subs	r3, r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003cce:	2200      	movs	r2, #0
 8003cd0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003cd2:	7bfa      	ldrb	r2, [r7, #15]
 8003cd4:	6879      	ldr	r1, [r7, #4]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	1a9b      	subs	r3, r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	440b      	add	r3, r1
 8003ce0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ce8:	7bfa      	ldrb	r2, [r7, #15]
 8003cea:	6879      	ldr	r1, [r7, #4]
 8003cec:	4613      	mov	r3, r2
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	1a9b      	subs	r3, r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cfe:	7bfb      	ldrb	r3, [r7, #15]
 8003d00:	3301      	adds	r3, #1
 8003d02:	73fb      	strb	r3, [r7, #15]
 8003d04:	7bfa      	ldrb	r2, [r7, #15]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d3b5      	bcc.n	8003c7a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	603b      	str	r3, [r7, #0]
 8003d14:	687e      	ldr	r6, [r7, #4]
 8003d16:	466d      	mov	r5, sp
 8003d18:	f106 0410 	add.w	r4, r6, #16
 8003d1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d28:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d2c:	1d33      	adds	r3, r6, #4
 8003d2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d30:	6838      	ldr	r0, [r7, #0]
 8003d32:	f009 fc07 	bl	800d544 <USB_DevInit>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d005      	beq.n	8003d48 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2202      	movs	r2, #2
 8003d40:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e014      	b.n	8003d72 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d102      	bne.n	8003d66 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f001 f8bf 	bl	8004ee4 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f00a fbee 	bl	800e54c <USB_DevDisconnect>

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d7a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b084      	sub	sp, #16
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d101      	bne.n	8003d96 <HAL_PCD_Start+0x1c>
 8003d92:	2302      	movs	r3, #2
 8003d94:	e020      	b.n	8003dd8 <HAL_PCD_Start+0x5e>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d109      	bne.n	8003dba <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d005      	beq.n	8003dba <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f00a fbac 	bl	800e51c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f009 fb6f 	bl	800d4ac <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003de0:	b590      	push	{r4, r7, lr}
 8003de2:	b08d      	sub	sp, #52	; 0x34
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dee:	6a3b      	ldr	r3, [r7, #32]
 8003df0:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f00a fc53 	bl	800e6a2 <USB_GetMode>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f040 83ca 	bne.w	8004598 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f00a fbb7 	bl	800e57c <USB_ReadInterrupts>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 83c0 	beq.w	8004596 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f00a fbae 	bl	800e57c <USB_ReadInterrupts>
 8003e20:	4603      	mov	r3, r0
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d107      	bne.n	8003e3a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695a      	ldr	r2, [r3, #20]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f002 0202 	and.w	r2, r2, #2
 8003e38:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f00a fb9c 	bl	800e57c <USB_ReadInterrupts>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f003 0310 	and.w	r3, r3, #16
 8003e4a:	2b10      	cmp	r3, #16
 8003e4c:	d161      	bne.n	8003f12 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	699a      	ldr	r2, [r3, #24]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 0210 	bic.w	r2, r2, #16
 8003e5c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	f003 020f 	and.w	r2, r3, #15
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	1a9b      	subs	r3, r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	4413      	add	r3, r2
 8003e7a:	3304      	adds	r3, #4
 8003e7c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	0c5b      	lsrs	r3, r3, #17
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d124      	bne.n	8003ed4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003e90:	4013      	ands	r3, r2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d035      	beq.n	8003f02 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	091b      	lsrs	r3, r3, #4
 8003e9e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003ea0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	6a38      	ldr	r0, [r7, #32]
 8003eaa:	f00a fa14 	bl	800e2d6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	68da      	ldr	r2, [r3, #12]
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	091b      	lsrs	r3, r3, #4
 8003eb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003eba:	441a      	add	r2, r3
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	699a      	ldr	r2, [r3, #24]
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	091b      	lsrs	r3, r3, #4
 8003ec8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ecc:	441a      	add	r2, r3
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	619a      	str	r2, [r3, #24]
 8003ed2:	e016      	b.n	8003f02 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	0c5b      	lsrs	r3, r3, #17
 8003ed8:	f003 030f 	and.w	r3, r3, #15
 8003edc:	2b06      	cmp	r3, #6
 8003ede:	d110      	bne.n	8003f02 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ee6:	2208      	movs	r2, #8
 8003ee8:	4619      	mov	r1, r3
 8003eea:	6a38      	ldr	r0, [r7, #32]
 8003eec:	f00a f9f3 	bl	800e2d6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	699a      	ldr	r2, [r3, #24]
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	091b      	lsrs	r3, r3, #4
 8003ef8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003efc:	441a      	add	r2, r3
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	699a      	ldr	r2, [r3, #24]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f042 0210 	orr.w	r2, r2, #16
 8003f10:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f00a fb30 	bl	800e57c <USB_ReadInterrupts>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f22:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f26:	d16e      	bne.n	8004006 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f00a fb36 	bl	800e5a2 <USB_ReadDevAllOutEpInterrupt>
 8003f36:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003f38:	e062      	b.n	8004000 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d057      	beq.n	8003ff4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f4a:	b2d2      	uxtb	r2, r2
 8003f4c:	4611      	mov	r1, r2
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f00a fb5b 	bl	800e60a <USB_ReadDevOutEPInterrupt>
 8003f54:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00c      	beq.n	8003f7a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	015a      	lsls	r2, r3, #5
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	4413      	add	r3, r2
 8003f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	2301      	movs	r3, #1
 8003f70:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003f72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 fe0b 	bl	8004b90 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	f003 0308 	and.w	r3, r3, #8
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00c      	beq.n	8003f9e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f86:	015a      	lsls	r2, r3, #5
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f90:	461a      	mov	r2, r3
 8003f92:	2308      	movs	r3, #8
 8003f94:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003f96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 ff05 	bl	8004da8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d008      	beq.n	8003fba <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	015a      	lsls	r2, r3, #5
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	4413      	add	r3, r2
 8003fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	2310      	movs	r3, #16
 8003fb8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	f003 0320 	and.w	r3, r3, #32
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d008      	beq.n	8003fd6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	015a      	lsls	r2, r3, #5
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	4413      	add	r3, r2
 8003fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	2320      	movs	r3, #32
 8003fd4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d009      	beq.n	8003ff4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fec:	461a      	mov	r2, r3
 8003fee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ff2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffc:	085b      	lsrs	r3, r3, #1
 8003ffe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004002:	2b00      	cmp	r3, #0
 8004004:	d199      	bne.n	8003f3a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f00a fab6 	bl	800e57c <USB_ReadInterrupts>
 8004010:	4603      	mov	r3, r0
 8004012:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004016:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800401a:	f040 80c0 	bne.w	800419e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4618      	mov	r0, r3
 8004024:	f00a fad7 	bl	800e5d6 <USB_ReadDevAllInEpInterrupt>
 8004028:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800402a:	2300      	movs	r3, #0
 800402c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800402e:	e0b2      	b.n	8004196 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 80a7 	beq.w	800418a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	4611      	mov	r1, r2
 8004046:	4618      	mov	r0, r3
 8004048:	f00a fafd 	bl	800e646 <USB_ReadDevInEPInterrupt>
 800404c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b00      	cmp	r3, #0
 8004056:	d057      	beq.n	8004108 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	2201      	movs	r2, #1
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800406c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	43db      	mvns	r3, r3
 8004072:	69f9      	ldr	r1, [r7, #28]
 8004074:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004078:	4013      	ands	r3, r2
 800407a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	4413      	add	r3, r2
 8004084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004088:	461a      	mov	r2, r3
 800408a:	2301      	movs	r3, #1
 800408c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d132      	bne.n	80040fc <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004096:	6879      	ldr	r1, [r7, #4]
 8004098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800409a:	4613      	mov	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	1a9b      	subs	r3, r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	440b      	add	r3, r1
 80040a4:	3348      	adds	r3, #72	; 0x48
 80040a6:	6819      	ldr	r1, [r3, #0]
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ac:	4613      	mov	r3, r2
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	1a9b      	subs	r3, r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4403      	add	r3, r0
 80040b6:	3344      	adds	r3, #68	; 0x44
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4419      	add	r1, r3
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c0:	4613      	mov	r3, r2
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	1a9b      	subs	r3, r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4403      	add	r3, r0
 80040ca:	3348      	adds	r3, #72	; 0x48
 80040cc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d113      	bne.n	80040fc <HAL_PCD_IRQHandler+0x31c>
 80040d4:	6879      	ldr	r1, [r7, #4]
 80040d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d8:	4613      	mov	r3, r2
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	1a9b      	subs	r3, r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	440b      	add	r3, r1
 80040e2:	3350      	adds	r3, #80	; 0x50
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d108      	bne.n	80040fc <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6818      	ldr	r0, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80040f4:	461a      	mov	r2, r3
 80040f6:	2101      	movs	r1, #1
 80040f8:	f00a fb06 	bl	800e708 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	4619      	mov	r1, r3
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f012 fcc9 	bl	8016a9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	f003 0308 	and.w	r3, r3, #8
 800410e:	2b00      	cmp	r3, #0
 8004110:	d008      	beq.n	8004124 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	4413      	add	r3, r2
 800411a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800411e:	461a      	mov	r2, r3
 8004120:	2308      	movs	r3, #8
 8004122:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	f003 0310 	and.w	r3, r3, #16
 800412a:	2b00      	cmp	r3, #0
 800412c:	d008      	beq.n	8004140 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	015a      	lsls	r2, r3, #5
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	4413      	add	r3, r2
 8004136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800413a:	461a      	mov	r2, r3
 800413c:	2310      	movs	r3, #16
 800413e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004146:	2b00      	cmp	r3, #0
 8004148:	d008      	beq.n	800415c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414c:	015a      	lsls	r2, r3, #5
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	4413      	add	r3, r2
 8004152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004156:	461a      	mov	r2, r3
 8004158:	2340      	movs	r3, #64	; 0x40
 800415a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d008      	beq.n	8004178 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	015a      	lsls	r2, r3, #5
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	4413      	add	r3, r2
 800416e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004172:	461a      	mov	r2, r3
 8004174:	2302      	movs	r3, #2
 8004176:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004182:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 fc75 	bl	8004a74 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	3301      	adds	r3, #1
 800418e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004192:	085b      	lsrs	r3, r3, #1
 8004194:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004198:	2b00      	cmp	r3, #0
 800419a:	f47f af49 	bne.w	8004030 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f00a f9ea 	bl	800e57c <USB_ReadInterrupts>
 80041a8:	4603      	mov	r3, r0
 80041aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041b2:	d122      	bne.n	80041fa <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	69fa      	ldr	r2, [r7, #28]
 80041be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041c2:	f023 0301 	bic.w	r3, r3, #1
 80041c6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d108      	bne.n	80041e4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80041da:	2100      	movs	r1, #0
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 fea5 	bl	8004f2c <HAL_PCDEx_LPM_Callback>
 80041e2:	e002      	b.n	80041ea <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f012 fccf 	bl	8016b88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	695a      	ldr	r2, [r3, #20]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80041f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f00a f9bc 	bl	800e57c <USB_ReadInterrupts>
 8004204:	4603      	mov	r3, r0
 8004206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800420a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800420e:	d112      	bne.n	8004236 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b01      	cmp	r3, #1
 800421e:	d102      	bne.n	8004226 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f012 fc8b 	bl	8016b3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	695a      	ldr	r2, [r3, #20]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004234:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4618      	mov	r0, r3
 800423c:	f00a f99e 	bl	800e57c <USB_ReadInterrupts>
 8004240:	4603      	mov	r3, r0
 8004242:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004246:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800424a:	d121      	bne.n	8004290 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	695a      	ldr	r2, [r3, #20]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800425a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004262:	2b00      	cmp	r3, #0
 8004264:	d111      	bne.n	800428a <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004274:	089b      	lsrs	r3, r3, #2
 8004276:	f003 020f 	and.w	r2, r3, #15
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004280:	2101      	movs	r1, #1
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 fe52 	bl	8004f2c <HAL_PCDEx_LPM_Callback>
 8004288:	e002      	b.n	8004290 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f012 fc56 	bl	8016b3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4618      	mov	r0, r3
 8004296:	f00a f971 	bl	800e57c <USB_ReadInterrupts>
 800429a:	4603      	mov	r3, r0
 800429c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042a4:	f040 80c7 	bne.w	8004436 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	69fa      	ldr	r2, [r7, #28]
 80042b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042b6:	f023 0301 	bic.w	r3, r3, #1
 80042ba:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2110      	movs	r1, #16
 80042c2:	4618      	mov	r0, r3
 80042c4:	f009 fa9c 	bl	800d800 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042c8:	2300      	movs	r3, #0
 80042ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042cc:	e056      	b.n	800437c <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80042ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d0:	015a      	lsls	r2, r3, #5
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	4413      	add	r3, r2
 80042d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042da:	461a      	mov	r2, r3
 80042dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042e0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80042e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042f2:	0151      	lsls	r1, r2, #5
 80042f4:	69fa      	ldr	r2, [r7, #28]
 80042f6:	440a      	add	r2, r1
 80042f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004300:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004304:	015a      	lsls	r2, r3, #5
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	4413      	add	r3, r2
 800430a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004312:	0151      	lsls	r1, r2, #5
 8004314:	69fa      	ldr	r2, [r7, #28]
 8004316:	440a      	add	r2, r1
 8004318:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800431c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004320:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004324:	015a      	lsls	r2, r3, #5
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	4413      	add	r3, r2
 800432a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800432e:	461a      	mov	r2, r3
 8004330:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004334:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004338:	015a      	lsls	r2, r3, #5
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	4413      	add	r3, r2
 800433e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004346:	0151      	lsls	r1, r2, #5
 8004348:	69fa      	ldr	r2, [r7, #28]
 800434a:	440a      	add	r2, r1
 800434c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004350:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004354:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004358:	015a      	lsls	r2, r3, #5
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	4413      	add	r3, r2
 800435e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004366:	0151      	lsls	r1, r2, #5
 8004368:	69fa      	ldr	r2, [r7, #28]
 800436a:	440a      	add	r2, r1
 800436c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004370:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004374:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004378:	3301      	adds	r3, #1
 800437a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004382:	429a      	cmp	r2, r3
 8004384:	d3a3      	bcc.n	80042ce <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	69fa      	ldr	r2, [r7, #28]
 8004390:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004394:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004398:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d016      	beq.n	80043d0 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ac:	69fa      	ldr	r2, [r7, #28]
 80043ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043b2:	f043 030b 	orr.w	r3, r3, #11
 80043b6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c2:	69fa      	ldr	r2, [r7, #28]
 80043c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043c8:	f043 030b 	orr.w	r3, r3, #11
 80043cc:	6453      	str	r3, [r2, #68]	; 0x44
 80043ce:	e015      	b.n	80043fc <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d6:	695a      	ldr	r2, [r3, #20]
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043de:	4619      	mov	r1, r3
 80043e0:	f242 032b 	movw	r3, #8235	; 0x202b
 80043e4:	4313      	orrs	r3, r2
 80043e6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	69fa      	ldr	r2, [r7, #28]
 80043f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043f6:	f043 030b 	orr.w	r3, r3, #11
 80043fa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	69fa      	ldr	r2, [r7, #28]
 8004406:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800440a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800440e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6818      	ldr	r0, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004420:	461a      	mov	r2, r3
 8004422:	f00a f971 	bl	800e708 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	695a      	ldr	r2, [r3, #20]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004434:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4618      	mov	r0, r3
 800443c:	f00a f89e 	bl	800e57c <USB_ReadInterrupts>
 8004440:	4603      	mov	r3, r0
 8004442:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004446:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800444a:	d124      	bne.n	8004496 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4618      	mov	r0, r3
 8004452:	f00a f935 	bl	800e6c0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4618      	mov	r0, r3
 800445c:	f009 fa31 	bl	800d8c2 <USB_GetDevSpeed>
 8004460:	4603      	mov	r3, r0
 8004462:	461a      	mov	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681c      	ldr	r4, [r3, #0]
 800446c:	f001 fcb4 	bl	8005dd8 <HAL_RCC_GetHCLKFreq>
 8004470:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004476:	b2db      	uxtb	r3, r3
 8004478:	461a      	mov	r2, r3
 800447a:	4620      	mov	r0, r4
 800447c:	f008 ff74 	bl	800d368 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f012 fb32 	bl	8016aea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	695a      	ldr	r2, [r3, #20]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004494:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4618      	mov	r0, r3
 800449c:	f00a f86e 	bl	800e57c <USB_ReadInterrupts>
 80044a0:	4603      	mov	r3, r0
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	2b08      	cmp	r3, #8
 80044a8:	d10a      	bne.n	80044c0 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f012 fb0f 	bl	8016ace <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	695a      	ldr	r2, [r3, #20]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f002 0208 	and.w	r2, r2, #8
 80044be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f00a f859 	bl	800e57c <USB_ReadInterrupts>
 80044ca:	4603      	mov	r3, r0
 80044cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044d4:	d10f      	bne.n	80044f6 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	4619      	mov	r1, r3
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f012 fb71 	bl	8016bc8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	695a      	ldr	r2, [r3, #20]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80044f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f00a f83e 	bl	800e57c <USB_ReadInterrupts>
 8004500:	4603      	mov	r3, r0
 8004502:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004506:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800450a:	d10f      	bne.n	800452c <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800450c:	2300      	movs	r3, #0
 800450e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004512:	b2db      	uxtb	r3, r3
 8004514:	4619      	mov	r1, r3
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f012 fb44 	bl	8016ba4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	695a      	ldr	r2, [r3, #20]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800452a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4618      	mov	r0, r3
 8004532:	f00a f823 	bl	800e57c <USB_ReadInterrupts>
 8004536:	4603      	mov	r3, r0
 8004538:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800453c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004540:	d10a      	bne.n	8004558 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f012 fb52 	bl	8016bec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	695a      	ldr	r2, [r3, #20]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004556:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4618      	mov	r0, r3
 800455e:	f00a f80d 	bl	800e57c <USB_ReadInterrupts>
 8004562:	4603      	mov	r3, r0
 8004564:	f003 0304 	and.w	r3, r3, #4
 8004568:	2b04      	cmp	r3, #4
 800456a:	d115      	bne.n	8004598 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	f003 0304 	and.w	r3, r3, #4
 800457a:	2b00      	cmp	r3, #0
 800457c:	d002      	beq.n	8004584 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f012 fb42 	bl	8016c08 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6859      	ldr	r1, [r3, #4]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	430a      	orrs	r2, r1
 8004592:	605a      	str	r2, [r3, #4]
 8004594:	e000      	b.n	8004598 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8004596:	bf00      	nop
    }
  }
}
 8004598:	3734      	adds	r7, #52	; 0x34
 800459a:	46bd      	mov	sp, r7
 800459c:	bd90      	pop	{r4, r7, pc}

0800459e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b082      	sub	sp, #8
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
 80045a6:	460b      	mov	r3, r1
 80045a8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d101      	bne.n	80045b8 <HAL_PCD_SetAddress+0x1a>
 80045b4:	2302      	movs	r3, #2
 80045b6:	e013      	b.n	80045e0 <HAL_PCD_SetAddress+0x42>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	78fa      	ldrb	r2, [r7, #3]
 80045c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	78fa      	ldrb	r2, [r7, #3]
 80045ce:	4611      	mov	r1, r2
 80045d0:	4618      	mov	r0, r3
 80045d2:	f009 ff7d 	bl	800e4d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	4608      	mov	r0, r1
 80045f2:	4611      	mov	r1, r2
 80045f4:	461a      	mov	r2, r3
 80045f6:	4603      	mov	r3, r0
 80045f8:	70fb      	strb	r3, [r7, #3]
 80045fa:	460b      	mov	r3, r1
 80045fc:	803b      	strh	r3, [r7, #0]
 80045fe:	4613      	mov	r3, r2
 8004600:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004602:	2300      	movs	r3, #0
 8004604:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004606:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800460a:	2b00      	cmp	r3, #0
 800460c:	da0f      	bge.n	800462e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800460e:	78fb      	ldrb	r3, [r7, #3]
 8004610:	f003 020f 	and.w	r2, r3, #15
 8004614:	4613      	mov	r3, r2
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	1a9b      	subs	r3, r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	3338      	adds	r3, #56	; 0x38
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	4413      	add	r3, r2
 8004622:	3304      	adds	r3, #4
 8004624:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2201      	movs	r2, #1
 800462a:	705a      	strb	r2, [r3, #1]
 800462c:	e00f      	b.n	800464e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800462e:	78fb      	ldrb	r3, [r7, #3]
 8004630:	f003 020f 	and.w	r2, r3, #15
 8004634:	4613      	mov	r3, r2
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	1a9b      	subs	r3, r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	4413      	add	r3, r2
 8004644:	3304      	adds	r3, #4
 8004646:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800464e:	78fb      	ldrb	r3, [r7, #3]
 8004650:	f003 030f 	and.w	r3, r3, #15
 8004654:	b2da      	uxtb	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800465a:	883a      	ldrh	r2, [r7, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	78ba      	ldrb	r2, [r7, #2]
 8004664:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	785b      	ldrb	r3, [r3, #1]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d004      	beq.n	8004678 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	b29a      	uxth	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004678:	78bb      	ldrb	r3, [r7, #2]
 800467a:	2b02      	cmp	r3, #2
 800467c:	d102      	bne.n	8004684 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800468a:	2b01      	cmp	r3, #1
 800468c:	d101      	bne.n	8004692 <HAL_PCD_EP_Open+0xaa>
 800468e:	2302      	movs	r3, #2
 8004690:	e00e      	b.n	80046b0 <HAL_PCD_EP_Open+0xc8>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68f9      	ldr	r1, [r7, #12]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f009 f933 	bl	800d90c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80046ae:	7afb      	ldrb	r3, [r7, #11]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	460b      	mov	r3, r1
 80046c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80046c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	da0f      	bge.n	80046ec <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046cc:	78fb      	ldrb	r3, [r7, #3]
 80046ce:	f003 020f 	and.w	r2, r3, #15
 80046d2:	4613      	mov	r3, r2
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	1a9b      	subs	r3, r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	3338      	adds	r3, #56	; 0x38
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	4413      	add	r3, r2
 80046e0:	3304      	adds	r3, #4
 80046e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2201      	movs	r2, #1
 80046e8:	705a      	strb	r2, [r3, #1]
 80046ea:	e00f      	b.n	800470c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046ec:	78fb      	ldrb	r3, [r7, #3]
 80046ee:	f003 020f 	and.w	r2, r3, #15
 80046f2:	4613      	mov	r3, r2
 80046f4:	00db      	lsls	r3, r3, #3
 80046f6:	1a9b      	subs	r3, r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	4413      	add	r3, r2
 8004702:	3304      	adds	r3, #4
 8004704:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800470c:	78fb      	ldrb	r3, [r7, #3]
 800470e:	f003 030f 	and.w	r3, r3, #15
 8004712:	b2da      	uxtb	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800471e:	2b01      	cmp	r3, #1
 8004720:	d101      	bne.n	8004726 <HAL_PCD_EP_Close+0x6e>
 8004722:	2302      	movs	r3, #2
 8004724:	e00e      	b.n	8004744 <HAL_PCD_EP_Close+0x8c>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68f9      	ldr	r1, [r7, #12]
 8004734:	4618      	mov	r0, r3
 8004736:	f009 f971 	bl	800da1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	607a      	str	r2, [r7, #4]
 8004756:	603b      	str	r3, [r7, #0]
 8004758:	460b      	mov	r3, r1
 800475a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800475c:	7afb      	ldrb	r3, [r7, #11]
 800475e:	f003 020f 	and.w	r2, r3, #15
 8004762:	4613      	mov	r3, r2
 8004764:	00db      	lsls	r3, r3, #3
 8004766:	1a9b      	subs	r3, r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	4413      	add	r3, r2
 8004772:	3304      	adds	r3, #4
 8004774:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	2200      	movs	r2, #0
 8004786:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	2200      	movs	r2, #0
 800478c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800478e:	7afb      	ldrb	r3, [r7, #11]
 8004790:	f003 030f 	and.w	r3, r3, #15
 8004794:	b2da      	uxtb	r2, r3
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d102      	bne.n	80047a8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80047a8:	7afb      	ldrb	r3, [r7, #11]
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d109      	bne.n	80047c6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6818      	ldr	r0, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	461a      	mov	r2, r3
 80047be:	6979      	ldr	r1, [r7, #20]
 80047c0:	f009 fbfc 	bl	800dfbc <USB_EP0StartXfer>
 80047c4:	e008      	b.n	80047d8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6818      	ldr	r0, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	461a      	mov	r2, r3
 80047d2:	6979      	ldr	r1, [r7, #20]
 80047d4:	f009 f9a6 	bl	800db24 <USB_EPStartXfer>
  }

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b083      	sub	sp, #12
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
 80047ea:	460b      	mov	r3, r1
 80047ec:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80047ee:	78fb      	ldrb	r3, [r7, #3]
 80047f0:	f003 020f 	and.w	r2, r3, #15
 80047f4:	6879      	ldr	r1, [r7, #4]
 80047f6:	4613      	mov	r3, r2
 80047f8:	00db      	lsls	r3, r3, #3
 80047fa:	1a9b      	subs	r3, r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	440b      	add	r3, r1
 8004800:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004804:	681b      	ldr	r3, [r3, #0]
}
 8004806:	4618      	mov	r0, r3
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b086      	sub	sp, #24
 8004816:	af00      	add	r7, sp, #0
 8004818:	60f8      	str	r0, [r7, #12]
 800481a:	607a      	str	r2, [r7, #4]
 800481c:	603b      	str	r3, [r7, #0]
 800481e:	460b      	mov	r3, r1
 8004820:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004822:	7afb      	ldrb	r3, [r7, #11]
 8004824:	f003 020f 	and.w	r2, r3, #15
 8004828:	4613      	mov	r3, r2
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	1a9b      	subs	r3, r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	3338      	adds	r3, #56	; 0x38
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	4413      	add	r3, r2
 8004836:	3304      	adds	r3, #4
 8004838:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	2200      	movs	r2, #0
 800484a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	2201      	movs	r2, #1
 8004850:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004852:	7afb      	ldrb	r3, [r7, #11]
 8004854:	f003 030f 	and.w	r3, r3, #15
 8004858:	b2da      	uxtb	r2, r3
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d102      	bne.n	800486c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800486c:	7afb      	ldrb	r3, [r7, #11]
 800486e:	f003 030f 	and.w	r3, r3, #15
 8004872:	2b00      	cmp	r3, #0
 8004874:	d109      	bne.n	800488a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6818      	ldr	r0, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	b2db      	uxtb	r3, r3
 8004880:	461a      	mov	r2, r3
 8004882:	6979      	ldr	r1, [r7, #20]
 8004884:	f009 fb9a 	bl	800dfbc <USB_EP0StartXfer>
 8004888:	e008      	b.n	800489c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6818      	ldr	r0, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	b2db      	uxtb	r3, r3
 8004894:	461a      	mov	r2, r3
 8004896:	6979      	ldr	r1, [r7, #20]
 8004898:	f009 f944 	bl	800db24 <USB_EPStartXfer>
  }

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3718      	adds	r7, #24
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b084      	sub	sp, #16
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
 80048ae:	460b      	mov	r3, r1
 80048b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80048b2:	78fb      	ldrb	r3, [r7, #3]
 80048b4:	f003 020f 	and.w	r2, r3, #15
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d901      	bls.n	80048c4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e050      	b.n	8004966 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80048c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	da0f      	bge.n	80048ec <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048cc:	78fb      	ldrb	r3, [r7, #3]
 80048ce:	f003 020f 	and.w	r2, r3, #15
 80048d2:	4613      	mov	r3, r2
 80048d4:	00db      	lsls	r3, r3, #3
 80048d6:	1a9b      	subs	r3, r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	3338      	adds	r3, #56	; 0x38
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	4413      	add	r3, r2
 80048e0:	3304      	adds	r3, #4
 80048e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2201      	movs	r2, #1
 80048e8:	705a      	strb	r2, [r3, #1]
 80048ea:	e00d      	b.n	8004908 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80048ec:	78fa      	ldrb	r2, [r7, #3]
 80048ee:	4613      	mov	r3, r2
 80048f0:	00db      	lsls	r3, r3, #3
 80048f2:	1a9b      	subs	r3, r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	4413      	add	r3, r2
 80048fe:	3304      	adds	r3, #4
 8004900:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2201      	movs	r2, #1
 800490c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800490e:	78fb      	ldrb	r3, [r7, #3]
 8004910:	f003 030f 	and.w	r3, r3, #15
 8004914:	b2da      	uxtb	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004920:	2b01      	cmp	r3, #1
 8004922:	d101      	bne.n	8004928 <HAL_PCD_EP_SetStall+0x82>
 8004924:	2302      	movs	r3, #2
 8004926:	e01e      	b.n	8004966 <HAL_PCD_EP_SetStall+0xc0>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68f9      	ldr	r1, [r7, #12]
 8004936:	4618      	mov	r0, r3
 8004938:	f009 fcf6 	bl	800e328 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800493c:	78fb      	ldrb	r3, [r7, #3]
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10a      	bne.n	800495c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6818      	ldr	r0, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	b2d9      	uxtb	r1, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004956:	461a      	mov	r2, r3
 8004958:	f009 fed6 	bl	800e708 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b084      	sub	sp, #16
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
 8004976:	460b      	mov	r3, r1
 8004978:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800497a:	78fb      	ldrb	r3, [r7, #3]
 800497c:	f003 020f 	and.w	r2, r3, #15
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	429a      	cmp	r2, r3
 8004986:	d901      	bls.n	800498c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e042      	b.n	8004a12 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800498c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004990:	2b00      	cmp	r3, #0
 8004992:	da0f      	bge.n	80049b4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004994:	78fb      	ldrb	r3, [r7, #3]
 8004996:	f003 020f 	and.w	r2, r3, #15
 800499a:	4613      	mov	r3, r2
 800499c:	00db      	lsls	r3, r3, #3
 800499e:	1a9b      	subs	r3, r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	3338      	adds	r3, #56	; 0x38
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	4413      	add	r3, r2
 80049a8:	3304      	adds	r3, #4
 80049aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2201      	movs	r2, #1
 80049b0:	705a      	strb	r2, [r3, #1]
 80049b2:	e00f      	b.n	80049d4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049b4:	78fb      	ldrb	r3, [r7, #3]
 80049b6:	f003 020f 	and.w	r2, r3, #15
 80049ba:	4613      	mov	r3, r2
 80049bc:	00db      	lsls	r3, r3, #3
 80049be:	1a9b      	subs	r3, r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	4413      	add	r3, r2
 80049ca:	3304      	adds	r3, #4
 80049cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049da:	78fb      	ldrb	r3, [r7, #3]
 80049dc:	f003 030f 	and.w	r3, r3, #15
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d101      	bne.n	80049f4 <HAL_PCD_EP_ClrStall+0x86>
 80049f0:	2302      	movs	r3, #2
 80049f2:	e00e      	b.n	8004a12 <HAL_PCD_EP_ClrStall+0xa4>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68f9      	ldr	r1, [r7, #12]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f009 fcfe 	bl	800e404 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b082      	sub	sp, #8
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
 8004a22:	460b      	mov	r3, r1
 8004a24:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d101      	bne.n	8004a34 <HAL_PCD_EP_Flush+0x1a>
 8004a30:	2302      	movs	r3, #2
 8004a32:	e01b      	b.n	8004a6c <HAL_PCD_EP_Flush+0x52>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8004a3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	da09      	bge.n	8004a58 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	78fb      	ldrb	r3, [r7, #3]
 8004a4a:	f003 030f 	and.w	r3, r3, #15
 8004a4e:	4619      	mov	r1, r3
 8004a50:	4610      	mov	r0, r2
 8004a52:	f008 fed5 	bl	800d800 <USB_FlushTxFifo>
 8004a56:	e004      	b.n	8004a62 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f008 fef5 	bl	800d84c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3708      	adds	r7, #8
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b08a      	sub	sp, #40	; 0x28
 8004a78:	af02      	add	r7, sp, #8
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004a88:	683a      	ldr	r2, [r7, #0]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	00db      	lsls	r3, r3, #3
 8004a8e:	1a9b      	subs	r3, r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	3338      	adds	r3, #56	; 0x38
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	4413      	add	r3, r2
 8004a98:	3304      	adds	r3, #4
 8004a9a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	699a      	ldr	r2, [r3, #24]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d901      	bls.n	8004aac <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e06c      	b.n	8004b86 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	695a      	ldr	r2, [r3, #20]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	69fa      	ldr	r2, [r7, #28]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d902      	bls.n	8004ac8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	3303      	adds	r3, #3
 8004acc:	089b      	lsrs	r3, r3, #2
 8004ace:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ad0:	e02b      	b.n	8004b2a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	695a      	ldr	r2, [r3, #20]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	69fa      	ldr	r2, [r7, #28]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d902      	bls.n	8004aee <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	3303      	adds	r3, #3
 8004af2:	089b      	lsrs	r3, r3, #2
 8004af4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	68d9      	ldr	r1, [r3, #12]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	6978      	ldr	r0, [r7, #20]
 8004b0e:	f009 fbad 	bl	800e26c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	68da      	ldr	r2, [r3, #12]
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	441a      	add	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	699a      	ldr	r2, [r3, #24]
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	441a      	add	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	015a      	lsls	r2, r3, #5
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	4413      	add	r3, r2
 8004b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d809      	bhi.n	8004b54 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	699a      	ldr	r2, [r3, #24]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d203      	bcs.n	8004b54 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1be      	bne.n	8004ad2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	695a      	ldr	r2, [r3, #20]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d811      	bhi.n	8004b84 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	2201      	movs	r2, #1
 8004b68:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	43db      	mvns	r3, r3
 8004b7a:	6939      	ldr	r1, [r7, #16]
 8004b7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b80:	4013      	ands	r3, r2
 8004b82:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3720      	adds	r7, #32
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
	...

08004b90 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	333c      	adds	r3, #60	; 0x3c
 8004ba8:	3304      	adds	r3, #4
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	015a      	lsls	r2, r3, #5
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	f040 80a0 	bne.w	8004d08 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	f003 0308 	and.w	r3, r3, #8
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d015      	beq.n	8004bfe <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	4a72      	ldr	r2, [pc, #456]	; (8004da0 <PCD_EP_OutXfrComplete_int+0x210>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	f240 80dd 	bls.w	8004d96 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 80d7 	beq.w	8004d96 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	015a      	lsls	r2, r3, #5
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	4413      	add	r3, r2
 8004bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bfa:	6093      	str	r3, [r2, #8]
 8004bfc:	e0cb      	b.n	8004d96 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	f003 0320 	and.w	r3, r3, #32
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d009      	beq.n	8004c1c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	015a      	lsls	r2, r3, #5
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	4413      	add	r3, r2
 8004c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c14:	461a      	mov	r2, r3
 8004c16:	2320      	movs	r3, #32
 8004c18:	6093      	str	r3, [r2, #8]
 8004c1a:	e0bc      	b.n	8004d96 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f040 80b7 	bne.w	8004d96 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4a5d      	ldr	r2, [pc, #372]	; (8004da0 <PCD_EP_OutXfrComplete_int+0x210>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d90f      	bls.n	8004c50 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	015a      	lsls	r2, r3, #5
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	4413      	add	r3, r2
 8004c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c46:	461a      	mov	r2, r3
 8004c48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c4c:	6093      	str	r3, [r2, #8]
 8004c4e:	e0a2      	b.n	8004d96 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004c50:	6879      	ldr	r1, [r7, #4]
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	4613      	mov	r3, r2
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	1a9b      	subs	r3, r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	440b      	add	r3, r1
 8004c5e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004c62:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	0159      	lsls	r1, r3, #5
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	440b      	add	r3, r1
 8004c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004c76:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	00db      	lsls	r3, r3, #3
 8004c80:	1a9b      	subs	r3, r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	4403      	add	r3, r0
 8004c86:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004c8a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004c8c:	6879      	ldr	r1, [r7, #4]
 8004c8e:	683a      	ldr	r2, [r7, #0]
 8004c90:	4613      	mov	r3, r2
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	1a9b      	subs	r3, r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	440b      	add	r3, r1
 8004c9a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004c9e:	6819      	ldr	r1, [r3, #0]
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	1a9b      	subs	r3, r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4403      	add	r3, r0
 8004cae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4419      	add	r1, r3
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	1a9b      	subs	r3, r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4403      	add	r3, r0
 8004cc4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004cc8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d114      	bne.n	8004cfa <PCD_EP_OutXfrComplete_int+0x16a>
 8004cd0:	6879      	ldr	r1, [r7, #4]
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	00db      	lsls	r3, r3, #3
 8004cd8:	1a9b      	subs	r3, r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	440b      	add	r3, r1
 8004cde:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d108      	bne.n	8004cfa <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6818      	ldr	r0, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	2101      	movs	r1, #1
 8004cf6:	f009 fd07 	bl	800e708 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	4619      	mov	r1, r3
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f011 feaf 	bl	8016a64 <HAL_PCD_DataOutStageCallback>
 8004d06:	e046      	b.n	8004d96 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	4a26      	ldr	r2, [pc, #152]	; (8004da4 <PCD_EP_OutXfrComplete_int+0x214>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d124      	bne.n	8004d5a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00a      	beq.n	8004d30 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	015a      	lsls	r2, r3, #5
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	4413      	add	r3, r2
 8004d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d26:	461a      	mov	r2, r3
 8004d28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d2c:	6093      	str	r3, [r2, #8]
 8004d2e:	e032      	b.n	8004d96 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f003 0320 	and.w	r3, r3, #32
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d008      	beq.n	8004d4c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	015a      	lsls	r2, r3, #5
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	4413      	add	r3, r2
 8004d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d46:	461a      	mov	r2, r3
 8004d48:	2320      	movs	r3, #32
 8004d4a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	4619      	mov	r1, r3
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f011 fe86 	bl	8016a64 <HAL_PCD_DataOutStageCallback>
 8004d58:	e01d      	b.n	8004d96 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d114      	bne.n	8004d8a <PCD_EP_OutXfrComplete_int+0x1fa>
 8004d60:	6879      	ldr	r1, [r7, #4]
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	4613      	mov	r3, r2
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	1a9b      	subs	r3, r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	440b      	add	r3, r1
 8004d6e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d108      	bne.n	8004d8a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6818      	ldr	r0, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004d82:	461a      	mov	r2, r3
 8004d84:	2100      	movs	r1, #0
 8004d86:	f009 fcbf 	bl	800e708 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	4619      	mov	r1, r3
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f011 fe67 	bl	8016a64 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3718      	adds	r7, #24
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	4f54300a 	.word	0x4f54300a
 8004da4:	4f54310a 	.word	0x4f54310a

08004da8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b086      	sub	sp, #24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	333c      	adds	r3, #60	; 0x3c
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	015a      	lsls	r2, r3, #5
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	4a15      	ldr	r2, [pc, #84]	; (8004e30 <PCD_EP_OutSetupPacket_int+0x88>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d90e      	bls.n	8004dfc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d009      	beq.n	8004dfc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	015a      	lsls	r2, r3, #5
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df4:	461a      	mov	r2, r3
 8004df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dfa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f011 fe1f 	bl	8016a40 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	4a0a      	ldr	r2, [pc, #40]	; (8004e30 <PCD_EP_OutSetupPacket_int+0x88>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d90c      	bls.n	8004e24 <PCD_EP_OutSetupPacket_int+0x7c>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d108      	bne.n	8004e24 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6818      	ldr	r0, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	2101      	movs	r1, #1
 8004e20:	f009 fc72 	bl	800e708 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3718      	adds	r7, #24
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	4f54300a 	.word	0x4f54300a

08004e34 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	70fb      	strb	r3, [r7, #3]
 8004e40:	4613      	mov	r3, r2
 8004e42:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004e4c:	78fb      	ldrb	r3, [r7, #3]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d107      	bne.n	8004e62 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004e52:	883b      	ldrh	r3, [r7, #0]
 8004e54:	0419      	lsls	r1, r3, #16
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	629a      	str	r2, [r3, #40]	; 0x28
 8004e60:	e028      	b.n	8004eb4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e68:	0c1b      	lsrs	r3, r3, #16
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004e70:	2300      	movs	r3, #0
 8004e72:	73fb      	strb	r3, [r7, #15]
 8004e74:	e00d      	b.n	8004e92 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	7bfb      	ldrb	r3, [r7, #15]
 8004e7c:	3340      	adds	r3, #64	; 0x40
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4413      	add	r3, r2
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	0c1b      	lsrs	r3, r3, #16
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	4413      	add	r3, r2
 8004e8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004e8c:	7bfb      	ldrb	r3, [r7, #15]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	73fb      	strb	r3, [r7, #15]
 8004e92:	7bfa      	ldrb	r2, [r7, #15]
 8004e94:	78fb      	ldrb	r3, [r7, #3]
 8004e96:	3b01      	subs	r3, #1
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d3ec      	bcc.n	8004e76 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004e9c:	883b      	ldrh	r3, [r7, #0]
 8004e9e:	0418      	lsls	r0, r3, #16
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6819      	ldr	r1, [r3, #0]
 8004ea4:	78fb      	ldrb	r3, [r7, #3]
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	4302      	orrs	r2, r0
 8004eac:	3340      	adds	r3, #64	; 0x40
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	440b      	add	r3, r1
 8004eb2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b083      	sub	sp, #12
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
 8004eca:	460b      	mov	r3, r1
 8004ecc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	887a      	ldrh	r2, [r7, #2]
 8004ed4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f12:	4b05      	ldr	r3, [pc, #20]	; (8004f28 <HAL_PCDEx_ActivateLPM+0x44>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3714      	adds	r7, #20
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	10000003 	.word	0x10000003

08004f2c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	460b      	mov	r3, r1
 8004f36:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004f38:	bf00      	nop
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004f4c:	4b19      	ldr	r3, [pc, #100]	; (8004fb4 <HAL_PWREx_ConfigSupply+0x70>)
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f003 0304 	and.w	r3, r3, #4
 8004f54:	2b04      	cmp	r3, #4
 8004f56:	d00a      	beq.n	8004f6e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004f58:	4b16      	ldr	r3, [pc, #88]	; (8004fb4 <HAL_PWREx_ConfigSupply+0x70>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f003 0307 	and.w	r3, r3, #7
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d001      	beq.n	8004f6a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e01f      	b.n	8004faa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	e01d      	b.n	8004faa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004f6e:	4b11      	ldr	r3, [pc, #68]	; (8004fb4 <HAL_PWREx_ConfigSupply+0x70>)
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	f023 0207 	bic.w	r2, r3, #7
 8004f76:	490f      	ldr	r1, [pc, #60]	; (8004fb4 <HAL_PWREx_ConfigSupply+0x70>)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004f7e:	f7fc fce5 	bl	800194c <HAL_GetTick>
 8004f82:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f84:	e009      	b.n	8004f9a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004f86:	f7fc fce1 	bl	800194c <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f94:	d901      	bls.n	8004f9a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e007      	b.n	8004faa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f9a:	4b06      	ldr	r3, [pc, #24]	; (8004fb4 <HAL_PWREx_ConfigSupply+0x70>)
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fa6:	d1ee      	bne.n	8004f86 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	58024800 	.word	0x58024800

08004fb8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004fbc:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	4a04      	ldr	r2, [pc, #16]	; (8004fd4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004fc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fc6:	60d3      	str	r3, [r2, #12]
}
 8004fc8:	bf00      	nop
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	58024800 	.word	0x58024800

08004fd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b08c      	sub	sp, #48	; 0x30
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d101      	bne.n	8004fea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e3c4      	b.n	8005774 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f000 8087 	beq.w	8005106 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ff8:	4ba2      	ldr	r3, [pc, #648]	; (8005284 <HAL_RCC_OscConfig+0x2ac>)
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005000:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005002:	4ba0      	ldr	r3, [pc, #640]	; (8005284 <HAL_RCC_OscConfig+0x2ac>)
 8005004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005006:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500a:	2b10      	cmp	r3, #16
 800500c:	d007      	beq.n	800501e <HAL_RCC_OscConfig+0x46>
 800500e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005010:	2b18      	cmp	r3, #24
 8005012:	d110      	bne.n	8005036 <HAL_RCC_OscConfig+0x5e>
 8005014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005016:	f003 0303 	and.w	r3, r3, #3
 800501a:	2b02      	cmp	r3, #2
 800501c:	d10b      	bne.n	8005036 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800501e:	4b99      	ldr	r3, [pc, #612]	; (8005284 <HAL_RCC_OscConfig+0x2ac>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d06c      	beq.n	8005104 <HAL_RCC_OscConfig+0x12c>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d168      	bne.n	8005104 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e39e      	b.n	8005774 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800503e:	d106      	bne.n	800504e <HAL_RCC_OscConfig+0x76>
 8005040:	4b90      	ldr	r3, [pc, #576]	; (8005284 <HAL_RCC_OscConfig+0x2ac>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a8f      	ldr	r2, [pc, #572]	; (8005284 <HAL_RCC_OscConfig+0x2ac>)
 8005046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800504a:	6013      	str	r3, [r2, #0]
 800504c:	e02e      	b.n	80050ac <HAL_RCC_OscConfig+0xd4>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10c      	bne.n	8005070 <HAL_RCC_OscConfig+0x98>
 8005056:	4b8b      	ldr	r3, [pc, #556]	; (8005284 <HAL_RCC_OscConfig+0x2ac>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a8a      	ldr	r2, [pc, #552]	; (8005284 <HAL_RCC_OscConfig+0x2ac>)
 800505c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	4b88      	ldr	r3, [pc, #544]	; (8005284 <HAL_RCC_OscConfig+0x2ac>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a87      	ldr	r2, [pc, #540]	; (8005284 <HAL_RCC_OscConfig+0x2ac>)
 8005068:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800506c:	6013      	str	r3, [r2, #0]
 800506e:	e01d      	b.n	80050ac <HAL_RCC_OscConfig+0xd4>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005078:	d10c      	bne.n	8005094 <HAL_RCC_OscConfig+0xbc>
 800507a:	4b82      	ldr	r3, [pc, #520]	; (8005284 <HAL_RCC_OscConfig+0x2ac>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a81      	ldr	r2, [pc, #516]	; (8005284 <HAL_RCC_OscConfig+0x2ac>)
 8005080:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005084:	6013      	str	r3, [r2, #0]
 8005086:	4b7f      	ldr	r3, [pc, #508]	; (8005284 <HAL_RCC_OscConfig+0x2ac>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a7e      	ldr	r2, [pc, #504]	; (8005284 <HAL_RCC_OscConfig+0x2ac>)
 800508c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005090:	6013      	str	r3, [r2, #0]
 8005092:	e00b      	b.n	80050ac <HAL_RCC_OscConfig+0xd4>
 8005094:	4b7b      	ldr	r3, [pc, #492]	; (8005284 <HAL_RCC_OscConfig+0x2ac>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a7a      	ldr	r2, [pc, #488]	; (8005284 <HAL_RCC_OscConfig+0x2ac>)
 800509a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800509e:	6013      	str	r3, [r2, #0]
 80050a0:	4b78      	ldr	r3, [pc, #480]	; (8005284 <HAL_RCC_OscConfig+0x2ac>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a77      	ldr	r2, [pc, #476]	; (8005284 <HAL_RCC_OscConfig+0x2ac>)
 80050a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d013      	beq.n	80050dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b4:	f7fc fc4a 	bl	800194c <HAL_GetTick>
 80050b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050ba:	e008      	b.n	80050ce <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050bc:	f7fc fc46 	bl	800194c <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b64      	cmp	r3, #100	; 0x64
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e352      	b.n	8005774 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050ce:	4b6d      	ldr	r3, [pc, #436]	; (8005284 <HAL_RCC_OscConfig+0x2ac>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d0f0      	beq.n	80050bc <HAL_RCC_OscConfig+0xe4>
 80050da:	e014      	b.n	8005106 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050dc:	f7fc fc36 	bl	800194c <HAL_GetTick>
 80050e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80050e2:	e008      	b.n	80050f6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050e4:	f7fc fc32 	bl	800194c <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	2b64      	cmp	r3, #100	; 0x64
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e33e      	b.n	8005774 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80050f6:	4b63      	ldr	r3, [pc, #396]	; (8005284 <HAL_RCC_OscConfig+0x2ac>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1f0      	bne.n	80050e4 <HAL_RCC_OscConfig+0x10c>
 8005102:	e000      	b.n	8005106 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005104:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	f000 8092 	beq.w	8005238 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005114:	4b5b      	ldr	r3, [pc, #364]	; (8005284 <HAL_RCC_OscConfig+0x2ac>)
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800511c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800511e:	4b59      	ldr	r3, [pc, #356]	; (8005284 <HAL_RCC_OscConfig+0x2ac>)
 8005120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005122:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005124:	6a3b      	ldr	r3, [r7, #32]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d007      	beq.n	800513a <HAL_RCC_OscConfig+0x162>
 800512a:	6a3b      	ldr	r3, [r7, #32]
 800512c:	2b18      	cmp	r3, #24
 800512e:	d12d      	bne.n	800518c <HAL_RCC_OscConfig+0x1b4>
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	f003 0303 	and.w	r3, r3, #3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d128      	bne.n	800518c <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800513a:	4b52      	ldr	r3, [pc, #328]	; (8005284 <HAL_RCC_OscConfig+0x2ac>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0304 	and.w	r3, r3, #4
 8005142:	2b00      	cmp	r3, #0
 8005144:	d005      	beq.n	8005152 <HAL_RCC_OscConfig+0x17a>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e310      	b.n	8005774 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005152:	f7fc fc29 	bl	80019a8 <HAL_GetREVID>
 8005156:	4602      	mov	r2, r0
 8005158:	f241 0303 	movw	r3, #4099	; 0x1003
 800515c:	429a      	cmp	r2, r3
 800515e:	d80a      	bhi.n	8005176 <HAL_RCC_OscConfig+0x19e>
 8005160:	4b48      	ldr	r3, [pc, #288]	; (8005284 <HAL_RCC_OscConfig+0x2ac>)
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	031b      	lsls	r3, r3, #12
 800516e:	4945      	ldr	r1, [pc, #276]	; (8005284 <HAL_RCC_OscConfig+0x2ac>)
 8005170:	4313      	orrs	r3, r2
 8005172:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005174:	e060      	b.n	8005238 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005176:	4b43      	ldr	r3, [pc, #268]	; (8005284 <HAL_RCC_OscConfig+0x2ac>)
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	061b      	lsls	r3, r3, #24
 8005184:	493f      	ldr	r1, [pc, #252]	; (8005284 <HAL_RCC_OscConfig+0x2ac>)
 8005186:	4313      	orrs	r3, r2
 8005188:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800518a:	e055      	b.n	8005238 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d038      	beq.n	8005206 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005194:	4b3b      	ldr	r3, [pc, #236]	; (8005284 <HAL_RCC_OscConfig+0x2ac>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f023 0219 	bic.w	r2, r3, #25
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	4938      	ldr	r1, [pc, #224]	; (8005284 <HAL_RCC_OscConfig+0x2ac>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a6:	f7fc fbd1 	bl	800194c <HAL_GetTick>
 80051aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051ac:	e008      	b.n	80051c0 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051ae:	f7fc fbcd 	bl	800194c <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d901      	bls.n	80051c0 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e2d9      	b.n	8005774 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051c0:	4b30      	ldr	r3, [pc, #192]	; (8005284 <HAL_RCC_OscConfig+0x2ac>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0304 	and.w	r3, r3, #4
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d0f0      	beq.n	80051ae <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051cc:	f7fc fbec 	bl	80019a8 <HAL_GetREVID>
 80051d0:	4602      	mov	r2, r0
 80051d2:	f241 0303 	movw	r3, #4099	; 0x1003
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d80a      	bhi.n	80051f0 <HAL_RCC_OscConfig+0x218>
 80051da:	4b2a      	ldr	r3, [pc, #168]	; (8005284 <HAL_RCC_OscConfig+0x2ac>)
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	031b      	lsls	r3, r3, #12
 80051e8:	4926      	ldr	r1, [pc, #152]	; (8005284 <HAL_RCC_OscConfig+0x2ac>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	604b      	str	r3, [r1, #4]
 80051ee:	e023      	b.n	8005238 <HAL_RCC_OscConfig+0x260>
 80051f0:	4b24      	ldr	r3, [pc, #144]	; (8005284 <HAL_RCC_OscConfig+0x2ac>)
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	061b      	lsls	r3, r3, #24
 80051fe:	4921      	ldr	r1, [pc, #132]	; (8005284 <HAL_RCC_OscConfig+0x2ac>)
 8005200:	4313      	orrs	r3, r2
 8005202:	604b      	str	r3, [r1, #4]
 8005204:	e018      	b.n	8005238 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005206:	4b1f      	ldr	r3, [pc, #124]	; (8005284 <HAL_RCC_OscConfig+0x2ac>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a1e      	ldr	r2, [pc, #120]	; (8005284 <HAL_RCC_OscConfig+0x2ac>)
 800520c:	f023 0301 	bic.w	r3, r3, #1
 8005210:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005212:	f7fc fb9b 	bl	800194c <HAL_GetTick>
 8005216:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005218:	e008      	b.n	800522c <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800521a:	f7fc fb97 	bl	800194c <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	2b02      	cmp	r3, #2
 8005226:	d901      	bls.n	800522c <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e2a3      	b.n	8005774 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800522c:	4b15      	ldr	r3, [pc, #84]	; (8005284 <HAL_RCC_OscConfig+0x2ac>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1f0      	bne.n	800521a <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0310 	and.w	r3, r3, #16
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 8091 	beq.w	8005368 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005246:	4b0f      	ldr	r3, [pc, #60]	; (8005284 <HAL_RCC_OscConfig+0x2ac>)
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800524e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005250:	4b0c      	ldr	r3, [pc, #48]	; (8005284 <HAL_RCC_OscConfig+0x2ac>)
 8005252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005254:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	2b08      	cmp	r3, #8
 800525a:	d007      	beq.n	800526c <HAL_RCC_OscConfig+0x294>
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	2b18      	cmp	r3, #24
 8005260:	d12f      	bne.n	80052c2 <HAL_RCC_OscConfig+0x2ea>
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f003 0303 	and.w	r3, r3, #3
 8005268:	2b01      	cmp	r3, #1
 800526a:	d12a      	bne.n	80052c2 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800526c:	4b05      	ldr	r3, [pc, #20]	; (8005284 <HAL_RCC_OscConfig+0x2ac>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005274:	2b00      	cmp	r3, #0
 8005276:	d007      	beq.n	8005288 <HAL_RCC_OscConfig+0x2b0>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	69db      	ldr	r3, [r3, #28]
 800527c:	2b80      	cmp	r3, #128	; 0x80
 800527e:	d003      	beq.n	8005288 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e277      	b.n	8005774 <HAL_RCC_OscConfig+0x79c>
 8005284:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005288:	f7fc fb8e 	bl	80019a8 <HAL_GetREVID>
 800528c:	4602      	mov	r2, r0
 800528e:	f241 0303 	movw	r3, #4099	; 0x1003
 8005292:	429a      	cmp	r2, r3
 8005294:	d80a      	bhi.n	80052ac <HAL_RCC_OscConfig+0x2d4>
 8005296:	4ba2      	ldr	r3, [pc, #648]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	069b      	lsls	r3, r3, #26
 80052a4:	499e      	ldr	r1, [pc, #632]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80052aa:	e05d      	b.n	8005368 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80052ac:	4b9c      	ldr	r3, [pc, #624]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	061b      	lsls	r3, r3, #24
 80052ba:	4999      	ldr	r1, [pc, #612]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80052c0:	e052      	b.n	8005368 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d035      	beq.n	8005336 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80052ca:	4b95      	ldr	r3, [pc, #596]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a94      	ldr	r2, [pc, #592]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 80052d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d6:	f7fc fb39 	bl	800194c <HAL_GetTick>
 80052da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80052dc:	e008      	b.n	80052f0 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80052de:	f7fc fb35 	bl	800194c <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d901      	bls.n	80052f0 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e241      	b.n	8005774 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80052f0:	4b8b      	ldr	r3, [pc, #556]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d0f0      	beq.n	80052de <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80052fc:	f7fc fb54 	bl	80019a8 <HAL_GetREVID>
 8005300:	4602      	mov	r2, r0
 8005302:	f241 0303 	movw	r3, #4099	; 0x1003
 8005306:	429a      	cmp	r2, r3
 8005308:	d80a      	bhi.n	8005320 <HAL_RCC_OscConfig+0x348>
 800530a:	4b85      	ldr	r3, [pc, #532]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	069b      	lsls	r3, r3, #26
 8005318:	4981      	ldr	r1, [pc, #516]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 800531a:	4313      	orrs	r3, r2
 800531c:	604b      	str	r3, [r1, #4]
 800531e:	e023      	b.n	8005368 <HAL_RCC_OscConfig+0x390>
 8005320:	4b7f      	ldr	r3, [pc, #508]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	061b      	lsls	r3, r3, #24
 800532e:	497c      	ldr	r1, [pc, #496]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 8005330:	4313      	orrs	r3, r2
 8005332:	60cb      	str	r3, [r1, #12]
 8005334:	e018      	b.n	8005368 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005336:	4b7a      	ldr	r3, [pc, #488]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a79      	ldr	r2, [pc, #484]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 800533c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005340:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005342:	f7fc fb03 	bl	800194c <HAL_GetTick>
 8005346:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005348:	e008      	b.n	800535c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800534a:	f7fc faff 	bl	800194c <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b02      	cmp	r3, #2
 8005356:	d901      	bls.n	800535c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e20b      	b.n	8005774 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800535c:	4b70      	ldr	r3, [pc, #448]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1f0      	bne.n	800534a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0308 	and.w	r3, r3, #8
 8005370:	2b00      	cmp	r3, #0
 8005372:	d036      	beq.n	80053e2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d019      	beq.n	80053b0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800537c:	4b68      	ldr	r3, [pc, #416]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 800537e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005380:	4a67      	ldr	r2, [pc, #412]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 8005382:	f043 0301 	orr.w	r3, r3, #1
 8005386:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005388:	f7fc fae0 	bl	800194c <HAL_GetTick>
 800538c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800538e:	e008      	b.n	80053a2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005390:	f7fc fadc 	bl	800194c <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	2b02      	cmp	r3, #2
 800539c:	d901      	bls.n	80053a2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e1e8      	b.n	8005774 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80053a2:	4b5f      	ldr	r3, [pc, #380]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 80053a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d0f0      	beq.n	8005390 <HAL_RCC_OscConfig+0x3b8>
 80053ae:	e018      	b.n	80053e2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053b0:	4b5b      	ldr	r3, [pc, #364]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 80053b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053b4:	4a5a      	ldr	r2, [pc, #360]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 80053b6:	f023 0301 	bic.w	r3, r3, #1
 80053ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053bc:	f7fc fac6 	bl	800194c <HAL_GetTick>
 80053c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80053c2:	e008      	b.n	80053d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053c4:	f7fc fac2 	bl	800194c <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e1ce      	b.n	8005774 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80053d6:	4b52      	ldr	r3, [pc, #328]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 80053d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1f0      	bne.n	80053c4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0320 	and.w	r3, r3, #32
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d036      	beq.n	800545c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d019      	beq.n	800542a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80053f6:	4b4a      	ldr	r3, [pc, #296]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a49      	ldr	r2, [pc, #292]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 80053fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005400:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005402:	f7fc faa3 	bl	800194c <HAL_GetTick>
 8005406:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005408:	e008      	b.n	800541c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800540a:	f7fc fa9f 	bl	800194c <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b02      	cmp	r3, #2
 8005416:	d901      	bls.n	800541c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e1ab      	b.n	8005774 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800541c:	4b40      	ldr	r3, [pc, #256]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d0f0      	beq.n	800540a <HAL_RCC_OscConfig+0x432>
 8005428:	e018      	b.n	800545c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800542a:	4b3d      	ldr	r3, [pc, #244]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a3c      	ldr	r2, [pc, #240]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 8005430:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005434:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005436:	f7fc fa89 	bl	800194c <HAL_GetTick>
 800543a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800543c:	e008      	b.n	8005450 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800543e:	f7fc fa85 	bl	800194c <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	2b02      	cmp	r3, #2
 800544a:	d901      	bls.n	8005450 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e191      	b.n	8005774 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005450:	4b33      	ldr	r3, [pc, #204]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1f0      	bne.n	800543e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0304 	and.w	r3, r3, #4
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 8086 	beq.w	8005576 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800546a:	4b2e      	ldr	r3, [pc, #184]	; (8005524 <HAL_RCC_OscConfig+0x54c>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a2d      	ldr	r2, [pc, #180]	; (8005524 <HAL_RCC_OscConfig+0x54c>)
 8005470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005474:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005476:	f7fc fa69 	bl	800194c <HAL_GetTick>
 800547a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800547c:	e008      	b.n	8005490 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800547e:	f7fc fa65 	bl	800194c <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	2b64      	cmp	r3, #100	; 0x64
 800548a:	d901      	bls.n	8005490 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e171      	b.n	8005774 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005490:	4b24      	ldr	r3, [pc, #144]	; (8005524 <HAL_RCC_OscConfig+0x54c>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005498:	2b00      	cmp	r3, #0
 800549a:	d0f0      	beq.n	800547e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d106      	bne.n	80054b2 <HAL_RCC_OscConfig+0x4da>
 80054a4:	4b1e      	ldr	r3, [pc, #120]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 80054a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a8:	4a1d      	ldr	r2, [pc, #116]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 80054aa:	f043 0301 	orr.w	r3, r3, #1
 80054ae:	6713      	str	r3, [r2, #112]	; 0x70
 80054b0:	e02d      	b.n	800550e <HAL_RCC_OscConfig+0x536>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10c      	bne.n	80054d4 <HAL_RCC_OscConfig+0x4fc>
 80054ba:	4b19      	ldr	r3, [pc, #100]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 80054bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054be:	4a18      	ldr	r2, [pc, #96]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 80054c0:	f023 0301 	bic.w	r3, r3, #1
 80054c4:	6713      	str	r3, [r2, #112]	; 0x70
 80054c6:	4b16      	ldr	r3, [pc, #88]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 80054c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ca:	4a15      	ldr	r2, [pc, #84]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 80054cc:	f023 0304 	bic.w	r3, r3, #4
 80054d0:	6713      	str	r3, [r2, #112]	; 0x70
 80054d2:	e01c      	b.n	800550e <HAL_RCC_OscConfig+0x536>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	2b05      	cmp	r3, #5
 80054da:	d10c      	bne.n	80054f6 <HAL_RCC_OscConfig+0x51e>
 80054dc:	4b10      	ldr	r3, [pc, #64]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 80054de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e0:	4a0f      	ldr	r2, [pc, #60]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 80054e2:	f043 0304 	orr.w	r3, r3, #4
 80054e6:	6713      	str	r3, [r2, #112]	; 0x70
 80054e8:	4b0d      	ldr	r3, [pc, #52]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 80054ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ec:	4a0c      	ldr	r2, [pc, #48]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 80054ee:	f043 0301 	orr.w	r3, r3, #1
 80054f2:	6713      	str	r3, [r2, #112]	; 0x70
 80054f4:	e00b      	b.n	800550e <HAL_RCC_OscConfig+0x536>
 80054f6:	4b0a      	ldr	r3, [pc, #40]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 80054f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fa:	4a09      	ldr	r2, [pc, #36]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 80054fc:	f023 0301 	bic.w	r3, r3, #1
 8005500:	6713      	str	r3, [r2, #112]	; 0x70
 8005502:	4b07      	ldr	r3, [pc, #28]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 8005504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005506:	4a06      	ldr	r2, [pc, #24]	; (8005520 <HAL_RCC_OscConfig+0x548>)
 8005508:	f023 0304 	bic.w	r3, r3, #4
 800550c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d01a      	beq.n	800554c <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005516:	f7fc fa19 	bl	800194c <HAL_GetTick>
 800551a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800551c:	e00f      	b.n	800553e <HAL_RCC_OscConfig+0x566>
 800551e:	bf00      	nop
 8005520:	58024400 	.word	0x58024400
 8005524:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005528:	f7fc fa10 	bl	800194c <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	f241 3288 	movw	r2, #5000	; 0x1388
 8005536:	4293      	cmp	r3, r2
 8005538:	d901      	bls.n	800553e <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e11a      	b.n	8005774 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800553e:	4b8f      	ldr	r3, [pc, #572]	; (800577c <HAL_RCC_OscConfig+0x7a4>)
 8005540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d0ee      	beq.n	8005528 <HAL_RCC_OscConfig+0x550>
 800554a:	e014      	b.n	8005576 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800554c:	f7fc f9fe 	bl	800194c <HAL_GetTick>
 8005550:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005552:	e00a      	b.n	800556a <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005554:	f7fc f9fa 	bl	800194c <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005562:	4293      	cmp	r3, r2
 8005564:	d901      	bls.n	800556a <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e104      	b.n	8005774 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800556a:	4b84      	ldr	r3, [pc, #528]	; (800577c <HAL_RCC_OscConfig+0x7a4>)
 800556c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1ee      	bne.n	8005554 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557a:	2b00      	cmp	r3, #0
 800557c:	f000 80f9 	beq.w	8005772 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005580:	4b7e      	ldr	r3, [pc, #504]	; (800577c <HAL_RCC_OscConfig+0x7a4>)
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005588:	2b18      	cmp	r3, #24
 800558a:	f000 80b4 	beq.w	80056f6 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005592:	2b02      	cmp	r3, #2
 8005594:	f040 8095 	bne.w	80056c2 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005598:	4b78      	ldr	r3, [pc, #480]	; (800577c <HAL_RCC_OscConfig+0x7a4>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a77      	ldr	r2, [pc, #476]	; (800577c <HAL_RCC_OscConfig+0x7a4>)
 800559e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a4:	f7fc f9d2 	bl	800194c <HAL_GetTick>
 80055a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055aa:	e008      	b.n	80055be <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055ac:	f7fc f9ce 	bl	800194c <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e0da      	b.n	8005774 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055be:	4b6f      	ldr	r3, [pc, #444]	; (800577c <HAL_RCC_OscConfig+0x7a4>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1f0      	bne.n	80055ac <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055ca:	4b6c      	ldr	r3, [pc, #432]	; (800577c <HAL_RCC_OscConfig+0x7a4>)
 80055cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055ce:	4b6c      	ldr	r3, [pc, #432]	; (8005780 <HAL_RCC_OscConfig+0x7a8>)
 80055d0:	4013      	ands	r3, r2
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80055da:	0112      	lsls	r2, r2, #4
 80055dc:	430a      	orrs	r2, r1
 80055de:	4967      	ldr	r1, [pc, #412]	; (800577c <HAL_RCC_OscConfig+0x7a4>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	628b      	str	r3, [r1, #40]	; 0x28
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e8:	3b01      	subs	r3, #1
 80055ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f2:	3b01      	subs	r3, #1
 80055f4:	025b      	lsls	r3, r3, #9
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	431a      	orrs	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fe:	3b01      	subs	r3, #1
 8005600:	041b      	lsls	r3, r3, #16
 8005602:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005606:	431a      	orrs	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800560c:	3b01      	subs	r3, #1
 800560e:	061b      	lsls	r3, r3, #24
 8005610:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005614:	4959      	ldr	r1, [pc, #356]	; (800577c <HAL_RCC_OscConfig+0x7a4>)
 8005616:	4313      	orrs	r3, r2
 8005618:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800561a:	4b58      	ldr	r3, [pc, #352]	; (800577c <HAL_RCC_OscConfig+0x7a4>)
 800561c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561e:	4a57      	ldr	r2, [pc, #348]	; (800577c <HAL_RCC_OscConfig+0x7a4>)
 8005620:	f023 0301 	bic.w	r3, r3, #1
 8005624:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005626:	4b55      	ldr	r3, [pc, #340]	; (800577c <HAL_RCC_OscConfig+0x7a4>)
 8005628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800562a:	4b56      	ldr	r3, [pc, #344]	; (8005784 <HAL_RCC_OscConfig+0x7ac>)
 800562c:	4013      	ands	r3, r2
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005632:	00d2      	lsls	r2, r2, #3
 8005634:	4951      	ldr	r1, [pc, #324]	; (800577c <HAL_RCC_OscConfig+0x7a4>)
 8005636:	4313      	orrs	r3, r2
 8005638:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800563a:	4b50      	ldr	r3, [pc, #320]	; (800577c <HAL_RCC_OscConfig+0x7a4>)
 800563c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563e:	f023 020c 	bic.w	r2, r3, #12
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005646:	494d      	ldr	r1, [pc, #308]	; (800577c <HAL_RCC_OscConfig+0x7a4>)
 8005648:	4313      	orrs	r3, r2
 800564a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800564c:	4b4b      	ldr	r3, [pc, #300]	; (800577c <HAL_RCC_OscConfig+0x7a4>)
 800564e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005650:	f023 0202 	bic.w	r2, r3, #2
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005658:	4948      	ldr	r1, [pc, #288]	; (800577c <HAL_RCC_OscConfig+0x7a4>)
 800565a:	4313      	orrs	r3, r2
 800565c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800565e:	4b47      	ldr	r3, [pc, #284]	; (800577c <HAL_RCC_OscConfig+0x7a4>)
 8005660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005662:	4a46      	ldr	r2, [pc, #280]	; (800577c <HAL_RCC_OscConfig+0x7a4>)
 8005664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005668:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800566a:	4b44      	ldr	r3, [pc, #272]	; (800577c <HAL_RCC_OscConfig+0x7a4>)
 800566c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566e:	4a43      	ldr	r2, [pc, #268]	; (800577c <HAL_RCC_OscConfig+0x7a4>)
 8005670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005674:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005676:	4b41      	ldr	r3, [pc, #260]	; (800577c <HAL_RCC_OscConfig+0x7a4>)
 8005678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567a:	4a40      	ldr	r2, [pc, #256]	; (800577c <HAL_RCC_OscConfig+0x7a4>)
 800567c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005680:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005682:	4b3e      	ldr	r3, [pc, #248]	; (800577c <HAL_RCC_OscConfig+0x7a4>)
 8005684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005686:	4a3d      	ldr	r2, [pc, #244]	; (800577c <HAL_RCC_OscConfig+0x7a4>)
 8005688:	f043 0301 	orr.w	r3, r3, #1
 800568c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800568e:	4b3b      	ldr	r3, [pc, #236]	; (800577c <HAL_RCC_OscConfig+0x7a4>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a3a      	ldr	r2, [pc, #232]	; (800577c <HAL_RCC_OscConfig+0x7a4>)
 8005694:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005698:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800569a:	f7fc f957 	bl	800194c <HAL_GetTick>
 800569e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80056a0:	e008      	b.n	80056b4 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056a2:	f7fc f953 	bl	800194c <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d901      	bls.n	80056b4 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e05f      	b.n	8005774 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80056b4:	4b31      	ldr	r3, [pc, #196]	; (800577c <HAL_RCC_OscConfig+0x7a4>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d0f0      	beq.n	80056a2 <HAL_RCC_OscConfig+0x6ca>
 80056c0:	e057      	b.n	8005772 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056c2:	4b2e      	ldr	r3, [pc, #184]	; (800577c <HAL_RCC_OscConfig+0x7a4>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a2d      	ldr	r2, [pc, #180]	; (800577c <HAL_RCC_OscConfig+0x7a4>)
 80056c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ce:	f7fc f93d 	bl	800194c <HAL_GetTick>
 80056d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056d4:	e008      	b.n	80056e8 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056d6:	f7fc f939 	bl	800194c <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d901      	bls.n	80056e8 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e045      	b.n	8005774 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056e8:	4b24      	ldr	r3, [pc, #144]	; (800577c <HAL_RCC_OscConfig+0x7a4>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1f0      	bne.n	80056d6 <HAL_RCC_OscConfig+0x6fe>
 80056f4:	e03d      	b.n	8005772 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80056f6:	4b21      	ldr	r3, [pc, #132]	; (800577c <HAL_RCC_OscConfig+0x7a4>)
 80056f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fa:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80056fc:	4b1f      	ldr	r3, [pc, #124]	; (800577c <HAL_RCC_OscConfig+0x7a4>)
 80056fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005700:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005706:	2b01      	cmp	r3, #1
 8005708:	d031      	beq.n	800576e <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	f003 0203 	and.w	r2, r3, #3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005714:	429a      	cmp	r2, r3
 8005716:	d12a      	bne.n	800576e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	091b      	lsrs	r3, r3, #4
 800571c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005724:	429a      	cmp	r2, r3
 8005726:	d122      	bne.n	800576e <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005732:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005734:	429a      	cmp	r2, r3
 8005736:	d11a      	bne.n	800576e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	0a5b      	lsrs	r3, r3, #9
 800573c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005744:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005746:	429a      	cmp	r2, r3
 8005748:	d111      	bne.n	800576e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	0c1b      	lsrs	r3, r3, #16
 800574e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005756:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005758:	429a      	cmp	r2, r3
 800575a:	d108      	bne.n	800576e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	0e1b      	lsrs	r3, r3, #24
 8005760:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005768:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800576a:	429a      	cmp	r2, r3
 800576c:	d001      	beq.n	8005772 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e000      	b.n	8005774 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3730      	adds	r7, #48	; 0x30
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	58024400 	.word	0x58024400
 8005780:	fffffc0c 	.word	0xfffffc0c
 8005784:	ffff0007 	.word	0xffff0007

08005788 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e19c      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800579c:	4b8a      	ldr	r3, [pc, #552]	; (80059c8 <HAL_RCC_ClockConfig+0x240>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 030f 	and.w	r3, r3, #15
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d910      	bls.n	80057cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057aa:	4b87      	ldr	r3, [pc, #540]	; (80059c8 <HAL_RCC_ClockConfig+0x240>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f023 020f 	bic.w	r2, r3, #15
 80057b2:	4985      	ldr	r1, [pc, #532]	; (80059c8 <HAL_RCC_ClockConfig+0x240>)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ba:	4b83      	ldr	r3, [pc, #524]	; (80059c8 <HAL_RCC_ClockConfig+0x240>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 030f 	and.w	r3, r3, #15
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d001      	beq.n	80057cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e184      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0304 	and.w	r3, r3, #4
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d010      	beq.n	80057fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	691a      	ldr	r2, [r3, #16]
 80057dc:	4b7b      	ldr	r3, [pc, #492]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d908      	bls.n	80057fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80057e8:	4b78      	ldr	r3, [pc, #480]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	4975      	ldr	r1, [pc, #468]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0308 	and.w	r3, r3, #8
 8005802:	2b00      	cmp	r3, #0
 8005804:	d010      	beq.n	8005828 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	695a      	ldr	r2, [r3, #20]
 800580a:	4b70      	ldr	r3, [pc, #448]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 800580c:	69db      	ldr	r3, [r3, #28]
 800580e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005812:	429a      	cmp	r2, r3
 8005814:	d908      	bls.n	8005828 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005816:	4b6d      	ldr	r3, [pc, #436]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	496a      	ldr	r1, [pc, #424]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 8005824:	4313      	orrs	r3, r2
 8005826:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0310 	and.w	r3, r3, #16
 8005830:	2b00      	cmp	r3, #0
 8005832:	d010      	beq.n	8005856 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	699a      	ldr	r2, [r3, #24]
 8005838:	4b64      	ldr	r3, [pc, #400]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 800583a:	69db      	ldr	r3, [r3, #28]
 800583c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005840:	429a      	cmp	r2, r3
 8005842:	d908      	bls.n	8005856 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005844:	4b61      	ldr	r3, [pc, #388]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 8005846:	69db      	ldr	r3, [r3, #28]
 8005848:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	495e      	ldr	r1, [pc, #376]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 8005852:	4313      	orrs	r3, r2
 8005854:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0320 	and.w	r3, r3, #32
 800585e:	2b00      	cmp	r3, #0
 8005860:	d010      	beq.n	8005884 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	69da      	ldr	r2, [r3, #28]
 8005866:	4b59      	ldr	r3, [pc, #356]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800586e:	429a      	cmp	r2, r3
 8005870:	d908      	bls.n	8005884 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005872:	4b56      	ldr	r3, [pc, #344]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	69db      	ldr	r3, [r3, #28]
 800587e:	4953      	ldr	r1, [pc, #332]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 8005880:	4313      	orrs	r3, r2
 8005882:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d010      	beq.n	80058b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	68da      	ldr	r2, [r3, #12]
 8005894:	4b4d      	ldr	r3, [pc, #308]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	f003 030f 	and.w	r3, r3, #15
 800589c:	429a      	cmp	r2, r3
 800589e:	d908      	bls.n	80058b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058a0:	4b4a      	ldr	r3, [pc, #296]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	f023 020f 	bic.w	r2, r3, #15
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	4947      	ldr	r1, [pc, #284]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0301 	and.w	r3, r3, #1
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d055      	beq.n	800596a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80058be:	4b43      	ldr	r3, [pc, #268]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	4940      	ldr	r1, [pc, #256]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d107      	bne.n	80058e8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80058d8:	4b3c      	ldr	r3, [pc, #240]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d121      	bne.n	8005928 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e0f6      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	2b03      	cmp	r3, #3
 80058ee:	d107      	bne.n	8005900 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80058f0:	4b36      	ldr	r3, [pc, #216]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d115      	bne.n	8005928 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e0ea      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d107      	bne.n	8005918 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005908:	4b30      	ldr	r3, [pc, #192]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005910:	2b00      	cmp	r3, #0
 8005912:	d109      	bne.n	8005928 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e0de      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005918:	4b2c      	ldr	r3, [pc, #176]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0304 	and.w	r3, r3, #4
 8005920:	2b00      	cmp	r3, #0
 8005922:	d101      	bne.n	8005928 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e0d6      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005928:	4b28      	ldr	r3, [pc, #160]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	f023 0207 	bic.w	r2, r3, #7
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	4925      	ldr	r1, [pc, #148]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 8005936:	4313      	orrs	r3, r2
 8005938:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800593a:	f7fc f807 	bl	800194c <HAL_GetTick>
 800593e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005940:	e00a      	b.n	8005958 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005942:	f7fc f803 	bl	800194c <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005950:	4293      	cmp	r3, r2
 8005952:	d901      	bls.n	8005958 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e0be      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005958:	4b1c      	ldr	r3, [pc, #112]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	00db      	lsls	r3, r3, #3
 8005966:	429a      	cmp	r2, r3
 8005968:	d1eb      	bne.n	8005942 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d010      	beq.n	8005998 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68da      	ldr	r2, [r3, #12]
 800597a:	4b14      	ldr	r3, [pc, #80]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	f003 030f 	and.w	r3, r3, #15
 8005982:	429a      	cmp	r2, r3
 8005984:	d208      	bcs.n	8005998 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005986:	4b11      	ldr	r3, [pc, #68]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	f023 020f 	bic.w	r2, r3, #15
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	490e      	ldr	r1, [pc, #56]	; (80059cc <HAL_RCC_ClockConfig+0x244>)
 8005994:	4313      	orrs	r3, r2
 8005996:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005998:	4b0b      	ldr	r3, [pc, #44]	; (80059c8 <HAL_RCC_ClockConfig+0x240>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 030f 	and.w	r3, r3, #15
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d214      	bcs.n	80059d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059a6:	4b08      	ldr	r3, [pc, #32]	; (80059c8 <HAL_RCC_ClockConfig+0x240>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f023 020f 	bic.w	r2, r3, #15
 80059ae:	4906      	ldr	r1, [pc, #24]	; (80059c8 <HAL_RCC_ClockConfig+0x240>)
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059b6:	4b04      	ldr	r3, [pc, #16]	; (80059c8 <HAL_RCC_ClockConfig+0x240>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 030f 	and.w	r3, r3, #15
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d005      	beq.n	80059d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e086      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x34e>
 80059c8:	52002000 	.word	0x52002000
 80059cc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0304 	and.w	r3, r3, #4
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d010      	beq.n	80059fe <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	691a      	ldr	r2, [r3, #16]
 80059e0:	4b3f      	ldr	r3, [pc, #252]	; (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d208      	bcs.n	80059fe <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80059ec:	4b3c      	ldr	r3, [pc, #240]	; (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	4939      	ldr	r1, [pc, #228]	; (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0308 	and.w	r3, r3, #8
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d010      	beq.n	8005a2c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	695a      	ldr	r2, [r3, #20]
 8005a0e:	4b34      	ldr	r3, [pc, #208]	; (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d208      	bcs.n	8005a2c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a1a:	4b31      	ldr	r3, [pc, #196]	; (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	492e      	ldr	r1, [pc, #184]	; (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0310 	and.w	r3, r3, #16
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d010      	beq.n	8005a5a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	699a      	ldr	r2, [r3, #24]
 8005a3c:	4b28      	ldr	r3, [pc, #160]	; (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 8005a3e:	69db      	ldr	r3, [r3, #28]
 8005a40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d208      	bcs.n	8005a5a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a48:	4b25      	ldr	r3, [pc, #148]	; (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 8005a4a:	69db      	ldr	r3, [r3, #28]
 8005a4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	4922      	ldr	r1, [pc, #136]	; (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0320 	and.w	r3, r3, #32
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d010      	beq.n	8005a88 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	69da      	ldr	r2, [r3, #28]
 8005a6a:	4b1d      	ldr	r3, [pc, #116]	; (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d208      	bcs.n	8005a88 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005a76:	4b1a      	ldr	r3, [pc, #104]	; (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	4917      	ldr	r1, [pc, #92]	; (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005a88:	f000 f834 	bl	8005af4 <HAL_RCC_GetSysClockFreq>
 8005a8c:	4601      	mov	r1, r0
 8005a8e:	4b14      	ldr	r3, [pc, #80]	; (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	0a1b      	lsrs	r3, r3, #8
 8005a94:	f003 030f 	and.w	r3, r3, #15
 8005a98:	4a12      	ldr	r2, [pc, #72]	; (8005ae4 <HAL_RCC_ClockConfig+0x35c>)
 8005a9a:	5cd3      	ldrb	r3, [r2, r3]
 8005a9c:	f003 031f 	and.w	r3, r3, #31
 8005aa0:	fa21 f303 	lsr.w	r3, r1, r3
 8005aa4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005aa6:	4b0e      	ldr	r3, [pc, #56]	; (8005ae0 <HAL_RCC_ClockConfig+0x358>)
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	f003 030f 	and.w	r3, r3, #15
 8005aae:	4a0d      	ldr	r2, [pc, #52]	; (8005ae4 <HAL_RCC_ClockConfig+0x35c>)
 8005ab0:	5cd3      	ldrb	r3, [r2, r3]
 8005ab2:	f003 031f 	and.w	r3, r3, #31
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8005abc:	4a0a      	ldr	r2, [pc, #40]	; (8005ae8 <HAL_RCC_ClockConfig+0x360>)
 8005abe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ac0:	4a0a      	ldr	r2, [pc, #40]	; (8005aec <HAL_RCC_ClockConfig+0x364>)
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005ac6:	4b0a      	ldr	r3, [pc, #40]	; (8005af0 <HAL_RCC_ClockConfig+0x368>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7fb fef4 	bl	80018b8 <HAL_InitTick>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3718      	adds	r7, #24
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	58024400 	.word	0x58024400
 8005ae4:	08017334 	.word	0x08017334
 8005ae8:	24000004 	.word	0x24000004
 8005aec:	24000000 	.word	0x24000000
 8005af0:	24000008 	.word	0x24000008

08005af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b089      	sub	sp, #36	; 0x24
 8005af8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005afa:	4baf      	ldr	r3, [pc, #700]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b02:	2b18      	cmp	r3, #24
 8005b04:	f200 814e 	bhi.w	8005da4 <HAL_RCC_GetSysClockFreq+0x2b0>
 8005b08:	a201      	add	r2, pc, #4	; (adr r2, 8005b10 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0e:	bf00      	nop
 8005b10:	08005b75 	.word	0x08005b75
 8005b14:	08005da5 	.word	0x08005da5
 8005b18:	08005da5 	.word	0x08005da5
 8005b1c:	08005da5 	.word	0x08005da5
 8005b20:	08005da5 	.word	0x08005da5
 8005b24:	08005da5 	.word	0x08005da5
 8005b28:	08005da5 	.word	0x08005da5
 8005b2c:	08005da5 	.word	0x08005da5
 8005b30:	08005b9b 	.word	0x08005b9b
 8005b34:	08005da5 	.word	0x08005da5
 8005b38:	08005da5 	.word	0x08005da5
 8005b3c:	08005da5 	.word	0x08005da5
 8005b40:	08005da5 	.word	0x08005da5
 8005b44:	08005da5 	.word	0x08005da5
 8005b48:	08005da5 	.word	0x08005da5
 8005b4c:	08005da5 	.word	0x08005da5
 8005b50:	08005ba1 	.word	0x08005ba1
 8005b54:	08005da5 	.word	0x08005da5
 8005b58:	08005da5 	.word	0x08005da5
 8005b5c:	08005da5 	.word	0x08005da5
 8005b60:	08005da5 	.word	0x08005da5
 8005b64:	08005da5 	.word	0x08005da5
 8005b68:	08005da5 	.word	0x08005da5
 8005b6c:	08005da5 	.word	0x08005da5
 8005b70:	08005ba7 	.word	0x08005ba7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b74:	4b90      	ldr	r3, [pc, #576]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0320 	and.w	r3, r3, #32
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d009      	beq.n	8005b94 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b80:	4b8d      	ldr	r3, [pc, #564]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	08db      	lsrs	r3, r3, #3
 8005b86:	f003 0303 	and.w	r3, r3, #3
 8005b8a:	4a8c      	ldr	r2, [pc, #560]	; (8005dbc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b90:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005b92:	e10a      	b.n	8005daa <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005b94:	4b89      	ldr	r3, [pc, #548]	; (8005dbc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005b96:	61bb      	str	r3, [r7, #24]
    break;
 8005b98:	e107      	b.n	8005daa <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005b9a:	4b89      	ldr	r3, [pc, #548]	; (8005dc0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005b9c:	61bb      	str	r3, [r7, #24]
    break;
 8005b9e:	e104      	b.n	8005daa <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005ba0:	4b88      	ldr	r3, [pc, #544]	; (8005dc4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8005ba2:	61bb      	str	r3, [r7, #24]
    break;
 8005ba4:	e101      	b.n	8005daa <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ba6:	4b84      	ldr	r3, [pc, #528]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005baa:	f003 0303 	and.w	r3, r3, #3
 8005bae:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005bb0:	4b81      	ldr	r3, [pc, #516]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb4:	091b      	lsrs	r3, r3, #4
 8005bb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bba:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005bbc:	4b7e      	ldr	r3, [pc, #504]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc0:	f003 0301 	and.w	r3, r3, #1
 8005bc4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005bc6:	4b7c      	ldr	r3, [pc, #496]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bca:	08db      	lsrs	r3, r3, #3
 8005bcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	fb02 f303 	mul.w	r3, r2, r3
 8005bd6:	ee07 3a90 	vmov	s15, r3
 8005bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bde:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 80da 	beq.w	8005d9e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d05a      	beq.n	8005ca6 <HAL_RCC_GetSysClockFreq+0x1b2>
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d302      	bcc.n	8005bfa <HAL_RCC_GetSysClockFreq+0x106>
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d078      	beq.n	8005cea <HAL_RCC_GetSysClockFreq+0x1f6>
 8005bf8:	e099      	b.n	8005d2e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bfa:	4b6f      	ldr	r3, [pc, #444]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0320 	and.w	r3, r3, #32
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d02d      	beq.n	8005c62 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c06:	4b6c      	ldr	r3, [pc, #432]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	08db      	lsrs	r3, r3, #3
 8005c0c:	f003 0303 	and.w	r3, r3, #3
 8005c10:	4a6a      	ldr	r2, [pc, #424]	; (8005dbc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005c12:	fa22 f303 	lsr.w	r3, r2, r3
 8005c16:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	ee07 3a90 	vmov	s15, r3
 8005c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	ee07 3a90 	vmov	s15, r3
 8005c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c30:	4b61      	ldr	r3, [pc, #388]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c38:	ee07 3a90 	vmov	s15, r3
 8005c3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c40:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c44:	eddf 5a60 	vldr	s11, [pc, #384]	; 8005dc8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005c48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c5c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005c60:	e087      	b.n	8005d72 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	ee07 3a90 	vmov	s15, r3
 8005c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c6c:	eddf 6a57 	vldr	s13, [pc, #348]	; 8005dcc <HAL_RCC_GetSysClockFreq+0x2d8>
 8005c70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c74:	4b50      	ldr	r3, [pc, #320]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c7c:	ee07 3a90 	vmov	s15, r3
 8005c80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c84:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c88:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8005dc8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005c8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ca0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ca4:	e065      	b.n	8005d72 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	ee07 3a90 	vmov	s15, r3
 8005cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cb0:	eddf 6a47 	vldr	s13, [pc, #284]	; 8005dd0 <HAL_RCC_GetSysClockFreq+0x2dc>
 8005cb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cb8:	4b3f      	ldr	r3, [pc, #252]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cc0:	ee07 3a90 	vmov	s15, r3
 8005cc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cc8:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ccc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005dc8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005cd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ce0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ce4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ce8:	e043      	b.n	8005d72 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	ee07 3a90 	vmov	s15, r3
 8005cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cf4:	eddf 6a37 	vldr	s13, [pc, #220]	; 8005dd4 <HAL_RCC_GetSysClockFreq+0x2e0>
 8005cf8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cfc:	4b2e      	ldr	r3, [pc, #184]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d04:	ee07 3a90 	vmov	s15, r3
 8005d08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d0c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d10:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005dc8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005d14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d2c:	e021      	b.n	8005d72 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	ee07 3a90 	vmov	s15, r3
 8005d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d38:	eddf 6a25 	vldr	s13, [pc, #148]	; 8005dd0 <HAL_RCC_GetSysClockFreq+0x2dc>
 8005d3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d40:	4b1d      	ldr	r3, [pc, #116]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d48:	ee07 3a90 	vmov	s15, r3
 8005d4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d50:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d54:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8005dc8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005d58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d6c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d70:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005d72:	4b11      	ldr	r3, [pc, #68]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d76:	0a5b      	lsrs	r3, r3, #9
 8005d78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	ee07 3a90 	vmov	s15, r3
 8005d86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d96:	ee17 3a90 	vmov	r3, s15
 8005d9a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005d9c:	e005      	b.n	8005daa <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	61bb      	str	r3, [r7, #24]
    break;
 8005da2:	e002      	b.n	8005daa <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8005da4:	4b06      	ldr	r3, [pc, #24]	; (8005dc0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005da6:	61bb      	str	r3, [r7, #24]
    break;
 8005da8:	bf00      	nop
  }

  return sysclockfreq;
 8005daa:	69bb      	ldr	r3, [r7, #24]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3724      	adds	r7, #36	; 0x24
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	58024400 	.word	0x58024400
 8005dbc:	03d09000 	.word	0x03d09000
 8005dc0:	003d0900 	.word	0x003d0900
 8005dc4:	007a1200 	.word	0x007a1200
 8005dc8:	46000000 	.word	0x46000000
 8005dcc:	4c742400 	.word	0x4c742400
 8005dd0:	4a742400 	.word	0x4a742400
 8005dd4:	4af42400 	.word	0x4af42400

08005dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005dde:	f7ff fe89 	bl	8005af4 <HAL_RCC_GetSysClockFreq>
 8005de2:	4601      	mov	r1, r0
 8005de4:	4b10      	ldr	r3, [pc, #64]	; (8005e28 <HAL_RCC_GetHCLKFreq+0x50>)
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	0a1b      	lsrs	r3, r3, #8
 8005dea:	f003 030f 	and.w	r3, r3, #15
 8005dee:	4a0f      	ldr	r2, [pc, #60]	; (8005e2c <HAL_RCC_GetHCLKFreq+0x54>)
 8005df0:	5cd3      	ldrb	r3, [r2, r3]
 8005df2:	f003 031f 	and.w	r3, r3, #31
 8005df6:	fa21 f303 	lsr.w	r3, r1, r3
 8005dfa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005dfc:	4b0a      	ldr	r3, [pc, #40]	; (8005e28 <HAL_RCC_GetHCLKFreq+0x50>)
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	f003 030f 	and.w	r3, r3, #15
 8005e04:	4a09      	ldr	r2, [pc, #36]	; (8005e2c <HAL_RCC_GetHCLKFreq+0x54>)
 8005e06:	5cd3      	ldrb	r3, [r2, r3]
 8005e08:	f003 031f 	and.w	r3, r3, #31
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e12:	4a07      	ldr	r2, [pc, #28]	; (8005e30 <HAL_RCC_GetHCLKFreq+0x58>)
 8005e14:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e16:	4a07      	ldr	r2, [pc, #28]	; (8005e34 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005e1c:	4b04      	ldr	r3, [pc, #16]	; (8005e30 <HAL_RCC_GetHCLKFreq+0x58>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	58024400 	.word	0x58024400
 8005e2c:	08017334 	.word	0x08017334
 8005e30:	24000004 	.word	0x24000004
 8005e34:	24000000 	.word	0x24000000

08005e38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005e3c:	f7ff ffcc 	bl	8005dd8 <HAL_RCC_GetHCLKFreq>
 8005e40:	4601      	mov	r1, r0
 8005e42:	4b06      	ldr	r3, [pc, #24]	; (8005e5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	091b      	lsrs	r3, r3, #4
 8005e48:	f003 0307 	and.w	r3, r3, #7
 8005e4c:	4a04      	ldr	r2, [pc, #16]	; (8005e60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e4e:	5cd3      	ldrb	r3, [r2, r3]
 8005e50:	f003 031f 	and.w	r3, r3, #31
 8005e54:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	58024400 	.word	0x58024400
 8005e60:	08017334 	.word	0x08017334

08005e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005e68:	f7ff ffb6 	bl	8005dd8 <HAL_RCC_GetHCLKFreq>
 8005e6c:	4601      	mov	r1, r0
 8005e6e:	4b06      	ldr	r3, [pc, #24]	; (8005e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	0a1b      	lsrs	r3, r3, #8
 8005e74:	f003 0307 	and.w	r3, r3, #7
 8005e78:	4a04      	ldr	r2, [pc, #16]	; (8005e8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e7a:	5cd3      	ldrb	r3, [r2, r3]
 8005e7c:	f003 031f 	and.w	r3, r3, #31
 8005e80:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	58024400 	.word	0x58024400
 8005e8c:	08017334 	.word	0x08017334

08005e90 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e98:	2300      	movs	r3, #0
 8005e9a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d03d      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005eb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eb4:	d013      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005eb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eba:	d802      	bhi.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d007      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005ec0:	e01f      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8005ec2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ec6:	d013      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8005ec8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ecc:	d01c      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005ece:	e018      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ed0:	4baf      	ldr	r3, [pc, #700]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed4:	4aae      	ldr	r2, [pc, #696]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005ed6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005eda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005edc:	e015      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	3304      	adds	r3, #4
 8005ee2:	2102      	movs	r1, #2
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f001 fd23 	bl	8007930 <RCCEx_PLL2_Config>
 8005eea:	4603      	mov	r3, r0
 8005eec:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005eee:	e00c      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	3324      	adds	r3, #36	; 0x24
 8005ef4:	2102      	movs	r1, #2
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f001 fdcc 	bl	8007a94 <RCCEx_PLL3_Config>
 8005efc:	4603      	mov	r3, r0
 8005efe:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005f00:	e003      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	75fb      	strb	r3, [r7, #23]
      break;
 8005f06:	e000      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8005f08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f0a:	7dfb      	ldrb	r3, [r7, #23]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d109      	bne.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005f10:	4b9f      	ldr	r3, [pc, #636]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f1c:	499c      	ldr	r1, [pc, #624]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	650b      	str	r3, [r1, #80]	; 0x50
 8005f22:	e001      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f24:	7dfb      	ldrb	r3, [r7, #23]
 8005f26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d03d      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f38:	2b04      	cmp	r3, #4
 8005f3a:	d826      	bhi.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8005f3c:	a201      	add	r2, pc, #4	; (adr r2, 8005f44 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8005f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f42:	bf00      	nop
 8005f44:	08005f59 	.word	0x08005f59
 8005f48:	08005f67 	.word	0x08005f67
 8005f4c:	08005f79 	.word	0x08005f79
 8005f50:	08005f91 	.word	0x08005f91
 8005f54:	08005f91 	.word	0x08005f91
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f58:	4b8d      	ldr	r3, [pc, #564]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5c:	4a8c      	ldr	r2, [pc, #560]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005f64:	e015      	b.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	3304      	adds	r3, #4
 8005f6a:	2100      	movs	r1, #0
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f001 fcdf 	bl	8007930 <RCCEx_PLL2_Config>
 8005f72:	4603      	mov	r3, r0
 8005f74:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005f76:	e00c      	b.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	3324      	adds	r3, #36	; 0x24
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f001 fd88 	bl	8007a94 <RCCEx_PLL3_Config>
 8005f84:	4603      	mov	r3, r0
 8005f86:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005f88:	e003      	b.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	75fb      	strb	r3, [r7, #23]
      break;
 8005f8e:	e000      	b.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8005f90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f92:	7dfb      	ldrb	r3, [r7, #23]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d109      	bne.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f98:	4b7d      	ldr	r3, [pc, #500]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f9c:	f023 0207 	bic.w	r2, r3, #7
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa4:	497a      	ldr	r1, [pc, #488]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	650b      	str	r3, [r1, #80]	; 0x50
 8005faa:	e001      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fac:	7dfb      	ldrb	r3, [r7, #23]
 8005fae:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d03e      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fc0:	2b80      	cmp	r3, #128	; 0x80
 8005fc2:	d01c      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005fc4:	2b80      	cmp	r3, #128	; 0x80
 8005fc6:	d804      	bhi.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d008      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005fcc:	2b40      	cmp	r3, #64	; 0x40
 8005fce:	d00d      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005fd0:	e01e      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8005fd2:	2bc0      	cmp	r3, #192	; 0xc0
 8005fd4:	d01f      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005fd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fda:	d01e      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005fdc:	e018      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fde:	4b6c      	ldr	r3, [pc, #432]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe2:	4a6b      	ldr	r2, [pc, #428]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fe8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005fea:	e017      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	3304      	adds	r3, #4
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f001 fc9c 	bl	8007930 <RCCEx_PLL2_Config>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005ffc:	e00e      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	3324      	adds	r3, #36	; 0x24
 8006002:	2100      	movs	r1, #0
 8006004:	4618      	mov	r0, r3
 8006006:	f001 fd45 	bl	8007a94 <RCCEx_PLL3_Config>
 800600a:	4603      	mov	r3, r0
 800600c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800600e:	e005      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	75fb      	strb	r3, [r7, #23]
      break;
 8006014:	e002      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006016:	bf00      	nop
 8006018:	e000      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800601a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800601c:	7dfb      	ldrb	r3, [r7, #23]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d109      	bne.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006022:	4b5b      	ldr	r3, [pc, #364]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006026:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800602e:	4958      	ldr	r1, [pc, #352]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006030:	4313      	orrs	r3, r2
 8006032:	650b      	str	r3, [r1, #80]	; 0x50
 8006034:	e001      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006036:	7dfb      	ldrb	r3, [r7, #23]
 8006038:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006042:	2b00      	cmp	r3, #0
 8006044:	d044      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800604c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006050:	d01f      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006052:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006056:	d805      	bhi.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00a      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800605c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006060:	d00e      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8006062:	e01f      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8006064:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006068:	d01f      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800606a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800606e:	d01e      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006070:	e018      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006072:	4b47      	ldr	r3, [pc, #284]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006076:	4a46      	ldr	r2, [pc, #280]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800607c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800607e:	e017      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	3304      	adds	r3, #4
 8006084:	2100      	movs	r1, #0
 8006086:	4618      	mov	r0, r3
 8006088:	f001 fc52 	bl	8007930 <RCCEx_PLL2_Config>
 800608c:	4603      	mov	r3, r0
 800608e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006090:	e00e      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	3324      	adds	r3, #36	; 0x24
 8006096:	2100      	movs	r1, #0
 8006098:	4618      	mov	r0, r3
 800609a:	f001 fcfb 	bl	8007a94 <RCCEx_PLL3_Config>
 800609e:	4603      	mov	r3, r0
 80060a0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80060a2:	e005      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	75fb      	strb	r3, [r7, #23]
      break;
 80060a8:	e002      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80060aa:	bf00      	nop
 80060ac:	e000      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80060ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060b0:	7dfb      	ldrb	r3, [r7, #23]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d10a      	bne.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80060b6:	4b36      	ldr	r3, [pc, #216]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80060b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ba:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80060c4:	4932      	ldr	r1, [pc, #200]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	658b      	str	r3, [r1, #88]	; 0x58
 80060ca:	e001      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060cc:	7dfb      	ldrb	r3, [r7, #23]
 80060ce:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d044      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80060e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060e6:	d01f      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80060e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060ec:	d805      	bhi.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00a      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80060f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060f6:	d00e      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80060f8:	e01f      	b.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80060fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80060fe:	d01f      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006100:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006104:	d01e      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006106:	e018      	b.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006108:	4b21      	ldr	r3, [pc, #132]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800610a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610c:	4a20      	ldr	r2, [pc, #128]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800610e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006112:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006114:	e017      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	3304      	adds	r3, #4
 800611a:	2100      	movs	r1, #0
 800611c:	4618      	mov	r0, r3
 800611e:	f001 fc07 	bl	8007930 <RCCEx_PLL2_Config>
 8006122:	4603      	mov	r3, r0
 8006124:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006126:	e00e      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	3324      	adds	r3, #36	; 0x24
 800612c:	2100      	movs	r1, #0
 800612e:	4618      	mov	r0, r3
 8006130:	f001 fcb0 	bl	8007a94 <RCCEx_PLL3_Config>
 8006134:	4603      	mov	r3, r0
 8006136:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006138:	e005      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	75fb      	strb	r3, [r7, #23]
      break;
 800613e:	e002      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006140:	bf00      	nop
 8006142:	e000      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006144:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006146:	7dfb      	ldrb	r3, [r7, #23]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10a      	bne.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800614c:	4b10      	ldr	r3, [pc, #64]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800614e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006150:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800615a:	490d      	ldr	r1, [pc, #52]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800615c:	4313      	orrs	r3, r2
 800615e:	658b      	str	r3, [r1, #88]	; 0x58
 8006160:	e001      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006162:	7dfb      	ldrb	r3, [r7, #23]
 8006164:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d035      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006176:	2b10      	cmp	r3, #16
 8006178:	d00c      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800617a:	2b10      	cmp	r3, #16
 800617c:	d802      	bhi.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800617e:	2b00      	cmp	r3, #0
 8006180:	d01b      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8006182:	e017      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006184:	2b20      	cmp	r3, #32
 8006186:	d00c      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8006188:	2b30      	cmp	r3, #48	; 0x30
 800618a:	d018      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800618c:	e012      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800618e:	bf00      	nop
 8006190:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006194:	4baf      	ldr	r3, [pc, #700]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006198:	4aae      	ldr	r2, [pc, #696]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800619a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800619e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80061a0:	e00e      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	3304      	adds	r3, #4
 80061a6:	2102      	movs	r1, #2
 80061a8:	4618      	mov	r0, r3
 80061aa:	f001 fbc1 	bl	8007930 <RCCEx_PLL2_Config>
 80061ae:	4603      	mov	r3, r0
 80061b0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80061b2:	e005      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	75fb      	strb	r3, [r7, #23]
      break;
 80061b8:	e002      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80061ba:	bf00      	nop
 80061bc:	e000      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80061be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061c0:	7dfb      	ldrb	r3, [r7, #23]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d109      	bne.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80061c6:	4ba3      	ldr	r3, [pc, #652]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80061c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061ca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061d2:	49a0      	ldr	r1, [pc, #640]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80061d4:	4313      	orrs	r3, r2
 80061d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80061d8:	e001      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061da:	7dfb      	ldrb	r3, [r7, #23]
 80061dc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d042      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061f2:	d01f      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80061f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061f8:	d805      	bhi.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00a      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80061fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006202:	d00e      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8006204:	e01f      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8006206:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800620a:	d01f      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800620c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006210:	d01e      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8006212:	e018      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006214:	4b8f      	ldr	r3, [pc, #572]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006218:	4a8e      	ldr	r2, [pc, #568]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800621a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800621e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006220:	e017      	b.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	3304      	adds	r3, #4
 8006226:	2100      	movs	r1, #0
 8006228:	4618      	mov	r0, r3
 800622a:	f001 fb81 	bl	8007930 <RCCEx_PLL2_Config>
 800622e:	4603      	mov	r3, r0
 8006230:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006232:	e00e      	b.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	3324      	adds	r3, #36	; 0x24
 8006238:	2100      	movs	r1, #0
 800623a:	4618      	mov	r0, r3
 800623c:	f001 fc2a 	bl	8007a94 <RCCEx_PLL3_Config>
 8006240:	4603      	mov	r3, r0
 8006242:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006244:	e005      	b.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	75fb      	strb	r3, [r7, #23]
      break;
 800624a:	e002      	b.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800624c:	bf00      	nop
 800624e:	e000      	b.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006250:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006252:	7dfb      	ldrb	r3, [r7, #23]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d109      	bne.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006258:	4b7e      	ldr	r3, [pc, #504]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800625a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800625c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006264:	497b      	ldr	r1, [pc, #492]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006266:	4313      	orrs	r3, r2
 8006268:	650b      	str	r3, [r1, #80]	; 0x50
 800626a:	e001      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800626c:	7dfb      	ldrb	r3, [r7, #23]
 800626e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d042      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006280:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006284:	d01b      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006286:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800628a:	d805      	bhi.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800628c:	2b00      	cmp	r3, #0
 800628e:	d022      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8006290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006294:	d00a      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006296:	e01b      	b.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006298:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800629c:	d01d      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800629e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062a2:	d01c      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80062a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80062a8:	d01b      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
 80062aa:	e011      	b.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	3304      	adds	r3, #4
 80062b0:	2101      	movs	r1, #1
 80062b2:	4618      	mov	r0, r3
 80062b4:	f001 fb3c 	bl	8007930 <RCCEx_PLL2_Config>
 80062b8:	4603      	mov	r3, r0
 80062ba:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80062bc:	e012      	b.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	3324      	adds	r3, #36	; 0x24
 80062c2:	2101      	movs	r1, #1
 80062c4:	4618      	mov	r0, r3
 80062c6:	f001 fbe5 	bl	8007a94 <RCCEx_PLL3_Config>
 80062ca:	4603      	mov	r3, r0
 80062cc:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80062ce:	e009      	b.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	75fb      	strb	r3, [r7, #23]
      break;
 80062d4:	e006      	b.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80062d6:	bf00      	nop
 80062d8:	e004      	b.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80062da:	bf00      	nop
 80062dc:	e002      	b.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80062de:	bf00      	nop
 80062e0:	e000      	b.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80062e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062e4:	7dfb      	ldrb	r3, [r7, #23]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d109      	bne.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80062ea:	4b5a      	ldr	r3, [pc, #360]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80062ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062ee:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062f6:	4957      	ldr	r1, [pc, #348]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80062f8:	4313      	orrs	r3, r2
 80062fa:	650b      	str	r3, [r1, #80]	; 0x50
 80062fc:	e001      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062fe:	7dfb      	ldrb	r3, [r7, #23]
 8006300:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d044      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006314:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006318:	d01b      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800631a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800631e:	d805      	bhi.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8006320:	2b00      	cmp	r3, #0
 8006322:	d022      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006324:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006328:	d00a      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800632a:	e01b      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800632c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006330:	d01d      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006332:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006336:	d01c      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8006338:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800633c:	d01b      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800633e:	e011      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	3304      	adds	r3, #4
 8006344:	2101      	movs	r1, #1
 8006346:	4618      	mov	r0, r3
 8006348:	f001 faf2 	bl	8007930 <RCCEx_PLL2_Config>
 800634c:	4603      	mov	r3, r0
 800634e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006350:	e012      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	3324      	adds	r3, #36	; 0x24
 8006356:	2101      	movs	r1, #1
 8006358:	4618      	mov	r0, r3
 800635a:	f001 fb9b 	bl	8007a94 <RCCEx_PLL3_Config>
 800635e:	4603      	mov	r3, r0
 8006360:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006362:	e009      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	75fb      	strb	r3, [r7, #23]
      break;
 8006368:	e006      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800636a:	bf00      	nop
 800636c:	e004      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800636e:	bf00      	nop
 8006370:	e002      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006372:	bf00      	nop
 8006374:	e000      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006376:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006378:	7dfb      	ldrb	r3, [r7, #23]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10a      	bne.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800637e:	4b35      	ldr	r3, [pc, #212]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006382:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800638c:	4931      	ldr	r1, [pc, #196]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800638e:	4313      	orrs	r3, r2
 8006390:	658b      	str	r3, [r1, #88]	; 0x58
 8006392:	e001      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006394:	7dfb      	ldrb	r3, [r7, #23]
 8006396:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d02d      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063ac:	d005      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80063ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063b2:	d009      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d013      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80063b8:	e00f      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063ba:	4b26      	ldr	r3, [pc, #152]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80063bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063be:	4a25      	ldr	r2, [pc, #148]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80063c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80063c6:	e00c      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	3304      	adds	r3, #4
 80063cc:	2101      	movs	r1, #1
 80063ce:	4618      	mov	r0, r3
 80063d0:	f001 faae 	bl	8007930 <RCCEx_PLL2_Config>
 80063d4:	4603      	mov	r3, r0
 80063d6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80063d8:	e003      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	75fb      	strb	r3, [r7, #23]
      break;
 80063de:	e000      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80063e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063e2:	7dfb      	ldrb	r3, [r7, #23]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d109      	bne.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80063e8:	4b1a      	ldr	r3, [pc, #104]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80063ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063f4:	4917      	ldr	r1, [pc, #92]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	650b      	str	r3, [r1, #80]	; 0x50
 80063fa:	e001      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063fc:	7dfb      	ldrb	r3, [r7, #23]
 80063fe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d035      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006410:	2b03      	cmp	r3, #3
 8006412:	d81b      	bhi.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006414:	a201      	add	r2, pc, #4	; (adr r2, 800641c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8006416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641a:	bf00      	nop
 800641c:	08006459 	.word	0x08006459
 8006420:	0800642d 	.word	0x0800642d
 8006424:	0800643b 	.word	0x0800643b
 8006428:	08006459 	.word	0x08006459
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800642c:	4b09      	ldr	r3, [pc, #36]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800642e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006430:	4a08      	ldr	r2, [pc, #32]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006432:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006436:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006438:	e00f      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	3304      	adds	r3, #4
 800643e:	2102      	movs	r1, #2
 8006440:	4618      	mov	r0, r3
 8006442:	f001 fa75 	bl	8007930 <RCCEx_PLL2_Config>
 8006446:	4603      	mov	r3, r0
 8006448:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800644a:	e006      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	75fb      	strb	r3, [r7, #23]
      break;
 8006450:	e003      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8006452:	bf00      	nop
 8006454:	58024400 	.word	0x58024400
      break;
 8006458:	bf00      	nop
    }

    if(ret == HAL_OK)
 800645a:	7dfb      	ldrb	r3, [r7, #23]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d109      	bne.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006460:	4bba      	ldr	r3, [pc, #744]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006464:	f023 0203 	bic.w	r2, r3, #3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800646c:	49b7      	ldr	r1, [pc, #732]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800646e:	4313      	orrs	r3, r2
 8006470:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006472:	e001      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006474:	7dfb      	ldrb	r3, [r7, #23]
 8006476:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006480:	2b00      	cmp	r3, #0
 8006482:	f000 8086 	beq.w	8006592 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006486:	4bb2      	ldr	r3, [pc, #712]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4ab1      	ldr	r2, [pc, #708]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800648c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006490:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006492:	f7fb fa5b 	bl	800194c <HAL_GetTick>
 8006496:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006498:	e009      	b.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800649a:	f7fb fa57 	bl	800194c <HAL_GetTick>
 800649e:	4602      	mov	r2, r0
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	2b64      	cmp	r3, #100	; 0x64
 80064a6:	d902      	bls.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	75fb      	strb	r3, [r7, #23]
        break;
 80064ac:	e005      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064ae:	4ba8      	ldr	r3, [pc, #672]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d0ef      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80064ba:	7dfb      	ldrb	r3, [r7, #23]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d166      	bne.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80064c0:	4ba2      	ldr	r3, [pc, #648]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80064c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80064ca:	4053      	eors	r3, r2
 80064cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d013      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80064d4:	4b9d      	ldr	r3, [pc, #628]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80064d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064dc:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80064de:	4b9b      	ldr	r3, [pc, #620]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80064e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e2:	4a9a      	ldr	r2, [pc, #616]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80064e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064e8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80064ea:	4b98      	ldr	r3, [pc, #608]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80064ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ee:	4a97      	ldr	r2, [pc, #604]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80064f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064f4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80064f6:	4a95      	ldr	r2, [pc, #596]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006502:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006506:	d115      	bne.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006508:	f7fb fa20 	bl	800194c <HAL_GetTick>
 800650c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800650e:	e00b      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006510:	f7fb fa1c 	bl	800194c <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	f241 3288 	movw	r2, #5000	; 0x1388
 800651e:	4293      	cmp	r3, r2
 8006520:	d902      	bls.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	75fb      	strb	r3, [r7, #23]
            break;
 8006526:	e005      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006528:	4b88      	ldr	r3, [pc, #544]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800652a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800652c:	f003 0302 	and.w	r3, r3, #2
 8006530:	2b00      	cmp	r3, #0
 8006532:	d0ed      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8006534:	7dfb      	ldrb	r3, [r7, #23]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d126      	bne.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006540:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006544:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006548:	d10d      	bne.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800654a:	4b80      	ldr	r3, [pc, #512]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006558:	0919      	lsrs	r1, r3, #4
 800655a:	4b7e      	ldr	r3, [pc, #504]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800655c:	400b      	ands	r3, r1
 800655e:	497b      	ldr	r1, [pc, #492]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006560:	4313      	orrs	r3, r2
 8006562:	610b      	str	r3, [r1, #16]
 8006564:	e005      	b.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8006566:	4b79      	ldr	r3, [pc, #484]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	4a78      	ldr	r2, [pc, #480]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800656c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006570:	6113      	str	r3, [r2, #16]
 8006572:	4b76      	ldr	r3, [pc, #472]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006574:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800657c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006580:	4972      	ldr	r1, [pc, #456]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006582:	4313      	orrs	r3, r2
 8006584:	670b      	str	r3, [r1, #112]	; 0x70
 8006586:	e004      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006588:	7dfb      	ldrb	r3, [r7, #23]
 800658a:	75bb      	strb	r3, [r7, #22]
 800658c:	e001      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800658e:	7dfb      	ldrb	r3, [r7, #23]
 8006590:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 0301 	and.w	r3, r3, #1
 800659a:	2b00      	cmp	r3, #0
 800659c:	d07d      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065a2:	2b28      	cmp	r3, #40	; 0x28
 80065a4:	d866      	bhi.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80065a6:	a201      	add	r2, pc, #4	; (adr r2, 80065ac <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80065a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ac:	0800667b 	.word	0x0800667b
 80065b0:	08006675 	.word	0x08006675
 80065b4:	08006675 	.word	0x08006675
 80065b8:	08006675 	.word	0x08006675
 80065bc:	08006675 	.word	0x08006675
 80065c0:	08006675 	.word	0x08006675
 80065c4:	08006675 	.word	0x08006675
 80065c8:	08006675 	.word	0x08006675
 80065cc:	08006651 	.word	0x08006651
 80065d0:	08006675 	.word	0x08006675
 80065d4:	08006675 	.word	0x08006675
 80065d8:	08006675 	.word	0x08006675
 80065dc:	08006675 	.word	0x08006675
 80065e0:	08006675 	.word	0x08006675
 80065e4:	08006675 	.word	0x08006675
 80065e8:	08006675 	.word	0x08006675
 80065ec:	08006663 	.word	0x08006663
 80065f0:	08006675 	.word	0x08006675
 80065f4:	08006675 	.word	0x08006675
 80065f8:	08006675 	.word	0x08006675
 80065fc:	08006675 	.word	0x08006675
 8006600:	08006675 	.word	0x08006675
 8006604:	08006675 	.word	0x08006675
 8006608:	08006675 	.word	0x08006675
 800660c:	0800667b 	.word	0x0800667b
 8006610:	08006675 	.word	0x08006675
 8006614:	08006675 	.word	0x08006675
 8006618:	08006675 	.word	0x08006675
 800661c:	08006675 	.word	0x08006675
 8006620:	08006675 	.word	0x08006675
 8006624:	08006675 	.word	0x08006675
 8006628:	08006675 	.word	0x08006675
 800662c:	0800667b 	.word	0x0800667b
 8006630:	08006675 	.word	0x08006675
 8006634:	08006675 	.word	0x08006675
 8006638:	08006675 	.word	0x08006675
 800663c:	08006675 	.word	0x08006675
 8006640:	08006675 	.word	0x08006675
 8006644:	08006675 	.word	0x08006675
 8006648:	08006675 	.word	0x08006675
 800664c:	0800667b 	.word	0x0800667b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	3304      	adds	r3, #4
 8006654:	2101      	movs	r1, #1
 8006656:	4618      	mov	r0, r3
 8006658:	f001 f96a 	bl	8007930 <RCCEx_PLL2_Config>
 800665c:	4603      	mov	r3, r0
 800665e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006660:	e00c      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	3324      	adds	r3, #36	; 0x24
 8006666:	2101      	movs	r1, #1
 8006668:	4618      	mov	r0, r3
 800666a:	f001 fa13 	bl	8007a94 <RCCEx_PLL3_Config>
 800666e:	4603      	mov	r3, r0
 8006670:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006672:	e003      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	75fb      	strb	r3, [r7, #23]
      break;
 8006678:	e000      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800667a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800667c:	7dfb      	ldrb	r3, [r7, #23]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d109      	bne.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006682:	4b32      	ldr	r3, [pc, #200]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006686:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800668e:	492f      	ldr	r1, [pc, #188]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006690:	4313      	orrs	r3, r2
 8006692:	654b      	str	r3, [r1, #84]	; 0x54
 8006694:	e001      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006696:	7dfb      	ldrb	r3, [r7, #23]
 8006698:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0302 	and.w	r3, r3, #2
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d037      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066aa:	2b05      	cmp	r3, #5
 80066ac:	d820      	bhi.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x860>
 80066ae:	a201      	add	r2, pc, #4	; (adr r2, 80066b4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80066b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b4:	080066f7 	.word	0x080066f7
 80066b8:	080066cd 	.word	0x080066cd
 80066bc:	080066df 	.word	0x080066df
 80066c0:	080066f7 	.word	0x080066f7
 80066c4:	080066f7 	.word	0x080066f7
 80066c8:	080066f7 	.word	0x080066f7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	3304      	adds	r3, #4
 80066d0:	2101      	movs	r1, #1
 80066d2:	4618      	mov	r0, r3
 80066d4:	f001 f92c 	bl	8007930 <RCCEx_PLL2_Config>
 80066d8:	4603      	mov	r3, r0
 80066da:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80066dc:	e00c      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	3324      	adds	r3, #36	; 0x24
 80066e2:	2101      	movs	r1, #1
 80066e4:	4618      	mov	r0, r3
 80066e6:	f001 f9d5 	bl	8007a94 <RCCEx_PLL3_Config>
 80066ea:	4603      	mov	r3, r0
 80066ec:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80066ee:	e003      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	75fb      	strb	r3, [r7, #23]
      break;
 80066f4:	e000      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80066f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066f8:	7dfb      	ldrb	r3, [r7, #23]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d109      	bne.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80066fe:	4b13      	ldr	r3, [pc, #76]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006702:	f023 0207 	bic.w	r2, r3, #7
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800670a:	4910      	ldr	r1, [pc, #64]	; (800674c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800670c:	4313      	orrs	r3, r2
 800670e:	654b      	str	r3, [r1, #84]	; 0x54
 8006710:	e001      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006712:	7dfb      	ldrb	r3, [r7, #23]
 8006714:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 0304 	and.w	r3, r3, #4
 800671e:	2b00      	cmp	r3, #0
 8006720:	d040      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006728:	2b05      	cmp	r3, #5
 800672a:	d827      	bhi.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800672c:	a201      	add	r2, pc, #4	; (adr r2, 8006734 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800672e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006732:	bf00      	nop
 8006734:	08006783 	.word	0x08006783
 8006738:	08006759 	.word	0x08006759
 800673c:	0800676b 	.word	0x0800676b
 8006740:	08006783 	.word	0x08006783
 8006744:	08006783 	.word	0x08006783
 8006748:	08006783 	.word	0x08006783
 800674c:	58024400 	.word	0x58024400
 8006750:	58024800 	.word	0x58024800
 8006754:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	3304      	adds	r3, #4
 800675c:	2101      	movs	r1, #1
 800675e:	4618      	mov	r0, r3
 8006760:	f001 f8e6 	bl	8007930 <RCCEx_PLL2_Config>
 8006764:	4603      	mov	r3, r0
 8006766:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006768:	e00c      	b.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	3324      	adds	r3, #36	; 0x24
 800676e:	2101      	movs	r1, #1
 8006770:	4618      	mov	r0, r3
 8006772:	f001 f98f 	bl	8007a94 <RCCEx_PLL3_Config>
 8006776:	4603      	mov	r3, r0
 8006778:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800677a:	e003      	b.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	75fb      	strb	r3, [r7, #23]
      break;
 8006780:	e000      	b.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8006782:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006784:	7dfb      	ldrb	r3, [r7, #23]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10a      	bne.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800678a:	4bb2      	ldr	r3, [pc, #712]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800678c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800678e:	f023 0207 	bic.w	r2, r3, #7
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006798:	49ae      	ldr	r1, [pc, #696]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800679a:	4313      	orrs	r3, r2
 800679c:	658b      	str	r3, [r1, #88]	; 0x58
 800679e:	e001      	b.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067a0:	7dfb      	ldrb	r3, [r7, #23]
 80067a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0320 	and.w	r3, r3, #32
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d044      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067ba:	d01b      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80067bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067c0:	d805      	bhi.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d022      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80067c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067ca:	d00a      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x952>
 80067cc:	e01b      	b.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80067ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067d2:	d01d      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80067d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067d8:	d01c      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80067da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80067de:	d01b      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80067e0:	e011      	b.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	3304      	adds	r3, #4
 80067e6:	2100      	movs	r1, #0
 80067e8:	4618      	mov	r0, r3
 80067ea:	f001 f8a1 	bl	8007930 <RCCEx_PLL2_Config>
 80067ee:	4603      	mov	r3, r0
 80067f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80067f2:	e012      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	3324      	adds	r3, #36	; 0x24
 80067f8:	2102      	movs	r1, #2
 80067fa:	4618      	mov	r0, r3
 80067fc:	f001 f94a 	bl	8007a94 <RCCEx_PLL3_Config>
 8006800:	4603      	mov	r3, r0
 8006802:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006804:	e009      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	75fb      	strb	r3, [r7, #23]
      break;
 800680a:	e006      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800680c:	bf00      	nop
 800680e:	e004      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006810:	bf00      	nop
 8006812:	e002      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006814:	bf00      	nop
 8006816:	e000      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006818:	bf00      	nop
    }

    if(ret == HAL_OK)
 800681a:	7dfb      	ldrb	r3, [r7, #23]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10a      	bne.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006820:	4b8c      	ldr	r3, [pc, #560]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006824:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800682e:	4989      	ldr	r1, [pc, #548]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006830:	4313      	orrs	r3, r2
 8006832:	654b      	str	r3, [r1, #84]	; 0x54
 8006834:	e001      	b.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006836:	7dfb      	ldrb	r3, [r7, #23]
 8006838:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006842:	2b00      	cmp	r3, #0
 8006844:	d044      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800684c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006850:	d01b      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8006852:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006856:	d805      	bhi.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8006858:	2b00      	cmp	r3, #0
 800685a:	d022      	beq.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800685c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006860:	d00a      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8006862:	e01b      	b.n	800689c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8006864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006868:	d01d      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800686a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800686e:	d01c      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8006870:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006874:	d01b      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8006876:	e011      	b.n	800689c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	3304      	adds	r3, #4
 800687c:	2100      	movs	r1, #0
 800687e:	4618      	mov	r0, r3
 8006880:	f001 f856 	bl	8007930 <RCCEx_PLL2_Config>
 8006884:	4603      	mov	r3, r0
 8006886:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006888:	e012      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	3324      	adds	r3, #36	; 0x24
 800688e:	2102      	movs	r1, #2
 8006890:	4618      	mov	r0, r3
 8006892:	f001 f8ff 	bl	8007a94 <RCCEx_PLL3_Config>
 8006896:	4603      	mov	r3, r0
 8006898:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800689a:	e009      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	75fb      	strb	r3, [r7, #23]
      break;
 80068a0:	e006      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80068a2:	bf00      	nop
 80068a4:	e004      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80068a6:	bf00      	nop
 80068a8:	e002      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80068aa:	bf00      	nop
 80068ac:	e000      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80068ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068b0:	7dfb      	ldrb	r3, [r7, #23]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d10a      	bne.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80068b6:	4b67      	ldr	r3, [pc, #412]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80068b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ba:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068c4:	4963      	ldr	r1, [pc, #396]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80068c6:	4313      	orrs	r3, r2
 80068c8:	658b      	str	r3, [r1, #88]	; 0x58
 80068ca:	e001      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068cc:	7dfb      	ldrb	r3, [r7, #23]
 80068ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d044      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068e6:	d01b      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80068e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068ec:	d805      	bhi.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d022      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80068f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068f6:	d00a      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80068f8:	e01b      	b.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80068fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068fe:	d01d      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006900:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006904:	d01c      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8006906:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800690a:	d01b      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800690c:	e011      	b.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	3304      	adds	r3, #4
 8006912:	2100      	movs	r1, #0
 8006914:	4618      	mov	r0, r3
 8006916:	f001 f80b 	bl	8007930 <RCCEx_PLL2_Config>
 800691a:	4603      	mov	r3, r0
 800691c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800691e:	e012      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	3324      	adds	r3, #36	; 0x24
 8006924:	2102      	movs	r1, #2
 8006926:	4618      	mov	r0, r3
 8006928:	f001 f8b4 	bl	8007a94 <RCCEx_PLL3_Config>
 800692c:	4603      	mov	r3, r0
 800692e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006930:	e009      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	75fb      	strb	r3, [r7, #23]
      break;
 8006936:	e006      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006938:	bf00      	nop
 800693a:	e004      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800693c:	bf00      	nop
 800693e:	e002      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006940:	bf00      	nop
 8006942:	e000      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006944:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006946:	7dfb      	ldrb	r3, [r7, #23]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d10a      	bne.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800694c:	4b41      	ldr	r3, [pc, #260]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800694e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006950:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800695a:	493e      	ldr	r1, [pc, #248]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800695c:	4313      	orrs	r3, r2
 800695e:	658b      	str	r3, [r1, #88]	; 0x58
 8006960:	e001      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006962:	7dfb      	ldrb	r3, [r7, #23]
 8006964:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0308 	and.w	r3, r3, #8
 800696e:	2b00      	cmp	r3, #0
 8006970:	d01a      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800697c:	d10a      	bne.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	3324      	adds	r3, #36	; 0x24
 8006982:	2102      	movs	r1, #2
 8006984:	4618      	mov	r0, r3
 8006986:	f001 f885 	bl	8007a94 <RCCEx_PLL3_Config>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d001      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006994:	4b2f      	ldr	r3, [pc, #188]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006998:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069a2:	492c      	ldr	r1, [pc, #176]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80069a4:	4313      	orrs	r3, r2
 80069a6:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0310 	and.w	r3, r3, #16
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d01a      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069be:	d10a      	bne.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	3324      	adds	r3, #36	; 0x24
 80069c4:	2102      	movs	r1, #2
 80069c6:	4618      	mov	r0, r3
 80069c8:	f001 f864 	bl	8007a94 <RCCEx_PLL3_Config>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80069d6:	4b1f      	ldr	r3, [pc, #124]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80069d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069e4:	491b      	ldr	r1, [pc, #108]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80069e6:	4313      	orrs	r3, r2
 80069e8:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d032      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80069fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a00:	d00d      	beq.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8006a02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a06:	d016      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d111      	bne.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	3304      	adds	r3, #4
 8006a10:	2100      	movs	r1, #0
 8006a12:	4618      	mov	r0, r3
 8006a14:	f000 ff8c 	bl	8007930 <RCCEx_PLL2_Config>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006a1c:	e00c      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	3324      	adds	r3, #36	; 0x24
 8006a22:	2102      	movs	r1, #2
 8006a24:	4618      	mov	r0, r3
 8006a26:	f001 f835 	bl	8007a94 <RCCEx_PLL3_Config>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006a2e:	e003      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	75fb      	strb	r3, [r7, #23]
      break;
 8006a34:	e000      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8006a36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a38:	7dfb      	ldrb	r3, [r7, #23]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10c      	bne.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a3e:	4b05      	ldr	r3, [pc, #20]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006a4c:	4901      	ldr	r1, [pc, #4]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	658b      	str	r3, [r1, #88]	; 0x58
 8006a52:	e003      	b.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8006a54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a58:	7dfb      	ldrb	r3, [r7, #23]
 8006a5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d02f      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a72:	d00c      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006a74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a78:	d015      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8006a7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a7e:	d10f      	bne.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a80:	4b71      	ldr	r3, [pc, #452]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a84:	4a70      	ldr	r2, [pc, #448]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006a86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006a8c:	e00c      	b.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	3324      	adds	r3, #36	; 0x24
 8006a92:	2101      	movs	r1, #1
 8006a94:	4618      	mov	r0, r3
 8006a96:	f000 fffd 	bl	8007a94 <RCCEx_PLL3_Config>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006a9e:	e003      	b.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	75fb      	strb	r3, [r7, #23]
      break;
 8006aa4:	e000      	b.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8006aa6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006aa8:	7dfb      	ldrb	r3, [r7, #23]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10a      	bne.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006aae:	4b66      	ldr	r3, [pc, #408]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ab2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006abc:	4962      	ldr	r1, [pc, #392]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	654b      	str	r3, [r1, #84]	; 0x54
 8006ac2:	e001      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac4:	7dfb      	ldrb	r3, [r7, #23]
 8006ac6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d029      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d003      	beq.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8006adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ae0:	d007      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8006ae2:	e00f      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ae4:	4b58      	ldr	r3, [pc, #352]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae8:	4a57      	ldr	r2, [pc, #348]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006aee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006af0:	e00b      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	3304      	adds	r3, #4
 8006af6:	2102      	movs	r1, #2
 8006af8:	4618      	mov	r0, r3
 8006afa:	f000 ff19 	bl	8007930 <RCCEx_PLL2_Config>
 8006afe:	4603      	mov	r3, r0
 8006b00:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006b02:	e002      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	75fb      	strb	r3, [r7, #23]
      break;
 8006b08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b0a:	7dfb      	ldrb	r3, [r7, #23]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d109      	bne.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006b10:	4b4d      	ldr	r3, [pc, #308]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b1c:	494a      	ldr	r1, [pc, #296]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006b22:	e001      	b.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b24:	7dfb      	ldrb	r3, [r7, #23]
 8006b26:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d00a      	beq.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	3324      	adds	r3, #36	; 0x24
 8006b38:	2102      	movs	r1, #2
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f000 ffaa 	bl	8007a94 <RCCEx_PLL3_Config>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d001      	beq.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d02f      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b5e:	d00c      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b64:	d802      	bhi.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d011      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8006b6a:	e00d      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8006b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b70:	d00f      	beq.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8006b72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b76:	d00e      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8006b78:	e006      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b7a:	4b33      	ldr	r3, [pc, #204]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7e:	4a32      	ldr	r2, [pc, #200]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006b86:	e007      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b8c:	e004      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006b8e:	bf00      	nop
 8006b90:	e002      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006b92:	bf00      	nop
 8006b94:	e000      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006b96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b98:	7dfb      	ldrb	r3, [r7, #23]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d109      	bne.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b9e:	4b2a      	ldr	r3, [pc, #168]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006baa:	4927      	ldr	r1, [pc, #156]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006bac:	4313      	orrs	r3, r2
 8006bae:	654b      	str	r3, [r1, #84]	; 0x54
 8006bb0:	e001      	b.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bb2:	7dfb      	ldrb	r3, [r7, #23]
 8006bb4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d008      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006bc2:	4b21      	ldr	r3, [pc, #132]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bc6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bce:	491e      	ldr	r1, [pc, #120]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d008      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006be0:	4b19      	ldr	r3, [pc, #100]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006be4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bec:	4916      	ldr	r1, [pc, #88]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00d      	beq.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006bfe:	4b12      	ldr	r3, [pc, #72]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	4a11      	ldr	r2, [pc, #68]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006c04:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c08:	6113      	str	r3, [r2, #16]
 8006c0a:	4b0f      	ldr	r3, [pc, #60]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006c0c:	691a      	ldr	r2, [r3, #16]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006c14:	490c      	ldr	r1, [pc, #48]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	da08      	bge.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006c22:	4b09      	ldr	r3, [pc, #36]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c26:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c2e:	4906      	ldr	r1, [pc, #24]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006c30:	4313      	orrs	r3, r2
 8006c32:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8006c34:	7dbb      	ldrb	r3, [r7, #22]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d101      	bne.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	e000      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3718      	adds	r7, #24
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	58024400 	.word	0x58024400

08006c4c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b090      	sub	sp, #64	; 0x40
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c5a:	d150      	bne.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006c5c:	4ba1      	ldr	r3, [pc, #644]	; (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c60:	f003 0307 	and.w	r3, r3, #7
 8006c64:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c68:	2b04      	cmp	r3, #4
 8006c6a:	d844      	bhi.n	8006cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8006c6c:	a201      	add	r2, pc, #4	; (adr r2, 8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8006c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c72:	bf00      	nop
 8006c74:	08006c89 	.word	0x08006c89
 8006c78:	08006c99 	.word	0x08006c99
 8006c7c:	08006ca9 	.word	0x08006ca9
 8006c80:	08006cf1 	.word	0x08006cf1
 8006c84:	08006cb9 	.word	0x08006cb9
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f000 fd03 	bl	8007698 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c96:	e241      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c98:	f107 0318 	add.w	r3, r7, #24
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f000 fa63 	bl	8007168 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ca6:	e239      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ca8:	f107 030c 	add.w	r3, r7, #12
 8006cac:	4618      	mov	r0, r3
 8006cae:	f000 fba7 	bl	8007400 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cb6:	e231      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006cb8:	4b8a      	ldr	r3, [pc, #552]	; (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006cc0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d102      	bne.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006cc8:	4b87      	ldr	r3, [pc, #540]	; (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006cca:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006ccc:	e226      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cd4:	d102      	bne.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8006cd6:	4b85      	ldr	r3, [pc, #532]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cda:	e21f      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ce2:	d102      	bne.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8006ce4:	4b82      	ldr	r3, [pc, #520]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ce8:	e218      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8006cea:	2300      	movs	r3, #0
 8006cec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cee:	e215      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006cf0:	4b80      	ldr	r3, [pc, #512]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cf4:	e212      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cfa:	bf00      	nop
 8006cfc:	e20e      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d04:	d14f      	bne.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8006d06:	4b77      	ldr	r3, [pc, #476]	; (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d0a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006d0e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d12:	2b80      	cmp	r3, #128	; 0x80
 8006d14:	d01c      	beq.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8006d16:	2b80      	cmp	r3, #128	; 0x80
 8006d18:	d804      	bhi.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d008      	beq.n	8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8006d1e:	2b40      	cmp	r3, #64	; 0x40
 8006d20:	d00e      	beq.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006d22:	e03c      	b.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8006d24:	2bc0      	cmp	r3, #192	; 0xc0
 8006d26:	d037      	beq.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8006d28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d2c:	d018      	beq.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8006d2e:	e036      	b.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d34:	4618      	mov	r0, r3
 8006d36:	f000 fcaf 	bl	8007698 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d3e:	e1ed      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d40:	f107 0318 	add.w	r3, r7, #24
 8006d44:	4618      	mov	r0, r3
 8006d46:	f000 fa0f 	bl	8007168 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d4e:	e1e5      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d50:	f107 030c 	add.w	r3, r7, #12
 8006d54:	4618      	mov	r0, r3
 8006d56:	f000 fb53 	bl	8007400 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d5e:	e1dd      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006d60:	4b60      	ldr	r3, [pc, #384]	; (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d68:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d102      	bne.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006d70:	4b5d      	ldr	r3, [pc, #372]	; (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006d72:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006d74:	e1d2      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d7c:	d102      	bne.n	8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8006d7e:	4b5b      	ldr	r3, [pc, #364]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006d80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d82:	e1cb      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d8a:	d102      	bne.n	8006d92 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8006d8c:	4b58      	ldr	r3, [pc, #352]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d90:	e1c4      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8006d92:	2300      	movs	r3, #0
 8006d94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d96:	e1c1      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006d98:	4b56      	ldr	r3, [pc, #344]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d9c:	e1be      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006da2:	bf00      	nop
 8006da4:	e1ba      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dac:	d153      	bne.n	8006e56 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8006dae:	4b4d      	ldr	r3, [pc, #308]	; (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006db2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006db6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dbe:	d01f      	beq.n	8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8006dc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dc4:	d805      	bhi.n	8006dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d00a      	beq.n	8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8006dca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006dce:	d00f      	beq.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8006dd0:	e03d      	b.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8006dd2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006dd6:	d037      	beq.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8006dd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ddc:	d018      	beq.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8006dde:	e036      	b.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006de4:	4618      	mov	r0, r3
 8006de6:	f000 fc57 	bl	8007698 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006dee:	e195      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006df0:	f107 0318 	add.w	r3, r7, #24
 8006df4:	4618      	mov	r0, r3
 8006df6:	f000 f9b7 	bl	8007168 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006dfe:	e18d      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e00:	f107 030c 	add.w	r3, r7, #12
 8006e04:	4618      	mov	r0, r3
 8006e06:	f000 fafb 	bl	8007400 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e0e:	e185      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006e10:	4b34      	ldr	r3, [pc, #208]	; (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e18:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d102      	bne.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006e20:	4b31      	ldr	r3, [pc, #196]	; (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006e22:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006e24:	e17a      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e2c:	d102      	bne.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8006e2e:	4b2f      	ldr	r3, [pc, #188]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006e30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e32:	e173      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e3a:	d102      	bne.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8006e3c:	4b2c      	ldr	r3, [pc, #176]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e40:	e16c      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8006e42:	2300      	movs	r3, #0
 8006e44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e46:	e169      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006e48:	4b2a      	ldr	r3, [pc, #168]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e4c:	e166      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e52:	bf00      	nop
 8006e54:	e162      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e5c:	d15d      	bne.n	8006f1a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8006e5e:	4b21      	ldr	r3, [pc, #132]	; (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e62:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006e66:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e6e:	d01f      	beq.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8006e70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e74:	d805      	bhi.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00a      	beq.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8006e7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e7e:	d00f      	beq.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8006e80:	e047      	b.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8006e82:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006e86:	d041      	beq.n	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8006e88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e8c:	d018      	beq.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8006e8e:	e040      	b.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e94:	4618      	mov	r0, r3
 8006e96:	f000 fbff 	bl	8007698 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e9e:	e13d      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ea0:	f107 0318 	add.w	r3, r7, #24
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f000 f95f 	bl	8007168 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006eae:	e135      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006eb0:	f107 030c 	add.w	r3, r7, #12
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f000 faa3 	bl	8007400 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ebe:	e12d      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006ec0:	4b08      	ldr	r3, [pc, #32]	; (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ec4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ec8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d102      	bne.n	8006ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006ed0:	4b05      	ldr	r3, [pc, #20]	; (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006ed4:	e122      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ed8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006edc:	d10c      	bne.n	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8006ede:	4b03      	ldr	r3, [pc, #12]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ee2:	e11b      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006ee4:	58024400 	.word	0x58024400
 8006ee8:	03d09000 	.word	0x03d09000
 8006eec:	003d0900 	.word	0x003d0900
 8006ef0:	007a1200 	.word	0x007a1200
 8006ef4:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006efa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006efe:	d102      	bne.n	8006f06 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8006f00:	4b89      	ldr	r3, [pc, #548]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8006f02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f04:	e10a      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8006f06:	2300      	movs	r3, #0
 8006f08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f0a:	e107      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006f0c:	4b87      	ldr	r3, [pc, #540]	; (800712c <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8006f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f10:	e104      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8006f12:	2300      	movs	r3, #0
 8006f14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f16:	bf00      	nop
 8006f18:	e100      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f20:	d153      	bne.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006f22:	4b83      	ldr	r3, [pc, #524]	; (8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8006f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f26:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006f2a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f32:	d01f      	beq.n	8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8006f34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f38:	d805      	bhi.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00a      	beq.n	8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8006f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f42:	d00f      	beq.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8006f44:	e03d      	b.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8006f46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f4a:	d037      	beq.n	8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8006f4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f50:	d018      	beq.n	8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8006f52:	e036      	b.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f000 fb9d 	bl	8007698 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f62:	e0db      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f64:	f107 0318 	add.w	r3, r7, #24
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f000 f8fd 	bl	8007168 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f72:	e0d3      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f74:	f107 030c 	add.w	r3, r7, #12
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f000 fa41 	bl	8007400 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f82:	e0cb      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006f84:	4b6a      	ldr	r3, [pc, #424]	; (8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8006f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f8c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d102      	bne.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006f94:	4b67      	ldr	r3, [pc, #412]	; (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8006f96:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006f98:	e0c0      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fa0:	d102      	bne.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8006fa2:	4b65      	ldr	r3, [pc, #404]	; (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fa6:	e0b9      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006faa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fae:	d102      	bne.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8006fb0:	4b5d      	ldr	r3, [pc, #372]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8006fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fb4:	e0b2      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fba:	e0af      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006fbc:	4b5b      	ldr	r3, [pc, #364]	; (800712c <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8006fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fc0:	e0ac      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fc6:	bf00      	nop
 8006fc8:	e0a8      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006fd0:	d13d      	bne.n	800704e <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006fd2:	4b57      	ldr	r3, [pc, #348]	; (8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8006fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fd6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006fda:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fe2:	d00c      	beq.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8006fe4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fe8:	d011      	beq.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d12b      	bne.n	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fee:	f107 0318 	add.w	r3, r7, #24
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f000 f8b8 	bl	8007168 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ffc:	e08e      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ffe:	f107 030c 	add.w	r3, r7, #12
 8007002:	4618      	mov	r0, r3
 8007004:	f000 f9fc 	bl	8007400 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800700c:	e086      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800700e:	4b48      	ldr	r3, [pc, #288]	; (8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007012:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007016:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800701a:	2b00      	cmp	r3, #0
 800701c:	d102      	bne.n	8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800701e:	4b45      	ldr	r3, [pc, #276]	; (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007020:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007022:	e07b      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007026:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800702a:	d102      	bne.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 800702c:	4b42      	ldr	r3, [pc, #264]	; (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800702e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007030:	e074      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007034:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007038:	d102      	bne.n	8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800703a:	4b3b      	ldr	r3, [pc, #236]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800703c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800703e:	e06d      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007040:	2300      	movs	r3, #0
 8007042:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007044:	e06a      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007046:	2300      	movs	r3, #0
 8007048:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800704a:	bf00      	nop
 800704c:	e066      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007054:	d11f      	bne.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007056:	4b36      	ldr	r3, [pc, #216]	; (8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800705a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800705e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007062:	2b00      	cmp	r3, #0
 8007064:	d003      	beq.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800706a:	d008      	beq.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800706c:	e00f      	b.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800706e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007072:	4618      	mov	r0, r3
 8007074:	f000 fb10 	bl	8007698 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800707c:	e04e      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800707e:	f107 0318 	add.w	r3, r7, #24
 8007082:	4618      	mov	r0, r3
 8007084:	f000 f870 	bl	8007168 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007088:	6a3b      	ldr	r3, [r7, #32]
 800708a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800708c:	e046      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800708e:	2300      	movs	r3, #0
 8007090:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007092:	bf00      	nop
 8007094:	e042      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800709c:	d13c      	bne.n	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800709e:	4b24      	ldr	r3, [pc, #144]	; (8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80070a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070a2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80070a6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80070a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070ae:	d01e      	beq.n	80070ee <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 80070b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070b4:	d805      	bhi.n	80070c2 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00d      	beq.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80070ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070be:	d00e      	beq.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 80070c0:	e026      	b.n	8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 80070c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070c6:	d01d      	beq.n	8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 80070c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070cc:	d01d      	beq.n	800710a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80070ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80070d2:	d014      	beq.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80070d4:	e01c      	b.n	8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80070d6:	f000 f831 	bl	800713c <HAL_RCCEx_GetD3PCLK1Freq>
 80070da:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80070dc:	e01e      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070de:	f107 0318 	add.w	r3, r7, #24
 80070e2:	4618      	mov	r0, r3
 80070e4:	f000 f840 	bl	8007168 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070ec:	e016      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070ee:	f107 030c 	add.w	r3, r7, #12
 80070f2:	4618      	mov	r0, r3
 80070f4:	f000 f984 	bl	8007400 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070fc:	e00e      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 80070fe:	4b0d      	ldr	r3, [pc, #52]	; (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007100:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007102:	e00b      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8007104:	4b0c      	ldr	r3, [pc, #48]	; (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007106:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007108:	e008      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800710a:	4b07      	ldr	r3, [pc, #28]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800710c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800710e:	e005      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007110:	2300      	movs	r3, #0
 8007112:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007114:	bf00      	nop
 8007116:	e001      	b.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8007118:	2300      	movs	r3, #0
 800711a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800711c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800711e:	4618      	mov	r0, r3
 8007120:	3740      	adds	r7, #64	; 0x40
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	007a1200 	.word	0x007a1200
 800712c:	00bb8000 	.word	0x00bb8000
 8007130:	58024400 	.word	0x58024400
 8007134:	03d09000 	.word	0x03d09000
 8007138:	003d0900 	.word	0x003d0900

0800713c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007140:	f7fe fe4a 	bl	8005dd8 <HAL_RCC_GetHCLKFreq>
 8007144:	4601      	mov	r1, r0
 8007146:	4b06      	ldr	r3, [pc, #24]	; (8007160 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007148:	6a1b      	ldr	r3, [r3, #32]
 800714a:	091b      	lsrs	r3, r3, #4
 800714c:	f003 0307 	and.w	r3, r3, #7
 8007150:	4a04      	ldr	r2, [pc, #16]	; (8007164 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007152:	5cd3      	ldrb	r3, [r2, r3]
 8007154:	f003 031f 	and.w	r3, r3, #31
 8007158:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800715c:	4618      	mov	r0, r3
 800715e:	bd80      	pop	{r7, pc}
 8007160:	58024400 	.word	0x58024400
 8007164:	08017334 	.word	0x08017334

08007168 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007168:	b480      	push	{r7}
 800716a:	b089      	sub	sp, #36	; 0x24
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007170:	4b9d      	ldr	r3, [pc, #628]	; (80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007174:	f003 0303 	and.w	r3, r3, #3
 8007178:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800717a:	4b9b      	ldr	r3, [pc, #620]	; (80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800717c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800717e:	0b1b      	lsrs	r3, r3, #12
 8007180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007184:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007186:	4b98      	ldr	r3, [pc, #608]	; (80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718a:	091b      	lsrs	r3, r3, #4
 800718c:	f003 0301 	and.w	r3, r3, #1
 8007190:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007192:	4b95      	ldr	r3, [pc, #596]	; (80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007196:	08db      	lsrs	r3, r3, #3
 8007198:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800719c:	693a      	ldr	r2, [r7, #16]
 800719e:	fb02 f303 	mul.w	r3, r2, r3
 80071a2:	ee07 3a90 	vmov	s15, r3
 80071a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f000 810a 	beq.w	80073ca <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d05a      	beq.n	8007272 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d302      	bcc.n	80071c6 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d078      	beq.n	80072b6 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80071c4:	e099      	b.n	80072fa <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071c6:	4b88      	ldr	r3, [pc, #544]	; (80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 0320 	and.w	r3, r3, #32
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d02d      	beq.n	800722e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80071d2:	4b85      	ldr	r3, [pc, #532]	; (80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	08db      	lsrs	r3, r3, #3
 80071d8:	f003 0303 	and.w	r3, r3, #3
 80071dc:	4a83      	ldr	r2, [pc, #524]	; (80073ec <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80071de:	fa22 f303 	lsr.w	r3, r2, r3
 80071e2:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	ee07 3a90 	vmov	s15, r3
 80071ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	ee07 3a90 	vmov	s15, r3
 80071f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071fc:	4b7a      	ldr	r3, [pc, #488]	; (80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80071fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007204:	ee07 3a90 	vmov	s15, r3
 8007208:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800720c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007210:	eddf 5a77 	vldr	s11, [pc, #476]	; 80073f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007214:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007218:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800721c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007220:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007228:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800722c:	e087      	b.n	800733e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	ee07 3a90 	vmov	s15, r3
 8007234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007238:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80073f4 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800723c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007240:	4b69      	ldr	r3, [pc, #420]	; (80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007248:	ee07 3a90 	vmov	s15, r3
 800724c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007250:	ed97 6a03 	vldr	s12, [r7, #12]
 8007254:	eddf 5a66 	vldr	s11, [pc, #408]	; 80073f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007258:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800725c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007260:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007264:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800726c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007270:	e065      	b.n	800733e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	ee07 3a90 	vmov	s15, r3
 8007278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800727c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80073f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007280:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007284:	4b58      	ldr	r3, [pc, #352]	; (80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800728c:	ee07 3a90 	vmov	s15, r3
 8007290:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007294:	ed97 6a03 	vldr	s12, [r7, #12]
 8007298:	eddf 5a55 	vldr	s11, [pc, #340]	; 80073f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800729c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072b4:	e043      	b.n	800733e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	ee07 3a90 	vmov	s15, r3
 80072bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072c0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80072c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072c8:	4b47      	ldr	r3, [pc, #284]	; (80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80072ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072d0:	ee07 3a90 	vmov	s15, r3
 80072d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80072dc:	eddf 5a44 	vldr	s11, [pc, #272]	; 80073f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80072e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072f8:	e021      	b.n	800733e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	ee07 3a90 	vmov	s15, r3
 8007300:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007304:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80073f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007308:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800730c:	4b36      	ldr	r3, [pc, #216]	; (80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800730e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007314:	ee07 3a90 	vmov	s15, r3
 8007318:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800731c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007320:	eddf 5a33 	vldr	s11, [pc, #204]	; 80073f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007324:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007328:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800732c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007330:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007338:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800733c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800733e:	4b2a      	ldr	r3, [pc, #168]	; (80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007342:	0a5b      	lsrs	r3, r3, #9
 8007344:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007348:	ee07 3a90 	vmov	s15, r3
 800734c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007350:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007354:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007358:	edd7 6a07 	vldr	s13, [r7, #28]
 800735c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007360:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007364:	ee17 2a90 	vmov	r2, s15
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800736c:	4b1e      	ldr	r3, [pc, #120]	; (80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800736e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007370:	0c1b      	lsrs	r3, r3, #16
 8007372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007376:	ee07 3a90 	vmov	s15, r3
 800737a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800737e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007382:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007386:	edd7 6a07 	vldr	s13, [r7, #28]
 800738a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800738e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007392:	ee17 2a90 	vmov	r2, s15
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800739a:	4b13      	ldr	r3, [pc, #76]	; (80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800739c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739e:	0e1b      	lsrs	r3, r3, #24
 80073a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073a4:	ee07 3a90 	vmov	s15, r3
 80073a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80073b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073c0:	ee17 2a90 	vmov	r2, s15
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80073c8:	e008      	b.n	80073dc <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	609a      	str	r2, [r3, #8]
}
 80073dc:	bf00      	nop
 80073de:	3724      	adds	r7, #36	; 0x24
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr
 80073e8:	58024400 	.word	0x58024400
 80073ec:	03d09000 	.word	0x03d09000
 80073f0:	46000000 	.word	0x46000000
 80073f4:	4c742400 	.word	0x4c742400
 80073f8:	4a742400 	.word	0x4a742400
 80073fc:	4af42400 	.word	0x4af42400

08007400 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007400:	b480      	push	{r7}
 8007402:	b089      	sub	sp, #36	; 0x24
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007408:	4b9d      	ldr	r3, [pc, #628]	; (8007680 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800740a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800740c:	f003 0303 	and.w	r3, r3, #3
 8007410:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007412:	4b9b      	ldr	r3, [pc, #620]	; (8007680 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007416:	0d1b      	lsrs	r3, r3, #20
 8007418:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800741c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800741e:	4b98      	ldr	r3, [pc, #608]	; (8007680 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007422:	0a1b      	lsrs	r3, r3, #8
 8007424:	f003 0301 	and.w	r3, r3, #1
 8007428:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800742a:	4b95      	ldr	r3, [pc, #596]	; (8007680 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800742c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800742e:	08db      	lsrs	r3, r3, #3
 8007430:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	fb02 f303 	mul.w	r3, r2, r3
 800743a:	ee07 3a90 	vmov	s15, r3
 800743e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007442:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 810a 	beq.w	8007662 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d05a      	beq.n	800750a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8007454:	2b01      	cmp	r3, #1
 8007456:	d302      	bcc.n	800745e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8007458:	2b02      	cmp	r3, #2
 800745a:	d078      	beq.n	800754e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800745c:	e099      	b.n	8007592 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800745e:	4b88      	ldr	r3, [pc, #544]	; (8007680 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 0320 	and.w	r3, r3, #32
 8007466:	2b00      	cmp	r3, #0
 8007468:	d02d      	beq.n	80074c6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800746a:	4b85      	ldr	r3, [pc, #532]	; (8007680 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	08db      	lsrs	r3, r3, #3
 8007470:	f003 0303 	and.w	r3, r3, #3
 8007474:	4a83      	ldr	r2, [pc, #524]	; (8007684 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007476:	fa22 f303 	lsr.w	r3, r2, r3
 800747a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	ee07 3a90 	vmov	s15, r3
 8007482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	ee07 3a90 	vmov	s15, r3
 800748c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007490:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007494:	4b7a      	ldr	r3, [pc, #488]	; (8007680 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800749c:	ee07 3a90 	vmov	s15, r3
 80074a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80074a8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80074ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074c0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80074c4:	e087      	b.n	80075d6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	ee07 3a90 	vmov	s15, r3
 80074cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074d0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800768c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80074d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074d8:	4b69      	ldr	r3, [pc, #420]	; (8007680 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80074da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074e0:	ee07 3a90 	vmov	s15, r3
 80074e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ec:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80074f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007504:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007508:	e065      	b.n	80075d6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	ee07 3a90 	vmov	s15, r3
 8007510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007514:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007518:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800751c:	4b58      	ldr	r3, [pc, #352]	; (8007680 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800751e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007524:	ee07 3a90 	vmov	s15, r3
 8007528:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800752c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007530:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007534:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007538:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800753c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007540:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007548:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800754c:	e043      	b.n	80075d6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	ee07 3a90 	vmov	s15, r3
 8007554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007558:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007694 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800755c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007560:	4b47      	ldr	r3, [pc, #284]	; (8007680 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007568:	ee07 3a90 	vmov	s15, r3
 800756c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007570:	ed97 6a03 	vldr	s12, [r7, #12]
 8007574:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007578:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800757c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007580:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007584:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800758c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007590:	e021      	b.n	80075d6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	ee07 3a90 	vmov	s15, r3
 8007598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800759c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80075a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075a4:	4b36      	ldr	r3, [pc, #216]	; (8007680 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80075a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ac:	ee07 3a90 	vmov	s15, r3
 80075b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80075b8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80075bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075d4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80075d6:	4b2a      	ldr	r3, [pc, #168]	; (8007680 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80075d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075da:	0a5b      	lsrs	r3, r3, #9
 80075dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075e0:	ee07 3a90 	vmov	s15, r3
 80075e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80075f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075fc:	ee17 2a90 	vmov	r2, s15
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007604:	4b1e      	ldr	r3, [pc, #120]	; (8007680 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007608:	0c1b      	lsrs	r3, r3, #16
 800760a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800760e:	ee07 3a90 	vmov	s15, r3
 8007612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007616:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800761a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800761e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007622:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007626:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800762a:	ee17 2a90 	vmov	r2, s15
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007632:	4b13      	ldr	r3, [pc, #76]	; (8007680 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007636:	0e1b      	lsrs	r3, r3, #24
 8007638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800763c:	ee07 3a90 	vmov	s15, r3
 8007640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007644:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007648:	ee37 7a87 	vadd.f32	s14, s15, s14
 800764c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007654:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007658:	ee17 2a90 	vmov	r2, s15
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007660:	e008      	b.n	8007674 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	609a      	str	r2, [r3, #8]
}
 8007674:	bf00      	nop
 8007676:	3724      	adds	r7, #36	; 0x24
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr
 8007680:	58024400 	.word	0x58024400
 8007684:	03d09000 	.word	0x03d09000
 8007688:	46000000 	.word	0x46000000
 800768c:	4c742400 	.word	0x4c742400
 8007690:	4a742400 	.word	0x4a742400
 8007694:	4af42400 	.word	0x4af42400

08007698 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007698:	b480      	push	{r7}
 800769a:	b089      	sub	sp, #36	; 0x24
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80076a0:	4b9d      	ldr	r3, [pc, #628]	; (8007918 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80076a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a4:	f003 0303 	and.w	r3, r3, #3
 80076a8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80076aa:	4b9b      	ldr	r3, [pc, #620]	; (8007918 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80076ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ae:	091b      	lsrs	r3, r3, #4
 80076b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076b4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80076b6:	4b98      	ldr	r3, [pc, #608]	; (8007918 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80076b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ba:	f003 0301 	and.w	r3, r3, #1
 80076be:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80076c0:	4b95      	ldr	r3, [pc, #596]	; (8007918 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80076c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076c4:	08db      	lsrs	r3, r3, #3
 80076c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076ca:	693a      	ldr	r2, [r7, #16]
 80076cc:	fb02 f303 	mul.w	r3, r2, r3
 80076d0:	ee07 3a90 	vmov	s15, r3
 80076d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076d8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	f000 810a 	beq.w	80078f8 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d05a      	beq.n	80077a0 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d302      	bcc.n	80076f4 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d078      	beq.n	80077e4 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80076f2:	e099      	b.n	8007828 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076f4:	4b88      	ldr	r3, [pc, #544]	; (8007918 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 0320 	and.w	r3, r3, #32
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d02d      	beq.n	800775c <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007700:	4b85      	ldr	r3, [pc, #532]	; (8007918 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	08db      	lsrs	r3, r3, #3
 8007706:	f003 0303 	and.w	r3, r3, #3
 800770a:	4a84      	ldr	r2, [pc, #528]	; (800791c <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800770c:	fa22 f303 	lsr.w	r3, r2, r3
 8007710:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	ee07 3a90 	vmov	s15, r3
 8007718:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	ee07 3a90 	vmov	s15, r3
 8007722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800772a:	4b7b      	ldr	r3, [pc, #492]	; (8007918 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800772c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007732:	ee07 3a90 	vmov	s15, r3
 8007736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800773a:	ed97 6a03 	vldr	s12, [r7, #12]
 800773e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007920 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800774a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800774e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007756:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800775a:	e087      	b.n	800786c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	ee07 3a90 	vmov	s15, r3
 8007762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007766:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007924 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800776a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800776e:	4b6a      	ldr	r3, [pc, #424]	; (8007918 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007776:	ee07 3a90 	vmov	s15, r3
 800777a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800777e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007782:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007920 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800778a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800778e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800779a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800779e:	e065      	b.n	800786c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	ee07 3a90 	vmov	s15, r3
 80077a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077aa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007928 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80077ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077b2:	4b59      	ldr	r3, [pc, #356]	; (8007918 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80077b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ba:	ee07 3a90 	vmov	s15, r3
 80077be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80077c6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007920 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80077ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077e2:	e043      	b.n	800786c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	ee07 3a90 	vmov	s15, r3
 80077ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800792c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80077f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077f6:	4b48      	ldr	r3, [pc, #288]	; (8007918 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80077f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077fe:	ee07 3a90 	vmov	s15, r3
 8007802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007806:	ed97 6a03 	vldr	s12, [r7, #12]
 800780a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007920 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800780e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007816:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800781a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800781e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007822:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007826:	e021      	b.n	800786c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	ee07 3a90 	vmov	s15, r3
 800782e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007832:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007928 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800783a:	4b37      	ldr	r3, [pc, #220]	; (8007918 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800783c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800783e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007842:	ee07 3a90 	vmov	s15, r3
 8007846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800784a:	ed97 6a03 	vldr	s12, [r7, #12]
 800784e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007920 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800785a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800785e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007866:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800786a:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800786c:	4b2a      	ldr	r3, [pc, #168]	; (8007918 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800786e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007870:	0a5b      	lsrs	r3, r3, #9
 8007872:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007876:	ee07 3a90 	vmov	s15, r3
 800787a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800787e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007882:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007886:	edd7 6a07 	vldr	s13, [r7, #28]
 800788a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800788e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007892:	ee17 2a90 	vmov	r2, s15
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800789a:	4b1f      	ldr	r3, [pc, #124]	; (8007918 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800789c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800789e:	0c1b      	lsrs	r3, r3, #16
 80078a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078a4:	ee07 3a90 	vmov	s15, r3
 80078a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80078b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078c0:	ee17 2a90 	vmov	r2, s15
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80078c8:	4b13      	ldr	r3, [pc, #76]	; (8007918 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80078ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078cc:	0e1b      	lsrs	r3, r3, #24
 80078ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078d2:	ee07 3a90 	vmov	s15, r3
 80078d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80078e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078ee:	ee17 2a90 	vmov	r2, s15
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80078f6:	e008      	b.n	800790a <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	609a      	str	r2, [r3, #8]
}
 800790a:	bf00      	nop
 800790c:	3724      	adds	r7, #36	; 0x24
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	58024400 	.word	0x58024400
 800791c:	03d09000 	.word	0x03d09000
 8007920:	46000000 	.word	0x46000000
 8007924:	4c742400 	.word	0x4c742400
 8007928:	4a742400 	.word	0x4a742400
 800792c:	4af42400 	.word	0x4af42400

08007930 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800793a:	2300      	movs	r3, #0
 800793c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800793e:	4b53      	ldr	r3, [pc, #332]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 8007940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007942:	f003 0303 	and.w	r3, r3, #3
 8007946:	2b03      	cmp	r3, #3
 8007948:	d101      	bne.n	800794e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e099      	b.n	8007a82 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800794e:	4b4f      	ldr	r3, [pc, #316]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a4e      	ldr	r2, [pc, #312]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 8007954:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007958:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800795a:	f7f9 fff7 	bl	800194c <HAL_GetTick>
 800795e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007960:	e008      	b.n	8007974 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007962:	f7f9 fff3 	bl	800194c <HAL_GetTick>
 8007966:	4602      	mov	r2, r0
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	1ad3      	subs	r3, r2, r3
 800796c:	2b02      	cmp	r3, #2
 800796e:	d901      	bls.n	8007974 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007970:	2303      	movs	r3, #3
 8007972:	e086      	b.n	8007a82 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007974:	4b45      	ldr	r3, [pc, #276]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800797c:	2b00      	cmp	r3, #0
 800797e:	d1f0      	bne.n	8007962 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007980:	4b42      	ldr	r3, [pc, #264]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 8007982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007984:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	031b      	lsls	r3, r3, #12
 800798e:	493f      	ldr	r1, [pc, #252]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 8007990:	4313      	orrs	r3, r2
 8007992:	628b      	str	r3, [r1, #40]	; 0x28
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	3b01      	subs	r3, #1
 800799a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	3b01      	subs	r3, #1
 80079a4:	025b      	lsls	r3, r3, #9
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	431a      	orrs	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	3b01      	subs	r3, #1
 80079b0:	041b      	lsls	r3, r3, #16
 80079b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80079b6:	431a      	orrs	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	3b01      	subs	r3, #1
 80079be:	061b      	lsls	r3, r3, #24
 80079c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80079c4:	4931      	ldr	r1, [pc, #196]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 80079c6:	4313      	orrs	r3, r2
 80079c8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80079ca:	4b30      	ldr	r3, [pc, #192]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 80079cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	695b      	ldr	r3, [r3, #20]
 80079d6:	492d      	ldr	r1, [pc, #180]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 80079d8:	4313      	orrs	r3, r2
 80079da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80079dc:	4b2b      	ldr	r3, [pc, #172]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 80079de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e0:	f023 0220 	bic.w	r2, r3, #32
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	699b      	ldr	r3, [r3, #24]
 80079e8:	4928      	ldr	r1, [pc, #160]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 80079ea:	4313      	orrs	r3, r2
 80079ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80079ee:	4b27      	ldr	r3, [pc, #156]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 80079f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f2:	4a26      	ldr	r2, [pc, #152]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 80079f4:	f023 0310 	bic.w	r3, r3, #16
 80079f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80079fa:	4b24      	ldr	r3, [pc, #144]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 80079fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079fe:	4b24      	ldr	r3, [pc, #144]	; (8007a90 <RCCEx_PLL2_Config+0x160>)
 8007a00:	4013      	ands	r3, r2
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	69d2      	ldr	r2, [r2, #28]
 8007a06:	00d2      	lsls	r2, r2, #3
 8007a08:	4920      	ldr	r1, [pc, #128]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007a0e:	4b1f      	ldr	r3, [pc, #124]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 8007a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a12:	4a1e      	ldr	r2, [pc, #120]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 8007a14:	f043 0310 	orr.w	r3, r3, #16
 8007a18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d106      	bne.n	8007a2e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007a20:	4b1a      	ldr	r3, [pc, #104]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 8007a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a24:	4a19      	ldr	r2, [pc, #100]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 8007a26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a2c:	e00f      	b.n	8007a4e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d106      	bne.n	8007a42 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007a34:	4b15      	ldr	r3, [pc, #84]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 8007a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a38:	4a14      	ldr	r2, [pc, #80]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 8007a3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a40:	e005      	b.n	8007a4e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007a42:	4b12      	ldr	r3, [pc, #72]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 8007a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a46:	4a11      	ldr	r2, [pc, #68]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 8007a48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a4c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007a4e:	4b0f      	ldr	r3, [pc, #60]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a0e      	ldr	r2, [pc, #56]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 8007a54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007a58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a5a:	f7f9 ff77 	bl	800194c <HAL_GetTick>
 8007a5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a60:	e008      	b.n	8007a74 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007a62:	f7f9 ff73 	bl	800194c <HAL_GetTick>
 8007a66:	4602      	mov	r2, r0
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	1ad3      	subs	r3, r2, r3
 8007a6c:	2b02      	cmp	r3, #2
 8007a6e:	d901      	bls.n	8007a74 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a70:	2303      	movs	r3, #3
 8007a72:	e006      	b.n	8007a82 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a74:	4b05      	ldr	r3, [pc, #20]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d0f0      	beq.n	8007a62 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	58024400 	.word	0x58024400
 8007a90:	ffff0007 	.word	0xffff0007

08007a94 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007aa2:	4b53      	ldr	r3, [pc, #332]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa6:	f003 0303 	and.w	r3, r3, #3
 8007aaa:	2b03      	cmp	r3, #3
 8007aac:	d101      	bne.n	8007ab2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e099      	b.n	8007be6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007ab2:	4b4f      	ldr	r3, [pc, #316]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a4e      	ldr	r2, [pc, #312]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007ab8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007abc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007abe:	f7f9 ff45 	bl	800194c <HAL_GetTick>
 8007ac2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ac4:	e008      	b.n	8007ad8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007ac6:	f7f9 ff41 	bl	800194c <HAL_GetTick>
 8007aca:	4602      	mov	r2, r0
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d901      	bls.n	8007ad8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	e086      	b.n	8007be6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ad8:	4b45      	ldr	r3, [pc, #276]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1f0      	bne.n	8007ac6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007ae4:	4b42      	ldr	r3, [pc, #264]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	051b      	lsls	r3, r3, #20
 8007af2:	493f      	ldr	r1, [pc, #252]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007af4:	4313      	orrs	r3, r2
 8007af6:	628b      	str	r3, [r1, #40]	; 0x28
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	3b01      	subs	r3, #1
 8007afe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	3b01      	subs	r3, #1
 8007b08:	025b      	lsls	r3, r3, #9
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	431a      	orrs	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	3b01      	subs	r3, #1
 8007b14:	041b      	lsls	r3, r3, #16
 8007b16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007b1a:	431a      	orrs	r2, r3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	3b01      	subs	r3, #1
 8007b22:	061b      	lsls	r3, r3, #24
 8007b24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007b28:	4931      	ldr	r1, [pc, #196]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007b2e:	4b30      	ldr	r3, [pc, #192]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	695b      	ldr	r3, [r3, #20]
 8007b3a:	492d      	ldr	r1, [pc, #180]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007b40:	4b2b      	ldr	r3, [pc, #172]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b44:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	4928      	ldr	r1, [pc, #160]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007b52:	4b27      	ldr	r3, [pc, #156]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b56:	4a26      	ldr	r2, [pc, #152]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007b5e:	4b24      	ldr	r3, [pc, #144]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007b60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b62:	4b24      	ldr	r3, [pc, #144]	; (8007bf4 <RCCEx_PLL3_Config+0x160>)
 8007b64:	4013      	ands	r3, r2
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	69d2      	ldr	r2, [r2, #28]
 8007b6a:	00d2      	lsls	r2, r2, #3
 8007b6c:	4920      	ldr	r1, [pc, #128]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007b72:	4b1f      	ldr	r3, [pc, #124]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b76:	4a1e      	ldr	r2, [pc, #120]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d106      	bne.n	8007b92 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007b84:	4b1a      	ldr	r3, [pc, #104]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b88:	4a19      	ldr	r2, [pc, #100]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007b8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007b8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b90:	e00f      	b.n	8007bb2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d106      	bne.n	8007ba6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007b98:	4b15      	ldr	r3, [pc, #84]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9c:	4a14      	ldr	r2, [pc, #80]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007b9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007ba2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ba4:	e005      	b.n	8007bb2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007ba6:	4b12      	ldr	r3, [pc, #72]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007baa:	4a11      	ldr	r2, [pc, #68]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007bac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007bb0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007bb2:	4b0f      	ldr	r3, [pc, #60]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a0e      	ldr	r2, [pc, #56]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bbe:	f7f9 fec5 	bl	800194c <HAL_GetTick>
 8007bc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007bc4:	e008      	b.n	8007bd8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007bc6:	f7f9 fec1 	bl	800194c <HAL_GetTick>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	1ad3      	subs	r3, r2, r3
 8007bd0:	2b02      	cmp	r3, #2
 8007bd2:	d901      	bls.n	8007bd8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	e006      	b.n	8007be6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007bd8:	4b05      	ldr	r3, [pc, #20]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d0f0      	beq.n	8007bc6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	58024400 	.word	0x58024400
 8007bf4:	ffff0007 	.word	0xffff0007

08007bf8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f000 808a 	beq.w	8007d20 <HAL_RTC_Init+0x128>
  {
    status = HAL_OK;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	73fb      	strb	r3, [r7, #15]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d106      	bne.n	8007c2a <HAL_RTC_Init+0x32>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f7f9 fbcd 	bl	80013c4 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2202      	movs	r2, #2
 8007c2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	22ca      	movs	r2, #202	; 0xca
 8007c38:	625a      	str	r2, [r3, #36]	; 0x24
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2253      	movs	r2, #83	; 0x53
 8007c40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 fab6 	bl	80081b4 <RTC_EnterInitMode>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00a      	beq.n	8007c64 <HAL_RTC_Init+0x6c>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	22ff      	movs	r2, #255	; 0xff
 8007c54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2204      	movs	r2, #4
 8007c5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	73fb      	strb	r3, [r7, #15]
 8007c62:	e05d      	b.n	8007d20 <HAL_RTC_Init+0x128>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	6899      	ldr	r1, [r3, #8]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	4b2f      	ldr	r3, [pc, #188]	; (8007d2c <HAL_RTC_Init+0x134>)
 8007c70:	400b      	ands	r3, r1
 8007c72:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	6899      	ldr	r1, [r3, #8]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	685a      	ldr	r2, [r3, #4]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	431a      	orrs	r2, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	699b      	ldr	r3, [r3, #24]
 8007c88:	431a      	orrs	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	430a      	orrs	r2, r1
 8007c90:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	0419      	lsls	r1, r3, #16
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	68da      	ldr	r2, [r3, #12]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	430a      	orrs	r2, r1
 8007ca2:	611a      	str	r2, [r3, #16]
      /* Exit Initialization mode */
#if defined(RTC_ICSR_INIT)
      CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
#endif /* RTC_ICSR_INIT */
#if defined(RTC_ISR_INIT)
      CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68da      	ldr	r2, [r3, #12]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007cb2:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_INIT */

      /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	f003 0320 	and.w	r3, r3, #32
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d10f      	bne.n	8007ce2 <HAL_RTC_Init+0xea>
      {
        if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 fa50 	bl	8008168 <HAL_RTC_WaitForSynchro>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d009      	beq.n	8007ce2 <HAL_RTC_Init+0xea>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	22ff      	movs	r2, #255	; 0xff
 8007cd4:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2204      	movs	r2, #4
 8007cda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          status = HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	73fb      	strb	r3, [r7, #15]
        }
      }

      if(status == HAL_OK)
 8007ce2:	7bfb      	ldrb	r3, [r7, #15]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d11b      	bne.n	8007d20 <HAL_RTC_Init+0x128>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f022 0203 	bic.w	r2, r2, #3
 8007cf6:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	69da      	ldr	r2, [r3, #28]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	695b      	ldr	r3, [r3, #20]
 8007d06:	431a      	orrs	r2, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	430a      	orrs	r2, r1
 8007d0e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	22ff      	movs	r2, #255	; 0xff
 8007d16:	625a      	str	r2, [r3, #36]	; 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  /* return status */
  return status;
 8007d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	ff8fffbf 	.word	0xff8fffbf

08007d30 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007d30:	b590      	push	{r4, r7, lr}
 8007d32:	b087      	sub	sp, #28
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d101      	bne.n	8007d4a <HAL_RTC_SetTime+0x1a>
 8007d46:	2302      	movs	r3, #2
 8007d48:	e0b0      	b.n	8007eac <HAL_RTC_SetTime+0x17c>
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2202      	movs	r2, #2
 8007d56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	22ca      	movs	r2, #202	; 0xca
 8007d60:	625a      	str	r2, [r3, #36]	; 0x24
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2253      	movs	r2, #83	; 0x53
 8007d68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f000 fa22 	bl	80081b4 <RTC_EnterInitMode>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00d      	beq.n	8007d92 <HAL_RTC_SetTime+0x62>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	22ff      	movs	r2, #255	; 0xff
 8007d7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2204      	movs	r2, #4
 8007d82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e08c      	b.n	8007eac <HAL_RTC_SetTime+0x17c>
  }
  else
  {
    if(Format == RTC_FORMAT_BIN)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d126      	bne.n	8007de6 <HAL_RTC_SetTime+0xb6>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d102      	bne.n	8007dac <HAL_RTC_SetTime+0x7c>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	2200      	movs	r2, #0
 8007daa:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	4618      	mov	r0, r3
 8007db2:	f000 fa29 	bl	8008208 <RTC_ByteToBcd2>
 8007db6:	4603      	mov	r3, r0
 8007db8:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	785b      	ldrb	r3, [r3, #1]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f000 fa22 	bl	8008208 <RTC_ByteToBcd2>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007dc8:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	789b      	ldrb	r3, [r3, #2]
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f000 fa1a 	bl	8008208 <RTC_ByteToBcd2>
 8007dd4:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007dd6:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	78db      	ldrb	r3, [r3, #3]
 8007dde:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007de0:	4313      	orrs	r3, r2
 8007de2:	617b      	str	r3, [r7, #20]
 8007de4:	e018      	b.n	8007e18 <HAL_RTC_SetTime+0xe8>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d102      	bne.n	8007dfa <HAL_RTC_SetTime+0xca>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	2200      	movs	r2, #0
 8007df8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	785b      	ldrb	r3, [r3, #1]
 8007e04:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007e06:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8007e08:	68ba      	ldr	r2, [r7, #8]
 8007e0a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007e0c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	78db      	ldrb	r3, [r3, #3]
 8007e12:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007e14:	4313      	orrs	r3, r2
 8007e16:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	6979      	ldr	r1, [r7, #20]
 8007e1e:	4b25      	ldr	r3, [pc, #148]	; (8007eb4 <HAL_RTC_SetTime+0x184>)
 8007e20:	400b      	ands	r3, r1
 8007e22:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	689a      	ldr	r2, [r3, #8]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007e32:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	6899      	ldr	r1, [r3, #8]
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	68da      	ldr	r2, [r3, #12]
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	431a      	orrs	r2, r3
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	430a      	orrs	r2, r1
 8007e4a:	609a      	str	r2, [r3, #8]
    /* Exit Initialization mode */
#if defined(RTC_ICSR_INIT)
    CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
#endif /* RTC_ICSR_INIT */
#if defined(RTC_ISR_INIT)
    CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68da      	ldr	r2, [r3, #12]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e5a:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_INIT */

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	f003 0320 	and.w	r3, r3, #32
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d113      	bne.n	8007e92 <HAL_RTC_SetTime+0x162>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007e6a:	68f8      	ldr	r0, [r7, #12]
 8007e6c:	f000 f97c 	bl	8008168 <HAL_RTC_WaitForSynchro>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00d      	beq.n	8007e92 <HAL_RTC_SetTime+0x162>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	22ff      	movs	r2, #255	; 0xff
 8007e7c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2204      	movs	r2, #4
 8007e82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e00c      	b.n	8007eac <HAL_RTC_SetTime+0x17c>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	22ff      	movs	r2, #255	; 0xff
 8007e98:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    __HAL_UNLOCK(hrtc);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8007eaa:	2300      	movs	r3, #0
  }
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	371c      	adds	r7, #28
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd90      	pop	{r4, r7, pc}
 8007eb4:	007f7f7f 	.word	0x007f7f7f

08007eb8 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b086      	sub	sp, #24
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	60b9      	str	r1, [r7, #8]
 8007ec2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	4b22      	ldr	r3, [pc, #136]	; (8007f6c <HAL_RTC_GetTime+0xb4>)
 8007ee4:	4013      	ands	r3, r2
 8007ee6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	0c1b      	lsrs	r3, r3, #16
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ef2:	b2da      	uxtb	r2, r3
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	0a1b      	lsrs	r3, r3, #8
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f02:	b2da      	uxtb	r2, r3
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f10:	b2da      	uxtb	r2, r3
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	0d9b      	lsrs	r3, r3, #22
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	f003 0301 	and.w	r3, r3, #1
 8007f20:	b2da      	uxtb	r2, r3
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d11a      	bne.n	8007f62 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	4618      	mov	r0, r3
 8007f32:	f000 f989 	bl	8008248 <RTC_Bcd2ToByte>
 8007f36:	4603      	mov	r3, r0
 8007f38:	461a      	mov	r2, r3
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	785b      	ldrb	r3, [r3, #1]
 8007f42:	4618      	mov	r0, r3
 8007f44:	f000 f980 	bl	8008248 <RTC_Bcd2ToByte>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	789b      	ldrb	r3, [r3, #2]
 8007f54:	4618      	mov	r0, r3
 8007f56:	f000 f977 	bl	8008248 <RTC_Bcd2ToByte>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007f62:	2300      	movs	r3, #0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3718      	adds	r7, #24
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	007f7f7f 	.word	0x007f7f7f

08007f70 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007f70:	b590      	push	{r4, r7, lr}
 8007f72:	b087      	sub	sp, #28
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d101      	bne.n	8007f8a <HAL_RTC_SetDate+0x1a>
 8007f86:	2302      	movs	r3, #2
 8007f88:	e09a      	b.n	80080c0 <HAL_RTC_SetDate+0x150>
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2202      	movs	r2, #2
 8007f96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d10e      	bne.n	8007fbe <HAL_RTC_SetDate+0x4e>
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	785b      	ldrb	r3, [r3, #1]
 8007fa4:	f003 0310 	and.w	r3, r3, #16
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d008      	beq.n	8007fbe <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	785b      	ldrb	r3, [r3, #1]
 8007fb0:	f023 0310 	bic.w	r3, r3, #16
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	330a      	adds	r3, #10
 8007fb8:	b2da      	uxtb	r2, r3
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d11c      	bne.n	8007ffe <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	78db      	ldrb	r3, [r3, #3]
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f000 f91d 	bl	8008208 <RTC_ByteToBcd2>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	785b      	ldrb	r3, [r3, #1]
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f000 f916 	bl	8008208 <RTC_ByteToBcd2>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007fe0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	789b      	ldrb	r3, [r3, #2]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f000 f90e 	bl	8008208 <RTC_ByteToBcd2>
 8007fec:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007fee:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	617b      	str	r3, [r7, #20]
 8007ffc:	e00e      	b.n	800801c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	78db      	ldrb	r3, [r3, #3]
 8008002:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	785b      	ldrb	r3, [r3, #1]
 8008008:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800800a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800800c:	68ba      	ldr	r2, [r7, #8]
 800800e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008010:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008018:	4313      	orrs	r3, r2
 800801a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	22ca      	movs	r2, #202	; 0xca
 8008022:	625a      	str	r2, [r3, #36]	; 0x24
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2253      	movs	r2, #83	; 0x53
 800802a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800802c:	68f8      	ldr	r0, [r7, #12]
 800802e:	f000 f8c1 	bl	80081b4 <RTC_EnterInitMode>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00d      	beq.n	8008054 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	22ff      	movs	r2, #255	; 0xff
 800803e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2204      	movs	r2, #4
 8008044:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2200      	movs	r2, #0
 800804c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	e035      	b.n	80080c0 <HAL_RTC_SetDate+0x150>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	6979      	ldr	r1, [r7, #20]
 800805a:	4b1b      	ldr	r3, [pc, #108]	; (80080c8 <HAL_RTC_SetDate+0x158>)
 800805c:	400b      	ands	r3, r1
 800805e:	6053      	str	r3, [r2, #4]
    /* Exit Initialization mode */
#if defined(RTC_ICSR_INIT)
    CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
#endif /* RTC_ISR_INIT */
#if defined(RTC_ISR_INIT)
    CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68da      	ldr	r2, [r3, #12]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800806e:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_INIT */

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	f003 0320 	and.w	r3, r3, #32
 800807a:	2b00      	cmp	r3, #0
 800807c:	d113      	bne.n	80080a6 <HAL_RTC_SetDate+0x136>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800807e:	68f8      	ldr	r0, [r7, #12]
 8008080:	f000 f872 	bl	8008168 <HAL_RTC_WaitForSynchro>
 8008084:	4603      	mov	r3, r0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00d      	beq.n	80080a6 <HAL_RTC_SetDate+0x136>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	22ff      	movs	r2, #255	; 0xff
 8008090:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2204      	movs	r2, #4
 8008096:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2200      	movs	r2, #0
 800809e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e00c      	b.n	80080c0 <HAL_RTC_SetDate+0x150>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	22ff      	movs	r2, #255	; 0xff
 80080ac:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2201      	movs	r2, #1
 80080b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 80080be:	2300      	movs	r3, #0
  }
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	371c      	adds	r7, #28
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd90      	pop	{r4, r7, pc}
 80080c8:	00ffff3f 	.word	0x00ffff3f

080080cc <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b086      	sub	sp, #24
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	685a      	ldr	r2, [r3, #4]
 80080de:	4b21      	ldr	r3, [pc, #132]	; (8008164 <HAL_RTC_GetDate+0x98>)
 80080e0:	4013      	ands	r3, r2
 80080e2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	0c1b      	lsrs	r3, r3, #16
 80080e8:	b2da      	uxtb	r2, r3
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	0a1b      	lsrs	r3, r3, #8
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	f003 031f 	and.w	r3, r3, #31
 80080f8:	b2da      	uxtb	r2, r3
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	b2db      	uxtb	r3, r3
 8008102:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008106:	b2da      	uxtb	r2, r3
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	0b5b      	lsrs	r3, r3, #13
 8008110:	b2db      	uxtb	r3, r3
 8008112:	f003 0307 	and.w	r3, r3, #7
 8008116:	b2da      	uxtb	r2, r3
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d11a      	bne.n	8008158 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	78db      	ldrb	r3, [r3, #3]
 8008126:	4618      	mov	r0, r3
 8008128:	f000 f88e 	bl	8008248 <RTC_Bcd2ToByte>
 800812c:	4603      	mov	r3, r0
 800812e:	461a      	mov	r2, r3
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	785b      	ldrb	r3, [r3, #1]
 8008138:	4618      	mov	r0, r3
 800813a:	f000 f885 	bl	8008248 <RTC_Bcd2ToByte>
 800813e:	4603      	mov	r3, r0
 8008140:	461a      	mov	r2, r3
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	789b      	ldrb	r3, [r3, #2]
 800814a:	4618      	mov	r0, r3
 800814c:	f000 f87c 	bl	8008248 <RTC_Bcd2ToByte>
 8008150:	4603      	mov	r3, r0
 8008152:	461a      	mov	r2, r3
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3718      	adds	r7, #24
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	00ffff3f 	.word	0x00ffff3f

08008168 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68da      	ldr	r2, [r3, #12]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800817e:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8008180:	f7f9 fbe4 	bl	800194c <HAL_GetTick>
 8008184:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008186:	e009      	b.n	800819c <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008188:	f7f9 fbe0 	bl	800194c <HAL_GetTick>
 800818c:	4602      	mov	r2, r0
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008196:	d901      	bls.n	800819c <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8008198:	2303      	movs	r3, #3
 800819a:	e007      	b.n	80081ac <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	f003 0320 	and.w	r3, r3, #32
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d0ee      	beq.n	8008188 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d119      	bne.n	80081fe <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f04f 32ff 	mov.w	r2, #4294967295
 80081d2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80081d4:	f7f9 fbba 	bl	800194c <HAL_GetTick>
 80081d8:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80081da:	e009      	b.n	80081f0 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80081dc:	f7f9 fbb6 	bl	800194c <HAL_GetTick>
 80081e0:	4602      	mov	r2, r0
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	1ad3      	subs	r3, r2, r3
 80081e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081ea:	d901      	bls.n	80081f0 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80081ec:	2303      	movs	r3, #3
 80081ee:	e007      	b.n	8008200 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d0ee      	beq.n	80081dc <RTC_EnterInitMode+0x28>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return HAL_OK;
 80081fe:	2300      	movs	r3, #0
}
 8008200:	4618      	mov	r0, r3
 8008202:	3710      	adds	r7, #16
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	4603      	mov	r3, r0
 8008210:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008212:	2300      	movs	r3, #0
 8008214:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8008216:	79fb      	ldrb	r3, [r7, #7]
 8008218:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800821a:	e005      	b.n	8008228 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	3301      	adds	r3, #1
 8008220:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8008222:	7afb      	ldrb	r3, [r7, #11]
 8008224:	3b0a      	subs	r3, #10
 8008226:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8008228:	7afb      	ldrb	r3, [r7, #11]
 800822a:	2b09      	cmp	r3, #9
 800822c:	d8f6      	bhi.n	800821c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	b2db      	uxtb	r3, r3
 8008232:	011b      	lsls	r3, r3, #4
 8008234:	b2da      	uxtb	r2, r3
 8008236:	7afb      	ldrb	r3, [r7, #11]
 8008238:	4313      	orrs	r3, r2
 800823a:	b2db      	uxtb	r3, r3
}
 800823c:	4618      	mov	r0, r3
 800823e:	3714      	adds	r7, #20
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
 800824e:	4603      	mov	r3, r0
 8008250:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8008252:	79fb      	ldrb	r3, [r7, #7]
 8008254:	091b      	lsrs	r3, r3, #4
 8008256:	b2db      	uxtb	r3, r3
 8008258:	461a      	mov	r2, r3
 800825a:	0092      	lsls	r2, r2, #2
 800825c:	4413      	add	r3, r2
 800825e:	005b      	lsls	r3, r3, #1
 8008260:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8008262:	79fb      	ldrb	r3, [r7, #7]
 8008264:	f003 030f 	and.w	r3, r3, #15
 8008268:	b2da      	uxtb	r2, r3
 800826a:	7bfb      	ldrb	r3, [r7, #15]
 800826c:	4413      	add	r3, r2
 800826e:	b2db      	uxtb	r3, r3
}
 8008270:	4618      	mov	r0, r3
 8008272:	3714      	adds	r7, #20
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b08a      	sub	sp, #40	; 0x28
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d101      	bne.n	800828e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e07c      	b.n	8008388 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008294:	b2db      	uxtb	r3, r3
 8008296:	2b00      	cmp	r3, #0
 8008298:	d10c      	bne.n	80082b4 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	699b      	ldr	r3, [r3, #24]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d102      	bne.n	80082ae <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2202      	movs	r2, #2
 80082ac:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f7f9 f8a2 	bl	80013f8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2203      	movs	r2, #3
 80082b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 f867 	bl	8008390 <HAL_SD_InitCard>
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d001      	beq.n	80082cc <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	e05d      	b.n	8008388 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80082cc:	f107 0308 	add.w	r3, r7, #8
 80082d0:	4619      	mov	r1, r3
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 fdb8 	bl	8008e48 <HAL_SD_GetCardStatus>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d001      	beq.n	80082e2 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	e052      	b.n	8008388 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80082e2:	7e3b      	ldrb	r3, [r7, #24]
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80082e8:	7e7b      	ldrb	r3, [r7, #25]
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d10a      	bne.n	800830c <HAL_SD_Init+0x90>
 80082f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d102      	bne.n	8008302 <HAL_SD_Init+0x86>
 80082fc:	6a3b      	ldr	r3, [r7, #32]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d004      	beq.n	800830c <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008308:	65da      	str	r2, [r3, #92]	; 0x5c
 800830a:	e00b      	b.n	8008324 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008310:	2b01      	cmp	r3, #1
 8008312:	d104      	bne.n	800831e <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f44f 7280 	mov.w	r2, #256	; 0x100
 800831a:	65da      	str	r2, [r3, #92]	; 0x5c
 800831c:	e002      	b.n	8008324 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	4619      	mov	r1, r3
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fe6e 	bl	800900c <HAL_SD_ConfigWideBusOperation>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d001      	beq.n	800833a <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	e026      	b.n	8008388 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800833a:	f7f9 fb07 	bl	800194c <HAL_GetTick>
 800833e:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008340:	e011      	b.n	8008366 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8008342:	f7f9 fb03 	bl	800194c <HAL_GetTick>
 8008346:	4602      	mov	r2, r0
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	1ad3      	subs	r3, r2, r3
 800834c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008350:	d109      	bne.n	8008366 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008358:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8008362:	2303      	movs	r3, #3
 8008364:	e010      	b.n	8008388 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fefa 	bl	8009160 <HAL_SD_GetCardState>
 800836c:	4603      	mov	r3, r0
 800836e:	2b04      	cmp	r3, #4
 8008370:	d1e7      	bne.n	8008342 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2201      	movs	r2, #1
 8008382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008386:	2300      	movs	r3, #0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3728      	adds	r7, #40	; 0x28
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008390:	b5b0      	push	{r4, r5, r7, lr}
 8008392:	b08e      	sub	sp, #56	; 0x38
 8008394:	af04      	add	r7, sp, #16
 8008396:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008398:	2300      	movs	r3, #0
 800839a:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800839c:	2300      	movs	r3, #0
 800839e:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80083a0:	2300      	movs	r3, #0
 80083a2:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80083a4:	2300      	movs	r3, #0
 80083a6:	617b      	str	r3, [r7, #20]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80083a8:	23fa      	movs	r3, #250	; 0xfa
 80083aa:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	699b      	ldr	r3, [r3, #24]
 80083b0:	2b02      	cmp	r3, #2
 80083b2:	d107      	bne.n	80083c4 <HAL_SD_InitCard+0x34>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f042 0210 	orr.w	r2, r2, #16
 80083c2:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681d      	ldr	r5, [r3, #0]
 80083c8:	466c      	mov	r4, sp
 80083ca:	f107 0314 	add.w	r3, r7, #20
 80083ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80083d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80083d6:	f107 0308 	add.w	r3, r7, #8
 80083da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80083dc:	4628      	mov	r0, r5
 80083de:	f004 f985 	bl	800c6ec <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4618      	mov	r0, r3
 80083e8:	f004 f9c8 	bl	800c77c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting 
     the SD initialization sequence */
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC)/(2U*SDMMC_INIT_CLK_DIV);
 80083ec:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80083f0:	f7fe fc2c 	bl	8006c4c <HAL_RCCEx_GetPeriphCLKFreq>
 80083f4:	4602      	mov	r2, r0
 80083f6:	4b2d      	ldr	r3, [pc, #180]	; (80084ac <HAL_SD_InitCard+0x11c>)
 80083f8:	fba3 2302 	umull	r2, r3, r3, r2
 80083fc:	095b      	lsrs	r3, r3, #5
 80083fe:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 8008400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008402:	2b00      	cmp	r3, #0
 8008404:	d008      	beq.n	8008418 <HAL_SD_InitCard+0x88>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8008406:	4a2a      	ldr	r2, [pc, #168]	; (80084b0 <HAL_SD_InitCard+0x120>)
 8008408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840a:	fbb2 f3f3 	udiv	r3, r2, r3
 800840e:	3301      	adds	r3, #1
 8008410:	4618      	mov	r0, r3
 8008412:	f7f9 faa7 	bl	8001964 <HAL_Delay>
 8008416:	e002      	b.n	800841e <HAL_SD_InitCard+0x8e>
  }
  else
  {
    HAL_Delay(2U);
 8008418:	2002      	movs	r0, #2
 800841a:	f7f9 faa3 	bl	8001964 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 ff7c 	bl	800931c <SD_PowerON>
 8008424:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008426:	6a3b      	ldr	r3, [r7, #32]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00b      	beq.n	8008444 <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008438:	6a3b      	ldr	r3, [r7, #32]
 800843a:	431a      	orrs	r2, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	e02e      	b.n	80084a2 <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 feab 	bl	80091a0 <SD_InitCard>
 800844a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800844c:	6a3b      	ldr	r3, [r7, #32]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d00b      	beq.n	800846a <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2201      	movs	r2, #1
 8008456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800845e:	6a3b      	ldr	r3, [r7, #32]
 8008460:	431a      	orrs	r2, r3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	e01b      	b.n	80084a2 <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008472:	4618      	mov	r0, r3
 8008474:	f004 fa18 	bl	800c8a8 <SDMMC_CmdBlockLength>
 8008478:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800847a:	6a3b      	ldr	r3, [r7, #32]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00f      	beq.n	80084a0 <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a0b      	ldr	r2, [pc, #44]	; (80084b4 <HAL_SD_InitCard+0x124>)
 8008486:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800848c:	6a3b      	ldr	r3, [r7, #32]
 800848e:	431a      	orrs	r2, r3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e000      	b.n	80084a2 <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3728      	adds	r7, #40	; 0x28
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bdb0      	pop	{r4, r5, r7, pc}
 80084aa:	bf00      	nop
 80084ac:	10624dd3 	.word	0x10624dd3
 80084b0:	00012110 	.word	0x00012110
 80084b4:	1fe00fff 	.word	0x1fe00fff

080084b8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b092      	sub	sp, #72	; 0x48
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
 80084c4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80084c6:	f7f9 fa41 	bl	800194c <HAL_GetTick>
 80084ca:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d107      	bne.n	80084ea <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084de:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	e167      	b.n	80087ba <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	f040 815a 	bne.w	80087ac <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2200      	movs	r2, #0
 80084fc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80084fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	441a      	add	r2, r3
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008508:	429a      	cmp	r2, r3
 800850a:	d907      	bls.n	800851c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008510:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	e14e      	b.n	80087ba <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2203      	movs	r2, #3
 8008520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	2200      	movs	r2, #0
 800852a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008530:	2b01      	cmp	r3, #1
 8008532:	d002      	beq.n	800853a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008536:	025b      	lsls	r3, r3, #9
 8008538:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800853a:	f04f 33ff 	mov.w	r3, #4294967295
 800853e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	025b      	lsls	r3, r3, #9
 8008544:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008546:	2390      	movs	r3, #144	; 0x90
 8008548:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800854a:	2302      	movs	r3, #2
 800854c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800854e:	2300      	movs	r3, #0
 8008550:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008552:	2300      	movs	r3, #0
 8008554:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f107 0214 	add.w	r2, r7, #20
 800855e:	4611      	mov	r1, r2
 8008560:	4618      	mov	r0, r3
 8008562:	f004 f975 	bl	800c850 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	68da      	ldr	r2, [r3, #12]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008574:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	2b01      	cmp	r3, #1
 800857a:	d90a      	bls.n	8008592 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2202      	movs	r2, #2
 8008580:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008588:	4618      	mov	r0, r3
 800858a:	f004 f9d3 	bl	800c934 <SDMMC_CmdReadMultiBlock>
 800858e:	6478      	str	r0, [r7, #68]	; 0x44
 8008590:	e009      	b.n	80085a6 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2201      	movs	r2, #1
 8008596:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800859e:	4618      	mov	r0, r3
 80085a0:	f004 f9a5 	bl	800c8ee <SDMMC_CmdReadSingleBlock>
 80085a4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80085a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d012      	beq.n	80085d2 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a84      	ldr	r2, [pc, #528]	; (80087c4 <HAL_SD_ReadBlocks+0x30c>)
 80085b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085ba:	431a      	orrs	r2, r3
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2200      	movs	r2, #0
 80085cc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e0f3      	b.n	80087ba <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80085d6:	e058      	b.n	800868a <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d033      	beq.n	800864e <HAL_SD_ReadBlocks+0x196>
 80085e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085e8:	2b1f      	cmp	r3, #31
 80085ea:	d930      	bls.n	800864e <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80085ec:	2300      	movs	r3, #0
 80085ee:	643b      	str	r3, [r7, #64]	; 0x40
 80085f0:	e027      	b.n	8008642 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4618      	mov	r0, r3
 80085f8:	f004 f8a2 	bl	800c740 <SDMMC_ReadFIFO>
 80085fc:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80085fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008600:	b2da      	uxtb	r2, r3
 8008602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008604:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008608:	3301      	adds	r3, #1
 800860a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800860c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800860e:	0a1b      	lsrs	r3, r3, #8
 8008610:	b2da      	uxtb	r2, r3
 8008612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008614:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008618:	3301      	adds	r3, #1
 800861a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800861c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800861e:	0c1b      	lsrs	r3, r3, #16
 8008620:	b2da      	uxtb	r2, r3
 8008622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008624:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008628:	3301      	adds	r3, #1
 800862a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800862c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800862e:	0e1b      	lsrs	r3, r3, #24
 8008630:	b2da      	uxtb	r2, r3
 8008632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008634:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008638:	3301      	adds	r3, #1
 800863a:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 800863c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800863e:	3301      	adds	r3, #1
 8008640:	643b      	str	r3, [r7, #64]	; 0x40
 8008642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008644:	2b07      	cmp	r3, #7
 8008646:	d9d4      	bls.n	80085f2 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800864a:	3b20      	subs	r3, #32
 800864c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800864e:	f7f9 f97d 	bl	800194c <HAL_GetTick>
 8008652:	4602      	mov	r2, r0
 8008654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008656:	1ad3      	subs	r3, r2, r3
 8008658:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800865a:	429a      	cmp	r2, r3
 800865c:	d902      	bls.n	8008664 <HAL_SD_ReadBlocks+0x1ac>
 800865e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008660:	2b00      	cmp	r3, #0
 8008662:	d112      	bne.n	800868a <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a56      	ldr	r2, [pc, #344]	; (80087c4 <HAL_SD_ReadBlocks+0x30c>)
 800866a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008670:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2201      	movs	r2, #1
 800867c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2200      	movs	r2, #0
 8008684:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008686:	2303      	movs	r3, #3
 8008688:	e097      	b.n	80087ba <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008690:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008694:	2b00      	cmp	r3, #0
 8008696:	d09f      	beq.n	80085d8 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	68da      	ldr	r2, [r3, #12]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086a6:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d022      	beq.n	80086fc <HAL_SD_ReadBlocks+0x244>
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d91f      	bls.n	80086fc <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086c0:	2b03      	cmp	r3, #3
 80086c2:	d01b      	beq.n	80086fc <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4618      	mov	r0, r3
 80086ca:	f004 f99d 	bl	800ca08 <SDMMC_CmdStopTransfer>
 80086ce:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80086d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d012      	beq.n	80086fc <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a3a      	ldr	r2, [pc, #232]	; (80087c4 <HAL_SD_ReadBlocks+0x30c>)
 80086dc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086e4:	431a      	orrs	r2, r3
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2201      	movs	r2, #1
 80086ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2200      	movs	r2, #0
 80086f6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	e05e      	b.n	80087ba <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008702:	f003 0308 	and.w	r3, r3, #8
 8008706:	2b00      	cmp	r3, #0
 8008708:	d012      	beq.n	8008730 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a2d      	ldr	r2, [pc, #180]	; (80087c4 <HAL_SD_ReadBlocks+0x30c>)
 8008710:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008716:	f043 0208 	orr.w	r2, r3, #8
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2201      	movs	r2, #1
 8008722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2200      	movs	r2, #0
 800872a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800872c:	2301      	movs	r3, #1
 800872e:	e044      	b.n	80087ba <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008736:	f003 0302 	and.w	r3, r3, #2
 800873a:	2b00      	cmp	r3, #0
 800873c:	d012      	beq.n	8008764 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a20      	ldr	r2, [pc, #128]	; (80087c4 <HAL_SD_ReadBlocks+0x30c>)
 8008744:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800874a:	f043 0202 	orr.w	r2, r3, #2
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2201      	movs	r2, #1
 8008756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	e02a      	b.n	80087ba <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800876a:	f003 0320 	and.w	r3, r3, #32
 800876e:	2b00      	cmp	r3, #0
 8008770:	d012      	beq.n	8008798 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a13      	ldr	r2, [pc, #76]	; (80087c4 <HAL_SD_ReadBlocks+0x30c>)
 8008778:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800877e:	f043 0220 	orr.w	r2, r3, #32
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2201      	movs	r2, #1
 800878a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2200      	movs	r2, #0
 8008792:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	e010      	b.n	80087ba <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a0a      	ldr	r2, [pc, #40]	; (80087c8 <HAL_SD_ReadBlocks+0x310>)
 800879e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80087a8:	2300      	movs	r3, #0
 80087aa:	e006      	b.n	80087ba <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
  }
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3748      	adds	r7, #72	; 0x48
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	1fe00fff 	.word	0x1fe00fff
 80087c8:	18000f3a 	.word	0x18000f3a

080087cc <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b092      	sub	sp, #72	; 0x48
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	607a      	str	r2, [r7, #4]
 80087d8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80087da:	f7f9 f8b7 	bl	800194c <HAL_GetTick>
 80087de:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d107      	bne.n	80087fe <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	e16b      	b.n	8008ad6 <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008804:	b2db      	uxtb	r3, r3
 8008806:	2b01      	cmp	r3, #1
 8008808:	f040 815e 	bne.w	8008ac8 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2200      	movs	r2, #0
 8008810:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008812:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	441a      	add	r2, r3
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800881c:	429a      	cmp	r2, r3
 800881e:	d907      	bls.n	8008830 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008824:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800882c:	2301      	movs	r3, #1
 800882e:	e152      	b.n	8008ad6 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2203      	movs	r2, #3
 8008834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2200      	movs	r2, #0
 800883e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008844:	2b01      	cmp	r3, #1
 8008846:	d002      	beq.n	800884e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800884a:	025b      	lsls	r3, r3, #9
 800884c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800884e:	f04f 33ff 	mov.w	r3, #4294967295
 8008852:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	025b      	lsls	r3, r3, #9
 8008858:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800885a:	2390      	movs	r3, #144	; 0x90
 800885c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800885e:	2300      	movs	r3, #0
 8008860:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008862:	2300      	movs	r3, #0
 8008864:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008866:	2300      	movs	r3, #0
 8008868:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f107 0218 	add.w	r2, r7, #24
 8008872:	4611      	mov	r1, r2
 8008874:	4618      	mov	r0, r3
 8008876:	f003 ffeb 	bl	800c850 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68da      	ldr	r2, [r3, #12]
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008888:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	2b01      	cmp	r3, #1
 800888e:	d90a      	bls.n	80088a6 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2220      	movs	r2, #32
 8008894:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800889c:	4618      	mov	r0, r3
 800889e:	f004 f88f 	bl	800c9c0 <SDMMC_CmdWriteMultiBlock>
 80088a2:	6478      	str	r0, [r7, #68]	; 0x44
 80088a4:	e009      	b.n	80088ba <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2210      	movs	r2, #16
 80088aa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80088b2:	4618      	mov	r0, r3
 80088b4:	f004 f861 	bl	800c97a <SDMMC_CmdWriteSingleBlock>
 80088b8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80088ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d012      	beq.n	80088e6 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a86      	ldr	r2, [pc, #536]	; (8008ae0 <HAL_SD_WriteBlocks+0x314>)
 80088c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088ce:	431a      	orrs	r2, r3
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2200      	movs	r2, #0
 80088e0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	e0f7      	b.n	8008ad6 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80088ea:	e05c      	b.n	80089a6 <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d037      	beq.n	800896a <HAL_SD_WriteBlocks+0x19e>
 80088fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088fc:	2b1f      	cmp	r3, #31
 80088fe:	d934      	bls.n	800896a <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8008900:	2300      	movs	r3, #0
 8008902:	643b      	str	r3, [r7, #64]	; 0x40
 8008904:	e02b      	b.n	800895e <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8008906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800890c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800890e:	3301      	adds	r3, #1
 8008910:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8008912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	021a      	lsls	r2, r3, #8
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	4313      	orrs	r3, r2
 800891c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800891e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008920:	3301      	adds	r3, #1
 8008922:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	041a      	lsls	r2, r3, #16
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	4313      	orrs	r3, r2
 800892e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008932:	3301      	adds	r3, #1
 8008934:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	061a      	lsls	r2, r3, #24
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	4313      	orrs	r3, r2
 8008940:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008944:	3301      	adds	r3, #1
 8008946:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f107 0214 	add.w	r2, r7, #20
 8008950:	4611      	mov	r1, r2
 8008952:	4618      	mov	r0, r3
 8008954:	f003 ff01 	bl	800c75a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800895a:	3301      	adds	r3, #1
 800895c:	643b      	str	r3, [r7, #64]	; 0x40
 800895e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008960:	2b07      	cmp	r3, #7
 8008962:	d9d0      	bls.n	8008906 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008966:	3b20      	subs	r3, #32
 8008968:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800896a:	f7f8 ffef 	bl	800194c <HAL_GetTick>
 800896e:	4602      	mov	r2, r0
 8008970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008972:	1ad3      	subs	r3, r2, r3
 8008974:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008976:	429a      	cmp	r2, r3
 8008978:	d902      	bls.n	8008980 <HAL_SD_WriteBlocks+0x1b4>
 800897a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800897c:	2b00      	cmp	r3, #0
 800897e:	d112      	bne.n	80089a6 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a56      	ldr	r2, [pc, #344]	; (8008ae0 <HAL_SD_WriteBlocks+0x314>)
 8008986:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800898c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800898e:	431a      	orrs	r2, r3
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2201      	movs	r2, #1
 8008998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2200      	movs	r2, #0
 80089a0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80089a2:	2303      	movs	r3, #3
 80089a4:	e097      	b.n	8008ad6 <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ac:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d09b      	beq.n	80088ec <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	68da      	ldr	r2, [r3, #12]
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089c2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d022      	beq.n	8008a18 <HAL_SD_WriteBlocks+0x24c>
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d91f      	bls.n	8008a18 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089dc:	2b03      	cmp	r3, #3
 80089de:	d01b      	beq.n	8008a18 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4618      	mov	r0, r3
 80089e6:	f004 f80f 	bl	800ca08 <SDMMC_CmdStopTransfer>
 80089ea:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80089ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d012      	beq.n	8008a18 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a3a      	ldr	r2, [pc, #232]	; (8008ae0 <HAL_SD_WriteBlocks+0x314>)
 80089f8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a00:	431a      	orrs	r2, r3
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2201      	movs	r2, #1
 8008a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2200      	movs	r2, #0
 8008a12:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	e05e      	b.n	8008ad6 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a1e:	f003 0308 	and.w	r3, r3, #8
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d012      	beq.n	8008a4c <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a2d      	ldr	r2, [pc, #180]	; (8008ae0 <HAL_SD_WriteBlocks+0x314>)
 8008a2c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a32:	f043 0208 	orr.w	r2, r3, #8
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2200      	movs	r2, #0
 8008a46:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	e044      	b.n	8008ad6 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a52:	f003 0302 	and.w	r3, r3, #2
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d012      	beq.n	8008a80 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a20      	ldr	r2, [pc, #128]	; (8008ae0 <HAL_SD_WriteBlocks+0x314>)
 8008a60:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a66:	f043 0202 	orr.w	r2, r3, #2
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2201      	movs	r2, #1
 8008a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	e02a      	b.n	8008ad6 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a86:	f003 0310 	and.w	r3, r3, #16
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d012      	beq.n	8008ab4 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a13      	ldr	r2, [pc, #76]	; (8008ae0 <HAL_SD_WriteBlocks+0x314>)
 8008a94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a9a:	f043 0210 	orr.w	r2, r3, #16
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2200      	movs	r2, #0
 8008aae:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e010      	b.n	8008ad6 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a0a      	ldr	r2, [pc, #40]	; (8008ae4 <HAL_SD_WriteBlocks+0x318>)
 8008aba:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	e006      	b.n	8008ad6 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008acc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
  }
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3748      	adds	r7, #72	; 0x48
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop
 8008ae0:	1fe00fff 	.word	0x1fe00fff
 8008ae4:	18000f3a 	.word	0x18000f3a

08008ae8 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	4603      	mov	r3, r0
 8008af0:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 8008af2:	bf00      	nop
 8008af4:	370c      	adds	r7, #12
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr
	...

08008b00 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b0e:	0f9b      	lsrs	r3, r3, #30
 8008b10:	b2da      	uxtb	r2, r3
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b1a:	0e9b      	lsrs	r3, r3, #26
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	f003 030f 	and.w	r3, r3, #15
 8008b22:	b2da      	uxtb	r2, r3
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b2c:	0e1b      	lsrs	r3, r3, #24
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	f003 0303 	and.w	r3, r3, #3
 8008b34:	b2da      	uxtb	r2, r3
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b3e:	0c1b      	lsrs	r3, r3, #16
 8008b40:	b2da      	uxtb	r2, r3
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b4a:	0a1b      	lsrs	r3, r3, #8
 8008b4c:	b2da      	uxtb	r2, r3
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b56:	b2da      	uxtb	r2, r3
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b60:	0d1b      	lsrs	r3, r3, #20
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b6c:	0c1b      	lsrs	r3, r3, #16
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	f003 030f 	and.w	r3, r3, #15
 8008b74:	b2da      	uxtb	r2, r3
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b7e:	0bdb      	lsrs	r3, r3, #15
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	f003 0301 	and.w	r3, r3, #1
 8008b86:	b2da      	uxtb	r2, r3
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b90:	0b9b      	lsrs	r3, r3, #14
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	f003 0301 	and.w	r3, r3, #1
 8008b98:	b2da      	uxtb	r2, r3
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ba2:	0b5b      	lsrs	r3, r3, #13
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	f003 0301 	and.w	r3, r3, #1
 8008baa:	b2da      	uxtb	r2, r3
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bb4:	0b1b      	lsrs	r3, r3, #12
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	f003 0301 	and.w	r3, r3, #1
 8008bbc:	b2da      	uxtb	r2, r3
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d163      	bne.n	8008c98 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bd4:	009a      	lsls	r2, r3, #2
 8008bd6:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008bda:	4013      	ands	r3, r2
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008be0:	0f92      	lsrs	r2, r2, #30
 8008be2:	431a      	orrs	r2, r3
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bec:	0edb      	lsrs	r3, r3, #27
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	f003 0307 	and.w	r3, r3, #7
 8008bf4:	b2da      	uxtb	r2, r3
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bfe:	0e1b      	lsrs	r3, r3, #24
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	f003 0307 	and.w	r3, r3, #7
 8008c06:	b2da      	uxtb	r2, r3
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c10:	0d5b      	lsrs	r3, r3, #21
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	f003 0307 	and.w	r3, r3, #7
 8008c18:	b2da      	uxtb	r2, r3
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c22:	0c9b      	lsrs	r3, r3, #18
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	f003 0307 	and.w	r3, r3, #7
 8008c2a:	b2da      	uxtb	r2, r3
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c34:	0bdb      	lsrs	r3, r3, #15
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	f003 0307 	and.w	r3, r3, #7
 8008c3c:	b2da      	uxtb	r2, r3
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	1c5a      	adds	r2, r3, #1
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	7e1b      	ldrb	r3, [r3, #24]
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	f003 0307 	and.w	r3, r3, #7
 8008c56:	3302      	adds	r3, #2
 8008c58:	2201      	movs	r2, #1
 8008c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008c62:	fb02 f203 	mul.w	r2, r2, r3
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	7a1b      	ldrb	r3, [r3, #8]
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	f003 030f 	and.w	r3, r3, #15
 8008c74:	2201      	movs	r2, #1
 8008c76:	409a      	lsls	r2, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008c84:	0a52      	lsrs	r2, r2, #9
 8008c86:	fb02 f203 	mul.w	r2, r2, r3
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c94:	659a      	str	r2, [r3, #88]	; 0x58
 8008c96:	e031      	b.n	8008cfc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d11d      	bne.n	8008cdc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ca4:	041b      	lsls	r3, r3, #16
 8008ca6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008cae:	0c1b      	lsrs	r3, r3, #16
 8008cb0:	431a      	orrs	r2, r3
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	691b      	ldr	r3, [r3, #16]
 8008cba:	3301      	adds	r3, #1
 8008cbc:	029a      	lsls	r2, r3, #10
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008cd0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	659a      	str	r2, [r3, #88]	; 0x58
 8008cda:	e00f      	b.n	8008cfc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a58      	ldr	r2, [pc, #352]	; (8008e44 <HAL_SD_GetCardCSD+0x344>)
 8008ce2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e09d      	b.n	8008e38 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d00:	0b9b      	lsrs	r3, r3, #14
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	f003 0301 	and.w	r3, r3, #1
 8008d08:	b2da      	uxtb	r2, r3
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d12:	09db      	lsrs	r3, r3, #7
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d1a:	b2da      	uxtb	r2, r3
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d2a:	b2da      	uxtb	r2, r3
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d34:	0fdb      	lsrs	r3, r3, #31
 8008d36:	b2da      	uxtb	r2, r3
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d40:	0f5b      	lsrs	r3, r3, #29
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	f003 0303 	and.w	r3, r3, #3
 8008d48:	b2da      	uxtb	r2, r3
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d52:	0e9b      	lsrs	r3, r3, #26
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	f003 0307 	and.w	r3, r3, #7
 8008d5a:	b2da      	uxtb	r2, r3
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d64:	0d9b      	lsrs	r3, r3, #22
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	f003 030f 	and.w	r3, r3, #15
 8008d6c:	b2da      	uxtb	r2, r3
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d76:	0d5b      	lsrs	r3, r3, #21
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	f003 0301 	and.w	r3, r3, #1
 8008d7e:	b2da      	uxtb	r2, r3
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d92:	0c1b      	lsrs	r3, r3, #16
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	f003 0301 	and.w	r3, r3, #1
 8008d9a:	b2da      	uxtb	r2, r3
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008da6:	0bdb      	lsrs	r3, r3, #15
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	f003 0301 	and.w	r3, r3, #1
 8008dae:	b2da      	uxtb	r2, r3
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dba:	0b9b      	lsrs	r3, r3, #14
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	f003 0301 	and.w	r3, r3, #1
 8008dc2:	b2da      	uxtb	r2, r3
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dce:	0b5b      	lsrs	r3, r3, #13
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	f003 0301 	and.w	r3, r3, #1
 8008dd6:	b2da      	uxtb	r2, r3
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008de2:	0b1b      	lsrs	r3, r3, #12
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	f003 0301 	and.w	r3, r3, #1
 8008dea:	b2da      	uxtb	r2, r3
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008df6:	0a9b      	lsrs	r3, r3, #10
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	f003 0303 	and.w	r3, r3, #3
 8008dfe:	b2da      	uxtb	r2, r3
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e0a:	0a1b      	lsrs	r3, r3, #8
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	f003 0303 	and.w	r3, r3, #3
 8008e12:	b2da      	uxtb	r2, r3
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e1e:	085b      	lsrs	r3, r3, #1
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e26:	b2da      	uxtb	r2, r3
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	2201      	movs	r2, #1
 8008e32:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008e36:	2300      	movs	r3, #0
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	370c      	adds	r7, #12
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr
 8008e44:	1fe00fff 	.word	0x1fe00fff

08008e48 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that 
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b094      	sub	sp, #80	; 0x50
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008e52:	2300      	movs	r3, #0
 8008e54:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008e58:	f107 0308 	add.w	r3, r7, #8
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 fb64 	bl	800952c <SD_SendSDStatus>
 8008e64:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d011      	beq.n	8008e90 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a4f      	ldr	r2, [pc, #316]	; (8008fb0 <HAL_SD_GetCardStatus+0x168>)
 8008e72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e7a:	431a      	orrs	r2, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2201      	movs	r2, #1
 8008e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008e8e:	e070      	b.n	8008f72 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	099b      	lsrs	r3, r3, #6
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	f003 0303 	and.w	r3, r3, #3
 8008e9a:	b2da      	uxtb	r2, r3
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	095b      	lsrs	r3, r3, #5
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	f003 0301 	and.w	r3, r3, #1
 8008eaa:	b2da      	uxtb	r2, r3
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	0a1b      	lsrs	r3, r3, #8
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008eba:	b29a      	uxth	r2, r3
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	0e1b      	lsrs	r3, r3, #24
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	b29a      	uxth	r2, r3
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	061a      	lsls	r2, r3, #24
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	021b      	lsls	r3, r3, #8
 8008ed2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008ed6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	0a1b      	lsrs	r3, r3, #8
 8008edc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008ee0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	0e1b      	lsrs	r3, r3, #24
 8008ee6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	b2da      	uxtb	r2, r3
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	0a1b      	lsrs	r3, r3, #8
 8008ef8:	b2da      	uxtb	r2, r3
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	0d1b      	lsrs	r3, r3, #20
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	f003 030f 	and.w	r3, r3, #15
 8008f08:	b2da      	uxtb	r2, r3
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	0c1b      	lsrs	r3, r3, #16
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008f18:	b29a      	uxth	r2, r3
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	4313      	orrs	r3, r2
 8008f24:	b29a      	uxth	r2, r3
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	0a9b      	lsrs	r3, r3, #10
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f34:	b2da      	uxtb	r2, r3
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	0a1b      	lsrs	r3, r3, #8
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	f003 0303 	and.w	r3, r3, #3
 8008f44:	b2da      	uxtb	r2, r3
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	091b      	lsrs	r3, r3, #4
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	f003 030f 	and.w	r3, r3, #15
 8008f54:	b2da      	uxtb	r2, r3
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	f003 030f 	and.w	r3, r3, #15
 8008f62:	b2da      	uxtb	r2, r3
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008f68:	69bb      	ldr	r3, [r7, #24]
 8008f6a:	0e1b      	lsrs	r3, r3, #24
 8008f6c:	b2da      	uxtb	r2, r3
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f003 fc94 	bl	800c8a8 <SDMMC_CmdBlockLength>
 8008f80:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d00d      	beq.n	8008fa4 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a08      	ldr	r2, [pc, #32]	; (8008fb0 <HAL_SD_GetCardStatus+0x168>)
 8008f8e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f94:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8008fa4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3750      	adds	r7, #80	; 0x50
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	1fe00fff 	.word	0x1fe00fff

08008fb4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008ffe:	2300      	movs	r3, #0
}
 8009000:	4618      	mov	r0, r3
 8009002:	370c      	adds	r7, #12
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800900c:	b5b0      	push	{r4, r5, r7, lr}
 800900e:	b08e      	sub	sp, #56	; 0x38
 8009010:	af04      	add	r7, sp, #16
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009016:	2300      	movs	r3, #0
 8009018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2203      	movs	r2, #3
 8009020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009028:	2b03      	cmp	r3, #3
 800902a:	d02e      	beq.n	800908a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009032:	d106      	bne.n	8009042 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009038:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	639a      	str	r2, [r3, #56]	; 0x38
 8009040:	e029      	b.n	8009096 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009048:	d10a      	bne.n	8009060 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 fb66 	bl	800971c <SD_WideBus_Enable>
 8009050:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009056:	6a3b      	ldr	r3, [r7, #32]
 8009058:	431a      	orrs	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	639a      	str	r2, [r3, #56]	; 0x38
 800905e:	e01a      	b.n	8009096 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d10a      	bne.n	800907c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 fba3 	bl	80097b2 <SD_WideBus_Disable>
 800906c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009072:	6a3b      	ldr	r3, [r7, #32]
 8009074:	431a      	orrs	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	639a      	str	r2, [r3, #56]	; 0x38
 800907a:	e00c      	b.n	8009096 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009080:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	639a      	str	r2, [r3, #56]	; 0x38
 8009088:	e005      	b.n	8009096 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800908e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800909a:	2b00      	cmp	r3, #0
 800909c:	d007      	beq.n	80090ae <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a2e      	ldr	r2, [pc, #184]	; (800915c <HAL_SD_ConfigWideBusOperation+0x150>)
 80090a4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80090a6:	2301      	movs	r3, #1
 80090a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80090ac:	e034      	b.n	8009118 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	691b      	ldr	r3, [r3, #16]
 80090c2:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	695b      	ldr	r3, [r3, #20]
 80090c8:	2b03      	cmp	r3, #3
 80090ca:	d903      	bls.n	80090d4 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	695b      	ldr	r3, [r3, #20]
 80090d0:	61bb      	str	r3, [r7, #24]
 80090d2:	e012      	b.n	80090fa <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090dc:	d103      	bne.n	80090e6 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	695b      	ldr	r3, [r3, #20]
 80090e2:	61bb      	str	r3, [r7, #24]
 80090e4:	e009      	b.n	80090fa <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090ee:	d102      	bne.n	80090f6 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 80090f0:	2302      	movs	r3, #2
 80090f2:	61bb      	str	r3, [r7, #24]
 80090f4:	e001      	b.n	80090fa <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 80090f6:	2304      	movs	r3, #4
 80090f8:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681d      	ldr	r5, [r3, #0]
 80090fe:	466c      	mov	r4, sp
 8009100:	f107 0314 	add.w	r3, r7, #20
 8009104:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009108:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800910c:	f107 0308 	add.w	r3, r7, #8
 8009110:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009112:	4628      	mov	r0, r5
 8009114:	f003 faea 	bl	800c6ec <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009120:	4618      	mov	r0, r3
 8009122:	f003 fbc1 	bl	800c8a8 <SDMMC_CmdBlockLength>
 8009126:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009128:	6a3b      	ldr	r3, [r7, #32]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d00c      	beq.n	8009148 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a0a      	ldr	r2, [pc, #40]	; (800915c <HAL_SD_ConfigWideBusOperation+0x150>)
 8009134:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800913a:	6a3b      	ldr	r3, [r7, #32]
 800913c:	431a      	orrs	r2, r3
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009142:	2301      	movs	r3, #1
 8009144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2201      	movs	r2, #1
 800914c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8009150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009154:	4618      	mov	r0, r3
 8009156:	3728      	adds	r7, #40	; 0x28
 8009158:	46bd      	mov	sp, r7
 800915a:	bdb0      	pop	{r4, r5, r7, pc}
 800915c:	1fe00fff 	.word	0x1fe00fff

08009160 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b086      	sub	sp, #24
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009168:	2300      	movs	r3, #0
 800916a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800916c:	f107 030c 	add.w	r3, r7, #12
 8009170:	4619      	mov	r1, r3
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 faaa 	bl	80096cc <SD_SendStatus>
 8009178:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d005      	beq.n	800918c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	431a      	orrs	r2, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	0a5b      	lsrs	r3, r3, #9
 8009190:	f003 030f 	and.w	r3, r3, #15
 8009194:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009196:	693b      	ldr	r3, [r7, #16]
}
 8009198:	4618      	mov	r0, r3
 800919a:	3718      	adds	r7, #24
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80091a0:	b590      	push	{r4, r7, lr}
 80091a2:	b091      	sub	sp, #68	; 0x44
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80091a8:	2301      	movs	r3, #1
 80091aa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4618      	mov	r0, r3
 80091b2:	f003 faf4 	bl	800c79e <SDMMC_GetPowerState>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d102      	bne.n	80091c2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80091bc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80091c0:	e0a8      	b.n	8009314 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091c6:	2b03      	cmp	r3, #3
 80091c8:	d02e      	beq.n	8009228 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4618      	mov	r0, r3
 80091d0:	f003 fd40 	bl	800cc54 <SDMMC_CmdSendCID>
 80091d4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80091d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d001      	beq.n	80091e0 <SD_InitCard+0x40>
    {
      return errorstate;
 80091dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091de:	e099      	b.n	8009314 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2100      	movs	r1, #0
 80091e6:	4618      	mov	r0, r3
 80091e8:	f003 fb1f 	bl	800c82a <SDMMC_GetResponse>
 80091ec:	4602      	mov	r2, r0
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	2104      	movs	r1, #4
 80091f8:	4618      	mov	r0, r3
 80091fa:	f003 fb16 	bl	800c82a <SDMMC_GetResponse>
 80091fe:	4602      	mov	r2, r0
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	2108      	movs	r1, #8
 800920a:	4618      	mov	r0, r3
 800920c:	f003 fb0d 	bl	800c82a <SDMMC_GetResponse>
 8009210:	4602      	mov	r2, r0
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	210c      	movs	r1, #12
 800921c:	4618      	mov	r0, r3
 800921e:	f003 fb04 	bl	800c82a <SDMMC_GetResponse>
 8009222:	4602      	mov	r2, r0
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800922c:	2b03      	cmp	r3, #3
 800922e:	d00d      	beq.n	800924c <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f107 020e 	add.w	r2, r7, #14
 8009238:	4611      	mov	r1, r2
 800923a:	4618      	mov	r0, r3
 800923c:	f003 fd49 	bl	800ccd2 <SDMMC_CmdSetRelAdd>
 8009240:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009244:	2b00      	cmp	r3, #0
 8009246:	d001      	beq.n	800924c <SD_InitCard+0xac>
    {
      return errorstate;
 8009248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800924a:	e063      	b.n	8009314 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009250:	2b03      	cmp	r3, #3
 8009252:	d036      	beq.n	80092c2 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009254:	89fb      	ldrh	r3, [r7, #14]
 8009256:	461a      	mov	r2, r3
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009264:	041b      	lsls	r3, r3, #16
 8009266:	4619      	mov	r1, r3
 8009268:	4610      	mov	r0, r2
 800926a:	f003 fd12 	bl	800cc92 <SDMMC_CmdSendCSD>
 800926e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009272:	2b00      	cmp	r3, #0
 8009274:	d001      	beq.n	800927a <SD_InitCard+0xda>
    {
      return errorstate;
 8009276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009278:	e04c      	b.n	8009314 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2100      	movs	r1, #0
 8009280:	4618      	mov	r0, r3
 8009282:	f003 fad2 	bl	800c82a <SDMMC_GetResponse>
 8009286:	4602      	mov	r2, r0
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	2104      	movs	r1, #4
 8009292:	4618      	mov	r0, r3
 8009294:	f003 fac9 	bl	800c82a <SDMMC_GetResponse>
 8009298:	4602      	mov	r2, r0
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2108      	movs	r1, #8
 80092a4:	4618      	mov	r0, r3
 80092a6:	f003 fac0 	bl	800c82a <SDMMC_GetResponse>
 80092aa:	4602      	mov	r2, r0
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	210c      	movs	r1, #12
 80092b6:	4618      	mov	r0, r3
 80092b8:	f003 fab7 	bl	800c82a <SDMMC_GetResponse>
 80092bc:	4602      	mov	r2, r0
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	2104      	movs	r1, #4
 80092c8:	4618      	mov	r0, r3
 80092ca:	f003 faae 	bl	800c82a <SDMMC_GetResponse>
 80092ce:	4603      	mov	r3, r0
 80092d0:	0d1a      	lsrs	r2, r3, #20
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80092d6:	f107 0310 	add.w	r3, r7, #16
 80092da:	4619      	mov	r1, r3
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f7ff fc0f 	bl	8008b00 <HAL_SD_GetCardCSD>
 80092e2:	4603      	mov	r3, r0
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d002      	beq.n	80092ee <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80092e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80092ec:	e012      	b.n	8009314 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6819      	ldr	r1, [r3, #0]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092f6:	041b      	lsls	r3, r3, #16
 80092f8:	f04f 0400 	mov.w	r4, #0
 80092fc:	461a      	mov	r2, r3
 80092fe:	4623      	mov	r3, r4
 8009300:	4608      	mov	r0, r1
 8009302:	f003 fbbd 	bl	800ca80 <SDMMC_CmdSelDesel>
 8009306:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800930a:	2b00      	cmp	r3, #0
 800930c:	d001      	beq.n	8009312 <SD_InitCard+0x172>
  {
    return errorstate;
 800930e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009310:	e000      	b.n	8009314 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009312:	2300      	movs	r3, #0
}
 8009314:	4618      	mov	r0, r3
 8009316:	3744      	adds	r7, #68	; 0x44
 8009318:	46bd      	mov	sp, r7
 800931a:	bd90      	pop	{r4, r7, pc}

0800931c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b088      	sub	sp, #32
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009324:	2300      	movs	r3, #0
 8009326:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8009328:	2300      	movs	r3, #0
 800932a:	61fb      	str	r3, [r7, #28]
 800932c:	2300      	movs	r3, #0
 800932e:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8009330:	f7f8 fb0c 	bl	800194c <HAL_GetTick>
 8009334:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4618      	mov	r0, r3
 800933c:	f003 fbc4 	bl	800cac8 <SDMMC_CmdGoIdleState>
 8009340:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d001      	beq.n	800934c <SD_PowerON+0x30>
  {
    return errorstate;
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	e0e9      	b.n	8009520 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4618      	mov	r0, r3
 8009352:	f003 fbd7 	bl	800cb04 <SDMMC_CmdOperCond>
 8009356:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d00d      	beq.n	800937a <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4618      	mov	r0, r3
 800936a:	f003 fbad 	bl	800cac8 <SDMMC_CmdGoIdleState>
 800936e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d004      	beq.n	8009380 <SD_PowerON+0x64>
    {
      return errorstate;
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	e0d2      	b.n	8009520 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2201      	movs	r2, #1
 800937e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009384:	2b01      	cmp	r3, #1
 8009386:	d137      	bne.n	80093f8 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2100      	movs	r1, #0
 800938e:	4618      	mov	r0, r3
 8009390:	f003 fbd8 	bl	800cb44 <SDMMC_CmdAppCommand>
 8009394:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d02d      	beq.n	80093f8 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800939c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80093a0:	e0be      	b.n	8009520 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	2100      	movs	r1, #0
 80093a8:	4618      	mov	r0, r3
 80093aa:	f003 fbcb 	bl	800cb44 <SDMMC_CmdAppCommand>
 80093ae:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d001      	beq.n	80093ba <SD_PowerON+0x9e>
    {
      return errorstate;
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	e0b2      	b.n	8009520 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	495a      	ldr	r1, [pc, #360]	; (8009528 <SD_PowerON+0x20c>)
 80093c0:	4618      	mov	r0, r3
 80093c2:	f003 fbe2 	bl	800cb8a <SDMMC_CmdAppOperCommand>
 80093c6:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d002      	beq.n	80093d4 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80093ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80093d2:	e0a5      	b.n	8009520 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2100      	movs	r1, #0
 80093da:	4618      	mov	r0, r3
 80093dc:	f003 fa25 	bl	800c82a <SDMMC_GetResponse>
 80093e0:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80093e2:	69fb      	ldr	r3, [r7, #28]
 80093e4:	0fdb      	lsrs	r3, r3, #31
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d101      	bne.n	80093ee <SD_PowerON+0xd2>
 80093ea:	2301      	movs	r3, #1
 80093ec:	e000      	b.n	80093f0 <SD_PowerON+0xd4>
 80093ee:	2300      	movs	r3, #0
 80093f0:	61bb      	str	r3, [r7, #24]

    count++;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	3301      	adds	r3, #1
 80093f6:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80093fe:	4293      	cmp	r3, r2
 8009400:	d802      	bhi.n	8009408 <SD_PowerON+0xec>
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d0cc      	beq.n	80093a2 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800940e:	4293      	cmp	r3, r2
 8009410:	d902      	bls.n	8009418 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009412:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009416:	e083      	b.n	8009520 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800941e:	2b00      	cmp	r3, #0
 8009420:	d07d      	beq.n	800951e <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2201      	movs	r2, #1
 8009426:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	699b      	ldr	r3, [r3, #24]
 800942c:	2b02      	cmp	r3, #2
 800942e:	d176      	bne.n	800951e <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8009430:	69fb      	ldr	r3, [r7, #28]
 8009432:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009436:	2b00      	cmp	r3, #0
 8009438:	d071      	beq.n	800951e <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009440:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f042 0208 	orr.w	r2, r2, #8
 8009450:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4618      	mov	r0, r3
 8009458:	f003 fca2 	bl	800cda0 <SDMMC_CmdVoltageSwitch>
 800945c:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d00c      	beq.n	800947e <SD_PowerON+0x162>
        {
          return errorstate;
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	e05b      	b.n	8009520 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009468:	f7f8 fa70 	bl	800194c <HAL_GetTick>
 800946c:	4602      	mov	r2, r0
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	1ad3      	subs	r3, r2, r3
 8009472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009476:	d102      	bne.n	800947e <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8009478:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800947c:	e050      	b.n	8009520 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009484:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009488:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800948c:	d1ec      	bne.n	8009468 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009496:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800949e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80094a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094a6:	d002      	beq.n	80094ae <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 80094a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80094ac:	e038      	b.n	8009520 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 80094ae:	2001      	movs	r0, #1
 80094b0:	f7ff fb1a 	bl	8008ae8 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f042 0204 	orr.w	r2, r2, #4
 80094c2:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80094c4:	e00a      	b.n	80094dc <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80094c6:	f7f8 fa41 	bl	800194c <HAL_GetTick>
 80094ca:	4602      	mov	r2, r0
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	1ad3      	subs	r3, r2, r3
 80094d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094d4:	d102      	bne.n	80094dc <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 80094d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094da:	e021      	b.n	8009520 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80094ea:	d1ec      	bne.n	80094c6 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80094f4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009500:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009504:	d102      	bne.n	800950c <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009506:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800950a:	e009      	b.n	8009520 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	2213      	movs	r2, #19
 8009512:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f04f 32ff 	mov.w	r2, #4294967295
 800951c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800951e:	2300      	movs	r3, #0
}
 8009520:	4618      	mov	r0, r3
 8009522:	3720      	adds	r7, #32
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}
 8009528:	c1100000 	.word	0xc1100000

0800952c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b08c      	sub	sp, #48	; 0x30
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009536:	f7f8 fa09 	bl	800194c <HAL_GetTick>
 800953a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	2100      	movs	r1, #0
 8009546:	4618      	mov	r0, r3
 8009548:	f003 f96f 	bl	800c82a <SDMMC_GetResponse>
 800954c:	4603      	mov	r3, r0
 800954e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009552:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009556:	d102      	bne.n	800955e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009558:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800955c:	e0b0      	b.n	80096c0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	2140      	movs	r1, #64	; 0x40
 8009564:	4618      	mov	r0, r3
 8009566:	f003 f99f 	bl	800c8a8 <SDMMC_CmdBlockLength>
 800956a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800956c:	6a3b      	ldr	r3, [r7, #32]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d005      	beq.n	800957e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800957a:	6a3b      	ldr	r3, [r7, #32]
 800957c:	e0a0      	b.n	80096c0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009586:	041b      	lsls	r3, r3, #16
 8009588:	4619      	mov	r1, r3
 800958a:	4610      	mov	r0, r2
 800958c:	f003 fada 	bl	800cb44 <SDMMC_CmdAppCommand>
 8009590:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009592:	6a3b      	ldr	r3, [r7, #32]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d005      	beq.n	80095a4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80095a0:	6a3b      	ldr	r3, [r7, #32]
 80095a2:	e08d      	b.n	80096c0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80095a4:	f04f 33ff 	mov.w	r3, #4294967295
 80095a8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80095aa:	2340      	movs	r3, #64	; 0x40
 80095ac:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80095ae:	2360      	movs	r3, #96	; 0x60
 80095b0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80095b2:	2302      	movs	r3, #2
 80095b4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80095b6:	2300      	movs	r3, #0
 80095b8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80095ba:	2301      	movs	r3, #1
 80095bc:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f107 0208 	add.w	r2, r7, #8
 80095c6:	4611      	mov	r1, r2
 80095c8:	4618      	mov	r0, r3
 80095ca:	f003 f941 	bl	800c850 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4618      	mov	r0, r3
 80095d4:	f003 fbc2 	bl	800cd5c <SDMMC_CmdStatusRegister>
 80095d8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80095da:	6a3b      	ldr	r3, [r7, #32]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d02b      	beq.n	8009638 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80095e8:	6a3b      	ldr	r3, [r7, #32]
 80095ea:	e069      	b.n	80096c0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d013      	beq.n	8009622 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 80095fa:	2300      	movs	r3, #0
 80095fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095fe:	e00d      	b.n	800961c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4618      	mov	r0, r3
 8009606:	f003 f89b 	bl	800c740 <SDMMC_ReadFIFO>
 800960a:	4602      	mov	r2, r0
 800960c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800960e:	601a      	str	r2, [r3, #0]
        pData++;
 8009610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009612:	3304      	adds	r3, #4
 8009614:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8009616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009618:	3301      	adds	r3, #1
 800961a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800961c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800961e:	2b07      	cmp	r3, #7
 8009620:	d9ee      	bls.n	8009600 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009622:	f7f8 f993 	bl	800194c <HAL_GetTick>
 8009626:	4602      	mov	r2, r0
 8009628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962a:	1ad3      	subs	r3, r2, r3
 800962c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009630:	d102      	bne.n	8009638 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009632:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009636:	e043      	b.n	80096c0 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800963e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009642:	2b00      	cmp	r3, #0
 8009644:	d0d2      	beq.n	80095ec <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800964c:	f003 0308 	and.w	r3, r3, #8
 8009650:	2b00      	cmp	r3, #0
 8009652:	d001      	beq.n	8009658 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009654:	2308      	movs	r3, #8
 8009656:	e033      	b.n	80096c0 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800965e:	f003 0302 	and.w	r3, r3, #2
 8009662:	2b00      	cmp	r3, #0
 8009664:	d001      	beq.n	800966a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009666:	2302      	movs	r3, #2
 8009668:	e02a      	b.n	80096c0 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009670:	f003 0320 	and.w	r3, r3, #32
 8009674:	2b00      	cmp	r3, #0
 8009676:	d017      	beq.n	80096a8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009678:	2320      	movs	r3, #32
 800967a:	e021      	b.n	80096c0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4618      	mov	r0, r3
 8009682:	f003 f85d 	bl	800c740 <SDMMC_ReadFIFO>
 8009686:	4602      	mov	r2, r0
 8009688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800968a:	601a      	str	r2, [r3, #0]
    pData++;
 800968c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800968e:	3304      	adds	r3, #4
 8009690:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009692:	f7f8 f95b 	bl	800194c <HAL_GetTick>
 8009696:	4602      	mov	r2, r0
 8009698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969a:	1ad3      	subs	r3, r2, r3
 800969c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096a0:	d102      	bne.n	80096a8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80096a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80096a6:	e00b      	b.n	80096c0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d1e2      	bne.n	800967c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a03      	ldr	r2, [pc, #12]	; (80096c8 <SD_SendSDStatus+0x19c>)
 80096bc:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3730      	adds	r7, #48	; 0x30
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	18000f3a 	.word	0x18000f3a

080096cc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d102      	bne.n	80096e2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80096dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80096e0:	e018      	b.n	8009714 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681a      	ldr	r2, [r3, #0]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096ea:	041b      	lsls	r3, r3, #16
 80096ec:	4619      	mov	r1, r3
 80096ee:	4610      	mov	r0, r2
 80096f0:	f003 fb11 	bl	800cd16 <SDMMC_CmdSendStatus>
 80096f4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d001      	beq.n	8009700 <SD_SendStatus+0x34>
  {
    return errorstate;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	e009      	b.n	8009714 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	2100      	movs	r1, #0
 8009706:	4618      	mov	r0, r3
 8009708:	f003 f88f 	bl	800c82a <SDMMC_GetResponse>
 800970c:	4602      	mov	r2, r0
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009712:	2300      	movs	r3, #0
}
 8009714:	4618      	mov	r0, r3
 8009716:	3710      	adds	r7, #16
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b086      	sub	sp, #24
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009724:	2300      	movs	r3, #0
 8009726:	60fb      	str	r3, [r7, #12]
 8009728:	2300      	movs	r3, #0
 800972a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2100      	movs	r1, #0
 8009732:	4618      	mov	r0, r3
 8009734:	f003 f879 	bl	800c82a <SDMMC_GetResponse>
 8009738:	4603      	mov	r3, r0
 800973a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800973e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009742:	d102      	bne.n	800974a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009744:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009748:	e02f      	b.n	80097aa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800974a:	f107 030c 	add.w	r3, r7, #12
 800974e:	4619      	mov	r1, r3
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 f879 	bl	8009848 <SD_FindSCR>
 8009756:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d001      	beq.n	8009762 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	e023      	b.n	80097aa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009768:	2b00      	cmp	r3, #0
 800976a:	d01c      	beq.n	80097a6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009774:	041b      	lsls	r3, r3, #16
 8009776:	4619      	mov	r1, r3
 8009778:	4610      	mov	r0, r2
 800977a:	f003 f9e3 	bl	800cb44 <SDMMC_CmdAppCommand>
 800977e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d001      	beq.n	800978a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	e00f      	b.n	80097aa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	2102      	movs	r1, #2
 8009790:	4618      	mov	r0, r3
 8009792:	f003 fa1a 	bl	800cbca <SDMMC_CmdBusWidth>
 8009796:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d001      	beq.n	80097a2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	e003      	b.n	80097aa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80097a2:	2300      	movs	r3, #0
 80097a4:	e001      	b.n	80097aa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80097a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3718      	adds	r7, #24
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b086      	sub	sp, #24
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80097ba:	2300      	movs	r3, #0
 80097bc:	60fb      	str	r3, [r7, #12]
 80097be:	2300      	movs	r3, #0
 80097c0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	2100      	movs	r1, #0
 80097c8:	4618      	mov	r0, r3
 80097ca:	f003 f82e 	bl	800c82a <SDMMC_GetResponse>
 80097ce:	4603      	mov	r3, r0
 80097d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80097d8:	d102      	bne.n	80097e0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80097da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80097de:	e02f      	b.n	8009840 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80097e0:	f107 030c 	add.w	r3, r7, #12
 80097e4:	4619      	mov	r1, r3
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 f82e 	bl	8009848 <SD_FindSCR>
 80097ec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d001      	beq.n	80097f8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	e023      	b.n	8009840 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d01c      	beq.n	800983c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800980a:	041b      	lsls	r3, r3, #16
 800980c:	4619      	mov	r1, r3
 800980e:	4610      	mov	r0, r2
 8009810:	f003 f998 	bl	800cb44 <SDMMC_CmdAppCommand>
 8009814:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d001      	beq.n	8009820 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	e00f      	b.n	8009840 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	2100      	movs	r1, #0
 8009826:	4618      	mov	r0, r3
 8009828:	f003 f9cf 	bl	800cbca <SDMMC_CmdBusWidth>
 800982c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d001      	beq.n	8009838 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	e003      	b.n	8009840 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009838:	2300      	movs	r3, #0
 800983a:	e001      	b.n	8009840 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800983c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009840:	4618      	mov	r0, r3
 8009842:	3718      	adds	r7, #24
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b08e      	sub	sp, #56	; 0x38
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009852:	f7f8 f87b 	bl	800194c <HAL_GetTick>
 8009856:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009858:	2300      	movs	r3, #0
 800985a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800985c:	2300      	movs	r3, #0
 800985e:	60bb      	str	r3, [r7, #8]
 8009860:	2300      	movs	r3, #0
 8009862:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2108      	movs	r1, #8
 800986e:	4618      	mov	r0, r3
 8009870:	f003 f81a 	bl	800c8a8 <SDMMC_CmdBlockLength>
 8009874:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009878:	2b00      	cmp	r3, #0
 800987a:	d001      	beq.n	8009880 <SD_FindSCR+0x38>
  {
    return errorstate;
 800987c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800987e:	e0ad      	b.n	80099dc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009888:	041b      	lsls	r3, r3, #16
 800988a:	4619      	mov	r1, r3
 800988c:	4610      	mov	r0, r2
 800988e:	f003 f959 	bl	800cb44 <SDMMC_CmdAppCommand>
 8009892:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009896:	2b00      	cmp	r3, #0
 8009898:	d001      	beq.n	800989e <SD_FindSCR+0x56>
  {
    return errorstate;
 800989a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989c:	e09e      	b.n	80099dc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800989e:	f04f 33ff 	mov.w	r3, #4294967295
 80098a2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80098a4:	2308      	movs	r3, #8
 80098a6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80098a8:	2330      	movs	r3, #48	; 0x30
 80098aa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80098ac:	2302      	movs	r3, #2
 80098ae:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80098b0:	2300      	movs	r3, #0
 80098b2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80098b4:	2301      	movs	r3, #1
 80098b6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f107 0210 	add.w	r2, r7, #16
 80098c0:	4611      	mov	r1, r2
 80098c2:	4618      	mov	r0, r3
 80098c4:	f002 ffc4 	bl	800c850 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4618      	mov	r0, r3
 80098ce:	f003 f99f 	bl	800cc10 <SDMMC_CmdSendSCR>
 80098d2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80098d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d027      	beq.n	800992a <SD_FindSCR+0xe2>
  {
    return errorstate;
 80098da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098dc:	e07e      	b.n	80099dc <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d113      	bne.n	8009914 <SD_FindSCR+0xcc>
 80098ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d110      	bne.n	8009914 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4618      	mov	r0, r3
 80098f8:	f002 ff22 	bl	800c740 <SDMMC_ReadFIFO>
 80098fc:	4603      	mov	r3, r0
 80098fe:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4618      	mov	r0, r3
 8009906:	f002 ff1b 	bl	800c740 <SDMMC_ReadFIFO>
 800990a:	4603      	mov	r3, r0
 800990c:	60fb      	str	r3, [r7, #12]
      index++;
 800990e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009910:	3301      	adds	r3, #1
 8009912:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009914:	f7f8 f81a 	bl	800194c <HAL_GetTick>
 8009918:	4602      	mov	r2, r0
 800991a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800991c:	1ad3      	subs	r3, r2, r3
 800991e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009922:	d102      	bne.n	800992a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009924:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009928:	e058      	b.n	80099dc <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009930:	f240 532a 	movw	r3, #1322	; 0x52a
 8009934:	4013      	ands	r3, r2
 8009936:	2b00      	cmp	r3, #0
 8009938:	d0d1      	beq.n	80098de <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009940:	f003 0308 	and.w	r3, r3, #8
 8009944:	2b00      	cmp	r3, #0
 8009946:	d005      	beq.n	8009954 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2208      	movs	r2, #8
 800994e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009950:	2308      	movs	r3, #8
 8009952:	e043      	b.n	80099dc <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800995a:	f003 0302 	and.w	r3, r3, #2
 800995e:	2b00      	cmp	r3, #0
 8009960:	d005      	beq.n	800996e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2202      	movs	r2, #2
 8009968:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800996a:	2302      	movs	r3, #2
 800996c:	e036      	b.n	80099dc <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009974:	f003 0320 	and.w	r3, r3, #32
 8009978:	2b00      	cmp	r3, #0
 800997a:	d005      	beq.n	8009988 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2220      	movs	r2, #32
 8009982:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009984:	2320      	movs	r3, #32
 8009986:	e029      	b.n	80099dc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a15      	ldr	r2, [pc, #84]	; (80099e4 <SD_FindSCR+0x19c>)
 800998e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	061a      	lsls	r2, r3, #24
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	021b      	lsls	r3, r3, #8
 8009998:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800999c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	0a1b      	lsrs	r3, r3, #8
 80099a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80099a6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	0e1b      	lsrs	r3, r3, #24
 80099ac:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80099ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099b0:	601a      	str	r2, [r3, #0]
    scr++;
 80099b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099b4:	3304      	adds	r3, #4
 80099b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	061a      	lsls	r2, r3, #24
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	021b      	lsls	r3, r3, #8
 80099c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80099c4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	0a1b      	lsrs	r3, r3, #8
 80099ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80099ce:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	0e1b      	lsrs	r3, r3, #24
 80099d4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80099d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80099da:	2300      	movs	r3, #0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3738      	adds	r7, #56	; 0x38
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}
 80099e4:	18000f3a 	.word	0x18000f3a

080099e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b082      	sub	sp, #8
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d101      	bne.n	80099fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80099f6:	2301      	movs	r3, #1
 80099f8:	e01d      	b.n	8009a36 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d106      	bne.n	8009a14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f7f7 fd6e 	bl	80014f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2202      	movs	r2, #2
 8009a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	3304      	adds	r3, #4
 8009a24:	4619      	mov	r1, r3
 8009a26:	4610      	mov	r0, r2
 8009a28:	f000 f950 	bl	8009ccc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2201      	movs	r2, #1
 8009a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3708      	adds	r7, #8
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b082      	sub	sp, #8
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	691b      	ldr	r3, [r3, #16]
 8009a4c:	f003 0302 	and.w	r3, r3, #2
 8009a50:	2b02      	cmp	r3, #2
 8009a52:	d122      	bne.n	8009a9a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	68db      	ldr	r3, [r3, #12]
 8009a5a:	f003 0302 	and.w	r3, r3, #2
 8009a5e:	2b02      	cmp	r3, #2
 8009a60:	d11b      	bne.n	8009a9a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f06f 0202 	mvn.w	r2, #2
 8009a6a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2201      	movs	r2, #1
 8009a70:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	699b      	ldr	r3, [r3, #24]
 8009a78:	f003 0303 	and.w	r3, r3, #3
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d003      	beq.n	8009a88 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 f905 	bl	8009c90 <HAL_TIM_IC_CaptureCallback>
 8009a86:	e005      	b.n	8009a94 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 f8f7 	bl	8009c7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 f908 	bl	8009ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2200      	movs	r2, #0
 8009a98:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	691b      	ldr	r3, [r3, #16]
 8009aa0:	f003 0304 	and.w	r3, r3, #4
 8009aa4:	2b04      	cmp	r3, #4
 8009aa6:	d122      	bne.n	8009aee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	68db      	ldr	r3, [r3, #12]
 8009aae:	f003 0304 	and.w	r3, r3, #4
 8009ab2:	2b04      	cmp	r3, #4
 8009ab4:	d11b      	bne.n	8009aee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f06f 0204 	mvn.w	r2, #4
 8009abe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2202      	movs	r2, #2
 8009ac4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	699b      	ldr	r3, [r3, #24]
 8009acc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d003      	beq.n	8009adc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 f8db 	bl	8009c90 <HAL_TIM_IC_CaptureCallback>
 8009ada:	e005      	b.n	8009ae8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 f8cd 	bl	8009c7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 f8de 	bl	8009ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2200      	movs	r2, #0
 8009aec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	691b      	ldr	r3, [r3, #16]
 8009af4:	f003 0308 	and.w	r3, r3, #8
 8009af8:	2b08      	cmp	r3, #8
 8009afa:	d122      	bne.n	8009b42 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	68db      	ldr	r3, [r3, #12]
 8009b02:	f003 0308 	and.w	r3, r3, #8
 8009b06:	2b08      	cmp	r3, #8
 8009b08:	d11b      	bne.n	8009b42 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f06f 0208 	mvn.w	r2, #8
 8009b12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2204      	movs	r2, #4
 8009b18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	69db      	ldr	r3, [r3, #28]
 8009b20:	f003 0303 	and.w	r3, r3, #3
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d003      	beq.n	8009b30 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 f8b1 	bl	8009c90 <HAL_TIM_IC_CaptureCallback>
 8009b2e:	e005      	b.n	8009b3c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 f8a3 	bl	8009c7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 f8b4 	bl	8009ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	691b      	ldr	r3, [r3, #16]
 8009b48:	f003 0310 	and.w	r3, r3, #16
 8009b4c:	2b10      	cmp	r3, #16
 8009b4e:	d122      	bne.n	8009b96 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	68db      	ldr	r3, [r3, #12]
 8009b56:	f003 0310 	and.w	r3, r3, #16
 8009b5a:	2b10      	cmp	r3, #16
 8009b5c:	d11b      	bne.n	8009b96 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f06f 0210 	mvn.w	r2, #16
 8009b66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2208      	movs	r2, #8
 8009b6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	69db      	ldr	r3, [r3, #28]
 8009b74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d003      	beq.n	8009b84 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 f887 	bl	8009c90 <HAL_TIM_IC_CaptureCallback>
 8009b82:	e005      	b.n	8009b90 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 f879 	bl	8009c7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 f88a 	bl	8009ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	691b      	ldr	r3, [r3, #16]
 8009b9c:	f003 0301 	and.w	r3, r3, #1
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d10e      	bne.n	8009bc2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	68db      	ldr	r3, [r3, #12]
 8009baa:	f003 0301 	and.w	r3, r3, #1
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d107      	bne.n	8009bc2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f06f 0201 	mvn.w	r2, #1
 8009bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f7f7 f9df 	bl	8000f80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	691b      	ldr	r3, [r3, #16]
 8009bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bcc:	2b80      	cmp	r3, #128	; 0x80
 8009bce:	d10e      	bne.n	8009bee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	68db      	ldr	r3, [r3, #12]
 8009bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bda:	2b80      	cmp	r3, #128	; 0x80
 8009bdc:	d107      	bne.n	8009bee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009be6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 f913 	bl	8009e14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	691b      	ldr	r3, [r3, #16]
 8009bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bfc:	d10e      	bne.n	8009c1c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	68db      	ldr	r3, [r3, #12]
 8009c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c08:	2b80      	cmp	r3, #128	; 0x80
 8009c0a:	d107      	bne.n	8009c1c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 f906 	bl	8009e28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	691b      	ldr	r3, [r3, #16]
 8009c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c26:	2b40      	cmp	r3, #64	; 0x40
 8009c28:	d10e      	bne.n	8009c48 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c34:	2b40      	cmp	r3, #64	; 0x40
 8009c36:	d107      	bne.n	8009c48 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 f838 	bl	8009cb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	691b      	ldr	r3, [r3, #16]
 8009c4e:	f003 0320 	and.w	r3, r3, #32
 8009c52:	2b20      	cmp	r3, #32
 8009c54:	d10e      	bne.n	8009c74 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	f003 0320 	and.w	r3, r3, #32
 8009c60:	2b20      	cmp	r3, #32
 8009c62:	d107      	bne.n	8009c74 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f06f 0220 	mvn.w	r2, #32
 8009c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 f8c6 	bl	8009e00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009c74:	bf00      	nop
 8009c76:	3708      	adds	r7, #8
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b083      	sub	sp, #12
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c84:	bf00      	nop
 8009c86:	370c      	adds	r7, #12
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr

08009c90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b083      	sub	sp, #12
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c98:	bf00      	nop
 8009c9a:	370c      	adds	r7, #12
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr

08009ca4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009cac:	bf00      	nop
 8009cae:	370c      	adds	r7, #12
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr

08009cb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009cc0:	bf00      	nop
 8009cc2:	370c      	adds	r7, #12
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b085      	sub	sp, #20
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	4a40      	ldr	r2, [pc, #256]	; (8009de0 <TIM_Base_SetConfig+0x114>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d013      	beq.n	8009d0c <TIM_Base_SetConfig+0x40>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cea:	d00f      	beq.n	8009d0c <TIM_Base_SetConfig+0x40>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	4a3d      	ldr	r2, [pc, #244]	; (8009de4 <TIM_Base_SetConfig+0x118>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d00b      	beq.n	8009d0c <TIM_Base_SetConfig+0x40>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	4a3c      	ldr	r2, [pc, #240]	; (8009de8 <TIM_Base_SetConfig+0x11c>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d007      	beq.n	8009d0c <TIM_Base_SetConfig+0x40>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	4a3b      	ldr	r2, [pc, #236]	; (8009dec <TIM_Base_SetConfig+0x120>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d003      	beq.n	8009d0c <TIM_Base_SetConfig+0x40>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	4a3a      	ldr	r2, [pc, #232]	; (8009df0 <TIM_Base_SetConfig+0x124>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d108      	bne.n	8009d1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	68fa      	ldr	r2, [r7, #12]
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	4a2f      	ldr	r2, [pc, #188]	; (8009de0 <TIM_Base_SetConfig+0x114>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d01f      	beq.n	8009d66 <TIM_Base_SetConfig+0x9a>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d2c:	d01b      	beq.n	8009d66 <TIM_Base_SetConfig+0x9a>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	4a2c      	ldr	r2, [pc, #176]	; (8009de4 <TIM_Base_SetConfig+0x118>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d017      	beq.n	8009d66 <TIM_Base_SetConfig+0x9a>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	4a2b      	ldr	r2, [pc, #172]	; (8009de8 <TIM_Base_SetConfig+0x11c>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d013      	beq.n	8009d66 <TIM_Base_SetConfig+0x9a>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	4a2a      	ldr	r2, [pc, #168]	; (8009dec <TIM_Base_SetConfig+0x120>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d00f      	beq.n	8009d66 <TIM_Base_SetConfig+0x9a>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	4a29      	ldr	r2, [pc, #164]	; (8009df0 <TIM_Base_SetConfig+0x124>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d00b      	beq.n	8009d66 <TIM_Base_SetConfig+0x9a>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	4a28      	ldr	r2, [pc, #160]	; (8009df4 <TIM_Base_SetConfig+0x128>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d007      	beq.n	8009d66 <TIM_Base_SetConfig+0x9a>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	4a27      	ldr	r2, [pc, #156]	; (8009df8 <TIM_Base_SetConfig+0x12c>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d003      	beq.n	8009d66 <TIM_Base_SetConfig+0x9a>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	4a26      	ldr	r2, [pc, #152]	; (8009dfc <TIM_Base_SetConfig+0x130>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d108      	bne.n	8009d78 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	68fa      	ldr	r2, [r7, #12]
 8009d74:	4313      	orrs	r3, r2
 8009d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	695b      	ldr	r3, [r3, #20]
 8009d82:	4313      	orrs	r3, r2
 8009d84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	68fa      	ldr	r2, [r7, #12]
 8009d8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	689a      	ldr	r2, [r3, #8]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	681a      	ldr	r2, [r3, #0]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	4a10      	ldr	r2, [pc, #64]	; (8009de0 <TIM_Base_SetConfig+0x114>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d00f      	beq.n	8009dc4 <TIM_Base_SetConfig+0xf8>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	4a12      	ldr	r2, [pc, #72]	; (8009df0 <TIM_Base_SetConfig+0x124>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d00b      	beq.n	8009dc4 <TIM_Base_SetConfig+0xf8>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	4a11      	ldr	r2, [pc, #68]	; (8009df4 <TIM_Base_SetConfig+0x128>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d007      	beq.n	8009dc4 <TIM_Base_SetConfig+0xf8>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	4a10      	ldr	r2, [pc, #64]	; (8009df8 <TIM_Base_SetConfig+0x12c>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d003      	beq.n	8009dc4 <TIM_Base_SetConfig+0xf8>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	4a0f      	ldr	r2, [pc, #60]	; (8009dfc <TIM_Base_SetConfig+0x130>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d103      	bne.n	8009dcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	691a      	ldr	r2, [r3, #16]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	615a      	str	r2, [r3, #20]
}
 8009dd2:	bf00      	nop
 8009dd4:	3714      	adds	r7, #20
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr
 8009dde:	bf00      	nop
 8009de0:	40010000 	.word	0x40010000
 8009de4:	40000400 	.word	0x40000400
 8009de8:	40000800 	.word	0x40000800
 8009dec:	40000c00 	.word	0x40000c00
 8009df0:	40010400 	.word	0x40010400
 8009df4:	40014000 	.word	0x40014000
 8009df8:	40014400 	.word	0x40014400
 8009dfc:	40014800 	.word	0x40014800

08009e00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e08:	bf00      	nop
 8009e0a:	370c      	adds	r7, #12
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e1c:	bf00      	nop
 8009e1e:	370c      	adds	r7, #12
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b083      	sub	sp, #12
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009e30:	bf00      	nop
 8009e32:	370c      	adds	r7, #12
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr

08009e3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b082      	sub	sp, #8
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d101      	bne.n	8009e4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	e042      	b.n	8009ed4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d106      	bne.n	8009e66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f7f7 fb8d 	bl	8001580 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2224      	movs	r2, #36	; 0x24
 8009e6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f022 0201 	bic.w	r2, r2, #1
 8009e7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 f82e 	bl	8009ee0 <UART_SetConfig>
 8009e84:	4603      	mov	r3, r0
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d101      	bne.n	8009e8e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e022      	b.n	8009ed4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d002      	beq.n	8009e9c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f002 f9a0 	bl	800c1dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	685a      	ldr	r2, [r3, #4]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009eaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	689a      	ldr	r2, [r3, #8]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009eba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f042 0201 	orr.w	r2, r2, #1
 8009eca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f002 fa27 	bl	800c320 <UART_CheckIdleState>
 8009ed2:	4603      	mov	r3, r0
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3708      	adds	r7, #8
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	0000      	movs	r0, r0
	...

08009ee0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ee0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009ee4:	b090      	sub	sp, #64	; 0x40
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009eea:	2300      	movs	r3, #0
 8009eec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	689a      	ldr	r2, [r3, #8]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	691b      	ldr	r3, [r3, #16]
 8009f00:	431a      	orrs	r2, r3
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	695b      	ldr	r3, [r3, #20]
 8009f06:	431a      	orrs	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	69db      	ldr	r3, [r3, #28]
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f16:	4313      	orrs	r3, r2
 8009f18:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	681a      	ldr	r2, [r3, #0]
 8009f20:	4bc1      	ldr	r3, [pc, #772]	; (800a228 <UART_SetConfig+0x348>)
 8009f22:	4013      	ands	r3, r2
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	6812      	ldr	r2, [r2, #0]
 8009f28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009f2a:	430b      	orrs	r3, r1
 8009f2c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	68da      	ldr	r2, [r3, #12]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	430a      	orrs	r2, r1
 8009f42:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	699b      	ldr	r3, [r3, #24]
 8009f48:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4ab7      	ldr	r2, [pc, #732]	; (800a22c <UART_SetConfig+0x34c>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d004      	beq.n	8009f5e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6a1b      	ldr	r3, [r3, #32]
 8009f58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	689a      	ldr	r2, [r3, #8]
 8009f64:	4bb2      	ldr	r3, [pc, #712]	; (800a230 <UART_SetConfig+0x350>)
 8009f66:	4013      	ands	r3, r2
 8009f68:	687a      	ldr	r2, [r7, #4]
 8009f6a:	6812      	ldr	r2, [r2, #0]
 8009f6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009f6e:	430b      	orrs	r3, r1
 8009f70:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f78:	f023 010f 	bic.w	r1, r3, #15
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	430a      	orrs	r2, r1
 8009f86:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4aa9      	ldr	r2, [pc, #676]	; (800a234 <UART_SetConfig+0x354>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d177      	bne.n	800a082 <UART_SetConfig+0x1a2>
 8009f92:	4ba9      	ldr	r3, [pc, #676]	; (800a238 <UART_SetConfig+0x358>)
 8009f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f9a:	2b28      	cmp	r3, #40	; 0x28
 8009f9c:	d86c      	bhi.n	800a078 <UART_SetConfig+0x198>
 8009f9e:	a201      	add	r2, pc, #4	; (adr r2, 8009fa4 <UART_SetConfig+0xc4>)
 8009fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa4:	0800a049 	.word	0x0800a049
 8009fa8:	0800a079 	.word	0x0800a079
 8009fac:	0800a079 	.word	0x0800a079
 8009fb0:	0800a079 	.word	0x0800a079
 8009fb4:	0800a079 	.word	0x0800a079
 8009fb8:	0800a079 	.word	0x0800a079
 8009fbc:	0800a079 	.word	0x0800a079
 8009fc0:	0800a079 	.word	0x0800a079
 8009fc4:	0800a051 	.word	0x0800a051
 8009fc8:	0800a079 	.word	0x0800a079
 8009fcc:	0800a079 	.word	0x0800a079
 8009fd0:	0800a079 	.word	0x0800a079
 8009fd4:	0800a079 	.word	0x0800a079
 8009fd8:	0800a079 	.word	0x0800a079
 8009fdc:	0800a079 	.word	0x0800a079
 8009fe0:	0800a079 	.word	0x0800a079
 8009fe4:	0800a059 	.word	0x0800a059
 8009fe8:	0800a079 	.word	0x0800a079
 8009fec:	0800a079 	.word	0x0800a079
 8009ff0:	0800a079 	.word	0x0800a079
 8009ff4:	0800a079 	.word	0x0800a079
 8009ff8:	0800a079 	.word	0x0800a079
 8009ffc:	0800a079 	.word	0x0800a079
 800a000:	0800a079 	.word	0x0800a079
 800a004:	0800a061 	.word	0x0800a061
 800a008:	0800a079 	.word	0x0800a079
 800a00c:	0800a079 	.word	0x0800a079
 800a010:	0800a079 	.word	0x0800a079
 800a014:	0800a079 	.word	0x0800a079
 800a018:	0800a079 	.word	0x0800a079
 800a01c:	0800a079 	.word	0x0800a079
 800a020:	0800a079 	.word	0x0800a079
 800a024:	0800a069 	.word	0x0800a069
 800a028:	0800a079 	.word	0x0800a079
 800a02c:	0800a079 	.word	0x0800a079
 800a030:	0800a079 	.word	0x0800a079
 800a034:	0800a079 	.word	0x0800a079
 800a038:	0800a079 	.word	0x0800a079
 800a03c:	0800a079 	.word	0x0800a079
 800a040:	0800a079 	.word	0x0800a079
 800a044:	0800a071 	.word	0x0800a071
 800a048:	2301      	movs	r3, #1
 800a04a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a04e:	e233      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a050:	2304      	movs	r3, #4
 800a052:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a056:	e22f      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a058:	2308      	movs	r3, #8
 800a05a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a05e:	e22b      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a060:	2310      	movs	r3, #16
 800a062:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a066:	e227      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a068:	2320      	movs	r3, #32
 800a06a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a06e:	e223      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a070:	2340      	movs	r3, #64	; 0x40
 800a072:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a076:	e21f      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a078:	2380      	movs	r3, #128	; 0x80
 800a07a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a07e:	bf00      	nop
 800a080:	e21a      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4a6d      	ldr	r2, [pc, #436]	; (800a23c <UART_SetConfig+0x35c>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d132      	bne.n	800a0f2 <UART_SetConfig+0x212>
 800a08c:	4b6a      	ldr	r3, [pc, #424]	; (800a238 <UART_SetConfig+0x358>)
 800a08e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a090:	f003 0307 	and.w	r3, r3, #7
 800a094:	2b05      	cmp	r3, #5
 800a096:	d827      	bhi.n	800a0e8 <UART_SetConfig+0x208>
 800a098:	a201      	add	r2, pc, #4	; (adr r2, 800a0a0 <UART_SetConfig+0x1c0>)
 800a09a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a09e:	bf00      	nop
 800a0a0:	0800a0b9 	.word	0x0800a0b9
 800a0a4:	0800a0c1 	.word	0x0800a0c1
 800a0a8:	0800a0c9 	.word	0x0800a0c9
 800a0ac:	0800a0d1 	.word	0x0800a0d1
 800a0b0:	0800a0d9 	.word	0x0800a0d9
 800a0b4:	0800a0e1 	.word	0x0800a0e1
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0be:	e1fb      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a0c0:	2304      	movs	r3, #4
 800a0c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0c6:	e1f7      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a0c8:	2308      	movs	r3, #8
 800a0ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0ce:	e1f3      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a0d0:	2310      	movs	r3, #16
 800a0d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0d6:	e1ef      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a0d8:	2320      	movs	r3, #32
 800a0da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0de:	e1eb      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a0e0:	2340      	movs	r3, #64	; 0x40
 800a0e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0e6:	e1e7      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a0e8:	2380      	movs	r3, #128	; 0x80
 800a0ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0ee:	bf00      	nop
 800a0f0:	e1e2      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4a52      	ldr	r2, [pc, #328]	; (800a240 <UART_SetConfig+0x360>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d132      	bne.n	800a162 <UART_SetConfig+0x282>
 800a0fc:	4b4e      	ldr	r3, [pc, #312]	; (800a238 <UART_SetConfig+0x358>)
 800a0fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a100:	f003 0307 	and.w	r3, r3, #7
 800a104:	2b05      	cmp	r3, #5
 800a106:	d827      	bhi.n	800a158 <UART_SetConfig+0x278>
 800a108:	a201      	add	r2, pc, #4	; (adr r2, 800a110 <UART_SetConfig+0x230>)
 800a10a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a10e:	bf00      	nop
 800a110:	0800a129 	.word	0x0800a129
 800a114:	0800a131 	.word	0x0800a131
 800a118:	0800a139 	.word	0x0800a139
 800a11c:	0800a141 	.word	0x0800a141
 800a120:	0800a149 	.word	0x0800a149
 800a124:	0800a151 	.word	0x0800a151
 800a128:	2300      	movs	r3, #0
 800a12a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a12e:	e1c3      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a130:	2304      	movs	r3, #4
 800a132:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a136:	e1bf      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a138:	2308      	movs	r3, #8
 800a13a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a13e:	e1bb      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a140:	2310      	movs	r3, #16
 800a142:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a146:	e1b7      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a148:	2320      	movs	r3, #32
 800a14a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a14e:	e1b3      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a150:	2340      	movs	r3, #64	; 0x40
 800a152:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a156:	e1af      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a158:	2380      	movs	r3, #128	; 0x80
 800a15a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a15e:	bf00      	nop
 800a160:	e1aa      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4a37      	ldr	r2, [pc, #220]	; (800a244 <UART_SetConfig+0x364>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d132      	bne.n	800a1d2 <UART_SetConfig+0x2f2>
 800a16c:	4b32      	ldr	r3, [pc, #200]	; (800a238 <UART_SetConfig+0x358>)
 800a16e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a170:	f003 0307 	and.w	r3, r3, #7
 800a174:	2b05      	cmp	r3, #5
 800a176:	d827      	bhi.n	800a1c8 <UART_SetConfig+0x2e8>
 800a178:	a201      	add	r2, pc, #4	; (adr r2, 800a180 <UART_SetConfig+0x2a0>)
 800a17a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a17e:	bf00      	nop
 800a180:	0800a199 	.word	0x0800a199
 800a184:	0800a1a1 	.word	0x0800a1a1
 800a188:	0800a1a9 	.word	0x0800a1a9
 800a18c:	0800a1b1 	.word	0x0800a1b1
 800a190:	0800a1b9 	.word	0x0800a1b9
 800a194:	0800a1c1 	.word	0x0800a1c1
 800a198:	2300      	movs	r3, #0
 800a19a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a19e:	e18b      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a1a0:	2304      	movs	r3, #4
 800a1a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1a6:	e187      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a1a8:	2308      	movs	r3, #8
 800a1aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1ae:	e183      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a1b0:	2310      	movs	r3, #16
 800a1b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1b6:	e17f      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a1b8:	2320      	movs	r3, #32
 800a1ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1be:	e17b      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a1c0:	2340      	movs	r3, #64	; 0x40
 800a1c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1c6:	e177      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a1c8:	2380      	movs	r3, #128	; 0x80
 800a1ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1ce:	bf00      	nop
 800a1d0:	e172      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4a1c      	ldr	r2, [pc, #112]	; (800a248 <UART_SetConfig+0x368>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d144      	bne.n	800a266 <UART_SetConfig+0x386>
 800a1dc:	4b16      	ldr	r3, [pc, #88]	; (800a238 <UART_SetConfig+0x358>)
 800a1de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1e0:	f003 0307 	and.w	r3, r3, #7
 800a1e4:	2b05      	cmp	r3, #5
 800a1e6:	d839      	bhi.n	800a25c <UART_SetConfig+0x37c>
 800a1e8:	a201      	add	r2, pc, #4	; (adr r2, 800a1f0 <UART_SetConfig+0x310>)
 800a1ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ee:	bf00      	nop
 800a1f0:	0800a209 	.word	0x0800a209
 800a1f4:	0800a211 	.word	0x0800a211
 800a1f8:	0800a219 	.word	0x0800a219
 800a1fc:	0800a221 	.word	0x0800a221
 800a200:	0800a24d 	.word	0x0800a24d
 800a204:	0800a255 	.word	0x0800a255
 800a208:	2300      	movs	r3, #0
 800a20a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a20e:	e153      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a210:	2304      	movs	r3, #4
 800a212:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a216:	e14f      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a218:	2308      	movs	r3, #8
 800a21a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a21e:	e14b      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a220:	2310      	movs	r3, #16
 800a222:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a226:	e147      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a228:	cfff69f3 	.word	0xcfff69f3
 800a22c:	58000c00 	.word	0x58000c00
 800a230:	11fff4ff 	.word	0x11fff4ff
 800a234:	40011000 	.word	0x40011000
 800a238:	58024400 	.word	0x58024400
 800a23c:	40004400 	.word	0x40004400
 800a240:	40004800 	.word	0x40004800
 800a244:	40004c00 	.word	0x40004c00
 800a248:	40005000 	.word	0x40005000
 800a24c:	2320      	movs	r3, #32
 800a24e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a252:	e131      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a254:	2340      	movs	r3, #64	; 0x40
 800a256:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a25a:	e12d      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a25c:	2380      	movs	r3, #128	; 0x80
 800a25e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a262:	bf00      	nop
 800a264:	e128      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4ac3      	ldr	r2, [pc, #780]	; (800a578 <UART_SetConfig+0x698>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d178      	bne.n	800a362 <UART_SetConfig+0x482>
 800a270:	4bc2      	ldr	r3, [pc, #776]	; (800a57c <UART_SetConfig+0x69c>)
 800a272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a274:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a278:	2b28      	cmp	r3, #40	; 0x28
 800a27a:	d86d      	bhi.n	800a358 <UART_SetConfig+0x478>
 800a27c:	a201      	add	r2, pc, #4	; (adr r2, 800a284 <UART_SetConfig+0x3a4>)
 800a27e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a282:	bf00      	nop
 800a284:	0800a329 	.word	0x0800a329
 800a288:	0800a359 	.word	0x0800a359
 800a28c:	0800a359 	.word	0x0800a359
 800a290:	0800a359 	.word	0x0800a359
 800a294:	0800a359 	.word	0x0800a359
 800a298:	0800a359 	.word	0x0800a359
 800a29c:	0800a359 	.word	0x0800a359
 800a2a0:	0800a359 	.word	0x0800a359
 800a2a4:	0800a331 	.word	0x0800a331
 800a2a8:	0800a359 	.word	0x0800a359
 800a2ac:	0800a359 	.word	0x0800a359
 800a2b0:	0800a359 	.word	0x0800a359
 800a2b4:	0800a359 	.word	0x0800a359
 800a2b8:	0800a359 	.word	0x0800a359
 800a2bc:	0800a359 	.word	0x0800a359
 800a2c0:	0800a359 	.word	0x0800a359
 800a2c4:	0800a339 	.word	0x0800a339
 800a2c8:	0800a359 	.word	0x0800a359
 800a2cc:	0800a359 	.word	0x0800a359
 800a2d0:	0800a359 	.word	0x0800a359
 800a2d4:	0800a359 	.word	0x0800a359
 800a2d8:	0800a359 	.word	0x0800a359
 800a2dc:	0800a359 	.word	0x0800a359
 800a2e0:	0800a359 	.word	0x0800a359
 800a2e4:	0800a341 	.word	0x0800a341
 800a2e8:	0800a359 	.word	0x0800a359
 800a2ec:	0800a359 	.word	0x0800a359
 800a2f0:	0800a359 	.word	0x0800a359
 800a2f4:	0800a359 	.word	0x0800a359
 800a2f8:	0800a359 	.word	0x0800a359
 800a2fc:	0800a359 	.word	0x0800a359
 800a300:	0800a359 	.word	0x0800a359
 800a304:	0800a349 	.word	0x0800a349
 800a308:	0800a359 	.word	0x0800a359
 800a30c:	0800a359 	.word	0x0800a359
 800a310:	0800a359 	.word	0x0800a359
 800a314:	0800a359 	.word	0x0800a359
 800a318:	0800a359 	.word	0x0800a359
 800a31c:	0800a359 	.word	0x0800a359
 800a320:	0800a359 	.word	0x0800a359
 800a324:	0800a351 	.word	0x0800a351
 800a328:	2301      	movs	r3, #1
 800a32a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a32e:	e0c3      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a330:	2304      	movs	r3, #4
 800a332:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a336:	e0bf      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a338:	2308      	movs	r3, #8
 800a33a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a33e:	e0bb      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a340:	2310      	movs	r3, #16
 800a342:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a346:	e0b7      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a348:	2320      	movs	r3, #32
 800a34a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a34e:	e0b3      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a350:	2340      	movs	r3, #64	; 0x40
 800a352:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a356:	e0af      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a358:	2380      	movs	r3, #128	; 0x80
 800a35a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a35e:	bf00      	nop
 800a360:	e0aa      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a86      	ldr	r2, [pc, #536]	; (800a580 <UART_SetConfig+0x6a0>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d132      	bne.n	800a3d2 <UART_SetConfig+0x4f2>
 800a36c:	4b83      	ldr	r3, [pc, #524]	; (800a57c <UART_SetConfig+0x69c>)
 800a36e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a370:	f003 0307 	and.w	r3, r3, #7
 800a374:	2b05      	cmp	r3, #5
 800a376:	d827      	bhi.n	800a3c8 <UART_SetConfig+0x4e8>
 800a378:	a201      	add	r2, pc, #4	; (adr r2, 800a380 <UART_SetConfig+0x4a0>)
 800a37a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a37e:	bf00      	nop
 800a380:	0800a399 	.word	0x0800a399
 800a384:	0800a3a1 	.word	0x0800a3a1
 800a388:	0800a3a9 	.word	0x0800a3a9
 800a38c:	0800a3b1 	.word	0x0800a3b1
 800a390:	0800a3b9 	.word	0x0800a3b9
 800a394:	0800a3c1 	.word	0x0800a3c1
 800a398:	2300      	movs	r3, #0
 800a39a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a39e:	e08b      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a3a0:	2304      	movs	r3, #4
 800a3a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3a6:	e087      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a3a8:	2308      	movs	r3, #8
 800a3aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3ae:	e083      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a3b0:	2310      	movs	r3, #16
 800a3b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3b6:	e07f      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a3b8:	2320      	movs	r3, #32
 800a3ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3be:	e07b      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a3c0:	2340      	movs	r3, #64	; 0x40
 800a3c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3c6:	e077      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a3c8:	2380      	movs	r3, #128	; 0x80
 800a3ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3ce:	bf00      	nop
 800a3d0:	e072      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4a6b      	ldr	r2, [pc, #428]	; (800a584 <UART_SetConfig+0x6a4>)
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d132      	bne.n	800a442 <UART_SetConfig+0x562>
 800a3dc:	4b67      	ldr	r3, [pc, #412]	; (800a57c <UART_SetConfig+0x69c>)
 800a3de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3e0:	f003 0307 	and.w	r3, r3, #7
 800a3e4:	2b05      	cmp	r3, #5
 800a3e6:	d827      	bhi.n	800a438 <UART_SetConfig+0x558>
 800a3e8:	a201      	add	r2, pc, #4	; (adr r2, 800a3f0 <UART_SetConfig+0x510>)
 800a3ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ee:	bf00      	nop
 800a3f0:	0800a409 	.word	0x0800a409
 800a3f4:	0800a411 	.word	0x0800a411
 800a3f8:	0800a419 	.word	0x0800a419
 800a3fc:	0800a421 	.word	0x0800a421
 800a400:	0800a429 	.word	0x0800a429
 800a404:	0800a431 	.word	0x0800a431
 800a408:	2300      	movs	r3, #0
 800a40a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a40e:	e053      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a410:	2304      	movs	r3, #4
 800a412:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a416:	e04f      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a418:	2308      	movs	r3, #8
 800a41a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a41e:	e04b      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a420:	2310      	movs	r3, #16
 800a422:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a426:	e047      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a428:	2320      	movs	r3, #32
 800a42a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a42e:	e043      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a430:	2340      	movs	r3, #64	; 0x40
 800a432:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a436:	e03f      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a438:	2380      	movs	r3, #128	; 0x80
 800a43a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a43e:	bf00      	nop
 800a440:	e03a      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4a50      	ldr	r2, [pc, #320]	; (800a588 <UART_SetConfig+0x6a8>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d132      	bne.n	800a4b2 <UART_SetConfig+0x5d2>
 800a44c:	4b4b      	ldr	r3, [pc, #300]	; (800a57c <UART_SetConfig+0x69c>)
 800a44e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a450:	f003 0307 	and.w	r3, r3, #7
 800a454:	2b05      	cmp	r3, #5
 800a456:	d827      	bhi.n	800a4a8 <UART_SetConfig+0x5c8>
 800a458:	a201      	add	r2, pc, #4	; (adr r2, 800a460 <UART_SetConfig+0x580>)
 800a45a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a45e:	bf00      	nop
 800a460:	0800a479 	.word	0x0800a479
 800a464:	0800a481 	.word	0x0800a481
 800a468:	0800a489 	.word	0x0800a489
 800a46c:	0800a491 	.word	0x0800a491
 800a470:	0800a499 	.word	0x0800a499
 800a474:	0800a4a1 	.word	0x0800a4a1
 800a478:	2302      	movs	r3, #2
 800a47a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a47e:	e01b      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a480:	2304      	movs	r3, #4
 800a482:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a486:	e017      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a488:	2308      	movs	r3, #8
 800a48a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a48e:	e013      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a490:	2310      	movs	r3, #16
 800a492:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a496:	e00f      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a498:	2320      	movs	r3, #32
 800a49a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a49e:	e00b      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a4a0:	2340      	movs	r3, #64	; 0x40
 800a4a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4a6:	e007      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a4a8:	2380      	movs	r3, #128	; 0x80
 800a4aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4ae:	bf00      	nop
 800a4b0:	e002      	b.n	800a4b8 <UART_SetConfig+0x5d8>
 800a4b2:	2380      	movs	r3, #128	; 0x80
 800a4b4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4a32      	ldr	r2, [pc, #200]	; (800a588 <UART_SetConfig+0x6a8>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	f040 86f7 	bne.w	800b2b2 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a4c4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a4c8:	2b08      	cmp	r3, #8
 800a4ca:	f000 80c0 	beq.w	800a64e <UART_SetConfig+0x76e>
 800a4ce:	2b08      	cmp	r3, #8
 800a4d0:	dc04      	bgt.n	800a4dc <UART_SetConfig+0x5fc>
 800a4d2:	2b02      	cmp	r3, #2
 800a4d4:	d00c      	beq.n	800a4f0 <UART_SetConfig+0x610>
 800a4d6:	2b04      	cmp	r3, #4
 800a4d8:	d065      	beq.n	800a5a6 <UART_SetConfig+0x6c6>
 800a4da:	e27a      	b.n	800a9d2 <UART_SetConfig+0xaf2>
 800a4dc:	2b20      	cmp	r3, #32
 800a4de:	f000 81b0 	beq.w	800a842 <UART_SetConfig+0x962>
 800a4e2:	2b40      	cmp	r3, #64	; 0x40
 800a4e4:	f000 821e 	beq.w	800a924 <UART_SetConfig+0xa44>
 800a4e8:	2b10      	cmp	r3, #16
 800a4ea:	f000 8104 	beq.w	800a6f6 <UART_SetConfig+0x816>
 800a4ee:	e270      	b.n	800a9d2 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a4f0:	f7fc fe24 	bl	800713c <HAL_RCCEx_GetD3PCLK1Freq>
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d04e      	beq.n	800a59c <UART_SetConfig+0x6bc>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a502:	2b01      	cmp	r3, #1
 800a504:	d048      	beq.n	800a598 <UART_SetConfig+0x6b8>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a50a:	2b02      	cmp	r3, #2
 800a50c:	d042      	beq.n	800a594 <UART_SetConfig+0x6b4>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a512:	2b03      	cmp	r3, #3
 800a514:	d03c      	beq.n	800a590 <UART_SetConfig+0x6b0>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a51a:	2b04      	cmp	r3, #4
 800a51c:	d036      	beq.n	800a58c <UART_SetConfig+0x6ac>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a522:	2b05      	cmp	r3, #5
 800a524:	d026      	beq.n	800a574 <UART_SetConfig+0x694>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52a:	2b06      	cmp	r3, #6
 800a52c:	d020      	beq.n	800a570 <UART_SetConfig+0x690>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a532:	2b07      	cmp	r3, #7
 800a534:	d01a      	beq.n	800a56c <UART_SetConfig+0x68c>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53a:	2b08      	cmp	r3, #8
 800a53c:	d014      	beq.n	800a568 <UART_SetConfig+0x688>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a542:	2b09      	cmp	r3, #9
 800a544:	d00e      	beq.n	800a564 <UART_SetConfig+0x684>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54a:	2b0a      	cmp	r3, #10
 800a54c:	d008      	beq.n	800a560 <UART_SetConfig+0x680>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a552:	2b0b      	cmp	r3, #11
 800a554:	d102      	bne.n	800a55c <UART_SetConfig+0x67c>
 800a556:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a55a:	e020      	b.n	800a59e <UART_SetConfig+0x6be>
 800a55c:	2301      	movs	r3, #1
 800a55e:	e01e      	b.n	800a59e <UART_SetConfig+0x6be>
 800a560:	2380      	movs	r3, #128	; 0x80
 800a562:	e01c      	b.n	800a59e <UART_SetConfig+0x6be>
 800a564:	2340      	movs	r3, #64	; 0x40
 800a566:	e01a      	b.n	800a59e <UART_SetConfig+0x6be>
 800a568:	2320      	movs	r3, #32
 800a56a:	e018      	b.n	800a59e <UART_SetConfig+0x6be>
 800a56c:	2310      	movs	r3, #16
 800a56e:	e016      	b.n	800a59e <UART_SetConfig+0x6be>
 800a570:	230c      	movs	r3, #12
 800a572:	e014      	b.n	800a59e <UART_SetConfig+0x6be>
 800a574:	230a      	movs	r3, #10
 800a576:	e012      	b.n	800a59e <UART_SetConfig+0x6be>
 800a578:	40011400 	.word	0x40011400
 800a57c:	58024400 	.word	0x58024400
 800a580:	40007800 	.word	0x40007800
 800a584:	40007c00 	.word	0x40007c00
 800a588:	58000c00 	.word	0x58000c00
 800a58c:	2308      	movs	r3, #8
 800a58e:	e006      	b.n	800a59e <UART_SetConfig+0x6be>
 800a590:	2306      	movs	r3, #6
 800a592:	e004      	b.n	800a59e <UART_SetConfig+0x6be>
 800a594:	2304      	movs	r3, #4
 800a596:	e002      	b.n	800a59e <UART_SetConfig+0x6be>
 800a598:	2302      	movs	r3, #2
 800a59a:	e000      	b.n	800a59e <UART_SetConfig+0x6be>
 800a59c:	2301      	movs	r3, #1
 800a59e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a5a4:	e219      	b.n	800a9da <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5a6:	f107 0318 	add.w	r3, r7, #24
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f7fc fddc 	bl	8007168 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a5b0:	69fa      	ldr	r2, [r7, #28]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d044      	beq.n	800a644 <UART_SetConfig+0x764>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5be:	2b01      	cmp	r3, #1
 800a5c0:	d03e      	beq.n	800a640 <UART_SetConfig+0x760>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c6:	2b02      	cmp	r3, #2
 800a5c8:	d038      	beq.n	800a63c <UART_SetConfig+0x75c>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ce:	2b03      	cmp	r3, #3
 800a5d0:	d032      	beq.n	800a638 <UART_SetConfig+0x758>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d6:	2b04      	cmp	r3, #4
 800a5d8:	d02c      	beq.n	800a634 <UART_SetConfig+0x754>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5de:	2b05      	cmp	r3, #5
 800a5e0:	d026      	beq.n	800a630 <UART_SetConfig+0x750>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e6:	2b06      	cmp	r3, #6
 800a5e8:	d020      	beq.n	800a62c <UART_SetConfig+0x74c>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ee:	2b07      	cmp	r3, #7
 800a5f0:	d01a      	beq.n	800a628 <UART_SetConfig+0x748>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f6:	2b08      	cmp	r3, #8
 800a5f8:	d014      	beq.n	800a624 <UART_SetConfig+0x744>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5fe:	2b09      	cmp	r3, #9
 800a600:	d00e      	beq.n	800a620 <UART_SetConfig+0x740>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a606:	2b0a      	cmp	r3, #10
 800a608:	d008      	beq.n	800a61c <UART_SetConfig+0x73c>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a60e:	2b0b      	cmp	r3, #11
 800a610:	d102      	bne.n	800a618 <UART_SetConfig+0x738>
 800a612:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a616:	e016      	b.n	800a646 <UART_SetConfig+0x766>
 800a618:	2301      	movs	r3, #1
 800a61a:	e014      	b.n	800a646 <UART_SetConfig+0x766>
 800a61c:	2380      	movs	r3, #128	; 0x80
 800a61e:	e012      	b.n	800a646 <UART_SetConfig+0x766>
 800a620:	2340      	movs	r3, #64	; 0x40
 800a622:	e010      	b.n	800a646 <UART_SetConfig+0x766>
 800a624:	2320      	movs	r3, #32
 800a626:	e00e      	b.n	800a646 <UART_SetConfig+0x766>
 800a628:	2310      	movs	r3, #16
 800a62a:	e00c      	b.n	800a646 <UART_SetConfig+0x766>
 800a62c:	230c      	movs	r3, #12
 800a62e:	e00a      	b.n	800a646 <UART_SetConfig+0x766>
 800a630:	230a      	movs	r3, #10
 800a632:	e008      	b.n	800a646 <UART_SetConfig+0x766>
 800a634:	2308      	movs	r3, #8
 800a636:	e006      	b.n	800a646 <UART_SetConfig+0x766>
 800a638:	2306      	movs	r3, #6
 800a63a:	e004      	b.n	800a646 <UART_SetConfig+0x766>
 800a63c:	2304      	movs	r3, #4
 800a63e:	e002      	b.n	800a646 <UART_SetConfig+0x766>
 800a640:	2302      	movs	r3, #2
 800a642:	e000      	b.n	800a646 <UART_SetConfig+0x766>
 800a644:	2301      	movs	r3, #1
 800a646:	fbb2 f3f3 	udiv	r3, r2, r3
 800a64a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a64c:	e1c5      	b.n	800a9da <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a64e:	f107 030c 	add.w	r3, r7, #12
 800a652:	4618      	mov	r0, r3
 800a654:	f7fc fed4 	bl	8007400 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a658:	693a      	ldr	r2, [r7, #16]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d044      	beq.n	800a6ec <UART_SetConfig+0x80c>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a666:	2b01      	cmp	r3, #1
 800a668:	d03e      	beq.n	800a6e8 <UART_SetConfig+0x808>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a66e:	2b02      	cmp	r3, #2
 800a670:	d038      	beq.n	800a6e4 <UART_SetConfig+0x804>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a676:	2b03      	cmp	r3, #3
 800a678:	d032      	beq.n	800a6e0 <UART_SetConfig+0x800>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a67e:	2b04      	cmp	r3, #4
 800a680:	d02c      	beq.n	800a6dc <UART_SetConfig+0x7fc>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a686:	2b05      	cmp	r3, #5
 800a688:	d026      	beq.n	800a6d8 <UART_SetConfig+0x7f8>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a68e:	2b06      	cmp	r3, #6
 800a690:	d020      	beq.n	800a6d4 <UART_SetConfig+0x7f4>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a696:	2b07      	cmp	r3, #7
 800a698:	d01a      	beq.n	800a6d0 <UART_SetConfig+0x7f0>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69e:	2b08      	cmp	r3, #8
 800a6a0:	d014      	beq.n	800a6cc <UART_SetConfig+0x7ec>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a6:	2b09      	cmp	r3, #9
 800a6a8:	d00e      	beq.n	800a6c8 <UART_SetConfig+0x7e8>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ae:	2b0a      	cmp	r3, #10
 800a6b0:	d008      	beq.n	800a6c4 <UART_SetConfig+0x7e4>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b6:	2b0b      	cmp	r3, #11
 800a6b8:	d102      	bne.n	800a6c0 <UART_SetConfig+0x7e0>
 800a6ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6be:	e016      	b.n	800a6ee <UART_SetConfig+0x80e>
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	e014      	b.n	800a6ee <UART_SetConfig+0x80e>
 800a6c4:	2380      	movs	r3, #128	; 0x80
 800a6c6:	e012      	b.n	800a6ee <UART_SetConfig+0x80e>
 800a6c8:	2340      	movs	r3, #64	; 0x40
 800a6ca:	e010      	b.n	800a6ee <UART_SetConfig+0x80e>
 800a6cc:	2320      	movs	r3, #32
 800a6ce:	e00e      	b.n	800a6ee <UART_SetConfig+0x80e>
 800a6d0:	2310      	movs	r3, #16
 800a6d2:	e00c      	b.n	800a6ee <UART_SetConfig+0x80e>
 800a6d4:	230c      	movs	r3, #12
 800a6d6:	e00a      	b.n	800a6ee <UART_SetConfig+0x80e>
 800a6d8:	230a      	movs	r3, #10
 800a6da:	e008      	b.n	800a6ee <UART_SetConfig+0x80e>
 800a6dc:	2308      	movs	r3, #8
 800a6de:	e006      	b.n	800a6ee <UART_SetConfig+0x80e>
 800a6e0:	2306      	movs	r3, #6
 800a6e2:	e004      	b.n	800a6ee <UART_SetConfig+0x80e>
 800a6e4:	2304      	movs	r3, #4
 800a6e6:	e002      	b.n	800a6ee <UART_SetConfig+0x80e>
 800a6e8:	2302      	movs	r3, #2
 800a6ea:	e000      	b.n	800a6ee <UART_SetConfig+0x80e>
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a6f4:	e171      	b.n	800a9da <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6f6:	4b7a      	ldr	r3, [pc, #488]	; (800a8e0 <UART_SetConfig+0xa00>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f003 0320 	and.w	r3, r3, #32
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d054      	beq.n	800a7ac <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a702:	4b77      	ldr	r3, [pc, #476]	; (800a8e0 <UART_SetConfig+0xa00>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	08db      	lsrs	r3, r3, #3
 800a708:	f003 0303 	and.w	r3, r3, #3
 800a70c:	4a75      	ldr	r2, [pc, #468]	; (800a8e4 <UART_SetConfig+0xa04>)
 800a70e:	40da      	lsrs	r2, r3
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a714:	2b00      	cmp	r3, #0
 800a716:	d044      	beq.n	800a7a2 <UART_SetConfig+0x8c2>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d03e      	beq.n	800a79e <UART_SetConfig+0x8be>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a724:	2b02      	cmp	r3, #2
 800a726:	d038      	beq.n	800a79a <UART_SetConfig+0x8ba>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a72c:	2b03      	cmp	r3, #3
 800a72e:	d032      	beq.n	800a796 <UART_SetConfig+0x8b6>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a734:	2b04      	cmp	r3, #4
 800a736:	d02c      	beq.n	800a792 <UART_SetConfig+0x8b2>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a73c:	2b05      	cmp	r3, #5
 800a73e:	d026      	beq.n	800a78e <UART_SetConfig+0x8ae>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a744:	2b06      	cmp	r3, #6
 800a746:	d020      	beq.n	800a78a <UART_SetConfig+0x8aa>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74c:	2b07      	cmp	r3, #7
 800a74e:	d01a      	beq.n	800a786 <UART_SetConfig+0x8a6>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a754:	2b08      	cmp	r3, #8
 800a756:	d014      	beq.n	800a782 <UART_SetConfig+0x8a2>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75c:	2b09      	cmp	r3, #9
 800a75e:	d00e      	beq.n	800a77e <UART_SetConfig+0x89e>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a764:	2b0a      	cmp	r3, #10
 800a766:	d008      	beq.n	800a77a <UART_SetConfig+0x89a>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76c:	2b0b      	cmp	r3, #11
 800a76e:	d102      	bne.n	800a776 <UART_SetConfig+0x896>
 800a770:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a774:	e016      	b.n	800a7a4 <UART_SetConfig+0x8c4>
 800a776:	2301      	movs	r3, #1
 800a778:	e014      	b.n	800a7a4 <UART_SetConfig+0x8c4>
 800a77a:	2380      	movs	r3, #128	; 0x80
 800a77c:	e012      	b.n	800a7a4 <UART_SetConfig+0x8c4>
 800a77e:	2340      	movs	r3, #64	; 0x40
 800a780:	e010      	b.n	800a7a4 <UART_SetConfig+0x8c4>
 800a782:	2320      	movs	r3, #32
 800a784:	e00e      	b.n	800a7a4 <UART_SetConfig+0x8c4>
 800a786:	2310      	movs	r3, #16
 800a788:	e00c      	b.n	800a7a4 <UART_SetConfig+0x8c4>
 800a78a:	230c      	movs	r3, #12
 800a78c:	e00a      	b.n	800a7a4 <UART_SetConfig+0x8c4>
 800a78e:	230a      	movs	r3, #10
 800a790:	e008      	b.n	800a7a4 <UART_SetConfig+0x8c4>
 800a792:	2308      	movs	r3, #8
 800a794:	e006      	b.n	800a7a4 <UART_SetConfig+0x8c4>
 800a796:	2306      	movs	r3, #6
 800a798:	e004      	b.n	800a7a4 <UART_SetConfig+0x8c4>
 800a79a:	2304      	movs	r3, #4
 800a79c:	e002      	b.n	800a7a4 <UART_SetConfig+0x8c4>
 800a79e:	2302      	movs	r3, #2
 800a7a0:	e000      	b.n	800a7a4 <UART_SetConfig+0x8c4>
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800a7aa:	e116      	b.n	800a9da <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d043      	beq.n	800a83c <UART_SetConfig+0x95c>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d03d      	beq.n	800a838 <UART_SetConfig+0x958>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c0:	2b02      	cmp	r3, #2
 800a7c2:	d037      	beq.n	800a834 <UART_SetConfig+0x954>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c8:	2b03      	cmp	r3, #3
 800a7ca:	d031      	beq.n	800a830 <UART_SetConfig+0x950>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d0:	2b04      	cmp	r3, #4
 800a7d2:	d02b      	beq.n	800a82c <UART_SetConfig+0x94c>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d8:	2b05      	cmp	r3, #5
 800a7da:	d025      	beq.n	800a828 <UART_SetConfig+0x948>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e0:	2b06      	cmp	r3, #6
 800a7e2:	d01f      	beq.n	800a824 <UART_SetConfig+0x944>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e8:	2b07      	cmp	r3, #7
 800a7ea:	d019      	beq.n	800a820 <UART_SetConfig+0x940>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f0:	2b08      	cmp	r3, #8
 800a7f2:	d013      	beq.n	800a81c <UART_SetConfig+0x93c>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f8:	2b09      	cmp	r3, #9
 800a7fa:	d00d      	beq.n	800a818 <UART_SetConfig+0x938>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a800:	2b0a      	cmp	r3, #10
 800a802:	d007      	beq.n	800a814 <UART_SetConfig+0x934>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a808:	2b0b      	cmp	r3, #11
 800a80a:	d101      	bne.n	800a810 <UART_SetConfig+0x930>
 800a80c:	4b36      	ldr	r3, [pc, #216]	; (800a8e8 <UART_SetConfig+0xa08>)
 800a80e:	e016      	b.n	800a83e <UART_SetConfig+0x95e>
 800a810:	4b34      	ldr	r3, [pc, #208]	; (800a8e4 <UART_SetConfig+0xa04>)
 800a812:	e014      	b.n	800a83e <UART_SetConfig+0x95e>
 800a814:	4b35      	ldr	r3, [pc, #212]	; (800a8ec <UART_SetConfig+0xa0c>)
 800a816:	e012      	b.n	800a83e <UART_SetConfig+0x95e>
 800a818:	4b35      	ldr	r3, [pc, #212]	; (800a8f0 <UART_SetConfig+0xa10>)
 800a81a:	e010      	b.n	800a83e <UART_SetConfig+0x95e>
 800a81c:	4b35      	ldr	r3, [pc, #212]	; (800a8f4 <UART_SetConfig+0xa14>)
 800a81e:	e00e      	b.n	800a83e <UART_SetConfig+0x95e>
 800a820:	4b35      	ldr	r3, [pc, #212]	; (800a8f8 <UART_SetConfig+0xa18>)
 800a822:	e00c      	b.n	800a83e <UART_SetConfig+0x95e>
 800a824:	4b35      	ldr	r3, [pc, #212]	; (800a8fc <UART_SetConfig+0xa1c>)
 800a826:	e00a      	b.n	800a83e <UART_SetConfig+0x95e>
 800a828:	4b35      	ldr	r3, [pc, #212]	; (800a900 <UART_SetConfig+0xa20>)
 800a82a:	e008      	b.n	800a83e <UART_SetConfig+0x95e>
 800a82c:	4b35      	ldr	r3, [pc, #212]	; (800a904 <UART_SetConfig+0xa24>)
 800a82e:	e006      	b.n	800a83e <UART_SetConfig+0x95e>
 800a830:	4b35      	ldr	r3, [pc, #212]	; (800a908 <UART_SetConfig+0xa28>)
 800a832:	e004      	b.n	800a83e <UART_SetConfig+0x95e>
 800a834:	4b35      	ldr	r3, [pc, #212]	; (800a90c <UART_SetConfig+0xa2c>)
 800a836:	e002      	b.n	800a83e <UART_SetConfig+0x95e>
 800a838:	4b35      	ldr	r3, [pc, #212]	; (800a910 <UART_SetConfig+0xa30>)
 800a83a:	e000      	b.n	800a83e <UART_SetConfig+0x95e>
 800a83c:	4b29      	ldr	r3, [pc, #164]	; (800a8e4 <UART_SetConfig+0xa04>)
 800a83e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a840:	e0cb      	b.n	800a9da <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a846:	2b00      	cmp	r3, #0
 800a848:	d046      	beq.n	800a8d8 <UART_SetConfig+0x9f8>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a84e:	2b01      	cmp	r3, #1
 800a850:	d040      	beq.n	800a8d4 <UART_SetConfig+0x9f4>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a856:	2b02      	cmp	r3, #2
 800a858:	d03a      	beq.n	800a8d0 <UART_SetConfig+0x9f0>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a85e:	2b03      	cmp	r3, #3
 800a860:	d034      	beq.n	800a8cc <UART_SetConfig+0x9ec>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a866:	2b04      	cmp	r3, #4
 800a868:	d02e      	beq.n	800a8c8 <UART_SetConfig+0x9e8>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a86e:	2b05      	cmp	r3, #5
 800a870:	d028      	beq.n	800a8c4 <UART_SetConfig+0x9e4>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a876:	2b06      	cmp	r3, #6
 800a878:	d022      	beq.n	800a8c0 <UART_SetConfig+0x9e0>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a87e:	2b07      	cmp	r3, #7
 800a880:	d01c      	beq.n	800a8bc <UART_SetConfig+0x9dc>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a886:	2b08      	cmp	r3, #8
 800a888:	d016      	beq.n	800a8b8 <UART_SetConfig+0x9d8>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a88e:	2b09      	cmp	r3, #9
 800a890:	d00f      	beq.n	800a8b2 <UART_SetConfig+0x9d2>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a896:	2b0a      	cmp	r3, #10
 800a898:	d008      	beq.n	800a8ac <UART_SetConfig+0x9cc>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a89e:	2b0b      	cmp	r3, #11
 800a8a0:	d102      	bne.n	800a8a8 <UART_SetConfig+0x9c8>
 800a8a2:	f643 5309 	movw	r3, #15625	; 0x3d09
 800a8a6:	e018      	b.n	800a8da <UART_SetConfig+0x9fa>
 800a8a8:	4b13      	ldr	r3, [pc, #76]	; (800a8f8 <UART_SetConfig+0xa18>)
 800a8aa:	e016      	b.n	800a8da <UART_SetConfig+0x9fa>
 800a8ac:	f647 2312 	movw	r3, #31250	; 0x7a12
 800a8b0:	e013      	b.n	800a8da <UART_SetConfig+0x9fa>
 800a8b2:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a8b6:	e010      	b.n	800a8da <UART_SetConfig+0x9fa>
 800a8b8:	4b16      	ldr	r3, [pc, #88]	; (800a914 <UART_SetConfig+0xa34>)
 800a8ba:	e00e      	b.n	800a8da <UART_SetConfig+0x9fa>
 800a8bc:	4b0a      	ldr	r3, [pc, #40]	; (800a8e8 <UART_SetConfig+0xa08>)
 800a8be:	e00c      	b.n	800a8da <UART_SetConfig+0x9fa>
 800a8c0:	4b15      	ldr	r3, [pc, #84]	; (800a918 <UART_SetConfig+0xa38>)
 800a8c2:	e00a      	b.n	800a8da <UART_SetConfig+0x9fa>
 800a8c4:	4b15      	ldr	r3, [pc, #84]	; (800a91c <UART_SetConfig+0xa3c>)
 800a8c6:	e008      	b.n	800a8da <UART_SetConfig+0x9fa>
 800a8c8:	4b08      	ldr	r3, [pc, #32]	; (800a8ec <UART_SetConfig+0xa0c>)
 800a8ca:	e006      	b.n	800a8da <UART_SetConfig+0x9fa>
 800a8cc:	4b14      	ldr	r3, [pc, #80]	; (800a920 <UART_SetConfig+0xa40>)
 800a8ce:	e004      	b.n	800a8da <UART_SetConfig+0x9fa>
 800a8d0:	4b07      	ldr	r3, [pc, #28]	; (800a8f0 <UART_SetConfig+0xa10>)
 800a8d2:	e002      	b.n	800a8da <UART_SetConfig+0x9fa>
 800a8d4:	4b07      	ldr	r3, [pc, #28]	; (800a8f4 <UART_SetConfig+0xa14>)
 800a8d6:	e000      	b.n	800a8da <UART_SetConfig+0x9fa>
 800a8d8:	4b07      	ldr	r3, [pc, #28]	; (800a8f8 <UART_SetConfig+0xa18>)
 800a8da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8dc:	e07d      	b.n	800a9da <UART_SetConfig+0xafa>
 800a8de:	bf00      	nop
 800a8e0:	58024400 	.word	0x58024400
 800a8e4:	03d09000 	.word	0x03d09000
 800a8e8:	0003d090 	.word	0x0003d090
 800a8ec:	0007a120 	.word	0x0007a120
 800a8f0:	000f4240 	.word	0x000f4240
 800a8f4:	001e8480 	.word	0x001e8480
 800a8f8:	003d0900 	.word	0x003d0900
 800a8fc:	00516155 	.word	0x00516155
 800a900:	0061a800 	.word	0x0061a800
 800a904:	007a1200 	.word	0x007a1200
 800a908:	00a2c2aa 	.word	0x00a2c2aa
 800a90c:	00f42400 	.word	0x00f42400
 800a910:	01e84800 	.word	0x01e84800
 800a914:	0001e848 	.word	0x0001e848
 800a918:	00051615 	.word	0x00051615
 800a91c:	00061a80 	.word	0x00061a80
 800a920:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d04e      	beq.n	800a9ca <UART_SetConfig+0xaea>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a930:	2b01      	cmp	r3, #1
 800a932:	d047      	beq.n	800a9c4 <UART_SetConfig+0xae4>
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a938:	2b02      	cmp	r3, #2
 800a93a:	d040      	beq.n	800a9be <UART_SetConfig+0xade>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a940:	2b03      	cmp	r3, #3
 800a942:	d039      	beq.n	800a9b8 <UART_SetConfig+0xad8>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a948:	2b04      	cmp	r3, #4
 800a94a:	d032      	beq.n	800a9b2 <UART_SetConfig+0xad2>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a950:	2b05      	cmp	r3, #5
 800a952:	d02b      	beq.n	800a9ac <UART_SetConfig+0xacc>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a958:	2b06      	cmp	r3, #6
 800a95a:	d024      	beq.n	800a9a6 <UART_SetConfig+0xac6>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a960:	2b07      	cmp	r3, #7
 800a962:	d01d      	beq.n	800a9a0 <UART_SetConfig+0xac0>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a968:	2b08      	cmp	r3, #8
 800a96a:	d016      	beq.n	800a99a <UART_SetConfig+0xaba>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a970:	2b09      	cmp	r3, #9
 800a972:	d00f      	beq.n	800a994 <UART_SetConfig+0xab4>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a978:	2b0a      	cmp	r3, #10
 800a97a:	d008      	beq.n	800a98e <UART_SetConfig+0xaae>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a980:	2b0b      	cmp	r3, #11
 800a982:	d101      	bne.n	800a988 <UART_SetConfig+0xaa8>
 800a984:	2380      	movs	r3, #128	; 0x80
 800a986:	e022      	b.n	800a9ce <UART_SetConfig+0xaee>
 800a988:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a98c:	e01f      	b.n	800a9ce <UART_SetConfig+0xaee>
 800a98e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a992:	e01c      	b.n	800a9ce <UART_SetConfig+0xaee>
 800a994:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a998:	e019      	b.n	800a9ce <UART_SetConfig+0xaee>
 800a99a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a99e:	e016      	b.n	800a9ce <UART_SetConfig+0xaee>
 800a9a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a9a4:	e013      	b.n	800a9ce <UART_SetConfig+0xaee>
 800a9a6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800a9aa:	e010      	b.n	800a9ce <UART_SetConfig+0xaee>
 800a9ac:	f640 43cc 	movw	r3, #3276	; 0xccc
 800a9b0:	e00d      	b.n	800a9ce <UART_SetConfig+0xaee>
 800a9b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a9b6:	e00a      	b.n	800a9ce <UART_SetConfig+0xaee>
 800a9b8:	f241 5355 	movw	r3, #5461	; 0x1555
 800a9bc:	e007      	b.n	800a9ce <UART_SetConfig+0xaee>
 800a9be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a9c2:	e004      	b.n	800a9ce <UART_SetConfig+0xaee>
 800a9c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a9c8:	e001      	b.n	800a9ce <UART_SetConfig+0xaee>
 800a9ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a9d0:	e003      	b.n	800a9da <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800a9d8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800a9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	f001 83e8 	beq.w	800c1b2 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	685a      	ldr	r2, [r3, #4]
 800a9e6:	4613      	mov	r3, r2
 800a9e8:	005b      	lsls	r3, r3, #1
 800a9ea:	4413      	add	r3, r2
 800a9ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d305      	bcc.n	800a9fe <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a9f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d904      	bls.n	800aa08 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800a9fe:	2301      	movs	r3, #1
 800aa00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa04:	f001 bbd5 	b.w	800c1b2 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 800aa08:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800aa0c:	2b08      	cmp	r3, #8
 800aa0e:	f000 8154 	beq.w	800acba <UART_SetConfig+0xdda>
 800aa12:	2b08      	cmp	r3, #8
 800aa14:	dc06      	bgt.n	800aa24 <UART_SetConfig+0xb44>
 800aa16:	2b02      	cmp	r3, #2
 800aa18:	d00f      	beq.n	800aa3a <UART_SetConfig+0xb5a>
 800aa1a:	2b04      	cmp	r3, #4
 800aa1c:	f000 80ac 	beq.w	800ab78 <UART_SetConfig+0xc98>
 800aa20:	f000 bc30 	b.w	800b284 <UART_SetConfig+0x13a4>
 800aa24:	2b20      	cmp	r3, #32
 800aa26:	f000 832d 	beq.w	800b084 <UART_SetConfig+0x11a4>
 800aa2a:	2b40      	cmp	r3, #64	; 0x40
 800aa2c:	f000 83a5 	beq.w	800b17a <UART_SetConfig+0x129a>
 800aa30:	2b10      	cmp	r3, #16
 800aa32:	f000 81e3 	beq.w	800adfc <UART_SetConfig+0xf1c>
 800aa36:	f000 bc25 	b.w	800b284 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800aa3a:	f7fc fb7f 	bl	800713c <HAL_RCCEx_GetD3PCLK1Freq>
 800aa3e:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa42:	4618      	mov	r0, r3
 800aa44:	f04f 0100 	mov.w	r1, #0
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d067      	beq.n	800ab20 <UART_SetConfig+0xc40>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa54:	2b01      	cmp	r3, #1
 800aa56:	d05e      	beq.n	800ab16 <UART_SetConfig+0xc36>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa5c:	2b02      	cmp	r3, #2
 800aa5e:	d055      	beq.n	800ab0c <UART_SetConfig+0xc2c>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa64:	2b03      	cmp	r3, #3
 800aa66:	d04c      	beq.n	800ab02 <UART_SetConfig+0xc22>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa6c:	2b04      	cmp	r3, #4
 800aa6e:	d043      	beq.n	800aaf8 <UART_SetConfig+0xc18>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa74:	2b05      	cmp	r3, #5
 800aa76:	d03a      	beq.n	800aaee <UART_SetConfig+0xc0e>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa7c:	2b06      	cmp	r3, #6
 800aa7e:	d031      	beq.n	800aae4 <UART_SetConfig+0xc04>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa84:	2b07      	cmp	r3, #7
 800aa86:	d028      	beq.n	800aada <UART_SetConfig+0xbfa>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa8c:	2b08      	cmp	r3, #8
 800aa8e:	d01f      	beq.n	800aad0 <UART_SetConfig+0xbf0>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa94:	2b09      	cmp	r3, #9
 800aa96:	d016      	beq.n	800aac6 <UART_SetConfig+0xbe6>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa9c:	2b0a      	cmp	r3, #10
 800aa9e:	d00d      	beq.n	800aabc <UART_SetConfig+0xbdc>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa4:	2b0b      	cmp	r3, #11
 800aaa6:	d104      	bne.n	800aab2 <UART_SetConfig+0xbd2>
 800aaa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aaac:	f04f 0400 	mov.w	r4, #0
 800aab0:	e03a      	b.n	800ab28 <UART_SetConfig+0xc48>
 800aab2:	f04f 0301 	mov.w	r3, #1
 800aab6:	f04f 0400 	mov.w	r4, #0
 800aaba:	e035      	b.n	800ab28 <UART_SetConfig+0xc48>
 800aabc:	f04f 0380 	mov.w	r3, #128	; 0x80
 800aac0:	f04f 0400 	mov.w	r4, #0
 800aac4:	e030      	b.n	800ab28 <UART_SetConfig+0xc48>
 800aac6:	f04f 0340 	mov.w	r3, #64	; 0x40
 800aaca:	f04f 0400 	mov.w	r4, #0
 800aace:	e02b      	b.n	800ab28 <UART_SetConfig+0xc48>
 800aad0:	f04f 0320 	mov.w	r3, #32
 800aad4:	f04f 0400 	mov.w	r4, #0
 800aad8:	e026      	b.n	800ab28 <UART_SetConfig+0xc48>
 800aada:	f04f 0310 	mov.w	r3, #16
 800aade:	f04f 0400 	mov.w	r4, #0
 800aae2:	e021      	b.n	800ab28 <UART_SetConfig+0xc48>
 800aae4:	f04f 030c 	mov.w	r3, #12
 800aae8:	f04f 0400 	mov.w	r4, #0
 800aaec:	e01c      	b.n	800ab28 <UART_SetConfig+0xc48>
 800aaee:	f04f 030a 	mov.w	r3, #10
 800aaf2:	f04f 0400 	mov.w	r4, #0
 800aaf6:	e017      	b.n	800ab28 <UART_SetConfig+0xc48>
 800aaf8:	f04f 0308 	mov.w	r3, #8
 800aafc:	f04f 0400 	mov.w	r4, #0
 800ab00:	e012      	b.n	800ab28 <UART_SetConfig+0xc48>
 800ab02:	f04f 0306 	mov.w	r3, #6
 800ab06:	f04f 0400 	mov.w	r4, #0
 800ab0a:	e00d      	b.n	800ab28 <UART_SetConfig+0xc48>
 800ab0c:	f04f 0304 	mov.w	r3, #4
 800ab10:	f04f 0400 	mov.w	r4, #0
 800ab14:	e008      	b.n	800ab28 <UART_SetConfig+0xc48>
 800ab16:	f04f 0302 	mov.w	r3, #2
 800ab1a:	f04f 0400 	mov.w	r4, #0
 800ab1e:	e003      	b.n	800ab28 <UART_SetConfig+0xc48>
 800ab20:	f04f 0301 	mov.w	r3, #1
 800ab24:	f04f 0400 	mov.w	r4, #0
 800ab28:	461a      	mov	r2, r3
 800ab2a:	4623      	mov	r3, r4
 800ab2c:	f7f5 fbd4 	bl	80002d8 <__aeabi_uldivmod>
 800ab30:	4603      	mov	r3, r0
 800ab32:	460c      	mov	r4, r1
 800ab34:	4619      	mov	r1, r3
 800ab36:	4622      	mov	r2, r4
 800ab38:	f04f 0300 	mov.w	r3, #0
 800ab3c:	f04f 0400 	mov.w	r4, #0
 800ab40:	0214      	lsls	r4, r2, #8
 800ab42:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ab46:	020b      	lsls	r3, r1, #8
 800ab48:	687a      	ldr	r2, [r7, #4]
 800ab4a:	6852      	ldr	r2, [r2, #4]
 800ab4c:	0852      	lsrs	r2, r2, #1
 800ab4e:	4611      	mov	r1, r2
 800ab50:	f04f 0200 	mov.w	r2, #0
 800ab54:	eb13 0b01 	adds.w	fp, r3, r1
 800ab58:	eb44 0c02 	adc.w	ip, r4, r2
 800ab5c:	4658      	mov	r0, fp
 800ab5e:	4661      	mov	r1, ip
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	f04f 0400 	mov.w	r4, #0
 800ab68:	461a      	mov	r2, r3
 800ab6a:	4623      	mov	r3, r4
 800ab6c:	f7f5 fbb4 	bl	80002d8 <__aeabi_uldivmod>
 800ab70:	4603      	mov	r3, r0
 800ab72:	460c      	mov	r4, r1
 800ab74:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ab76:	e389      	b.n	800b28c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab78:	f107 0318 	add.w	r3, r7, #24
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f7fc faf3 	bl	8007168 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab82:	69fb      	ldr	r3, [r7, #28]
 800ab84:	4618      	mov	r0, r3
 800ab86:	f04f 0100 	mov.w	r1, #0
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d067      	beq.n	800ac62 <UART_SetConfig+0xd82>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab96:	2b01      	cmp	r3, #1
 800ab98:	d05e      	beq.n	800ac58 <UART_SetConfig+0xd78>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab9e:	2b02      	cmp	r3, #2
 800aba0:	d055      	beq.n	800ac4e <UART_SetConfig+0xd6e>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba6:	2b03      	cmp	r3, #3
 800aba8:	d04c      	beq.n	800ac44 <UART_SetConfig+0xd64>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abae:	2b04      	cmp	r3, #4
 800abb0:	d043      	beq.n	800ac3a <UART_SetConfig+0xd5a>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abb6:	2b05      	cmp	r3, #5
 800abb8:	d03a      	beq.n	800ac30 <UART_SetConfig+0xd50>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abbe:	2b06      	cmp	r3, #6
 800abc0:	d031      	beq.n	800ac26 <UART_SetConfig+0xd46>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abc6:	2b07      	cmp	r3, #7
 800abc8:	d028      	beq.n	800ac1c <UART_SetConfig+0xd3c>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abce:	2b08      	cmp	r3, #8
 800abd0:	d01f      	beq.n	800ac12 <UART_SetConfig+0xd32>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abd6:	2b09      	cmp	r3, #9
 800abd8:	d016      	beq.n	800ac08 <UART_SetConfig+0xd28>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abde:	2b0a      	cmp	r3, #10
 800abe0:	d00d      	beq.n	800abfe <UART_SetConfig+0xd1e>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe6:	2b0b      	cmp	r3, #11
 800abe8:	d104      	bne.n	800abf4 <UART_SetConfig+0xd14>
 800abea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abee:	f04f 0400 	mov.w	r4, #0
 800abf2:	e03a      	b.n	800ac6a <UART_SetConfig+0xd8a>
 800abf4:	f04f 0301 	mov.w	r3, #1
 800abf8:	f04f 0400 	mov.w	r4, #0
 800abfc:	e035      	b.n	800ac6a <UART_SetConfig+0xd8a>
 800abfe:	f04f 0380 	mov.w	r3, #128	; 0x80
 800ac02:	f04f 0400 	mov.w	r4, #0
 800ac06:	e030      	b.n	800ac6a <UART_SetConfig+0xd8a>
 800ac08:	f04f 0340 	mov.w	r3, #64	; 0x40
 800ac0c:	f04f 0400 	mov.w	r4, #0
 800ac10:	e02b      	b.n	800ac6a <UART_SetConfig+0xd8a>
 800ac12:	f04f 0320 	mov.w	r3, #32
 800ac16:	f04f 0400 	mov.w	r4, #0
 800ac1a:	e026      	b.n	800ac6a <UART_SetConfig+0xd8a>
 800ac1c:	f04f 0310 	mov.w	r3, #16
 800ac20:	f04f 0400 	mov.w	r4, #0
 800ac24:	e021      	b.n	800ac6a <UART_SetConfig+0xd8a>
 800ac26:	f04f 030c 	mov.w	r3, #12
 800ac2a:	f04f 0400 	mov.w	r4, #0
 800ac2e:	e01c      	b.n	800ac6a <UART_SetConfig+0xd8a>
 800ac30:	f04f 030a 	mov.w	r3, #10
 800ac34:	f04f 0400 	mov.w	r4, #0
 800ac38:	e017      	b.n	800ac6a <UART_SetConfig+0xd8a>
 800ac3a:	f04f 0308 	mov.w	r3, #8
 800ac3e:	f04f 0400 	mov.w	r4, #0
 800ac42:	e012      	b.n	800ac6a <UART_SetConfig+0xd8a>
 800ac44:	f04f 0306 	mov.w	r3, #6
 800ac48:	f04f 0400 	mov.w	r4, #0
 800ac4c:	e00d      	b.n	800ac6a <UART_SetConfig+0xd8a>
 800ac4e:	f04f 0304 	mov.w	r3, #4
 800ac52:	f04f 0400 	mov.w	r4, #0
 800ac56:	e008      	b.n	800ac6a <UART_SetConfig+0xd8a>
 800ac58:	f04f 0302 	mov.w	r3, #2
 800ac5c:	f04f 0400 	mov.w	r4, #0
 800ac60:	e003      	b.n	800ac6a <UART_SetConfig+0xd8a>
 800ac62:	f04f 0301 	mov.w	r3, #1
 800ac66:	f04f 0400 	mov.w	r4, #0
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	4623      	mov	r3, r4
 800ac6e:	f7f5 fb33 	bl	80002d8 <__aeabi_uldivmod>
 800ac72:	4603      	mov	r3, r0
 800ac74:	460c      	mov	r4, r1
 800ac76:	4619      	mov	r1, r3
 800ac78:	4622      	mov	r2, r4
 800ac7a:	f04f 0300 	mov.w	r3, #0
 800ac7e:	f04f 0400 	mov.w	r4, #0
 800ac82:	0214      	lsls	r4, r2, #8
 800ac84:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ac88:	020b      	lsls	r3, r1, #8
 800ac8a:	687a      	ldr	r2, [r7, #4]
 800ac8c:	6852      	ldr	r2, [r2, #4]
 800ac8e:	0852      	lsrs	r2, r2, #1
 800ac90:	4611      	mov	r1, r2
 800ac92:	f04f 0200 	mov.w	r2, #0
 800ac96:	eb13 0b01 	adds.w	fp, r3, r1
 800ac9a:	eb44 0c02 	adc.w	ip, r4, r2
 800ac9e:	4658      	mov	r0, fp
 800aca0:	4661      	mov	r1, ip
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	685b      	ldr	r3, [r3, #4]
 800aca6:	f04f 0400 	mov.w	r4, #0
 800acaa:	461a      	mov	r2, r3
 800acac:	4623      	mov	r3, r4
 800acae:	f7f5 fb13 	bl	80002d8 <__aeabi_uldivmod>
 800acb2:	4603      	mov	r3, r0
 800acb4:	460c      	mov	r4, r1
 800acb6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800acb8:	e2e8      	b.n	800b28c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acba:	f107 030c 	add.w	r3, r7, #12
 800acbe:	4618      	mov	r0, r3
 800acc0:	f7fc fb9e 	bl	8007400 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	4618      	mov	r0, r3
 800acc8:	f04f 0100 	mov.w	r1, #0
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d067      	beq.n	800ada4 <UART_SetConfig+0xec4>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d05e      	beq.n	800ad9a <UART_SetConfig+0xeba>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ace0:	2b02      	cmp	r3, #2
 800ace2:	d055      	beq.n	800ad90 <UART_SetConfig+0xeb0>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ace8:	2b03      	cmp	r3, #3
 800acea:	d04c      	beq.n	800ad86 <UART_SetConfig+0xea6>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acf0:	2b04      	cmp	r3, #4
 800acf2:	d043      	beq.n	800ad7c <UART_SetConfig+0xe9c>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acf8:	2b05      	cmp	r3, #5
 800acfa:	d03a      	beq.n	800ad72 <UART_SetConfig+0xe92>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad00:	2b06      	cmp	r3, #6
 800ad02:	d031      	beq.n	800ad68 <UART_SetConfig+0xe88>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad08:	2b07      	cmp	r3, #7
 800ad0a:	d028      	beq.n	800ad5e <UART_SetConfig+0xe7e>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad10:	2b08      	cmp	r3, #8
 800ad12:	d01f      	beq.n	800ad54 <UART_SetConfig+0xe74>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad18:	2b09      	cmp	r3, #9
 800ad1a:	d016      	beq.n	800ad4a <UART_SetConfig+0xe6a>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad20:	2b0a      	cmp	r3, #10
 800ad22:	d00d      	beq.n	800ad40 <UART_SetConfig+0xe60>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad28:	2b0b      	cmp	r3, #11
 800ad2a:	d104      	bne.n	800ad36 <UART_SetConfig+0xe56>
 800ad2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad30:	f04f 0400 	mov.w	r4, #0
 800ad34:	e03a      	b.n	800adac <UART_SetConfig+0xecc>
 800ad36:	f04f 0301 	mov.w	r3, #1
 800ad3a:	f04f 0400 	mov.w	r4, #0
 800ad3e:	e035      	b.n	800adac <UART_SetConfig+0xecc>
 800ad40:	f04f 0380 	mov.w	r3, #128	; 0x80
 800ad44:	f04f 0400 	mov.w	r4, #0
 800ad48:	e030      	b.n	800adac <UART_SetConfig+0xecc>
 800ad4a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800ad4e:	f04f 0400 	mov.w	r4, #0
 800ad52:	e02b      	b.n	800adac <UART_SetConfig+0xecc>
 800ad54:	f04f 0320 	mov.w	r3, #32
 800ad58:	f04f 0400 	mov.w	r4, #0
 800ad5c:	e026      	b.n	800adac <UART_SetConfig+0xecc>
 800ad5e:	f04f 0310 	mov.w	r3, #16
 800ad62:	f04f 0400 	mov.w	r4, #0
 800ad66:	e021      	b.n	800adac <UART_SetConfig+0xecc>
 800ad68:	f04f 030c 	mov.w	r3, #12
 800ad6c:	f04f 0400 	mov.w	r4, #0
 800ad70:	e01c      	b.n	800adac <UART_SetConfig+0xecc>
 800ad72:	f04f 030a 	mov.w	r3, #10
 800ad76:	f04f 0400 	mov.w	r4, #0
 800ad7a:	e017      	b.n	800adac <UART_SetConfig+0xecc>
 800ad7c:	f04f 0308 	mov.w	r3, #8
 800ad80:	f04f 0400 	mov.w	r4, #0
 800ad84:	e012      	b.n	800adac <UART_SetConfig+0xecc>
 800ad86:	f04f 0306 	mov.w	r3, #6
 800ad8a:	f04f 0400 	mov.w	r4, #0
 800ad8e:	e00d      	b.n	800adac <UART_SetConfig+0xecc>
 800ad90:	f04f 0304 	mov.w	r3, #4
 800ad94:	f04f 0400 	mov.w	r4, #0
 800ad98:	e008      	b.n	800adac <UART_SetConfig+0xecc>
 800ad9a:	f04f 0302 	mov.w	r3, #2
 800ad9e:	f04f 0400 	mov.w	r4, #0
 800ada2:	e003      	b.n	800adac <UART_SetConfig+0xecc>
 800ada4:	f04f 0301 	mov.w	r3, #1
 800ada8:	f04f 0400 	mov.w	r4, #0
 800adac:	461a      	mov	r2, r3
 800adae:	4623      	mov	r3, r4
 800adb0:	f7f5 fa92 	bl	80002d8 <__aeabi_uldivmod>
 800adb4:	4603      	mov	r3, r0
 800adb6:	460c      	mov	r4, r1
 800adb8:	4619      	mov	r1, r3
 800adba:	4622      	mov	r2, r4
 800adbc:	f04f 0300 	mov.w	r3, #0
 800adc0:	f04f 0400 	mov.w	r4, #0
 800adc4:	0214      	lsls	r4, r2, #8
 800adc6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800adca:	020b      	lsls	r3, r1, #8
 800adcc:	687a      	ldr	r2, [r7, #4]
 800adce:	6852      	ldr	r2, [r2, #4]
 800add0:	0852      	lsrs	r2, r2, #1
 800add2:	4611      	mov	r1, r2
 800add4:	f04f 0200 	mov.w	r2, #0
 800add8:	eb13 0b01 	adds.w	fp, r3, r1
 800addc:	eb44 0c02 	adc.w	ip, r4, r2
 800ade0:	4658      	mov	r0, fp
 800ade2:	4661      	mov	r1, ip
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	685b      	ldr	r3, [r3, #4]
 800ade8:	f04f 0400 	mov.w	r4, #0
 800adec:	461a      	mov	r2, r3
 800adee:	4623      	mov	r3, r4
 800adf0:	f7f5 fa72 	bl	80002d8 <__aeabi_uldivmod>
 800adf4:	4603      	mov	r3, r0
 800adf6:	460c      	mov	r4, r1
 800adf8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800adfa:	e247      	b.n	800b28c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800adfc:	4b96      	ldr	r3, [pc, #600]	; (800b058 <UART_SetConfig+0x1178>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f003 0320 	and.w	r3, r3, #32
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	f000 80a3 	beq.w	800af50 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae0a:	4b93      	ldr	r3, [pc, #588]	; (800b058 <UART_SetConfig+0x1178>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	08db      	lsrs	r3, r3, #3
 800ae10:	f003 0303 	and.w	r3, r3, #3
 800ae14:	4a91      	ldr	r2, [pc, #580]	; (800b05c <UART_SetConfig+0x117c>)
 800ae16:	fa22 f303 	lsr.w	r3, r2, r3
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f04f 0100 	mov.w	r1, #0
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d067      	beq.n	800aef8 <UART_SetConfig+0x1018>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d05e      	beq.n	800aeee <UART_SetConfig+0x100e>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae34:	2b02      	cmp	r3, #2
 800ae36:	d055      	beq.n	800aee4 <UART_SetConfig+0x1004>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae3c:	2b03      	cmp	r3, #3
 800ae3e:	d04c      	beq.n	800aeda <UART_SetConfig+0xffa>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae44:	2b04      	cmp	r3, #4
 800ae46:	d043      	beq.n	800aed0 <UART_SetConfig+0xff0>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae4c:	2b05      	cmp	r3, #5
 800ae4e:	d03a      	beq.n	800aec6 <UART_SetConfig+0xfe6>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae54:	2b06      	cmp	r3, #6
 800ae56:	d031      	beq.n	800aebc <UART_SetConfig+0xfdc>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae5c:	2b07      	cmp	r3, #7
 800ae5e:	d028      	beq.n	800aeb2 <UART_SetConfig+0xfd2>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae64:	2b08      	cmp	r3, #8
 800ae66:	d01f      	beq.n	800aea8 <UART_SetConfig+0xfc8>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae6c:	2b09      	cmp	r3, #9
 800ae6e:	d016      	beq.n	800ae9e <UART_SetConfig+0xfbe>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae74:	2b0a      	cmp	r3, #10
 800ae76:	d00d      	beq.n	800ae94 <UART_SetConfig+0xfb4>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae7c:	2b0b      	cmp	r3, #11
 800ae7e:	d104      	bne.n	800ae8a <UART_SetConfig+0xfaa>
 800ae80:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae84:	f04f 0400 	mov.w	r4, #0
 800ae88:	e03a      	b.n	800af00 <UART_SetConfig+0x1020>
 800ae8a:	f04f 0301 	mov.w	r3, #1
 800ae8e:	f04f 0400 	mov.w	r4, #0
 800ae92:	e035      	b.n	800af00 <UART_SetConfig+0x1020>
 800ae94:	f04f 0380 	mov.w	r3, #128	; 0x80
 800ae98:	f04f 0400 	mov.w	r4, #0
 800ae9c:	e030      	b.n	800af00 <UART_SetConfig+0x1020>
 800ae9e:	f04f 0340 	mov.w	r3, #64	; 0x40
 800aea2:	f04f 0400 	mov.w	r4, #0
 800aea6:	e02b      	b.n	800af00 <UART_SetConfig+0x1020>
 800aea8:	f04f 0320 	mov.w	r3, #32
 800aeac:	f04f 0400 	mov.w	r4, #0
 800aeb0:	e026      	b.n	800af00 <UART_SetConfig+0x1020>
 800aeb2:	f04f 0310 	mov.w	r3, #16
 800aeb6:	f04f 0400 	mov.w	r4, #0
 800aeba:	e021      	b.n	800af00 <UART_SetConfig+0x1020>
 800aebc:	f04f 030c 	mov.w	r3, #12
 800aec0:	f04f 0400 	mov.w	r4, #0
 800aec4:	e01c      	b.n	800af00 <UART_SetConfig+0x1020>
 800aec6:	f04f 030a 	mov.w	r3, #10
 800aeca:	f04f 0400 	mov.w	r4, #0
 800aece:	e017      	b.n	800af00 <UART_SetConfig+0x1020>
 800aed0:	f04f 0308 	mov.w	r3, #8
 800aed4:	f04f 0400 	mov.w	r4, #0
 800aed8:	e012      	b.n	800af00 <UART_SetConfig+0x1020>
 800aeda:	f04f 0306 	mov.w	r3, #6
 800aede:	f04f 0400 	mov.w	r4, #0
 800aee2:	e00d      	b.n	800af00 <UART_SetConfig+0x1020>
 800aee4:	f04f 0304 	mov.w	r3, #4
 800aee8:	f04f 0400 	mov.w	r4, #0
 800aeec:	e008      	b.n	800af00 <UART_SetConfig+0x1020>
 800aeee:	f04f 0302 	mov.w	r3, #2
 800aef2:	f04f 0400 	mov.w	r4, #0
 800aef6:	e003      	b.n	800af00 <UART_SetConfig+0x1020>
 800aef8:	f04f 0301 	mov.w	r3, #1
 800aefc:	f04f 0400 	mov.w	r4, #0
 800af00:	461a      	mov	r2, r3
 800af02:	4623      	mov	r3, r4
 800af04:	f7f5 f9e8 	bl	80002d8 <__aeabi_uldivmod>
 800af08:	4603      	mov	r3, r0
 800af0a:	460c      	mov	r4, r1
 800af0c:	4619      	mov	r1, r3
 800af0e:	4622      	mov	r2, r4
 800af10:	f04f 0300 	mov.w	r3, #0
 800af14:	f04f 0400 	mov.w	r4, #0
 800af18:	0214      	lsls	r4, r2, #8
 800af1a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800af1e:	020b      	lsls	r3, r1, #8
 800af20:	687a      	ldr	r2, [r7, #4]
 800af22:	6852      	ldr	r2, [r2, #4]
 800af24:	0852      	lsrs	r2, r2, #1
 800af26:	4611      	mov	r1, r2
 800af28:	f04f 0200 	mov.w	r2, #0
 800af2c:	eb13 0b01 	adds.w	fp, r3, r1
 800af30:	eb44 0c02 	adc.w	ip, r4, r2
 800af34:	4658      	mov	r0, fp
 800af36:	4661      	mov	r1, ip
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	f04f 0400 	mov.w	r4, #0
 800af40:	461a      	mov	r2, r3
 800af42:	4623      	mov	r3, r4
 800af44:	f7f5 f9c8 	bl	80002d8 <__aeabi_uldivmod>
 800af48:	4603      	mov	r3, r0
 800af4a:	460c      	mov	r4, r1
 800af4c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800af4e:	e19d      	b.n	800b28c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af54:	2b00      	cmp	r3, #0
 800af56:	d05b      	beq.n	800b010 <UART_SetConfig+0x1130>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d053      	beq.n	800b008 <UART_SetConfig+0x1128>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af64:	2b02      	cmp	r3, #2
 800af66:	d04b      	beq.n	800b000 <UART_SetConfig+0x1120>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af6c:	2b03      	cmp	r3, #3
 800af6e:	d043      	beq.n	800aff8 <UART_SetConfig+0x1118>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af74:	2b04      	cmp	r3, #4
 800af76:	d03b      	beq.n	800aff0 <UART_SetConfig+0x1110>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af7c:	2b05      	cmp	r3, #5
 800af7e:	d033      	beq.n	800afe8 <UART_SetConfig+0x1108>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af84:	2b06      	cmp	r3, #6
 800af86:	d02b      	beq.n	800afe0 <UART_SetConfig+0x1100>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af8c:	2b07      	cmp	r3, #7
 800af8e:	d023      	beq.n	800afd8 <UART_SetConfig+0x10f8>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af94:	2b08      	cmp	r3, #8
 800af96:	d01b      	beq.n	800afd0 <UART_SetConfig+0x10f0>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af9c:	2b09      	cmp	r3, #9
 800af9e:	d013      	beq.n	800afc8 <UART_SetConfig+0x10e8>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa4:	2b0a      	cmp	r3, #10
 800afa6:	d00b      	beq.n	800afc0 <UART_SetConfig+0x10e0>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afac:	2b0b      	cmp	r3, #11
 800afae:	d103      	bne.n	800afb8 <UART_SetConfig+0x10d8>
 800afb0:	4b2a      	ldr	r3, [pc, #168]	; (800b05c <UART_SetConfig+0x117c>)
 800afb2:	f04f 0400 	mov.w	r4, #0
 800afb6:	e02e      	b.n	800b016 <UART_SetConfig+0x1136>
 800afb8:	4b29      	ldr	r3, [pc, #164]	; (800b060 <UART_SetConfig+0x1180>)
 800afba:	f04f 0403 	mov.w	r4, #3
 800afbe:	e02a      	b.n	800b016 <UART_SetConfig+0x1136>
 800afc0:	4b28      	ldr	r3, [pc, #160]	; (800b064 <UART_SetConfig+0x1184>)
 800afc2:	f04f 0400 	mov.w	r4, #0
 800afc6:	e026      	b.n	800b016 <UART_SetConfig+0x1136>
 800afc8:	4b27      	ldr	r3, [pc, #156]	; (800b068 <UART_SetConfig+0x1188>)
 800afca:	f04f 0400 	mov.w	r4, #0
 800afce:	e022      	b.n	800b016 <UART_SetConfig+0x1136>
 800afd0:	4b26      	ldr	r3, [pc, #152]	; (800b06c <UART_SetConfig+0x118c>)
 800afd2:	f04f 0400 	mov.w	r4, #0
 800afd6:	e01e      	b.n	800b016 <UART_SetConfig+0x1136>
 800afd8:	4b25      	ldr	r3, [pc, #148]	; (800b070 <UART_SetConfig+0x1190>)
 800afda:	f04f 0400 	mov.w	r4, #0
 800afde:	e01a      	b.n	800b016 <UART_SetConfig+0x1136>
 800afe0:	a419      	add	r4, pc, #100	; (adr r4, 800b048 <UART_SetConfig+0x1168>)
 800afe2:	e9d4 3400 	ldrd	r3, r4, [r4]
 800afe6:	e016      	b.n	800b016 <UART_SetConfig+0x1136>
 800afe8:	4b22      	ldr	r3, [pc, #136]	; (800b074 <UART_SetConfig+0x1194>)
 800afea:	f04f 0400 	mov.w	r4, #0
 800afee:	e012      	b.n	800b016 <UART_SetConfig+0x1136>
 800aff0:	4b21      	ldr	r3, [pc, #132]	; (800b078 <UART_SetConfig+0x1198>)
 800aff2:	f04f 0400 	mov.w	r4, #0
 800aff6:	e00e      	b.n	800b016 <UART_SetConfig+0x1136>
 800aff8:	a415      	add	r4, pc, #84	; (adr r4, 800b050 <UART_SetConfig+0x1170>)
 800affa:	e9d4 3400 	ldrd	r3, r4, [r4]
 800affe:	e00a      	b.n	800b016 <UART_SetConfig+0x1136>
 800b000:	4b1e      	ldr	r3, [pc, #120]	; (800b07c <UART_SetConfig+0x119c>)
 800b002:	f04f 0400 	mov.w	r4, #0
 800b006:	e006      	b.n	800b016 <UART_SetConfig+0x1136>
 800b008:	4b1d      	ldr	r3, [pc, #116]	; (800b080 <UART_SetConfig+0x11a0>)
 800b00a:	f04f 0401 	mov.w	r4, #1
 800b00e:	e002      	b.n	800b016 <UART_SetConfig+0x1136>
 800b010:	4b13      	ldr	r3, [pc, #76]	; (800b060 <UART_SetConfig+0x1180>)
 800b012:	f04f 0403 	mov.w	r4, #3
 800b016:	687a      	ldr	r2, [r7, #4]
 800b018:	6852      	ldr	r2, [r2, #4]
 800b01a:	0852      	lsrs	r2, r2, #1
 800b01c:	4611      	mov	r1, r2
 800b01e:	f04f 0200 	mov.w	r2, #0
 800b022:	eb13 0b01 	adds.w	fp, r3, r1
 800b026:	eb44 0c02 	adc.w	ip, r4, r2
 800b02a:	4658      	mov	r0, fp
 800b02c:	4661      	mov	r1, ip
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	f04f 0400 	mov.w	r4, #0
 800b036:	461a      	mov	r2, r3
 800b038:	4623      	mov	r3, r4
 800b03a:	f7f5 f94d 	bl	80002d8 <__aeabi_uldivmod>
 800b03e:	4603      	mov	r3, r0
 800b040:	460c      	mov	r4, r1
 800b042:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b044:	e122      	b.n	800b28c <UART_SetConfig+0x13ac>
 800b046:	bf00      	nop
 800b048:	51615500 	.word	0x51615500
 800b04c:	00000000 	.word	0x00000000
 800b050:	a2c2aa00 	.word	0xa2c2aa00
 800b054:	00000000 	.word	0x00000000
 800b058:	58024400 	.word	0x58024400
 800b05c:	03d09000 	.word	0x03d09000
 800b060:	d0900000 	.word	0xd0900000
 800b064:	07a12000 	.word	0x07a12000
 800b068:	0f424000 	.word	0x0f424000
 800b06c:	1e848000 	.word	0x1e848000
 800b070:	3d090000 	.word	0x3d090000
 800b074:	61a80000 	.word	0x61a80000
 800b078:	7a120000 	.word	0x7a120000
 800b07c:	f4240000 	.word	0xf4240000
 800b080:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d05b      	beq.n	800b144 <UART_SetConfig+0x1264>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b090:	2b01      	cmp	r3, #1
 800b092:	d053      	beq.n	800b13c <UART_SetConfig+0x125c>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b098:	2b02      	cmp	r3, #2
 800b09a:	d04b      	beq.n	800b134 <UART_SetConfig+0x1254>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a0:	2b03      	cmp	r3, #3
 800b0a2:	d043      	beq.n	800b12c <UART_SetConfig+0x124c>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a8:	2b04      	cmp	r3, #4
 800b0aa:	d03b      	beq.n	800b124 <UART_SetConfig+0x1244>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b0:	2b05      	cmp	r3, #5
 800b0b2:	d033      	beq.n	800b11c <UART_SetConfig+0x123c>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b8:	2b06      	cmp	r3, #6
 800b0ba:	d02b      	beq.n	800b114 <UART_SetConfig+0x1234>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c0:	2b07      	cmp	r3, #7
 800b0c2:	d023      	beq.n	800b10c <UART_SetConfig+0x122c>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c8:	2b08      	cmp	r3, #8
 800b0ca:	d01b      	beq.n	800b104 <UART_SetConfig+0x1224>
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0d0:	2b09      	cmp	r3, #9
 800b0d2:	d013      	beq.n	800b0fc <UART_SetConfig+0x121c>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0d8:	2b0a      	cmp	r3, #10
 800b0da:	d00b      	beq.n	800b0f4 <UART_SetConfig+0x1214>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e0:	2b0b      	cmp	r3, #11
 800b0e2:	d103      	bne.n	800b0ec <UART_SetConfig+0x120c>
 800b0e4:	4bc0      	ldr	r3, [pc, #768]	; (800b3e8 <UART_SetConfig+0x1508>)
 800b0e6:	f04f 0400 	mov.w	r4, #0
 800b0ea:	e02e      	b.n	800b14a <UART_SetConfig+0x126a>
 800b0ec:	4bbf      	ldr	r3, [pc, #764]	; (800b3ec <UART_SetConfig+0x150c>)
 800b0ee:	f04f 0400 	mov.w	r4, #0
 800b0f2:	e02a      	b.n	800b14a <UART_SetConfig+0x126a>
 800b0f4:	4bbe      	ldr	r3, [pc, #760]	; (800b3f0 <UART_SetConfig+0x1510>)
 800b0f6:	f04f 0400 	mov.w	r4, #0
 800b0fa:	e026      	b.n	800b14a <UART_SetConfig+0x126a>
 800b0fc:	4bbd      	ldr	r3, [pc, #756]	; (800b3f4 <UART_SetConfig+0x1514>)
 800b0fe:	f04f 0400 	mov.w	r4, #0
 800b102:	e022      	b.n	800b14a <UART_SetConfig+0x126a>
 800b104:	4bbc      	ldr	r3, [pc, #752]	; (800b3f8 <UART_SetConfig+0x1518>)
 800b106:	f04f 0400 	mov.w	r4, #0
 800b10a:	e01e      	b.n	800b14a <UART_SetConfig+0x126a>
 800b10c:	4bbb      	ldr	r3, [pc, #748]	; (800b3fc <UART_SetConfig+0x151c>)
 800b10e:	f04f 0400 	mov.w	r4, #0
 800b112:	e01a      	b.n	800b14a <UART_SetConfig+0x126a>
 800b114:	a4b0      	add	r4, pc, #704	; (adr r4, 800b3d8 <UART_SetConfig+0x14f8>)
 800b116:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b11a:	e016      	b.n	800b14a <UART_SetConfig+0x126a>
 800b11c:	4bb8      	ldr	r3, [pc, #736]	; (800b400 <UART_SetConfig+0x1520>)
 800b11e:	f04f 0400 	mov.w	r4, #0
 800b122:	e012      	b.n	800b14a <UART_SetConfig+0x126a>
 800b124:	4bb7      	ldr	r3, [pc, #732]	; (800b404 <UART_SetConfig+0x1524>)
 800b126:	f04f 0400 	mov.w	r4, #0
 800b12a:	e00e      	b.n	800b14a <UART_SetConfig+0x126a>
 800b12c:	a4ac      	add	r4, pc, #688	; (adr r4, 800b3e0 <UART_SetConfig+0x1500>)
 800b12e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b132:	e00a      	b.n	800b14a <UART_SetConfig+0x126a>
 800b134:	4bb4      	ldr	r3, [pc, #720]	; (800b408 <UART_SetConfig+0x1528>)
 800b136:	f04f 0400 	mov.w	r4, #0
 800b13a:	e006      	b.n	800b14a <UART_SetConfig+0x126a>
 800b13c:	4bb3      	ldr	r3, [pc, #716]	; (800b40c <UART_SetConfig+0x152c>)
 800b13e:	f04f 0400 	mov.w	r4, #0
 800b142:	e002      	b.n	800b14a <UART_SetConfig+0x126a>
 800b144:	4ba9      	ldr	r3, [pc, #676]	; (800b3ec <UART_SetConfig+0x150c>)
 800b146:	f04f 0400 	mov.w	r4, #0
 800b14a:	687a      	ldr	r2, [r7, #4]
 800b14c:	6852      	ldr	r2, [r2, #4]
 800b14e:	0852      	lsrs	r2, r2, #1
 800b150:	4611      	mov	r1, r2
 800b152:	f04f 0200 	mov.w	r2, #0
 800b156:	eb13 0b01 	adds.w	fp, r3, r1
 800b15a:	eb44 0c02 	adc.w	ip, r4, r2
 800b15e:	4658      	mov	r0, fp
 800b160:	4661      	mov	r1, ip
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	685b      	ldr	r3, [r3, #4]
 800b166:	f04f 0400 	mov.w	r4, #0
 800b16a:	461a      	mov	r2, r3
 800b16c:	4623      	mov	r3, r4
 800b16e:	f7f5 f8b3 	bl	80002d8 <__aeabi_uldivmod>
 800b172:	4603      	mov	r3, r0
 800b174:	460c      	mov	r4, r1
 800b176:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b178:	e088      	b.n	800b28c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d064      	beq.n	800b24c <UART_SetConfig+0x136c>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b186:	2b01      	cmp	r3, #1
 800b188:	d05b      	beq.n	800b242 <UART_SetConfig+0x1362>
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b18e:	2b02      	cmp	r3, #2
 800b190:	d052      	beq.n	800b238 <UART_SetConfig+0x1358>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b196:	2b03      	cmp	r3, #3
 800b198:	d04a      	beq.n	800b230 <UART_SetConfig+0x1350>
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b19e:	2b04      	cmp	r3, #4
 800b1a0:	d041      	beq.n	800b226 <UART_SetConfig+0x1346>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a6:	2b05      	cmp	r3, #5
 800b1a8:	d039      	beq.n	800b21e <UART_SetConfig+0x133e>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ae:	2b06      	cmp	r3, #6
 800b1b0:	d031      	beq.n	800b216 <UART_SetConfig+0x1336>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b6:	2b07      	cmp	r3, #7
 800b1b8:	d028      	beq.n	800b20c <UART_SetConfig+0x132c>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1be:	2b08      	cmp	r3, #8
 800b1c0:	d01f      	beq.n	800b202 <UART_SetConfig+0x1322>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c6:	2b09      	cmp	r3, #9
 800b1c8:	d016      	beq.n	800b1f8 <UART_SetConfig+0x1318>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ce:	2b0a      	cmp	r3, #10
 800b1d0:	d00d      	beq.n	800b1ee <UART_SetConfig+0x130e>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d6:	2b0b      	cmp	r3, #11
 800b1d8:	d104      	bne.n	800b1e4 <UART_SetConfig+0x1304>
 800b1da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b1de:	f04f 0400 	mov.w	r4, #0
 800b1e2:	e037      	b.n	800b254 <UART_SetConfig+0x1374>
 800b1e4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b1e8:	f04f 0400 	mov.w	r4, #0
 800b1ec:	e032      	b.n	800b254 <UART_SetConfig+0x1374>
 800b1ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b1f2:	f04f 0400 	mov.w	r4, #0
 800b1f6:	e02d      	b.n	800b254 <UART_SetConfig+0x1374>
 800b1f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b1fc:	f04f 0400 	mov.w	r4, #0
 800b200:	e028      	b.n	800b254 <UART_SetConfig+0x1374>
 800b202:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b206:	f04f 0400 	mov.w	r4, #0
 800b20a:	e023      	b.n	800b254 <UART_SetConfig+0x1374>
 800b20c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b210:	f04f 0400 	mov.w	r4, #0
 800b214:	e01e      	b.n	800b254 <UART_SetConfig+0x1374>
 800b216:	4b7e      	ldr	r3, [pc, #504]	; (800b410 <UART_SetConfig+0x1530>)
 800b218:	f04f 0400 	mov.w	r4, #0
 800b21c:	e01a      	b.n	800b254 <UART_SetConfig+0x1374>
 800b21e:	4b7d      	ldr	r3, [pc, #500]	; (800b414 <UART_SetConfig+0x1534>)
 800b220:	f04f 0400 	mov.w	r4, #0
 800b224:	e016      	b.n	800b254 <UART_SetConfig+0x1374>
 800b226:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b22a:	f04f 0400 	mov.w	r4, #0
 800b22e:	e011      	b.n	800b254 <UART_SetConfig+0x1374>
 800b230:	4b79      	ldr	r3, [pc, #484]	; (800b418 <UART_SetConfig+0x1538>)
 800b232:	f04f 0400 	mov.w	r4, #0
 800b236:	e00d      	b.n	800b254 <UART_SetConfig+0x1374>
 800b238:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b23c:	f04f 0400 	mov.w	r4, #0
 800b240:	e008      	b.n	800b254 <UART_SetConfig+0x1374>
 800b242:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b246:	f04f 0400 	mov.w	r4, #0
 800b24a:	e003      	b.n	800b254 <UART_SetConfig+0x1374>
 800b24c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b250:	f04f 0400 	mov.w	r4, #0
 800b254:	687a      	ldr	r2, [r7, #4]
 800b256:	6852      	ldr	r2, [r2, #4]
 800b258:	0852      	lsrs	r2, r2, #1
 800b25a:	4611      	mov	r1, r2
 800b25c:	f04f 0200 	mov.w	r2, #0
 800b260:	eb13 0b01 	adds.w	fp, r3, r1
 800b264:	eb44 0c02 	adc.w	ip, r4, r2
 800b268:	4658      	mov	r0, fp
 800b26a:	4661      	mov	r1, ip
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	685b      	ldr	r3, [r3, #4]
 800b270:	f04f 0400 	mov.w	r4, #0
 800b274:	461a      	mov	r2, r3
 800b276:	4623      	mov	r3, r4
 800b278:	f7f5 f82e 	bl	80002d8 <__aeabi_uldivmod>
 800b27c:	4603      	mov	r3, r0
 800b27e:	460c      	mov	r4, r1
 800b280:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b282:	e003      	b.n	800b28c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800b284:	2301      	movs	r3, #1
 800b286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800b28a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b28c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b28e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b292:	d309      	bcc.n	800b2a8 <UART_SetConfig+0x13c8>
 800b294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b296:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b29a:	d205      	bcs.n	800b2a8 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2a2:	60da      	str	r2, [r3, #12]
 800b2a4:	f000 bf85 	b.w	800c1b2 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2ae:	f000 bf80 	b.w	800c1b2 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	69db      	ldr	r3, [r3, #28]
 800b2b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b2ba:	f040 83da 	bne.w	800ba72 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800b2be:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b2c2:	2b40      	cmp	r3, #64	; 0x40
 800b2c4:	f200 83b3 	bhi.w	800ba2e <UART_SetConfig+0x1b4e>
 800b2c8:	a201      	add	r2, pc, #4	; (adr r2, 800b2d0 <UART_SetConfig+0x13f0>)
 800b2ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ce:	bf00      	nop
 800b2d0:	0800b41d 	.word	0x0800b41d
 800b2d4:	0800b4d5 	.word	0x0800b4d5
 800b2d8:	0800ba2f 	.word	0x0800ba2f
 800b2dc:	0800ba2f 	.word	0x0800ba2f
 800b2e0:	0800b58d 	.word	0x0800b58d
 800b2e4:	0800ba2f 	.word	0x0800ba2f
 800b2e8:	0800ba2f 	.word	0x0800ba2f
 800b2ec:	0800ba2f 	.word	0x0800ba2f
 800b2f0:	0800b649 	.word	0x0800b649
 800b2f4:	0800ba2f 	.word	0x0800ba2f
 800b2f8:	0800ba2f 	.word	0x0800ba2f
 800b2fc:	0800ba2f 	.word	0x0800ba2f
 800b300:	0800ba2f 	.word	0x0800ba2f
 800b304:	0800ba2f 	.word	0x0800ba2f
 800b308:	0800ba2f 	.word	0x0800ba2f
 800b30c:	0800ba2f 	.word	0x0800ba2f
 800b310:	0800b705 	.word	0x0800b705
 800b314:	0800ba2f 	.word	0x0800ba2f
 800b318:	0800ba2f 	.word	0x0800ba2f
 800b31c:	0800ba2f 	.word	0x0800ba2f
 800b320:	0800ba2f 	.word	0x0800ba2f
 800b324:	0800ba2f 	.word	0x0800ba2f
 800b328:	0800ba2f 	.word	0x0800ba2f
 800b32c:	0800ba2f 	.word	0x0800ba2f
 800b330:	0800ba2f 	.word	0x0800ba2f
 800b334:	0800ba2f 	.word	0x0800ba2f
 800b338:	0800ba2f 	.word	0x0800ba2f
 800b33c:	0800ba2f 	.word	0x0800ba2f
 800b340:	0800ba2f 	.word	0x0800ba2f
 800b344:	0800ba2f 	.word	0x0800ba2f
 800b348:	0800ba2f 	.word	0x0800ba2f
 800b34c:	0800ba2f 	.word	0x0800ba2f
 800b350:	0800b877 	.word	0x0800b877
 800b354:	0800ba2f 	.word	0x0800ba2f
 800b358:	0800ba2f 	.word	0x0800ba2f
 800b35c:	0800ba2f 	.word	0x0800ba2f
 800b360:	0800ba2f 	.word	0x0800ba2f
 800b364:	0800ba2f 	.word	0x0800ba2f
 800b368:	0800ba2f 	.word	0x0800ba2f
 800b36c:	0800ba2f 	.word	0x0800ba2f
 800b370:	0800ba2f 	.word	0x0800ba2f
 800b374:	0800ba2f 	.word	0x0800ba2f
 800b378:	0800ba2f 	.word	0x0800ba2f
 800b37c:	0800ba2f 	.word	0x0800ba2f
 800b380:	0800ba2f 	.word	0x0800ba2f
 800b384:	0800ba2f 	.word	0x0800ba2f
 800b388:	0800ba2f 	.word	0x0800ba2f
 800b38c:	0800ba2f 	.word	0x0800ba2f
 800b390:	0800ba2f 	.word	0x0800ba2f
 800b394:	0800ba2f 	.word	0x0800ba2f
 800b398:	0800ba2f 	.word	0x0800ba2f
 800b39c:	0800ba2f 	.word	0x0800ba2f
 800b3a0:	0800ba2f 	.word	0x0800ba2f
 800b3a4:	0800ba2f 	.word	0x0800ba2f
 800b3a8:	0800ba2f 	.word	0x0800ba2f
 800b3ac:	0800ba2f 	.word	0x0800ba2f
 800b3b0:	0800ba2f 	.word	0x0800ba2f
 800b3b4:	0800ba2f 	.word	0x0800ba2f
 800b3b8:	0800ba2f 	.word	0x0800ba2f
 800b3bc:	0800ba2f 	.word	0x0800ba2f
 800b3c0:	0800ba2f 	.word	0x0800ba2f
 800b3c4:	0800ba2f 	.word	0x0800ba2f
 800b3c8:	0800ba2f 	.word	0x0800ba2f
 800b3cc:	0800ba2f 	.word	0x0800ba2f
 800b3d0:	0800b96d 	.word	0x0800b96d
 800b3d4:	f3af 8000 	nop.w
 800b3d8:	05161500 	.word	0x05161500
 800b3dc:	00000000 	.word	0x00000000
 800b3e0:	0a2c2a00 	.word	0x0a2c2a00
 800b3e4:	00000000 	.word	0x00000000
 800b3e8:	003d0900 	.word	0x003d0900
 800b3ec:	3d090000 	.word	0x3d090000
 800b3f0:	007a1200 	.word	0x007a1200
 800b3f4:	00f42400 	.word	0x00f42400
 800b3f8:	01e84800 	.word	0x01e84800
 800b3fc:	03d09000 	.word	0x03d09000
 800b400:	061a8000 	.word	0x061a8000
 800b404:	07a12000 	.word	0x07a12000
 800b408:	0f424000 	.word	0x0f424000
 800b40c:	1e848000 	.word	0x1e848000
 800b410:	000aaa00 	.word	0x000aaa00
 800b414:	000ccc00 	.word	0x000ccc00
 800b418:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b41c:	f7fa fd0c 	bl	8005e38 <HAL_RCC_GetPCLK1Freq>
 800b420:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b426:	2b00      	cmp	r3, #0
 800b428:	d044      	beq.n	800b4b4 <UART_SetConfig+0x15d4>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b42e:	2b01      	cmp	r3, #1
 800b430:	d03e      	beq.n	800b4b0 <UART_SetConfig+0x15d0>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b436:	2b02      	cmp	r3, #2
 800b438:	d038      	beq.n	800b4ac <UART_SetConfig+0x15cc>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b43e:	2b03      	cmp	r3, #3
 800b440:	d032      	beq.n	800b4a8 <UART_SetConfig+0x15c8>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b446:	2b04      	cmp	r3, #4
 800b448:	d02c      	beq.n	800b4a4 <UART_SetConfig+0x15c4>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b44e:	2b05      	cmp	r3, #5
 800b450:	d026      	beq.n	800b4a0 <UART_SetConfig+0x15c0>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b456:	2b06      	cmp	r3, #6
 800b458:	d020      	beq.n	800b49c <UART_SetConfig+0x15bc>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b45e:	2b07      	cmp	r3, #7
 800b460:	d01a      	beq.n	800b498 <UART_SetConfig+0x15b8>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b466:	2b08      	cmp	r3, #8
 800b468:	d014      	beq.n	800b494 <UART_SetConfig+0x15b4>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b46e:	2b09      	cmp	r3, #9
 800b470:	d00e      	beq.n	800b490 <UART_SetConfig+0x15b0>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b476:	2b0a      	cmp	r3, #10
 800b478:	d008      	beq.n	800b48c <UART_SetConfig+0x15ac>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b47e:	2b0b      	cmp	r3, #11
 800b480:	d102      	bne.n	800b488 <UART_SetConfig+0x15a8>
 800b482:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b486:	e016      	b.n	800b4b6 <UART_SetConfig+0x15d6>
 800b488:	2301      	movs	r3, #1
 800b48a:	e014      	b.n	800b4b6 <UART_SetConfig+0x15d6>
 800b48c:	2380      	movs	r3, #128	; 0x80
 800b48e:	e012      	b.n	800b4b6 <UART_SetConfig+0x15d6>
 800b490:	2340      	movs	r3, #64	; 0x40
 800b492:	e010      	b.n	800b4b6 <UART_SetConfig+0x15d6>
 800b494:	2320      	movs	r3, #32
 800b496:	e00e      	b.n	800b4b6 <UART_SetConfig+0x15d6>
 800b498:	2310      	movs	r3, #16
 800b49a:	e00c      	b.n	800b4b6 <UART_SetConfig+0x15d6>
 800b49c:	230c      	movs	r3, #12
 800b49e:	e00a      	b.n	800b4b6 <UART_SetConfig+0x15d6>
 800b4a0:	230a      	movs	r3, #10
 800b4a2:	e008      	b.n	800b4b6 <UART_SetConfig+0x15d6>
 800b4a4:	2308      	movs	r3, #8
 800b4a6:	e006      	b.n	800b4b6 <UART_SetConfig+0x15d6>
 800b4a8:	2306      	movs	r3, #6
 800b4aa:	e004      	b.n	800b4b6 <UART_SetConfig+0x15d6>
 800b4ac:	2304      	movs	r3, #4
 800b4ae:	e002      	b.n	800b4b6 <UART_SetConfig+0x15d6>
 800b4b0:	2302      	movs	r3, #2
 800b4b2:	e000      	b.n	800b4b6 <UART_SetConfig+0x15d6>
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4bc:	005a      	lsls	r2, r3, #1
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	685b      	ldr	r3, [r3, #4]
 800b4c2:	085b      	lsrs	r3, r3, #1
 800b4c4:	441a      	add	r2, r3
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4ce:	b29b      	uxth	r3, r3
 800b4d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b4d2:	e2b0      	b.n	800ba36 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b4d4:	f7fa fcc6 	bl	8005e64 <HAL_RCC_GetPCLK2Freq>
 800b4d8:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d044      	beq.n	800b56c <UART_SetConfig+0x168c>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4e6:	2b01      	cmp	r3, #1
 800b4e8:	d03e      	beq.n	800b568 <UART_SetConfig+0x1688>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ee:	2b02      	cmp	r3, #2
 800b4f0:	d038      	beq.n	800b564 <UART_SetConfig+0x1684>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4f6:	2b03      	cmp	r3, #3
 800b4f8:	d032      	beq.n	800b560 <UART_SetConfig+0x1680>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4fe:	2b04      	cmp	r3, #4
 800b500:	d02c      	beq.n	800b55c <UART_SetConfig+0x167c>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b506:	2b05      	cmp	r3, #5
 800b508:	d026      	beq.n	800b558 <UART_SetConfig+0x1678>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b50e:	2b06      	cmp	r3, #6
 800b510:	d020      	beq.n	800b554 <UART_SetConfig+0x1674>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b516:	2b07      	cmp	r3, #7
 800b518:	d01a      	beq.n	800b550 <UART_SetConfig+0x1670>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b51e:	2b08      	cmp	r3, #8
 800b520:	d014      	beq.n	800b54c <UART_SetConfig+0x166c>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b526:	2b09      	cmp	r3, #9
 800b528:	d00e      	beq.n	800b548 <UART_SetConfig+0x1668>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52e:	2b0a      	cmp	r3, #10
 800b530:	d008      	beq.n	800b544 <UART_SetConfig+0x1664>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b536:	2b0b      	cmp	r3, #11
 800b538:	d102      	bne.n	800b540 <UART_SetConfig+0x1660>
 800b53a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b53e:	e016      	b.n	800b56e <UART_SetConfig+0x168e>
 800b540:	2301      	movs	r3, #1
 800b542:	e014      	b.n	800b56e <UART_SetConfig+0x168e>
 800b544:	2380      	movs	r3, #128	; 0x80
 800b546:	e012      	b.n	800b56e <UART_SetConfig+0x168e>
 800b548:	2340      	movs	r3, #64	; 0x40
 800b54a:	e010      	b.n	800b56e <UART_SetConfig+0x168e>
 800b54c:	2320      	movs	r3, #32
 800b54e:	e00e      	b.n	800b56e <UART_SetConfig+0x168e>
 800b550:	2310      	movs	r3, #16
 800b552:	e00c      	b.n	800b56e <UART_SetConfig+0x168e>
 800b554:	230c      	movs	r3, #12
 800b556:	e00a      	b.n	800b56e <UART_SetConfig+0x168e>
 800b558:	230a      	movs	r3, #10
 800b55a:	e008      	b.n	800b56e <UART_SetConfig+0x168e>
 800b55c:	2308      	movs	r3, #8
 800b55e:	e006      	b.n	800b56e <UART_SetConfig+0x168e>
 800b560:	2306      	movs	r3, #6
 800b562:	e004      	b.n	800b56e <UART_SetConfig+0x168e>
 800b564:	2304      	movs	r3, #4
 800b566:	e002      	b.n	800b56e <UART_SetConfig+0x168e>
 800b568:	2302      	movs	r3, #2
 800b56a:	e000      	b.n	800b56e <UART_SetConfig+0x168e>
 800b56c:	2301      	movs	r3, #1
 800b56e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b570:	fbb2 f3f3 	udiv	r3, r2, r3
 800b574:	005a      	lsls	r2, r3, #1
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	085b      	lsrs	r3, r3, #1
 800b57c:	441a      	add	r2, r3
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	685b      	ldr	r3, [r3, #4]
 800b582:	fbb2 f3f3 	udiv	r3, r2, r3
 800b586:	b29b      	uxth	r3, r3
 800b588:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b58a:	e254      	b.n	800ba36 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b58c:	f107 0318 	add.w	r3, r7, #24
 800b590:	4618      	mov	r0, r3
 800b592:	f7fb fde9 	bl	8007168 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b596:	69fa      	ldr	r2, [r7, #28]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d044      	beq.n	800b62a <UART_SetConfig+0x174a>
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a4:	2b01      	cmp	r3, #1
 800b5a6:	d03e      	beq.n	800b626 <UART_SetConfig+0x1746>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ac:	2b02      	cmp	r3, #2
 800b5ae:	d038      	beq.n	800b622 <UART_SetConfig+0x1742>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b4:	2b03      	cmp	r3, #3
 800b5b6:	d032      	beq.n	800b61e <UART_SetConfig+0x173e>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5bc:	2b04      	cmp	r3, #4
 800b5be:	d02c      	beq.n	800b61a <UART_SetConfig+0x173a>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c4:	2b05      	cmp	r3, #5
 800b5c6:	d026      	beq.n	800b616 <UART_SetConfig+0x1736>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5cc:	2b06      	cmp	r3, #6
 800b5ce:	d020      	beq.n	800b612 <UART_SetConfig+0x1732>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d4:	2b07      	cmp	r3, #7
 800b5d6:	d01a      	beq.n	800b60e <UART_SetConfig+0x172e>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5dc:	2b08      	cmp	r3, #8
 800b5de:	d014      	beq.n	800b60a <UART_SetConfig+0x172a>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e4:	2b09      	cmp	r3, #9
 800b5e6:	d00e      	beq.n	800b606 <UART_SetConfig+0x1726>
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ec:	2b0a      	cmp	r3, #10
 800b5ee:	d008      	beq.n	800b602 <UART_SetConfig+0x1722>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5f4:	2b0b      	cmp	r3, #11
 800b5f6:	d102      	bne.n	800b5fe <UART_SetConfig+0x171e>
 800b5f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5fc:	e016      	b.n	800b62c <UART_SetConfig+0x174c>
 800b5fe:	2301      	movs	r3, #1
 800b600:	e014      	b.n	800b62c <UART_SetConfig+0x174c>
 800b602:	2380      	movs	r3, #128	; 0x80
 800b604:	e012      	b.n	800b62c <UART_SetConfig+0x174c>
 800b606:	2340      	movs	r3, #64	; 0x40
 800b608:	e010      	b.n	800b62c <UART_SetConfig+0x174c>
 800b60a:	2320      	movs	r3, #32
 800b60c:	e00e      	b.n	800b62c <UART_SetConfig+0x174c>
 800b60e:	2310      	movs	r3, #16
 800b610:	e00c      	b.n	800b62c <UART_SetConfig+0x174c>
 800b612:	230c      	movs	r3, #12
 800b614:	e00a      	b.n	800b62c <UART_SetConfig+0x174c>
 800b616:	230a      	movs	r3, #10
 800b618:	e008      	b.n	800b62c <UART_SetConfig+0x174c>
 800b61a:	2308      	movs	r3, #8
 800b61c:	e006      	b.n	800b62c <UART_SetConfig+0x174c>
 800b61e:	2306      	movs	r3, #6
 800b620:	e004      	b.n	800b62c <UART_SetConfig+0x174c>
 800b622:	2304      	movs	r3, #4
 800b624:	e002      	b.n	800b62c <UART_SetConfig+0x174c>
 800b626:	2302      	movs	r3, #2
 800b628:	e000      	b.n	800b62c <UART_SetConfig+0x174c>
 800b62a:	2301      	movs	r3, #1
 800b62c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b630:	005a      	lsls	r2, r3, #1
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	685b      	ldr	r3, [r3, #4]
 800b636:	085b      	lsrs	r3, r3, #1
 800b638:	441a      	add	r2, r3
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	685b      	ldr	r3, [r3, #4]
 800b63e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b642:	b29b      	uxth	r3, r3
 800b644:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b646:	e1f6      	b.n	800ba36 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b648:	f107 030c 	add.w	r3, r7, #12
 800b64c:	4618      	mov	r0, r3
 800b64e:	f7fb fed7 	bl	8007400 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b652:	693a      	ldr	r2, [r7, #16]
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d044      	beq.n	800b6e6 <UART_SetConfig+0x1806>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b660:	2b01      	cmp	r3, #1
 800b662:	d03e      	beq.n	800b6e2 <UART_SetConfig+0x1802>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b668:	2b02      	cmp	r3, #2
 800b66a:	d038      	beq.n	800b6de <UART_SetConfig+0x17fe>
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b670:	2b03      	cmp	r3, #3
 800b672:	d032      	beq.n	800b6da <UART_SetConfig+0x17fa>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b678:	2b04      	cmp	r3, #4
 800b67a:	d02c      	beq.n	800b6d6 <UART_SetConfig+0x17f6>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b680:	2b05      	cmp	r3, #5
 800b682:	d026      	beq.n	800b6d2 <UART_SetConfig+0x17f2>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b688:	2b06      	cmp	r3, #6
 800b68a:	d020      	beq.n	800b6ce <UART_SetConfig+0x17ee>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b690:	2b07      	cmp	r3, #7
 800b692:	d01a      	beq.n	800b6ca <UART_SetConfig+0x17ea>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b698:	2b08      	cmp	r3, #8
 800b69a:	d014      	beq.n	800b6c6 <UART_SetConfig+0x17e6>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a0:	2b09      	cmp	r3, #9
 800b6a2:	d00e      	beq.n	800b6c2 <UART_SetConfig+0x17e2>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a8:	2b0a      	cmp	r3, #10
 800b6aa:	d008      	beq.n	800b6be <UART_SetConfig+0x17de>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b0:	2b0b      	cmp	r3, #11
 800b6b2:	d102      	bne.n	800b6ba <UART_SetConfig+0x17da>
 800b6b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6b8:	e016      	b.n	800b6e8 <UART_SetConfig+0x1808>
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	e014      	b.n	800b6e8 <UART_SetConfig+0x1808>
 800b6be:	2380      	movs	r3, #128	; 0x80
 800b6c0:	e012      	b.n	800b6e8 <UART_SetConfig+0x1808>
 800b6c2:	2340      	movs	r3, #64	; 0x40
 800b6c4:	e010      	b.n	800b6e8 <UART_SetConfig+0x1808>
 800b6c6:	2320      	movs	r3, #32
 800b6c8:	e00e      	b.n	800b6e8 <UART_SetConfig+0x1808>
 800b6ca:	2310      	movs	r3, #16
 800b6cc:	e00c      	b.n	800b6e8 <UART_SetConfig+0x1808>
 800b6ce:	230c      	movs	r3, #12
 800b6d0:	e00a      	b.n	800b6e8 <UART_SetConfig+0x1808>
 800b6d2:	230a      	movs	r3, #10
 800b6d4:	e008      	b.n	800b6e8 <UART_SetConfig+0x1808>
 800b6d6:	2308      	movs	r3, #8
 800b6d8:	e006      	b.n	800b6e8 <UART_SetConfig+0x1808>
 800b6da:	2306      	movs	r3, #6
 800b6dc:	e004      	b.n	800b6e8 <UART_SetConfig+0x1808>
 800b6de:	2304      	movs	r3, #4
 800b6e0:	e002      	b.n	800b6e8 <UART_SetConfig+0x1808>
 800b6e2:	2302      	movs	r3, #2
 800b6e4:	e000      	b.n	800b6e8 <UART_SetConfig+0x1808>
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6ec:	005a      	lsls	r2, r3, #1
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	085b      	lsrs	r3, r3, #1
 800b6f4:	441a      	add	r2, r3
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	685b      	ldr	r3, [r3, #4]
 800b6fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6fe:	b29b      	uxth	r3, r3
 800b700:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b702:	e198      	b.n	800ba36 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b704:	4b87      	ldr	r3, [pc, #540]	; (800b924 <UART_SetConfig+0x1a44>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	f003 0320 	and.w	r3, r3, #32
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d05e      	beq.n	800b7ce <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b710:	4b84      	ldr	r3, [pc, #528]	; (800b924 <UART_SetConfig+0x1a44>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	08db      	lsrs	r3, r3, #3
 800b716:	f003 0303 	and.w	r3, r3, #3
 800b71a:	4a83      	ldr	r2, [pc, #524]	; (800b928 <UART_SetConfig+0x1a48>)
 800b71c:	40da      	lsrs	r2, r3
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b722:	2b00      	cmp	r3, #0
 800b724:	d044      	beq.n	800b7b0 <UART_SetConfig+0x18d0>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b72a:	2b01      	cmp	r3, #1
 800b72c:	d03e      	beq.n	800b7ac <UART_SetConfig+0x18cc>
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b732:	2b02      	cmp	r3, #2
 800b734:	d038      	beq.n	800b7a8 <UART_SetConfig+0x18c8>
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b73a:	2b03      	cmp	r3, #3
 800b73c:	d032      	beq.n	800b7a4 <UART_SetConfig+0x18c4>
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b742:	2b04      	cmp	r3, #4
 800b744:	d02c      	beq.n	800b7a0 <UART_SetConfig+0x18c0>
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b74a:	2b05      	cmp	r3, #5
 800b74c:	d026      	beq.n	800b79c <UART_SetConfig+0x18bc>
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b752:	2b06      	cmp	r3, #6
 800b754:	d020      	beq.n	800b798 <UART_SetConfig+0x18b8>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b75a:	2b07      	cmp	r3, #7
 800b75c:	d01a      	beq.n	800b794 <UART_SetConfig+0x18b4>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b762:	2b08      	cmp	r3, #8
 800b764:	d014      	beq.n	800b790 <UART_SetConfig+0x18b0>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b76a:	2b09      	cmp	r3, #9
 800b76c:	d00e      	beq.n	800b78c <UART_SetConfig+0x18ac>
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b772:	2b0a      	cmp	r3, #10
 800b774:	d008      	beq.n	800b788 <UART_SetConfig+0x18a8>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b77a:	2b0b      	cmp	r3, #11
 800b77c:	d102      	bne.n	800b784 <UART_SetConfig+0x18a4>
 800b77e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b782:	e016      	b.n	800b7b2 <UART_SetConfig+0x18d2>
 800b784:	2301      	movs	r3, #1
 800b786:	e014      	b.n	800b7b2 <UART_SetConfig+0x18d2>
 800b788:	2380      	movs	r3, #128	; 0x80
 800b78a:	e012      	b.n	800b7b2 <UART_SetConfig+0x18d2>
 800b78c:	2340      	movs	r3, #64	; 0x40
 800b78e:	e010      	b.n	800b7b2 <UART_SetConfig+0x18d2>
 800b790:	2320      	movs	r3, #32
 800b792:	e00e      	b.n	800b7b2 <UART_SetConfig+0x18d2>
 800b794:	2310      	movs	r3, #16
 800b796:	e00c      	b.n	800b7b2 <UART_SetConfig+0x18d2>
 800b798:	230c      	movs	r3, #12
 800b79a:	e00a      	b.n	800b7b2 <UART_SetConfig+0x18d2>
 800b79c:	230a      	movs	r3, #10
 800b79e:	e008      	b.n	800b7b2 <UART_SetConfig+0x18d2>
 800b7a0:	2308      	movs	r3, #8
 800b7a2:	e006      	b.n	800b7b2 <UART_SetConfig+0x18d2>
 800b7a4:	2306      	movs	r3, #6
 800b7a6:	e004      	b.n	800b7b2 <UART_SetConfig+0x18d2>
 800b7a8:	2304      	movs	r3, #4
 800b7aa:	e002      	b.n	800b7b2 <UART_SetConfig+0x18d2>
 800b7ac:	2302      	movs	r3, #2
 800b7ae:	e000      	b.n	800b7b2 <UART_SetConfig+0x18d2>
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7b6:	005a      	lsls	r2, r3, #1
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	685b      	ldr	r3, [r3, #4]
 800b7bc:	085b      	lsrs	r3, r3, #1
 800b7be:	441a      	add	r2, r3
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7c8:	b29b      	uxth	r3, r3
 800b7ca:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800b7cc:	e133      	b.n	800ba36 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d043      	beq.n	800b85e <UART_SetConfig+0x197e>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7da:	2b01      	cmp	r3, #1
 800b7dc:	d03d      	beq.n	800b85a <UART_SetConfig+0x197a>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e2:	2b02      	cmp	r3, #2
 800b7e4:	d037      	beq.n	800b856 <UART_SetConfig+0x1976>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ea:	2b03      	cmp	r3, #3
 800b7ec:	d031      	beq.n	800b852 <UART_SetConfig+0x1972>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f2:	2b04      	cmp	r3, #4
 800b7f4:	d02b      	beq.n	800b84e <UART_SetConfig+0x196e>
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7fa:	2b05      	cmp	r3, #5
 800b7fc:	d025      	beq.n	800b84a <UART_SetConfig+0x196a>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b802:	2b06      	cmp	r3, #6
 800b804:	d01f      	beq.n	800b846 <UART_SetConfig+0x1966>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b80a:	2b07      	cmp	r3, #7
 800b80c:	d019      	beq.n	800b842 <UART_SetConfig+0x1962>
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b812:	2b08      	cmp	r3, #8
 800b814:	d013      	beq.n	800b83e <UART_SetConfig+0x195e>
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b81a:	2b09      	cmp	r3, #9
 800b81c:	d00d      	beq.n	800b83a <UART_SetConfig+0x195a>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b822:	2b0a      	cmp	r3, #10
 800b824:	d007      	beq.n	800b836 <UART_SetConfig+0x1956>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b82a:	2b0b      	cmp	r3, #11
 800b82c:	d101      	bne.n	800b832 <UART_SetConfig+0x1952>
 800b82e:	4b3f      	ldr	r3, [pc, #252]	; (800b92c <UART_SetConfig+0x1a4c>)
 800b830:	e016      	b.n	800b860 <UART_SetConfig+0x1980>
 800b832:	4b3f      	ldr	r3, [pc, #252]	; (800b930 <UART_SetConfig+0x1a50>)
 800b834:	e014      	b.n	800b860 <UART_SetConfig+0x1980>
 800b836:	4b3f      	ldr	r3, [pc, #252]	; (800b934 <UART_SetConfig+0x1a54>)
 800b838:	e012      	b.n	800b860 <UART_SetConfig+0x1980>
 800b83a:	4b3f      	ldr	r3, [pc, #252]	; (800b938 <UART_SetConfig+0x1a58>)
 800b83c:	e010      	b.n	800b860 <UART_SetConfig+0x1980>
 800b83e:	4b3f      	ldr	r3, [pc, #252]	; (800b93c <UART_SetConfig+0x1a5c>)
 800b840:	e00e      	b.n	800b860 <UART_SetConfig+0x1980>
 800b842:	4b3f      	ldr	r3, [pc, #252]	; (800b940 <UART_SetConfig+0x1a60>)
 800b844:	e00c      	b.n	800b860 <UART_SetConfig+0x1980>
 800b846:	4b3f      	ldr	r3, [pc, #252]	; (800b944 <UART_SetConfig+0x1a64>)
 800b848:	e00a      	b.n	800b860 <UART_SetConfig+0x1980>
 800b84a:	4b3f      	ldr	r3, [pc, #252]	; (800b948 <UART_SetConfig+0x1a68>)
 800b84c:	e008      	b.n	800b860 <UART_SetConfig+0x1980>
 800b84e:	4b3f      	ldr	r3, [pc, #252]	; (800b94c <UART_SetConfig+0x1a6c>)
 800b850:	e006      	b.n	800b860 <UART_SetConfig+0x1980>
 800b852:	4b3f      	ldr	r3, [pc, #252]	; (800b950 <UART_SetConfig+0x1a70>)
 800b854:	e004      	b.n	800b860 <UART_SetConfig+0x1980>
 800b856:	4b3f      	ldr	r3, [pc, #252]	; (800b954 <UART_SetConfig+0x1a74>)
 800b858:	e002      	b.n	800b860 <UART_SetConfig+0x1980>
 800b85a:	4b33      	ldr	r3, [pc, #204]	; (800b928 <UART_SetConfig+0x1a48>)
 800b85c:	e000      	b.n	800b860 <UART_SetConfig+0x1980>
 800b85e:	4b34      	ldr	r3, [pc, #208]	; (800b930 <UART_SetConfig+0x1a50>)
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	6852      	ldr	r2, [r2, #4]
 800b864:	0852      	lsrs	r2, r2, #1
 800b866:	441a      	add	r2, r3
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b870:	b29b      	uxth	r3, r3
 800b872:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b874:	e0df      	b.n	800ba36 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d045      	beq.n	800b90a <UART_SetConfig+0x1a2a>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b882:	2b01      	cmp	r3, #1
 800b884:	d03f      	beq.n	800b906 <UART_SetConfig+0x1a26>
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b88a:	2b02      	cmp	r3, #2
 800b88c:	d039      	beq.n	800b902 <UART_SetConfig+0x1a22>
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b892:	2b03      	cmp	r3, #3
 800b894:	d033      	beq.n	800b8fe <UART_SetConfig+0x1a1e>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b89a:	2b04      	cmp	r3, #4
 800b89c:	d02d      	beq.n	800b8fa <UART_SetConfig+0x1a1a>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a2:	2b05      	cmp	r3, #5
 800b8a4:	d027      	beq.n	800b8f6 <UART_SetConfig+0x1a16>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8aa:	2b06      	cmp	r3, #6
 800b8ac:	d021      	beq.n	800b8f2 <UART_SetConfig+0x1a12>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b2:	2b07      	cmp	r3, #7
 800b8b4:	d01b      	beq.n	800b8ee <UART_SetConfig+0x1a0e>
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ba:	2b08      	cmp	r3, #8
 800b8bc:	d015      	beq.n	800b8ea <UART_SetConfig+0x1a0a>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c2:	2b09      	cmp	r3, #9
 800b8c4:	d00f      	beq.n	800b8e6 <UART_SetConfig+0x1a06>
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ca:	2b0a      	cmp	r3, #10
 800b8cc:	d008      	beq.n	800b8e0 <UART_SetConfig+0x1a00>
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d2:	2b0b      	cmp	r3, #11
 800b8d4:	d102      	bne.n	800b8dc <UART_SetConfig+0x19fc>
 800b8d6:	f647 2312 	movw	r3, #31250	; 0x7a12
 800b8da:	e017      	b.n	800b90c <UART_SetConfig+0x1a2c>
 800b8dc:	4b18      	ldr	r3, [pc, #96]	; (800b940 <UART_SetConfig+0x1a60>)
 800b8de:	e015      	b.n	800b90c <UART_SetConfig+0x1a2c>
 800b8e0:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b8e4:	e012      	b.n	800b90c <UART_SetConfig+0x1a2c>
 800b8e6:	4b1c      	ldr	r3, [pc, #112]	; (800b958 <UART_SetConfig+0x1a78>)
 800b8e8:	e010      	b.n	800b90c <UART_SetConfig+0x1a2c>
 800b8ea:	4b1c      	ldr	r3, [pc, #112]	; (800b95c <UART_SetConfig+0x1a7c>)
 800b8ec:	e00e      	b.n	800b90c <UART_SetConfig+0x1a2c>
 800b8ee:	4b0f      	ldr	r3, [pc, #60]	; (800b92c <UART_SetConfig+0x1a4c>)
 800b8f0:	e00c      	b.n	800b90c <UART_SetConfig+0x1a2c>
 800b8f2:	4b1b      	ldr	r3, [pc, #108]	; (800b960 <UART_SetConfig+0x1a80>)
 800b8f4:	e00a      	b.n	800b90c <UART_SetConfig+0x1a2c>
 800b8f6:	4b1b      	ldr	r3, [pc, #108]	; (800b964 <UART_SetConfig+0x1a84>)
 800b8f8:	e008      	b.n	800b90c <UART_SetConfig+0x1a2c>
 800b8fa:	4b0e      	ldr	r3, [pc, #56]	; (800b934 <UART_SetConfig+0x1a54>)
 800b8fc:	e006      	b.n	800b90c <UART_SetConfig+0x1a2c>
 800b8fe:	4b1a      	ldr	r3, [pc, #104]	; (800b968 <UART_SetConfig+0x1a88>)
 800b900:	e004      	b.n	800b90c <UART_SetConfig+0x1a2c>
 800b902:	4b0d      	ldr	r3, [pc, #52]	; (800b938 <UART_SetConfig+0x1a58>)
 800b904:	e002      	b.n	800b90c <UART_SetConfig+0x1a2c>
 800b906:	4b0d      	ldr	r3, [pc, #52]	; (800b93c <UART_SetConfig+0x1a5c>)
 800b908:	e000      	b.n	800b90c <UART_SetConfig+0x1a2c>
 800b90a:	4b0d      	ldr	r3, [pc, #52]	; (800b940 <UART_SetConfig+0x1a60>)
 800b90c:	687a      	ldr	r2, [r7, #4]
 800b90e:	6852      	ldr	r2, [r2, #4]
 800b910:	0852      	lsrs	r2, r2, #1
 800b912:	441a      	add	r2, r3
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	fbb2 f3f3 	udiv	r3, r2, r3
 800b91c:	b29b      	uxth	r3, r3
 800b91e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b920:	e089      	b.n	800ba36 <UART_SetConfig+0x1b56>
 800b922:	bf00      	nop
 800b924:	58024400 	.word	0x58024400
 800b928:	03d09000 	.word	0x03d09000
 800b92c:	0007a120 	.word	0x0007a120
 800b930:	07a12000 	.word	0x07a12000
 800b934:	000f4240 	.word	0x000f4240
 800b938:	001e8480 	.word	0x001e8480
 800b93c:	003d0900 	.word	0x003d0900
 800b940:	007a1200 	.word	0x007a1200
 800b944:	00a2c2aa 	.word	0x00a2c2aa
 800b948:	00c35000 	.word	0x00c35000
 800b94c:	00f42400 	.word	0x00f42400
 800b950:	01458554 	.word	0x01458554
 800b954:	01e84800 	.word	0x01e84800
 800b958:	0001e848 	.word	0x0001e848
 800b95c:	0003d090 	.word	0x0003d090
 800b960:	000a2c2a 	.word	0x000a2c2a
 800b964:	000c3500 	.word	0x000c3500
 800b968:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b970:	2b00      	cmp	r3, #0
 800b972:	d04f      	beq.n	800ba14 <UART_SetConfig+0x1b34>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b978:	2b01      	cmp	r3, #1
 800b97a:	d048      	beq.n	800ba0e <UART_SetConfig+0x1b2e>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b980:	2b02      	cmp	r3, #2
 800b982:	d041      	beq.n	800ba08 <UART_SetConfig+0x1b28>
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b988:	2b03      	cmp	r3, #3
 800b98a:	d03a      	beq.n	800ba02 <UART_SetConfig+0x1b22>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b990:	2b04      	cmp	r3, #4
 800b992:	d033      	beq.n	800b9fc <UART_SetConfig+0x1b1c>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b998:	2b05      	cmp	r3, #5
 800b99a:	d02c      	beq.n	800b9f6 <UART_SetConfig+0x1b16>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a0:	2b06      	cmp	r3, #6
 800b9a2:	d025      	beq.n	800b9f0 <UART_SetConfig+0x1b10>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a8:	2b07      	cmp	r3, #7
 800b9aa:	d01e      	beq.n	800b9ea <UART_SetConfig+0x1b0a>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b0:	2b08      	cmp	r3, #8
 800b9b2:	d017      	beq.n	800b9e4 <UART_SetConfig+0x1b04>
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b8:	2b09      	cmp	r3, #9
 800b9ba:	d010      	beq.n	800b9de <UART_SetConfig+0x1afe>
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c0:	2b0a      	cmp	r3, #10
 800b9c2:	d009      	beq.n	800b9d8 <UART_SetConfig+0x1af8>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c8:	2b0b      	cmp	r3, #11
 800b9ca:	d102      	bne.n	800b9d2 <UART_SetConfig+0x1af2>
 800b9cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b9d0:	e022      	b.n	800ba18 <UART_SetConfig+0x1b38>
 800b9d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b9d6:	e01f      	b.n	800ba18 <UART_SetConfig+0x1b38>
 800b9d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b9dc:	e01c      	b.n	800ba18 <UART_SetConfig+0x1b38>
 800b9de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9e2:	e019      	b.n	800ba18 <UART_SetConfig+0x1b38>
 800b9e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b9e8:	e016      	b.n	800ba18 <UART_SetConfig+0x1b38>
 800b9ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b9ee:	e013      	b.n	800ba18 <UART_SetConfig+0x1b38>
 800b9f0:	f241 5354 	movw	r3, #5460	; 0x1554
 800b9f4:	e010      	b.n	800ba18 <UART_SetConfig+0x1b38>
 800b9f6:	f641 1398 	movw	r3, #6552	; 0x1998
 800b9fa:	e00d      	b.n	800ba18 <UART_SetConfig+0x1b38>
 800b9fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ba00:	e00a      	b.n	800ba18 <UART_SetConfig+0x1b38>
 800ba02:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800ba06:	e007      	b.n	800ba18 <UART_SetConfig+0x1b38>
 800ba08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ba0c:	e004      	b.n	800ba18 <UART_SetConfig+0x1b38>
 800ba0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba12:	e001      	b.n	800ba18 <UART_SetConfig+0x1b38>
 800ba14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ba18:	687a      	ldr	r2, [r7, #4]
 800ba1a:	6852      	ldr	r2, [r2, #4]
 800ba1c:	0852      	lsrs	r2, r2, #1
 800ba1e:	441a      	add	r2, r3
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	685b      	ldr	r3, [r3, #4]
 800ba24:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba28:	b29b      	uxth	r3, r3
 800ba2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ba2c:	e003      	b.n	800ba36 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800ba2e:	2301      	movs	r3, #1
 800ba30:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800ba34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba38:	2b0f      	cmp	r3, #15
 800ba3a:	d916      	bls.n	800ba6a <UART_SetConfig+0x1b8a>
 800ba3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba42:	d212      	bcs.n	800ba6a <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ba44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba46:	b29b      	uxth	r3, r3
 800ba48:	f023 030f 	bic.w	r3, r3, #15
 800ba4c:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ba4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba50:	085b      	lsrs	r3, r3, #1
 800ba52:	b29b      	uxth	r3, r3
 800ba54:	f003 0307 	and.w	r3, r3, #7
 800ba58:	b29a      	uxth	r2, r3
 800ba5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ba5c:	4313      	orrs	r3, r2
 800ba5e:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ba66:	60da      	str	r2, [r3, #12]
 800ba68:	e3a3      	b.n	800c1b2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba70:	e39f      	b.n	800c1b2 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800ba72:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ba76:	2b40      	cmp	r3, #64	; 0x40
 800ba78:	f200 8388 	bhi.w	800c18c <UART_SetConfig+0x22ac>
 800ba7c:	a201      	add	r2, pc, #4	; (adr r2, 800ba84 <UART_SetConfig+0x1ba4>)
 800ba7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba82:	bf00      	nop
 800ba84:	0800bb89 	.word	0x0800bb89
 800ba88:	0800bc3f 	.word	0x0800bc3f
 800ba8c:	0800c18d 	.word	0x0800c18d
 800ba90:	0800c18d 	.word	0x0800c18d
 800ba94:	0800bcf5 	.word	0x0800bcf5
 800ba98:	0800c18d 	.word	0x0800c18d
 800ba9c:	0800c18d 	.word	0x0800c18d
 800baa0:	0800c18d 	.word	0x0800c18d
 800baa4:	0800bdaf 	.word	0x0800bdaf
 800baa8:	0800c18d 	.word	0x0800c18d
 800baac:	0800c18d 	.word	0x0800c18d
 800bab0:	0800c18d 	.word	0x0800c18d
 800bab4:	0800c18d 	.word	0x0800c18d
 800bab8:	0800c18d 	.word	0x0800c18d
 800babc:	0800c18d 	.word	0x0800c18d
 800bac0:	0800c18d 	.word	0x0800c18d
 800bac4:	0800be69 	.word	0x0800be69
 800bac8:	0800c18d 	.word	0x0800c18d
 800bacc:	0800c18d 	.word	0x0800c18d
 800bad0:	0800c18d 	.word	0x0800c18d
 800bad4:	0800c18d 	.word	0x0800c18d
 800bad8:	0800c18d 	.word	0x0800c18d
 800badc:	0800c18d 	.word	0x0800c18d
 800bae0:	0800c18d 	.word	0x0800c18d
 800bae4:	0800c18d 	.word	0x0800c18d
 800bae8:	0800c18d 	.word	0x0800c18d
 800baec:	0800c18d 	.word	0x0800c18d
 800baf0:	0800c18d 	.word	0x0800c18d
 800baf4:	0800c18d 	.word	0x0800c18d
 800baf8:	0800c18d 	.word	0x0800c18d
 800bafc:	0800c18d 	.word	0x0800c18d
 800bb00:	0800c18d 	.word	0x0800c18d
 800bb04:	0800bfd9 	.word	0x0800bfd9
 800bb08:	0800c18d 	.word	0x0800c18d
 800bb0c:	0800c18d 	.word	0x0800c18d
 800bb10:	0800c18d 	.word	0x0800c18d
 800bb14:	0800c18d 	.word	0x0800c18d
 800bb18:	0800c18d 	.word	0x0800c18d
 800bb1c:	0800c18d 	.word	0x0800c18d
 800bb20:	0800c18d 	.word	0x0800c18d
 800bb24:	0800c18d 	.word	0x0800c18d
 800bb28:	0800c18d 	.word	0x0800c18d
 800bb2c:	0800c18d 	.word	0x0800c18d
 800bb30:	0800c18d 	.word	0x0800c18d
 800bb34:	0800c18d 	.word	0x0800c18d
 800bb38:	0800c18d 	.word	0x0800c18d
 800bb3c:	0800c18d 	.word	0x0800c18d
 800bb40:	0800c18d 	.word	0x0800c18d
 800bb44:	0800c18d 	.word	0x0800c18d
 800bb48:	0800c18d 	.word	0x0800c18d
 800bb4c:	0800c18d 	.word	0x0800c18d
 800bb50:	0800c18d 	.word	0x0800c18d
 800bb54:	0800c18d 	.word	0x0800c18d
 800bb58:	0800c18d 	.word	0x0800c18d
 800bb5c:	0800c18d 	.word	0x0800c18d
 800bb60:	0800c18d 	.word	0x0800c18d
 800bb64:	0800c18d 	.word	0x0800c18d
 800bb68:	0800c18d 	.word	0x0800c18d
 800bb6c:	0800c18d 	.word	0x0800c18d
 800bb70:	0800c18d 	.word	0x0800c18d
 800bb74:	0800c18d 	.word	0x0800c18d
 800bb78:	0800c18d 	.word	0x0800c18d
 800bb7c:	0800c18d 	.word	0x0800c18d
 800bb80:	0800c18d 	.word	0x0800c18d
 800bb84:	0800c0cd 	.word	0x0800c0cd
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb88:	f7fa f956 	bl	8005e38 <HAL_RCC_GetPCLK1Freq>
 800bb8c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d044      	beq.n	800bc20 <UART_SetConfig+0x1d40>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb9a:	2b01      	cmp	r3, #1
 800bb9c:	d03e      	beq.n	800bc1c <UART_SetConfig+0x1d3c>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bba2:	2b02      	cmp	r3, #2
 800bba4:	d038      	beq.n	800bc18 <UART_SetConfig+0x1d38>
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbaa:	2b03      	cmp	r3, #3
 800bbac:	d032      	beq.n	800bc14 <UART_SetConfig+0x1d34>
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb2:	2b04      	cmp	r3, #4
 800bbb4:	d02c      	beq.n	800bc10 <UART_SetConfig+0x1d30>
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbba:	2b05      	cmp	r3, #5
 800bbbc:	d026      	beq.n	800bc0c <UART_SetConfig+0x1d2c>
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc2:	2b06      	cmp	r3, #6
 800bbc4:	d020      	beq.n	800bc08 <UART_SetConfig+0x1d28>
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbca:	2b07      	cmp	r3, #7
 800bbcc:	d01a      	beq.n	800bc04 <UART_SetConfig+0x1d24>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbd2:	2b08      	cmp	r3, #8
 800bbd4:	d014      	beq.n	800bc00 <UART_SetConfig+0x1d20>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbda:	2b09      	cmp	r3, #9
 800bbdc:	d00e      	beq.n	800bbfc <UART_SetConfig+0x1d1c>
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe2:	2b0a      	cmp	r3, #10
 800bbe4:	d008      	beq.n	800bbf8 <UART_SetConfig+0x1d18>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbea:	2b0b      	cmp	r3, #11
 800bbec:	d102      	bne.n	800bbf4 <UART_SetConfig+0x1d14>
 800bbee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bbf2:	e016      	b.n	800bc22 <UART_SetConfig+0x1d42>
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	e014      	b.n	800bc22 <UART_SetConfig+0x1d42>
 800bbf8:	2380      	movs	r3, #128	; 0x80
 800bbfa:	e012      	b.n	800bc22 <UART_SetConfig+0x1d42>
 800bbfc:	2340      	movs	r3, #64	; 0x40
 800bbfe:	e010      	b.n	800bc22 <UART_SetConfig+0x1d42>
 800bc00:	2320      	movs	r3, #32
 800bc02:	e00e      	b.n	800bc22 <UART_SetConfig+0x1d42>
 800bc04:	2310      	movs	r3, #16
 800bc06:	e00c      	b.n	800bc22 <UART_SetConfig+0x1d42>
 800bc08:	230c      	movs	r3, #12
 800bc0a:	e00a      	b.n	800bc22 <UART_SetConfig+0x1d42>
 800bc0c:	230a      	movs	r3, #10
 800bc0e:	e008      	b.n	800bc22 <UART_SetConfig+0x1d42>
 800bc10:	2308      	movs	r3, #8
 800bc12:	e006      	b.n	800bc22 <UART_SetConfig+0x1d42>
 800bc14:	2306      	movs	r3, #6
 800bc16:	e004      	b.n	800bc22 <UART_SetConfig+0x1d42>
 800bc18:	2304      	movs	r3, #4
 800bc1a:	e002      	b.n	800bc22 <UART_SetConfig+0x1d42>
 800bc1c:	2302      	movs	r3, #2
 800bc1e:	e000      	b.n	800bc22 <UART_SetConfig+0x1d42>
 800bc20:	2301      	movs	r3, #1
 800bc22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc24:	fbb2 f2f3 	udiv	r2, r2, r3
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	685b      	ldr	r3, [r3, #4]
 800bc2c:	085b      	lsrs	r3, r3, #1
 800bc2e:	441a      	add	r2, r3
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	685b      	ldr	r3, [r3, #4]
 800bc34:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc38:	b29b      	uxth	r3, r3
 800bc3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bc3c:	e2aa      	b.n	800c194 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc3e:	f7fa f911 	bl	8005e64 <HAL_RCC_GetPCLK2Freq>
 800bc42:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d044      	beq.n	800bcd6 <UART_SetConfig+0x1df6>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc50:	2b01      	cmp	r3, #1
 800bc52:	d03e      	beq.n	800bcd2 <UART_SetConfig+0x1df2>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc58:	2b02      	cmp	r3, #2
 800bc5a:	d038      	beq.n	800bcce <UART_SetConfig+0x1dee>
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc60:	2b03      	cmp	r3, #3
 800bc62:	d032      	beq.n	800bcca <UART_SetConfig+0x1dea>
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc68:	2b04      	cmp	r3, #4
 800bc6a:	d02c      	beq.n	800bcc6 <UART_SetConfig+0x1de6>
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc70:	2b05      	cmp	r3, #5
 800bc72:	d026      	beq.n	800bcc2 <UART_SetConfig+0x1de2>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc78:	2b06      	cmp	r3, #6
 800bc7a:	d020      	beq.n	800bcbe <UART_SetConfig+0x1dde>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc80:	2b07      	cmp	r3, #7
 800bc82:	d01a      	beq.n	800bcba <UART_SetConfig+0x1dda>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc88:	2b08      	cmp	r3, #8
 800bc8a:	d014      	beq.n	800bcb6 <UART_SetConfig+0x1dd6>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc90:	2b09      	cmp	r3, #9
 800bc92:	d00e      	beq.n	800bcb2 <UART_SetConfig+0x1dd2>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc98:	2b0a      	cmp	r3, #10
 800bc9a:	d008      	beq.n	800bcae <UART_SetConfig+0x1dce>
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca0:	2b0b      	cmp	r3, #11
 800bca2:	d102      	bne.n	800bcaa <UART_SetConfig+0x1dca>
 800bca4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bca8:	e016      	b.n	800bcd8 <UART_SetConfig+0x1df8>
 800bcaa:	2301      	movs	r3, #1
 800bcac:	e014      	b.n	800bcd8 <UART_SetConfig+0x1df8>
 800bcae:	2380      	movs	r3, #128	; 0x80
 800bcb0:	e012      	b.n	800bcd8 <UART_SetConfig+0x1df8>
 800bcb2:	2340      	movs	r3, #64	; 0x40
 800bcb4:	e010      	b.n	800bcd8 <UART_SetConfig+0x1df8>
 800bcb6:	2320      	movs	r3, #32
 800bcb8:	e00e      	b.n	800bcd8 <UART_SetConfig+0x1df8>
 800bcba:	2310      	movs	r3, #16
 800bcbc:	e00c      	b.n	800bcd8 <UART_SetConfig+0x1df8>
 800bcbe:	230c      	movs	r3, #12
 800bcc0:	e00a      	b.n	800bcd8 <UART_SetConfig+0x1df8>
 800bcc2:	230a      	movs	r3, #10
 800bcc4:	e008      	b.n	800bcd8 <UART_SetConfig+0x1df8>
 800bcc6:	2308      	movs	r3, #8
 800bcc8:	e006      	b.n	800bcd8 <UART_SetConfig+0x1df8>
 800bcca:	2306      	movs	r3, #6
 800bccc:	e004      	b.n	800bcd8 <UART_SetConfig+0x1df8>
 800bcce:	2304      	movs	r3, #4
 800bcd0:	e002      	b.n	800bcd8 <UART_SetConfig+0x1df8>
 800bcd2:	2302      	movs	r3, #2
 800bcd4:	e000      	b.n	800bcd8 <UART_SetConfig+0x1df8>
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcda:	fbb2 f2f3 	udiv	r2, r2, r3
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	685b      	ldr	r3, [r3, #4]
 800bce2:	085b      	lsrs	r3, r3, #1
 800bce4:	441a      	add	r2, r3
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	685b      	ldr	r3, [r3, #4]
 800bcea:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcee:	b29b      	uxth	r3, r3
 800bcf0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bcf2:	e24f      	b.n	800c194 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bcf4:	f107 0318 	add.w	r3, r7, #24
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f7fb fa35 	bl	8007168 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bcfe:	69fa      	ldr	r2, [r7, #28]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d044      	beq.n	800bd92 <UART_SetConfig+0x1eb2>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd0c:	2b01      	cmp	r3, #1
 800bd0e:	d03e      	beq.n	800bd8e <UART_SetConfig+0x1eae>
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd14:	2b02      	cmp	r3, #2
 800bd16:	d038      	beq.n	800bd8a <UART_SetConfig+0x1eaa>
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd1c:	2b03      	cmp	r3, #3
 800bd1e:	d032      	beq.n	800bd86 <UART_SetConfig+0x1ea6>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd24:	2b04      	cmp	r3, #4
 800bd26:	d02c      	beq.n	800bd82 <UART_SetConfig+0x1ea2>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd2c:	2b05      	cmp	r3, #5
 800bd2e:	d026      	beq.n	800bd7e <UART_SetConfig+0x1e9e>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd34:	2b06      	cmp	r3, #6
 800bd36:	d020      	beq.n	800bd7a <UART_SetConfig+0x1e9a>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd3c:	2b07      	cmp	r3, #7
 800bd3e:	d01a      	beq.n	800bd76 <UART_SetConfig+0x1e96>
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd44:	2b08      	cmp	r3, #8
 800bd46:	d014      	beq.n	800bd72 <UART_SetConfig+0x1e92>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd4c:	2b09      	cmp	r3, #9
 800bd4e:	d00e      	beq.n	800bd6e <UART_SetConfig+0x1e8e>
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd54:	2b0a      	cmp	r3, #10
 800bd56:	d008      	beq.n	800bd6a <UART_SetConfig+0x1e8a>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd5c:	2b0b      	cmp	r3, #11
 800bd5e:	d102      	bne.n	800bd66 <UART_SetConfig+0x1e86>
 800bd60:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd64:	e016      	b.n	800bd94 <UART_SetConfig+0x1eb4>
 800bd66:	2301      	movs	r3, #1
 800bd68:	e014      	b.n	800bd94 <UART_SetConfig+0x1eb4>
 800bd6a:	2380      	movs	r3, #128	; 0x80
 800bd6c:	e012      	b.n	800bd94 <UART_SetConfig+0x1eb4>
 800bd6e:	2340      	movs	r3, #64	; 0x40
 800bd70:	e010      	b.n	800bd94 <UART_SetConfig+0x1eb4>
 800bd72:	2320      	movs	r3, #32
 800bd74:	e00e      	b.n	800bd94 <UART_SetConfig+0x1eb4>
 800bd76:	2310      	movs	r3, #16
 800bd78:	e00c      	b.n	800bd94 <UART_SetConfig+0x1eb4>
 800bd7a:	230c      	movs	r3, #12
 800bd7c:	e00a      	b.n	800bd94 <UART_SetConfig+0x1eb4>
 800bd7e:	230a      	movs	r3, #10
 800bd80:	e008      	b.n	800bd94 <UART_SetConfig+0x1eb4>
 800bd82:	2308      	movs	r3, #8
 800bd84:	e006      	b.n	800bd94 <UART_SetConfig+0x1eb4>
 800bd86:	2306      	movs	r3, #6
 800bd88:	e004      	b.n	800bd94 <UART_SetConfig+0x1eb4>
 800bd8a:	2304      	movs	r3, #4
 800bd8c:	e002      	b.n	800bd94 <UART_SetConfig+0x1eb4>
 800bd8e:	2302      	movs	r3, #2
 800bd90:	e000      	b.n	800bd94 <UART_SetConfig+0x1eb4>
 800bd92:	2301      	movs	r3, #1
 800bd94:	fbb2 f2f3 	udiv	r2, r2, r3
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	085b      	lsrs	r3, r3, #1
 800bd9e:	441a      	add	r2, r3
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	685b      	ldr	r3, [r3, #4]
 800bda4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bda8:	b29b      	uxth	r3, r3
 800bdaa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bdac:	e1f2      	b.n	800c194 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bdae:	f107 030c 	add.w	r3, r7, #12
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7fb fb24 	bl	8007400 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bdb8:	693a      	ldr	r2, [r7, #16]
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d044      	beq.n	800be4c <UART_SetConfig+0x1f6c>
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdc6:	2b01      	cmp	r3, #1
 800bdc8:	d03e      	beq.n	800be48 <UART_SetConfig+0x1f68>
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdce:	2b02      	cmp	r3, #2
 800bdd0:	d038      	beq.n	800be44 <UART_SetConfig+0x1f64>
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdd6:	2b03      	cmp	r3, #3
 800bdd8:	d032      	beq.n	800be40 <UART_SetConfig+0x1f60>
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdde:	2b04      	cmp	r3, #4
 800bde0:	d02c      	beq.n	800be3c <UART_SetConfig+0x1f5c>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bde6:	2b05      	cmp	r3, #5
 800bde8:	d026      	beq.n	800be38 <UART_SetConfig+0x1f58>
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdee:	2b06      	cmp	r3, #6
 800bdf0:	d020      	beq.n	800be34 <UART_SetConfig+0x1f54>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf6:	2b07      	cmp	r3, #7
 800bdf8:	d01a      	beq.n	800be30 <UART_SetConfig+0x1f50>
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdfe:	2b08      	cmp	r3, #8
 800be00:	d014      	beq.n	800be2c <UART_SetConfig+0x1f4c>
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be06:	2b09      	cmp	r3, #9
 800be08:	d00e      	beq.n	800be28 <UART_SetConfig+0x1f48>
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be0e:	2b0a      	cmp	r3, #10
 800be10:	d008      	beq.n	800be24 <UART_SetConfig+0x1f44>
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be16:	2b0b      	cmp	r3, #11
 800be18:	d102      	bne.n	800be20 <UART_SetConfig+0x1f40>
 800be1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be1e:	e016      	b.n	800be4e <UART_SetConfig+0x1f6e>
 800be20:	2301      	movs	r3, #1
 800be22:	e014      	b.n	800be4e <UART_SetConfig+0x1f6e>
 800be24:	2380      	movs	r3, #128	; 0x80
 800be26:	e012      	b.n	800be4e <UART_SetConfig+0x1f6e>
 800be28:	2340      	movs	r3, #64	; 0x40
 800be2a:	e010      	b.n	800be4e <UART_SetConfig+0x1f6e>
 800be2c:	2320      	movs	r3, #32
 800be2e:	e00e      	b.n	800be4e <UART_SetConfig+0x1f6e>
 800be30:	2310      	movs	r3, #16
 800be32:	e00c      	b.n	800be4e <UART_SetConfig+0x1f6e>
 800be34:	230c      	movs	r3, #12
 800be36:	e00a      	b.n	800be4e <UART_SetConfig+0x1f6e>
 800be38:	230a      	movs	r3, #10
 800be3a:	e008      	b.n	800be4e <UART_SetConfig+0x1f6e>
 800be3c:	2308      	movs	r3, #8
 800be3e:	e006      	b.n	800be4e <UART_SetConfig+0x1f6e>
 800be40:	2306      	movs	r3, #6
 800be42:	e004      	b.n	800be4e <UART_SetConfig+0x1f6e>
 800be44:	2304      	movs	r3, #4
 800be46:	e002      	b.n	800be4e <UART_SetConfig+0x1f6e>
 800be48:	2302      	movs	r3, #2
 800be4a:	e000      	b.n	800be4e <UART_SetConfig+0x1f6e>
 800be4c:	2301      	movs	r3, #1
 800be4e:	fbb2 f2f3 	udiv	r2, r2, r3
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	685b      	ldr	r3, [r3, #4]
 800be56:	085b      	lsrs	r3, r3, #1
 800be58:	441a      	add	r2, r3
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800be62:	b29b      	uxth	r3, r3
 800be64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800be66:	e195      	b.n	800c194 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be68:	4b87      	ldr	r3, [pc, #540]	; (800c088 <UART_SetConfig+0x21a8>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f003 0320 	and.w	r3, r3, #32
 800be70:	2b00      	cmp	r3, #0
 800be72:	d05d      	beq.n	800bf30 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be74:	4b84      	ldr	r3, [pc, #528]	; (800c088 <UART_SetConfig+0x21a8>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	08db      	lsrs	r3, r3, #3
 800be7a:	f003 0303 	and.w	r3, r3, #3
 800be7e:	4a83      	ldr	r2, [pc, #524]	; (800c08c <UART_SetConfig+0x21ac>)
 800be80:	40da      	lsrs	r2, r3
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be86:	2b00      	cmp	r3, #0
 800be88:	d044      	beq.n	800bf14 <UART_SetConfig+0x2034>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be8e:	2b01      	cmp	r3, #1
 800be90:	d03e      	beq.n	800bf10 <UART_SetConfig+0x2030>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be96:	2b02      	cmp	r3, #2
 800be98:	d038      	beq.n	800bf0c <UART_SetConfig+0x202c>
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be9e:	2b03      	cmp	r3, #3
 800bea0:	d032      	beq.n	800bf08 <UART_SetConfig+0x2028>
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bea6:	2b04      	cmp	r3, #4
 800bea8:	d02c      	beq.n	800bf04 <UART_SetConfig+0x2024>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beae:	2b05      	cmp	r3, #5
 800beb0:	d026      	beq.n	800bf00 <UART_SetConfig+0x2020>
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beb6:	2b06      	cmp	r3, #6
 800beb8:	d020      	beq.n	800befc <UART_SetConfig+0x201c>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bebe:	2b07      	cmp	r3, #7
 800bec0:	d01a      	beq.n	800bef8 <UART_SetConfig+0x2018>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bec6:	2b08      	cmp	r3, #8
 800bec8:	d014      	beq.n	800bef4 <UART_SetConfig+0x2014>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bece:	2b09      	cmp	r3, #9
 800bed0:	d00e      	beq.n	800bef0 <UART_SetConfig+0x2010>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bed6:	2b0a      	cmp	r3, #10
 800bed8:	d008      	beq.n	800beec <UART_SetConfig+0x200c>
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bede:	2b0b      	cmp	r3, #11
 800bee0:	d102      	bne.n	800bee8 <UART_SetConfig+0x2008>
 800bee2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bee6:	e016      	b.n	800bf16 <UART_SetConfig+0x2036>
 800bee8:	2301      	movs	r3, #1
 800beea:	e014      	b.n	800bf16 <UART_SetConfig+0x2036>
 800beec:	2380      	movs	r3, #128	; 0x80
 800beee:	e012      	b.n	800bf16 <UART_SetConfig+0x2036>
 800bef0:	2340      	movs	r3, #64	; 0x40
 800bef2:	e010      	b.n	800bf16 <UART_SetConfig+0x2036>
 800bef4:	2320      	movs	r3, #32
 800bef6:	e00e      	b.n	800bf16 <UART_SetConfig+0x2036>
 800bef8:	2310      	movs	r3, #16
 800befa:	e00c      	b.n	800bf16 <UART_SetConfig+0x2036>
 800befc:	230c      	movs	r3, #12
 800befe:	e00a      	b.n	800bf16 <UART_SetConfig+0x2036>
 800bf00:	230a      	movs	r3, #10
 800bf02:	e008      	b.n	800bf16 <UART_SetConfig+0x2036>
 800bf04:	2308      	movs	r3, #8
 800bf06:	e006      	b.n	800bf16 <UART_SetConfig+0x2036>
 800bf08:	2306      	movs	r3, #6
 800bf0a:	e004      	b.n	800bf16 <UART_SetConfig+0x2036>
 800bf0c:	2304      	movs	r3, #4
 800bf0e:	e002      	b.n	800bf16 <UART_SetConfig+0x2036>
 800bf10:	2302      	movs	r3, #2
 800bf12:	e000      	b.n	800bf16 <UART_SetConfig+0x2036>
 800bf14:	2301      	movs	r3, #1
 800bf16:	fbb2 f2f3 	udiv	r2, r2, r3
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	685b      	ldr	r3, [r3, #4]
 800bf1e:	085b      	lsrs	r3, r3, #1
 800bf20:	441a      	add	r2, r3
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	685b      	ldr	r3, [r3, #4]
 800bf26:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf2a:	b29b      	uxth	r3, r3
 800bf2c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800bf2e:	e131      	b.n	800c194 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d043      	beq.n	800bfc0 <UART_SetConfig+0x20e0>
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	d03d      	beq.n	800bfbc <UART_SetConfig+0x20dc>
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf44:	2b02      	cmp	r3, #2
 800bf46:	d037      	beq.n	800bfb8 <UART_SetConfig+0x20d8>
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf4c:	2b03      	cmp	r3, #3
 800bf4e:	d031      	beq.n	800bfb4 <UART_SetConfig+0x20d4>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf54:	2b04      	cmp	r3, #4
 800bf56:	d02b      	beq.n	800bfb0 <UART_SetConfig+0x20d0>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf5c:	2b05      	cmp	r3, #5
 800bf5e:	d025      	beq.n	800bfac <UART_SetConfig+0x20cc>
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf64:	2b06      	cmp	r3, #6
 800bf66:	d01f      	beq.n	800bfa8 <UART_SetConfig+0x20c8>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf6c:	2b07      	cmp	r3, #7
 800bf6e:	d019      	beq.n	800bfa4 <UART_SetConfig+0x20c4>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf74:	2b08      	cmp	r3, #8
 800bf76:	d013      	beq.n	800bfa0 <UART_SetConfig+0x20c0>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf7c:	2b09      	cmp	r3, #9
 800bf7e:	d00d      	beq.n	800bf9c <UART_SetConfig+0x20bc>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf84:	2b0a      	cmp	r3, #10
 800bf86:	d007      	beq.n	800bf98 <UART_SetConfig+0x20b8>
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf8c:	2b0b      	cmp	r3, #11
 800bf8e:	d101      	bne.n	800bf94 <UART_SetConfig+0x20b4>
 800bf90:	4b3f      	ldr	r3, [pc, #252]	; (800c090 <UART_SetConfig+0x21b0>)
 800bf92:	e016      	b.n	800bfc2 <UART_SetConfig+0x20e2>
 800bf94:	4b3d      	ldr	r3, [pc, #244]	; (800c08c <UART_SetConfig+0x21ac>)
 800bf96:	e014      	b.n	800bfc2 <UART_SetConfig+0x20e2>
 800bf98:	4b3e      	ldr	r3, [pc, #248]	; (800c094 <UART_SetConfig+0x21b4>)
 800bf9a:	e012      	b.n	800bfc2 <UART_SetConfig+0x20e2>
 800bf9c:	4b3e      	ldr	r3, [pc, #248]	; (800c098 <UART_SetConfig+0x21b8>)
 800bf9e:	e010      	b.n	800bfc2 <UART_SetConfig+0x20e2>
 800bfa0:	4b3e      	ldr	r3, [pc, #248]	; (800c09c <UART_SetConfig+0x21bc>)
 800bfa2:	e00e      	b.n	800bfc2 <UART_SetConfig+0x20e2>
 800bfa4:	4b3e      	ldr	r3, [pc, #248]	; (800c0a0 <UART_SetConfig+0x21c0>)
 800bfa6:	e00c      	b.n	800bfc2 <UART_SetConfig+0x20e2>
 800bfa8:	4b3e      	ldr	r3, [pc, #248]	; (800c0a4 <UART_SetConfig+0x21c4>)
 800bfaa:	e00a      	b.n	800bfc2 <UART_SetConfig+0x20e2>
 800bfac:	4b3e      	ldr	r3, [pc, #248]	; (800c0a8 <UART_SetConfig+0x21c8>)
 800bfae:	e008      	b.n	800bfc2 <UART_SetConfig+0x20e2>
 800bfb0:	4b3e      	ldr	r3, [pc, #248]	; (800c0ac <UART_SetConfig+0x21cc>)
 800bfb2:	e006      	b.n	800bfc2 <UART_SetConfig+0x20e2>
 800bfb4:	4b3e      	ldr	r3, [pc, #248]	; (800c0b0 <UART_SetConfig+0x21d0>)
 800bfb6:	e004      	b.n	800bfc2 <UART_SetConfig+0x20e2>
 800bfb8:	4b3e      	ldr	r3, [pc, #248]	; (800c0b4 <UART_SetConfig+0x21d4>)
 800bfba:	e002      	b.n	800bfc2 <UART_SetConfig+0x20e2>
 800bfbc:	4b3e      	ldr	r3, [pc, #248]	; (800c0b8 <UART_SetConfig+0x21d8>)
 800bfbe:	e000      	b.n	800bfc2 <UART_SetConfig+0x20e2>
 800bfc0:	4b32      	ldr	r3, [pc, #200]	; (800c08c <UART_SetConfig+0x21ac>)
 800bfc2:	687a      	ldr	r2, [r7, #4]
 800bfc4:	6852      	ldr	r2, [r2, #4]
 800bfc6:	0852      	lsrs	r2, r2, #1
 800bfc8:	441a      	add	r2, r3
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	685b      	ldr	r3, [r3, #4]
 800bfce:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfd2:	b29b      	uxth	r3, r3
 800bfd4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bfd6:	e0dd      	b.n	800c194 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d046      	beq.n	800c06e <UART_SetConfig+0x218e>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfe4:	2b01      	cmp	r3, #1
 800bfe6:	d040      	beq.n	800c06a <UART_SetConfig+0x218a>
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfec:	2b02      	cmp	r3, #2
 800bfee:	d03a      	beq.n	800c066 <UART_SetConfig+0x2186>
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bff4:	2b03      	cmp	r3, #3
 800bff6:	d034      	beq.n	800c062 <UART_SetConfig+0x2182>
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bffc:	2b04      	cmp	r3, #4
 800bffe:	d02e      	beq.n	800c05e <UART_SetConfig+0x217e>
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c004:	2b05      	cmp	r3, #5
 800c006:	d028      	beq.n	800c05a <UART_SetConfig+0x217a>
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c00c:	2b06      	cmp	r3, #6
 800c00e:	d022      	beq.n	800c056 <UART_SetConfig+0x2176>
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c014:	2b07      	cmp	r3, #7
 800c016:	d01c      	beq.n	800c052 <UART_SetConfig+0x2172>
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c01c:	2b08      	cmp	r3, #8
 800c01e:	d016      	beq.n	800c04e <UART_SetConfig+0x216e>
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c024:	2b09      	cmp	r3, #9
 800c026:	d00f      	beq.n	800c048 <UART_SetConfig+0x2168>
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c02c:	2b0a      	cmp	r3, #10
 800c02e:	d008      	beq.n	800c042 <UART_SetConfig+0x2162>
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c034:	2b0b      	cmp	r3, #11
 800c036:	d102      	bne.n	800c03e <UART_SetConfig+0x215e>
 800c038:	f643 5309 	movw	r3, #15625	; 0x3d09
 800c03c:	e018      	b.n	800c070 <UART_SetConfig+0x2190>
 800c03e:	4b18      	ldr	r3, [pc, #96]	; (800c0a0 <UART_SetConfig+0x21c0>)
 800c040:	e016      	b.n	800c070 <UART_SetConfig+0x2190>
 800c042:	f647 2312 	movw	r3, #31250	; 0x7a12
 800c046:	e013      	b.n	800c070 <UART_SetConfig+0x2190>
 800c048:	f24f 4324 	movw	r3, #62500	; 0xf424
 800c04c:	e010      	b.n	800c070 <UART_SetConfig+0x2190>
 800c04e:	4b1b      	ldr	r3, [pc, #108]	; (800c0bc <UART_SetConfig+0x21dc>)
 800c050:	e00e      	b.n	800c070 <UART_SetConfig+0x2190>
 800c052:	4b0f      	ldr	r3, [pc, #60]	; (800c090 <UART_SetConfig+0x21b0>)
 800c054:	e00c      	b.n	800c070 <UART_SetConfig+0x2190>
 800c056:	4b1a      	ldr	r3, [pc, #104]	; (800c0c0 <UART_SetConfig+0x21e0>)
 800c058:	e00a      	b.n	800c070 <UART_SetConfig+0x2190>
 800c05a:	4b1a      	ldr	r3, [pc, #104]	; (800c0c4 <UART_SetConfig+0x21e4>)
 800c05c:	e008      	b.n	800c070 <UART_SetConfig+0x2190>
 800c05e:	4b0d      	ldr	r3, [pc, #52]	; (800c094 <UART_SetConfig+0x21b4>)
 800c060:	e006      	b.n	800c070 <UART_SetConfig+0x2190>
 800c062:	4b19      	ldr	r3, [pc, #100]	; (800c0c8 <UART_SetConfig+0x21e8>)
 800c064:	e004      	b.n	800c070 <UART_SetConfig+0x2190>
 800c066:	4b0c      	ldr	r3, [pc, #48]	; (800c098 <UART_SetConfig+0x21b8>)
 800c068:	e002      	b.n	800c070 <UART_SetConfig+0x2190>
 800c06a:	4b0c      	ldr	r3, [pc, #48]	; (800c09c <UART_SetConfig+0x21bc>)
 800c06c:	e000      	b.n	800c070 <UART_SetConfig+0x2190>
 800c06e:	4b0c      	ldr	r3, [pc, #48]	; (800c0a0 <UART_SetConfig+0x21c0>)
 800c070:	687a      	ldr	r2, [r7, #4]
 800c072:	6852      	ldr	r2, [r2, #4]
 800c074:	0852      	lsrs	r2, r2, #1
 800c076:	441a      	add	r2, r3
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	685b      	ldr	r3, [r3, #4]
 800c07c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c080:	b29b      	uxth	r3, r3
 800c082:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c084:	e086      	b.n	800c194 <UART_SetConfig+0x22b4>
 800c086:	bf00      	nop
 800c088:	58024400 	.word	0x58024400
 800c08c:	03d09000 	.word	0x03d09000
 800c090:	0003d090 	.word	0x0003d090
 800c094:	0007a120 	.word	0x0007a120
 800c098:	000f4240 	.word	0x000f4240
 800c09c:	001e8480 	.word	0x001e8480
 800c0a0:	003d0900 	.word	0x003d0900
 800c0a4:	00516155 	.word	0x00516155
 800c0a8:	0061a800 	.word	0x0061a800
 800c0ac:	007a1200 	.word	0x007a1200
 800c0b0:	00a2c2aa 	.word	0x00a2c2aa
 800c0b4:	00f42400 	.word	0x00f42400
 800c0b8:	01e84800 	.word	0x01e84800
 800c0bc:	0001e848 	.word	0x0001e848
 800c0c0:	00051615 	.word	0x00051615
 800c0c4:	00061a80 	.word	0x00061a80
 800c0c8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d04e      	beq.n	800c172 <UART_SetConfig+0x2292>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0d8:	2b01      	cmp	r3, #1
 800c0da:	d047      	beq.n	800c16c <UART_SetConfig+0x228c>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0e0:	2b02      	cmp	r3, #2
 800c0e2:	d040      	beq.n	800c166 <UART_SetConfig+0x2286>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0e8:	2b03      	cmp	r3, #3
 800c0ea:	d039      	beq.n	800c160 <UART_SetConfig+0x2280>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0f0:	2b04      	cmp	r3, #4
 800c0f2:	d032      	beq.n	800c15a <UART_SetConfig+0x227a>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0f8:	2b05      	cmp	r3, #5
 800c0fa:	d02b      	beq.n	800c154 <UART_SetConfig+0x2274>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c100:	2b06      	cmp	r3, #6
 800c102:	d024      	beq.n	800c14e <UART_SetConfig+0x226e>
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c108:	2b07      	cmp	r3, #7
 800c10a:	d01d      	beq.n	800c148 <UART_SetConfig+0x2268>
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c110:	2b08      	cmp	r3, #8
 800c112:	d016      	beq.n	800c142 <UART_SetConfig+0x2262>
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c118:	2b09      	cmp	r3, #9
 800c11a:	d00f      	beq.n	800c13c <UART_SetConfig+0x225c>
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c120:	2b0a      	cmp	r3, #10
 800c122:	d008      	beq.n	800c136 <UART_SetConfig+0x2256>
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c128:	2b0b      	cmp	r3, #11
 800c12a:	d101      	bne.n	800c130 <UART_SetConfig+0x2250>
 800c12c:	2380      	movs	r3, #128	; 0x80
 800c12e:	e022      	b.n	800c176 <UART_SetConfig+0x2296>
 800c130:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c134:	e01f      	b.n	800c176 <UART_SetConfig+0x2296>
 800c136:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c13a:	e01c      	b.n	800c176 <UART_SetConfig+0x2296>
 800c13c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c140:	e019      	b.n	800c176 <UART_SetConfig+0x2296>
 800c142:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c146:	e016      	b.n	800c176 <UART_SetConfig+0x2296>
 800c148:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c14c:	e013      	b.n	800c176 <UART_SetConfig+0x2296>
 800c14e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800c152:	e010      	b.n	800c176 <UART_SetConfig+0x2296>
 800c154:	f640 43cc 	movw	r3, #3276	; 0xccc
 800c158:	e00d      	b.n	800c176 <UART_SetConfig+0x2296>
 800c15a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c15e:	e00a      	b.n	800c176 <UART_SetConfig+0x2296>
 800c160:	f241 5355 	movw	r3, #5461	; 0x1555
 800c164:	e007      	b.n	800c176 <UART_SetConfig+0x2296>
 800c166:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c16a:	e004      	b.n	800c176 <UART_SetConfig+0x2296>
 800c16c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c170:	e001      	b.n	800c176 <UART_SetConfig+0x2296>
 800c172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c176:	687a      	ldr	r2, [r7, #4]
 800c178:	6852      	ldr	r2, [r2, #4]
 800c17a:	0852      	lsrs	r2, r2, #1
 800c17c:	441a      	add	r2, r3
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	685b      	ldr	r3, [r3, #4]
 800c182:	fbb2 f3f3 	udiv	r3, r2, r3
 800c186:	b29b      	uxth	r3, r3
 800c188:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c18a:	e003      	b.n	800c194 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800c18c:	2301      	movs	r3, #1
 800c18e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800c192:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c196:	2b0f      	cmp	r3, #15
 800c198:	d908      	bls.n	800c1ac <UART_SetConfig+0x22cc>
 800c19a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c19c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1a0:	d204      	bcs.n	800c1ac <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1a8:	60da      	str	r2, [r3, #12]
 800c1aa:	e002      	b.n	800c1b2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2201      	movs	r2, #1
 800c1b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2201      	movs	r2, #1
 800c1be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800c1ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3740      	adds	r7, #64	; 0x40
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800c1dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b083      	sub	sp, #12
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1e8:	f003 0301 	and.w	r3, r3, #1
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d00a      	beq.n	800c206 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	685b      	ldr	r3, [r3, #4]
 800c1f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	430a      	orrs	r2, r1
 800c204:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c20a:	f003 0302 	and.w	r3, r3, #2
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d00a      	beq.n	800c228 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	685b      	ldr	r3, [r3, #4]
 800c218:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	430a      	orrs	r2, r1
 800c226:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c22c:	f003 0304 	and.w	r3, r3, #4
 800c230:	2b00      	cmp	r3, #0
 800c232:	d00a      	beq.n	800c24a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	685b      	ldr	r3, [r3, #4]
 800c23a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	430a      	orrs	r2, r1
 800c248:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c24e:	f003 0308 	and.w	r3, r3, #8
 800c252:	2b00      	cmp	r3, #0
 800c254:	d00a      	beq.n	800c26c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	685b      	ldr	r3, [r3, #4]
 800c25c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	430a      	orrs	r2, r1
 800c26a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c270:	f003 0310 	and.w	r3, r3, #16
 800c274:	2b00      	cmp	r3, #0
 800c276:	d00a      	beq.n	800c28e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	689b      	ldr	r3, [r3, #8]
 800c27e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	430a      	orrs	r2, r1
 800c28c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c292:	f003 0320 	and.w	r3, r3, #32
 800c296:	2b00      	cmp	r3, #0
 800c298:	d00a      	beq.n	800c2b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	689b      	ldr	r3, [r3, #8]
 800c2a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	430a      	orrs	r2, r1
 800c2ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d01a      	beq.n	800c2f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	685b      	ldr	r3, [r3, #4]
 800c2c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	430a      	orrs	r2, r1
 800c2d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c2da:	d10a      	bne.n	800c2f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	685b      	ldr	r3, [r3, #4]
 800c2e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	430a      	orrs	r2, r1
 800c2f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d00a      	beq.n	800c314 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	685b      	ldr	r3, [r3, #4]
 800c304:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	430a      	orrs	r2, r1
 800c312:	605a      	str	r2, [r3, #4]
  }
}
 800c314:	bf00      	nop
 800c316:	370c      	adds	r7, #12
 800c318:	46bd      	mov	sp, r7
 800c31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31e:	4770      	bx	lr

0800c320 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b086      	sub	sp, #24
 800c324:	af02      	add	r7, sp, #8
 800c326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2200      	movs	r2, #0
 800c32c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c330:	f7f5 fb0c 	bl	800194c <HAL_GetTick>
 800c334:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f003 0308 	and.w	r3, r3, #8
 800c340:	2b08      	cmp	r3, #8
 800c342:	d10e      	bne.n	800c362 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c344:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c348:	9300      	str	r3, [sp, #0]
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	2200      	movs	r2, #0
 800c34e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f000 f82c 	bl	800c3b0 <UART_WaitOnFlagUntilTimeout>
 800c358:	4603      	mov	r3, r0
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d001      	beq.n	800c362 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c35e:	2303      	movs	r3, #3
 800c360:	e022      	b.n	800c3a8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f003 0304 	and.w	r3, r3, #4
 800c36c:	2b04      	cmp	r3, #4
 800c36e:	d10e      	bne.n	800c38e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c370:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c374:	9300      	str	r3, [sp, #0]
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	2200      	movs	r2, #0
 800c37a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f000 f816 	bl	800c3b0 <UART_WaitOnFlagUntilTimeout>
 800c384:	4603      	mov	r3, r0
 800c386:	2b00      	cmp	r3, #0
 800c388:	d001      	beq.n	800c38e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c38a:	2303      	movs	r3, #3
 800c38c:	e00c      	b.n	800c3a8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2220      	movs	r2, #32
 800c392:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2220      	movs	r2, #32
 800c39a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c3a6:	2300      	movs	r3, #0
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3710      	adds	r7, #16
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b084      	sub	sp, #16
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	60f8      	str	r0, [r7, #12]
 800c3b8:	60b9      	str	r1, [r7, #8]
 800c3ba:	603b      	str	r3, [r7, #0]
 800c3bc:	4613      	mov	r3, r2
 800c3be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c3c0:	e062      	b.n	800c488 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c3c2:	69bb      	ldr	r3, [r7, #24]
 800c3c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3c8:	d05e      	beq.n	800c488 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c3ca:	f7f5 fabf 	bl	800194c <HAL_GetTick>
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	1ad3      	subs	r3, r2, r3
 800c3d4:	69ba      	ldr	r2, [r7, #24]
 800c3d6:	429a      	cmp	r2, r3
 800c3d8:	d302      	bcc.n	800c3e0 <UART_WaitOnFlagUntilTimeout+0x30>
 800c3da:	69bb      	ldr	r3, [r7, #24]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d11d      	bne.n	800c41c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	681a      	ldr	r2, [r3, #0]
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c3ee:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	689a      	ldr	r2, [r3, #8]
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f022 0201 	bic.w	r2, r2, #1
 800c3fe:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	2220      	movs	r2, #32
 800c404:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	2220      	movs	r2, #32
 800c40c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	2200      	movs	r2, #0
 800c414:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800c418:	2303      	movs	r3, #3
 800c41a:	e045      	b.n	800c4a8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f003 0304 	and.w	r3, r3, #4
 800c426:	2b00      	cmp	r3, #0
 800c428:	d02e      	beq.n	800c488 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	69db      	ldr	r3, [r3, #28]
 800c430:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c434:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c438:	d126      	bne.n	800c488 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c442:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	681a      	ldr	r2, [r3, #0]
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c452:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	689a      	ldr	r2, [r3, #8]
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	f022 0201 	bic.w	r2, r2, #1
 800c462:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	2220      	movs	r2, #32
 800c468:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	2220      	movs	r2, #32
 800c470:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	2220      	movs	r2, #32
 800c478:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	2200      	movs	r2, #0
 800c480:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800c484:	2303      	movs	r3, #3
 800c486:	e00f      	b.n	800c4a8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	69da      	ldr	r2, [r3, #28]
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	4013      	ands	r3, r2
 800c492:	68ba      	ldr	r2, [r7, #8]
 800c494:	429a      	cmp	r2, r3
 800c496:	bf0c      	ite	eq
 800c498:	2301      	moveq	r3, #1
 800c49a:	2300      	movne	r3, #0
 800c49c:	b2db      	uxtb	r3, r3
 800c49e:	461a      	mov	r2, r3
 800c4a0:	79fb      	ldrb	r3, [r7, #7]
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d08d      	beq.n	800c3c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c4a6:	2300      	movs	r3, #0
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3710      	adds	r7, #16
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}

0800c4b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	b085      	sub	sp, #20
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c4be:	2b01      	cmp	r3, #1
 800c4c0:	d101      	bne.n	800c4c6 <HAL_UARTEx_DisableFifoMode+0x16>
 800c4c2:	2302      	movs	r3, #2
 800c4c4:	e027      	b.n	800c516 <HAL_UARTEx_DisableFifoMode+0x66>
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2201      	movs	r2, #1
 800c4ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2224      	movs	r2, #36	; 0x24
 800c4d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	681a      	ldr	r2, [r3, #0]
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	f022 0201 	bic.w	r2, r2, #1
 800c4ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c4f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	68fa      	ldr	r2, [r7, #12]
 800c502:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2220      	movs	r2, #32
 800c508:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2200      	movs	r2, #0
 800c510:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c514:	2300      	movs	r3, #0
}
 800c516:	4618      	mov	r0, r3
 800c518:	3714      	adds	r7, #20
 800c51a:	46bd      	mov	sp, r7
 800c51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c520:	4770      	bx	lr

0800c522 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c522:	b580      	push	{r7, lr}
 800c524:	b084      	sub	sp, #16
 800c526:	af00      	add	r7, sp, #0
 800c528:	6078      	str	r0, [r7, #4]
 800c52a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c532:	2b01      	cmp	r3, #1
 800c534:	d101      	bne.n	800c53a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c536:	2302      	movs	r3, #2
 800c538:	e02d      	b.n	800c596 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2201      	movs	r2, #1
 800c53e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2224      	movs	r2, #36	; 0x24
 800c546:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	681a      	ldr	r2, [r3, #0]
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f022 0201 	bic.w	r2, r2, #1
 800c560:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	689b      	ldr	r3, [r3, #8]
 800c568:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	683a      	ldr	r2, [r7, #0]
 800c572:	430a      	orrs	r2, r1
 800c574:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f000 f850 	bl	800c61c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	68fa      	ldr	r2, [r7, #12]
 800c582:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2220      	movs	r2, #32
 800c588:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2200      	movs	r2, #0
 800c590:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c594:	2300      	movs	r3, #0
}
 800c596:	4618      	mov	r0, r3
 800c598:	3710      	adds	r7, #16
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}

0800c59e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c59e:	b580      	push	{r7, lr}
 800c5a0:	b084      	sub	sp, #16
 800c5a2:	af00      	add	r7, sp, #0
 800c5a4:	6078      	str	r0, [r7, #4]
 800c5a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c5ae:	2b01      	cmp	r3, #1
 800c5b0:	d101      	bne.n	800c5b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c5b2:	2302      	movs	r3, #2
 800c5b4:	e02d      	b.n	800c612 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2201      	movs	r2, #1
 800c5ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2224      	movs	r2, #36	; 0x24
 800c5c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	681a      	ldr	r2, [r3, #0]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	f022 0201 	bic.w	r2, r2, #1
 800c5dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	689b      	ldr	r3, [r3, #8]
 800c5e4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	683a      	ldr	r2, [r7, #0]
 800c5ee:	430a      	orrs	r2, r1
 800c5f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f000 f812 	bl	800c61c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	68fa      	ldr	r2, [r7, #12]
 800c5fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2220      	movs	r2, #32
 800c604:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2200      	movs	r2, #0
 800c60c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c610:	2300      	movs	r3, #0
}
 800c612:	4618      	mov	r0, r3
 800c614:	3710      	adds	r7, #16
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
	...

0800c61c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c61c:	b480      	push	{r7}
 800c61e:	b089      	sub	sp, #36	; 0x24
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800c624:	4a2f      	ldr	r2, [pc, #188]	; (800c6e4 <UARTEx_SetNbDataToProcess+0xc8>)
 800c626:	f107 0314 	add.w	r3, r7, #20
 800c62a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c62e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800c632:	4a2d      	ldr	r2, [pc, #180]	; (800c6e8 <UARTEx_SetNbDataToProcess+0xcc>)
 800c634:	f107 030c 	add.w	r3, r7, #12
 800c638:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c63c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c644:	2b00      	cmp	r3, #0
 800c646:	d108      	bne.n	800c65a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2201      	movs	r2, #1
 800c64c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2201      	movs	r2, #1
 800c654:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c658:	e03d      	b.n	800c6d6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c65a:	2308      	movs	r3, #8
 800c65c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c65e:	2308      	movs	r3, #8
 800c660:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	689b      	ldr	r3, [r3, #8]
 800c668:	0e5b      	lsrs	r3, r3, #25
 800c66a:	b2db      	uxtb	r3, r3
 800c66c:	f003 0307 	and.w	r3, r3, #7
 800c670:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	689b      	ldr	r3, [r3, #8]
 800c678:	0f5b      	lsrs	r3, r3, #29
 800c67a:	b2db      	uxtb	r3, r3
 800c67c:	f003 0307 	and.w	r3, r3, #7
 800c680:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800c682:	7fbb      	ldrb	r3, [r7, #30]
 800c684:	7f3a      	ldrb	r2, [r7, #28]
 800c686:	f107 0120 	add.w	r1, r7, #32
 800c68a:	440a      	add	r2, r1
 800c68c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c690:	fb02 f303 	mul.w	r3, r2, r3
 800c694:	7f3a      	ldrb	r2, [r7, #28]
 800c696:	f107 0120 	add.w	r1, r7, #32
 800c69a:	440a      	add	r2, r1
 800c69c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c6a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c6a4:	b29a      	uxth	r2, r3
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800c6ac:	7ffb      	ldrb	r3, [r7, #31]
 800c6ae:	7f7a      	ldrb	r2, [r7, #29]
 800c6b0:	f107 0120 	add.w	r1, r7, #32
 800c6b4:	440a      	add	r2, r1
 800c6b6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c6ba:	fb02 f303 	mul.w	r3, r2, r3
 800c6be:	7f7a      	ldrb	r2, [r7, #29]
 800c6c0:	f107 0120 	add.w	r1, r7, #32
 800c6c4:	440a      	add	r2, r1
 800c6c6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c6ca:	fb93 f3f2 	sdiv	r3, r3, r2
 800c6ce:	b29a      	uxth	r2, r3
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c6d6:	bf00      	nop
 800c6d8:	3724      	adds	r7, #36	; 0x24
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e0:	4770      	bx	lr
 800c6e2:	bf00      	nop
 800c6e4:	0801728c 	.word	0x0801728c
 800c6e8:	08017294 	.word	0x08017294

0800c6ec <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c6ec:	b084      	sub	sp, #16
 800c6ee:	b480      	push	{r7}
 800c6f0:	b085      	sub	sp, #20
 800c6f2:	af00      	add	r7, sp, #0
 800c6f4:	6078      	str	r0, [r7, #4]
 800c6f6:	f107 001c 	add.w	r0, r7, #28
 800c6fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c6fe:	2300      	movs	r3, #0
 800c700:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c702:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800c704:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c706:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800c70a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c70c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800c70e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800c712:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c714:	68fa      	ldr	r2, [r7, #12]
 800c716:	4313      	orrs	r3, r2
 800c718:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	685a      	ldr	r2, [r3, #4]
 800c71e:	4b07      	ldr	r3, [pc, #28]	; (800c73c <SDMMC_Init+0x50>)
 800c720:	4013      	ands	r3, r2
 800c722:	68fa      	ldr	r2, [r7, #12]
 800c724:	431a      	orrs	r2, r3
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c72a:	2300      	movs	r3, #0
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3714      	adds	r7, #20
 800c730:	46bd      	mov	sp, r7
 800c732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c736:	b004      	add	sp, #16
 800c738:	4770      	bx	lr
 800c73a:	bf00      	nop
 800c73c:	ffc02c00 	.word	0xffc02c00

0800c740 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c740:	b480      	push	{r7}
 800c742:	b083      	sub	sp, #12
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c74e:	4618      	mov	r0, r3
 800c750:	370c      	adds	r7, #12
 800c752:	46bd      	mov	sp, r7
 800c754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c758:	4770      	bx	lr

0800c75a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800c75a:	b480      	push	{r7}
 800c75c:	b083      	sub	sp, #12
 800c75e:	af00      	add	r7, sp, #0
 800c760:	6078      	str	r0, [r7, #4]
 800c762:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	681a      	ldr	r2, [r3, #0]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c76e:	2300      	movs	r3, #0
}
 800c770:	4618      	mov	r0, r3
 800c772:	370c      	adds	r7, #12
 800c774:	46bd      	mov	sp, r7
 800c776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77a:	4770      	bx	lr

0800c77c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800c77c:	b480      	push	{r7}
 800c77e:	b083      	sub	sp, #12
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f043 0203 	orr.w	r2, r3, #3
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c790:	2300      	movs	r3, #0
}
 800c792:	4618      	mov	r0, r3
 800c794:	370c      	adds	r7, #12
 800c796:	46bd      	mov	sp, r7
 800c798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79c:	4770      	bx	lr

0800c79e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800c79e:	b480      	push	{r7}
 800c7a0:	b083      	sub	sp, #12
 800c7a2:	af00      	add	r7, sp, #0
 800c7a4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f003 0303 	and.w	r3, r3, #3
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	370c      	adds	r7, #12
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b8:	4770      	bx	lr
	...

0800c7bc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b085      	sub	sp, #20
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	681a      	ldr	r2, [r3, #0]
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c7da:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c7e0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c7e6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c7e8:	68fa      	ldr	r2, [r7, #12]
 800c7ea:	4313      	orrs	r3, r2
 800c7ec:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	68da      	ldr	r2, [r3, #12]
 800c7f2:	4b06      	ldr	r3, [pc, #24]	; (800c80c <SDMMC_SendCommand+0x50>)
 800c7f4:	4013      	ands	r3, r2
 800c7f6:	68fa      	ldr	r2, [r7, #12]
 800c7f8:	431a      	orrs	r2, r3
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c7fe:	2300      	movs	r3, #0
}
 800c800:	4618      	mov	r0, r3
 800c802:	3714      	adds	r7, #20
 800c804:	46bd      	mov	sp, r7
 800c806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80a:	4770      	bx	lr
 800c80c:	fffee0c0 	.word	0xfffee0c0

0800c810 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c810:	b480      	push	{r7}
 800c812:	b083      	sub	sp, #12
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	691b      	ldr	r3, [r3, #16]
 800c81c:	b2db      	uxtb	r3, r3
}
 800c81e:	4618      	mov	r0, r3
 800c820:	370c      	adds	r7, #12
 800c822:	46bd      	mov	sp, r7
 800c824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c828:	4770      	bx	lr

0800c82a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c82a:	b480      	push	{r7}
 800c82c:	b085      	sub	sp, #20
 800c82e:	af00      	add	r7, sp, #0
 800c830:	6078      	str	r0, [r7, #4]
 800c832:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	3314      	adds	r3, #20
 800c838:	461a      	mov	r2, r3
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	4413      	add	r3, r2
 800c83e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	681b      	ldr	r3, [r3, #0]
}
 800c844:	4618      	mov	r0, r3
 800c846:	3714      	adds	r7, #20
 800c848:	46bd      	mov	sp, r7
 800c84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84e:	4770      	bx	lr

0800c850 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800c850:	b480      	push	{r7}
 800c852:	b085      	sub	sp, #20
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
 800c858:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c85a:	2300      	movs	r3, #0
 800c85c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	681a      	ldr	r2, [r3, #0]
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	685a      	ldr	r2, [r3, #4]
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c876:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c87c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c882:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c884:	68fa      	ldr	r2, [r7, #12]
 800c886:	4313      	orrs	r3, r2
 800c888:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c88e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	431a      	orrs	r2, r3
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c89a:	2300      	movs	r3, #0

}
 800c89c:	4618      	mov	r0, r3
 800c89e:	3714      	adds	r7, #20
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a6:	4770      	bx	lr

0800c8a8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b088      	sub	sp, #32
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
 800c8b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c8b6:	2310      	movs	r3, #16
 800c8b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c8ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c8be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c8c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c8c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c8ca:	f107 0308 	add.w	r3, r7, #8
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f7ff ff73 	bl	800c7bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c8d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8da:	2110      	movs	r1, #16
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f000 faab 	bl	800ce38 <SDMMC_GetCmdResp1>
 800c8e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8e4:	69fb      	ldr	r3, [r7, #28]
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3720      	adds	r7, #32
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}

0800c8ee <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c8ee:	b580      	push	{r7, lr}
 800c8f0:	b088      	sub	sp, #32
 800c8f2:	af00      	add	r7, sp, #0
 800c8f4:	6078      	str	r0, [r7, #4]
 800c8f6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c8fc:	2311      	movs	r3, #17
 800c8fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c900:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c904:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c906:	2300      	movs	r3, #0
 800c908:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c90a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c90e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c910:	f107 0308 	add.w	r3, r7, #8
 800c914:	4619      	mov	r1, r3
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f7ff ff50 	bl	800c7bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c91c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c920:	2111      	movs	r1, #17
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f000 fa88 	bl	800ce38 <SDMMC_GetCmdResp1>
 800c928:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c92a:	69fb      	ldr	r3, [r7, #28]
}
 800c92c:	4618      	mov	r0, r3
 800c92e:	3720      	adds	r7, #32
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}

0800c934 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b088      	sub	sp, #32
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c942:	2312      	movs	r3, #18
 800c944:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c946:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c94a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c94c:	2300      	movs	r3, #0
 800c94e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c954:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c956:	f107 0308 	add.w	r3, r7, #8
 800c95a:	4619      	mov	r1, r3
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f7ff ff2d 	bl	800c7bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c962:	f241 3288 	movw	r2, #5000	; 0x1388
 800c966:	2112      	movs	r1, #18
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f000 fa65 	bl	800ce38 <SDMMC_GetCmdResp1>
 800c96e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c970:	69fb      	ldr	r3, [r7, #28]
}
 800c972:	4618      	mov	r0, r3
 800c974:	3720      	adds	r7, #32
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}

0800c97a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c97a:	b580      	push	{r7, lr}
 800c97c:	b088      	sub	sp, #32
 800c97e:	af00      	add	r7, sp, #0
 800c980:	6078      	str	r0, [r7, #4]
 800c982:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c988:	2318      	movs	r3, #24
 800c98a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c98c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c990:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c992:	2300      	movs	r3, #0
 800c994:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c99a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c99c:	f107 0308 	add.w	r3, r7, #8
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	f7ff ff0a 	bl	800c7bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c9a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9ac:	2118      	movs	r1, #24
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f000 fa42 	bl	800ce38 <SDMMC_GetCmdResp1>
 800c9b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9b6:	69fb      	ldr	r3, [r7, #28]
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3720      	adds	r7, #32
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}

0800c9c0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b088      	sub	sp, #32
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
 800c9c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c9ce:	2319      	movs	r3, #25
 800c9d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c9d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c9d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c9dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c9e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c9e2:	f107 0308 	add.w	r3, r7, #8
 800c9e6:	4619      	mov	r1, r3
 800c9e8:	6878      	ldr	r0, [r7, #4]
 800c9ea:	f7ff fee7 	bl	800c7bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c9ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9f2:	2119      	movs	r1, #25
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f000 fa1f 	bl	800ce38 <SDMMC_GetCmdResp1>
 800c9fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9fc:	69fb      	ldr	r3, [r7, #28]
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3720      	adds	r7, #32
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}
	...

0800ca08 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b088      	sub	sp, #32
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ca10:	2300      	movs	r3, #0
 800ca12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ca14:	230c      	movs	r3, #12
 800ca16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca18:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ca1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ca26:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	68db      	ldr	r3, [r3, #12]
 800ca2c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	68db      	ldr	r3, [r3, #12]
 800ca38:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca40:	f107 0308 	add.w	r3, r7, #8
 800ca44:	4619      	mov	r1, r3
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f7ff feb8 	bl	800c7bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800ca4c:	4a0b      	ldr	r2, [pc, #44]	; (800ca7c <SDMMC_CmdStopTransfer+0x74>)
 800ca4e:	210c      	movs	r1, #12
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f000 f9f1 	bl	800ce38 <SDMMC_GetCmdResp1>
 800ca56:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	68db      	ldr	r3, [r3, #12]
 800ca5c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ca64:	69fb      	ldr	r3, [r7, #28]
 800ca66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca6a:	d101      	bne.n	800ca70 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800ca70:	69fb      	ldr	r3, [r7, #28]
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	3720      	adds	r7, #32
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}
 800ca7a:	bf00      	nop
 800ca7c:	05f5e100 	.word	0x05f5e100

0800ca80 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b08a      	sub	sp, #40	; 0x28
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	60f8      	str	r0, [r7, #12]
 800ca88:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ca90:	2307      	movs	r3, #7
 800ca92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca94:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ca98:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800caa2:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800caa4:	f107 0310 	add.w	r3, r7, #16
 800caa8:	4619      	mov	r1, r3
 800caaa:	68f8      	ldr	r0, [r7, #12]
 800caac:	f7ff fe86 	bl	800c7bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800cab0:	f241 3288 	movw	r2, #5000	; 0x1388
 800cab4:	2107      	movs	r1, #7
 800cab6:	68f8      	ldr	r0, [r7, #12]
 800cab8:	f000 f9be 	bl	800ce38 <SDMMC_GetCmdResp1>
 800cabc:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800cabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3728      	adds	r7, #40	; 0x28
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}

0800cac8 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b088      	sub	sp, #32
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800cad0:	2300      	movs	r3, #0
 800cad2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800cad4:	2300      	movs	r3, #0
 800cad6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800cad8:	2300      	movs	r3, #0
 800cada:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cadc:	2300      	movs	r3, #0
 800cade:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cae4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cae6:	f107 0308 	add.w	r3, r7, #8
 800caea:	4619      	mov	r1, r3
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f7ff fe65 	bl	800c7bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f000 f976 	bl	800cde4 <SDMMC_GetCmdError>
 800caf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cafa:	69fb      	ldr	r3, [r7, #28]
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3720      	adds	r7, #32
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b088      	sub	sp, #32
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800cb0c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800cb10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800cb12:	2308      	movs	r3, #8
 800cb14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb16:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cb1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cb24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb26:	f107 0308 	add.w	r3, r7, #8
 800cb2a:	4619      	mov	r1, r3
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f7ff fe45 	bl	800c7bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f000 fb6a 	bl	800d20c <SDMMC_GetCmdResp7>
 800cb38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb3a:	69fb      	ldr	r3, [r7, #28]
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3720      	adds	r7, #32
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}

0800cb44 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b088      	sub	sp, #32
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800cb52:	2337      	movs	r3, #55	; 0x37
 800cb54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb56:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cb5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cb64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb66:	f107 0308 	add.w	r3, r7, #8
 800cb6a:	4619      	mov	r1, r3
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f7ff fe25 	bl	800c7bc <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800cb72:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb76:	2137      	movs	r1, #55	; 0x37
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f000 f95d 	bl	800ce38 <SDMMC_GetCmdResp1>
 800cb7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb80:	69fb      	ldr	r3, [r7, #28]
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3720      	adds	r7, #32
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}

0800cb8a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cb8a:	b580      	push	{r7, lr}
 800cb8c:	b088      	sub	sp, #32
 800cb8e:	af00      	add	r7, sp, #0
 800cb90:	6078      	str	r0, [r7, #4]
 800cb92:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800cb98:	2329      	movs	r3, #41	; 0x29
 800cb9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cba0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cba2:	2300      	movs	r3, #0
 800cba4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cbaa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cbac:	f107 0308 	add.w	r3, r7, #8
 800cbb0:	4619      	mov	r1, r3
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f7ff fe02 	bl	800c7bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f000 fa75 	bl	800d0a8 <SDMMC_GetCmdResp3>
 800cbbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbc0:	69fb      	ldr	r3, [r7, #28]
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3720      	adds	r7, #32
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}

0800cbca <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800cbca:	b580      	push	{r7, lr}
 800cbcc:	b088      	sub	sp, #32
 800cbce:	af00      	add	r7, sp, #0
 800cbd0:	6078      	str	r0, [r7, #4]
 800cbd2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800cbd8:	2306      	movs	r3, #6
 800cbda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cbdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cbe0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cbe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cbea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cbec:	f107 0308 	add.w	r3, r7, #8
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f7ff fde2 	bl	800c7bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800cbf8:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbfc:	2106      	movs	r1, #6
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	f000 f91a 	bl	800ce38 <SDMMC_GetCmdResp1>
 800cc04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc06:	69fb      	ldr	r3, [r7, #28]
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3720      	adds	r7, #32
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b088      	sub	sp, #32
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800cc1c:	2333      	movs	r3, #51	; 0x33
 800cc1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cc20:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cc24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc26:	2300      	movs	r3, #0
 800cc28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cc2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc30:	f107 0308 	add.w	r3, r7, #8
 800cc34:	4619      	mov	r1, r3
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f7ff fdc0 	bl	800c7bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800cc3c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc40:	2133      	movs	r1, #51	; 0x33
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f000 f8f8 	bl	800ce38 <SDMMC_GetCmdResp1>
 800cc48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc4a:	69fb      	ldr	r3, [r7, #28]
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	3720      	adds	r7, #32
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}

0800cc54 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b088      	sub	sp, #32
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cc60:	2302      	movs	r3, #2
 800cc62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cc64:	f44f 7340 	mov.w	r3, #768	; 0x300
 800cc68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cc72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc74:	f107 0308 	add.w	r3, r7, #8
 800cc78:	4619      	mov	r1, r3
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f7ff fd9e 	bl	800c7bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f000 f9c9 	bl	800d018 <SDMMC_GetCmdResp2>
 800cc86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc88:	69fb      	ldr	r3, [r7, #28]
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3720      	adds	r7, #32
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}

0800cc92 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cc92:	b580      	push	{r7, lr}
 800cc94:	b088      	sub	sp, #32
 800cc96:	af00      	add	r7, sp, #0
 800cc98:	6078      	str	r0, [r7, #4]
 800cc9a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800cca0:	2309      	movs	r3, #9
 800cca2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cca4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800cca8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ccae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ccb2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ccb4:	f107 0308 	add.w	r3, r7, #8
 800ccb8:	4619      	mov	r1, r3
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f7ff fd7e 	bl	800c7bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f000 f9a9 	bl	800d018 <SDMMC_GetCmdResp2>
 800ccc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ccc8:	69fb      	ldr	r3, [r7, #28]
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3720      	adds	r7, #32
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}

0800ccd2 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ccd2:	b580      	push	{r7, lr}
 800ccd4:	b088      	sub	sp, #32
 800ccd6:	af00      	add	r7, sp, #0
 800ccd8:	6078      	str	r0, [r7, #4]
 800ccda:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800cce0:	2303      	movs	r3, #3
 800cce2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cce4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cce8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ccea:	2300      	movs	r3, #0
 800ccec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ccee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ccf2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ccf4:	f107 0308 	add.w	r3, r7, #8
 800ccf8:	4619      	mov	r1, r3
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f7ff fd5e 	bl	800c7bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800cd00:	683a      	ldr	r2, [r7, #0]
 800cd02:	2103      	movs	r1, #3
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f000 fa0b 	bl	800d120 <SDMMC_GetCmdResp6>
 800cd0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd0c:	69fb      	ldr	r3, [r7, #28]
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3720      	adds	r7, #32
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}

0800cd16 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cd16:	b580      	push	{r7, lr}
 800cd18:	b088      	sub	sp, #32
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	6078      	str	r0, [r7, #4]
 800cd1e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800cd24:	230d      	movs	r3, #13
 800cd26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd28:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cd2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd38:	f107 0308 	add.w	r3, r7, #8
 800cd3c:	4619      	mov	r1, r3
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	f7ff fd3c 	bl	800c7bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800cd44:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd48:	210d      	movs	r1, #13
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f000 f874 	bl	800ce38 <SDMMC_GetCmdResp1>
 800cd50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd52:	69fb      	ldr	r3, [r7, #28]
}
 800cd54:	4618      	mov	r0, r3
 800cd56:	3720      	adds	r7, #32
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}

0800cd5c <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b088      	sub	sp, #32
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800cd64:	2300      	movs	r3, #0
 800cd66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800cd68:	230d      	movs	r3, #13
 800cd6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cd70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd72:	2300      	movs	r3, #0
 800cd74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd7a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd7c:	f107 0308 	add.w	r3, r7, #8
 800cd80:	4619      	mov	r1, r3
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	f7ff fd1a 	bl	800c7bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800cd88:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd8c:	210d      	movs	r1, #13
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f000 f852 	bl	800ce38 <SDMMC_GetCmdResp1>
 800cd94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd96:	69fb      	ldr	r3, [r7, #28]
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3720      	adds	r7, #32
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}

0800cda0 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b088      	sub	sp, #32
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800cdac:	230b      	movs	r3, #11
 800cdae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cdb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cdb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cdba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cdbe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cdc0:	f107 0308 	add.w	r3, r7, #8
 800cdc4:	4619      	mov	r1, r3
 800cdc6:	6878      	ldr	r0, [r7, #4]
 800cdc8:	f7ff fcf8 	bl	800c7bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800cdcc:	f241 3288 	movw	r2, #5000	; 0x1388
 800cdd0:	210b      	movs	r1, #11
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f000 f830 	bl	800ce38 <SDMMC_GetCmdResp1>
 800cdd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cdda:	69fb      	ldr	r3, [r7, #28]
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	3720      	adds	r7, #32
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}

0800cde4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800cde4:	b490      	push	{r4, r7}
 800cde6:	b082      	sub	sp, #8
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cdec:	4b0f      	ldr	r3, [pc, #60]	; (800ce2c <SDMMC_GetCmdError+0x48>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	4a0f      	ldr	r2, [pc, #60]	; (800ce30 <SDMMC_GetCmdError+0x4c>)
 800cdf2:	fba2 2303 	umull	r2, r3, r2, r3
 800cdf6:	0a5b      	lsrs	r3, r3, #9
 800cdf8:	f241 3288 	movw	r2, #5000	; 0x1388
 800cdfc:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800ce00:	4623      	mov	r3, r4
 800ce02:	1e5c      	subs	r4, r3, #1
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d102      	bne.n	800ce0e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ce08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ce0c:	e009      	b.n	800ce22 <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d0f2      	beq.n	800ce00 <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	4a05      	ldr	r2, [pc, #20]	; (800ce34 <SDMMC_GetCmdError+0x50>)
 800ce1e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800ce20:	2300      	movs	r3, #0
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3708      	adds	r7, #8
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bc90      	pop	{r4, r7}
 800ce2a:	4770      	bx	lr
 800ce2c:	24000000 	.word	0x24000000
 800ce30:	10624dd3 	.word	0x10624dd3
 800ce34:	002000c5 	.word	0x002000c5

0800ce38 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ce38:	b590      	push	{r4, r7, lr}
 800ce3a:	b087      	sub	sp, #28
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	60f8      	str	r0, [r7, #12]
 800ce40:	460b      	mov	r3, r1
 800ce42:	607a      	str	r2, [r7, #4]
 800ce44:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ce46:	4b6f      	ldr	r3, [pc, #444]	; (800d004 <SDMMC_GetCmdResp1+0x1cc>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	4a6f      	ldr	r2, [pc, #444]	; (800d008 <SDMMC_GetCmdResp1+0x1d0>)
 800ce4c:	fba2 2303 	umull	r2, r3, r2, r3
 800ce50:	0a5b      	lsrs	r3, r3, #9
 800ce52:	687a      	ldr	r2, [r7, #4]
 800ce54:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800ce58:	4623      	mov	r3, r4
 800ce5a:	1e5c      	subs	r4, r3, #1
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d102      	bne.n	800ce66 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ce60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ce64:	e0c9      	b.n	800cffa <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce6a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800ce6c:	697a      	ldr	r2, [r7, #20]
 800ce6e:	4b67      	ldr	r3, [pc, #412]	; (800d00c <SDMMC_GetCmdResp1+0x1d4>)
 800ce70:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d0f0      	beq.n	800ce58 <SDMMC_GetCmdResp1+0x20>
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d1eb      	bne.n	800ce58 <SDMMC_GetCmdResp1+0x20>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce84:	f003 0304 	and.w	r3, r3, #4
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d004      	beq.n	800ce96 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	2204      	movs	r2, #4
 800ce90:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ce92:	2304      	movs	r3, #4
 800ce94:	e0b1      	b.n	800cffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce9a:	f003 0301 	and.w	r3, r3, #1
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d004      	beq.n	800ceac <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	2201      	movs	r2, #1
 800cea6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cea8:	2301      	movs	r3, #1
 800ceaa:	e0a6      	b.n	800cffa <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	4a58      	ldr	r2, [pc, #352]	; (800d010 <SDMMC_GetCmdResp1+0x1d8>)
 800ceb0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ceb2:	68f8      	ldr	r0, [r7, #12]
 800ceb4:	f7ff fcac 	bl	800c810 <SDMMC_GetCommandResponse>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	461a      	mov	r2, r3
 800cebc:	7afb      	ldrb	r3, [r7, #11]
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d001      	beq.n	800cec6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cec2:	2301      	movs	r3, #1
 800cec4:	e099      	b.n	800cffa <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cec6:	2100      	movs	r1, #0
 800cec8:	68f8      	ldr	r0, [r7, #12]
 800ceca:	f7ff fcae 	bl	800c82a <SDMMC_GetResponse>
 800cece:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ced0:	693a      	ldr	r2, [r7, #16]
 800ced2:	4b50      	ldr	r3, [pc, #320]	; (800d014 <SDMMC_GetCmdResp1+0x1dc>)
 800ced4:	4013      	ands	r3, r2
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d101      	bne.n	800cede <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800ceda:	2300      	movs	r3, #0
 800cedc:	e08d      	b.n	800cffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cede:	693b      	ldr	r3, [r7, #16]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	da02      	bge.n	800ceea <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cee4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cee8:	e087      	b.n	800cffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ceea:	693b      	ldr	r3, [r7, #16]
 800ceec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d001      	beq.n	800cef8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cef4:	2340      	movs	r3, #64	; 0x40
 800cef6:	e080      	b.n	800cffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d001      	beq.n	800cf06 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cf02:	2380      	movs	r3, #128	; 0x80
 800cf04:	e079      	b.n	800cffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cf06:	693b      	ldr	r3, [r7, #16]
 800cf08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d002      	beq.n	800cf16 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cf10:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf14:	e071      	b.n	800cffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d002      	beq.n	800cf26 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cf20:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf24:	e069      	b.n	800cffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d002      	beq.n	800cf36 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cf30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf34:	e061      	b.n	800cffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d002      	beq.n	800cf46 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cf40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cf44:	e059      	b.n	800cffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cf46:	693b      	ldr	r3, [r7, #16]
 800cf48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d002      	beq.n	800cf56 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cf50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cf54:	e051      	b.n	800cffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d002      	beq.n	800cf66 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cf60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cf64:	e049      	b.n	800cffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d002      	beq.n	800cf76 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cf70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cf74:	e041      	b.n	800cffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d002      	beq.n	800cf86 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800cf80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf84:	e039      	b.n	800cffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d002      	beq.n	800cf96 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cf90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cf94:	e031      	b.n	800cffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cf96:	693b      	ldr	r3, [r7, #16]
 800cf98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d002      	beq.n	800cfa6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cfa0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cfa4:	e029      	b.n	800cffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d002      	beq.n	800cfb6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cfb0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cfb4:	e021      	b.n	800cffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cfb6:	693b      	ldr	r3, [r7, #16]
 800cfb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d002      	beq.n	800cfc6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cfc0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cfc4:	e019      	b.n	800cffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cfc6:	693b      	ldr	r3, [r7, #16]
 800cfc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d002      	beq.n	800cfd6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cfd0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cfd4:	e011      	b.n	800cffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cfd6:	693b      	ldr	r3, [r7, #16]
 800cfd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d002      	beq.n	800cfe6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800cfe0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cfe4:	e009      	b.n	800cffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800cfe6:	693b      	ldr	r3, [r7, #16]
 800cfe8:	f003 0308 	and.w	r3, r3, #8
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d002      	beq.n	800cff6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cff0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cff4:	e001      	b.n	800cffa <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cff6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cffa:	4618      	mov	r0, r3
 800cffc:	371c      	adds	r7, #28
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd90      	pop	{r4, r7, pc}
 800d002:	bf00      	nop
 800d004:	24000000 	.word	0x24000000
 800d008:	10624dd3 	.word	0x10624dd3
 800d00c:	00200045 	.word	0x00200045
 800d010:	002000c5 	.word	0x002000c5
 800d014:	fdffe008 	.word	0xfdffe008

0800d018 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d018:	b490      	push	{r4, r7}
 800d01a:	b084      	sub	sp, #16
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d020:	4b1e      	ldr	r3, [pc, #120]	; (800d09c <SDMMC_GetCmdResp2+0x84>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	4a1e      	ldr	r2, [pc, #120]	; (800d0a0 <SDMMC_GetCmdResp2+0x88>)
 800d026:	fba2 2303 	umull	r2, r3, r2, r3
 800d02a:	0a5b      	lsrs	r3, r3, #9
 800d02c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d030:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800d034:	4623      	mov	r3, r4
 800d036:	1e5c      	subs	r4, r3, #1
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d102      	bne.n	800d042 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d03c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d040:	e026      	b.n	800d090 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d046:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d0f0      	beq.n	800d034 <SDMMC_GetCmdResp2+0x1c>
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d1eb      	bne.n	800d034 <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d060:	f003 0304 	and.w	r3, r3, #4
 800d064:	2b00      	cmp	r3, #0
 800d066:	d004      	beq.n	800d072 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2204      	movs	r2, #4
 800d06c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d06e:	2304      	movs	r3, #4
 800d070:	e00e      	b.n	800d090 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d076:	f003 0301 	and.w	r3, r3, #1
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d004      	beq.n	800d088 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2201      	movs	r2, #1
 800d082:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d084:	2301      	movs	r3, #1
 800d086:	e003      	b.n	800d090 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	4a06      	ldr	r2, [pc, #24]	; (800d0a4 <SDMMC_GetCmdResp2+0x8c>)
 800d08c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d08e:	2300      	movs	r3, #0
}
 800d090:	4618      	mov	r0, r3
 800d092:	3710      	adds	r7, #16
 800d094:	46bd      	mov	sp, r7
 800d096:	bc90      	pop	{r4, r7}
 800d098:	4770      	bx	lr
 800d09a:	bf00      	nop
 800d09c:	24000000 	.word	0x24000000
 800d0a0:	10624dd3 	.word	0x10624dd3
 800d0a4:	002000c5 	.word	0x002000c5

0800d0a8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d0a8:	b490      	push	{r4, r7}
 800d0aa:	b084      	sub	sp, #16
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d0b0:	4b18      	ldr	r3, [pc, #96]	; (800d114 <SDMMC_GetCmdResp3+0x6c>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4a18      	ldr	r2, [pc, #96]	; (800d118 <SDMMC_GetCmdResp3+0x70>)
 800d0b6:	fba2 2303 	umull	r2, r3, r2, r3
 800d0ba:	0a5b      	lsrs	r3, r3, #9
 800d0bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0c0:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800d0c4:	4623      	mov	r3, r4
 800d0c6:	1e5c      	subs	r4, r3, #1
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d102      	bne.n	800d0d2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d0cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d0d0:	e01b      	b.n	800d10a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0d6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d0f0      	beq.n	800d0c4 <SDMMC_GetCmdResp3+0x1c>
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d1eb      	bne.n	800d0c4 <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0f0:	f003 0304 	and.w	r3, r3, #4
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d004      	beq.n	800d102 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2204      	movs	r2, #4
 800d0fc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d0fe:	2304      	movs	r3, #4
 800d100:	e003      	b.n	800d10a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	4a05      	ldr	r2, [pc, #20]	; (800d11c <SDMMC_GetCmdResp3+0x74>)
 800d106:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d108:	2300      	movs	r3, #0
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3710      	adds	r7, #16
 800d10e:	46bd      	mov	sp, r7
 800d110:	bc90      	pop	{r4, r7}
 800d112:	4770      	bx	lr
 800d114:	24000000 	.word	0x24000000
 800d118:	10624dd3 	.word	0x10624dd3
 800d11c:	002000c5 	.word	0x002000c5

0800d120 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d120:	b590      	push	{r4, r7, lr}
 800d122:	b087      	sub	sp, #28
 800d124:	af00      	add	r7, sp, #0
 800d126:	60f8      	str	r0, [r7, #12]
 800d128:	460b      	mov	r3, r1
 800d12a:	607a      	str	r2, [r7, #4]
 800d12c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d12e:	4b34      	ldr	r3, [pc, #208]	; (800d200 <SDMMC_GetCmdResp6+0xe0>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	4a34      	ldr	r2, [pc, #208]	; (800d204 <SDMMC_GetCmdResp6+0xe4>)
 800d134:	fba2 2303 	umull	r2, r3, r2, r3
 800d138:	0a5b      	lsrs	r3, r3, #9
 800d13a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d13e:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800d142:	4623      	mov	r3, r4
 800d144:	1e5c      	subs	r4, r3, #1
 800d146:	2b00      	cmp	r3, #0
 800d148:	d102      	bne.n	800d150 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d14a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d14e:	e052      	b.n	800d1f6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d154:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d0f0      	beq.n	800d142 <SDMMC_GetCmdResp6+0x22>
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d166:	2b00      	cmp	r3, #0
 800d168:	d1eb      	bne.n	800d142 <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d16e:	f003 0304 	and.w	r3, r3, #4
 800d172:	2b00      	cmp	r3, #0
 800d174:	d004      	beq.n	800d180 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	2204      	movs	r2, #4
 800d17a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d17c:	2304      	movs	r3, #4
 800d17e:	e03a      	b.n	800d1f6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d184:	f003 0301 	and.w	r3, r3, #1
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d004      	beq.n	800d196 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	2201      	movs	r2, #1
 800d190:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d192:	2301      	movs	r3, #1
 800d194:	e02f      	b.n	800d1f6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d196:	68f8      	ldr	r0, [r7, #12]
 800d198:	f7ff fb3a 	bl	800c810 <SDMMC_GetCommandResponse>
 800d19c:	4603      	mov	r3, r0
 800d19e:	461a      	mov	r2, r3
 800d1a0:	7afb      	ldrb	r3, [r7, #11]
 800d1a2:	4293      	cmp	r3, r2
 800d1a4:	d001      	beq.n	800d1aa <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	e025      	b.n	800d1f6 <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	4a16      	ldr	r2, [pc, #88]	; (800d208 <SDMMC_GetCmdResp6+0xe8>)
 800d1ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d1b0:	2100      	movs	r1, #0
 800d1b2:	68f8      	ldr	r0, [r7, #12]
 800d1b4:	f7ff fb39 	bl	800c82a <SDMMC_GetResponse>
 800d1b8:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d106      	bne.n	800d1d2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	0c1b      	lsrs	r3, r3, #16
 800d1c8:	b29a      	uxth	r2, r3
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	e011      	b.n	800d1f6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d002      	beq.n	800d1e2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d1dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d1e0:	e009      	b.n	800d1f6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d1e2:	693b      	ldr	r3, [r7, #16]
 800d1e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d002      	beq.n	800d1f2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d1ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d1f0:	e001      	b.n	800d1f6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d1f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	371c      	adds	r7, #28
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd90      	pop	{r4, r7, pc}
 800d1fe:	bf00      	nop
 800d200:	24000000 	.word	0x24000000
 800d204:	10624dd3 	.word	0x10624dd3
 800d208:	002000c5 	.word	0x002000c5

0800d20c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800d20c:	b490      	push	{r4, r7}
 800d20e:	b084      	sub	sp, #16
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d214:	4b21      	ldr	r3, [pc, #132]	; (800d29c <SDMMC_GetCmdResp7+0x90>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	4a21      	ldr	r2, [pc, #132]	; (800d2a0 <SDMMC_GetCmdResp7+0x94>)
 800d21a:	fba2 2303 	umull	r2, r3, r2, r3
 800d21e:	0a5b      	lsrs	r3, r3, #9
 800d220:	f241 3288 	movw	r2, #5000	; 0x1388
 800d224:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800d228:	4623      	mov	r3, r4
 800d22a:	1e5c      	subs	r4, r3, #1
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d102      	bne.n	800d236 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d230:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d234:	e02c      	b.n	800d290 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d23a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d242:	2b00      	cmp	r3, #0
 800d244:	d0f0      	beq.n	800d228 <SDMMC_GetCmdResp7+0x1c>
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d1eb      	bne.n	800d228 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d254:	f003 0304 	and.w	r3, r3, #4
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d004      	beq.n	800d266 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2204      	movs	r2, #4
 800d260:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d262:	2304      	movs	r3, #4
 800d264:	e014      	b.n	800d290 <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d26a:	f003 0301 	and.w	r3, r3, #1
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d004      	beq.n	800d27c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2201      	movs	r2, #1
 800d276:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d278:	2301      	movs	r3, #1
 800d27a:	e009      	b.n	800d290 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d284:	2b00      	cmp	r3, #0
 800d286:	d002      	beq.n	800d28e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2240      	movs	r2, #64	; 0x40
 800d28c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d28e:	2300      	movs	r3, #0

}
 800d290:	4618      	mov	r0, r3
 800d292:	3710      	adds	r7, #16
 800d294:	46bd      	mov	sp, r7
 800d296:	bc90      	pop	{r4, r7}
 800d298:	4770      	bx	lr
 800d29a:	bf00      	nop
 800d29c:	24000000 	.word	0x24000000
 800d2a0:	10624dd3 	.word	0x10624dd3

0800d2a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d2a4:	b084      	sub	sp, #16
 800d2a6:	b580      	push	{r7, lr}
 800d2a8:	b084      	sub	sp, #16
 800d2aa:	af00      	add	r7, sp, #0
 800d2ac:	6078      	str	r0, [r7, #4]
 800d2ae:	f107 001c 	add.w	r0, r7, #28
 800d2b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b8:	2b01      	cmp	r3, #1
 800d2ba:	d120      	bne.n	800d2fe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	68da      	ldr	r2, [r3, #12]
 800d2cc:	4b25      	ldr	r3, [pc, #148]	; (800d364 <USB_CoreInit+0xc0>)
 800d2ce:	4013      	ands	r3, r2
 800d2d0:	687a      	ldr	r2, [r7, #4]
 800d2d2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	68db      	ldr	r3, [r3, #12]
 800d2d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d2e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2e2:	2b01      	cmp	r3, #1
 800d2e4:	d105      	bne.n	800d2f2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	68db      	ldr	r3, [r3, #12]
 800d2ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f001 fa66 	bl	800e7c4 <USB_CoreReset>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	73fb      	strb	r3, [r7, #15]
 800d2fc:	e01a      	b.n	800d334 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	68db      	ldr	r3, [r3, #12]
 800d302:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	f001 fa5a 	bl	800e7c4 <USB_CoreReset>
 800d310:	4603      	mov	r3, r0
 800d312:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d316:	2b00      	cmp	r3, #0
 800d318:	d106      	bne.n	800d328 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d31e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	639a      	str	r2, [r3, #56]	; 0x38
 800d326:	e005      	b.n	800d334 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d32c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d336:	2b01      	cmp	r3, #1
 800d338:	d10b      	bne.n	800d352 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	689b      	ldr	r3, [r3, #8]
 800d33e:	f043 0206 	orr.w	r2, r3, #6
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	689b      	ldr	r3, [r3, #8]
 800d34a:	f043 0220 	orr.w	r2, r3, #32
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d352:	7bfb      	ldrb	r3, [r7, #15]
}
 800d354:	4618      	mov	r0, r3
 800d356:	3710      	adds	r7, #16
 800d358:	46bd      	mov	sp, r7
 800d35a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d35e:	b004      	add	sp, #16
 800d360:	4770      	bx	lr
 800d362:	bf00      	nop
 800d364:	ffbdffbf 	.word	0xffbdffbf

0800d368 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d368:	b480      	push	{r7}
 800d36a:	b087      	sub	sp, #28
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	60f8      	str	r0, [r7, #12]
 800d370:	60b9      	str	r1, [r7, #8]
 800d372:	4613      	mov	r3, r2
 800d374:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d376:	79fb      	ldrb	r3, [r7, #7]
 800d378:	2b02      	cmp	r3, #2
 800d37a:	d165      	bne.n	800d448 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d37c:	68bb      	ldr	r3, [r7, #8]
 800d37e:	4a41      	ldr	r2, [pc, #260]	; (800d484 <USB_SetTurnaroundTime+0x11c>)
 800d380:	4293      	cmp	r3, r2
 800d382:	d906      	bls.n	800d392 <USB_SetTurnaroundTime+0x2a>
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	4a40      	ldr	r2, [pc, #256]	; (800d488 <USB_SetTurnaroundTime+0x120>)
 800d388:	4293      	cmp	r3, r2
 800d38a:	d802      	bhi.n	800d392 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d38c:	230f      	movs	r3, #15
 800d38e:	617b      	str	r3, [r7, #20]
 800d390:	e062      	b.n	800d458 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	4a3c      	ldr	r2, [pc, #240]	; (800d488 <USB_SetTurnaroundTime+0x120>)
 800d396:	4293      	cmp	r3, r2
 800d398:	d906      	bls.n	800d3a8 <USB_SetTurnaroundTime+0x40>
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	4a3b      	ldr	r2, [pc, #236]	; (800d48c <USB_SetTurnaroundTime+0x124>)
 800d39e:	4293      	cmp	r3, r2
 800d3a0:	d802      	bhi.n	800d3a8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d3a2:	230e      	movs	r3, #14
 800d3a4:	617b      	str	r3, [r7, #20]
 800d3a6:	e057      	b.n	800d458 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	4a38      	ldr	r2, [pc, #224]	; (800d48c <USB_SetTurnaroundTime+0x124>)
 800d3ac:	4293      	cmp	r3, r2
 800d3ae:	d906      	bls.n	800d3be <USB_SetTurnaroundTime+0x56>
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	4a37      	ldr	r2, [pc, #220]	; (800d490 <USB_SetTurnaroundTime+0x128>)
 800d3b4:	4293      	cmp	r3, r2
 800d3b6:	d802      	bhi.n	800d3be <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d3b8:	230d      	movs	r3, #13
 800d3ba:	617b      	str	r3, [r7, #20]
 800d3bc:	e04c      	b.n	800d458 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	4a33      	ldr	r2, [pc, #204]	; (800d490 <USB_SetTurnaroundTime+0x128>)
 800d3c2:	4293      	cmp	r3, r2
 800d3c4:	d906      	bls.n	800d3d4 <USB_SetTurnaroundTime+0x6c>
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	4a32      	ldr	r2, [pc, #200]	; (800d494 <USB_SetTurnaroundTime+0x12c>)
 800d3ca:	4293      	cmp	r3, r2
 800d3cc:	d802      	bhi.n	800d3d4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d3ce:	230c      	movs	r3, #12
 800d3d0:	617b      	str	r3, [r7, #20]
 800d3d2:	e041      	b.n	800d458 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	4a2f      	ldr	r2, [pc, #188]	; (800d494 <USB_SetTurnaroundTime+0x12c>)
 800d3d8:	4293      	cmp	r3, r2
 800d3da:	d906      	bls.n	800d3ea <USB_SetTurnaroundTime+0x82>
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	4a2e      	ldr	r2, [pc, #184]	; (800d498 <USB_SetTurnaroundTime+0x130>)
 800d3e0:	4293      	cmp	r3, r2
 800d3e2:	d802      	bhi.n	800d3ea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d3e4:	230b      	movs	r3, #11
 800d3e6:	617b      	str	r3, [r7, #20]
 800d3e8:	e036      	b.n	800d458 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	4a2a      	ldr	r2, [pc, #168]	; (800d498 <USB_SetTurnaroundTime+0x130>)
 800d3ee:	4293      	cmp	r3, r2
 800d3f0:	d906      	bls.n	800d400 <USB_SetTurnaroundTime+0x98>
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	4a29      	ldr	r2, [pc, #164]	; (800d49c <USB_SetTurnaroundTime+0x134>)
 800d3f6:	4293      	cmp	r3, r2
 800d3f8:	d802      	bhi.n	800d400 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d3fa:	230a      	movs	r3, #10
 800d3fc:	617b      	str	r3, [r7, #20]
 800d3fe:	e02b      	b.n	800d458 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	4a26      	ldr	r2, [pc, #152]	; (800d49c <USB_SetTurnaroundTime+0x134>)
 800d404:	4293      	cmp	r3, r2
 800d406:	d906      	bls.n	800d416 <USB_SetTurnaroundTime+0xae>
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	4a25      	ldr	r2, [pc, #148]	; (800d4a0 <USB_SetTurnaroundTime+0x138>)
 800d40c:	4293      	cmp	r3, r2
 800d40e:	d802      	bhi.n	800d416 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d410:	2309      	movs	r3, #9
 800d412:	617b      	str	r3, [r7, #20]
 800d414:	e020      	b.n	800d458 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	4a21      	ldr	r2, [pc, #132]	; (800d4a0 <USB_SetTurnaroundTime+0x138>)
 800d41a:	4293      	cmp	r3, r2
 800d41c:	d906      	bls.n	800d42c <USB_SetTurnaroundTime+0xc4>
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	4a20      	ldr	r2, [pc, #128]	; (800d4a4 <USB_SetTurnaroundTime+0x13c>)
 800d422:	4293      	cmp	r3, r2
 800d424:	d802      	bhi.n	800d42c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d426:	2308      	movs	r3, #8
 800d428:	617b      	str	r3, [r7, #20]
 800d42a:	e015      	b.n	800d458 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	4a1d      	ldr	r2, [pc, #116]	; (800d4a4 <USB_SetTurnaroundTime+0x13c>)
 800d430:	4293      	cmp	r3, r2
 800d432:	d906      	bls.n	800d442 <USB_SetTurnaroundTime+0xda>
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	4a1c      	ldr	r2, [pc, #112]	; (800d4a8 <USB_SetTurnaroundTime+0x140>)
 800d438:	4293      	cmp	r3, r2
 800d43a:	d802      	bhi.n	800d442 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d43c:	2307      	movs	r3, #7
 800d43e:	617b      	str	r3, [r7, #20]
 800d440:	e00a      	b.n	800d458 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d442:	2306      	movs	r3, #6
 800d444:	617b      	str	r3, [r7, #20]
 800d446:	e007      	b.n	800d458 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d448:	79fb      	ldrb	r3, [r7, #7]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d102      	bne.n	800d454 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d44e:	2309      	movs	r3, #9
 800d450:	617b      	str	r3, [r7, #20]
 800d452:	e001      	b.n	800d458 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d454:	2309      	movs	r3, #9
 800d456:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	68db      	ldr	r3, [r3, #12]
 800d45c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	68da      	ldr	r2, [r3, #12]
 800d468:	697b      	ldr	r3, [r7, #20]
 800d46a:	029b      	lsls	r3, r3, #10
 800d46c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800d470:	431a      	orrs	r2, r3
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d476:	2300      	movs	r3, #0
}
 800d478:	4618      	mov	r0, r3
 800d47a:	371c      	adds	r7, #28
 800d47c:	46bd      	mov	sp, r7
 800d47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d482:	4770      	bx	lr
 800d484:	00d8acbf 	.word	0x00d8acbf
 800d488:	00e4e1bf 	.word	0x00e4e1bf
 800d48c:	00f423ff 	.word	0x00f423ff
 800d490:	0106737f 	.word	0x0106737f
 800d494:	011a499f 	.word	0x011a499f
 800d498:	01312cff 	.word	0x01312cff
 800d49c:	014ca43f 	.word	0x014ca43f
 800d4a0:	016e35ff 	.word	0x016e35ff
 800d4a4:	01a6ab1f 	.word	0x01a6ab1f
 800d4a8:	01e847ff 	.word	0x01e847ff

0800d4ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b083      	sub	sp, #12
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	689b      	ldr	r3, [r3, #8]
 800d4b8:	f043 0201 	orr.w	r2, r3, #1
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d4c0:	2300      	movs	r3, #0
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	370c      	adds	r7, #12
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4cc:	4770      	bx	lr

0800d4ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d4ce:	b480      	push	{r7}
 800d4d0:	b083      	sub	sp, #12
 800d4d2:	af00      	add	r7, sp, #0
 800d4d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	689b      	ldr	r3, [r3, #8]
 800d4da:	f023 0201 	bic.w	r2, r3, #1
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d4e2:	2300      	movs	r3, #0
}
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	370c      	adds	r7, #12
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ee:	4770      	bx	lr

0800d4f0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b082      	sub	sp, #8
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
 800d4f8:	460b      	mov	r3, r1
 800d4fa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	68db      	ldr	r3, [r3, #12]
 800d500:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d508:	78fb      	ldrb	r3, [r7, #3]
 800d50a:	2b01      	cmp	r3, #1
 800d50c:	d106      	bne.n	800d51c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	68db      	ldr	r3, [r3, #12]
 800d512:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	60da      	str	r2, [r3, #12]
 800d51a:	e00b      	b.n	800d534 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800d51c:	78fb      	ldrb	r3, [r7, #3]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d106      	bne.n	800d530 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	68db      	ldr	r3, [r3, #12]
 800d526:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	60da      	str	r2, [r3, #12]
 800d52e:	e001      	b.n	800d534 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800d530:	2301      	movs	r3, #1
 800d532:	e003      	b.n	800d53c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800d534:	2032      	movs	r0, #50	; 0x32
 800d536:	f7f4 fa15 	bl	8001964 <HAL_Delay>

  return HAL_OK;
 800d53a:	2300      	movs	r3, #0
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3708      	adds	r7, #8
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}

0800d544 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d544:	b084      	sub	sp, #16
 800d546:	b580      	push	{r7, lr}
 800d548:	b086      	sub	sp, #24
 800d54a:	af00      	add	r7, sp, #0
 800d54c:	6078      	str	r0, [r7, #4]
 800d54e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d552:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d556:	2300      	movs	r3, #0
 800d558:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d55e:	2300      	movs	r3, #0
 800d560:	613b      	str	r3, [r7, #16]
 800d562:	e009      	b.n	800d578 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d564:	687a      	ldr	r2, [r7, #4]
 800d566:	693b      	ldr	r3, [r7, #16]
 800d568:	3340      	adds	r3, #64	; 0x40
 800d56a:	009b      	lsls	r3, r3, #2
 800d56c:	4413      	add	r3, r2
 800d56e:	2200      	movs	r2, #0
 800d570:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d572:	693b      	ldr	r3, [r7, #16]
 800d574:	3301      	adds	r3, #1
 800d576:	613b      	str	r3, [r7, #16]
 800d578:	693b      	ldr	r3, [r7, #16]
 800d57a:	2b0e      	cmp	r3, #14
 800d57c:	d9f2      	bls.n	800d564 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d57e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d580:	2b00      	cmp	r3, #0
 800d582:	d11c      	bne.n	800d5be <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d58a:	685b      	ldr	r3, [r3, #4]
 800d58c:	68fa      	ldr	r2, [r7, #12]
 800d58e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d592:	f043 0302 	orr.w	r3, r3, #2
 800d596:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d59c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	601a      	str	r2, [r3, #0]
 800d5bc:	e005      	b.n	800d5ca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d5d0:	461a      	mov	r2, r3
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5dc:	4619      	mov	r1, r3
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5e4:	461a      	mov	r2, r3
 800d5e6:	680b      	ldr	r3, [r1, #0]
 800d5e8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ec:	2b01      	cmp	r3, #1
 800d5ee:	d10c      	bne.n	800d60a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d104      	bne.n	800d600 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d5f6:	2100      	movs	r1, #0
 800d5f8:	6878      	ldr	r0, [r7, #4]
 800d5fa:	f000 f949 	bl	800d890 <USB_SetDevSpeed>
 800d5fe:	e008      	b.n	800d612 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d600:	2101      	movs	r1, #1
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f000 f944 	bl	800d890 <USB_SetDevSpeed>
 800d608:	e003      	b.n	800d612 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d60a:	2103      	movs	r1, #3
 800d60c:	6878      	ldr	r0, [r7, #4]
 800d60e:	f000 f93f 	bl	800d890 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d612:	2110      	movs	r1, #16
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f000 f8f3 	bl	800d800 <USB_FlushTxFifo>
 800d61a:	4603      	mov	r3, r0
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d001      	beq.n	800d624 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800d620:	2301      	movs	r3, #1
 800d622:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d624:	6878      	ldr	r0, [r7, #4]
 800d626:	f000 f911 	bl	800d84c <USB_FlushRxFifo>
 800d62a:	4603      	mov	r3, r0
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d001      	beq.n	800d634 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800d630:	2301      	movs	r3, #1
 800d632:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d63a:	461a      	mov	r2, r3
 800d63c:	2300      	movs	r3, #0
 800d63e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d646:	461a      	mov	r2, r3
 800d648:	2300      	movs	r3, #0
 800d64a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d652:	461a      	mov	r2, r3
 800d654:	2300      	movs	r3, #0
 800d656:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d658:	2300      	movs	r3, #0
 800d65a:	613b      	str	r3, [r7, #16]
 800d65c:	e043      	b.n	800d6e6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d65e:	693b      	ldr	r3, [r7, #16]
 800d660:	015a      	lsls	r2, r3, #5
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	4413      	add	r3, r2
 800d666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d670:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d674:	d118      	bne.n	800d6a8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800d676:	693b      	ldr	r3, [r7, #16]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d10a      	bne.n	800d692 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d67c:	693b      	ldr	r3, [r7, #16]
 800d67e:	015a      	lsls	r2, r3, #5
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	4413      	add	r3, r2
 800d684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d688:	461a      	mov	r2, r3
 800d68a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d68e:	6013      	str	r3, [r2, #0]
 800d690:	e013      	b.n	800d6ba <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d692:	693b      	ldr	r3, [r7, #16]
 800d694:	015a      	lsls	r2, r3, #5
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	4413      	add	r3, r2
 800d69a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d69e:	461a      	mov	r2, r3
 800d6a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d6a4:	6013      	str	r3, [r2, #0]
 800d6a6:	e008      	b.n	800d6ba <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d6a8:	693b      	ldr	r3, [r7, #16]
 800d6aa:	015a      	lsls	r2, r3, #5
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	4413      	add	r3, r2
 800d6b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6b4:	461a      	mov	r2, r3
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d6ba:	693b      	ldr	r3, [r7, #16]
 800d6bc:	015a      	lsls	r2, r3, #5
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	4413      	add	r3, r2
 800d6c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6c6:	461a      	mov	r2, r3
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d6cc:	693b      	ldr	r3, [r7, #16]
 800d6ce:	015a      	lsls	r2, r3, #5
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	4413      	add	r3, r2
 800d6d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6d8:	461a      	mov	r2, r3
 800d6da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d6de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	3301      	adds	r3, #1
 800d6e4:	613b      	str	r3, [r7, #16]
 800d6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e8:	693a      	ldr	r2, [r7, #16]
 800d6ea:	429a      	cmp	r2, r3
 800d6ec:	d3b7      	bcc.n	800d65e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	613b      	str	r3, [r7, #16]
 800d6f2:	e043      	b.n	800d77c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d6f4:	693b      	ldr	r3, [r7, #16]
 800d6f6:	015a      	lsls	r2, r3, #5
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	4413      	add	r3, r2
 800d6fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d706:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d70a:	d118      	bne.n	800d73e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800d70c:	693b      	ldr	r3, [r7, #16]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d10a      	bne.n	800d728 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d712:	693b      	ldr	r3, [r7, #16]
 800d714:	015a      	lsls	r2, r3, #5
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	4413      	add	r3, r2
 800d71a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d71e:	461a      	mov	r2, r3
 800d720:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d724:	6013      	str	r3, [r2, #0]
 800d726:	e013      	b.n	800d750 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d728:	693b      	ldr	r3, [r7, #16]
 800d72a:	015a      	lsls	r2, r3, #5
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	4413      	add	r3, r2
 800d730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d734:	461a      	mov	r2, r3
 800d736:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d73a:	6013      	str	r3, [r2, #0]
 800d73c:	e008      	b.n	800d750 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	015a      	lsls	r2, r3, #5
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	4413      	add	r3, r2
 800d746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d74a:	461a      	mov	r2, r3
 800d74c:	2300      	movs	r3, #0
 800d74e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	015a      	lsls	r2, r3, #5
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	4413      	add	r3, r2
 800d758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d75c:	461a      	mov	r2, r3
 800d75e:	2300      	movs	r3, #0
 800d760:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d762:	693b      	ldr	r3, [r7, #16]
 800d764:	015a      	lsls	r2, r3, #5
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	4413      	add	r3, r2
 800d76a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d76e:	461a      	mov	r2, r3
 800d770:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d774:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	3301      	adds	r3, #1
 800d77a:	613b      	str	r3, [r7, #16]
 800d77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d77e:	693a      	ldr	r2, [r7, #16]
 800d780:	429a      	cmp	r2, r3
 800d782:	d3b7      	bcc.n	800d6f4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d78a:	691b      	ldr	r3, [r3, #16]
 800d78c:	68fa      	ldr	r2, [r7, #12]
 800d78e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d792:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d796:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2200      	movs	r2, #0
 800d79c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d7a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d105      	bne.n	800d7b8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	699b      	ldr	r3, [r3, #24]
 800d7b0:	f043 0210 	orr.w	r2, r3, #16
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	699a      	ldr	r2, [r3, #24]
 800d7bc:	4b0e      	ldr	r3, [pc, #56]	; (800d7f8 <USB_DevInit+0x2b4>)
 800d7be:	4313      	orrs	r3, r2
 800d7c0:	687a      	ldr	r2, [r7, #4]
 800d7c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d7c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d005      	beq.n	800d7d6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	699b      	ldr	r3, [r3, #24]
 800d7ce:	f043 0208 	orr.w	r2, r3, #8
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d7d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7d8:	2b01      	cmp	r3, #1
 800d7da:	d105      	bne.n	800d7e8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	699a      	ldr	r2, [r3, #24]
 800d7e0:	4b06      	ldr	r3, [pc, #24]	; (800d7fc <USB_DevInit+0x2b8>)
 800d7e2:	4313      	orrs	r3, r2
 800d7e4:	687a      	ldr	r2, [r7, #4]
 800d7e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d7e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	3718      	adds	r7, #24
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d7f4:	b004      	add	sp, #16
 800d7f6:	4770      	bx	lr
 800d7f8:	803c3800 	.word	0x803c3800
 800d7fc:	40000004 	.word	0x40000004

0800d800 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d800:	b480      	push	{r7}
 800d802:	b085      	sub	sp, #20
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
 800d808:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800d80a:	2300      	movs	r3, #0
 800d80c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	019b      	lsls	r3, r3, #6
 800d812:	f043 0220 	orr.w	r2, r3, #32
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	3301      	adds	r3, #1
 800d81e:	60fb      	str	r3, [r7, #12]
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	4a09      	ldr	r2, [pc, #36]	; (800d848 <USB_FlushTxFifo+0x48>)
 800d824:	4293      	cmp	r3, r2
 800d826:	d901      	bls.n	800d82c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800d828:	2303      	movs	r3, #3
 800d82a:	e006      	b.n	800d83a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	691b      	ldr	r3, [r3, #16]
 800d830:	f003 0320 	and.w	r3, r3, #32
 800d834:	2b20      	cmp	r3, #32
 800d836:	d0f0      	beq.n	800d81a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d838:	2300      	movs	r3, #0
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	3714      	adds	r7, #20
 800d83e:	46bd      	mov	sp, r7
 800d840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d844:	4770      	bx	lr
 800d846:	bf00      	nop
 800d848:	00030d40 	.word	0x00030d40

0800d84c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d84c:	b480      	push	{r7}
 800d84e:	b085      	sub	sp, #20
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800d854:	2300      	movs	r3, #0
 800d856:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2210      	movs	r2, #16
 800d85c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	3301      	adds	r3, #1
 800d862:	60fb      	str	r3, [r7, #12]
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	4a09      	ldr	r2, [pc, #36]	; (800d88c <USB_FlushRxFifo+0x40>)
 800d868:	4293      	cmp	r3, r2
 800d86a:	d901      	bls.n	800d870 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800d86c:	2303      	movs	r3, #3
 800d86e:	e006      	b.n	800d87e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	691b      	ldr	r3, [r3, #16]
 800d874:	f003 0310 	and.w	r3, r3, #16
 800d878:	2b10      	cmp	r3, #16
 800d87a:	d0f0      	beq.n	800d85e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d87c:	2300      	movs	r3, #0
}
 800d87e:	4618      	mov	r0, r3
 800d880:	3714      	adds	r7, #20
 800d882:	46bd      	mov	sp, r7
 800d884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d888:	4770      	bx	lr
 800d88a:	bf00      	nop
 800d88c:	00030d40 	.word	0x00030d40

0800d890 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d890:	b480      	push	{r7}
 800d892:	b085      	sub	sp, #20
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
 800d898:	460b      	mov	r3, r1
 800d89a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8a6:	681a      	ldr	r2, [r3, #0]
 800d8a8:	78fb      	ldrb	r3, [r7, #3]
 800d8aa:	68f9      	ldr	r1, [r7, #12]
 800d8ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d8b0:	4313      	orrs	r3, r2
 800d8b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d8b4:	2300      	movs	r3, #0
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3714      	adds	r7, #20
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c0:	4770      	bx	lr

0800d8c2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d8c2:	b480      	push	{r7}
 800d8c4:	b087      	sub	sp, #28
 800d8c6:	af00      	add	r7, sp, #0
 800d8c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d8ce:	693b      	ldr	r3, [r7, #16]
 800d8d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8d4:	689b      	ldr	r3, [r3, #8]
 800d8d6:	f003 0306 	and.w	r3, r3, #6
 800d8da:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d102      	bne.n	800d8e8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	75fb      	strb	r3, [r7, #23]
 800d8e6:	e00a      	b.n	800d8fe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	2b02      	cmp	r3, #2
 800d8ec:	d002      	beq.n	800d8f4 <USB_GetDevSpeed+0x32>
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	2b06      	cmp	r3, #6
 800d8f2:	d102      	bne.n	800d8fa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d8f4:	2302      	movs	r3, #2
 800d8f6:	75fb      	strb	r3, [r7, #23]
 800d8f8:	e001      	b.n	800d8fe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d8fa:	230f      	movs	r3, #15
 800d8fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d8fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800d900:	4618      	mov	r0, r3
 800d902:	371c      	adds	r7, #28
 800d904:	46bd      	mov	sp, r7
 800d906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90a:	4770      	bx	lr

0800d90c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d90c:	b480      	push	{r7}
 800d90e:	b085      	sub	sp, #20
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
 800d914:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	781b      	ldrb	r3, [r3, #0]
 800d91e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	785b      	ldrb	r3, [r3, #1]
 800d924:	2b01      	cmp	r3, #1
 800d926:	d139      	bne.n	800d99c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d92e:	69da      	ldr	r2, [r3, #28]
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	781b      	ldrb	r3, [r3, #0]
 800d934:	f003 030f 	and.w	r3, r3, #15
 800d938:	2101      	movs	r1, #1
 800d93a:	fa01 f303 	lsl.w	r3, r1, r3
 800d93e:	b29b      	uxth	r3, r3
 800d940:	68f9      	ldr	r1, [r7, #12]
 800d942:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d946:	4313      	orrs	r3, r2
 800d948:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	015a      	lsls	r2, r3, #5
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	4413      	add	r3, r2
 800d952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d153      	bne.n	800da08 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	015a      	lsls	r2, r3, #5
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	4413      	add	r3, r2
 800d968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d96c:	681a      	ldr	r2, [r3, #0]
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	689b      	ldr	r3, [r3, #8]
 800d972:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	78db      	ldrb	r3, [r3, #3]
 800d97a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d97c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	059b      	lsls	r3, r3, #22
 800d982:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d984:	431a      	orrs	r2, r3
 800d986:	68bb      	ldr	r3, [r7, #8]
 800d988:	0159      	lsls	r1, r3, #5
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	440b      	add	r3, r1
 800d98e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d992:	4619      	mov	r1, r3
 800d994:	4b20      	ldr	r3, [pc, #128]	; (800da18 <USB_ActivateEndpoint+0x10c>)
 800d996:	4313      	orrs	r3, r2
 800d998:	600b      	str	r3, [r1, #0]
 800d99a:	e035      	b.n	800da08 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9a2:	69da      	ldr	r2, [r3, #28]
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	781b      	ldrb	r3, [r3, #0]
 800d9a8:	f003 030f 	and.w	r3, r3, #15
 800d9ac:	2101      	movs	r1, #1
 800d9ae:	fa01 f303 	lsl.w	r3, r1, r3
 800d9b2:	041b      	lsls	r3, r3, #16
 800d9b4:	68f9      	ldr	r1, [r7, #12]
 800d9b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d9ba:	4313      	orrs	r3, r2
 800d9bc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	015a      	lsls	r2, r3, #5
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	4413      	add	r3, r2
 800d9c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d119      	bne.n	800da08 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	015a      	lsls	r2, r3, #5
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	4413      	add	r3, r2
 800d9dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9e0:	681a      	ldr	r2, [r3, #0]
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	689b      	ldr	r3, [r3, #8]
 800d9e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	78db      	ldrb	r3, [r3, #3]
 800d9ee:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d9f0:	430b      	orrs	r3, r1
 800d9f2:	431a      	orrs	r2, r3
 800d9f4:	68bb      	ldr	r3, [r7, #8]
 800d9f6:	0159      	lsls	r1, r3, #5
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	440b      	add	r3, r1
 800d9fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da00:	4619      	mov	r1, r3
 800da02:	4b05      	ldr	r3, [pc, #20]	; (800da18 <USB_ActivateEndpoint+0x10c>)
 800da04:	4313      	orrs	r3, r2
 800da06:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800da08:	2300      	movs	r3, #0
}
 800da0a:	4618      	mov	r0, r3
 800da0c:	3714      	adds	r7, #20
 800da0e:	46bd      	mov	sp, r7
 800da10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da14:	4770      	bx	lr
 800da16:	bf00      	nop
 800da18:	10008000 	.word	0x10008000

0800da1c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800da1c:	b480      	push	{r7}
 800da1e:	b085      	sub	sp, #20
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
 800da24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	781b      	ldrb	r3, [r3, #0]
 800da2e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	785b      	ldrb	r3, [r3, #1]
 800da34:	2b01      	cmp	r3, #1
 800da36:	d135      	bne.n	800daa4 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	781b      	ldrb	r3, [r3, #0]
 800da44:	f003 030f 	and.w	r3, r3, #15
 800da48:	2101      	movs	r1, #1
 800da4a:	fa01 f303 	lsl.w	r3, r1, r3
 800da4e:	b29b      	uxth	r3, r3
 800da50:	43db      	mvns	r3, r3
 800da52:	68f9      	ldr	r1, [r7, #12]
 800da54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800da58:	4013      	ands	r3, r2
 800da5a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da62:	69da      	ldr	r2, [r3, #28]
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	781b      	ldrb	r3, [r3, #0]
 800da68:	f003 030f 	and.w	r3, r3, #15
 800da6c:	2101      	movs	r1, #1
 800da6e:	fa01 f303 	lsl.w	r3, r1, r3
 800da72:	b29b      	uxth	r3, r3
 800da74:	43db      	mvns	r3, r3
 800da76:	68f9      	ldr	r1, [r7, #12]
 800da78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800da7c:	4013      	ands	r3, r2
 800da7e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	015a      	lsls	r2, r3, #5
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	4413      	add	r3, r2
 800da88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da8c:	681a      	ldr	r2, [r3, #0]
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	0159      	lsls	r1, r3, #5
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	440b      	add	r3, r1
 800da96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da9a:	4619      	mov	r1, r3
 800da9c:	4b1f      	ldr	r3, [pc, #124]	; (800db1c <USB_DeactivateEndpoint+0x100>)
 800da9e:	4013      	ands	r3, r2
 800daa0:	600b      	str	r3, [r1, #0]
 800daa2:	e034      	b.n	800db0e <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800daaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	781b      	ldrb	r3, [r3, #0]
 800dab0:	f003 030f 	and.w	r3, r3, #15
 800dab4:	2101      	movs	r1, #1
 800dab6:	fa01 f303 	lsl.w	r3, r1, r3
 800daba:	041b      	lsls	r3, r3, #16
 800dabc:	43db      	mvns	r3, r3
 800dabe:	68f9      	ldr	r1, [r7, #12]
 800dac0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dac4:	4013      	ands	r3, r2
 800dac6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dace:	69da      	ldr	r2, [r3, #28]
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	781b      	ldrb	r3, [r3, #0]
 800dad4:	f003 030f 	and.w	r3, r3, #15
 800dad8:	2101      	movs	r1, #1
 800dada:	fa01 f303 	lsl.w	r3, r1, r3
 800dade:	041b      	lsls	r3, r3, #16
 800dae0:	43db      	mvns	r3, r3
 800dae2:	68f9      	ldr	r1, [r7, #12]
 800dae4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dae8:	4013      	ands	r3, r2
 800daea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800daec:	68bb      	ldr	r3, [r7, #8]
 800daee:	015a      	lsls	r2, r3, #5
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	4413      	add	r3, r2
 800daf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800daf8:	681a      	ldr	r2, [r3, #0]
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	0159      	lsls	r1, r3, #5
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	440b      	add	r3, r1
 800db02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db06:	4619      	mov	r1, r3
 800db08:	4b05      	ldr	r3, [pc, #20]	; (800db20 <USB_DeactivateEndpoint+0x104>)
 800db0a:	4013      	ands	r3, r2
 800db0c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800db0e:	2300      	movs	r3, #0
}
 800db10:	4618      	mov	r0, r3
 800db12:	3714      	adds	r7, #20
 800db14:	46bd      	mov	sp, r7
 800db16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1a:	4770      	bx	lr
 800db1c:	ec337800 	.word	0xec337800
 800db20:	eff37800 	.word	0xeff37800

0800db24 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b08a      	sub	sp, #40	; 0x28
 800db28:	af02      	add	r7, sp, #8
 800db2a:	60f8      	str	r0, [r7, #12]
 800db2c:	60b9      	str	r1, [r7, #8]
 800db2e:	4613      	mov	r3, r2
 800db30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800db36:	68bb      	ldr	r3, [r7, #8]
 800db38:	781b      	ldrb	r3, [r3, #0]
 800db3a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800db3c:	68bb      	ldr	r3, [r7, #8]
 800db3e:	785b      	ldrb	r3, [r3, #1]
 800db40:	2b01      	cmp	r3, #1
 800db42:	f040 8163 	bne.w	800de0c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800db46:	68bb      	ldr	r3, [r7, #8]
 800db48:	695b      	ldr	r3, [r3, #20]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d132      	bne.n	800dbb4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800db4e:	69bb      	ldr	r3, [r7, #24]
 800db50:	015a      	lsls	r2, r3, #5
 800db52:	69fb      	ldr	r3, [r7, #28]
 800db54:	4413      	add	r3, r2
 800db56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db5a:	691a      	ldr	r2, [r3, #16]
 800db5c:	69bb      	ldr	r3, [r7, #24]
 800db5e:	0159      	lsls	r1, r3, #5
 800db60:	69fb      	ldr	r3, [r7, #28]
 800db62:	440b      	add	r3, r1
 800db64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db68:	4619      	mov	r1, r3
 800db6a:	4ba5      	ldr	r3, [pc, #660]	; (800de00 <USB_EPStartXfer+0x2dc>)
 800db6c:	4013      	ands	r3, r2
 800db6e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800db70:	69bb      	ldr	r3, [r7, #24]
 800db72:	015a      	lsls	r2, r3, #5
 800db74:	69fb      	ldr	r3, [r7, #28]
 800db76:	4413      	add	r3, r2
 800db78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db7c:	691b      	ldr	r3, [r3, #16]
 800db7e:	69ba      	ldr	r2, [r7, #24]
 800db80:	0151      	lsls	r1, r2, #5
 800db82:	69fa      	ldr	r2, [r7, #28]
 800db84:	440a      	add	r2, r1
 800db86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800db8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800db90:	69bb      	ldr	r3, [r7, #24]
 800db92:	015a      	lsls	r2, r3, #5
 800db94:	69fb      	ldr	r3, [r7, #28]
 800db96:	4413      	add	r3, r2
 800db98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db9c:	691a      	ldr	r2, [r3, #16]
 800db9e:	69bb      	ldr	r3, [r7, #24]
 800dba0:	0159      	lsls	r1, r3, #5
 800dba2:	69fb      	ldr	r3, [r7, #28]
 800dba4:	440b      	add	r3, r1
 800dba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbaa:	4619      	mov	r1, r3
 800dbac:	4b95      	ldr	r3, [pc, #596]	; (800de04 <USB_EPStartXfer+0x2e0>)
 800dbae:	4013      	ands	r3, r2
 800dbb0:	610b      	str	r3, [r1, #16]
 800dbb2:	e074      	b.n	800dc9e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dbb4:	69bb      	ldr	r3, [r7, #24]
 800dbb6:	015a      	lsls	r2, r3, #5
 800dbb8:	69fb      	ldr	r3, [r7, #28]
 800dbba:	4413      	add	r3, r2
 800dbbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbc0:	691a      	ldr	r2, [r3, #16]
 800dbc2:	69bb      	ldr	r3, [r7, #24]
 800dbc4:	0159      	lsls	r1, r3, #5
 800dbc6:	69fb      	ldr	r3, [r7, #28]
 800dbc8:	440b      	add	r3, r1
 800dbca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbce:	4619      	mov	r1, r3
 800dbd0:	4b8c      	ldr	r3, [pc, #560]	; (800de04 <USB_EPStartXfer+0x2e0>)
 800dbd2:	4013      	ands	r3, r2
 800dbd4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dbd6:	69bb      	ldr	r3, [r7, #24]
 800dbd8:	015a      	lsls	r2, r3, #5
 800dbda:	69fb      	ldr	r3, [r7, #28]
 800dbdc:	4413      	add	r3, r2
 800dbde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbe2:	691a      	ldr	r2, [r3, #16]
 800dbe4:	69bb      	ldr	r3, [r7, #24]
 800dbe6:	0159      	lsls	r1, r3, #5
 800dbe8:	69fb      	ldr	r3, [r7, #28]
 800dbea:	440b      	add	r3, r1
 800dbec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbf0:	4619      	mov	r1, r3
 800dbf2:	4b83      	ldr	r3, [pc, #524]	; (800de00 <USB_EPStartXfer+0x2dc>)
 800dbf4:	4013      	ands	r3, r2
 800dbf6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800dbf8:	69bb      	ldr	r3, [r7, #24]
 800dbfa:	015a      	lsls	r2, r3, #5
 800dbfc:	69fb      	ldr	r3, [r7, #28]
 800dbfe:	4413      	add	r3, r2
 800dc00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc04:	691a      	ldr	r2, [r3, #16]
 800dc06:	68bb      	ldr	r3, [r7, #8]
 800dc08:	6959      	ldr	r1, [r3, #20]
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	689b      	ldr	r3, [r3, #8]
 800dc0e:	440b      	add	r3, r1
 800dc10:	1e59      	subs	r1, r3, #1
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	689b      	ldr	r3, [r3, #8]
 800dc16:	fbb1 f3f3 	udiv	r3, r1, r3
 800dc1a:	04d9      	lsls	r1, r3, #19
 800dc1c:	4b7a      	ldr	r3, [pc, #488]	; (800de08 <USB_EPStartXfer+0x2e4>)
 800dc1e:	400b      	ands	r3, r1
 800dc20:	69b9      	ldr	r1, [r7, #24]
 800dc22:	0148      	lsls	r0, r1, #5
 800dc24:	69f9      	ldr	r1, [r7, #28]
 800dc26:	4401      	add	r1, r0
 800dc28:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800dc2c:	4313      	orrs	r3, r2
 800dc2e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800dc30:	69bb      	ldr	r3, [r7, #24]
 800dc32:	015a      	lsls	r2, r3, #5
 800dc34:	69fb      	ldr	r3, [r7, #28]
 800dc36:	4413      	add	r3, r2
 800dc38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc3c:	691a      	ldr	r2, [r3, #16]
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	695b      	ldr	r3, [r3, #20]
 800dc42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dc46:	69b9      	ldr	r1, [r7, #24]
 800dc48:	0148      	lsls	r0, r1, #5
 800dc4a:	69f9      	ldr	r1, [r7, #28]
 800dc4c:	4401      	add	r1, r0
 800dc4e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800dc52:	4313      	orrs	r3, r2
 800dc54:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800dc56:	68bb      	ldr	r3, [r7, #8]
 800dc58:	78db      	ldrb	r3, [r3, #3]
 800dc5a:	2b01      	cmp	r3, #1
 800dc5c:	d11f      	bne.n	800dc9e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800dc5e:	69bb      	ldr	r3, [r7, #24]
 800dc60:	015a      	lsls	r2, r3, #5
 800dc62:	69fb      	ldr	r3, [r7, #28]
 800dc64:	4413      	add	r3, r2
 800dc66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc6a:	691b      	ldr	r3, [r3, #16]
 800dc6c:	69ba      	ldr	r2, [r7, #24]
 800dc6e:	0151      	lsls	r1, r2, #5
 800dc70:	69fa      	ldr	r2, [r7, #28]
 800dc72:	440a      	add	r2, r1
 800dc74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc78:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800dc7c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800dc7e:	69bb      	ldr	r3, [r7, #24]
 800dc80:	015a      	lsls	r2, r3, #5
 800dc82:	69fb      	ldr	r3, [r7, #28]
 800dc84:	4413      	add	r3, r2
 800dc86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc8a:	691b      	ldr	r3, [r3, #16]
 800dc8c:	69ba      	ldr	r2, [r7, #24]
 800dc8e:	0151      	lsls	r1, r2, #5
 800dc90:	69fa      	ldr	r2, [r7, #28]
 800dc92:	440a      	add	r2, r1
 800dc94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dc9c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800dc9e:	79fb      	ldrb	r3, [r7, #7]
 800dca0:	2b01      	cmp	r3, #1
 800dca2:	d14b      	bne.n	800dd3c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800dca4:	68bb      	ldr	r3, [r7, #8]
 800dca6:	691b      	ldr	r3, [r3, #16]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d009      	beq.n	800dcc0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800dcac:	69bb      	ldr	r3, [r7, #24]
 800dcae:	015a      	lsls	r2, r3, #5
 800dcb0:	69fb      	ldr	r3, [r7, #28]
 800dcb2:	4413      	add	r3, r2
 800dcb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcb8:	461a      	mov	r2, r3
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	691b      	ldr	r3, [r3, #16]
 800dcbe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	78db      	ldrb	r3, [r3, #3]
 800dcc4:	2b01      	cmp	r3, #1
 800dcc6:	d128      	bne.n	800dd1a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800dcc8:	69fb      	ldr	r3, [r7, #28]
 800dcca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dcce:	689b      	ldr	r3, [r3, #8]
 800dcd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d110      	bne.n	800dcfa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800dcd8:	69bb      	ldr	r3, [r7, #24]
 800dcda:	015a      	lsls	r2, r3, #5
 800dcdc:	69fb      	ldr	r3, [r7, #28]
 800dcde:	4413      	add	r3, r2
 800dce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	69ba      	ldr	r2, [r7, #24]
 800dce8:	0151      	lsls	r1, r2, #5
 800dcea:	69fa      	ldr	r2, [r7, #28]
 800dcec:	440a      	add	r2, r1
 800dcee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dcf2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dcf6:	6013      	str	r3, [r2, #0]
 800dcf8:	e00f      	b.n	800dd1a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800dcfa:	69bb      	ldr	r3, [r7, #24]
 800dcfc:	015a      	lsls	r2, r3, #5
 800dcfe:	69fb      	ldr	r3, [r7, #28]
 800dd00:	4413      	add	r3, r2
 800dd02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	69ba      	ldr	r2, [r7, #24]
 800dd0a:	0151      	lsls	r1, r2, #5
 800dd0c:	69fa      	ldr	r2, [r7, #28]
 800dd0e:	440a      	add	r2, r1
 800dd10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dd18:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dd1a:	69bb      	ldr	r3, [r7, #24]
 800dd1c:	015a      	lsls	r2, r3, #5
 800dd1e:	69fb      	ldr	r3, [r7, #28]
 800dd20:	4413      	add	r3, r2
 800dd22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	69ba      	ldr	r2, [r7, #24]
 800dd2a:	0151      	lsls	r1, r2, #5
 800dd2c:	69fa      	ldr	r2, [r7, #28]
 800dd2e:	440a      	add	r2, r1
 800dd30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd34:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dd38:	6013      	str	r3, [r2, #0]
 800dd3a:	e133      	b.n	800dfa4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dd3c:	69bb      	ldr	r3, [r7, #24]
 800dd3e:	015a      	lsls	r2, r3, #5
 800dd40:	69fb      	ldr	r3, [r7, #28]
 800dd42:	4413      	add	r3, r2
 800dd44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	69ba      	ldr	r2, [r7, #24]
 800dd4c:	0151      	lsls	r1, r2, #5
 800dd4e:	69fa      	ldr	r2, [r7, #28]
 800dd50:	440a      	add	r2, r1
 800dd52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dd5a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800dd5c:	68bb      	ldr	r3, [r7, #8]
 800dd5e:	78db      	ldrb	r3, [r3, #3]
 800dd60:	2b01      	cmp	r3, #1
 800dd62:	d015      	beq.n	800dd90 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	695b      	ldr	r3, [r3, #20]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	f000 811b 	beq.w	800dfa4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800dd6e:	69fb      	ldr	r3, [r7, #28]
 800dd70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	781b      	ldrb	r3, [r3, #0]
 800dd7a:	f003 030f 	and.w	r3, r3, #15
 800dd7e:	2101      	movs	r1, #1
 800dd80:	fa01 f303 	lsl.w	r3, r1, r3
 800dd84:	69f9      	ldr	r1, [r7, #28]
 800dd86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dd8a:	4313      	orrs	r3, r2
 800dd8c:	634b      	str	r3, [r1, #52]	; 0x34
 800dd8e:	e109      	b.n	800dfa4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800dd90:	69fb      	ldr	r3, [r7, #28]
 800dd92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd96:	689b      	ldr	r3, [r3, #8]
 800dd98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d110      	bne.n	800ddc2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800dda0:	69bb      	ldr	r3, [r7, #24]
 800dda2:	015a      	lsls	r2, r3, #5
 800dda4:	69fb      	ldr	r3, [r7, #28]
 800dda6:	4413      	add	r3, r2
 800dda8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	69ba      	ldr	r2, [r7, #24]
 800ddb0:	0151      	lsls	r1, r2, #5
 800ddb2:	69fa      	ldr	r2, [r7, #28]
 800ddb4:	440a      	add	r2, r1
 800ddb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ddba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ddbe:	6013      	str	r3, [r2, #0]
 800ddc0:	e00f      	b.n	800dde2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ddc2:	69bb      	ldr	r3, [r7, #24]
 800ddc4:	015a      	lsls	r2, r3, #5
 800ddc6:	69fb      	ldr	r3, [r7, #28]
 800ddc8:	4413      	add	r3, r2
 800ddca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	69ba      	ldr	r2, [r7, #24]
 800ddd2:	0151      	lsls	r1, r2, #5
 800ddd4:	69fa      	ldr	r2, [r7, #28]
 800ddd6:	440a      	add	r2, r1
 800ddd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dde0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800dde2:	68bb      	ldr	r3, [r7, #8]
 800dde4:	68d9      	ldr	r1, [r3, #12]
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	781a      	ldrb	r2, [r3, #0]
 800ddea:	68bb      	ldr	r3, [r7, #8]
 800ddec:	695b      	ldr	r3, [r3, #20]
 800ddee:	b298      	uxth	r0, r3
 800ddf0:	79fb      	ldrb	r3, [r7, #7]
 800ddf2:	9300      	str	r3, [sp, #0]
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	68f8      	ldr	r0, [r7, #12]
 800ddf8:	f000 fa38 	bl	800e26c <USB_WritePacket>
 800ddfc:	e0d2      	b.n	800dfa4 <USB_EPStartXfer+0x480>
 800ddfe:	bf00      	nop
 800de00:	e007ffff 	.word	0xe007ffff
 800de04:	fff80000 	.word	0xfff80000
 800de08:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800de0c:	69bb      	ldr	r3, [r7, #24]
 800de0e:	015a      	lsls	r2, r3, #5
 800de10:	69fb      	ldr	r3, [r7, #28]
 800de12:	4413      	add	r3, r2
 800de14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de18:	691a      	ldr	r2, [r3, #16]
 800de1a:	69bb      	ldr	r3, [r7, #24]
 800de1c:	0159      	lsls	r1, r3, #5
 800de1e:	69fb      	ldr	r3, [r7, #28]
 800de20:	440b      	add	r3, r1
 800de22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de26:	4619      	mov	r1, r3
 800de28:	4b61      	ldr	r3, [pc, #388]	; (800dfb0 <USB_EPStartXfer+0x48c>)
 800de2a:	4013      	ands	r3, r2
 800de2c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800de2e:	69bb      	ldr	r3, [r7, #24]
 800de30:	015a      	lsls	r2, r3, #5
 800de32:	69fb      	ldr	r3, [r7, #28]
 800de34:	4413      	add	r3, r2
 800de36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de3a:	691a      	ldr	r2, [r3, #16]
 800de3c:	69bb      	ldr	r3, [r7, #24]
 800de3e:	0159      	lsls	r1, r3, #5
 800de40:	69fb      	ldr	r3, [r7, #28]
 800de42:	440b      	add	r3, r1
 800de44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de48:	4619      	mov	r1, r3
 800de4a:	4b5a      	ldr	r3, [pc, #360]	; (800dfb4 <USB_EPStartXfer+0x490>)
 800de4c:	4013      	ands	r3, r2
 800de4e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800de50:	68bb      	ldr	r3, [r7, #8]
 800de52:	695b      	ldr	r3, [r3, #20]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d123      	bne.n	800dea0 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800de58:	69bb      	ldr	r3, [r7, #24]
 800de5a:	015a      	lsls	r2, r3, #5
 800de5c:	69fb      	ldr	r3, [r7, #28]
 800de5e:	4413      	add	r3, r2
 800de60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de64:	691a      	ldr	r2, [r3, #16]
 800de66:	68bb      	ldr	r3, [r7, #8]
 800de68:	689b      	ldr	r3, [r3, #8]
 800de6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800de6e:	69b9      	ldr	r1, [r7, #24]
 800de70:	0148      	lsls	r0, r1, #5
 800de72:	69f9      	ldr	r1, [r7, #28]
 800de74:	4401      	add	r1, r0
 800de76:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800de7a:	4313      	orrs	r3, r2
 800de7c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800de7e:	69bb      	ldr	r3, [r7, #24]
 800de80:	015a      	lsls	r2, r3, #5
 800de82:	69fb      	ldr	r3, [r7, #28]
 800de84:	4413      	add	r3, r2
 800de86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de8a:	691b      	ldr	r3, [r3, #16]
 800de8c:	69ba      	ldr	r2, [r7, #24]
 800de8e:	0151      	lsls	r1, r2, #5
 800de90:	69fa      	ldr	r2, [r7, #28]
 800de92:	440a      	add	r2, r1
 800de94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800de9c:	6113      	str	r3, [r2, #16]
 800de9e:	e033      	b.n	800df08 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	695a      	ldr	r2, [r3, #20]
 800dea4:	68bb      	ldr	r3, [r7, #8]
 800dea6:	689b      	ldr	r3, [r3, #8]
 800dea8:	4413      	add	r3, r2
 800deaa:	1e5a      	subs	r2, r3, #1
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	689b      	ldr	r3, [r3, #8]
 800deb0:	fbb2 f3f3 	udiv	r3, r2, r3
 800deb4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800deb6:	69bb      	ldr	r3, [r7, #24]
 800deb8:	015a      	lsls	r2, r3, #5
 800deba:	69fb      	ldr	r3, [r7, #28]
 800debc:	4413      	add	r3, r2
 800debe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dec2:	691a      	ldr	r2, [r3, #16]
 800dec4:	8afb      	ldrh	r3, [r7, #22]
 800dec6:	04d9      	lsls	r1, r3, #19
 800dec8:	4b3b      	ldr	r3, [pc, #236]	; (800dfb8 <USB_EPStartXfer+0x494>)
 800deca:	400b      	ands	r3, r1
 800decc:	69b9      	ldr	r1, [r7, #24]
 800dece:	0148      	lsls	r0, r1, #5
 800ded0:	69f9      	ldr	r1, [r7, #28]
 800ded2:	4401      	add	r1, r0
 800ded4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ded8:	4313      	orrs	r3, r2
 800deda:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800dedc:	69bb      	ldr	r3, [r7, #24]
 800dede:	015a      	lsls	r2, r3, #5
 800dee0:	69fb      	ldr	r3, [r7, #28]
 800dee2:	4413      	add	r3, r2
 800dee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dee8:	691a      	ldr	r2, [r3, #16]
 800deea:	68bb      	ldr	r3, [r7, #8]
 800deec:	689b      	ldr	r3, [r3, #8]
 800deee:	8af9      	ldrh	r1, [r7, #22]
 800def0:	fb01 f303 	mul.w	r3, r1, r3
 800def4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800def8:	69b9      	ldr	r1, [r7, #24]
 800defa:	0148      	lsls	r0, r1, #5
 800defc:	69f9      	ldr	r1, [r7, #28]
 800defe:	4401      	add	r1, r0
 800df00:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800df04:	4313      	orrs	r3, r2
 800df06:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800df08:	79fb      	ldrb	r3, [r7, #7]
 800df0a:	2b01      	cmp	r3, #1
 800df0c:	d10d      	bne.n	800df2a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800df0e:	68bb      	ldr	r3, [r7, #8]
 800df10:	68db      	ldr	r3, [r3, #12]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d009      	beq.n	800df2a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800df16:	68bb      	ldr	r3, [r7, #8]
 800df18:	68d9      	ldr	r1, [r3, #12]
 800df1a:	69bb      	ldr	r3, [r7, #24]
 800df1c:	015a      	lsls	r2, r3, #5
 800df1e:	69fb      	ldr	r3, [r7, #28]
 800df20:	4413      	add	r3, r2
 800df22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df26:	460a      	mov	r2, r1
 800df28:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800df2a:	68bb      	ldr	r3, [r7, #8]
 800df2c:	78db      	ldrb	r3, [r3, #3]
 800df2e:	2b01      	cmp	r3, #1
 800df30:	d128      	bne.n	800df84 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800df32:	69fb      	ldr	r3, [r7, #28]
 800df34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df38:	689b      	ldr	r3, [r3, #8]
 800df3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d110      	bne.n	800df64 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800df42:	69bb      	ldr	r3, [r7, #24]
 800df44:	015a      	lsls	r2, r3, #5
 800df46:	69fb      	ldr	r3, [r7, #28]
 800df48:	4413      	add	r3, r2
 800df4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	69ba      	ldr	r2, [r7, #24]
 800df52:	0151      	lsls	r1, r2, #5
 800df54:	69fa      	ldr	r2, [r7, #28]
 800df56:	440a      	add	r2, r1
 800df58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800df5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800df60:	6013      	str	r3, [r2, #0]
 800df62:	e00f      	b.n	800df84 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800df64:	69bb      	ldr	r3, [r7, #24]
 800df66:	015a      	lsls	r2, r3, #5
 800df68:	69fb      	ldr	r3, [r7, #28]
 800df6a:	4413      	add	r3, r2
 800df6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	69ba      	ldr	r2, [r7, #24]
 800df74:	0151      	lsls	r1, r2, #5
 800df76:	69fa      	ldr	r2, [r7, #28]
 800df78:	440a      	add	r2, r1
 800df7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800df7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800df82:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800df84:	69bb      	ldr	r3, [r7, #24]
 800df86:	015a      	lsls	r2, r3, #5
 800df88:	69fb      	ldr	r3, [r7, #28]
 800df8a:	4413      	add	r3, r2
 800df8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	69ba      	ldr	r2, [r7, #24]
 800df94:	0151      	lsls	r1, r2, #5
 800df96:	69fa      	ldr	r2, [r7, #28]
 800df98:	440a      	add	r2, r1
 800df9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800df9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dfa2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dfa4:	2300      	movs	r3, #0
}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	3720      	adds	r7, #32
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd80      	pop	{r7, pc}
 800dfae:	bf00      	nop
 800dfb0:	fff80000 	.word	0xfff80000
 800dfb4:	e007ffff 	.word	0xe007ffff
 800dfb8:	1ff80000 	.word	0x1ff80000

0800dfbc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800dfbc:	b480      	push	{r7}
 800dfbe:	b087      	sub	sp, #28
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	60f8      	str	r0, [r7, #12]
 800dfc4:	60b9      	str	r1, [r7, #8]
 800dfc6:	4613      	mov	r3, r2
 800dfc8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	781b      	ldrb	r3, [r3, #0]
 800dfd2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	785b      	ldrb	r3, [r3, #1]
 800dfd8:	2b01      	cmp	r3, #1
 800dfda:	f040 80cd 	bne.w	800e178 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	695b      	ldr	r3, [r3, #20]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d132      	bne.n	800e04c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dfe6:	693b      	ldr	r3, [r7, #16]
 800dfe8:	015a      	lsls	r2, r3, #5
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	4413      	add	r3, r2
 800dfee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dff2:	691a      	ldr	r2, [r3, #16]
 800dff4:	693b      	ldr	r3, [r7, #16]
 800dff6:	0159      	lsls	r1, r3, #5
 800dff8:	697b      	ldr	r3, [r7, #20]
 800dffa:	440b      	add	r3, r1
 800dffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e000:	4619      	mov	r1, r3
 800e002:	4b98      	ldr	r3, [pc, #608]	; (800e264 <USB_EP0StartXfer+0x2a8>)
 800e004:	4013      	ands	r3, r2
 800e006:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e008:	693b      	ldr	r3, [r7, #16]
 800e00a:	015a      	lsls	r2, r3, #5
 800e00c:	697b      	ldr	r3, [r7, #20]
 800e00e:	4413      	add	r3, r2
 800e010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e014:	691b      	ldr	r3, [r3, #16]
 800e016:	693a      	ldr	r2, [r7, #16]
 800e018:	0151      	lsls	r1, r2, #5
 800e01a:	697a      	ldr	r2, [r7, #20]
 800e01c:	440a      	add	r2, r1
 800e01e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e022:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e026:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e028:	693b      	ldr	r3, [r7, #16]
 800e02a:	015a      	lsls	r2, r3, #5
 800e02c:	697b      	ldr	r3, [r7, #20]
 800e02e:	4413      	add	r3, r2
 800e030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e034:	691a      	ldr	r2, [r3, #16]
 800e036:	693b      	ldr	r3, [r7, #16]
 800e038:	0159      	lsls	r1, r3, #5
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	440b      	add	r3, r1
 800e03e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e042:	4619      	mov	r1, r3
 800e044:	4b88      	ldr	r3, [pc, #544]	; (800e268 <USB_EP0StartXfer+0x2ac>)
 800e046:	4013      	ands	r3, r2
 800e048:	610b      	str	r3, [r1, #16]
 800e04a:	e04e      	b.n	800e0ea <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e04c:	693b      	ldr	r3, [r7, #16]
 800e04e:	015a      	lsls	r2, r3, #5
 800e050:	697b      	ldr	r3, [r7, #20]
 800e052:	4413      	add	r3, r2
 800e054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e058:	691a      	ldr	r2, [r3, #16]
 800e05a:	693b      	ldr	r3, [r7, #16]
 800e05c:	0159      	lsls	r1, r3, #5
 800e05e:	697b      	ldr	r3, [r7, #20]
 800e060:	440b      	add	r3, r1
 800e062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e066:	4619      	mov	r1, r3
 800e068:	4b7f      	ldr	r3, [pc, #508]	; (800e268 <USB_EP0StartXfer+0x2ac>)
 800e06a:	4013      	ands	r3, r2
 800e06c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e06e:	693b      	ldr	r3, [r7, #16]
 800e070:	015a      	lsls	r2, r3, #5
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	4413      	add	r3, r2
 800e076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e07a:	691a      	ldr	r2, [r3, #16]
 800e07c:	693b      	ldr	r3, [r7, #16]
 800e07e:	0159      	lsls	r1, r3, #5
 800e080:	697b      	ldr	r3, [r7, #20]
 800e082:	440b      	add	r3, r1
 800e084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e088:	4619      	mov	r1, r3
 800e08a:	4b76      	ldr	r3, [pc, #472]	; (800e264 <USB_EP0StartXfer+0x2a8>)
 800e08c:	4013      	ands	r3, r2
 800e08e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	695a      	ldr	r2, [r3, #20]
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	689b      	ldr	r3, [r3, #8]
 800e098:	429a      	cmp	r2, r3
 800e09a:	d903      	bls.n	800e0a4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800e09c:	68bb      	ldr	r3, [r7, #8]
 800e09e:	689a      	ldr	r2, [r3, #8]
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e0a4:	693b      	ldr	r3, [r7, #16]
 800e0a6:	015a      	lsls	r2, r3, #5
 800e0a8:	697b      	ldr	r3, [r7, #20]
 800e0aa:	4413      	add	r3, r2
 800e0ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0b0:	691b      	ldr	r3, [r3, #16]
 800e0b2:	693a      	ldr	r2, [r7, #16]
 800e0b4:	0151      	lsls	r1, r2, #5
 800e0b6:	697a      	ldr	r2, [r7, #20]
 800e0b8:	440a      	add	r2, r1
 800e0ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e0be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e0c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e0c4:	693b      	ldr	r3, [r7, #16]
 800e0c6:	015a      	lsls	r2, r3, #5
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	4413      	add	r3, r2
 800e0cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0d0:	691a      	ldr	r2, [r3, #16]
 800e0d2:	68bb      	ldr	r3, [r7, #8]
 800e0d4:	695b      	ldr	r3, [r3, #20]
 800e0d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e0da:	6939      	ldr	r1, [r7, #16]
 800e0dc:	0148      	lsls	r0, r1, #5
 800e0de:	6979      	ldr	r1, [r7, #20]
 800e0e0:	4401      	add	r1, r0
 800e0e2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e0e6:	4313      	orrs	r3, r2
 800e0e8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e0ea:	79fb      	ldrb	r3, [r7, #7]
 800e0ec:	2b01      	cmp	r3, #1
 800e0ee:	d11e      	bne.n	800e12e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	691b      	ldr	r3, [r3, #16]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d009      	beq.n	800e10c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e0f8:	693b      	ldr	r3, [r7, #16]
 800e0fa:	015a      	lsls	r2, r3, #5
 800e0fc:	697b      	ldr	r3, [r7, #20]
 800e0fe:	4413      	add	r3, r2
 800e100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e104:	461a      	mov	r2, r3
 800e106:	68bb      	ldr	r3, [r7, #8]
 800e108:	691b      	ldr	r3, [r3, #16]
 800e10a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e10c:	693b      	ldr	r3, [r7, #16]
 800e10e:	015a      	lsls	r2, r3, #5
 800e110:	697b      	ldr	r3, [r7, #20]
 800e112:	4413      	add	r3, r2
 800e114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	693a      	ldr	r2, [r7, #16]
 800e11c:	0151      	lsls	r1, r2, #5
 800e11e:	697a      	ldr	r2, [r7, #20]
 800e120:	440a      	add	r2, r1
 800e122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e126:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e12a:	6013      	str	r3, [r2, #0]
 800e12c:	e092      	b.n	800e254 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e12e:	693b      	ldr	r3, [r7, #16]
 800e130:	015a      	lsls	r2, r3, #5
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	4413      	add	r3, r2
 800e136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	693a      	ldr	r2, [r7, #16]
 800e13e:	0151      	lsls	r1, r2, #5
 800e140:	697a      	ldr	r2, [r7, #20]
 800e142:	440a      	add	r2, r1
 800e144:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e148:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e14c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	695b      	ldr	r3, [r3, #20]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d07e      	beq.n	800e254 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e156:	697b      	ldr	r3, [r7, #20]
 800e158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e15c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	781b      	ldrb	r3, [r3, #0]
 800e162:	f003 030f 	and.w	r3, r3, #15
 800e166:	2101      	movs	r1, #1
 800e168:	fa01 f303 	lsl.w	r3, r1, r3
 800e16c:	6979      	ldr	r1, [r7, #20]
 800e16e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e172:	4313      	orrs	r3, r2
 800e174:	634b      	str	r3, [r1, #52]	; 0x34
 800e176:	e06d      	b.n	800e254 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e178:	693b      	ldr	r3, [r7, #16]
 800e17a:	015a      	lsls	r2, r3, #5
 800e17c:	697b      	ldr	r3, [r7, #20]
 800e17e:	4413      	add	r3, r2
 800e180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e184:	691a      	ldr	r2, [r3, #16]
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	0159      	lsls	r1, r3, #5
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	440b      	add	r3, r1
 800e18e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e192:	4619      	mov	r1, r3
 800e194:	4b34      	ldr	r3, [pc, #208]	; (800e268 <USB_EP0StartXfer+0x2ac>)
 800e196:	4013      	ands	r3, r2
 800e198:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e19a:	693b      	ldr	r3, [r7, #16]
 800e19c:	015a      	lsls	r2, r3, #5
 800e19e:	697b      	ldr	r3, [r7, #20]
 800e1a0:	4413      	add	r3, r2
 800e1a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1a6:	691a      	ldr	r2, [r3, #16]
 800e1a8:	693b      	ldr	r3, [r7, #16]
 800e1aa:	0159      	lsls	r1, r3, #5
 800e1ac:	697b      	ldr	r3, [r7, #20]
 800e1ae:	440b      	add	r3, r1
 800e1b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1b4:	4619      	mov	r1, r3
 800e1b6:	4b2b      	ldr	r3, [pc, #172]	; (800e264 <USB_EP0StartXfer+0x2a8>)
 800e1b8:	4013      	ands	r3, r2
 800e1ba:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800e1bc:	68bb      	ldr	r3, [r7, #8]
 800e1be:	695b      	ldr	r3, [r3, #20]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d003      	beq.n	800e1cc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800e1c4:	68bb      	ldr	r3, [r7, #8]
 800e1c6:	689a      	ldr	r2, [r3, #8]
 800e1c8:	68bb      	ldr	r3, [r7, #8]
 800e1ca:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e1cc:	693b      	ldr	r3, [r7, #16]
 800e1ce:	015a      	lsls	r2, r3, #5
 800e1d0:	697b      	ldr	r3, [r7, #20]
 800e1d2:	4413      	add	r3, r2
 800e1d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1d8:	691b      	ldr	r3, [r3, #16]
 800e1da:	693a      	ldr	r2, [r7, #16]
 800e1dc:	0151      	lsls	r1, r2, #5
 800e1de:	697a      	ldr	r2, [r7, #20]
 800e1e0:	440a      	add	r2, r1
 800e1e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e1e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e1ea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800e1ec:	693b      	ldr	r3, [r7, #16]
 800e1ee:	015a      	lsls	r2, r3, #5
 800e1f0:	697b      	ldr	r3, [r7, #20]
 800e1f2:	4413      	add	r3, r2
 800e1f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1f8:	691a      	ldr	r2, [r3, #16]
 800e1fa:	68bb      	ldr	r3, [r7, #8]
 800e1fc:	689b      	ldr	r3, [r3, #8]
 800e1fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e202:	6939      	ldr	r1, [r7, #16]
 800e204:	0148      	lsls	r0, r1, #5
 800e206:	6979      	ldr	r1, [r7, #20]
 800e208:	4401      	add	r1, r0
 800e20a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e20e:	4313      	orrs	r3, r2
 800e210:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800e212:	79fb      	ldrb	r3, [r7, #7]
 800e214:	2b01      	cmp	r3, #1
 800e216:	d10d      	bne.n	800e234 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e218:	68bb      	ldr	r3, [r7, #8]
 800e21a:	68db      	ldr	r3, [r3, #12]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d009      	beq.n	800e234 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e220:	68bb      	ldr	r3, [r7, #8]
 800e222:	68d9      	ldr	r1, [r3, #12]
 800e224:	693b      	ldr	r3, [r7, #16]
 800e226:	015a      	lsls	r2, r3, #5
 800e228:	697b      	ldr	r3, [r7, #20]
 800e22a:	4413      	add	r3, r2
 800e22c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e230:	460a      	mov	r2, r1
 800e232:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	015a      	lsls	r2, r3, #5
 800e238:	697b      	ldr	r3, [r7, #20]
 800e23a:	4413      	add	r3, r2
 800e23c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	693a      	ldr	r2, [r7, #16]
 800e244:	0151      	lsls	r1, r2, #5
 800e246:	697a      	ldr	r2, [r7, #20]
 800e248:	440a      	add	r2, r1
 800e24a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e24e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e252:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e254:	2300      	movs	r3, #0
}
 800e256:	4618      	mov	r0, r3
 800e258:	371c      	adds	r7, #28
 800e25a:	46bd      	mov	sp, r7
 800e25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e260:	4770      	bx	lr
 800e262:	bf00      	nop
 800e264:	e007ffff 	.word	0xe007ffff
 800e268:	fff80000 	.word	0xfff80000

0800e26c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e26c:	b480      	push	{r7}
 800e26e:	b089      	sub	sp, #36	; 0x24
 800e270:	af00      	add	r7, sp, #0
 800e272:	60f8      	str	r0, [r7, #12]
 800e274:	60b9      	str	r1, [r7, #8]
 800e276:	4611      	mov	r1, r2
 800e278:	461a      	mov	r2, r3
 800e27a:	460b      	mov	r3, r1
 800e27c:	71fb      	strb	r3, [r7, #7]
 800e27e:	4613      	mov	r3, r2
 800e280:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800e286:	68bb      	ldr	r3, [r7, #8]
 800e288:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800e28a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d11a      	bne.n	800e2c8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e292:	88bb      	ldrh	r3, [r7, #4]
 800e294:	3303      	adds	r3, #3
 800e296:	089b      	lsrs	r3, r3, #2
 800e298:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e29a:	2300      	movs	r3, #0
 800e29c:	61bb      	str	r3, [r7, #24]
 800e29e:	e00f      	b.n	800e2c0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e2a0:	79fb      	ldrb	r3, [r7, #7]
 800e2a2:	031a      	lsls	r2, r3, #12
 800e2a4:	697b      	ldr	r3, [r7, #20]
 800e2a6:	4413      	add	r3, r2
 800e2a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2ac:	461a      	mov	r2, r3
 800e2ae:	69fb      	ldr	r3, [r7, #28]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e2b4:	69fb      	ldr	r3, [r7, #28]
 800e2b6:	3304      	adds	r3, #4
 800e2b8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e2ba:	69bb      	ldr	r3, [r7, #24]
 800e2bc:	3301      	adds	r3, #1
 800e2be:	61bb      	str	r3, [r7, #24]
 800e2c0:	69ba      	ldr	r2, [r7, #24]
 800e2c2:	693b      	ldr	r3, [r7, #16]
 800e2c4:	429a      	cmp	r2, r3
 800e2c6:	d3eb      	bcc.n	800e2a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e2c8:	2300      	movs	r3, #0
}
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	3724      	adds	r7, #36	; 0x24
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d4:	4770      	bx	lr

0800e2d6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e2d6:	b480      	push	{r7}
 800e2d8:	b089      	sub	sp, #36	; 0x24
 800e2da:	af00      	add	r7, sp, #0
 800e2dc:	60f8      	str	r0, [r7, #12]
 800e2de:	60b9      	str	r1, [r7, #8]
 800e2e0:	4613      	mov	r3, r2
 800e2e2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800e2e8:	68bb      	ldr	r3, [r7, #8]
 800e2ea:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800e2ec:	88fb      	ldrh	r3, [r7, #6]
 800e2ee:	3303      	adds	r3, #3
 800e2f0:	089b      	lsrs	r3, r3, #2
 800e2f2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	61bb      	str	r3, [r7, #24]
 800e2f8:	e00b      	b.n	800e312 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e2fa:	697b      	ldr	r3, [r7, #20]
 800e2fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e300:	681a      	ldr	r2, [r3, #0]
 800e302:	69fb      	ldr	r3, [r7, #28]
 800e304:	601a      	str	r2, [r3, #0]
    pDest++;
 800e306:	69fb      	ldr	r3, [r7, #28]
 800e308:	3304      	adds	r3, #4
 800e30a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800e30c:	69bb      	ldr	r3, [r7, #24]
 800e30e:	3301      	adds	r3, #1
 800e310:	61bb      	str	r3, [r7, #24]
 800e312:	69ba      	ldr	r2, [r7, #24]
 800e314:	693b      	ldr	r3, [r7, #16]
 800e316:	429a      	cmp	r2, r3
 800e318:	d3ef      	bcc.n	800e2fa <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800e31a:	69fb      	ldr	r3, [r7, #28]
}
 800e31c:	4618      	mov	r0, r3
 800e31e:	3724      	adds	r7, #36	; 0x24
 800e320:	46bd      	mov	sp, r7
 800e322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e326:	4770      	bx	lr

0800e328 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e328:	b480      	push	{r7}
 800e32a:	b085      	sub	sp, #20
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	781b      	ldrb	r3, [r3, #0]
 800e33a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	785b      	ldrb	r3, [r3, #1]
 800e340:	2b01      	cmp	r3, #1
 800e342:	d12c      	bne.n	800e39e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	015a      	lsls	r2, r3, #5
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	4413      	add	r3, r2
 800e34c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	2b00      	cmp	r3, #0
 800e354:	db12      	blt.n	800e37c <USB_EPSetStall+0x54>
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d00f      	beq.n	800e37c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	015a      	lsls	r2, r3, #5
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	4413      	add	r3, r2
 800e364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	68ba      	ldr	r2, [r7, #8]
 800e36c:	0151      	lsls	r1, r2, #5
 800e36e:	68fa      	ldr	r2, [r7, #12]
 800e370:	440a      	add	r2, r1
 800e372:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e376:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e37a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	015a      	lsls	r2, r3, #5
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	4413      	add	r3, r2
 800e384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	68ba      	ldr	r2, [r7, #8]
 800e38c:	0151      	lsls	r1, r2, #5
 800e38e:	68fa      	ldr	r2, [r7, #12]
 800e390:	440a      	add	r2, r1
 800e392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e396:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e39a:	6013      	str	r3, [r2, #0]
 800e39c:	e02b      	b.n	800e3f6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e39e:	68bb      	ldr	r3, [r7, #8]
 800e3a0:	015a      	lsls	r2, r3, #5
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	4413      	add	r3, r2
 800e3a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	db12      	blt.n	800e3d6 <USB_EPSetStall+0xae>
 800e3b0:	68bb      	ldr	r3, [r7, #8]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d00f      	beq.n	800e3d6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e3b6:	68bb      	ldr	r3, [r7, #8]
 800e3b8:	015a      	lsls	r2, r3, #5
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	4413      	add	r3, r2
 800e3be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	68ba      	ldr	r2, [r7, #8]
 800e3c6:	0151      	lsls	r1, r2, #5
 800e3c8:	68fa      	ldr	r2, [r7, #12]
 800e3ca:	440a      	add	r2, r1
 800e3cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e3d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e3d4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	015a      	lsls	r2, r3, #5
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	4413      	add	r3, r2
 800e3de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	68ba      	ldr	r2, [r7, #8]
 800e3e6:	0151      	lsls	r1, r2, #5
 800e3e8:	68fa      	ldr	r2, [r7, #12]
 800e3ea:	440a      	add	r2, r1
 800e3ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e3f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e3f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e3f6:	2300      	movs	r3, #0
}
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	3714      	adds	r7, #20
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e402:	4770      	bx	lr

0800e404 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e404:	b480      	push	{r7}
 800e406:	b085      	sub	sp, #20
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
 800e40c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	781b      	ldrb	r3, [r3, #0]
 800e416:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	785b      	ldrb	r3, [r3, #1]
 800e41c:	2b01      	cmp	r3, #1
 800e41e:	d128      	bne.n	800e472 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e420:	68bb      	ldr	r3, [r7, #8]
 800e422:	015a      	lsls	r2, r3, #5
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	4413      	add	r3, r2
 800e428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	68ba      	ldr	r2, [r7, #8]
 800e430:	0151      	lsls	r1, r2, #5
 800e432:	68fa      	ldr	r2, [r7, #12]
 800e434:	440a      	add	r2, r1
 800e436:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e43a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e43e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	78db      	ldrb	r3, [r3, #3]
 800e444:	2b03      	cmp	r3, #3
 800e446:	d003      	beq.n	800e450 <USB_EPClearStall+0x4c>
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	78db      	ldrb	r3, [r3, #3]
 800e44c:	2b02      	cmp	r3, #2
 800e44e:	d138      	bne.n	800e4c2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e450:	68bb      	ldr	r3, [r7, #8]
 800e452:	015a      	lsls	r2, r3, #5
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	4413      	add	r3, r2
 800e458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	68ba      	ldr	r2, [r7, #8]
 800e460:	0151      	lsls	r1, r2, #5
 800e462:	68fa      	ldr	r2, [r7, #12]
 800e464:	440a      	add	r2, r1
 800e466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e46a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e46e:	6013      	str	r3, [r2, #0]
 800e470:	e027      	b.n	800e4c2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	015a      	lsls	r2, r3, #5
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	4413      	add	r3, r2
 800e47a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	68ba      	ldr	r2, [r7, #8]
 800e482:	0151      	lsls	r1, r2, #5
 800e484:	68fa      	ldr	r2, [r7, #12]
 800e486:	440a      	add	r2, r1
 800e488:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e48c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e490:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	78db      	ldrb	r3, [r3, #3]
 800e496:	2b03      	cmp	r3, #3
 800e498:	d003      	beq.n	800e4a2 <USB_EPClearStall+0x9e>
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	78db      	ldrb	r3, [r3, #3]
 800e49e:	2b02      	cmp	r3, #2
 800e4a0:	d10f      	bne.n	800e4c2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	015a      	lsls	r2, r3, #5
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	4413      	add	r3, r2
 800e4aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	68ba      	ldr	r2, [r7, #8]
 800e4b2:	0151      	lsls	r1, r2, #5
 800e4b4:	68fa      	ldr	r2, [r7, #12]
 800e4b6:	440a      	add	r2, r1
 800e4b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e4bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e4c0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e4c2:	2300      	movs	r3, #0
}
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	3714      	adds	r7, #20
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ce:	4770      	bx	lr

0800e4d0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e4d0:	b480      	push	{r7}
 800e4d2:	b085      	sub	sp, #20
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
 800e4d8:	460b      	mov	r3, r1
 800e4da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	68fa      	ldr	r2, [r7, #12]
 800e4ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e4ee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e4f2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4fa:	681a      	ldr	r2, [r3, #0]
 800e4fc:	78fb      	ldrb	r3, [r7, #3]
 800e4fe:	011b      	lsls	r3, r3, #4
 800e500:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e504:	68f9      	ldr	r1, [r7, #12]
 800e506:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e50a:	4313      	orrs	r3, r2
 800e50c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e50e:	2300      	movs	r3, #0
}
 800e510:	4618      	mov	r0, r3
 800e512:	3714      	adds	r7, #20
 800e514:	46bd      	mov	sp, r7
 800e516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51a:	4770      	bx	lr

0800e51c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b084      	sub	sp, #16
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e52e:	685b      	ldr	r3, [r3, #4]
 800e530:	68fa      	ldr	r2, [r7, #12]
 800e532:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e536:	f023 0302 	bic.w	r3, r3, #2
 800e53a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800e53c:	2003      	movs	r0, #3
 800e53e:	f7f3 fa11 	bl	8001964 <HAL_Delay>

  return HAL_OK;
 800e542:	2300      	movs	r3, #0
}
 800e544:	4618      	mov	r0, r3
 800e546:	3710      	adds	r7, #16
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}

0800e54c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b084      	sub	sp, #16
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e55e:	685b      	ldr	r3, [r3, #4]
 800e560:	68fa      	ldr	r2, [r7, #12]
 800e562:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e566:	f043 0302 	orr.w	r3, r3, #2
 800e56a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800e56c:	2003      	movs	r0, #3
 800e56e:	f7f3 f9f9 	bl	8001964 <HAL_Delay>

  return HAL_OK;
 800e572:	2300      	movs	r3, #0
}
 800e574:	4618      	mov	r0, r3
 800e576:	3710      	adds	r7, #16
 800e578:	46bd      	mov	sp, r7
 800e57a:	bd80      	pop	{r7, pc}

0800e57c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e57c:	b480      	push	{r7}
 800e57e:	b085      	sub	sp, #20
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	695b      	ldr	r3, [r3, #20]
 800e588:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	699b      	ldr	r3, [r3, #24]
 800e58e:	68fa      	ldr	r2, [r7, #12]
 800e590:	4013      	ands	r3, r2
 800e592:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e594:	68fb      	ldr	r3, [r7, #12]
}
 800e596:	4618      	mov	r0, r3
 800e598:	3714      	adds	r7, #20
 800e59a:	46bd      	mov	sp, r7
 800e59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a0:	4770      	bx	lr

0800e5a2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e5a2:	b480      	push	{r7}
 800e5a4:	b085      	sub	sp, #20
 800e5a6:	af00      	add	r7, sp, #0
 800e5a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5b4:	699b      	ldr	r3, [r3, #24]
 800e5b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5be:	69db      	ldr	r3, [r3, #28]
 800e5c0:	68ba      	ldr	r2, [r7, #8]
 800e5c2:	4013      	ands	r3, r2
 800e5c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e5c6:	68bb      	ldr	r3, [r7, #8]
 800e5c8:	0c1b      	lsrs	r3, r3, #16
}
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	3714      	adds	r7, #20
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d4:	4770      	bx	lr

0800e5d6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e5d6:	b480      	push	{r7}
 800e5d8:	b085      	sub	sp, #20
 800e5da:	af00      	add	r7, sp, #0
 800e5dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5e8:	699b      	ldr	r3, [r3, #24]
 800e5ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5f2:	69db      	ldr	r3, [r3, #28]
 800e5f4:	68ba      	ldr	r2, [r7, #8]
 800e5f6:	4013      	ands	r3, r2
 800e5f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e5fa:	68bb      	ldr	r3, [r7, #8]
 800e5fc:	b29b      	uxth	r3, r3
}
 800e5fe:	4618      	mov	r0, r3
 800e600:	3714      	adds	r7, #20
 800e602:	46bd      	mov	sp, r7
 800e604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e608:	4770      	bx	lr

0800e60a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e60a:	b480      	push	{r7}
 800e60c:	b085      	sub	sp, #20
 800e60e:	af00      	add	r7, sp, #0
 800e610:	6078      	str	r0, [r7, #4]
 800e612:	460b      	mov	r3, r1
 800e614:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e61a:	78fb      	ldrb	r3, [r7, #3]
 800e61c:	015a      	lsls	r2, r3, #5
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	4413      	add	r3, r2
 800e622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e626:	689b      	ldr	r3, [r3, #8]
 800e628:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e630:	695b      	ldr	r3, [r3, #20]
 800e632:	68ba      	ldr	r2, [r7, #8]
 800e634:	4013      	ands	r3, r2
 800e636:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e638:	68bb      	ldr	r3, [r7, #8]
}
 800e63a:	4618      	mov	r0, r3
 800e63c:	3714      	adds	r7, #20
 800e63e:	46bd      	mov	sp, r7
 800e640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e644:	4770      	bx	lr

0800e646 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e646:	b480      	push	{r7}
 800e648:	b087      	sub	sp, #28
 800e64a:	af00      	add	r7, sp, #0
 800e64c:	6078      	str	r0, [r7, #4]
 800e64e:	460b      	mov	r3, r1
 800e650:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e656:	697b      	ldr	r3, [r7, #20]
 800e658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e65c:	691b      	ldr	r3, [r3, #16]
 800e65e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e660:	697b      	ldr	r3, [r7, #20]
 800e662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e668:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e66a:	78fb      	ldrb	r3, [r7, #3]
 800e66c:	f003 030f 	and.w	r3, r3, #15
 800e670:	68fa      	ldr	r2, [r7, #12]
 800e672:	fa22 f303 	lsr.w	r3, r2, r3
 800e676:	01db      	lsls	r3, r3, #7
 800e678:	b2db      	uxtb	r3, r3
 800e67a:	693a      	ldr	r2, [r7, #16]
 800e67c:	4313      	orrs	r3, r2
 800e67e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e680:	78fb      	ldrb	r3, [r7, #3]
 800e682:	015a      	lsls	r2, r3, #5
 800e684:	697b      	ldr	r3, [r7, #20]
 800e686:	4413      	add	r3, r2
 800e688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e68c:	689b      	ldr	r3, [r3, #8]
 800e68e:	693a      	ldr	r2, [r7, #16]
 800e690:	4013      	ands	r3, r2
 800e692:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e694:	68bb      	ldr	r3, [r7, #8]
}
 800e696:	4618      	mov	r0, r3
 800e698:	371c      	adds	r7, #28
 800e69a:	46bd      	mov	sp, r7
 800e69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a0:	4770      	bx	lr

0800e6a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e6a2:	b480      	push	{r7}
 800e6a4:	b083      	sub	sp, #12
 800e6a6:	af00      	add	r7, sp, #0
 800e6a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	695b      	ldr	r3, [r3, #20]
 800e6ae:	f003 0301 	and.w	r3, r3, #1
}
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	370c      	adds	r7, #12
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6bc:	4770      	bx	lr
	...

0800e6c0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800e6c0:	b480      	push	{r7}
 800e6c2:	b085      	sub	sp, #20
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6d2:	681a      	ldr	r2, [r3, #0]
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6da:	4619      	mov	r1, r3
 800e6dc:	4b09      	ldr	r3, [pc, #36]	; (800e704 <USB_ActivateSetup+0x44>)
 800e6de:	4013      	ands	r3, r2
 800e6e0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6e8:	685b      	ldr	r3, [r3, #4]
 800e6ea:	68fa      	ldr	r2, [r7, #12]
 800e6ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e6f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e6f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e6f6:	2300      	movs	r3, #0
}
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	3714      	adds	r7, #20
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e702:	4770      	bx	lr
 800e704:	fffff800 	.word	0xfffff800

0800e708 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800e708:	b480      	push	{r7}
 800e70a:	b087      	sub	sp, #28
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	60f8      	str	r0, [r7, #12]
 800e710:	460b      	mov	r3, r1
 800e712:	607a      	str	r2, [r7, #4]
 800e714:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	333c      	adds	r3, #60	; 0x3c
 800e71e:	3304      	adds	r3, #4
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e724:	693b      	ldr	r3, [r7, #16]
 800e726:	4a26      	ldr	r2, [pc, #152]	; (800e7c0 <USB_EP0_OutStart+0xb8>)
 800e728:	4293      	cmp	r3, r2
 800e72a:	d90a      	bls.n	800e742 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e72c:	697b      	ldr	r3, [r7, #20]
 800e72e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e738:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e73c:	d101      	bne.n	800e742 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e73e:	2300      	movs	r3, #0
 800e740:	e037      	b.n	800e7b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e742:	697b      	ldr	r3, [r7, #20]
 800e744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e748:	461a      	mov	r2, r3
 800e74a:	2300      	movs	r3, #0
 800e74c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e74e:	697b      	ldr	r3, [r7, #20]
 800e750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e754:	691b      	ldr	r3, [r3, #16]
 800e756:	697a      	ldr	r2, [r7, #20]
 800e758:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e75c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e760:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e762:	697b      	ldr	r3, [r7, #20]
 800e764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e768:	691b      	ldr	r3, [r3, #16]
 800e76a:	697a      	ldr	r2, [r7, #20]
 800e76c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e770:	f043 0318 	orr.w	r3, r3, #24
 800e774:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e77c:	691b      	ldr	r3, [r3, #16]
 800e77e:	697a      	ldr	r2, [r7, #20]
 800e780:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e784:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800e788:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e78a:	7afb      	ldrb	r3, [r7, #11]
 800e78c:	2b01      	cmp	r3, #1
 800e78e:	d10f      	bne.n	800e7b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e790:	697b      	ldr	r3, [r7, #20]
 800e792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e796:	461a      	mov	r2, r3
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	697a      	ldr	r2, [r7, #20]
 800e7a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e7aa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800e7ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e7b0:	2300      	movs	r3, #0
}
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	371c      	adds	r7, #28
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7bc:	4770      	bx	lr
 800e7be:	bf00      	nop
 800e7c0:	4f54300a 	.word	0x4f54300a

0800e7c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e7c4:	b480      	push	{r7}
 800e7c6:	b085      	sub	sp, #20
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	3301      	adds	r3, #1
 800e7d4:	60fb      	str	r3, [r7, #12]
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	4a13      	ldr	r2, [pc, #76]	; (800e828 <USB_CoreReset+0x64>)
 800e7da:	4293      	cmp	r3, r2
 800e7dc:	d901      	bls.n	800e7e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e7de:	2303      	movs	r3, #3
 800e7e0:	e01b      	b.n	800e81a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	691b      	ldr	r3, [r3, #16]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	daf2      	bge.n	800e7d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	691b      	ldr	r3, [r3, #16]
 800e7f2:	f043 0201 	orr.w	r2, r3, #1
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	3301      	adds	r3, #1
 800e7fe:	60fb      	str	r3, [r7, #12]
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	4a09      	ldr	r2, [pc, #36]	; (800e828 <USB_CoreReset+0x64>)
 800e804:	4293      	cmp	r3, r2
 800e806:	d901      	bls.n	800e80c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e808:	2303      	movs	r3, #3
 800e80a:	e006      	b.n	800e81a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	691b      	ldr	r3, [r3, #16]
 800e810:	f003 0301 	and.w	r3, r3, #1
 800e814:	2b01      	cmp	r3, #1
 800e816:	d0f0      	beq.n	800e7fa <USB_CoreReset+0x36>

  return HAL_OK;
 800e818:	2300      	movs	r3, #0
}
 800e81a:	4618      	mov	r0, r3
 800e81c:	3714      	adds	r7, #20
 800e81e:	46bd      	mov	sp, r7
 800e820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e824:	4770      	bx	lr
 800e826:	bf00      	nop
 800e828:	00030d40 	.word	0x00030d40

0800e82c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e830:	4904      	ldr	r1, [pc, #16]	; (800e844 <MX_FATFS_Init+0x18>)
 800e832:	4805      	ldr	r0, [pc, #20]	; (800e848 <MX_FATFS_Init+0x1c>)
 800e834:	f007 fdfa 	bl	801642c <FATFS_LinkDriver>
 800e838:	4603      	mov	r3, r0
 800e83a:	461a      	mov	r2, r3
 800e83c:	4b03      	ldr	r3, [pc, #12]	; (800e84c <MX_FATFS_Init+0x20>)
 800e83e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800e840:	bf00      	nop
 800e842:	bd80      	pop	{r7, pc}
 800e844:	2400588c 	.word	0x2400588c
 800e848:	08017354 	.word	0x08017354
 800e84c:	24005888 	.word	0x24005888

0800e850 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e850:	b480      	push	{r7}
 800e852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e854:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800e856:	4618      	mov	r0, r3
 800e858:	46bd      	mov	sp, r7
 800e85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85e:	4770      	bx	lr

0800e860 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b082      	sub	sp, #8
 800e864:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e866:	2300      	movs	r3, #0
 800e868:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e86a:	f000 f86b 	bl	800e944 <BSP_SD_IsDetected>
 800e86e:	4603      	mov	r3, r0
 800e870:	2b01      	cmp	r3, #1
 800e872:	d001      	beq.n	800e878 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800e874:	2302      	movs	r3, #2
 800e876:	e005      	b.n	800e884 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800e878:	4804      	ldr	r0, [pc, #16]	; (800e88c <BSP_SD_Init+0x2c>)
 800e87a:	f7f9 fcff 	bl	800827c <HAL_SD_Init>
 800e87e:	4603      	mov	r3, r0
 800e880:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800e882:	79fb      	ldrb	r3, [r7, #7]
}
 800e884:	4618      	mov	r0, r3
 800e886:	3708      	adds	r7, #8
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}
 800e88c:	240013f4 	.word	0x240013f4

0800e890 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b088      	sub	sp, #32
 800e894:	af02      	add	r7, sp, #8
 800e896:	60f8      	str	r0, [r7, #12]
 800e898:	60b9      	str	r1, [r7, #8]
 800e89a:	607a      	str	r2, [r7, #4]
 800e89c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800e89e:	2300      	movs	r3, #0
 800e8a0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	9300      	str	r3, [sp, #0]
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	68ba      	ldr	r2, [r7, #8]
 800e8aa:	68f9      	ldr	r1, [r7, #12]
 800e8ac:	4806      	ldr	r0, [pc, #24]	; (800e8c8 <BSP_SD_ReadBlocks+0x38>)
 800e8ae:	f7f9 fe03 	bl	80084b8 <HAL_SD_ReadBlocks>
 800e8b2:	4603      	mov	r3, r0
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d001      	beq.n	800e8bc <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800e8b8:	2301      	movs	r3, #1
 800e8ba:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800e8bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8be:	4618      	mov	r0, r3
 800e8c0:	3718      	adds	r7, #24
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	bd80      	pop	{r7, pc}
 800e8c6:	bf00      	nop
 800e8c8:	240013f4 	.word	0x240013f4

0800e8cc <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b088      	sub	sp, #32
 800e8d0:	af02      	add	r7, sp, #8
 800e8d2:	60f8      	str	r0, [r7, #12]
 800e8d4:	60b9      	str	r1, [r7, #8]
 800e8d6:	607a      	str	r2, [r7, #4]
 800e8d8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800e8da:	2300      	movs	r3, #0
 800e8dc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800e8de:	683b      	ldr	r3, [r7, #0]
 800e8e0:	9300      	str	r3, [sp, #0]
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	68ba      	ldr	r2, [r7, #8]
 800e8e6:	68f9      	ldr	r1, [r7, #12]
 800e8e8:	4806      	ldr	r0, [pc, #24]	; (800e904 <BSP_SD_WriteBlocks+0x38>)
 800e8ea:	f7f9 ff6f 	bl	80087cc <HAL_SD_WriteBlocks>
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d001      	beq.n	800e8f8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800e8f4:	2301      	movs	r3, #1
 800e8f6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800e8f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	3718      	adds	r7, #24
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd80      	pop	{r7, pc}
 800e902:	bf00      	nop
 800e904:	240013f4 	.word	0x240013f4

0800e908 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e90c:	4805      	ldr	r0, [pc, #20]	; (800e924 <BSP_SD_GetCardState+0x1c>)
 800e90e:	f7fa fc27 	bl	8009160 <HAL_SD_GetCardState>
 800e912:	4603      	mov	r3, r0
 800e914:	2b04      	cmp	r3, #4
 800e916:	bf14      	ite	ne
 800e918:	2301      	movne	r3, #1
 800e91a:	2300      	moveq	r3, #0
 800e91c:	b2db      	uxtb	r3, r3
}
 800e91e:	4618      	mov	r0, r3
 800e920:	bd80      	pop	{r7, pc}
 800e922:	bf00      	nop
 800e924:	240013f4 	.word	0x240013f4

0800e928 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b082      	sub	sp, #8
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800e930:	6879      	ldr	r1, [r7, #4]
 800e932:	4803      	ldr	r0, [pc, #12]	; (800e940 <BSP_SD_GetCardInfo+0x18>)
 800e934:	f7fa fb3e 	bl	8008fb4 <HAL_SD_GetCardInfo>
}
 800e938:	bf00      	nop
 800e93a:	3708      	adds	r7, #8
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}
 800e940:	240013f4 	.word	0x240013f4

0800e944 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b082      	sub	sp, #8
 800e948:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e94a:	2301      	movs	r3, #1
 800e94c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800e94e:	f000 f80b 	bl	800e968 <BSP_PlatformIsDetected>
 800e952:	4603      	mov	r3, r0
 800e954:	2b00      	cmp	r3, #0
 800e956:	d101      	bne.n	800e95c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800e958:	2300      	movs	r3, #0
 800e95a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e95c:	79fb      	ldrb	r3, [r7, #7]
 800e95e:	b2db      	uxtb	r3, r3
}
 800e960:	4618      	mov	r0, r3
 800e962:	3708      	adds	r7, #8
 800e964:	46bd      	mov	sp, r7
 800e966:	bd80      	pop	{r7, pc}

0800e968 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800e968:	b580      	push	{r7, lr}
 800e96a:	b082      	sub	sp, #8
 800e96c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800e96e:	2301      	movs	r3, #1
 800e970:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800e972:	2120      	movs	r1, #32
 800e974:	4806      	ldr	r0, [pc, #24]	; (800e990 <BSP_PlatformIsDetected+0x28>)
 800e976:	f7f5 f86b 	bl	8003a50 <HAL_GPIO_ReadPin>
 800e97a:	4603      	mov	r3, r0
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d001      	beq.n	800e984 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800e980:	2300      	movs	r3, #0
 800e982:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800e984:	79fb      	ldrb	r3, [r7, #7]
}  
 800e986:	4618      	mov	r0, r3
 800e988:	3708      	adds	r7, #8
 800e98a:	46bd      	mov	sp, r7
 800e98c:	bd80      	pop	{r7, pc}
 800e98e:	bf00      	nop
 800e990:	58021800 	.word	0x58021800

0800e994 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b082      	sub	sp, #8
 800e998:	af00      	add	r7, sp, #0
 800e99a:	4603      	mov	r3, r0
 800e99c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e99e:	4b0b      	ldr	r3, [pc, #44]	; (800e9cc <SD_CheckStatus+0x38>)
 800e9a0:	2201      	movs	r2, #1
 800e9a2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800e9a4:	f7ff ffb0 	bl	800e908 <BSP_SD_GetCardState>
 800e9a8:	4603      	mov	r3, r0
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d107      	bne.n	800e9be <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e9ae:	4b07      	ldr	r3, [pc, #28]	; (800e9cc <SD_CheckStatus+0x38>)
 800e9b0:	781b      	ldrb	r3, [r3, #0]
 800e9b2:	b2db      	uxtb	r3, r3
 800e9b4:	f023 0301 	bic.w	r3, r3, #1
 800e9b8:	b2da      	uxtb	r2, r3
 800e9ba:	4b04      	ldr	r3, [pc, #16]	; (800e9cc <SD_CheckStatus+0x38>)
 800e9bc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e9be:	4b03      	ldr	r3, [pc, #12]	; (800e9cc <SD_CheckStatus+0x38>)
 800e9c0:	781b      	ldrb	r3, [r3, #0]
 800e9c2:	b2db      	uxtb	r3, r3
}
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	3708      	adds	r7, #8
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}
 800e9cc:	2400000d 	.word	0x2400000d

0800e9d0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b082      	sub	sp, #8
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	4603      	mov	r3, r0
 800e9d8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800e9da:	4b0b      	ldr	r3, [pc, #44]	; (800ea08 <SD_initialize+0x38>)
 800e9dc:	2201      	movs	r2, #1
 800e9de:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800e9e0:	f7ff ff3e 	bl	800e860 <BSP_SD_Init>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d107      	bne.n	800e9fa <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800e9ea:	79fb      	ldrb	r3, [r7, #7]
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	f7ff ffd1 	bl	800e994 <SD_CheckStatus>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	461a      	mov	r2, r3
 800e9f6:	4b04      	ldr	r3, [pc, #16]	; (800ea08 <SD_initialize+0x38>)
 800e9f8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800e9fa:	4b03      	ldr	r3, [pc, #12]	; (800ea08 <SD_initialize+0x38>)
 800e9fc:	781b      	ldrb	r3, [r3, #0]
 800e9fe:	b2db      	uxtb	r3, r3
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	3708      	adds	r7, #8
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bd80      	pop	{r7, pc}
 800ea08:	2400000d 	.word	0x2400000d

0800ea0c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b082      	sub	sp, #8
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	4603      	mov	r3, r0
 800ea14:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ea16:	79fb      	ldrb	r3, [r7, #7]
 800ea18:	4618      	mov	r0, r3
 800ea1a:	f7ff ffbb 	bl	800e994 <SD_CheckStatus>
 800ea1e:	4603      	mov	r3, r0
}
 800ea20:	4618      	mov	r0, r3
 800ea22:	3708      	adds	r7, #8
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}

0800ea28 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b086      	sub	sp, #24
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	60b9      	str	r1, [r7, #8]
 800ea30:	607a      	str	r2, [r7, #4]
 800ea32:	603b      	str	r3, [r7, #0]
 800ea34:	4603      	mov	r3, r0
 800ea36:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ea38:	2301      	movs	r3, #1
 800ea3a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800ea3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ea40:	683a      	ldr	r2, [r7, #0]
 800ea42:	6879      	ldr	r1, [r7, #4]
 800ea44:	68b8      	ldr	r0, [r7, #8]
 800ea46:	f7ff ff23 	bl	800e890 <BSP_SD_ReadBlocks>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d107      	bne.n	800ea60 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800ea50:	bf00      	nop
 800ea52:	f7ff ff59 	bl	800e908 <BSP_SD_GetCardState>
 800ea56:	4603      	mov	r3, r0
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d1fa      	bne.n	800ea52 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ea60:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea62:	4618      	mov	r0, r3
 800ea64:	3718      	adds	r7, #24
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bd80      	pop	{r7, pc}

0800ea6a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ea6a:	b580      	push	{r7, lr}
 800ea6c:	b086      	sub	sp, #24
 800ea6e:	af00      	add	r7, sp, #0
 800ea70:	60b9      	str	r1, [r7, #8]
 800ea72:	607a      	str	r2, [r7, #4]
 800ea74:	603b      	str	r3, [r7, #0]
 800ea76:	4603      	mov	r3, r0
 800ea78:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800ea7e:	f04f 33ff 	mov.w	r3, #4294967295
 800ea82:	683a      	ldr	r2, [r7, #0]
 800ea84:	6879      	ldr	r1, [r7, #4]
 800ea86:	68b8      	ldr	r0, [r7, #8]
 800ea88:	f7ff ff20 	bl	800e8cc <BSP_SD_WriteBlocks>
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d107      	bne.n	800eaa2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800ea92:	bf00      	nop
 800ea94:	f7ff ff38 	bl	800e908 <BSP_SD_GetCardState>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d1fa      	bne.n	800ea94 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800eaa2:	7dfb      	ldrb	r3, [r7, #23]
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3718      	adds	r7, #24
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}

0800eaac <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b08c      	sub	sp, #48	; 0x30
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	4603      	mov	r3, r0
 800eab4:	603a      	str	r2, [r7, #0]
 800eab6:	71fb      	strb	r3, [r7, #7]
 800eab8:	460b      	mov	r3, r1
 800eaba:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800eabc:	2301      	movs	r3, #1
 800eabe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800eac2:	4b25      	ldr	r3, [pc, #148]	; (800eb58 <SD_ioctl+0xac>)
 800eac4:	781b      	ldrb	r3, [r3, #0]
 800eac6:	b2db      	uxtb	r3, r3
 800eac8:	f003 0301 	and.w	r3, r3, #1
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d001      	beq.n	800ead4 <SD_ioctl+0x28>
 800ead0:	2303      	movs	r3, #3
 800ead2:	e03c      	b.n	800eb4e <SD_ioctl+0xa2>

  switch (cmd)
 800ead4:	79bb      	ldrb	r3, [r7, #6]
 800ead6:	2b03      	cmp	r3, #3
 800ead8:	d834      	bhi.n	800eb44 <SD_ioctl+0x98>
 800eada:	a201      	add	r2, pc, #4	; (adr r2, 800eae0 <SD_ioctl+0x34>)
 800eadc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eae0:	0800eaf1 	.word	0x0800eaf1
 800eae4:	0800eaf9 	.word	0x0800eaf9
 800eae8:	0800eb11 	.word	0x0800eb11
 800eaec:	0800eb2b 	.word	0x0800eb2b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800eaf6:	e028      	b.n	800eb4a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800eaf8:	f107 0308 	add.w	r3, r7, #8
 800eafc:	4618      	mov	r0, r3
 800eafe:	f7ff ff13 	bl	800e928 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800eb02:	6a3a      	ldr	r2, [r7, #32]
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800eb08:	2300      	movs	r3, #0
 800eb0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800eb0e:	e01c      	b.n	800eb4a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800eb10:	f107 0308 	add.w	r3, r7, #8
 800eb14:	4618      	mov	r0, r3
 800eb16:	f7ff ff07 	bl	800e928 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800eb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb1c:	b29a      	uxth	r2, r3
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800eb22:	2300      	movs	r3, #0
 800eb24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800eb28:	e00f      	b.n	800eb4a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800eb2a:	f107 0308 	add.w	r3, r7, #8
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f7ff fefa 	bl	800e928 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800eb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb36:	0a5a      	lsrs	r2, r3, #9
 800eb38:	683b      	ldr	r3, [r7, #0]
 800eb3a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800eb42:	e002      	b.n	800eb4a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800eb44:	2304      	movs	r3, #4
 800eb46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800eb4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800eb4e:	4618      	mov	r0, r3
 800eb50:	3730      	adds	r7, #48	; 0x30
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bd80      	pop	{r7, pc}
 800eb56:	bf00      	nop
 800eb58:	2400000d 	.word	0x2400000d

0800eb5c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b082      	sub	sp, #8
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
 800eb64:	460b      	mov	r3, r1
 800eb66:	70fb      	strb	r3, [r7, #3]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	7c1b      	ldrb	r3, [r3, #16]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d115      	bne.n	800eb9c <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800eb70:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eb74:	2202      	movs	r2, #2
 800eb76:	2101      	movs	r1, #1
 800eb78:	6878      	ldr	r0, [r7, #4]
 800eb7a:	f008 f8be 	bl	8016cfa <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	2201      	movs	r2, #1
 800eb82:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800eb86:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eb8a:	2202      	movs	r2, #2
 800eb8c:	2181      	movs	r1, #129	; 0x81
 800eb8e:	6878      	ldr	r0, [r7, #4]
 800eb90:	f008 f8b3 	bl	8016cfa <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2201      	movs	r2, #1
 800eb98:	62da      	str	r2, [r3, #44]	; 0x2c
 800eb9a:	e012      	b.n	800ebc2 <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800eb9c:	2340      	movs	r3, #64	; 0x40
 800eb9e:	2202      	movs	r2, #2
 800eba0:	2101      	movs	r1, #1
 800eba2:	6878      	ldr	r0, [r7, #4]
 800eba4:	f008 f8a9 	bl	8016cfa <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2201      	movs	r2, #1
 800ebac:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800ebb0:	2340      	movs	r3, #64	; 0x40
 800ebb2:	2202      	movs	r2, #2
 800ebb4:	2181      	movs	r1, #129	; 0x81
 800ebb6:	6878      	ldr	r0, [r7, #4]
 800ebb8:	f008 f89f 	bl	8016cfa <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2201      	movs	r2, #1
 800ebc0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800ebc2:	f44f 701b 	mov.w	r0, #620	; 0x26c
 800ebc6:	f008 fa35 	bl	8017034 <malloc>
 800ebca:	4603      	mov	r3, r0
 800ebcc:	461a      	mov	r2, r3
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d101      	bne.n	800ebe2 <USBD_MSC_Init+0x86>
  {
    return USBD_FAIL;
 800ebde:	2302      	movs	r3, #2
 800ebe0:	e003      	b.n	800ebea <USBD_MSC_Init+0x8e>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800ebe2:	6878      	ldr	r0, [r7, #4]
 800ebe4:	f000 f9db 	bl	800ef9e <MSC_BOT_Init>

  return USBD_OK;
 800ebe8:	2300      	movs	r3, #0
}
 800ebea:	4618      	mov	r0, r3
 800ebec:	3708      	adds	r7, #8
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}

0800ebf2 <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 800ebf2:	b580      	push	{r7, lr}
 800ebf4:	b082      	sub	sp, #8
 800ebf6:	af00      	add	r7, sp, #0
 800ebf8:	6078      	str	r0, [r7, #4]
 800ebfa:	460b      	mov	r3, r1
 800ebfc:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800ebfe:	2101      	movs	r1, #1
 800ec00:	6878      	ldr	r0, [r7, #4]
 800ec02:	f008 f8a0 	bl	8016d46 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	2200      	movs	r2, #0
 800ec0a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800ec0e:	2181      	movs	r1, #129	; 0x81
 800ec10:	6878      	ldr	r0, [r7, #4]
 800ec12:	f008 f898 	bl	8016d46 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	2200      	movs	r2, #0
 800ec1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800ec1c:	6878      	ldr	r0, [r7, #4]
 800ec1e:	f000 fa08 	bl	800f032 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d009      	beq.n	800ec40 <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec32:	4618      	mov	r0, r3
 800ec34:	f008 fa06 	bl	8017044 <free>
    pdev->pClassData  = NULL;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 800ec40:	2300      	movs	r3, #0
}
 800ec42:	4618      	mov	r0, r3
 800ec44:	3708      	adds	r7, #8
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}
	...

0800ec4c <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b086      	sub	sp, #24
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
 800ec54:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec5c:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 800ec5e:	2300      	movs	r3, #0
 800ec60:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800ec62:	2300      	movs	r3, #0
 800ec64:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ec66:	683b      	ldr	r3, [r7, #0]
 800ec68:	781b      	ldrb	r3, [r3, #0]
 800ec6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d04d      	beq.n	800ed0e <USBD_MSC_Setup+0xc2>
 800ec72:	2b20      	cmp	r3, #32
 800ec74:	f040 8113 	bne.w	800ee9e <USBD_MSC_Setup+0x252>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800ec78:	683b      	ldr	r3, [r7, #0]
 800ec7a:	785b      	ldrb	r3, [r3, #1]
 800ec7c:	2bfe      	cmp	r3, #254	; 0xfe
 800ec7e:	d002      	beq.n	800ec86 <USBD_MSC_Setup+0x3a>
 800ec80:	2bff      	cmp	r3, #255	; 0xff
 800ec82:	d024      	beq.n	800ecce <USBD_MSC_Setup+0x82>
 800ec84:	e03b      	b.n	800ecfe <USBD_MSC_Setup+0xb2>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800ec86:	683b      	ldr	r3, [r7, #0]
 800ec88:	885b      	ldrh	r3, [r3, #2]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d118      	bne.n	800ecc0 <USBD_MSC_Setup+0x74>
 800ec8e:	683b      	ldr	r3, [r7, #0]
 800ec90:	88db      	ldrh	r3, [r3, #6]
 800ec92:	2b01      	cmp	r3, #1
 800ec94:	d114      	bne.n	800ecc0 <USBD_MSC_Setup+0x74>
              ((req->bmRequest & 0x80U) == 0x80U))
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	781b      	ldrb	r3, [r3, #0]
 800ec9a:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	da0f      	bge.n	800ecc0 <USBD_MSC_Setup+0x74>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eca6:	699b      	ldr	r3, [r3, #24]
 800eca8:	4798      	blx	r3
 800ecaa:	4603      	mov	r3, r0
 800ecac:	461a      	mov	r2, r3
 800ecae:	693b      	ldr	r3, [r7, #16]
 800ecb0:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 800ecb2:	693b      	ldr	r3, [r7, #16]
 800ecb4:	2201      	movs	r2, #1
 800ecb6:	4619      	mov	r1, r3
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f002 f9cd 	bl	8011058 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ecbe:	e025      	b.n	800ed0c <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 800ecc0:	6839      	ldr	r1, [r7, #0]
 800ecc2:	6878      	ldr	r0, [r7, #4]
 800ecc4:	f002 f95d 	bl	8010f82 <USBD_CtlError>
            ret = USBD_FAIL;
 800ecc8:	2302      	movs	r3, #2
 800ecca:	75fb      	strb	r3, [r7, #23]
          break;
 800eccc:	e01e      	b.n	800ed0c <USBD_MSC_Setup+0xc0>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	885b      	ldrh	r3, [r3, #2]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d10c      	bne.n	800ecf0 <USBD_MSC_Setup+0xa4>
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	88db      	ldrh	r3, [r3, #6]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d108      	bne.n	800ecf0 <USBD_MSC_Setup+0xa4>
              ((req->bmRequest & 0x80U) != 0x80U))
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	781b      	ldrb	r3, [r3, #0]
 800ece2:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	db03      	blt.n	800ecf0 <USBD_MSC_Setup+0xa4>
          {
            MSC_BOT_Reset(pdev);
 800ece8:	6878      	ldr	r0, [r7, #4]
 800ecea:	f000 f988 	bl	800effe <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ecee:	e00d      	b.n	800ed0c <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 800ecf0:	6839      	ldr	r1, [r7, #0]
 800ecf2:	6878      	ldr	r0, [r7, #4]
 800ecf4:	f002 f945 	bl	8010f82 <USBD_CtlError>
            ret = USBD_FAIL;
 800ecf8:	2302      	movs	r3, #2
 800ecfa:	75fb      	strb	r3, [r7, #23]
          break;
 800ecfc:	e006      	b.n	800ed0c <USBD_MSC_Setup+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ecfe:	6839      	ldr	r1, [r7, #0]
 800ed00:	6878      	ldr	r0, [r7, #4]
 800ed02:	f002 f93e 	bl	8010f82 <USBD_CtlError>
          ret = USBD_FAIL;
 800ed06:	2302      	movs	r3, #2
 800ed08:	75fb      	strb	r3, [r7, #23]
          break;
 800ed0a:	bf00      	nop
      }
      break;
 800ed0c:	e0ce      	b.n	800eeac <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	785b      	ldrb	r3, [r3, #1]
 800ed12:	2b0b      	cmp	r3, #11
 800ed14:	f200 80bb 	bhi.w	800ee8e <USBD_MSC_Setup+0x242>
 800ed18:	a201      	add	r2, pc, #4	; (adr r2, 800ed20 <USBD_MSC_Setup+0xd4>)
 800ed1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed1e:	bf00      	nop
 800ed20:	0800ed51 	.word	0x0800ed51
 800ed24:	0800edc7 	.word	0x0800edc7
 800ed28:	0800ee8f 	.word	0x0800ee8f
 800ed2c:	0800ee8f 	.word	0x0800ee8f
 800ed30:	0800ee8f 	.word	0x0800ee8f
 800ed34:	0800ee8f 	.word	0x0800ee8f
 800ed38:	0800ee8f 	.word	0x0800ee8f
 800ed3c:	0800ee8f 	.word	0x0800ee8f
 800ed40:	0800ee8f 	.word	0x0800ee8f
 800ed44:	0800ee8f 	.word	0x0800ee8f
 800ed48:	0800ed79 	.word	0x0800ed79
 800ed4c:	0800eda1 	.word	0x0800eda1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed56:	2b03      	cmp	r3, #3
 800ed58:	d107      	bne.n	800ed6a <USBD_MSC_Setup+0x11e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800ed5a:	f107 030e 	add.w	r3, r7, #14
 800ed5e:	2202      	movs	r2, #2
 800ed60:	4619      	mov	r1, r3
 800ed62:	6878      	ldr	r0, [r7, #4]
 800ed64:	f002 f978 	bl	8011058 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ed68:	e098      	b.n	800ee9c <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 800ed6a:	6839      	ldr	r1, [r7, #0]
 800ed6c:	6878      	ldr	r0, [r7, #4]
 800ed6e:	f002 f908 	bl	8010f82 <USBD_CtlError>
            ret = USBD_FAIL;
 800ed72:	2302      	movs	r3, #2
 800ed74:	75fb      	strb	r3, [r7, #23]
          break;
 800ed76:	e091      	b.n	800ee9c <USBD_MSC_Setup+0x250>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed7e:	2b03      	cmp	r3, #3
 800ed80:	d107      	bne.n	800ed92 <USBD_MSC_Setup+0x146>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 800ed82:	693b      	ldr	r3, [r7, #16]
 800ed84:	3304      	adds	r3, #4
 800ed86:	2201      	movs	r2, #1
 800ed88:	4619      	mov	r1, r3
 800ed8a:	6878      	ldr	r0, [r7, #4]
 800ed8c:	f002 f964 	bl	8011058 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ed90:	e084      	b.n	800ee9c <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 800ed92:	6839      	ldr	r1, [r7, #0]
 800ed94:	6878      	ldr	r0, [r7, #4]
 800ed96:	f002 f8f4 	bl	8010f82 <USBD_CtlError>
            ret = USBD_FAIL;
 800ed9a:	2302      	movs	r3, #2
 800ed9c:	75fb      	strb	r3, [r7, #23]
          break;
 800ed9e:	e07d      	b.n	800ee9c <USBD_MSC_Setup+0x250>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eda6:	2b03      	cmp	r3, #3
 800eda8:	d106      	bne.n	800edb8 <USBD_MSC_Setup+0x16c>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	885b      	ldrh	r3, [r3, #2]
 800edae:	b2db      	uxtb	r3, r3
 800edb0:	461a      	mov	r2, r3
 800edb2:	693b      	ldr	r3, [r7, #16]
 800edb4:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800edb6:	e071      	b.n	800ee9c <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 800edb8:	6839      	ldr	r1, [r7, #0]
 800edba:	6878      	ldr	r0, [r7, #4]
 800edbc:	f002 f8e1 	bl	8010f82 <USBD_CtlError>
            ret = USBD_FAIL;
 800edc0:	2302      	movs	r3, #2
 800edc2:	75fb      	strb	r3, [r7, #23]
          break;
 800edc4:	e06a      	b.n	800ee9c <USBD_MSC_Setup+0x250>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	889b      	ldrh	r3, [r3, #4]
 800edca:	b2db      	uxtb	r3, r3
 800edcc:	4619      	mov	r1, r3
 800edce:	6878      	ldr	r0, [r7, #4]
 800edd0:	f007 ffd8 	bl	8016d84 <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	889b      	ldrh	r3, [r3, #4]
 800edd8:	b2db      	uxtb	r3, r3
 800edda:	4619      	mov	r1, r3
 800eddc:	6878      	ldr	r0, [r7, #4]
 800edde:	f007 ffb2 	bl	8016d46 <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	889b      	ldrh	r3, [r3, #4]
 800ede6:	b25b      	sxtb	r3, r3
 800ede8:	2b00      	cmp	r3, #0
 800edea:	da23      	bge.n	800ee34 <USBD_MSC_Setup+0x1e8>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	889b      	ldrh	r3, [r3, #4]
 800edf0:	b2db      	uxtb	r3, r3
 800edf2:	f003 020f 	and.w	r2, r3, #15
 800edf6:	6879      	ldr	r1, [r7, #4]
 800edf8:	4613      	mov	r3, r2
 800edfa:	009b      	lsls	r3, r3, #2
 800edfc:	4413      	add	r3, r2
 800edfe:	009b      	lsls	r3, r3, #2
 800ee00:	440b      	add	r3, r1
 800ee02:	3318      	adds	r3, #24
 800ee04:	2200      	movs	r2, #0
 800ee06:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	7c1b      	ldrb	r3, [r3, #16]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d107      	bne.n	800ee20 <USBD_MSC_Setup+0x1d4>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 800ee10:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ee14:	2202      	movs	r2, #2
 800ee16:	2181      	movs	r1, #129	; 0x81
 800ee18:	6878      	ldr	r0, [r7, #4]
 800ee1a:	f007 ff6e 	bl	8016cfa <USBD_LL_OpenEP>
 800ee1e:	e005      	b.n	800ee2c <USBD_MSC_Setup+0x1e0>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 800ee20:	2340      	movs	r3, #64	; 0x40
 800ee22:	2202      	movs	r2, #2
 800ee24:	2181      	movs	r1, #129	; 0x81
 800ee26:	6878      	ldr	r0, [r7, #4]
 800ee28:	f007 ff67 	bl	8016cfa <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2201      	movs	r2, #1
 800ee30:	62da      	str	r2, [r3, #44]	; 0x2c
 800ee32:	e024      	b.n	800ee7e <USBD_MSC_Setup+0x232>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	889b      	ldrh	r3, [r3, #4]
 800ee38:	b2db      	uxtb	r3, r3
 800ee3a:	f003 020f 	and.w	r2, r3, #15
 800ee3e:	6879      	ldr	r1, [r7, #4]
 800ee40:	4613      	mov	r3, r2
 800ee42:	009b      	lsls	r3, r3, #2
 800ee44:	4413      	add	r3, r2
 800ee46:	009b      	lsls	r3, r3, #2
 800ee48:	440b      	add	r3, r1
 800ee4a:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800ee4e:	2200      	movs	r2, #0
 800ee50:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	7c1b      	ldrb	r3, [r3, #16]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d107      	bne.n	800ee6a <USBD_MSC_Setup+0x21e>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 800ee5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ee5e:	2202      	movs	r2, #2
 800ee60:	2101      	movs	r1, #1
 800ee62:	6878      	ldr	r0, [r7, #4]
 800ee64:	f007 ff49 	bl	8016cfa <USBD_LL_OpenEP>
 800ee68:	e005      	b.n	800ee76 <USBD_MSC_Setup+0x22a>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 800ee6a:	2340      	movs	r3, #64	; 0x40
 800ee6c:	2202      	movs	r2, #2
 800ee6e:	2101      	movs	r1, #1
 800ee70:	6878      	ldr	r0, [r7, #4]
 800ee72:	f007 ff42 	bl	8016cfa <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	2201      	movs	r2, #1
 800ee7a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	889b      	ldrh	r3, [r3, #4]
 800ee82:	b2db      	uxtb	r3, r3
 800ee84:	4619      	mov	r1, r3
 800ee86:	6878      	ldr	r0, [r7, #4]
 800ee88:	f000 fa52 	bl	800f330 <MSC_BOT_CplClrFeature>
          break;
 800ee8c:	e006      	b.n	800ee9c <USBD_MSC_Setup+0x250>

        default:
          USBD_CtlError(pdev, req);
 800ee8e:	6839      	ldr	r1, [r7, #0]
 800ee90:	6878      	ldr	r0, [r7, #4]
 800ee92:	f002 f876 	bl	8010f82 <USBD_CtlError>
          ret = USBD_FAIL;
 800ee96:	2302      	movs	r3, #2
 800ee98:	75fb      	strb	r3, [r7, #23]
          break;
 800ee9a:	bf00      	nop
      }
      break;
 800ee9c:	e006      	b.n	800eeac <USBD_MSC_Setup+0x260>

    default:
      USBD_CtlError(pdev, req);
 800ee9e:	6839      	ldr	r1, [r7, #0]
 800eea0:	6878      	ldr	r0, [r7, #4]
 800eea2:	f002 f86e 	bl	8010f82 <USBD_CtlError>
      ret = USBD_FAIL;
 800eea6:	2302      	movs	r3, #2
 800eea8:	75fb      	strb	r3, [r7, #23]
      break;
 800eeaa:	bf00      	nop
  }

  return ret;
 800eeac:	7dfb      	ldrb	r3, [r7, #23]
}
 800eeae:	4618      	mov	r0, r3
 800eeb0:	3718      	adds	r7, #24
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bd80      	pop	{r7, pc}
 800eeb6:	bf00      	nop

0800eeb8 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b082      	sub	sp, #8
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
 800eec0:	460b      	mov	r3, r1
 800eec2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800eec4:	78fb      	ldrb	r3, [r7, #3]
 800eec6:	4619      	mov	r1, r3
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	f000 f8c3 	bl	800f054 <MSC_BOT_DataIn>

  return USBD_OK;
 800eece:	2300      	movs	r3, #0
}
 800eed0:	4618      	mov	r0, r3
 800eed2:	3708      	adds	r7, #8
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}

0800eed8 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b082      	sub	sp, #8
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
 800eee0:	460b      	mov	r3, r1
 800eee2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800eee4:	78fb      	ldrb	r3, [r7, #3]
 800eee6:	4619      	mov	r1, r3
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	f000 f8e4 	bl	800f0b6 <MSC_BOT_DataOut>

  return USBD_OK;
 800eeee:	2300      	movs	r3, #0
}
 800eef0:	4618      	mov	r0, r3
 800eef2:	3708      	adds	r7, #8
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd80      	pop	{r7, pc}

0800eef8 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800eef8:	b480      	push	{r7}
 800eefa:	b083      	sub	sp, #12
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	2220      	movs	r2, #32
 800ef04:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800ef06:	4b03      	ldr	r3, [pc, #12]	; (800ef14 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800ef08:	4618      	mov	r0, r3
 800ef0a:	370c      	adds	r7, #12
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef12:	4770      	bx	lr
 800ef14:	24000048 	.word	0x24000048

0800ef18 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800ef18:	b480      	push	{r7}
 800ef1a:	b083      	sub	sp, #12
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	2220      	movs	r2, #32
 800ef24:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800ef26:	4b03      	ldr	r3, [pc, #12]	; (800ef34 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800ef28:	4618      	mov	r0, r3
 800ef2a:	370c      	adds	r7, #12
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef32:	4770      	bx	lr
 800ef34:	24000068 	.word	0x24000068

0800ef38 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ef38:	b480      	push	{r7}
 800ef3a:	b083      	sub	sp, #12
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	2220      	movs	r2, #32
 800ef44:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800ef46:	4b03      	ldr	r3, [pc, #12]	; (800ef54 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ef48:	4618      	mov	r0, r3
 800ef4a:	370c      	adds	r7, #12
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef52:	4770      	bx	lr
 800ef54:	24000088 	.word	0x24000088

0800ef58 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ef58:	b480      	push	{r7}
 800ef5a:	b083      	sub	sp, #12
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	220a      	movs	r2, #10
 800ef64:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800ef66:	4b03      	ldr	r3, [pc, #12]	; (800ef74 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ef68:	4618      	mov	r0, r3
 800ef6a:	370c      	adds	r7, #12
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef72:	4770      	bx	lr
 800ef74:	240000a8 	.word	0x240000a8

0800ef78 <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 800ef78:	b480      	push	{r7}
 800ef7a:	b083      	sub	sp, #12
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
 800ef80:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 800ef82:	683b      	ldr	r3, [r7, #0]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d003      	beq.n	800ef90 <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	683a      	ldr	r2, [r7, #0]
 800ef8c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 800ef90:	2300      	movs	r3, #0
}
 800ef92:	4618      	mov	r0, r3
 800ef94:	370c      	adds	r7, #12
 800ef96:	46bd      	mov	sp, r7
 800ef98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9c:	4770      	bx	lr

0800ef9e <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 800ef9e:	b580      	push	{r7, lr}
 800efa0:	b084      	sub	sp, #16
 800efa2:	af00      	add	r7, sp, #0
 800efa4:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800efac:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	2200      	movs	r2, #0
 800efb2:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	2200      	movs	r2, #0
 800efb8:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	2200      	movs	r2, #0
 800efbe:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	2200      	movs	r2, #0
 800efc6:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	2000      	movs	r0, #0
 800efd4:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800efd6:	2101      	movs	r1, #1
 800efd8:	6878      	ldr	r0, [r7, #4]
 800efda:	f007 fed3 	bl	8016d84 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800efde:	2181      	movs	r1, #129	; 0x81
 800efe0:	6878      	ldr	r0, [r7, #4]
 800efe2:	f007 fecf 	bl	8016d84 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800efec:	231f      	movs	r3, #31
 800efee:	2101      	movs	r1, #1
 800eff0:	6878      	ldr	r0, [r7, #4]
 800eff2:	f007 ff92 	bl	8016f1a <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 800eff6:	bf00      	nop
 800eff8:	3710      	adds	r7, #16
 800effa:	46bd      	mov	sp, r7
 800effc:	bd80      	pop	{r7, pc}

0800effe <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 800effe:	b580      	push	{r7, lr}
 800f000:	b084      	sub	sp, #16
 800f002:	af00      	add	r7, sp, #0
 800f004:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f00c:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	2200      	movs	r2, #0
 800f012:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	2201      	movs	r2, #1
 800f018:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800f020:	231f      	movs	r3, #31
 800f022:	2101      	movs	r1, #1
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	f007 ff78 	bl	8016f1a <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 800f02a:	bf00      	nop
 800f02c:	3710      	adds	r7, #16
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}

0800f032 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800f032:	b480      	push	{r7}
 800f034:	b085      	sub	sp, #20
 800f036:	af00      	add	r7, sp, #0
 800f038:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f040:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	2200      	movs	r2, #0
 800f046:	721a      	strb	r2, [r3, #8]
}
 800f048:	bf00      	nop
 800f04a:	3714      	adds	r7, #20
 800f04c:	46bd      	mov	sp, r7
 800f04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f052:	4770      	bx	lr

0800f054 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b084      	sub	sp, #16
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
 800f05c:	460b      	mov	r3, r1
 800f05e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f066:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	7a1b      	ldrb	r3, [r3, #8]
 800f06c:	2b02      	cmp	r3, #2
 800f06e:	d004      	beq.n	800f07a <MSC_BOT_DataIn+0x26>
 800f070:	2b02      	cmp	r3, #2
 800f072:	db19      	blt.n	800f0a8 <MSC_BOT_DataIn+0x54>
 800f074:	2b04      	cmp	r3, #4
 800f076:	dc17      	bgt.n	800f0a8 <MSC_BOT_DataIn+0x54>
 800f078:	e011      	b.n	800f09e <MSC_BOT_DataIn+0x4a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800f086:	461a      	mov	r2, r3
 800f088:	6878      	ldr	r0, [r7, #4]
 800f08a:	f000 f979 	bl	800f380 <SCSI_ProcessCmd>
 800f08e:	4603      	mov	r3, r0
 800f090:	2b00      	cmp	r3, #0
 800f092:	da0b      	bge.n	800f0ac <MSC_BOT_DataIn+0x58>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800f094:	2101      	movs	r1, #1
 800f096:	6878      	ldr	r0, [r7, #4]
 800f098:	f000 f8f0 	bl	800f27c <MSC_BOT_SendCSW>
      }
      break;
 800f09c:	e006      	b.n	800f0ac <MSC_BOT_DataIn+0x58>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800f09e:	2100      	movs	r1, #0
 800f0a0:	6878      	ldr	r0, [r7, #4]
 800f0a2:	f000 f8eb 	bl	800f27c <MSC_BOT_SendCSW>
      break;
 800f0a6:	e002      	b.n	800f0ae <MSC_BOT_DataIn+0x5a>

    default:
      break;
 800f0a8:	bf00      	nop
 800f0aa:	e000      	b.n	800f0ae <MSC_BOT_DataIn+0x5a>
      break;
 800f0ac:	bf00      	nop
  }
}
 800f0ae:	bf00      	nop
 800f0b0:	3710      	adds	r7, #16
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd80      	pop	{r7, pc}

0800f0b6 <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 800f0b6:	b580      	push	{r7, lr}
 800f0b8:	b084      	sub	sp, #16
 800f0ba:	af00      	add	r7, sp, #0
 800f0bc:	6078      	str	r0, [r7, #4]
 800f0be:	460b      	mov	r3, r1
 800f0c0:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0c8:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	7a1b      	ldrb	r3, [r3, #8]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d002      	beq.n	800f0d8 <MSC_BOT_DataOut+0x22>
 800f0d2:	2b01      	cmp	r3, #1
 800f0d4:	d004      	beq.n	800f0e0 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800f0d6:	e015      	b.n	800f104 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	f000 f817 	bl	800f10c <MSC_BOT_CBW_Decode>
      break;
 800f0de:	e011      	b.n	800f104 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800f0ec:	461a      	mov	r2, r3
 800f0ee:	6878      	ldr	r0, [r7, #4]
 800f0f0:	f000 f946 	bl	800f380 <SCSI_ProcessCmd>
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	da03      	bge.n	800f102 <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800f0fa:	2101      	movs	r1, #1
 800f0fc:	6878      	ldr	r0, [r7, #4]
 800f0fe:	f000 f8bd 	bl	800f27c <MSC_BOT_SendCSW>
      break;
 800f102:	bf00      	nop
  }
}
 800f104:	bf00      	nop
 800f106:	3710      	adds	r7, #16
 800f108:	46bd      	mov	sp, r7
 800f10a:	bd80      	pop	{r7, pc}

0800f10c <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b084      	sub	sp, #16
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f11a:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800f134:	2101      	movs	r1, #1
 800f136:	6878      	ldr	r0, [r7, #4]
 800f138:	f007 ff12 	bl	8016f60 <USBD_LL_GetRxDataSize>
 800f13c:	4603      	mov	r3, r0
 800f13e:	2b1f      	cmp	r3, #31
 800f140:	d114      	bne.n	800f16c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800f148:	4a32      	ldr	r2, [pc, #200]	; (800f214 <MSC_BOT_CBW_Decode+0x108>)
 800f14a:	4293      	cmp	r3, r2
 800f14c:	d10e      	bne.n	800f16c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) ||
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800f154:	2b01      	cmp	r3, #1
 800f156:	d809      	bhi.n	800f16c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
      (hmsc->cbw.bLUN > 1U) ||
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d004      	beq.n	800f16c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 800f168:	2b10      	cmp	r3, #16
 800f16a:	d90e      	bls.n	800f18a <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800f172:	2320      	movs	r3, #32
 800f174:	2205      	movs	r2, #5
 800f176:	6878      	ldr	r0, [r7, #4]
 800f178:	f000 fc4b 	bl	800fa12 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	2202      	movs	r2, #2
 800f180:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800f182:	6878      	ldr	r0, [r7, #4]
 800f184:	f000 f8a6 	bl	800f2d4 <MSC_BOT_Abort>
 800f188:	e041      	b.n	800f20e <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800f196:	461a      	mov	r2, r3
 800f198:	6878      	ldr	r0, [r7, #4]
 800f19a:	f000 f8f1 	bl	800f380 <SCSI_ProcessCmd>
 800f19e:	4603      	mov	r3, r0
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	da0c      	bge.n	800f1be <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	7a1b      	ldrb	r3, [r3, #8]
 800f1a8:	2b05      	cmp	r3, #5
 800f1aa:	d104      	bne.n	800f1b6 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800f1ac:	2101      	movs	r1, #1
 800f1ae:	6878      	ldr	r0, [r7, #4]
 800f1b0:	f000 f864 	bl	800f27c <MSC_BOT_SendCSW>
 800f1b4:	e02b      	b.n	800f20e <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800f1b6:	6878      	ldr	r0, [r7, #4]
 800f1b8:	f000 f88c 	bl	800f2d4 <MSC_BOT_Abort>
 800f1bc:	e027      	b.n	800f20e <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	7a1b      	ldrb	r3, [r3, #8]
 800f1c2:	2b02      	cmp	r3, #2
 800f1c4:	d022      	beq.n	800f20c <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800f1ca:	2b01      	cmp	r3, #1
 800f1cc:	d01e      	beq.n	800f20c <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800f1d2:	2b03      	cmp	r3, #3
 800f1d4:	d01a      	beq.n	800f20c <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	895b      	ldrh	r3, [r3, #10]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d009      	beq.n	800f1f2 <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	f103 010c 	add.w	r1, r3, #12
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	895b      	ldrh	r3, [r3, #10]
 800f1e8:	461a      	mov	r2, r3
 800f1ea:	6878      	ldr	r0, [r7, #4]
 800f1ec:	f000 f814 	bl	800f218 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800f1f0:	e00d      	b.n	800f20e <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	895b      	ldrh	r3, [r3, #10]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d104      	bne.n	800f204 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800f1fa:	2100      	movs	r1, #0
 800f1fc:	6878      	ldr	r0, [r7, #4]
 800f1fe:	f000 f83d 	bl	800f27c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800f202:	e004      	b.n	800f20e <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800f204:	6878      	ldr	r0, [r7, #4]
 800f206:	f000 f865 	bl	800f2d4 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800f20a:	e000      	b.n	800f20e <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 800f20c:	bf00      	nop
    }
  }
}
 800f20e:	3710      	adds	r7, #16
 800f210:	46bd      	mov	sp, r7
 800f212:	bd80      	pop	{r7, pc}
 800f214:	43425355 	.word	0x43425355

0800f218 <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b086      	sub	sp, #24
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	60f8      	str	r0, [r7, #12]
 800f220:	60b9      	str	r1, [r7, #8]
 800f222:	4613      	mov	r3, r2
 800f224:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f22c:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 800f22e:	697b      	ldr	r3, [r7, #20]
 800f230:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800f234:	88fb      	ldrh	r3, [r7, #6]
 800f236:	429a      	cmp	r2, r3
 800f238:	d204      	bcs.n	800f244 <MSC_BOT_SendData+0x2c>
 800f23a:	697b      	ldr	r3, [r7, #20]
 800f23c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f240:	b29b      	uxth	r3, r3
 800f242:	e000      	b.n	800f246 <MSC_BOT_SendData+0x2e>
 800f244:	88fb      	ldrh	r3, [r7, #6]
 800f246:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 800f248:	697b      	ldr	r3, [r7, #20]
 800f24a:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800f24e:	88fb      	ldrh	r3, [r7, #6]
 800f250:	1ad2      	subs	r2, r2, r3
 800f252:	697b      	ldr	r3, [r7, #20]
 800f254:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800f258:	697b      	ldr	r3, [r7, #20]
 800f25a:	2200      	movs	r2, #0
 800f25c:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800f260:	697b      	ldr	r3, [r7, #20]
 800f262:	2204      	movs	r2, #4
 800f264:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800f266:	8a7b      	ldrh	r3, [r7, #18]
 800f268:	68ba      	ldr	r2, [r7, #8]
 800f26a:	2181      	movs	r1, #129	; 0x81
 800f26c:	68f8      	ldr	r0, [r7, #12]
 800f26e:	f007 fe31 	bl	8016ed4 <USBD_LL_Transmit>
}
 800f272:	bf00      	nop
 800f274:	3718      	adds	r7, #24
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}
	...

0800f27c <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b084      	sub	sp, #16
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
 800f284:	460b      	mov	r3, r1
 800f286:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f28e:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	4a0f      	ldr	r2, [pc, #60]	; (800f2d0 <MSC_BOT_SendCSW+0x54>)
 800f294:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	78fa      	ldrb	r2, [r7, #3]
 800f29c:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 800f2ac:	230d      	movs	r3, #13
 800f2ae:	2181      	movs	r1, #129	; 0x81
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	f007 fe0f 	bl	8016ed4 <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800f2bc:	231f      	movs	r3, #31
 800f2be:	2101      	movs	r1, #1
 800f2c0:	6878      	ldr	r0, [r7, #4]
 800f2c2:	f007 fe2a 	bl	8016f1a <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 800f2c6:	bf00      	nop
 800f2c8:	3710      	adds	r7, #16
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	bd80      	pop	{r7, pc}
 800f2ce:	bf00      	nop
 800f2d0:	53425355 	.word	0x53425355

0800f2d4 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b084      	sub	sp, #16
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2e2:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d10c      	bne.n	800f308 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d007      	beq.n	800f308 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d103      	bne.n	800f308 <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800f300:	2101      	movs	r1, #1
 800f302:	6878      	ldr	r0, [r7, #4]
 800f304:	f007 fd5d 	bl	8016dc2 <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800f308:	2181      	movs	r1, #129	; 0x81
 800f30a:	6878      	ldr	r0, [r7, #4]
 800f30c:	f007 fd59 	bl	8016dc2 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	7a5b      	ldrb	r3, [r3, #9]
 800f314:	2b02      	cmp	r3, #2
 800f316:	d107      	bne.n	800f328 <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800f31e:	231f      	movs	r3, #31
 800f320:	2101      	movs	r1, #1
 800f322:	6878      	ldr	r0, [r7, #4]
 800f324:	f007 fdf9 	bl	8016f1a <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 800f328:	bf00      	nop
 800f32a:	3710      	adds	r7, #16
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd80      	pop	{r7, pc}

0800f330 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b084      	sub	sp, #16
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
 800f338:	460b      	mov	r3, r1
 800f33a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f342:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	7a5b      	ldrb	r3, [r3, #9]
 800f348:	2b02      	cmp	r3, #2
 800f34a:	d107      	bne.n	800f35c <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800f34c:	2181      	movs	r1, #129	; 0x81
 800f34e:	6878      	ldr	r0, [r7, #4]
 800f350:	f007 fd37 	bl	8016dc2 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	2200      	movs	r2, #0
 800f358:	725a      	strb	r2, [r3, #9]
 800f35a:	e00d      	b.n	800f378 <MSC_BOT_CplClrFeature+0x48>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800f35c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f360:	2b00      	cmp	r3, #0
 800f362:	da08      	bge.n	800f376 <MSC_BOT_CplClrFeature+0x46>
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	7a5b      	ldrb	r3, [r3, #9]
 800f368:	2b01      	cmp	r3, #1
 800f36a:	d004      	beq.n	800f376 <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800f36c:	2101      	movs	r1, #1
 800f36e:	6878      	ldr	r0, [r7, #4]
 800f370:	f7ff ff84 	bl	800f27c <MSC_BOT_SendCSW>
 800f374:	e000      	b.n	800f378 <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 800f376:	bf00      	nop
  }
}
 800f378:	3710      	adds	r7, #16
 800f37a:	46bd      	mov	sp, r7
 800f37c:	bd80      	pop	{r7, pc}
	...

0800f380 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b084      	sub	sp, #16
 800f384:	af00      	add	r7, sp, #0
 800f386:	60f8      	str	r0, [r7, #12]
 800f388:	460b      	mov	r3, r1
 800f38a:	607a      	str	r2, [r7, #4]
 800f38c:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	781b      	ldrb	r3, [r3, #0]
 800f392:	2b5a      	cmp	r3, #90	; 0x5a
 800f394:	f200 810e 	bhi.w	800f5b4 <SCSI_ProcessCmd+0x234>
 800f398:	a201      	add	r2, pc, #4	; (adr r2, 800f3a0 <SCSI_ProcessCmd+0x20>)
 800f39a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f39e:	bf00      	nop
 800f3a0:	0800f50d 	.word	0x0800f50d
 800f3a4:	0800f5b5 	.word	0x0800f5b5
 800f3a8:	0800f5b5 	.word	0x0800f5b5
 800f3ac:	0800f51b 	.word	0x0800f51b
 800f3b0:	0800f5b5 	.word	0x0800f5b5
 800f3b4:	0800f5b5 	.word	0x0800f5b5
 800f3b8:	0800f5b5 	.word	0x0800f5b5
 800f3bc:	0800f5b5 	.word	0x0800f5b5
 800f3c0:	0800f5b5 	.word	0x0800f5b5
 800f3c4:	0800f5b5 	.word	0x0800f5b5
 800f3c8:	0800f5b5 	.word	0x0800f5b5
 800f3cc:	0800f5b5 	.word	0x0800f5b5
 800f3d0:	0800f5b5 	.word	0x0800f5b5
 800f3d4:	0800f5b5 	.word	0x0800f5b5
 800f3d8:	0800f5b5 	.word	0x0800f5b5
 800f3dc:	0800f5b5 	.word	0x0800f5b5
 800f3e0:	0800f5b5 	.word	0x0800f5b5
 800f3e4:	0800f5b5 	.word	0x0800f5b5
 800f3e8:	0800f529 	.word	0x0800f529
 800f3ec:	0800f5b5 	.word	0x0800f5b5
 800f3f0:	0800f5b5 	.word	0x0800f5b5
 800f3f4:	0800f5b5 	.word	0x0800f5b5
 800f3f8:	0800f5b5 	.word	0x0800f5b5
 800f3fc:	0800f5b5 	.word	0x0800f5b5
 800f400:	0800f5b5 	.word	0x0800f5b5
 800f404:	0800f5b5 	.word	0x0800f5b5
 800f408:	0800f553 	.word	0x0800f553
 800f40c:	0800f537 	.word	0x0800f537
 800f410:	0800f5b5 	.word	0x0800f5b5
 800f414:	0800f5b5 	.word	0x0800f5b5
 800f418:	0800f545 	.word	0x0800f545
 800f41c:	0800f5b5 	.word	0x0800f5b5
 800f420:	0800f5b5 	.word	0x0800f5b5
 800f424:	0800f5b5 	.word	0x0800f5b5
 800f428:	0800f5b5 	.word	0x0800f5b5
 800f42c:	0800f56f 	.word	0x0800f56f
 800f430:	0800f5b5 	.word	0x0800f5b5
 800f434:	0800f57d 	.word	0x0800f57d
 800f438:	0800f5b5 	.word	0x0800f5b5
 800f43c:	0800f5b5 	.word	0x0800f5b5
 800f440:	0800f58b 	.word	0x0800f58b
 800f444:	0800f5b5 	.word	0x0800f5b5
 800f448:	0800f599 	.word	0x0800f599
 800f44c:	0800f5b5 	.word	0x0800f5b5
 800f450:	0800f5b5 	.word	0x0800f5b5
 800f454:	0800f5b5 	.word	0x0800f5b5
 800f458:	0800f5b5 	.word	0x0800f5b5
 800f45c:	0800f5a7 	.word	0x0800f5a7
 800f460:	0800f5b5 	.word	0x0800f5b5
 800f464:	0800f5b5 	.word	0x0800f5b5
 800f468:	0800f5b5 	.word	0x0800f5b5
 800f46c:	0800f5b5 	.word	0x0800f5b5
 800f470:	0800f5b5 	.word	0x0800f5b5
 800f474:	0800f5b5 	.word	0x0800f5b5
 800f478:	0800f5b5 	.word	0x0800f5b5
 800f47c:	0800f5b5 	.word	0x0800f5b5
 800f480:	0800f5b5 	.word	0x0800f5b5
 800f484:	0800f5b5 	.word	0x0800f5b5
 800f488:	0800f5b5 	.word	0x0800f5b5
 800f48c:	0800f5b5 	.word	0x0800f5b5
 800f490:	0800f5b5 	.word	0x0800f5b5
 800f494:	0800f5b5 	.word	0x0800f5b5
 800f498:	0800f5b5 	.word	0x0800f5b5
 800f49c:	0800f5b5 	.word	0x0800f5b5
 800f4a0:	0800f5b5 	.word	0x0800f5b5
 800f4a4:	0800f5b5 	.word	0x0800f5b5
 800f4a8:	0800f5b5 	.word	0x0800f5b5
 800f4ac:	0800f5b5 	.word	0x0800f5b5
 800f4b0:	0800f5b5 	.word	0x0800f5b5
 800f4b4:	0800f5b5 	.word	0x0800f5b5
 800f4b8:	0800f5b5 	.word	0x0800f5b5
 800f4bc:	0800f5b5 	.word	0x0800f5b5
 800f4c0:	0800f5b5 	.word	0x0800f5b5
 800f4c4:	0800f5b5 	.word	0x0800f5b5
 800f4c8:	0800f5b5 	.word	0x0800f5b5
 800f4cc:	0800f5b5 	.word	0x0800f5b5
 800f4d0:	0800f5b5 	.word	0x0800f5b5
 800f4d4:	0800f5b5 	.word	0x0800f5b5
 800f4d8:	0800f5b5 	.word	0x0800f5b5
 800f4dc:	0800f5b5 	.word	0x0800f5b5
 800f4e0:	0800f5b5 	.word	0x0800f5b5
 800f4e4:	0800f5b5 	.word	0x0800f5b5
 800f4e8:	0800f5b5 	.word	0x0800f5b5
 800f4ec:	0800f5b5 	.word	0x0800f5b5
 800f4f0:	0800f5b5 	.word	0x0800f5b5
 800f4f4:	0800f5b5 	.word	0x0800f5b5
 800f4f8:	0800f5b5 	.word	0x0800f5b5
 800f4fc:	0800f5b5 	.word	0x0800f5b5
 800f500:	0800f5b5 	.word	0x0800f5b5
 800f504:	0800f5b5 	.word	0x0800f5b5
 800f508:	0800f561 	.word	0x0800f561
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 800f50c:	7afb      	ldrb	r3, [r7, #11]
 800f50e:	687a      	ldr	r2, [r7, #4]
 800f510:	4619      	mov	r1, r3
 800f512:	68f8      	ldr	r0, [r7, #12]
 800f514:	f000 f85c 	bl	800f5d0 <SCSI_TestUnitReady>
      break;
 800f518:	e055      	b.n	800f5c6 <SCSI_ProcessCmd+0x246>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 800f51a:	7afb      	ldrb	r3, [r7, #11]
 800f51c:	687a      	ldr	r2, [r7, #4]
 800f51e:	4619      	mov	r1, r3
 800f520:	68f8      	ldr	r0, [r7, #12]
 800f522:	f000 fa0b 	bl	800f93c <SCSI_RequestSense>
      break;
 800f526:	e04e      	b.n	800f5c6 <SCSI_ProcessCmd+0x246>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 800f528:	7afb      	ldrb	r3, [r7, #11]
 800f52a:	687a      	ldr	r2, [r7, #4]
 800f52c:	4619      	mov	r1, r3
 800f52e:	68f8      	ldr	r0, [r7, #12]
 800f530:	f000 f888 	bl	800f644 <SCSI_Inquiry>
      break;
 800f534:	e047      	b.n	800f5c6 <SCSI_ProcessCmd+0x246>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 800f536:	7afb      	ldrb	r3, [r7, #11]
 800f538:	687a      	ldr	r2, [r7, #4]
 800f53a:	4619      	mov	r1, r3
 800f53c:	68f8      	ldr	r0, [r7, #12]
 800f53e:	f000 faa2 	bl	800fa86 <SCSI_StartStopUnit>
      break;
 800f542:	e040      	b.n	800f5c6 <SCSI_ProcessCmd+0x246>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 800f544:	7afb      	ldrb	r3, [r7, #11]
 800f546:	687a      	ldr	r2, [r7, #4]
 800f548:	4619      	mov	r1, r3
 800f54a:	68f8      	ldr	r0, [r7, #12]
 800f54c:	f000 fa9b 	bl	800fa86 <SCSI_StartStopUnit>
      break;
 800f550:	e039      	b.n	800f5c6 <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 800f552:	7afb      	ldrb	r3, [r7, #11]
 800f554:	687a      	ldr	r2, [r7, #4]
 800f556:	4619      	mov	r1, r3
 800f558:	68f8      	ldr	r0, [r7, #12]
 800f55a:	f000 f99f 	bl	800f89c <SCSI_ModeSense6>
      break;
 800f55e:	e032      	b.n	800f5c6 <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 800f560:	7afb      	ldrb	r3, [r7, #11]
 800f562:	687a      	ldr	r2, [r7, #4]
 800f564:	4619      	mov	r1, r3
 800f566:	68f8      	ldr	r0, [r7, #12]
 800f568:	f000 f9c0 	bl	800f8ec <SCSI_ModeSense10>
      break;
 800f56c:	e02b      	b.n	800f5c6 <SCSI_ProcessCmd+0x246>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800f56e:	7afb      	ldrb	r3, [r7, #11]
 800f570:	687a      	ldr	r2, [r7, #4]
 800f572:	4619      	mov	r1, r3
 800f574:	68f8      	ldr	r0, [r7, #12]
 800f576:	f000 f92c 	bl	800f7d2 <SCSI_ReadFormatCapacity>
      break;
 800f57a:	e024      	b.n	800f5c6 <SCSI_ProcessCmd+0x246>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 800f57c:	7afb      	ldrb	r3, [r7, #11]
 800f57e:	687a      	ldr	r2, [r7, #4]
 800f580:	4619      	mov	r1, r3
 800f582:	68f8      	ldr	r0, [r7, #12]
 800f584:	f000 f8be 	bl	800f704 <SCSI_ReadCapacity10>
      break;
 800f588:	e01d      	b.n	800f5c6 <SCSI_ProcessCmd+0x246>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 800f58a:	7afb      	ldrb	r3, [r7, #11]
 800f58c:	687a      	ldr	r2, [r7, #4]
 800f58e:	4619      	mov	r1, r3
 800f590:	68f8      	ldr	r0, [r7, #12]
 800f592:	f000 fa8d 	bl	800fab0 <SCSI_Read10>
      break;
 800f596:	e016      	b.n	800f5c6 <SCSI_ProcessCmd+0x246>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 800f598:	7afb      	ldrb	r3, [r7, #11]
 800f59a:	687a      	ldr	r2, [r7, #4]
 800f59c:	4619      	mov	r1, r3
 800f59e:	68f8      	ldr	r0, [r7, #12]
 800f5a0:	f000 fb12 	bl	800fbc8 <SCSI_Write10>
      break;
 800f5a4:	e00f      	b.n	800f5c6 <SCSI_ProcessCmd+0x246>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 800f5a6:	7afb      	ldrb	r3, [r7, #11]
 800f5a8:	687a      	ldr	r2, [r7, #4]
 800f5aa:	4619      	mov	r1, r3
 800f5ac:	68f8      	ldr	r0, [r7, #12]
 800f5ae:	f000 fbbb 	bl	800fd28 <SCSI_Verify10>
      break;
 800f5b2:	e008      	b.n	800f5c6 <SCSI_ProcessCmd+0x246>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800f5b4:	7af9      	ldrb	r1, [r7, #11]
 800f5b6:	2320      	movs	r3, #32
 800f5b8:	2205      	movs	r2, #5
 800f5ba:	68f8      	ldr	r0, [r7, #12]
 800f5bc:	f000 fa29 	bl	800fa12 <SCSI_SenseCode>
      return -1;
 800f5c0:	f04f 33ff 	mov.w	r3, #4294967295
 800f5c4:	e000      	b.n	800f5c8 <SCSI_ProcessCmd+0x248>
  }

  return 0;
 800f5c6:	2300      	movs	r3, #0
}
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	3710      	adds	r7, #16
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	bd80      	pop	{r7, pc}

0800f5d0 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b086      	sub	sp, #24
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	60f8      	str	r0, [r7, #12]
 800f5d8:	460b      	mov	r3, r1
 800f5da:	607a      	str	r2, [r7, #4]
 800f5dc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5e4:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800f5e6:	697b      	ldr	r3, [r7, #20]
 800f5e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d00a      	beq.n	800f606 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f5f0:	697b      	ldr	r3, [r7, #20]
 800f5f2:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800f5f6:	2320      	movs	r3, #32
 800f5f8:	2205      	movs	r2, #5
 800f5fa:	68f8      	ldr	r0, [r7, #12]
 800f5fc:	f000 fa09 	bl	800fa12 <SCSI_SenseCode>

    return -1;
 800f600:	f04f 33ff 	mov.w	r3, #4294967295
 800f604:	e019      	b.n	800f63a <SCSI_TestUnitReady+0x6a>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f60c:	689b      	ldr	r3, [r3, #8]
 800f60e:	7afa      	ldrb	r2, [r7, #11]
 800f610:	4610      	mov	r0, r2
 800f612:	4798      	blx	r3
 800f614:	4603      	mov	r3, r0
 800f616:	2b00      	cmp	r3, #0
 800f618:	d00b      	beq.n	800f632 <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f61a:	7af9      	ldrb	r1, [r7, #11]
 800f61c:	233a      	movs	r3, #58	; 0x3a
 800f61e:	2202      	movs	r2, #2
 800f620:	68f8      	ldr	r0, [r7, #12]
 800f622:	f000 f9f6 	bl	800fa12 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800f626:	697b      	ldr	r3, [r7, #20]
 800f628:	2205      	movs	r2, #5
 800f62a:	721a      	strb	r2, [r3, #8]

    return -1;
 800f62c:	f04f 33ff 	mov.w	r3, #4294967295
 800f630:	e003      	b.n	800f63a <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 800f632:	697b      	ldr	r3, [r7, #20]
 800f634:	2200      	movs	r2, #0
 800f636:	815a      	strh	r2, [r3, #10]

  return 0;
 800f638:	2300      	movs	r3, #0
}
 800f63a:	4618      	mov	r0, r3
 800f63c:	3718      	adds	r7, #24
 800f63e:	46bd      	mov	sp, r7
 800f640:	bd80      	pop	{r7, pc}
	...

0800f644 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f644:	b480      	push	{r7}
 800f646:	b089      	sub	sp, #36	; 0x24
 800f648:	af00      	add	r7, sp, #0
 800f64a:	60f8      	str	r0, [r7, #12]
 800f64c:	460b      	mov	r3, r1
 800f64e:	607a      	str	r2, [r7, #4]
 800f650:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f658:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	3301      	adds	r3, #1
 800f65e:	781b      	ldrb	r3, [r3, #0]
 800f660:	f003 0301 	and.w	r3, r3, #1
 800f664:	2b00      	cmp	r3, #0
 800f666:	d014      	beq.n	800f692 <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 800f668:	2307      	movs	r3, #7
 800f66a:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 800f66c:	69bb      	ldr	r3, [r7, #24]
 800f66e:	8bfa      	ldrh	r2, [r7, #30]
 800f670:	815a      	strh	r2, [r3, #10]

    while (len)
 800f672:	e00a      	b.n	800f68a <SCSI_Inquiry+0x46>
    {
      len--;
 800f674:	8bfb      	ldrh	r3, [r7, #30]
 800f676:	3b01      	subs	r3, #1
 800f678:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 800f67a:	8bfa      	ldrh	r2, [r7, #30]
 800f67c:	8bfb      	ldrh	r3, [r7, #30]
 800f67e:	4920      	ldr	r1, [pc, #128]	; (800f700 <SCSI_Inquiry+0xbc>)
 800f680:	5c89      	ldrb	r1, [r1, r2]
 800f682:	69ba      	ldr	r2, [r7, #24]
 800f684:	4413      	add	r3, r2
 800f686:	460a      	mov	r2, r1
 800f688:	731a      	strb	r2, [r3, #12]
    while (len)
 800f68a:	8bfb      	ldrh	r3, [r7, #30]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d1f1      	bne.n	800f674 <SCSI_Inquiry+0x30>
 800f690:	e02e      	b.n	800f6f0 <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f698:	69d9      	ldr	r1, [r3, #28]
 800f69a:	7afa      	ldrb	r2, [r7, #11]
 800f69c:	4613      	mov	r3, r2
 800f69e:	00db      	lsls	r3, r3, #3
 800f6a0:	4413      	add	r3, r2
 800f6a2:	009b      	lsls	r3, r3, #2
 800f6a4:	440b      	add	r3, r1
 800f6a6:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800f6a8:	697b      	ldr	r3, [r7, #20]
 800f6aa:	3304      	adds	r3, #4
 800f6ac:	781b      	ldrb	r3, [r3, #0]
 800f6ae:	b29b      	uxth	r3, r3
 800f6b0:	3305      	adds	r3, #5
 800f6b2:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	3304      	adds	r3, #4
 800f6b8:	781b      	ldrb	r3, [r3, #0]
 800f6ba:	b29b      	uxth	r3, r3
 800f6bc:	8bfa      	ldrh	r2, [r7, #30]
 800f6be:	429a      	cmp	r2, r3
 800f6c0:	d303      	bcc.n	800f6ca <SCSI_Inquiry+0x86>
    {
      len = params[4];
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	3304      	adds	r3, #4
 800f6c6:	781b      	ldrb	r3, [r3, #0]
 800f6c8:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 800f6ca:	69bb      	ldr	r3, [r7, #24]
 800f6cc:	8bfa      	ldrh	r2, [r7, #30]
 800f6ce:	815a      	strh	r2, [r3, #10]

    while (len)
 800f6d0:	e00b      	b.n	800f6ea <SCSI_Inquiry+0xa6>
    {
      len--;
 800f6d2:	8bfb      	ldrh	r3, [r7, #30]
 800f6d4:	3b01      	subs	r3, #1
 800f6d6:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 800f6d8:	8bfb      	ldrh	r3, [r7, #30]
 800f6da:	697a      	ldr	r2, [r7, #20]
 800f6dc:	441a      	add	r2, r3
 800f6de:	8bfb      	ldrh	r3, [r7, #30]
 800f6e0:	7811      	ldrb	r1, [r2, #0]
 800f6e2:	69ba      	ldr	r2, [r7, #24]
 800f6e4:	4413      	add	r3, r2
 800f6e6:	460a      	mov	r2, r1
 800f6e8:	731a      	strb	r2, [r3, #12]
    while (len)
 800f6ea:	8bfb      	ldrh	r3, [r7, #30]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d1f0      	bne.n	800f6d2 <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 800f6f0:	2300      	movs	r3, #0
}
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	3724      	adds	r7, #36	; 0x24
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fc:	4770      	bx	lr
 800f6fe:	bf00      	nop
 800f700:	08017368 	.word	0x08017368

0800f704 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b086      	sub	sp, #24
 800f708:	af00      	add	r7, sp, #0
 800f70a:	60f8      	str	r0, [r7, #12]
 800f70c:	460b      	mov	r3, r1
 800f70e:	607a      	str	r2, [r7, #4]
 800f710:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f718:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f720:	685b      	ldr	r3, [r3, #4]
 800f722:	697a      	ldr	r2, [r7, #20]
 800f724:	f502 7118 	add.w	r1, r2, #608	; 0x260
 800f728:	697a      	ldr	r2, [r7, #20]
 800f72a:	f202 225e 	addw	r2, r2, #606	; 0x25e
 800f72e:	7af8      	ldrb	r0, [r7, #11]
 800f730:	4798      	blx	r3
 800f732:	4603      	mov	r3, r0
 800f734:	2b00      	cmp	r3, #0
 800f736:	d008      	beq.n	800f74a <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f738:	7af9      	ldrb	r1, [r7, #11]
 800f73a:	233a      	movs	r3, #58	; 0x3a
 800f73c:	2202      	movs	r2, #2
 800f73e:	68f8      	ldr	r0, [r7, #12]
 800f740:	f000 f967 	bl	800fa12 <SCSI_SenseCode>
    return -1;
 800f744:	f04f 33ff 	mov.w	r3, #4294967295
 800f748:	e03f      	b.n	800f7ca <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800f74a:	697b      	ldr	r3, [r7, #20]
 800f74c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800f750:	3b01      	subs	r3, #1
 800f752:	0e1b      	lsrs	r3, r3, #24
 800f754:	b2da      	uxtb	r2, r3
 800f756:	697b      	ldr	r3, [r7, #20]
 800f758:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800f75a:	697b      	ldr	r3, [r7, #20]
 800f75c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800f760:	3b01      	subs	r3, #1
 800f762:	0c1b      	lsrs	r3, r3, #16
 800f764:	b2da      	uxtb	r2, r3
 800f766:	697b      	ldr	r3, [r7, #20]
 800f768:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800f76a:	697b      	ldr	r3, [r7, #20]
 800f76c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800f770:	3b01      	subs	r3, #1
 800f772:	0a1b      	lsrs	r3, r3, #8
 800f774:	b2da      	uxtb	r2, r3
 800f776:	697b      	ldr	r3, [r7, #20]
 800f778:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800f77a:	697b      	ldr	r3, [r7, #20]
 800f77c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800f780:	b2db      	uxtb	r3, r3
 800f782:	3b01      	subs	r3, #1
 800f784:	b2da      	uxtb	r2, r3
 800f786:	697b      	ldr	r3, [r7, #20]
 800f788:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800f78a:	697b      	ldr	r3, [r7, #20]
 800f78c:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800f790:	161b      	asrs	r3, r3, #24
 800f792:	b2da      	uxtb	r2, r3
 800f794:	697b      	ldr	r3, [r7, #20]
 800f796:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800f798:	697b      	ldr	r3, [r7, #20]
 800f79a:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800f79e:	141b      	asrs	r3, r3, #16
 800f7a0:	b2da      	uxtb	r2, r3
 800f7a2:	697b      	ldr	r3, [r7, #20]
 800f7a4:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800f7a6:	697b      	ldr	r3, [r7, #20]
 800f7a8:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800f7ac:	0a1b      	lsrs	r3, r3, #8
 800f7ae:	b29b      	uxth	r3, r3
 800f7b0:	b2da      	uxtb	r2, r3
 800f7b2:	697b      	ldr	r3, [r7, #20]
 800f7b4:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800f7b6:	697b      	ldr	r3, [r7, #20]
 800f7b8:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800f7bc:	b2da      	uxtb	r2, r3
 800f7be:	697b      	ldr	r3, [r7, #20]
 800f7c0:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 800f7c2:	697b      	ldr	r3, [r7, #20]
 800f7c4:	2208      	movs	r2, #8
 800f7c6:	815a      	strh	r2, [r3, #10]
    return 0;
 800f7c8:	2300      	movs	r3, #0
  }
}
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	3718      	adds	r7, #24
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}

0800f7d2 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f7d2:	b580      	push	{r7, lr}
 800f7d4:	b088      	sub	sp, #32
 800f7d6:	af00      	add	r7, sp, #0
 800f7d8:	60f8      	str	r0, [r7, #12]
 800f7da:	460b      	mov	r3, r1
 800f7dc:	607a      	str	r2, [r7, #4]
 800f7de:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f7e6:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	83fb      	strh	r3, [r7, #30]
 800f7ec:	e007      	b.n	800f7fe <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 800f7ee:	8bfb      	ldrh	r3, [r7, #30]
 800f7f0:	69ba      	ldr	r2, [r7, #24]
 800f7f2:	4413      	add	r3, r2
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 800f7f8:	8bfb      	ldrh	r3, [r7, #30]
 800f7fa:	3301      	adds	r3, #1
 800f7fc:	83fb      	strh	r3, [r7, #30]
 800f7fe:	8bfb      	ldrh	r3, [r7, #30]
 800f800:	2b0b      	cmp	r3, #11
 800f802:	d9f4      	bls.n	800f7ee <SCSI_ReadFormatCapacity+0x1c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f80a:	685b      	ldr	r3, [r3, #4]
 800f80c:	f107 0216 	add.w	r2, r7, #22
 800f810:	f107 0110 	add.w	r1, r7, #16
 800f814:	7af8      	ldrb	r0, [r7, #11]
 800f816:	4798      	blx	r3
 800f818:	4603      	mov	r3, r0
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d008      	beq.n	800f830 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f81e:	7af9      	ldrb	r1, [r7, #11]
 800f820:	233a      	movs	r3, #58	; 0x3a
 800f822:	2202      	movs	r2, #2
 800f824:	68f8      	ldr	r0, [r7, #12]
 800f826:	f000 f8f4 	bl	800fa12 <SCSI_SenseCode>
    return -1;
 800f82a:	f04f 33ff 	mov.w	r3, #4294967295
 800f82e:	e030      	b.n	800f892 <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 800f830:	69bb      	ldr	r3, [r7, #24]
 800f832:	2208      	movs	r2, #8
 800f834:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800f836:	693b      	ldr	r3, [r7, #16]
 800f838:	3b01      	subs	r3, #1
 800f83a:	0e1b      	lsrs	r3, r3, #24
 800f83c:	b2da      	uxtb	r2, r3
 800f83e:	69bb      	ldr	r3, [r7, #24]
 800f840:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800f842:	693b      	ldr	r3, [r7, #16]
 800f844:	3b01      	subs	r3, #1
 800f846:	0c1b      	lsrs	r3, r3, #16
 800f848:	b2da      	uxtb	r2, r3
 800f84a:	69bb      	ldr	r3, [r7, #24]
 800f84c:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800f84e:	693b      	ldr	r3, [r7, #16]
 800f850:	3b01      	subs	r3, #1
 800f852:	0a1b      	lsrs	r3, r3, #8
 800f854:	b2da      	uxtb	r2, r3
 800f856:	69bb      	ldr	r3, [r7, #24]
 800f858:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800f85a:	693b      	ldr	r3, [r7, #16]
 800f85c:	b2db      	uxtb	r3, r3
 800f85e:	3b01      	subs	r3, #1
 800f860:	b2da      	uxtb	r2, r3
 800f862:	69bb      	ldr	r3, [r7, #24]
 800f864:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 800f866:	69bb      	ldr	r3, [r7, #24]
 800f868:	2202      	movs	r2, #2
 800f86a:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800f86c:	8afb      	ldrh	r3, [r7, #22]
 800f86e:	141b      	asrs	r3, r3, #16
 800f870:	b2da      	uxtb	r2, r3
 800f872:	69bb      	ldr	r3, [r7, #24]
 800f874:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800f876:	8afb      	ldrh	r3, [r7, #22]
 800f878:	0a1b      	lsrs	r3, r3, #8
 800f87a:	b29b      	uxth	r3, r3
 800f87c:	b2da      	uxtb	r2, r3
 800f87e:	69bb      	ldr	r3, [r7, #24]
 800f880:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 800f882:	8afb      	ldrh	r3, [r7, #22]
 800f884:	b2da      	uxtb	r2, r3
 800f886:	69bb      	ldr	r3, [r7, #24]
 800f888:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 800f88a:	69bb      	ldr	r3, [r7, #24]
 800f88c:	220c      	movs	r2, #12
 800f88e:	815a      	strh	r2, [r3, #10]
    return 0;
 800f890:	2300      	movs	r3, #0
  }
}
 800f892:	4618      	mov	r0, r3
 800f894:	3720      	adds	r7, #32
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}
	...

0800f89c <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f89c:	b480      	push	{r7}
 800f89e:	b087      	sub	sp, #28
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	60f8      	str	r0, [r7, #12]
 800f8a4:	460b      	mov	r3, r1
 800f8a6:	607a      	str	r2, [r7, #4]
 800f8a8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8b0:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 800f8b2:	2308      	movs	r3, #8
 800f8b4:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 800f8b6:	693b      	ldr	r3, [r7, #16]
 800f8b8:	8afa      	ldrh	r2, [r7, #22]
 800f8ba:	815a      	strh	r2, [r3, #10]

  while (len)
 800f8bc:	e00a      	b.n	800f8d4 <SCSI_ModeSense6+0x38>
  {
    len--;
 800f8be:	8afb      	ldrh	r3, [r7, #22]
 800f8c0:	3b01      	subs	r3, #1
 800f8c2:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 800f8c4:	8afa      	ldrh	r2, [r7, #22]
 800f8c6:	8afb      	ldrh	r3, [r7, #22]
 800f8c8:	4907      	ldr	r1, [pc, #28]	; (800f8e8 <SCSI_ModeSense6+0x4c>)
 800f8ca:	5c89      	ldrb	r1, [r1, r2]
 800f8cc:	693a      	ldr	r2, [r7, #16]
 800f8ce:	4413      	add	r3, r2
 800f8d0:	460a      	mov	r2, r1
 800f8d2:	731a      	strb	r2, [r3, #12]
  while (len)
 800f8d4:	8afb      	ldrh	r3, [r7, #22]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d1f1      	bne.n	800f8be <SCSI_ModeSense6+0x22>
  }
  return 0;
 800f8da:	2300      	movs	r3, #0
}
 800f8dc:	4618      	mov	r0, r3
 800f8de:	371c      	adds	r7, #28
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e6:	4770      	bx	lr
 800f8e8:	08017370 	.word	0x08017370

0800f8ec <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f8ec:	b480      	push	{r7}
 800f8ee:	b087      	sub	sp, #28
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	60f8      	str	r0, [r7, #12]
 800f8f4:	460b      	mov	r3, r1
 800f8f6:	607a      	str	r2, [r7, #4]
 800f8f8:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 800f8fa:	2308      	movs	r3, #8
 800f8fc:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f904:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 800f906:	693b      	ldr	r3, [r7, #16]
 800f908:	8afa      	ldrh	r2, [r7, #22]
 800f90a:	815a      	strh	r2, [r3, #10]

  while (len)
 800f90c:	e00a      	b.n	800f924 <SCSI_ModeSense10+0x38>
  {
    len--;
 800f90e:	8afb      	ldrh	r3, [r7, #22]
 800f910:	3b01      	subs	r3, #1
 800f912:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 800f914:	8afa      	ldrh	r2, [r7, #22]
 800f916:	8afb      	ldrh	r3, [r7, #22]
 800f918:	4907      	ldr	r1, [pc, #28]	; (800f938 <SCSI_ModeSense10+0x4c>)
 800f91a:	5c89      	ldrb	r1, [r1, r2]
 800f91c:	693a      	ldr	r2, [r7, #16]
 800f91e:	4413      	add	r3, r2
 800f920:	460a      	mov	r2, r1
 800f922:	731a      	strb	r2, [r3, #12]
  while (len)
 800f924:	8afb      	ldrh	r3, [r7, #22]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d1f1      	bne.n	800f90e <SCSI_ModeSense10+0x22>
  }

  return 0;
 800f92a:	2300      	movs	r3, #0
}
 800f92c:	4618      	mov	r0, r3
 800f92e:	371c      	adds	r7, #28
 800f930:	46bd      	mov	sp, r7
 800f932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f936:	4770      	bx	lr
 800f938:	08017378 	.word	0x08017378

0800f93c <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800f93c:	b480      	push	{r7}
 800f93e:	b087      	sub	sp, #28
 800f940:	af00      	add	r7, sp, #0
 800f942:	60f8      	str	r0, [r7, #12]
 800f944:	460b      	mov	r3, r1
 800f946:	607a      	str	r2, [r7, #4]
 800f948:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f950:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 800f952:	2300      	movs	r3, #0
 800f954:	75fb      	strb	r3, [r7, #23]
 800f956:	e007      	b.n	800f968 <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 800f958:	7dfb      	ldrb	r3, [r7, #23]
 800f95a:	693a      	ldr	r2, [r7, #16]
 800f95c:	4413      	add	r3, r2
 800f95e:	2200      	movs	r2, #0
 800f960:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 800f962:	7dfb      	ldrb	r3, [r7, #23]
 800f964:	3301      	adds	r3, #1
 800f966:	75fb      	strb	r3, [r7, #23]
 800f968:	7dfb      	ldrb	r3, [r7, #23]
 800f96a:	2b11      	cmp	r3, #17
 800f96c:	d9f4      	bls.n	800f958 <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0] = 0x70U;
 800f96e:	693b      	ldr	r3, [r7, #16]
 800f970:	2270      	movs	r2, #112	; 0x70
 800f972:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800f974:	693b      	ldr	r3, [r7, #16]
 800f976:	220c      	movs	r2, #12
 800f978:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800f97a:	693b      	ldr	r3, [r7, #16]
 800f97c:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 800f980:	693b      	ldr	r3, [r7, #16]
 800f982:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800f986:	429a      	cmp	r2, r3
 800f988:	d02e      	beq.n	800f9e8 <SCSI_RequestSense+0xac>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800f98a:	693b      	ldr	r3, [r7, #16]
 800f98c:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800f990:	693a      	ldr	r2, [r7, #16]
 800f992:	3347      	adds	r3, #71	; 0x47
 800f994:	00db      	lsls	r3, r3, #3
 800f996:	4413      	add	r3, r2
 800f998:	791a      	ldrb	r2, [r3, #4]
 800f99a:	693b      	ldr	r3, [r7, #16]
 800f99c:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800f99e:	693b      	ldr	r3, [r7, #16]
 800f9a0:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800f9a4:	693a      	ldr	r2, [r7, #16]
 800f9a6:	3347      	adds	r3, #71	; 0x47
 800f9a8:	00db      	lsls	r3, r3, #3
 800f9aa:	4413      	add	r3, r2
 800f9ac:	7a5a      	ldrb	r2, [r3, #9]
 800f9ae:	693b      	ldr	r3, [r7, #16]
 800f9b0:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800f9b2:	693b      	ldr	r3, [r7, #16]
 800f9b4:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800f9b8:	693a      	ldr	r2, [r7, #16]
 800f9ba:	3347      	adds	r3, #71	; 0x47
 800f9bc:	00db      	lsls	r3, r3, #3
 800f9be:	4413      	add	r3, r2
 800f9c0:	7a1a      	ldrb	r2, [r3, #8]
 800f9c2:	693b      	ldr	r3, [r7, #16]
 800f9c4:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 800f9c6:	693b      	ldr	r3, [r7, #16]
 800f9c8:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800f9cc:	3301      	adds	r3, #1
 800f9ce:	b2da      	uxtb	r2, r3
 800f9d0:	693b      	ldr	r3, [r7, #16]
 800f9d2:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800f9d6:	693b      	ldr	r3, [r7, #16]
 800f9d8:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800f9dc:	2b04      	cmp	r3, #4
 800f9de:	d103      	bne.n	800f9e8 <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 800f9e0:	693b      	ldr	r3, [r7, #16]
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800f9e8:	693b      	ldr	r3, [r7, #16]
 800f9ea:	2212      	movs	r2, #18
 800f9ec:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	3304      	adds	r3, #4
 800f9f2:	781b      	ldrb	r3, [r3, #0]
 800f9f4:	2b12      	cmp	r3, #18
 800f9f6:	d805      	bhi.n	800fa04 <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	3304      	adds	r3, #4
 800f9fc:	781b      	ldrb	r3, [r3, #0]
 800f9fe:	b29a      	uxth	r2, r3
 800fa00:	693b      	ldr	r3, [r7, #16]
 800fa02:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 800fa04:	2300      	movs	r3, #0
}
 800fa06:	4618      	mov	r0, r3
 800fa08:	371c      	adds	r7, #28
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa10:	4770      	bx	lr

0800fa12 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800fa12:	b480      	push	{r7}
 800fa14:	b085      	sub	sp, #20
 800fa16:	af00      	add	r7, sp, #0
 800fa18:	6078      	str	r0, [r7, #4]
 800fa1a:	4608      	mov	r0, r1
 800fa1c:	4611      	mov	r1, r2
 800fa1e:	461a      	mov	r2, r3
 800fa20:	4603      	mov	r3, r0
 800fa22:	70fb      	strb	r3, [r7, #3]
 800fa24:	460b      	mov	r3, r1
 800fa26:	70bb      	strb	r3, [r7, #2]
 800fa28:	4613      	mov	r3, r2
 800fa2a:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa32:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800fa3a:	68fa      	ldr	r2, [r7, #12]
 800fa3c:	3347      	adds	r3, #71	; 0x47
 800fa3e:	00db      	lsls	r3, r3, #3
 800fa40:	4413      	add	r3, r2
 800fa42:	78ba      	ldrb	r2, [r7, #2]
 800fa44:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800fa4c:	68fa      	ldr	r2, [r7, #12]
 800fa4e:	3347      	adds	r3, #71	; 0x47
 800fa50:	00db      	lsls	r3, r3, #3
 800fa52:	4413      	add	r3, r2
 800fa54:	2200      	movs	r2, #0
 800fa56:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800fa5e:	3301      	adds	r3, #1
 800fa60:	b2da      	uxtb	r2, r3
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800fa6e:	2b04      	cmp	r3, #4
 800fa70:	d103      	bne.n	800fa7a <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	2200      	movs	r2, #0
 800fa76:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 800fa7a:	bf00      	nop
 800fa7c:	3714      	adds	r7, #20
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa84:	4770      	bx	lr

0800fa86 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800fa86:	b480      	push	{r7}
 800fa88:	b087      	sub	sp, #28
 800fa8a:	af00      	add	r7, sp, #0
 800fa8c:	60f8      	str	r0, [r7, #12]
 800fa8e:	460b      	mov	r3, r1
 800fa90:	607a      	str	r2, [r7, #4]
 800fa92:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa9a:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 800fa9c:	697b      	ldr	r3, [r7, #20]
 800fa9e:	2200      	movs	r2, #0
 800faa0:	815a      	strh	r2, [r3, #10]
  return 0;
 800faa2:	2300      	movs	r3, #0
}
 800faa4:	4618      	mov	r0, r3
 800faa6:	371c      	adds	r7, #28
 800faa8:	46bd      	mov	sp, r7
 800faaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faae:	4770      	bx	lr

0800fab0 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b086      	sub	sp, #24
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	60f8      	str	r0, [r7, #12]
 800fab8:	460b      	mov	r3, r1
 800faba:	607a      	str	r2, [r7, #4]
 800fabc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fac4:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800fac6:	697b      	ldr	r3, [r7, #20]
 800fac8:	7a1b      	ldrb	r3, [r3, #8]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d16e      	bne.n	800fbac <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800face:	697b      	ldr	r3, [r7, #20]
 800fad0:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800fad4:	b25b      	sxtb	r3, r3
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	db0a      	blt.n	800faf0 <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800fada:	697b      	ldr	r3, [r7, #20]
 800fadc:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800fae0:	2320      	movs	r3, #32
 800fae2:	2205      	movs	r2, #5
 800fae4:	68f8      	ldr	r0, [r7, #12]
 800fae6:	f7ff ff94 	bl	800fa12 <SCSI_SenseCode>
      return -1;
 800faea:	f04f 33ff 	mov.w	r3, #4294967295
 800faee:	e067      	b.n	800fbc0 <SCSI_Read10+0x110>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800faf6:	689b      	ldr	r3, [r3, #8]
 800faf8:	7afa      	ldrb	r2, [r7, #11]
 800fafa:	4610      	mov	r0, r2
 800fafc:	4798      	blx	r3
 800fafe:	4603      	mov	r3, r0
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d008      	beq.n	800fb16 <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800fb04:	7af9      	ldrb	r1, [r7, #11]
 800fb06:	233a      	movs	r3, #58	; 0x3a
 800fb08:	2202      	movs	r2, #2
 800fb0a:	68f8      	ldr	r0, [r7, #12]
 800fb0c:	f7ff ff81 	bl	800fa12 <SCSI_SenseCode>
      return -1;
 800fb10:	f04f 33ff 	mov.w	r3, #4294967295
 800fb14:	e054      	b.n	800fbc0 <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	3302      	adds	r3, #2
 800fb1a:	781b      	ldrb	r3, [r3, #0]
 800fb1c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	3303      	adds	r3, #3
 800fb22:	781b      	ldrb	r3, [r3, #0]
 800fb24:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800fb26:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	3304      	adds	r3, #4
 800fb2c:	781b      	ldrb	r3, [r3, #0]
 800fb2e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800fb30:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800fb32:	687a      	ldr	r2, [r7, #4]
 800fb34:	3205      	adds	r2, #5
 800fb36:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800fb38:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800fb3a:	697b      	ldr	r3, [r7, #20]
 800fb3c:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	3307      	adds	r3, #7
 800fb44:	781b      	ldrb	r3, [r3, #0]
 800fb46:	021b      	lsls	r3, r3, #8
 800fb48:	687a      	ldr	r2, [r7, #4]
 800fb4a:	3208      	adds	r2, #8
 800fb4c:	7812      	ldrb	r2, [r2, #0]
 800fb4e:	431a      	orrs	r2, r3
 800fb50:	697b      	ldr	r3, [r7, #20]
 800fb52:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800fb56:	697b      	ldr	r3, [r7, #20]
 800fb58:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800fb5c:	697b      	ldr	r3, [r7, #20]
 800fb5e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800fb62:	7af9      	ldrb	r1, [r7, #11]
 800fb64:	68f8      	ldr	r0, [r7, #12]
 800fb66:	f000 f912 	bl	800fd8e <SCSI_CheckAddressRange>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	da02      	bge.n	800fb76 <SCSI_Read10+0xc6>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800fb70:	f04f 33ff 	mov.w	r3, #4294967295
 800fb74:	e024      	b.n	800fbc0 <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800fb76:	697b      	ldr	r3, [r7, #20]
 800fb78:	2202      	movs	r2, #2
 800fb7a:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800fb7c:	697b      	ldr	r3, [r7, #20]
 800fb7e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800fb82:	697b      	ldr	r3, [r7, #20]
 800fb84:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800fb88:	6979      	ldr	r1, [r7, #20]
 800fb8a:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
 800fb8e:	fb01 f303 	mul.w	r3, r1, r3
 800fb92:	429a      	cmp	r2, r3
 800fb94:	d00a      	beq.n	800fbac <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800fb96:	697b      	ldr	r3, [r7, #20]
 800fb98:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800fb9c:	2320      	movs	r3, #32
 800fb9e:	2205      	movs	r2, #5
 800fba0:	68f8      	ldr	r0, [r7, #12]
 800fba2:	f7ff ff36 	bl	800fa12 <SCSI_SenseCode>
      return -1;
 800fba6:	f04f 33ff 	mov.w	r3, #4294967295
 800fbaa:	e009      	b.n	800fbc0 <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800fbac:	697b      	ldr	r3, [r7, #20]
 800fbae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fbb2:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 800fbb4:	7afb      	ldrb	r3, [r7, #11]
 800fbb6:	4619      	mov	r1, r3
 800fbb8:	68f8      	ldr	r0, [r7, #12]
 800fbba:	f000 f90a 	bl	800fdd2 <SCSI_ProcessRead>
 800fbbe:	4603      	mov	r3, r0
}
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	3718      	adds	r7, #24
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	bd80      	pop	{r7, pc}

0800fbc8 <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b086      	sub	sp, #24
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	60f8      	str	r0, [r7, #12]
 800fbd0:	460b      	mov	r3, r1
 800fbd2:	607a      	str	r2, [r7, #4]
 800fbd4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbdc:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800fbde:	697b      	ldr	r3, [r7, #20]
 800fbe0:	7a1b      	ldrb	r3, [r3, #8]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	f040 8096 	bne.w	800fd14 <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800fbe8:	697b      	ldr	r3, [r7, #20]
 800fbea:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800fbee:	b25b      	sxtb	r3, r3
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	da0a      	bge.n	800fc0a <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800fbf4:	697b      	ldr	r3, [r7, #20]
 800fbf6:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800fbfa:	2320      	movs	r3, #32
 800fbfc:	2205      	movs	r2, #5
 800fbfe:	68f8      	ldr	r0, [r7, #12]
 800fc00:	f7ff ff07 	bl	800fa12 <SCSI_SenseCode>
      return -1;
 800fc04:	f04f 33ff 	mov.w	r3, #4294967295
 800fc08:	e08a      	b.n	800fd20 <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fc10:	689b      	ldr	r3, [r3, #8]
 800fc12:	7afa      	ldrb	r2, [r7, #11]
 800fc14:	4610      	mov	r0, r2
 800fc16:	4798      	blx	r3
 800fc18:	4603      	mov	r3, r0
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d008      	beq.n	800fc30 <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800fc1e:	7af9      	ldrb	r1, [r7, #11]
 800fc20:	233a      	movs	r3, #58	; 0x3a
 800fc22:	2202      	movs	r2, #2
 800fc24:	68f8      	ldr	r0, [r7, #12]
 800fc26:	f7ff fef4 	bl	800fa12 <SCSI_SenseCode>
      return -1;
 800fc2a:	f04f 33ff 	mov.w	r3, #4294967295
 800fc2e:	e077      	b.n	800fd20 <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fc36:	68db      	ldr	r3, [r3, #12]
 800fc38:	7afa      	ldrb	r2, [r7, #11]
 800fc3a:	4610      	mov	r0, r2
 800fc3c:	4798      	blx	r3
 800fc3e:	4603      	mov	r3, r0
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d008      	beq.n	800fc56 <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800fc44:	7af9      	ldrb	r1, [r7, #11]
 800fc46:	2327      	movs	r3, #39	; 0x27
 800fc48:	2202      	movs	r2, #2
 800fc4a:	68f8      	ldr	r0, [r7, #12]
 800fc4c:	f7ff fee1 	bl	800fa12 <SCSI_SenseCode>
      return -1;
 800fc50:	f04f 33ff 	mov.w	r3, #4294967295
 800fc54:	e064      	b.n	800fd20 <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	3302      	adds	r3, #2
 800fc5a:	781b      	ldrb	r3, [r3, #0]
 800fc5c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	3303      	adds	r3, #3
 800fc62:	781b      	ldrb	r3, [r3, #0]
 800fc64:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800fc66:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	3304      	adds	r3, #4
 800fc6c:	781b      	ldrb	r3, [r3, #0]
 800fc6e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800fc70:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800fc72:	687a      	ldr	r2, [r7, #4]
 800fc74:	3205      	adds	r2, #5
 800fc76:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800fc78:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800fc7a:	697b      	ldr	r3, [r7, #20]
 800fc7c:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	3307      	adds	r3, #7
 800fc84:	781b      	ldrb	r3, [r3, #0]
 800fc86:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800fc88:	687a      	ldr	r2, [r7, #4]
 800fc8a:	3208      	adds	r2, #8
 800fc8c:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800fc8e:	431a      	orrs	r2, r3
 800fc90:	697b      	ldr	r3, [r7, #20]
 800fc92:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800fc96:	697b      	ldr	r3, [r7, #20]
 800fc98:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800fc9c:	697b      	ldr	r3, [r7, #20]
 800fc9e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800fca2:	7af9      	ldrb	r1, [r7, #11]
 800fca4:	68f8      	ldr	r0, [r7, #12]
 800fca6:	f000 f872 	bl	800fd8e <SCSI_CheckAddressRange>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	da02      	bge.n	800fcb6 <SCSI_Write10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800fcb0:	f04f 33ff 	mov.w	r3, #4294967295
 800fcb4:	e034      	b.n	800fd20 <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800fcb6:	697b      	ldr	r3, [r7, #20]
 800fcb8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800fcbc:	697a      	ldr	r2, [r7, #20]
 800fcbe:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800fcc2:	fb02 f303 	mul.w	r3, r2, r3
 800fcc6:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800fcc8:	697b      	ldr	r3, [r7, #20]
 800fcca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fcce:	693a      	ldr	r2, [r7, #16]
 800fcd0:	429a      	cmp	r2, r3
 800fcd2:	d00a      	beq.n	800fcea <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800fcd4:	697b      	ldr	r3, [r7, #20]
 800fcd6:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800fcda:	2320      	movs	r3, #32
 800fcdc:	2205      	movs	r2, #5
 800fcde:	68f8      	ldr	r0, [r7, #12]
 800fce0:	f7ff fe97 	bl	800fa12 <SCSI_SenseCode>
      return -1;
 800fce4:	f04f 33ff 	mov.w	r3, #4294967295
 800fce8:	e01a      	b.n	800fd20 <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800fcea:	693b      	ldr	r3, [r7, #16]
 800fcec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fcf0:	bf28      	it	cs
 800fcf2:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800fcf6:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800fcf8:	697b      	ldr	r3, [r7, #20]
 800fcfa:	2201      	movs	r2, #1
 800fcfc:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800fcfe:	697b      	ldr	r3, [r7, #20]
 800fd00:	f103 020c 	add.w	r2, r3, #12
 800fd04:	693b      	ldr	r3, [r7, #16]
 800fd06:	b29b      	uxth	r3, r3
 800fd08:	2101      	movs	r1, #1
 800fd0a:	68f8      	ldr	r0, [r7, #12]
 800fd0c:	f007 f905 	bl	8016f1a <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 800fd10:	2300      	movs	r3, #0
 800fd12:	e005      	b.n	800fd20 <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 800fd14:	7afb      	ldrb	r3, [r7, #11]
 800fd16:	4619      	mov	r1, r3
 800fd18:	68f8      	ldr	r0, [r7, #12]
 800fd1a:	f000 f8ce 	bl	800feba <SCSI_ProcessWrite>
 800fd1e:	4603      	mov	r3, r0
}
 800fd20:	4618      	mov	r0, r3
 800fd22:	3718      	adds	r7, #24
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}

0800fd28 <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b086      	sub	sp, #24
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	60f8      	str	r0, [r7, #12]
 800fd30:	460b      	mov	r3, r1
 800fd32:	607a      	str	r2, [r7, #4]
 800fd34:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd3c:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	3301      	adds	r3, #1
 800fd42:	781b      	ldrb	r3, [r3, #0]
 800fd44:	f003 0302 	and.w	r3, r3, #2
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d008      	beq.n	800fd5e <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800fd4c:	7af9      	ldrb	r1, [r7, #11]
 800fd4e:	2324      	movs	r3, #36	; 0x24
 800fd50:	2205      	movs	r2, #5
 800fd52:	68f8      	ldr	r0, [r7, #12]
 800fd54:	f7ff fe5d 	bl	800fa12 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800fd58:	f04f 33ff 	mov.w	r3, #4294967295
 800fd5c:	e013      	b.n	800fd86 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800fd5e:	697b      	ldr	r3, [r7, #20]
 800fd60:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800fd64:	697b      	ldr	r3, [r7, #20]
 800fd66:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800fd6a:	7af9      	ldrb	r1, [r7, #11]
 800fd6c:	68f8      	ldr	r0, [r7, #12]
 800fd6e:	f000 f80e 	bl	800fd8e <SCSI_CheckAddressRange>
 800fd72:	4603      	mov	r3, r0
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	da02      	bge.n	800fd7e <SCSI_Verify10+0x56>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 800fd78:	f04f 33ff 	mov.w	r3, #4294967295
 800fd7c:	e003      	b.n	800fd86 <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 800fd7e:	697b      	ldr	r3, [r7, #20]
 800fd80:	2200      	movs	r2, #0
 800fd82:	815a      	strh	r2, [r3, #10]
  return 0;
 800fd84:	2300      	movs	r3, #0
}
 800fd86:	4618      	mov	r0, r3
 800fd88:	3718      	adds	r7, #24
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	bd80      	pop	{r7, pc}

0800fd8e <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800fd8e:	b580      	push	{r7, lr}
 800fd90:	b086      	sub	sp, #24
 800fd92:	af00      	add	r7, sp, #0
 800fd94:	60f8      	str	r0, [r7, #12]
 800fd96:	607a      	str	r2, [r7, #4]
 800fd98:	603b      	str	r3, [r7, #0]
 800fd9a:	460b      	mov	r3, r1
 800fd9c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fda4:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800fda6:	687a      	ldr	r2, [r7, #4]
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	441a      	add	r2, r3
 800fdac:	697b      	ldr	r3, [r7, #20]
 800fdae:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800fdb2:	429a      	cmp	r2, r3
 800fdb4:	d908      	bls.n	800fdc8 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800fdb6:	7af9      	ldrb	r1, [r7, #11]
 800fdb8:	2321      	movs	r3, #33	; 0x21
 800fdba:	2205      	movs	r2, #5
 800fdbc:	68f8      	ldr	r0, [r7, #12]
 800fdbe:	f7ff fe28 	bl	800fa12 <SCSI_SenseCode>
    return -1;
 800fdc2:	f04f 33ff 	mov.w	r3, #4294967295
 800fdc6:	e000      	b.n	800fdca <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 800fdc8:	2300      	movs	r3, #0
}
 800fdca:	4618      	mov	r0, r3
 800fdcc:	3718      	adds	r7, #24
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	bd80      	pop	{r7, pc}

0800fdd2 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 800fdd2:	b590      	push	{r4, r7, lr}
 800fdd4:	b085      	sub	sp, #20
 800fdd6:	af00      	add	r7, sp, #0
 800fdd8:	6078      	str	r0, [r7, #4]
 800fdda:	460b      	mov	r3, r1
 800fddc:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fde4:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800fdec:	68fa      	ldr	r2, [r7, #12]
 800fdee:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800fdf2:	fb02 f303 	mul.w	r3, r2, r3
 800fdf6:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800fdf8:	68bb      	ldr	r3, [r7, #8]
 800fdfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fdfe:	bf28      	it	cs
 800fe00:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800fe04:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fe0c:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	f103 010c 	add.w	r1, r3, #12
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800fe20:	4618      	mov	r0, r3
 800fe22:	68bb      	ldr	r3, [r7, #8]
 800fe24:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800fe28:	b29b      	uxth	r3, r3
 800fe2a:	78f8      	ldrb	r0, [r7, #3]
 800fe2c:	47a0      	blx	r4
 800fe2e:	4603      	mov	r3, r0
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	da08      	bge.n	800fe46 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800fe34:	78f9      	ldrb	r1, [r7, #3]
 800fe36:	2311      	movs	r3, #17
 800fe38:	2204      	movs	r2, #4
 800fe3a:	6878      	ldr	r0, [r7, #4]
 800fe3c:	f7ff fde9 	bl	800fa12 <SCSI_SenseCode>
    return -1;
 800fe40:	f04f 33ff 	mov.w	r3, #4294967295
 800fe44:	e035      	b.n	800feb2 <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	f103 020c 	add.w	r2, r3, #12
 800fe4c:	68bb      	ldr	r3, [r7, #8]
 800fe4e:	b29b      	uxth	r3, r3
 800fe50:	2181      	movs	r1, #129	; 0x81
 800fe52:	6878      	ldr	r0, [r7, #4]
 800fe54:	f007 f83e 	bl	8016ed4 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800fe64:	4619      	mov	r1, r3
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	fbb3 f3f1 	udiv	r3, r3, r1
 800fe6c:	441a      	add	r2, r3
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800fe80:	4619      	mov	r1, r3
 800fe82:	68bb      	ldr	r3, [r7, #8]
 800fe84:	fbb3 f3f1 	udiv	r3, r3, r1
 800fe88:	1ad2      	subs	r2, r2, r3
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800fe96:	68bb      	ldr	r3, [r7, #8]
 800fe98:	1ad2      	subs	r2, r2, r3
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d102      	bne.n	800feb0 <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	2203      	movs	r2, #3
 800feae:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 800feb0:	2300      	movs	r3, #0
}
 800feb2:	4618      	mov	r0, r3
 800feb4:	3714      	adds	r7, #20
 800feb6:	46bd      	mov	sp, r7
 800feb8:	bd90      	pop	{r4, r7, pc}

0800feba <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 800feba:	b590      	push	{r4, r7, lr}
 800febc:	b085      	sub	sp, #20
 800febe:	af00      	add	r7, sp, #0
 800fec0:	6078      	str	r0, [r7, #4]
 800fec2:	460b      	mov	r3, r1
 800fec4:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fecc:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800fed4:	68fa      	ldr	r2, [r7, #12]
 800fed6:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800feda:	fb02 f303 	mul.w	r3, r2, r3
 800fede:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800fee0:	68bb      	ldr	r3, [r7, #8]
 800fee2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fee6:	bf28      	it	cs
 800fee8:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800feec:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fef4:	695c      	ldr	r4, [r3, #20]
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	f103 010c 	add.w	r1, r3, #12
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800ff08:	4618      	mov	r0, r3
 800ff0a:	68bb      	ldr	r3, [r7, #8]
 800ff0c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800ff10:	b29b      	uxth	r3, r3
 800ff12:	78f8      	ldrb	r0, [r7, #3]
 800ff14:	47a0      	blx	r4
 800ff16:	4603      	mov	r3, r0
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	da08      	bge.n	800ff2e <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800ff1c:	78f9      	ldrb	r1, [r7, #3]
 800ff1e:	2303      	movs	r3, #3
 800ff20:	2204      	movs	r2, #4
 800ff22:	6878      	ldr	r0, [r7, #4]
 800ff24:	f7ff fd75 	bl	800fa12 <SCSI_SenseCode>

    return -1;
 800ff28:	f04f 33ff 	mov.w	r3, #4294967295
 800ff2c:	e045      	b.n	800ffba <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800ff3a:	4619      	mov	r1, r3
 800ff3c:	68bb      	ldr	r3, [r7, #8]
 800ff3e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ff42:	441a      	add	r2, r3
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800ff56:	4619      	mov	r1, r3
 800ff58:	68bb      	ldr	r3, [r7, #8]
 800ff5a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ff5e:	1ad2      	subs	r2, r2, r3
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800ff6c:	68bb      	ldr	r3, [r7, #8]
 800ff6e:	1ad2      	subs	r2, r2, r3
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d104      	bne.n	800ff8a <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800ff80:	2100      	movs	r1, #0
 800ff82:	6878      	ldr	r0, [r7, #4]
 800ff84:	f7ff f97a 	bl	800f27c <MSC_BOT_SendCSW>
 800ff88:	e016      	b.n	800ffb8 <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ff90:	68fa      	ldr	r2, [r7, #12]
 800ff92:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800ff96:	fb02 f303 	mul.w	r3, r2, r3
 800ff9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ff9e:	bf28      	it	cs
 800ffa0:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800ffa4:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	f103 020c 	add.w	r2, r3, #12
 800ffac:	68bb      	ldr	r3, [r7, #8]
 800ffae:	b29b      	uxth	r3, r3
 800ffb0:	2101      	movs	r1, #1
 800ffb2:	6878      	ldr	r0, [r7, #4]
 800ffb4:	f006 ffb1 	bl	8016f1a <USBD_LL_PrepareReceive>
  }

  return 0;
 800ffb8:	2300      	movs	r3, #0
}
 800ffba:	4618      	mov	r0, r3
 800ffbc:	3714      	adds	r7, #20
 800ffbe:	46bd      	mov	sp, r7
 800ffc0:	bd90      	pop	{r4, r7, pc}

0800ffc2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ffc2:	b580      	push	{r7, lr}
 800ffc4:	b084      	sub	sp, #16
 800ffc6:	af00      	add	r7, sp, #0
 800ffc8:	60f8      	str	r0, [r7, #12]
 800ffca:	60b9      	str	r1, [r7, #8]
 800ffcc:	4613      	mov	r3, r2
 800ffce:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d101      	bne.n	800ffda <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ffd6:	2302      	movs	r3, #2
 800ffd8:	e01a      	b.n	8010010 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d003      	beq.n	800ffec <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ffec:	68bb      	ldr	r3, [r7, #8]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d003      	beq.n	800fffa <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	68ba      	ldr	r2, [r7, #8]
 800fff6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	2201      	movs	r2, #1
 800fffe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	79fa      	ldrb	r2, [r7, #7]
 8010006:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8010008:	68f8      	ldr	r0, [r7, #12]
 801000a:	f006 fe0b 	bl	8016c24 <USBD_LL_Init>

  return USBD_OK;
 801000e:	2300      	movs	r3, #0
}
 8010010:	4618      	mov	r0, r3
 8010012:	3710      	adds	r7, #16
 8010014:	46bd      	mov	sp, r7
 8010016:	bd80      	pop	{r7, pc}

08010018 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010018:	b480      	push	{r7}
 801001a:	b085      	sub	sp, #20
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
 8010020:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8010022:	2300      	movs	r3, #0
 8010024:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	2b00      	cmp	r3, #0
 801002a:	d006      	beq.n	801003a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	683a      	ldr	r2, [r7, #0]
 8010030:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8010034:	2300      	movs	r3, #0
 8010036:	73fb      	strb	r3, [r7, #15]
 8010038:	e001      	b.n	801003e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801003a:	2302      	movs	r3, #2
 801003c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801003e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010040:	4618      	mov	r0, r3
 8010042:	3714      	adds	r7, #20
 8010044:	46bd      	mov	sp, r7
 8010046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004a:	4770      	bx	lr

0801004c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801004c:	b580      	push	{r7, lr}
 801004e:	b082      	sub	sp, #8
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8010054:	6878      	ldr	r0, [r7, #4]
 8010056:	f006 fe35 	bl	8016cc4 <USBD_LL_Start>

  return USBD_OK;
 801005a:	2300      	movs	r3, #0
}
 801005c:	4618      	mov	r0, r3
 801005e:	3708      	adds	r7, #8
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}

08010064 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8010064:	b480      	push	{r7}
 8010066:	b083      	sub	sp, #12
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801006c:	2300      	movs	r3, #0
}
 801006e:	4618      	mov	r0, r3
 8010070:	370c      	adds	r7, #12
 8010072:	46bd      	mov	sp, r7
 8010074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010078:	4770      	bx	lr

0801007a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801007a:	b580      	push	{r7, lr}
 801007c:	b084      	sub	sp, #16
 801007e:	af00      	add	r7, sp, #0
 8010080:	6078      	str	r0, [r7, #4]
 8010082:	460b      	mov	r3, r1
 8010084:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8010086:	2302      	movs	r3, #2
 8010088:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010090:	2b00      	cmp	r3, #0
 8010092:	d00c      	beq.n	80100ae <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	78fa      	ldrb	r2, [r7, #3]
 801009e:	4611      	mov	r1, r2
 80100a0:	6878      	ldr	r0, [r7, #4]
 80100a2:	4798      	blx	r3
 80100a4:	4603      	mov	r3, r0
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d101      	bne.n	80100ae <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80100aa:	2300      	movs	r3, #0
 80100ac:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80100ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80100b0:	4618      	mov	r0, r3
 80100b2:	3710      	adds	r7, #16
 80100b4:	46bd      	mov	sp, r7
 80100b6:	bd80      	pop	{r7, pc}

080100b8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b082      	sub	sp, #8
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
 80100c0:	460b      	mov	r3, r1
 80100c2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80100ca:	685b      	ldr	r3, [r3, #4]
 80100cc:	78fa      	ldrb	r2, [r7, #3]
 80100ce:	4611      	mov	r1, r2
 80100d0:	6878      	ldr	r0, [r7, #4]
 80100d2:	4798      	blx	r3

  return USBD_OK;
 80100d4:	2300      	movs	r3, #0
}
 80100d6:	4618      	mov	r0, r3
 80100d8:	3708      	adds	r7, #8
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd80      	pop	{r7, pc}

080100de <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80100de:	b580      	push	{r7, lr}
 80100e0:	b082      	sub	sp, #8
 80100e2:	af00      	add	r7, sp, #0
 80100e4:	6078      	str	r0, [r7, #4]
 80100e6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80100ee:	6839      	ldr	r1, [r7, #0]
 80100f0:	4618      	mov	r0, r3
 80100f2:	f000 ff09 	bl	8010f08 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	2201      	movs	r2, #1
 80100fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8010104:	461a      	mov	r2, r3
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8010112:	f003 031f 	and.w	r3, r3, #31
 8010116:	2b01      	cmp	r3, #1
 8010118:	d00c      	beq.n	8010134 <USBD_LL_SetupStage+0x56>
 801011a:	2b01      	cmp	r3, #1
 801011c:	d302      	bcc.n	8010124 <USBD_LL_SetupStage+0x46>
 801011e:	2b02      	cmp	r3, #2
 8010120:	d010      	beq.n	8010144 <USBD_LL_SetupStage+0x66>
 8010122:	e017      	b.n	8010154 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 801012a:	4619      	mov	r1, r3
 801012c:	6878      	ldr	r0, [r7, #4]
 801012e:	f000 fa09 	bl	8010544 <USBD_StdDevReq>
      break;
 8010132:	e01a      	b.n	801016a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 801013a:	4619      	mov	r1, r3
 801013c:	6878      	ldr	r0, [r7, #4]
 801013e:	f000 fa6b 	bl	8010618 <USBD_StdItfReq>
      break;
 8010142:	e012      	b.n	801016a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 801014a:	4619      	mov	r1, r3
 801014c:	6878      	ldr	r0, [r7, #4]
 801014e:	f000 faa9 	bl	80106a4 <USBD_StdEPReq>
      break;
 8010152:	e00a      	b.n	801016a <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 801015a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801015e:	b2db      	uxtb	r3, r3
 8010160:	4619      	mov	r1, r3
 8010162:	6878      	ldr	r0, [r7, #4]
 8010164:	f006 fe2d 	bl	8016dc2 <USBD_LL_StallEP>
      break;
 8010168:	bf00      	nop
  }

  return USBD_OK;
 801016a:	2300      	movs	r3, #0
}
 801016c:	4618      	mov	r0, r3
 801016e:	3708      	adds	r7, #8
 8010170:	46bd      	mov	sp, r7
 8010172:	bd80      	pop	{r7, pc}

08010174 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b086      	sub	sp, #24
 8010178:	af00      	add	r7, sp, #0
 801017a:	60f8      	str	r0, [r7, #12]
 801017c:	460b      	mov	r3, r1
 801017e:	607a      	str	r2, [r7, #4]
 8010180:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8010182:	7afb      	ldrb	r3, [r7, #11]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d14b      	bne.n	8010220 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801018e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010196:	2b03      	cmp	r3, #3
 8010198:	d134      	bne.n	8010204 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 801019a:	697b      	ldr	r3, [r7, #20]
 801019c:	68da      	ldr	r2, [r3, #12]
 801019e:	697b      	ldr	r3, [r7, #20]
 80101a0:	691b      	ldr	r3, [r3, #16]
 80101a2:	429a      	cmp	r2, r3
 80101a4:	d919      	bls.n	80101da <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80101a6:	697b      	ldr	r3, [r7, #20]
 80101a8:	68da      	ldr	r2, [r3, #12]
 80101aa:	697b      	ldr	r3, [r7, #20]
 80101ac:	691b      	ldr	r3, [r3, #16]
 80101ae:	1ad2      	subs	r2, r2, r3
 80101b0:	697b      	ldr	r3, [r7, #20]
 80101b2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80101b4:	697b      	ldr	r3, [r7, #20]
 80101b6:	68da      	ldr	r2, [r3, #12]
 80101b8:	697b      	ldr	r3, [r7, #20]
 80101ba:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80101bc:	429a      	cmp	r2, r3
 80101be:	d203      	bcs.n	80101c8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80101c0:	697b      	ldr	r3, [r7, #20]
 80101c2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80101c4:	b29b      	uxth	r3, r3
 80101c6:	e002      	b.n	80101ce <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80101c8:	697b      	ldr	r3, [r7, #20]
 80101ca:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80101cc:	b29b      	uxth	r3, r3
 80101ce:	461a      	mov	r2, r3
 80101d0:	6879      	ldr	r1, [r7, #4]
 80101d2:	68f8      	ldr	r0, [r7, #12]
 80101d4:	f000 ff6e 	bl	80110b4 <USBD_CtlContinueRx>
 80101d8:	e038      	b.n	801024c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80101e0:	691b      	ldr	r3, [r3, #16]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d00a      	beq.n	80101fc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80101ec:	2b03      	cmp	r3, #3
 80101ee:	d105      	bne.n	80101fc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80101f6:	691b      	ldr	r3, [r3, #16]
 80101f8:	68f8      	ldr	r0, [r7, #12]
 80101fa:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80101fc:	68f8      	ldr	r0, [r7, #12]
 80101fe:	f000 ff6b 	bl	80110d8 <USBD_CtlSendStatus>
 8010202:	e023      	b.n	801024c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801020a:	2b05      	cmp	r3, #5
 801020c:	d11e      	bne.n	801024c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	2200      	movs	r2, #0
 8010212:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8010216:	2100      	movs	r1, #0
 8010218:	68f8      	ldr	r0, [r7, #12]
 801021a:	f006 fdd2 	bl	8016dc2 <USBD_LL_StallEP>
 801021e:	e015      	b.n	801024c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010226:	699b      	ldr	r3, [r3, #24]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d00d      	beq.n	8010248 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8010232:	2b03      	cmp	r3, #3
 8010234:	d108      	bne.n	8010248 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801023c:	699b      	ldr	r3, [r3, #24]
 801023e:	7afa      	ldrb	r2, [r7, #11]
 8010240:	4611      	mov	r1, r2
 8010242:	68f8      	ldr	r0, [r7, #12]
 8010244:	4798      	blx	r3
 8010246:	e001      	b.n	801024c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8010248:	2302      	movs	r3, #2
 801024a:	e000      	b.n	801024e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 801024c:	2300      	movs	r3, #0
}
 801024e:	4618      	mov	r0, r3
 8010250:	3718      	adds	r7, #24
 8010252:	46bd      	mov	sp, r7
 8010254:	bd80      	pop	{r7, pc}

08010256 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010256:	b580      	push	{r7, lr}
 8010258:	b086      	sub	sp, #24
 801025a:	af00      	add	r7, sp, #0
 801025c:	60f8      	str	r0, [r7, #12]
 801025e:	460b      	mov	r3, r1
 8010260:	607a      	str	r2, [r7, #4]
 8010262:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8010264:	7afb      	ldrb	r3, [r7, #11]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d17f      	bne.n	801036a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	3314      	adds	r3, #20
 801026e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010276:	2b02      	cmp	r3, #2
 8010278:	d15c      	bne.n	8010334 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 801027a:	697b      	ldr	r3, [r7, #20]
 801027c:	68da      	ldr	r2, [r3, #12]
 801027e:	697b      	ldr	r3, [r7, #20]
 8010280:	691b      	ldr	r3, [r3, #16]
 8010282:	429a      	cmp	r2, r3
 8010284:	d915      	bls.n	80102b2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8010286:	697b      	ldr	r3, [r7, #20]
 8010288:	68da      	ldr	r2, [r3, #12]
 801028a:	697b      	ldr	r3, [r7, #20]
 801028c:	691b      	ldr	r3, [r3, #16]
 801028e:	1ad2      	subs	r2, r2, r3
 8010290:	697b      	ldr	r3, [r7, #20]
 8010292:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8010294:	697b      	ldr	r3, [r7, #20]
 8010296:	68db      	ldr	r3, [r3, #12]
 8010298:	b29b      	uxth	r3, r3
 801029a:	461a      	mov	r2, r3
 801029c:	6879      	ldr	r1, [r7, #4]
 801029e:	68f8      	ldr	r0, [r7, #12]
 80102a0:	f000 fef6 	bl	8011090 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80102a4:	2300      	movs	r3, #0
 80102a6:	2200      	movs	r2, #0
 80102a8:	2100      	movs	r1, #0
 80102aa:	68f8      	ldr	r0, [r7, #12]
 80102ac:	f006 fe35 	bl	8016f1a <USBD_LL_PrepareReceive>
 80102b0:	e04e      	b.n	8010350 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80102b2:	697b      	ldr	r3, [r7, #20]
 80102b4:	689b      	ldr	r3, [r3, #8]
 80102b6:	697a      	ldr	r2, [r7, #20]
 80102b8:	6912      	ldr	r2, [r2, #16]
 80102ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80102be:	fb02 f201 	mul.w	r2, r2, r1
 80102c2:	1a9b      	subs	r3, r3, r2
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d11c      	bne.n	8010302 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80102c8:	697b      	ldr	r3, [r7, #20]
 80102ca:	689a      	ldr	r2, [r3, #8]
 80102cc:	697b      	ldr	r3, [r7, #20]
 80102ce:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80102d0:	429a      	cmp	r2, r3
 80102d2:	d316      	bcc.n	8010302 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80102d4:	697b      	ldr	r3, [r7, #20]
 80102d6:	689a      	ldr	r2, [r3, #8]
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80102de:	429a      	cmp	r2, r3
 80102e0:	d20f      	bcs.n	8010302 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80102e2:	2200      	movs	r2, #0
 80102e4:	2100      	movs	r1, #0
 80102e6:	68f8      	ldr	r0, [r7, #12]
 80102e8:	f000 fed2 	bl	8011090 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	2200      	movs	r2, #0
 80102f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80102f4:	2300      	movs	r3, #0
 80102f6:	2200      	movs	r2, #0
 80102f8:	2100      	movs	r1, #0
 80102fa:	68f8      	ldr	r0, [r7, #12]
 80102fc:	f006 fe0d 	bl	8016f1a <USBD_LL_PrepareReceive>
 8010300:	e026      	b.n	8010350 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010308:	68db      	ldr	r3, [r3, #12]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d00a      	beq.n	8010324 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8010314:	2b03      	cmp	r3, #3
 8010316:	d105      	bne.n	8010324 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801031e:	68db      	ldr	r3, [r3, #12]
 8010320:	68f8      	ldr	r0, [r7, #12]
 8010322:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8010324:	2180      	movs	r1, #128	; 0x80
 8010326:	68f8      	ldr	r0, [r7, #12]
 8010328:	f006 fd4b 	bl	8016dc2 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801032c:	68f8      	ldr	r0, [r7, #12]
 801032e:	f000 fee6 	bl	80110fe <USBD_CtlReceiveStatus>
 8010332:	e00d      	b.n	8010350 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801033a:	2b04      	cmp	r3, #4
 801033c:	d004      	beq.n	8010348 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8010344:	2b00      	cmp	r3, #0
 8010346:	d103      	bne.n	8010350 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8010348:	2180      	movs	r1, #128	; 0x80
 801034a:	68f8      	ldr	r0, [r7, #12]
 801034c:	f006 fd39 	bl	8016dc2 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010356:	2b01      	cmp	r3, #1
 8010358:	d11d      	bne.n	8010396 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 801035a:	68f8      	ldr	r0, [r7, #12]
 801035c:	f7ff fe82 	bl	8010064 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	2200      	movs	r2, #0
 8010364:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8010368:	e015      	b.n	8010396 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010370:	695b      	ldr	r3, [r3, #20]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d00d      	beq.n	8010392 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 801037c:	2b03      	cmp	r3, #3
 801037e:	d108      	bne.n	8010392 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010386:	695b      	ldr	r3, [r3, #20]
 8010388:	7afa      	ldrb	r2, [r7, #11]
 801038a:	4611      	mov	r1, r2
 801038c:	68f8      	ldr	r0, [r7, #12]
 801038e:	4798      	blx	r3
 8010390:	e001      	b.n	8010396 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8010392:	2302      	movs	r3, #2
 8010394:	e000      	b.n	8010398 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8010396:	2300      	movs	r3, #0
}
 8010398:	4618      	mov	r0, r3
 801039a:	3718      	adds	r7, #24
 801039c:	46bd      	mov	sp, r7
 801039e:	bd80      	pop	{r7, pc}

080103a0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80103a0:	b580      	push	{r7, lr}
 80103a2:	b082      	sub	sp, #8
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80103a8:	2340      	movs	r3, #64	; 0x40
 80103aa:	2200      	movs	r2, #0
 80103ac:	2100      	movs	r1, #0
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f006 fca3 	bl	8016cfa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	2201      	movs	r2, #1
 80103b8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	2240      	movs	r2, #64	; 0x40
 80103c0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80103c4:	2340      	movs	r3, #64	; 0x40
 80103c6:	2200      	movs	r2, #0
 80103c8:	2180      	movs	r1, #128	; 0x80
 80103ca:	6878      	ldr	r0, [r7, #4]
 80103cc:	f006 fc95 	bl	8016cfa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	2201      	movs	r2, #1
 80103d4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	2240      	movs	r2, #64	; 0x40
 80103da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	2201      	movs	r2, #1
 80103e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	2200      	movs	r2, #0
 80103e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	2200      	movs	r2, #0
 80103f0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	2200      	movs	r2, #0
 80103f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010400:	2b00      	cmp	r3, #0
 8010402:	d009      	beq.n	8010418 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801040a:	685b      	ldr	r3, [r3, #4]
 801040c:	687a      	ldr	r2, [r7, #4]
 801040e:	6852      	ldr	r2, [r2, #4]
 8010410:	b2d2      	uxtb	r2, r2
 8010412:	4611      	mov	r1, r2
 8010414:	6878      	ldr	r0, [r7, #4]
 8010416:	4798      	blx	r3
  }

  return USBD_OK;
 8010418:	2300      	movs	r3, #0
}
 801041a:	4618      	mov	r0, r3
 801041c:	3708      	adds	r7, #8
 801041e:	46bd      	mov	sp, r7
 8010420:	bd80      	pop	{r7, pc}

08010422 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010422:	b480      	push	{r7}
 8010424:	b083      	sub	sp, #12
 8010426:	af00      	add	r7, sp, #0
 8010428:	6078      	str	r0, [r7, #4]
 801042a:	460b      	mov	r3, r1
 801042c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	78fa      	ldrb	r2, [r7, #3]
 8010432:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010434:	2300      	movs	r3, #0
}
 8010436:	4618      	mov	r0, r3
 8010438:	370c      	adds	r7, #12
 801043a:	46bd      	mov	sp, r7
 801043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010440:	4770      	bx	lr

08010442 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010442:	b480      	push	{r7}
 8010444:	b083      	sub	sp, #12
 8010446:	af00      	add	r7, sp, #0
 8010448:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	2204      	movs	r2, #4
 801045a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801045e:	2300      	movs	r3, #0
}
 8010460:	4618      	mov	r0, r3
 8010462:	370c      	adds	r7, #12
 8010464:	46bd      	mov	sp, r7
 8010466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046a:	4770      	bx	lr

0801046c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801046c:	b480      	push	{r7}
 801046e:	b083      	sub	sp, #12
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801047a:	2b04      	cmp	r3, #4
 801047c:	d105      	bne.n	801048a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801048a:	2300      	movs	r3, #0
}
 801048c:	4618      	mov	r0, r3
 801048e:	370c      	adds	r7, #12
 8010490:	46bd      	mov	sp, r7
 8010492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010496:	4770      	bx	lr

08010498 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010498:	b580      	push	{r7, lr}
 801049a:	b082      	sub	sp, #8
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80104a6:	2b03      	cmp	r3, #3
 80104a8:	d10b      	bne.n	80104c2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80104b0:	69db      	ldr	r3, [r3, #28]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d005      	beq.n	80104c2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80104bc:	69db      	ldr	r3, [r3, #28]
 80104be:	6878      	ldr	r0, [r7, #4]
 80104c0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80104c2:	2300      	movs	r3, #0
}
 80104c4:	4618      	mov	r0, r3
 80104c6:	3708      	adds	r7, #8
 80104c8:	46bd      	mov	sp, r7
 80104ca:	bd80      	pop	{r7, pc}

080104cc <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80104cc:	b480      	push	{r7}
 80104ce:	b083      	sub	sp, #12
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
 80104d4:	460b      	mov	r3, r1
 80104d6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80104d8:	2300      	movs	r3, #0
}
 80104da:	4618      	mov	r0, r3
 80104dc:	370c      	adds	r7, #12
 80104de:	46bd      	mov	sp, r7
 80104e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e4:	4770      	bx	lr

080104e6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80104e6:	b480      	push	{r7}
 80104e8:	b083      	sub	sp, #12
 80104ea:	af00      	add	r7, sp, #0
 80104ec:	6078      	str	r0, [r7, #4]
 80104ee:	460b      	mov	r3, r1
 80104f0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80104f2:	2300      	movs	r3, #0
}
 80104f4:	4618      	mov	r0, r3
 80104f6:	370c      	adds	r7, #12
 80104f8:	46bd      	mov	sp, r7
 80104fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fe:	4770      	bx	lr

08010500 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8010500:	b480      	push	{r7}
 8010502:	b083      	sub	sp, #12
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010508:	2300      	movs	r3, #0
}
 801050a:	4618      	mov	r0, r3
 801050c:	370c      	adds	r7, #12
 801050e:	46bd      	mov	sp, r7
 8010510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010514:	4770      	bx	lr

08010516 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010516:	b580      	push	{r7, lr}
 8010518:	b082      	sub	sp, #8
 801051a:	af00      	add	r7, sp, #0
 801051c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	2201      	movs	r2, #1
 8010522:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801052c:	685b      	ldr	r3, [r3, #4]
 801052e:	687a      	ldr	r2, [r7, #4]
 8010530:	6852      	ldr	r2, [r2, #4]
 8010532:	b2d2      	uxtb	r2, r2
 8010534:	4611      	mov	r1, r2
 8010536:	6878      	ldr	r0, [r7, #4]
 8010538:	4798      	blx	r3

  return USBD_OK;
 801053a:	2300      	movs	r3, #0
}
 801053c:	4618      	mov	r0, r3
 801053e:	3708      	adds	r7, #8
 8010540:	46bd      	mov	sp, r7
 8010542:	bd80      	pop	{r7, pc}

08010544 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8010544:	b580      	push	{r7, lr}
 8010546:	b084      	sub	sp, #16
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
 801054c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801054e:	2300      	movs	r3, #0
 8010550:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	781b      	ldrb	r3, [r3, #0]
 8010556:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801055a:	2b20      	cmp	r3, #32
 801055c:	d004      	beq.n	8010568 <USBD_StdDevReq+0x24>
 801055e:	2b40      	cmp	r3, #64	; 0x40
 8010560:	d002      	beq.n	8010568 <USBD_StdDevReq+0x24>
 8010562:	2b00      	cmp	r3, #0
 8010564:	d008      	beq.n	8010578 <USBD_StdDevReq+0x34>
 8010566:	e04c      	b.n	8010602 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801056e:	689b      	ldr	r3, [r3, #8]
 8010570:	6839      	ldr	r1, [r7, #0]
 8010572:	6878      	ldr	r0, [r7, #4]
 8010574:	4798      	blx	r3
      break;
 8010576:	e049      	b.n	801060c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010578:	683b      	ldr	r3, [r7, #0]
 801057a:	785b      	ldrb	r3, [r3, #1]
 801057c:	2b09      	cmp	r3, #9
 801057e:	d83a      	bhi.n	80105f6 <USBD_StdDevReq+0xb2>
 8010580:	a201      	add	r2, pc, #4	; (adr r2, 8010588 <USBD_StdDevReq+0x44>)
 8010582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010586:	bf00      	nop
 8010588:	080105d9 	.word	0x080105d9
 801058c:	080105ed 	.word	0x080105ed
 8010590:	080105f7 	.word	0x080105f7
 8010594:	080105e3 	.word	0x080105e3
 8010598:	080105f7 	.word	0x080105f7
 801059c:	080105bb 	.word	0x080105bb
 80105a0:	080105b1 	.word	0x080105b1
 80105a4:	080105f7 	.word	0x080105f7
 80105a8:	080105cf 	.word	0x080105cf
 80105ac:	080105c5 	.word	0x080105c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80105b0:	6839      	ldr	r1, [r7, #0]
 80105b2:	6878      	ldr	r0, [r7, #4]
 80105b4:	f000 f9d4 	bl	8010960 <USBD_GetDescriptor>
          break;
 80105b8:	e022      	b.n	8010600 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80105ba:	6839      	ldr	r1, [r7, #0]
 80105bc:	6878      	ldr	r0, [r7, #4]
 80105be:	f000 fb37 	bl	8010c30 <USBD_SetAddress>
          break;
 80105c2:	e01d      	b.n	8010600 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80105c4:	6839      	ldr	r1, [r7, #0]
 80105c6:	6878      	ldr	r0, [r7, #4]
 80105c8:	f000 fb74 	bl	8010cb4 <USBD_SetConfig>
          break;
 80105cc:	e018      	b.n	8010600 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80105ce:	6839      	ldr	r1, [r7, #0]
 80105d0:	6878      	ldr	r0, [r7, #4]
 80105d2:	f000 fbfd 	bl	8010dd0 <USBD_GetConfig>
          break;
 80105d6:	e013      	b.n	8010600 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80105d8:	6839      	ldr	r1, [r7, #0]
 80105da:	6878      	ldr	r0, [r7, #4]
 80105dc:	f000 fc2c 	bl	8010e38 <USBD_GetStatus>
          break;
 80105e0:	e00e      	b.n	8010600 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80105e2:	6839      	ldr	r1, [r7, #0]
 80105e4:	6878      	ldr	r0, [r7, #4]
 80105e6:	f000 fc5a 	bl	8010e9e <USBD_SetFeature>
          break;
 80105ea:	e009      	b.n	8010600 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80105ec:	6839      	ldr	r1, [r7, #0]
 80105ee:	6878      	ldr	r0, [r7, #4]
 80105f0:	f000 fc69 	bl	8010ec6 <USBD_ClrFeature>
          break;
 80105f4:	e004      	b.n	8010600 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80105f6:	6839      	ldr	r1, [r7, #0]
 80105f8:	6878      	ldr	r0, [r7, #4]
 80105fa:	f000 fcc2 	bl	8010f82 <USBD_CtlError>
          break;
 80105fe:	bf00      	nop
      }
      break;
 8010600:	e004      	b.n	801060c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8010602:	6839      	ldr	r1, [r7, #0]
 8010604:	6878      	ldr	r0, [r7, #4]
 8010606:	f000 fcbc 	bl	8010f82 <USBD_CtlError>
      break;
 801060a:	bf00      	nop
  }

  return ret;
 801060c:	7bfb      	ldrb	r3, [r7, #15]
}
 801060e:	4618      	mov	r0, r3
 8010610:	3710      	adds	r7, #16
 8010612:	46bd      	mov	sp, r7
 8010614:	bd80      	pop	{r7, pc}
 8010616:	bf00      	nop

08010618 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b084      	sub	sp, #16
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
 8010620:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010622:	2300      	movs	r3, #0
 8010624:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010626:	683b      	ldr	r3, [r7, #0]
 8010628:	781b      	ldrb	r3, [r3, #0]
 801062a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801062e:	2b20      	cmp	r3, #32
 8010630:	d003      	beq.n	801063a <USBD_StdItfReq+0x22>
 8010632:	2b40      	cmp	r3, #64	; 0x40
 8010634:	d001      	beq.n	801063a <USBD_StdItfReq+0x22>
 8010636:	2b00      	cmp	r3, #0
 8010638:	d12a      	bne.n	8010690 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010640:	3b01      	subs	r3, #1
 8010642:	2b02      	cmp	r3, #2
 8010644:	d81d      	bhi.n	8010682 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010646:	683b      	ldr	r3, [r7, #0]
 8010648:	889b      	ldrh	r3, [r3, #4]
 801064a:	b2db      	uxtb	r3, r3
 801064c:	2b01      	cmp	r3, #1
 801064e:	d813      	bhi.n	8010678 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010656:	689b      	ldr	r3, [r3, #8]
 8010658:	6839      	ldr	r1, [r7, #0]
 801065a:	6878      	ldr	r0, [r7, #4]
 801065c:	4798      	blx	r3
 801065e:	4603      	mov	r3, r0
 8010660:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010662:	683b      	ldr	r3, [r7, #0]
 8010664:	88db      	ldrh	r3, [r3, #6]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d110      	bne.n	801068c <USBD_StdItfReq+0x74>
 801066a:	7bfb      	ldrb	r3, [r7, #15]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d10d      	bne.n	801068c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8010670:	6878      	ldr	r0, [r7, #4]
 8010672:	f000 fd31 	bl	80110d8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010676:	e009      	b.n	801068c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8010678:	6839      	ldr	r1, [r7, #0]
 801067a:	6878      	ldr	r0, [r7, #4]
 801067c:	f000 fc81 	bl	8010f82 <USBD_CtlError>
          break;
 8010680:	e004      	b.n	801068c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8010682:	6839      	ldr	r1, [r7, #0]
 8010684:	6878      	ldr	r0, [r7, #4]
 8010686:	f000 fc7c 	bl	8010f82 <USBD_CtlError>
          break;
 801068a:	e000      	b.n	801068e <USBD_StdItfReq+0x76>
          break;
 801068c:	bf00      	nop
      }
      break;
 801068e:	e004      	b.n	801069a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8010690:	6839      	ldr	r1, [r7, #0]
 8010692:	6878      	ldr	r0, [r7, #4]
 8010694:	f000 fc75 	bl	8010f82 <USBD_CtlError>
      break;
 8010698:	bf00      	nop
  }

  return USBD_OK;
 801069a:	2300      	movs	r3, #0
}
 801069c:	4618      	mov	r0, r3
 801069e:	3710      	adds	r7, #16
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bd80      	pop	{r7, pc}

080106a4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80106a4:	b580      	push	{r7, lr}
 80106a6:	b084      	sub	sp, #16
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
 80106ac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80106ae:	2300      	movs	r3, #0
 80106b0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80106b2:	683b      	ldr	r3, [r7, #0]
 80106b4:	889b      	ldrh	r3, [r3, #4]
 80106b6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80106b8:	683b      	ldr	r3, [r7, #0]
 80106ba:	781b      	ldrb	r3, [r3, #0]
 80106bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80106c0:	2b20      	cmp	r3, #32
 80106c2:	d004      	beq.n	80106ce <USBD_StdEPReq+0x2a>
 80106c4:	2b40      	cmp	r3, #64	; 0x40
 80106c6:	d002      	beq.n	80106ce <USBD_StdEPReq+0x2a>
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d008      	beq.n	80106de <USBD_StdEPReq+0x3a>
 80106cc:	e13d      	b.n	801094a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80106d4:	689b      	ldr	r3, [r3, #8]
 80106d6:	6839      	ldr	r1, [r7, #0]
 80106d8:	6878      	ldr	r0, [r7, #4]
 80106da:	4798      	blx	r3
      break;
 80106dc:	e13a      	b.n	8010954 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80106de:	683b      	ldr	r3, [r7, #0]
 80106e0:	781b      	ldrb	r3, [r3, #0]
 80106e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80106e6:	2b20      	cmp	r3, #32
 80106e8:	d10a      	bne.n	8010700 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80106f0:	689b      	ldr	r3, [r3, #8]
 80106f2:	6839      	ldr	r1, [r7, #0]
 80106f4:	6878      	ldr	r0, [r7, #4]
 80106f6:	4798      	blx	r3
 80106f8:	4603      	mov	r3, r0
 80106fa:	73fb      	strb	r3, [r7, #15]

        return ret;
 80106fc:	7bfb      	ldrb	r3, [r7, #15]
 80106fe:	e12a      	b.n	8010956 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8010700:	683b      	ldr	r3, [r7, #0]
 8010702:	785b      	ldrb	r3, [r3, #1]
 8010704:	2b01      	cmp	r3, #1
 8010706:	d03e      	beq.n	8010786 <USBD_StdEPReq+0xe2>
 8010708:	2b03      	cmp	r3, #3
 801070a:	d002      	beq.n	8010712 <USBD_StdEPReq+0x6e>
 801070c:	2b00      	cmp	r3, #0
 801070e:	d070      	beq.n	80107f2 <USBD_StdEPReq+0x14e>
 8010710:	e115      	b.n	801093e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010718:	2b02      	cmp	r3, #2
 801071a:	d002      	beq.n	8010722 <USBD_StdEPReq+0x7e>
 801071c:	2b03      	cmp	r3, #3
 801071e:	d015      	beq.n	801074c <USBD_StdEPReq+0xa8>
 8010720:	e02b      	b.n	801077a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010722:	7bbb      	ldrb	r3, [r7, #14]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d00c      	beq.n	8010742 <USBD_StdEPReq+0x9e>
 8010728:	7bbb      	ldrb	r3, [r7, #14]
 801072a:	2b80      	cmp	r3, #128	; 0x80
 801072c:	d009      	beq.n	8010742 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801072e:	7bbb      	ldrb	r3, [r7, #14]
 8010730:	4619      	mov	r1, r3
 8010732:	6878      	ldr	r0, [r7, #4]
 8010734:	f006 fb45 	bl	8016dc2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8010738:	2180      	movs	r1, #128	; 0x80
 801073a:	6878      	ldr	r0, [r7, #4]
 801073c:	f006 fb41 	bl	8016dc2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010740:	e020      	b.n	8010784 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8010742:	6839      	ldr	r1, [r7, #0]
 8010744:	6878      	ldr	r0, [r7, #4]
 8010746:	f000 fc1c 	bl	8010f82 <USBD_CtlError>
              break;
 801074a:	e01b      	b.n	8010784 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801074c:	683b      	ldr	r3, [r7, #0]
 801074e:	885b      	ldrh	r3, [r3, #2]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d10e      	bne.n	8010772 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8010754:	7bbb      	ldrb	r3, [r7, #14]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d00b      	beq.n	8010772 <USBD_StdEPReq+0xce>
 801075a:	7bbb      	ldrb	r3, [r7, #14]
 801075c:	2b80      	cmp	r3, #128	; 0x80
 801075e:	d008      	beq.n	8010772 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	88db      	ldrh	r3, [r3, #6]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d104      	bne.n	8010772 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8010768:	7bbb      	ldrb	r3, [r7, #14]
 801076a:	4619      	mov	r1, r3
 801076c:	6878      	ldr	r0, [r7, #4]
 801076e:	f006 fb28 	bl	8016dc2 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8010772:	6878      	ldr	r0, [r7, #4]
 8010774:	f000 fcb0 	bl	80110d8 <USBD_CtlSendStatus>

              break;
 8010778:	e004      	b.n	8010784 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 801077a:	6839      	ldr	r1, [r7, #0]
 801077c:	6878      	ldr	r0, [r7, #4]
 801077e:	f000 fc00 	bl	8010f82 <USBD_CtlError>
              break;
 8010782:	bf00      	nop
          }
          break;
 8010784:	e0e0      	b.n	8010948 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801078c:	2b02      	cmp	r3, #2
 801078e:	d002      	beq.n	8010796 <USBD_StdEPReq+0xf2>
 8010790:	2b03      	cmp	r3, #3
 8010792:	d015      	beq.n	80107c0 <USBD_StdEPReq+0x11c>
 8010794:	e026      	b.n	80107e4 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010796:	7bbb      	ldrb	r3, [r7, #14]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d00c      	beq.n	80107b6 <USBD_StdEPReq+0x112>
 801079c:	7bbb      	ldrb	r3, [r7, #14]
 801079e:	2b80      	cmp	r3, #128	; 0x80
 80107a0:	d009      	beq.n	80107b6 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80107a2:	7bbb      	ldrb	r3, [r7, #14]
 80107a4:	4619      	mov	r1, r3
 80107a6:	6878      	ldr	r0, [r7, #4]
 80107a8:	f006 fb0b 	bl	8016dc2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80107ac:	2180      	movs	r1, #128	; 0x80
 80107ae:	6878      	ldr	r0, [r7, #4]
 80107b0:	f006 fb07 	bl	8016dc2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80107b4:	e01c      	b.n	80107f0 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80107b6:	6839      	ldr	r1, [r7, #0]
 80107b8:	6878      	ldr	r0, [r7, #4]
 80107ba:	f000 fbe2 	bl	8010f82 <USBD_CtlError>
              break;
 80107be:	e017      	b.n	80107f0 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80107c0:	683b      	ldr	r3, [r7, #0]
 80107c2:	885b      	ldrh	r3, [r3, #2]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d112      	bne.n	80107ee <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80107c8:	7bbb      	ldrb	r3, [r7, #14]
 80107ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d004      	beq.n	80107dc <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80107d2:	7bbb      	ldrb	r3, [r7, #14]
 80107d4:	4619      	mov	r1, r3
 80107d6:	6878      	ldr	r0, [r7, #4]
 80107d8:	f006 fb12 	bl	8016e00 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80107dc:	6878      	ldr	r0, [r7, #4]
 80107de:	f000 fc7b 	bl	80110d8 <USBD_CtlSendStatus>
              }
              break;
 80107e2:	e004      	b.n	80107ee <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80107e4:	6839      	ldr	r1, [r7, #0]
 80107e6:	6878      	ldr	r0, [r7, #4]
 80107e8:	f000 fbcb 	bl	8010f82 <USBD_CtlError>
              break;
 80107ec:	e000      	b.n	80107f0 <USBD_StdEPReq+0x14c>
              break;
 80107ee:	bf00      	nop
          }
          break;
 80107f0:	e0aa      	b.n	8010948 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80107f8:	2b02      	cmp	r3, #2
 80107fa:	d002      	beq.n	8010802 <USBD_StdEPReq+0x15e>
 80107fc:	2b03      	cmp	r3, #3
 80107fe:	d032      	beq.n	8010866 <USBD_StdEPReq+0x1c2>
 8010800:	e097      	b.n	8010932 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010802:	7bbb      	ldrb	r3, [r7, #14]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d007      	beq.n	8010818 <USBD_StdEPReq+0x174>
 8010808:	7bbb      	ldrb	r3, [r7, #14]
 801080a:	2b80      	cmp	r3, #128	; 0x80
 801080c:	d004      	beq.n	8010818 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 801080e:	6839      	ldr	r1, [r7, #0]
 8010810:	6878      	ldr	r0, [r7, #4]
 8010812:	f000 fbb6 	bl	8010f82 <USBD_CtlError>
                break;
 8010816:	e091      	b.n	801093c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010818:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801081c:	2b00      	cmp	r3, #0
 801081e:	da0b      	bge.n	8010838 <USBD_StdEPReq+0x194>
 8010820:	7bbb      	ldrb	r3, [r7, #14]
 8010822:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010826:	4613      	mov	r3, r2
 8010828:	009b      	lsls	r3, r3, #2
 801082a:	4413      	add	r3, r2
 801082c:	009b      	lsls	r3, r3, #2
 801082e:	3310      	adds	r3, #16
 8010830:	687a      	ldr	r2, [r7, #4]
 8010832:	4413      	add	r3, r2
 8010834:	3304      	adds	r3, #4
 8010836:	e00b      	b.n	8010850 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010838:	7bbb      	ldrb	r3, [r7, #14]
 801083a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801083e:	4613      	mov	r3, r2
 8010840:	009b      	lsls	r3, r3, #2
 8010842:	4413      	add	r3, r2
 8010844:	009b      	lsls	r3, r3, #2
 8010846:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801084a:	687a      	ldr	r2, [r7, #4]
 801084c:	4413      	add	r3, r2
 801084e:	3304      	adds	r3, #4
 8010850:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010852:	68bb      	ldr	r3, [r7, #8]
 8010854:	2200      	movs	r2, #0
 8010856:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8010858:	68bb      	ldr	r3, [r7, #8]
 801085a:	2202      	movs	r2, #2
 801085c:	4619      	mov	r1, r3
 801085e:	6878      	ldr	r0, [r7, #4]
 8010860:	f000 fbfa 	bl	8011058 <USBD_CtlSendData>
              break;
 8010864:	e06a      	b.n	801093c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010866:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801086a:	2b00      	cmp	r3, #0
 801086c:	da11      	bge.n	8010892 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801086e:	7bbb      	ldrb	r3, [r7, #14]
 8010870:	f003 020f 	and.w	r2, r3, #15
 8010874:	6879      	ldr	r1, [r7, #4]
 8010876:	4613      	mov	r3, r2
 8010878:	009b      	lsls	r3, r3, #2
 801087a:	4413      	add	r3, r2
 801087c:	009b      	lsls	r3, r3, #2
 801087e:	440b      	add	r3, r1
 8010880:	3318      	adds	r3, #24
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d117      	bne.n	80108b8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8010888:	6839      	ldr	r1, [r7, #0]
 801088a:	6878      	ldr	r0, [r7, #4]
 801088c:	f000 fb79 	bl	8010f82 <USBD_CtlError>
                  break;
 8010890:	e054      	b.n	801093c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010892:	7bbb      	ldrb	r3, [r7, #14]
 8010894:	f003 020f 	and.w	r2, r3, #15
 8010898:	6879      	ldr	r1, [r7, #4]
 801089a:	4613      	mov	r3, r2
 801089c:	009b      	lsls	r3, r3, #2
 801089e:	4413      	add	r3, r2
 80108a0:	009b      	lsls	r3, r3, #2
 80108a2:	440b      	add	r3, r1
 80108a4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d104      	bne.n	80108b8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80108ae:	6839      	ldr	r1, [r7, #0]
 80108b0:	6878      	ldr	r0, [r7, #4]
 80108b2:	f000 fb66 	bl	8010f82 <USBD_CtlError>
                  break;
 80108b6:	e041      	b.n	801093c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80108b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	da0b      	bge.n	80108d8 <USBD_StdEPReq+0x234>
 80108c0:	7bbb      	ldrb	r3, [r7, #14]
 80108c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80108c6:	4613      	mov	r3, r2
 80108c8:	009b      	lsls	r3, r3, #2
 80108ca:	4413      	add	r3, r2
 80108cc:	009b      	lsls	r3, r3, #2
 80108ce:	3310      	adds	r3, #16
 80108d0:	687a      	ldr	r2, [r7, #4]
 80108d2:	4413      	add	r3, r2
 80108d4:	3304      	adds	r3, #4
 80108d6:	e00b      	b.n	80108f0 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80108d8:	7bbb      	ldrb	r3, [r7, #14]
 80108da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80108de:	4613      	mov	r3, r2
 80108e0:	009b      	lsls	r3, r3, #2
 80108e2:	4413      	add	r3, r2
 80108e4:	009b      	lsls	r3, r3, #2
 80108e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80108ea:	687a      	ldr	r2, [r7, #4]
 80108ec:	4413      	add	r3, r2
 80108ee:	3304      	adds	r3, #4
 80108f0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80108f2:	7bbb      	ldrb	r3, [r7, #14]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d002      	beq.n	80108fe <USBD_StdEPReq+0x25a>
 80108f8:	7bbb      	ldrb	r3, [r7, #14]
 80108fa:	2b80      	cmp	r3, #128	; 0x80
 80108fc:	d103      	bne.n	8010906 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80108fe:	68bb      	ldr	r3, [r7, #8]
 8010900:	2200      	movs	r2, #0
 8010902:	601a      	str	r2, [r3, #0]
 8010904:	e00e      	b.n	8010924 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8010906:	7bbb      	ldrb	r3, [r7, #14]
 8010908:	4619      	mov	r1, r3
 801090a:	6878      	ldr	r0, [r7, #4]
 801090c:	f006 fa97 	bl	8016e3e <USBD_LL_IsStallEP>
 8010910:	4603      	mov	r3, r0
 8010912:	2b00      	cmp	r3, #0
 8010914:	d003      	beq.n	801091e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8010916:	68bb      	ldr	r3, [r7, #8]
 8010918:	2201      	movs	r2, #1
 801091a:	601a      	str	r2, [r3, #0]
 801091c:	e002      	b.n	8010924 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 801091e:	68bb      	ldr	r3, [r7, #8]
 8010920:	2200      	movs	r2, #0
 8010922:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8010924:	68bb      	ldr	r3, [r7, #8]
 8010926:	2202      	movs	r2, #2
 8010928:	4619      	mov	r1, r3
 801092a:	6878      	ldr	r0, [r7, #4]
 801092c:	f000 fb94 	bl	8011058 <USBD_CtlSendData>
              break;
 8010930:	e004      	b.n	801093c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8010932:	6839      	ldr	r1, [r7, #0]
 8010934:	6878      	ldr	r0, [r7, #4]
 8010936:	f000 fb24 	bl	8010f82 <USBD_CtlError>
              break;
 801093a:	bf00      	nop
          }
          break;
 801093c:	e004      	b.n	8010948 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 801093e:	6839      	ldr	r1, [r7, #0]
 8010940:	6878      	ldr	r0, [r7, #4]
 8010942:	f000 fb1e 	bl	8010f82 <USBD_CtlError>
          break;
 8010946:	bf00      	nop
      }
      break;
 8010948:	e004      	b.n	8010954 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 801094a:	6839      	ldr	r1, [r7, #0]
 801094c:	6878      	ldr	r0, [r7, #4]
 801094e:	f000 fb18 	bl	8010f82 <USBD_CtlError>
      break;
 8010952:	bf00      	nop
  }

  return ret;
 8010954:	7bfb      	ldrb	r3, [r7, #15]
}
 8010956:	4618      	mov	r0, r3
 8010958:	3710      	adds	r7, #16
 801095a:	46bd      	mov	sp, r7
 801095c:	bd80      	pop	{r7, pc}
	...

08010960 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b084      	sub	sp, #16
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
 8010968:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801096a:	2300      	movs	r3, #0
 801096c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801096e:	2300      	movs	r3, #0
 8010970:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010972:	2300      	movs	r3, #0
 8010974:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010976:	683b      	ldr	r3, [r7, #0]
 8010978:	885b      	ldrh	r3, [r3, #2]
 801097a:	0a1b      	lsrs	r3, r3, #8
 801097c:	b29b      	uxth	r3, r3
 801097e:	3b01      	subs	r3, #1
 8010980:	2b06      	cmp	r3, #6
 8010982:	f200 8128 	bhi.w	8010bd6 <USBD_GetDescriptor+0x276>
 8010986:	a201      	add	r2, pc, #4	; (adr r2, 801098c <USBD_GetDescriptor+0x2c>)
 8010988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801098c:	080109a9 	.word	0x080109a9
 8010990:	080109c1 	.word	0x080109c1
 8010994:	08010a01 	.word	0x08010a01
 8010998:	08010bd7 	.word	0x08010bd7
 801099c:	08010bd7 	.word	0x08010bd7
 80109a0:	08010b77 	.word	0x08010b77
 80109a4:	08010ba3 	.word	0x08010ba3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	687a      	ldr	r2, [r7, #4]
 80109b2:	7c12      	ldrb	r2, [r2, #16]
 80109b4:	f107 0108 	add.w	r1, r7, #8
 80109b8:	4610      	mov	r0, r2
 80109ba:	4798      	blx	r3
 80109bc:	60f8      	str	r0, [r7, #12]
      break;
 80109be:	e112      	b.n	8010be6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	7c1b      	ldrb	r3, [r3, #16]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d10d      	bne.n	80109e4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80109ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109d0:	f107 0208 	add.w	r2, r7, #8
 80109d4:	4610      	mov	r0, r2
 80109d6:	4798      	blx	r3
 80109d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	3301      	adds	r3, #1
 80109de:	2202      	movs	r2, #2
 80109e0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80109e2:	e100      	b.n	8010be6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80109ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109ec:	f107 0208 	add.w	r2, r7, #8
 80109f0:	4610      	mov	r0, r2
 80109f2:	4798      	blx	r3
 80109f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	3301      	adds	r3, #1
 80109fa:	2202      	movs	r2, #2
 80109fc:	701a      	strb	r2, [r3, #0]
      break;
 80109fe:	e0f2      	b.n	8010be6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010a00:	683b      	ldr	r3, [r7, #0]
 8010a02:	885b      	ldrh	r3, [r3, #2]
 8010a04:	b2db      	uxtb	r3, r3
 8010a06:	2b05      	cmp	r3, #5
 8010a08:	f200 80ac 	bhi.w	8010b64 <USBD_GetDescriptor+0x204>
 8010a0c:	a201      	add	r2, pc, #4	; (adr r2, 8010a14 <USBD_GetDescriptor+0xb4>)
 8010a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a12:	bf00      	nop
 8010a14:	08010a2d 	.word	0x08010a2d
 8010a18:	08010a61 	.word	0x08010a61
 8010a1c:	08010a95 	.word	0x08010a95
 8010a20:	08010ac9 	.word	0x08010ac9
 8010a24:	08010afd 	.word	0x08010afd
 8010a28:	08010b31 	.word	0x08010b31
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010a32:	685b      	ldr	r3, [r3, #4]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d00b      	beq.n	8010a50 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010a3e:	685b      	ldr	r3, [r3, #4]
 8010a40:	687a      	ldr	r2, [r7, #4]
 8010a42:	7c12      	ldrb	r2, [r2, #16]
 8010a44:	f107 0108 	add.w	r1, r7, #8
 8010a48:	4610      	mov	r0, r2
 8010a4a:	4798      	blx	r3
 8010a4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010a4e:	e091      	b.n	8010b74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010a50:	6839      	ldr	r1, [r7, #0]
 8010a52:	6878      	ldr	r0, [r7, #4]
 8010a54:	f000 fa95 	bl	8010f82 <USBD_CtlError>
            err++;
 8010a58:	7afb      	ldrb	r3, [r7, #11]
 8010a5a:	3301      	adds	r3, #1
 8010a5c:	72fb      	strb	r3, [r7, #11]
          break;
 8010a5e:	e089      	b.n	8010b74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010a66:	689b      	ldr	r3, [r3, #8]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d00b      	beq.n	8010a84 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010a72:	689b      	ldr	r3, [r3, #8]
 8010a74:	687a      	ldr	r2, [r7, #4]
 8010a76:	7c12      	ldrb	r2, [r2, #16]
 8010a78:	f107 0108 	add.w	r1, r7, #8
 8010a7c:	4610      	mov	r0, r2
 8010a7e:	4798      	blx	r3
 8010a80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010a82:	e077      	b.n	8010b74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010a84:	6839      	ldr	r1, [r7, #0]
 8010a86:	6878      	ldr	r0, [r7, #4]
 8010a88:	f000 fa7b 	bl	8010f82 <USBD_CtlError>
            err++;
 8010a8c:	7afb      	ldrb	r3, [r7, #11]
 8010a8e:	3301      	adds	r3, #1
 8010a90:	72fb      	strb	r3, [r7, #11]
          break;
 8010a92:	e06f      	b.n	8010b74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010a9a:	68db      	ldr	r3, [r3, #12]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d00b      	beq.n	8010ab8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010aa6:	68db      	ldr	r3, [r3, #12]
 8010aa8:	687a      	ldr	r2, [r7, #4]
 8010aaa:	7c12      	ldrb	r2, [r2, #16]
 8010aac:	f107 0108 	add.w	r1, r7, #8
 8010ab0:	4610      	mov	r0, r2
 8010ab2:	4798      	blx	r3
 8010ab4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010ab6:	e05d      	b.n	8010b74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010ab8:	6839      	ldr	r1, [r7, #0]
 8010aba:	6878      	ldr	r0, [r7, #4]
 8010abc:	f000 fa61 	bl	8010f82 <USBD_CtlError>
            err++;
 8010ac0:	7afb      	ldrb	r3, [r7, #11]
 8010ac2:	3301      	adds	r3, #1
 8010ac4:	72fb      	strb	r3, [r7, #11]
          break;
 8010ac6:	e055      	b.n	8010b74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010ace:	691b      	ldr	r3, [r3, #16]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d00b      	beq.n	8010aec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010ada:	691b      	ldr	r3, [r3, #16]
 8010adc:	687a      	ldr	r2, [r7, #4]
 8010ade:	7c12      	ldrb	r2, [r2, #16]
 8010ae0:	f107 0108 	add.w	r1, r7, #8
 8010ae4:	4610      	mov	r0, r2
 8010ae6:	4798      	blx	r3
 8010ae8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010aea:	e043      	b.n	8010b74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010aec:	6839      	ldr	r1, [r7, #0]
 8010aee:	6878      	ldr	r0, [r7, #4]
 8010af0:	f000 fa47 	bl	8010f82 <USBD_CtlError>
            err++;
 8010af4:	7afb      	ldrb	r3, [r7, #11]
 8010af6:	3301      	adds	r3, #1
 8010af8:	72fb      	strb	r3, [r7, #11]
          break;
 8010afa:	e03b      	b.n	8010b74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010b02:	695b      	ldr	r3, [r3, #20]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d00b      	beq.n	8010b20 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010b0e:	695b      	ldr	r3, [r3, #20]
 8010b10:	687a      	ldr	r2, [r7, #4]
 8010b12:	7c12      	ldrb	r2, [r2, #16]
 8010b14:	f107 0108 	add.w	r1, r7, #8
 8010b18:	4610      	mov	r0, r2
 8010b1a:	4798      	blx	r3
 8010b1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010b1e:	e029      	b.n	8010b74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010b20:	6839      	ldr	r1, [r7, #0]
 8010b22:	6878      	ldr	r0, [r7, #4]
 8010b24:	f000 fa2d 	bl	8010f82 <USBD_CtlError>
            err++;
 8010b28:	7afb      	ldrb	r3, [r7, #11]
 8010b2a:	3301      	adds	r3, #1
 8010b2c:	72fb      	strb	r3, [r7, #11]
          break;
 8010b2e:	e021      	b.n	8010b74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010b36:	699b      	ldr	r3, [r3, #24]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d00b      	beq.n	8010b54 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010b42:	699b      	ldr	r3, [r3, #24]
 8010b44:	687a      	ldr	r2, [r7, #4]
 8010b46:	7c12      	ldrb	r2, [r2, #16]
 8010b48:	f107 0108 	add.w	r1, r7, #8
 8010b4c:	4610      	mov	r0, r2
 8010b4e:	4798      	blx	r3
 8010b50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010b52:	e00f      	b.n	8010b74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010b54:	6839      	ldr	r1, [r7, #0]
 8010b56:	6878      	ldr	r0, [r7, #4]
 8010b58:	f000 fa13 	bl	8010f82 <USBD_CtlError>
            err++;
 8010b5c:	7afb      	ldrb	r3, [r7, #11]
 8010b5e:	3301      	adds	r3, #1
 8010b60:	72fb      	strb	r3, [r7, #11]
          break;
 8010b62:	e007      	b.n	8010b74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8010b64:	6839      	ldr	r1, [r7, #0]
 8010b66:	6878      	ldr	r0, [r7, #4]
 8010b68:	f000 fa0b 	bl	8010f82 <USBD_CtlError>
          err++;
 8010b6c:	7afb      	ldrb	r3, [r7, #11]
 8010b6e:	3301      	adds	r3, #1
 8010b70:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8010b72:	e038      	b.n	8010be6 <USBD_GetDescriptor+0x286>
 8010b74:	e037      	b.n	8010be6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	7c1b      	ldrb	r3, [r3, #16]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d109      	bne.n	8010b92 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b86:	f107 0208 	add.w	r2, r7, #8
 8010b8a:	4610      	mov	r0, r2
 8010b8c:	4798      	blx	r3
 8010b8e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010b90:	e029      	b.n	8010be6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8010b92:	6839      	ldr	r1, [r7, #0]
 8010b94:	6878      	ldr	r0, [r7, #4]
 8010b96:	f000 f9f4 	bl	8010f82 <USBD_CtlError>
        err++;
 8010b9a:	7afb      	ldrb	r3, [r7, #11]
 8010b9c:	3301      	adds	r3, #1
 8010b9e:	72fb      	strb	r3, [r7, #11]
      break;
 8010ba0:	e021      	b.n	8010be6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	7c1b      	ldrb	r3, [r3, #16]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d10d      	bne.n	8010bc6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bb2:	f107 0208 	add.w	r2, r7, #8
 8010bb6:	4610      	mov	r0, r2
 8010bb8:	4798      	blx	r3
 8010bba:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	3301      	adds	r3, #1
 8010bc0:	2207      	movs	r2, #7
 8010bc2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010bc4:	e00f      	b.n	8010be6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8010bc6:	6839      	ldr	r1, [r7, #0]
 8010bc8:	6878      	ldr	r0, [r7, #4]
 8010bca:	f000 f9da 	bl	8010f82 <USBD_CtlError>
        err++;
 8010bce:	7afb      	ldrb	r3, [r7, #11]
 8010bd0:	3301      	adds	r3, #1
 8010bd2:	72fb      	strb	r3, [r7, #11]
      break;
 8010bd4:	e007      	b.n	8010be6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8010bd6:	6839      	ldr	r1, [r7, #0]
 8010bd8:	6878      	ldr	r0, [r7, #4]
 8010bda:	f000 f9d2 	bl	8010f82 <USBD_CtlError>
      err++;
 8010bde:	7afb      	ldrb	r3, [r7, #11]
 8010be0:	3301      	adds	r3, #1
 8010be2:	72fb      	strb	r3, [r7, #11]
      break;
 8010be4:	bf00      	nop
  }

  if (err != 0U)
 8010be6:	7afb      	ldrb	r3, [r7, #11]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d11c      	bne.n	8010c26 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8010bec:	893b      	ldrh	r3, [r7, #8]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d011      	beq.n	8010c16 <USBD_GetDescriptor+0x2b6>
 8010bf2:	683b      	ldr	r3, [r7, #0]
 8010bf4:	88db      	ldrh	r3, [r3, #6]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d00d      	beq.n	8010c16 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8010bfa:	683b      	ldr	r3, [r7, #0]
 8010bfc:	88da      	ldrh	r2, [r3, #6]
 8010bfe:	893b      	ldrh	r3, [r7, #8]
 8010c00:	4293      	cmp	r3, r2
 8010c02:	bf28      	it	cs
 8010c04:	4613      	movcs	r3, r2
 8010c06:	b29b      	uxth	r3, r3
 8010c08:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010c0a:	893b      	ldrh	r3, [r7, #8]
 8010c0c:	461a      	mov	r2, r3
 8010c0e:	68f9      	ldr	r1, [r7, #12]
 8010c10:	6878      	ldr	r0, [r7, #4]
 8010c12:	f000 fa21 	bl	8011058 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8010c16:	683b      	ldr	r3, [r7, #0]
 8010c18:	88db      	ldrh	r3, [r3, #6]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d104      	bne.n	8010c28 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8010c1e:	6878      	ldr	r0, [r7, #4]
 8010c20:	f000 fa5a 	bl	80110d8 <USBD_CtlSendStatus>
 8010c24:	e000      	b.n	8010c28 <USBD_GetDescriptor+0x2c8>
    return;
 8010c26:	bf00      	nop
    }
  }
}
 8010c28:	3710      	adds	r7, #16
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	bd80      	pop	{r7, pc}
 8010c2e:	bf00      	nop

08010c30 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b084      	sub	sp, #16
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
 8010c38:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010c3a:	683b      	ldr	r3, [r7, #0]
 8010c3c:	889b      	ldrh	r3, [r3, #4]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d130      	bne.n	8010ca4 <USBD_SetAddress+0x74>
 8010c42:	683b      	ldr	r3, [r7, #0]
 8010c44:	88db      	ldrh	r3, [r3, #6]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d12c      	bne.n	8010ca4 <USBD_SetAddress+0x74>
 8010c4a:	683b      	ldr	r3, [r7, #0]
 8010c4c:	885b      	ldrh	r3, [r3, #2]
 8010c4e:	2b7f      	cmp	r3, #127	; 0x7f
 8010c50:	d828      	bhi.n	8010ca4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010c52:	683b      	ldr	r3, [r7, #0]
 8010c54:	885b      	ldrh	r3, [r3, #2]
 8010c56:	b2db      	uxtb	r3, r3
 8010c58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c5c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010c64:	2b03      	cmp	r3, #3
 8010c66:	d104      	bne.n	8010c72 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8010c68:	6839      	ldr	r1, [r7, #0]
 8010c6a:	6878      	ldr	r0, [r7, #4]
 8010c6c:	f000 f989 	bl	8010f82 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c70:	e01c      	b.n	8010cac <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	7bfa      	ldrb	r2, [r7, #15]
 8010c76:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010c7a:	7bfb      	ldrb	r3, [r7, #15]
 8010c7c:	4619      	mov	r1, r3
 8010c7e:	6878      	ldr	r0, [r7, #4]
 8010c80:	f006 f909 	bl	8016e96 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8010c84:	6878      	ldr	r0, [r7, #4]
 8010c86:	f000 fa27 	bl	80110d8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010c8a:	7bfb      	ldrb	r3, [r7, #15]
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d004      	beq.n	8010c9a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	2202      	movs	r2, #2
 8010c94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c98:	e008      	b.n	8010cac <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	2201      	movs	r2, #1
 8010c9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010ca2:	e003      	b.n	8010cac <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010ca4:	6839      	ldr	r1, [r7, #0]
 8010ca6:	6878      	ldr	r0, [r7, #4]
 8010ca8:	f000 f96b 	bl	8010f82 <USBD_CtlError>
  }
}
 8010cac:	bf00      	nop
 8010cae:	3710      	adds	r7, #16
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	bd80      	pop	{r7, pc}

08010cb4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	b082      	sub	sp, #8
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	6078      	str	r0, [r7, #4]
 8010cbc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010cbe:	683b      	ldr	r3, [r7, #0]
 8010cc0:	885b      	ldrh	r3, [r3, #2]
 8010cc2:	b2da      	uxtb	r2, r3
 8010cc4:	4b41      	ldr	r3, [pc, #260]	; (8010dcc <USBD_SetConfig+0x118>)
 8010cc6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010cc8:	4b40      	ldr	r3, [pc, #256]	; (8010dcc <USBD_SetConfig+0x118>)
 8010cca:	781b      	ldrb	r3, [r3, #0]
 8010ccc:	2b01      	cmp	r3, #1
 8010cce:	d904      	bls.n	8010cda <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8010cd0:	6839      	ldr	r1, [r7, #0]
 8010cd2:	6878      	ldr	r0, [r7, #4]
 8010cd4:	f000 f955 	bl	8010f82 <USBD_CtlError>
 8010cd8:	e075      	b.n	8010dc6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010ce0:	2b02      	cmp	r3, #2
 8010ce2:	d002      	beq.n	8010cea <USBD_SetConfig+0x36>
 8010ce4:	2b03      	cmp	r3, #3
 8010ce6:	d023      	beq.n	8010d30 <USBD_SetConfig+0x7c>
 8010ce8:	e062      	b.n	8010db0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8010cea:	4b38      	ldr	r3, [pc, #224]	; (8010dcc <USBD_SetConfig+0x118>)
 8010cec:	781b      	ldrb	r3, [r3, #0]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d01a      	beq.n	8010d28 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8010cf2:	4b36      	ldr	r3, [pc, #216]	; (8010dcc <USBD_SetConfig+0x118>)
 8010cf4:	781b      	ldrb	r3, [r3, #0]
 8010cf6:	461a      	mov	r2, r3
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	2203      	movs	r2, #3
 8010d00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8010d04:	4b31      	ldr	r3, [pc, #196]	; (8010dcc <USBD_SetConfig+0x118>)
 8010d06:	781b      	ldrb	r3, [r3, #0]
 8010d08:	4619      	mov	r1, r3
 8010d0a:	6878      	ldr	r0, [r7, #4]
 8010d0c:	f7ff f9b5 	bl	801007a <USBD_SetClassConfig>
 8010d10:	4603      	mov	r3, r0
 8010d12:	2b02      	cmp	r3, #2
 8010d14:	d104      	bne.n	8010d20 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8010d16:	6839      	ldr	r1, [r7, #0]
 8010d18:	6878      	ldr	r0, [r7, #4]
 8010d1a:	f000 f932 	bl	8010f82 <USBD_CtlError>
            return;
 8010d1e:	e052      	b.n	8010dc6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8010d20:	6878      	ldr	r0, [r7, #4]
 8010d22:	f000 f9d9 	bl	80110d8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8010d26:	e04e      	b.n	8010dc6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8010d28:	6878      	ldr	r0, [r7, #4]
 8010d2a:	f000 f9d5 	bl	80110d8 <USBD_CtlSendStatus>
        break;
 8010d2e:	e04a      	b.n	8010dc6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8010d30:	4b26      	ldr	r3, [pc, #152]	; (8010dcc <USBD_SetConfig+0x118>)
 8010d32:	781b      	ldrb	r3, [r3, #0]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d112      	bne.n	8010d5e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	2202      	movs	r2, #2
 8010d3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8010d40:	4b22      	ldr	r3, [pc, #136]	; (8010dcc <USBD_SetConfig+0x118>)
 8010d42:	781b      	ldrb	r3, [r3, #0]
 8010d44:	461a      	mov	r2, r3
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8010d4a:	4b20      	ldr	r3, [pc, #128]	; (8010dcc <USBD_SetConfig+0x118>)
 8010d4c:	781b      	ldrb	r3, [r3, #0]
 8010d4e:	4619      	mov	r1, r3
 8010d50:	6878      	ldr	r0, [r7, #4]
 8010d52:	f7ff f9b1 	bl	80100b8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8010d56:	6878      	ldr	r0, [r7, #4]
 8010d58:	f000 f9be 	bl	80110d8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8010d5c:	e033      	b.n	8010dc6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8010d5e:	4b1b      	ldr	r3, [pc, #108]	; (8010dcc <USBD_SetConfig+0x118>)
 8010d60:	781b      	ldrb	r3, [r3, #0]
 8010d62:	461a      	mov	r2, r3
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	685b      	ldr	r3, [r3, #4]
 8010d68:	429a      	cmp	r2, r3
 8010d6a:	d01d      	beq.n	8010da8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	685b      	ldr	r3, [r3, #4]
 8010d70:	b2db      	uxtb	r3, r3
 8010d72:	4619      	mov	r1, r3
 8010d74:	6878      	ldr	r0, [r7, #4]
 8010d76:	f7ff f99f 	bl	80100b8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8010d7a:	4b14      	ldr	r3, [pc, #80]	; (8010dcc <USBD_SetConfig+0x118>)
 8010d7c:	781b      	ldrb	r3, [r3, #0]
 8010d7e:	461a      	mov	r2, r3
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8010d84:	4b11      	ldr	r3, [pc, #68]	; (8010dcc <USBD_SetConfig+0x118>)
 8010d86:	781b      	ldrb	r3, [r3, #0]
 8010d88:	4619      	mov	r1, r3
 8010d8a:	6878      	ldr	r0, [r7, #4]
 8010d8c:	f7ff f975 	bl	801007a <USBD_SetClassConfig>
 8010d90:	4603      	mov	r3, r0
 8010d92:	2b02      	cmp	r3, #2
 8010d94:	d104      	bne.n	8010da0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8010d96:	6839      	ldr	r1, [r7, #0]
 8010d98:	6878      	ldr	r0, [r7, #4]
 8010d9a:	f000 f8f2 	bl	8010f82 <USBD_CtlError>
            return;
 8010d9e:	e012      	b.n	8010dc6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8010da0:	6878      	ldr	r0, [r7, #4]
 8010da2:	f000 f999 	bl	80110d8 <USBD_CtlSendStatus>
        break;
 8010da6:	e00e      	b.n	8010dc6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8010da8:	6878      	ldr	r0, [r7, #4]
 8010daa:	f000 f995 	bl	80110d8 <USBD_CtlSendStatus>
        break;
 8010dae:	e00a      	b.n	8010dc6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8010db0:	6839      	ldr	r1, [r7, #0]
 8010db2:	6878      	ldr	r0, [r7, #4]
 8010db4:	f000 f8e5 	bl	8010f82 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8010db8:	4b04      	ldr	r3, [pc, #16]	; (8010dcc <USBD_SetConfig+0x118>)
 8010dba:	781b      	ldrb	r3, [r3, #0]
 8010dbc:	4619      	mov	r1, r3
 8010dbe:	6878      	ldr	r0, [r7, #4]
 8010dc0:	f7ff f97a 	bl	80100b8 <USBD_ClrClassConfig>
        break;
 8010dc4:	bf00      	nop
    }
  }
}
 8010dc6:	3708      	adds	r7, #8
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	bd80      	pop	{r7, pc}
 8010dcc:	24000270 	.word	0x24000270

08010dd0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b082      	sub	sp, #8
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
 8010dd8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010dda:	683b      	ldr	r3, [r7, #0]
 8010ddc:	88db      	ldrh	r3, [r3, #6]
 8010dde:	2b01      	cmp	r3, #1
 8010de0:	d004      	beq.n	8010dec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010de2:	6839      	ldr	r1, [r7, #0]
 8010de4:	6878      	ldr	r0, [r7, #4]
 8010de6:	f000 f8cc 	bl	8010f82 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010dea:	e021      	b.n	8010e30 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010df2:	2b01      	cmp	r3, #1
 8010df4:	db17      	blt.n	8010e26 <USBD_GetConfig+0x56>
 8010df6:	2b02      	cmp	r3, #2
 8010df8:	dd02      	ble.n	8010e00 <USBD_GetConfig+0x30>
 8010dfa:	2b03      	cmp	r3, #3
 8010dfc:	d00b      	beq.n	8010e16 <USBD_GetConfig+0x46>
 8010dfe:	e012      	b.n	8010e26 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	2200      	movs	r2, #0
 8010e04:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	3308      	adds	r3, #8
 8010e0a:	2201      	movs	r2, #1
 8010e0c:	4619      	mov	r1, r3
 8010e0e:	6878      	ldr	r0, [r7, #4]
 8010e10:	f000 f922 	bl	8011058 <USBD_CtlSendData>
        break;
 8010e14:	e00c      	b.n	8010e30 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	3304      	adds	r3, #4
 8010e1a:	2201      	movs	r2, #1
 8010e1c:	4619      	mov	r1, r3
 8010e1e:	6878      	ldr	r0, [r7, #4]
 8010e20:	f000 f91a 	bl	8011058 <USBD_CtlSendData>
        break;
 8010e24:	e004      	b.n	8010e30 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8010e26:	6839      	ldr	r1, [r7, #0]
 8010e28:	6878      	ldr	r0, [r7, #4]
 8010e2a:	f000 f8aa 	bl	8010f82 <USBD_CtlError>
        break;
 8010e2e:	bf00      	nop
}
 8010e30:	bf00      	nop
 8010e32:	3708      	adds	r7, #8
 8010e34:	46bd      	mov	sp, r7
 8010e36:	bd80      	pop	{r7, pc}

08010e38 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010e38:	b580      	push	{r7, lr}
 8010e3a:	b082      	sub	sp, #8
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	6078      	str	r0, [r7, #4]
 8010e40:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e48:	3b01      	subs	r3, #1
 8010e4a:	2b02      	cmp	r3, #2
 8010e4c:	d81e      	bhi.n	8010e8c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010e4e:	683b      	ldr	r3, [r7, #0]
 8010e50:	88db      	ldrh	r3, [r3, #6]
 8010e52:	2b02      	cmp	r3, #2
 8010e54:	d004      	beq.n	8010e60 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8010e56:	6839      	ldr	r1, [r7, #0]
 8010e58:	6878      	ldr	r0, [r7, #4]
 8010e5a:	f000 f892 	bl	8010f82 <USBD_CtlError>
        break;
 8010e5e:	e01a      	b.n	8010e96 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	2201      	movs	r2, #1
 8010e64:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d005      	beq.n	8010e7c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	68db      	ldr	r3, [r3, #12]
 8010e74:	f043 0202 	orr.w	r2, r3, #2
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	330c      	adds	r3, #12
 8010e80:	2202      	movs	r2, #2
 8010e82:	4619      	mov	r1, r3
 8010e84:	6878      	ldr	r0, [r7, #4]
 8010e86:	f000 f8e7 	bl	8011058 <USBD_CtlSendData>
      break;
 8010e8a:	e004      	b.n	8010e96 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8010e8c:	6839      	ldr	r1, [r7, #0]
 8010e8e:	6878      	ldr	r0, [r7, #4]
 8010e90:	f000 f877 	bl	8010f82 <USBD_CtlError>
      break;
 8010e94:	bf00      	nop
  }
}
 8010e96:	bf00      	nop
 8010e98:	3708      	adds	r7, #8
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	bd80      	pop	{r7, pc}

08010e9e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8010e9e:	b580      	push	{r7, lr}
 8010ea0:	b082      	sub	sp, #8
 8010ea2:	af00      	add	r7, sp, #0
 8010ea4:	6078      	str	r0, [r7, #4]
 8010ea6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010ea8:	683b      	ldr	r3, [r7, #0]
 8010eaa:	885b      	ldrh	r3, [r3, #2]
 8010eac:	2b01      	cmp	r3, #1
 8010eae:	d106      	bne.n	8010ebe <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	2201      	movs	r2, #1
 8010eb4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8010eb8:	6878      	ldr	r0, [r7, #4]
 8010eba:	f000 f90d 	bl	80110d8 <USBD_CtlSendStatus>
  }
}
 8010ebe:	bf00      	nop
 8010ec0:	3708      	adds	r7, #8
 8010ec2:	46bd      	mov	sp, r7
 8010ec4:	bd80      	pop	{r7, pc}

08010ec6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8010ec6:	b580      	push	{r7, lr}
 8010ec8:	b082      	sub	sp, #8
 8010eca:	af00      	add	r7, sp, #0
 8010ecc:	6078      	str	r0, [r7, #4]
 8010ece:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010ed6:	3b01      	subs	r3, #1
 8010ed8:	2b02      	cmp	r3, #2
 8010eda:	d80b      	bhi.n	8010ef4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010edc:	683b      	ldr	r3, [r7, #0]
 8010ede:	885b      	ldrh	r3, [r3, #2]
 8010ee0:	2b01      	cmp	r3, #1
 8010ee2:	d10c      	bne.n	8010efe <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	2200      	movs	r2, #0
 8010ee8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8010eec:	6878      	ldr	r0, [r7, #4]
 8010eee:	f000 f8f3 	bl	80110d8 <USBD_CtlSendStatus>
      }
      break;
 8010ef2:	e004      	b.n	8010efe <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8010ef4:	6839      	ldr	r1, [r7, #0]
 8010ef6:	6878      	ldr	r0, [r7, #4]
 8010ef8:	f000 f843 	bl	8010f82 <USBD_CtlError>
      break;
 8010efc:	e000      	b.n	8010f00 <USBD_ClrFeature+0x3a>
      break;
 8010efe:	bf00      	nop
  }
}
 8010f00:	bf00      	nop
 8010f02:	3708      	adds	r7, #8
 8010f04:	46bd      	mov	sp, r7
 8010f06:	bd80      	pop	{r7, pc}

08010f08 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010f08:	b480      	push	{r7}
 8010f0a:	b083      	sub	sp, #12
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
 8010f10:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8010f12:	683b      	ldr	r3, [r7, #0]
 8010f14:	781a      	ldrb	r2, [r3, #0]
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8010f1a:	683b      	ldr	r3, [r7, #0]
 8010f1c:	785a      	ldrb	r2, [r3, #1]
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8010f22:	683b      	ldr	r3, [r7, #0]
 8010f24:	3302      	adds	r3, #2
 8010f26:	781b      	ldrb	r3, [r3, #0]
 8010f28:	b29a      	uxth	r2, r3
 8010f2a:	683b      	ldr	r3, [r7, #0]
 8010f2c:	3303      	adds	r3, #3
 8010f2e:	781b      	ldrb	r3, [r3, #0]
 8010f30:	b29b      	uxth	r3, r3
 8010f32:	021b      	lsls	r3, r3, #8
 8010f34:	b29b      	uxth	r3, r3
 8010f36:	4413      	add	r3, r2
 8010f38:	b29a      	uxth	r2, r3
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8010f3e:	683b      	ldr	r3, [r7, #0]
 8010f40:	3304      	adds	r3, #4
 8010f42:	781b      	ldrb	r3, [r3, #0]
 8010f44:	b29a      	uxth	r2, r3
 8010f46:	683b      	ldr	r3, [r7, #0]
 8010f48:	3305      	adds	r3, #5
 8010f4a:	781b      	ldrb	r3, [r3, #0]
 8010f4c:	b29b      	uxth	r3, r3
 8010f4e:	021b      	lsls	r3, r3, #8
 8010f50:	b29b      	uxth	r3, r3
 8010f52:	4413      	add	r3, r2
 8010f54:	b29a      	uxth	r2, r3
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8010f5a:	683b      	ldr	r3, [r7, #0]
 8010f5c:	3306      	adds	r3, #6
 8010f5e:	781b      	ldrb	r3, [r3, #0]
 8010f60:	b29a      	uxth	r2, r3
 8010f62:	683b      	ldr	r3, [r7, #0]
 8010f64:	3307      	adds	r3, #7
 8010f66:	781b      	ldrb	r3, [r3, #0]
 8010f68:	b29b      	uxth	r3, r3
 8010f6a:	021b      	lsls	r3, r3, #8
 8010f6c:	b29b      	uxth	r3, r3
 8010f6e:	4413      	add	r3, r2
 8010f70:	b29a      	uxth	r2, r3
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	80da      	strh	r2, [r3, #6]

}
 8010f76:	bf00      	nop
 8010f78:	370c      	adds	r7, #12
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f80:	4770      	bx	lr

08010f82 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8010f82:	b580      	push	{r7, lr}
 8010f84:	b082      	sub	sp, #8
 8010f86:	af00      	add	r7, sp, #0
 8010f88:	6078      	str	r0, [r7, #4]
 8010f8a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8010f8c:	2180      	movs	r1, #128	; 0x80
 8010f8e:	6878      	ldr	r0, [r7, #4]
 8010f90:	f005 ff17 	bl	8016dc2 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8010f94:	2100      	movs	r1, #0
 8010f96:	6878      	ldr	r0, [r7, #4]
 8010f98:	f005 ff13 	bl	8016dc2 <USBD_LL_StallEP>
}
 8010f9c:	bf00      	nop
 8010f9e:	3708      	adds	r7, #8
 8010fa0:	46bd      	mov	sp, r7
 8010fa2:	bd80      	pop	{r7, pc}

08010fa4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b086      	sub	sp, #24
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	60f8      	str	r0, [r7, #12]
 8010fac:	60b9      	str	r1, [r7, #8]
 8010fae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d032      	beq.n	8011020 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8010fba:	68f8      	ldr	r0, [r7, #12]
 8010fbc:	f000 f834 	bl	8011028 <USBD_GetLen>
 8010fc0:	4603      	mov	r3, r0
 8010fc2:	3301      	adds	r3, #1
 8010fc4:	b29b      	uxth	r3, r3
 8010fc6:	005b      	lsls	r3, r3, #1
 8010fc8:	b29a      	uxth	r2, r3
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8010fce:	7dfb      	ldrb	r3, [r7, #23]
 8010fd0:	1c5a      	adds	r2, r3, #1
 8010fd2:	75fa      	strb	r2, [r7, #23]
 8010fd4:	461a      	mov	r2, r3
 8010fd6:	68bb      	ldr	r3, [r7, #8]
 8010fd8:	4413      	add	r3, r2
 8010fda:	687a      	ldr	r2, [r7, #4]
 8010fdc:	7812      	ldrb	r2, [r2, #0]
 8010fde:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8010fe0:	7dfb      	ldrb	r3, [r7, #23]
 8010fe2:	1c5a      	adds	r2, r3, #1
 8010fe4:	75fa      	strb	r2, [r7, #23]
 8010fe6:	461a      	mov	r2, r3
 8010fe8:	68bb      	ldr	r3, [r7, #8]
 8010fea:	4413      	add	r3, r2
 8010fec:	2203      	movs	r2, #3
 8010fee:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8010ff0:	e012      	b.n	8011018 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	1c5a      	adds	r2, r3, #1
 8010ff6:	60fa      	str	r2, [r7, #12]
 8010ff8:	7dfa      	ldrb	r2, [r7, #23]
 8010ffa:	1c51      	adds	r1, r2, #1
 8010ffc:	75f9      	strb	r1, [r7, #23]
 8010ffe:	4611      	mov	r1, r2
 8011000:	68ba      	ldr	r2, [r7, #8]
 8011002:	440a      	add	r2, r1
 8011004:	781b      	ldrb	r3, [r3, #0]
 8011006:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8011008:	7dfb      	ldrb	r3, [r7, #23]
 801100a:	1c5a      	adds	r2, r3, #1
 801100c:	75fa      	strb	r2, [r7, #23]
 801100e:	461a      	mov	r2, r3
 8011010:	68bb      	ldr	r3, [r7, #8]
 8011012:	4413      	add	r3, r2
 8011014:	2200      	movs	r2, #0
 8011016:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	781b      	ldrb	r3, [r3, #0]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d1e8      	bne.n	8010ff2 <USBD_GetString+0x4e>
    }
  }
}
 8011020:	bf00      	nop
 8011022:	3718      	adds	r7, #24
 8011024:	46bd      	mov	sp, r7
 8011026:	bd80      	pop	{r7, pc}

08011028 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011028:	b480      	push	{r7}
 801102a:	b085      	sub	sp, #20
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011030:	2300      	movs	r3, #0
 8011032:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8011034:	e005      	b.n	8011042 <USBD_GetLen+0x1a>
  {
    len++;
 8011036:	7bfb      	ldrb	r3, [r7, #15]
 8011038:	3301      	adds	r3, #1
 801103a:	73fb      	strb	r3, [r7, #15]
    buf++;
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	3301      	adds	r3, #1
 8011040:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	781b      	ldrb	r3, [r3, #0]
 8011046:	2b00      	cmp	r3, #0
 8011048:	d1f5      	bne.n	8011036 <USBD_GetLen+0xe>
  }

  return len;
 801104a:	7bfb      	ldrb	r3, [r7, #15]
}
 801104c:	4618      	mov	r0, r3
 801104e:	3714      	adds	r7, #20
 8011050:	46bd      	mov	sp, r7
 8011052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011056:	4770      	bx	lr

08011058 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b084      	sub	sp, #16
 801105c:	af00      	add	r7, sp, #0
 801105e:	60f8      	str	r0, [r7, #12]
 8011060:	60b9      	str	r1, [r7, #8]
 8011062:	4613      	mov	r3, r2
 8011064:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	2202      	movs	r2, #2
 801106a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801106e:	88fa      	ldrh	r2, [r7, #6]
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8011074:	88fa      	ldrh	r2, [r7, #6]
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801107a:	88fb      	ldrh	r3, [r7, #6]
 801107c:	68ba      	ldr	r2, [r7, #8]
 801107e:	2100      	movs	r1, #0
 8011080:	68f8      	ldr	r0, [r7, #12]
 8011082:	f005 ff27 	bl	8016ed4 <USBD_LL_Transmit>

  return USBD_OK;
 8011086:	2300      	movs	r3, #0
}
 8011088:	4618      	mov	r0, r3
 801108a:	3710      	adds	r7, #16
 801108c:	46bd      	mov	sp, r7
 801108e:	bd80      	pop	{r7, pc}

08011090 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8011090:	b580      	push	{r7, lr}
 8011092:	b084      	sub	sp, #16
 8011094:	af00      	add	r7, sp, #0
 8011096:	60f8      	str	r0, [r7, #12]
 8011098:	60b9      	str	r1, [r7, #8]
 801109a:	4613      	mov	r3, r2
 801109c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801109e:	88fb      	ldrh	r3, [r7, #6]
 80110a0:	68ba      	ldr	r2, [r7, #8]
 80110a2:	2100      	movs	r1, #0
 80110a4:	68f8      	ldr	r0, [r7, #12]
 80110a6:	f005 ff15 	bl	8016ed4 <USBD_LL_Transmit>

  return USBD_OK;
 80110aa:	2300      	movs	r3, #0
}
 80110ac:	4618      	mov	r0, r3
 80110ae:	3710      	adds	r7, #16
 80110b0:	46bd      	mov	sp, r7
 80110b2:	bd80      	pop	{r7, pc}

080110b4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80110b4:	b580      	push	{r7, lr}
 80110b6:	b084      	sub	sp, #16
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	60f8      	str	r0, [r7, #12]
 80110bc:	60b9      	str	r1, [r7, #8]
 80110be:	4613      	mov	r3, r2
 80110c0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80110c2:	88fb      	ldrh	r3, [r7, #6]
 80110c4:	68ba      	ldr	r2, [r7, #8]
 80110c6:	2100      	movs	r1, #0
 80110c8:	68f8      	ldr	r0, [r7, #12]
 80110ca:	f005 ff26 	bl	8016f1a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80110ce:	2300      	movs	r3, #0
}
 80110d0:	4618      	mov	r0, r3
 80110d2:	3710      	adds	r7, #16
 80110d4:	46bd      	mov	sp, r7
 80110d6:	bd80      	pop	{r7, pc}

080110d8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80110d8:	b580      	push	{r7, lr}
 80110da:	b082      	sub	sp, #8
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	2204      	movs	r2, #4
 80110e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80110e8:	2300      	movs	r3, #0
 80110ea:	2200      	movs	r2, #0
 80110ec:	2100      	movs	r1, #0
 80110ee:	6878      	ldr	r0, [r7, #4]
 80110f0:	f005 fef0 	bl	8016ed4 <USBD_LL_Transmit>

  return USBD_OK;
 80110f4:	2300      	movs	r3, #0
}
 80110f6:	4618      	mov	r0, r3
 80110f8:	3708      	adds	r7, #8
 80110fa:	46bd      	mov	sp, r7
 80110fc:	bd80      	pop	{r7, pc}

080110fe <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80110fe:	b580      	push	{r7, lr}
 8011100:	b082      	sub	sp, #8
 8011102:	af00      	add	r7, sp, #0
 8011104:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	2205      	movs	r2, #5
 801110a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801110e:	2300      	movs	r3, #0
 8011110:	2200      	movs	r2, #0
 8011112:	2100      	movs	r1, #0
 8011114:	6878      	ldr	r0, [r7, #4]
 8011116:	f005 ff00 	bl	8016f1a <USBD_LL_PrepareReceive>

  return USBD_OK;
 801111a:	2300      	movs	r3, #0
}
 801111c:	4618      	mov	r0, r3
 801111e:	3708      	adds	r7, #8
 8011120:	46bd      	mov	sp, r7
 8011122:	bd80      	pop	{r7, pc}

08011124 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011124:	b580      	push	{r7, lr}
 8011126:	b084      	sub	sp, #16
 8011128:	af00      	add	r7, sp, #0
 801112a:	4603      	mov	r3, r0
 801112c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801112e:	79fb      	ldrb	r3, [r7, #7]
 8011130:	4a08      	ldr	r2, [pc, #32]	; (8011154 <disk_status+0x30>)
 8011132:	009b      	lsls	r3, r3, #2
 8011134:	4413      	add	r3, r2
 8011136:	685b      	ldr	r3, [r3, #4]
 8011138:	685b      	ldr	r3, [r3, #4]
 801113a:	79fa      	ldrb	r2, [r7, #7]
 801113c:	4905      	ldr	r1, [pc, #20]	; (8011154 <disk_status+0x30>)
 801113e:	440a      	add	r2, r1
 8011140:	7b12      	ldrb	r2, [r2, #12]
 8011142:	4610      	mov	r0, r2
 8011144:	4798      	blx	r3
 8011146:	4603      	mov	r3, r0
 8011148:	73fb      	strb	r3, [r7, #15]
  return stat;
 801114a:	7bfb      	ldrb	r3, [r7, #15]
}
 801114c:	4618      	mov	r0, r3
 801114e:	3710      	adds	r7, #16
 8011150:	46bd      	mov	sp, r7
 8011152:	bd80      	pop	{r7, pc}
 8011154:	240002a0 	.word	0x240002a0

08011158 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011158:	b580      	push	{r7, lr}
 801115a:	b084      	sub	sp, #16
 801115c:	af00      	add	r7, sp, #0
 801115e:	4603      	mov	r3, r0
 8011160:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8011162:	2300      	movs	r3, #0
 8011164:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8011166:	79fb      	ldrb	r3, [r7, #7]
 8011168:	4a0d      	ldr	r2, [pc, #52]	; (80111a0 <disk_initialize+0x48>)
 801116a:	5cd3      	ldrb	r3, [r2, r3]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d111      	bne.n	8011194 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011170:	79fb      	ldrb	r3, [r7, #7]
 8011172:	4a0b      	ldr	r2, [pc, #44]	; (80111a0 <disk_initialize+0x48>)
 8011174:	2101      	movs	r1, #1
 8011176:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011178:	79fb      	ldrb	r3, [r7, #7]
 801117a:	4a09      	ldr	r2, [pc, #36]	; (80111a0 <disk_initialize+0x48>)
 801117c:	009b      	lsls	r3, r3, #2
 801117e:	4413      	add	r3, r2
 8011180:	685b      	ldr	r3, [r3, #4]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	79fa      	ldrb	r2, [r7, #7]
 8011186:	4906      	ldr	r1, [pc, #24]	; (80111a0 <disk_initialize+0x48>)
 8011188:	440a      	add	r2, r1
 801118a:	7b12      	ldrb	r2, [r2, #12]
 801118c:	4610      	mov	r0, r2
 801118e:	4798      	blx	r3
 8011190:	4603      	mov	r3, r0
 8011192:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8011194:	7bfb      	ldrb	r3, [r7, #15]
}
 8011196:	4618      	mov	r0, r3
 8011198:	3710      	adds	r7, #16
 801119a:	46bd      	mov	sp, r7
 801119c:	bd80      	pop	{r7, pc}
 801119e:	bf00      	nop
 80111a0:	240002a0 	.word	0x240002a0

080111a4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80111a4:	b590      	push	{r4, r7, lr}
 80111a6:	b087      	sub	sp, #28
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	60b9      	str	r1, [r7, #8]
 80111ac:	607a      	str	r2, [r7, #4]
 80111ae:	603b      	str	r3, [r7, #0]
 80111b0:	4603      	mov	r3, r0
 80111b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80111b4:	7bfb      	ldrb	r3, [r7, #15]
 80111b6:	4a0a      	ldr	r2, [pc, #40]	; (80111e0 <disk_read+0x3c>)
 80111b8:	009b      	lsls	r3, r3, #2
 80111ba:	4413      	add	r3, r2
 80111bc:	685b      	ldr	r3, [r3, #4]
 80111be:	689c      	ldr	r4, [r3, #8]
 80111c0:	7bfb      	ldrb	r3, [r7, #15]
 80111c2:	4a07      	ldr	r2, [pc, #28]	; (80111e0 <disk_read+0x3c>)
 80111c4:	4413      	add	r3, r2
 80111c6:	7b18      	ldrb	r0, [r3, #12]
 80111c8:	683b      	ldr	r3, [r7, #0]
 80111ca:	687a      	ldr	r2, [r7, #4]
 80111cc:	68b9      	ldr	r1, [r7, #8]
 80111ce:	47a0      	blx	r4
 80111d0:	4603      	mov	r3, r0
 80111d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80111d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80111d6:	4618      	mov	r0, r3
 80111d8:	371c      	adds	r7, #28
 80111da:	46bd      	mov	sp, r7
 80111dc:	bd90      	pop	{r4, r7, pc}
 80111de:	bf00      	nop
 80111e0:	240002a0 	.word	0x240002a0

080111e4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80111e4:	b590      	push	{r4, r7, lr}
 80111e6:	b087      	sub	sp, #28
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	60b9      	str	r1, [r7, #8]
 80111ec:	607a      	str	r2, [r7, #4]
 80111ee:	603b      	str	r3, [r7, #0]
 80111f0:	4603      	mov	r3, r0
 80111f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80111f4:	7bfb      	ldrb	r3, [r7, #15]
 80111f6:	4a0a      	ldr	r2, [pc, #40]	; (8011220 <disk_write+0x3c>)
 80111f8:	009b      	lsls	r3, r3, #2
 80111fa:	4413      	add	r3, r2
 80111fc:	685b      	ldr	r3, [r3, #4]
 80111fe:	68dc      	ldr	r4, [r3, #12]
 8011200:	7bfb      	ldrb	r3, [r7, #15]
 8011202:	4a07      	ldr	r2, [pc, #28]	; (8011220 <disk_write+0x3c>)
 8011204:	4413      	add	r3, r2
 8011206:	7b18      	ldrb	r0, [r3, #12]
 8011208:	683b      	ldr	r3, [r7, #0]
 801120a:	687a      	ldr	r2, [r7, #4]
 801120c:	68b9      	ldr	r1, [r7, #8]
 801120e:	47a0      	blx	r4
 8011210:	4603      	mov	r3, r0
 8011212:	75fb      	strb	r3, [r7, #23]
  return res;
 8011214:	7dfb      	ldrb	r3, [r7, #23]
}
 8011216:	4618      	mov	r0, r3
 8011218:	371c      	adds	r7, #28
 801121a:	46bd      	mov	sp, r7
 801121c:	bd90      	pop	{r4, r7, pc}
 801121e:	bf00      	nop
 8011220:	240002a0 	.word	0x240002a0

08011224 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b084      	sub	sp, #16
 8011228:	af00      	add	r7, sp, #0
 801122a:	4603      	mov	r3, r0
 801122c:	603a      	str	r2, [r7, #0]
 801122e:	71fb      	strb	r3, [r7, #7]
 8011230:	460b      	mov	r3, r1
 8011232:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011234:	79fb      	ldrb	r3, [r7, #7]
 8011236:	4a09      	ldr	r2, [pc, #36]	; (801125c <disk_ioctl+0x38>)
 8011238:	009b      	lsls	r3, r3, #2
 801123a:	4413      	add	r3, r2
 801123c:	685b      	ldr	r3, [r3, #4]
 801123e:	691b      	ldr	r3, [r3, #16]
 8011240:	79fa      	ldrb	r2, [r7, #7]
 8011242:	4906      	ldr	r1, [pc, #24]	; (801125c <disk_ioctl+0x38>)
 8011244:	440a      	add	r2, r1
 8011246:	7b10      	ldrb	r0, [r2, #12]
 8011248:	79b9      	ldrb	r1, [r7, #6]
 801124a:	683a      	ldr	r2, [r7, #0]
 801124c:	4798      	blx	r3
 801124e:	4603      	mov	r3, r0
 8011250:	73fb      	strb	r3, [r7, #15]
  return res;
 8011252:	7bfb      	ldrb	r3, [r7, #15]
}
 8011254:	4618      	mov	r0, r3
 8011256:	3710      	adds	r7, #16
 8011258:	46bd      	mov	sp, r7
 801125a:	bd80      	pop	{r7, pc}
 801125c:	240002a0 	.word	0x240002a0

08011260 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011260:	b480      	push	{r7}
 8011262:	b085      	sub	sp, #20
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	3301      	adds	r3, #1
 801126c:	781b      	ldrb	r3, [r3, #0]
 801126e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011270:	89fb      	ldrh	r3, [r7, #14]
 8011272:	021b      	lsls	r3, r3, #8
 8011274:	b21a      	sxth	r2, r3
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	781b      	ldrb	r3, [r3, #0]
 801127a:	b21b      	sxth	r3, r3
 801127c:	4313      	orrs	r3, r2
 801127e:	b21b      	sxth	r3, r3
 8011280:	81fb      	strh	r3, [r7, #14]
	return rv;
 8011282:	89fb      	ldrh	r3, [r7, #14]
}
 8011284:	4618      	mov	r0, r3
 8011286:	3714      	adds	r7, #20
 8011288:	46bd      	mov	sp, r7
 801128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128e:	4770      	bx	lr

08011290 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011290:	b480      	push	{r7}
 8011292:	b085      	sub	sp, #20
 8011294:	af00      	add	r7, sp, #0
 8011296:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	3303      	adds	r3, #3
 801129c:	781b      	ldrb	r3, [r3, #0]
 801129e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	021b      	lsls	r3, r3, #8
 80112a4:	687a      	ldr	r2, [r7, #4]
 80112a6:	3202      	adds	r2, #2
 80112a8:	7812      	ldrb	r2, [r2, #0]
 80112aa:	4313      	orrs	r3, r2
 80112ac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	021b      	lsls	r3, r3, #8
 80112b2:	687a      	ldr	r2, [r7, #4]
 80112b4:	3201      	adds	r2, #1
 80112b6:	7812      	ldrb	r2, [r2, #0]
 80112b8:	4313      	orrs	r3, r2
 80112ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	021b      	lsls	r3, r3, #8
 80112c0:	687a      	ldr	r2, [r7, #4]
 80112c2:	7812      	ldrb	r2, [r2, #0]
 80112c4:	4313      	orrs	r3, r2
 80112c6:	60fb      	str	r3, [r7, #12]
	return rv;
 80112c8:	68fb      	ldr	r3, [r7, #12]
}
 80112ca:	4618      	mov	r0, r3
 80112cc:	3714      	adds	r7, #20
 80112ce:	46bd      	mov	sp, r7
 80112d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d4:	4770      	bx	lr

080112d6 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 80112d6:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 80112da:	b085      	sub	sp, #20
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
	QWORD rv;

	rv = ptr[7];
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	3307      	adds	r3, #7
 80112e4:	781b      	ldrb	r3, [r3, #0]
 80112e6:	b2db      	uxtb	r3, r3
 80112e8:	f04f 0400 	mov.w	r4, #0
 80112ec:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[6];
 80112f0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80112f4:	f04f 0b00 	mov.w	fp, #0
 80112f8:	f04f 0c00 	mov.w	ip, #0
 80112fc:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8011300:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8011304:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8011308:	687a      	ldr	r2, [r7, #4]
 801130a:	3206      	adds	r2, #6
 801130c:	7812      	ldrb	r2, [r2, #0]
 801130e:	b2d1      	uxtb	r1, r2
 8011310:	f04f 0200 	mov.w	r2, #0
 8011314:	ea4b 0301 	orr.w	r3, fp, r1
 8011318:	ea4c 0402 	orr.w	r4, ip, r2
 801131c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[5];
 8011320:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8011324:	f04f 0b00 	mov.w	fp, #0
 8011328:	f04f 0c00 	mov.w	ip, #0
 801132c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8011330:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8011334:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8011338:	687a      	ldr	r2, [r7, #4]
 801133a:	3205      	adds	r2, #5
 801133c:	7812      	ldrb	r2, [r2, #0]
 801133e:	b2d1      	uxtb	r1, r2
 8011340:	f04f 0200 	mov.w	r2, #0
 8011344:	ea4b 0301 	orr.w	r3, fp, r1
 8011348:	ea4c 0402 	orr.w	r4, ip, r2
 801134c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[4];
 8011350:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8011354:	f04f 0b00 	mov.w	fp, #0
 8011358:	f04f 0c00 	mov.w	ip, #0
 801135c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8011360:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8011364:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8011368:	687a      	ldr	r2, [r7, #4]
 801136a:	3204      	adds	r2, #4
 801136c:	7812      	ldrb	r2, [r2, #0]
 801136e:	b2d1      	uxtb	r1, r2
 8011370:	f04f 0200 	mov.w	r2, #0
 8011374:	ea4b 0301 	orr.w	r3, fp, r1
 8011378:	ea4c 0402 	orr.w	r4, ip, r2
 801137c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[3];
 8011380:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8011384:	f04f 0b00 	mov.w	fp, #0
 8011388:	f04f 0c00 	mov.w	ip, #0
 801138c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8011390:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8011394:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8011398:	687a      	ldr	r2, [r7, #4]
 801139a:	3203      	adds	r2, #3
 801139c:	7812      	ldrb	r2, [r2, #0]
 801139e:	b2d1      	uxtb	r1, r2
 80113a0:	f04f 0200 	mov.w	r2, #0
 80113a4:	ea4b 0301 	orr.w	r3, fp, r1
 80113a8:	ea4c 0402 	orr.w	r4, ip, r2
 80113ac:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[2];
 80113b0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80113b4:	f04f 0b00 	mov.w	fp, #0
 80113b8:	f04f 0c00 	mov.w	ip, #0
 80113bc:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 80113c0:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 80113c4:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80113c8:	687a      	ldr	r2, [r7, #4]
 80113ca:	3202      	adds	r2, #2
 80113cc:	7812      	ldrb	r2, [r2, #0]
 80113ce:	b2d1      	uxtb	r1, r2
 80113d0:	f04f 0200 	mov.w	r2, #0
 80113d4:	ea4b 0301 	orr.w	r3, fp, r1
 80113d8:	ea4c 0402 	orr.w	r4, ip, r2
 80113dc:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[1];
 80113e0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80113e4:	f04f 0b00 	mov.w	fp, #0
 80113e8:	f04f 0c00 	mov.w	ip, #0
 80113ec:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 80113f0:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 80113f4:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80113f8:	687a      	ldr	r2, [r7, #4]
 80113fa:	3201      	adds	r2, #1
 80113fc:	7812      	ldrb	r2, [r2, #0]
 80113fe:	b2d1      	uxtb	r1, r2
 8011400:	f04f 0200 	mov.w	r2, #0
 8011404:	ea4b 0301 	orr.w	r3, fp, r1
 8011408:	ea4c 0402 	orr.w	r4, ip, r2
 801140c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[0];
 8011410:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8011414:	f04f 0b00 	mov.w	fp, #0
 8011418:	f04f 0c00 	mov.w	ip, #0
 801141c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8011420:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8011424:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8011428:	687a      	ldr	r2, [r7, #4]
 801142a:	7812      	ldrb	r2, [r2, #0]
 801142c:	b2d1      	uxtb	r1, r2
 801142e:	f04f 0200 	mov.w	r2, #0
 8011432:	ea4b 0301 	orr.w	r3, fp, r1
 8011436:	ea4c 0402 	orr.w	r4, ip, r2
 801143a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return rv;
 801143e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 8011442:	4618      	mov	r0, r3
 8011444:	4621      	mov	r1, r4
 8011446:	3714      	adds	r7, #20
 8011448:	46bd      	mov	sp, r7
 801144a:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 801144e:	4770      	bx	lr

08011450 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8011450:	b480      	push	{r7}
 8011452:	b083      	sub	sp, #12
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
 8011458:	460b      	mov	r3, r1
 801145a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	1c5a      	adds	r2, r3, #1
 8011460:	607a      	str	r2, [r7, #4]
 8011462:	887a      	ldrh	r2, [r7, #2]
 8011464:	b2d2      	uxtb	r2, r2
 8011466:	701a      	strb	r2, [r3, #0]
 8011468:	887b      	ldrh	r3, [r7, #2]
 801146a:	0a1b      	lsrs	r3, r3, #8
 801146c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	1c5a      	adds	r2, r3, #1
 8011472:	607a      	str	r2, [r7, #4]
 8011474:	887a      	ldrh	r2, [r7, #2]
 8011476:	b2d2      	uxtb	r2, r2
 8011478:	701a      	strb	r2, [r3, #0]
}
 801147a:	bf00      	nop
 801147c:	370c      	adds	r7, #12
 801147e:	46bd      	mov	sp, r7
 8011480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011484:	4770      	bx	lr

08011486 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011486:	b480      	push	{r7}
 8011488:	b083      	sub	sp, #12
 801148a:	af00      	add	r7, sp, #0
 801148c:	6078      	str	r0, [r7, #4]
 801148e:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	1c5a      	adds	r2, r3, #1
 8011494:	607a      	str	r2, [r7, #4]
 8011496:	683a      	ldr	r2, [r7, #0]
 8011498:	b2d2      	uxtb	r2, r2
 801149a:	701a      	strb	r2, [r3, #0]
 801149c:	683b      	ldr	r3, [r7, #0]
 801149e:	0a1b      	lsrs	r3, r3, #8
 80114a0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	1c5a      	adds	r2, r3, #1
 80114a6:	607a      	str	r2, [r7, #4]
 80114a8:	683a      	ldr	r2, [r7, #0]
 80114aa:	b2d2      	uxtb	r2, r2
 80114ac:	701a      	strb	r2, [r3, #0]
 80114ae:	683b      	ldr	r3, [r7, #0]
 80114b0:	0a1b      	lsrs	r3, r3, #8
 80114b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	1c5a      	adds	r2, r3, #1
 80114b8:	607a      	str	r2, [r7, #4]
 80114ba:	683a      	ldr	r2, [r7, #0]
 80114bc:	b2d2      	uxtb	r2, r2
 80114be:	701a      	strb	r2, [r3, #0]
 80114c0:	683b      	ldr	r3, [r7, #0]
 80114c2:	0a1b      	lsrs	r3, r3, #8
 80114c4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	1c5a      	adds	r2, r3, #1
 80114ca:	607a      	str	r2, [r7, #4]
 80114cc:	683a      	ldr	r2, [r7, #0]
 80114ce:	b2d2      	uxtb	r2, r2
 80114d0:	701a      	strb	r2, [r3, #0]
}
 80114d2:	bf00      	nop
 80114d4:	370c      	adds	r7, #12
 80114d6:	46bd      	mov	sp, r7
 80114d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114dc:	4770      	bx	lr

080114de <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 80114de:	b490      	push	{r4, r7}
 80114e0:	b084      	sub	sp, #16
 80114e2:	af00      	add	r7, sp, #0
 80114e4:	60f8      	str	r0, [r7, #12]
 80114e6:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	1c5a      	adds	r2, r3, #1
 80114ee:	60fa      	str	r2, [r7, #12]
 80114f0:	783a      	ldrb	r2, [r7, #0]
 80114f2:	701a      	strb	r2, [r3, #0]
 80114f4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80114f8:	f04f 0300 	mov.w	r3, #0
 80114fc:	f04f 0400 	mov.w	r4, #0
 8011500:	0a0b      	lsrs	r3, r1, #8
 8011502:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8011506:	0a14      	lsrs	r4, r2, #8
 8011508:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	1c5a      	adds	r2, r3, #1
 8011510:	60fa      	str	r2, [r7, #12]
 8011512:	783a      	ldrb	r2, [r7, #0]
 8011514:	701a      	strb	r2, [r3, #0]
 8011516:	e9d7 1200 	ldrd	r1, r2, [r7]
 801151a:	f04f 0300 	mov.w	r3, #0
 801151e:	f04f 0400 	mov.w	r4, #0
 8011522:	0a0b      	lsrs	r3, r1, #8
 8011524:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8011528:	0a14      	lsrs	r4, r2, #8
 801152a:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	1c5a      	adds	r2, r3, #1
 8011532:	60fa      	str	r2, [r7, #12]
 8011534:	783a      	ldrb	r2, [r7, #0]
 8011536:	701a      	strb	r2, [r3, #0]
 8011538:	e9d7 1200 	ldrd	r1, r2, [r7]
 801153c:	f04f 0300 	mov.w	r3, #0
 8011540:	f04f 0400 	mov.w	r4, #0
 8011544:	0a0b      	lsrs	r3, r1, #8
 8011546:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801154a:	0a14      	lsrs	r4, r2, #8
 801154c:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	1c5a      	adds	r2, r3, #1
 8011554:	60fa      	str	r2, [r7, #12]
 8011556:	783a      	ldrb	r2, [r7, #0]
 8011558:	701a      	strb	r2, [r3, #0]
 801155a:	e9d7 1200 	ldrd	r1, r2, [r7]
 801155e:	f04f 0300 	mov.w	r3, #0
 8011562:	f04f 0400 	mov.w	r4, #0
 8011566:	0a0b      	lsrs	r3, r1, #8
 8011568:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801156c:	0a14      	lsrs	r4, r2, #8
 801156e:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	1c5a      	adds	r2, r3, #1
 8011576:	60fa      	str	r2, [r7, #12]
 8011578:	783a      	ldrb	r2, [r7, #0]
 801157a:	701a      	strb	r2, [r3, #0]
 801157c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8011580:	f04f 0300 	mov.w	r3, #0
 8011584:	f04f 0400 	mov.w	r4, #0
 8011588:	0a0b      	lsrs	r3, r1, #8
 801158a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801158e:	0a14      	lsrs	r4, r2, #8
 8011590:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	1c5a      	adds	r2, r3, #1
 8011598:	60fa      	str	r2, [r7, #12]
 801159a:	783a      	ldrb	r2, [r7, #0]
 801159c:	701a      	strb	r2, [r3, #0]
 801159e:	e9d7 1200 	ldrd	r1, r2, [r7]
 80115a2:	f04f 0300 	mov.w	r3, #0
 80115a6:	f04f 0400 	mov.w	r4, #0
 80115aa:	0a0b      	lsrs	r3, r1, #8
 80115ac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80115b0:	0a14      	lsrs	r4, r2, #8
 80115b2:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	1c5a      	adds	r2, r3, #1
 80115ba:	60fa      	str	r2, [r7, #12]
 80115bc:	783a      	ldrb	r2, [r7, #0]
 80115be:	701a      	strb	r2, [r3, #0]
 80115c0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80115c4:	f04f 0300 	mov.w	r3, #0
 80115c8:	f04f 0400 	mov.w	r4, #0
 80115cc:	0a0b      	lsrs	r3, r1, #8
 80115ce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80115d2:	0a14      	lsrs	r4, r2, #8
 80115d4:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val;
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	1c5a      	adds	r2, r3, #1
 80115dc:	60fa      	str	r2, [r7, #12]
 80115de:	783a      	ldrb	r2, [r7, #0]
 80115e0:	701a      	strb	r2, [r3, #0]
}
 80115e2:	bf00      	nop
 80115e4:	3710      	adds	r7, #16
 80115e6:	46bd      	mov	sp, r7
 80115e8:	bc90      	pop	{r4, r7}
 80115ea:	4770      	bx	lr

080115ec <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80115ec:	b480      	push	{r7}
 80115ee:	b087      	sub	sp, #28
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	60f8      	str	r0, [r7, #12]
 80115f4:	60b9      	str	r1, [r7, #8]
 80115f6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80115fc:	68bb      	ldr	r3, [r7, #8]
 80115fe:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	2b00      	cmp	r3, #0
 8011604:	d00d      	beq.n	8011622 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011606:	693a      	ldr	r2, [r7, #16]
 8011608:	1c53      	adds	r3, r2, #1
 801160a:	613b      	str	r3, [r7, #16]
 801160c:	697b      	ldr	r3, [r7, #20]
 801160e:	1c59      	adds	r1, r3, #1
 8011610:	6179      	str	r1, [r7, #20]
 8011612:	7812      	ldrb	r2, [r2, #0]
 8011614:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	3b01      	subs	r3, #1
 801161a:	607b      	str	r3, [r7, #4]
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d1f1      	bne.n	8011606 <mem_cpy+0x1a>
	}
}
 8011622:	bf00      	nop
 8011624:	371c      	adds	r7, #28
 8011626:	46bd      	mov	sp, r7
 8011628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162c:	4770      	bx	lr

0801162e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801162e:	b480      	push	{r7}
 8011630:	b087      	sub	sp, #28
 8011632:	af00      	add	r7, sp, #0
 8011634:	60f8      	str	r0, [r7, #12]
 8011636:	60b9      	str	r1, [r7, #8]
 8011638:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801163e:	697b      	ldr	r3, [r7, #20]
 8011640:	1c5a      	adds	r2, r3, #1
 8011642:	617a      	str	r2, [r7, #20]
 8011644:	68ba      	ldr	r2, [r7, #8]
 8011646:	b2d2      	uxtb	r2, r2
 8011648:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	3b01      	subs	r3, #1
 801164e:	607b      	str	r3, [r7, #4]
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d1f3      	bne.n	801163e <mem_set+0x10>
}
 8011656:	bf00      	nop
 8011658:	371c      	adds	r7, #28
 801165a:	46bd      	mov	sp, r7
 801165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011660:	4770      	bx	lr

08011662 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011662:	b480      	push	{r7}
 8011664:	b089      	sub	sp, #36	; 0x24
 8011666:	af00      	add	r7, sp, #0
 8011668:	60f8      	str	r0, [r7, #12]
 801166a:	60b9      	str	r1, [r7, #8]
 801166c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	61fb      	str	r3, [r7, #28]
 8011672:	68bb      	ldr	r3, [r7, #8]
 8011674:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8011676:	2300      	movs	r3, #0
 8011678:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801167a:	69fb      	ldr	r3, [r7, #28]
 801167c:	1c5a      	adds	r2, r3, #1
 801167e:	61fa      	str	r2, [r7, #28]
 8011680:	781b      	ldrb	r3, [r3, #0]
 8011682:	4619      	mov	r1, r3
 8011684:	69bb      	ldr	r3, [r7, #24]
 8011686:	1c5a      	adds	r2, r3, #1
 8011688:	61ba      	str	r2, [r7, #24]
 801168a:	781b      	ldrb	r3, [r3, #0]
 801168c:	1acb      	subs	r3, r1, r3
 801168e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	3b01      	subs	r3, #1
 8011694:	607b      	str	r3, [r7, #4]
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	2b00      	cmp	r3, #0
 801169a:	d002      	beq.n	80116a2 <mem_cmp+0x40>
 801169c:	697b      	ldr	r3, [r7, #20]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d0eb      	beq.n	801167a <mem_cmp+0x18>

	return r;
 80116a2:	697b      	ldr	r3, [r7, #20]
}
 80116a4:	4618      	mov	r0, r3
 80116a6:	3724      	adds	r7, #36	; 0x24
 80116a8:	46bd      	mov	sp, r7
 80116aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ae:	4770      	bx	lr

080116b0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80116b0:	b480      	push	{r7}
 80116b2:	b083      	sub	sp, #12
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	6078      	str	r0, [r7, #4]
 80116b8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80116ba:	e002      	b.n	80116c2 <chk_chr+0x12>
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	3301      	adds	r3, #1
 80116c0:	607b      	str	r3, [r7, #4]
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	781b      	ldrb	r3, [r3, #0]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d005      	beq.n	80116d6 <chk_chr+0x26>
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	781b      	ldrb	r3, [r3, #0]
 80116ce:	461a      	mov	r2, r3
 80116d0:	683b      	ldr	r3, [r7, #0]
 80116d2:	4293      	cmp	r3, r2
 80116d4:	d1f2      	bne.n	80116bc <chk_chr+0xc>
	return *str;
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	781b      	ldrb	r3, [r3, #0]
}
 80116da:	4618      	mov	r0, r3
 80116dc:	370c      	adds	r7, #12
 80116de:	46bd      	mov	sp, r7
 80116e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e4:	4770      	bx	lr
	...

080116e8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80116e8:	b480      	push	{r7}
 80116ea:	b085      	sub	sp, #20
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	6078      	str	r0, [r7, #4]
 80116f0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80116f2:	2300      	movs	r3, #0
 80116f4:	60bb      	str	r3, [r7, #8]
 80116f6:	68bb      	ldr	r3, [r7, #8]
 80116f8:	60fb      	str	r3, [r7, #12]
 80116fa:	e029      	b.n	8011750 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80116fc:	4a27      	ldr	r2, [pc, #156]	; (801179c <chk_lock+0xb4>)
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	011b      	lsls	r3, r3, #4
 8011702:	4413      	add	r3, r2
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d01d      	beq.n	8011746 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801170a:	4a24      	ldr	r2, [pc, #144]	; (801179c <chk_lock+0xb4>)
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	011b      	lsls	r3, r3, #4
 8011710:	4413      	add	r3, r2
 8011712:	681a      	ldr	r2, [r3, #0]
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	429a      	cmp	r2, r3
 801171a:	d116      	bne.n	801174a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801171c:	4a1f      	ldr	r2, [pc, #124]	; (801179c <chk_lock+0xb4>)
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	011b      	lsls	r3, r3, #4
 8011722:	4413      	add	r3, r2
 8011724:	3304      	adds	r3, #4
 8011726:	681a      	ldr	r2, [r3, #0]
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801172c:	429a      	cmp	r2, r3
 801172e:	d10c      	bne.n	801174a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011730:	4a1a      	ldr	r2, [pc, #104]	; (801179c <chk_lock+0xb4>)
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	011b      	lsls	r3, r3, #4
 8011736:	4413      	add	r3, r2
 8011738:	3308      	adds	r3, #8
 801173a:	681a      	ldr	r2, [r3, #0]
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 8011740:	429a      	cmp	r2, r3
 8011742:	d102      	bne.n	801174a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011744:	e007      	b.n	8011756 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8011746:	2301      	movs	r3, #1
 8011748:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	3301      	adds	r3, #1
 801174e:	60fb      	str	r3, [r7, #12]
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	2b01      	cmp	r3, #1
 8011754:	d9d2      	bls.n	80116fc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	2b02      	cmp	r3, #2
 801175a:	d109      	bne.n	8011770 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801175c:	68bb      	ldr	r3, [r7, #8]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d102      	bne.n	8011768 <chk_lock+0x80>
 8011762:	683b      	ldr	r3, [r7, #0]
 8011764:	2b02      	cmp	r3, #2
 8011766:	d101      	bne.n	801176c <chk_lock+0x84>
 8011768:	2300      	movs	r3, #0
 801176a:	e010      	b.n	801178e <chk_lock+0xa6>
 801176c:	2312      	movs	r3, #18
 801176e:	e00e      	b.n	801178e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011770:	683b      	ldr	r3, [r7, #0]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d108      	bne.n	8011788 <chk_lock+0xa0>
 8011776:	4a09      	ldr	r2, [pc, #36]	; (801179c <chk_lock+0xb4>)
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	011b      	lsls	r3, r3, #4
 801177c:	4413      	add	r3, r2
 801177e:	330c      	adds	r3, #12
 8011780:	881b      	ldrh	r3, [r3, #0]
 8011782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011786:	d101      	bne.n	801178c <chk_lock+0xa4>
 8011788:	2310      	movs	r3, #16
 801178a:	e000      	b.n	801178e <chk_lock+0xa6>
 801178c:	2300      	movs	r3, #0
}
 801178e:	4618      	mov	r0, r3
 8011790:	3714      	adds	r7, #20
 8011792:	46bd      	mov	sp, r7
 8011794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011798:	4770      	bx	lr
 801179a:	bf00      	nop
 801179c:	24000280 	.word	0x24000280

080117a0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80117a0:	b480      	push	{r7}
 80117a2:	b083      	sub	sp, #12
 80117a4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80117a6:	2300      	movs	r3, #0
 80117a8:	607b      	str	r3, [r7, #4]
 80117aa:	e002      	b.n	80117b2 <enq_lock+0x12>
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	3301      	adds	r3, #1
 80117b0:	607b      	str	r3, [r7, #4]
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	2b01      	cmp	r3, #1
 80117b6:	d806      	bhi.n	80117c6 <enq_lock+0x26>
 80117b8:	4a09      	ldr	r2, [pc, #36]	; (80117e0 <enq_lock+0x40>)
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	011b      	lsls	r3, r3, #4
 80117be:	4413      	add	r3, r2
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d1f2      	bne.n	80117ac <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	2b02      	cmp	r3, #2
 80117ca:	bf14      	ite	ne
 80117cc:	2301      	movne	r3, #1
 80117ce:	2300      	moveq	r3, #0
 80117d0:	b2db      	uxtb	r3, r3
}
 80117d2:	4618      	mov	r0, r3
 80117d4:	370c      	adds	r7, #12
 80117d6:	46bd      	mov	sp, r7
 80117d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117dc:	4770      	bx	lr
 80117de:	bf00      	nop
 80117e0:	24000280 	.word	0x24000280

080117e4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80117e4:	b480      	push	{r7}
 80117e6:	b085      	sub	sp, #20
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]
 80117ec:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80117ee:	2300      	movs	r3, #0
 80117f0:	60fb      	str	r3, [r7, #12]
 80117f2:	e01f      	b.n	8011834 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80117f4:	4a41      	ldr	r2, [pc, #260]	; (80118fc <inc_lock+0x118>)
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	011b      	lsls	r3, r3, #4
 80117fa:	4413      	add	r3, r2
 80117fc:	681a      	ldr	r2, [r3, #0]
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	429a      	cmp	r2, r3
 8011804:	d113      	bne.n	801182e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011806:	4a3d      	ldr	r2, [pc, #244]	; (80118fc <inc_lock+0x118>)
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	011b      	lsls	r3, r3, #4
 801180c:	4413      	add	r3, r2
 801180e:	3304      	adds	r3, #4
 8011810:	681a      	ldr	r2, [r3, #0]
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011816:	429a      	cmp	r2, r3
 8011818:	d109      	bne.n	801182e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801181a:	4a38      	ldr	r2, [pc, #224]	; (80118fc <inc_lock+0x118>)
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	011b      	lsls	r3, r3, #4
 8011820:	4413      	add	r3, r2
 8011822:	3308      	adds	r3, #8
 8011824:	681a      	ldr	r2, [r3, #0]
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 801182a:	429a      	cmp	r2, r3
 801182c:	d006      	beq.n	801183c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	3301      	adds	r3, #1
 8011832:	60fb      	str	r3, [r7, #12]
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	2b01      	cmp	r3, #1
 8011838:	d9dc      	bls.n	80117f4 <inc_lock+0x10>
 801183a:	e000      	b.n	801183e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801183c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	2b02      	cmp	r3, #2
 8011842:	d132      	bne.n	80118aa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011844:	2300      	movs	r3, #0
 8011846:	60fb      	str	r3, [r7, #12]
 8011848:	e002      	b.n	8011850 <inc_lock+0x6c>
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	3301      	adds	r3, #1
 801184e:	60fb      	str	r3, [r7, #12]
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	2b01      	cmp	r3, #1
 8011854:	d806      	bhi.n	8011864 <inc_lock+0x80>
 8011856:	4a29      	ldr	r2, [pc, #164]	; (80118fc <inc_lock+0x118>)
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	011b      	lsls	r3, r3, #4
 801185c:	4413      	add	r3, r2
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	2b00      	cmp	r3, #0
 8011862:	d1f2      	bne.n	801184a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	2b02      	cmp	r3, #2
 8011868:	d101      	bne.n	801186e <inc_lock+0x8a>
 801186a:	2300      	movs	r3, #0
 801186c:	e040      	b.n	80118f0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	681a      	ldr	r2, [r3, #0]
 8011872:	4922      	ldr	r1, [pc, #136]	; (80118fc <inc_lock+0x118>)
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	011b      	lsls	r3, r3, #4
 8011878:	440b      	add	r3, r1
 801187a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	689a      	ldr	r2, [r3, #8]
 8011880:	491e      	ldr	r1, [pc, #120]	; (80118fc <inc_lock+0x118>)
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	011b      	lsls	r3, r3, #4
 8011886:	440b      	add	r3, r1
 8011888:	3304      	adds	r3, #4
 801188a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011890:	491a      	ldr	r1, [pc, #104]	; (80118fc <inc_lock+0x118>)
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	011b      	lsls	r3, r3, #4
 8011896:	440b      	add	r3, r1
 8011898:	3308      	adds	r3, #8
 801189a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801189c:	4a17      	ldr	r2, [pc, #92]	; (80118fc <inc_lock+0x118>)
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	011b      	lsls	r3, r3, #4
 80118a2:	4413      	add	r3, r2
 80118a4:	330c      	adds	r3, #12
 80118a6:	2200      	movs	r2, #0
 80118a8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80118aa:	683b      	ldr	r3, [r7, #0]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d009      	beq.n	80118c4 <inc_lock+0xe0>
 80118b0:	4a12      	ldr	r2, [pc, #72]	; (80118fc <inc_lock+0x118>)
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	011b      	lsls	r3, r3, #4
 80118b6:	4413      	add	r3, r2
 80118b8:	330c      	adds	r3, #12
 80118ba:	881b      	ldrh	r3, [r3, #0]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d001      	beq.n	80118c4 <inc_lock+0xe0>
 80118c0:	2300      	movs	r3, #0
 80118c2:	e015      	b.n	80118f0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80118c4:	683b      	ldr	r3, [r7, #0]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d108      	bne.n	80118dc <inc_lock+0xf8>
 80118ca:	4a0c      	ldr	r2, [pc, #48]	; (80118fc <inc_lock+0x118>)
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	011b      	lsls	r3, r3, #4
 80118d0:	4413      	add	r3, r2
 80118d2:	330c      	adds	r3, #12
 80118d4:	881b      	ldrh	r3, [r3, #0]
 80118d6:	3301      	adds	r3, #1
 80118d8:	b29a      	uxth	r2, r3
 80118da:	e001      	b.n	80118e0 <inc_lock+0xfc>
 80118dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80118e0:	4906      	ldr	r1, [pc, #24]	; (80118fc <inc_lock+0x118>)
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	011b      	lsls	r3, r3, #4
 80118e6:	440b      	add	r3, r1
 80118e8:	330c      	adds	r3, #12
 80118ea:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	3301      	adds	r3, #1
}
 80118f0:	4618      	mov	r0, r3
 80118f2:	3714      	adds	r7, #20
 80118f4:	46bd      	mov	sp, r7
 80118f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fa:	4770      	bx	lr
 80118fc:	24000280 	.word	0x24000280

08011900 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011900:	b480      	push	{r7}
 8011902:	b085      	sub	sp, #20
 8011904:	af00      	add	r7, sp, #0
 8011906:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	3b01      	subs	r3, #1
 801190c:	607b      	str	r3, [r7, #4]
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	2b01      	cmp	r3, #1
 8011912:	d825      	bhi.n	8011960 <dec_lock+0x60>
		n = Files[i].ctr;
 8011914:	4a17      	ldr	r2, [pc, #92]	; (8011974 <dec_lock+0x74>)
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	011b      	lsls	r3, r3, #4
 801191a:	4413      	add	r3, r2
 801191c:	330c      	adds	r3, #12
 801191e:	881b      	ldrh	r3, [r3, #0]
 8011920:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011922:	89fb      	ldrh	r3, [r7, #14]
 8011924:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011928:	d101      	bne.n	801192e <dec_lock+0x2e>
 801192a:	2300      	movs	r3, #0
 801192c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801192e:	89fb      	ldrh	r3, [r7, #14]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d002      	beq.n	801193a <dec_lock+0x3a>
 8011934:	89fb      	ldrh	r3, [r7, #14]
 8011936:	3b01      	subs	r3, #1
 8011938:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801193a:	4a0e      	ldr	r2, [pc, #56]	; (8011974 <dec_lock+0x74>)
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	011b      	lsls	r3, r3, #4
 8011940:	4413      	add	r3, r2
 8011942:	330c      	adds	r3, #12
 8011944:	89fa      	ldrh	r2, [r7, #14]
 8011946:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011948:	89fb      	ldrh	r3, [r7, #14]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d105      	bne.n	801195a <dec_lock+0x5a>
 801194e:	4a09      	ldr	r2, [pc, #36]	; (8011974 <dec_lock+0x74>)
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	011b      	lsls	r3, r3, #4
 8011954:	4413      	add	r3, r2
 8011956:	2200      	movs	r2, #0
 8011958:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801195a:	2300      	movs	r3, #0
 801195c:	737b      	strb	r3, [r7, #13]
 801195e:	e001      	b.n	8011964 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011960:	2302      	movs	r3, #2
 8011962:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011964:	7b7b      	ldrb	r3, [r7, #13]
}
 8011966:	4618      	mov	r0, r3
 8011968:	3714      	adds	r7, #20
 801196a:	46bd      	mov	sp, r7
 801196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011970:	4770      	bx	lr
 8011972:	bf00      	nop
 8011974:	24000280 	.word	0x24000280

08011978 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011978:	b480      	push	{r7}
 801197a:	b085      	sub	sp, #20
 801197c:	af00      	add	r7, sp, #0
 801197e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011980:	2300      	movs	r3, #0
 8011982:	60fb      	str	r3, [r7, #12]
 8011984:	e010      	b.n	80119a8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011986:	4a0d      	ldr	r2, [pc, #52]	; (80119bc <clear_lock+0x44>)
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	011b      	lsls	r3, r3, #4
 801198c:	4413      	add	r3, r2
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	687a      	ldr	r2, [r7, #4]
 8011992:	429a      	cmp	r2, r3
 8011994:	d105      	bne.n	80119a2 <clear_lock+0x2a>
 8011996:	4a09      	ldr	r2, [pc, #36]	; (80119bc <clear_lock+0x44>)
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	011b      	lsls	r3, r3, #4
 801199c:	4413      	add	r3, r2
 801199e:	2200      	movs	r2, #0
 80119a0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	3301      	adds	r3, #1
 80119a6:	60fb      	str	r3, [r7, #12]
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	2b01      	cmp	r3, #1
 80119ac:	d9eb      	bls.n	8011986 <clear_lock+0xe>
	}
}
 80119ae:	bf00      	nop
 80119b0:	3714      	adds	r7, #20
 80119b2:	46bd      	mov	sp, r7
 80119b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b8:	4770      	bx	lr
 80119ba:	bf00      	nop
 80119bc:	24000280 	.word	0x24000280

080119c0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b086      	sub	sp, #24
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80119c8:	2300      	movs	r3, #0
 80119ca:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	78db      	ldrb	r3, [r3, #3]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d034      	beq.n	8011a3e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119d8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	7858      	ldrb	r0, [r3, #1]
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80119e4:	2301      	movs	r3, #1
 80119e6:	697a      	ldr	r2, [r7, #20]
 80119e8:	f7ff fbfc 	bl	80111e4 <disk_write>
 80119ec:	4603      	mov	r3, r0
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d002      	beq.n	80119f8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80119f2:	2301      	movs	r3, #1
 80119f4:	73fb      	strb	r3, [r7, #15]
 80119f6:	e022      	b.n	8011a3e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	2200      	movs	r2, #0
 80119fc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a02:	697a      	ldr	r2, [r7, #20]
 8011a04:	1ad2      	subs	r2, r2, r3
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a0a:	429a      	cmp	r2, r3
 8011a0c:	d217      	bcs.n	8011a3e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	789b      	ldrb	r3, [r3, #2]
 8011a12:	613b      	str	r3, [r7, #16]
 8011a14:	e010      	b.n	8011a38 <sync_window+0x78>
					wsect += fs->fsize;
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a1a:	697a      	ldr	r2, [r7, #20]
 8011a1c:	4413      	add	r3, r2
 8011a1e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	7858      	ldrb	r0, [r3, #1]
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8011a2a:	2301      	movs	r3, #1
 8011a2c:	697a      	ldr	r2, [r7, #20]
 8011a2e:	f7ff fbd9 	bl	80111e4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011a32:	693b      	ldr	r3, [r7, #16]
 8011a34:	3b01      	subs	r3, #1
 8011a36:	613b      	str	r3, [r7, #16]
 8011a38:	693b      	ldr	r3, [r7, #16]
 8011a3a:	2b01      	cmp	r3, #1
 8011a3c:	d8eb      	bhi.n	8011a16 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a40:	4618      	mov	r0, r3
 8011a42:	3718      	adds	r7, #24
 8011a44:	46bd      	mov	sp, r7
 8011a46:	bd80      	pop	{r7, pc}

08011a48 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	b084      	sub	sp, #16
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	6078      	str	r0, [r7, #4]
 8011a50:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011a52:	2300      	movs	r3, #0
 8011a54:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a5a:	683a      	ldr	r2, [r7, #0]
 8011a5c:	429a      	cmp	r2, r3
 8011a5e:	d01b      	beq.n	8011a98 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011a60:	6878      	ldr	r0, [r7, #4]
 8011a62:	f7ff ffad 	bl	80119c0 <sync_window>
 8011a66:	4603      	mov	r3, r0
 8011a68:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011a6a:	7bfb      	ldrb	r3, [r7, #15]
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d113      	bne.n	8011a98 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	7858      	ldrb	r0, [r3, #1]
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8011a7a:	2301      	movs	r3, #1
 8011a7c:	683a      	ldr	r2, [r7, #0]
 8011a7e:	f7ff fb91 	bl	80111a4 <disk_read>
 8011a82:	4603      	mov	r3, r0
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d004      	beq.n	8011a92 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011a88:	f04f 33ff 	mov.w	r3, #4294967295
 8011a8c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011a8e:	2301      	movs	r3, #1
 8011a90:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	683a      	ldr	r2, [r7, #0]
 8011a96:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 8011a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	3710      	adds	r7, #16
 8011a9e:	46bd      	mov	sp, r7
 8011aa0:	bd80      	pop	{r7, pc}
	...

08011aa4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b084      	sub	sp, #16
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011aac:	6878      	ldr	r0, [r7, #4]
 8011aae:	f7ff ff87 	bl	80119c0 <sync_window>
 8011ab2:	4603      	mov	r3, r0
 8011ab4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011ab6:	7bfb      	ldrb	r3, [r7, #15]
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d159      	bne.n	8011b70 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	781b      	ldrb	r3, [r3, #0]
 8011ac0:	2b03      	cmp	r3, #3
 8011ac2:	d149      	bne.n	8011b58 <sync_fs+0xb4>
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	791b      	ldrb	r3, [r3, #4]
 8011ac8:	2b01      	cmp	r3, #1
 8011aca:	d145      	bne.n	8011b58 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	899b      	ldrh	r3, [r3, #12]
 8011ad6:	461a      	mov	r2, r3
 8011ad8:	2100      	movs	r1, #0
 8011ada:	f7ff fda8 	bl	801162e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	333c      	adds	r3, #60	; 0x3c
 8011ae2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011ae6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011aea:	4618      	mov	r0, r3
 8011aec:	f7ff fcb0 	bl	8011450 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	333c      	adds	r3, #60	; 0x3c
 8011af4:	4921      	ldr	r1, [pc, #132]	; (8011b7c <sync_fs+0xd8>)
 8011af6:	4618      	mov	r0, r3
 8011af8:	f7ff fcc5 	bl	8011486 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	333c      	adds	r3, #60	; 0x3c
 8011b00:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011b04:	491e      	ldr	r1, [pc, #120]	; (8011b80 <sync_fs+0xdc>)
 8011b06:	4618      	mov	r0, r3
 8011b08:	f7ff fcbd 	bl	8011486 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	333c      	adds	r3, #60	; 0x3c
 8011b10:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	69db      	ldr	r3, [r3, #28]
 8011b18:	4619      	mov	r1, r3
 8011b1a:	4610      	mov	r0, r2
 8011b1c:	f7ff fcb3 	bl	8011486 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	333c      	adds	r3, #60	; 0x3c
 8011b24:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	699b      	ldr	r3, [r3, #24]
 8011b2c:	4619      	mov	r1, r3
 8011b2e:	4610      	mov	r0, r2
 8011b30:	f7ff fca9 	bl	8011486 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b38:	1c5a      	adds	r2, r3, #1
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	7858      	ldrb	r0, [r3, #1]
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011b4c:	2301      	movs	r3, #1
 8011b4e:	f7ff fb49 	bl	80111e4 <disk_write>
			fs->fsi_flag = 0;
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	2200      	movs	r2, #0
 8011b56:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	785b      	ldrb	r3, [r3, #1]
 8011b5c:	2200      	movs	r2, #0
 8011b5e:	2100      	movs	r1, #0
 8011b60:	4618      	mov	r0, r3
 8011b62:	f7ff fb5f 	bl	8011224 <disk_ioctl>
 8011b66:	4603      	mov	r3, r0
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d001      	beq.n	8011b70 <sync_fs+0xcc>
 8011b6c:	2301      	movs	r3, #1
 8011b6e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b72:	4618      	mov	r0, r3
 8011b74:	3710      	adds	r7, #16
 8011b76:	46bd      	mov	sp, r7
 8011b78:	bd80      	pop	{r7, pc}
 8011b7a:	bf00      	nop
 8011b7c:	41615252 	.word	0x41615252
 8011b80:	61417272 	.word	0x61417272

08011b84 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011b84:	b480      	push	{r7}
 8011b86:	b083      	sub	sp, #12
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	6078      	str	r0, [r7, #4]
 8011b8c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011b8e:	683b      	ldr	r3, [r7, #0]
 8011b90:	3b02      	subs	r3, #2
 8011b92:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	6a1b      	ldr	r3, [r3, #32]
 8011b98:	3b02      	subs	r3, #2
 8011b9a:	683a      	ldr	r2, [r7, #0]
 8011b9c:	429a      	cmp	r2, r3
 8011b9e:	d301      	bcc.n	8011ba4 <clust2sect+0x20>
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	e008      	b.n	8011bb6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	895b      	ldrh	r3, [r3, #10]
 8011ba8:	461a      	mov	r2, r3
 8011baa:	683b      	ldr	r3, [r7, #0]
 8011bac:	fb03 f202 	mul.w	r2, r3, r2
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011bb4:	4413      	add	r3, r2
}
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	370c      	adds	r7, #12
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc0:	4770      	bx	lr
	...

08011bc4 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011bc4:	b590      	push	{r4, r7, lr}
 8011bc6:	b089      	sub	sp, #36	; 0x24
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	6078      	str	r0, [r7, #4]
 8011bcc:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011bd4:	683b      	ldr	r3, [r7, #0]
 8011bd6:	2b01      	cmp	r3, #1
 8011bd8:	d904      	bls.n	8011be4 <get_fat+0x20>
 8011bda:	69bb      	ldr	r3, [r7, #24]
 8011bdc:	6a1b      	ldr	r3, [r3, #32]
 8011bde:	683a      	ldr	r2, [r7, #0]
 8011be0:	429a      	cmp	r2, r3
 8011be2:	d302      	bcc.n	8011bea <get_fat+0x26>
		val = 1;	/* Internal error */
 8011be4:	2301      	movs	r3, #1
 8011be6:	61fb      	str	r3, [r7, #28]
 8011be8:	e13a      	b.n	8011e60 <get_fat+0x29c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011bea:	f04f 33ff 	mov.w	r3, #4294967295
 8011bee:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 8011bf0:	69bb      	ldr	r3, [r7, #24]
 8011bf2:	781b      	ldrb	r3, [r3, #0]
 8011bf4:	3b01      	subs	r3, #1
 8011bf6:	2b03      	cmp	r3, #3
 8011bf8:	f200 8126 	bhi.w	8011e48 <get_fat+0x284>
 8011bfc:	a201      	add	r2, pc, #4	; (adr r2, 8011c04 <get_fat+0x40>)
 8011bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c02:	bf00      	nop
 8011c04:	08011c15 	.word	0x08011c15
 8011c08:	08011cc3 	.word	0x08011cc3
 8011c0c:	08011d0f 	.word	0x08011d0f
 8011c10:	08011d5f 	.word	0x08011d5f
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011c14:	683b      	ldr	r3, [r7, #0]
 8011c16:	60fb      	str	r3, [r7, #12]
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	085b      	lsrs	r3, r3, #1
 8011c1c:	68fa      	ldr	r2, [r7, #12]
 8011c1e:	4413      	add	r3, r2
 8011c20:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011c22:	69bb      	ldr	r3, [r7, #24]
 8011c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c26:	69bb      	ldr	r3, [r7, #24]
 8011c28:	899b      	ldrh	r3, [r3, #12]
 8011c2a:	4619      	mov	r1, r3
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011c32:	4413      	add	r3, r2
 8011c34:	4619      	mov	r1, r3
 8011c36:	69b8      	ldr	r0, [r7, #24]
 8011c38:	f7ff ff06 	bl	8011a48 <move_window>
 8011c3c:	4603      	mov	r3, r0
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	f040 8105 	bne.w	8011e4e <get_fat+0x28a>
			wc = fs->win[bc++ % SS(fs)];
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	1c5a      	adds	r2, r3, #1
 8011c48:	60fa      	str	r2, [r7, #12]
 8011c4a:	69ba      	ldr	r2, [r7, #24]
 8011c4c:	8992      	ldrh	r2, [r2, #12]
 8011c4e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011c52:	fb02 f201 	mul.w	r2, r2, r1
 8011c56:	1a9b      	subs	r3, r3, r2
 8011c58:	69ba      	ldr	r2, [r7, #24]
 8011c5a:	4413      	add	r3, r2
 8011c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011c60:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011c62:	69bb      	ldr	r3, [r7, #24]
 8011c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c66:	69bb      	ldr	r3, [r7, #24]
 8011c68:	899b      	ldrh	r3, [r3, #12]
 8011c6a:	4619      	mov	r1, r3
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011c72:	4413      	add	r3, r2
 8011c74:	4619      	mov	r1, r3
 8011c76:	69b8      	ldr	r0, [r7, #24]
 8011c78:	f7ff fee6 	bl	8011a48 <move_window>
 8011c7c:	4603      	mov	r3, r0
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	f040 80e7 	bne.w	8011e52 <get_fat+0x28e>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011c84:	69bb      	ldr	r3, [r7, #24]
 8011c86:	899b      	ldrh	r3, [r3, #12]
 8011c88:	461a      	mov	r2, r3
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011c90:	fb02 f201 	mul.w	r2, r2, r1
 8011c94:	1a9b      	subs	r3, r3, r2
 8011c96:	69ba      	ldr	r2, [r7, #24]
 8011c98:	4413      	add	r3, r2
 8011c9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011c9e:	021b      	lsls	r3, r3, #8
 8011ca0:	461a      	mov	r2, r3
 8011ca2:	68bb      	ldr	r3, [r7, #8]
 8011ca4:	4313      	orrs	r3, r2
 8011ca6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011ca8:	683b      	ldr	r3, [r7, #0]
 8011caa:	f003 0301 	and.w	r3, r3, #1
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d002      	beq.n	8011cb8 <get_fat+0xf4>
 8011cb2:	68bb      	ldr	r3, [r7, #8]
 8011cb4:	091b      	lsrs	r3, r3, #4
 8011cb6:	e002      	b.n	8011cbe <get_fat+0xfa>
 8011cb8:	68bb      	ldr	r3, [r7, #8]
 8011cba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011cbe:	61fb      	str	r3, [r7, #28]
			break;
 8011cc0:	e0ce      	b.n	8011e60 <get_fat+0x29c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011cc2:	69bb      	ldr	r3, [r7, #24]
 8011cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cc6:	69bb      	ldr	r3, [r7, #24]
 8011cc8:	899b      	ldrh	r3, [r3, #12]
 8011cca:	085b      	lsrs	r3, r3, #1
 8011ccc:	b29b      	uxth	r3, r3
 8011cce:	4619      	mov	r1, r3
 8011cd0:	683b      	ldr	r3, [r7, #0]
 8011cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8011cd6:	4413      	add	r3, r2
 8011cd8:	4619      	mov	r1, r3
 8011cda:	69b8      	ldr	r0, [r7, #24]
 8011cdc:	f7ff feb4 	bl	8011a48 <move_window>
 8011ce0:	4603      	mov	r3, r0
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	f040 80b7 	bne.w	8011e56 <get_fat+0x292>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011ce8:	69bb      	ldr	r3, [r7, #24]
 8011cea:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8011cee:	683b      	ldr	r3, [r7, #0]
 8011cf0:	005b      	lsls	r3, r3, #1
 8011cf2:	69ba      	ldr	r2, [r7, #24]
 8011cf4:	8992      	ldrh	r2, [r2, #12]
 8011cf6:	fbb3 f0f2 	udiv	r0, r3, r2
 8011cfa:	fb02 f200 	mul.w	r2, r2, r0
 8011cfe:	1a9b      	subs	r3, r3, r2
 8011d00:	440b      	add	r3, r1
 8011d02:	4618      	mov	r0, r3
 8011d04:	f7ff faac 	bl	8011260 <ld_word>
 8011d08:	4603      	mov	r3, r0
 8011d0a:	61fb      	str	r3, [r7, #28]
			break;
 8011d0c:	e0a8      	b.n	8011e60 <get_fat+0x29c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011d0e:	69bb      	ldr	r3, [r7, #24]
 8011d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d12:	69bb      	ldr	r3, [r7, #24]
 8011d14:	899b      	ldrh	r3, [r3, #12]
 8011d16:	089b      	lsrs	r3, r3, #2
 8011d18:	b29b      	uxth	r3, r3
 8011d1a:	4619      	mov	r1, r3
 8011d1c:	683b      	ldr	r3, [r7, #0]
 8011d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011d22:	4413      	add	r3, r2
 8011d24:	4619      	mov	r1, r3
 8011d26:	69b8      	ldr	r0, [r7, #24]
 8011d28:	f7ff fe8e 	bl	8011a48 <move_window>
 8011d2c:	4603      	mov	r3, r0
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	f040 8093 	bne.w	8011e5a <get_fat+0x296>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011d34:	69bb      	ldr	r3, [r7, #24]
 8011d36:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8011d3a:	683b      	ldr	r3, [r7, #0]
 8011d3c:	009b      	lsls	r3, r3, #2
 8011d3e:	69ba      	ldr	r2, [r7, #24]
 8011d40:	8992      	ldrh	r2, [r2, #12]
 8011d42:	fbb3 f0f2 	udiv	r0, r3, r2
 8011d46:	fb02 f200 	mul.w	r2, r2, r0
 8011d4a:	1a9b      	subs	r3, r3, r2
 8011d4c:	440b      	add	r3, r1
 8011d4e:	4618      	mov	r0, r3
 8011d50:	f7ff fa9e 	bl	8011290 <ld_dword>
 8011d54:	4603      	mov	r3, r0
 8011d56:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011d5a:	61fb      	str	r3, [r7, #28]
			break;
 8011d5c:	e080      	b.n	8011e60 <get_fat+0x29c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8011d64:	4323      	orrs	r3, r4
 8011d66:	d06f      	beq.n	8011e48 <get_fat+0x284>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	689b      	ldr	r3, [r3, #8]
 8011d6c:	683a      	ldr	r2, [r7, #0]
 8011d6e:	1ad3      	subs	r3, r2, r3
 8011d70:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8011d78:	f113 30ff 	adds.w	r0, r3, #4294967295
 8011d7c:	f144 31ff 	adc.w	r1, r4, #4294967295
 8011d80:	69bb      	ldr	r3, [r7, #24]
 8011d82:	899b      	ldrh	r3, [r3, #12]
 8011d84:	b29b      	uxth	r3, r3
 8011d86:	f04f 0400 	mov.w	r4, #0
 8011d8a:	461a      	mov	r2, r3
 8011d8c:	4623      	mov	r3, r4
 8011d8e:	f7ee faa3 	bl	80002d8 <__aeabi_uldivmod>
 8011d92:	4603      	mov	r3, r0
 8011d94:	460c      	mov	r4, r1
 8011d96:	461a      	mov	r2, r3
 8011d98:	69bb      	ldr	r3, [r7, #24]
 8011d9a:	895b      	ldrh	r3, [r3, #10]
 8011d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011da0:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	79db      	ldrb	r3, [r3, #7]
 8011da6:	2b02      	cmp	r3, #2
 8011da8:	d10e      	bne.n	8011dc8 <get_fat+0x204>
					if (cofs <= clen) {
 8011daa:	697a      	ldr	r2, [r7, #20]
 8011dac:	693b      	ldr	r3, [r7, #16]
 8011dae:	429a      	cmp	r2, r3
 8011db0:	d80a      	bhi.n	8011dc8 <get_fat+0x204>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8011db2:	697a      	ldr	r2, [r7, #20]
 8011db4:	693b      	ldr	r3, [r7, #16]
 8011db6:	429a      	cmp	r2, r3
 8011db8:	d002      	beq.n	8011dc0 <get_fat+0x1fc>
 8011dba:	683b      	ldr	r3, [r7, #0]
 8011dbc:	3301      	adds	r3, #1
 8011dbe:	e001      	b.n	8011dc4 <get_fat+0x200>
 8011dc0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011dc4:	61fb      	str	r3, [r7, #28]
						break;
 8011dc6:	e04b      	b.n	8011e60 <get_fat+0x29c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	79db      	ldrb	r3, [r3, #7]
 8011dcc:	2b03      	cmp	r3, #3
 8011dce:	d108      	bne.n	8011de2 <get_fat+0x21e>
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	699b      	ldr	r3, [r3, #24]
 8011dd4:	697a      	ldr	r2, [r7, #20]
 8011dd6:	429a      	cmp	r2, r3
 8011dd8:	d203      	bcs.n	8011de2 <get_fat+0x21e>
					val = clst + 1; 	/* Generate the value */
 8011dda:	683b      	ldr	r3, [r7, #0]
 8011ddc:	3301      	adds	r3, #1
 8011dde:	61fb      	str	r3, [r7, #28]
					break;
 8011de0:	e03e      	b.n	8011e60 <get_fat+0x29c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	79db      	ldrb	r3, [r3, #7]
 8011de6:	2b02      	cmp	r3, #2
 8011de8:	d02e      	beq.n	8011e48 <get_fat+0x284>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	69db      	ldr	r3, [r3, #28]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d003      	beq.n	8011dfa <get_fat+0x236>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8011df2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011df6:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8011df8:	e032      	b.n	8011e60 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011dfa:	69bb      	ldr	r3, [r7, #24]
 8011dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011dfe:	69bb      	ldr	r3, [r7, #24]
 8011e00:	899b      	ldrh	r3, [r3, #12]
 8011e02:	089b      	lsrs	r3, r3, #2
 8011e04:	b29b      	uxth	r3, r3
 8011e06:	4619      	mov	r1, r3
 8011e08:	683b      	ldr	r3, [r7, #0]
 8011e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8011e0e:	4413      	add	r3, r2
 8011e10:	4619      	mov	r1, r3
 8011e12:	69b8      	ldr	r0, [r7, #24]
 8011e14:	f7ff fe18 	bl	8011a48 <move_window>
 8011e18:	4603      	mov	r3, r0
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d11f      	bne.n	8011e5e <get_fat+0x29a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8011e1e:	69bb      	ldr	r3, [r7, #24]
 8011e20:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8011e24:	683b      	ldr	r3, [r7, #0]
 8011e26:	009b      	lsls	r3, r3, #2
 8011e28:	69ba      	ldr	r2, [r7, #24]
 8011e2a:	8992      	ldrh	r2, [r2, #12]
 8011e2c:	fbb3 f0f2 	udiv	r0, r3, r2
 8011e30:	fb02 f200 	mul.w	r2, r2, r0
 8011e34:	1a9b      	subs	r3, r3, r2
 8011e36:	440b      	add	r3, r1
 8011e38:	4618      	mov	r0, r3
 8011e3a:	f7ff fa29 	bl	8011290 <ld_dword>
 8011e3e:	4603      	mov	r3, r0
 8011e40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011e44:	61fb      	str	r3, [r7, #28]
					break;
 8011e46:	e00b      	b.n	8011e60 <get_fat+0x29c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011e48:	2301      	movs	r3, #1
 8011e4a:	61fb      	str	r3, [r7, #28]
 8011e4c:	e008      	b.n	8011e60 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011e4e:	bf00      	nop
 8011e50:	e006      	b.n	8011e60 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011e52:	bf00      	nop
 8011e54:	e004      	b.n	8011e60 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011e56:	bf00      	nop
 8011e58:	e002      	b.n	8011e60 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011e5a:	bf00      	nop
 8011e5c:	e000      	b.n	8011e60 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011e5e:	bf00      	nop
		}
	}

	return val;
 8011e60:	69fb      	ldr	r3, [r7, #28]
}
 8011e62:	4618      	mov	r0, r3
 8011e64:	3724      	adds	r7, #36	; 0x24
 8011e66:	46bd      	mov	sp, r7
 8011e68:	bd90      	pop	{r4, r7, pc}
 8011e6a:	bf00      	nop

08011e6c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011e6c:	b590      	push	{r4, r7, lr}
 8011e6e:	b089      	sub	sp, #36	; 0x24
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	60f8      	str	r0, [r7, #12]
 8011e74:	60b9      	str	r1, [r7, #8]
 8011e76:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011e78:	2302      	movs	r3, #2
 8011e7a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011e7c:	68bb      	ldr	r3, [r7, #8]
 8011e7e:	2b01      	cmp	r3, #1
 8011e80:	f240 8111 	bls.w	80120a6 <put_fat+0x23a>
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	6a1b      	ldr	r3, [r3, #32]
 8011e88:	68ba      	ldr	r2, [r7, #8]
 8011e8a:	429a      	cmp	r2, r3
 8011e8c:	f080 810b 	bcs.w	80120a6 <put_fat+0x23a>
		switch (fs->fs_type) {
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	781b      	ldrb	r3, [r3, #0]
 8011e94:	3b01      	subs	r3, #1
 8011e96:	2b03      	cmp	r3, #3
 8011e98:	f200 8105 	bhi.w	80120a6 <put_fat+0x23a>
 8011e9c:	a201      	add	r2, pc, #4	; (adr r2, 8011ea4 <put_fat+0x38>)
 8011e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ea2:	bf00      	nop
 8011ea4:	08011eb5 	.word	0x08011eb5
 8011ea8:	08011fb9 	.word	0x08011fb9
 8011eac:	0801200f 	.word	0x0801200f
 8011eb0:	0801200f 	.word	0x0801200f
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011eb4:	68bb      	ldr	r3, [r7, #8]
 8011eb6:	61bb      	str	r3, [r7, #24]
 8011eb8:	69bb      	ldr	r3, [r7, #24]
 8011eba:	085b      	lsrs	r3, r3, #1
 8011ebc:	69ba      	ldr	r2, [r7, #24]
 8011ebe:	4413      	add	r3, r2
 8011ec0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	899b      	ldrh	r3, [r3, #12]
 8011eca:	4619      	mov	r1, r3
 8011ecc:	69bb      	ldr	r3, [r7, #24]
 8011ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8011ed2:	4413      	add	r3, r2
 8011ed4:	4619      	mov	r1, r3
 8011ed6:	68f8      	ldr	r0, [r7, #12]
 8011ed8:	f7ff fdb6 	bl	8011a48 <move_window>
 8011edc:	4603      	mov	r3, r0
 8011ede:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011ee0:	7ffb      	ldrb	r3, [r7, #31]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	f040 80d8 	bne.w	8012098 <put_fat+0x22c>
			p = fs->win + bc++ % SS(fs);
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8011eee:	69bb      	ldr	r3, [r7, #24]
 8011ef0:	1c5a      	adds	r2, r3, #1
 8011ef2:	61ba      	str	r2, [r7, #24]
 8011ef4:	68fa      	ldr	r2, [r7, #12]
 8011ef6:	8992      	ldrh	r2, [r2, #12]
 8011ef8:	fbb3 f0f2 	udiv	r0, r3, r2
 8011efc:	fb02 f200 	mul.w	r2, r2, r0
 8011f00:	1a9b      	subs	r3, r3, r2
 8011f02:	440b      	add	r3, r1
 8011f04:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011f06:	68bb      	ldr	r3, [r7, #8]
 8011f08:	f003 0301 	and.w	r3, r3, #1
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d00d      	beq.n	8011f2c <put_fat+0xc0>
 8011f10:	697b      	ldr	r3, [r7, #20]
 8011f12:	781b      	ldrb	r3, [r3, #0]
 8011f14:	b25b      	sxtb	r3, r3
 8011f16:	f003 030f 	and.w	r3, r3, #15
 8011f1a:	b25a      	sxtb	r2, r3
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	b2db      	uxtb	r3, r3
 8011f20:	011b      	lsls	r3, r3, #4
 8011f22:	b25b      	sxtb	r3, r3
 8011f24:	4313      	orrs	r3, r2
 8011f26:	b25b      	sxtb	r3, r3
 8011f28:	b2db      	uxtb	r3, r3
 8011f2a:	e001      	b.n	8011f30 <put_fat+0xc4>
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	b2db      	uxtb	r3, r3
 8011f30:	697a      	ldr	r2, [r7, #20]
 8011f32:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	2201      	movs	r2, #1
 8011f38:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	899b      	ldrh	r3, [r3, #12]
 8011f42:	4619      	mov	r1, r3
 8011f44:	69bb      	ldr	r3, [r7, #24]
 8011f46:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f4a:	4413      	add	r3, r2
 8011f4c:	4619      	mov	r1, r3
 8011f4e:	68f8      	ldr	r0, [r7, #12]
 8011f50:	f7ff fd7a 	bl	8011a48 <move_window>
 8011f54:	4603      	mov	r3, r0
 8011f56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011f58:	7ffb      	ldrb	r3, [r7, #31]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	f040 809e 	bne.w	801209c <put_fat+0x230>
			p = fs->win + bc % SS(fs);
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	899b      	ldrh	r3, [r3, #12]
 8011f6a:	461a      	mov	r2, r3
 8011f6c:	69bb      	ldr	r3, [r7, #24]
 8011f6e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011f72:	fb02 f200 	mul.w	r2, r2, r0
 8011f76:	1a9b      	subs	r3, r3, r2
 8011f78:	440b      	add	r3, r1
 8011f7a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011f7c:	68bb      	ldr	r3, [r7, #8]
 8011f7e:	f003 0301 	and.w	r3, r3, #1
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d003      	beq.n	8011f8e <put_fat+0x122>
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	091b      	lsrs	r3, r3, #4
 8011f8a:	b2db      	uxtb	r3, r3
 8011f8c:	e00e      	b.n	8011fac <put_fat+0x140>
 8011f8e:	697b      	ldr	r3, [r7, #20]
 8011f90:	781b      	ldrb	r3, [r3, #0]
 8011f92:	b25b      	sxtb	r3, r3
 8011f94:	f023 030f 	bic.w	r3, r3, #15
 8011f98:	b25a      	sxtb	r2, r3
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	0a1b      	lsrs	r3, r3, #8
 8011f9e:	b25b      	sxtb	r3, r3
 8011fa0:	f003 030f 	and.w	r3, r3, #15
 8011fa4:	b25b      	sxtb	r3, r3
 8011fa6:	4313      	orrs	r3, r2
 8011fa8:	b25b      	sxtb	r3, r3
 8011faa:	b2db      	uxtb	r3, r3
 8011fac:	697a      	ldr	r2, [r7, #20]
 8011fae:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	2201      	movs	r2, #1
 8011fb4:	70da      	strb	r2, [r3, #3]
			break;
 8011fb6:	e076      	b.n	80120a6 <put_fat+0x23a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	899b      	ldrh	r3, [r3, #12]
 8011fc0:	085b      	lsrs	r3, r3, #1
 8011fc2:	b29b      	uxth	r3, r3
 8011fc4:	4619      	mov	r1, r3
 8011fc6:	68bb      	ldr	r3, [r7, #8]
 8011fc8:	fbb3 f3f1 	udiv	r3, r3, r1
 8011fcc:	4413      	add	r3, r2
 8011fce:	4619      	mov	r1, r3
 8011fd0:	68f8      	ldr	r0, [r7, #12]
 8011fd2:	f7ff fd39 	bl	8011a48 <move_window>
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011fda:	7ffb      	ldrb	r3, [r7, #31]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d15f      	bne.n	80120a0 <put_fat+0x234>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8011fe6:	68bb      	ldr	r3, [r7, #8]
 8011fe8:	005b      	lsls	r3, r3, #1
 8011fea:	68fa      	ldr	r2, [r7, #12]
 8011fec:	8992      	ldrh	r2, [r2, #12]
 8011fee:	fbb3 f0f2 	udiv	r0, r3, r2
 8011ff2:	fb02 f200 	mul.w	r2, r2, r0
 8011ff6:	1a9b      	subs	r3, r3, r2
 8011ff8:	440b      	add	r3, r1
 8011ffa:	687a      	ldr	r2, [r7, #4]
 8011ffc:	b292      	uxth	r2, r2
 8011ffe:	4611      	mov	r1, r2
 8012000:	4618      	mov	r0, r3
 8012002:	f7ff fa25 	bl	8011450 <st_word>
			fs->wflag = 1;
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	2201      	movs	r2, #1
 801200a:	70da      	strb	r2, [r3, #3]
			break;
 801200c:	e04b      	b.n	80120a6 <put_fat+0x23a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	899b      	ldrh	r3, [r3, #12]
 8012016:	089b      	lsrs	r3, r3, #2
 8012018:	b29b      	uxth	r3, r3
 801201a:	4619      	mov	r1, r3
 801201c:	68bb      	ldr	r3, [r7, #8]
 801201e:	fbb3 f3f1 	udiv	r3, r3, r1
 8012022:	4413      	add	r3, r2
 8012024:	4619      	mov	r1, r3
 8012026:	68f8      	ldr	r0, [r7, #12]
 8012028:	f7ff fd0e 	bl	8011a48 <move_window>
 801202c:	4603      	mov	r3, r0
 801202e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012030:	7ffb      	ldrb	r3, [r7, #31]
 8012032:	2b00      	cmp	r3, #0
 8012034:	d136      	bne.n	80120a4 <put_fat+0x238>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	781b      	ldrb	r3, [r3, #0]
 801203a:	2b04      	cmp	r3, #4
 801203c:	d017      	beq.n	801206e <put_fat+0x202>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801204a:	68bb      	ldr	r3, [r7, #8]
 801204c:	009b      	lsls	r3, r3, #2
 801204e:	68fa      	ldr	r2, [r7, #12]
 8012050:	8992      	ldrh	r2, [r2, #12]
 8012052:	fbb3 f0f2 	udiv	r0, r3, r2
 8012056:	fb02 f200 	mul.w	r2, r2, r0
 801205a:	1a9b      	subs	r3, r3, r2
 801205c:	440b      	add	r3, r1
 801205e:	4618      	mov	r0, r3
 8012060:	f7ff f916 	bl	8011290 <ld_dword>
 8012064:	4603      	mov	r3, r0
 8012066:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801206a:	4323      	orrs	r3, r4
 801206c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8012074:	68bb      	ldr	r3, [r7, #8]
 8012076:	009b      	lsls	r3, r3, #2
 8012078:	68fa      	ldr	r2, [r7, #12]
 801207a:	8992      	ldrh	r2, [r2, #12]
 801207c:	fbb3 f0f2 	udiv	r0, r3, r2
 8012080:	fb02 f200 	mul.w	r2, r2, r0
 8012084:	1a9b      	subs	r3, r3, r2
 8012086:	440b      	add	r3, r1
 8012088:	6879      	ldr	r1, [r7, #4]
 801208a:	4618      	mov	r0, r3
 801208c:	f7ff f9fb 	bl	8011486 <st_dword>
			fs->wflag = 1;
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	2201      	movs	r2, #1
 8012094:	70da      	strb	r2, [r3, #3]
			break;
 8012096:	e006      	b.n	80120a6 <put_fat+0x23a>
			if (res != FR_OK) break;
 8012098:	bf00      	nop
 801209a:	e004      	b.n	80120a6 <put_fat+0x23a>
			if (res != FR_OK) break;
 801209c:	bf00      	nop
 801209e:	e002      	b.n	80120a6 <put_fat+0x23a>
			if (res != FR_OK) break;
 80120a0:	bf00      	nop
 80120a2:	e000      	b.n	80120a6 <put_fat+0x23a>
			if (res != FR_OK) break;
 80120a4:	bf00      	nop
		}
	}
	return res;
 80120a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80120a8:	4618      	mov	r0, r3
 80120aa:	3724      	adds	r7, #36	; 0x24
 80120ac:	46bd      	mov	sp, r7
 80120ae:	bd90      	pop	{r4, r7, pc}

080120b0 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b08a      	sub	sp, #40	; 0x28
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	60f8      	str	r0, [r7, #12]
 80120b8:	60b9      	str	r1, [r7, #8]
 80120ba:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 80120bc:	68bb      	ldr	r3, [r7, #8]
 80120be:	3b02      	subs	r3, #2
 80120c0:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	6a1b      	ldr	r3, [r3, #32]
 80120c6:	3b02      	subs	r3, #2
 80120c8:	68ba      	ldr	r2, [r7, #8]
 80120ca:	429a      	cmp	r2, r3
 80120cc:	d301      	bcc.n	80120d2 <find_bitmap+0x22>
 80120ce:	2300      	movs	r3, #0
 80120d0:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 80120d2:	68bb      	ldr	r3, [r7, #8]
 80120d4:	61fb      	str	r3, [r7, #28]
 80120d6:	69fb      	ldr	r3, [r7, #28]
 80120d8:	61bb      	str	r3, [r7, #24]
 80120da:	2300      	movs	r3, #0
 80120dc:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80120e2:	69fb      	ldr	r3, [r7, #28]
 80120e4:	08db      	lsrs	r3, r3, #3
 80120e6:	68f9      	ldr	r1, [r7, #12]
 80120e8:	8989      	ldrh	r1, [r1, #12]
 80120ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80120ee:	4413      	add	r3, r2
 80120f0:	4619      	mov	r1, r3
 80120f2:	68f8      	ldr	r0, [r7, #12]
 80120f4:	f7ff fca8 	bl	8011a48 <move_window>
 80120f8:	4603      	mov	r3, r0
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d002      	beq.n	8012104 <find_bitmap+0x54>
 80120fe:	f04f 33ff 	mov.w	r3, #4294967295
 8012102:	e058      	b.n	80121b6 <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8012104:	69fb      	ldr	r3, [r7, #28]
 8012106:	08db      	lsrs	r3, r3, #3
 8012108:	68fa      	ldr	r2, [r7, #12]
 801210a:	8992      	ldrh	r2, [r2, #12]
 801210c:	fbb3 f1f2 	udiv	r1, r3, r2
 8012110:	fb02 f201 	mul.w	r2, r2, r1
 8012114:	1a9b      	subs	r3, r3, r2
 8012116:	623b      	str	r3, [r7, #32]
 8012118:	69fb      	ldr	r3, [r7, #28]
 801211a:	f003 0307 	and.w	r3, r3, #7
 801211e:	2201      	movs	r2, #1
 8012120:	fa02 f303 	lsl.w	r3, r2, r3
 8012124:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8012128:	68fa      	ldr	r2, [r7, #12]
 801212a:	6a3b      	ldr	r3, [r7, #32]
 801212c:	4413      	add	r3, r2
 801212e:	333c      	adds	r3, #60	; 0x3c
 8012130:	781a      	ldrb	r2, [r3, #0]
 8012132:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012136:	4013      	ands	r3, r2
 8012138:	74fb      	strb	r3, [r7, #19]
 801213a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801213e:	005b      	lsls	r3, r3, #1
 8012140:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8012144:	69fb      	ldr	r3, [r7, #28]
 8012146:	3301      	adds	r3, #1
 8012148:	61fb      	str	r3, [r7, #28]
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	6a1b      	ldr	r3, [r3, #32]
 801214e:	3b02      	subs	r3, #2
 8012150:	69fa      	ldr	r2, [r7, #28]
 8012152:	429a      	cmp	r2, r3
 8012154:	d307      	bcc.n	8012166 <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 8012156:	2300      	movs	r3, #0
 8012158:	61fb      	str	r3, [r7, #28]
 801215a:	2300      	movs	r3, #0
 801215c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	899b      	ldrh	r3, [r3, #12]
 8012164:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 8012166:	7cfb      	ldrb	r3, [r7, #19]
 8012168:	2b00      	cmp	r3, #0
 801216a:	d109      	bne.n	8012180 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 801216c:	697b      	ldr	r3, [r7, #20]
 801216e:	3301      	adds	r3, #1
 8012170:	617b      	str	r3, [r7, #20]
 8012172:	697a      	ldr	r2, [r7, #20]
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	429a      	cmp	r2, r3
 8012178:	d106      	bne.n	8012188 <find_bitmap+0xd8>
 801217a:	69bb      	ldr	r3, [r7, #24]
 801217c:	3302      	adds	r3, #2
 801217e:	e01a      	b.n	80121b6 <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8012180:	69fb      	ldr	r3, [r7, #28]
 8012182:	61bb      	str	r3, [r7, #24]
 8012184:	2300      	movs	r3, #0
 8012186:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 8012188:	69fa      	ldr	r2, [r7, #28]
 801218a:	68bb      	ldr	r3, [r7, #8]
 801218c:	429a      	cmp	r2, r3
 801218e:	d101      	bne.n	8012194 <find_bitmap+0xe4>
 8012190:	2300      	movs	r3, #0
 8012192:	e010      	b.n	80121b6 <find_bitmap+0x106>
			} while (bm);
 8012194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012198:	2b00      	cmp	r3, #0
 801219a:	d1c5      	bne.n	8012128 <find_bitmap+0x78>
			bm = 1;
 801219c:	2301      	movs	r3, #1
 801219e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 80121a2:	6a3b      	ldr	r3, [r7, #32]
 80121a4:	3301      	adds	r3, #1
 80121a6:	623b      	str	r3, [r7, #32]
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	899b      	ldrh	r3, [r3, #12]
 80121ac:	461a      	mov	r2, r3
 80121ae:	6a3b      	ldr	r3, [r7, #32]
 80121b0:	4293      	cmp	r3, r2
 80121b2:	d3b9      	bcc.n	8012128 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 80121b4:	e793      	b.n	80120de <find_bitmap+0x2e>
	}
}
 80121b6:	4618      	mov	r0, r3
 80121b8:	3728      	adds	r7, #40	; 0x28
 80121ba:	46bd      	mov	sp, r7
 80121bc:	bd80      	pop	{r7, pc}

080121be <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 80121be:	b580      	push	{r7, lr}
 80121c0:	b088      	sub	sp, #32
 80121c2:	af00      	add	r7, sp, #0
 80121c4:	60f8      	str	r0, [r7, #12]
 80121c6:	60b9      	str	r1, [r7, #8]
 80121c8:	607a      	str	r2, [r7, #4]
 80121ca:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 80121cc:	68bb      	ldr	r3, [r7, #8]
 80121ce:	3b02      	subs	r3, #2
 80121d0:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80121d6:	68bb      	ldr	r3, [r7, #8]
 80121d8:	08db      	lsrs	r3, r3, #3
 80121da:	68f9      	ldr	r1, [r7, #12]
 80121dc:	8989      	ldrh	r1, [r1, #12]
 80121de:	fbb3 f3f1 	udiv	r3, r3, r1
 80121e2:	4413      	add	r3, r2
 80121e4:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 80121e6:	68bb      	ldr	r3, [r7, #8]
 80121e8:	08db      	lsrs	r3, r3, #3
 80121ea:	68fa      	ldr	r2, [r7, #12]
 80121ec:	8992      	ldrh	r2, [r2, #12]
 80121ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80121f2:	fb02 f201 	mul.w	r2, r2, r1
 80121f6:	1a9b      	subs	r3, r3, r2
 80121f8:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 80121fa:	68bb      	ldr	r3, [r7, #8]
 80121fc:	f003 0307 	and.w	r3, r3, #7
 8012200:	2201      	movs	r2, #1
 8012202:	fa02 f303 	lsl.w	r3, r2, r3
 8012206:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8012208:	697b      	ldr	r3, [r7, #20]
 801220a:	1c5a      	adds	r2, r3, #1
 801220c:	617a      	str	r2, [r7, #20]
 801220e:	4619      	mov	r1, r3
 8012210:	68f8      	ldr	r0, [r7, #12]
 8012212:	f7ff fc19 	bl	8011a48 <move_window>
 8012216:	4603      	mov	r3, r0
 8012218:	2b00      	cmp	r3, #0
 801221a:	d001      	beq.n	8012220 <change_bitmap+0x62>
 801221c:	2301      	movs	r3, #1
 801221e:	e03f      	b.n	80122a0 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8012220:	68fa      	ldr	r2, [r7, #12]
 8012222:	69bb      	ldr	r3, [r7, #24]
 8012224:	4413      	add	r3, r2
 8012226:	333c      	adds	r3, #60	; 0x3c
 8012228:	781a      	ldrb	r2, [r3, #0]
 801222a:	7ffb      	ldrb	r3, [r7, #31]
 801222c:	4013      	ands	r3, r2
 801222e:	b2db      	uxtb	r3, r3
 8012230:	2b00      	cmp	r3, #0
 8012232:	bf14      	ite	ne
 8012234:	2301      	movne	r3, #1
 8012236:	2300      	moveq	r3, #0
 8012238:	b2db      	uxtb	r3, r3
 801223a:	461a      	mov	r2, r3
 801223c:	683b      	ldr	r3, [r7, #0]
 801223e:	4293      	cmp	r3, r2
 8012240:	d101      	bne.n	8012246 <change_bitmap+0x88>
 8012242:	2302      	movs	r3, #2
 8012244:	e02c      	b.n	80122a0 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 8012246:	68fa      	ldr	r2, [r7, #12]
 8012248:	69bb      	ldr	r3, [r7, #24]
 801224a:	4413      	add	r3, r2
 801224c:	333c      	adds	r3, #60	; 0x3c
 801224e:	781a      	ldrb	r2, [r3, #0]
 8012250:	7ffb      	ldrb	r3, [r7, #31]
 8012252:	4053      	eors	r3, r2
 8012254:	b2d9      	uxtb	r1, r3
 8012256:	68fa      	ldr	r2, [r7, #12]
 8012258:	69bb      	ldr	r3, [r7, #24]
 801225a:	4413      	add	r3, r2
 801225c:	333c      	adds	r3, #60	; 0x3c
 801225e:	460a      	mov	r2, r1
 8012260:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	2201      	movs	r2, #1
 8012266:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	3b01      	subs	r3, #1
 801226c:	607b      	str	r3, [r7, #4]
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	2b00      	cmp	r3, #0
 8012272:	d101      	bne.n	8012278 <change_bitmap+0xba>
 8012274:	2300      	movs	r3, #0
 8012276:	e013      	b.n	80122a0 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 8012278:	7ffb      	ldrb	r3, [r7, #31]
 801227a:	005b      	lsls	r3, r3, #1
 801227c:	77fb      	strb	r3, [r7, #31]
 801227e:	7ffb      	ldrb	r3, [r7, #31]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d1cd      	bne.n	8012220 <change_bitmap+0x62>
			bm = 1;
 8012284:	2301      	movs	r3, #1
 8012286:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8012288:	69bb      	ldr	r3, [r7, #24]
 801228a:	3301      	adds	r3, #1
 801228c:	61bb      	str	r3, [r7, #24]
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	899b      	ldrh	r3, [r3, #12]
 8012292:	461a      	mov	r2, r3
 8012294:	69bb      	ldr	r3, [r7, #24]
 8012296:	4293      	cmp	r3, r2
 8012298:	d3c2      	bcc.n	8012220 <change_bitmap+0x62>
		i = 0;
 801229a:	2300      	movs	r3, #0
 801229c:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 801229e:	e7b3      	b.n	8012208 <change_bitmap+0x4a>
	}
}
 80122a0:	4618      	mov	r0, r3
 80122a2:	3720      	adds	r7, #32
 80122a4:	46bd      	mov	sp, r7
 80122a6:	bd80      	pop	{r7, pc}

080122a8 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 80122a8:	b580      	push	{r7, lr}
 80122aa:	b086      	sub	sp, #24
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	79db      	ldrb	r3, [r3, #7]
 80122b4:	2b03      	cmp	r3, #3
 80122b6:	d121      	bne.n	80122fc <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	689b      	ldr	r3, [r3, #8]
 80122bc:	617b      	str	r3, [r7, #20]
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	699b      	ldr	r3, [r3, #24]
 80122c2:	613b      	str	r3, [r7, #16]
 80122c4:	e014      	b.n	80122f0 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	6818      	ldr	r0, [r3, #0]
 80122ca:	697b      	ldr	r3, [r7, #20]
 80122cc:	3301      	adds	r3, #1
 80122ce:	461a      	mov	r2, r3
 80122d0:	6979      	ldr	r1, [r7, #20]
 80122d2:	f7ff fdcb 	bl	8011e6c <put_fat>
 80122d6:	4603      	mov	r3, r0
 80122d8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 80122da:	7bfb      	ldrb	r3, [r7, #15]
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d001      	beq.n	80122e4 <fill_first_frag+0x3c>
 80122e0:	7bfb      	ldrb	r3, [r7, #15]
 80122e2:	e00c      	b.n	80122fe <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 80122e4:	697b      	ldr	r3, [r7, #20]
 80122e6:	3301      	adds	r3, #1
 80122e8:	617b      	str	r3, [r7, #20]
 80122ea:	693b      	ldr	r3, [r7, #16]
 80122ec:	3b01      	subs	r3, #1
 80122ee:	613b      	str	r3, [r7, #16]
 80122f0:	693b      	ldr	r3, [r7, #16]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d1e7      	bne.n	80122c6 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	2200      	movs	r2, #0
 80122fa:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 80122fc:	2300      	movs	r3, #0
}
 80122fe:	4618      	mov	r0, r3
 8012300:	3718      	adds	r7, #24
 8012302:	46bd      	mov	sp, r7
 8012304:	bd80      	pop	{r7, pc}

08012306 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 8012306:	b580      	push	{r7, lr}
 8012308:	b086      	sub	sp, #24
 801230a:	af00      	add	r7, sp, #0
 801230c:	60f8      	str	r0, [r7, #12]
 801230e:	60b9      	str	r1, [r7, #8]
 8012310:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8012312:	e020      	b.n	8012356 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	6818      	ldr	r0, [r3, #0]
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	69db      	ldr	r3, [r3, #28]
 801231c:	68ba      	ldr	r2, [r7, #8]
 801231e:	1ad3      	subs	r3, r2, r3
 8012320:	1c59      	adds	r1, r3, #1
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	69db      	ldr	r3, [r3, #28]
 8012326:	2b01      	cmp	r3, #1
 8012328:	d905      	bls.n	8012336 <fill_last_frag+0x30>
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	69db      	ldr	r3, [r3, #28]
 801232e:	68ba      	ldr	r2, [r7, #8]
 8012330:	1ad3      	subs	r3, r2, r3
 8012332:	3302      	adds	r3, #2
 8012334:	e000      	b.n	8012338 <fill_last_frag+0x32>
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	461a      	mov	r2, r3
 801233a:	f7ff fd97 	bl	8011e6c <put_fat>
 801233e:	4603      	mov	r3, r0
 8012340:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8012342:	7dfb      	ldrb	r3, [r7, #23]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d001      	beq.n	801234c <fill_last_frag+0x46>
 8012348:	7dfb      	ldrb	r3, [r7, #23]
 801234a:	e009      	b.n	8012360 <fill_last_frag+0x5a>
		obj->n_frag--;
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	69db      	ldr	r3, [r3, #28]
 8012350:	1e5a      	subs	r2, r3, #1
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	69db      	ldr	r3, [r3, #28]
 801235a:	2b00      	cmp	r3, #0
 801235c:	d1da      	bne.n	8012314 <fill_last_frag+0xe>
	}
	return FR_OK;
 801235e:	2300      	movs	r3, #0
}
 8012360:	4618      	mov	r0, r3
 8012362:	3718      	adds	r7, #24
 8012364:	46bd      	mov	sp, r7
 8012366:	bd80      	pop	{r7, pc}

08012368 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012368:	b580      	push	{r7, lr}
 801236a:	b08a      	sub	sp, #40	; 0x28
 801236c:	af00      	add	r7, sp, #0
 801236e:	60f8      	str	r0, [r7, #12]
 8012370:	60b9      	str	r1, [r7, #8]
 8012372:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8012374:	2300      	movs	r3, #0
 8012376:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 801237e:	68bb      	ldr	r3, [r7, #8]
 8012380:	627b      	str	r3, [r7, #36]	; 0x24
 8012382:	68bb      	ldr	r3, [r7, #8]
 8012384:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012386:	68bb      	ldr	r3, [r7, #8]
 8012388:	2b01      	cmp	r3, #1
 801238a:	d904      	bls.n	8012396 <remove_chain+0x2e>
 801238c:	69bb      	ldr	r3, [r7, #24]
 801238e:	6a1b      	ldr	r3, [r3, #32]
 8012390:	68ba      	ldr	r2, [r7, #8]
 8012392:	429a      	cmp	r2, r3
 8012394:	d301      	bcc.n	801239a <remove_chain+0x32>
 8012396:	2302      	movs	r3, #2
 8012398:	e096      	b.n	80124c8 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d014      	beq.n	80123ca <remove_chain+0x62>
 80123a0:	69bb      	ldr	r3, [r7, #24]
 80123a2:	781b      	ldrb	r3, [r3, #0]
 80123a4:	2b04      	cmp	r3, #4
 80123a6:	d103      	bne.n	80123b0 <remove_chain+0x48>
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	79db      	ldrb	r3, [r3, #7]
 80123ac:	2b02      	cmp	r3, #2
 80123ae:	d00c      	beq.n	80123ca <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80123b0:	f04f 32ff 	mov.w	r2, #4294967295
 80123b4:	6879      	ldr	r1, [r7, #4]
 80123b6:	69b8      	ldr	r0, [r7, #24]
 80123b8:	f7ff fd58 	bl	8011e6c <put_fat>
 80123bc:	4603      	mov	r3, r0
 80123be:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80123c0:	7ffb      	ldrb	r3, [r7, #31]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d001      	beq.n	80123ca <remove_chain+0x62>
 80123c6:	7ffb      	ldrb	r3, [r7, #31]
 80123c8:	e07e      	b.n	80124c8 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80123ca:	68b9      	ldr	r1, [r7, #8]
 80123cc:	68f8      	ldr	r0, [r7, #12]
 80123ce:	f7ff fbf9 	bl	8011bc4 <get_fat>
 80123d2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80123d4:	697b      	ldr	r3, [r7, #20]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d055      	beq.n	8012486 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80123da:	697b      	ldr	r3, [r7, #20]
 80123dc:	2b01      	cmp	r3, #1
 80123de:	d101      	bne.n	80123e4 <remove_chain+0x7c>
 80123e0:	2302      	movs	r3, #2
 80123e2:	e071      	b.n	80124c8 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80123e4:	697b      	ldr	r3, [r7, #20]
 80123e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123ea:	d101      	bne.n	80123f0 <remove_chain+0x88>
 80123ec:	2301      	movs	r3, #1
 80123ee:	e06b      	b.n	80124c8 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 80123f0:	69bb      	ldr	r3, [r7, #24]
 80123f2:	781b      	ldrb	r3, [r3, #0]
 80123f4:	2b04      	cmp	r3, #4
 80123f6:	d00b      	beq.n	8012410 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80123f8:	2200      	movs	r2, #0
 80123fa:	68b9      	ldr	r1, [r7, #8]
 80123fc:	69b8      	ldr	r0, [r7, #24]
 80123fe:	f7ff fd35 	bl	8011e6c <put_fat>
 8012402:	4603      	mov	r3, r0
 8012404:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8012406:	7ffb      	ldrb	r3, [r7, #31]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d001      	beq.n	8012410 <remove_chain+0xa8>
 801240c:	7ffb      	ldrb	r3, [r7, #31]
 801240e:	e05b      	b.n	80124c8 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012410:	69bb      	ldr	r3, [r7, #24]
 8012412:	69da      	ldr	r2, [r3, #28]
 8012414:	69bb      	ldr	r3, [r7, #24]
 8012416:	6a1b      	ldr	r3, [r3, #32]
 8012418:	3b02      	subs	r3, #2
 801241a:	429a      	cmp	r2, r3
 801241c:	d20b      	bcs.n	8012436 <remove_chain+0xce>
			fs->free_clst++;
 801241e:	69bb      	ldr	r3, [r7, #24]
 8012420:	69db      	ldr	r3, [r3, #28]
 8012422:	1c5a      	adds	r2, r3, #1
 8012424:	69bb      	ldr	r3, [r7, #24]
 8012426:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 8012428:	69bb      	ldr	r3, [r7, #24]
 801242a:	791b      	ldrb	r3, [r3, #4]
 801242c:	f043 0301 	orr.w	r3, r3, #1
 8012430:	b2da      	uxtb	r2, r3
 8012432:	69bb      	ldr	r3, [r7, #24]
 8012434:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8012436:	6a3b      	ldr	r3, [r7, #32]
 8012438:	3301      	adds	r3, #1
 801243a:	697a      	ldr	r2, [r7, #20]
 801243c:	429a      	cmp	r2, r3
 801243e:	d102      	bne.n	8012446 <remove_chain+0xde>
			ecl = nxt;
 8012440:	697b      	ldr	r3, [r7, #20]
 8012442:	623b      	str	r3, [r7, #32]
 8012444:	e017      	b.n	8012476 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8012446:	69bb      	ldr	r3, [r7, #24]
 8012448:	781b      	ldrb	r3, [r3, #0]
 801244a:	2b04      	cmp	r3, #4
 801244c:	d10f      	bne.n	801246e <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 801244e:	6a3a      	ldr	r2, [r7, #32]
 8012450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012452:	1ad3      	subs	r3, r2, r3
 8012454:	1c5a      	adds	r2, r3, #1
 8012456:	2300      	movs	r3, #0
 8012458:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801245a:	69b8      	ldr	r0, [r7, #24]
 801245c:	f7ff feaf 	bl	80121be <change_bitmap>
 8012460:	4603      	mov	r3, r0
 8012462:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 8012464:	7ffb      	ldrb	r3, [r7, #31]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d001      	beq.n	801246e <remove_chain+0x106>
 801246a:	7ffb      	ldrb	r3, [r7, #31]
 801246c:	e02c      	b.n	80124c8 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 801246e:	697b      	ldr	r3, [r7, #20]
 8012470:	623b      	str	r3, [r7, #32]
 8012472:	6a3b      	ldr	r3, [r7, #32]
 8012474:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 8012476:	697b      	ldr	r3, [r7, #20]
 8012478:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801247a:	69bb      	ldr	r3, [r7, #24]
 801247c:	6a1b      	ldr	r3, [r3, #32]
 801247e:	68ba      	ldr	r2, [r7, #8]
 8012480:	429a      	cmp	r2, r3
 8012482:	d3a2      	bcc.n	80123ca <remove_chain+0x62>
 8012484:	e000      	b.n	8012488 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 8012486:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8012488:	69bb      	ldr	r3, [r7, #24]
 801248a:	781b      	ldrb	r3, [r3, #0]
 801248c:	2b04      	cmp	r3, #4
 801248e:	d11a      	bne.n	80124c6 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d103      	bne.n	801249e <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	2200      	movs	r2, #0
 801249a:	71da      	strb	r2, [r3, #7]
 801249c:	e013      	b.n	80124c6 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	79db      	ldrb	r3, [r3, #7]
 80124a2:	2b03      	cmp	r3, #3
 80124a4:	d10f      	bne.n	80124c6 <remove_chain+0x15e>
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	689b      	ldr	r3, [r3, #8]
 80124aa:	687a      	ldr	r2, [r7, #4]
 80124ac:	429a      	cmp	r2, r3
 80124ae:	d30a      	bcc.n	80124c6 <remove_chain+0x15e>
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	689a      	ldr	r2, [r3, #8]
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	699b      	ldr	r3, [r3, #24]
 80124b8:	4413      	add	r3, r2
 80124ba:	687a      	ldr	r2, [r7, #4]
 80124bc:	429a      	cmp	r2, r3
 80124be:	d802      	bhi.n	80124c6 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	2202      	movs	r2, #2
 80124c4:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 80124c6:	2300      	movs	r3, #0
}
 80124c8:	4618      	mov	r0, r3
 80124ca:	3728      	adds	r7, #40	; 0x28
 80124cc:	46bd      	mov	sp, r7
 80124ce:	bd80      	pop	{r7, pc}

080124d0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80124d0:	b580      	push	{r7, lr}
 80124d2:	b088      	sub	sp, #32
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	6078      	str	r0, [r7, #4]
 80124d8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80124e0:	683b      	ldr	r3, [r7, #0]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d10d      	bne.n	8012502 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80124e6:	693b      	ldr	r3, [r7, #16]
 80124e8:	699b      	ldr	r3, [r3, #24]
 80124ea:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80124ec:	69bb      	ldr	r3, [r7, #24]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d004      	beq.n	80124fc <create_chain+0x2c>
 80124f2:	693b      	ldr	r3, [r7, #16]
 80124f4:	6a1b      	ldr	r3, [r3, #32]
 80124f6:	69ba      	ldr	r2, [r7, #24]
 80124f8:	429a      	cmp	r2, r3
 80124fa:	d31b      	bcc.n	8012534 <create_chain+0x64>
 80124fc:	2301      	movs	r3, #1
 80124fe:	61bb      	str	r3, [r7, #24]
 8012500:	e018      	b.n	8012534 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012502:	6839      	ldr	r1, [r7, #0]
 8012504:	6878      	ldr	r0, [r7, #4]
 8012506:	f7ff fb5d 	bl	8011bc4 <get_fat>
 801250a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	2b01      	cmp	r3, #1
 8012510:	d801      	bhi.n	8012516 <create_chain+0x46>
 8012512:	2301      	movs	r3, #1
 8012514:	e0d9      	b.n	80126ca <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	f1b3 3fff 	cmp.w	r3, #4294967295
 801251c:	d101      	bne.n	8012522 <create_chain+0x52>
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	e0d3      	b.n	80126ca <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012522:	693b      	ldr	r3, [r7, #16]
 8012524:	6a1b      	ldr	r3, [r3, #32]
 8012526:	68fa      	ldr	r2, [r7, #12]
 8012528:	429a      	cmp	r2, r3
 801252a:	d201      	bcs.n	8012530 <create_chain+0x60>
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	e0cc      	b.n	80126ca <create_chain+0x1fa>
		scl = clst;
 8012530:	683b      	ldr	r3, [r7, #0]
 8012532:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8012534:	693b      	ldr	r3, [r7, #16]
 8012536:	781b      	ldrb	r3, [r3, #0]
 8012538:	2b04      	cmp	r3, #4
 801253a:	d164      	bne.n	8012606 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 801253c:	2201      	movs	r2, #1
 801253e:	69b9      	ldr	r1, [r7, #24]
 8012540:	6938      	ldr	r0, [r7, #16]
 8012542:	f7ff fdb5 	bl	80120b0 <find_bitmap>
 8012546:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8012548:	69fb      	ldr	r3, [r7, #28]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d003      	beq.n	8012556 <create_chain+0x86>
 801254e:	69fb      	ldr	r3, [r7, #28]
 8012550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012554:	d101      	bne.n	801255a <create_chain+0x8a>
 8012556:	69fb      	ldr	r3, [r7, #28]
 8012558:	e0b7      	b.n	80126ca <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 801255a:	2301      	movs	r3, #1
 801255c:	2201      	movs	r2, #1
 801255e:	69f9      	ldr	r1, [r7, #28]
 8012560:	6938      	ldr	r0, [r7, #16]
 8012562:	f7ff fe2c 	bl	80121be <change_bitmap>
 8012566:	4603      	mov	r3, r0
 8012568:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 801256a:	7dfb      	ldrb	r3, [r7, #23]
 801256c:	2b02      	cmp	r3, #2
 801256e:	d101      	bne.n	8012574 <create_chain+0xa4>
 8012570:	2301      	movs	r3, #1
 8012572:	e0aa      	b.n	80126ca <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8012574:	7dfb      	ldrb	r3, [r7, #23]
 8012576:	2b01      	cmp	r3, #1
 8012578:	d102      	bne.n	8012580 <create_chain+0xb0>
 801257a:	f04f 33ff 	mov.w	r3, #4294967295
 801257e:	e0a4      	b.n	80126ca <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 8012580:	683b      	ldr	r3, [r7, #0]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d103      	bne.n	801258e <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	2202      	movs	r2, #2
 801258a:	71da      	strb	r2, [r3, #7]
 801258c:	e011      	b.n	80125b2 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	79db      	ldrb	r3, [r3, #7]
 8012592:	2b02      	cmp	r3, #2
 8012594:	d10d      	bne.n	80125b2 <create_chain+0xe2>
 8012596:	69bb      	ldr	r3, [r7, #24]
 8012598:	3301      	adds	r3, #1
 801259a:	69fa      	ldr	r2, [r7, #28]
 801259c:	429a      	cmp	r2, r3
 801259e:	d008      	beq.n	80125b2 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	689b      	ldr	r3, [r3, #8]
 80125a4:	69ba      	ldr	r2, [r7, #24]
 80125a6:	1ad2      	subs	r2, r2, r3
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	2203      	movs	r2, #3
 80125b0:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	79db      	ldrb	r3, [r3, #7]
 80125b6:	2b02      	cmp	r3, #2
 80125b8:	d064      	beq.n	8012684 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 80125ba:	683b      	ldr	r3, [r7, #0]
 80125bc:	3301      	adds	r3, #1
 80125be:	69fa      	ldr	r2, [r7, #28]
 80125c0:	429a      	cmp	r2, r3
 80125c2:	d10b      	bne.n	80125dc <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	69db      	ldr	r3, [r3, #28]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d003      	beq.n	80125d4 <create_chain+0x104>
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	69db      	ldr	r3, [r3, #28]
 80125d0:	3301      	adds	r3, #1
 80125d2:	e000      	b.n	80125d6 <create_chain+0x106>
 80125d4:	2302      	movs	r3, #2
 80125d6:	687a      	ldr	r2, [r7, #4]
 80125d8:	61d3      	str	r3, [r2, #28]
 80125da:	e053      	b.n	8012684 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	69db      	ldr	r3, [r3, #28]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d102      	bne.n	80125ea <create_chain+0x11a>
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	2201      	movs	r2, #1
 80125e8:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 80125ea:	69fa      	ldr	r2, [r7, #28]
 80125ec:	6839      	ldr	r1, [r7, #0]
 80125ee:	6878      	ldr	r0, [r7, #4]
 80125f0:	f7ff fe89 	bl	8012306 <fill_last_frag>
 80125f4:	4603      	mov	r3, r0
 80125f6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 80125f8:	7dfb      	ldrb	r3, [r7, #23]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d142      	bne.n	8012684 <create_chain+0x1b4>
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	2201      	movs	r2, #1
 8012602:	61da      	str	r2, [r3, #28]
 8012604:	e03e      	b.n	8012684 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012606:	69bb      	ldr	r3, [r7, #24]
 8012608:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801260a:	69fb      	ldr	r3, [r7, #28]
 801260c:	3301      	adds	r3, #1
 801260e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012610:	693b      	ldr	r3, [r7, #16]
 8012612:	6a1b      	ldr	r3, [r3, #32]
 8012614:	69fa      	ldr	r2, [r7, #28]
 8012616:	429a      	cmp	r2, r3
 8012618:	d307      	bcc.n	801262a <create_chain+0x15a>
				ncl = 2;
 801261a:	2302      	movs	r3, #2
 801261c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801261e:	69fa      	ldr	r2, [r7, #28]
 8012620:	69bb      	ldr	r3, [r7, #24]
 8012622:	429a      	cmp	r2, r3
 8012624:	d901      	bls.n	801262a <create_chain+0x15a>
 8012626:	2300      	movs	r3, #0
 8012628:	e04f      	b.n	80126ca <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801262a:	69f9      	ldr	r1, [r7, #28]
 801262c:	6878      	ldr	r0, [r7, #4]
 801262e:	f7ff fac9 	bl	8011bc4 <get_fat>
 8012632:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	2b00      	cmp	r3, #0
 8012638:	d00e      	beq.n	8012658 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	2b01      	cmp	r3, #1
 801263e:	d003      	beq.n	8012648 <create_chain+0x178>
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012646:	d101      	bne.n	801264c <create_chain+0x17c>
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	e03e      	b.n	80126ca <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 801264c:	69fa      	ldr	r2, [r7, #28]
 801264e:	69bb      	ldr	r3, [r7, #24]
 8012650:	429a      	cmp	r2, r3
 8012652:	d1da      	bne.n	801260a <create_chain+0x13a>
 8012654:	2300      	movs	r3, #0
 8012656:	e038      	b.n	80126ca <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 8012658:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801265a:	f04f 32ff 	mov.w	r2, #4294967295
 801265e:	69f9      	ldr	r1, [r7, #28]
 8012660:	6938      	ldr	r0, [r7, #16]
 8012662:	f7ff fc03 	bl	8011e6c <put_fat>
 8012666:	4603      	mov	r3, r0
 8012668:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801266a:	7dfb      	ldrb	r3, [r7, #23]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d109      	bne.n	8012684 <create_chain+0x1b4>
 8012670:	683b      	ldr	r3, [r7, #0]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d006      	beq.n	8012684 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8012676:	69fa      	ldr	r2, [r7, #28]
 8012678:	6839      	ldr	r1, [r7, #0]
 801267a:	6938      	ldr	r0, [r7, #16]
 801267c:	f7ff fbf6 	bl	8011e6c <put_fat>
 8012680:	4603      	mov	r3, r0
 8012682:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8012684:	7dfb      	ldrb	r3, [r7, #23]
 8012686:	2b00      	cmp	r3, #0
 8012688:	d116      	bne.n	80126b8 <create_chain+0x1e8>
		fs->last_clst = ncl;
 801268a:	693b      	ldr	r3, [r7, #16]
 801268c:	69fa      	ldr	r2, [r7, #28]
 801268e:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012690:	693b      	ldr	r3, [r7, #16]
 8012692:	69da      	ldr	r2, [r3, #28]
 8012694:	693b      	ldr	r3, [r7, #16]
 8012696:	6a1b      	ldr	r3, [r3, #32]
 8012698:	3b02      	subs	r3, #2
 801269a:	429a      	cmp	r2, r3
 801269c:	d804      	bhi.n	80126a8 <create_chain+0x1d8>
 801269e:	693b      	ldr	r3, [r7, #16]
 80126a0:	69db      	ldr	r3, [r3, #28]
 80126a2:	1e5a      	subs	r2, r3, #1
 80126a4:	693b      	ldr	r3, [r7, #16]
 80126a6:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 80126a8:	693b      	ldr	r3, [r7, #16]
 80126aa:	791b      	ldrb	r3, [r3, #4]
 80126ac:	f043 0301 	orr.w	r3, r3, #1
 80126b0:	b2da      	uxtb	r2, r3
 80126b2:	693b      	ldr	r3, [r7, #16]
 80126b4:	711a      	strb	r2, [r3, #4]
 80126b6:	e007      	b.n	80126c8 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80126b8:	7dfb      	ldrb	r3, [r7, #23]
 80126ba:	2b01      	cmp	r3, #1
 80126bc:	d102      	bne.n	80126c4 <create_chain+0x1f4>
 80126be:	f04f 33ff 	mov.w	r3, #4294967295
 80126c2:	e000      	b.n	80126c6 <create_chain+0x1f6>
 80126c4:	2301      	movs	r3, #1
 80126c6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80126c8:	69fb      	ldr	r3, [r7, #28]
}
 80126ca:	4618      	mov	r0, r3
 80126cc:	3720      	adds	r7, #32
 80126ce:	46bd      	mov	sp, r7
 80126d0:	bd80      	pop	{r7, pc}

080126d2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80126d2:	b590      	push	{r4, r7, lr}
 80126d4:	b089      	sub	sp, #36	; 0x24
 80126d6:	af00      	add	r7, sp, #0
 80126d8:	60f8      	str	r0, [r7, #12]
 80126da:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80126e8:	3304      	adds	r3, #4
 80126ea:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80126ec:	697b      	ldr	r3, [r7, #20]
 80126ee:	899b      	ldrh	r3, [r3, #12]
 80126f0:	b29b      	uxth	r3, r3
 80126f2:	f04f 0400 	mov.w	r4, #0
 80126f6:	461a      	mov	r2, r3
 80126f8:	4623      	mov	r3, r4
 80126fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80126fe:	f7ed fdeb 	bl	80002d8 <__aeabi_uldivmod>
 8012702:	4603      	mov	r3, r0
 8012704:	460c      	mov	r4, r1
 8012706:	4618      	mov	r0, r3
 8012708:	4621      	mov	r1, r4
 801270a:	697b      	ldr	r3, [r7, #20]
 801270c:	895b      	ldrh	r3, [r3, #10]
 801270e:	b29b      	uxth	r3, r3
 8012710:	f04f 0400 	mov.w	r4, #0
 8012714:	461a      	mov	r2, r3
 8012716:	4623      	mov	r3, r4
 8012718:	f7ed fdde 	bl	80002d8 <__aeabi_uldivmod>
 801271c:	4603      	mov	r3, r0
 801271e:	460c      	mov	r4, r1
 8012720:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012722:	69bb      	ldr	r3, [r7, #24]
 8012724:	1d1a      	adds	r2, r3, #4
 8012726:	61ba      	str	r2, [r7, #24]
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801272c:	693b      	ldr	r3, [r7, #16]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d101      	bne.n	8012736 <clmt_clust+0x64>
 8012732:	2300      	movs	r3, #0
 8012734:	e010      	b.n	8012758 <clmt_clust+0x86>
		if (cl < ncl) break;	/* In this fragment? */
 8012736:	69fa      	ldr	r2, [r7, #28]
 8012738:	693b      	ldr	r3, [r7, #16]
 801273a:	429a      	cmp	r2, r3
 801273c:	d307      	bcc.n	801274e <clmt_clust+0x7c>
		cl -= ncl; tbl++;		/* Next fragment */
 801273e:	69fa      	ldr	r2, [r7, #28]
 8012740:	693b      	ldr	r3, [r7, #16]
 8012742:	1ad3      	subs	r3, r2, r3
 8012744:	61fb      	str	r3, [r7, #28]
 8012746:	69bb      	ldr	r3, [r7, #24]
 8012748:	3304      	adds	r3, #4
 801274a:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801274c:	e7e9      	b.n	8012722 <clmt_clust+0x50>
		if (cl < ncl) break;	/* In this fragment? */
 801274e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012750:	69bb      	ldr	r3, [r7, #24]
 8012752:	681a      	ldr	r2, [r3, #0]
 8012754:	69fb      	ldr	r3, [r7, #28]
 8012756:	4413      	add	r3, r2
}
 8012758:	4618      	mov	r0, r3
 801275a:	3724      	adds	r7, #36	; 0x24
 801275c:	46bd      	mov	sp, r7
 801275e:	bd90      	pop	{r4, r7, pc}

08012760 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8012760:	b580      	push	{r7, lr}
 8012762:	b086      	sub	sp, #24
 8012764:	af00      	add	r7, sp, #0
 8012766:	6078      	str	r0, [r7, #4]
 8012768:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8012770:	693b      	ldr	r3, [r7, #16]
 8012772:	781b      	ldrb	r3, [r3, #0]
 8012774:	2b04      	cmp	r3, #4
 8012776:	d102      	bne.n	801277e <dir_sdi+0x1e>
 8012778:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801277c:	e001      	b.n	8012782 <dir_sdi+0x22>
 801277e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8012782:	683b      	ldr	r3, [r7, #0]
 8012784:	429a      	cmp	r2, r3
 8012786:	d904      	bls.n	8012792 <dir_sdi+0x32>
 8012788:	683b      	ldr	r3, [r7, #0]
 801278a:	f003 031f 	and.w	r3, r3, #31
 801278e:	2b00      	cmp	r3, #0
 8012790:	d001      	beq.n	8012796 <dir_sdi+0x36>
		return FR_INT_ERR;
 8012792:	2302      	movs	r3, #2
 8012794:	e074      	b.n	8012880 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	683a      	ldr	r2, [r7, #0]
 801279a:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	689b      	ldr	r3, [r3, #8]
 80127a0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80127a2:	697b      	ldr	r3, [r7, #20]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d109      	bne.n	80127bc <dir_sdi+0x5c>
 80127a8:	693b      	ldr	r3, [r7, #16]
 80127aa:	781b      	ldrb	r3, [r3, #0]
 80127ac:	2b02      	cmp	r3, #2
 80127ae:	d905      	bls.n	80127bc <dir_sdi+0x5c>
		clst = fs->dirbase;
 80127b0:	693b      	ldr	r3, [r7, #16]
 80127b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127b4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	2200      	movs	r2, #0
 80127ba:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80127bc:	697b      	ldr	r3, [r7, #20]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d10c      	bne.n	80127dc <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80127c2:	683b      	ldr	r3, [r7, #0]
 80127c4:	095b      	lsrs	r3, r3, #5
 80127c6:	693a      	ldr	r2, [r7, #16]
 80127c8:	8912      	ldrh	r2, [r2, #8]
 80127ca:	4293      	cmp	r3, r2
 80127cc:	d301      	bcc.n	80127d2 <dir_sdi+0x72>
 80127ce:	2302      	movs	r3, #2
 80127d0:	e056      	b.n	8012880 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 80127d2:	693b      	ldr	r3, [r7, #16]
 80127d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	639a      	str	r2, [r3, #56]	; 0x38
 80127da:	e02d      	b.n	8012838 <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80127dc:	693b      	ldr	r3, [r7, #16]
 80127de:	895b      	ldrh	r3, [r3, #10]
 80127e0:	461a      	mov	r2, r3
 80127e2:	693b      	ldr	r3, [r7, #16]
 80127e4:	899b      	ldrh	r3, [r3, #12]
 80127e6:	fb03 f302 	mul.w	r3, r3, r2
 80127ea:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80127ec:	e019      	b.n	8012822 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	6979      	ldr	r1, [r7, #20]
 80127f2:	4618      	mov	r0, r3
 80127f4:	f7ff f9e6 	bl	8011bc4 <get_fat>
 80127f8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80127fa:	697b      	ldr	r3, [r7, #20]
 80127fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012800:	d101      	bne.n	8012806 <dir_sdi+0xa6>
 8012802:	2301      	movs	r3, #1
 8012804:	e03c      	b.n	8012880 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012806:	697b      	ldr	r3, [r7, #20]
 8012808:	2b01      	cmp	r3, #1
 801280a:	d904      	bls.n	8012816 <dir_sdi+0xb6>
 801280c:	693b      	ldr	r3, [r7, #16]
 801280e:	6a1b      	ldr	r3, [r3, #32]
 8012810:	697a      	ldr	r2, [r7, #20]
 8012812:	429a      	cmp	r2, r3
 8012814:	d301      	bcc.n	801281a <dir_sdi+0xba>
 8012816:	2302      	movs	r3, #2
 8012818:	e032      	b.n	8012880 <dir_sdi+0x120>
			ofs -= csz;
 801281a:	683a      	ldr	r2, [r7, #0]
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	1ad3      	subs	r3, r2, r3
 8012820:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012822:	683a      	ldr	r2, [r7, #0]
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	429a      	cmp	r2, r3
 8012828:	d2e1      	bcs.n	80127ee <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 801282a:	6979      	ldr	r1, [r7, #20]
 801282c:	6938      	ldr	r0, [r7, #16]
 801282e:	f7ff f9a9 	bl	8011b84 <clust2sect>
 8012832:	4602      	mov	r2, r0
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	697a      	ldr	r2, [r7, #20]
 801283c:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012842:	2b00      	cmp	r3, #0
 8012844:	d101      	bne.n	801284a <dir_sdi+0xea>
 8012846:	2302      	movs	r3, #2
 8012848:	e01a      	b.n	8012880 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801284e:	693b      	ldr	r3, [r7, #16]
 8012850:	899b      	ldrh	r3, [r3, #12]
 8012852:	4619      	mov	r1, r3
 8012854:	683b      	ldr	r3, [r7, #0]
 8012856:	fbb3 f3f1 	udiv	r3, r3, r1
 801285a:	441a      	add	r2, r3
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012860:	693b      	ldr	r3, [r7, #16]
 8012862:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8012866:	693b      	ldr	r3, [r7, #16]
 8012868:	899b      	ldrh	r3, [r3, #12]
 801286a:	461a      	mov	r2, r3
 801286c:	683b      	ldr	r3, [r7, #0]
 801286e:	fbb3 f0f2 	udiv	r0, r3, r2
 8012872:	fb02 f200 	mul.w	r2, r2, r0
 8012876:	1a9b      	subs	r3, r3, r2
 8012878:	18ca      	adds	r2, r1, r3
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 801287e:	2300      	movs	r3, #0
}
 8012880:	4618      	mov	r0, r3
 8012882:	3718      	adds	r7, #24
 8012884:	46bd      	mov	sp, r7
 8012886:	bd80      	pop	{r7, pc}

08012888 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8012888:	b580      	push	{r7, lr}
 801288a:	b086      	sub	sp, #24
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
 8012890:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801289c:	3320      	adds	r3, #32
 801289e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d00b      	beq.n	80128c0 <dir_next+0x38>
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	781b      	ldrb	r3, [r3, #0]
 80128ac:	2b04      	cmp	r3, #4
 80128ae:	d102      	bne.n	80128b6 <dir_next+0x2e>
 80128b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80128b4:	e001      	b.n	80128ba <dir_next+0x32>
 80128b6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80128ba:	68bb      	ldr	r3, [r7, #8]
 80128bc:	429a      	cmp	r2, r3
 80128be:	d801      	bhi.n	80128c4 <dir_next+0x3c>
 80128c0:	2304      	movs	r3, #4
 80128c2:	e0c3      	b.n	8012a4c <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	899b      	ldrh	r3, [r3, #12]
 80128c8:	461a      	mov	r2, r3
 80128ca:	68bb      	ldr	r3, [r7, #8]
 80128cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80128d0:	fb02 f201 	mul.w	r2, r2, r1
 80128d4:	1a9b      	subs	r3, r3, r2
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	f040 80a5 	bne.w	8012a26 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128e0:	1c5a      	adds	r2, r3, #1
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d10b      	bne.n	8012906 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80128ee:	68bb      	ldr	r3, [r7, #8]
 80128f0:	095b      	lsrs	r3, r3, #5
 80128f2:	68fa      	ldr	r2, [r7, #12]
 80128f4:	8912      	ldrh	r2, [r2, #8]
 80128f6:	4293      	cmp	r3, r2
 80128f8:	f0c0 8095 	bcc.w	8012a26 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	2200      	movs	r2, #0
 8012900:	639a      	str	r2, [r3, #56]	; 0x38
 8012902:	2304      	movs	r3, #4
 8012904:	e0a2      	b.n	8012a4c <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	899b      	ldrh	r3, [r3, #12]
 801290a:	461a      	mov	r2, r3
 801290c:	68bb      	ldr	r3, [r7, #8]
 801290e:	fbb3 f3f2 	udiv	r3, r3, r2
 8012912:	68fa      	ldr	r2, [r7, #12]
 8012914:	8952      	ldrh	r2, [r2, #10]
 8012916:	3a01      	subs	r2, #1
 8012918:	4013      	ands	r3, r2
 801291a:	2b00      	cmp	r3, #0
 801291c:	f040 8083 	bne.w	8012a26 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012920:	687a      	ldr	r2, [r7, #4]
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012926:	4619      	mov	r1, r3
 8012928:	4610      	mov	r0, r2
 801292a:	f7ff f94b 	bl	8011bc4 <get_fat>
 801292e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012930:	697b      	ldr	r3, [r7, #20]
 8012932:	2b01      	cmp	r3, #1
 8012934:	d801      	bhi.n	801293a <dir_next+0xb2>
 8012936:	2302      	movs	r3, #2
 8012938:	e088      	b.n	8012a4c <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801293a:	697b      	ldr	r3, [r7, #20]
 801293c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012940:	d101      	bne.n	8012946 <dir_next+0xbe>
 8012942:	2301      	movs	r3, #1
 8012944:	e082      	b.n	8012a4c <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	6a1b      	ldr	r3, [r3, #32]
 801294a:	697a      	ldr	r2, [r7, #20]
 801294c:	429a      	cmp	r2, r3
 801294e:	d360      	bcc.n	8012a12 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012950:	683b      	ldr	r3, [r7, #0]
 8012952:	2b00      	cmp	r3, #0
 8012954:	d104      	bne.n	8012960 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	2200      	movs	r2, #0
 801295a:	639a      	str	r2, [r3, #56]	; 0x38
 801295c:	2304      	movs	r3, #4
 801295e:	e075      	b.n	8012a4c <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012960:	687a      	ldr	r2, [r7, #4]
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012966:	4619      	mov	r1, r3
 8012968:	4610      	mov	r0, r2
 801296a:	f7ff fdb1 	bl	80124d0 <create_chain>
 801296e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012970:	697b      	ldr	r3, [r7, #20]
 8012972:	2b00      	cmp	r3, #0
 8012974:	d101      	bne.n	801297a <dir_next+0xf2>
 8012976:	2307      	movs	r3, #7
 8012978:	e068      	b.n	8012a4c <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801297a:	697b      	ldr	r3, [r7, #20]
 801297c:	2b01      	cmp	r3, #1
 801297e:	d101      	bne.n	8012984 <dir_next+0xfc>
 8012980:	2302      	movs	r3, #2
 8012982:	e063      	b.n	8012a4c <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012984:	697b      	ldr	r3, [r7, #20]
 8012986:	f1b3 3fff 	cmp.w	r3, #4294967295
 801298a:	d101      	bne.n	8012990 <dir_next+0x108>
 801298c:	2301      	movs	r3, #1
 801298e:	e05d      	b.n	8012a4c <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	79db      	ldrb	r3, [r3, #7]
 8012994:	f043 0304 	orr.w	r3, r3, #4
 8012998:	b2da      	uxtb	r2, r3
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801299e:	68f8      	ldr	r0, [r7, #12]
 80129a0:	f7ff f80e 	bl	80119c0 <sync_window>
 80129a4:	4603      	mov	r3, r0
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d001      	beq.n	80129ae <dir_next+0x126>
 80129aa:	2301      	movs	r3, #1
 80129ac:	e04e      	b.n	8012a4c <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	899b      	ldrh	r3, [r3, #12]
 80129b8:	461a      	mov	r2, r3
 80129ba:	2100      	movs	r1, #0
 80129bc:	f7fe fe37 	bl	801162e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80129c0:	2300      	movs	r3, #0
 80129c2:	613b      	str	r3, [r7, #16]
 80129c4:	6979      	ldr	r1, [r7, #20]
 80129c6:	68f8      	ldr	r0, [r7, #12]
 80129c8:	f7ff f8dc 	bl	8011b84 <clust2sect>
 80129cc:	4602      	mov	r2, r0
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	639a      	str	r2, [r3, #56]	; 0x38
 80129d2:	e012      	b.n	80129fa <dir_next+0x172>
						fs->wflag = 1;
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	2201      	movs	r2, #1
 80129d8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80129da:	68f8      	ldr	r0, [r7, #12]
 80129dc:	f7fe fff0 	bl	80119c0 <sync_window>
 80129e0:	4603      	mov	r3, r0
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d001      	beq.n	80129ea <dir_next+0x162>
 80129e6:	2301      	movs	r3, #1
 80129e8:	e030      	b.n	8012a4c <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80129ea:	693b      	ldr	r3, [r7, #16]
 80129ec:	3301      	adds	r3, #1
 80129ee:	613b      	str	r3, [r7, #16]
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129f4:	1c5a      	adds	r2, r3, #1
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	639a      	str	r2, [r3, #56]	; 0x38
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	895b      	ldrh	r3, [r3, #10]
 80129fe:	461a      	mov	r2, r3
 8012a00:	693b      	ldr	r3, [r7, #16]
 8012a02:	4293      	cmp	r3, r2
 8012a04:	d3e6      	bcc.n	80129d4 <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012a0a:	693b      	ldr	r3, [r7, #16]
 8012a0c:	1ad2      	subs	r2, r2, r3
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	697a      	ldr	r2, [r7, #20]
 8012a16:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 8012a18:	6979      	ldr	r1, [r7, #20]
 8012a1a:	68f8      	ldr	r0, [r7, #12]
 8012a1c:	f7ff f8b2 	bl	8011b84 <clust2sect>
 8012a20:	4602      	mov	r2, r0
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	68ba      	ldr	r2, [r7, #8]
 8012a2a:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8012a32:	68fb      	ldr	r3, [r7, #12]
 8012a34:	899b      	ldrh	r3, [r3, #12]
 8012a36:	461a      	mov	r2, r3
 8012a38:	68bb      	ldr	r3, [r7, #8]
 8012a3a:	fbb3 f0f2 	udiv	r0, r3, r2
 8012a3e:	fb02 f200 	mul.w	r2, r2, r0
 8012a42:	1a9b      	subs	r3, r3, r2
 8012a44:	18ca      	adds	r2, r1, r3
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8012a4a:	2300      	movs	r3, #0
}
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	3718      	adds	r7, #24
 8012a50:	46bd      	mov	sp, r7
 8012a52:	bd80      	pop	{r7, pc}

08012a54 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012a54:	b580      	push	{r7, lr}
 8012a56:	b086      	sub	sp, #24
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	6078      	str	r0, [r7, #4]
 8012a5c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012a64:	2100      	movs	r1, #0
 8012a66:	6878      	ldr	r0, [r7, #4]
 8012a68:	f7ff fe7a 	bl	8012760 <dir_sdi>
 8012a6c:	4603      	mov	r3, r0
 8012a6e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012a70:	7dfb      	ldrb	r3, [r7, #23]
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d140      	bne.n	8012af8 <dir_alloc+0xa4>
		n = 0;
 8012a76:	2300      	movs	r3, #0
 8012a78:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a7e:	4619      	mov	r1, r3
 8012a80:	68f8      	ldr	r0, [r7, #12]
 8012a82:	f7fe ffe1 	bl	8011a48 <move_window>
 8012a86:	4603      	mov	r3, r0
 8012a88:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012a8a:	7dfb      	ldrb	r3, [r7, #23]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d132      	bne.n	8012af6 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	781b      	ldrb	r3, [r3, #0]
 8012a94:	2b04      	cmp	r3, #4
 8012a96:	d108      	bne.n	8012aaa <dir_alloc+0x56>
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a9c:	781b      	ldrb	r3, [r3, #0]
 8012a9e:	b25b      	sxtb	r3, r3
 8012aa0:	43db      	mvns	r3, r3
 8012aa2:	b2db      	uxtb	r3, r3
 8012aa4:	09db      	lsrs	r3, r3, #7
 8012aa6:	b2db      	uxtb	r3, r3
 8012aa8:	e00f      	b.n	8012aca <dir_alloc+0x76>
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012aae:	781b      	ldrb	r3, [r3, #0]
 8012ab0:	2be5      	cmp	r3, #229	; 0xe5
 8012ab2:	d004      	beq.n	8012abe <dir_alloc+0x6a>
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012ab8:	781b      	ldrb	r3, [r3, #0]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d101      	bne.n	8012ac2 <dir_alloc+0x6e>
 8012abe:	2301      	movs	r3, #1
 8012ac0:	e000      	b.n	8012ac4 <dir_alloc+0x70>
 8012ac2:	2300      	movs	r3, #0
 8012ac4:	f003 0301 	and.w	r3, r3, #1
 8012ac8:	b2db      	uxtb	r3, r3
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d007      	beq.n	8012ade <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012ace:	693b      	ldr	r3, [r7, #16]
 8012ad0:	3301      	adds	r3, #1
 8012ad2:	613b      	str	r3, [r7, #16]
 8012ad4:	693a      	ldr	r2, [r7, #16]
 8012ad6:	683b      	ldr	r3, [r7, #0]
 8012ad8:	429a      	cmp	r2, r3
 8012ada:	d102      	bne.n	8012ae2 <dir_alloc+0x8e>
 8012adc:	e00c      	b.n	8012af8 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012ade:	2300      	movs	r3, #0
 8012ae0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012ae2:	2101      	movs	r1, #1
 8012ae4:	6878      	ldr	r0, [r7, #4]
 8012ae6:	f7ff fecf 	bl	8012888 <dir_next>
 8012aea:	4603      	mov	r3, r0
 8012aec:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012aee:	7dfb      	ldrb	r3, [r7, #23]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d0c2      	beq.n	8012a7a <dir_alloc+0x26>
 8012af4:	e000      	b.n	8012af8 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 8012af6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012af8:	7dfb      	ldrb	r3, [r7, #23]
 8012afa:	2b04      	cmp	r3, #4
 8012afc:	d101      	bne.n	8012b02 <dir_alloc+0xae>
 8012afe:	2307      	movs	r3, #7
 8012b00:	75fb      	strb	r3, [r7, #23]
	return res;
 8012b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b04:	4618      	mov	r0, r3
 8012b06:	3718      	adds	r7, #24
 8012b08:	46bd      	mov	sp, r7
 8012b0a:	bd80      	pop	{r7, pc}

08012b0c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b084      	sub	sp, #16
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	6078      	str	r0, [r7, #4]
 8012b14:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012b16:	683b      	ldr	r3, [r7, #0]
 8012b18:	331a      	adds	r3, #26
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	f7fe fba0 	bl	8011260 <ld_word>
 8012b20:	4603      	mov	r3, r0
 8012b22:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	781b      	ldrb	r3, [r3, #0]
 8012b28:	2b03      	cmp	r3, #3
 8012b2a:	d109      	bne.n	8012b40 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012b2c:	683b      	ldr	r3, [r7, #0]
 8012b2e:	3314      	adds	r3, #20
 8012b30:	4618      	mov	r0, r3
 8012b32:	f7fe fb95 	bl	8011260 <ld_word>
 8012b36:	4603      	mov	r3, r0
 8012b38:	041b      	lsls	r3, r3, #16
 8012b3a:	68fa      	ldr	r2, [r7, #12]
 8012b3c:	4313      	orrs	r3, r2
 8012b3e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8012b40:	68fb      	ldr	r3, [r7, #12]
}
 8012b42:	4618      	mov	r0, r3
 8012b44:	3710      	adds	r7, #16
 8012b46:	46bd      	mov	sp, r7
 8012b48:	bd80      	pop	{r7, pc}

08012b4a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012b4a:	b580      	push	{r7, lr}
 8012b4c:	b084      	sub	sp, #16
 8012b4e:	af00      	add	r7, sp, #0
 8012b50:	60f8      	str	r0, [r7, #12]
 8012b52:	60b9      	str	r1, [r7, #8]
 8012b54:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012b56:	68bb      	ldr	r3, [r7, #8]
 8012b58:	331a      	adds	r3, #26
 8012b5a:	687a      	ldr	r2, [r7, #4]
 8012b5c:	b292      	uxth	r2, r2
 8012b5e:	4611      	mov	r1, r2
 8012b60:	4618      	mov	r0, r3
 8012b62:	f7fe fc75 	bl	8011450 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	781b      	ldrb	r3, [r3, #0]
 8012b6a:	2b03      	cmp	r3, #3
 8012b6c:	d109      	bne.n	8012b82 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012b6e:	68bb      	ldr	r3, [r7, #8]
 8012b70:	f103 0214 	add.w	r2, r3, #20
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	0c1b      	lsrs	r3, r3, #16
 8012b78:	b29b      	uxth	r3, r3
 8012b7a:	4619      	mov	r1, r3
 8012b7c:	4610      	mov	r0, r2
 8012b7e:	f7fe fc67 	bl	8011450 <st_word>
	}
}
 8012b82:	bf00      	nop
 8012b84:	3710      	adds	r7, #16
 8012b86:	46bd      	mov	sp, r7
 8012b88:	bd80      	pop	{r7, pc}
	...

08012b8c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8012b8c:	b590      	push	{r4, r7, lr}
 8012b8e:	b087      	sub	sp, #28
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	6078      	str	r0, [r7, #4]
 8012b94:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8012b96:	683b      	ldr	r3, [r7, #0]
 8012b98:	331a      	adds	r3, #26
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	f7fe fb60 	bl	8011260 <ld_word>
 8012ba0:	4603      	mov	r3, r0
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d001      	beq.n	8012baa <cmp_lfn+0x1e>
 8012ba6:	2300      	movs	r3, #0
 8012ba8:	e059      	b.n	8012c5e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8012baa:	683b      	ldr	r3, [r7, #0]
 8012bac:	781b      	ldrb	r3, [r3, #0]
 8012bae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012bb2:	1e5a      	subs	r2, r3, #1
 8012bb4:	4613      	mov	r3, r2
 8012bb6:	005b      	lsls	r3, r3, #1
 8012bb8:	4413      	add	r3, r2
 8012bba:	009b      	lsls	r3, r3, #2
 8012bbc:	4413      	add	r3, r2
 8012bbe:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012bc0:	2301      	movs	r3, #1
 8012bc2:	81fb      	strh	r3, [r7, #14]
 8012bc4:	2300      	movs	r3, #0
 8012bc6:	613b      	str	r3, [r7, #16]
 8012bc8:	e033      	b.n	8012c32 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8012bca:	4a27      	ldr	r2, [pc, #156]	; (8012c68 <cmp_lfn+0xdc>)
 8012bcc:	693b      	ldr	r3, [r7, #16]
 8012bce:	4413      	add	r3, r2
 8012bd0:	781b      	ldrb	r3, [r3, #0]
 8012bd2:	461a      	mov	r2, r3
 8012bd4:	683b      	ldr	r3, [r7, #0]
 8012bd6:	4413      	add	r3, r2
 8012bd8:	4618      	mov	r0, r3
 8012bda:	f7fe fb41 	bl	8011260 <ld_word>
 8012bde:	4603      	mov	r3, r0
 8012be0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8012be2:	89fb      	ldrh	r3, [r7, #14]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d01a      	beq.n	8012c1e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8012be8:	697b      	ldr	r3, [r7, #20]
 8012bea:	2bfe      	cmp	r3, #254	; 0xfe
 8012bec:	d812      	bhi.n	8012c14 <cmp_lfn+0x88>
 8012bee:	89bb      	ldrh	r3, [r7, #12]
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	f003 fc67 	bl	80164c4 <ff_wtoupper>
 8012bf6:	4603      	mov	r3, r0
 8012bf8:	461c      	mov	r4, r3
 8012bfa:	697b      	ldr	r3, [r7, #20]
 8012bfc:	1c5a      	adds	r2, r3, #1
 8012bfe:	617a      	str	r2, [r7, #20]
 8012c00:	005b      	lsls	r3, r3, #1
 8012c02:	687a      	ldr	r2, [r7, #4]
 8012c04:	4413      	add	r3, r2
 8012c06:	881b      	ldrh	r3, [r3, #0]
 8012c08:	4618      	mov	r0, r3
 8012c0a:	f003 fc5b 	bl	80164c4 <ff_wtoupper>
 8012c0e:	4603      	mov	r3, r0
 8012c10:	429c      	cmp	r4, r3
 8012c12:	d001      	beq.n	8012c18 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8012c14:	2300      	movs	r3, #0
 8012c16:	e022      	b.n	8012c5e <cmp_lfn+0xd2>
			}
			wc = uc;
 8012c18:	89bb      	ldrh	r3, [r7, #12]
 8012c1a:	81fb      	strh	r3, [r7, #14]
 8012c1c:	e006      	b.n	8012c2c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8012c1e:	89bb      	ldrh	r3, [r7, #12]
 8012c20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012c24:	4293      	cmp	r3, r2
 8012c26:	d001      	beq.n	8012c2c <cmp_lfn+0xa0>
 8012c28:	2300      	movs	r3, #0
 8012c2a:	e018      	b.n	8012c5e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012c2c:	693b      	ldr	r3, [r7, #16]
 8012c2e:	3301      	adds	r3, #1
 8012c30:	613b      	str	r3, [r7, #16]
 8012c32:	693b      	ldr	r3, [r7, #16]
 8012c34:	2b0c      	cmp	r3, #12
 8012c36:	d9c8      	bls.n	8012bca <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8012c38:	683b      	ldr	r3, [r7, #0]
 8012c3a:	781b      	ldrb	r3, [r3, #0]
 8012c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d00b      	beq.n	8012c5c <cmp_lfn+0xd0>
 8012c44:	89fb      	ldrh	r3, [r7, #14]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d008      	beq.n	8012c5c <cmp_lfn+0xd0>
 8012c4a:	697b      	ldr	r3, [r7, #20]
 8012c4c:	005b      	lsls	r3, r3, #1
 8012c4e:	687a      	ldr	r2, [r7, #4]
 8012c50:	4413      	add	r3, r2
 8012c52:	881b      	ldrh	r3, [r3, #0]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d001      	beq.n	8012c5c <cmp_lfn+0xd0>
 8012c58:	2300      	movs	r3, #0
 8012c5a:	e000      	b.n	8012c5e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8012c5c:	2301      	movs	r3, #1
}
 8012c5e:	4618      	mov	r0, r3
 8012c60:	371c      	adds	r7, #28
 8012c62:	46bd      	mov	sp, r7
 8012c64:	bd90      	pop	{r4, r7, pc}
 8012c66:	bf00      	nop
 8012c68:	08017400 	.word	0x08017400

08012c6c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8012c6c:	b580      	push	{r7, lr}
 8012c6e:	b086      	sub	sp, #24
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	6078      	str	r0, [r7, #4]
 8012c74:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8012c76:	683b      	ldr	r3, [r7, #0]
 8012c78:	331a      	adds	r3, #26
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	f7fe faf0 	bl	8011260 <ld_word>
 8012c80:	4603      	mov	r3, r0
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d001      	beq.n	8012c8a <pick_lfn+0x1e>
 8012c86:	2300      	movs	r3, #0
 8012c88:	e04d      	b.n	8012d26 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8012c8a:	683b      	ldr	r3, [r7, #0]
 8012c8c:	781b      	ldrb	r3, [r3, #0]
 8012c8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012c92:	1e5a      	subs	r2, r3, #1
 8012c94:	4613      	mov	r3, r2
 8012c96:	005b      	lsls	r3, r3, #1
 8012c98:	4413      	add	r3, r2
 8012c9a:	009b      	lsls	r3, r3, #2
 8012c9c:	4413      	add	r3, r2
 8012c9e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012ca0:	2301      	movs	r3, #1
 8012ca2:	81fb      	strh	r3, [r7, #14]
 8012ca4:	2300      	movs	r3, #0
 8012ca6:	613b      	str	r3, [r7, #16]
 8012ca8:	e028      	b.n	8012cfc <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8012caa:	4a21      	ldr	r2, [pc, #132]	; (8012d30 <pick_lfn+0xc4>)
 8012cac:	693b      	ldr	r3, [r7, #16]
 8012cae:	4413      	add	r3, r2
 8012cb0:	781b      	ldrb	r3, [r3, #0]
 8012cb2:	461a      	mov	r2, r3
 8012cb4:	683b      	ldr	r3, [r7, #0]
 8012cb6:	4413      	add	r3, r2
 8012cb8:	4618      	mov	r0, r3
 8012cba:	f7fe fad1 	bl	8011260 <ld_word>
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8012cc2:	89fb      	ldrh	r3, [r7, #14]
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d00f      	beq.n	8012ce8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8012cc8:	697b      	ldr	r3, [r7, #20]
 8012cca:	2bfe      	cmp	r3, #254	; 0xfe
 8012ccc:	d901      	bls.n	8012cd2 <pick_lfn+0x66>
 8012cce:	2300      	movs	r3, #0
 8012cd0:	e029      	b.n	8012d26 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8012cd2:	89bb      	ldrh	r3, [r7, #12]
 8012cd4:	81fb      	strh	r3, [r7, #14]
 8012cd6:	697b      	ldr	r3, [r7, #20]
 8012cd8:	1c5a      	adds	r2, r3, #1
 8012cda:	617a      	str	r2, [r7, #20]
 8012cdc:	005b      	lsls	r3, r3, #1
 8012cde:	687a      	ldr	r2, [r7, #4]
 8012ce0:	4413      	add	r3, r2
 8012ce2:	89fa      	ldrh	r2, [r7, #14]
 8012ce4:	801a      	strh	r2, [r3, #0]
 8012ce6:	e006      	b.n	8012cf6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8012ce8:	89bb      	ldrh	r3, [r7, #12]
 8012cea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012cee:	4293      	cmp	r3, r2
 8012cf0:	d001      	beq.n	8012cf6 <pick_lfn+0x8a>
 8012cf2:	2300      	movs	r3, #0
 8012cf4:	e017      	b.n	8012d26 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012cf6:	693b      	ldr	r3, [r7, #16]
 8012cf8:	3301      	adds	r3, #1
 8012cfa:	613b      	str	r3, [r7, #16]
 8012cfc:	693b      	ldr	r3, [r7, #16]
 8012cfe:	2b0c      	cmp	r3, #12
 8012d00:	d9d3      	bls.n	8012caa <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8012d02:	683b      	ldr	r3, [r7, #0]
 8012d04:	781b      	ldrb	r3, [r3, #0]
 8012d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d00a      	beq.n	8012d24 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8012d0e:	697b      	ldr	r3, [r7, #20]
 8012d10:	2bfe      	cmp	r3, #254	; 0xfe
 8012d12:	d901      	bls.n	8012d18 <pick_lfn+0xac>
 8012d14:	2300      	movs	r3, #0
 8012d16:	e006      	b.n	8012d26 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8012d18:	697b      	ldr	r3, [r7, #20]
 8012d1a:	005b      	lsls	r3, r3, #1
 8012d1c:	687a      	ldr	r2, [r7, #4]
 8012d1e:	4413      	add	r3, r2
 8012d20:	2200      	movs	r2, #0
 8012d22:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8012d24:	2301      	movs	r3, #1
}
 8012d26:	4618      	mov	r0, r3
 8012d28:	3718      	adds	r7, #24
 8012d2a:	46bd      	mov	sp, r7
 8012d2c:	bd80      	pop	{r7, pc}
 8012d2e:	bf00      	nop
 8012d30:	08017400 	.word	0x08017400

08012d34 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8012d34:	b580      	push	{r7, lr}
 8012d36:	b088      	sub	sp, #32
 8012d38:	af00      	add	r7, sp, #0
 8012d3a:	60f8      	str	r0, [r7, #12]
 8012d3c:	60b9      	str	r1, [r7, #8]
 8012d3e:	4611      	mov	r1, r2
 8012d40:	461a      	mov	r2, r3
 8012d42:	460b      	mov	r3, r1
 8012d44:	71fb      	strb	r3, [r7, #7]
 8012d46:	4613      	mov	r3, r2
 8012d48:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8012d4a:	68bb      	ldr	r3, [r7, #8]
 8012d4c:	330d      	adds	r3, #13
 8012d4e:	79ba      	ldrb	r2, [r7, #6]
 8012d50:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8012d52:	68bb      	ldr	r3, [r7, #8]
 8012d54:	330b      	adds	r3, #11
 8012d56:	220f      	movs	r2, #15
 8012d58:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8012d5a:	68bb      	ldr	r3, [r7, #8]
 8012d5c:	330c      	adds	r3, #12
 8012d5e:	2200      	movs	r2, #0
 8012d60:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8012d62:	68bb      	ldr	r3, [r7, #8]
 8012d64:	331a      	adds	r3, #26
 8012d66:	2100      	movs	r1, #0
 8012d68:	4618      	mov	r0, r3
 8012d6a:	f7fe fb71 	bl	8011450 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8012d6e:	79fb      	ldrb	r3, [r7, #7]
 8012d70:	1e5a      	subs	r2, r3, #1
 8012d72:	4613      	mov	r3, r2
 8012d74:	005b      	lsls	r3, r3, #1
 8012d76:	4413      	add	r3, r2
 8012d78:	009b      	lsls	r3, r3, #2
 8012d7a:	4413      	add	r3, r2
 8012d7c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8012d7e:	2300      	movs	r3, #0
 8012d80:	82fb      	strh	r3, [r7, #22]
 8012d82:	2300      	movs	r3, #0
 8012d84:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8012d86:	8afb      	ldrh	r3, [r7, #22]
 8012d88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012d8c:	4293      	cmp	r3, r2
 8012d8e:	d007      	beq.n	8012da0 <put_lfn+0x6c>
 8012d90:	69fb      	ldr	r3, [r7, #28]
 8012d92:	1c5a      	adds	r2, r3, #1
 8012d94:	61fa      	str	r2, [r7, #28]
 8012d96:	005b      	lsls	r3, r3, #1
 8012d98:	68fa      	ldr	r2, [r7, #12]
 8012d9a:	4413      	add	r3, r2
 8012d9c:	881b      	ldrh	r3, [r3, #0]
 8012d9e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8012da0:	4a17      	ldr	r2, [pc, #92]	; (8012e00 <put_lfn+0xcc>)
 8012da2:	69bb      	ldr	r3, [r7, #24]
 8012da4:	4413      	add	r3, r2
 8012da6:	781b      	ldrb	r3, [r3, #0]
 8012da8:	461a      	mov	r2, r3
 8012daa:	68bb      	ldr	r3, [r7, #8]
 8012dac:	4413      	add	r3, r2
 8012dae:	8afa      	ldrh	r2, [r7, #22]
 8012db0:	4611      	mov	r1, r2
 8012db2:	4618      	mov	r0, r3
 8012db4:	f7fe fb4c 	bl	8011450 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8012db8:	8afb      	ldrh	r3, [r7, #22]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d102      	bne.n	8012dc4 <put_lfn+0x90>
 8012dbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012dc2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8012dc4:	69bb      	ldr	r3, [r7, #24]
 8012dc6:	3301      	adds	r3, #1
 8012dc8:	61bb      	str	r3, [r7, #24]
 8012dca:	69bb      	ldr	r3, [r7, #24]
 8012dcc:	2b0c      	cmp	r3, #12
 8012dce:	d9da      	bls.n	8012d86 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8012dd0:	8afb      	ldrh	r3, [r7, #22]
 8012dd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012dd6:	4293      	cmp	r3, r2
 8012dd8:	d006      	beq.n	8012de8 <put_lfn+0xb4>
 8012dda:	69fb      	ldr	r3, [r7, #28]
 8012ddc:	005b      	lsls	r3, r3, #1
 8012dde:	68fa      	ldr	r2, [r7, #12]
 8012de0:	4413      	add	r3, r2
 8012de2:	881b      	ldrh	r3, [r3, #0]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d103      	bne.n	8012df0 <put_lfn+0xbc>
 8012de8:	79fb      	ldrb	r3, [r7, #7]
 8012dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012dee:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8012df0:	68bb      	ldr	r3, [r7, #8]
 8012df2:	79fa      	ldrb	r2, [r7, #7]
 8012df4:	701a      	strb	r2, [r3, #0]
}
 8012df6:	bf00      	nop
 8012df8:	3720      	adds	r7, #32
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	bd80      	pop	{r7, pc}
 8012dfe:	bf00      	nop
 8012e00:	08017400 	.word	0x08017400

08012e04 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8012e04:	b580      	push	{r7, lr}
 8012e06:	b08c      	sub	sp, #48	; 0x30
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	60f8      	str	r0, [r7, #12]
 8012e0c:	60b9      	str	r1, [r7, #8]
 8012e0e:	607a      	str	r2, [r7, #4]
 8012e10:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8012e12:	220b      	movs	r2, #11
 8012e14:	68b9      	ldr	r1, [r7, #8]
 8012e16:	68f8      	ldr	r0, [r7, #12]
 8012e18:	f7fe fbe8 	bl	80115ec <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8012e1c:	683b      	ldr	r3, [r7, #0]
 8012e1e:	2b05      	cmp	r3, #5
 8012e20:	d929      	bls.n	8012e76 <gen_numname+0x72>
		sr = seq;
 8012e22:	683b      	ldr	r3, [r7, #0]
 8012e24:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8012e26:	e020      	b.n	8012e6a <gen_numname+0x66>
			wc = *lfn++;
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	1c9a      	adds	r2, r3, #2
 8012e2c:	607a      	str	r2, [r7, #4]
 8012e2e:	881b      	ldrh	r3, [r3, #0]
 8012e30:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8012e32:	2300      	movs	r3, #0
 8012e34:	62bb      	str	r3, [r7, #40]	; 0x28
 8012e36:	e015      	b.n	8012e64 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8012e38:	69fb      	ldr	r3, [r7, #28]
 8012e3a:	005a      	lsls	r2, r3, #1
 8012e3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e3e:	f003 0301 	and.w	r3, r3, #1
 8012e42:	4413      	add	r3, r2
 8012e44:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8012e46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e48:	085b      	lsrs	r3, r3, #1
 8012e4a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8012e4c:	69fb      	ldr	r3, [r7, #28]
 8012e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d003      	beq.n	8012e5e <gen_numname+0x5a>
 8012e56:	69fa      	ldr	r2, [r7, #28]
 8012e58:	4b31      	ldr	r3, [pc, #196]	; (8012f20 <gen_numname+0x11c>)
 8012e5a:	4053      	eors	r3, r2
 8012e5c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8012e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e60:	3301      	adds	r3, #1
 8012e62:	62bb      	str	r3, [r7, #40]	; 0x28
 8012e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e66:	2b0f      	cmp	r3, #15
 8012e68:	d9e6      	bls.n	8012e38 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	881b      	ldrh	r3, [r3, #0]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d1da      	bne.n	8012e28 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8012e72:	69fb      	ldr	r3, [r7, #28]
 8012e74:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8012e76:	2307      	movs	r3, #7
 8012e78:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8012e7a:	683b      	ldr	r3, [r7, #0]
 8012e7c:	b2db      	uxtb	r3, r3
 8012e7e:	f003 030f 	and.w	r3, r3, #15
 8012e82:	b2db      	uxtb	r3, r3
 8012e84:	3330      	adds	r3, #48	; 0x30
 8012e86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8012e8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012e8e:	2b39      	cmp	r3, #57	; 0x39
 8012e90:	d904      	bls.n	8012e9c <gen_numname+0x98>
 8012e92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012e96:	3307      	adds	r3, #7
 8012e98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8012e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e9e:	1e5a      	subs	r2, r3, #1
 8012ea0:	62ba      	str	r2, [r7, #40]	; 0x28
 8012ea2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012ea6:	4413      	add	r3, r2
 8012ea8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8012eac:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8012eb0:	683b      	ldr	r3, [r7, #0]
 8012eb2:	091b      	lsrs	r3, r3, #4
 8012eb4:	603b      	str	r3, [r7, #0]
	} while (seq);
 8012eb6:	683b      	ldr	r3, [r7, #0]
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d1de      	bne.n	8012e7a <gen_numname+0x76>
	ns[i] = '~';
 8012ebc:	f107 0214 	add.w	r2, r7, #20
 8012ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ec2:	4413      	add	r3, r2
 8012ec4:	227e      	movs	r2, #126	; 0x7e
 8012ec6:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8012ec8:	2300      	movs	r3, #0
 8012eca:	627b      	str	r3, [r7, #36]	; 0x24
 8012ecc:	e002      	b.n	8012ed4 <gen_numname+0xd0>
 8012ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ed0:	3301      	adds	r3, #1
 8012ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8012ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ed8:	429a      	cmp	r2, r3
 8012eda:	d205      	bcs.n	8012ee8 <gen_numname+0xe4>
 8012edc:	68fa      	ldr	r2, [r7, #12]
 8012ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ee0:	4413      	add	r3, r2
 8012ee2:	781b      	ldrb	r3, [r3, #0]
 8012ee4:	2b20      	cmp	r3, #32
 8012ee6:	d1f2      	bne.n	8012ece <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eea:	2b07      	cmp	r3, #7
 8012eec:	d808      	bhi.n	8012f00 <gen_numname+0xfc>
 8012eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ef0:	1c5a      	adds	r2, r3, #1
 8012ef2:	62ba      	str	r2, [r7, #40]	; 0x28
 8012ef4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012ef8:	4413      	add	r3, r2
 8012efa:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8012efe:	e000      	b.n	8012f02 <gen_numname+0xfe>
 8012f00:	2120      	movs	r1, #32
 8012f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f04:	1c5a      	adds	r2, r3, #1
 8012f06:	627a      	str	r2, [r7, #36]	; 0x24
 8012f08:	68fa      	ldr	r2, [r7, #12]
 8012f0a:	4413      	add	r3, r2
 8012f0c:	460a      	mov	r2, r1
 8012f0e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8012f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f12:	2b07      	cmp	r3, #7
 8012f14:	d9e8      	bls.n	8012ee8 <gen_numname+0xe4>
}
 8012f16:	bf00      	nop
 8012f18:	3730      	adds	r7, #48	; 0x30
 8012f1a:	46bd      	mov	sp, r7
 8012f1c:	bd80      	pop	{r7, pc}
 8012f1e:	bf00      	nop
 8012f20:	00011021 	.word	0x00011021

08012f24 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8012f24:	b480      	push	{r7}
 8012f26:	b085      	sub	sp, #20
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8012f2c:	2300      	movs	r3, #0
 8012f2e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8012f30:	230b      	movs	r3, #11
 8012f32:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8012f34:	7bfb      	ldrb	r3, [r7, #15]
 8012f36:	b2da      	uxtb	r2, r3
 8012f38:	0852      	lsrs	r2, r2, #1
 8012f3a:	01db      	lsls	r3, r3, #7
 8012f3c:	4313      	orrs	r3, r2
 8012f3e:	b2da      	uxtb	r2, r3
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	1c59      	adds	r1, r3, #1
 8012f44:	6079      	str	r1, [r7, #4]
 8012f46:	781b      	ldrb	r3, [r3, #0]
 8012f48:	4413      	add	r3, r2
 8012f4a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8012f4c:	68bb      	ldr	r3, [r7, #8]
 8012f4e:	3b01      	subs	r3, #1
 8012f50:	60bb      	str	r3, [r7, #8]
 8012f52:	68bb      	ldr	r3, [r7, #8]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d1ed      	bne.n	8012f34 <sum_sfn+0x10>
	return sum;
 8012f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	3714      	adds	r7, #20
 8012f5e:	46bd      	mov	sp, r7
 8012f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f64:	4770      	bx	lr

08012f66 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 8012f66:	b480      	push	{r7}
 8012f68:	b087      	sub	sp, #28
 8012f6a:	af00      	add	r7, sp, #0
 8012f6c:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	3301      	adds	r3, #1
 8012f72:	781b      	ldrb	r3, [r3, #0]
 8012f74:	3301      	adds	r3, #1
 8012f76:	015b      	lsls	r3, r3, #5
 8012f78:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 8012f7a:	2300      	movs	r3, #0
 8012f7c:	827b      	strh	r3, [r7, #18]
 8012f7e:	2300      	movs	r3, #0
 8012f80:	617b      	str	r3, [r7, #20]
 8012f82:	e018      	b.n	8012fb6 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 8012f84:	697b      	ldr	r3, [r7, #20]
 8012f86:	2b02      	cmp	r3, #2
 8012f88:	d103      	bne.n	8012f92 <xdir_sum+0x2c>
			i++;
 8012f8a:	697b      	ldr	r3, [r7, #20]
 8012f8c:	3301      	adds	r3, #1
 8012f8e:	617b      	str	r3, [r7, #20]
 8012f90:	e00e      	b.n	8012fb0 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8012f92:	8a7b      	ldrh	r3, [r7, #18]
 8012f94:	03db      	lsls	r3, r3, #15
 8012f96:	b29a      	uxth	r2, r3
 8012f98:	8a7b      	ldrh	r3, [r7, #18]
 8012f9a:	085b      	lsrs	r3, r3, #1
 8012f9c:	b29b      	uxth	r3, r3
 8012f9e:	4413      	add	r3, r2
 8012fa0:	b29a      	uxth	r2, r3
 8012fa2:	6879      	ldr	r1, [r7, #4]
 8012fa4:	697b      	ldr	r3, [r7, #20]
 8012fa6:	440b      	add	r3, r1
 8012fa8:	781b      	ldrb	r3, [r3, #0]
 8012faa:	b29b      	uxth	r3, r3
 8012fac:	4413      	add	r3, r2
 8012fae:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 8012fb0:	697b      	ldr	r3, [r7, #20]
 8012fb2:	3301      	adds	r3, #1
 8012fb4:	617b      	str	r3, [r7, #20]
 8012fb6:	697a      	ldr	r2, [r7, #20]
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	429a      	cmp	r2, r3
 8012fbc:	d3e2      	bcc.n	8012f84 <xdir_sum+0x1e>
		}
	}
	return sum;
 8012fbe:	8a7b      	ldrh	r3, [r7, #18]
}
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	371c      	adds	r7, #28
 8012fc4:	46bd      	mov	sp, r7
 8012fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fca:	4770      	bx	lr

08012fcc <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 8012fcc:	b580      	push	{r7, lr}
 8012fce:	b084      	sub	sp, #16
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 8012fd4:	2300      	movs	r3, #0
 8012fd6:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 8012fd8:	e01f      	b.n	801301a <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 8012fda:	89bb      	ldrh	r3, [r7, #12]
 8012fdc:	4618      	mov	r0, r3
 8012fde:	f003 fa71 	bl	80164c4 <ff_wtoupper>
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8012fe6:	89fb      	ldrh	r3, [r7, #14]
 8012fe8:	03db      	lsls	r3, r3, #15
 8012fea:	b29a      	uxth	r2, r3
 8012fec:	89fb      	ldrh	r3, [r7, #14]
 8012fee:	085b      	lsrs	r3, r3, #1
 8012ff0:	b29b      	uxth	r3, r3
 8012ff2:	4413      	add	r3, r2
 8012ff4:	b29a      	uxth	r2, r3
 8012ff6:	89bb      	ldrh	r3, [r7, #12]
 8012ff8:	b2db      	uxtb	r3, r3
 8012ffa:	b29b      	uxth	r3, r3
 8012ffc:	4413      	add	r3, r2
 8012ffe:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8013000:	89fb      	ldrh	r3, [r7, #14]
 8013002:	03db      	lsls	r3, r3, #15
 8013004:	b29a      	uxth	r2, r3
 8013006:	89fb      	ldrh	r3, [r7, #14]
 8013008:	085b      	lsrs	r3, r3, #1
 801300a:	b29b      	uxth	r3, r3
 801300c:	4413      	add	r3, r2
 801300e:	b29a      	uxth	r2, r3
 8013010:	89bb      	ldrh	r3, [r7, #12]
 8013012:	0a1b      	lsrs	r3, r3, #8
 8013014:	b29b      	uxth	r3, r3
 8013016:	4413      	add	r3, r2
 8013018:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	1c9a      	adds	r2, r3, #2
 801301e:	607a      	str	r2, [r7, #4]
 8013020:	881b      	ldrh	r3, [r3, #0]
 8013022:	81bb      	strh	r3, [r7, #12]
 8013024:	89bb      	ldrh	r3, [r7, #12]
 8013026:	2b00      	cmp	r3, #0
 8013028:	d1d7      	bne.n	8012fda <xname_sum+0xe>
	}
	return sum;
 801302a:	89fb      	ldrh	r3, [r7, #14]
}
 801302c:	4618      	mov	r0, r3
 801302e:	3710      	adds	r7, #16
 8013030:	46bd      	mov	sp, r7
 8013032:	bd80      	pop	{r7, pc}

08013034 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 8013034:	b590      	push	{r4, r7, lr}
 8013036:	b087      	sub	sp, #28
 8013038:	af00      	add	r7, sp, #0
 801303a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	695b      	ldr	r3, [r3, #20]
 8013042:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	681a      	ldr	r2, [r3, #0]
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801304c:	4619      	mov	r1, r3
 801304e:	4610      	mov	r0, r2
 8013050:	f7fe fcfa 	bl	8011a48 <move_window>
 8013054:	4603      	mov	r3, r0
 8013056:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8013058:	7bfb      	ldrb	r3, [r7, #15]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d001      	beq.n	8013062 <load_xdir+0x2e>
 801305e:	7bfb      	ldrb	r3, [r7, #15]
 8013060:	e09f      	b.n	80131a2 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013066:	781b      	ldrb	r3, [r3, #0]
 8013068:	2b85      	cmp	r3, #133	; 0x85
 801306a:	d001      	beq.n	8013070 <load_xdir+0x3c>
 801306c:	2302      	movs	r3, #2
 801306e:	e098      	b.n	80131a2 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013074:	2220      	movs	r2, #32
 8013076:	4619      	mov	r1, r3
 8013078:	6938      	ldr	r0, [r7, #16]
 801307a:	f7fe fab7 	bl	80115ec <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 801307e:	693b      	ldr	r3, [r7, #16]
 8013080:	3301      	adds	r3, #1
 8013082:	781b      	ldrb	r3, [r3, #0]
 8013084:	3301      	adds	r3, #1
 8013086:	015b      	lsls	r3, r3, #5
 8013088:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 801308a:	68bb      	ldr	r3, [r7, #8]
 801308c:	2b5f      	cmp	r3, #95	; 0x5f
 801308e:	d903      	bls.n	8013098 <load_xdir+0x64>
 8013090:	68bb      	ldr	r3, [r7, #8]
 8013092:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8013096:	d901      	bls.n	801309c <load_xdir+0x68>
 8013098:	2302      	movs	r3, #2
 801309a:	e082      	b.n	80131a2 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 801309c:	2100      	movs	r1, #0
 801309e:	6878      	ldr	r0, [r7, #4]
 80130a0:	f7ff fbf2 	bl	8012888 <dir_next>
 80130a4:	4603      	mov	r3, r0
 80130a6:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 80130a8:	7bfb      	ldrb	r3, [r7, #15]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d001      	beq.n	80130b2 <load_xdir+0x7e>
 80130ae:	7bfb      	ldrb	r3, [r7, #15]
 80130b0:	e077      	b.n	80131a2 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	681a      	ldr	r2, [r3, #0]
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80130ba:	4619      	mov	r1, r3
 80130bc:	4610      	mov	r0, r2
 80130be:	f7fe fcc3 	bl	8011a48 <move_window>
 80130c2:	4603      	mov	r3, r0
 80130c4:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 80130c6:	7bfb      	ldrb	r3, [r7, #15]
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d001      	beq.n	80130d0 <load_xdir+0x9c>
 80130cc:	7bfb      	ldrb	r3, [r7, #15]
 80130ce:	e068      	b.n	80131a2 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80130d4:	781b      	ldrb	r3, [r3, #0]
 80130d6:	2bc0      	cmp	r3, #192	; 0xc0
 80130d8:	d001      	beq.n	80130de <load_xdir+0xaa>
 80130da:	2302      	movs	r3, #2
 80130dc:	e061      	b.n	80131a2 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 80130de:	693b      	ldr	r3, [r7, #16]
 80130e0:	f103 0020 	add.w	r0, r3, #32
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80130e8:	2220      	movs	r2, #32
 80130ea:	4619      	mov	r1, r3
 80130ec:	f7fe fa7e 	bl	80115ec <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 80130f0:	693b      	ldr	r3, [r7, #16]
 80130f2:	3323      	adds	r3, #35	; 0x23
 80130f4:	781b      	ldrb	r3, [r3, #0]
 80130f6:	332c      	adds	r3, #44	; 0x2c
 80130f8:	4a2c      	ldr	r2, [pc, #176]	; (80131ac <load_xdir+0x178>)
 80130fa:	fba2 2303 	umull	r2, r3, r2, r3
 80130fe:	08db      	lsrs	r3, r3, #3
 8013100:	015b      	lsls	r3, r3, #5
 8013102:	68ba      	ldr	r2, [r7, #8]
 8013104:	429a      	cmp	r2, r3
 8013106:	d201      	bcs.n	801310c <load_xdir+0xd8>
 8013108:	2302      	movs	r3, #2
 801310a:	e04a      	b.n	80131a2 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 801310c:	2340      	movs	r3, #64	; 0x40
 801310e:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 8013110:	2100      	movs	r1, #0
 8013112:	6878      	ldr	r0, [r7, #4]
 8013114:	f7ff fbb8 	bl	8012888 <dir_next>
 8013118:	4603      	mov	r3, r0
 801311a:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 801311c:	7bfb      	ldrb	r3, [r7, #15]
 801311e:	2b00      	cmp	r3, #0
 8013120:	d001      	beq.n	8013126 <load_xdir+0xf2>
 8013122:	7bfb      	ldrb	r3, [r7, #15]
 8013124:	e03d      	b.n	80131a2 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	681a      	ldr	r2, [r3, #0]
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801312e:	4619      	mov	r1, r3
 8013130:	4610      	mov	r0, r2
 8013132:	f7fe fc89 	bl	8011a48 <move_window>
 8013136:	4603      	mov	r3, r0
 8013138:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 801313a:	7bfb      	ldrb	r3, [r7, #15]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d001      	beq.n	8013144 <load_xdir+0x110>
 8013140:	7bfb      	ldrb	r3, [r7, #15]
 8013142:	e02e      	b.n	80131a2 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013148:	781b      	ldrb	r3, [r3, #0]
 801314a:	2bc1      	cmp	r3, #193	; 0xc1
 801314c:	d001      	beq.n	8013152 <load_xdir+0x11e>
 801314e:	2302      	movs	r3, #2
 8013150:	e027      	b.n	80131a2 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 8013152:	697b      	ldr	r3, [r7, #20]
 8013154:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8013158:	d208      	bcs.n	801316c <load_xdir+0x138>
 801315a:	693a      	ldr	r2, [r7, #16]
 801315c:	697b      	ldr	r3, [r7, #20]
 801315e:	18d0      	adds	r0, r2, r3
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013164:	2220      	movs	r2, #32
 8013166:	4619      	mov	r1, r3
 8013168:	f7fe fa40 	bl	80115ec <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 801316c:	697b      	ldr	r3, [r7, #20]
 801316e:	3320      	adds	r3, #32
 8013170:	617b      	str	r3, [r7, #20]
 8013172:	697a      	ldr	r2, [r7, #20]
 8013174:	68bb      	ldr	r3, [r7, #8]
 8013176:	429a      	cmp	r2, r3
 8013178:	d3ca      	bcc.n	8013110 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 801317a:	697b      	ldr	r3, [r7, #20]
 801317c:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8013180:	d80e      	bhi.n	80131a0 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8013182:	6938      	ldr	r0, [r7, #16]
 8013184:	f7ff feef 	bl	8012f66 <xdir_sum>
 8013188:	4603      	mov	r3, r0
 801318a:	461c      	mov	r4, r3
 801318c:	693b      	ldr	r3, [r7, #16]
 801318e:	3302      	adds	r3, #2
 8013190:	4618      	mov	r0, r3
 8013192:	f7fe f865 	bl	8011260 <ld_word>
 8013196:	4603      	mov	r3, r0
 8013198:	429c      	cmp	r4, r3
 801319a:	d001      	beq.n	80131a0 <load_xdir+0x16c>
 801319c:	2302      	movs	r3, #2
 801319e:	e000      	b.n	80131a2 <load_xdir+0x16e>
	}
	return FR_OK;
 80131a0:	2300      	movs	r3, #0
}
 80131a2:	4618      	mov	r0, r3
 80131a4:	371c      	adds	r7, #28
 80131a6:	46bd      	mov	sp, r7
 80131a8:	bd90      	pop	{r4, r7, pc}
 80131aa:	bf00      	nop
 80131ac:	88888889 	.word	0x88888889

080131b0 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 80131b0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80131b4:	b084      	sub	sp, #16
 80131b6:	af00      	add	r7, sp, #0
 80131b8:	6078      	str	r0, [r7, #4]
 80131ba:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 80131bc:	683b      	ldr	r3, [r7, #0]
 80131be:	681a      	ldr	r2, [r3, #0]
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	601a      	str	r2, [r3, #0]
	dp->obj.sclust = obj->c_scl;
 80131c4:	683b      	ldr	r3, [r7, #0]
 80131c6:	6a1a      	ldr	r2, [r3, #32]
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	609a      	str	r2, [r3, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 80131cc:	683b      	ldr	r3, [r7, #0]
 80131ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131d0:	b2da      	uxtb	r2, r3
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	71da      	strb	r2, [r3, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 80131d6:	683b      	ldr	r3, [r7, #0]
 80131d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131da:	469b      	mov	fp, r3
 80131dc:	f04f 0c00 	mov.w	ip, #0
 80131e0:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 80131e4:	f04f 0200 	mov.w	r2, #0
 80131e8:	ea0b 0301 	and.w	r3, fp, r1
 80131ec:	ea0c 0402 	and.w	r4, ip, r2
 80131f0:	687a      	ldr	r2, [r7, #4]
 80131f2:	e9c2 3404 	strd	r3, r4, [r2, #16]
	dp->blk_ofs = obj->c_ofs;
 80131f6:	683b      	ldr	r3, [r7, #0]
 80131f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013202:	4619      	mov	r1, r3
 8013204:	6878      	ldr	r0, [r7, #4]
 8013206:	f7ff faab 	bl	8012760 <dir_sdi>
 801320a:	4603      	mov	r3, r0
 801320c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801320e:	7bfb      	ldrb	r3, [r7, #15]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d104      	bne.n	801321e <load_obj_dir+0x6e>
		res = load_xdir(dp);		/* Load the object's entry block */
 8013214:	6878      	ldr	r0, [r7, #4]
 8013216:	f7ff ff0d 	bl	8013034 <load_xdir>
 801321a:	4603      	mov	r3, r0
 801321c:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 801321e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013220:	4618      	mov	r0, r3
 8013222:	3710      	adds	r7, #16
 8013224:	46bd      	mov	sp, r7
 8013226:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0801322a <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 801322a:	b590      	push	{r4, r7, lr}
 801322c:	b087      	sub	sp, #28
 801322e:	af00      	add	r7, sp, #0
 8013230:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	695b      	ldr	r3, [r3, #20]
 8013238:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	1c9c      	adds	r4, r3, #2
 801323e:	68f8      	ldr	r0, [r7, #12]
 8013240:	f7ff fe91 	bl	8012f66 <xdir_sum>
 8013244:	4603      	mov	r3, r0
 8013246:	4619      	mov	r1, r3
 8013248:	4620      	mov	r0, r4
 801324a:	f7fe f901 	bl	8011450 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	3301      	adds	r3, #1
 8013252:	781b      	ldrb	r3, [r3, #0]
 8013254:	3301      	adds	r3, #1
 8013256:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801325c:	4619      	mov	r1, r3
 801325e:	6878      	ldr	r0, [r7, #4]
 8013260:	f7ff fa7e 	bl	8012760 <dir_sdi>
 8013264:	4603      	mov	r3, r0
 8013266:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8013268:	e026      	b.n	80132b8 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	681a      	ldr	r2, [r3, #0]
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013272:	4619      	mov	r1, r3
 8013274:	4610      	mov	r0, r2
 8013276:	f7fe fbe7 	bl	8011a48 <move_window>
 801327a:	4603      	mov	r3, r0
 801327c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801327e:	7dfb      	ldrb	r3, [r7, #23]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d11d      	bne.n	80132c0 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013288:	2220      	movs	r2, #32
 801328a:	68f9      	ldr	r1, [r7, #12]
 801328c:	4618      	mov	r0, r3
 801328e:	f7fe f9ad 	bl	80115ec <mem_cpy>
		dp->obj.fs->wflag = 1;
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	2201      	movs	r2, #1
 8013298:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 801329a:	693b      	ldr	r3, [r7, #16]
 801329c:	3b01      	subs	r3, #1
 801329e:	613b      	str	r3, [r7, #16]
 80132a0:	693b      	ldr	r3, [r7, #16]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d00e      	beq.n	80132c4 <store_xdir+0x9a>
		dirb += SZDIRE;
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	3320      	adds	r3, #32
 80132aa:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 80132ac:	2100      	movs	r1, #0
 80132ae:	6878      	ldr	r0, [r7, #4]
 80132b0:	f7ff faea 	bl	8012888 <dir_next>
 80132b4:	4603      	mov	r3, r0
 80132b6:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 80132b8:	7dfb      	ldrb	r3, [r7, #23]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d0d5      	beq.n	801326a <store_xdir+0x40>
 80132be:	e002      	b.n	80132c6 <store_xdir+0x9c>
		if (res != FR_OK) break;
 80132c0:	bf00      	nop
 80132c2:	e000      	b.n	80132c6 <store_xdir+0x9c>
		if (--nent == 0) break;
 80132c4:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 80132c6:	7dfb      	ldrb	r3, [r7, #23]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d002      	beq.n	80132d2 <store_xdir+0xa8>
 80132cc:	7dfb      	ldrb	r3, [r7, #23]
 80132ce:	2b01      	cmp	r3, #1
 80132d0:	d101      	bne.n	80132d6 <store_xdir+0xac>
 80132d2:	7dfb      	ldrb	r3, [r7, #23]
 80132d4:	e000      	b.n	80132d8 <store_xdir+0xae>
 80132d6:	2302      	movs	r3, #2
}
 80132d8:	4618      	mov	r0, r3
 80132da:	371c      	adds	r7, #28
 80132dc:	46bd      	mov	sp, r7
 80132de:	bd90      	pop	{r4, r7, pc}

080132e0 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 80132e0:	b590      	push	{r4, r7, lr}
 80132e2:	b085      	sub	sp, #20
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
 80132e8:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 80132ea:	2240      	movs	r2, #64	; 0x40
 80132ec:	2100      	movs	r1, #0
 80132ee:	6878      	ldr	r0, [r7, #4]
 80132f0:	f7fe f99d 	bl	801162e <mem_set>
	dirb[XDIR_Type] = 0x85;
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	2285      	movs	r2, #133	; 0x85
 80132f8:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	3320      	adds	r3, #32
 80132fe:	22c0      	movs	r2, #192	; 0xc0
 8013300:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 8013302:	2300      	movs	r3, #0
 8013304:	72bb      	strb	r3, [r7, #10]
 8013306:	2301      	movs	r3, #1
 8013308:	72fb      	strb	r3, [r7, #11]
 801330a:	2301      	movs	r3, #1
 801330c:	813b      	strh	r3, [r7, #8]
 801330e:	2340      	movs	r3, #64	; 0x40
 8013310:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	1c5a      	adds	r2, r3, #1
 8013316:	60fa      	str	r2, [r7, #12]
 8013318:	687a      	ldr	r2, [r7, #4]
 801331a:	4413      	add	r3, r2
 801331c:	22c1      	movs	r2, #193	; 0xc1
 801331e:	701a      	strb	r2, [r3, #0]
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	1c5a      	adds	r2, r3, #1
 8013324:	60fa      	str	r2, [r7, #12]
 8013326:	687a      	ldr	r2, [r7, #4]
 8013328:	4413      	add	r3, r2
 801332a:	2200      	movs	r2, #0
 801332c:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 801332e:	893b      	ldrh	r3, [r7, #8]
 8013330:	2b00      	cmp	r3, #0
 8013332:	d00b      	beq.n	801334c <create_xdir+0x6c>
 8013334:	7abb      	ldrb	r3, [r7, #10]
 8013336:	005b      	lsls	r3, r3, #1
 8013338:	683a      	ldr	r2, [r7, #0]
 801333a:	4413      	add	r3, r2
 801333c:	881b      	ldrh	r3, [r3, #0]
 801333e:	813b      	strh	r3, [r7, #8]
 8013340:	893b      	ldrh	r3, [r7, #8]
 8013342:	2b00      	cmp	r3, #0
 8013344:	d002      	beq.n	801334c <create_xdir+0x6c>
 8013346:	7abb      	ldrb	r3, [r7, #10]
 8013348:	3301      	adds	r3, #1
 801334a:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 801334c:	687a      	ldr	r2, [r7, #4]
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	4413      	add	r3, r2
 8013352:	893a      	ldrh	r2, [r7, #8]
 8013354:	4611      	mov	r1, r2
 8013356:	4618      	mov	r0, r3
 8013358:	f7fe f87a 	bl	8011450 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	3302      	adds	r3, #2
 8013360:	60fb      	str	r3, [r7, #12]
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	f003 031f 	and.w	r3, r3, #31
 8013368:	2b00      	cmp	r3, #0
 801336a:	d1e0      	bne.n	801332e <create_xdir+0x4e>
		nb++;
 801336c:	7afb      	ldrb	r3, [r7, #11]
 801336e:	3301      	adds	r3, #1
 8013370:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 8013372:	7abb      	ldrb	r3, [r7, #10]
 8013374:	005b      	lsls	r3, r3, #1
 8013376:	683a      	ldr	r2, [r7, #0]
 8013378:	4413      	add	r3, r2
 801337a:	881b      	ldrh	r3, [r3, #0]
 801337c:	2b00      	cmp	r3, #0
 801337e:	d1c8      	bne.n	8013312 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	3323      	adds	r3, #35	; 0x23
 8013384:	7aba      	ldrb	r2, [r7, #10]
 8013386:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	3301      	adds	r3, #1
 801338c:	7afa      	ldrb	r2, [r7, #11]
 801338e:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8013396:	6838      	ldr	r0, [r7, #0]
 8013398:	f7ff fe18 	bl	8012fcc <xname_sum>
 801339c:	4603      	mov	r3, r0
 801339e:	4619      	mov	r1, r3
 80133a0:	4620      	mov	r0, r4
 80133a2:	f7fe f855 	bl	8011450 <st_word>
}
 80133a6:	bf00      	nop
 80133a8:	3714      	adds	r7, #20
 80133aa:	46bd      	mov	sp, r7
 80133ac:	bd90      	pop	{r4, r7, pc}

080133ae <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80133ae:	b580      	push	{r7, lr}
 80133b0:	b086      	sub	sp, #24
 80133b2:	af00      	add	r7, sp, #0
 80133b4:	6078      	str	r0, [r7, #4]
 80133b6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80133b8:	2304      	movs	r3, #4
 80133ba:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 80133c2:	23ff      	movs	r3, #255	; 0xff
 80133c4:	757b      	strb	r3, [r7, #21]
 80133c6:	23ff      	movs	r3, #255	; 0xff
 80133c8:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80133ca:	e09f      	b.n	801350c <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80133d0:	4619      	mov	r1, r3
 80133d2:	6938      	ldr	r0, [r7, #16]
 80133d4:	f7fe fb38 	bl	8011a48 <move_window>
 80133d8:	4603      	mov	r3, r0
 80133da:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80133dc:	7dfb      	ldrb	r3, [r7, #23]
 80133de:	2b00      	cmp	r3, #0
 80133e0:	f040 809a 	bne.w	8013518 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80133e8:	781b      	ldrb	r3, [r3, #0]
 80133ea:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 80133ec:	7dbb      	ldrb	r3, [r7, #22]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d102      	bne.n	80133f8 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80133f2:	2304      	movs	r3, #4
 80133f4:	75fb      	strb	r3, [r7, #23]
 80133f6:	e096      	b.n	8013526 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80133f8:	693b      	ldr	r3, [r7, #16]
 80133fa:	781b      	ldrb	r3, [r3, #0]
 80133fc:	2b04      	cmp	r3, #4
 80133fe:	d118      	bne.n	8013432 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 8013400:	7dbb      	ldrb	r3, [r7, #22]
 8013402:	2b85      	cmp	r3, #133	; 0x85
 8013404:	d179      	bne.n	80134fa <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 801340e:	6878      	ldr	r0, [r7, #4]
 8013410:	f7ff fe10 	bl	8013034 <load_xdir>
 8013414:	4603      	mov	r3, r0
 8013416:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 8013418:	7dfb      	ldrb	r3, [r7, #23]
 801341a:	2b00      	cmp	r3, #0
 801341c:	d17e      	bne.n	801351c <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 801341e:	693b      	ldr	r3, [r7, #16]
 8013420:	695b      	ldr	r3, [r3, #20]
 8013422:	3304      	adds	r3, #4
 8013424:	781b      	ldrb	r3, [r3, #0]
 8013426:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801342a:	b2da      	uxtb	r2, r3
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	719a      	strb	r2, [r3, #6]
					}
					break;
 8013430:	e074      	b.n	801351c <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013436:	330b      	adds	r3, #11
 8013438:	781b      	ldrb	r3, [r3, #0]
 801343a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801343e:	73fb      	strb	r3, [r7, #15]
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	7bfa      	ldrb	r2, [r7, #15]
 8013444:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8013446:	7dbb      	ldrb	r3, [r7, #22]
 8013448:	2be5      	cmp	r3, #229	; 0xe5
 801344a:	d00e      	beq.n	801346a <dir_read+0xbc>
 801344c:	7dbb      	ldrb	r3, [r7, #22]
 801344e:	2b2e      	cmp	r3, #46	; 0x2e
 8013450:	d00b      	beq.n	801346a <dir_read+0xbc>
 8013452:	7bfb      	ldrb	r3, [r7, #15]
 8013454:	f023 0320 	bic.w	r3, r3, #32
 8013458:	2b08      	cmp	r3, #8
 801345a:	bf0c      	ite	eq
 801345c:	2301      	moveq	r3, #1
 801345e:	2300      	movne	r3, #0
 8013460:	b2db      	uxtb	r3, r3
 8013462:	461a      	mov	r2, r3
 8013464:	683b      	ldr	r3, [r7, #0]
 8013466:	4293      	cmp	r3, r2
 8013468:	d002      	beq.n	8013470 <dir_read+0xc2>
				ord = 0xFF;
 801346a:	23ff      	movs	r3, #255	; 0xff
 801346c:	757b      	strb	r3, [r7, #21]
 801346e:	e044      	b.n	80134fa <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8013470:	7bfb      	ldrb	r3, [r7, #15]
 8013472:	2b0f      	cmp	r3, #15
 8013474:	d12f      	bne.n	80134d6 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8013476:	7dbb      	ldrb	r3, [r7, #22]
 8013478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801347c:	2b00      	cmp	r3, #0
 801347e:	d00d      	beq.n	801349c <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013484:	7b5b      	ldrb	r3, [r3, #13]
 8013486:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8013488:	7dbb      	ldrb	r3, [r7, #22]
 801348a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801348e:	75bb      	strb	r3, [r7, #22]
 8013490:	7dbb      	ldrb	r3, [r7, #22]
 8013492:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801349c:	7dba      	ldrb	r2, [r7, #22]
 801349e:	7d7b      	ldrb	r3, [r7, #21]
 80134a0:	429a      	cmp	r2, r3
 80134a2:	d115      	bne.n	80134d0 <dir_read+0x122>
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80134a8:	330d      	adds	r3, #13
 80134aa:	781b      	ldrb	r3, [r3, #0]
 80134ac:	7d3a      	ldrb	r2, [r7, #20]
 80134ae:	429a      	cmp	r2, r3
 80134b0:	d10e      	bne.n	80134d0 <dir_read+0x122>
 80134b2:	693b      	ldr	r3, [r7, #16]
 80134b4:	691a      	ldr	r2, [r3, #16]
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80134ba:	4619      	mov	r1, r3
 80134bc:	4610      	mov	r0, r2
 80134be:	f7ff fbd5 	bl	8012c6c <pick_lfn>
 80134c2:	4603      	mov	r3, r0
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d003      	beq.n	80134d0 <dir_read+0x122>
 80134c8:	7d7b      	ldrb	r3, [r7, #21]
 80134ca:	3b01      	subs	r3, #1
 80134cc:	b2db      	uxtb	r3, r3
 80134ce:	e000      	b.n	80134d2 <dir_read+0x124>
 80134d0:	23ff      	movs	r3, #255	; 0xff
 80134d2:	757b      	strb	r3, [r7, #21]
 80134d4:	e011      	b.n	80134fa <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80134d6:	7d7b      	ldrb	r3, [r7, #21]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d109      	bne.n	80134f0 <dir_read+0x142>
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80134e0:	4618      	mov	r0, r3
 80134e2:	f7ff fd1f 	bl	8012f24 <sum_sfn>
 80134e6:	4603      	mov	r3, r0
 80134e8:	461a      	mov	r2, r3
 80134ea:	7d3b      	ldrb	r3, [r7, #20]
 80134ec:	4293      	cmp	r3, r2
 80134ee:	d017      	beq.n	8013520 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	f04f 32ff 	mov.w	r2, #4294967295
 80134f6:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 80134f8:	e012      	b.n	8013520 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80134fa:	2100      	movs	r1, #0
 80134fc:	6878      	ldr	r0, [r7, #4]
 80134fe:	f7ff f9c3 	bl	8012888 <dir_next>
 8013502:	4603      	mov	r3, r0
 8013504:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013506:	7dfb      	ldrb	r3, [r7, #23]
 8013508:	2b00      	cmp	r3, #0
 801350a:	d10b      	bne.n	8013524 <dir_read+0x176>
	while (dp->sect) {
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013510:	2b00      	cmp	r3, #0
 8013512:	f47f af5b 	bne.w	80133cc <dir_read+0x1e>
 8013516:	e006      	b.n	8013526 <dir_read+0x178>
		if (res != FR_OK) break;
 8013518:	bf00      	nop
 801351a:	e004      	b.n	8013526 <dir_read+0x178>
					break;
 801351c:	bf00      	nop
 801351e:	e002      	b.n	8013526 <dir_read+0x178>
					break;
 8013520:	bf00      	nop
 8013522:	e000      	b.n	8013526 <dir_read+0x178>
		if (res != FR_OK) break;
 8013524:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8013526:	7dfb      	ldrb	r3, [r7, #23]
 8013528:	2b00      	cmp	r3, #0
 801352a:	d002      	beq.n	8013532 <dir_read+0x184>
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	2200      	movs	r2, #0
 8013530:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 8013532:	7dfb      	ldrb	r3, [r7, #23]
}
 8013534:	4618      	mov	r0, r3
 8013536:	3718      	adds	r7, #24
 8013538:	46bd      	mov	sp, r7
 801353a:	bd80      	pop	{r7, pc}

0801353c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801353c:	b590      	push	{r4, r7, lr}
 801353e:	b089      	sub	sp, #36	; 0x24
 8013540:	af00      	add	r7, sp, #0
 8013542:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801354a:	2100      	movs	r1, #0
 801354c:	6878      	ldr	r0, [r7, #4]
 801354e:	f7ff f907 	bl	8012760 <dir_sdi>
 8013552:	4603      	mov	r3, r0
 8013554:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 8013556:	7ffb      	ldrb	r3, [r7, #31]
 8013558:	2b00      	cmp	r3, #0
 801355a:	d001      	beq.n	8013560 <dir_find+0x24>
 801355c:	7ffb      	ldrb	r3, [r7, #31]
 801355e:	e112      	b.n	8013786 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	781b      	ldrb	r3, [r3, #0]
 8013564:	2b04      	cmp	r3, #4
 8013566:	d164      	bne.n	8013632 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	691b      	ldr	r3, [r3, #16]
 801356c:	4618      	mov	r0, r3
 801356e:	f7ff fd2d 	bl	8012fcc <xname_sum>
 8013572:	4603      	mov	r3, r0
 8013574:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8013576:	e04f      	b.n	8013618 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	695b      	ldr	r3, [r3, #20]
 801357c:	3324      	adds	r3, #36	; 0x24
 801357e:	4618      	mov	r0, r3
 8013580:	f7fd fe6e 	bl	8011260 <ld_word>
 8013584:	4603      	mov	r3, r0
 8013586:	461a      	mov	r2, r3
 8013588:	893b      	ldrh	r3, [r7, #8]
 801358a:	4293      	cmp	r3, r2
 801358c:	d000      	beq.n	8013590 <dir_find+0x54>
 801358e:	e043      	b.n	8013618 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	695b      	ldr	r3, [r3, #20]
 8013594:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8013598:	76fb      	strb	r3, [r7, #27]
 801359a:	2340      	movs	r3, #64	; 0x40
 801359c:	617b      	str	r3, [r7, #20]
 801359e:	2300      	movs	r3, #0
 80135a0:	613b      	str	r3, [r7, #16]
 80135a2:	e029      	b.n	80135f8 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 80135a4:	697b      	ldr	r3, [r7, #20]
 80135a6:	f003 031f 	and.w	r3, r3, #31
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d102      	bne.n	80135b4 <dir_find+0x78>
 80135ae:	697b      	ldr	r3, [r7, #20]
 80135b0:	3302      	adds	r3, #2
 80135b2:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	695a      	ldr	r2, [r3, #20]
 80135b8:	697b      	ldr	r3, [r7, #20]
 80135ba:	4413      	add	r3, r2
 80135bc:	4618      	mov	r0, r3
 80135be:	f7fd fe4f 	bl	8011260 <ld_word>
 80135c2:	4603      	mov	r3, r0
 80135c4:	4618      	mov	r0, r3
 80135c6:	f002 ff7d 	bl	80164c4 <ff_wtoupper>
 80135ca:	4603      	mov	r3, r0
 80135cc:	461c      	mov	r4, r3
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	691a      	ldr	r2, [r3, #16]
 80135d2:	693b      	ldr	r3, [r7, #16]
 80135d4:	005b      	lsls	r3, r3, #1
 80135d6:	4413      	add	r3, r2
 80135d8:	881b      	ldrh	r3, [r3, #0]
 80135da:	4618      	mov	r0, r3
 80135dc:	f002 ff72 	bl	80164c4 <ff_wtoupper>
 80135e0:	4603      	mov	r3, r0
 80135e2:	429c      	cmp	r4, r3
 80135e4:	d10c      	bne.n	8013600 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 80135e6:	7efb      	ldrb	r3, [r7, #27]
 80135e8:	3b01      	subs	r3, #1
 80135ea:	76fb      	strb	r3, [r7, #27]
 80135ec:	697b      	ldr	r3, [r7, #20]
 80135ee:	3302      	adds	r3, #2
 80135f0:	617b      	str	r3, [r7, #20]
 80135f2:	693b      	ldr	r3, [r7, #16]
 80135f4:	3301      	adds	r3, #1
 80135f6:	613b      	str	r3, [r7, #16]
 80135f8:	7efb      	ldrb	r3, [r7, #27]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d1d2      	bne.n	80135a4 <dir_find+0x68>
 80135fe:	e000      	b.n	8013602 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8013600:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8013602:	7efb      	ldrb	r3, [r7, #27]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d107      	bne.n	8013618 <dir_find+0xdc>
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	691a      	ldr	r2, [r3, #16]
 801360c:	693b      	ldr	r3, [r7, #16]
 801360e:	005b      	lsls	r3, r3, #1
 8013610:	4413      	add	r3, r2
 8013612:	881b      	ldrh	r3, [r3, #0]
 8013614:	2b00      	cmp	r3, #0
 8013616:	d009      	beq.n	801362c <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8013618:	2100      	movs	r1, #0
 801361a:	6878      	ldr	r0, [r7, #4]
 801361c:	f7ff fec7 	bl	80133ae <dir_read>
 8013620:	4603      	mov	r3, r0
 8013622:	77fb      	strb	r3, [r7, #31]
 8013624:	7ffb      	ldrb	r3, [r7, #31]
 8013626:	2b00      	cmp	r3, #0
 8013628:	d0a6      	beq.n	8013578 <dir_find+0x3c>
 801362a:	e000      	b.n	801362e <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 801362c:	bf00      	nop
		}
		return res;
 801362e:	7ffb      	ldrb	r3, [r7, #31]
 8013630:	e0a9      	b.n	8013786 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8013632:	23ff      	movs	r3, #255	; 0xff
 8013634:	773b      	strb	r3, [r7, #28]
 8013636:	7f3b      	ldrb	r3, [r7, #28]
 8013638:	777b      	strb	r3, [r7, #29]
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	f04f 32ff 	mov.w	r2, #4294967295
 8013640:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013646:	4619      	mov	r1, r3
 8013648:	68f8      	ldr	r0, [r7, #12]
 801364a:	f7fe f9fd 	bl	8011a48 <move_window>
 801364e:	4603      	mov	r3, r0
 8013650:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 8013652:	7ffb      	ldrb	r3, [r7, #31]
 8013654:	2b00      	cmp	r3, #0
 8013656:	f040 8090 	bne.w	801377a <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801365e:	781b      	ldrb	r3, [r3, #0]
 8013660:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8013662:	7fbb      	ldrb	r3, [r7, #30]
 8013664:	2b00      	cmp	r3, #0
 8013666:	d102      	bne.n	801366e <dir_find+0x132>
 8013668:	2304      	movs	r3, #4
 801366a:	77fb      	strb	r3, [r7, #31]
 801366c:	e08a      	b.n	8013784 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013672:	330b      	adds	r3, #11
 8013674:	781b      	ldrb	r3, [r3, #0]
 8013676:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801367a:	72fb      	strb	r3, [r7, #11]
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	7afa      	ldrb	r2, [r7, #11]
 8013680:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8013682:	7fbb      	ldrb	r3, [r7, #30]
 8013684:	2be5      	cmp	r3, #229	; 0xe5
 8013686:	d007      	beq.n	8013698 <dir_find+0x15c>
 8013688:	7afb      	ldrb	r3, [r7, #11]
 801368a:	f003 0308 	and.w	r3, r3, #8
 801368e:	2b00      	cmp	r3, #0
 8013690:	d009      	beq.n	80136a6 <dir_find+0x16a>
 8013692:	7afb      	ldrb	r3, [r7, #11]
 8013694:	2b0f      	cmp	r3, #15
 8013696:	d006      	beq.n	80136a6 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8013698:	23ff      	movs	r3, #255	; 0xff
 801369a:	777b      	strb	r3, [r7, #29]
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	f04f 32ff 	mov.w	r2, #4294967295
 80136a2:	64da      	str	r2, [r3, #76]	; 0x4c
 80136a4:	e05e      	b.n	8013764 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80136a6:	7afb      	ldrb	r3, [r7, #11]
 80136a8:	2b0f      	cmp	r3, #15
 80136aa:	d136      	bne.n	801371a <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80136b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d154      	bne.n	8013764 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80136ba:	7fbb      	ldrb	r3, [r7, #30]
 80136bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d00d      	beq.n	80136e0 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136c8:	7b5b      	ldrb	r3, [r3, #13]
 80136ca:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80136cc:	7fbb      	ldrb	r3, [r7, #30]
 80136ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80136d2:	77bb      	strb	r3, [r7, #30]
 80136d4:	7fbb      	ldrb	r3, [r7, #30]
 80136d6:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80136e0:	7fba      	ldrb	r2, [r7, #30]
 80136e2:	7f7b      	ldrb	r3, [r7, #29]
 80136e4:	429a      	cmp	r2, r3
 80136e6:	d115      	bne.n	8013714 <dir_find+0x1d8>
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136ec:	330d      	adds	r3, #13
 80136ee:	781b      	ldrb	r3, [r3, #0]
 80136f0:	7f3a      	ldrb	r2, [r7, #28]
 80136f2:	429a      	cmp	r2, r3
 80136f4:	d10e      	bne.n	8013714 <dir_find+0x1d8>
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	691a      	ldr	r2, [r3, #16]
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136fe:	4619      	mov	r1, r3
 8013700:	4610      	mov	r0, r2
 8013702:	f7ff fa43 	bl	8012b8c <cmp_lfn>
 8013706:	4603      	mov	r3, r0
 8013708:	2b00      	cmp	r3, #0
 801370a:	d003      	beq.n	8013714 <dir_find+0x1d8>
 801370c:	7f7b      	ldrb	r3, [r7, #29]
 801370e:	3b01      	subs	r3, #1
 8013710:	b2db      	uxtb	r3, r3
 8013712:	e000      	b.n	8013716 <dir_find+0x1da>
 8013714:	23ff      	movs	r3, #255	; 0xff
 8013716:	777b      	strb	r3, [r7, #29]
 8013718:	e024      	b.n	8013764 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801371a:	7f7b      	ldrb	r3, [r7, #29]
 801371c:	2b00      	cmp	r3, #0
 801371e:	d109      	bne.n	8013734 <dir_find+0x1f8>
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013724:	4618      	mov	r0, r3
 8013726:	f7ff fbfd 	bl	8012f24 <sum_sfn>
 801372a:	4603      	mov	r3, r0
 801372c:	461a      	mov	r2, r3
 801372e:	7f3b      	ldrb	r3, [r7, #28]
 8013730:	4293      	cmp	r3, r2
 8013732:	d024      	beq.n	801377e <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 801373a:	f003 0301 	and.w	r3, r3, #1
 801373e:	2b00      	cmp	r3, #0
 8013740:	d10a      	bne.n	8013758 <dir_find+0x21c>
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	3340      	adds	r3, #64	; 0x40
 801374a:	220b      	movs	r2, #11
 801374c:	4619      	mov	r1, r3
 801374e:	f7fd ff88 	bl	8011662 <mem_cmp>
 8013752:	4603      	mov	r3, r0
 8013754:	2b00      	cmp	r3, #0
 8013756:	d014      	beq.n	8013782 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8013758:	23ff      	movs	r3, #255	; 0xff
 801375a:	777b      	strb	r3, [r7, #29]
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	f04f 32ff 	mov.w	r2, #4294967295
 8013762:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8013764:	2100      	movs	r1, #0
 8013766:	6878      	ldr	r0, [r7, #4]
 8013768:	f7ff f88e 	bl	8012888 <dir_next>
 801376c:	4603      	mov	r3, r0
 801376e:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 8013770:	7ffb      	ldrb	r3, [r7, #31]
 8013772:	2b00      	cmp	r3, #0
 8013774:	f43f af65 	beq.w	8013642 <dir_find+0x106>
 8013778:	e004      	b.n	8013784 <dir_find+0x248>
		if (res != FR_OK) break;
 801377a:	bf00      	nop
 801377c:	e002      	b.n	8013784 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801377e:	bf00      	nop
 8013780:	e000      	b.n	8013784 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8013782:	bf00      	nop

	return res;
 8013784:	7ffb      	ldrb	r3, [r7, #31]
}
 8013786:	4618      	mov	r0, r3
 8013788:	3724      	adds	r7, #36	; 0x24
 801378a:	46bd      	mov	sp, r7
 801378c:	bd90      	pop	{r4, r7, pc}
	...

08013790 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8013790:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8013794:	b0a0      	sub	sp, #128	; 0x80
 8013796:	af00      	add	r7, sp, #0
 8013798:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80137a6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d001      	beq.n	80137b2 <dir_register+0x22>
 80137ae:	2306      	movs	r3, #6
 80137b0:	e198      	b.n	8013ae4 <dir_register+0x354>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80137b2:	2300      	movs	r3, #0
 80137b4:	677b      	str	r3, [r7, #116]	; 0x74
 80137b6:	e002      	b.n	80137be <dir_register+0x2e>
 80137b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80137ba:	3301      	adds	r3, #1
 80137bc:	677b      	str	r3, [r7, #116]	; 0x74
 80137be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80137c0:	691a      	ldr	r2, [r3, #16]
 80137c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80137c4:	005b      	lsls	r3, r3, #1
 80137c6:	4413      	add	r3, r2
 80137c8:	881b      	ldrh	r3, [r3, #0]
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d1f4      	bne.n	80137b8 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80137ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80137d0:	781b      	ldrb	r3, [r3, #0]
 80137d2:	2b04      	cmp	r3, #4
 80137d4:	f040 80a9 	bne.w	801392a <dir_register+0x19a>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 80137d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80137da:	330e      	adds	r3, #14
 80137dc:	4aa7      	ldr	r2, [pc, #668]	; (8013a7c <dir_register+0x2ec>)
 80137de:	fba2 2303 	umull	r2, r3, r2, r3
 80137e2:	08db      	lsrs	r3, r3, #3
 80137e4:	3302      	adds	r3, #2
 80137e6:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 80137e8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80137ea:	6878      	ldr	r0, [r7, #4]
 80137ec:	f7ff f932 	bl	8012a54 <dir_alloc>
 80137f0:	4603      	mov	r3, r0
 80137f2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 80137f6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d002      	beq.n	8013804 <dir_register+0x74>
 80137fe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8013802:	e16f      	b.n	8013ae4 <dir_register+0x354>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013808:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801380a:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 801380e:	440b      	add	r3, r1
 8013810:	015b      	lsls	r3, r3, #5
 8013812:	1ad2      	subs	r2, r2, r3
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	689b      	ldr	r3, [r3, #8]
 801381c:	2b00      	cmp	r3, #0
 801381e:	d07a      	beq.n	8013916 <dir_register+0x186>
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	79db      	ldrb	r3, [r3, #7]
 8013824:	f003 0304 	and.w	r3, r3, #4
 8013828:	2b00      	cmp	r3, #0
 801382a:	d074      	beq.n	8013916 <dir_register+0x186>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8013832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013834:	895b      	ldrh	r3, [r3, #10]
 8013836:	4618      	mov	r0, r3
 8013838:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801383a:	899b      	ldrh	r3, [r3, #12]
 801383c:	fb03 f300 	mul.w	r3, r3, r0
 8013840:	469b      	mov	fp, r3
 8013842:	f04f 0c00 	mov.w	ip, #0
 8013846:	eb1b 0301 	adds.w	r3, fp, r1
 801384a:	eb4c 0402 	adc.w	r4, ip, r2
 801384e:	687a      	ldr	r2, [r7, #4]
 8013850:	e9c2 3404 	strd	r3, r4, [r2, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	4618      	mov	r0, r3
 8013858:	f7fe fd26 	bl	80122a8 <fill_first_frag>
 801385c:	4603      	mov	r3, r0
 801385e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8013862:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8013866:	2b00      	cmp	r3, #0
 8013868:	d002      	beq.n	8013870 <dir_register+0xe0>
 801386a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801386e:	e139      	b.n	8013ae4 <dir_register+0x354>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8013870:	6878      	ldr	r0, [r7, #4]
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013876:	f04f 32ff 	mov.w	r2, #4294967295
 801387a:	4619      	mov	r1, r3
 801387c:	f7fe fd43 	bl	8012306 <fill_last_frag>
 8013880:	4603      	mov	r3, r0
 8013882:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8013886:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801388a:	2b00      	cmp	r3, #0
 801388c:	d002      	beq.n	8013894 <dir_register+0x104>
 801388e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8013892:	e127      	b.n	8013ae4 <dir_register+0x354>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 8013894:	687a      	ldr	r2, [r7, #4]
 8013896:	f107 0308 	add.w	r3, r7, #8
 801389a:	4611      	mov	r1, r2
 801389c:	4618      	mov	r0, r3
 801389e:	f7ff fc87 	bl	80131b0 <load_obj_dir>
 80138a2:	4603      	mov	r3, r0
 80138a4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 80138a8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d002      	beq.n	80138b6 <dir_register+0x126>
 80138b0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80138b4:	e116      	b.n	8013ae4 <dir_register+0x354>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 80138b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80138b8:	695b      	ldr	r3, [r3, #20]
 80138ba:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80138c4:	461a      	mov	r2, r3
 80138c6:	4623      	mov	r3, r4
 80138c8:	4608      	mov	r0, r1
 80138ca:	f7fd fe08 	bl	80114de <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 80138ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80138d0:	695b      	ldr	r3, [r3, #20]
 80138d2:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80138dc:	461a      	mov	r2, r3
 80138de:	4623      	mov	r3, r4
 80138e0:	4608      	mov	r0, r1
 80138e2:	f7fd fdfc 	bl	80114de <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	79da      	ldrb	r2, [r3, #7]
 80138ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80138ec:	695b      	ldr	r3, [r3, #20]
 80138ee:	3321      	adds	r3, #33	; 0x21
 80138f0:	f042 0201 	orr.w	r2, r2, #1
 80138f4:	b2d2      	uxtb	r2, r2
 80138f6:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 80138f8:	f107 0308 	add.w	r3, r7, #8
 80138fc:	4618      	mov	r0, r3
 80138fe:	f7ff fc94 	bl	801322a <store_xdir>
 8013902:	4603      	mov	r3, r0
 8013904:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8013908:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801390c:	2b00      	cmp	r3, #0
 801390e:	d002      	beq.n	8013916 <dir_register+0x186>
 8013910:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8013914:	e0e6      	b.n	8013ae4 <dir_register+0x354>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8013916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013918:	695a      	ldr	r2, [r3, #20]
 801391a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801391c:	691b      	ldr	r3, [r3, #16]
 801391e:	4619      	mov	r1, r3
 8013920:	4610      	mov	r0, r2
 8013922:	f7ff fcdd 	bl	80132e0 <create_xdir>
		return FR_OK;
 8013926:	2300      	movs	r3, #0
 8013928:	e0dc      	b.n	8013ae4 <dir_register+0x354>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8013930:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013934:	220c      	movs	r2, #12
 8013936:	4618      	mov	r0, r3
 8013938:	f7fd fe58 	bl	80115ec <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801393c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013940:	f003 0301 	and.w	r3, r3, #1
 8013944:	2b00      	cmp	r3, #0
 8013946:	d033      	beq.n	80139b0 <dir_register+0x220>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	2240      	movs	r2, #64	; 0x40
 801394c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 8013950:	2301      	movs	r3, #1
 8013952:	67bb      	str	r3, [r7, #120]	; 0x78
 8013954:	e016      	b.n	8013984 <dir_register+0x1f4>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	f103 0040 	add.w	r0, r3, #64	; 0x40
 801395c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801395e:	691a      	ldr	r2, [r3, #16]
 8013960:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8013964:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013966:	f7ff fa4d 	bl	8012e04 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801396a:	6878      	ldr	r0, [r7, #4]
 801396c:	f7ff fde6 	bl	801353c <dir_find>
 8013970:	4603      	mov	r3, r0
 8013972:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 8013976:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801397a:	2b00      	cmp	r3, #0
 801397c:	d106      	bne.n	801398c <dir_register+0x1fc>
		for (n = 1; n < 100; n++) {
 801397e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013980:	3301      	adds	r3, #1
 8013982:	67bb      	str	r3, [r7, #120]	; 0x78
 8013984:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013986:	2b63      	cmp	r3, #99	; 0x63
 8013988:	d9e5      	bls.n	8013956 <dir_register+0x1c6>
 801398a:	e000      	b.n	801398e <dir_register+0x1fe>
			if (res != FR_OK) break;
 801398c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801398e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013990:	2b64      	cmp	r3, #100	; 0x64
 8013992:	d101      	bne.n	8013998 <dir_register+0x208>
 8013994:	2307      	movs	r3, #7
 8013996:	e0a5      	b.n	8013ae4 <dir_register+0x354>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8013998:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801399c:	2b04      	cmp	r3, #4
 801399e:	d002      	beq.n	80139a6 <dir_register+0x216>
 80139a0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80139a4:	e09e      	b.n	8013ae4 <dir_register+0x354>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80139a6:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80139b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80139b4:	f003 0302 	and.w	r3, r3, #2
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d007      	beq.n	80139cc <dir_register+0x23c>
 80139bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80139be:	330c      	adds	r3, #12
 80139c0:	4a2f      	ldr	r2, [pc, #188]	; (8013a80 <dir_register+0x2f0>)
 80139c2:	fba2 2303 	umull	r2, r3, r2, r3
 80139c6:	089b      	lsrs	r3, r3, #2
 80139c8:	3301      	adds	r3, #1
 80139ca:	e000      	b.n	80139ce <dir_register+0x23e>
 80139cc:	2301      	movs	r3, #1
 80139ce:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80139d0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80139d2:	6878      	ldr	r0, [r7, #4]
 80139d4:	f7ff f83e 	bl	8012a54 <dir_alloc>
 80139d8:	4603      	mov	r3, r0
 80139da:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80139de:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d14f      	bne.n	8013a86 <dir_register+0x2f6>
 80139e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80139e8:	3b01      	subs	r3, #1
 80139ea:	673b      	str	r3, [r7, #112]	; 0x70
 80139ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d049      	beq.n	8013a86 <dir_register+0x2f6>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80139f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80139f8:	015b      	lsls	r3, r3, #5
 80139fa:	1ad3      	subs	r3, r2, r3
 80139fc:	4619      	mov	r1, r3
 80139fe:	6878      	ldr	r0, [r7, #4]
 8013a00:	f7fe feae 	bl	8012760 <dir_sdi>
 8013a04:	4603      	mov	r3, r0
 8013a06:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8013a0a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d139      	bne.n	8013a86 <dir_register+0x2f6>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	3340      	adds	r3, #64	; 0x40
 8013a16:	4618      	mov	r0, r3
 8013a18:	f7ff fa84 	bl	8012f24 <sum_sfn>
 8013a1c:	4603      	mov	r3, r0
 8013a1e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a26:	4619      	mov	r1, r3
 8013a28:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8013a2a:	f7fe f80d 	bl	8011a48 <move_window>
 8013a2e:	4603      	mov	r3, r0
 8013a30:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 8013a34:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d123      	bne.n	8013a84 <dir_register+0x2f4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8013a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013a3e:	6918      	ldr	r0, [r3, #16]
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8013a44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013a46:	b2da      	uxtb	r2, r3
 8013a48:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8013a4c:	f7ff f972 	bl	8012d34 <put_lfn>
				fs->wflag = 1;
 8013a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013a52:	2201      	movs	r2, #1
 8013a54:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8013a56:	2100      	movs	r1, #0
 8013a58:	6878      	ldr	r0, [r7, #4]
 8013a5a:	f7fe ff15 	bl	8012888 <dir_next>
 8013a5e:	4603      	mov	r3, r0
 8013a60:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 8013a64:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d10c      	bne.n	8013a86 <dir_register+0x2f6>
 8013a6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013a6e:	3b01      	subs	r3, #1
 8013a70:	673b      	str	r3, [r7, #112]	; 0x70
 8013a72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d1d4      	bne.n	8013a22 <dir_register+0x292>
 8013a78:	e005      	b.n	8013a86 <dir_register+0x2f6>
 8013a7a:	bf00      	nop
 8013a7c:	88888889 	.word	0x88888889
 8013a80:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 8013a84:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8013a86:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d128      	bne.n	8013ae0 <dir_register+0x350>
		res = move_window(fs, dp->sect);
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a92:	4619      	mov	r1, r3
 8013a94:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8013a96:	f7fd ffd7 	bl	8011a48 <move_window>
 8013a9a:	4603      	mov	r3, r0
 8013a9c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8013aa0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d11b      	bne.n	8013ae0 <dir_register+0x350>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013aac:	2220      	movs	r2, #32
 8013aae:	2100      	movs	r1, #0
 8013ab0:	4618      	mov	r0, r3
 8013ab2:	f7fd fdbc 	bl	801162e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	3340      	adds	r3, #64	; 0x40
 8013abe:	220b      	movs	r2, #11
 8013ac0:	4619      	mov	r1, r3
 8013ac2:	f7fd fd93 	bl	80115ec <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013ad0:	330c      	adds	r3, #12
 8013ad2:	f002 0218 	and.w	r2, r2, #24
 8013ad6:	b2d2      	uxtb	r2, r2
 8013ad8:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8013ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013adc:	2201      	movs	r2, #1
 8013ade:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8013ae0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	3780      	adds	r7, #128	; 0x80
 8013ae8:	46bd      	mov	sp, r7
 8013aea:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8013aee:	bf00      	nop

08013af0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8013af0:	b580      	push	{r7, lr}
 8013af2:	b08a      	sub	sp, #40	; 0x28
 8013af4:	af00      	add	r7, sp, #0
 8013af6:	6078      	str	r0, [r7, #4]
 8013af8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8013afa:	683b      	ldr	r3, [r7, #0]
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	613b      	str	r3, [r7, #16]
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	691b      	ldr	r3, [r3, #16]
 8013b06:	60fb      	str	r3, [r7, #12]
 8013b08:	2300      	movs	r3, #0
 8013b0a:	617b      	str	r3, [r7, #20]
 8013b0c:	697b      	ldr	r3, [r7, #20]
 8013b0e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8013b10:	69bb      	ldr	r3, [r7, #24]
 8013b12:	1c5a      	adds	r2, r3, #1
 8013b14:	61ba      	str	r2, [r7, #24]
 8013b16:	693a      	ldr	r2, [r7, #16]
 8013b18:	4413      	add	r3, r2
 8013b1a:	781b      	ldrb	r3, [r3, #0]
 8013b1c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8013b1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013b20:	2b1f      	cmp	r3, #31
 8013b22:	d940      	bls.n	8013ba6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8013b24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013b26:	2b2f      	cmp	r3, #47	; 0x2f
 8013b28:	d006      	beq.n	8013b38 <create_name+0x48>
 8013b2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013b2c:	2b5c      	cmp	r3, #92	; 0x5c
 8013b2e:	d110      	bne.n	8013b52 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8013b30:	e002      	b.n	8013b38 <create_name+0x48>
 8013b32:	69bb      	ldr	r3, [r7, #24]
 8013b34:	3301      	adds	r3, #1
 8013b36:	61bb      	str	r3, [r7, #24]
 8013b38:	693a      	ldr	r2, [r7, #16]
 8013b3a:	69bb      	ldr	r3, [r7, #24]
 8013b3c:	4413      	add	r3, r2
 8013b3e:	781b      	ldrb	r3, [r3, #0]
 8013b40:	2b2f      	cmp	r3, #47	; 0x2f
 8013b42:	d0f6      	beq.n	8013b32 <create_name+0x42>
 8013b44:	693a      	ldr	r2, [r7, #16]
 8013b46:	69bb      	ldr	r3, [r7, #24]
 8013b48:	4413      	add	r3, r2
 8013b4a:	781b      	ldrb	r3, [r3, #0]
 8013b4c:	2b5c      	cmp	r3, #92	; 0x5c
 8013b4e:	d0f0      	beq.n	8013b32 <create_name+0x42>
			break;
 8013b50:	e02a      	b.n	8013ba8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8013b52:	697b      	ldr	r3, [r7, #20]
 8013b54:	2bfe      	cmp	r3, #254	; 0xfe
 8013b56:	d901      	bls.n	8013b5c <create_name+0x6c>
 8013b58:	2306      	movs	r3, #6
 8013b5a:	e177      	b.n	8013e4c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8013b5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013b5e:	b2db      	uxtb	r3, r3
 8013b60:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8013b62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013b64:	2101      	movs	r1, #1
 8013b66:	4618      	mov	r0, r3
 8013b68:	f002 fc70 	bl	801644c <ff_convert>
 8013b6c:	4603      	mov	r3, r0
 8013b6e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8013b70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d101      	bne.n	8013b7a <create_name+0x8a>
 8013b76:	2306      	movs	r3, #6
 8013b78:	e168      	b.n	8013e4c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8013b7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013b7c:	2b7f      	cmp	r3, #127	; 0x7f
 8013b7e:	d809      	bhi.n	8013b94 <create_name+0xa4>
 8013b80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013b82:	4619      	mov	r1, r3
 8013b84:	48b3      	ldr	r0, [pc, #716]	; (8013e54 <create_name+0x364>)
 8013b86:	f7fd fd93 	bl	80116b0 <chk_chr>
 8013b8a:	4603      	mov	r3, r0
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d001      	beq.n	8013b94 <create_name+0xa4>
 8013b90:	2306      	movs	r3, #6
 8013b92:	e15b      	b.n	8013e4c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8013b94:	697b      	ldr	r3, [r7, #20]
 8013b96:	1c5a      	adds	r2, r3, #1
 8013b98:	617a      	str	r2, [r7, #20]
 8013b9a:	005b      	lsls	r3, r3, #1
 8013b9c:	68fa      	ldr	r2, [r7, #12]
 8013b9e:	4413      	add	r3, r2
 8013ba0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013ba2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8013ba4:	e7b4      	b.n	8013b10 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8013ba6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8013ba8:	693a      	ldr	r2, [r7, #16]
 8013baa:	69bb      	ldr	r3, [r7, #24]
 8013bac:	441a      	add	r2, r3
 8013bae:	683b      	ldr	r3, [r7, #0]
 8013bb0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8013bb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013bb4:	2b1f      	cmp	r3, #31
 8013bb6:	d801      	bhi.n	8013bbc <create_name+0xcc>
 8013bb8:	2304      	movs	r3, #4
 8013bba:	e000      	b.n	8013bbe <create_name+0xce>
 8013bbc:	2300      	movs	r3, #0
 8013bbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8013bc2:	e011      	b.n	8013be8 <create_name+0xf8>
		w = lfn[di - 1];
 8013bc4:	697a      	ldr	r2, [r7, #20]
 8013bc6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013bca:	4413      	add	r3, r2
 8013bcc:	005b      	lsls	r3, r3, #1
 8013bce:	68fa      	ldr	r2, [r7, #12]
 8013bd0:	4413      	add	r3, r2
 8013bd2:	881b      	ldrh	r3, [r3, #0]
 8013bd4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8013bd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013bd8:	2b20      	cmp	r3, #32
 8013bda:	d002      	beq.n	8013be2 <create_name+0xf2>
 8013bdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013bde:	2b2e      	cmp	r3, #46	; 0x2e
 8013be0:	d106      	bne.n	8013bf0 <create_name+0x100>
		di--;
 8013be2:	697b      	ldr	r3, [r7, #20]
 8013be4:	3b01      	subs	r3, #1
 8013be6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8013be8:	697b      	ldr	r3, [r7, #20]
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d1ea      	bne.n	8013bc4 <create_name+0xd4>
 8013bee:	e000      	b.n	8013bf2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8013bf0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8013bf2:	697b      	ldr	r3, [r7, #20]
 8013bf4:	005b      	lsls	r3, r3, #1
 8013bf6:	68fa      	ldr	r2, [r7, #12]
 8013bf8:	4413      	add	r3, r2
 8013bfa:	2200      	movs	r2, #0
 8013bfc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8013bfe:	697b      	ldr	r3, [r7, #20]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d101      	bne.n	8013c08 <create_name+0x118>
 8013c04:	2306      	movs	r3, #6
 8013c06:	e121      	b.n	8013e4c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	3340      	adds	r3, #64	; 0x40
 8013c0c:	220b      	movs	r2, #11
 8013c0e:	2120      	movs	r1, #32
 8013c10:	4618      	mov	r0, r3
 8013c12:	f7fd fd0c 	bl	801162e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8013c16:	2300      	movs	r3, #0
 8013c18:	61bb      	str	r3, [r7, #24]
 8013c1a:	e002      	b.n	8013c22 <create_name+0x132>
 8013c1c:	69bb      	ldr	r3, [r7, #24]
 8013c1e:	3301      	adds	r3, #1
 8013c20:	61bb      	str	r3, [r7, #24]
 8013c22:	69bb      	ldr	r3, [r7, #24]
 8013c24:	005b      	lsls	r3, r3, #1
 8013c26:	68fa      	ldr	r2, [r7, #12]
 8013c28:	4413      	add	r3, r2
 8013c2a:	881b      	ldrh	r3, [r3, #0]
 8013c2c:	2b20      	cmp	r3, #32
 8013c2e:	d0f5      	beq.n	8013c1c <create_name+0x12c>
 8013c30:	69bb      	ldr	r3, [r7, #24]
 8013c32:	005b      	lsls	r3, r3, #1
 8013c34:	68fa      	ldr	r2, [r7, #12]
 8013c36:	4413      	add	r3, r2
 8013c38:	881b      	ldrh	r3, [r3, #0]
 8013c3a:	2b2e      	cmp	r3, #46	; 0x2e
 8013c3c:	d0ee      	beq.n	8013c1c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8013c3e:	69bb      	ldr	r3, [r7, #24]
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d009      	beq.n	8013c58 <create_name+0x168>
 8013c44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c48:	f043 0303 	orr.w	r3, r3, #3
 8013c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8013c50:	e002      	b.n	8013c58 <create_name+0x168>
 8013c52:	697b      	ldr	r3, [r7, #20]
 8013c54:	3b01      	subs	r3, #1
 8013c56:	617b      	str	r3, [r7, #20]
 8013c58:	697b      	ldr	r3, [r7, #20]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d009      	beq.n	8013c72 <create_name+0x182>
 8013c5e:	697a      	ldr	r2, [r7, #20]
 8013c60:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013c64:	4413      	add	r3, r2
 8013c66:	005b      	lsls	r3, r3, #1
 8013c68:	68fa      	ldr	r2, [r7, #12]
 8013c6a:	4413      	add	r3, r2
 8013c6c:	881b      	ldrh	r3, [r3, #0]
 8013c6e:	2b2e      	cmp	r3, #46	; 0x2e
 8013c70:	d1ef      	bne.n	8013c52 <create_name+0x162>

	i = b = 0; ni = 8;
 8013c72:	2300      	movs	r3, #0
 8013c74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013c78:	2300      	movs	r3, #0
 8013c7a:	623b      	str	r3, [r7, #32]
 8013c7c:	2308      	movs	r3, #8
 8013c7e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8013c80:	69bb      	ldr	r3, [r7, #24]
 8013c82:	1c5a      	adds	r2, r3, #1
 8013c84:	61ba      	str	r2, [r7, #24]
 8013c86:	005b      	lsls	r3, r3, #1
 8013c88:	68fa      	ldr	r2, [r7, #12]
 8013c8a:	4413      	add	r3, r2
 8013c8c:	881b      	ldrh	r3, [r3, #0]
 8013c8e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8013c90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	f000 8090 	beq.w	8013db8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8013c98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013c9a:	2b20      	cmp	r3, #32
 8013c9c:	d006      	beq.n	8013cac <create_name+0x1bc>
 8013c9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013ca0:	2b2e      	cmp	r3, #46	; 0x2e
 8013ca2:	d10a      	bne.n	8013cba <create_name+0x1ca>
 8013ca4:	69ba      	ldr	r2, [r7, #24]
 8013ca6:	697b      	ldr	r3, [r7, #20]
 8013ca8:	429a      	cmp	r2, r3
 8013caa:	d006      	beq.n	8013cba <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8013cac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013cb0:	f043 0303 	orr.w	r3, r3, #3
 8013cb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013cb8:	e07d      	b.n	8013db6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8013cba:	6a3a      	ldr	r2, [r7, #32]
 8013cbc:	69fb      	ldr	r3, [r7, #28]
 8013cbe:	429a      	cmp	r2, r3
 8013cc0:	d203      	bcs.n	8013cca <create_name+0x1da>
 8013cc2:	69ba      	ldr	r2, [r7, #24]
 8013cc4:	697b      	ldr	r3, [r7, #20]
 8013cc6:	429a      	cmp	r2, r3
 8013cc8:	d123      	bne.n	8013d12 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8013cca:	69fb      	ldr	r3, [r7, #28]
 8013ccc:	2b0b      	cmp	r3, #11
 8013cce:	d106      	bne.n	8013cde <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8013cd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013cd4:	f043 0303 	orr.w	r3, r3, #3
 8013cd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013cdc:	e06f      	b.n	8013dbe <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8013cde:	69ba      	ldr	r2, [r7, #24]
 8013ce0:	697b      	ldr	r3, [r7, #20]
 8013ce2:	429a      	cmp	r2, r3
 8013ce4:	d005      	beq.n	8013cf2 <create_name+0x202>
 8013ce6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013cea:	f043 0303 	orr.w	r3, r3, #3
 8013cee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8013cf2:	69ba      	ldr	r2, [r7, #24]
 8013cf4:	697b      	ldr	r3, [r7, #20]
 8013cf6:	429a      	cmp	r2, r3
 8013cf8:	d860      	bhi.n	8013dbc <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8013cfa:	697b      	ldr	r3, [r7, #20]
 8013cfc:	61bb      	str	r3, [r7, #24]
 8013cfe:	2308      	movs	r3, #8
 8013d00:	623b      	str	r3, [r7, #32]
 8013d02:	230b      	movs	r3, #11
 8013d04:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8013d06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013d0a:	009b      	lsls	r3, r3, #2
 8013d0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013d10:	e051      	b.n	8013db6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8013d12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013d14:	2b7f      	cmp	r3, #127	; 0x7f
 8013d16:	d914      	bls.n	8013d42 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8013d18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013d1a:	2100      	movs	r1, #0
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	f002 fb95 	bl	801644c <ff_convert>
 8013d22:	4603      	mov	r3, r0
 8013d24:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8013d26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d004      	beq.n	8013d36 <create_name+0x246>
 8013d2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013d2e:	3b80      	subs	r3, #128	; 0x80
 8013d30:	4a49      	ldr	r2, [pc, #292]	; (8013e58 <create_name+0x368>)
 8013d32:	5cd3      	ldrb	r3, [r2, r3]
 8013d34:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8013d36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d3a:	f043 0302 	orr.w	r3, r3, #2
 8013d3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8013d42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d007      	beq.n	8013d58 <create_name+0x268>
 8013d48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013d4a:	4619      	mov	r1, r3
 8013d4c:	4843      	ldr	r0, [pc, #268]	; (8013e5c <create_name+0x36c>)
 8013d4e:	f7fd fcaf 	bl	80116b0 <chk_chr>
 8013d52:	4603      	mov	r3, r0
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d008      	beq.n	8013d6a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8013d58:	235f      	movs	r3, #95	; 0x5f
 8013d5a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8013d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d60:	f043 0303 	orr.w	r3, r3, #3
 8013d64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013d68:	e01b      	b.n	8013da2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8013d6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013d6c:	2b40      	cmp	r3, #64	; 0x40
 8013d6e:	d909      	bls.n	8013d84 <create_name+0x294>
 8013d70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013d72:	2b5a      	cmp	r3, #90	; 0x5a
 8013d74:	d806      	bhi.n	8013d84 <create_name+0x294>
					b |= 2;
 8013d76:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013d7a:	f043 0302 	orr.w	r3, r3, #2
 8013d7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013d82:	e00e      	b.n	8013da2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8013d84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013d86:	2b60      	cmp	r3, #96	; 0x60
 8013d88:	d90b      	bls.n	8013da2 <create_name+0x2b2>
 8013d8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013d8c:	2b7a      	cmp	r3, #122	; 0x7a
 8013d8e:	d808      	bhi.n	8013da2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8013d90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013d94:	f043 0301 	orr.w	r3, r3, #1
 8013d98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013d9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013d9e:	3b20      	subs	r3, #32
 8013da0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8013da2:	6a3b      	ldr	r3, [r7, #32]
 8013da4:	1c5a      	adds	r2, r3, #1
 8013da6:	623a      	str	r2, [r7, #32]
 8013da8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013daa:	b2d1      	uxtb	r1, r2
 8013dac:	687a      	ldr	r2, [r7, #4]
 8013dae:	4413      	add	r3, r2
 8013db0:	460a      	mov	r2, r1
 8013db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 8013db6:	e763      	b.n	8013c80 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8013db8:	bf00      	nop
 8013dba:	e000      	b.n	8013dbe <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8013dbc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013dc4:	2be5      	cmp	r3, #229	; 0xe5
 8013dc6:	d103      	bne.n	8013dd0 <create_name+0x2e0>
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	2205      	movs	r2, #5
 8013dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 8013dd0:	69fb      	ldr	r3, [r7, #28]
 8013dd2:	2b08      	cmp	r3, #8
 8013dd4:	d104      	bne.n	8013de0 <create_name+0x2f0>
 8013dd6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013dda:	009b      	lsls	r3, r3, #2
 8013ddc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8013de0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013de4:	f003 030c 	and.w	r3, r3, #12
 8013de8:	2b0c      	cmp	r3, #12
 8013dea:	d005      	beq.n	8013df8 <create_name+0x308>
 8013dec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013df0:	f003 0303 	and.w	r3, r3, #3
 8013df4:	2b03      	cmp	r3, #3
 8013df6:	d105      	bne.n	8013e04 <create_name+0x314>
 8013df8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013dfc:	f043 0302 	orr.w	r3, r3, #2
 8013e00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8013e04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e08:	f003 0302 	and.w	r3, r3, #2
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d117      	bne.n	8013e40 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8013e10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013e14:	f003 0303 	and.w	r3, r3, #3
 8013e18:	2b01      	cmp	r3, #1
 8013e1a:	d105      	bne.n	8013e28 <create_name+0x338>
 8013e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e20:	f043 0310 	orr.w	r3, r3, #16
 8013e24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8013e28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013e2c:	f003 030c 	and.w	r3, r3, #12
 8013e30:	2b04      	cmp	r3, #4
 8013e32:	d105      	bne.n	8013e40 <create_name+0x350>
 8013e34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e38:	f043 0308 	orr.w	r3, r3, #8
 8013e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013e46:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 8013e4a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	3728      	adds	r7, #40	; 0x28
 8013e50:	46bd      	mov	sp, r7
 8013e52:	bd80      	pop	{r7, pc}
 8013e54:	0801729c 	.word	0x0801729c
 8013e58:	08017380 	.word	0x08017380
 8013e5c:	080172a8 	.word	0x080172a8

08013e60 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8013e60:	b590      	push	{r4, r7, lr}
 8013e62:	b087      	sub	sp, #28
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	6078      	str	r0, [r7, #4]
 8013e68:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8013e6e:	693b      	ldr	r3, [r7, #16]
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8013e74:	e002      	b.n	8013e7c <follow_path+0x1c>
 8013e76:	683b      	ldr	r3, [r7, #0]
 8013e78:	3301      	adds	r3, #1
 8013e7a:	603b      	str	r3, [r7, #0]
 8013e7c:	683b      	ldr	r3, [r7, #0]
 8013e7e:	781b      	ldrb	r3, [r3, #0]
 8013e80:	2b2f      	cmp	r3, #47	; 0x2f
 8013e82:	d0f8      	beq.n	8013e76 <follow_path+0x16>
 8013e84:	683b      	ldr	r3, [r7, #0]
 8013e86:	781b      	ldrb	r3, [r3, #0]
 8013e88:	2b5c      	cmp	r3, #92	; 0x5c
 8013e8a:	d0f4      	beq.n	8013e76 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8013e8c:	693b      	ldr	r3, [r7, #16]
 8013e8e:	2200      	movs	r2, #0
 8013e90:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 8013e92:	693b      	ldr	r3, [r7, #16]
 8013e94:	2200      	movs	r2, #0
 8013e96:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8013e98:	683b      	ldr	r3, [r7, #0]
 8013e9a:	781b      	ldrb	r3, [r3, #0]
 8013e9c:	2b1f      	cmp	r3, #31
 8013e9e:	d80a      	bhi.n	8013eb6 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	2280      	movs	r2, #128	; 0x80
 8013ea4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 8013ea8:	2100      	movs	r1, #0
 8013eaa:	6878      	ldr	r0, [r7, #4]
 8013eac:	f7fe fc58 	bl	8012760 <dir_sdi>
 8013eb0:	4603      	mov	r3, r0
 8013eb2:	75fb      	strb	r3, [r7, #23]
 8013eb4:	e07c      	b.n	8013fb0 <follow_path+0x150>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013eb6:	463b      	mov	r3, r7
 8013eb8:	4619      	mov	r1, r3
 8013eba:	6878      	ldr	r0, [r7, #4]
 8013ebc:	f7ff fe18 	bl	8013af0 <create_name>
 8013ec0:	4603      	mov	r3, r0
 8013ec2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013ec4:	7dfb      	ldrb	r3, [r7, #23]
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d16d      	bne.n	8013fa6 <follow_path+0x146>
			res = dir_find(dp);				/* Find an object with the segment name */
 8013eca:	6878      	ldr	r0, [r7, #4]
 8013ecc:	f7ff fb36 	bl	801353c <dir_find>
 8013ed0:	4603      	mov	r3, r0
 8013ed2:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8013eda:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8013edc:	7dfb      	ldrb	r3, [r7, #23]
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d00a      	beq.n	8013ef8 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013ee2:	7dfb      	ldrb	r3, [r7, #23]
 8013ee4:	2b04      	cmp	r3, #4
 8013ee6:	d160      	bne.n	8013faa <follow_path+0x14a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8013ee8:	7afb      	ldrb	r3, [r7, #11]
 8013eea:	f003 0304 	and.w	r3, r3, #4
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d15b      	bne.n	8013faa <follow_path+0x14a>
 8013ef2:	2305      	movs	r3, #5
 8013ef4:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8013ef6:	e058      	b.n	8013faa <follow_path+0x14a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013ef8:	7afb      	ldrb	r3, [r7, #11]
 8013efa:	f003 0304 	and.w	r3, r3, #4
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d155      	bne.n	8013fae <follow_path+0x14e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8013f02:	693b      	ldr	r3, [r7, #16]
 8013f04:	799b      	ldrb	r3, [r3, #6]
 8013f06:	f003 0310 	and.w	r3, r3, #16
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d102      	bne.n	8013f14 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 8013f0e:	2305      	movs	r3, #5
 8013f10:	75fb      	strb	r3, [r7, #23]
 8013f12:	e04d      	b.n	8013fb0 <follow_path+0x150>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 8013f14:	68fb      	ldr	r3, [r7, #12]
 8013f16:	781b      	ldrb	r3, [r3, #0]
 8013f18:	2b04      	cmp	r3, #4
 8013f1a:	d12f      	bne.n	8013f7c <follow_path+0x11c>
				obj->c_scl = obj->sclust;
 8013f1c:	693b      	ldr	r3, [r7, #16]
 8013f1e:	689a      	ldr	r2, [r3, #8]
 8013f20:	693b      	ldr	r3, [r7, #16]
 8013f22:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8013f24:	693b      	ldr	r3, [r7, #16]
 8013f26:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8013f2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8013f2e:	693a      	ldr	r2, [r7, #16]
 8013f30:	79d2      	ldrb	r2, [r2, #7]
 8013f32:	431a      	orrs	r2, r3
 8013f34:	693b      	ldr	r3, [r7, #16]
 8013f36:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013f3c:	693b      	ldr	r3, [r7, #16]
 8013f3e:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	695b      	ldr	r3, [r3, #20]
 8013f44:	3334      	adds	r3, #52	; 0x34
 8013f46:	4618      	mov	r0, r3
 8013f48:	f7fd f9a2 	bl	8011290 <ld_dword>
 8013f4c:	4602      	mov	r2, r0
 8013f4e:	693b      	ldr	r3, [r7, #16]
 8013f50:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	695b      	ldr	r3, [r3, #20]
 8013f56:	3321      	adds	r3, #33	; 0x21
 8013f58:	781b      	ldrb	r3, [r3, #0]
 8013f5a:	f003 0302 	and.w	r3, r3, #2
 8013f5e:	b2da      	uxtb	r2, r3
 8013f60:	693b      	ldr	r3, [r7, #16]
 8013f62:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	695b      	ldr	r3, [r3, #20]
 8013f68:	3338      	adds	r3, #56	; 0x38
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	f7fd f9b3 	bl	80112d6 <ld_qword>
 8013f70:	4603      	mov	r3, r0
 8013f72:	460c      	mov	r4, r1
 8013f74:	693a      	ldr	r2, [r7, #16]
 8013f76:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8013f7a:	e79c      	b.n	8013eb6 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f86:	68fa      	ldr	r2, [r7, #12]
 8013f88:	8992      	ldrh	r2, [r2, #12]
 8013f8a:	fbb3 f0f2 	udiv	r0, r3, r2
 8013f8e:	fb02 f200 	mul.w	r2, r2, r0
 8013f92:	1a9b      	subs	r3, r3, r2
 8013f94:	440b      	add	r3, r1
 8013f96:	4619      	mov	r1, r3
 8013f98:	68f8      	ldr	r0, [r7, #12]
 8013f9a:	f7fe fdb7 	bl	8012b0c <ld_clust>
 8013f9e:	4602      	mov	r2, r0
 8013fa0:	693b      	ldr	r3, [r7, #16]
 8013fa2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013fa4:	e787      	b.n	8013eb6 <follow_path+0x56>
			if (res != FR_OK) break;
 8013fa6:	bf00      	nop
 8013fa8:	e002      	b.n	8013fb0 <follow_path+0x150>
				break;
 8013faa:	bf00      	nop
 8013fac:	e000      	b.n	8013fb0 <follow_path+0x150>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013fae:	bf00      	nop
			}
		}
	}

	return res;
 8013fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8013fb2:	4618      	mov	r0, r3
 8013fb4:	371c      	adds	r7, #28
 8013fb6:	46bd      	mov	sp, r7
 8013fb8:	bd90      	pop	{r4, r7, pc}

08013fba <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8013fba:	b480      	push	{r7}
 8013fbc:	b087      	sub	sp, #28
 8013fbe:	af00      	add	r7, sp, #0
 8013fc0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8013fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8013fc6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d031      	beq.n	8014034 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	617b      	str	r3, [r7, #20]
 8013fd6:	e002      	b.n	8013fde <get_ldnumber+0x24>
 8013fd8:	697b      	ldr	r3, [r7, #20]
 8013fda:	3301      	adds	r3, #1
 8013fdc:	617b      	str	r3, [r7, #20]
 8013fde:	697b      	ldr	r3, [r7, #20]
 8013fe0:	781b      	ldrb	r3, [r3, #0]
 8013fe2:	2b1f      	cmp	r3, #31
 8013fe4:	d903      	bls.n	8013fee <get_ldnumber+0x34>
 8013fe6:	697b      	ldr	r3, [r7, #20]
 8013fe8:	781b      	ldrb	r3, [r3, #0]
 8013fea:	2b3a      	cmp	r3, #58	; 0x3a
 8013fec:	d1f4      	bne.n	8013fd8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8013fee:	697b      	ldr	r3, [r7, #20]
 8013ff0:	781b      	ldrb	r3, [r3, #0]
 8013ff2:	2b3a      	cmp	r3, #58	; 0x3a
 8013ff4:	d11c      	bne.n	8014030 <get_ldnumber+0x76>
			tp = *path;
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	1c5a      	adds	r2, r3, #1
 8014000:	60fa      	str	r2, [r7, #12]
 8014002:	781b      	ldrb	r3, [r3, #0]
 8014004:	3b30      	subs	r3, #48	; 0x30
 8014006:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8014008:	68bb      	ldr	r3, [r7, #8]
 801400a:	2b09      	cmp	r3, #9
 801400c:	d80e      	bhi.n	801402c <get_ldnumber+0x72>
 801400e:	68fa      	ldr	r2, [r7, #12]
 8014010:	697b      	ldr	r3, [r7, #20]
 8014012:	429a      	cmp	r2, r3
 8014014:	d10a      	bne.n	801402c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8014016:	68bb      	ldr	r3, [r7, #8]
 8014018:	2b01      	cmp	r3, #1
 801401a:	d807      	bhi.n	801402c <get_ldnumber+0x72>
					vol = (int)i;
 801401c:	68bb      	ldr	r3, [r7, #8]
 801401e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8014020:	697b      	ldr	r3, [r7, #20]
 8014022:	3301      	adds	r3, #1
 8014024:	617b      	str	r3, [r7, #20]
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	697a      	ldr	r2, [r7, #20]
 801402a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801402c:	693b      	ldr	r3, [r7, #16]
 801402e:	e002      	b.n	8014036 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8014030:	2300      	movs	r3, #0
 8014032:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8014034:	693b      	ldr	r3, [r7, #16]
}
 8014036:	4618      	mov	r0, r3
 8014038:	371c      	adds	r7, #28
 801403a:	46bd      	mov	sp, r7
 801403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014040:	4770      	bx	lr
	...

08014044 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8014044:	b580      	push	{r7, lr}
 8014046:	b082      	sub	sp, #8
 8014048:	af00      	add	r7, sp, #0
 801404a:	6078      	str	r0, [r7, #4]
 801404c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	2200      	movs	r2, #0
 8014052:	70da      	strb	r2, [r3, #3]
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	f04f 32ff 	mov.w	r2, #4294967295
 801405a:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801405c:	6839      	ldr	r1, [r7, #0]
 801405e:	6878      	ldr	r0, [r7, #4]
 8014060:	f7fd fcf2 	bl	8011a48 <move_window>
 8014064:	4603      	mov	r3, r0
 8014066:	2b00      	cmp	r3, #0
 8014068:	d001      	beq.n	801406e <check_fs+0x2a>
 801406a:	2304      	movs	r3, #4
 801406c:	e044      	b.n	80140f8 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	333c      	adds	r3, #60	; 0x3c
 8014072:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014076:	4618      	mov	r0, r3
 8014078:	f7fd f8f2 	bl	8011260 <ld_word>
 801407c:	4603      	mov	r3, r0
 801407e:	461a      	mov	r2, r3
 8014080:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014084:	429a      	cmp	r2, r3
 8014086:	d001      	beq.n	801408c <check_fs+0x48>
 8014088:	2303      	movs	r3, #3
 801408a:	e035      	b.n	80140f8 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014092:	2be9      	cmp	r3, #233	; 0xe9
 8014094:	d009      	beq.n	80140aa <check_fs+0x66>
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801409c:	2beb      	cmp	r3, #235	; 0xeb
 801409e:	d11e      	bne.n	80140de <check_fs+0x9a>
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80140a6:	2b90      	cmp	r3, #144	; 0x90
 80140a8:	d119      	bne.n	80140de <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	333c      	adds	r3, #60	; 0x3c
 80140ae:	3336      	adds	r3, #54	; 0x36
 80140b0:	4618      	mov	r0, r3
 80140b2:	f7fd f8ed 	bl	8011290 <ld_dword>
 80140b6:	4603      	mov	r3, r0
 80140b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80140bc:	4a10      	ldr	r2, [pc, #64]	; (8014100 <check_fs+0xbc>)
 80140be:	4293      	cmp	r3, r2
 80140c0:	d101      	bne.n	80140c6 <check_fs+0x82>
 80140c2:	2300      	movs	r3, #0
 80140c4:	e018      	b.n	80140f8 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	333c      	adds	r3, #60	; 0x3c
 80140ca:	3352      	adds	r3, #82	; 0x52
 80140cc:	4618      	mov	r0, r3
 80140ce:	f7fd f8df 	bl	8011290 <ld_dword>
 80140d2:	4602      	mov	r2, r0
 80140d4:	4b0b      	ldr	r3, [pc, #44]	; (8014104 <check_fs+0xc0>)
 80140d6:	429a      	cmp	r2, r3
 80140d8:	d101      	bne.n	80140de <check_fs+0x9a>
 80140da:	2300      	movs	r3, #0
 80140dc:	e00c      	b.n	80140f8 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	333c      	adds	r3, #60	; 0x3c
 80140e2:	220b      	movs	r2, #11
 80140e4:	4908      	ldr	r1, [pc, #32]	; (8014108 <check_fs+0xc4>)
 80140e6:	4618      	mov	r0, r3
 80140e8:	f7fd fabb 	bl	8011662 <mem_cmp>
 80140ec:	4603      	mov	r3, r0
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d101      	bne.n	80140f6 <check_fs+0xb2>
 80140f2:	2301      	movs	r3, #1
 80140f4:	e000      	b.n	80140f8 <check_fs+0xb4>
#endif
	return 2;
 80140f6:	2302      	movs	r3, #2
}
 80140f8:	4618      	mov	r0, r3
 80140fa:	3708      	adds	r7, #8
 80140fc:	46bd      	mov	sp, r7
 80140fe:	bd80      	pop	{r7, pc}
 8014100:	00544146 	.word	0x00544146
 8014104:	33544146 	.word	0x33544146
 8014108:	080172b0 	.word	0x080172b0

0801410c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801410c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8014110:	b098      	sub	sp, #96	; 0x60
 8014112:	af00      	add	r7, sp, #0
 8014114:	60f8      	str	r0, [r7, #12]
 8014116:	60b9      	str	r1, [r7, #8]
 8014118:	4613      	mov	r3, r2
 801411a:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801411c:	68bb      	ldr	r3, [r7, #8]
 801411e:	2200      	movs	r2, #0
 8014120:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8014122:	68f8      	ldr	r0, [r7, #12]
 8014124:	f7ff ff49 	bl	8013fba <get_ldnumber>
 8014128:	6478      	str	r0, [r7, #68]	; 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 801412a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801412c:	2b00      	cmp	r3, #0
 801412e:	da01      	bge.n	8014134 <find_volume+0x28>
 8014130:	230b      	movs	r3, #11
 8014132:	e368      	b.n	8014806 <find_volume+0x6fa>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8014134:	4aaa      	ldr	r2, [pc, #680]	; (80143e0 <find_volume+0x2d4>)
 8014136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801413c:	643b      	str	r3, [r7, #64]	; 0x40
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801413e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014140:	2b00      	cmp	r3, #0
 8014142:	d101      	bne.n	8014148 <find_volume+0x3c>
 8014144:	230c      	movs	r3, #12
 8014146:	e35e      	b.n	8014806 <find_volume+0x6fa>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8014148:	68bb      	ldr	r3, [r7, #8]
 801414a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801414c:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801414e:	79fb      	ldrb	r3, [r7, #7]
 8014150:	f023 0301 	bic.w	r3, r3, #1
 8014154:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8014156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014158:	781b      	ldrb	r3, [r3, #0]
 801415a:	2b00      	cmp	r3, #0
 801415c:	d01a      	beq.n	8014194 <find_volume+0x88>
		stat = disk_status(fs->drv);
 801415e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014160:	785b      	ldrb	r3, [r3, #1]
 8014162:	4618      	mov	r0, r3
 8014164:	f7fc ffde 	bl	8011124 <disk_status>
 8014168:	4603      	mov	r3, r0
 801416a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801416e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014172:	f003 0301 	and.w	r3, r3, #1
 8014176:	2b00      	cmp	r3, #0
 8014178:	d10c      	bne.n	8014194 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801417a:	79fb      	ldrb	r3, [r7, #7]
 801417c:	2b00      	cmp	r3, #0
 801417e:	d007      	beq.n	8014190 <find_volume+0x84>
 8014180:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014184:	f003 0304 	and.w	r3, r3, #4
 8014188:	2b00      	cmp	r3, #0
 801418a:	d001      	beq.n	8014190 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 801418c:	230a      	movs	r3, #10
 801418e:	e33a      	b.n	8014806 <find_volume+0x6fa>
			}
			return FR_OK;				/* The file system object is valid */
 8014190:	2300      	movs	r3, #0
 8014192:	e338      	b.n	8014806 <find_volume+0x6fa>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8014194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014196:	2200      	movs	r2, #0
 8014198:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801419a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801419c:	b2da      	uxtb	r2, r3
 801419e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80141a0:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80141a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80141a4:	785b      	ldrb	r3, [r3, #1]
 80141a6:	4618      	mov	r0, r3
 80141a8:	f7fc ffd6 	bl	8011158 <disk_initialize>
 80141ac:	4603      	mov	r3, r0
 80141ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80141b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80141b6:	f003 0301 	and.w	r3, r3, #1
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d001      	beq.n	80141c2 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80141be:	2303      	movs	r3, #3
 80141c0:	e321      	b.n	8014806 <find_volume+0x6fa>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80141c2:	79fb      	ldrb	r3, [r7, #7]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d007      	beq.n	80141d8 <find_volume+0xcc>
 80141c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80141cc:	f003 0304 	and.w	r3, r3, #4
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d001      	beq.n	80141d8 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 80141d4:	230a      	movs	r3, #10
 80141d6:	e316      	b.n	8014806 <find_volume+0x6fa>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80141d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80141da:	7858      	ldrb	r0, [r3, #1]
 80141dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80141de:	330c      	adds	r3, #12
 80141e0:	461a      	mov	r2, r3
 80141e2:	2102      	movs	r1, #2
 80141e4:	f7fd f81e 	bl	8011224 <disk_ioctl>
 80141e8:	4603      	mov	r3, r0
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d001      	beq.n	80141f2 <find_volume+0xe6>
 80141ee:	2301      	movs	r3, #1
 80141f0:	e309      	b.n	8014806 <find_volume+0x6fa>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80141f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80141f4:	899b      	ldrh	r3, [r3, #12]
 80141f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80141fa:	d80d      	bhi.n	8014218 <find_volume+0x10c>
 80141fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80141fe:	899b      	ldrh	r3, [r3, #12]
 8014200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014204:	d308      	bcc.n	8014218 <find_volume+0x10c>
 8014206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014208:	899b      	ldrh	r3, [r3, #12]
 801420a:	461a      	mov	r2, r3
 801420c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801420e:	899b      	ldrh	r3, [r3, #12]
 8014210:	3b01      	subs	r3, #1
 8014212:	4013      	ands	r3, r2
 8014214:	2b00      	cmp	r3, #0
 8014216:	d001      	beq.n	801421c <find_volume+0x110>
 8014218:	2301      	movs	r3, #1
 801421a:	e2f4      	b.n	8014806 <find_volume+0x6fa>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801421c:	2300      	movs	r3, #0
 801421e:	65bb      	str	r3, [r7, #88]	; 0x58
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8014220:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014222:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8014224:	f7ff ff0e 	bl	8014044 <check_fs>
 8014228:	4603      	mov	r3, r0
 801422a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801422e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014232:	2b02      	cmp	r3, #2
 8014234:	d14b      	bne.n	80142ce <find_volume+0x1c2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014236:	2300      	movs	r3, #0
 8014238:	64bb      	str	r3, [r7, #72]	; 0x48
 801423a:	e01f      	b.n	801427c <find_volume+0x170>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801423c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801423e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8014242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014244:	011b      	lsls	r3, r3, #4
 8014246:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801424a:	4413      	add	r3, r2
 801424c:	63bb      	str	r3, [r7, #56]	; 0x38
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801424e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014250:	3304      	adds	r3, #4
 8014252:	781b      	ldrb	r3, [r3, #0]
 8014254:	2b00      	cmp	r3, #0
 8014256:	d006      	beq.n	8014266 <find_volume+0x15a>
 8014258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801425a:	3308      	adds	r3, #8
 801425c:	4618      	mov	r0, r3
 801425e:	f7fd f817 	bl	8011290 <ld_dword>
 8014262:	4602      	mov	r2, r0
 8014264:	e000      	b.n	8014268 <find_volume+0x15c>
 8014266:	2200      	movs	r2, #0
 8014268:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801426a:	009b      	lsls	r3, r3, #2
 801426c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8014270:	440b      	add	r3, r1
 8014272:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014278:	3301      	adds	r3, #1
 801427a:	64bb      	str	r3, [r7, #72]	; 0x48
 801427c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801427e:	2b03      	cmp	r3, #3
 8014280:	d9dc      	bls.n	801423c <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8014282:	2300      	movs	r3, #0
 8014284:	64bb      	str	r3, [r7, #72]	; 0x48
		if (i) i--;
 8014286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014288:	2b00      	cmp	r3, #0
 801428a:	d002      	beq.n	8014292 <find_volume+0x186>
 801428c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801428e:	3b01      	subs	r3, #1
 8014290:	64bb      	str	r3, [r7, #72]	; 0x48
		do {							/* Find an FAT volume */
			bsect = br[i];
 8014292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014294:	009b      	lsls	r3, r3, #2
 8014296:	f107 0260 	add.w	r2, r7, #96	; 0x60
 801429a:	4413      	add	r3, r2
 801429c:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80142a0:	65bb      	str	r3, [r7, #88]	; 0x58
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80142a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d005      	beq.n	80142b4 <find_volume+0x1a8>
 80142a8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80142aa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80142ac:	f7ff feca 	bl	8014044 <check_fs>
 80142b0:	4603      	mov	r3, r0
 80142b2:	e000      	b.n	80142b6 <find_volume+0x1aa>
 80142b4:	2303      	movs	r3, #3
 80142b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80142ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80142be:	2b01      	cmp	r3, #1
 80142c0:	d905      	bls.n	80142ce <find_volume+0x1c2>
 80142c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80142c4:	3301      	adds	r3, #1
 80142c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80142c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80142ca:	2b03      	cmp	r3, #3
 80142cc:	d9e1      	bls.n	8014292 <find_volume+0x186>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80142ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80142d2:	2b04      	cmp	r3, #4
 80142d4:	d101      	bne.n	80142da <find_volume+0x1ce>
 80142d6:	2301      	movs	r3, #1
 80142d8:	e295      	b.n	8014806 <find_volume+0x6fa>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80142da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80142de:	2b01      	cmp	r3, #1
 80142e0:	d901      	bls.n	80142e6 <find_volume+0x1da>
 80142e2:	230d      	movs	r3, #13
 80142e4:	e28f      	b.n	8014806 <find_volume+0x6fa>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 80142e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80142ea:	2b01      	cmp	r3, #1
 80142ec:	f040 8101 	bne.w	80144f2 <find_volume+0x3e6>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 80142f0:	230b      	movs	r3, #11
 80142f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80142f4:	e002      	b.n	80142fc <find_volume+0x1f0>
 80142f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80142f8:	3301      	adds	r3, #1
 80142fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80142fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80142fe:	2b3f      	cmp	r3, #63	; 0x3f
 8014300:	d806      	bhi.n	8014310 <find_volume+0x204>
 8014302:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014304:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014306:	4413      	add	r3, r2
 8014308:	333c      	adds	r3, #60	; 0x3c
 801430a:	781b      	ldrb	r3, [r3, #0]
 801430c:	2b00      	cmp	r3, #0
 801430e:	d0f2      	beq.n	80142f6 <find_volume+0x1ea>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8014310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014312:	2b3f      	cmp	r3, #63	; 0x3f
 8014314:	d801      	bhi.n	801431a <find_volume+0x20e>
 8014316:	230d      	movs	r3, #13
 8014318:	e275      	b.n	8014806 <find_volume+0x6fa>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 801431a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801431c:	333c      	adds	r3, #60	; 0x3c
 801431e:	3368      	adds	r3, #104	; 0x68
 8014320:	4618      	mov	r0, r3
 8014322:	f7fc ff9d 	bl	8011260 <ld_word>
 8014326:	4603      	mov	r3, r0
 8014328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801432c:	d001      	beq.n	8014332 <find_volume+0x226>
 801432e:	230d      	movs	r3, #13
 8014330:	e269      	b.n	8014806 <find_volume+0x6fa>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 8014332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014334:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8014338:	461a      	mov	r2, r3
 801433a:	2301      	movs	r3, #1
 801433c:	4093      	lsls	r3, r2
 801433e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014340:	8992      	ldrh	r2, [r2, #12]
 8014342:	4293      	cmp	r3, r2
 8014344:	d001      	beq.n	801434a <find_volume+0x23e>
			return FR_NO_FILESYSTEM;
 8014346:	230d      	movs	r3, #13
 8014348:	e25d      	b.n	8014806 <find_volume+0x6fa>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 801434a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801434c:	333c      	adds	r3, #60	; 0x3c
 801434e:	3348      	adds	r3, #72	; 0x48
 8014350:	4618      	mov	r0, r3
 8014352:	f7fc ffc0 	bl	80112d6 <ld_qword>
 8014356:	460a      	mov	r2, r1
 8014358:	4601      	mov	r1, r0
 801435a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801435c:	469b      	mov	fp, r3
 801435e:	f04f 0c00 	mov.w	ip, #0
 8014362:	eb1b 0301 	adds.w	r3, fp, r1
 8014366:	eb4c 0402 	adc.w	r4, ip, r2
 801436a:	e9c7 3408 	strd	r3, r4, [r7, #32]
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 801436e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8014372:	2c01      	cmp	r4, #1
 8014374:	bf08      	it	eq
 8014376:	2b00      	cmpeq	r3, #0
 8014378:	d301      	bcc.n	801437e <find_volume+0x272>
 801437a:	230d      	movs	r3, #13
 801437c:	e243      	b.n	8014806 <find_volume+0x6fa>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 801437e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014380:	333c      	adds	r3, #60	; 0x3c
 8014382:	3354      	adds	r3, #84	; 0x54
 8014384:	4618      	mov	r0, r3
 8014386:	f7fc ff83 	bl	8011290 <ld_dword>
 801438a:	4602      	mov	r2, r0
 801438c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801438e:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8014390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014392:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8014396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014398:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 801439a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801439c:	789b      	ldrb	r3, [r3, #2]
 801439e:	2b01      	cmp	r3, #1
 80143a0:	d001      	beq.n	80143a6 <find_volume+0x29a>
 80143a2:	230d      	movs	r3, #13
 80143a4:	e22f      	b.n	8014806 <find_volume+0x6fa>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 80143a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80143a8:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80143ac:	461a      	mov	r2, r3
 80143ae:	2301      	movs	r3, #1
 80143b0:	4093      	lsls	r3, r2
 80143b2:	b29a      	uxth	r2, r3
 80143b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80143b6:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 80143b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80143ba:	895b      	ldrh	r3, [r3, #10]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d101      	bne.n	80143c4 <find_volume+0x2b8>
 80143c0:	230d      	movs	r3, #13
 80143c2:	e220      	b.n	8014806 <find_volume+0x6fa>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 80143c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80143c6:	333c      	adds	r3, #60	; 0x3c
 80143c8:	335c      	adds	r3, #92	; 0x5c
 80143ca:	4618      	mov	r0, r3
 80143cc:	f7fc ff60 	bl	8011290 <ld_dword>
 80143d0:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 80143d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143d4:	4a03      	ldr	r2, [pc, #12]	; (80143e4 <find_volume+0x2d8>)
 80143d6:	4293      	cmp	r3, r2
 80143d8:	d906      	bls.n	80143e8 <find_volume+0x2dc>
 80143da:	230d      	movs	r3, #13
 80143dc:	e213      	b.n	8014806 <find_volume+0x6fa>
 80143de:	bf00      	nop
 80143e0:	24000274 	.word	0x24000274
 80143e4:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 80143e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143ea:	1c9a      	adds	r2, r3, #2
 80143ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80143ee:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 80143f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80143f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80143f4:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 80143f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80143f8:	333c      	adds	r3, #60	; 0x3c
 80143fa:	3358      	adds	r3, #88	; 0x58
 80143fc:	4618      	mov	r0, r3
 80143fe:	f7fc ff47 	bl	8011290 <ld_dword>
 8014402:	4602      	mov	r2, r0
 8014404:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014406:	441a      	add	r2, r3
 8014408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801440a:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 801440c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801440e:	333c      	adds	r3, #60	; 0x3c
 8014410:	3350      	adds	r3, #80	; 0x50
 8014412:	4618      	mov	r0, r3
 8014414:	f7fc ff3c 	bl	8011290 <ld_dword>
 8014418:	4602      	mov	r2, r0
 801441a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801441c:	441a      	add	r2, r3
 801441e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014420:	62da      	str	r2, [r3, #44]	; 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8014422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014426:	4619      	mov	r1, r3
 8014428:	f04f 0200 	mov.w	r2, #0
 801442c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801442e:	895b      	ldrh	r3, [r3, #10]
 8014430:	4618      	mov	r0, r3
 8014432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014434:	fb03 f300 	mul.w	r3, r3, r0
 8014438:	469b      	mov	fp, r3
 801443a:	f04f 0c00 	mov.w	ip, #0
 801443e:	eb1b 0301 	adds.w	r3, fp, r1
 8014442:	eb4c 0402 	adc.w	r4, ip, r2
 8014446:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801444a:	42a2      	cmp	r2, r4
 801444c:	bf08      	it	eq
 801444e:	4299      	cmpeq	r1, r3
 8014450:	d201      	bcs.n	8014456 <find_volume+0x34a>
 8014452:	230d      	movs	r3, #13
 8014454:	e1d7      	b.n	8014806 <find_volume+0x6fa>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8014456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014458:	333c      	adds	r3, #60	; 0x3c
 801445a:	3360      	adds	r3, #96	; 0x60
 801445c:	4618      	mov	r0, r3
 801445e:	f7fc ff17 	bl	8011290 <ld_dword>
 8014462:	4602      	mov	r2, r0
 8014464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014466:	631a      	str	r2, [r3, #48]	; 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 8014468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801446a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801446c:	4619      	mov	r1, r3
 801446e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8014470:	f7fd fb88 	bl	8011b84 <clust2sect>
 8014474:	4603      	mov	r3, r0
 8014476:	4619      	mov	r1, r3
 8014478:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801447a:	f7fd fae5 	bl	8011a48 <move_window>
 801447e:	4603      	mov	r3, r0
 8014480:	2b00      	cmp	r3, #0
 8014482:	d001      	beq.n	8014488 <find_volume+0x37c>
 8014484:	2301      	movs	r3, #1
 8014486:	e1be      	b.n	8014806 <find_volume+0x6fa>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8014488:	2300      	movs	r3, #0
 801448a:	64bb      	str	r3, [r7, #72]	; 0x48
 801448c:	e015      	b.n	80144ba <find_volume+0x3ae>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 801448e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014492:	4413      	add	r3, r2
 8014494:	333c      	adds	r3, #60	; 0x3c
 8014496:	781b      	ldrb	r3, [r3, #0]
 8014498:	2b81      	cmp	r3, #129	; 0x81
 801449a:	d10b      	bne.n	80144b4 <find_volume+0x3a8>
 801449c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801449e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80144a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80144a4:	3314      	adds	r3, #20
 80144a6:	4413      	add	r3, r2
 80144a8:	4618      	mov	r0, r3
 80144aa:	f7fc fef1 	bl	8011290 <ld_dword>
 80144ae:	4603      	mov	r3, r0
 80144b0:	2b02      	cmp	r3, #2
 80144b2:	d009      	beq.n	80144c8 <find_volume+0x3bc>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 80144b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80144b6:	3320      	adds	r3, #32
 80144b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80144ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80144bc:	899b      	ldrh	r3, [r3, #12]
 80144be:	461a      	mov	r2, r3
 80144c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80144c2:	4293      	cmp	r3, r2
 80144c4:	d3e3      	bcc.n	801448e <find_volume+0x382>
 80144c6:	e000      	b.n	80144ca <find_volume+0x3be>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 80144c8:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 80144ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80144cc:	899b      	ldrh	r3, [r3, #12]
 80144ce:	461a      	mov	r2, r3
 80144d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80144d2:	4293      	cmp	r3, r2
 80144d4:	d101      	bne.n	80144da <find_volume+0x3ce>
 80144d6:	230d      	movs	r3, #13
 80144d8:	e195      	b.n	8014806 <find_volume+0x6fa>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80144da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80144dc:	f04f 32ff 	mov.w	r2, #4294967295
 80144e0:	61da      	str	r2, [r3, #28]
 80144e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80144e4:	69da      	ldr	r2, [r3, #28]
 80144e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80144e8:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 80144ea:	2304      	movs	r3, #4
 80144ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80144f0:	e177      	b.n	80147e2 <find_volume+0x6d6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80144f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80144f4:	333c      	adds	r3, #60	; 0x3c
 80144f6:	330b      	adds	r3, #11
 80144f8:	4618      	mov	r0, r3
 80144fa:	f7fc feb1 	bl	8011260 <ld_word>
 80144fe:	4603      	mov	r3, r0
 8014500:	461a      	mov	r2, r3
 8014502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014504:	899b      	ldrh	r3, [r3, #12]
 8014506:	429a      	cmp	r2, r3
 8014508:	d001      	beq.n	801450e <find_volume+0x402>
 801450a:	230d      	movs	r3, #13
 801450c:	e17b      	b.n	8014806 <find_volume+0x6fa>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801450e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014510:	333c      	adds	r3, #60	; 0x3c
 8014512:	3316      	adds	r3, #22
 8014514:	4618      	mov	r0, r3
 8014516:	f7fc fea3 	bl	8011260 <ld_word>
 801451a:	4603      	mov	r3, r0
 801451c:	657b      	str	r3, [r7, #84]	; 0x54
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801451e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014520:	2b00      	cmp	r3, #0
 8014522:	d106      	bne.n	8014532 <find_volume+0x426>
 8014524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014526:	333c      	adds	r3, #60	; 0x3c
 8014528:	3324      	adds	r3, #36	; 0x24
 801452a:	4618      	mov	r0, r3
 801452c:	f7fc feb0 	bl	8011290 <ld_dword>
 8014530:	6578      	str	r0, [r7, #84]	; 0x54
		fs->fsize = fasize;
 8014532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014534:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014536:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8014538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801453a:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 801453e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014540:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8014542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014544:	789b      	ldrb	r3, [r3, #2]
 8014546:	2b01      	cmp	r3, #1
 8014548:	d005      	beq.n	8014556 <find_volume+0x44a>
 801454a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801454c:	789b      	ldrb	r3, [r3, #2]
 801454e:	2b02      	cmp	r3, #2
 8014550:	d001      	beq.n	8014556 <find_volume+0x44a>
 8014552:	230d      	movs	r3, #13
 8014554:	e157      	b.n	8014806 <find_volume+0x6fa>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8014556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014558:	789b      	ldrb	r3, [r3, #2]
 801455a:	461a      	mov	r2, r3
 801455c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801455e:	fb02 f303 	mul.w	r3, r2, r3
 8014562:	657b      	str	r3, [r7, #84]	; 0x54

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8014564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014566:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 801456a:	b29a      	uxth	r2, r3
 801456c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801456e:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8014570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014572:	895b      	ldrh	r3, [r3, #10]
 8014574:	2b00      	cmp	r3, #0
 8014576:	d008      	beq.n	801458a <find_volume+0x47e>
 8014578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801457a:	895b      	ldrh	r3, [r3, #10]
 801457c:	461a      	mov	r2, r3
 801457e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014580:	895b      	ldrh	r3, [r3, #10]
 8014582:	3b01      	subs	r3, #1
 8014584:	4013      	ands	r3, r2
 8014586:	2b00      	cmp	r3, #0
 8014588:	d001      	beq.n	801458e <find_volume+0x482>
 801458a:	230d      	movs	r3, #13
 801458c:	e13b      	b.n	8014806 <find_volume+0x6fa>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801458e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014590:	333c      	adds	r3, #60	; 0x3c
 8014592:	3311      	adds	r3, #17
 8014594:	4618      	mov	r0, r3
 8014596:	f7fc fe63 	bl	8011260 <ld_word>
 801459a:	4603      	mov	r3, r0
 801459c:	461a      	mov	r2, r3
 801459e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145a0:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80145a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145a4:	891b      	ldrh	r3, [r3, #8]
 80145a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80145a8:	8992      	ldrh	r2, [r2, #12]
 80145aa:	0952      	lsrs	r2, r2, #5
 80145ac:	b292      	uxth	r2, r2
 80145ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80145b2:	fb02 f201 	mul.w	r2, r2, r1
 80145b6:	1a9b      	subs	r3, r3, r2
 80145b8:	b29b      	uxth	r3, r3
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d001      	beq.n	80145c2 <find_volume+0x4b6>
 80145be:	230d      	movs	r3, #13
 80145c0:	e121      	b.n	8014806 <find_volume+0x6fa>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80145c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145c4:	333c      	adds	r3, #60	; 0x3c
 80145c6:	3313      	adds	r3, #19
 80145c8:	4618      	mov	r0, r3
 80145ca:	f7fc fe49 	bl	8011260 <ld_word>
 80145ce:	4603      	mov	r3, r0
 80145d0:	653b      	str	r3, [r7, #80]	; 0x50
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80145d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d106      	bne.n	80145e6 <find_volume+0x4da>
 80145d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145da:	333c      	adds	r3, #60	; 0x3c
 80145dc:	3320      	adds	r3, #32
 80145de:	4618      	mov	r0, r3
 80145e0:	f7fc fe56 	bl	8011290 <ld_dword>
 80145e4:	6538      	str	r0, [r7, #80]	; 0x50

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80145e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145e8:	333c      	adds	r3, #60	; 0x3c
 80145ea:	330e      	adds	r3, #14
 80145ec:	4618      	mov	r0, r3
 80145ee:	f7fc fe37 	bl	8011260 <ld_word>
 80145f2:	4603      	mov	r3, r0
 80145f4:	86fb      	strh	r3, [r7, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80145f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d101      	bne.n	8014600 <find_volume+0x4f4>
 80145fc:	230d      	movs	r3, #13
 80145fe:	e102      	b.n	8014806 <find_volume+0x6fa>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8014600:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014604:	4413      	add	r3, r2
 8014606:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014608:	8911      	ldrh	r1, [r2, #8]
 801460a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801460c:	8992      	ldrh	r2, [r2, #12]
 801460e:	0952      	lsrs	r2, r2, #5
 8014610:	b292      	uxth	r2, r2
 8014612:	fbb1 f2f2 	udiv	r2, r1, r2
 8014616:	b292      	uxth	r2, r2
 8014618:	4413      	add	r3, r2
 801461a:	633b      	str	r3, [r7, #48]	; 0x30
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801461c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801461e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014620:	429a      	cmp	r2, r3
 8014622:	d201      	bcs.n	8014628 <find_volume+0x51c>
 8014624:	230d      	movs	r3, #13
 8014626:	e0ee      	b.n	8014806 <find_volume+0x6fa>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8014628:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801462a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801462c:	1ad3      	subs	r3, r2, r3
 801462e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014630:	8952      	ldrh	r2, [r2, #10]
 8014632:	fbb3 f3f2 	udiv	r3, r3, r2
 8014636:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8014638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801463a:	2b00      	cmp	r3, #0
 801463c:	d101      	bne.n	8014642 <find_volume+0x536>
 801463e:	230d      	movs	r3, #13
 8014640:	e0e1      	b.n	8014806 <find_volume+0x6fa>
		fmt = FS_FAT32;
 8014642:	2303      	movs	r3, #3
 8014644:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8014648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801464a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801464e:	4293      	cmp	r3, r2
 8014650:	d802      	bhi.n	8014658 <find_volume+0x54c>
 8014652:	2302      	movs	r3, #2
 8014654:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8014658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801465a:	f640 72f5 	movw	r2, #4085	; 0xff5
 801465e:	4293      	cmp	r3, r2
 8014660:	d802      	bhi.n	8014668 <find_volume+0x55c>
 8014662:	2301      	movs	r3, #1
 8014664:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8014668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801466a:	1c9a      	adds	r2, r3, #2
 801466c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801466e:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8014670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014672:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014674:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8014676:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014678:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801467a:	441a      	add	r2, r3
 801467c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801467e:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8014680:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014684:	441a      	add	r2, r3
 8014686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014688:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 801468a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801468e:	2b03      	cmp	r3, #3
 8014690:	d11e      	bne.n	80146d0 <find_volume+0x5c4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8014692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014694:	333c      	adds	r3, #60	; 0x3c
 8014696:	332a      	adds	r3, #42	; 0x2a
 8014698:	4618      	mov	r0, r3
 801469a:	f7fc fde1 	bl	8011260 <ld_word>
 801469e:	4603      	mov	r3, r0
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d001      	beq.n	80146a8 <find_volume+0x59c>
 80146a4:	230d      	movs	r3, #13
 80146a6:	e0ae      	b.n	8014806 <find_volume+0x6fa>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80146a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80146aa:	891b      	ldrh	r3, [r3, #8]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d001      	beq.n	80146b4 <find_volume+0x5a8>
 80146b0:	230d      	movs	r3, #13
 80146b2:	e0a8      	b.n	8014806 <find_volume+0x6fa>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80146b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80146b6:	333c      	adds	r3, #60	; 0x3c
 80146b8:	332c      	adds	r3, #44	; 0x2c
 80146ba:	4618      	mov	r0, r3
 80146bc:	f7fc fde8 	bl	8011290 <ld_dword>
 80146c0:	4602      	mov	r2, r0
 80146c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80146c4:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80146c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80146c8:	6a1b      	ldr	r3, [r3, #32]
 80146ca:	009b      	lsls	r3, r3, #2
 80146cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80146ce:	e01f      	b.n	8014710 <find_volume+0x604>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80146d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80146d2:	891b      	ldrh	r3, [r3, #8]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d101      	bne.n	80146dc <find_volume+0x5d0>
 80146d8:	230d      	movs	r3, #13
 80146da:	e094      	b.n	8014806 <find_volume+0x6fa>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80146dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80146de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80146e2:	441a      	add	r2, r3
 80146e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80146e6:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80146e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80146ec:	2b02      	cmp	r3, #2
 80146ee:	d103      	bne.n	80146f8 <find_volume+0x5ec>
 80146f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80146f2:	6a1b      	ldr	r3, [r3, #32]
 80146f4:	005b      	lsls	r3, r3, #1
 80146f6:	e00a      	b.n	801470e <find_volume+0x602>
 80146f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80146fa:	6a1a      	ldr	r2, [r3, #32]
 80146fc:	4613      	mov	r3, r2
 80146fe:	005b      	lsls	r3, r3, #1
 8014700:	4413      	add	r3, r2
 8014702:	085a      	lsrs	r2, r3, #1
 8014704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014706:	6a1b      	ldr	r3, [r3, #32]
 8014708:	f003 0301 	and.w	r3, r3, #1
 801470c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801470e:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8014710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014712:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014716:	899b      	ldrh	r3, [r3, #12]
 8014718:	4619      	mov	r1, r3
 801471a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801471c:	440b      	add	r3, r1
 801471e:	3b01      	subs	r3, #1
 8014720:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014722:	8989      	ldrh	r1, [r1, #12]
 8014724:	fbb3 f3f1 	udiv	r3, r3, r1
 8014728:	429a      	cmp	r2, r3
 801472a:	d201      	bcs.n	8014730 <find_volume+0x624>
 801472c:	230d      	movs	r3, #13
 801472e:	e06a      	b.n	8014806 <find_volume+0x6fa>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8014730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014732:	f04f 32ff 	mov.w	r2, #4294967295
 8014736:	61da      	str	r2, [r3, #28]
 8014738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801473a:	69da      	ldr	r2, [r3, #28]
 801473c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801473e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 8014740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014742:	2280      	movs	r2, #128	; 0x80
 8014744:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8014746:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801474a:	2b03      	cmp	r3, #3
 801474c:	d149      	bne.n	80147e2 <find_volume+0x6d6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801474e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014750:	333c      	adds	r3, #60	; 0x3c
 8014752:	3330      	adds	r3, #48	; 0x30
 8014754:	4618      	mov	r0, r3
 8014756:	f7fc fd83 	bl	8011260 <ld_word>
 801475a:	4603      	mov	r3, r0
 801475c:	2b01      	cmp	r3, #1
 801475e:	d140      	bne.n	80147e2 <find_volume+0x6d6>
			&& move_window(fs, bsect + 1) == FR_OK)
 8014760:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014762:	3301      	adds	r3, #1
 8014764:	4619      	mov	r1, r3
 8014766:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8014768:	f7fd f96e 	bl	8011a48 <move_window>
 801476c:	4603      	mov	r3, r0
 801476e:	2b00      	cmp	r3, #0
 8014770:	d137      	bne.n	80147e2 <find_volume+0x6d6>
		{
			fs->fsi_flag = 0;
 8014772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014774:	2200      	movs	r2, #0
 8014776:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8014778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801477a:	333c      	adds	r3, #60	; 0x3c
 801477c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014780:	4618      	mov	r0, r3
 8014782:	f7fc fd6d 	bl	8011260 <ld_word>
 8014786:	4603      	mov	r3, r0
 8014788:	461a      	mov	r2, r3
 801478a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801478e:	429a      	cmp	r2, r3
 8014790:	d127      	bne.n	80147e2 <find_volume+0x6d6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8014792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014794:	333c      	adds	r3, #60	; 0x3c
 8014796:	4618      	mov	r0, r3
 8014798:	f7fc fd7a 	bl	8011290 <ld_dword>
 801479c:	4602      	mov	r2, r0
 801479e:	4b1c      	ldr	r3, [pc, #112]	; (8014810 <find_volume+0x704>)
 80147a0:	429a      	cmp	r2, r3
 80147a2:	d11e      	bne.n	80147e2 <find_volume+0x6d6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80147a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80147a6:	333c      	adds	r3, #60	; 0x3c
 80147a8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80147ac:	4618      	mov	r0, r3
 80147ae:	f7fc fd6f 	bl	8011290 <ld_dword>
 80147b2:	4602      	mov	r2, r0
 80147b4:	4b17      	ldr	r3, [pc, #92]	; (8014814 <find_volume+0x708>)
 80147b6:	429a      	cmp	r2, r3
 80147b8:	d113      	bne.n	80147e2 <find_volume+0x6d6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80147ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80147bc:	333c      	adds	r3, #60	; 0x3c
 80147be:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80147c2:	4618      	mov	r0, r3
 80147c4:	f7fc fd64 	bl	8011290 <ld_dword>
 80147c8:	4602      	mov	r2, r0
 80147ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80147cc:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80147ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80147d0:	333c      	adds	r3, #60	; 0x3c
 80147d2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80147d6:	4618      	mov	r0, r3
 80147d8:	f7fc fd5a 	bl	8011290 <ld_dword>
 80147dc:	4602      	mov	r2, r0
 80147de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80147e0:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80147e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80147e4:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80147e8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80147ea:	4b0b      	ldr	r3, [pc, #44]	; (8014818 <find_volume+0x70c>)
 80147ec:	881b      	ldrh	r3, [r3, #0]
 80147ee:	3301      	adds	r3, #1
 80147f0:	b29a      	uxth	r2, r3
 80147f2:	4b09      	ldr	r3, [pc, #36]	; (8014818 <find_volume+0x70c>)
 80147f4:	801a      	strh	r2, [r3, #0]
 80147f6:	4b08      	ldr	r3, [pc, #32]	; (8014818 <find_volume+0x70c>)
 80147f8:	881a      	ldrh	r2, [r3, #0]
 80147fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80147fc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80147fe:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8014800:	f7fd f8ba 	bl	8011978 <clear_lock>
#endif
	return FR_OK;
 8014804:	2300      	movs	r3, #0
}
 8014806:	4618      	mov	r0, r3
 8014808:	3760      	adds	r7, #96	; 0x60
 801480a:	46bd      	mov	sp, r7
 801480c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8014810:	41615252 	.word	0x41615252
 8014814:	61417272 	.word	0x61417272
 8014818:	2400027c 	.word	0x2400027c

0801481c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801481c:	b580      	push	{r7, lr}
 801481e:	b084      	sub	sp, #16
 8014820:	af00      	add	r7, sp, #0
 8014822:	6078      	str	r0, [r7, #4]
 8014824:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8014826:	2309      	movs	r3, #9
 8014828:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	2b00      	cmp	r3, #0
 801482e:	d01c      	beq.n	801486a <validate+0x4e>
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	2b00      	cmp	r3, #0
 8014836:	d018      	beq.n	801486a <validate+0x4e>
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	781b      	ldrb	r3, [r3, #0]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d013      	beq.n	801486a <validate+0x4e>
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	889a      	ldrh	r2, [r3, #4]
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	88db      	ldrh	r3, [r3, #6]
 801484c:	429a      	cmp	r2, r3
 801484e:	d10c      	bne.n	801486a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	681b      	ldr	r3, [r3, #0]
 8014854:	785b      	ldrb	r3, [r3, #1]
 8014856:	4618      	mov	r0, r3
 8014858:	f7fc fc64 	bl	8011124 <disk_status>
 801485c:	4603      	mov	r3, r0
 801485e:	f003 0301 	and.w	r3, r3, #1
 8014862:	2b00      	cmp	r3, #0
 8014864:	d101      	bne.n	801486a <validate+0x4e>
			res = FR_OK;
 8014866:	2300      	movs	r3, #0
 8014868:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801486a:	7bfb      	ldrb	r3, [r7, #15]
 801486c:	2b00      	cmp	r3, #0
 801486e:	d102      	bne.n	8014876 <validate+0x5a>
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	e000      	b.n	8014878 <validate+0x5c>
 8014876:	2300      	movs	r3, #0
 8014878:	683a      	ldr	r2, [r7, #0]
 801487a:	6013      	str	r3, [r2, #0]
	return res;
 801487c:	7bfb      	ldrb	r3, [r7, #15]
}
 801487e:	4618      	mov	r0, r3
 8014880:	3710      	adds	r7, #16
 8014882:	46bd      	mov	sp, r7
 8014884:	bd80      	pop	{r7, pc}
	...

08014888 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8014888:	b580      	push	{r7, lr}
 801488a:	b088      	sub	sp, #32
 801488c:	af00      	add	r7, sp, #0
 801488e:	60f8      	str	r0, [r7, #12]
 8014890:	60b9      	str	r1, [r7, #8]
 8014892:	4613      	mov	r3, r2
 8014894:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8014896:	68bb      	ldr	r3, [r7, #8]
 8014898:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801489a:	f107 0310 	add.w	r3, r7, #16
 801489e:	4618      	mov	r0, r3
 80148a0:	f7ff fb8b 	bl	8013fba <get_ldnumber>
 80148a4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80148a6:	69fb      	ldr	r3, [r7, #28]
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	da01      	bge.n	80148b0 <f_mount+0x28>
 80148ac:	230b      	movs	r3, #11
 80148ae:	e02b      	b.n	8014908 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80148b0:	4a17      	ldr	r2, [pc, #92]	; (8014910 <f_mount+0x88>)
 80148b2:	69fb      	ldr	r3, [r7, #28]
 80148b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80148b8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80148ba:	69bb      	ldr	r3, [r7, #24]
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d005      	beq.n	80148cc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80148c0:	69b8      	ldr	r0, [r7, #24]
 80148c2:	f7fd f859 	bl	8011978 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80148c6:	69bb      	ldr	r3, [r7, #24]
 80148c8:	2200      	movs	r2, #0
 80148ca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d002      	beq.n	80148d8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	2200      	movs	r2, #0
 80148d6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80148d8:	68fa      	ldr	r2, [r7, #12]
 80148da:	490d      	ldr	r1, [pc, #52]	; (8014910 <f_mount+0x88>)
 80148dc:	69fb      	ldr	r3, [r7, #28]
 80148de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d002      	beq.n	80148ee <f_mount+0x66>
 80148e8:	79fb      	ldrb	r3, [r7, #7]
 80148ea:	2b01      	cmp	r3, #1
 80148ec:	d001      	beq.n	80148f2 <f_mount+0x6a>
 80148ee:	2300      	movs	r3, #0
 80148f0:	e00a      	b.n	8014908 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80148f2:	f107 010c 	add.w	r1, r7, #12
 80148f6:	f107 0308 	add.w	r3, r7, #8
 80148fa:	2200      	movs	r2, #0
 80148fc:	4618      	mov	r0, r3
 80148fe:	f7ff fc05 	bl	801410c <find_volume>
 8014902:	4603      	mov	r3, r0
 8014904:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8014906:	7dfb      	ldrb	r3, [r7, #23]
}
 8014908:	4618      	mov	r0, r3
 801490a:	3720      	adds	r7, #32
 801490c:	46bd      	mov	sp, r7
 801490e:	bd80      	pop	{r7, pc}
 8014910:	24000274 	.word	0x24000274

08014914 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8014914:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8014918:	b0a4      	sub	sp, #144	; 0x90
 801491a:	af00      	add	r7, sp, #0
 801491c:	60f8      	str	r0, [r7, #12]
 801491e:	60b9      	str	r1, [r7, #8]
 8014920:	4613      	mov	r3, r2
 8014922:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	2b00      	cmp	r3, #0
 8014928:	d101      	bne.n	801492e <f_open+0x1a>
 801492a:	2309      	movs	r3, #9
 801492c:	e2bd      	b.n	8014eaa <f_open+0x596>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801492e:	79fb      	ldrb	r3, [r7, #7]
 8014930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014934:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8014936:	79fa      	ldrb	r2, [r7, #7]
 8014938:	f107 0114 	add.w	r1, r7, #20
 801493c:	f107 0308 	add.w	r3, r7, #8
 8014940:	4618      	mov	r0, r3
 8014942:	f7ff fbe3 	bl	801410c <find_volume>
 8014946:	4603      	mov	r3, r0
 8014948:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (res == FR_OK) {
 801494c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8014950:	2b00      	cmp	r3, #0
 8014952:	f040 82a1 	bne.w	8014e98 <f_open+0x584>
		dj.obj.fs = fs;
 8014956:	697b      	ldr	r3, [r7, #20]
 8014958:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
 801495a:	f44f 608c 	mov.w	r0, #1120	; 0x460
 801495e:	f001 fe3b 	bl	80165d8 <ff_memalloc>
 8014962:	67f8      	str	r0, [r7, #124]	; 0x7c
 8014964:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014966:	2b00      	cmp	r3, #0
 8014968:	d101      	bne.n	801496e <f_open+0x5a>
 801496a:	2311      	movs	r3, #17
 801496c:	e29d      	b.n	8014eaa <f_open+0x596>
 801496e:	697b      	ldr	r3, [r7, #20]
 8014970:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014972:	611a      	str	r2, [r3, #16]
 8014974:	697b      	ldr	r3, [r7, #20]
 8014976:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014978:	f502 7200 	add.w	r2, r2, #512	; 0x200
 801497c:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 801497e:	68ba      	ldr	r2, [r7, #8]
 8014980:	f107 0318 	add.w	r3, r7, #24
 8014984:	4611      	mov	r1, r2
 8014986:	4618      	mov	r0, r3
 8014988:	f7ff fa6a 	bl	8013e60 <follow_path>
 801498c:	4603      	mov	r3, r0
 801498e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8014992:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8014996:	2b00      	cmp	r3, #0
 8014998:	d11a      	bne.n	80149d0 <f_open+0xbc>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801499a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 801499e:	b25b      	sxtb	r3, r3
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	da03      	bge.n	80149ac <f_open+0x98>
				res = FR_INVALID_NAME;
 80149a4:	2306      	movs	r3, #6
 80149a6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80149aa:	e011      	b.n	80149d0 <f_open+0xbc>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80149ac:	79fb      	ldrb	r3, [r7, #7]
 80149ae:	f023 0301 	bic.w	r3, r3, #1
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	bf14      	ite	ne
 80149b6:	2301      	movne	r3, #1
 80149b8:	2300      	moveq	r3, #0
 80149ba:	b2db      	uxtb	r3, r3
 80149bc:	461a      	mov	r2, r3
 80149be:	f107 0318 	add.w	r3, r7, #24
 80149c2:	4611      	mov	r1, r2
 80149c4:	4618      	mov	r0, r3
 80149c6:	f7fc fe8f 	bl	80116e8 <chk_lock>
 80149ca:	4603      	mov	r3, r0
 80149cc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80149d0:	79fb      	ldrb	r3, [r7, #7]
 80149d2:	f003 031c 	and.w	r3, r3, #28
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	f000 8109 	beq.w	8014bee <f_open+0x2da>
			if (res != FR_OK) {					/* No file, create new */
 80149dc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d017      	beq.n	8014a14 <f_open+0x100>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80149e4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80149e8:	2b04      	cmp	r3, #4
 80149ea:	d10e      	bne.n	8014a0a <f_open+0xf6>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80149ec:	f7fc fed8 	bl	80117a0 <enq_lock>
 80149f0:	4603      	mov	r3, r0
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d006      	beq.n	8014a04 <f_open+0xf0>
 80149f6:	f107 0318 	add.w	r3, r7, #24
 80149fa:	4618      	mov	r0, r3
 80149fc:	f7fe fec8 	bl	8013790 <dir_register>
 8014a00:	4603      	mov	r3, r0
 8014a02:	e000      	b.n	8014a06 <f_open+0xf2>
 8014a04:	2312      	movs	r3, #18
 8014a06:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8014a0a:	79fb      	ldrb	r3, [r7, #7]
 8014a0c:	f043 0308 	orr.w	r3, r3, #8
 8014a10:	71fb      	strb	r3, [r7, #7]
 8014a12:	e010      	b.n	8014a36 <f_open+0x122>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8014a14:	7fbb      	ldrb	r3, [r7, #30]
 8014a16:	f003 0311 	and.w	r3, r3, #17
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d003      	beq.n	8014a26 <f_open+0x112>
					res = FR_DENIED;
 8014a1e:	2307      	movs	r3, #7
 8014a20:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8014a24:	e007      	b.n	8014a36 <f_open+0x122>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8014a26:	79fb      	ldrb	r3, [r7, #7]
 8014a28:	f003 0304 	and.w	r3, r3, #4
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d002      	beq.n	8014a36 <f_open+0x122>
 8014a30:	2308      	movs	r3, #8
 8014a32:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8014a36:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	f040 80f1 	bne.w	8014c22 <f_open+0x30e>
 8014a40:	79fb      	ldrb	r3, [r7, #7]
 8014a42:	f003 0308 	and.w	r3, r3, #8
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	f000 80eb 	beq.w	8014c22 <f_open+0x30e>
				dw = GET_FATTIME();
 8014a4c:	f7f9 ff00 	bl	800e850 <get_fattime>
 8014a50:	67b8      	str	r0, [r7, #120]	; 0x78
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8014a52:	697b      	ldr	r3, [r7, #20]
 8014a54:	781b      	ldrb	r3, [r3, #0]
 8014a56:	2b04      	cmp	r3, #4
 8014a58:	f040 8082 	bne.w	8014b60 <f_open+0x24c>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8014a5c:	697a      	ldr	r2, [r7, #20]
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 8014a62:	697b      	ldr	r3, [r7, #20]
 8014a64:	695b      	ldr	r3, [r3, #20]
 8014a66:	3334      	adds	r3, #52	; 0x34
 8014a68:	4618      	mov	r0, r3
 8014a6a:	f7fc fc11 	bl	8011290 <ld_dword>
 8014a6e:	4602      	mov	r2, r0
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8014a74:	697b      	ldr	r3, [r7, #20]
 8014a76:	695b      	ldr	r3, [r3, #20]
 8014a78:	3338      	adds	r3, #56	; 0x38
 8014a7a:	4618      	mov	r0, r3
 8014a7c:	f7fc fc2b 	bl	80112d6 <ld_qword>
 8014a80:	4603      	mov	r3, r0
 8014a82:	460c      	mov	r4, r1
 8014a84:	68fa      	ldr	r2, [r7, #12]
 8014a86:	e9c2 3404 	strd	r3, r4, [r2, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8014a8a:	697b      	ldr	r3, [r7, #20]
 8014a8c:	695b      	ldr	r3, [r3, #20]
 8014a8e:	3321      	adds	r3, #33	; 0x21
 8014a90:	781b      	ldrb	r3, [r3, #0]
 8014a92:	f003 0302 	and.w	r3, r3, #2
 8014a96:	b2da      	uxtb	r2, r3
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 8014a9c:	68fb      	ldr	r3, [r7, #12]
 8014a9e:	2200      	movs	r2, #0
 8014aa0:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 8014aa2:	697b      	ldr	r3, [r7, #20]
 8014aa4:	695b      	ldr	r3, [r3, #20]
 8014aa6:	3308      	adds	r3, #8
 8014aa8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8014aaa:	4618      	mov	r0, r3
 8014aac:	f7fc fceb 	bl	8011486 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 8014ab0:	697b      	ldr	r3, [r7, #20]
 8014ab2:	695b      	ldr	r3, [r3, #20]
 8014ab4:	3314      	adds	r3, #20
 8014ab6:	2200      	movs	r2, #0
 8014ab8:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 8014aba:	697b      	ldr	r3, [r7, #20]
 8014abc:	695b      	ldr	r3, [r3, #20]
 8014abe:	330c      	adds	r3, #12
 8014ac0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8014ac2:	4618      	mov	r0, r3
 8014ac4:	f7fc fcdf 	bl	8011486 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 8014ac8:	697b      	ldr	r3, [r7, #20]
 8014aca:	695b      	ldr	r3, [r3, #20]
 8014acc:	3315      	adds	r3, #21
 8014ace:	2200      	movs	r2, #0
 8014ad0:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 8014ad2:	697b      	ldr	r3, [r7, #20]
 8014ad4:	695b      	ldr	r3, [r3, #20]
 8014ad6:	3304      	adds	r3, #4
 8014ad8:	2220      	movs	r2, #32
 8014ada:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 8014adc:	697b      	ldr	r3, [r7, #20]
 8014ade:	695b      	ldr	r3, [r3, #20]
 8014ae0:	3334      	adds	r3, #52	; 0x34
 8014ae2:	2100      	movs	r1, #0
 8014ae4:	4618      	mov	r0, r3
 8014ae6:	f7fc fcce 	bl	8011486 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 8014aea:	697b      	ldr	r3, [r7, #20]
 8014aec:	695b      	ldr	r3, [r3, #20]
 8014aee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014af2:	f04f 0200 	mov.w	r2, #0
 8014af6:	f04f 0300 	mov.w	r3, #0
 8014afa:	4608      	mov	r0, r1
 8014afc:	f7fc fcef 	bl	80114de <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 8014b00:	697b      	ldr	r3, [r7, #20]
 8014b02:	695b      	ldr	r3, [r3, #20]
 8014b04:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8014b08:	f04f 0200 	mov.w	r2, #0
 8014b0c:	f04f 0300 	mov.w	r3, #0
 8014b10:	4608      	mov	r0, r1
 8014b12:	f7fc fce4 	bl	80114de <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 8014b16:	697b      	ldr	r3, [r7, #20]
 8014b18:	695b      	ldr	r3, [r3, #20]
 8014b1a:	3321      	adds	r3, #33	; 0x21
 8014b1c:	2201      	movs	r2, #1
 8014b1e:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 8014b20:	f107 0318 	add.w	r3, r7, #24
 8014b24:	4618      	mov	r0, r3
 8014b26:	f7fe fb80 	bl	801322a <store_xdir>
 8014b2a:	4603      	mov	r3, r0
 8014b2c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 8014b30:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d174      	bne.n	8014c22 <f_open+0x30e>
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	689b      	ldr	r3, [r3, #8]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d070      	beq.n	8014c22 <f_open+0x30e>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8014b40:	68f8      	ldr	r0, [r7, #12]
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	689b      	ldr	r3, [r3, #8]
 8014b46:	2200      	movs	r2, #0
 8014b48:	4619      	mov	r1, r3
 8014b4a:	f7fd fc0d 	bl	8012368 <remove_chain>
 8014b4e:	4603      	mov	r3, r0
 8014b50:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	689a      	ldr	r2, [r3, #8]
 8014b58:	697b      	ldr	r3, [r7, #20]
 8014b5a:	3a01      	subs	r2, #1
 8014b5c:	619a      	str	r2, [r3, #24]
 8014b5e:	e060      	b.n	8014c22 <f_open+0x30e>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8014b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b62:	330e      	adds	r3, #14
 8014b64:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8014b66:	4618      	mov	r0, r3
 8014b68:	f7fc fc8d 	bl	8011486 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8014b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b6e:	3316      	adds	r3, #22
 8014b70:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8014b72:	4618      	mov	r0, r3
 8014b74:	f7fc fc87 	bl	8011486 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8014b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b7a:	330b      	adds	r3, #11
 8014b7c:	2220      	movs	r2, #32
 8014b7e:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8014b80:	697b      	ldr	r3, [r7, #20]
 8014b82:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014b84:	4611      	mov	r1, r2
 8014b86:	4618      	mov	r0, r3
 8014b88:	f7fd ffc0 	bl	8012b0c <ld_clust>
 8014b8c:	6778      	str	r0, [r7, #116]	; 0x74
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8014b8e:	697b      	ldr	r3, [r7, #20]
 8014b90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014b92:	2200      	movs	r2, #0
 8014b94:	4618      	mov	r0, r3
 8014b96:	f7fd ffd8 	bl	8012b4a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8014b9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b9c:	331c      	adds	r3, #28
 8014b9e:	2100      	movs	r1, #0
 8014ba0:	4618      	mov	r0, r3
 8014ba2:	f7fc fc70 	bl	8011486 <st_dword>
					fs->wflag = 1;
 8014ba6:	697b      	ldr	r3, [r7, #20]
 8014ba8:	2201      	movs	r2, #1
 8014baa:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8014bac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d037      	beq.n	8014c22 <f_open+0x30e>
						dw = fs->winsect;
 8014bb2:	697b      	ldr	r3, [r7, #20]
 8014bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014bb6:	67bb      	str	r3, [r7, #120]	; 0x78
						res = remove_chain(&dj.obj, cl, 0);
 8014bb8:	f107 0318 	add.w	r3, r7, #24
 8014bbc:	2200      	movs	r2, #0
 8014bbe:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8014bc0:	4618      	mov	r0, r3
 8014bc2:	f7fd fbd1 	bl	8012368 <remove_chain>
 8014bc6:	4603      	mov	r3, r0
 8014bc8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						if (res == FR_OK) {
 8014bcc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d126      	bne.n	8014c22 <f_open+0x30e>
							res = move_window(fs, dw);
 8014bd4:	697b      	ldr	r3, [r7, #20]
 8014bd6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8014bd8:	4618      	mov	r0, r3
 8014bda:	f7fc ff35 	bl	8011a48 <move_window>
 8014bde:	4603      	mov	r3, r0
 8014be0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8014be4:	697b      	ldr	r3, [r7, #20]
 8014be6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014be8:	3a01      	subs	r2, #1
 8014bea:	619a      	str	r2, [r3, #24]
 8014bec:	e019      	b.n	8014c22 <f_open+0x30e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8014bee:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d115      	bne.n	8014c22 <f_open+0x30e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8014bf6:	7fbb      	ldrb	r3, [r7, #30]
 8014bf8:	f003 0310 	and.w	r3, r3, #16
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d003      	beq.n	8014c08 <f_open+0x2f4>
					res = FR_NO_FILE;
 8014c00:	2304      	movs	r3, #4
 8014c02:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8014c06:	e00c      	b.n	8014c22 <f_open+0x30e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8014c08:	79fb      	ldrb	r3, [r7, #7]
 8014c0a:	f003 0302 	and.w	r3, r3, #2
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d007      	beq.n	8014c22 <f_open+0x30e>
 8014c12:	7fbb      	ldrb	r3, [r7, #30]
 8014c14:	f003 0301 	and.w	r3, r3, #1
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d002      	beq.n	8014c22 <f_open+0x30e>
						res = FR_DENIED;
 8014c1c:	2307      	movs	r3, #7
 8014c1e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					}
				}
			}
		}
		if (res == FR_OK) {
 8014c22:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d128      	bne.n	8014c7c <f_open+0x368>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014c2a:	79fb      	ldrb	r3, [r7, #7]
 8014c2c:	f003 0308 	and.w	r3, r3, #8
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d003      	beq.n	8014c3c <f_open+0x328>
				mode |= FA_MODIFIED;
 8014c34:	79fb      	ldrb	r3, [r7, #7]
 8014c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c3a:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014c3c:	697b      	ldr	r3, [r7, #20]
 8014c3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 8014c44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014c4a:	79fb      	ldrb	r3, [r7, #7]
 8014c4c:	f023 0301 	bic.w	r3, r3, #1
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	bf14      	ite	ne
 8014c54:	2301      	movne	r3, #1
 8014c56:	2300      	moveq	r3, #0
 8014c58:	b2db      	uxtb	r3, r3
 8014c5a:	461a      	mov	r2, r3
 8014c5c:	f107 0318 	add.w	r3, r7, #24
 8014c60:	4611      	mov	r1, r2
 8014c62:	4618      	mov	r0, r3
 8014c64:	f7fc fdbe 	bl	80117e4 <inc_lock>
 8014c68:	4602      	mov	r2, r0
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d102      	bne.n	8014c7c <f_open+0x368>
 8014c76:	2302      	movs	r3, #2
 8014c78:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8014c7c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	f040 8106 	bne.w	8014e92 <f_open+0x57e>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8014c86:	697b      	ldr	r3, [r7, #20]
 8014c88:	781b      	ldrb	r3, [r3, #0]
 8014c8a:	2b04      	cmp	r3, #4
 8014c8c:	d12b      	bne.n	8014ce6 <f_open+0x3d2>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 8014c8e:	6a3a      	ldr	r2, [r7, #32]
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 8014c94:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8014c98:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8014c9c:	7ffa      	ldrb	r2, [r7, #31]
 8014c9e:	431a      	orrs	r2, r3
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 8014ca4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 8014caa:	697b      	ldr	r3, [r7, #20]
 8014cac:	695b      	ldr	r3, [r3, #20]
 8014cae:	3334      	adds	r3, #52	; 0x34
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	f7fc faed 	bl	8011290 <ld_dword>
 8014cb6:	4602      	mov	r2, r0
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8014cbc:	697b      	ldr	r3, [r7, #20]
 8014cbe:	695b      	ldr	r3, [r3, #20]
 8014cc0:	3338      	adds	r3, #56	; 0x38
 8014cc2:	4618      	mov	r0, r3
 8014cc4:	f7fc fb07 	bl	80112d6 <ld_qword>
 8014cc8:	4603      	mov	r3, r0
 8014cca:	460c      	mov	r4, r1
 8014ccc:	68fa      	ldr	r2, [r7, #12]
 8014cce:	e9c2 3404 	strd	r3, r4, [r2, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8014cd2:	697b      	ldr	r3, [r7, #20]
 8014cd4:	695b      	ldr	r3, [r3, #20]
 8014cd6:	3321      	adds	r3, #33	; 0x21
 8014cd8:	781b      	ldrb	r3, [r3, #0]
 8014cda:	f003 0302 	and.w	r3, r3, #2
 8014cde:	b2da      	uxtb	r2, r3
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	71da      	strb	r2, [r3, #7]
 8014ce4:	e013      	b.n	8014d0e <f_open+0x3fa>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8014ce6:	697b      	ldr	r3, [r7, #20]
 8014ce8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014cea:	4611      	mov	r1, r2
 8014cec:	4618      	mov	r0, r3
 8014cee:	f7fd ff0d 	bl	8012b0c <ld_clust>
 8014cf2:	4602      	mov	r2, r0
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8014cf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014cfa:	331c      	adds	r3, #28
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	f7fc fac7 	bl	8011290 <ld_dword>
 8014d02:	4603      	mov	r3, r0
 8014d04:	f04f 0400 	mov.w	r4, #0
 8014d08:	68fa      	ldr	r2, [r7, #12]
 8014d0a:	e9c2 3404 	strd	r3, r4, [r2, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	2200      	movs	r2, #0
 8014d12:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8014d14:	697a      	ldr	r2, [r7, #20]
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8014d1a:	697b      	ldr	r3, [r7, #20]
 8014d1c:	88da      	ldrh	r2, [r3, #6]
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	79fa      	ldrb	r2, [r7, #7]
 8014d26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	2200      	movs	r2, #0
 8014d2e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	2200      	movs	r2, #0
 8014d36:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 8014d38:	68fa      	ldr	r2, [r7, #12]
 8014d3a:	f04f 0300 	mov.w	r3, #0
 8014d3e:	f04f 0400 	mov.w	r4, #0
 8014d42:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	3354      	adds	r3, #84	; 0x54
 8014d4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014d4e:	2100      	movs	r1, #0
 8014d50:	4618      	mov	r0, r3
 8014d52:	f7fc fc6c 	bl	801162e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8014d56:	79fb      	ldrb	r3, [r7, #7]
 8014d58:	f003 0320 	and.w	r3, r3, #32
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	f000 8098 	beq.w	8014e92 <f_open+0x57e>
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8014d68:	4323      	orrs	r3, r4
 8014d6a:	f000 8092 	beq.w	8014e92 <f_open+0x57e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8014d74:	68fa      	ldr	r2, [r7, #12]
 8014d76:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8014d7a:	697b      	ldr	r3, [r7, #20]
 8014d7c:	895b      	ldrh	r3, [r3, #10]
 8014d7e:	461a      	mov	r2, r3
 8014d80:	697b      	ldr	r3, [r7, #20]
 8014d82:	899b      	ldrh	r3, [r3, #12]
 8014d84:	fb03 f302 	mul.w	r3, r3, r2
 8014d88:	673b      	str	r3, [r7, #112]	; 0x70
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	689b      	ldr	r3, [r3, #8]
 8014d8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014d92:	68fb      	ldr	r3, [r7, #12]
 8014d94:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8014d98:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 8014d9c:	e024      	b.n	8014de8 <f_open+0x4d4>
					clst = get_fat(&fp->obj, clst);
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8014da4:	4618      	mov	r0, r3
 8014da6:	f7fc ff0d 	bl	8011bc4 <get_fat>
 8014daa:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
					if (clst <= 1) res = FR_INT_ERR;
 8014dae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014db2:	2b01      	cmp	r3, #1
 8014db4:	d802      	bhi.n	8014dbc <f_open+0x4a8>
 8014db6:	2302      	movs	r3, #2
 8014db8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014dbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014dc4:	d102      	bne.n	8014dcc <f_open+0x4b8>
 8014dc6:	2301      	movs	r3, #1
 8014dc8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014dcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014dce:	469b      	mov	fp, r3
 8014dd0:	f04f 0c00 	mov.w	ip, #0
 8014dd4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8014dd8:	460b      	mov	r3, r1
 8014dda:	4614      	mov	r4, r2
 8014ddc:	ebb3 030b 	subs.w	r3, r3, fp
 8014de0:	eb64 040c 	sbc.w	r4, r4, ip
 8014de4:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 8014de8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d109      	bne.n	8014e04 <f_open+0x4f0>
 8014df0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014df2:	4619      	mov	r1, r3
 8014df4:	f04f 0200 	mov.w	r2, #0
 8014df8:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8014dfc:	42a2      	cmp	r2, r4
 8014dfe:	bf08      	it	eq
 8014e00:	4299      	cmpeq	r1, r3
 8014e02:	d3cc      	bcc.n	8014d9e <f_open+0x48a>
				}
				fp->clust = clst;
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8014e0a:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014e0c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d13e      	bne.n	8014e92 <f_open+0x57e>
 8014e14:	697b      	ldr	r3, [r7, #20]
 8014e16:	899b      	ldrh	r3, [r3, #12]
 8014e18:	b29b      	uxth	r3, r3
 8014e1a:	f04f 0400 	mov.w	r4, #0
 8014e1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8014e22:	461a      	mov	r2, r3
 8014e24:	4623      	mov	r3, r4
 8014e26:	f7eb fa57 	bl	80002d8 <__aeabi_uldivmod>
 8014e2a:	461c      	mov	r4, r3
 8014e2c:	4613      	mov	r3, r2
 8014e2e:	4323      	orrs	r3, r4
 8014e30:	d02f      	beq.n	8014e92 <f_open+0x57e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8014e32:	697b      	ldr	r3, [r7, #20]
 8014e34:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8014e38:	4618      	mov	r0, r3
 8014e3a:	f7fc fea3 	bl	8011b84 <clust2sect>
 8014e3e:	66f8      	str	r0, [r7, #108]	; 0x6c
 8014e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d103      	bne.n	8014e4e <f_open+0x53a>
						res = FR_INT_ERR;
 8014e46:	2302      	movs	r3, #2
 8014e48:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8014e4c:	e021      	b.n	8014e92 <f_open+0x57e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8014e4e:	697b      	ldr	r3, [r7, #20]
 8014e50:	899b      	ldrh	r3, [r3, #12]
 8014e52:	b29b      	uxth	r3, r3
 8014e54:	f04f 0400 	mov.w	r4, #0
 8014e58:	461a      	mov	r2, r3
 8014e5a:	4623      	mov	r3, r4
 8014e5c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8014e60:	f7eb fa3a 	bl	80002d8 <__aeabi_uldivmod>
 8014e64:	4603      	mov	r3, r0
 8014e66:	460c      	mov	r4, r1
 8014e68:	461a      	mov	r2, r3
 8014e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014e6c:	441a      	add	r2, r3
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8014e72:	697b      	ldr	r3, [r7, #20]
 8014e74:	7858      	ldrb	r0, [r3, #1]
 8014e76:	68fb      	ldr	r3, [r7, #12]
 8014e78:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014e80:	2301      	movs	r3, #1
 8014e82:	f7fc f98f 	bl	80111a4 <disk_read>
 8014e86:	4603      	mov	r3, r0
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d002      	beq.n	8014e92 <f_open+0x57e>
 8014e8c:	2301      	movs	r3, #1
 8014e8e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
#endif
		}

		FREE_NAMBUF();
 8014e92:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8014e94:	f001 fbac 	bl	80165f0 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014e98:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d002      	beq.n	8014ea6 <f_open+0x592>
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	2200      	movs	r2, #0
 8014ea4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014ea6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8014eaa:	4618      	mov	r0, r3
 8014eac:	3790      	adds	r7, #144	; 0x90
 8014eae:	46bd      	mov	sp, r7
 8014eb0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08014eb4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8014eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014eb6:	b091      	sub	sp, #68	; 0x44
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	60f8      	str	r0, [r7, #12]
 8014ebc:	60b9      	str	r1, [r7, #8]
 8014ebe:	607a      	str	r2, [r7, #4]
 8014ec0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8014ec2:	68bb      	ldr	r3, [r7, #8]
 8014ec4:	62fb      	str	r3, [r7, #44]	; 0x2c


	*br = 0;	/* Clear read byte counter */
 8014ec6:	683b      	ldr	r3, [r7, #0]
 8014ec8:	2200      	movs	r2, #0
 8014eca:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	f107 0214 	add.w	r2, r7, #20
 8014ed2:	4611      	mov	r1, r2
 8014ed4:	4618      	mov	r0, r3
 8014ed6:	f7ff fca1 	bl	801481c <validate>
 8014eda:	4603      	mov	r3, r0
 8014edc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014ee0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d108      	bne.n	8014efa <f_read+0x46>
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014eee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8014ef2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d002      	beq.n	8014f00 <f_read+0x4c>
 8014efa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014efe:	e16a      	b.n	80151d6 <f_read+0x322>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014f06:	f003 0301 	and.w	r3, r3, #1
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d101      	bne.n	8014f12 <f_read+0x5e>
 8014f0e:	2307      	movs	r3, #7
 8014f10:	e161      	b.n	80151d6 <f_read+0x322>
	remain = fp->obj.objsize - fp->fptr;
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	e9d3 560e 	ldrd	r5, r6, [r3, #56]	; 0x38
 8014f1e:	460b      	mov	r3, r1
 8014f20:	4614      	mov	r4, r2
 8014f22:	1b5b      	subs	r3, r3, r5
 8014f24:	eb64 0406 	sbc.w	r4, r4, r6
 8014f28:	e9c7 3408 	strd	r3, r4, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	f04f 0400 	mov.w	r4, #0
 8014f32:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8014f36:	42a2      	cmp	r2, r4
 8014f38:	bf08      	it	eq
 8014f3a:	4299      	cmpeq	r1, r3
 8014f3c:	f080 8146 	bcs.w	80151cc <f_read+0x318>
 8014f40:	6a3b      	ldr	r3, [r7, #32]
 8014f42:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8014f44:	e142      	b.n	80151cc <f_read+0x318>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8014f46:	68fb      	ldr	r3, [r7, #12]
 8014f48:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8014f4c:	697b      	ldr	r3, [r7, #20]
 8014f4e:	899b      	ldrh	r3, [r3, #12]
 8014f50:	b29b      	uxth	r3, r3
 8014f52:	f04f 0400 	mov.w	r4, #0
 8014f56:	461a      	mov	r2, r3
 8014f58:	4623      	mov	r3, r4
 8014f5a:	f7eb f9bd 	bl	80002d8 <__aeabi_uldivmod>
 8014f5e:	461c      	mov	r4, r3
 8014f60:	4613      	mov	r3, r2
 8014f62:	4323      	orrs	r3, r4
 8014f64:	f040 80eb 	bne.w	801513e <f_read+0x28a>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8014f6e:	697b      	ldr	r3, [r7, #20]
 8014f70:	899b      	ldrh	r3, [r3, #12]
 8014f72:	b29b      	uxth	r3, r3
 8014f74:	f04f 0400 	mov.w	r4, #0
 8014f78:	461a      	mov	r2, r3
 8014f7a:	4623      	mov	r3, r4
 8014f7c:	f7eb f9ac 	bl	80002d8 <__aeabi_uldivmod>
 8014f80:	4603      	mov	r3, r0
 8014f82:	460c      	mov	r4, r1
 8014f84:	461a      	mov	r2, r3
 8014f86:	697b      	ldr	r3, [r7, #20]
 8014f88:	895b      	ldrh	r3, [r3, #10]
 8014f8a:	3b01      	subs	r3, #1
 8014f8c:	4013      	ands	r3, r2
 8014f8e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8014f90:	69fb      	ldr	r3, [r7, #28]
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d134      	bne.n	8015000 <f_read+0x14c>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8014f9c:	4323      	orrs	r3, r4
 8014f9e:	d103      	bne.n	8014fa8 <f_read+0xf4>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	689b      	ldr	r3, [r3, #8]
 8014fa4:	63bb      	str	r3, [r7, #56]	; 0x38
 8014fa6:	e015      	b.n	8014fd4 <f_read+0x120>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d009      	beq.n	8014fc4 <f_read+0x110>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8014fb6:	461a      	mov	r2, r3
 8014fb8:	4623      	mov	r3, r4
 8014fba:	68f8      	ldr	r0, [r7, #12]
 8014fbc:	f7fd fb89 	bl	80126d2 <clmt_clust>
 8014fc0:	63b8      	str	r0, [r7, #56]	; 0x38
 8014fc2:	e007      	b.n	8014fd4 <f_read+0x120>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8014fc4:	68fa      	ldr	r2, [r7, #12]
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014fca:	4619      	mov	r1, r3
 8014fcc:	4610      	mov	r0, r2
 8014fce:	f7fc fdf9 	bl	8011bc4 <get_fat>
 8014fd2:	63b8      	str	r0, [r7, #56]	; 0x38
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8014fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fd6:	2b01      	cmp	r3, #1
 8014fd8:	d805      	bhi.n	8014fe6 <f_read+0x132>
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	2202      	movs	r2, #2
 8014fde:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8014fe2:	2302      	movs	r3, #2
 8014fe4:	e0f7      	b.n	80151d6 <f_read+0x322>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014fec:	d105      	bne.n	8014ffa <f_read+0x146>
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	2201      	movs	r2, #1
 8014ff2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8014ff6:	2301      	movs	r3, #1
 8014ff8:	e0ed      	b.n	80151d6 <f_read+0x322>
				fp->clust = clst;				/* Update current cluster */
 8014ffa:	68fb      	ldr	r3, [r7, #12]
 8014ffc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014ffe:	641a      	str	r2, [r3, #64]	; 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8015000:	697a      	ldr	r2, [r7, #20]
 8015002:	68fb      	ldr	r3, [r7, #12]
 8015004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015006:	4619      	mov	r1, r3
 8015008:	4610      	mov	r0, r2
 801500a:	f7fc fdbb 	bl	8011b84 <clust2sect>
 801500e:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8015010:	69bb      	ldr	r3, [r7, #24]
 8015012:	2b00      	cmp	r3, #0
 8015014:	d105      	bne.n	8015022 <f_read+0x16e>
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	2202      	movs	r2, #2
 801501a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801501e:	2302      	movs	r3, #2
 8015020:	e0d9      	b.n	80151d6 <f_read+0x322>
			sect += csect;
 8015022:	69ba      	ldr	r2, [r7, #24]
 8015024:	69fb      	ldr	r3, [r7, #28]
 8015026:	4413      	add	r3, r2
 8015028:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801502a:	697b      	ldr	r3, [r7, #20]
 801502c:	899b      	ldrh	r3, [r3, #12]
 801502e:	461a      	mov	r2, r3
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	fbb3 f3f2 	udiv	r3, r3, r2
 8015036:	633b      	str	r3, [r7, #48]	; 0x30
			if (cc) {							/* Read maximum contiguous sectors directly */
 8015038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801503a:	2b00      	cmp	r3, #0
 801503c:	d043      	beq.n	80150c6 <f_read+0x212>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801503e:	69fa      	ldr	r2, [r7, #28]
 8015040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015042:	4413      	add	r3, r2
 8015044:	697a      	ldr	r2, [r7, #20]
 8015046:	8952      	ldrh	r2, [r2, #10]
 8015048:	4293      	cmp	r3, r2
 801504a:	d905      	bls.n	8015058 <f_read+0x1a4>
					cc = fs->csize - csect;
 801504c:	697b      	ldr	r3, [r7, #20]
 801504e:	895b      	ldrh	r3, [r3, #10]
 8015050:	461a      	mov	r2, r3
 8015052:	69fb      	ldr	r3, [r7, #28]
 8015054:	1ad3      	subs	r3, r2, r3
 8015056:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015058:	697b      	ldr	r3, [r7, #20]
 801505a:	7858      	ldrb	r0, [r3, #1]
 801505c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801505e:	69ba      	ldr	r2, [r7, #24]
 8015060:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015062:	f7fc f89f 	bl	80111a4 <disk_read>
 8015066:	4603      	mov	r3, r0
 8015068:	2b00      	cmp	r3, #0
 801506a:	d005      	beq.n	8015078 <f_read+0x1c4>
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	2201      	movs	r2, #1
 8015070:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8015074:	2301      	movs	r3, #1
 8015076:	e0ae      	b.n	80151d6 <f_read+0x322>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801507e:	b25b      	sxtb	r3, r3
 8015080:	2b00      	cmp	r3, #0
 8015082:	da18      	bge.n	80150b6 <f_read+0x202>
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015088:	69bb      	ldr	r3, [r7, #24]
 801508a:	1ad3      	subs	r3, r2, r3
 801508c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801508e:	429a      	cmp	r2, r3
 8015090:	d911      	bls.n	80150b6 <f_read+0x202>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015096:	69bb      	ldr	r3, [r7, #24]
 8015098:	1ad3      	subs	r3, r2, r3
 801509a:	697a      	ldr	r2, [r7, #20]
 801509c:	8992      	ldrh	r2, [r2, #12]
 801509e:	fb02 f303 	mul.w	r3, r2, r3
 80150a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80150a4:	18d0      	adds	r0, r2, r3
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80150ac:	697b      	ldr	r3, [r7, #20]
 80150ae:	899b      	ldrh	r3, [r3, #12]
 80150b0:	461a      	mov	r2, r3
 80150b2:	f7fc fa9b 	bl	80115ec <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80150b6:	697b      	ldr	r3, [r7, #20]
 80150b8:	899b      	ldrh	r3, [r3, #12]
 80150ba:	461a      	mov	r2, r3
 80150bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150be:	fb02 f303 	mul.w	r3, r2, r3
 80150c2:	637b      	str	r3, [r7, #52]	; 0x34
				continue;
 80150c4:	e067      	b.n	8015196 <f_read+0x2e2>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80150c6:	68fb      	ldr	r3, [r7, #12]
 80150c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80150ca:	69ba      	ldr	r2, [r7, #24]
 80150cc:	429a      	cmp	r2, r3
 80150ce:	d033      	beq.n	8015138 <f_read+0x284>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80150d6:	b25b      	sxtb	r3, r3
 80150d8:	2b00      	cmp	r3, #0
 80150da:	da1b      	bge.n	8015114 <f_read+0x260>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80150dc:	697b      	ldr	r3, [r7, #20]
 80150de:	7858      	ldrb	r0, [r3, #1]
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80150ea:	2301      	movs	r3, #1
 80150ec:	f7fc f87a 	bl	80111e4 <disk_write>
 80150f0:	4603      	mov	r3, r0
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d005      	beq.n	8015102 <f_read+0x24e>
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	2201      	movs	r2, #1
 80150fa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80150fe:	2301      	movs	r3, #1
 8015100:	e069      	b.n	80151d6 <f_read+0x322>
					fp->flag &= (BYTE)~FA_DIRTY;
 8015102:	68fb      	ldr	r3, [r7, #12]
 8015104:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015108:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801510c:	b2da      	uxtb	r2, r3
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8015114:	697b      	ldr	r3, [r7, #20]
 8015116:	7858      	ldrb	r0, [r3, #1]
 8015118:	68fb      	ldr	r3, [r7, #12]
 801511a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 801511e:	2301      	movs	r3, #1
 8015120:	69ba      	ldr	r2, [r7, #24]
 8015122:	f7fc f83f 	bl	80111a4 <disk_read>
 8015126:	4603      	mov	r3, r0
 8015128:	2b00      	cmp	r3, #0
 801512a:	d005      	beq.n	8015138 <f_read+0x284>
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	2201      	movs	r2, #1
 8015130:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8015134:	2301      	movs	r3, #1
 8015136:	e04e      	b.n	80151d6 <f_read+0x322>
			}
#endif
			fp->sect = sect;
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	69ba      	ldr	r2, [r7, #24]
 801513c:	645a      	str	r2, [r3, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801513e:	697b      	ldr	r3, [r7, #20]
 8015140:	899b      	ldrh	r3, [r3, #12]
 8015142:	4618      	mov	r0, r3
 8015144:	68fb      	ldr	r3, [r7, #12]
 8015146:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 801514a:	697a      	ldr	r2, [r7, #20]
 801514c:	8992      	ldrh	r2, [r2, #12]
 801514e:	fbb3 f1f2 	udiv	r1, r3, r2
 8015152:	fb02 f201 	mul.w	r2, r2, r1
 8015156:	1a9b      	subs	r3, r3, r2
 8015158:	1ac3      	subs	r3, r0, r3
 801515a:	637b      	str	r3, [r7, #52]	; 0x34
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801515c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	429a      	cmp	r2, r3
 8015162:	d901      	bls.n	8015168 <f_read+0x2b4>
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	637b      	str	r3, [r7, #52]	; 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	f103 0554 	add.w	r5, r3, #84	; 0x54
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8015174:	697b      	ldr	r3, [r7, #20]
 8015176:	899b      	ldrh	r3, [r3, #12]
 8015178:	b29b      	uxth	r3, r3
 801517a:	f04f 0400 	mov.w	r4, #0
 801517e:	461a      	mov	r2, r3
 8015180:	4623      	mov	r3, r4
 8015182:	f7eb f8a9 	bl	80002d8 <__aeabi_uldivmod>
 8015186:	461c      	mov	r4, r3
 8015188:	4613      	mov	r3, r2
 801518a:	442b      	add	r3, r5
 801518c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801518e:	4619      	mov	r1, r3
 8015190:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015192:	f7fc fa2b 	bl	80115ec <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8015196:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801519a:	4413      	add	r3, r2
 801519c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 80151a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80151a6:	461d      	mov	r5, r3
 80151a8:	f04f 0600 	mov.w	r6, #0
 80151ac:	186b      	adds	r3, r5, r1
 80151ae:	eb46 0402 	adc.w	r4, r6, r2
 80151b2:	68fa      	ldr	r2, [r7, #12]
 80151b4:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 80151b8:	683b      	ldr	r3, [r7, #0]
 80151ba:	681a      	ldr	r2, [r3, #0]
 80151bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80151be:	441a      	add	r2, r3
 80151c0:	683b      	ldr	r3, [r7, #0]
 80151c2:	601a      	str	r2, [r3, #0]
 80151c4:	687a      	ldr	r2, [r7, #4]
 80151c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80151c8:	1ad3      	subs	r3, r2, r3
 80151ca:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	f47f aeb9 	bne.w	8014f46 <f_read+0x92>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80151d4:	2300      	movs	r3, #0
}
 80151d6:	4618      	mov	r0, r3
 80151d8:	3744      	adds	r7, #68	; 0x44
 80151da:	46bd      	mov	sp, r7
 80151dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080151de <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80151de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151e0:	b08d      	sub	sp, #52	; 0x34
 80151e2:	af00      	add	r7, sp, #0
 80151e4:	60f8      	str	r0, [r7, #12]
 80151e6:	60b9      	str	r1, [r7, #8]
 80151e8:	607a      	str	r2, [r7, #4]
 80151ea:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80151ec:	68bb      	ldr	r3, [r7, #8]
 80151ee:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80151f0:	683b      	ldr	r3, [r7, #0]
 80151f2:	2200      	movs	r2, #0
 80151f4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	f107 0210 	add.w	r2, r7, #16
 80151fc:	4611      	mov	r1, r2
 80151fe:	4618      	mov	r0, r3
 8015200:	f7ff fb0c 	bl	801481c <validate>
 8015204:	4603      	mov	r3, r0
 8015206:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801520a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801520e:	2b00      	cmp	r3, #0
 8015210:	d108      	bne.n	8015224 <f_write+0x46>
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015218:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801521c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015220:	2b00      	cmp	r3, #0
 8015222:	d002      	beq.n	801522a <f_write+0x4c>
 8015224:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015228:	e1ab      	b.n	8015582 <f_write+0x3a4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015230:	f003 0302 	and.w	r3, r3, #2
 8015234:	2b00      	cmp	r3, #0
 8015236:	d101      	bne.n	801523c <f_write+0x5e>
 8015238:	2307      	movs	r3, #7
 801523a:	e1a2      	b.n	8015582 <f_write+0x3a4>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801523c:	693b      	ldr	r3, [r7, #16]
 801523e:	781b      	ldrb	r3, [r3, #0]
 8015240:	2b04      	cmp	r3, #4
 8015242:	f000 818e 	beq.w	8015562 <f_write+0x384>
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 801524c:	461a      	mov	r2, r3
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	441a      	add	r2, r3
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8015258:	429a      	cmp	r2, r3
 801525a:	f080 8182 	bcs.w	8015562 <f_write+0x384>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8015264:	43db      	mvns	r3, r3
 8015266:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8015268:	e17b      	b.n	8015562 <f_write+0x384>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8015270:	693b      	ldr	r3, [r7, #16]
 8015272:	899b      	ldrh	r3, [r3, #12]
 8015274:	b29b      	uxth	r3, r3
 8015276:	f04f 0400 	mov.w	r4, #0
 801527a:	461a      	mov	r2, r3
 801527c:	4623      	mov	r3, r4
 801527e:	f7eb f82b 	bl	80002d8 <__aeabi_uldivmod>
 8015282:	461c      	mov	r4, r3
 8015284:	4613      	mov	r3, r2
 8015286:	4323      	orrs	r3, r4
 8015288:	f040 810c 	bne.w	80154a4 <f_write+0x2c6>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801528c:	68fb      	ldr	r3, [r7, #12]
 801528e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8015292:	693b      	ldr	r3, [r7, #16]
 8015294:	899b      	ldrh	r3, [r3, #12]
 8015296:	b29b      	uxth	r3, r3
 8015298:	f04f 0400 	mov.w	r4, #0
 801529c:	461a      	mov	r2, r3
 801529e:	4623      	mov	r3, r4
 80152a0:	f7eb f81a 	bl	80002d8 <__aeabi_uldivmod>
 80152a4:	4603      	mov	r3, r0
 80152a6:	460c      	mov	r4, r1
 80152a8:	461a      	mov	r2, r3
 80152aa:	693b      	ldr	r3, [r7, #16]
 80152ac:	895b      	ldrh	r3, [r3, #10]
 80152ae:	3b01      	subs	r3, #1
 80152b0:	4013      	ands	r3, r2
 80152b2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80152b4:	69bb      	ldr	r3, [r7, #24]
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d148      	bne.n	801534c <f_write+0x16e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80152ba:	68fb      	ldr	r3, [r7, #12]
 80152bc:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80152c0:	4323      	orrs	r3, r4
 80152c2:	d10c      	bne.n	80152de <f_write+0x100>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	689b      	ldr	r3, [r3, #8]
 80152c8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80152ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d11c      	bne.n	801530a <f_write+0x12c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	2100      	movs	r1, #0
 80152d4:	4618      	mov	r0, r3
 80152d6:	f7fd f8fb 	bl	80124d0 <create_chain>
 80152da:	62b8      	str	r0, [r7, #40]	; 0x28
 80152dc:	e015      	b.n	801530a <f_write+0x12c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d009      	beq.n	80152fa <f_write+0x11c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80152ec:	461a      	mov	r2, r3
 80152ee:	4623      	mov	r3, r4
 80152f0:	68f8      	ldr	r0, [r7, #12]
 80152f2:	f7fd f9ee 	bl	80126d2 <clmt_clust>
 80152f6:	62b8      	str	r0, [r7, #40]	; 0x28
 80152f8:	e007      	b.n	801530a <f_write+0x12c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80152fa:	68fa      	ldr	r2, [r7, #12]
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015300:	4619      	mov	r1, r3
 8015302:	4610      	mov	r0, r2
 8015304:	f7fd f8e4 	bl	80124d0 <create_chain>
 8015308:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801530a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801530c:	2b00      	cmp	r3, #0
 801530e:	f000 812d 	beq.w	801556c <f_write+0x38e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8015312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015314:	2b01      	cmp	r3, #1
 8015316:	d105      	bne.n	8015324 <f_write+0x146>
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	2202      	movs	r2, #2
 801531c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8015320:	2302      	movs	r3, #2
 8015322:	e12e      	b.n	8015582 <f_write+0x3a4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015326:	f1b3 3fff 	cmp.w	r3, #4294967295
 801532a:	d105      	bne.n	8015338 <f_write+0x15a>
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	2201      	movs	r2, #1
 8015330:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8015334:	2301      	movs	r3, #1
 8015336:	e124      	b.n	8015582 <f_write+0x3a4>
				fp->clust = clst;			/* Update current cluster */
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801533c:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	689b      	ldr	r3, [r3, #8]
 8015342:	2b00      	cmp	r3, #0
 8015344:	d102      	bne.n	801534c <f_write+0x16e>
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801534a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015352:	b25b      	sxtb	r3, r3
 8015354:	2b00      	cmp	r3, #0
 8015356:	da1b      	bge.n	8015390 <f_write+0x1b2>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015358:	693b      	ldr	r3, [r7, #16]
 801535a:	7858      	ldrb	r0, [r3, #1]
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015366:	2301      	movs	r3, #1
 8015368:	f7fb ff3c 	bl	80111e4 <disk_write>
 801536c:	4603      	mov	r3, r0
 801536e:	2b00      	cmp	r3, #0
 8015370:	d005      	beq.n	801537e <f_write+0x1a0>
 8015372:	68fb      	ldr	r3, [r7, #12]
 8015374:	2201      	movs	r2, #1
 8015376:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801537a:	2301      	movs	r3, #1
 801537c:	e101      	b.n	8015582 <f_write+0x3a4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015388:	b2da      	uxtb	r2, r3
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8015390:	693a      	ldr	r2, [r7, #16]
 8015392:	68fb      	ldr	r3, [r7, #12]
 8015394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015396:	4619      	mov	r1, r3
 8015398:	4610      	mov	r0, r2
 801539a:	f7fc fbf3 	bl	8011b84 <clust2sect>
 801539e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80153a0:	697b      	ldr	r3, [r7, #20]
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d105      	bne.n	80153b2 <f_write+0x1d4>
 80153a6:	68fb      	ldr	r3, [r7, #12]
 80153a8:	2202      	movs	r2, #2
 80153aa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80153ae:	2302      	movs	r3, #2
 80153b0:	e0e7      	b.n	8015582 <f_write+0x3a4>
			sect += csect;
 80153b2:	697a      	ldr	r2, [r7, #20]
 80153b4:	69bb      	ldr	r3, [r7, #24]
 80153b6:	4413      	add	r3, r2
 80153b8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80153ba:	693b      	ldr	r3, [r7, #16]
 80153bc:	899b      	ldrh	r3, [r3, #12]
 80153be:	461a      	mov	r2, r3
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80153c6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80153c8:	6a3b      	ldr	r3, [r7, #32]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d046      	beq.n	801545c <f_write+0x27e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80153ce:	69ba      	ldr	r2, [r7, #24]
 80153d0:	6a3b      	ldr	r3, [r7, #32]
 80153d2:	4413      	add	r3, r2
 80153d4:	693a      	ldr	r2, [r7, #16]
 80153d6:	8952      	ldrh	r2, [r2, #10]
 80153d8:	4293      	cmp	r3, r2
 80153da:	d905      	bls.n	80153e8 <f_write+0x20a>
					cc = fs->csize - csect;
 80153dc:	693b      	ldr	r3, [r7, #16]
 80153de:	895b      	ldrh	r3, [r3, #10]
 80153e0:	461a      	mov	r2, r3
 80153e2:	69bb      	ldr	r3, [r7, #24]
 80153e4:	1ad3      	subs	r3, r2, r3
 80153e6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80153e8:	693b      	ldr	r3, [r7, #16]
 80153ea:	7858      	ldrb	r0, [r3, #1]
 80153ec:	6a3b      	ldr	r3, [r7, #32]
 80153ee:	697a      	ldr	r2, [r7, #20]
 80153f0:	69f9      	ldr	r1, [r7, #28]
 80153f2:	f7fb fef7 	bl	80111e4 <disk_write>
 80153f6:	4603      	mov	r3, r0
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d005      	beq.n	8015408 <f_write+0x22a>
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	2201      	movs	r2, #1
 8015400:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8015404:	2301      	movs	r3, #1
 8015406:	e0bc      	b.n	8015582 <f_write+0x3a4>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801540c:	697b      	ldr	r3, [r7, #20]
 801540e:	1ad3      	subs	r3, r2, r3
 8015410:	6a3a      	ldr	r2, [r7, #32]
 8015412:	429a      	cmp	r2, r3
 8015414:	d91a      	bls.n	801544c <f_write+0x26e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	f103 0054 	add.w	r0, r3, #84	; 0x54
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015420:	697b      	ldr	r3, [r7, #20]
 8015422:	1ad3      	subs	r3, r2, r3
 8015424:	693a      	ldr	r2, [r7, #16]
 8015426:	8992      	ldrh	r2, [r2, #12]
 8015428:	fb02 f303 	mul.w	r3, r2, r3
 801542c:	69fa      	ldr	r2, [r7, #28]
 801542e:	18d1      	adds	r1, r2, r3
 8015430:	693b      	ldr	r3, [r7, #16]
 8015432:	899b      	ldrh	r3, [r3, #12]
 8015434:	461a      	mov	r2, r3
 8015436:	f7fc f8d9 	bl	80115ec <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015440:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015444:	b2da      	uxtb	r2, r3
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801544c:	693b      	ldr	r3, [r7, #16]
 801544e:	899b      	ldrh	r3, [r3, #12]
 8015450:	461a      	mov	r2, r3
 8015452:	6a3b      	ldr	r3, [r7, #32]
 8015454:	fb02 f303 	mul.w	r3, r2, r3
 8015458:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801545a:	e058      	b.n	801550e <f_write+0x330>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015460:	697a      	ldr	r2, [r7, #20]
 8015462:	429a      	cmp	r2, r3
 8015464:	d01b      	beq.n	801549e <f_write+0x2c0>
				fp->fptr < fp->obj.objsize &&
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8015472:	42a2      	cmp	r2, r4
 8015474:	bf08      	it	eq
 8015476:	4299      	cmpeq	r1, r3
 8015478:	d211      	bcs.n	801549e <f_write+0x2c0>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801547a:	693b      	ldr	r3, [r7, #16]
 801547c:	7858      	ldrb	r0, [r3, #1]
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8015484:	2301      	movs	r3, #1
 8015486:	697a      	ldr	r2, [r7, #20]
 8015488:	f7fb fe8c 	bl	80111a4 <disk_read>
 801548c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801548e:	2b00      	cmp	r3, #0
 8015490:	d005      	beq.n	801549e <f_write+0x2c0>
					ABORT(fs, FR_DISK_ERR);
 8015492:	68fb      	ldr	r3, [r7, #12]
 8015494:	2201      	movs	r2, #1
 8015496:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801549a:	2301      	movs	r3, #1
 801549c:	e071      	b.n	8015582 <f_write+0x3a4>
			}
#endif
			fp->sect = sect;
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	697a      	ldr	r2, [r7, #20]
 80154a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80154a4:	693b      	ldr	r3, [r7, #16]
 80154a6:	899b      	ldrh	r3, [r3, #12]
 80154a8:	4618      	mov	r0, r3
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80154b0:	693a      	ldr	r2, [r7, #16]
 80154b2:	8992      	ldrh	r2, [r2, #12]
 80154b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80154b8:	fb02 f201 	mul.w	r2, r2, r1
 80154bc:	1a9b      	subs	r3, r3, r2
 80154be:	1ac3      	subs	r3, r0, r3
 80154c0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80154c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	429a      	cmp	r2, r3
 80154c8:	d901      	bls.n	80154ce <f_write+0x2f0>
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80154ce:	68fb      	ldr	r3, [r7, #12]
 80154d0:	f103 0554 	add.w	r5, r3, #84	; 0x54
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80154da:	693b      	ldr	r3, [r7, #16]
 80154dc:	899b      	ldrh	r3, [r3, #12]
 80154de:	b29b      	uxth	r3, r3
 80154e0:	f04f 0400 	mov.w	r4, #0
 80154e4:	461a      	mov	r2, r3
 80154e6:	4623      	mov	r3, r4
 80154e8:	f7ea fef6 	bl	80002d8 <__aeabi_uldivmod>
 80154ec:	461c      	mov	r4, r3
 80154ee:	4613      	mov	r3, r2
 80154f0:	442b      	add	r3, r5
 80154f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80154f4:	69f9      	ldr	r1, [r7, #28]
 80154f6:	4618      	mov	r0, r3
 80154f8:	f7fc f878 	bl	80115ec <mem_cpy>
		fp->flag |= FA_DIRTY;
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015502:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015506:	b2da      	uxtb	r2, r3
 8015508:	68fb      	ldr	r3, [r7, #12]
 801550a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801550e:	69fa      	ldr	r2, [r7, #28]
 8015510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015512:	4413      	add	r3, r2
 8015514:	61fb      	str	r3, [r7, #28]
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 801551c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801551e:	461d      	mov	r5, r3
 8015520:	f04f 0600 	mov.w	r6, #0
 8015524:	186b      	adds	r3, r5, r1
 8015526:	eb46 0402 	adc.w	r4, r6, r2
 801552a:	68fa      	ldr	r2, [r7, #12]
 801552c:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 8015530:	68fb      	ldr	r3, [r7, #12]
 8015532:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8015536:	68fa      	ldr	r2, [r7, #12]
 8015538:	e9d2 120e 	ldrd	r1, r2, [r2, #56]	; 0x38
 801553c:	4294      	cmp	r4, r2
 801553e:	bf08      	it	eq
 8015540:	428b      	cmpeq	r3, r1
 8015542:	d201      	bcs.n	8015548 <f_write+0x36a>
 8015544:	460b      	mov	r3, r1
 8015546:	4614      	mov	r4, r2
 8015548:	68fa      	ldr	r2, [r7, #12]
 801554a:	e9c2 3404 	strd	r3, r4, [r2, #16]
 801554e:	683b      	ldr	r3, [r7, #0]
 8015550:	681a      	ldr	r2, [r3, #0]
 8015552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015554:	441a      	add	r2, r3
 8015556:	683b      	ldr	r3, [r7, #0]
 8015558:	601a      	str	r2, [r3, #0]
 801555a:	687a      	ldr	r2, [r7, #4]
 801555c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801555e:	1ad3      	subs	r3, r2, r3
 8015560:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	2b00      	cmp	r3, #0
 8015566:	f47f ae80 	bne.w	801526a <f_write+0x8c>
 801556a:	e000      	b.n	801556e <f_write+0x390>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801556c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015578:	b2da      	uxtb	r2, r3
 801557a:	68fb      	ldr	r3, [r7, #12]
 801557c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 8015580:	2300      	movs	r3, #0
}
 8015582:	4618      	mov	r0, r3
 8015584:	3734      	adds	r7, #52	; 0x34
 8015586:	46bd      	mov	sp, r7
 8015588:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801558a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801558a:	b590      	push	{r4, r7, lr}
 801558c:	b09d      	sub	sp, #116	; 0x74
 801558e:	af00      	add	r7, sp, #0
 8015590:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8015598:	4611      	mov	r1, r2
 801559a:	4618      	mov	r0, r3
 801559c:	f7ff f93e 	bl	801481c <validate>
 80155a0:	4603      	mov	r3, r0
 80155a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (res == FR_OK) {
 80155a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	f040 811d 	bne.w	80157ea <f_sync+0x260>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80155b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	f000 8115 	beq.w	80157ea <f_sync+0x260>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80155c6:	b25b      	sxtb	r3, r3
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	da17      	bge.n	80155fc <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80155cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80155ce:	7858      	ldrb	r0, [r3, #1]
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80155da:	2301      	movs	r3, #1
 80155dc:	f7fb fe02 	bl	80111e4 <disk_write>
 80155e0:	4603      	mov	r3, r0
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d001      	beq.n	80155ea <f_sync+0x60>
 80155e6:	2301      	movs	r3, #1
 80155e8:	e101      	b.n	80157ee <f_sync+0x264>
				fp->flag &= (BYTE)~FA_DIRTY;
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80155f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80155f4:	b2da      	uxtb	r2, r3
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80155fc:	f7f9 f928 	bl	800e850 <get_fattime>
 8015600:	66b8      	str	r0, [r7, #104]	; 0x68
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8015602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015604:	781b      	ldrb	r3, [r3, #0]
 8015606:	2b04      	cmp	r3, #4
 8015608:	f040 80a4 	bne.w	8015754 <f_sync+0x1ca>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	4618      	mov	r0, r3
 8015610:	f7fc fe4a 	bl	80122a8 <fill_first_frag>
 8015614:	4603      	mov	r3, r0
 8015616:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 801561a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801561e:	2b00      	cmp	r3, #0
 8015620:	d10a      	bne.n	8015638 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8015622:	6878      	ldr	r0, [r7, #4]
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015628:	f04f 32ff 	mov.w	r2, #4294967295
 801562c:	4619      	mov	r1, r3
 801562e:	f7fc fe6a 	bl	8012306 <fill_last_frag>
 8015632:	4603      	mov	r3, r0
 8015634:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				}
				if (res == FR_OK) {
 8015638:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801563c:	2b00      	cmp	r3, #0
 801563e:	f040 80d4 	bne.w	80157ea <f_sync+0x260>
					INIT_NAMBUF(fs);
 8015642:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8015646:	f000 ffc7 	bl	80165d8 <ff_memalloc>
 801564a:	6638      	str	r0, [r7, #96]	; 0x60
 801564c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801564e:	2b00      	cmp	r3, #0
 8015650:	d101      	bne.n	8015656 <f_sync+0xcc>
 8015652:	2311      	movs	r3, #17
 8015654:	e0cb      	b.n	80157ee <f_sync+0x264>
 8015656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015658:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801565a:	611a      	str	r2, [r3, #16]
 801565c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801565e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015660:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8015664:	615a      	str	r2, [r3, #20]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 8015666:	687a      	ldr	r2, [r7, #4]
 8015668:	f107 0308 	add.w	r3, r7, #8
 801566c:	4611      	mov	r1, r2
 801566e:	4618      	mov	r0, r3
 8015670:	f7fd fd9e 	bl	80131b0 <load_obj_dir>
 8015674:	4603      	mov	r3, r0
 8015676:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					if (res == FR_OK) {
 801567a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801567e:	2b00      	cmp	r3, #0
 8015680:	d164      	bne.n	801574c <f_sync+0x1c2>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 8015682:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015684:	695b      	ldr	r3, [r3, #20]
 8015686:	3304      	adds	r3, #4
 8015688:	781a      	ldrb	r2, [r3, #0]
 801568a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801568c:	695b      	ldr	r3, [r3, #20]
 801568e:	3304      	adds	r3, #4
 8015690:	f042 0220 	orr.w	r2, r2, #32
 8015694:	b2d2      	uxtb	r2, r2
 8015696:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	79da      	ldrb	r2, [r3, #7]
 801569c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801569e:	695b      	ldr	r3, [r3, #20]
 80156a0:	3321      	adds	r3, #33	; 0x21
 80156a2:	f042 0201 	orr.w	r2, r2, #1
 80156a6:	b2d2      	uxtb	r2, r2
 80156a8:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 80156aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80156ac:	695b      	ldr	r3, [r3, #20]
 80156ae:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	689b      	ldr	r3, [r3, #8]
 80156b6:	4619      	mov	r1, r3
 80156b8:	4610      	mov	r0, r2
 80156ba:	f7fb fee4 	bl	8011486 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 80156be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80156c0:	695b      	ldr	r3, [r3, #20]
 80156c2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80156cc:	461a      	mov	r2, r3
 80156ce:	4623      	mov	r3, r4
 80156d0:	4608      	mov	r0, r1
 80156d2:	f7fb ff04 	bl	80114de <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 80156d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80156d8:	695b      	ldr	r3, [r3, #20]
 80156da:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80156e4:	461a      	mov	r2, r3
 80156e6:	4623      	mov	r3, r4
 80156e8:	4608      	mov	r0, r1
 80156ea:	f7fb fef8 	bl	80114de <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 80156ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80156f0:	695b      	ldr	r3, [r3, #20]
 80156f2:	330c      	adds	r3, #12
 80156f4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80156f6:	4618      	mov	r0, r3
 80156f8:	f7fb fec5 	bl	8011486 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 80156fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80156fe:	695b      	ldr	r3, [r3, #20]
 8015700:	3315      	adds	r3, #21
 8015702:	2200      	movs	r2, #0
 8015704:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8015706:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015708:	695b      	ldr	r3, [r3, #20]
 801570a:	3310      	adds	r3, #16
 801570c:	2100      	movs	r1, #0
 801570e:	4618      	mov	r0, r3
 8015710:	f7fb feb9 	bl	8011486 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 8015714:	f107 0308 	add.w	r3, r7, #8
 8015718:	4618      	mov	r0, r3
 801571a:	f7fd fd86 	bl	801322a <store_xdir>
 801571e:	4603      	mov	r3, r0
 8015720:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						if (res == FR_OK) {
 8015724:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8015728:	2b00      	cmp	r3, #0
 801572a:	d10f      	bne.n	801574c <f_sync+0x1c2>
							res = sync_fs(fs);
 801572c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801572e:	4618      	mov	r0, r3
 8015730:	f7fc f9b8 	bl	8011aa4 <sync_fs>
 8015734:	4603      	mov	r3, r0
 8015736:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015740:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015744:	b2da      	uxtb	r2, r3
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
						}
					}
					FREE_NAMBUF();
 801574c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801574e:	f000 ff4f 	bl	80165f0 <ff_memfree>
 8015752:	e04a      	b.n	80157ea <f_sync+0x260>
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8015754:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801575a:	4619      	mov	r1, r3
 801575c:	4610      	mov	r0, r2
 801575e:	f7fc f973 	bl	8011a48 <move_window>
 8015762:	4603      	mov	r3, r0
 8015764:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 8015768:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801576c:	2b00      	cmp	r3, #0
 801576e:	d13c      	bne.n	80157ea <f_sync+0x260>
					dir = fp->dir_ptr;
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015774:	667b      	str	r3, [r7, #100]	; 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8015776:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015778:	330b      	adds	r3, #11
 801577a:	781a      	ldrb	r2, [r3, #0]
 801577c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801577e:	330b      	adds	r3, #11
 8015780:	f042 0220 	orr.w	r2, r2, #32
 8015784:	b2d2      	uxtb	r2, r2
 8015786:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	6818      	ldr	r0, [r3, #0]
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	689b      	ldr	r3, [r3, #8]
 8015790:	461a      	mov	r2, r3
 8015792:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8015794:	f7fd f9d9 	bl	8012b4a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8015798:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801579a:	f103 021c 	add.w	r2, r3, #28
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80157a4:	4619      	mov	r1, r3
 80157a6:	4610      	mov	r0, r2
 80157a8:	f7fb fe6d 	bl	8011486 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80157ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80157ae:	3316      	adds	r3, #22
 80157b0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80157b2:	4618      	mov	r0, r3
 80157b4:	f7fb fe67 	bl	8011486 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80157b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80157ba:	3312      	adds	r3, #18
 80157bc:	2100      	movs	r1, #0
 80157be:	4618      	mov	r0, r3
 80157c0:	f7fb fe46 	bl	8011450 <st_word>
					fs->wflag = 1;
 80157c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80157c6:	2201      	movs	r2, #1
 80157c8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80157ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80157cc:	4618      	mov	r0, r3
 80157ce:	f7fc f969 	bl	8011aa4 <sync_fs>
 80157d2:	4603      	mov	r3, r0
 80157d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80157de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80157e2:	b2da      	uxtb	r2, r3
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80157ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80157ee:	4618      	mov	r0, r3
 80157f0:	3774      	adds	r7, #116	; 0x74
 80157f2:	46bd      	mov	sp, r7
 80157f4:	bd90      	pop	{r4, r7, pc}

080157f6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80157f6:	b580      	push	{r7, lr}
 80157f8:	b084      	sub	sp, #16
 80157fa:	af00      	add	r7, sp, #0
 80157fc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80157fe:	6878      	ldr	r0, [r7, #4]
 8015800:	f7ff fec3 	bl	801558a <f_sync>
 8015804:	4603      	mov	r3, r0
 8015806:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8015808:	7bfb      	ldrb	r3, [r7, #15]
 801580a:	2b00      	cmp	r3, #0
 801580c:	d118      	bne.n	8015840 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	f107 0208 	add.w	r2, r7, #8
 8015814:	4611      	mov	r1, r2
 8015816:	4618      	mov	r0, r3
 8015818:	f7ff f800 	bl	801481c <validate>
 801581c:	4603      	mov	r3, r0
 801581e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8015820:	7bfb      	ldrb	r3, [r7, #15]
 8015822:	2b00      	cmp	r3, #0
 8015824:	d10c      	bne.n	8015840 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801582a:	4618      	mov	r0, r3
 801582c:	f7fc f868 	bl	8011900 <dec_lock>
 8015830:	4603      	mov	r3, r0
 8015832:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8015834:	7bfb      	ldrb	r3, [r7, #15]
 8015836:	2b00      	cmp	r3, #0
 8015838:	d102      	bne.n	8015840 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	2200      	movs	r2, #0
 801583e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8015840:	7bfb      	ldrb	r3, [r7, #15]
}
 8015842:	4618      	mov	r0, r3
 8015844:	3710      	adds	r7, #16
 8015846:	46bd      	mov	sp, r7
 8015848:	bd80      	pop	{r7, pc}

0801584a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 801584a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801584c:	b095      	sub	sp, #84	; 0x54
 801584e:	af00      	add	r7, sp, #0
 8015850:	60f8      	str	r0, [r7, #12]
 8015852:	e9c7 2300 	strd	r2, r3, [r7]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8015856:	68fb      	ldr	r3, [r7, #12]
 8015858:	f107 0210 	add.w	r2, r7, #16
 801585c:	4611      	mov	r1, r2
 801585e:	4618      	mov	r0, r3
 8015860:	f7fe ffdc 	bl	801481c <validate>
 8015864:	4603      	mov	r3, r0
 8015866:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801586a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801586e:	2b00      	cmp	r3, #0
 8015870:	d104      	bne.n	801587c <f_lseek+0x32>
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015878:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
 801587c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8015880:	2b00      	cmp	r3, #0
 8015882:	d10e      	bne.n	80158a2 <f_lseek+0x58>
 8015884:	693b      	ldr	r3, [r7, #16]
 8015886:	781b      	ldrb	r3, [r3, #0]
 8015888:	2b04      	cmp	r3, #4
 801588a:	d10a      	bne.n	80158a2 <f_lseek+0x58>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 801588c:	68f8      	ldr	r0, [r7, #12]
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015892:	f04f 32ff 	mov.w	r2, #4294967295
 8015896:	4619      	mov	r1, r3
 8015898:	f7fc fd35 	bl	8012306 <fill_last_frag>
 801589c:	4603      	mov	r3, r0
 801589e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80158a2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d002      	beq.n	80158b0 <f_lseek+0x66>
 80158aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80158ae:	e2d5      	b.n	8015e5c <f_lseek+0x612>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	f000 8104 	beq.w	8015ac2 <f_lseek+0x278>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80158ba:	e9d7 3400 	ldrd	r3, r4, [r7]
 80158be:	f1b4 3fff 	cmp.w	r4, #4294967295
 80158c2:	bf08      	it	eq
 80158c4:	f1b3 3fff 	cmpeq.w	r3, #4294967295
 80158c8:	d15c      	bne.n	8015984 <f_lseek+0x13a>
			tbl = fp->cltbl;
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80158ce:	637b      	str	r3, [r7, #52]	; 0x34
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80158d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80158d2:	1d1a      	adds	r2, r3, #4
 80158d4:	637a      	str	r2, [r7, #52]	; 0x34
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	61fb      	str	r3, [r7, #28]
 80158da:	2302      	movs	r3, #2
 80158dc:	63bb      	str	r3, [r7, #56]	; 0x38
			cl = fp->obj.sclust;		/* Origin of the chain */
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	689b      	ldr	r3, [r3, #8]
 80158e2:	643b      	str	r3, [r7, #64]	; 0x40
			if (cl) {
 80158e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d03c      	beq.n	8015964 <f_lseek+0x11a>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80158ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80158ec:	61bb      	str	r3, [r7, #24]
 80158ee:	2300      	movs	r3, #0
 80158f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80158f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158f4:	3302      	adds	r3, #2
 80158f6:	63bb      	str	r3, [r7, #56]	; 0x38
					do {
						pcl = cl; ncl++;
 80158f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80158fa:	617b      	str	r3, [r7, #20]
 80158fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80158fe:	3301      	adds	r3, #1
 8015900:	63fb      	str	r3, [r7, #60]	; 0x3c
						cl = get_fat(&fp->obj, cl);
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015906:	4618      	mov	r0, r3
 8015908:	f7fc f95c 	bl	8011bc4 <get_fat>
 801590c:	6438      	str	r0, [r7, #64]	; 0x40
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801590e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015910:	2b01      	cmp	r3, #1
 8015912:	d805      	bhi.n	8015920 <f_lseek+0xd6>
 8015914:	68fb      	ldr	r3, [r7, #12]
 8015916:	2202      	movs	r2, #2
 8015918:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801591c:	2302      	movs	r3, #2
 801591e:	e29d      	b.n	8015e5c <f_lseek+0x612>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015926:	d105      	bne.n	8015934 <f_lseek+0xea>
 8015928:	68fb      	ldr	r3, [r7, #12]
 801592a:	2201      	movs	r2, #1
 801592c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8015930:	2301      	movs	r3, #1
 8015932:	e293      	b.n	8015e5c <f_lseek+0x612>
					} while (cl == pcl + 1);
 8015934:	697b      	ldr	r3, [r7, #20]
 8015936:	3301      	adds	r3, #1
 8015938:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801593a:	429a      	cmp	r2, r3
 801593c:	d0dc      	beq.n	80158f8 <f_lseek+0xae>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801593e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015940:	69fb      	ldr	r3, [r7, #28]
 8015942:	429a      	cmp	r2, r3
 8015944:	d809      	bhi.n	801595a <f_lseek+0x110>
						*tbl++ = ncl; *tbl++ = tcl;
 8015946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015948:	1d1a      	adds	r2, r3, #4
 801594a:	637a      	str	r2, [r7, #52]	; 0x34
 801594c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801594e:	601a      	str	r2, [r3, #0]
 8015950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015952:	1d1a      	adds	r2, r3, #4
 8015954:	637a      	str	r2, [r7, #52]	; 0x34
 8015956:	69ba      	ldr	r2, [r7, #24]
 8015958:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801595a:	693b      	ldr	r3, [r7, #16]
 801595c:	6a1b      	ldr	r3, [r3, #32]
 801595e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015960:	429a      	cmp	r2, r3
 8015962:	d3c2      	bcc.n	80158ea <f_lseek+0xa0>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8015964:	68fb      	ldr	r3, [r7, #12]
 8015966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015968:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801596a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801596c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801596e:	69fb      	ldr	r3, [r7, #28]
 8015970:	429a      	cmp	r2, r3
 8015972:	d803      	bhi.n	801597c <f_lseek+0x132>
				*tbl = 0;		/* Terminate table */
 8015974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015976:	2200      	movs	r2, #0
 8015978:	601a      	str	r2, [r3, #0]
 801597a:	e26d      	b.n	8015e58 <f_lseek+0x60e>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801597c:	2311      	movs	r3, #17
 801597e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8015982:	e269      	b.n	8015e58 <f_lseek+0x60e>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 801598a:	e9d7 3400 	ldrd	r3, r4, [r7]
 801598e:	42a2      	cmp	r2, r4
 8015990:	bf08      	it	eq
 8015992:	4299      	cmpeq	r1, r3
 8015994:	d204      	bcs.n	80159a0 <f_lseek+0x156>
 8015996:	68fb      	ldr	r3, [r7, #12]
 8015998:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 801599c:	e9c7 3400 	strd	r3, r4, [r7]
			fp->fptr = ofs;				/* Set file pointer */
 80159a0:	68fa      	ldr	r2, [r7, #12]
 80159a2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80159a6:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
			if (ofs) {
 80159aa:	e9d7 3400 	ldrd	r3, r4, [r7]
 80159ae:	4323      	orrs	r3, r4
 80159b0:	f000 8252 	beq.w	8015e58 <f_lseek+0x60e>
				fp->clust = clmt_clust(fp, ofs - 1);
 80159b4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80159b8:	f113 31ff 	adds.w	r1, r3, #4294967295
 80159bc:	f144 32ff 	adc.w	r2, r4, #4294967295
 80159c0:	4613      	mov	r3, r2
 80159c2:	460a      	mov	r2, r1
 80159c4:	68f8      	ldr	r0, [r7, #12]
 80159c6:	f7fc fe84 	bl	80126d2 <clmt_clust>
 80159ca:	4602      	mov	r2, r0
 80159cc:	68fb      	ldr	r3, [r7, #12]
 80159ce:	641a      	str	r2, [r3, #64]	; 0x40
				dsc = clust2sect(fs, fp->clust);
 80159d0:	693a      	ldr	r2, [r7, #16]
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80159d6:	4619      	mov	r1, r3
 80159d8:	4610      	mov	r0, r2
 80159da:	f7fc f8d3 	bl	8011b84 <clust2sect>
 80159de:	6238      	str	r0, [r7, #32]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80159e0:	6a3b      	ldr	r3, [r7, #32]
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d105      	bne.n	80159f2 <f_lseek+0x1a8>
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	2202      	movs	r2, #2
 80159ea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80159ee:	2302      	movs	r3, #2
 80159f0:	e234      	b.n	8015e5c <f_lseek+0x612>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80159f2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80159f6:	f113 30ff 	adds.w	r0, r3, #4294967295
 80159fa:	f144 31ff 	adc.w	r1, r4, #4294967295
 80159fe:	693b      	ldr	r3, [r7, #16]
 8015a00:	899b      	ldrh	r3, [r3, #12]
 8015a02:	b29b      	uxth	r3, r3
 8015a04:	f04f 0400 	mov.w	r4, #0
 8015a08:	461a      	mov	r2, r3
 8015a0a:	4623      	mov	r3, r4
 8015a0c:	f7ea fc64 	bl	80002d8 <__aeabi_uldivmod>
 8015a10:	4603      	mov	r3, r0
 8015a12:	460c      	mov	r4, r1
 8015a14:	461a      	mov	r2, r3
 8015a16:	693b      	ldr	r3, [r7, #16]
 8015a18:	895b      	ldrh	r3, [r3, #10]
 8015a1a:	3b01      	subs	r3, #1
 8015a1c:	4013      	ands	r3, r2
 8015a1e:	6a3a      	ldr	r2, [r7, #32]
 8015a20:	4413      	add	r3, r2
 8015a22:	623b      	str	r3, [r7, #32]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8015a2a:	693b      	ldr	r3, [r7, #16]
 8015a2c:	899b      	ldrh	r3, [r3, #12]
 8015a2e:	b29b      	uxth	r3, r3
 8015a30:	f04f 0400 	mov.w	r4, #0
 8015a34:	461a      	mov	r2, r3
 8015a36:	4623      	mov	r3, r4
 8015a38:	f7ea fc4e 	bl	80002d8 <__aeabi_uldivmod>
 8015a3c:	461c      	mov	r4, r3
 8015a3e:	4613      	mov	r3, r2
 8015a40:	4323      	orrs	r3, r4
 8015a42:	f000 8209 	beq.w	8015e58 <f_lseek+0x60e>
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015a4a:	6a3a      	ldr	r2, [r7, #32]
 8015a4c:	429a      	cmp	r2, r3
 8015a4e:	f000 8203 	beq.w	8015e58 <f_lseek+0x60e>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8015a52:	68fb      	ldr	r3, [r7, #12]
 8015a54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015a58:	b25b      	sxtb	r3, r3
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	da1b      	bge.n	8015a96 <f_lseek+0x24c>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015a5e:	693b      	ldr	r3, [r7, #16]
 8015a60:	7858      	ldrb	r0, [r3, #1]
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015a6c:	2301      	movs	r3, #1
 8015a6e:	f7fb fbb9 	bl	80111e4 <disk_write>
 8015a72:	4603      	mov	r3, r0
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d005      	beq.n	8015a84 <f_lseek+0x23a>
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	2201      	movs	r2, #1
 8015a7c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8015a80:	2301      	movs	r3, #1
 8015a82:	e1eb      	b.n	8015e5c <f_lseek+0x612>
						fp->flag &= (BYTE)~FA_DIRTY;
 8015a84:	68fb      	ldr	r3, [r7, #12]
 8015a86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015a8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015a8e:	b2da      	uxtb	r2, r3
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8015a96:	693b      	ldr	r3, [r7, #16]
 8015a98:	7858      	ldrb	r0, [r3, #1]
 8015a9a:	68fb      	ldr	r3, [r7, #12]
 8015a9c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8015aa0:	2301      	movs	r3, #1
 8015aa2:	6a3a      	ldr	r2, [r7, #32]
 8015aa4:	f7fb fb7e 	bl	80111a4 <disk_read>
 8015aa8:	4603      	mov	r3, r0
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d005      	beq.n	8015aba <f_lseek+0x270>
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	2201      	movs	r2, #1
 8015ab2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8015ab6:	2301      	movs	r3, #1
 8015ab8:	e1d0      	b.n	8015e5c <f_lseek+0x612>
#endif
					fp->sect = dsc;
 8015aba:	68fb      	ldr	r3, [r7, #12]
 8015abc:	6a3a      	ldr	r2, [r7, #32]
 8015abe:	645a      	str	r2, [r3, #68]	; 0x44
 8015ac0:	e1ca      	b.n	8015e58 <f_lseek+0x60e>
#endif

	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
 8015ac2:	693b      	ldr	r3, [r7, #16]
 8015ac4:	781b      	ldrb	r3, [r3, #0]
 8015ac6:	2b04      	cmp	r3, #4
 8015ac8:	d00b      	beq.n	8015ae2 <f_lseek+0x298>
 8015aca:	e9d7 3400 	ldrd	r3, r4, [r7]
 8015ace:	2c01      	cmp	r4, #1
 8015ad0:	bf08      	it	eq
 8015ad2:	2b00      	cmpeq	r3, #0
 8015ad4:	d305      	bcc.n	8015ae2 <f_lseek+0x298>
 8015ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8015ada:	f04f 0400 	mov.w	r4, #0
 8015ade:	e9c7 3400 	strd	r3, r4, [r7]
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8015ae2:	68fb      	ldr	r3, [r7, #12]
 8015ae4:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8015ae8:	e9d7 3400 	ldrd	r3, r4, [r7]
 8015aec:	42a2      	cmp	r2, r4
 8015aee:	bf08      	it	eq
 8015af0:	4299      	cmpeq	r1, r3
 8015af2:	d20b      	bcs.n	8015b0c <f_lseek+0x2c2>
 8015af4:	68fb      	ldr	r3, [r7, #12]
 8015af6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015afa:	f003 0302 	and.w	r3, r3, #2
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d104      	bne.n	8015b0c <f_lseek+0x2c2>
			ofs = fp->obj.objsize;
 8015b02:	68fb      	ldr	r3, [r7, #12]
 8015b04:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8015b08:	e9c7 3400 	strd	r3, r4, [r7]
		}
		ifptr = fp->fptr;
 8015b0c:	68fb      	ldr	r3, [r7, #12]
 8015b0e:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8015b12:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		fp->fptr = nsect = 0;
 8015b16:	2300      	movs	r3, #0
 8015b18:	647b      	str	r3, [r7, #68]	; 0x44
 8015b1a:	68fa      	ldr	r2, [r7, #12]
 8015b1c:	f04f 0300 	mov.w	r3, #0
 8015b20:	f04f 0400 	mov.w	r4, #0
 8015b24:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		if (ofs) {
 8015b28:	e9d7 3400 	ldrd	r3, r4, [r7]
 8015b2c:	4323      	orrs	r3, r4
 8015b2e:	f000 812e 	beq.w	8015d8e <f_lseek+0x544>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8015b32:	693b      	ldr	r3, [r7, #16]
 8015b34:	895b      	ldrh	r3, [r3, #10]
 8015b36:	461a      	mov	r2, r3
 8015b38:	693b      	ldr	r3, [r7, #16]
 8015b3a:	899b      	ldrh	r3, [r3, #12]
 8015b3c:	fb03 f302 	mul.w	r3, r3, r2
 8015b40:	627b      	str	r3, [r7, #36]	; 0x24
			if (ifptr > 0 &&
 8015b42:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8015b46:	4323      	orrs	r3, r4
 8015b48:	d048      	beq.n	8015bdc <f_lseek+0x392>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8015b4a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8015b4e:	f113 30ff 	adds.w	r0, r3, #4294967295
 8015b52:	f144 31ff 	adc.w	r1, r4, #4294967295
 8015b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b58:	f04f 0400 	mov.w	r4, #0
 8015b5c:	461a      	mov	r2, r3
 8015b5e:	4623      	mov	r3, r4
 8015b60:	f7ea fbba 	bl	80002d8 <__aeabi_uldivmod>
 8015b64:	4603      	mov	r3, r0
 8015b66:	460c      	mov	r4, r1
 8015b68:	461d      	mov	r5, r3
 8015b6a:	4626      	mov	r6, r4
 8015b6c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8015b70:	f113 30ff 	adds.w	r0, r3, #4294967295
 8015b74:	f144 31ff 	adc.w	r1, r4, #4294967295
 8015b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b7a:	f04f 0400 	mov.w	r4, #0
 8015b7e:	461a      	mov	r2, r3
 8015b80:	4623      	mov	r3, r4
 8015b82:	f7ea fba9 	bl	80002d8 <__aeabi_uldivmod>
 8015b86:	4603      	mov	r3, r0
 8015b88:	460c      	mov	r4, r1
			if (ifptr > 0 &&
 8015b8a:	42a6      	cmp	r6, r4
 8015b8c:	bf08      	it	eq
 8015b8e:	429d      	cmpeq	r5, r3
 8015b90:	d324      	bcc.n	8015bdc <f_lseek+0x392>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8015b92:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8015b96:	f113 31ff 	adds.w	r1, r3, #4294967295
 8015b9a:	f144 32ff 	adc.w	r2, r4, #4294967295
 8015b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ba0:	3b01      	subs	r3, #1
 8015ba2:	f04f 0400 	mov.w	r4, #0
 8015ba6:	ea6f 0503 	mvn.w	r5, r3
 8015baa:	ea6f 0604 	mvn.w	r6, r4
 8015bae:	ea05 0301 	and.w	r3, r5, r1
 8015bb2:	ea06 0402 	and.w	r4, r6, r2
 8015bb6:	68fa      	ldr	r2, [r7, #12]
 8015bb8:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
				ofs -= fp->fptr;
 8015bbc:	68fb      	ldr	r3, [r7, #12]
 8015bbe:	e9d3 560e 	ldrd	r5, r6, [r3, #56]	; 0x38
 8015bc2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8015bc6:	460b      	mov	r3, r1
 8015bc8:	4614      	mov	r4, r2
 8015bca:	1b5b      	subs	r3, r3, r5
 8015bcc:	eb64 0406 	sbc.w	r4, r4, r6
 8015bd0:	e9c7 3400 	strd	r3, r4, [r7]
				clst = fp->clust;
 8015bd4:	68fb      	ldr	r3, [r7, #12]
 8015bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015bd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8015bda:	e024      	b.n	8015c26 <f_lseek+0x3dc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	689b      	ldr	r3, [r3, #8]
 8015be0:	64bb      	str	r3, [r7, #72]	; 0x48
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8015be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d11b      	bne.n	8015c20 <f_lseek+0x3d6>
					clst = create_chain(&fp->obj, 0);
 8015be8:	68fb      	ldr	r3, [r7, #12]
 8015bea:	2100      	movs	r1, #0
 8015bec:	4618      	mov	r0, r3
 8015bee:	f7fc fc6f 	bl	80124d0 <create_chain>
 8015bf2:	64b8      	str	r0, [r7, #72]	; 0x48
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8015bf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015bf6:	2b01      	cmp	r3, #1
 8015bf8:	d105      	bne.n	8015c06 <f_lseek+0x3bc>
 8015bfa:	68fb      	ldr	r3, [r7, #12]
 8015bfc:	2202      	movs	r2, #2
 8015bfe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8015c02:	2302      	movs	r3, #2
 8015c04:	e12a      	b.n	8015e5c <f_lseek+0x612>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c0c:	d105      	bne.n	8015c1a <f_lseek+0x3d0>
 8015c0e:	68fb      	ldr	r3, [r7, #12]
 8015c10:	2201      	movs	r2, #1
 8015c12:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8015c16:	2301      	movs	r3, #1
 8015c18:	e120      	b.n	8015e5c <f_lseek+0x612>
					fp->obj.sclust = clst;
 8015c1a:	68fb      	ldr	r3, [r7, #12]
 8015c1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015c1e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8015c20:	68fb      	ldr	r3, [r7, #12]
 8015c22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015c24:	641a      	str	r2, [r3, #64]	; 0x40
			}
			if (clst != 0) {
 8015c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	f000 80b0 	beq.w	8015d8e <f_lseek+0x544>
				while (ofs > bcs) {						/* Cluster following loop */
 8015c2e:	e06a      	b.n	8015d06 <f_lseek+0x4bc>
					ofs -= bcs; fp->fptr += bcs;
 8015c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c32:	461d      	mov	r5, r3
 8015c34:	f04f 0600 	mov.w	r6, #0
 8015c38:	e9d7 1200 	ldrd	r1, r2, [r7]
 8015c3c:	460b      	mov	r3, r1
 8015c3e:	4614      	mov	r4, r2
 8015c40:	1b5b      	subs	r3, r3, r5
 8015c42:	eb64 0406 	sbc.w	r4, r4, r6
 8015c46:	e9c7 3400 	strd	r3, r4, [r7]
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8015c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c52:	461d      	mov	r5, r3
 8015c54:	f04f 0600 	mov.w	r6, #0
 8015c58:	186b      	adds	r3, r5, r1
 8015c5a:	eb46 0402 	adc.w	r4, r6, r2
 8015c5e:	68fa      	ldr	r2, [r7, #12]
 8015c60:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8015c64:	68fb      	ldr	r3, [r7, #12]
 8015c66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015c6a:	f003 0302 	and.w	r3, r3, #2
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d028      	beq.n	8015cc4 <f_lseek+0x47a>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8015c78:	68fa      	ldr	r2, [r7, #12]
 8015c7a:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 8015c7e:	42a2      	cmp	r2, r4
 8015c80:	bf08      	it	eq
 8015c82:	4299      	cmpeq	r1, r3
 8015c84:	d20e      	bcs.n	8015ca4 <f_lseek+0x45a>
							fp->obj.objsize = fp->fptr;
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8015c8c:	68fa      	ldr	r2, [r7, #12]
 8015c8e:	e9c2 3404 	strd	r3, r4, [r2, #16]
							fp->flag |= FA_MODIFIED;
 8015c92:	68fb      	ldr	r3, [r7, #12]
 8015c94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015c9c:	b2da      	uxtb	r2, r3
 8015c9e:	68fb      	ldr	r3, [r7, #12]
 8015ca0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8015ca8:	4618      	mov	r0, r3
 8015caa:	f7fc fc11 	bl	80124d0 <create_chain>
 8015cae:	64b8      	str	r0, [r7, #72]	; 0x48
						if (clst == 0) {				/* Clip file size in case of disk full */
 8015cb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d10c      	bne.n	8015cd0 <f_lseek+0x486>
							ofs = 0; break;
 8015cb6:	f04f 0300 	mov.w	r3, #0
 8015cba:	f04f 0400 	mov.w	r4, #0
 8015cbe:	e9c7 3400 	strd	r3, r4, [r7]
 8015cc2:	e02a      	b.n	8015d1a <f_lseek+0x4d0>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8015cc8:	4618      	mov	r0, r3
 8015cca:	f7fb ff7b 	bl	8011bc4 <get_fat>
 8015cce:	64b8      	str	r0, [r7, #72]	; 0x48
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015cd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015cd6:	d105      	bne.n	8015ce4 <f_lseek+0x49a>
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	2201      	movs	r2, #1
 8015cdc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8015ce0:	2301      	movs	r3, #1
 8015ce2:	e0bb      	b.n	8015e5c <f_lseek+0x612>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8015ce4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015ce6:	2b01      	cmp	r3, #1
 8015ce8:	d904      	bls.n	8015cf4 <f_lseek+0x4aa>
 8015cea:	693b      	ldr	r3, [r7, #16]
 8015cec:	6a1b      	ldr	r3, [r3, #32]
 8015cee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015cf0:	429a      	cmp	r2, r3
 8015cf2:	d305      	bcc.n	8015d00 <f_lseek+0x4b6>
 8015cf4:	68fb      	ldr	r3, [r7, #12]
 8015cf6:	2202      	movs	r2, #2
 8015cf8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8015cfc:	2302      	movs	r3, #2
 8015cfe:	e0ad      	b.n	8015e5c <f_lseek+0x612>
					fp->clust = clst;
 8015d00:	68fb      	ldr	r3, [r7, #12]
 8015d02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015d04:	641a      	str	r2, [r3, #64]	; 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 8015d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d08:	4619      	mov	r1, r3
 8015d0a:	f04f 0200 	mov.w	r2, #0
 8015d0e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8015d12:	42a2      	cmp	r2, r4
 8015d14:	bf08      	it	eq
 8015d16:	4299      	cmpeq	r1, r3
 8015d18:	d38a      	bcc.n	8015c30 <f_lseek+0x3e6>
				}
				fp->fptr += ofs;
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8015d20:	e9d7 3400 	ldrd	r3, r4, [r7]
 8015d24:	185d      	adds	r5, r3, r1
 8015d26:	eb44 0602 	adc.w	r6, r4, r2
 8015d2a:	68fa      	ldr	r2, [r7, #12]
 8015d2c:	e9c2 560e 	strd	r5, r6, [r2, #56]	; 0x38
				if (ofs % SS(fs)) {
 8015d30:	693b      	ldr	r3, [r7, #16]
 8015d32:	899b      	ldrh	r3, [r3, #12]
 8015d34:	b29b      	uxth	r3, r3
 8015d36:	f04f 0400 	mov.w	r4, #0
 8015d3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8015d3e:	461a      	mov	r2, r3
 8015d40:	4623      	mov	r3, r4
 8015d42:	f7ea fac9 	bl	80002d8 <__aeabi_uldivmod>
 8015d46:	461c      	mov	r4, r3
 8015d48:	4613      	mov	r3, r2
 8015d4a:	4323      	orrs	r3, r4
 8015d4c:	d01f      	beq.n	8015d8e <f_lseek+0x544>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8015d4e:	693b      	ldr	r3, [r7, #16]
 8015d50:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8015d52:	4618      	mov	r0, r3
 8015d54:	f7fb ff16 	bl	8011b84 <clust2sect>
 8015d58:	6478      	str	r0, [r7, #68]	; 0x44
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8015d5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d105      	bne.n	8015d6c <f_lseek+0x522>
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	2202      	movs	r2, #2
 8015d64:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8015d68:	2302      	movs	r3, #2
 8015d6a:	e077      	b.n	8015e5c <f_lseek+0x612>
					nsect += (DWORD)(ofs / SS(fs));
 8015d6c:	693b      	ldr	r3, [r7, #16]
 8015d6e:	899b      	ldrh	r3, [r3, #12]
 8015d70:	b29b      	uxth	r3, r3
 8015d72:	f04f 0400 	mov.w	r4, #0
 8015d76:	461a      	mov	r2, r3
 8015d78:	4623      	mov	r3, r4
 8015d7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8015d7e:	f7ea faab 	bl	80002d8 <__aeabi_uldivmod>
 8015d82:	4603      	mov	r3, r0
 8015d84:	460c      	mov	r4, r1
 8015d86:	461a      	mov	r2, r3
 8015d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015d8a:	4413      	add	r3, r2
 8015d8c:	647b      	str	r3, [r7, #68]	; 0x44
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8015d8e:	68fb      	ldr	r3, [r7, #12]
 8015d90:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8015d94:	68fa      	ldr	r2, [r7, #12]
 8015d96:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 8015d9a:	42a2      	cmp	r2, r4
 8015d9c:	bf08      	it	eq
 8015d9e:	4299      	cmpeq	r1, r3
 8015da0:	d20e      	bcs.n	8015dc0 <f_lseek+0x576>
			fp->obj.objsize = fp->fptr;
 8015da2:	68fb      	ldr	r3, [r7, #12]
 8015da4:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8015da8:	68fa      	ldr	r2, [r7, #12]
 8015daa:	e9c2 3404 	strd	r3, r4, [r2, #16]
			fp->flag |= FA_MODIFIED;
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015db8:	b2da      	uxtb	r2, r3
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8015dc0:	68fb      	ldr	r3, [r7, #12]
 8015dc2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8015dc6:	693b      	ldr	r3, [r7, #16]
 8015dc8:	899b      	ldrh	r3, [r3, #12]
 8015dca:	b29b      	uxth	r3, r3
 8015dcc:	f04f 0400 	mov.w	r4, #0
 8015dd0:	461a      	mov	r2, r3
 8015dd2:	4623      	mov	r3, r4
 8015dd4:	f7ea fa80 	bl	80002d8 <__aeabi_uldivmod>
 8015dd8:	461c      	mov	r4, r3
 8015dda:	4613      	mov	r3, r2
 8015ddc:	4323      	orrs	r3, r4
 8015dde:	d03b      	beq.n	8015e58 <f_lseek+0x60e>
 8015de0:	68fb      	ldr	r3, [r7, #12]
 8015de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015de4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015de6:	429a      	cmp	r2, r3
 8015de8:	d036      	beq.n	8015e58 <f_lseek+0x60e>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8015dea:	68fb      	ldr	r3, [r7, #12]
 8015dec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015df0:	b25b      	sxtb	r3, r3
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	da1b      	bge.n	8015e2e <f_lseek+0x5e4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015df6:	693b      	ldr	r3, [r7, #16]
 8015df8:	7858      	ldrb	r0, [r3, #1]
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8015e00:	68fb      	ldr	r3, [r7, #12]
 8015e02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015e04:	2301      	movs	r3, #1
 8015e06:	f7fb f9ed 	bl	80111e4 <disk_write>
 8015e0a:	4603      	mov	r3, r0
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d005      	beq.n	8015e1c <f_lseek+0x5d2>
 8015e10:	68fb      	ldr	r3, [r7, #12]
 8015e12:	2201      	movs	r2, #1
 8015e14:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8015e18:	2301      	movs	r3, #1
 8015e1a:	e01f      	b.n	8015e5c <f_lseek+0x612>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015e1c:	68fb      	ldr	r3, [r7, #12]
 8015e1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015e26:	b2da      	uxtb	r2, r3
 8015e28:	68fb      	ldr	r3, [r7, #12]
 8015e2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8015e2e:	693b      	ldr	r3, [r7, #16]
 8015e30:	7858      	ldrb	r0, [r3, #1]
 8015e32:	68fb      	ldr	r3, [r7, #12]
 8015e34:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8015e38:	2301      	movs	r3, #1
 8015e3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015e3c:	f7fb f9b2 	bl	80111a4 <disk_read>
 8015e40:	4603      	mov	r3, r0
 8015e42:	2b00      	cmp	r3, #0
 8015e44:	d005      	beq.n	8015e52 <f_lseek+0x608>
 8015e46:	68fb      	ldr	r3, [r7, #12]
 8015e48:	2201      	movs	r2, #1
 8015e4a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8015e4e:	2301      	movs	r3, #1
 8015e50:	e004      	b.n	8015e5c <f_lseek+0x612>
#endif
			fp->sect = nsect;
 8015e52:	68fb      	ldr	r3, [r7, #12]
 8015e54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015e56:	645a      	str	r2, [r3, #68]	; 0x44
		}
	}

	LEAVE_FF(fs, res);
 8015e58:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	3754      	adds	r7, #84	; 0x54
 8015e60:	46bd      	mov	sp, r7
 8015e62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015e64 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8015e64:	b580      	push	{r7, lr}
 8015e66:	b084      	sub	sp, #16
 8015e68:	af00      	add	r7, sp, #0
 8015e6a:	6078      	str	r0, [r7, #4]
 8015e6c:	460b      	mov	r3, r1
 8015e6e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8015e70:	78fb      	ldrb	r3, [r7, #3]
 8015e72:	2b0a      	cmp	r3, #10
 8015e74:	d103      	bne.n	8015e7e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8015e76:	210d      	movs	r1, #13
 8015e78:	6878      	ldr	r0, [r7, #4]
 8015e7a:	f7ff fff3 	bl	8015e64 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	685b      	ldr	r3, [r3, #4]
 8015e82:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8015e84:	68fb      	ldr	r3, [r7, #12]
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	db25      	blt.n	8015ed6 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8015e8a:	68fb      	ldr	r3, [r7, #12]
 8015e8c:	1c5a      	adds	r2, r3, #1
 8015e8e:	60fa      	str	r2, [r7, #12]
 8015e90:	687a      	ldr	r2, [r7, #4]
 8015e92:	4413      	add	r3, r2
 8015e94:	78fa      	ldrb	r2, [r7, #3]
 8015e96:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8015e98:	68fb      	ldr	r3, [r7, #12]
 8015e9a:	2b3c      	cmp	r3, #60	; 0x3c
 8015e9c:	dd12      	ble.n	8015ec4 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	6818      	ldr	r0, [r3, #0]
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	f103 010c 	add.w	r1, r3, #12
 8015ea8:	68fa      	ldr	r2, [r7, #12]
 8015eaa:	f107 0308 	add.w	r3, r7, #8
 8015eae:	f7ff f996 	bl	80151de <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8015eb2:	68ba      	ldr	r2, [r7, #8]
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	429a      	cmp	r2, r3
 8015eb8:	d101      	bne.n	8015ebe <putc_bfd+0x5a>
 8015eba:	2300      	movs	r3, #0
 8015ebc:	e001      	b.n	8015ec2 <putc_bfd+0x5e>
 8015ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8015ec2:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	68fa      	ldr	r2, [r7, #12]
 8015ec8:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	689b      	ldr	r3, [r3, #8]
 8015ece:	1c5a      	adds	r2, r3, #1
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	609a      	str	r2, [r3, #8]
 8015ed4:	e000      	b.n	8015ed8 <putc_bfd+0x74>
	if (i < 0) return;
 8015ed6:	bf00      	nop
}
 8015ed8:	3710      	adds	r7, #16
 8015eda:	46bd      	mov	sp, r7
 8015edc:	bd80      	pop	{r7, pc}

08015ede <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8015ede:	b580      	push	{r7, lr}
 8015ee0:	b084      	sub	sp, #16
 8015ee2:	af00      	add	r7, sp, #0
 8015ee4:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	685b      	ldr	r3, [r3, #4]
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	db17      	blt.n	8015f1e <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	6818      	ldr	r0, [r3, #0]
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	f103 010c 	add.w	r1, r3, #12
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	685b      	ldr	r3, [r3, #4]
 8015efc:	461a      	mov	r2, r3
 8015efe:	f107 030c 	add.w	r3, r7, #12
 8015f02:	f7ff f96c 	bl	80151de <f_write>
 8015f06:	4603      	mov	r3, r0
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d108      	bne.n	8015f1e <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	685b      	ldr	r3, [r3, #4]
 8015f10:	461a      	mov	r2, r3
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	429a      	cmp	r2, r3
 8015f16:	d102      	bne.n	8015f1e <putc_flush+0x40>
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	689b      	ldr	r3, [r3, #8]
 8015f1c:	e001      	b.n	8015f22 <putc_flush+0x44>
	return EOF;
 8015f1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015f22:	4618      	mov	r0, r3
 8015f24:	3710      	adds	r7, #16
 8015f26:	46bd      	mov	sp, r7
 8015f28:	bd80      	pop	{r7, pc}

08015f2a <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8015f2a:	b480      	push	{r7}
 8015f2c:	b083      	sub	sp, #12
 8015f2e:	af00      	add	r7, sp, #0
 8015f30:	6078      	str	r0, [r7, #4]
 8015f32:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	683a      	ldr	r2, [r7, #0]
 8015f38:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	2200      	movs	r2, #0
 8015f3e:	605a      	str	r2, [r3, #4]
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	685a      	ldr	r2, [r3, #4]
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	609a      	str	r2, [r3, #8]
}
 8015f48:	bf00      	nop
 8015f4a:	370c      	adds	r7, #12
 8015f4c:	46bd      	mov	sp, r7
 8015f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f52:	4770      	bx	lr

08015f54 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8015f54:	b40e      	push	{r1, r2, r3}
 8015f56:	b580      	push	{r7, lr}
 8015f58:	b0a7      	sub	sp, #156	; 0x9c
 8015f5a:	af00      	add	r7, sp, #0
 8015f5c:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8015f5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015f62:	6879      	ldr	r1, [r7, #4]
 8015f64:	4618      	mov	r0, r3
 8015f66:	f7ff ffe0 	bl	8015f2a <putc_init>

	va_start(arp, fmt);
 8015f6a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8015f6e:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 8015f70:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015f74:	1c5a      	adds	r2, r3, #1
 8015f76:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8015f7a:	781b      	ldrb	r3, [r3, #0]
 8015f7c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 8015f80:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	f000 81f4 	beq.w	8016372 <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 8015f8a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8015f8e:	2b25      	cmp	r3, #37	; 0x25
 8015f90:	d008      	beq.n	8015fa4 <f_printf+0x50>
			putc_bfd(&pb, c);
 8015f92:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8015f96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015f9a:	4611      	mov	r1, r2
 8015f9c:	4618      	mov	r0, r3
 8015f9e:	f7ff ff61 	bl	8015e64 <putc_bfd>
			continue;
 8015fa2:	e1e5      	b.n	8016370 <f_printf+0x41c>
		}
		w = f = 0;
 8015fa4:	2300      	movs	r3, #0
 8015fa6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8015faa:	2300      	movs	r3, #0
 8015fac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 8015fb0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015fb4:	1c5a      	adds	r2, r3, #1
 8015fb6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8015fba:	781b      	ldrb	r3, [r3, #0]
 8015fbc:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8015fc0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8015fc4:	2b30      	cmp	r3, #48	; 0x30
 8015fc6:	d10b      	bne.n	8015fe0 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8015fc8:	2301      	movs	r3, #1
 8015fca:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8015fce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015fd2:	1c5a      	adds	r2, r3, #1
 8015fd4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8015fd8:	781b      	ldrb	r3, [r3, #0]
 8015fda:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8015fde:	e024      	b.n	801602a <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8015fe0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8015fe4:	2b2d      	cmp	r3, #45	; 0x2d
 8015fe6:	d120      	bne.n	801602a <f_printf+0xd6>
				f = 2; c = *fmt++;
 8015fe8:	2302      	movs	r3, #2
 8015fea:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8015fee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015ff2:	1c5a      	adds	r2, r3, #1
 8015ff4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8015ff8:	781b      	ldrb	r3, [r3, #0]
 8015ffa:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8015ffe:	e014      	b.n	801602a <f_printf+0xd6>
			w = w * 10 + c - '0';
 8016000:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016004:	4613      	mov	r3, r2
 8016006:	009b      	lsls	r3, r3, #2
 8016008:	4413      	add	r3, r2
 801600a:	005b      	lsls	r3, r3, #1
 801600c:	461a      	mov	r2, r3
 801600e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8016012:	4413      	add	r3, r2
 8016014:	3b30      	subs	r3, #48	; 0x30
 8016016:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 801601a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801601e:	1c5a      	adds	r2, r3, #1
 8016020:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8016024:	781b      	ldrb	r3, [r3, #0]
 8016026:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 801602a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801602e:	2b2f      	cmp	r3, #47	; 0x2f
 8016030:	d903      	bls.n	801603a <f_printf+0xe6>
 8016032:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8016036:	2b39      	cmp	r3, #57	; 0x39
 8016038:	d9e2      	bls.n	8016000 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 801603a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801603e:	2b6c      	cmp	r3, #108	; 0x6c
 8016040:	d003      	beq.n	801604a <f_printf+0xf6>
 8016042:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8016046:	2b4c      	cmp	r3, #76	; 0x4c
 8016048:	d10d      	bne.n	8016066 <f_printf+0x112>
			f |= 4; c = *fmt++;
 801604a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801604e:	f043 0304 	orr.w	r3, r3, #4
 8016052:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8016056:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801605a:	1c5a      	adds	r2, r3, #1
 801605c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8016060:	781b      	ldrb	r3, [r3, #0]
 8016062:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 8016066:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801606a:	2b00      	cmp	r3, #0
 801606c:	f000 8183 	beq.w	8016376 <f_printf+0x422>
		d = c;
 8016070:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8016074:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8016078:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801607c:	2b60      	cmp	r3, #96	; 0x60
 801607e:	d908      	bls.n	8016092 <f_printf+0x13e>
 8016080:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8016084:	2b7a      	cmp	r3, #122	; 0x7a
 8016086:	d804      	bhi.n	8016092 <f_printf+0x13e>
 8016088:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801608c:	3b20      	subs	r3, #32
 801608e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 8016092:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8016096:	3b42      	subs	r3, #66	; 0x42
 8016098:	2b16      	cmp	r3, #22
 801609a:	f200 8098 	bhi.w	80161ce <f_printf+0x27a>
 801609e:	a201      	add	r2, pc, #4	; (adr r2, 80160a4 <f_printf+0x150>)
 80160a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80160a4:	080161af 	.word	0x080161af
 80160a8:	08016197 	.word	0x08016197
 80160ac:	080161bf 	.word	0x080161bf
 80160b0:	080161cf 	.word	0x080161cf
 80160b4:	080161cf 	.word	0x080161cf
 80160b8:	080161cf 	.word	0x080161cf
 80160bc:	080161cf 	.word	0x080161cf
 80160c0:	080161cf 	.word	0x080161cf
 80160c4:	080161cf 	.word	0x080161cf
 80160c8:	080161cf 	.word	0x080161cf
 80160cc:	080161cf 	.word	0x080161cf
 80160d0:	080161cf 	.word	0x080161cf
 80160d4:	080161cf 	.word	0x080161cf
 80160d8:	080161b7 	.word	0x080161b7
 80160dc:	080161cf 	.word	0x080161cf
 80160e0:	080161cf 	.word	0x080161cf
 80160e4:	080161cf 	.word	0x080161cf
 80160e8:	08016101 	.word	0x08016101
 80160ec:	080161cf 	.word	0x080161cf
 80160f0:	080161bf 	.word	0x080161bf
 80160f4:	080161cf 	.word	0x080161cf
 80160f8:	080161cf 	.word	0x080161cf
 80160fc:	080161c7 	.word	0x080161c7
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8016100:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016102:	1d1a      	adds	r2, r3, #4
 8016104:	67ba      	str	r2, [r7, #120]	; 0x78
 8016106:	681b      	ldr	r3, [r3, #0]
 8016108:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 801610a:	2300      	movs	r3, #0
 801610c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8016110:	e004      	b.n	801611c <f_printf+0x1c8>
 8016112:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016116:	3301      	adds	r3, #1
 8016118:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801611c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801611e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016122:	4413      	add	r3, r2
 8016124:	781b      	ldrb	r3, [r3, #0]
 8016126:	2b00      	cmp	r3, #0
 8016128:	d1f3      	bne.n	8016112 <f_printf+0x1be>
			if (!(f & 2)) {
 801612a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801612e:	f003 0302 	and.w	r3, r3, #2
 8016132:	2b00      	cmp	r3, #0
 8016134:	d11a      	bne.n	801616c <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8016136:	e005      	b.n	8016144 <f_printf+0x1f0>
 8016138:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801613c:	2120      	movs	r1, #32
 801613e:	4618      	mov	r0, r3
 8016140:	f7ff fe90 	bl	8015e64 <putc_bfd>
 8016144:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016148:	1c5a      	adds	r2, r3, #1
 801614a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801614e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016152:	429a      	cmp	r2, r3
 8016154:	d8f0      	bhi.n	8016138 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8016156:	e009      	b.n	801616c <f_printf+0x218>
 8016158:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801615a:	1c5a      	adds	r2, r3, #1
 801615c:	67fa      	str	r2, [r7, #124]	; 0x7c
 801615e:	781a      	ldrb	r2, [r3, #0]
 8016160:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016164:	4611      	mov	r1, r2
 8016166:	4618      	mov	r0, r3
 8016168:	f7ff fe7c 	bl	8015e64 <putc_bfd>
 801616c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801616e:	781b      	ldrb	r3, [r3, #0]
 8016170:	2b00      	cmp	r3, #0
 8016172:	d1f1      	bne.n	8016158 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8016174:	e005      	b.n	8016182 <f_printf+0x22e>
 8016176:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801617a:	2120      	movs	r1, #32
 801617c:	4618      	mov	r0, r3
 801617e:	f7ff fe71 	bl	8015e64 <putc_bfd>
 8016182:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016186:	1c5a      	adds	r2, r3, #1
 8016188:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801618c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016190:	429a      	cmp	r2, r3
 8016192:	d8f0      	bhi.n	8016176 <f_printf+0x222>
			continue;
 8016194:	e0ec      	b.n	8016370 <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8016196:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016198:	1d1a      	adds	r2, r3, #4
 801619a:	67ba      	str	r2, [r7, #120]	; 0x78
 801619c:	681b      	ldr	r3, [r3, #0]
 801619e:	b2da      	uxtb	r2, r3
 80161a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80161a4:	4611      	mov	r1, r2
 80161a6:	4618      	mov	r0, r3
 80161a8:	f7ff fe5c 	bl	8015e64 <putc_bfd>
 80161ac:	e0e0      	b.n	8016370 <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 80161ae:	2302      	movs	r3, #2
 80161b0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80161b4:	e014      	b.n	80161e0 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 80161b6:	2308      	movs	r3, #8
 80161b8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80161bc:	e010      	b.n	80161e0 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 80161be:	230a      	movs	r3, #10
 80161c0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80161c4:	e00c      	b.n	80161e0 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 80161c6:	2310      	movs	r3, #16
 80161c8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80161cc:	e008      	b.n	80161e0 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 80161ce:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 80161d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80161d6:	4611      	mov	r1, r2
 80161d8:	4618      	mov	r0, r3
 80161da:	f7ff fe43 	bl	8015e64 <putc_bfd>
 80161de:	e0c7      	b.n	8016370 <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 80161e0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80161e4:	f003 0304 	and.w	r3, r3, #4
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d004      	beq.n	80161f6 <f_printf+0x2a2>
 80161ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80161ee:	1d1a      	adds	r2, r3, #4
 80161f0:	67ba      	str	r2, [r7, #120]	; 0x78
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	e00c      	b.n	8016210 <f_printf+0x2bc>
 80161f6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80161fa:	2b44      	cmp	r3, #68	; 0x44
 80161fc:	d104      	bne.n	8016208 <f_printf+0x2b4>
 80161fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016200:	1d1a      	adds	r2, r3, #4
 8016202:	67ba      	str	r2, [r7, #120]	; 0x78
 8016204:	681b      	ldr	r3, [r3, #0]
 8016206:	e003      	b.n	8016210 <f_printf+0x2bc>
 8016208:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801620a:	1d1a      	adds	r2, r3, #4
 801620c:	67ba      	str	r2, [r7, #120]	; 0x78
 801620e:	681b      	ldr	r3, [r3, #0]
 8016210:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8016214:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8016218:	2b44      	cmp	r3, #68	; 0x44
 801621a:	d10e      	bne.n	801623a <f_printf+0x2e6>
 801621c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016220:	2b00      	cmp	r3, #0
 8016222:	da0a      	bge.n	801623a <f_printf+0x2e6>
			v = 0 - v;
 8016224:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016228:	425b      	negs	r3, r3
 801622a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 801622e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8016232:	f043 0308 	orr.w	r3, r3, #8
 8016236:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 801623a:	2300      	movs	r3, #0
 801623c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8016240:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8016244:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016248:	fbb3 f1f2 	udiv	r1, r3, r2
 801624c:	fb02 f201 	mul.w	r2, r2, r1
 8016250:	1a9b      	subs	r3, r3, r2
 8016252:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8016256:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 801625a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801625e:	fbb2 f3f3 	udiv	r3, r2, r3
 8016262:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8016266:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801626a:	2b09      	cmp	r3, #9
 801626c:	d90b      	bls.n	8016286 <f_printf+0x332>
 801626e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8016272:	2b78      	cmp	r3, #120	; 0x78
 8016274:	d101      	bne.n	801627a <f_printf+0x326>
 8016276:	2227      	movs	r2, #39	; 0x27
 8016278:	e000      	b.n	801627c <f_printf+0x328>
 801627a:	2207      	movs	r2, #7
 801627c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8016280:	4413      	add	r3, r2
 8016282:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 8016286:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801628a:	1c5a      	adds	r2, r3, #1
 801628c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8016290:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8016294:	3230      	adds	r2, #48	; 0x30
 8016296:	b2d2      	uxtb	r2, r2
 8016298:	f107 0198 	add.w	r1, r7, #152	; 0x98
 801629c:	440b      	add	r3, r1
 801629e:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 80162a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d003      	beq.n	80162b2 <f_printf+0x35e>
 80162aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80162ae:	2b1f      	cmp	r3, #31
 80162b0:	d9c6      	bls.n	8016240 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 80162b2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80162b6:	f003 0308 	and.w	r3, r3, #8
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d00a      	beq.n	80162d4 <f_printf+0x380>
 80162be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80162c2:	1c5a      	adds	r2, r3, #1
 80162c4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80162c8:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80162cc:	4413      	add	r3, r2
 80162ce:	222d      	movs	r2, #45	; 0x2d
 80162d0:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 80162d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80162d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80162dc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80162e0:	f003 0301 	and.w	r3, r3, #1
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d001      	beq.n	80162ec <f_printf+0x398>
 80162e8:	2330      	movs	r3, #48	; 0x30
 80162ea:	e000      	b.n	80162ee <f_printf+0x39a>
 80162ec:	2320      	movs	r3, #32
 80162ee:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 80162f2:	e007      	b.n	8016304 <f_printf+0x3b0>
 80162f4:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80162f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80162fc:	4611      	mov	r1, r2
 80162fe:	4618      	mov	r0, r3
 8016300:	f7ff fdb0 	bl	8015e64 <putc_bfd>
 8016304:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8016308:	f003 0302 	and.w	r3, r3, #2
 801630c:	2b00      	cmp	r3, #0
 801630e:	d108      	bne.n	8016322 <f_printf+0x3ce>
 8016310:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016314:	1c5a      	adds	r2, r3, #1
 8016316:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801631a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801631e:	429a      	cmp	r2, r3
 8016320:	d8e8      	bhi.n	80162f4 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 8016322:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016326:	3b01      	subs	r3, #1
 8016328:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801632c:	f107 020c 	add.w	r2, r7, #12
 8016330:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016334:	4413      	add	r3, r2
 8016336:	781a      	ldrb	r2, [r3, #0]
 8016338:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801633c:	4611      	mov	r1, r2
 801633e:	4618      	mov	r0, r3
 8016340:	f7ff fd90 	bl	8015e64 <putc_bfd>
		} while (i);
 8016344:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016348:	2b00      	cmp	r3, #0
 801634a:	d1ea      	bne.n	8016322 <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 801634c:	e007      	b.n	801635e <f_printf+0x40a>
 801634e:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8016352:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016356:	4611      	mov	r1, r2
 8016358:	4618      	mov	r0, r3
 801635a:	f7ff fd83 	bl	8015e64 <putc_bfd>
 801635e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016362:	1c5a      	adds	r2, r3, #1
 8016364:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8016368:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801636c:	429a      	cmp	r2, r3
 801636e:	d8ee      	bhi.n	801634e <f_printf+0x3fa>
		c = *fmt++;
 8016370:	e5fe      	b.n	8015f70 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8016372:	bf00      	nop
 8016374:	e000      	b.n	8016378 <f_printf+0x424>
		if (!c) break;
 8016376:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8016378:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801637c:	4618      	mov	r0, r3
 801637e:	f7ff fdae 	bl	8015ede <putc_flush>
 8016382:	4603      	mov	r3, r0
}
 8016384:	4618      	mov	r0, r3
 8016386:	379c      	adds	r7, #156	; 0x9c
 8016388:	46bd      	mov	sp, r7
 801638a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801638e:	b003      	add	sp, #12
 8016390:	4770      	bx	lr
 8016392:	bf00      	nop

08016394 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8016394:	b480      	push	{r7}
 8016396:	b087      	sub	sp, #28
 8016398:	af00      	add	r7, sp, #0
 801639a:	60f8      	str	r0, [r7, #12]
 801639c:	60b9      	str	r1, [r7, #8]
 801639e:	4613      	mov	r3, r2
 80163a0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80163a2:	2301      	movs	r3, #1
 80163a4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80163a6:	2300      	movs	r3, #0
 80163a8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80163aa:	4b1f      	ldr	r3, [pc, #124]	; (8016428 <FATFS_LinkDriverEx+0x94>)
 80163ac:	7b9b      	ldrb	r3, [r3, #14]
 80163ae:	b2db      	uxtb	r3, r3
 80163b0:	2b01      	cmp	r3, #1
 80163b2:	d831      	bhi.n	8016418 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80163b4:	4b1c      	ldr	r3, [pc, #112]	; (8016428 <FATFS_LinkDriverEx+0x94>)
 80163b6:	7b9b      	ldrb	r3, [r3, #14]
 80163b8:	b2db      	uxtb	r3, r3
 80163ba:	461a      	mov	r2, r3
 80163bc:	4b1a      	ldr	r3, [pc, #104]	; (8016428 <FATFS_LinkDriverEx+0x94>)
 80163be:	2100      	movs	r1, #0
 80163c0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80163c2:	4b19      	ldr	r3, [pc, #100]	; (8016428 <FATFS_LinkDriverEx+0x94>)
 80163c4:	7b9b      	ldrb	r3, [r3, #14]
 80163c6:	b2db      	uxtb	r3, r3
 80163c8:	4a17      	ldr	r2, [pc, #92]	; (8016428 <FATFS_LinkDriverEx+0x94>)
 80163ca:	009b      	lsls	r3, r3, #2
 80163cc:	4413      	add	r3, r2
 80163ce:	68fa      	ldr	r2, [r7, #12]
 80163d0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80163d2:	4b15      	ldr	r3, [pc, #84]	; (8016428 <FATFS_LinkDriverEx+0x94>)
 80163d4:	7b9b      	ldrb	r3, [r3, #14]
 80163d6:	b2db      	uxtb	r3, r3
 80163d8:	461a      	mov	r2, r3
 80163da:	4b13      	ldr	r3, [pc, #76]	; (8016428 <FATFS_LinkDriverEx+0x94>)
 80163dc:	4413      	add	r3, r2
 80163de:	79fa      	ldrb	r2, [r7, #7]
 80163e0:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 80163e2:	4b11      	ldr	r3, [pc, #68]	; (8016428 <FATFS_LinkDriverEx+0x94>)
 80163e4:	7b9b      	ldrb	r3, [r3, #14]
 80163e6:	b2db      	uxtb	r3, r3
 80163e8:	1c5a      	adds	r2, r3, #1
 80163ea:	b2d1      	uxtb	r1, r2
 80163ec:	4a0e      	ldr	r2, [pc, #56]	; (8016428 <FATFS_LinkDriverEx+0x94>)
 80163ee:	7391      	strb	r1, [r2, #14]
 80163f0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80163f2:	7dbb      	ldrb	r3, [r7, #22]
 80163f4:	3330      	adds	r3, #48	; 0x30
 80163f6:	b2da      	uxtb	r2, r3
 80163f8:	68bb      	ldr	r3, [r7, #8]
 80163fa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80163fc:	68bb      	ldr	r3, [r7, #8]
 80163fe:	3301      	adds	r3, #1
 8016400:	223a      	movs	r2, #58	; 0x3a
 8016402:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016404:	68bb      	ldr	r3, [r7, #8]
 8016406:	3302      	adds	r3, #2
 8016408:	222f      	movs	r2, #47	; 0x2f
 801640a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801640c:	68bb      	ldr	r3, [r7, #8]
 801640e:	3303      	adds	r3, #3
 8016410:	2200      	movs	r2, #0
 8016412:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8016414:	2300      	movs	r3, #0
 8016416:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8016418:	7dfb      	ldrb	r3, [r7, #23]
}
 801641a:	4618      	mov	r0, r3
 801641c:	371c      	adds	r7, #28
 801641e:	46bd      	mov	sp, r7
 8016420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016424:	4770      	bx	lr
 8016426:	bf00      	nop
 8016428:	240002a0 	.word	0x240002a0

0801642c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801642c:	b580      	push	{r7, lr}
 801642e:	b082      	sub	sp, #8
 8016430:	af00      	add	r7, sp, #0
 8016432:	6078      	str	r0, [r7, #4]
 8016434:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8016436:	2200      	movs	r2, #0
 8016438:	6839      	ldr	r1, [r7, #0]
 801643a:	6878      	ldr	r0, [r7, #4]
 801643c:	f7ff ffaa 	bl	8016394 <FATFS_LinkDriverEx>
 8016440:	4603      	mov	r3, r0
}
 8016442:	4618      	mov	r0, r3
 8016444:	3708      	adds	r7, #8
 8016446:	46bd      	mov	sp, r7
 8016448:	bd80      	pop	{r7, pc}
	...

0801644c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801644c:	b480      	push	{r7}
 801644e:	b085      	sub	sp, #20
 8016450:	af00      	add	r7, sp, #0
 8016452:	4603      	mov	r3, r0
 8016454:	6039      	str	r1, [r7, #0]
 8016456:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8016458:	88fb      	ldrh	r3, [r7, #6]
 801645a:	2b7f      	cmp	r3, #127	; 0x7f
 801645c:	d802      	bhi.n	8016464 <ff_convert+0x18>
		c = chr;
 801645e:	88fb      	ldrh	r3, [r7, #6]
 8016460:	81fb      	strh	r3, [r7, #14]
 8016462:	e025      	b.n	80164b0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8016464:	683b      	ldr	r3, [r7, #0]
 8016466:	2b00      	cmp	r3, #0
 8016468:	d00b      	beq.n	8016482 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801646a:	88fb      	ldrh	r3, [r7, #6]
 801646c:	2bff      	cmp	r3, #255	; 0xff
 801646e:	d805      	bhi.n	801647c <ff_convert+0x30>
 8016470:	88fb      	ldrh	r3, [r7, #6]
 8016472:	3b80      	subs	r3, #128	; 0x80
 8016474:	4a12      	ldr	r2, [pc, #72]	; (80164c0 <ff_convert+0x74>)
 8016476:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801647a:	e000      	b.n	801647e <ff_convert+0x32>
 801647c:	2300      	movs	r3, #0
 801647e:	81fb      	strh	r3, [r7, #14]
 8016480:	e016      	b.n	80164b0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8016482:	2300      	movs	r3, #0
 8016484:	81fb      	strh	r3, [r7, #14]
 8016486:	e009      	b.n	801649c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8016488:	89fb      	ldrh	r3, [r7, #14]
 801648a:	4a0d      	ldr	r2, [pc, #52]	; (80164c0 <ff_convert+0x74>)
 801648c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016490:	88fa      	ldrh	r2, [r7, #6]
 8016492:	429a      	cmp	r2, r3
 8016494:	d006      	beq.n	80164a4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8016496:	89fb      	ldrh	r3, [r7, #14]
 8016498:	3301      	adds	r3, #1
 801649a:	81fb      	strh	r3, [r7, #14]
 801649c:	89fb      	ldrh	r3, [r7, #14]
 801649e:	2b7f      	cmp	r3, #127	; 0x7f
 80164a0:	d9f2      	bls.n	8016488 <ff_convert+0x3c>
 80164a2:	e000      	b.n	80164a6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80164a4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80164a6:	89fb      	ldrh	r3, [r7, #14]
 80164a8:	3380      	adds	r3, #128	; 0x80
 80164aa:	b29b      	uxth	r3, r3
 80164ac:	b2db      	uxtb	r3, r3
 80164ae:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80164b0:	89fb      	ldrh	r3, [r7, #14]
}
 80164b2:	4618      	mov	r0, r3
 80164b4:	3714      	adds	r7, #20
 80164b6:	46bd      	mov	sp, r7
 80164b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164bc:	4770      	bx	lr
 80164be:	bf00      	nop
 80164c0:	08017410 	.word	0x08017410

080164c4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80164c4:	b480      	push	{r7}
 80164c6:	b087      	sub	sp, #28
 80164c8:	af00      	add	r7, sp, #0
 80164ca:	4603      	mov	r3, r0
 80164cc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80164ce:	88fb      	ldrh	r3, [r7, #6]
 80164d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80164d4:	d201      	bcs.n	80164da <ff_wtoupper+0x16>
 80164d6:	4b3e      	ldr	r3, [pc, #248]	; (80165d0 <ff_wtoupper+0x10c>)
 80164d8:	e000      	b.n	80164dc <ff_wtoupper+0x18>
 80164da:	4b3e      	ldr	r3, [pc, #248]	; (80165d4 <ff_wtoupper+0x110>)
 80164dc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80164de:	697b      	ldr	r3, [r7, #20]
 80164e0:	1c9a      	adds	r2, r3, #2
 80164e2:	617a      	str	r2, [r7, #20]
 80164e4:	881b      	ldrh	r3, [r3, #0]
 80164e6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80164e8:	8a7b      	ldrh	r3, [r7, #18]
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d068      	beq.n	80165c0 <ff_wtoupper+0xfc>
 80164ee:	88fa      	ldrh	r2, [r7, #6]
 80164f0:	8a7b      	ldrh	r3, [r7, #18]
 80164f2:	429a      	cmp	r2, r3
 80164f4:	d364      	bcc.n	80165c0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80164f6:	697b      	ldr	r3, [r7, #20]
 80164f8:	1c9a      	adds	r2, r3, #2
 80164fa:	617a      	str	r2, [r7, #20]
 80164fc:	881b      	ldrh	r3, [r3, #0]
 80164fe:	823b      	strh	r3, [r7, #16]
 8016500:	8a3b      	ldrh	r3, [r7, #16]
 8016502:	0a1b      	lsrs	r3, r3, #8
 8016504:	81fb      	strh	r3, [r7, #14]
 8016506:	8a3b      	ldrh	r3, [r7, #16]
 8016508:	b2db      	uxtb	r3, r3
 801650a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801650c:	88fa      	ldrh	r2, [r7, #6]
 801650e:	8a79      	ldrh	r1, [r7, #18]
 8016510:	8a3b      	ldrh	r3, [r7, #16]
 8016512:	440b      	add	r3, r1
 8016514:	429a      	cmp	r2, r3
 8016516:	da49      	bge.n	80165ac <ff_wtoupper+0xe8>
			switch (cmd) {
 8016518:	89fb      	ldrh	r3, [r7, #14]
 801651a:	2b08      	cmp	r3, #8
 801651c:	d84f      	bhi.n	80165be <ff_wtoupper+0xfa>
 801651e:	a201      	add	r2, pc, #4	; (adr r2, 8016524 <ff_wtoupper+0x60>)
 8016520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016524:	08016549 	.word	0x08016549
 8016528:	0801655b 	.word	0x0801655b
 801652c:	08016571 	.word	0x08016571
 8016530:	08016579 	.word	0x08016579
 8016534:	08016581 	.word	0x08016581
 8016538:	08016589 	.word	0x08016589
 801653c:	08016591 	.word	0x08016591
 8016540:	08016599 	.word	0x08016599
 8016544:	080165a1 	.word	0x080165a1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8016548:	88fa      	ldrh	r2, [r7, #6]
 801654a:	8a7b      	ldrh	r3, [r7, #18]
 801654c:	1ad3      	subs	r3, r2, r3
 801654e:	005b      	lsls	r3, r3, #1
 8016550:	697a      	ldr	r2, [r7, #20]
 8016552:	4413      	add	r3, r2
 8016554:	881b      	ldrh	r3, [r3, #0]
 8016556:	80fb      	strh	r3, [r7, #6]
 8016558:	e027      	b.n	80165aa <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801655a:	88fa      	ldrh	r2, [r7, #6]
 801655c:	8a7b      	ldrh	r3, [r7, #18]
 801655e:	1ad3      	subs	r3, r2, r3
 8016560:	b29b      	uxth	r3, r3
 8016562:	f003 0301 	and.w	r3, r3, #1
 8016566:	b29b      	uxth	r3, r3
 8016568:	88fa      	ldrh	r2, [r7, #6]
 801656a:	1ad3      	subs	r3, r2, r3
 801656c:	80fb      	strh	r3, [r7, #6]
 801656e:	e01c      	b.n	80165aa <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8016570:	88fb      	ldrh	r3, [r7, #6]
 8016572:	3b10      	subs	r3, #16
 8016574:	80fb      	strh	r3, [r7, #6]
 8016576:	e018      	b.n	80165aa <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8016578:	88fb      	ldrh	r3, [r7, #6]
 801657a:	3b20      	subs	r3, #32
 801657c:	80fb      	strh	r3, [r7, #6]
 801657e:	e014      	b.n	80165aa <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8016580:	88fb      	ldrh	r3, [r7, #6]
 8016582:	3b30      	subs	r3, #48	; 0x30
 8016584:	80fb      	strh	r3, [r7, #6]
 8016586:	e010      	b.n	80165aa <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8016588:	88fb      	ldrh	r3, [r7, #6]
 801658a:	3b1a      	subs	r3, #26
 801658c:	80fb      	strh	r3, [r7, #6]
 801658e:	e00c      	b.n	80165aa <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8016590:	88fb      	ldrh	r3, [r7, #6]
 8016592:	3308      	adds	r3, #8
 8016594:	80fb      	strh	r3, [r7, #6]
 8016596:	e008      	b.n	80165aa <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8016598:	88fb      	ldrh	r3, [r7, #6]
 801659a:	3b50      	subs	r3, #80	; 0x50
 801659c:	80fb      	strh	r3, [r7, #6]
 801659e:	e004      	b.n	80165aa <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80165a0:	88fb      	ldrh	r3, [r7, #6]
 80165a2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80165a6:	80fb      	strh	r3, [r7, #6]
 80165a8:	bf00      	nop
			}
			break;
 80165aa:	e008      	b.n	80165be <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80165ac:	89fb      	ldrh	r3, [r7, #14]
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d195      	bne.n	80164de <ff_wtoupper+0x1a>
 80165b2:	8a3b      	ldrh	r3, [r7, #16]
 80165b4:	005b      	lsls	r3, r3, #1
 80165b6:	697a      	ldr	r2, [r7, #20]
 80165b8:	4413      	add	r3, r2
 80165ba:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80165bc:	e78f      	b.n	80164de <ff_wtoupper+0x1a>
			break;
 80165be:	bf00      	nop
	}

	return chr;
 80165c0:	88fb      	ldrh	r3, [r7, #6]
}
 80165c2:	4618      	mov	r0, r3
 80165c4:	371c      	adds	r7, #28
 80165c6:	46bd      	mov	sp, r7
 80165c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165cc:	4770      	bx	lr
 80165ce:	bf00      	nop
 80165d0:	08017510 	.word	0x08017510
 80165d4:	08017704 	.word	0x08017704

080165d8 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 80165d8:	b580      	push	{r7, lr}
 80165da:	b082      	sub	sp, #8
 80165dc:	af00      	add	r7, sp, #0
 80165de:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 80165e0:	6878      	ldr	r0, [r7, #4]
 80165e2:	f000 fd27 	bl	8017034 <malloc>
 80165e6:	4603      	mov	r3, r0
}
 80165e8:	4618      	mov	r0, r3
 80165ea:	3708      	adds	r7, #8
 80165ec:	46bd      	mov	sp, r7
 80165ee:	bd80      	pop	{r7, pc}

080165f0 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 80165f0:	b580      	push	{r7, lr}
 80165f2:	b082      	sub	sp, #8
 80165f4:	af00      	add	r7, sp, #0
 80165f6:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 80165f8:	6878      	ldr	r0, [r7, #4]
 80165fa:	f000 fd23 	bl	8017044 <free>
}
 80165fe:	bf00      	nop
 8016600:	3708      	adds	r7, #8
 8016602:	46bd      	mov	sp, r7
 8016604:	bd80      	pop	{r7, pc}
	...

08016608 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016608:	b580      	push	{r7, lr}
 801660a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801660c:	2200      	movs	r2, #0
 801660e:	4913      	ldr	r1, [pc, #76]	; (801665c <MX_USB_DEVICE_Init+0x54>)
 8016610:	4813      	ldr	r0, [pc, #76]	; (8016660 <MX_USB_DEVICE_Init+0x58>)
 8016612:	f7f9 fcd6 	bl	800ffc2 <USBD_Init>
 8016616:	4603      	mov	r3, r0
 8016618:	2b00      	cmp	r3, #0
 801661a:	d001      	beq.n	8016620 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801661c:	f7ea fd98 	bl	8001150 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8016620:	4910      	ldr	r1, [pc, #64]	; (8016664 <MX_USB_DEVICE_Init+0x5c>)
 8016622:	480f      	ldr	r0, [pc, #60]	; (8016660 <MX_USB_DEVICE_Init+0x58>)
 8016624:	f7f9 fcf8 	bl	8010018 <USBD_RegisterClass>
 8016628:	4603      	mov	r3, r0
 801662a:	2b00      	cmp	r3, #0
 801662c:	d001      	beq.n	8016632 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801662e:	f7ea fd8f 	bl	8001150 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8016632:	490d      	ldr	r1, [pc, #52]	; (8016668 <MX_USB_DEVICE_Init+0x60>)
 8016634:	480a      	ldr	r0, [pc, #40]	; (8016660 <MX_USB_DEVICE_Init+0x58>)
 8016636:	f7f8 fc9f 	bl	800ef78 <USBD_MSC_RegisterStorage>
 801663a:	4603      	mov	r3, r0
 801663c:	2b00      	cmp	r3, #0
 801663e:	d001      	beq.n	8016644 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016640:	f7ea fd86 	bl	8001150 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8016644:	4806      	ldr	r0, [pc, #24]	; (8016660 <MX_USB_DEVICE_Init+0x58>)
 8016646:	f7f9 fd01 	bl	801004c <USBD_Start>
 801664a:	4603      	mov	r3, r0
 801664c:	2b00      	cmp	r3, #0
 801664e:	d001      	beq.n	8016654 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016650:	f7ea fd7e 	bl	8001150 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8016654:	f7ee fcb0 	bl	8004fb8 <HAL_PWREx_EnableUSBVoltageDetector>
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016658:	bf00      	nop
 801665a:	bd80      	pop	{r7, pc}
 801665c:	240000b4 	.word	0x240000b4
 8016660:	24007924 	.word	0x24007924
 8016664:	24000010 	.word	0x24000010
 8016668:	24000104 	.word	0x24000104

0801666c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801666c:	b480      	push	{r7}
 801666e:	b083      	sub	sp, #12
 8016670:	af00      	add	r7, sp, #0
 8016672:	4603      	mov	r3, r0
 8016674:	6039      	str	r1, [r7, #0]
 8016676:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8016678:	683b      	ldr	r3, [r7, #0]
 801667a:	2212      	movs	r2, #18
 801667c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801667e:	4b03      	ldr	r3, [pc, #12]	; (801668c <USBD_FS_DeviceDescriptor+0x20>)
}
 8016680:	4618      	mov	r0, r3
 8016682:	370c      	adds	r7, #12
 8016684:	46bd      	mov	sp, r7
 8016686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801668a:	4770      	bx	lr
 801668c:	240000d0 	.word	0x240000d0

08016690 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016690:	b480      	push	{r7}
 8016692:	b083      	sub	sp, #12
 8016694:	af00      	add	r7, sp, #0
 8016696:	4603      	mov	r3, r0
 8016698:	6039      	str	r1, [r7, #0]
 801669a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801669c:	683b      	ldr	r3, [r7, #0]
 801669e:	2204      	movs	r2, #4
 80166a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80166a2:	4b03      	ldr	r3, [pc, #12]	; (80166b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80166a4:	4618      	mov	r0, r3
 80166a6:	370c      	adds	r7, #12
 80166a8:	46bd      	mov	sp, r7
 80166aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ae:	4770      	bx	lr
 80166b0:	240000e4 	.word	0x240000e4

080166b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80166b4:	b580      	push	{r7, lr}
 80166b6:	b082      	sub	sp, #8
 80166b8:	af00      	add	r7, sp, #0
 80166ba:	4603      	mov	r3, r0
 80166bc:	6039      	str	r1, [r7, #0]
 80166be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80166c0:	79fb      	ldrb	r3, [r7, #7]
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d105      	bne.n	80166d2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80166c6:	683a      	ldr	r2, [r7, #0]
 80166c8:	4907      	ldr	r1, [pc, #28]	; (80166e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80166ca:	4808      	ldr	r0, [pc, #32]	; (80166ec <USBD_FS_ProductStrDescriptor+0x38>)
 80166cc:	f7fa fc6a 	bl	8010fa4 <USBD_GetString>
 80166d0:	e004      	b.n	80166dc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80166d2:	683a      	ldr	r2, [r7, #0]
 80166d4:	4904      	ldr	r1, [pc, #16]	; (80166e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80166d6:	4805      	ldr	r0, [pc, #20]	; (80166ec <USBD_FS_ProductStrDescriptor+0x38>)
 80166d8:	f7fa fc64 	bl	8010fa4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80166dc:	4b02      	ldr	r3, [pc, #8]	; (80166e8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80166de:	4618      	mov	r0, r3
 80166e0:	3708      	adds	r7, #8
 80166e2:	46bd      	mov	sp, r7
 80166e4:	bd80      	pop	{r7, pc}
 80166e6:	bf00      	nop
 80166e8:	24007be8 	.word	0x24007be8
 80166ec:	080172f0 	.word	0x080172f0

080166f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80166f0:	b580      	push	{r7, lr}
 80166f2:	b082      	sub	sp, #8
 80166f4:	af00      	add	r7, sp, #0
 80166f6:	4603      	mov	r3, r0
 80166f8:	6039      	str	r1, [r7, #0]
 80166fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80166fc:	683a      	ldr	r2, [r7, #0]
 80166fe:	4904      	ldr	r1, [pc, #16]	; (8016710 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8016700:	4804      	ldr	r0, [pc, #16]	; (8016714 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8016702:	f7fa fc4f 	bl	8010fa4 <USBD_GetString>
  return USBD_StrDesc;
 8016706:	4b02      	ldr	r3, [pc, #8]	; (8016710 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016708:	4618      	mov	r0, r3
 801670a:	3708      	adds	r7, #8
 801670c:	46bd      	mov	sp, r7
 801670e:	bd80      	pop	{r7, pc}
 8016710:	24007be8 	.word	0x24007be8
 8016714:	08017304 	.word	0x08017304

08016718 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016718:	b580      	push	{r7, lr}
 801671a:	b082      	sub	sp, #8
 801671c:	af00      	add	r7, sp, #0
 801671e:	4603      	mov	r3, r0
 8016720:	6039      	str	r1, [r7, #0]
 8016722:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016724:	683b      	ldr	r3, [r7, #0]
 8016726:	221a      	movs	r2, #26
 8016728:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801672a:	f000 f843 	bl	80167b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801672e:	4b02      	ldr	r3, [pc, #8]	; (8016738 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8016730:	4618      	mov	r0, r3
 8016732:	3708      	adds	r7, #8
 8016734:	46bd      	mov	sp, r7
 8016736:	bd80      	pop	{r7, pc}
 8016738:	240000e8 	.word	0x240000e8

0801673c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801673c:	b580      	push	{r7, lr}
 801673e:	b082      	sub	sp, #8
 8016740:	af00      	add	r7, sp, #0
 8016742:	4603      	mov	r3, r0
 8016744:	6039      	str	r1, [r7, #0]
 8016746:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016748:	79fb      	ldrb	r3, [r7, #7]
 801674a:	2b00      	cmp	r3, #0
 801674c:	d105      	bne.n	801675a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801674e:	683a      	ldr	r2, [r7, #0]
 8016750:	4907      	ldr	r1, [pc, #28]	; (8016770 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016752:	4808      	ldr	r0, [pc, #32]	; (8016774 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016754:	f7fa fc26 	bl	8010fa4 <USBD_GetString>
 8016758:	e004      	b.n	8016764 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801675a:	683a      	ldr	r2, [r7, #0]
 801675c:	4904      	ldr	r1, [pc, #16]	; (8016770 <USBD_FS_ConfigStrDescriptor+0x34>)
 801675e:	4805      	ldr	r0, [pc, #20]	; (8016774 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016760:	f7fa fc20 	bl	8010fa4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016764:	4b02      	ldr	r3, [pc, #8]	; (8016770 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8016766:	4618      	mov	r0, r3
 8016768:	3708      	adds	r7, #8
 801676a:	46bd      	mov	sp, r7
 801676c:	bd80      	pop	{r7, pc}
 801676e:	bf00      	nop
 8016770:	24007be8 	.word	0x24007be8
 8016774:	08017318 	.word	0x08017318

08016778 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016778:	b580      	push	{r7, lr}
 801677a:	b082      	sub	sp, #8
 801677c:	af00      	add	r7, sp, #0
 801677e:	4603      	mov	r3, r0
 8016780:	6039      	str	r1, [r7, #0]
 8016782:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016784:	79fb      	ldrb	r3, [r7, #7]
 8016786:	2b00      	cmp	r3, #0
 8016788:	d105      	bne.n	8016796 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801678a:	683a      	ldr	r2, [r7, #0]
 801678c:	4907      	ldr	r1, [pc, #28]	; (80167ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 801678e:	4808      	ldr	r0, [pc, #32]	; (80167b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016790:	f7fa fc08 	bl	8010fa4 <USBD_GetString>
 8016794:	e004      	b.n	80167a0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016796:	683a      	ldr	r2, [r7, #0]
 8016798:	4904      	ldr	r1, [pc, #16]	; (80167ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 801679a:	4805      	ldr	r0, [pc, #20]	; (80167b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801679c:	f7fa fc02 	bl	8010fa4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80167a0:	4b02      	ldr	r3, [pc, #8]	; (80167ac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80167a2:	4618      	mov	r0, r3
 80167a4:	3708      	adds	r7, #8
 80167a6:	46bd      	mov	sp, r7
 80167a8:	bd80      	pop	{r7, pc}
 80167aa:	bf00      	nop
 80167ac:	24007be8 	.word	0x24007be8
 80167b0:	08017324 	.word	0x08017324

080167b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80167b4:	b580      	push	{r7, lr}
 80167b6:	b084      	sub	sp, #16
 80167b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80167ba:	4b0f      	ldr	r3, [pc, #60]	; (80167f8 <Get_SerialNum+0x44>)
 80167bc:	681b      	ldr	r3, [r3, #0]
 80167be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80167c0:	4b0e      	ldr	r3, [pc, #56]	; (80167fc <Get_SerialNum+0x48>)
 80167c2:	681b      	ldr	r3, [r3, #0]
 80167c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80167c6:	4b0e      	ldr	r3, [pc, #56]	; (8016800 <Get_SerialNum+0x4c>)
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80167cc:	68fa      	ldr	r2, [r7, #12]
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	4413      	add	r3, r2
 80167d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d009      	beq.n	80167ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80167da:	2208      	movs	r2, #8
 80167dc:	4909      	ldr	r1, [pc, #36]	; (8016804 <Get_SerialNum+0x50>)
 80167de:	68f8      	ldr	r0, [r7, #12]
 80167e0:	f000 f814 	bl	801680c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80167e4:	2204      	movs	r2, #4
 80167e6:	4908      	ldr	r1, [pc, #32]	; (8016808 <Get_SerialNum+0x54>)
 80167e8:	68b8      	ldr	r0, [r7, #8]
 80167ea:	f000 f80f 	bl	801680c <IntToUnicode>
  }
}
 80167ee:	bf00      	nop
 80167f0:	3710      	adds	r7, #16
 80167f2:	46bd      	mov	sp, r7
 80167f4:	bd80      	pop	{r7, pc}
 80167f6:	bf00      	nop
 80167f8:	1ff1e800 	.word	0x1ff1e800
 80167fc:	1ff1e804 	.word	0x1ff1e804
 8016800:	1ff1e808 	.word	0x1ff1e808
 8016804:	240000ea 	.word	0x240000ea
 8016808:	240000fa 	.word	0x240000fa

0801680c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801680c:	b480      	push	{r7}
 801680e:	b087      	sub	sp, #28
 8016810:	af00      	add	r7, sp, #0
 8016812:	60f8      	str	r0, [r7, #12]
 8016814:	60b9      	str	r1, [r7, #8]
 8016816:	4613      	mov	r3, r2
 8016818:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801681a:	2300      	movs	r3, #0
 801681c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801681e:	2300      	movs	r3, #0
 8016820:	75fb      	strb	r3, [r7, #23]
 8016822:	e027      	b.n	8016874 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016824:	68fb      	ldr	r3, [r7, #12]
 8016826:	0f1b      	lsrs	r3, r3, #28
 8016828:	2b09      	cmp	r3, #9
 801682a:	d80b      	bhi.n	8016844 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801682c:	68fb      	ldr	r3, [r7, #12]
 801682e:	0f1b      	lsrs	r3, r3, #28
 8016830:	b2da      	uxtb	r2, r3
 8016832:	7dfb      	ldrb	r3, [r7, #23]
 8016834:	005b      	lsls	r3, r3, #1
 8016836:	4619      	mov	r1, r3
 8016838:	68bb      	ldr	r3, [r7, #8]
 801683a:	440b      	add	r3, r1
 801683c:	3230      	adds	r2, #48	; 0x30
 801683e:	b2d2      	uxtb	r2, r2
 8016840:	701a      	strb	r2, [r3, #0]
 8016842:	e00a      	b.n	801685a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016844:	68fb      	ldr	r3, [r7, #12]
 8016846:	0f1b      	lsrs	r3, r3, #28
 8016848:	b2da      	uxtb	r2, r3
 801684a:	7dfb      	ldrb	r3, [r7, #23]
 801684c:	005b      	lsls	r3, r3, #1
 801684e:	4619      	mov	r1, r3
 8016850:	68bb      	ldr	r3, [r7, #8]
 8016852:	440b      	add	r3, r1
 8016854:	3237      	adds	r2, #55	; 0x37
 8016856:	b2d2      	uxtb	r2, r2
 8016858:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801685a:	68fb      	ldr	r3, [r7, #12]
 801685c:	011b      	lsls	r3, r3, #4
 801685e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016860:	7dfb      	ldrb	r3, [r7, #23]
 8016862:	005b      	lsls	r3, r3, #1
 8016864:	3301      	adds	r3, #1
 8016866:	68ba      	ldr	r2, [r7, #8]
 8016868:	4413      	add	r3, r2
 801686a:	2200      	movs	r2, #0
 801686c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801686e:	7dfb      	ldrb	r3, [r7, #23]
 8016870:	3301      	adds	r3, #1
 8016872:	75fb      	strb	r3, [r7, #23]
 8016874:	7dfa      	ldrb	r2, [r7, #23]
 8016876:	79fb      	ldrb	r3, [r7, #7]
 8016878:	429a      	cmp	r2, r3
 801687a:	d3d3      	bcc.n	8016824 <IntToUnicode+0x18>
  }
}
 801687c:	bf00      	nop
 801687e:	371c      	adds	r7, #28
 8016880:	46bd      	mov	sp, r7
 8016882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016886:	4770      	bx	lr

08016888 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8016888:	b480      	push	{r7}
 801688a:	b083      	sub	sp, #12
 801688c:	af00      	add	r7, sp, #0
 801688e:	4603      	mov	r3, r0
 8016890:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8016892:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8016894:	4618      	mov	r0, r3
 8016896:	370c      	adds	r7, #12
 8016898:	46bd      	mov	sp, r7
 801689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801689e:	4770      	bx	lr

080168a0 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 80168a0:	b580      	push	{r7, lr}
 80168a2:	b084      	sub	sp, #16
 80168a4:	af00      	add	r7, sp, #0
 80168a6:	4603      	mov	r3, r0
 80168a8:	60b9      	str	r1, [r7, #8]
 80168aa:	607a      	str	r2, [r7, #4]
 80168ac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  if(HAL_SD_GetCardInfo(&hsd1,&SDCardInfo)==HAL_OK){
 80168ae:	490b      	ldr	r1, [pc, #44]	; (80168dc <STORAGE_GetCapacity_FS+0x3c>)
 80168b0:	480b      	ldr	r0, [pc, #44]	; (80168e0 <STORAGE_GetCapacity_FS+0x40>)
 80168b2:	f7f2 fb7f 	bl	8008fb4 <HAL_SD_GetCardInfo>
 80168b6:	4603      	mov	r3, r0
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d10a      	bne.n	80168d2 <STORAGE_GetCapacity_FS+0x32>
  *block_num  = SDCardInfo.LogBlockNbr;
 80168bc:	4b07      	ldr	r3, [pc, #28]	; (80168dc <STORAGE_GetCapacity_FS+0x3c>)
 80168be:	699a      	ldr	r2, [r3, #24]
 80168c0:	68bb      	ldr	r3, [r7, #8]
 80168c2:	601a      	str	r2, [r3, #0]
  *block_size = SDCardInfo.LogBlockSize;
 80168c4:	4b05      	ldr	r3, [pc, #20]	; (80168dc <STORAGE_GetCapacity_FS+0x3c>)
 80168c6:	69db      	ldr	r3, [r3, #28]
 80168c8:	b29a      	uxth	r2, r3
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 80168ce:	2300      	movs	r3, #0
 80168d0:	e7ff      	b.n	80168d2 <STORAGE_GetCapacity_FS+0x32>
  }
  /* USER CODE END 3 */
}
 80168d2:	4618      	mov	r0, r3
 80168d4:	3710      	adds	r7, #16
 80168d6:	46bd      	mov	sp, r7
 80168d8:	bd80      	pop	{r7, pc}
 80168da:	bf00      	nop
 80168dc:	24002530 	.word	0x24002530
 80168e0:	240013f4 	.word	0x240013f4

080168e4 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 80168e4:	b480      	push	{r7}
 80168e6:	b083      	sub	sp, #12
 80168e8:	af00      	add	r7, sp, #0
 80168ea:	4603      	mov	r3, r0
 80168ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80168ee:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80168f0:	4618      	mov	r0, r3
 80168f2:	370c      	adds	r7, #12
 80168f4:	46bd      	mov	sp, r7
 80168f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168fa:	4770      	bx	lr

080168fc <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 80168fc:	b480      	push	{r7}
 80168fe:	b083      	sub	sp, #12
 8016900:	af00      	add	r7, sp, #0
 8016902:	4603      	mov	r3, r0
 8016904:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8016906:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016908:	4618      	mov	r0, r3
 801690a:	370c      	adds	r7, #12
 801690c:	46bd      	mov	sp, r7
 801690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016912:	4770      	bx	lr

08016914 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8016914:	b580      	push	{r7, lr}
 8016916:	b086      	sub	sp, #24
 8016918:	af02      	add	r7, sp, #8
 801691a:	60b9      	str	r1, [r7, #8]
 801691c:	607a      	str	r2, [r7, #4]
 801691e:	461a      	mov	r2, r3
 8016920:	4603      	mov	r3, r0
 8016922:	73fb      	strb	r3, [r7, #15]
 8016924:	4613      	mov	r3, r2
 8016926:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
 if(HAL_SD_ReadBlocks(&hsd1,buf,blk_addr,blk_len,10)==HAL_OK){
 8016928:	89ba      	ldrh	r2, [r7, #12]
 801692a:	230a      	movs	r3, #10
 801692c:	9300      	str	r3, [sp, #0]
 801692e:	4613      	mov	r3, r2
 8016930:	687a      	ldr	r2, [r7, #4]
 8016932:	68b9      	ldr	r1, [r7, #8]
 8016934:	4805      	ldr	r0, [pc, #20]	; (801694c <STORAGE_Read_FS+0x38>)
 8016936:	f7f1 fdbf 	bl	80084b8 <HAL_SD_ReadBlocks>
 801693a:	4603      	mov	r3, r0
 801693c:	2b00      	cmp	r3, #0
 801693e:	d101      	bne.n	8016944 <STORAGE_Read_FS+0x30>

  return (USBD_OK);
 8016940:	2300      	movs	r3, #0
 8016942:	e7ff      	b.n	8016944 <STORAGE_Read_FS+0x30>
 }
  /* USER CODE END 6 */
}
 8016944:	4618      	mov	r0, r3
 8016946:	3710      	adds	r7, #16
 8016948:	46bd      	mov	sp, r7
 801694a:	bd80      	pop	{r7, pc}
 801694c:	240013f4 	.word	0x240013f4

08016950 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8016950:	b580      	push	{r7, lr}
 8016952:	b086      	sub	sp, #24
 8016954:	af02      	add	r7, sp, #8
 8016956:	60b9      	str	r1, [r7, #8]
 8016958:	607a      	str	r2, [r7, #4]
 801695a:	461a      	mov	r2, r3
 801695c:	4603      	mov	r3, r0
 801695e:	73fb      	strb	r3, [r7, #15]
 8016960:	4613      	mov	r3, r2
 8016962:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	if(HAL_SD_WriteBlocks(&hsd1,buf,blk_addr,blk_len,10)==HAL_OK){
 8016964:	89ba      	ldrh	r2, [r7, #12]
 8016966:	230a      	movs	r3, #10
 8016968:	9300      	str	r3, [sp, #0]
 801696a:	4613      	mov	r3, r2
 801696c:	687a      	ldr	r2, [r7, #4]
 801696e:	68b9      	ldr	r1, [r7, #8]
 8016970:	4805      	ldr	r0, [pc, #20]	; (8016988 <STORAGE_Write_FS+0x38>)
 8016972:	f7f1 ff2b 	bl	80087cc <HAL_SD_WriteBlocks>
 8016976:	4603      	mov	r3, r0
 8016978:	2b00      	cmp	r3, #0
 801697a:	d101      	bne.n	8016980 <STORAGE_Write_FS+0x30>

	  return (USBD_OK);
 801697c:	2300      	movs	r3, #0
 801697e:	e7ff      	b.n	8016980 <STORAGE_Write_FS+0x30>
	 }
  /* USER CODE END 7 */
}
 8016980:	4618      	mov	r0, r3
 8016982:	3710      	adds	r7, #16
 8016984:	46bd      	mov	sp, r7
 8016986:	bd80      	pop	{r7, pc}
 8016988:	240013f4 	.word	0x240013f4

0801698c <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 801698c:	b480      	push	{r7}
 801698e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8016990:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8016992:	4618      	mov	r0, r3
 8016994:	46bd      	mov	sp, r7
 8016996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801699a:	4770      	bx	lr

0801699c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801699c:	b580      	push	{r7, lr}
 801699e:	b08a      	sub	sp, #40	; 0x28
 80169a0:	af00      	add	r7, sp, #0
 80169a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80169a4:	f107 0314 	add.w	r3, r7, #20
 80169a8:	2200      	movs	r2, #0
 80169aa:	601a      	str	r2, [r3, #0]
 80169ac:	605a      	str	r2, [r3, #4]
 80169ae:	609a      	str	r2, [r3, #8]
 80169b0:	60da      	str	r2, [r3, #12]
 80169b2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	4a1e      	ldr	r2, [pc, #120]	; (8016a34 <HAL_PCD_MspInit+0x98>)
 80169ba:	4293      	cmp	r3, r2
 80169bc:	d136      	bne.n	8016a2c <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80169be:	4b1e      	ldr	r3, [pc, #120]	; (8016a38 <HAL_PCD_MspInit+0x9c>)
 80169c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80169c4:	4a1c      	ldr	r2, [pc, #112]	; (8016a38 <HAL_PCD_MspInit+0x9c>)
 80169c6:	f043 0301 	orr.w	r3, r3, #1
 80169ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80169ce:	4b1a      	ldr	r3, [pc, #104]	; (8016a38 <HAL_PCD_MspInit+0x9c>)
 80169d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80169d4:	f003 0301 	and.w	r3, r3, #1
 80169d8:	613b      	str	r3, [r7, #16]
 80169da:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80169dc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80169e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80169e2:	2302      	movs	r3, #2
 80169e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80169e6:	2300      	movs	r3, #0
 80169e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80169ea:	2300      	movs	r3, #0
 80169ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80169ee:	230a      	movs	r3, #10
 80169f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80169f2:	f107 0314 	add.w	r3, r7, #20
 80169f6:	4619      	mov	r1, r3
 80169f8:	4810      	ldr	r0, [pc, #64]	; (8016a3c <HAL_PCD_MspInit+0xa0>)
 80169fa:	f7ec fe79 	bl	80036f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80169fe:	4b0e      	ldr	r3, [pc, #56]	; (8016a38 <HAL_PCD_MspInit+0x9c>)
 8016a00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016a04:	4a0c      	ldr	r2, [pc, #48]	; (8016a38 <HAL_PCD_MspInit+0x9c>)
 8016a06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8016a0a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8016a0e:	4b0a      	ldr	r3, [pc, #40]	; (8016a38 <HAL_PCD_MspInit+0x9c>)
 8016a10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016a14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8016a18:	60fb      	str	r3, [r7, #12]
 8016a1a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8016a1c:	2200      	movs	r2, #0
 8016a1e:	2100      	movs	r1, #0
 8016a20:	2065      	movs	r0, #101	; 0x65
 8016a22:	f7eb f8bc 	bl	8001b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8016a26:	2065      	movs	r0, #101	; 0x65
 8016a28:	f7eb f8d3 	bl	8001bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8016a2c:	bf00      	nop
 8016a2e:	3728      	adds	r7, #40	; 0x28
 8016a30:	46bd      	mov	sp, r7
 8016a32:	bd80      	pop	{r7, pc}
 8016a34:	40080000 	.word	0x40080000
 8016a38:	58024400 	.word	0x58024400
 8016a3c:	58020000 	.word	0x58020000

08016a40 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a40:	b580      	push	{r7, lr}
 8016a42:	b082      	sub	sp, #8
 8016a44:	af00      	add	r7, sp, #0
 8016a46:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8016a54:	4619      	mov	r1, r3
 8016a56:	4610      	mov	r0, r2
 8016a58:	f7f9 fb41 	bl	80100de <USBD_LL_SetupStage>
}
 8016a5c:	bf00      	nop
 8016a5e:	3708      	adds	r7, #8
 8016a60:	46bd      	mov	sp, r7
 8016a62:	bd80      	pop	{r7, pc}

08016a64 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a64:	b580      	push	{r7, lr}
 8016a66:	b082      	sub	sp, #8
 8016a68:	af00      	add	r7, sp, #0
 8016a6a:	6078      	str	r0, [r7, #4]
 8016a6c:	460b      	mov	r3, r1
 8016a6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8016a76:	78fa      	ldrb	r2, [r7, #3]
 8016a78:	6879      	ldr	r1, [r7, #4]
 8016a7a:	4613      	mov	r3, r2
 8016a7c:	00db      	lsls	r3, r3, #3
 8016a7e:	1a9b      	subs	r3, r3, r2
 8016a80:	009b      	lsls	r3, r3, #2
 8016a82:	440b      	add	r3, r1
 8016a84:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8016a88:	681a      	ldr	r2, [r3, #0]
 8016a8a:	78fb      	ldrb	r3, [r7, #3]
 8016a8c:	4619      	mov	r1, r3
 8016a8e:	f7f9 fb71 	bl	8010174 <USBD_LL_DataOutStage>
}
 8016a92:	bf00      	nop
 8016a94:	3708      	adds	r7, #8
 8016a96:	46bd      	mov	sp, r7
 8016a98:	bd80      	pop	{r7, pc}

08016a9a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a9a:	b580      	push	{r7, lr}
 8016a9c:	b082      	sub	sp, #8
 8016a9e:	af00      	add	r7, sp, #0
 8016aa0:	6078      	str	r0, [r7, #4]
 8016aa2:	460b      	mov	r3, r1
 8016aa4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8016aac:	78fa      	ldrb	r2, [r7, #3]
 8016aae:	6879      	ldr	r1, [r7, #4]
 8016ab0:	4613      	mov	r3, r2
 8016ab2:	00db      	lsls	r3, r3, #3
 8016ab4:	1a9b      	subs	r3, r3, r2
 8016ab6:	009b      	lsls	r3, r3, #2
 8016ab8:	440b      	add	r3, r1
 8016aba:	3348      	adds	r3, #72	; 0x48
 8016abc:	681a      	ldr	r2, [r3, #0]
 8016abe:	78fb      	ldrb	r3, [r7, #3]
 8016ac0:	4619      	mov	r1, r3
 8016ac2:	f7f9 fbc8 	bl	8010256 <USBD_LL_DataInStage>
}
 8016ac6:	bf00      	nop
 8016ac8:	3708      	adds	r7, #8
 8016aca:	46bd      	mov	sp, r7
 8016acc:	bd80      	pop	{r7, pc}

08016ace <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ace:	b580      	push	{r7, lr}
 8016ad0:	b082      	sub	sp, #8
 8016ad2:	af00      	add	r7, sp, #0
 8016ad4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016adc:	4618      	mov	r0, r3
 8016ade:	f7f9 fcdb 	bl	8010498 <USBD_LL_SOF>
}
 8016ae2:	bf00      	nop
 8016ae4:	3708      	adds	r7, #8
 8016ae6:	46bd      	mov	sp, r7
 8016ae8:	bd80      	pop	{r7, pc}

08016aea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8016aea:	b580      	push	{r7, lr}
 8016aec:	b084      	sub	sp, #16
 8016aee:	af00      	add	r7, sp, #0
 8016af0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016af2:	2301      	movs	r3, #1
 8016af4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	68db      	ldr	r3, [r3, #12]
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d102      	bne.n	8016b04 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016afe:	2300      	movs	r3, #0
 8016b00:	73fb      	strb	r3, [r7, #15]
 8016b02:	e008      	b.n	8016b16 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	68db      	ldr	r3, [r3, #12]
 8016b08:	2b02      	cmp	r3, #2
 8016b0a:	d102      	bne.n	8016b12 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016b0c:	2301      	movs	r3, #1
 8016b0e:	73fb      	strb	r3, [r7, #15]
 8016b10:	e001      	b.n	8016b16 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016b12:	f7ea fb1d 	bl	8001150 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016b1c:	7bfa      	ldrb	r2, [r7, #15]
 8016b1e:	4611      	mov	r1, r2
 8016b20:	4618      	mov	r0, r3
 8016b22:	f7f9 fc7e 	bl	8010422 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016b2c:	4618      	mov	r0, r3
 8016b2e:	f7f9 fc37 	bl	80103a0 <USBD_LL_Reset>
}
 8016b32:	bf00      	nop
 8016b34:	3710      	adds	r7, #16
 8016b36:	46bd      	mov	sp, r7
 8016b38:	bd80      	pop	{r7, pc}
	...

08016b3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b3c:	b580      	push	{r7, lr}
 8016b3e:	b082      	sub	sp, #8
 8016b40:	af00      	add	r7, sp, #0
 8016b42:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016b4a:	4618      	mov	r0, r3
 8016b4c:	f7f9 fc79 	bl	8010442 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	681b      	ldr	r3, [r3, #0]
 8016b54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	687a      	ldr	r2, [r7, #4]
 8016b5c:	6812      	ldr	r2, [r2, #0]
 8016b5e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016b62:	f043 0301 	orr.w	r3, r3, #1
 8016b66:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	6a1b      	ldr	r3, [r3, #32]
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d005      	beq.n	8016b7c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016b70:	4b04      	ldr	r3, [pc, #16]	; (8016b84 <HAL_PCD_SuspendCallback+0x48>)
 8016b72:	691b      	ldr	r3, [r3, #16]
 8016b74:	4a03      	ldr	r2, [pc, #12]	; (8016b84 <HAL_PCD_SuspendCallback+0x48>)
 8016b76:	f043 0306 	orr.w	r3, r3, #6
 8016b7a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016b7c:	bf00      	nop
 8016b7e:	3708      	adds	r7, #8
 8016b80:	46bd      	mov	sp, r7
 8016b82:	bd80      	pop	{r7, pc}
 8016b84:	e000ed00 	.word	0xe000ed00

08016b88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b88:	b580      	push	{r7, lr}
 8016b8a:	b082      	sub	sp, #8
 8016b8c:	af00      	add	r7, sp, #0
 8016b8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016b96:	4618      	mov	r0, r3
 8016b98:	f7f9 fc68 	bl	801046c <USBD_LL_Resume>
}
 8016b9c:	bf00      	nop
 8016b9e:	3708      	adds	r7, #8
 8016ba0:	46bd      	mov	sp, r7
 8016ba2:	bd80      	pop	{r7, pc}

08016ba4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ba4:	b580      	push	{r7, lr}
 8016ba6:	b082      	sub	sp, #8
 8016ba8:	af00      	add	r7, sp, #0
 8016baa:	6078      	str	r0, [r7, #4]
 8016bac:	460b      	mov	r3, r1
 8016bae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016bb6:	78fa      	ldrb	r2, [r7, #3]
 8016bb8:	4611      	mov	r1, r2
 8016bba:	4618      	mov	r0, r3
 8016bbc:	f7f9 fc93 	bl	80104e6 <USBD_LL_IsoOUTIncomplete>
}
 8016bc0:	bf00      	nop
 8016bc2:	3708      	adds	r7, #8
 8016bc4:	46bd      	mov	sp, r7
 8016bc6:	bd80      	pop	{r7, pc}

08016bc8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016bc8:	b580      	push	{r7, lr}
 8016bca:	b082      	sub	sp, #8
 8016bcc:	af00      	add	r7, sp, #0
 8016bce:	6078      	str	r0, [r7, #4]
 8016bd0:	460b      	mov	r3, r1
 8016bd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016bda:	78fa      	ldrb	r2, [r7, #3]
 8016bdc:	4611      	mov	r1, r2
 8016bde:	4618      	mov	r0, r3
 8016be0:	f7f9 fc74 	bl	80104cc <USBD_LL_IsoINIncomplete>
}
 8016be4:	bf00      	nop
 8016be6:	3708      	adds	r7, #8
 8016be8:	46bd      	mov	sp, r7
 8016bea:	bd80      	pop	{r7, pc}

08016bec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016bec:	b580      	push	{r7, lr}
 8016bee:	b082      	sub	sp, #8
 8016bf0:	af00      	add	r7, sp, #0
 8016bf2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016bfa:	4618      	mov	r0, r3
 8016bfc:	f7f9 fc80 	bl	8010500 <USBD_LL_DevConnected>
}
 8016c00:	bf00      	nop
 8016c02:	3708      	adds	r7, #8
 8016c04:	46bd      	mov	sp, r7
 8016c06:	bd80      	pop	{r7, pc}

08016c08 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c08:	b580      	push	{r7, lr}
 8016c0a:	b082      	sub	sp, #8
 8016c0c:	af00      	add	r7, sp, #0
 8016c0e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016c16:	4618      	mov	r0, r3
 8016c18:	f7f9 fc7d 	bl	8010516 <USBD_LL_DevDisconnected>
}
 8016c1c:	bf00      	nop
 8016c1e:	3708      	adds	r7, #8
 8016c20:	46bd      	mov	sp, r7
 8016c22:	bd80      	pop	{r7, pc}

08016c24 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016c24:	b580      	push	{r7, lr}
 8016c26:	b082      	sub	sp, #8
 8016c28:	af00      	add	r7, sp, #0
 8016c2a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	781b      	ldrb	r3, [r3, #0]
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	d13e      	bne.n	8016cb2 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8016c34:	4a21      	ldr	r2, [pc, #132]	; (8016cbc <USBD_LL_Init+0x98>)
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	4a1f      	ldr	r2, [pc, #124]	; (8016cbc <USBD_LL_Init+0x98>)
 8016c40:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8016c44:	4b1d      	ldr	r3, [pc, #116]	; (8016cbc <USBD_LL_Init+0x98>)
 8016c46:	4a1e      	ldr	r2, [pc, #120]	; (8016cc0 <USBD_LL_Init+0x9c>)
 8016c48:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8016c4a:	4b1c      	ldr	r3, [pc, #112]	; (8016cbc <USBD_LL_Init+0x98>)
 8016c4c:	2209      	movs	r2, #9
 8016c4e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8016c50:	4b1a      	ldr	r3, [pc, #104]	; (8016cbc <USBD_LL_Init+0x98>)
 8016c52:	2202      	movs	r2, #2
 8016c54:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8016c56:	4b19      	ldr	r3, [pc, #100]	; (8016cbc <USBD_LL_Init+0x98>)
 8016c58:	2200      	movs	r2, #0
 8016c5a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016c5c:	4b17      	ldr	r3, [pc, #92]	; (8016cbc <USBD_LL_Init+0x98>)
 8016c5e:	2202      	movs	r2, #2
 8016c60:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8016c62:	4b16      	ldr	r3, [pc, #88]	; (8016cbc <USBD_LL_Init+0x98>)
 8016c64:	2200      	movs	r2, #0
 8016c66:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8016c68:	4b14      	ldr	r3, [pc, #80]	; (8016cbc <USBD_LL_Init+0x98>)
 8016c6a:	2200      	movs	r2, #0
 8016c6c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8016c6e:	4b13      	ldr	r3, [pc, #76]	; (8016cbc <USBD_LL_Init+0x98>)
 8016c70:	2200      	movs	r2, #0
 8016c72:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8016c74:	4b11      	ldr	r3, [pc, #68]	; (8016cbc <USBD_LL_Init+0x98>)
 8016c76:	2200      	movs	r2, #0
 8016c78:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8016c7a:	4b10      	ldr	r3, [pc, #64]	; (8016cbc <USBD_LL_Init+0x98>)
 8016c7c:	2200      	movs	r2, #0
 8016c7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016c80:	4b0e      	ldr	r3, [pc, #56]	; (8016cbc <USBD_LL_Init+0x98>)
 8016c82:	2200      	movs	r2, #0
 8016c84:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8016c86:	480d      	ldr	r0, [pc, #52]	; (8016cbc <USBD_LL_Init+0x98>)
 8016c88:	f7ec ff53 	bl	8003b32 <HAL_PCD_Init>
 8016c8c:	4603      	mov	r3, r0
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d001      	beq.n	8016c96 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8016c92:	f7ea fa5d 	bl	8001150 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8016c96:	2180      	movs	r1, #128	; 0x80
 8016c98:	4808      	ldr	r0, [pc, #32]	; (8016cbc <USBD_LL_Init+0x98>)
 8016c9a:	f7ee f912 	bl	8004ec2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8016c9e:	2240      	movs	r2, #64	; 0x40
 8016ca0:	2100      	movs	r1, #0
 8016ca2:	4806      	ldr	r0, [pc, #24]	; (8016cbc <USBD_LL_Init+0x98>)
 8016ca4:	f7ee f8c6 	bl	8004e34 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8016ca8:	2280      	movs	r2, #128	; 0x80
 8016caa:	2101      	movs	r1, #1
 8016cac:	4803      	ldr	r0, [pc, #12]	; (8016cbc <USBD_LL_Init+0x98>)
 8016cae:	f7ee f8c1 	bl	8004e34 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8016cb2:	2300      	movs	r3, #0
}
 8016cb4:	4618      	mov	r0, r3
 8016cb6:	3708      	adds	r7, #8
 8016cb8:	46bd      	mov	sp, r7
 8016cba:	bd80      	pop	{r7, pc}
 8016cbc:	24007de8 	.word	0x24007de8
 8016cc0:	40080000 	.word	0x40080000

08016cc4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016cc4:	b580      	push	{r7, lr}
 8016cc6:	b084      	sub	sp, #16
 8016cc8:	af00      	add	r7, sp, #0
 8016cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ccc:	2300      	movs	r3, #0
 8016cce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016cd0:	2300      	movs	r3, #0
 8016cd2:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016cda:	4618      	mov	r0, r3
 8016cdc:	f7ed f84d 	bl	8003d7a <HAL_PCD_Start>
 8016ce0:	4603      	mov	r3, r0
 8016ce2:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8016ce4:	7bfb      	ldrb	r3, [r7, #15]
 8016ce6:	4618      	mov	r0, r3
 8016ce8:	f000 f94e 	bl	8016f88 <USBD_Get_USB_Status>
 8016cec:	4603      	mov	r3, r0
 8016cee:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8016cf0:	7bbb      	ldrb	r3, [r7, #14]
}
 8016cf2:	4618      	mov	r0, r3
 8016cf4:	3710      	adds	r7, #16
 8016cf6:	46bd      	mov	sp, r7
 8016cf8:	bd80      	pop	{r7, pc}

08016cfa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016cfa:	b580      	push	{r7, lr}
 8016cfc:	b084      	sub	sp, #16
 8016cfe:	af00      	add	r7, sp, #0
 8016d00:	6078      	str	r0, [r7, #4]
 8016d02:	4608      	mov	r0, r1
 8016d04:	4611      	mov	r1, r2
 8016d06:	461a      	mov	r2, r3
 8016d08:	4603      	mov	r3, r0
 8016d0a:	70fb      	strb	r3, [r7, #3]
 8016d0c:	460b      	mov	r3, r1
 8016d0e:	70bb      	strb	r3, [r7, #2]
 8016d10:	4613      	mov	r3, r2
 8016d12:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d14:	2300      	movs	r3, #0
 8016d16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d18:	2300      	movs	r3, #0
 8016d1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8016d22:	78bb      	ldrb	r3, [r7, #2]
 8016d24:	883a      	ldrh	r2, [r7, #0]
 8016d26:	78f9      	ldrb	r1, [r7, #3]
 8016d28:	f7ed fc5e 	bl	80045e8 <HAL_PCD_EP_Open>
 8016d2c:	4603      	mov	r3, r0
 8016d2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d30:	7bfb      	ldrb	r3, [r7, #15]
 8016d32:	4618      	mov	r0, r3
 8016d34:	f000 f928 	bl	8016f88 <USBD_Get_USB_Status>
 8016d38:	4603      	mov	r3, r0
 8016d3a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8016d3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8016d3e:	4618      	mov	r0, r3
 8016d40:	3710      	adds	r7, #16
 8016d42:	46bd      	mov	sp, r7
 8016d44:	bd80      	pop	{r7, pc}

08016d46 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016d46:	b580      	push	{r7, lr}
 8016d48:	b084      	sub	sp, #16
 8016d4a:	af00      	add	r7, sp, #0
 8016d4c:	6078      	str	r0, [r7, #4]
 8016d4e:	460b      	mov	r3, r1
 8016d50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d52:	2300      	movs	r3, #0
 8016d54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d56:	2300      	movs	r3, #0
 8016d58:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016d60:	78fa      	ldrb	r2, [r7, #3]
 8016d62:	4611      	mov	r1, r2
 8016d64:	4618      	mov	r0, r3
 8016d66:	f7ed fca7 	bl	80046b8 <HAL_PCD_EP_Close>
 8016d6a:	4603      	mov	r3, r0
 8016d6c:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8016d6e:	7bfb      	ldrb	r3, [r7, #15]
 8016d70:	4618      	mov	r0, r3
 8016d72:	f000 f909 	bl	8016f88 <USBD_Get_USB_Status>
 8016d76:	4603      	mov	r3, r0
 8016d78:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8016d7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8016d7c:	4618      	mov	r0, r3
 8016d7e:	3710      	adds	r7, #16
 8016d80:	46bd      	mov	sp, r7
 8016d82:	bd80      	pop	{r7, pc}

08016d84 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016d84:	b580      	push	{r7, lr}
 8016d86:	b084      	sub	sp, #16
 8016d88:	af00      	add	r7, sp, #0
 8016d8a:	6078      	str	r0, [r7, #4]
 8016d8c:	460b      	mov	r3, r1
 8016d8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d90:	2300      	movs	r3, #0
 8016d92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d94:	2300      	movs	r3, #0
 8016d96:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016d9e:	78fa      	ldrb	r2, [r7, #3]
 8016da0:	4611      	mov	r1, r2
 8016da2:	4618      	mov	r0, r3
 8016da4:	f7ed fe39 	bl	8004a1a <HAL_PCD_EP_Flush>
 8016da8:	4603      	mov	r3, r0
 8016daa:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8016dac:	7bfb      	ldrb	r3, [r7, #15]
 8016dae:	4618      	mov	r0, r3
 8016db0:	f000 f8ea 	bl	8016f88 <USBD_Get_USB_Status>
 8016db4:	4603      	mov	r3, r0
 8016db6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8016db8:	7bbb      	ldrb	r3, [r7, #14]
}
 8016dba:	4618      	mov	r0, r3
 8016dbc:	3710      	adds	r7, #16
 8016dbe:	46bd      	mov	sp, r7
 8016dc0:	bd80      	pop	{r7, pc}

08016dc2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016dc2:	b580      	push	{r7, lr}
 8016dc4:	b084      	sub	sp, #16
 8016dc6:	af00      	add	r7, sp, #0
 8016dc8:	6078      	str	r0, [r7, #4]
 8016dca:	460b      	mov	r3, r1
 8016dcc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016dce:	2300      	movs	r3, #0
 8016dd0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016dd2:	2300      	movs	r3, #0
 8016dd4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016ddc:	78fa      	ldrb	r2, [r7, #3]
 8016dde:	4611      	mov	r1, r2
 8016de0:	4618      	mov	r0, r3
 8016de2:	f7ed fd60 	bl	80048a6 <HAL_PCD_EP_SetStall>
 8016de6:	4603      	mov	r3, r0
 8016de8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016dea:	7bfb      	ldrb	r3, [r7, #15]
 8016dec:	4618      	mov	r0, r3
 8016dee:	f000 f8cb 	bl	8016f88 <USBD_Get_USB_Status>
 8016df2:	4603      	mov	r3, r0
 8016df4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8016df6:	7bbb      	ldrb	r3, [r7, #14]
}
 8016df8:	4618      	mov	r0, r3
 8016dfa:	3710      	adds	r7, #16
 8016dfc:	46bd      	mov	sp, r7
 8016dfe:	bd80      	pop	{r7, pc}

08016e00 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e00:	b580      	push	{r7, lr}
 8016e02:	b084      	sub	sp, #16
 8016e04:	af00      	add	r7, sp, #0
 8016e06:	6078      	str	r0, [r7, #4]
 8016e08:	460b      	mov	r3, r1
 8016e0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e0c:	2300      	movs	r3, #0
 8016e0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e10:	2300      	movs	r3, #0
 8016e12:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016e1a:	78fa      	ldrb	r2, [r7, #3]
 8016e1c:	4611      	mov	r1, r2
 8016e1e:	4618      	mov	r0, r3
 8016e20:	f7ed fda5 	bl	800496e <HAL_PCD_EP_ClrStall>
 8016e24:	4603      	mov	r3, r0
 8016e26:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8016e28:	7bfb      	ldrb	r3, [r7, #15]
 8016e2a:	4618      	mov	r0, r3
 8016e2c:	f000 f8ac 	bl	8016f88 <USBD_Get_USB_Status>
 8016e30:	4603      	mov	r3, r0
 8016e32:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8016e34:	7bbb      	ldrb	r3, [r7, #14]
}
 8016e36:	4618      	mov	r0, r3
 8016e38:	3710      	adds	r7, #16
 8016e3a:	46bd      	mov	sp, r7
 8016e3c:	bd80      	pop	{r7, pc}

08016e3e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e3e:	b480      	push	{r7}
 8016e40:	b085      	sub	sp, #20
 8016e42:	af00      	add	r7, sp, #0
 8016e44:	6078      	str	r0, [r7, #4]
 8016e46:	460b      	mov	r3, r1
 8016e48:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016e50:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8016e52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	da0b      	bge.n	8016e72 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8016e5a:	78fb      	ldrb	r3, [r7, #3]
 8016e5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016e60:	68f9      	ldr	r1, [r7, #12]
 8016e62:	4613      	mov	r3, r2
 8016e64:	00db      	lsls	r3, r3, #3
 8016e66:	1a9b      	subs	r3, r3, r2
 8016e68:	009b      	lsls	r3, r3, #2
 8016e6a:	440b      	add	r3, r1
 8016e6c:	333e      	adds	r3, #62	; 0x3e
 8016e6e:	781b      	ldrb	r3, [r3, #0]
 8016e70:	e00b      	b.n	8016e8a <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8016e72:	78fb      	ldrb	r3, [r7, #3]
 8016e74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016e78:	68f9      	ldr	r1, [r7, #12]
 8016e7a:	4613      	mov	r3, r2
 8016e7c:	00db      	lsls	r3, r3, #3
 8016e7e:	1a9b      	subs	r3, r3, r2
 8016e80:	009b      	lsls	r3, r3, #2
 8016e82:	440b      	add	r3, r1
 8016e84:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016e88:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016e8a:	4618      	mov	r0, r3
 8016e8c:	3714      	adds	r7, #20
 8016e8e:	46bd      	mov	sp, r7
 8016e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e94:	4770      	bx	lr

08016e96 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016e96:	b580      	push	{r7, lr}
 8016e98:	b084      	sub	sp, #16
 8016e9a:	af00      	add	r7, sp, #0
 8016e9c:	6078      	str	r0, [r7, #4]
 8016e9e:	460b      	mov	r3, r1
 8016ea0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ea2:	2300      	movs	r3, #0
 8016ea4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ea6:	2300      	movs	r3, #0
 8016ea8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016eb0:	78fa      	ldrb	r2, [r7, #3]
 8016eb2:	4611      	mov	r1, r2
 8016eb4:	4618      	mov	r0, r3
 8016eb6:	f7ed fb72 	bl	800459e <HAL_PCD_SetAddress>
 8016eba:	4603      	mov	r3, r0
 8016ebc:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8016ebe:	7bfb      	ldrb	r3, [r7, #15]
 8016ec0:	4618      	mov	r0, r3
 8016ec2:	f000 f861 	bl	8016f88 <USBD_Get_USB_Status>
 8016ec6:	4603      	mov	r3, r0
 8016ec8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8016eca:	7bbb      	ldrb	r3, [r7, #14]
}
 8016ecc:	4618      	mov	r0, r3
 8016ece:	3710      	adds	r7, #16
 8016ed0:	46bd      	mov	sp, r7
 8016ed2:	bd80      	pop	{r7, pc}

08016ed4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8016ed4:	b580      	push	{r7, lr}
 8016ed6:	b086      	sub	sp, #24
 8016ed8:	af00      	add	r7, sp, #0
 8016eda:	60f8      	str	r0, [r7, #12]
 8016edc:	607a      	str	r2, [r7, #4]
 8016ede:	461a      	mov	r2, r3
 8016ee0:	460b      	mov	r3, r1
 8016ee2:	72fb      	strb	r3, [r7, #11]
 8016ee4:	4613      	mov	r3, r2
 8016ee6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ee8:	2300      	movs	r3, #0
 8016eea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016eec:	2300      	movs	r3, #0
 8016eee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016ef0:	68fb      	ldr	r3, [r7, #12]
 8016ef2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8016ef6:	893b      	ldrh	r3, [r7, #8]
 8016ef8:	7af9      	ldrb	r1, [r7, #11]
 8016efa:	687a      	ldr	r2, [r7, #4]
 8016efc:	f7ed fc89 	bl	8004812 <HAL_PCD_EP_Transmit>
 8016f00:	4603      	mov	r3, r0
 8016f02:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8016f04:	7dfb      	ldrb	r3, [r7, #23]
 8016f06:	4618      	mov	r0, r3
 8016f08:	f000 f83e 	bl	8016f88 <USBD_Get_USB_Status>
 8016f0c:	4603      	mov	r3, r0
 8016f0e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8016f10:	7dbb      	ldrb	r3, [r7, #22]
}
 8016f12:	4618      	mov	r0, r3
 8016f14:	3718      	adds	r7, #24
 8016f16:	46bd      	mov	sp, r7
 8016f18:	bd80      	pop	{r7, pc}

08016f1a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8016f1a:	b580      	push	{r7, lr}
 8016f1c:	b086      	sub	sp, #24
 8016f1e:	af00      	add	r7, sp, #0
 8016f20:	60f8      	str	r0, [r7, #12]
 8016f22:	607a      	str	r2, [r7, #4]
 8016f24:	461a      	mov	r2, r3
 8016f26:	460b      	mov	r3, r1
 8016f28:	72fb      	strb	r3, [r7, #11]
 8016f2a:	4613      	mov	r3, r2
 8016f2c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016f2e:	2300      	movs	r3, #0
 8016f30:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f32:	2300      	movs	r3, #0
 8016f34:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016f36:	68fb      	ldr	r3, [r7, #12]
 8016f38:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8016f3c:	893b      	ldrh	r3, [r7, #8]
 8016f3e:	7af9      	ldrb	r1, [r7, #11]
 8016f40:	687a      	ldr	r2, [r7, #4]
 8016f42:	f7ed fc03 	bl	800474c <HAL_PCD_EP_Receive>
 8016f46:	4603      	mov	r3, r0
 8016f48:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8016f4a:	7dfb      	ldrb	r3, [r7, #23]
 8016f4c:	4618      	mov	r0, r3
 8016f4e:	f000 f81b 	bl	8016f88 <USBD_Get_USB_Status>
 8016f52:	4603      	mov	r3, r0
 8016f54:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8016f56:	7dbb      	ldrb	r3, [r7, #22]
}
 8016f58:	4618      	mov	r0, r3
 8016f5a:	3718      	adds	r7, #24
 8016f5c:	46bd      	mov	sp, r7
 8016f5e:	bd80      	pop	{r7, pc}

08016f60 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016f60:	b580      	push	{r7, lr}
 8016f62:	b082      	sub	sp, #8
 8016f64:	af00      	add	r7, sp, #0
 8016f66:	6078      	str	r0, [r7, #4]
 8016f68:	460b      	mov	r3, r1
 8016f6a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016f72:	78fa      	ldrb	r2, [r7, #3]
 8016f74:	4611      	mov	r1, r2
 8016f76:	4618      	mov	r0, r3
 8016f78:	f7ed fc33 	bl	80047e2 <HAL_PCD_EP_GetRxCount>
 8016f7c:	4603      	mov	r3, r0
}
 8016f7e:	4618      	mov	r0, r3
 8016f80:	3708      	adds	r7, #8
 8016f82:	46bd      	mov	sp, r7
 8016f84:	bd80      	pop	{r7, pc}
	...

08016f88 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016f88:	b480      	push	{r7}
 8016f8a:	b085      	sub	sp, #20
 8016f8c:	af00      	add	r7, sp, #0
 8016f8e:	4603      	mov	r3, r0
 8016f90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f92:	2300      	movs	r3, #0
 8016f94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016f96:	79fb      	ldrb	r3, [r7, #7]
 8016f98:	2b03      	cmp	r3, #3
 8016f9a:	d817      	bhi.n	8016fcc <USBD_Get_USB_Status+0x44>
 8016f9c:	a201      	add	r2, pc, #4	; (adr r2, 8016fa4 <USBD_Get_USB_Status+0x1c>)
 8016f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016fa2:	bf00      	nop
 8016fa4:	08016fb5 	.word	0x08016fb5
 8016fa8:	08016fbb 	.word	0x08016fbb
 8016fac:	08016fc1 	.word	0x08016fc1
 8016fb0:	08016fc7 	.word	0x08016fc7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016fb4:	2300      	movs	r3, #0
 8016fb6:	73fb      	strb	r3, [r7, #15]
    break;
 8016fb8:	e00b      	b.n	8016fd2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016fba:	2302      	movs	r3, #2
 8016fbc:	73fb      	strb	r3, [r7, #15]
    break;
 8016fbe:	e008      	b.n	8016fd2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016fc0:	2301      	movs	r3, #1
 8016fc2:	73fb      	strb	r3, [r7, #15]
    break;
 8016fc4:	e005      	b.n	8016fd2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016fc6:	2302      	movs	r3, #2
 8016fc8:	73fb      	strb	r3, [r7, #15]
    break;
 8016fca:	e002      	b.n	8016fd2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016fcc:	2302      	movs	r3, #2
 8016fce:	73fb      	strb	r3, [r7, #15]
    break;
 8016fd0:	bf00      	nop
  }
  return usb_status;
 8016fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8016fd4:	4618      	mov	r0, r3
 8016fd6:	3714      	adds	r7, #20
 8016fd8:	46bd      	mov	sp, r7
 8016fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fde:	4770      	bx	lr

08016fe0 <__errno>:
 8016fe0:	4b01      	ldr	r3, [pc, #4]	; (8016fe8 <__errno+0x8>)
 8016fe2:	6818      	ldr	r0, [r3, #0]
 8016fe4:	4770      	bx	lr
 8016fe6:	bf00      	nop
 8016fe8:	24000124 	.word	0x24000124

08016fec <__libc_init_array>:
 8016fec:	b570      	push	{r4, r5, r6, lr}
 8016fee:	4e0d      	ldr	r6, [pc, #52]	; (8017024 <__libc_init_array+0x38>)
 8016ff0:	4c0d      	ldr	r4, [pc, #52]	; (8017028 <__libc_init_array+0x3c>)
 8016ff2:	1ba4      	subs	r4, r4, r6
 8016ff4:	10a4      	asrs	r4, r4, #2
 8016ff6:	2500      	movs	r5, #0
 8016ff8:	42a5      	cmp	r5, r4
 8016ffa:	d109      	bne.n	8017010 <__libc_init_array+0x24>
 8016ffc:	4e0b      	ldr	r6, [pc, #44]	; (801702c <__libc_init_array+0x40>)
 8016ffe:	4c0c      	ldr	r4, [pc, #48]	; (8017030 <__libc_init_array+0x44>)
 8017000:	f000 f8f6 	bl	80171f0 <_init>
 8017004:	1ba4      	subs	r4, r4, r6
 8017006:	10a4      	asrs	r4, r4, #2
 8017008:	2500      	movs	r5, #0
 801700a:	42a5      	cmp	r5, r4
 801700c:	d105      	bne.n	801701a <__libc_init_array+0x2e>
 801700e:	bd70      	pop	{r4, r5, r6, pc}
 8017010:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017014:	4798      	blx	r3
 8017016:	3501      	adds	r5, #1
 8017018:	e7ee      	b.n	8016ff8 <__libc_init_array+0xc>
 801701a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801701e:	4798      	blx	r3
 8017020:	3501      	adds	r5, #1
 8017022:	e7f2      	b.n	801700a <__libc_init_array+0x1e>
 8017024:	080177ec 	.word	0x080177ec
 8017028:	080177ec 	.word	0x080177ec
 801702c:	080177ec 	.word	0x080177ec
 8017030:	080177f0 	.word	0x080177f0

08017034 <malloc>:
 8017034:	4b02      	ldr	r3, [pc, #8]	; (8017040 <malloc+0xc>)
 8017036:	4601      	mov	r1, r0
 8017038:	6818      	ldr	r0, [r3, #0]
 801703a:	f000 b86d 	b.w	8017118 <_malloc_r>
 801703e:	bf00      	nop
 8017040:	24000124 	.word	0x24000124

08017044 <free>:
 8017044:	4b02      	ldr	r3, [pc, #8]	; (8017050 <free+0xc>)
 8017046:	4601      	mov	r1, r0
 8017048:	6818      	ldr	r0, [r3, #0]
 801704a:	f000 b817 	b.w	801707c <_free_r>
 801704e:	bf00      	nop
 8017050:	24000124 	.word	0x24000124

08017054 <memcpy>:
 8017054:	b510      	push	{r4, lr}
 8017056:	1e43      	subs	r3, r0, #1
 8017058:	440a      	add	r2, r1
 801705a:	4291      	cmp	r1, r2
 801705c:	d100      	bne.n	8017060 <memcpy+0xc>
 801705e:	bd10      	pop	{r4, pc}
 8017060:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017064:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017068:	e7f7      	b.n	801705a <memcpy+0x6>

0801706a <memset>:
 801706a:	4402      	add	r2, r0
 801706c:	4603      	mov	r3, r0
 801706e:	4293      	cmp	r3, r2
 8017070:	d100      	bne.n	8017074 <memset+0xa>
 8017072:	4770      	bx	lr
 8017074:	f803 1b01 	strb.w	r1, [r3], #1
 8017078:	e7f9      	b.n	801706e <memset+0x4>
	...

0801707c <_free_r>:
 801707c:	b538      	push	{r3, r4, r5, lr}
 801707e:	4605      	mov	r5, r0
 8017080:	2900      	cmp	r1, #0
 8017082:	d045      	beq.n	8017110 <_free_r+0x94>
 8017084:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017088:	1f0c      	subs	r4, r1, #4
 801708a:	2b00      	cmp	r3, #0
 801708c:	bfb8      	it	lt
 801708e:	18e4      	addlt	r4, r4, r3
 8017090:	f000 f8ac 	bl	80171ec <__malloc_lock>
 8017094:	4a1f      	ldr	r2, [pc, #124]	; (8017114 <_free_r+0x98>)
 8017096:	6813      	ldr	r3, [r2, #0]
 8017098:	4610      	mov	r0, r2
 801709a:	b933      	cbnz	r3, 80170aa <_free_r+0x2e>
 801709c:	6063      	str	r3, [r4, #4]
 801709e:	6014      	str	r4, [r2, #0]
 80170a0:	4628      	mov	r0, r5
 80170a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80170a6:	f000 b8a2 	b.w	80171ee <__malloc_unlock>
 80170aa:	42a3      	cmp	r3, r4
 80170ac:	d90c      	bls.n	80170c8 <_free_r+0x4c>
 80170ae:	6821      	ldr	r1, [r4, #0]
 80170b0:	1862      	adds	r2, r4, r1
 80170b2:	4293      	cmp	r3, r2
 80170b4:	bf04      	itt	eq
 80170b6:	681a      	ldreq	r2, [r3, #0]
 80170b8:	685b      	ldreq	r3, [r3, #4]
 80170ba:	6063      	str	r3, [r4, #4]
 80170bc:	bf04      	itt	eq
 80170be:	1852      	addeq	r2, r2, r1
 80170c0:	6022      	streq	r2, [r4, #0]
 80170c2:	6004      	str	r4, [r0, #0]
 80170c4:	e7ec      	b.n	80170a0 <_free_r+0x24>
 80170c6:	4613      	mov	r3, r2
 80170c8:	685a      	ldr	r2, [r3, #4]
 80170ca:	b10a      	cbz	r2, 80170d0 <_free_r+0x54>
 80170cc:	42a2      	cmp	r2, r4
 80170ce:	d9fa      	bls.n	80170c6 <_free_r+0x4a>
 80170d0:	6819      	ldr	r1, [r3, #0]
 80170d2:	1858      	adds	r0, r3, r1
 80170d4:	42a0      	cmp	r0, r4
 80170d6:	d10b      	bne.n	80170f0 <_free_r+0x74>
 80170d8:	6820      	ldr	r0, [r4, #0]
 80170da:	4401      	add	r1, r0
 80170dc:	1858      	adds	r0, r3, r1
 80170de:	4282      	cmp	r2, r0
 80170e0:	6019      	str	r1, [r3, #0]
 80170e2:	d1dd      	bne.n	80170a0 <_free_r+0x24>
 80170e4:	6810      	ldr	r0, [r2, #0]
 80170e6:	6852      	ldr	r2, [r2, #4]
 80170e8:	605a      	str	r2, [r3, #4]
 80170ea:	4401      	add	r1, r0
 80170ec:	6019      	str	r1, [r3, #0]
 80170ee:	e7d7      	b.n	80170a0 <_free_r+0x24>
 80170f0:	d902      	bls.n	80170f8 <_free_r+0x7c>
 80170f2:	230c      	movs	r3, #12
 80170f4:	602b      	str	r3, [r5, #0]
 80170f6:	e7d3      	b.n	80170a0 <_free_r+0x24>
 80170f8:	6820      	ldr	r0, [r4, #0]
 80170fa:	1821      	adds	r1, r4, r0
 80170fc:	428a      	cmp	r2, r1
 80170fe:	bf04      	itt	eq
 8017100:	6811      	ldreq	r1, [r2, #0]
 8017102:	6852      	ldreq	r2, [r2, #4]
 8017104:	6062      	str	r2, [r4, #4]
 8017106:	bf04      	itt	eq
 8017108:	1809      	addeq	r1, r1, r0
 801710a:	6021      	streq	r1, [r4, #0]
 801710c:	605c      	str	r4, [r3, #4]
 801710e:	e7c7      	b.n	80170a0 <_free_r+0x24>
 8017110:	bd38      	pop	{r3, r4, r5, pc}
 8017112:	bf00      	nop
 8017114:	240002b0 	.word	0x240002b0

08017118 <_malloc_r>:
 8017118:	b570      	push	{r4, r5, r6, lr}
 801711a:	1ccd      	adds	r5, r1, #3
 801711c:	f025 0503 	bic.w	r5, r5, #3
 8017120:	3508      	adds	r5, #8
 8017122:	2d0c      	cmp	r5, #12
 8017124:	bf38      	it	cc
 8017126:	250c      	movcc	r5, #12
 8017128:	2d00      	cmp	r5, #0
 801712a:	4606      	mov	r6, r0
 801712c:	db01      	blt.n	8017132 <_malloc_r+0x1a>
 801712e:	42a9      	cmp	r1, r5
 8017130:	d903      	bls.n	801713a <_malloc_r+0x22>
 8017132:	230c      	movs	r3, #12
 8017134:	6033      	str	r3, [r6, #0]
 8017136:	2000      	movs	r0, #0
 8017138:	bd70      	pop	{r4, r5, r6, pc}
 801713a:	f000 f857 	bl	80171ec <__malloc_lock>
 801713e:	4a21      	ldr	r2, [pc, #132]	; (80171c4 <_malloc_r+0xac>)
 8017140:	6814      	ldr	r4, [r2, #0]
 8017142:	4621      	mov	r1, r4
 8017144:	b991      	cbnz	r1, 801716c <_malloc_r+0x54>
 8017146:	4c20      	ldr	r4, [pc, #128]	; (80171c8 <_malloc_r+0xb0>)
 8017148:	6823      	ldr	r3, [r4, #0]
 801714a:	b91b      	cbnz	r3, 8017154 <_malloc_r+0x3c>
 801714c:	4630      	mov	r0, r6
 801714e:	f000 f83d 	bl	80171cc <_sbrk_r>
 8017152:	6020      	str	r0, [r4, #0]
 8017154:	4629      	mov	r1, r5
 8017156:	4630      	mov	r0, r6
 8017158:	f000 f838 	bl	80171cc <_sbrk_r>
 801715c:	1c43      	adds	r3, r0, #1
 801715e:	d124      	bne.n	80171aa <_malloc_r+0x92>
 8017160:	230c      	movs	r3, #12
 8017162:	6033      	str	r3, [r6, #0]
 8017164:	4630      	mov	r0, r6
 8017166:	f000 f842 	bl	80171ee <__malloc_unlock>
 801716a:	e7e4      	b.n	8017136 <_malloc_r+0x1e>
 801716c:	680b      	ldr	r3, [r1, #0]
 801716e:	1b5b      	subs	r3, r3, r5
 8017170:	d418      	bmi.n	80171a4 <_malloc_r+0x8c>
 8017172:	2b0b      	cmp	r3, #11
 8017174:	d90f      	bls.n	8017196 <_malloc_r+0x7e>
 8017176:	600b      	str	r3, [r1, #0]
 8017178:	50cd      	str	r5, [r1, r3]
 801717a:	18cc      	adds	r4, r1, r3
 801717c:	4630      	mov	r0, r6
 801717e:	f000 f836 	bl	80171ee <__malloc_unlock>
 8017182:	f104 000b 	add.w	r0, r4, #11
 8017186:	1d23      	adds	r3, r4, #4
 8017188:	f020 0007 	bic.w	r0, r0, #7
 801718c:	1ac3      	subs	r3, r0, r3
 801718e:	d0d3      	beq.n	8017138 <_malloc_r+0x20>
 8017190:	425a      	negs	r2, r3
 8017192:	50e2      	str	r2, [r4, r3]
 8017194:	e7d0      	b.n	8017138 <_malloc_r+0x20>
 8017196:	428c      	cmp	r4, r1
 8017198:	684b      	ldr	r3, [r1, #4]
 801719a:	bf16      	itet	ne
 801719c:	6063      	strne	r3, [r4, #4]
 801719e:	6013      	streq	r3, [r2, #0]
 80171a0:	460c      	movne	r4, r1
 80171a2:	e7eb      	b.n	801717c <_malloc_r+0x64>
 80171a4:	460c      	mov	r4, r1
 80171a6:	6849      	ldr	r1, [r1, #4]
 80171a8:	e7cc      	b.n	8017144 <_malloc_r+0x2c>
 80171aa:	1cc4      	adds	r4, r0, #3
 80171ac:	f024 0403 	bic.w	r4, r4, #3
 80171b0:	42a0      	cmp	r0, r4
 80171b2:	d005      	beq.n	80171c0 <_malloc_r+0xa8>
 80171b4:	1a21      	subs	r1, r4, r0
 80171b6:	4630      	mov	r0, r6
 80171b8:	f000 f808 	bl	80171cc <_sbrk_r>
 80171bc:	3001      	adds	r0, #1
 80171be:	d0cf      	beq.n	8017160 <_malloc_r+0x48>
 80171c0:	6025      	str	r5, [r4, #0]
 80171c2:	e7db      	b.n	801717c <_malloc_r+0x64>
 80171c4:	240002b0 	.word	0x240002b0
 80171c8:	240002b4 	.word	0x240002b4

080171cc <_sbrk_r>:
 80171cc:	b538      	push	{r3, r4, r5, lr}
 80171ce:	4c06      	ldr	r4, [pc, #24]	; (80171e8 <_sbrk_r+0x1c>)
 80171d0:	2300      	movs	r3, #0
 80171d2:	4605      	mov	r5, r0
 80171d4:	4608      	mov	r0, r1
 80171d6:	6023      	str	r3, [r4, #0]
 80171d8:	f7ea fa7a 	bl	80016d0 <_sbrk>
 80171dc:	1c43      	adds	r3, r0, #1
 80171de:	d102      	bne.n	80171e6 <_sbrk_r+0x1a>
 80171e0:	6823      	ldr	r3, [r4, #0]
 80171e2:	b103      	cbz	r3, 80171e6 <_sbrk_r+0x1a>
 80171e4:	602b      	str	r3, [r5, #0]
 80171e6:	bd38      	pop	{r3, r4, r5, pc}
 80171e8:	240081f0 	.word	0x240081f0

080171ec <__malloc_lock>:
 80171ec:	4770      	bx	lr

080171ee <__malloc_unlock>:
 80171ee:	4770      	bx	lr

080171f0 <_init>:
 80171f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171f2:	bf00      	nop
 80171f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80171f6:	bc08      	pop	{r3}
 80171f8:	469e      	mov	lr, r3
 80171fa:	4770      	bx	lr

080171fc <_fini>:
 80171fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171fe:	bf00      	nop
 8017200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017202:	bc08      	pop	{r3}
 8017204:	469e      	mov	lr, r3
 8017206:	4770      	bx	lr
