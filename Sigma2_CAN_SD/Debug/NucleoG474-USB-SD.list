
NucleoG474-USB-SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d80  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007f58  08007f58  00017f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f90  08007f90  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08007f90  08007f90  00017f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f98  08007f98  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f98  08007f98  00017f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f9c  08007f9c  00017f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08007fa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ab0  20000024  08007fc4  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ad4  08007fc4  00020ad4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d3f8  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000036c8  00000000  00000000  0003d44c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001720  00000000  00000000  00040b18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001570  00000000  00000000  00042238  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029b5f  00000000  00000000  000437a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016106  00000000  00000000  0006d307  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001076a9  00000000  00000000  0008340d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018aab6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000605c  00000000  00000000  0018ab34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000024 	.word	0x20000024
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007f40 	.word	0x08007f40

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000028 	.word	0x20000028
 8000214:	08007f40 	.word	0x08007f40

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0

  hfdcan1.Instance = FDCAN1;
 800051c:	4b1f      	ldr	r3, [pc, #124]	; (800059c <MX_FDCAN1_Init+0x84>)
 800051e:	4a20      	ldr	r2, [pc, #128]	; (80005a0 <MX_FDCAN1_Init+0x88>)
 8000520:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV2;
 8000522:	4b1e      	ldr	r3, [pc, #120]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000524:	2201      	movs	r2, #1
 8000526:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000528:	4b1c      	ldr	r3, [pc, #112]	; (800059c <MX_FDCAN1_Init+0x84>)
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800052e:	4b1b      	ldr	r3, [pc, #108]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000530:	2200      	movs	r2, #0
 8000532:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000534:	4b19      	ldr	r3, [pc, #100]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000536:	2200      	movs	r2, #0
 8000538:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800053a:	4b18      	ldr	r3, [pc, #96]	; (800059c <MX_FDCAN1_Init+0x84>)
 800053c:	2200      	movs	r2, #0
 800053e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000540:	4b16      	ldr	r3, [pc, #88]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000542:	2200      	movs	r2, #0
 8000544:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 40;
 8000546:	4b15      	ldr	r3, [pc, #84]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000548:	2228      	movs	r2, #40	; 0x28
 800054a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800054c:	4b13      	ldr	r3, [pc, #76]	; (800059c <MX_FDCAN1_Init+0x84>)
 800054e:	2201      	movs	r2, #1
 8000550:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000552:	4b12      	ldr	r3, [pc, #72]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000554:	220d      	movs	r2, #13
 8000556:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000558:	4b10      	ldr	r3, [pc, #64]	; (800059c <MX_FDCAN1_Init+0x84>)
 800055a:	2202      	movs	r2, #2
 800055c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800055e:	4b0f      	ldr	r3, [pc, #60]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000560:	2201      	movs	r2, #1
 8000562:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000564:	4b0d      	ldr	r3, [pc, #52]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000566:	2201      	movs	r2, #1
 8000568:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <MX_FDCAN1_Init+0x84>)
 800056c:	2201      	movs	r2, #1
 800056e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000570:	4b0a      	ldr	r3, [pc, #40]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000572:	2201      	movs	r2, #1
 8000574:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000576:	4b09      	ldr	r3, [pc, #36]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000578:	2200      	movs	r2, #0
 800057a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800057c:	4b07      	ldr	r3, [pc, #28]	; (800059c <MX_FDCAN1_Init+0x84>)
 800057e:	2200      	movs	r2, #0
 8000580:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <MX_FDCAN1_Init+0x84>)
 8000584:	2200      	movs	r2, #0
 8000586:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000588:	4804      	ldr	r0, [pc, #16]	; (800059c <MX_FDCAN1_Init+0x84>)
 800058a:	f001 f8cd 	bl	8001728 <HAL_FDCAN_Init>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000594:	f000 fc52 	bl	8000e3c <Error_Handler>
  }

}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	2000005c 	.word	0x2000005c
 80005a0:	40006400 	.word	0x40006400

080005a4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	; 0x28
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
  if(fdcanHandle->Instance==FDCAN1)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a18      	ldr	r2, [pc, #96]	; (8000624 <HAL_FDCAN_MspInit+0x80>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d129      	bne.n	800061a <HAL_FDCAN_MspInit+0x76>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80005c6:	4b18      	ldr	r3, [pc, #96]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ca:	4a17      	ldr	r2, [pc, #92]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005d0:	6593      	str	r3, [r2, #88]	; 0x58
 80005d2:	4b15      	ldr	r3, [pc, #84]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	4b12      	ldr	r3, [pc, #72]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e2:	4a11      	ldr	r2, [pc, #68]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <HAL_FDCAN_MspInit+0x84>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration    
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80005f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80005fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fc:	2302      	movs	r3, #2
 80005fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000604:	2300      	movs	r3, #0
 8000606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000608:	2309      	movs	r3, #9
 800060a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	4619      	mov	r1, r3
 8000612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000616:	f001 fe97 	bl	8002348 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 800061a:	bf00      	nop
 800061c:	3728      	adds	r7, #40	; 0x28
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40006400 	.word	0x40006400
 8000628:	40021000 	.word	0x40021000

0800062c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	; 0x28
 8000630:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000642:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000646:	4a2a      	ldr	r2, [pc, #168]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000648:	f043 0304 	orr.w	r3, r3, #4
 800064c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800064e:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000652:	f003 0304 	and.w	r3, r3, #4
 8000656:	613b      	str	r3, [r7, #16]
 8000658:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800065a:	4b25      	ldr	r3, [pc, #148]	; (80006f0 <MX_GPIO_Init+0xc4>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065e:	4a24      	ldr	r2, [pc, #144]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000660:	f043 0320 	orr.w	r3, r3, #32
 8000664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000666:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	f003 0320 	and.w	r3, r3, #32
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	4a1e      	ldr	r2, [pc, #120]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067e:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068a:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <MX_GPIO_Init+0xc4>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000690:	f043 0302 	orr.w	r3, r3, #2
 8000694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000696:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <MX_GPIO_Init+0xc4>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	f003 0302 	and.w	r3, r3, #2
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2120      	movs	r1, #32
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006aa:	f001 ffcf 	bl	800264c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_GPIO_Init+0xc8>)
 80006b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	4619      	mov	r1, r3
 80006c2:	480d      	ldr	r0, [pc, #52]	; (80006f8 <MX_GPIO_Init+0xcc>)
 80006c4:	f001 fe40 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006c8:	2320      	movs	r3, #32
 80006ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	2300      	movs	r3, #0
 80006d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	4619      	mov	r1, r3
 80006de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e2:	f001 fe31 	bl	8002348 <HAL_GPIO_Init>

}
 80006e6:	bf00      	nop
 80006e8:	3728      	adds	r7, #40	; 0x28
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40021000 	.word	0x40021000
 80006f4:	10110000 	.word	0x10110000
 80006f8:	48000800 	.word	0x48000800

080006fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000700:	f000 fe6f 	bl	80013e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000704:	f000 f93c 	bl	8000980 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* Initialize the micro SD Card */
  if(MY_SD_Init(0) != BSP_ERROR_NONE){
 8000708:	2000      	movs	r0, #0
 800070a:	f006 f88d 	bl	8006828 <MY_SD_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <main+0x1c>
	  Error_Handler();
 8000714:	f000 fb92 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000718:	f7ff ff88 	bl	800062c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800071c:	f000 fdb0 	bl	8001280 <MX_LPUART1_UART_Init>
  MX_SPI2_Init();
 8000720:	f000 fc0e 	bl	8000f40 <MX_SPI2_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8000724:	f006 f868 	bl	80067f8 <MX_FATFS_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <main+0x36>
    Error_Handler();
 800072e:	f000 fb85 	bl	8000e3c <Error_Handler>
  }
  MX_FDCAN1_Init();
 8000732:	f7ff fef1 	bl	8000518 <MX_FDCAN1_Init>
  MX_RTC_Init();
 8000736:	f000 fb85 	bl	8000e44 <MX_RTC_Init>
  MX_TIM16_Init();
 800073a:	f000 fd21 	bl	8001180 <MX_TIM16_Init>
  MX_TIM17_Init();
 800073e:	f000 fd45 	bl	80011cc <MX_TIM17_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000742:	f000 f999 	bl	8000a78 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  CAN_TxData_Init();
 8000746:	f000 fb53 	bl	8000df0 <CAN_TxData_Init>

  //uint16_t aug = 3456;

    if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK){
 800074a:	4884      	ldr	r0, [pc, #528]	; (800095c <main+0x260>)
 800074c:	f001 f946 	bl	80019dc <HAL_FDCAN_Start>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <main+0x5e>
        /* Start Error */
        Error_Handler();
 8000756:	f000 fb71 	bl	8000e3c <Error_Handler>
    }

    if ( HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){
 800075a:	2200      	movs	r2, #0
 800075c:	2101      	movs	r1, #1
 800075e:	487f      	ldr	r0, [pc, #508]	; (800095c <main+0x260>)
 8000760:	f001 fa82 	bl	8001c68 <HAL_FDCAN_ActivateNotification>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <main+0x72>
        /* Notification Error */
        Error_Handler();
 800076a:	f000 fb67 	bl	8000e3c <Error_Handler>
    }
    torque = 0;
 800076e:	4b7c      	ldr	r3, [pc, #496]	; (8000960 <main+0x264>)
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
    dir = 0; fs = 0; en = 0;
 8000774:	4b7b      	ldr	r3, [pc, #492]	; (8000964 <main+0x268>)
 8000776:	2200      	movs	r2, #0
 8000778:	701a      	strb	r2, [r3, #0]
 800077a:	4b7b      	ldr	r3, [pc, #492]	; (8000968 <main+0x26c>)
 800077c:	2200      	movs	r2, #0
 800077e:	701a      	strb	r2, [r3, #0]
 8000780:	4b7a      	ldr	r3, [pc, #488]	; (800096c <main+0x270>)
 8000782:	2200      	movs	r2, #0
 8000784:	701a      	strb	r2, [r3, #0]
    Set_Switch(dir, fs, en, 0);
 8000786:	4b77      	ldr	r3, [pc, #476]	; (8000964 <main+0x268>)
 8000788:	7818      	ldrb	r0, [r3, #0]
 800078a:	4b77      	ldr	r3, [pc, #476]	; (8000968 <main+0x26c>)
 800078c:	7819      	ldrb	r1, [r3, #0]
 800078e:	4b77      	ldr	r3, [pc, #476]	; (800096c <main+0x270>)
 8000790:	781a      	ldrb	r2, [r3, #0]
 8000792:	2300      	movs	r3, #0
 8000794:	f000 fa50 	bl	8000c38 <Set_Switch>
    DC_TxData_Build(torque);
 8000798:	4b71      	ldr	r3, [pc, #452]	; (8000960 <main+0x264>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4618      	mov	r0, r3
 800079e:	f000 facb 	bl	8000d38 <DC_TxData_Build>
    HAL_TIM_Base_Start_IT(&htim17);
 80007a2:	4873      	ldr	r0, [pc, #460]	; (8000970 <main+0x274>)
 80007a4:	f004 f8d6 	bl	8004954 <HAL_TIM_Base_Start_IT>
  while (1){
	  /*torque = 0;
	  CAN_TxMsg();
	  readSigmaData();*/

	  switch(status){
 80007a8:	4b72      	ldr	r3, [pc, #456]	; (8000974 <main+0x278>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b03      	cmp	r3, #3
 80007ae:	f200 80c7 	bhi.w	8000940 <main+0x244>
 80007b2:	a201      	add	r2, pc, #4	; (adr r2, 80007b8 <main+0xbc>)
 80007b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b8:	080007c9 	.word	0x080007c9
 80007bc:	0800081b 	.word	0x0800081b
 80007c0:	0800092f 	.word	0x0800092f
 80007c4:	08000941 	.word	0x08000941

	  case IDLE:
		  torque = 0;
 80007c8:	4b65      	ldr	r3, [pc, #404]	; (8000960 <main+0x264>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
		  dir = 0; fs = 0; en = 0;
 80007ce:	4b65      	ldr	r3, [pc, #404]	; (8000964 <main+0x268>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]
 80007d4:	4b64      	ldr	r3, [pc, #400]	; (8000968 <main+0x26c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	701a      	strb	r2, [r3, #0]
 80007da:	4b64      	ldr	r3, [pc, #400]	; (800096c <main+0x270>)
 80007dc:	2200      	movs	r2, #0
 80007de:	701a      	strb	r2, [r3, #0]
		  Set_Switch(dir, fs, en, 0);
 80007e0:	4b60      	ldr	r3, [pc, #384]	; (8000964 <main+0x268>)
 80007e2:	7818      	ldrb	r0, [r3, #0]
 80007e4:	4b60      	ldr	r3, [pc, #384]	; (8000968 <main+0x26c>)
 80007e6:	7819      	ldrb	r1, [r3, #0]
 80007e8:	4b60      	ldr	r3, [pc, #384]	; (800096c <main+0x270>)
 80007ea:	781a      	ldrb	r2, [r3, #0]
 80007ec:	2300      	movs	r3, #0
 80007ee:	f000 fa23 	bl	8000c38 <Set_Switch>
		  DC_TxData_Build(torque);
 80007f2:	4b5b      	ldr	r3, [pc, #364]	; (8000960 <main+0x264>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 fa9e 	bl	8000d38 <DC_TxData_Build>

		  if(count > 100){
 80007fc:	4b5e      	ldr	r3, [pc, #376]	; (8000978 <main+0x27c>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b64      	cmp	r3, #100	; 0x64
 8000802:	f240 809f 	bls.w	8000944 <main+0x248>
			  status = STARTUP;
 8000806:	4b5b      	ldr	r3, [pc, #364]	; (8000974 <main+0x278>)
 8000808:	2201      	movs	r2, #1
 800080a:	701a      	strb	r2, [r3, #0]
			  controlStatus = 1;
 800080c:	4b5b      	ldr	r3, [pc, #364]	; (800097c <main+0x280>)
 800080e:	2201      	movs	r2, #1
 8000810:	701a      	strb	r2, [r3, #0]
			  count = 0;
 8000812:	4b59      	ldr	r3, [pc, #356]	; (8000978 <main+0x27c>)
 8000814:	2200      	movs	r2, #0
 8000816:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8000818:	e094      	b.n	8000944 <main+0x248>

	  case STARTUP:
		  torque = 0;
 800081a:	4b51      	ldr	r3, [pc, #324]	; (8000960 <main+0x264>)
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
		  switch(controlStatus){
 8000820:	4b56      	ldr	r3, [pc, #344]	; (800097c <main+0x280>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b02      	cmp	r3, #2
 8000826:	d024      	beq.n	8000872 <main+0x176>
 8000828:	2b03      	cmp	r3, #3
 800082a:	d043      	beq.n	80008b4 <main+0x1b8>
 800082c:	2b01      	cmp	r3, #1
 800082e:	d162      	bne.n	80008f6 <main+0x1fa>

		  case 1:
			  // enable
			  if(count > 100){
 8000830:	4b51      	ldr	r3, [pc, #324]	; (8000978 <main+0x27c>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b64      	cmp	r3, #100	; 0x64
 8000836:	d916      	bls.n	8000866 <main+0x16a>
				  en = 1;
 8000838:	4b4c      	ldr	r3, [pc, #304]	; (800096c <main+0x270>)
 800083a:	2201      	movs	r2, #1
 800083c:	701a      	strb	r2, [r3, #0]
				  Set_Switch(dir, fs, en, 0);
 800083e:	4b49      	ldr	r3, [pc, #292]	; (8000964 <main+0x268>)
 8000840:	7818      	ldrb	r0, [r3, #0]
 8000842:	4b49      	ldr	r3, [pc, #292]	; (8000968 <main+0x26c>)
 8000844:	7819      	ldrb	r1, [r3, #0]
 8000846:	4b49      	ldr	r3, [pc, #292]	; (800096c <main+0x270>)
 8000848:	781a      	ldrb	r2, [r3, #0]
 800084a:	2300      	movs	r3, #0
 800084c:	f000 f9f4 	bl	8000c38 <Set_Switch>
				  DC_TxData_Build(torque);
 8000850:	4b43      	ldr	r3, [pc, #268]	; (8000960 <main+0x264>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4618      	mov	r0, r3
 8000856:	f000 fa6f 	bl	8000d38 <DC_TxData_Build>
				  controlStatus = 2;
 800085a:	4b48      	ldr	r3, [pc, #288]	; (800097c <main+0x280>)
 800085c:	2202      	movs	r2, #2
 800085e:	701a      	strb	r2, [r3, #0]
				  count = 0;
 8000860:	4b45      	ldr	r3, [pc, #276]	; (8000978 <main+0x27c>)
 8000862:	2200      	movs	r2, #0
 8000864:	701a      	strb	r2, [r3, #0]
			  }
			  DC_TxData_Build(torque);
 8000866:	4b3e      	ldr	r3, [pc, #248]	; (8000960 <main+0x264>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4618      	mov	r0, r3
 800086c:	f000 fa64 	bl	8000d38 <DC_TxData_Build>
			  break;
 8000870:	e05c      	b.n	800092c <main+0x230>
		  case 2:
			  // footswitch
			  if(count > 100){
 8000872:	4b41      	ldr	r3, [pc, #260]	; (8000978 <main+0x27c>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b64      	cmp	r3, #100	; 0x64
 8000878:	d916      	bls.n	80008a8 <main+0x1ac>
				  fs = 1;
 800087a:	4b3b      	ldr	r3, [pc, #236]	; (8000968 <main+0x26c>)
 800087c:	2201      	movs	r2, #1
 800087e:	701a      	strb	r2, [r3, #0]
				  Set_Switch(dir, fs, en, 0);
 8000880:	4b38      	ldr	r3, [pc, #224]	; (8000964 <main+0x268>)
 8000882:	7818      	ldrb	r0, [r3, #0]
 8000884:	4b38      	ldr	r3, [pc, #224]	; (8000968 <main+0x26c>)
 8000886:	7819      	ldrb	r1, [r3, #0]
 8000888:	4b38      	ldr	r3, [pc, #224]	; (800096c <main+0x270>)
 800088a:	781a      	ldrb	r2, [r3, #0]
 800088c:	2300      	movs	r3, #0
 800088e:	f000 f9d3 	bl	8000c38 <Set_Switch>
				  DC_TxData_Build(torque);
 8000892:	4b33      	ldr	r3, [pc, #204]	; (8000960 <main+0x264>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4618      	mov	r0, r3
 8000898:	f000 fa4e 	bl	8000d38 <DC_TxData_Build>
				  controlStatus = 3;
 800089c:	4b37      	ldr	r3, [pc, #220]	; (800097c <main+0x280>)
 800089e:	2203      	movs	r2, #3
 80008a0:	701a      	strb	r2, [r3, #0]
				  count = 0;
 80008a2:	4b35      	ldr	r3, [pc, #212]	; (8000978 <main+0x27c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]
			  }
			  DC_TxData_Build(torque);
 80008a8:	4b2d      	ldr	r3, [pc, #180]	; (8000960 <main+0x264>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 fa43 	bl	8000d38 <DC_TxData_Build>
			  break;
 80008b2:	e03b      	b.n	800092c <main+0x230>
		  case 3:
			  // direction
			  if(count > 100){
 80008b4:	4b30      	ldr	r3, [pc, #192]	; (8000978 <main+0x27c>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b64      	cmp	r3, #100	; 0x64
 80008ba:	d916      	bls.n	80008ea <main+0x1ee>
				  dir = 1; // forward
 80008bc:	4b29      	ldr	r3, [pc, #164]	; (8000964 <main+0x268>)
 80008be:	2201      	movs	r2, #1
 80008c0:	701a      	strb	r2, [r3, #0]
				  Set_Switch(dir, fs, en, 0);
 80008c2:	4b28      	ldr	r3, [pc, #160]	; (8000964 <main+0x268>)
 80008c4:	7818      	ldrb	r0, [r3, #0]
 80008c6:	4b28      	ldr	r3, [pc, #160]	; (8000968 <main+0x26c>)
 80008c8:	7819      	ldrb	r1, [r3, #0]
 80008ca:	4b28      	ldr	r3, [pc, #160]	; (800096c <main+0x270>)
 80008cc:	781a      	ldrb	r2, [r3, #0]
 80008ce:	2300      	movs	r3, #0
 80008d0:	f000 f9b2 	bl	8000c38 <Set_Switch>
				  DC_TxData_Build(torque);
 80008d4:	4b22      	ldr	r3, [pc, #136]	; (8000960 <main+0x264>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 fa2d 	bl	8000d38 <DC_TxData_Build>
				  status = SPIN;
 80008de:	4b25      	ldr	r3, [pc, #148]	; (8000974 <main+0x278>)
 80008e0:	2202      	movs	r2, #2
 80008e2:	701a      	strb	r2, [r3, #0]
				  count = 0;
 80008e4:	4b24      	ldr	r3, [pc, #144]	; (8000978 <main+0x27c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	701a      	strb	r2, [r3, #0]
			  }
			  DC_TxData_Build(torque);
 80008ea:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <main+0x264>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 fa22 	bl	8000d38 <DC_TxData_Build>
			  break;
 80008f4:	e01a      	b.n	800092c <main+0x230>
		  default:
			  en = 0; fs = 0; dir = 0;
 80008f6:	4b1d      	ldr	r3, [pc, #116]	; (800096c <main+0x270>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
 80008fc:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <main+0x26c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]
 8000902:	4b18      	ldr	r3, [pc, #96]	; (8000964 <main+0x268>)
 8000904:	2200      	movs	r2, #0
 8000906:	701a      	strb	r2, [r3, #0]
			  Set_Switch(dir, fs, en, 0);
 8000908:	4b16      	ldr	r3, [pc, #88]	; (8000964 <main+0x268>)
 800090a:	7818      	ldrb	r0, [r3, #0]
 800090c:	4b16      	ldr	r3, [pc, #88]	; (8000968 <main+0x26c>)
 800090e:	7819      	ldrb	r1, [r3, #0]
 8000910:	4b16      	ldr	r3, [pc, #88]	; (800096c <main+0x270>)
 8000912:	781a      	ldrb	r2, [r3, #0]
 8000914:	2300      	movs	r3, #0
 8000916:	f000 f98f 	bl	8000c38 <Set_Switch>
			  DC_TxData_Build(torque);
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <main+0x264>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4618      	mov	r0, r3
 8000920:	f000 fa0a 	bl	8000d38 <DC_TxData_Build>
			  controlStatus = 1;
 8000924:	4b15      	ldr	r3, [pc, #84]	; (800097c <main+0x280>)
 8000926:	2201      	movs	r2, #1
 8000928:	701a      	strb	r2, [r3, #0]
			  break;
 800092a:	bf00      	nop
		  }
		  break;
 800092c:	e00b      	b.n	8000946 <main+0x24a>
	  case SPIN:
		  /*for(uint8_t i=0; i<20; i++){
			  torque++;
		  }*/
		  torque = 2;
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <main+0x264>)
 8000930:	2202      	movs	r2, #2
 8000932:	601a      	str	r2, [r3, #0]
		  DC_TxData_Build(torque);
 8000934:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <main+0x264>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4618      	mov	r0, r3
 800093a:	f000 f9fd 	bl	8000d38 <DC_TxData_Build>
		  break;
 800093e:	e002      	b.n	8000946 <main+0x24a>
	  case STOP:

		  break;
	  default:

		  break;
 8000940:	bf00      	nop
 8000942:	e000      	b.n	8000946 <main+0x24a>
		  break;
 8000944:	bf00      	nop
	  }

	  //CAN_TxMsg();
	  HAL_Delay(10);
 8000946:	200a      	movs	r0, #10
 8000948:	f000 fdbc 	bl	80014c4 <HAL_Delay>
	  //readSigmaData();
	  //HAL_Delay(50);
	  count++;
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <main+0x27c>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	3301      	adds	r3, #1
 8000952:	b2da      	uxtb	r2, r3
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <main+0x27c>)
 8000956:	701a      	strb	r2, [r3, #0]
	  switch(status){
 8000958:	e726      	b.n	80007a8 <main+0xac>
 800095a:	bf00      	nop
 800095c:	2000005c 	.word	0x2000005c
 8000960:	20000150 	.word	0x20000150
 8000964:	20000044 	.word	0x20000044
 8000968:	20000045 	.word	0x20000045
 800096c:	20000046 	.word	0x20000046
 8000970:	2000052c 	.word	0x2000052c
 8000974:	20000488 	.word	0x20000488
 8000978:	20000047 	.word	0x20000047
 800097c:	200000e0 	.word	0x200000e0

08000980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b0a8      	sub	sp, #160	; 0xa0
 8000984:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000986:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800098a:	2238      	movs	r2, #56	; 0x38
 800098c:	2100      	movs	r1, #0
 800098e:	4618      	mov	r0, r3
 8000990:	f007 face 	bl	8007f30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000994:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a4:	463b      	mov	r3, r7
 80009a6:	2254      	movs	r2, #84	; 0x54
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f007 fac0 	bl	8007f30 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009b4:	f001 fe86 	bl	80026c4 <HAL_PWREx_ControlVoltageScaling>
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80009b8:	4b2d      	ldr	r3, [pc, #180]	; (8000a70 <SystemClock_Config+0xf0>)
 80009ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80009be:	4a2c      	ldr	r2, [pc, #176]	; (8000a70 <SystemClock_Config+0xf0>)
 80009c0:	f023 0318 	bic.w	r3, r3, #24
 80009c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80009c8:	2306      	movs	r3, #6
 80009ca:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009cc:	2301      	movs	r3, #1
 80009ce:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009d4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d6:	2340      	movs	r3, #64	; 0x40
 80009d8:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009da:	2302      	movs	r3, #2
 80009dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009e0:	2302      	movs	r3, #2
 80009e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80009e6:	2302      	movs	r3, #2
 80009e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 32;
 80009ec:	2320      	movs	r3, #32
 80009ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009f2:	2302      	movs	r3, #2
 80009f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 80009f8:	2306      	movs	r3, #6
 80009fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009fe:	2302      	movs	r3, #2
 8000a00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a04:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f001 feff 	bl	800280c <HAL_RCC_OscConfig>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a14:	f000 fa12 	bl	8000e3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a18:	230f      	movs	r3, #15
 8000a1a:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000a2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a30:	2106      	movs	r1, #6
 8000a32:	4618      	mov	r0, r3
 8000a34:	f002 fa02 	bl	8002e3c <HAL_RCC_ClockConfig>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a3e:	f000 f9fd 	bl	8000e3c <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LPUART1
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <SystemClock_Config+0xf4>)
 8000a44:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000a4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a4e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000a50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a54:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a56:	463b      	mov	r3, r7
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f002 fc0b 	bl	8003274 <HAL_RCCEx_PeriphCLKConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000a64:	f000 f9ea 	bl	8000e3c <Error_Handler>
  }
}
 8000a68:	bf00      	nop
 8000a6a:	37a0      	adds	r7, #160	; 0xa0
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40021000 	.word	0x40021000
 8000a74:	00081020 	.word	0x00081020

08000a78 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* FDCAN1_IT0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2100      	movs	r1, #0
 8000a80:	2015      	movs	r0, #21
 8000a82:	f000 fe1c 	bl	80016be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000a86:	2015      	movs	r0, #21
 8000a88:	f000 fe33 	bl	80016f2 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2100      	movs	r1, #0
 8000a90:	2028      	movs	r0, #40	; 0x28
 8000a92:	f000 fe14 	bl	80016be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a96:	2028      	movs	r0, #40	; 0x28
 8000a98:	f000 fe2b 	bl	80016f2 <HAL_NVIC_EnableIRQ>
  /* TIM1_TRG_COM_TIM17_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	201a      	movs	r0, #26
 8000aa2:	f000 fe0c 	bl	80016be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000aa6:	201a      	movs	r0, #26
 8000aa8:	f000 fe23 	bl	80016f2 <HAL_NVIC_EnableIRQ>
  /* TIM1_UP_TIM16_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2100      	movs	r1, #0
 8000ab0:	2019      	movs	r0, #25
 8000ab2:	f000 fe04 	bl	80016be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ab6:	2019      	movs	r0, #25
 8000ab8:	f000 fe1b 	bl	80016f2 <HAL_NVIC_EnableIRQ>
}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef*hcan, uint32_t RxFifo0ITs){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
	if(HAL_FDCAN_GetRxMessage(&hfdcan1,FDCAN_RX_FIFO0,&RxHeader,rxData.Data8u) != HAL_OK){
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <HAL_FDCAN_RxFifo0Callback+0x34>)
 8000acc:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <HAL_FDCAN_RxFifo0Callback+0x38>)
 8000ace:	2140      	movs	r1, #64	; 0x40
 8000ad0:	480a      	ldr	r0, [pc, #40]	; (8000afc <HAL_FDCAN_RxFifo0Callback+0x3c>)
 8000ad2:	f000 ffef 	bl	8001ab4 <HAL_FDCAN_GetRxMessage>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <HAL_FDCAN_RxFifo0Callback+0x20>
		/* Transmission request Error */
		Error_Handler();
 8000adc:	f000 f9ae 	bl	8000e3c <Error_Handler>
	}
	ID = RxHeader.Identifier;
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <HAL_FDCAN_RxFifo0Callback+0x38>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a06      	ldr	r2, [pc, #24]	; (8000b00 <HAL_FDCAN_RxFifo0Callback+0x40>)
 8000ae6:	6013      	str	r3, [r2, #0]
	readSigmaData();
 8000ae8:	f000 f81e 	bl	8000b28 <readSigmaData>
    /*if(flag == 1){
    	salvaDati();
    }*/

	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	200000c0 	.word	0x200000c0
 8000af8:	20000228 	.word	0x20000228
 8000afc:	2000005c 	.word	0x2000005c
 8000b00:	20000040 	.word	0x20000040

08000b04 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
    if (htim->Instance==TIM17){ //check if the interrupt comes from TIM2 (occur every 100mS)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d101      	bne.n	8000b1a <HAL_TIM_PeriodElapsedCallback+0x16>

    	CAN_TxMsg();
 8000b16:	f000 f939 	bl	8000d8c <CAN_TxMsg>
        	if(HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin)==GPIO_PIN_SET)
        	{
        		HAL_Delay(10000);
        	}
     }*/
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40014800 	.word	0x40014800

08000b28 <readSigmaData>:

uint8_t readSigmaData(void){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
	uint8_t res;
	res = HAL_FDCAN_GetRxMessage(&hfdcan1,FDCAN_RX_FIFO0,&RxHeader,rxData.Data8u);
 8000b2e:	4b3c      	ldr	r3, [pc, #240]	; (8000c20 <readSigmaData+0xf8>)
 8000b30:	4a3c      	ldr	r2, [pc, #240]	; (8000c24 <readSigmaData+0xfc>)
 8000b32:	2140      	movs	r1, #64	; 0x40
 8000b34:	483c      	ldr	r0, [pc, #240]	; (8000c28 <readSigmaData+0x100>)
 8000b36:	f000 ffbd 	bl	8001ab4 <HAL_FDCAN_GetRxMessage>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]

	switch(RxHeader.Identifier){
 8000b3e:	4b39      	ldr	r3, [pc, #228]	; (8000c24 <readSigmaData+0xfc>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f240 1241 	movw	r2, #321	; 0x141
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d01e      	beq.n	8000b88 <readSigmaData+0x60>
 8000b4a:	f240 1251 	movw	r2, #337	; 0x151
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d047      	beq.n	8000be2 <readSigmaData+0xba>
 8000b52:	f240 1231 	movw	r2, #305	; 0x131
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d15c      	bne.n	8000c14 <readSigmaData+0xec>
	case MS:
			ms.MotorSpeed			= rxData.Data16u[0];
 8000b5a:	4b31      	ldr	r3, [pc, #196]	; (8000c20 <readSigmaData+0xf8>)
 8000b5c:	881a      	ldrh	r2, [r3, #0]
 8000b5e:	4b33      	ldr	r3, [pc, #204]	; (8000c2c <readSigmaData+0x104>)
 8000b60:	801a      	strh	r2, [r3, #0]
			ms.MotorCurrent			= rxData.Data16[1];
 8000b62:	4b2f      	ldr	r3, [pc, #188]	; (8000c20 <readSigmaData+0xf8>)
 8000b64:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000b68:	4b30      	ldr	r3, [pc, #192]	; (8000c2c <readSigmaData+0x104>)
 8000b6a:	805a      	strh	r2, [r3, #2]
			ms.MotorVoltage			= rxData.Data8u[4];
 8000b6c:	4b2c      	ldr	r3, [pc, #176]	; (8000c20 <readSigmaData+0xf8>)
 8000b6e:	791a      	ldrb	r2, [r3, #4]
 8000b70:	4b2e      	ldr	r3, [pc, #184]	; (8000c2c <readSigmaData+0x104>)
 8000b72:	711a      	strb	r2, [r3, #4]
			ms.BatteryVoltage		= rxData.Data8u[5];
 8000b74:	4b2a      	ldr	r3, [pc, #168]	; (8000c20 <readSigmaData+0xf8>)
 8000b76:	795a      	ldrb	r2, [r3, #5]
 8000b78:	4b2c      	ldr	r3, [pc, #176]	; (8000c2c <readSigmaData+0x104>)
 8000b7a:	715a      	strb	r2, [r3, #5]
			ms.BatteryCurrent		= rxData.Data16[4];
 8000b7c:	4b28      	ldr	r3, [pc, #160]	; (8000c20 <readSigmaData+0xf8>)
 8000b7e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000b82:	4b2a      	ldr	r3, [pc, #168]	; (8000c2c <readSigmaData+0x104>)
 8000b84:	80da      	strh	r2, [r3, #6]
	break;
 8000b86:	e045      	b.n	8000c14 <readSigmaData+0xec>
	case DS:
			ds.ActualTorque			= rxData.Data16[0];
 8000b88:	4b25      	ldr	r3, [pc, #148]	; (8000c20 <readSigmaData+0xf8>)
 8000b8a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b8e:	4b28      	ldr	r3, [pc, #160]	; (8000c30 <readSigmaData+0x108>)
 8000b90:	801a      	strh	r2, [r3, #0]
			ds.ActualSpeed			= rxData.Data16[1];
 8000b92:	4b23      	ldr	r3, [pc, #140]	; (8000c20 <readSigmaData+0xf8>)
 8000b94:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000b98:	4b25      	ldr	r3, [pc, #148]	; (8000c30 <readSigmaData+0x108>)
 8000b9a:	805a      	strh	r2, [r3, #2]
			ds.DriveStatusIndicator	= rxData.Data8u[4] & 0x0F;
 8000b9c:	4b20      	ldr	r3, [pc, #128]	; (8000c20 <readSigmaData+0xf8>)
 8000b9e:	791b      	ldrb	r3, [r3, #4]
 8000ba0:	f003 030f 	and.w	r3, r3, #15
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	4b22      	ldr	r3, [pc, #136]	; (8000c30 <readSigmaData+0x108>)
 8000ba8:	711a      	strb	r2, [r3, #4]
			ds.SpeedLimitIndicator	= rxData.Data8u[4] >> 0x04;
 8000baa:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <readSigmaData+0xf8>)
 8000bac:	791b      	ldrb	r3, [r3, #4]
 8000bae:	091b      	lsrs	r3, r3, #4
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <readSigmaData+0x108>)
 8000bb4:	715a      	strb	r2, [r3, #5]
			ds.TorqueLimitIndicator	= rxData.Data8u[5] & 0x0F;
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <readSigmaData+0xf8>)
 8000bb8:	795b      	ldrb	r3, [r3, #5]
 8000bba:	f003 030f 	and.w	r3, r3, #15
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	4b1b      	ldr	r3, [pc, #108]	; (8000c30 <readSigmaData+0x108>)
 8000bc2:	719a      	strb	r2, [r3, #6]
			ds.MotorLimitIndicator	= rxData.Data8u[5] >> 0x04;
 8000bc4:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <readSigmaData+0xf8>)
 8000bc6:	795b      	ldrb	r3, [r3, #5]
 8000bc8:	091b      	lsrs	r3, r3, #4
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <readSigmaData+0x108>)
 8000bce:	71da      	strb	r2, [r3, #7]
			ds.FaultCode			= rxData.Data8u[6];
 8000bd0:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <readSigmaData+0xf8>)
 8000bd2:	799a      	ldrb	r2, [r3, #6]
 8000bd4:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <readSigmaData+0x108>)
 8000bd6:	721a      	strb	r2, [r3, #8]
			ds.Code					= rxData.Data8u[7];
 8000bd8:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <readSigmaData+0xf8>)
 8000bda:	79da      	ldrb	r2, [r3, #7]
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <readSigmaData+0x108>)
 8000bde:	725a      	strb	r2, [r3, #9]
	break;
 8000be0:	e018      	b.n	8000c14 <readSigmaData+0xec>
	case CS:
			cs.ControllerTemperature= rxData.Data8u[0];
 8000be2:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <readSigmaData+0xf8>)
 8000be4:	781a      	ldrb	r2, [r3, #0]
 8000be6:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <readSigmaData+0x10c>)
 8000be8:	701a      	strb	r2, [r3, #0]
			cs.MotorTemperature		= rxData.Data8u[1];
 8000bea:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <readSigmaData+0xf8>)
 8000bec:	785a      	ldrb	r2, [r3, #1]
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <readSigmaData+0x10c>)
 8000bf0:	705a      	strb	r2, [r3, #1]
			cs.BDI					= rxData.Data8u[2];
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <readSigmaData+0xf8>)
 8000bf4:	789a      	ldrb	r2, [r3, #2]
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <readSigmaData+0x10c>)
 8000bf8:	709a      	strb	r2, [r3, #2]
			cs.FaultSubCode			= rxData.Data8u[3] << 0x08 | rxData.Data8u[4];
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <readSigmaData+0xf8>)
 8000bfc:	78db      	ldrb	r3, [r3, #3]
 8000bfe:	021b      	lsls	r3, r3, #8
 8000c00:	b21a      	sxth	r2, r3
 8000c02:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <readSigmaData+0xf8>)
 8000c04:	791b      	ldrb	r3, [r3, #4]
 8000c06:	b21b      	sxth	r3, r3
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	b21b      	sxth	r3, r3
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <readSigmaData+0x10c>)
 8000c10:	809a      	strh	r2, [r3, #4]
	break;
 8000c12:	bf00      	nop
	}
	return res;
 8000c14:	79fb      	ldrb	r3, [r7, #7]
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	200000c0 	.word	0x200000c0
 8000c24:	20000228 	.word	0x20000228
 8000c28:	2000005c 	.word	0x2000005c
 8000c2c:	20000148 	.word	0x20000148
 8000c30:	200000e4 	.word	0x200000e4
 8000c34:	200000d0 	.word	0x200000d0

08000c38 <Set_Switch>:

/*void DC_Data_Build(int32_t torque){
	dc.Trottle = SetThrottle(torque);
}*/

void Set_Switch(uint8_t Dir, uint8_t Fs, uint8_t En, uint8_t HandBrake){
 8000c38:	b490      	push	{r4, r7}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	4608      	mov	r0, r1
 8000c42:	4611      	mov	r1, r2
 8000c44:	461a      	mov	r2, r3
 8000c46:	4623      	mov	r3, r4
 8000c48:	71fb      	strb	r3, [r7, #7]
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71bb      	strb	r3, [r7, #6]
 8000c4e:	460b      	mov	r3, r1
 8000c50:	717b      	strb	r3, [r7, #5]
 8000c52:	4613      	mov	r3, r2
 8000c54:	713b      	strb	r3, [r7, #4]
	// Dir = 1 Forward, Dir = 0 Reverse
	if(Dir > 0){
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d00e      	beq.n	8000c7a <Set_Switch+0x42>
		dc.DigitalInputs = dc.DigitalInputs | 0x01<<FD;			// Set Forward Direction
 8000c5c:	4b2b      	ldr	r3, [pc, #172]	; (8000d0c <Set_Switch+0xd4>)
 8000c5e:	799b      	ldrb	r3, [r3, #6]
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4b29      	ldr	r3, [pc, #164]	; (8000d0c <Set_Switch+0xd4>)
 8000c68:	719a      	strb	r2, [r3, #6]
		dc.DigitalInputs = dc.DigitalInputs & ~(0x01<<RD);		// Reset Reverse Direction
 8000c6a:	4b28      	ldr	r3, [pc, #160]	; (8000d0c <Set_Switch+0xd4>)
 8000c6c:	799b      	ldrb	r3, [r3, #6]
 8000c6e:	f023 0302 	bic.w	r3, r3, #2
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	4b25      	ldr	r3, [pc, #148]	; (8000d0c <Set_Switch+0xd4>)
 8000c76:	719a      	strb	r2, [r3, #6]
 8000c78:	e00d      	b.n	8000c96 <Set_Switch+0x5e>
	else if(Dir < 0){
		dc.DigitalInputs = dc.DigitalInputs | 0x01<<RD;			// Set Reverse Direction
		dc.DigitalInputs = dc.DigitalInputs & ~(0x01<<FD);		// Reset Forward Direction
	}
	else{
		dc.DigitalInputs = dc.DigitalInputs & ~(0x01<<FD);		// Reset Forward Direction
 8000c7a:	4b24      	ldr	r3, [pc, #144]	; (8000d0c <Set_Switch+0xd4>)
 8000c7c:	799b      	ldrb	r3, [r3, #6]
 8000c7e:	f023 0301 	bic.w	r3, r3, #1
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	4b21      	ldr	r3, [pc, #132]	; (8000d0c <Set_Switch+0xd4>)
 8000c86:	719a      	strb	r2, [r3, #6]
		dc.DigitalInputs = dc.DigitalInputs & ~(0x01<<RD);		// Reset Reverse Direction
 8000c88:	4b20      	ldr	r3, [pc, #128]	; (8000d0c <Set_Switch+0xd4>)
 8000c8a:	799b      	ldrb	r3, [r3, #6]
 8000c8c:	f023 0302 	bic.w	r3, r3, #2
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	4b1e      	ldr	r3, [pc, #120]	; (8000d0c <Set_Switch+0xd4>)
 8000c94:	719a      	strb	r2, [r3, #6]
	}

	if(Fs > 0){
 8000c96:	79bb      	ldrb	r3, [r7, #6]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d007      	beq.n	8000cac <Set_Switch+0x74>
		dc.DigitalInputs = dc.DigitalInputs | 0x01<<FS;			// Set Foot Switch
 8000c9c:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <Set_Switch+0xd4>)
 8000c9e:	799b      	ldrb	r3, [r3, #6]
 8000ca0:	f043 0304 	orr.w	r3, r3, #4
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <Set_Switch+0xd4>)
 8000ca8:	719a      	strb	r2, [r3, #6]
 8000caa:	e006      	b.n	8000cba <Set_Switch+0x82>
	}
	else{
		dc.DigitalInputs = dc.DigitalInputs & ~(0x01<<FS);		// Reset Foot Switch
 8000cac:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <Set_Switch+0xd4>)
 8000cae:	799b      	ldrb	r3, [r3, #6]
 8000cb0:	f023 0304 	bic.w	r3, r3, #4
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <Set_Switch+0xd4>)
 8000cb8:	719a      	strb	r2, [r3, #6]
	}

	if(En > 0){
 8000cba:	797b      	ldrb	r3, [r7, #5]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d007      	beq.n	8000cd0 <Set_Switch+0x98>
		dc.DigitalInputs = dc.DigitalInputs | 0x01<<EN;			// Set Enable
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <Set_Switch+0xd4>)
 8000cc2:	799b      	ldrb	r3, [r3, #6]
 8000cc4:	f043 0308 	orr.w	r3, r3, #8
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <Set_Switch+0xd4>)
 8000ccc:	719a      	strb	r2, [r3, #6]
 8000cce:	e006      	b.n	8000cde <Set_Switch+0xa6>
	}
	else{
		dc.DigitalInputs = dc.DigitalInputs & ~(0x01<<EN);		// Reset Enable
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <Set_Switch+0xd4>)
 8000cd2:	799b      	ldrb	r3, [r3, #6]
 8000cd4:	f023 0308 	bic.w	r3, r3, #8
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <Set_Switch+0xd4>)
 8000cdc:	719a      	strb	r2, [r3, #6]
	}

	if(HandBrake > 0){
 8000cde:	793b      	ldrb	r3, [r7, #4]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d007      	beq.n	8000cf4 <Set_Switch+0xbc>
		dc.DigitalInputs = dc.DigitalInputs | 0x01<<HB;			// Set Hand Brake
 8000ce4:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <Set_Switch+0xd4>)
 8000ce6:	799b      	ldrb	r3, [r3, #6]
 8000ce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <Set_Switch+0xd4>)
 8000cf0:	719a      	strb	r2, [r3, #6]
	}
	else{
		dc.DigitalInputs = dc.DigitalInputs & ~(0x01<<HB);		// Reset Hand Brake
	}
}
 8000cf2:	e006      	b.n	8000d02 <Set_Switch+0xca>
		dc.DigitalInputs = dc.DigitalInputs & ~(0x01<<HB);		// Reset Hand Brake
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <Set_Switch+0xd4>)
 8000cf6:	799b      	ldrb	r3, [r3, #6]
 8000cf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4b03      	ldr	r3, [pc, #12]	; (8000d0c <Set_Switch+0xd4>)
 8000d00:	719a      	strb	r2, [r3, #6]
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc90      	pop	{r4, r7}
 8000d0a:	4770      	bx	lr
 8000d0c:	200000c8 	.word	0x200000c8

08000d10 <Toggle_Bit>:

void Toggle_Bit(){
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
	if(txData.Data8u[7]){
 8000d14:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <Toggle_Bit+0x24>)
 8000d16:	79db      	ldrb	r3, [r3, #7]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d003      	beq.n	8000d24 <Toggle_Bit+0x14>
		//dc.ToggleSecurityBit = 0x00;
		txData.Data8u[7] = 0x00;
 8000d1c:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <Toggle_Bit+0x24>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	71da      	strb	r2, [r3, #7]
	}
	else{
		//dc.ToggleSecurityBit = 0x01;
		txData.Data8u[7] = 0x01;
	}
}
 8000d22:	e002      	b.n	8000d2a <Toggle_Bit+0x1a>
		txData.Data8u[7] = 0x01;
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <Toggle_Bit+0x24>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	71da      	strb	r2, [r3, #7]
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	200000d8 	.word	0x200000d8

08000d38 <DC_TxData_Build>:

void DC_TxData_Build(int32_t torque){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  TxHeader.Identifier = DC;
 8000d40:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <DC_TxData_Build+0x48>)
 8000d42:	f240 1261 	movw	r2, #353	; 0x161
 8000d46:	601a      	str	r2, [r3, #0]

  dc.Trottle = SetThrottle(torque);
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f000 f837 	bl	8000dbc <SetThrottle>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	461a      	mov	r2, r3
 8000d52:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <DC_TxData_Build+0x4c>)
 8000d54:	801a      	strh	r2, [r3, #0]

  txData.Data16u[0] = dc.Trottle;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <DC_TxData_Build+0x4c>)
 8000d58:	881a      	ldrh	r2, [r3, #0]
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <DC_TxData_Build+0x50>)
 8000d5c:	801a      	strh	r2, [r3, #0]
  txData.Data16u[1] = dc.BrakePedal;
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <DC_TxData_Build+0x4c>)
 8000d60:	885a      	ldrh	r2, [r3, #2]
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <DC_TxData_Build+0x50>)
 8000d64:	805a      	strh	r2, [r3, #2]
  txData.Data16[2] = dc.AD3;
 8000d66:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <DC_TxData_Build+0x4c>)
 8000d68:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <DC_TxData_Build+0x50>)
 8000d6e:	809a      	strh	r2, [r3, #4]
  txData.Data8u[6] = dc.DigitalInputs;
 8000d70:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <DC_TxData_Build+0x4c>)
 8000d72:	799a      	ldrb	r2, [r3, #6]
 8000d74:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <DC_TxData_Build+0x50>)
 8000d76:	719a      	strb	r2, [r3, #6]
  //txData.Data8u[7] = dc.ToggleSecurityBit;
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000204 	.word	0x20000204
 8000d84:	200000c8 	.word	0x200000c8
 8000d88:	200000d8 	.word	0x200000d8

08000d8c <CAN_TxMsg>:
	HAL_Delay(10);
	//readSigmaData();
	HAL_Delay(10);
}

uint8_t CAN_TxMsg(void){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
	uint8_t res;
	Toggle_Bit();
 8000d92:	f7ff ffbd 	bl	8000d10 <Toggle_Bit>
	//DC_TxData_Build(torque);
	res = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, txData.Data8u);
 8000d96:	4a06      	ldr	r2, [pc, #24]	; (8000db0 <CAN_TxMsg+0x24>)
 8000d98:	4906      	ldr	r1, [pc, #24]	; (8000db4 <CAN_TxMsg+0x28>)
 8000d9a:	4807      	ldr	r0, [pc, #28]	; (8000db8 <CAN_TxMsg+0x2c>)
 8000d9c:	f000 fe46 	bl	8001a2c <HAL_FDCAN_AddMessageToTxFifoQ>
 8000da0:	4603      	mov	r3, r0
 8000da2:	71fb      	strb	r3, [r7, #7]

	return res;
 8000da4:	79fb      	ldrb	r3, [r7, #7]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200000d8 	.word	0x200000d8
 8000db4:	20000204 	.word	0x20000204
 8000db8:	2000005c 	.word	0x2000005c

08000dbc <SetThrottle>:

// torque [Nm] -> thottle [%/4096]
uint16_t SetThrottle(int32_t torque){
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	uint16_t throttle;
	// throttle is expressed in % of the maximum torque limit coded in 16bit
	throttle = torque * 4096 * 1000 / (MAXCURRENT * KT);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f44f 127a 	mov.w	r2, #4096000	; 0x3e8000
 8000dca:	fb02 f303 	mul.w	r3, r2, r3
 8000dce:	4a07      	ldr	r2, [pc, #28]	; (8000dec <SetThrottle+0x30>)
 8000dd0:	fb82 1203 	smull	r1, r2, r2, r3
 8000dd4:	1392      	asrs	r2, r2, #14
 8000dd6:	17db      	asrs	r3, r3, #31
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	81fb      	strh	r3, [r7, #14]
	return throttle;
 8000ddc:	89fb      	ldrh	r3, [r7, #14]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	31eea409 	.word	0x31eea409

08000df0 <CAN_TxData_Init>:
		res = f_close(&writeFile);

	return res;
}

void CAN_TxData_Init(void){
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  TxHeader.Identifier = 0x0;
 8000df4:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <CAN_TxData_Init+0x48>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <CAN_TxData_Init+0x48>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000e00:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <CAN_TxData_Init+0x48>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <CAN_TxData_Init+0x48>)
 8000e08:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e0c:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <CAN_TxData_Init+0x48>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <CAN_TxData_Init+0x48>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000e1a:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <CAN_TxData_Init+0x48>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <CAN_TxData_Init+0x48>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000e26:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <CAN_TxData_Init+0x48>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	621a      	str	r2, [r3, #32]
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000204 	.word	0x20000204

08000e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	//printf("** Error. ** \n\r");
	while(1)
 8000e40:	e7fe      	b.n	8000e40 <Error_Handler+0x4>
	...

08000e44 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e58:	2300      	movs	r3, #0
 8000e5a:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000e5c:	4b28      	ldr	r3, [pc, #160]	; (8000f00 <MX_RTC_Init+0xbc>)
 8000e5e:	4a29      	ldr	r2, [pc, #164]	; (8000f04 <MX_RTC_Init+0xc0>)
 8000e60:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e62:	4b27      	ldr	r3, [pc, #156]	; (8000f00 <MX_RTC_Init+0xbc>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e68:	4b25      	ldr	r3, [pc, #148]	; (8000f00 <MX_RTC_Init+0xbc>)
 8000e6a:	227f      	movs	r2, #127	; 0x7f
 8000e6c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e6e:	4b24      	ldr	r3, [pc, #144]	; (8000f00 <MX_RTC_Init+0xbc>)
 8000e70:	22ff      	movs	r2, #255	; 0xff
 8000e72:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e74:	4b22      	ldr	r3, [pc, #136]	; (8000f00 <MX_RTC_Init+0xbc>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000e7a:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <MX_RTC_Init+0xbc>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e80:	4b1f      	ldr	r3, [pc, #124]	; (8000f00 <MX_RTC_Init+0xbc>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e86:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <MX_RTC_Init+0xbc>)
 8000e88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e8c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <MX_RTC_Init+0xbc>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e94:	481a      	ldr	r0, [pc, #104]	; (8000f00 <MX_RTC_Init+0xbc>)
 8000e96:	f002 fc39 	bl	800370c <HAL_RTC_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000ea0:	f7ff ffcc 	bl	8000e3c <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	480f      	ldr	r0, [pc, #60]	; (8000f00 <MX_RTC_Init+0xbc>)
 8000ec4:	f002 fc90 	bl	80037e8 <HAL_RTC_SetTime>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_RTC_Init+0x8e>
  {
    Error_Handler();
 8000ece:	f7ff ffb5 	bl	8000e3c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000eda:	2301      	movs	r3, #1
 8000edc:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000ee2:	463b      	mov	r3, r7
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4805      	ldr	r0, [pc, #20]	; (8000f00 <MX_RTC_Init+0xbc>)
 8000eea:	f002 fd13 	bl	8003914 <HAL_RTC_SetDate>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 8000ef4:	f7ff ffa2 	bl	8000e3c <Error_Handler>
  }

}
 8000ef8:	bf00      	nop
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	200004a0 	.word	0x200004a0
 8000f04:	40002800 	.word	0x40002800

08000f08 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a08      	ldr	r2, [pc, #32]	; (8000f38 <HAL_RTC_MspInit+0x30>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d107      	bne.n	8000f2a <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <HAL_RTC_MspInit+0x34>)
 8000f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f20:	4a06      	ldr	r2, [pc, #24]	; (8000f3c <HAL_RTC_MspInit+0x34>)
 8000f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	40002800 	.word	0x40002800
 8000f3c:	40021000 	.word	0x40021000

08000f40 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000f44:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <MX_SPI2_Init+0x74>)
 8000f46:	4a1c      	ldr	r2, [pc, #112]	; (8000fb8 <MX_SPI2_Init+0x78>)
 8000f48:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <MX_SPI2_Init+0x74>)
 8000f4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f50:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f52:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <MX_SPI2_Init+0x74>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f58:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <MX_SPI2_Init+0x74>)
 8000f5a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f5e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f60:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <MX_SPI2_Init+0x74>)
 8000f62:	2202      	movs	r2, #2
 8000f64:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f66:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <MX_SPI2_Init+0x74>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <MX_SPI2_Init+0x74>)
 8000f6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f72:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f74:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <MX_SPI2_Init+0x74>)
 8000f76:	2210      	movs	r2, #16
 8000f78:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <MX_SPI2_Init+0x74>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <MX_SPI2_Init+0x74>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <MX_SPI2_Init+0x74>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000f8c:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <MX_SPI2_Init+0x74>)
 8000f8e:	2207      	movs	r2, #7
 8000f90:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f92:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <MX_SPI2_Init+0x74>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <MX_SPI2_Init+0x74>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f9e:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <MX_SPI2_Init+0x74>)
 8000fa0:	f002 fdf6 	bl	8003b90 <HAL_SPI_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000faa:	f7ff ff47 	bl	8000e3c <Error_Handler>
  }

}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200004c8 	.word	0x200004c8
 8000fb8:	40003800 	.word	0x40003800

08000fbc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	; 0x28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a17      	ldr	r2, [pc, #92]	; (8001038 <HAL_SPI_MspInit+0x7c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d128      	bne.n	8001030 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000fde:	4b17      	ldr	r3, [pc, #92]	; (800103c <HAL_SPI_MspInit+0x80>)
 8000fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe2:	4a16      	ldr	r2, [pc, #88]	; (800103c <HAL_SPI_MspInit+0x80>)
 8000fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe8:	6593      	str	r3, [r2, #88]	; 0x58
 8000fea:	4b14      	ldr	r3, [pc, #80]	; (800103c <HAL_SPI_MspInit+0x80>)
 8000fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff6:	4b11      	ldr	r3, [pc, #68]	; (800103c <HAL_SPI_MspInit+0x80>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	4a10      	ldr	r2, [pc, #64]	; (800103c <HAL_SPI_MspInit+0x80>)
 8000ffc:	f043 0302 	orr.w	r3, r3, #2
 8001000:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <HAL_SPI_MspInit+0x80>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800100e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001012:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2300      	movs	r3, #0
 800101e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001020:	2305      	movs	r3, #5
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	4619      	mov	r1, r3
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <HAL_SPI_MspInit+0x84>)
 800102c:	f001 f98c 	bl	8002348 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001030:	bf00      	nop
 8001032:	3728      	adds	r7, #40	; 0x28
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40003800 	.word	0x40003800
 800103c:	40021000 	.word	0x40021000
 8001040:	48000400 	.word	0x48000400

08001044 <LL_PWR_DisableDeadBatteryPD>:
  * @brief  Disable USB Type-C and Power Delivery Dead Battery disable
  * @rmtoll CR3          UCPD_DBDIS          LL_PWR_DisableDeadBatteryPD
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableDeadBatteryPD(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 800104e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001052:	6093      	str	r3, [r2, #8]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40007000 	.word	0x40007000

08001064 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106a:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <HAL_MspInit+0x44>)
 800106c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800106e:	4a0e      	ldr	r2, [pc, #56]	; (80010a8 <HAL_MspInit+0x44>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6613      	str	r3, [r2, #96]	; 0x60
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <HAL_MspInit+0x44>)
 8001078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <HAL_MspInit+0x44>)
 8001084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001086:	4a08      	ldr	r2, [pc, #32]	; (80010a8 <HAL_MspInit+0x44>)
 8001088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108c:	6593      	str	r3, [r2, #88]	; 0x58
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_MspInit+0x44>)
 8001090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 800109a:	f7ff ffd3 	bl	8001044 <LL_PWR_DisableDeadBatteryPD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40021000 	.word	0x40021000

080010ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010be:	e7fe      	b.n	80010be <HardFault_Handler+0x4>

080010c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <MemManage_Handler+0x4>

080010c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ca:	e7fe      	b.n	80010ca <BusFault_Handler+0x4>

080010cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <UsageFault_Handler+0x4>

080010d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001100:	f000 f9c2 	bl	8001488 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}

08001108 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800110c:	4802      	ldr	r0, [pc, #8]	; (8001118 <FDCAN1_IT0_IRQHandler+0x10>)
 800110e:	f000 fe91 	bl	8001e34 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	2000005c 	.word	0x2000005c

0800111c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001120:	4802      	ldr	r0, [pc, #8]	; (800112c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001122:	f003 fc41 	bl	80049a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	2000056c 	.word	0x2000056c

08001130 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001134:	4802      	ldr	r0, [pc, #8]	; (8001140 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001136:	f003 fc37 	bl	80049a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	2000052c 	.word	0x2000052c

08001144 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001148:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800114c:	f001 fa96 	bl	800267c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}

08001154 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <SystemInit+0x28>)
 800115a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800115e:	4a07      	ldr	r2, [pc, #28]	; (800117c <SystemInit+0x28>)
 8001160:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001164:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001168:	4b04      	ldr	r3, [pc, #16]	; (800117c <SystemInit+0x28>)
 800116a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800116e:	609a      	str	r2, [r3, #8]
#endif
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <MX_TIM16_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8001184:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <MX_TIM16_Init+0x44>)
 8001186:	4a10      	ldr	r2, [pc, #64]	; (80011c8 <MX_TIM16_Init+0x48>)
 8001188:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 127;
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <MX_TIM16_Init+0x44>)
 800118c:	227f      	movs	r2, #127	; 0x7f
 800118e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <MX_TIM16_Init+0x44>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1;
 8001196:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <MX_TIM16_Init+0x44>)
 8001198:	2201      	movs	r2, #1
 800119a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119c:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <MX_TIM16_Init+0x44>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80011a2:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <MX_TIM16_Init+0x44>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <MX_TIM16_Init+0x44>)
 80011aa:	2280      	movs	r2, #128	; 0x80
 80011ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80011ae:	4805      	ldr	r0, [pc, #20]	; (80011c4 <MX_TIM16_Init+0x44>)
 80011b0:	f003 fba4 	bl	80048fc <HAL_TIM_Base_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80011ba:	f7ff fe3f 	bl	8000e3c <Error_Handler>
  }

}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	2000056c 	.word	0x2000056c
 80011c8:	40014400 	.word	0x40014400

080011cc <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 80011d0:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <MX_TIM17_Init+0x44>)
 80011d2:	4a10      	ldr	r2, [pc, #64]	; (8001214 <MX_TIM17_Init+0x48>)
 80011d4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 63999;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <MX_TIM17_Init+0x44>)
 80011d8:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80011dc:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011de:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <MX_TIM17_Init+0x44>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 200;
 80011e4:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <MX_TIM17_Init+0x44>)
 80011e6:	22c8      	movs	r2, #200	; 0xc8
 80011e8:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <MX_TIM17_Init+0x44>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80011f0:	4b07      	ldr	r3, [pc, #28]	; (8001210 <MX_TIM17_Init+0x44>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <MX_TIM17_Init+0x44>)
 80011f8:	2280      	movs	r2, #128	; 0x80
 80011fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80011fc:	4804      	ldr	r0, [pc, #16]	; (8001210 <MX_TIM17_Init+0x44>)
 80011fe:	f003 fb7d 	bl	80048fc <HAL_TIM_Base_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8001208:	f7ff fe18 	bl	8000e3c <Error_Handler>
  }

}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}
 8001210:	2000052c 	.word	0x2000052c
 8001214:	40014800 	.word	0x40014800

08001218 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a13      	ldr	r2, [pc, #76]	; (8001274 <HAL_TIM_Base_MspInit+0x5c>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d10c      	bne.n	8001244 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800122a:	4b13      	ldr	r3, [pc, #76]	; (8001278 <HAL_TIM_Base_MspInit+0x60>)
 800122c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800122e:	4a12      	ldr	r2, [pc, #72]	; (8001278 <HAL_TIM_Base_MspInit+0x60>)
 8001230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001234:	6613      	str	r3, [r2, #96]	; 0x60
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <HAL_TIM_Base_MspInit+0x60>)
 8001238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800123a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001242:	e010      	b.n	8001266 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM17)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a0c      	ldr	r2, [pc, #48]	; (800127c <HAL_TIM_Base_MspInit+0x64>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d10b      	bne.n	8001266 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800124e:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <HAL_TIM_Base_MspInit+0x60>)
 8001250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001252:	4a09      	ldr	r2, [pc, #36]	; (8001278 <HAL_TIM_Base_MspInit+0x60>)
 8001254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001258:	6613      	str	r3, [r2, #96]	; 0x60
 800125a:	4b07      	ldr	r3, [pc, #28]	; (8001278 <HAL_TIM_Base_MspInit+0x60>)
 800125c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800125e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
}
 8001266:	bf00      	nop
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40014400 	.word	0x40014400
 8001278:	40021000 	.word	0x40021000
 800127c:	40014800 	.word	0x40014800

08001280 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0

  hlpuart1.Instance = LPUART1;
 8001284:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <MX_LPUART1_UART_Init+0x84>)
 8001286:	4a20      	ldr	r2, [pc, #128]	; (8001308 <MX_LPUART1_UART_Init+0x88>)
 8001288:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800128a:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <MX_LPUART1_UART_Init+0x84>)
 800128c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001290:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001292:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <MX_LPUART1_UART_Init+0x84>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001298:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <MX_LPUART1_UART_Init+0x84>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800129e:	4b19      	ldr	r3, [pc, #100]	; (8001304 <MX_LPUART1_UART_Init+0x84>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80012a4:	4b17      	ldr	r3, [pc, #92]	; (8001304 <MX_LPUART1_UART_Init+0x84>)
 80012a6:	220c      	movs	r2, #12
 80012a8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012aa:	4b16      	ldr	r3, [pc, #88]	; (8001304 <MX_LPUART1_UART_Init+0x84>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012b0:	4b14      	ldr	r3, [pc, #80]	; (8001304 <MX_LPUART1_UART_Init+0x84>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012b6:	4b13      	ldr	r3, [pc, #76]	; (8001304 <MX_LPUART1_UART_Init+0x84>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80012bc:	4811      	ldr	r0, [pc, #68]	; (8001304 <MX_LPUART1_UART_Init+0x84>)
 80012be:	f003 fe09 	bl	8004ed4 <HAL_UART_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80012c8:	f7ff fdb8 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012cc:	2100      	movs	r1, #0
 80012ce:	480d      	ldr	r0, [pc, #52]	; (8001304 <MX_LPUART1_UART_Init+0x84>)
 80012d0:	f005 f9ad 	bl	800662e <HAL_UARTEx_SetTxFifoThreshold>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_LPUART1_UART_Init+0x5e>
  {
    Error_Handler();
 80012da:	f7ff fdaf 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012de:	2100      	movs	r1, #0
 80012e0:	4808      	ldr	r0, [pc, #32]	; (8001304 <MX_LPUART1_UART_Init+0x84>)
 80012e2:	f005 f9e2 	bl	80066aa <HAL_UARTEx_SetRxFifoThreshold>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_LPUART1_UART_Init+0x70>
  {
    Error_Handler();
 80012ec:	f7ff fda6 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80012f0:	4804      	ldr	r0, [pc, #16]	; (8001304 <MX_LPUART1_UART_Init+0x84>)
 80012f2:	f005 f963 	bl	80065bc <HAL_UARTEx_DisableFifoMode>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_LPUART1_UART_Init+0x80>
  {
    Error_Handler();
 80012fc:	f7ff fd9e 	bl	8000e3c <Error_Handler>
  }

}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	200005ac 	.word	0x200005ac
 8001308:	40008000 	.word	0x40008000

0800130c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	; 0x28
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a17      	ldr	r2, [pc, #92]	; (8001388 <HAL_UART_MspInit+0x7c>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d128      	bne.n	8001380 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800132e:	4b17      	ldr	r3, [pc, #92]	; (800138c <HAL_UART_MspInit+0x80>)
 8001330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001332:	4a16      	ldr	r2, [pc, #88]	; (800138c <HAL_UART_MspInit+0x80>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	65d3      	str	r3, [r2, #92]	; 0x5c
 800133a:	4b14      	ldr	r3, [pc, #80]	; (800138c <HAL_UART_MspInit+0x80>)
 800133c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <HAL_UART_MspInit+0x80>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134a:	4a10      	ldr	r2, [pc, #64]	; (800138c <HAL_UART_MspInit+0x80>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <HAL_UART_MspInit+0x80>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration    
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800135e:	230c      	movs	r3, #12
 8001360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2300      	movs	r3, #0
 800136c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800136e:	230c      	movs	r3, #12
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	4619      	mov	r1, r3
 8001378:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800137c:	f000 ffe4 	bl	8002348 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001380:	bf00      	nop
 8001382:	3728      	adds	r7, #40	; 0x28
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40008000 	.word	0x40008000
 800138c:	40021000 	.word	0x40021000

08001390 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001390:	480d      	ldr	r0, [pc, #52]	; (80013c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001392:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001394:	480d      	ldr	r0, [pc, #52]	; (80013cc <LoopForever+0x6>)
  ldr r1, =_edata
 8001396:	490e      	ldr	r1, [pc, #56]	; (80013d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001398:	4a0e      	ldr	r2, [pc, #56]	; (80013d4 <LoopForever+0xe>)
  movs r3, #0
 800139a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800139c:	e002      	b.n	80013a4 <LoopCopyDataInit>

0800139e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800139e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013a2:	3304      	adds	r3, #4

080013a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a8:	d3f9      	bcc.n	800139e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013aa:	4a0b      	ldr	r2, [pc, #44]	; (80013d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013ac:	4c0b      	ldr	r4, [pc, #44]	; (80013dc <LoopForever+0x16>)
  movs r3, #0
 80013ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b0:	e001      	b.n	80013b6 <LoopFillZerobss>

080013b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b4:	3204      	adds	r2, #4

080013b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b8:	d3fb      	bcc.n	80013b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013ba:	f7ff fecb 	bl	8001154 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013be:	f006 fd93 	bl	8007ee8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013c2:	f7ff f99b 	bl	80006fc <main>

080013c6 <LoopForever>:

LoopForever:
    b LoopForever
 80013c6:	e7fe      	b.n	80013c6 <LoopForever>
  ldr   r0, =_estack
 80013c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d0:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80013d4:	08007fa0 	.word	0x08007fa0
  ldr r2, =_sbss
 80013d8:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80013dc:	20000ad4 	.word	0x20000ad4

080013e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013e0:	e7fe      	b.n	80013e0 <ADC1_2_IRQHandler>

080013e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013e8:	2300      	movs	r3, #0
 80013ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ec:	2003      	movs	r0, #3
 80013ee:	f000 f95b 	bl	80016a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013f2:	2000      	movs	r0, #0
 80013f4:	f000 f80e 	bl	8001414 <HAL_InitTick>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d002      	beq.n	8001404 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	71fb      	strb	r3, [r7, #7]
 8001402:	e001      	b.n	8001408 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001404:	f7ff fe2e 	bl	8001064 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001408:	79fb      	ldrb	r3, [r7, #7]

}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800141c:	2300      	movs	r3, #0
 800141e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001420:	4b16      	ldr	r3, [pc, #88]	; (800147c <HAL_InitTick+0x68>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d022      	beq.n	800146e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001428:	4b15      	ldr	r3, [pc, #84]	; (8001480 <HAL_InitTick+0x6c>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b13      	ldr	r3, [pc, #76]	; (800147c <HAL_InitTick+0x68>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001434:	fbb1 f3f3 	udiv	r3, r1, r3
 8001438:	fbb2 f3f3 	udiv	r3, r2, r3
 800143c:	4618      	mov	r0, r3
 800143e:	f000 f966 	bl	800170e <HAL_SYSTICK_Config>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d10f      	bne.n	8001468 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b0f      	cmp	r3, #15
 800144c:	d809      	bhi.n	8001462 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800144e:	2200      	movs	r2, #0
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	f04f 30ff 	mov.w	r0, #4294967295
 8001456:	f000 f932 	bl	80016be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800145a:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <HAL_InitTick+0x70>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	e007      	b.n	8001472 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	73fb      	strb	r3, [r7, #15]
 8001466:	e004      	b.n	8001472 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	73fb      	strb	r3, [r7, #15]
 800146c:	e001      	b.n	8001472 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001472:	7bfb      	ldrb	r3, [r7, #15]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000008 	.word	0x20000008
 8001480:	20000000 	.word	0x20000000
 8001484:	20000004 	.word	0x20000004

08001488 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <HAL_IncTick+0x1c>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <HAL_IncTick+0x20>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4413      	add	r3, r2
 8001496:	4a03      	ldr	r2, [pc, #12]	; (80014a4 <HAL_IncTick+0x1c>)
 8001498:	6013      	str	r3, [r2, #0]
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	20000638 	.word	0x20000638
 80014a8:	20000008 	.word	0x20000008

080014ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return uwTick;
 80014b0:	4b03      	ldr	r3, [pc, #12]	; (80014c0 <HAL_GetTick+0x14>)
 80014b2:	681b      	ldr	r3, [r3, #0]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	20000638 	.word	0x20000638

080014c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014cc:	f7ff ffee 	bl	80014ac <HAL_GetTick>
 80014d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014dc:	d004      	beq.n	80014e8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <HAL_Delay+0x40>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	4413      	add	r3, r2
 80014e6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014e8:	bf00      	nop
 80014ea:	f7ff ffdf 	bl	80014ac <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	68fa      	ldr	r2, [r7, #12]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d8f7      	bhi.n	80014ea <HAL_Delay+0x26>
  {
  }
}
 80014fa:	bf00      	nop
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000008 	.word	0x20000008

08001508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <__NVIC_SetPriorityGrouping+0x44>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001524:	4013      	ands	r3, r2
 8001526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001530:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800153a:	4a04      	ldr	r2, [pc, #16]	; (800154c <__NVIC_SetPriorityGrouping+0x44>)
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	60d3      	str	r3, [r2, #12]
}
 8001540:	bf00      	nop
 8001542:	3714      	adds	r7, #20
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001554:	4b04      	ldr	r3, [pc, #16]	; (8001568 <__NVIC_GetPriorityGrouping+0x18>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	0a1b      	lsrs	r3, r3, #8
 800155a:	f003 0307 	and.w	r3, r3, #7
}
 800155e:	4618      	mov	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157a:	2b00      	cmp	r3, #0
 800157c:	db0b      	blt.n	8001596 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	f003 021f 	and.w	r2, r3, #31
 8001584:	4907      	ldr	r1, [pc, #28]	; (80015a4 <__NVIC_EnableIRQ+0x38>)
 8001586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158a:	095b      	lsrs	r3, r3, #5
 800158c:	2001      	movs	r0, #1
 800158e:	fa00 f202 	lsl.w	r2, r0, r2
 8001592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000e100 	.word	0xe000e100

080015a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	6039      	str	r1, [r7, #0]
 80015b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	db0a      	blt.n	80015d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	490c      	ldr	r1, [pc, #48]	; (80015f4 <__NVIC_SetPriority+0x4c>)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	0112      	lsls	r2, r2, #4
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	440b      	add	r3, r1
 80015cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015d0:	e00a      	b.n	80015e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4908      	ldr	r1, [pc, #32]	; (80015f8 <__NVIC_SetPriority+0x50>)
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	3b04      	subs	r3, #4
 80015e0:	0112      	lsls	r2, r2, #4
 80015e2:	b2d2      	uxtb	r2, r2
 80015e4:	440b      	add	r3, r1
 80015e6:	761a      	strb	r2, [r3, #24]
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	e000e100 	.word	0xe000e100
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b089      	sub	sp, #36	; 0x24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	f1c3 0307 	rsb	r3, r3, #7
 8001616:	2b04      	cmp	r3, #4
 8001618:	bf28      	it	cs
 800161a:	2304      	movcs	r3, #4
 800161c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3304      	adds	r3, #4
 8001622:	2b06      	cmp	r3, #6
 8001624:	d902      	bls.n	800162c <NVIC_EncodePriority+0x30>
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3b03      	subs	r3, #3
 800162a:	e000      	b.n	800162e <NVIC_EncodePriority+0x32>
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	f04f 32ff 	mov.w	r2, #4294967295
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43da      	mvns	r2, r3
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	401a      	ands	r2, r3
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001644:	f04f 31ff 	mov.w	r1, #4294967295
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	fa01 f303 	lsl.w	r3, r1, r3
 800164e:	43d9      	mvns	r1, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001654:	4313      	orrs	r3, r2
         );
}
 8001656:	4618      	mov	r0, r3
 8001658:	3724      	adds	r7, #36	; 0x24
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
	...

08001664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3b01      	subs	r3, #1
 8001670:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001674:	d301      	bcc.n	800167a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001676:	2301      	movs	r3, #1
 8001678:	e00f      	b.n	800169a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800167a:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <SysTick_Config+0x40>)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3b01      	subs	r3, #1
 8001680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001682:	210f      	movs	r1, #15
 8001684:	f04f 30ff 	mov.w	r0, #4294967295
 8001688:	f7ff ff8e 	bl	80015a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <SysTick_Config+0x40>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001692:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <SysTick_Config+0x40>)
 8001694:	2207      	movs	r2, #7
 8001696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	e000e010 	.word	0xe000e010

080016a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff ff29 	bl	8001508 <__NVIC_SetPriorityGrouping>
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b086      	sub	sp, #24
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	4603      	mov	r3, r0
 80016c6:	60b9      	str	r1, [r7, #8]
 80016c8:	607a      	str	r2, [r7, #4]
 80016ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016cc:	f7ff ff40 	bl	8001550 <__NVIC_GetPriorityGrouping>
 80016d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	68b9      	ldr	r1, [r7, #8]
 80016d6:	6978      	ldr	r0, [r7, #20]
 80016d8:	f7ff ff90 	bl	80015fc <NVIC_EncodePriority>
 80016dc:	4602      	mov	r2, r0
 80016de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e2:	4611      	mov	r1, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff5f 	bl	80015a8 <__NVIC_SetPriority>
}
 80016ea:	bf00      	nop
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	4603      	mov	r3, r0
 80016fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff33 	bl	800156c <__NVIC_EnableIRQ>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff ffa4 	bl	8001664 <SysTick_Config>
 800171c:	4603      	mov	r3, r0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
	...

08001728 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e147      	b.n	80019ca <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d106      	bne.n	8001754 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7fe ff28 	bl	80005a4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	699a      	ldr	r2, [r3, #24]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0210 	bic.w	r2, r2, #16
 8001762:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001764:	f7ff fea2 	bl	80014ac <HAL_GetTick>
 8001768:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800176a:	e012      	b.n	8001792 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800176c:	f7ff fe9e 	bl	80014ac <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b0a      	cmp	r3, #10
 8001778:	d90b      	bls.n	8001792 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800177e:	f043 0201 	orr.w	r2, r3, #1
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2203      	movs	r2, #3
 800178a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e11b      	b.n	80019ca <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	f003 0308 	and.w	r3, r3, #8
 800179c:	2b08      	cmp	r3, #8
 800179e:	d0e5      	beq.n	800176c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	699a      	ldr	r2, [r3, #24]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f042 0201 	orr.w	r2, r2, #1
 80017ae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017b0:	f7ff fe7c 	bl	80014ac <HAL_GetTick>
 80017b4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80017b6:	e012      	b.n	80017de <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80017b8:	f7ff fe78 	bl	80014ac <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b0a      	cmp	r3, #10
 80017c4:	d90b      	bls.n	80017de <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ca:	f043 0201 	orr.w	r2, r3, #1
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2203      	movs	r2, #3
 80017d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e0f5      	b.n	80019ca <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0e5      	beq.n	80017b8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	699a      	ldr	r2, [r3, #24]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 0202 	orr.w	r2, r2, #2
 80017fa:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a74      	ldr	r2, [pc, #464]	; (80019d4 <HAL_FDCAN_Init+0x2ac>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d103      	bne.n	800180e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001806:	4a74      	ldr	r2, [pc, #464]	; (80019d8 <HAL_FDCAN_Init+0x2b0>)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	7c1b      	ldrb	r3, [r3, #16]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d108      	bne.n	8001828 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	699a      	ldr	r2, [r3, #24]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001824:	619a      	str	r2, [r3, #24]
 8001826:	e007      	b.n	8001838 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	699a      	ldr	r2, [r3, #24]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001836:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	7c5b      	ldrb	r3, [r3, #17]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d108      	bne.n	8001852 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	699a      	ldr	r2, [r3, #24]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800184e:	619a      	str	r2, [r3, #24]
 8001850:	e007      	b.n	8001862 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	699a      	ldr	r2, [r3, #24]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001860:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	7c9b      	ldrb	r3, [r3, #18]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d108      	bne.n	800187c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	699a      	ldr	r2, [r3, #24]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001878:	619a      	str	r2, [r3, #24]
 800187a:	e007      	b.n	800188c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	699a      	ldr	r2, [r3, #24]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800188a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	430a      	orrs	r2, r1
 80018a0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	699a      	ldr	r2, [r3, #24]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80018b0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	691a      	ldr	r2, [r3, #16]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 0210 	bic.w	r2, r2, #16
 80018c0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d108      	bne.n	80018dc <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	699a      	ldr	r2, [r3, #24]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f042 0204 	orr.w	r2, r2, #4
 80018d8:	619a      	str	r2, [r3, #24]
 80018da:	e02c      	b.n	8001936 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d028      	beq.n	8001936 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d01c      	beq.n	8001926 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	699a      	ldr	r2, [r3, #24]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018fa:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	691a      	ldr	r2, [r3, #16]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0210 	orr.w	r2, r2, #16
 800190a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	2b03      	cmp	r3, #3
 8001912:	d110      	bne.n	8001936 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	699a      	ldr	r2, [r3, #24]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 0220 	orr.w	r2, r2, #32
 8001922:	619a      	str	r2, [r3, #24]
 8001924:	e007      	b.n	8001936 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	699a      	ldr	r2, [r3, #24]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f042 0220 	orr.w	r2, r2, #32
 8001934:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	3b01      	subs	r3, #1
 800193c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	3b01      	subs	r3, #1
 8001944:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001946:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800194e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	3b01      	subs	r3, #1
 8001958:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800195e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001960:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800196a:	d115      	bne.n	8001998 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001970:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001976:	3b01      	subs	r3, #1
 8001978:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800197a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001980:	3b01      	subs	r3, #1
 8001982:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001984:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198c:	3b01      	subs	r3, #1
 800198e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001994:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001996:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	430a      	orrs	r2, r1
 80019aa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 fbe2 	bl	8002178 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40006400 	.word	0x40006400
 80019d8:	40006500 	.word	0x40006500

080019dc <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d110      	bne.n	8001a12 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2202      	movs	r2, #2
 80019f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	699a      	ldr	r2, [r3, #24]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0201 	bic.w	r2, r2, #1
 8001a06:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e006      	b.n	8001a20 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a16:	f043 0204 	orr.w	r2, r3, #4
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
  }
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d12c      	bne.n	8001a9e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001a4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d007      	beq.n	8001a64 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a58:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e023      	b.n	8001aac <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001a6c:	0c1b      	lsrs	r3, r3, #16
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	68b9      	ldr	r1, [r7, #8]
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	f000 fbe8 	bl	8002250 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2101      	movs	r1, #1
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001a90:	2201      	movs	r2, #1
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	409a      	lsls	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e006      	b.n	8001aac <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa2:	f043 0208 	orr.w	r2, r3, #8
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
  }
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b08b      	sub	sp, #44	; 0x2c
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
 8001ac0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001ac8:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001aca:	7efb      	ldrb	r3, [r7, #27]
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	f040 80bc 	bne.w	8001c4a <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	2b40      	cmp	r3, #64	; 0x40
 8001ad6:	d121      	bne.n	8001b1c <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae0:	f003 030f 	and.w	r3, r3, #15
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d107      	bne.n	8001af8 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e0af      	b.n	8001c58 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b00:	0a1b      	lsrs	r3, r3, #8
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001b0c:	69fa      	ldr	r2, [r7, #28]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	4413      	add	r3, r2
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	440b      	add	r3, r1
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1a:	e020      	b.n	8001b5e <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b24:	f003 030f 	and.w	r3, r3, #15
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d107      	bne.n	8001b3c <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e08d      	b.n	8001c58 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b44:	0a1b      	lsrs	r3, r3, #8
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001b50:	69fa      	ldr	r2, [r7, #28]
 8001b52:	4613      	mov	r3, r2
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	4413      	add	r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	440b      	add	r3, r1
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d107      	bne.n	8001b82 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	0c9b      	lsrs	r3, r3, #18
 8001b78:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	e005      	b.n	8001b8e <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba8:	3304      	adds	r3, #4
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	0e1b      	lsrs	r3, r3, #24
 8001be0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	0fda      	lsrs	r2, r3, #31
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfa:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	623b      	str	r3, [r7, #32]
 8001c00:	e00a      	b.n	8001c18 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	6a3b      	ldr	r3, [r7, #32]
 8001c06:	441a      	add	r2, r3
 8001c08:	6839      	ldr	r1, [r7, #0]
 8001c0a:	6a3b      	ldr	r3, [r7, #32]
 8001c0c:	440b      	add	r3, r1
 8001c0e:	7812      	ldrb	r2, [r2, #0]
 8001c10:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8001c12:	6a3b      	ldr	r3, [r7, #32]
 8001c14:	3301      	adds	r3, #1
 8001c16:	623b      	str	r3, [r7, #32]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	0c1b      	lsrs	r3, r3, #16
 8001c1e:	4a11      	ldr	r2, [pc, #68]	; (8001c64 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8001c20:	5cd3      	ldrb	r3, [r2, r3]
 8001c22:	461a      	mov	r2, r3
 8001c24:	6a3b      	ldr	r3, [r7, #32]
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d3eb      	bcc.n	8001c02 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	2b40      	cmp	r3, #64	; 0x40
 8001c2e:	d105      	bne.n	8001c3c <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	69fa      	ldr	r2, [r7, #28]
 8001c36:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8001c3a:	e004      	b.n	8001c46 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	69fa      	ldr	r2, [r7, #28]
 8001c42:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	e006      	b.n	8001c58 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c4e:	f043 0208 	orr.w	r2, r3, #8
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
  }
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	372c      	adds	r7, #44	; 0x2c
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	08007f80 	.word	0x08007f80

08001c68 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b087      	sub	sp, #28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001c7a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001c7c:	7dfb      	ldrb	r3, [r7, #23]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d003      	beq.n	8001c8a <HAL_FDCAN_ActivateNotification+0x22>
 8001c82:	7dfb      	ldrb	r3, [r7, #23]
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	f040 80c8 	bne.w	8001e1a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c90:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d004      	beq.n	8001ca6 <HAL_FDCAN_ActivateNotification+0x3e>
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d03b      	beq.n	8001d1e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       == 0U)) || \
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d004      	beq.n	8001cba <HAL_FDCAN_ActivateNotification+0x52>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d031      	beq.n	8001d1e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       == 0U)) || \
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d004      	beq.n	8001cce <HAL_FDCAN_ActivateNotification+0x66>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	f003 0304 	and.w	r3, r3, #4
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d027      	beq.n	8001d1e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           == 0U)) || \
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d004      	beq.n	8001ce2 <HAL_FDCAN_ActivateNotification+0x7a>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d01d      	beq.n	8001d1e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d004      	beq.n	8001cf6 <HAL_FDCAN_ActivateNotification+0x8e>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	f003 0310 	and.w	r3, r3, #16
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d013      	beq.n	8001d1e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d004      	beq.n	8001d0a <HAL_FDCAN_ActivateNotification+0xa2>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	f003 0320 	and.w	r3, r3, #32
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d009      	beq.n	8001d1e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d00c      	beq.n	8001d2e <HAL_FDCAN_ActivateNotification+0xc6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d107      	bne.n	8001d2e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f042 0201 	orr.w	r2, r2, #1
 8001d2c:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d004      	beq.n	8001d42 <HAL_FDCAN_ActivateNotification+0xda>
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d13b      	bne.n	8001dba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)       != 0U)) || \
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d004      	beq.n	8001d56 <HAL_FDCAN_ActivateNotification+0xee>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d131      	bne.n	8001dba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d004      	beq.n	8001d6a <HAL_FDCAN_ActivateNotification+0x102>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	f003 0304 	and.w	r3, r3, #4
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d127      	bne.n	8001dba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d004      	beq.n	8001d7e <HAL_FDCAN_ActivateNotification+0x116>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d11d      	bne.n	8001dba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d004      	beq.n	8001d92 <HAL_FDCAN_ActivateNotification+0x12a>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	f003 0310 	and.w	r3, r3, #16
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d113      	bne.n	8001dba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d004      	beq.n	8001da6 <HAL_FDCAN_ActivateNotification+0x13e>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	f003 0320 	and.w	r3, r3, #32
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d109      	bne.n	8001dba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00c      	beq.n	8001dca <HAL_FDCAN_ActivateNotification+0x162>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U) && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d007      	beq.n	8001dca <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f042 0202 	orr.w	r2, r2, #2
 8001dc8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d009      	beq.n	8001de8 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d009      	beq.n	8001e06 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001e16:	2300      	movs	r3, #0
 8001e18:	e006      	b.n	8001e28 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e1e:	f043 0202 	orr.w	r2, r3, #2
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
  }
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	371c      	adds	r7, #28
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08a      	sub	sp, #40	; 0x28
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e42:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e50:	4013      	ands	r3, r2
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e66:	6a3a      	ldr	r2, [r7, #32]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e76:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7e:	69fa      	ldr	r2, [r7, #28]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e8a:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8001e8e:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ea2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001ea6:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00d      	beq.n	8001ede <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d006      	beq.n	8001ede <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2240      	movs	r2, #64	; 0x40
 8001ed6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 f92e 	bl	800213a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d01b      	beq.n	8001f24 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d014      	beq.n	8001f24 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f02:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f1a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001f1c:	6939      	ldr	r1, [r7, #16]
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f8ec 	bl	80020fc <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d007      	beq.n	8001f3a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f30:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001f32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 f8b6 	bl	80020a6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d007      	beq.n	8001f50 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6a3a      	ldr	r2, [r7, #32]
 8001f46:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001f48:	6a39      	ldr	r1, [r7, #32]
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7fe fdb8 	bl	8000ac0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d007      	beq.n	8001f66 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	69fa      	ldr	r2, [r7, #28]
 8001f5c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001f5e:	69f9      	ldr	r1, [r7, #28]
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f8ab 	bl	80020bc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00e      	beq.n	8001f92 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d007      	beq.n	8001f92 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f8a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f8a0 	bl	80020d2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d01a      	beq.n	8001fd6 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d013      	beq.n	8001fd6 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001fb6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2280      	movs	r2, #128	; 0x80
 8001fcc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001fce:	68f9      	ldr	r1, [r7, #12]
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f888 	bl	80020e6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00e      	beq.n	8002002 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d007      	beq.n	8002002 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ffa:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f888 	bl	8002112 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002008:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00e      	beq.n	800202e <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002016:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d007      	beq.n	800202e <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002026:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f87c 	bl	8002126 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002034:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d011      	beq.n	8002060 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00a      	beq.n	8002060 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002052:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002058:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d007      	beq.n	8002076 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
      /* Error Status Callback */
      HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800206e:	6979      	ldr	r1, [r7, #20]
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f876 	bl	8002162 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d009      	beq.n	8002090 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	431a      	orrs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002094:	2b00      	cmp	r3, #0
 8002096:	d002      	beq.n	800209e <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f858 	bl	800214e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800209e:	bf00      	nop
 80020a0:	3728      	adds	r7, #40	; 0x28
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
 80020ae:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
 80020ee:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002180:	4b30      	ldr	r3, [pc, #192]	; (8002244 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8002182:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a2f      	ldr	r2, [pc, #188]	; (8002248 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d103      	bne.n	8002196 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002194:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a2c      	ldr	r2, [pc, #176]	; (800224c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d103      	bne.n	80021a8 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80021a6:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021b6:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021be:	041a      	lsls	r2, r3, #16
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021dc:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e4:	061a      	lsls	r2, r3, #24
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	e005      	b.n	800222a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	3304      	adds	r3, #4
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	429a      	cmp	r2, r3
 8002234:	d3f3      	bcc.n	800221e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8002236:	bf00      	nop
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	4000a400 	.word	0x4000a400
 8002248:	40006800 	.word	0x40006800
 800224c:	40006c00 	.word	0x40006c00

08002250 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8002250:	b480      	push	{r7}
 8002252:	b089      	sub	sp, #36	; 0x24
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
 800225c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10a      	bne.n	800227c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800226e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002276:	4313      	orrs	r3, r2
 8002278:	61fb      	str	r3, [r7, #28]
 800227a:	e00a      	b.n	8002292 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002284:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800228a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800228c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002290:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800229c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80022a2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80022a8:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80022ae:	4313      	orrs	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	4613      	mov	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4413      	add	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	440b      	add	r3, r1
 80022c2:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	69fa      	ldr	r2, [r7, #28]
 80022c8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	3304      	adds	r3, #4
 80022ce:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	3304      	adds	r3, #4
 80022da:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	e020      	b.n	8002324 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	3303      	adds	r3, #3
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	4413      	add	r3, r2
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	3302      	adds	r3, #2
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	440b      	add	r3, r1
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80022fa:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	3301      	adds	r3, #1
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	440b      	add	r3, r1
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002308:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	440a      	add	r2, r1
 8002310:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002312:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	3304      	adds	r3, #4
 800231c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	3304      	adds	r3, #4
 8002322:	617b      	str	r3, [r7, #20]
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	0c1b      	lsrs	r3, r3, #16
 800232a:	4a06      	ldr	r2, [pc, #24]	; (8002344 <FDCAN_CopyMessageToRAM+0xf4>)
 800232c:	5cd3      	ldrb	r3, [r2, r3]
 800232e:	461a      	mov	r2, r3
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	4293      	cmp	r3, r2
 8002334:	d3d5      	bcc.n	80022e2 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8002336:	bf00      	nop
 8002338:	3724      	adds	r7, #36	; 0x24
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	08007f80 	.word	0x08007f80

08002348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002348:	b480      	push	{r7}
 800234a:	b087      	sub	sp, #28
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002356:	e15a      	b.n	800260e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	2101      	movs	r1, #1
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	fa01 f303 	lsl.w	r3, r1, r3
 8002364:	4013      	ands	r3, r2
 8002366:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 814c 	beq.w	8002608 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b02      	cmp	r3, #2
 8002376:	d003      	beq.n	8002380 <HAL_GPIO_Init+0x38>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b12      	cmp	r3, #18
 800237e:	d123      	bne.n	80023c8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	08da      	lsrs	r2, r3, #3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3208      	adds	r2, #8
 8002388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800238c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	220f      	movs	r2, #15
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	43db      	mvns	r3, r3
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	4013      	ands	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	691a      	ldr	r2, [r3, #16]
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	08da      	lsrs	r2, r3, #3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3208      	adds	r2, #8
 80023c2:	6939      	ldr	r1, [r7, #16]
 80023c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	2203      	movs	r2, #3
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4013      	ands	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 0203 	and.w	r2, r3, #3
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d00b      	beq.n	800241c <HAL_GPIO_Init+0xd4>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b02      	cmp	r3, #2
 800240a:	d007      	beq.n	800241c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002410:	2b11      	cmp	r3, #17
 8002412:	d003      	beq.n	800241c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b12      	cmp	r3, #18
 800241a:	d130      	bne.n	800247e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	2203      	movs	r2, #3
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	4013      	ands	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	68da      	ldr	r2, [r3, #12]
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4313      	orrs	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002452:	2201      	movs	r2, #1
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	4013      	ands	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	091b      	lsrs	r3, r3, #4
 8002468:	f003 0201 	and.w	r2, r3, #1
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	2203      	movs	r2, #3
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43db      	mvns	r3, r3
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4013      	ands	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 80a6 	beq.w	8002608 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024bc:	4b5b      	ldr	r3, [pc, #364]	; (800262c <HAL_GPIO_Init+0x2e4>)
 80024be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c0:	4a5a      	ldr	r2, [pc, #360]	; (800262c <HAL_GPIO_Init+0x2e4>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	6613      	str	r3, [r2, #96]	; 0x60
 80024c8:	4b58      	ldr	r3, [pc, #352]	; (800262c <HAL_GPIO_Init+0x2e4>)
 80024ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024d4:	4a56      	ldr	r2, [pc, #344]	; (8002630 <HAL_GPIO_Init+0x2e8>)
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	089b      	lsrs	r3, r3, #2
 80024da:	3302      	adds	r3, #2
 80024dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	220f      	movs	r2, #15
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	4013      	ands	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024fe:	d01f      	beq.n	8002540 <HAL_GPIO_Init+0x1f8>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a4c      	ldr	r2, [pc, #304]	; (8002634 <HAL_GPIO_Init+0x2ec>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d019      	beq.n	800253c <HAL_GPIO_Init+0x1f4>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a4b      	ldr	r2, [pc, #300]	; (8002638 <HAL_GPIO_Init+0x2f0>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d013      	beq.n	8002538 <HAL_GPIO_Init+0x1f0>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a4a      	ldr	r2, [pc, #296]	; (800263c <HAL_GPIO_Init+0x2f4>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d00d      	beq.n	8002534 <HAL_GPIO_Init+0x1ec>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a49      	ldr	r2, [pc, #292]	; (8002640 <HAL_GPIO_Init+0x2f8>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d007      	beq.n	8002530 <HAL_GPIO_Init+0x1e8>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a48      	ldr	r2, [pc, #288]	; (8002644 <HAL_GPIO_Init+0x2fc>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d101      	bne.n	800252c <HAL_GPIO_Init+0x1e4>
 8002528:	2305      	movs	r3, #5
 800252a:	e00a      	b.n	8002542 <HAL_GPIO_Init+0x1fa>
 800252c:	2306      	movs	r3, #6
 800252e:	e008      	b.n	8002542 <HAL_GPIO_Init+0x1fa>
 8002530:	2304      	movs	r3, #4
 8002532:	e006      	b.n	8002542 <HAL_GPIO_Init+0x1fa>
 8002534:	2303      	movs	r3, #3
 8002536:	e004      	b.n	8002542 <HAL_GPIO_Init+0x1fa>
 8002538:	2302      	movs	r3, #2
 800253a:	e002      	b.n	8002542 <HAL_GPIO_Init+0x1fa>
 800253c:	2301      	movs	r3, #1
 800253e:	e000      	b.n	8002542 <HAL_GPIO_Init+0x1fa>
 8002540:	2300      	movs	r3, #0
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	f002 0203 	and.w	r2, r2, #3
 8002548:	0092      	lsls	r2, r2, #2
 800254a:	4093      	lsls	r3, r2
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	4313      	orrs	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002552:	4937      	ldr	r1, [pc, #220]	; (8002630 <HAL_GPIO_Init+0x2e8>)
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	089b      	lsrs	r3, r3, #2
 8002558:	3302      	adds	r3, #2
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002560:	4b39      	ldr	r3, [pc, #228]	; (8002648 <HAL_GPIO_Init+0x300>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	43db      	mvns	r3, r3
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	4013      	ands	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	4313      	orrs	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002584:	4a30      	ldr	r2, [pc, #192]	; (8002648 <HAL_GPIO_Init+0x300>)
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800258a:	4b2f      	ldr	r3, [pc, #188]	; (8002648 <HAL_GPIO_Init+0x300>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	43db      	mvns	r3, r3
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	4013      	ands	r3, r2
 8002598:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025ae:	4a26      	ldr	r2, [pc, #152]	; (8002648 <HAL_GPIO_Init+0x300>)
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025b4:	4b24      	ldr	r3, [pc, #144]	; (8002648 <HAL_GPIO_Init+0x300>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	43db      	mvns	r3, r3
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	4013      	ands	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025d8:	4a1b      	ldr	r2, [pc, #108]	; (8002648 <HAL_GPIO_Init+0x300>)
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025de:	4b1a      	ldr	r3, [pc, #104]	; (8002648 <HAL_GPIO_Init+0x300>)
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	43db      	mvns	r3, r3
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	4013      	ands	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	4313      	orrs	r3, r2
 8002600:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002602:	4a11      	ldr	r2, [pc, #68]	; (8002648 <HAL_GPIO_Init+0x300>)
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	3301      	adds	r3, #1
 800260c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	fa22 f303 	lsr.w	r3, r2, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	f47f ae9d 	bne.w	8002358 <HAL_GPIO_Init+0x10>
  }
}
 800261e:	bf00      	nop
 8002620:	371c      	adds	r7, #28
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	40021000 	.word	0x40021000
 8002630:	40010000 	.word	0x40010000
 8002634:	48000400 	.word	0x48000400
 8002638:	48000800 	.word	0x48000800
 800263c:	48000c00 	.word	0x48000c00
 8002640:	48001000 	.word	0x48001000
 8002644:	48001400 	.word	0x48001400
 8002648:	40010400 	.word	0x40010400

0800264c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	807b      	strh	r3, [r7, #2]
 8002658:	4613      	mov	r3, r2
 800265a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800265c:	787b      	ldrb	r3, [r7, #1]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002662:	887a      	ldrh	r2, [r7, #2]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002668:	e002      	b.n	8002670 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800266a:	887a      	ldrh	r2, [r7, #2]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002686:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002688:	695a      	ldr	r2, [r3, #20]
 800268a:	88fb      	ldrh	r3, [r7, #6]
 800268c:	4013      	ands	r3, r2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d006      	beq.n	80026a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002692:	4a05      	ldr	r2, [pc, #20]	; (80026a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002694:	88fb      	ldrh	r3, [r7, #6]
 8002696:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002698:	88fb      	ldrh	r3, [r7, #6]
 800269a:	4618      	mov	r0, r3
 800269c:	f000 f806 	bl	80026ac <HAL_GPIO_EXTI_Callback>
  }
}
 80026a0:	bf00      	nop
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40010400 	.word	0x40010400

080026ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
	...

080026c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d141      	bne.n	8002756 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026d2:	4b4b      	ldr	r3, [pc, #300]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026de:	d131      	bne.n	8002744 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026e0:	4b47      	ldr	r3, [pc, #284]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026e6:	4a46      	ldr	r2, [pc, #280]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026f0:	4b43      	ldr	r3, [pc, #268]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026f8:	4a41      	ldr	r2, [pc, #260]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002700:	4b40      	ldr	r3, [pc, #256]	; (8002804 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2232      	movs	r2, #50	; 0x32
 8002706:	fb02 f303 	mul.w	r3, r2, r3
 800270a:	4a3f      	ldr	r2, [pc, #252]	; (8002808 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800270c:	fba2 2303 	umull	r2, r3, r2, r3
 8002710:	0c9b      	lsrs	r3, r3, #18
 8002712:	3301      	adds	r3, #1
 8002714:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002716:	e002      	b.n	800271e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	3b01      	subs	r3, #1
 800271c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800271e:	4b38      	ldr	r3, [pc, #224]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800272a:	d102      	bne.n	8002732 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f2      	bne.n	8002718 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002732:	4b33      	ldr	r3, [pc, #204]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800273a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800273e:	d158      	bne.n	80027f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e057      	b.n	80027f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002744:	4b2e      	ldr	r3, [pc, #184]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002746:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800274a:	4a2d      	ldr	r2, [pc, #180]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800274c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002750:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002754:	e04d      	b.n	80027f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800275c:	d141      	bne.n	80027e2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800275e:	4b28      	ldr	r3, [pc, #160]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800276a:	d131      	bne.n	80027d0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800276c:	4b24      	ldr	r3, [pc, #144]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800276e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002772:	4a23      	ldr	r2, [pc, #140]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002778:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800277c:	4b20      	ldr	r3, [pc, #128]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002784:	4a1e      	ldr	r2, [pc, #120]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002786:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800278a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800278c:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2232      	movs	r2, #50	; 0x32
 8002792:	fb02 f303 	mul.w	r3, r2, r3
 8002796:	4a1c      	ldr	r2, [pc, #112]	; (8002808 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002798:	fba2 2303 	umull	r2, r3, r2, r3
 800279c:	0c9b      	lsrs	r3, r3, #18
 800279e:	3301      	adds	r3, #1
 80027a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027a2:	e002      	b.n	80027aa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027aa:	4b15      	ldr	r3, [pc, #84]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027b6:	d102      	bne.n	80027be <HAL_PWREx_ControlVoltageScaling+0xfa>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f2      	bne.n	80027a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027be:	4b10      	ldr	r3, [pc, #64]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ca:	d112      	bne.n	80027f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e011      	b.n	80027f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027d0:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027d6:	4a0a      	ldr	r2, [pc, #40]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80027e0:	e007      	b.n	80027f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027e2:	4b07      	ldr	r3, [pc, #28]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027ea:	4a05      	ldr	r2, [pc, #20]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027f0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	40007000 	.word	0x40007000
 8002804:	20000000 	.word	0x20000000
 8002808:	431bde83 	.word	0x431bde83

0800280c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b088      	sub	sp, #32
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e308      	b.n	8002e30 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d075      	beq.n	8002916 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800282a:	4ba3      	ldr	r3, [pc, #652]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 030c 	and.w	r3, r3, #12
 8002832:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002834:	4ba0      	ldr	r3, [pc, #640]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f003 0303 	and.w	r3, r3, #3
 800283c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	2b0c      	cmp	r3, #12
 8002842:	d102      	bne.n	800284a <HAL_RCC_OscConfig+0x3e>
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	2b03      	cmp	r3, #3
 8002848:	d002      	beq.n	8002850 <HAL_RCC_OscConfig+0x44>
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	2b08      	cmp	r3, #8
 800284e:	d10b      	bne.n	8002868 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002850:	4b99      	ldr	r3, [pc, #612]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d05b      	beq.n	8002914 <HAL_RCC_OscConfig+0x108>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d157      	bne.n	8002914 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e2e3      	b.n	8002e30 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002870:	d106      	bne.n	8002880 <HAL_RCC_OscConfig+0x74>
 8002872:	4b91      	ldr	r3, [pc, #580]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a90      	ldr	r2, [pc, #576]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 8002878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	e01d      	b.n	80028bc <HAL_RCC_OscConfig+0xb0>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002888:	d10c      	bne.n	80028a4 <HAL_RCC_OscConfig+0x98>
 800288a:	4b8b      	ldr	r3, [pc, #556]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a8a      	ldr	r2, [pc, #552]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 8002890:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	4b88      	ldr	r3, [pc, #544]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a87      	ldr	r2, [pc, #540]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 800289c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	e00b      	b.n	80028bc <HAL_RCC_OscConfig+0xb0>
 80028a4:	4b84      	ldr	r3, [pc, #528]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a83      	ldr	r2, [pc, #524]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 80028aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	4b81      	ldr	r3, [pc, #516]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a80      	ldr	r2, [pc, #512]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 80028b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d013      	beq.n	80028ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c4:	f7fe fdf2 	bl	80014ac <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028cc:	f7fe fdee 	bl	80014ac <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b64      	cmp	r3, #100	; 0x64
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e2a8      	b.n	8002e30 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028de:	4b76      	ldr	r3, [pc, #472]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0f0      	beq.n	80028cc <HAL_RCC_OscConfig+0xc0>
 80028ea:	e014      	b.n	8002916 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ec:	f7fe fdde 	bl	80014ac <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028f4:	f7fe fdda 	bl	80014ac <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b64      	cmp	r3, #100	; 0x64
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e294      	b.n	8002e30 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002906:	4b6c      	ldr	r3, [pc, #432]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f0      	bne.n	80028f4 <HAL_RCC_OscConfig+0xe8>
 8002912:	e000      	b.n	8002916 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d075      	beq.n	8002a0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002922:	4b65      	ldr	r3, [pc, #404]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 030c 	and.w	r3, r3, #12
 800292a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800292c:	4b62      	ldr	r3, [pc, #392]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	2b0c      	cmp	r3, #12
 800293a:	d102      	bne.n	8002942 <HAL_RCC_OscConfig+0x136>
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d002      	beq.n	8002948 <HAL_RCC_OscConfig+0x13c>
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	2b04      	cmp	r3, #4
 8002946:	d11f      	bne.n	8002988 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002948:	4b5b      	ldr	r3, [pc, #364]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002950:	2b00      	cmp	r3, #0
 8002952:	d005      	beq.n	8002960 <HAL_RCC_OscConfig+0x154>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e267      	b.n	8002e30 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002960:	4b55      	ldr	r3, [pc, #340]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	061b      	lsls	r3, r3, #24
 800296e:	4952      	ldr	r1, [pc, #328]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 8002970:	4313      	orrs	r3, r2
 8002972:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002974:	4b51      	ldr	r3, [pc, #324]	; (8002abc <HAL_RCC_OscConfig+0x2b0>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f7fe fd4b 	bl	8001414 <HAL_InitTick>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d043      	beq.n	8002a0c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e253      	b.n	8002e30 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d023      	beq.n	80029d8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002990:	4b49      	ldr	r3, [pc, #292]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a48      	ldr	r2, [pc, #288]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 8002996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800299a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299c:	f7fe fd86 	bl	80014ac <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029a4:	f7fe fd82 	bl	80014ac <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e23c      	b.n	8002e30 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029b6:	4b40      	ldr	r3, [pc, #256]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f0      	beq.n	80029a4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c2:	4b3d      	ldr	r3, [pc, #244]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	061b      	lsls	r3, r3, #24
 80029d0:	4939      	ldr	r1, [pc, #228]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	604b      	str	r3, [r1, #4]
 80029d6:	e01a      	b.n	8002a0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029d8:	4b37      	ldr	r3, [pc, #220]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a36      	ldr	r2, [pc, #216]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 80029de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e4:	f7fe fd62 	bl	80014ac <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ec:	f7fe fd5e 	bl	80014ac <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e218      	b.n	8002e30 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029fe:	4b2e      	ldr	r3, [pc, #184]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f0      	bne.n	80029ec <HAL_RCC_OscConfig+0x1e0>
 8002a0a:	e000      	b.n	8002a0e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a0c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d03c      	beq.n	8002a94 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d01c      	beq.n	8002a5c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a22:	4b25      	ldr	r3, [pc, #148]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 8002a24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a28:	4a23      	ldr	r2, [pc, #140]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 8002a2a:	f043 0301 	orr.w	r3, r3, #1
 8002a2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a32:	f7fe fd3b 	bl	80014ac <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a3a:	f7fe fd37 	bl	80014ac <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e1f1      	b.n	8002e30 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a4c:	4b1a      	ldr	r3, [pc, #104]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 8002a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0ef      	beq.n	8002a3a <HAL_RCC_OscConfig+0x22e>
 8002a5a:	e01b      	b.n	8002a94 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a5c:	4b16      	ldr	r3, [pc, #88]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 8002a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a62:	4a15      	ldr	r2, [pc, #84]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 8002a64:	f023 0301 	bic.w	r3, r3, #1
 8002a68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6c:	f7fe fd1e 	bl	80014ac <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a74:	f7fe fd1a 	bl	80014ac <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e1d4      	b.n	8002e30 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a86:	4b0c      	ldr	r3, [pc, #48]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 8002a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1ef      	bne.n	8002a74 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 80ab 	beq.w	8002bf8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002aa6:	4b04      	ldr	r3, [pc, #16]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 8002aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d106      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x2b4>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e005      	b.n	8002ac2 <HAL_RCC_OscConfig+0x2b6>
 8002ab6:	bf00      	nop
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	20000004 	.word	0x20000004
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00d      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ac6:	4baf      	ldr	r3, [pc, #700]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aca:	4aae      	ldr	r2, [pc, #696]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ad0:	6593      	str	r3, [r2, #88]	; 0x58
 8002ad2:	4bac      	ldr	r3, [pc, #688]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ae2:	4ba9      	ldr	r3, [pc, #676]	; (8002d88 <HAL_RCC_OscConfig+0x57c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d118      	bne.n	8002b20 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aee:	4ba6      	ldr	r3, [pc, #664]	; (8002d88 <HAL_RCC_OscConfig+0x57c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4aa5      	ldr	r2, [pc, #660]	; (8002d88 <HAL_RCC_OscConfig+0x57c>)
 8002af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002afa:	f7fe fcd7 	bl	80014ac <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b02:	f7fe fcd3 	bl	80014ac <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e18d      	b.n	8002e30 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b14:	4b9c      	ldr	r3, [pc, #624]	; (8002d88 <HAL_RCC_OscConfig+0x57c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0f0      	beq.n	8002b02 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d108      	bne.n	8002b3a <HAL_RCC_OscConfig+0x32e>
 8002b28:	4b96      	ldr	r3, [pc, #600]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2e:	4a95      	ldr	r2, [pc, #596]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b38:	e024      	b.n	8002b84 <HAL_RCC_OscConfig+0x378>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	2b05      	cmp	r3, #5
 8002b40:	d110      	bne.n	8002b64 <HAL_RCC_OscConfig+0x358>
 8002b42:	4b90      	ldr	r3, [pc, #576]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b48:	4a8e      	ldr	r2, [pc, #568]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002b4a:	f043 0304 	orr.w	r3, r3, #4
 8002b4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b52:	4b8c      	ldr	r3, [pc, #560]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b58:	4a8a      	ldr	r2, [pc, #552]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002b5a:	f043 0301 	orr.w	r3, r3, #1
 8002b5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b62:	e00f      	b.n	8002b84 <HAL_RCC_OscConfig+0x378>
 8002b64:	4b87      	ldr	r3, [pc, #540]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6a:	4a86      	ldr	r2, [pc, #536]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002b6c:	f023 0301 	bic.w	r3, r3, #1
 8002b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b74:	4b83      	ldr	r3, [pc, #524]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7a:	4a82      	ldr	r2, [pc, #520]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002b7c:	f023 0304 	bic.w	r3, r3, #4
 8002b80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d016      	beq.n	8002bba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b8c:	f7fe fc8e 	bl	80014ac <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b92:	e00a      	b.n	8002baa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b94:	f7fe fc8a 	bl	80014ac <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e142      	b.n	8002e30 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002baa:	4b76      	ldr	r3, [pc, #472]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0ed      	beq.n	8002b94 <HAL_RCC_OscConfig+0x388>
 8002bb8:	e015      	b.n	8002be6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bba:	f7fe fc77 	bl	80014ac <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bc0:	e00a      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc2:	f7fe fc73 	bl	80014ac <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e12b      	b.n	8002e30 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bd8:	4b6a      	ldr	r3, [pc, #424]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1ed      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002be6:	7ffb      	ldrb	r3, [r7, #31]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d105      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bec:	4b65      	ldr	r3, [pc, #404]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf0:	4a64      	ldr	r2, [pc, #400]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002bf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bf6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0320 	and.w	r3, r3, #32
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d03c      	beq.n	8002c7e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d01c      	beq.n	8002c46 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c0c:	4b5d      	ldr	r3, [pc, #372]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002c0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c12:	4a5c      	ldr	r2, [pc, #368]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002c14:	f043 0301 	orr.w	r3, r3, #1
 8002c18:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1c:	f7fe fc46 	bl	80014ac <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c24:	f7fe fc42 	bl	80014ac <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e0fc      	b.n	8002e30 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c36:	4b53      	ldr	r3, [pc, #332]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002c38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0ef      	beq.n	8002c24 <HAL_RCC_OscConfig+0x418>
 8002c44:	e01b      	b.n	8002c7e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c46:	4b4f      	ldr	r3, [pc, #316]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002c48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c4c:	4a4d      	ldr	r2, [pc, #308]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002c4e:	f023 0301 	bic.w	r3, r3, #1
 8002c52:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c56:	f7fe fc29 	bl	80014ac <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c5e:	f7fe fc25 	bl	80014ac <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e0df      	b.n	8002e30 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c70:	4b44      	ldr	r3, [pc, #272]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002c72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1ef      	bne.n	8002c5e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f000 80d3 	beq.w	8002e2e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c88:	4b3e      	ldr	r3, [pc, #248]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 030c 	and.w	r3, r3, #12
 8002c90:	2b0c      	cmp	r3, #12
 8002c92:	f000 808d 	beq.w	8002db0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d15a      	bne.n	8002d54 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c9e:	4b39      	ldr	r3, [pc, #228]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a38      	ldr	r2, [pc, #224]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002ca4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ca8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002caa:	f7fe fbff 	bl	80014ac <HAL_GetTick>
 8002cae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb2:	f7fe fbfb 	bl	80014ac <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e0b5      	b.n	8002e30 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cc4:	4b2f      	ldr	r3, [pc, #188]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1f0      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cd0:	4b2c      	ldr	r3, [pc, #176]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002cd2:	68da      	ldr	r2, [r3, #12]
 8002cd4:	4b2d      	ldr	r3, [pc, #180]	; (8002d8c <HAL_RCC_OscConfig+0x580>)
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6a11      	ldr	r1, [r2, #32]
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ce0:	3a01      	subs	r2, #1
 8002ce2:	0112      	lsls	r2, r2, #4
 8002ce4:	4311      	orrs	r1, r2
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002cea:	0212      	lsls	r2, r2, #8
 8002cec:	4311      	orrs	r1, r2
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002cf2:	0852      	lsrs	r2, r2, #1
 8002cf4:	3a01      	subs	r2, #1
 8002cf6:	0552      	lsls	r2, r2, #21
 8002cf8:	4311      	orrs	r1, r2
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002cfe:	0852      	lsrs	r2, r2, #1
 8002d00:	3a01      	subs	r2, #1
 8002d02:	0652      	lsls	r2, r2, #25
 8002d04:	4311      	orrs	r1, r2
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d0a:	06d2      	lsls	r2, r2, #27
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	491d      	ldr	r1, [pc, #116]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d14:	4b1b      	ldr	r3, [pc, #108]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a1a      	ldr	r2, [pc, #104]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002d1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d1e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d20:	4b18      	ldr	r3, [pc, #96]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	4a17      	ldr	r2, [pc, #92]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002d26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d2a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2c:	f7fe fbbe 	bl	80014ac <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d34:	f7fe fbba 	bl	80014ac <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e074      	b.n	8002e30 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d46:	4b0f      	ldr	r3, [pc, #60]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0f0      	beq.n	8002d34 <HAL_RCC_OscConfig+0x528>
 8002d52:	e06c      	b.n	8002e2e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d54:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a0a      	ldr	r2, [pc, #40]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002d5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d5e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002d60:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	4a07      	ldr	r2, [pc, #28]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002d66:	f023 0303 	bic.w	r3, r3, #3
 8002d6a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002d6c:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	4a04      	ldr	r2, [pc, #16]	; (8002d84 <HAL_RCC_OscConfig+0x578>)
 8002d72:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d7a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7c:	f7fe fb96 	bl	80014ac <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d82:	e00e      	b.n	8002da2 <HAL_RCC_OscConfig+0x596>
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40007000 	.word	0x40007000
 8002d8c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d90:	f7fe fb8c 	bl	80014ac <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e046      	b.n	8002e30 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002da2:	4b25      	ldr	r3, [pc, #148]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0x584>
 8002dae:	e03e      	b.n	8002e2e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d101      	bne.n	8002dbc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e039      	b.n	8002e30 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002dbc:	4b1e      	ldr	r3, [pc, #120]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f003 0203 	and.w	r2, r3, #3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d12c      	bne.n	8002e2a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d123      	bne.n	8002e2a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d11b      	bne.n	8002e2a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d113      	bne.n	8002e2a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0c:	085b      	lsrs	r3, r3, #1
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d109      	bne.n	8002e2a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e20:	085b      	lsrs	r3, r3, #1
 8002e22:	3b01      	subs	r3, #1
 8002e24:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d001      	beq.n	8002e2e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e000      	b.n	8002e30 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3720      	adds	r7, #32
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	40021000 	.word	0x40021000

08002e3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002e46:	2300      	movs	r3, #0
 8002e48:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e11e      	b.n	8003092 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e54:	4b91      	ldr	r3, [pc, #580]	; (800309c <HAL_RCC_ClockConfig+0x260>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 030f 	and.w	r3, r3, #15
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d910      	bls.n	8002e84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e62:	4b8e      	ldr	r3, [pc, #568]	; (800309c <HAL_RCC_ClockConfig+0x260>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f023 020f 	bic.w	r2, r3, #15
 8002e6a:	498c      	ldr	r1, [pc, #560]	; (800309c <HAL_RCC_ClockConfig+0x260>)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e72:	4b8a      	ldr	r3, [pc, #552]	; (800309c <HAL_RCC_ClockConfig+0x260>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d001      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e106      	b.n	8003092 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d073      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d129      	bne.n	8002eec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e98:	4b81      	ldr	r3, [pc, #516]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e0f4      	b.n	8003092 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002ea8:	f000 f99e 	bl	80031e8 <RCC_GetSysClockFreqFromPLLSource>
 8002eac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4a7c      	ldr	r2, [pc, #496]	; (80030a4 <HAL_RCC_ClockConfig+0x268>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d93f      	bls.n	8002f36 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002eb6:	4b7a      	ldr	r3, [pc, #488]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d009      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d033      	beq.n	8002f36 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d12f      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ed6:	4b72      	ldr	r3, [pc, #456]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ede:	4a70      	ldr	r2, [pc, #448]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ee4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ee6:	2380      	movs	r3, #128	; 0x80
 8002ee8:	617b      	str	r3, [r7, #20]
 8002eea:	e024      	b.n	8002f36 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d107      	bne.n	8002f04 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ef4:	4b6a      	ldr	r3, [pc, #424]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d109      	bne.n	8002f14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e0c6      	b.n	8003092 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f04:	4b66      	ldr	r3, [pc, #408]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e0be      	b.n	8003092 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002f14:	f000 f8ce 	bl	80030b4 <HAL_RCC_GetSysClockFreq>
 8002f18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	4a61      	ldr	r2, [pc, #388]	; (80030a4 <HAL_RCC_ClockConfig+0x268>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d909      	bls.n	8002f36 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f22:	4b5f      	ldr	r3, [pc, #380]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f2a:	4a5d      	ldr	r2, [pc, #372]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f30:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002f32:	2380      	movs	r3, #128	; 0x80
 8002f34:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f36:	4b5a      	ldr	r3, [pc, #360]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f023 0203 	bic.w	r2, r3, #3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	4957      	ldr	r1, [pc, #348]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f48:	f7fe fab0 	bl	80014ac <HAL_GetTick>
 8002f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4e:	e00a      	b.n	8002f66 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f50:	f7fe faac 	bl	80014ac <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e095      	b.n	8003092 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f66:	4b4e      	ldr	r3, [pc, #312]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 020c 	and.w	r2, r3, #12
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d1eb      	bne.n	8002f50 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d023      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f90:	4b43      	ldr	r3, [pc, #268]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	4a42      	ldr	r2, [pc, #264]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002f96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f9a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d007      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002fa8:	4b3d      	ldr	r3, [pc, #244]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002fb0:	4a3b      	ldr	r2, [pc, #236]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002fb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fb6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb8:	4b39      	ldr	r3, [pc, #228]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	4936      	ldr	r1, [pc, #216]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	608b      	str	r3, [r1, #8]
 8002fca:	e008      	b.n	8002fde <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	2b80      	cmp	r3, #128	; 0x80
 8002fd0:	d105      	bne.n	8002fde <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002fd2:	4b33      	ldr	r3, [pc, #204]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	4a32      	ldr	r2, [pc, #200]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8002fd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fdc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fde:	4b2f      	ldr	r3, [pc, #188]	; (800309c <HAL_RCC_ClockConfig+0x260>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d21d      	bcs.n	8003028 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fec:	4b2b      	ldr	r3, [pc, #172]	; (800309c <HAL_RCC_ClockConfig+0x260>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f023 020f 	bic.w	r2, r3, #15
 8002ff4:	4929      	ldr	r1, [pc, #164]	; (800309c <HAL_RCC_ClockConfig+0x260>)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ffc:	f7fe fa56 	bl	80014ac <HAL_GetTick>
 8003000:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003002:	e00a      	b.n	800301a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003004:	f7fe fa52 	bl	80014ac <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003012:	4293      	cmp	r3, r2
 8003014:	d901      	bls.n	800301a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e03b      	b.n	8003092 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800301a:	4b20      	ldr	r3, [pc, #128]	; (800309c <HAL_RCC_ClockConfig+0x260>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	429a      	cmp	r2, r3
 8003026:	d1ed      	bne.n	8003004 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b00      	cmp	r3, #0
 8003032:	d008      	beq.n	8003046 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003034:	4b1a      	ldr	r3, [pc, #104]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	4917      	ldr	r1, [pc, #92]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8003042:	4313      	orrs	r3, r2
 8003044:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b00      	cmp	r3, #0
 8003050:	d009      	beq.n	8003066 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003052:	4b13      	ldr	r3, [pc, #76]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	490f      	ldr	r1, [pc, #60]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 8003062:	4313      	orrs	r3, r2
 8003064:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003066:	f000 f825 	bl	80030b4 <HAL_RCC_GetSysClockFreq>
 800306a:	4601      	mov	r1, r0
 800306c:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <HAL_RCC_ClockConfig+0x264>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	091b      	lsrs	r3, r3, #4
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	4a0c      	ldr	r2, [pc, #48]	; (80030a8 <HAL_RCC_ClockConfig+0x26c>)
 8003078:	5cd3      	ldrb	r3, [r2, r3]
 800307a:	f003 031f 	and.w	r3, r3, #31
 800307e:	fa21 f303 	lsr.w	r3, r1, r3
 8003082:	4a0a      	ldr	r2, [pc, #40]	; (80030ac <HAL_RCC_ClockConfig+0x270>)
 8003084:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003086:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <HAL_RCC_ClockConfig+0x274>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f7fe f9c2 	bl	8001414 <HAL_InitTick>
 8003090:	4603      	mov	r3, r0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40022000 	.word	0x40022000
 80030a0:	40021000 	.word	0x40021000
 80030a4:	04c4b400 	.word	0x04c4b400
 80030a8:	08007f68 	.word	0x08007f68
 80030ac:	20000000 	.word	0x20000000
 80030b0:	20000004 	.word	0x20000004

080030b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b087      	sub	sp, #28
 80030b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80030ba:	4b2c      	ldr	r3, [pc, #176]	; (800316c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 030c 	and.w	r3, r3, #12
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d102      	bne.n	80030cc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030c6:	4b2a      	ldr	r3, [pc, #168]	; (8003170 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030c8:	613b      	str	r3, [r7, #16]
 80030ca:	e047      	b.n	800315c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80030cc:	4b27      	ldr	r3, [pc, #156]	; (800316c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 030c 	and.w	r3, r3, #12
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d102      	bne.n	80030de <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030d8:	4b26      	ldr	r3, [pc, #152]	; (8003174 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	e03e      	b.n	800315c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80030de:	4b23      	ldr	r3, [pc, #140]	; (800316c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 030c 	and.w	r3, r3, #12
 80030e6:	2b0c      	cmp	r3, #12
 80030e8:	d136      	bne.n	8003158 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030ea:	4b20      	ldr	r3, [pc, #128]	; (800316c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030f4:	4b1d      	ldr	r3, [pc, #116]	; (800316c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	091b      	lsrs	r3, r3, #4
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	3301      	adds	r3, #1
 8003100:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2b03      	cmp	r3, #3
 8003106:	d10c      	bne.n	8003122 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003108:	4a1a      	ldr	r2, [pc, #104]	; (8003174 <HAL_RCC_GetSysClockFreq+0xc0>)
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003110:	4a16      	ldr	r2, [pc, #88]	; (800316c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003112:	68d2      	ldr	r2, [r2, #12]
 8003114:	0a12      	lsrs	r2, r2, #8
 8003116:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800311a:	fb02 f303 	mul.w	r3, r2, r3
 800311e:	617b      	str	r3, [r7, #20]
      break;
 8003120:	e00c      	b.n	800313c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003122:	4a13      	ldr	r2, [pc, #76]	; (8003170 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	fbb2 f3f3 	udiv	r3, r2, r3
 800312a:	4a10      	ldr	r2, [pc, #64]	; (800316c <HAL_RCC_GetSysClockFreq+0xb8>)
 800312c:	68d2      	ldr	r2, [r2, #12]
 800312e:	0a12      	lsrs	r2, r2, #8
 8003130:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003134:	fb02 f303 	mul.w	r3, r2, r3
 8003138:	617b      	str	r3, [r7, #20]
      break;
 800313a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800313c:	4b0b      	ldr	r3, [pc, #44]	; (800316c <HAL_RCC_GetSysClockFreq+0xb8>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	0e5b      	lsrs	r3, r3, #25
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	3301      	adds	r3, #1
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	fbb2 f3f3 	udiv	r3, r2, r3
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	e001      	b.n	800315c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003158:	2300      	movs	r3, #0
 800315a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800315c:	693b      	ldr	r3, [r7, #16]
}
 800315e:	4618      	mov	r0, r3
 8003160:	371c      	adds	r7, #28
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	40021000 	.word	0x40021000
 8003170:	00f42400 	.word	0x00f42400
 8003174:	016e3600 	.word	0x016e3600

08003178 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800317c:	4b03      	ldr	r3, [pc, #12]	; (800318c <HAL_RCC_GetHCLKFreq+0x14>)
 800317e:	681b      	ldr	r3, [r3, #0]
}
 8003180:	4618      	mov	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	20000000 	.word	0x20000000

08003190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003194:	f7ff fff0 	bl	8003178 <HAL_RCC_GetHCLKFreq>
 8003198:	4601      	mov	r1, r0
 800319a:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	0a1b      	lsrs	r3, r3, #8
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	4a04      	ldr	r2, [pc, #16]	; (80031b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031a6:	5cd3      	ldrb	r3, [r2, r3]
 80031a8:	f003 031f 	and.w	r3, r3, #31
 80031ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40021000 	.word	0x40021000
 80031b8:	08007f78 	.word	0x08007f78

080031bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031c0:	f7ff ffda 	bl	8003178 <HAL_RCC_GetHCLKFreq>
 80031c4:	4601      	mov	r1, r0
 80031c6:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	0adb      	lsrs	r3, r3, #11
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	4a04      	ldr	r2, [pc, #16]	; (80031e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031d2:	5cd3      	ldrb	r3, [r2, r3]
 80031d4:	f003 031f 	and.w	r3, r3, #31
 80031d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031dc:	4618      	mov	r0, r3
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40021000 	.word	0x40021000
 80031e4:	08007f78 	.word	0x08007f78

080031e8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b087      	sub	sp, #28
 80031ec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031ee:	4b1e      	ldr	r3, [pc, #120]	; (8003268 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031f8:	4b1b      	ldr	r3, [pc, #108]	; (8003268 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	091b      	lsrs	r3, r3, #4
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	3301      	adds	r3, #1
 8003204:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	2b03      	cmp	r3, #3
 800320a:	d10c      	bne.n	8003226 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800320c:	4a17      	ldr	r2, [pc, #92]	; (800326c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	fbb2 f3f3 	udiv	r3, r2, r3
 8003214:	4a14      	ldr	r2, [pc, #80]	; (8003268 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003216:	68d2      	ldr	r2, [r2, #12]
 8003218:	0a12      	lsrs	r2, r2, #8
 800321a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800321e:	fb02 f303 	mul.w	r3, r2, r3
 8003222:	617b      	str	r3, [r7, #20]
    break;
 8003224:	e00c      	b.n	8003240 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003226:	4a12      	ldr	r2, [pc, #72]	; (8003270 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	fbb2 f3f3 	udiv	r3, r2, r3
 800322e:	4a0e      	ldr	r2, [pc, #56]	; (8003268 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003230:	68d2      	ldr	r2, [r2, #12]
 8003232:	0a12      	lsrs	r2, r2, #8
 8003234:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003238:	fb02 f303 	mul.w	r3, r2, r3
 800323c:	617b      	str	r3, [r7, #20]
    break;
 800323e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003240:	4b09      	ldr	r3, [pc, #36]	; (8003268 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	0e5b      	lsrs	r3, r3, #25
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	3301      	adds	r3, #1
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	fbb2 f3f3 	udiv	r3, r2, r3
 8003258:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800325a:	687b      	ldr	r3, [r7, #4]
}
 800325c:	4618      	mov	r0, r3
 800325e:	371c      	adds	r7, #28
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	40021000 	.word	0x40021000
 800326c:	016e3600 	.word	0x016e3600
 8003270:	00f42400 	.word	0x00f42400

08003274 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800327c:	2300      	movs	r3, #0
 800327e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003280:	2300      	movs	r3, #0
 8003282:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 8098 	beq.w	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003292:	2300      	movs	r3, #0
 8003294:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003296:	4b43      	ldr	r3, [pc, #268]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10d      	bne.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032a2:	4b40      	ldr	r3, [pc, #256]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a6:	4a3f      	ldr	r2, [pc, #252]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ac:	6593      	str	r3, [r2, #88]	; 0x58
 80032ae:	4b3d      	ldr	r3, [pc, #244]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b6:	60bb      	str	r3, [r7, #8]
 80032b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ba:	2301      	movs	r3, #1
 80032bc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032be:	4b3a      	ldr	r3, [pc, #232]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a39      	ldr	r2, [pc, #228]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032ca:	f7fe f8ef 	bl	80014ac <HAL_GetTick>
 80032ce:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032d0:	e009      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d2:	f7fe f8eb 	bl	80014ac <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d902      	bls.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	74fb      	strb	r3, [r7, #19]
        break;
 80032e4:	e005      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032e6:	4b30      	ldr	r3, [pc, #192]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0ef      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80032f2:	7cfb      	ldrb	r3, [r7, #19]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d159      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032f8:	4b2a      	ldr	r3, [pc, #168]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003302:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d01e      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	429a      	cmp	r2, r3
 8003312:	d019      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003314:	4b23      	ldr	r3, [pc, #140]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800331e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003320:	4b20      	ldr	r3, [pc, #128]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003326:	4a1f      	ldr	r2, [pc, #124]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800332c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003330:	4b1c      	ldr	r3, [pc, #112]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003336:	4a1b      	ldr	r2, [pc, #108]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800333c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003340:	4a18      	ldr	r2, [pc, #96]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d016      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003352:	f7fe f8ab 	bl	80014ac <HAL_GetTick>
 8003356:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003358:	e00b      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800335a:	f7fe f8a7 	bl	80014ac <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	f241 3288 	movw	r2, #5000	; 0x1388
 8003368:	4293      	cmp	r3, r2
 800336a:	d902      	bls.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	74fb      	strb	r3, [r7, #19]
            break;
 8003370:	e006      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003372:	4b0c      	ldr	r3, [pc, #48]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0ec      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003380:	7cfb      	ldrb	r3, [r7, #19]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10b      	bne.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003386:	4b07      	ldr	r3, [pc, #28]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003394:	4903      	ldr	r1, [pc, #12]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003396:	4313      	orrs	r3, r2
 8003398:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800339c:	e008      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800339e:	7cfb      	ldrb	r3, [r7, #19]
 80033a0:	74bb      	strb	r3, [r7, #18]
 80033a2:	e005      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80033a4:	40021000 	.word	0x40021000
 80033a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ac:	7cfb      	ldrb	r3, [r7, #19]
 80033ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033b0:	7c7b      	ldrb	r3, [r7, #17]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d105      	bne.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033b6:	4baf      	ldr	r3, [pc, #700]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80033b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ba:	4aae      	ldr	r2, [pc, #696]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80033bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033ce:	4ba9      	ldr	r3, [pc, #676]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80033d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d4:	f023 0203 	bic.w	r2, r3, #3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	49a5      	ldr	r1, [pc, #660]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00a      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033f0:	4ba0      	ldr	r3, [pc, #640]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80033f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f6:	f023 020c 	bic.w	r2, r3, #12
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	499d      	ldr	r1, [pc, #628]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003400:	4313      	orrs	r3, r2
 8003402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0304 	and.w	r3, r3, #4
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003412:	4b98      	ldr	r3, [pc, #608]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003418:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	4994      	ldr	r1, [pc, #592]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003422:	4313      	orrs	r3, r2
 8003424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0308 	and.w	r3, r3, #8
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00a      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003434:	4b8f      	ldr	r3, [pc, #572]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	498c      	ldr	r1, [pc, #560]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003444:	4313      	orrs	r3, r2
 8003446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0310 	and.w	r3, r3, #16
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003456:	4b87      	ldr	r3, [pc, #540]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	4983      	ldr	r1, [pc, #524]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0320 	and.w	r3, r3, #32
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00a      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003478:	4b7e      	ldr	r3, [pc, #504]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800347a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	497b      	ldr	r1, [pc, #492]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00a      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800349a:	4b76      	ldr	r3, [pc, #472]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800349c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	69db      	ldr	r3, [r3, #28]
 80034a8:	4972      	ldr	r1, [pc, #456]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00a      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034bc:	4b6d      	ldr	r3, [pc, #436]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80034be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	496a      	ldr	r1, [pc, #424]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034de:	4b65      	ldr	r3, [pc, #404]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80034e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	4961      	ldr	r1, [pc, #388]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003500:	4b5c      	ldr	r3, [pc, #368]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003502:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003506:	f023 0203 	bic.w	r2, r3, #3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350e:	4959      	ldr	r1, [pc, #356]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003522:	4b54      	ldr	r3, [pc, #336]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003528:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003530:	4950      	ldr	r1, [pc, #320]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003532:	4313      	orrs	r3, r2
 8003534:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003540:	2b00      	cmp	r3, #0
 8003542:	d015      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003544:	4b4b      	ldr	r3, [pc, #300]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003552:	4948      	ldr	r1, [pc, #288]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003554:	4313      	orrs	r3, r2
 8003556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003562:	d105      	bne.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003564:	4b43      	ldr	r3, [pc, #268]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	4a42      	ldr	r2, [pc, #264]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800356a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800356e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003578:	2b00      	cmp	r3, #0
 800357a:	d015      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800357c:	4b3d      	ldr	r3, [pc, #244]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800357e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003582:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800358a:	493a      	ldr	r1, [pc, #232]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003596:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800359a:	d105      	bne.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800359c:	4b35      	ldr	r3, [pc, #212]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	4a34      	ldr	r2, [pc, #208]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80035a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035a6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d015      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80035b4:	4b2f      	ldr	r3, [pc, #188]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80035b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c2:	492c      	ldr	r1, [pc, #176]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035d2:	d105      	bne.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035d4:	4b27      	ldr	r3, [pc, #156]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	4a26      	ldr	r2, [pc, #152]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80035da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035de:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d015      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035ec:	4b21      	ldr	r3, [pc, #132]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80035ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fa:	491e      	ldr	r1, [pc, #120]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003606:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800360a:	d105      	bne.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800360c:	4b19      	ldr	r3, [pc, #100]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	4a18      	ldr	r2, [pc, #96]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003612:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003616:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d015      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003624:	4b13      	ldr	r3, [pc, #76]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	4910      	ldr	r1, [pc, #64]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003634:	4313      	orrs	r3, r2
 8003636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003642:	d105      	bne.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003644:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	4a0a      	ldr	r2, [pc, #40]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800364a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800364e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d018      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800365c:	4b05      	ldr	r3, [pc, #20]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800365e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003662:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366a:	4902      	ldr	r1, [pc, #8]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800366c:	4313      	orrs	r3, r2
 800366e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003672:	e001      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003674:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003680:	d105      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003682:	4b21      	ldr	r3, [pc, #132]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	4a20      	ldr	r2, [pc, #128]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800368c:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d015      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800369a:	4b1b      	ldr	r3, [pc, #108]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800369c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036a8:	4917      	ldr	r1, [pc, #92]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b8:	d105      	bne.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80036ba:	4b13      	ldr	r3, [pc, #76]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	4a12      	ldr	r2, [pc, #72]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80036c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c4:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d015      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80036d2:	4b0d      	ldr	r3, [pc, #52]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80036d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e0:	4909      	ldr	r1, [pc, #36]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036f0:	d105      	bne.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036f2:	4b05      	ldr	r3, [pc, #20]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	4a04      	ldr	r2, [pc, #16]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80036f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036fc:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80036fe:	7cbb      	ldrb	r3, [r7, #18]
}
 8003700:	4618      	mov	r0, r3
 8003702:	3718      	adds	r7, #24
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40021000 	.word	0x40021000

0800370c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d05c      	beq.n	80037d8 <HAL_RTC_Init+0xcc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d106      	bne.n	8003738 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7fd fbe8 	bl	8000f08 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003740:	4b28      	ldr	r3, [pc, #160]	; (80037e4 <HAL_RTC_Init+0xd8>)
 8003742:	22ca      	movs	r2, #202	; 0xca
 8003744:	625a      	str	r2, [r3, #36]	; 0x24
 8003746:	4b27      	ldr	r3, [pc, #156]	; (80037e4 <HAL_RTC_Init+0xd8>)
 8003748:	2253      	movs	r2, #83	; 0x53
 800374a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f98d 	bl	8003a6c <RTC_EnterInitMode>
 8003752:	4603      	mov	r3, r0
 8003754:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003756:	7bfb      	ldrb	r3, [r7, #15]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d133      	bne.n	80037c4 <HAL_RTC_Init+0xb8>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800375c:	4b21      	ldr	r3, [pc, #132]	; (80037e4 <HAL_RTC_Init+0xd8>)
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	4a20      	ldr	r2, [pc, #128]	; (80037e4 <HAL_RTC_Init+0xd8>)
 8003762:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8003766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800376a:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800376c:	4b1d      	ldr	r3, [pc, #116]	; (80037e4 <HAL_RTC_Init+0xd8>)
 800376e:	699a      	ldr	r2, [r3, #24]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6859      	ldr	r1, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	4319      	orrs	r1, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	430b      	orrs	r3, r1
 8003780:	4918      	ldr	r1, [pc, #96]	; (80037e4 <HAL_RTC_Init+0xd8>)
 8003782:	4313      	orrs	r3, r2
 8003784:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68da      	ldr	r2, [r3, #12]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	041b      	lsls	r3, r3, #16
 8003790:	4914      	ldr	r1, [pc, #80]	; (80037e4 <HAL_RTC_Init+0xd8>)
 8003792:	4313      	orrs	r3, r2
 8003794:	610b      	str	r3, [r1, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f99c 	bl	8003ad4 <RTC_ExitInitMode>
 800379c:	4603      	mov	r3, r0
 800379e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10e      	bne.n	80037c4 <HAL_RTC_Init+0xb8>
      {
        MODIFY_REG(RTC->CR, \
 80037a6:	4b0f      	ldr	r3, [pc, #60]	; (80037e4 <HAL_RTC_Init+0xd8>)
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a19      	ldr	r1, [r3, #32]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	4319      	orrs	r1, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	430b      	orrs	r3, r1
 80037be:	4909      	ldr	r1, [pc, #36]	; (80037e4 <HAL_RTC_Init+0xd8>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037c4:	4b07      	ldr	r3, [pc, #28]	; (80037e4 <HAL_RTC_Init+0xd8>)
 80037c6:	22ff      	movs	r2, #255	; 0xff
 80037c8:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80037ca:	7bfb      	ldrb	r3, [r7, #15]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d103      	bne.n	80037d8 <HAL_RTC_Init+0xcc>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40002800 	.word	0x40002800

080037e8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80037e8:	b590      	push	{r4, r7, lr}
 80037ea:	b087      	sub	sp, #28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d101      	bne.n	8003802 <HAL_RTC_SetTime+0x1a>
 80037fe:	2302      	movs	r3, #2
 8003800:	e081      	b.n	8003906 <HAL_RTC_SetTime+0x11e>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2202      	movs	r2, #2
 800380e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003812:	4b3f      	ldr	r3, [pc, #252]	; (8003910 <HAL_RTC_SetTime+0x128>)
 8003814:	22ca      	movs	r2, #202	; 0xca
 8003816:	625a      	str	r2, [r3, #36]	; 0x24
 8003818:	4b3d      	ldr	r3, [pc, #244]	; (8003910 <HAL_RTC_SetTime+0x128>)
 800381a:	2253      	movs	r2, #83	; 0x53
 800381c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 f924 	bl	8003a6c <RTC_EnterInitMode>
 8003824:	4603      	mov	r3, r0
 8003826:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003828:	7cfb      	ldrb	r3, [r7, #19]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d15c      	bne.n	80038e8 <HAL_RTC_SetTime+0x100>
  {
    if (Format == RTC_FORMAT_BIN)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d125      	bne.n	8003880 <HAL_RTC_SetTime+0x98>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003834:	4b36      	ldr	r3, [pc, #216]	; (8003910 <HAL_RTC_SetTime+0x128>)
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383c:	2b00      	cmp	r3, #0
 800383e:	d102      	bne.n	8003846 <HAL_RTC_SetTime+0x5e>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	2200      	movs	r2, #0
 8003844:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f000 f980 	bl	8003b50 <RTC_ByteToBcd2>
 8003850:	4603      	mov	r3, r0
 8003852:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	785b      	ldrb	r3, [r3, #1]
 8003858:	4618      	mov	r0, r3
 800385a:	f000 f979 	bl	8003b50 <RTC_ByteToBcd2>
 800385e:	4603      	mov	r3, r0
 8003860:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003862:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	789b      	ldrb	r3, [r3, #2]
 8003868:	4618      	mov	r0, r3
 800386a:	f000 f971 	bl	8003b50 <RTC_ByteToBcd2>
 800386e:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003870:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	78db      	ldrb	r3, [r3, #3]
 8003878:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800387a:	4313      	orrs	r3, r2
 800387c:	617b      	str	r3, [r7, #20]
 800387e:	e017      	b.n	80038b0 <HAL_RTC_SetTime+0xc8>
    }
    else
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003880:	4b23      	ldr	r3, [pc, #140]	; (8003910 <HAL_RTC_SetTime+0x128>)
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003888:	2b00      	cmp	r3, #0
 800388a:	d102      	bne.n	8003892 <HAL_RTC_SetTime+0xaa>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2200      	movs	r2, #0
 8003890:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	785b      	ldrb	r3, [r3, #1]
 800389c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800389e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80038a4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	78db      	ldrb	r3, [r3, #3]
 80038aa:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80038ac:	4313      	orrs	r3, r2
 80038ae:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80038b0:	4a17      	ldr	r2, [pc, #92]	; (8003910 <HAL_RTC_SetTime+0x128>)
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80038b8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80038bc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 80038be:	4b14      	ldr	r3, [pc, #80]	; (8003910 <HAL_RTC_SetTime+0x128>)
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	4a13      	ldr	r2, [pc, #76]	; (8003910 <HAL_RTC_SetTime+0x128>)
 80038c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038c8:	6193      	str	r3, [r2, #24]

    /* Configure the RTC_CR register */
    SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 80038ca:	4b11      	ldr	r3, [pc, #68]	; (8003910 <HAL_RTC_SetTime+0x128>)
 80038cc:	699a      	ldr	r2, [r3, #24]
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	68d9      	ldr	r1, [r3, #12]
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	430b      	orrs	r3, r1
 80038d8:	490d      	ldr	r1, [pc, #52]	; (8003910 <HAL_RTC_SetTime+0x128>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	618b      	str	r3, [r1, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 f8f8 	bl	8003ad4 <RTC_ExitInitMode>
 80038e4:	4603      	mov	r3, r0
 80038e6:	74fb      	strb	r3, [r7, #19]
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038e8:	4b09      	ldr	r3, [pc, #36]	; (8003910 <HAL_RTC_SetTime+0x128>)
 80038ea:	22ff      	movs	r2, #255	; 0xff
 80038ec:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80038ee:	7cfb      	ldrb	r3, [r7, #19]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d103      	bne.n	80038fc <HAL_RTC_SetTime+0x114>
  {
     hrtc->State = HAL_RTC_STATE_READY;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
    __HAL_UNLOCK(hrtc);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003904:	7cfb      	ldrb	r3, [r7, #19]
}
 8003906:	4618      	mov	r0, r3
 8003908:	371c      	adds	r7, #28
 800390a:	46bd      	mov	sp, r7
 800390c:	bd90      	pop	{r4, r7, pc}
 800390e:	bf00      	nop
 8003910:	40002800 	.word	0x40002800

08003914 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003914:	b590      	push	{r4, r7, lr}
 8003916:	b087      	sub	sp, #28
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003926:	2b01      	cmp	r3, #1
 8003928:	d101      	bne.n	800392e <HAL_RTC_SetDate+0x1a>
 800392a:	2302      	movs	r3, #2
 800392c:	e071      	b.n	8003a12 <HAL_RTC_SetDate+0xfe>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2202      	movs	r2, #2
 800393a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10e      	bne.n	8003962 <HAL_RTC_SetDate+0x4e>
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	785b      	ldrb	r3, [r3, #1]
 8003948:	f003 0310 	and.w	r3, r3, #16
 800394c:	2b00      	cmp	r3, #0
 800394e:	d008      	beq.n	8003962 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	785b      	ldrb	r3, [r3, #1]
 8003954:	f023 0310 	bic.w	r3, r3, #16
 8003958:	b2db      	uxtb	r3, r3
 800395a:	330a      	adds	r3, #10
 800395c:	b2da      	uxtb	r2, r3
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d11c      	bne.n	80039a2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	78db      	ldrb	r3, [r3, #3]
 800396c:	4618      	mov	r0, r3
 800396e:	f000 f8ef 	bl	8003b50 <RTC_ByteToBcd2>
 8003972:	4603      	mov	r3, r0
 8003974:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	785b      	ldrb	r3, [r3, #1]
 800397a:	4618      	mov	r0, r3
 800397c:	f000 f8e8 	bl	8003b50 <RTC_ByteToBcd2>
 8003980:	4603      	mov	r3, r0
 8003982:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003984:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	789b      	ldrb	r3, [r3, #2]
 800398a:	4618      	mov	r0, r3
 800398c:	f000 f8e0 	bl	8003b50 <RTC_ByteToBcd2>
 8003990:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003992:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800399c:	4313      	orrs	r3, r2
 800399e:	617b      	str	r3, [r7, #20]
 80039a0:	e00e      	b.n	80039c0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	78db      	ldrb	r3, [r3, #3]
 80039a6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	785b      	ldrb	r3, [r3, #1]
 80039ac:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80039ae:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80039b4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80039bc:	4313      	orrs	r3, r2
 80039be:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80039c0:	4b16      	ldr	r3, [pc, #88]	; (8003a1c <HAL_RTC_SetDate+0x108>)
 80039c2:	22ca      	movs	r2, #202	; 0xca
 80039c4:	625a      	str	r2, [r3, #36]	; 0x24
 80039c6:	4b15      	ldr	r3, [pc, #84]	; (8003a1c <HAL_RTC_SetDate+0x108>)
 80039c8:	2253      	movs	r2, #83	; 0x53
 80039ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f000 f84d 	bl	8003a6c <RTC_EnterInitMode>
 80039d2:	4603      	mov	r3, r0
 80039d4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80039d6:	7cfb      	ldrb	r3, [r7, #19]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10b      	bne.n	80039f4 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 80039dc:	4a0f      	ldr	r2, [pc, #60]	; (8003a1c <HAL_RTC_SetDate+0x108>)
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80039e4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80039e8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 f872 	bl	8003ad4 <RTC_ExitInitMode>
 80039f0:	4603      	mov	r3, r0
 80039f2:	74fb      	strb	r3, [r7, #19]
  }
	
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039f4:	4b09      	ldr	r3, [pc, #36]	; (8003a1c <HAL_RTC_SetDate+0x108>)
 80039f6:	22ff      	movs	r2, #255	; 0xff
 80039f8:	625a      	str	r2, [r3, #36]	; 0x24
 
  if (status == HAL_OK)
 80039fa:	7cfb      	ldrb	r3, [r7, #19]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d103      	bne.n	8003a08 <HAL_RTC_SetDate+0xf4>
  {

    hrtc->State = HAL_RTC_STATE_READY ;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003a10:	7cfb      	ldrb	r3, [r7, #19]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	371c      	adds	r7, #28
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd90      	pop	{r4, r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40002800 	.word	0x40002800

08003a20 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);

  /* Clear RSF flag */
  SET_BIT(RTC->ICSR, RTC_RSF_MASK);
 8003a28:	4b0f      	ldr	r3, [pc, #60]	; (8003a68 <HAL_RTC_WaitForSynchro+0x48>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	4a0e      	ldr	r2, [pc, #56]	; (8003a68 <HAL_RTC_WaitForSynchro+0x48>)
 8003a2e:	f063 03a0 	orn	r3, r3, #160	; 0xa0
 8003a32:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8003a34:	f7fd fd3a 	bl	80014ac <HAL_GetTick>
 8003a38:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003a3a:	e009      	b.n	8003a50 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003a3c:	f7fd fd36 	bl	80014ac <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a4a:	d901      	bls.n	8003a50 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e006      	b.n	8003a5e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003a50:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <HAL_RTC_WaitForSynchro+0x48>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f003 0320 	and.w	r3, r3, #32
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0ef      	beq.n	8003a3c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40002800 	.word	0x40002800

08003a6c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a74:	2300      	movs	r3, #0
 8003a76:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003a78:	4b15      	ldr	r3, [pc, #84]	; (8003ad0 <RTC_EnterInitMode+0x64>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d120      	bne.n	8003ac6 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003a84:	4b12      	ldr	r3, [pc, #72]	; (8003ad0 <RTC_EnterInitMode+0x64>)
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	4a11      	ldr	r2, [pc, #68]	; (8003ad0 <RTC_EnterInitMode+0x64>)
 8003a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a8e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8003a90:	f7fd fd0c 	bl	80014ac <HAL_GetTick>
 8003a94:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003a96:	e00d      	b.n	8003ab4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003a98:	f7fd fd08 	bl	80014ac <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003aa6:	d905      	bls.n	8003ab4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2203      	movs	r2, #3
 8003ab0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003ab4:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <RTC_EnterInitMode+0x64>)
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d102      	bne.n	8003ac6 <RTC_EnterInitMode+0x5a>
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
 8003ac2:	2b03      	cmp	r3, #3
 8003ac4:	d1e8      	bne.n	8003a98 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8003ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40002800 	.word	0x40002800

08003ad4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003ae0:	4b1a      	ldr	r3, [pc, #104]	; (8003b4c <RTC_ExitInitMode+0x78>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	4a19      	ldr	r2, [pc, #100]	; (8003b4c <RTC_ExitInitMode+0x78>)
 8003ae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aea:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003aec:	4b17      	ldr	r3, [pc, #92]	; (8003b4c <RTC_ExitInitMode+0x78>)
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	f003 0320 	and.w	r3, r3, #32
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10c      	bne.n	8003b12 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff ff91 	bl	8003a20 <HAL_RTC_WaitForSynchro>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d01e      	beq.n	8003b42 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2203      	movs	r2, #3
 8003b08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	73fb      	strb	r3, [r7, #15]
 8003b10:	e017      	b.n	8003b42 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003b12:	4b0e      	ldr	r3, [pc, #56]	; (8003b4c <RTC_ExitInitMode+0x78>)
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	4a0d      	ldr	r2, [pc, #52]	; (8003b4c <RTC_ExitInitMode+0x78>)
 8003b18:	f023 0320 	bic.w	r3, r3, #32
 8003b1c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7ff ff7e 	bl	8003a20 <HAL_RTC_WaitForSynchro>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d005      	beq.n	8003b36 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2203      	movs	r2, #3
 8003b2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003b36:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <RTC_ExitInitMode+0x78>)
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	4a04      	ldr	r2, [pc, #16]	; (8003b4c <RTC_ExitInitMode+0x78>)
 8003b3c:	f043 0320 	orr.w	r3, r3, #32
 8003b40:	6193      	str	r3, [r2, #24]
  }

  return status;
 8003b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40002800 	.word	0x40002800

08003b50 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	4603      	mov	r3, r0
 8003b58:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8003b5e:	79fb      	ldrb	r3, [r7, #7]
 8003b60:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8003b62:	e005      	b.n	8003b70 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	3301      	adds	r3, #1
 8003b68:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8003b6a:	7afb      	ldrb	r3, [r7, #11]
 8003b6c:	3b0a      	subs	r3, #10
 8003b6e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8003b70:	7afb      	ldrb	r3, [r7, #11]
 8003b72:	2b09      	cmp	r3, #9
 8003b74:	d8f6      	bhi.n	8003b64 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	011b      	lsls	r3, r3, #4
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	7afb      	ldrb	r3, [r7, #11]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	b2db      	uxtb	r3, r3
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e084      	b.n	8003cac <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d106      	bne.n	8003bc2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f7fd f9fd 	bl	8000fbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bd8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003be2:	d902      	bls.n	8003bea <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003be4:	2300      	movs	r3, #0
 8003be6:	60fb      	str	r3, [r7, #12]
 8003be8:	e002      	b.n	8003bf0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003bea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bee:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003bf8:	d007      	beq.n	8003c0a <HAL_SPI_Init+0x7a>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c02:	d002      	beq.n	8003c0a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10b      	bne.n	8003c2a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c1a:	d903      	bls.n	8003c24 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2202      	movs	r2, #2
 8003c20:	631a      	str	r2, [r3, #48]	; 0x30
 8003c22:	e002      	b.n	8003c2a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	ea42 0103 	orr.w	r1, r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	0c1b      	lsrs	r3, r3, #16
 8003c6a:	f003 0204 	and.w	r2, r3, #4
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	ea42 0103 	orr.w	r1, r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	69da      	ldr	r2, [r3, #28]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c9a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b088      	sub	sp, #32
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	603b      	str	r3, [r7, #0]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d101      	bne.n	8003cd6 <HAL_SPI_Transmit+0x22>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e150      	b.n	8003f78 <HAL_SPI_Transmit+0x2c4>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cde:	f7fd fbe5 	bl	80014ac <HAL_GetTick>
 8003ce2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003ce4:	88fb      	ldrh	r3, [r7, #6]
 8003ce6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d002      	beq.n	8003cfa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cf8:	e135      	b.n	8003f66 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d002      	beq.n	8003d06 <HAL_SPI_Transmit+0x52>
 8003d00:	88fb      	ldrh	r3, [r7, #6]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d102      	bne.n	8003d0c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d0a:	e12c      	b.n	8003f66 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2203      	movs	r2, #3
 8003d10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	88fa      	ldrh	r2, [r7, #6]
 8003d24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	88fa      	ldrh	r2, [r7, #6]
 8003d2a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d56:	d107      	bne.n	8003d68 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d66:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d72:	2b40      	cmp	r3, #64	; 0x40
 8003d74:	d007      	beq.n	8003d86 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d8e:	d94b      	bls.n	8003e28 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d002      	beq.n	8003d9e <HAL_SPI_Transmit+0xea>
 8003d98:	8afb      	ldrh	r3, [r7, #22]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d13e      	bne.n	8003e1c <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da2:	881a      	ldrh	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dae:	1c9a      	adds	r2, r3, #2
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003dc2:	e02b      	b.n	8003e1c <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d112      	bne.n	8003df8 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd6:	881a      	ldrh	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de2:	1c9a      	adds	r2, r3, #2
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	3b01      	subs	r3, #1
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003df6:	e011      	b.n	8003e1c <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003df8:	f7fd fb58 	bl	80014ac <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d803      	bhi.n	8003e10 <HAL_SPI_Transmit+0x15c>
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0e:	d102      	bne.n	8003e16 <HAL_SPI_Transmit+0x162>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d102      	bne.n	8003e1c <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e1a:	e0a4      	b.n	8003f66 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1ce      	bne.n	8003dc4 <HAL_SPI_Transmit+0x110>
 8003e26:	e07c      	b.n	8003f22 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d002      	beq.n	8003e36 <HAL_SPI_Transmit+0x182>
 8003e30:	8afb      	ldrh	r3, [r7, #22]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d170      	bne.n	8003f18 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d912      	bls.n	8003e66 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e44:	881a      	ldrh	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e50:	1c9a      	adds	r2, r3, #2
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	3b02      	subs	r3, #2
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e64:	e058      	b.n	8003f18 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	330c      	adds	r3, #12
 8003e70:	7812      	ldrb	r2, [r2, #0]
 8003e72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e78:	1c5a      	adds	r2, r3, #1
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003e8c:	e044      	b.n	8003f18 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d12b      	bne.n	8003ef4 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d912      	bls.n	8003ecc <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eaa:	881a      	ldrh	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb6:	1c9a      	adds	r2, r3, #2
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	3b02      	subs	r3, #2
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003eca:	e025      	b.n	8003f18 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	330c      	adds	r3, #12
 8003ed6:	7812      	ldrb	r2, [r2, #0]
 8003ed8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ede:	1c5a      	adds	r2, r3, #1
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	3b01      	subs	r3, #1
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ef2:	e011      	b.n	8003f18 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ef4:	f7fd fada 	bl	80014ac <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d803      	bhi.n	8003f0c <HAL_SPI_Transmit+0x258>
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0a:	d102      	bne.n	8003f12 <HAL_SPI_Transmit+0x25e>
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d102      	bne.n	8003f18 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f16:	e026      	b.n	8003f66 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1b5      	bne.n	8003e8e <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	6839      	ldr	r1, [r7, #0]
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 fca2 	bl	8004870 <SPI_EndRxTxTransaction>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d002      	beq.n	8003f38 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2220      	movs	r2, #32
 8003f36:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10a      	bne.n	8003f56 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f40:	2300      	movs	r3, #0
 8003f42:	613b      	str	r3, [r7, #16]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	613b      	str	r3, [r7, #16]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	613b      	str	r3, [r7, #16]
 8003f54:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d002      	beq.n	8003f64 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	77fb      	strb	r3, [r7, #31]
 8003f62:	e000      	b.n	8003f66 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8003f64:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003f76:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3720      	adds	r7, #32
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b088      	sub	sp, #32
 8003f84:	af02      	add	r7, sp, #8
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	603b      	str	r3, [r7, #0]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f90:	2300      	movs	r3, #0
 8003f92:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f9c:	d112      	bne.n	8003fc4 <HAL_SPI_Receive+0x44>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10e      	bne.n	8003fc4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2204      	movs	r2, #4
 8003faa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003fae:	88fa      	ldrh	r2, [r7, #6]
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	68b9      	ldr	r1, [r7, #8]
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f000 f908 	bl	80041d0 <HAL_SPI_TransmitReceive>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	e101      	b.n	80041c8 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d101      	bne.n	8003fd2 <HAL_SPI_Receive+0x52>
 8003fce:	2302      	movs	r3, #2
 8003fd0:	e0fa      	b.n	80041c8 <HAL_SPI_Receive+0x248>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fda:	f7fd fa67 	bl	80014ac <HAL_GetTick>
 8003fde:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d002      	beq.n	8003ff2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003fec:	2302      	movs	r3, #2
 8003fee:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ff0:	e0e1      	b.n	80041b6 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d002      	beq.n	8003ffe <HAL_SPI_Receive+0x7e>
 8003ff8:	88fb      	ldrh	r3, [r7, #6]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d102      	bne.n	8004004 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004002:	e0d8      	b.n	80041b6 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2204      	movs	r2, #4
 8004008:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	88fa      	ldrh	r2, [r7, #6]
 800401c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	88fa      	ldrh	r2, [r7, #6]
 8004024:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800404e:	d908      	bls.n	8004062 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800405e:	605a      	str	r2, [r3, #4]
 8004060:	e007      	b.n	8004072 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004070:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800407a:	d107      	bne.n	800408c <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800408a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004096:	2b40      	cmp	r3, #64	; 0x40
 8004098:	d007      	beq.n	80040aa <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040a8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040b2:	d867      	bhi.n	8004184 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80040b4:	e030      	b.n	8004118 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d117      	bne.n	80040f4 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f103 020c 	add.w	r2, r3, #12
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d0:	7812      	ldrb	r2, [r2, #0]
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80040f2:	e011      	b.n	8004118 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040f4:	f7fd f9da 	bl	80014ac <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	429a      	cmp	r2, r3
 8004102:	d803      	bhi.n	800410c <HAL_SPI_Receive+0x18c>
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410a:	d102      	bne.n	8004112 <HAL_SPI_Receive+0x192>
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d102      	bne.n	8004118 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004116:	e04e      	b.n	80041b6 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800411e:	b29b      	uxth	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1c8      	bne.n	80040b6 <HAL_SPI_Receive+0x136>
 8004124:	e034      	b.n	8004190 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b01      	cmp	r3, #1
 8004132:	d115      	bne.n	8004160 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68da      	ldr	r2, [r3, #12]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	b292      	uxth	r2, r2
 8004140:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	1c9a      	adds	r2, r3, #2
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004152:	b29b      	uxth	r3, r3
 8004154:	3b01      	subs	r3, #1
 8004156:	b29a      	uxth	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800415e:	e011      	b.n	8004184 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004160:	f7fd f9a4 	bl	80014ac <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	429a      	cmp	r2, r3
 800416e:	d803      	bhi.n	8004178 <HAL_SPI_Receive+0x1f8>
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004176:	d102      	bne.n	800417e <HAL_SPI_Receive+0x1fe>
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d102      	bne.n	8004184 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004182:	e018      	b.n	80041b6 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800418a:	b29b      	uxth	r3, r3
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1ca      	bne.n	8004126 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	6839      	ldr	r1, [r7, #0]
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 fb13 	bl	80047c0 <SPI_EndRxTransaction>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d002      	beq.n	80041a6 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2220      	movs	r2, #32
 80041a4:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d002      	beq.n	80041b4 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	75fb      	strb	r3, [r7, #23]
 80041b2:	e000      	b.n	80041b6 <HAL_SPI_Receive+0x236>
  }

error :
 80041b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80041c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3718      	adds	r7, #24
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b08a      	sub	sp, #40	; 0x28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80041de:	2301      	movs	r3, #1
 80041e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80041e2:	2300      	movs	r3, #0
 80041e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d101      	bne.n	80041f6 <HAL_SPI_TransmitReceive+0x26>
 80041f2:	2302      	movs	r3, #2
 80041f4:	e1fb      	b.n	80045ee <HAL_SPI_TransmitReceive+0x41e>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041fe:	f7fd f955 	bl	80014ac <HAL_GetTick>
 8004202:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800420a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004212:	887b      	ldrh	r3, [r7, #2]
 8004214:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004216:	887b      	ldrh	r3, [r7, #2]
 8004218:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800421a:	7efb      	ldrb	r3, [r7, #27]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d00e      	beq.n	800423e <HAL_SPI_TransmitReceive+0x6e>
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004226:	d106      	bne.n	8004236 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d102      	bne.n	8004236 <HAL_SPI_TransmitReceive+0x66>
 8004230:	7efb      	ldrb	r3, [r7, #27]
 8004232:	2b04      	cmp	r3, #4
 8004234:	d003      	beq.n	800423e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004236:	2302      	movs	r3, #2
 8004238:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800423c:	e1cd      	b.n	80045da <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d005      	beq.n	8004250 <HAL_SPI_TransmitReceive+0x80>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d002      	beq.n	8004250 <HAL_SPI_TransmitReceive+0x80>
 800424a:	887b      	ldrh	r3, [r7, #2]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d103      	bne.n	8004258 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004256:	e1c0      	b.n	80045da <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b04      	cmp	r3, #4
 8004262:	d003      	beq.n	800426c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2205      	movs	r2, #5
 8004268:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	887a      	ldrh	r2, [r7, #2]
 800427c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	887a      	ldrh	r2, [r7, #2]
 8004284:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	887a      	ldrh	r2, [r7, #2]
 8004292:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	887a      	ldrh	r2, [r7, #2]
 8004298:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042ae:	d802      	bhi.n	80042b6 <HAL_SPI_TransmitReceive+0xe6>
 80042b0:	8a3b      	ldrh	r3, [r7, #16]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d908      	bls.n	80042c8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042c4:	605a      	str	r2, [r3, #4]
 80042c6:	e007      	b.n	80042d8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042d6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e2:	2b40      	cmp	r3, #64	; 0x40
 80042e4:	d007      	beq.n	80042f6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042fe:	d97c      	bls.n	80043fa <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d002      	beq.n	800430e <HAL_SPI_TransmitReceive+0x13e>
 8004308:	8a7b      	ldrh	r3, [r7, #18]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d169      	bne.n	80043e2 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004312:	881a      	ldrh	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431e:	1c9a      	adds	r2, r3, #2
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004328:	b29b      	uxth	r3, r3
 800432a:	3b01      	subs	r3, #1
 800432c:	b29a      	uxth	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004332:	e056      	b.n	80043e2 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b02      	cmp	r3, #2
 8004340:	d11b      	bne.n	800437a <HAL_SPI_TransmitReceive+0x1aa>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004346:	b29b      	uxth	r3, r3
 8004348:	2b00      	cmp	r3, #0
 800434a:	d016      	beq.n	800437a <HAL_SPI_TransmitReceive+0x1aa>
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	2b01      	cmp	r3, #1
 8004350:	d113      	bne.n	800437a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004356:	881a      	ldrh	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004362:	1c9a      	adds	r2, r3, #2
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800436c:	b29b      	uxth	r3, r3
 800436e:	3b01      	subs	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004376:	2300      	movs	r3, #0
 8004378:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	2b01      	cmp	r3, #1
 8004386:	d11c      	bne.n	80043c2 <HAL_SPI_TransmitReceive+0x1f2>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800438e:	b29b      	uxth	r3, r3
 8004390:	2b00      	cmp	r3, #0
 8004392:	d016      	beq.n	80043c2 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68da      	ldr	r2, [r3, #12]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	b292      	uxth	r2, r2
 80043a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	1c9a      	adds	r2, r3, #2
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	3b01      	subs	r3, #1
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043be:	2301      	movs	r3, #1
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80043c2:	f7fd f873 	bl	80014ac <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d807      	bhi.n	80043e2 <HAL_SPI_TransmitReceive+0x212>
 80043d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d8:	d003      	beq.n	80043e2 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80043e0:	e0fb      	b.n	80045da <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1a3      	bne.n	8004334 <HAL_SPI_TransmitReceive+0x164>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d19d      	bne.n	8004334 <HAL_SPI_TransmitReceive+0x164>
 80043f8:	e0df      	b.n	80045ba <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <HAL_SPI_TransmitReceive+0x23a>
 8004402:	8a7b      	ldrh	r3, [r7, #18]
 8004404:	2b01      	cmp	r3, #1
 8004406:	f040 80cb 	bne.w	80045a0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800440e:	b29b      	uxth	r3, r3
 8004410:	2b01      	cmp	r3, #1
 8004412:	d912      	bls.n	800443a <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004418:	881a      	ldrh	r2, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004424:	1c9a      	adds	r2, r3, #2
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800442e:	b29b      	uxth	r3, r3
 8004430:	3b02      	subs	r3, #2
 8004432:	b29a      	uxth	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004438:	e0b2      	b.n	80045a0 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	330c      	adds	r3, #12
 8004444:	7812      	ldrb	r2, [r2, #0]
 8004446:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444c:	1c5a      	adds	r2, r3, #1
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004456:	b29b      	uxth	r3, r3
 8004458:	3b01      	subs	r3, #1
 800445a:	b29a      	uxth	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004460:	e09e      	b.n	80045a0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b02      	cmp	r3, #2
 800446e:	d134      	bne.n	80044da <HAL_SPI_TransmitReceive+0x30a>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004474:	b29b      	uxth	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d02f      	beq.n	80044da <HAL_SPI_TransmitReceive+0x30a>
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447c:	2b01      	cmp	r3, #1
 800447e:	d12c      	bne.n	80044da <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004484:	b29b      	uxth	r3, r3
 8004486:	2b01      	cmp	r3, #1
 8004488:	d912      	bls.n	80044b0 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448e:	881a      	ldrh	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449a:	1c9a      	adds	r2, r3, #2
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	3b02      	subs	r3, #2
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044ae:	e012      	b.n	80044d6 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	330c      	adds	r3, #12
 80044ba:	7812      	ldrb	r2, [r2, #0]
 80044bc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c2:	1c5a      	adds	r2, r3, #1
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	3b01      	subs	r3, #1
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d148      	bne.n	800457a <HAL_SPI_TransmitReceive+0x3aa>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d042      	beq.n	800457a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d923      	bls.n	8004548 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	b292      	uxth	r2, r2
 800450c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004512:	1c9a      	adds	r2, r3, #2
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800451e:	b29b      	uxth	r3, r3
 8004520:	3b02      	subs	r3, #2
 8004522:	b29a      	uxth	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004530:	b29b      	uxth	r3, r3
 8004532:	2b01      	cmp	r3, #1
 8004534:	d81f      	bhi.n	8004576 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004544:	605a      	str	r2, [r3, #4]
 8004546:	e016      	b.n	8004576 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f103 020c 	add.w	r2, r3, #12
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004554:	7812      	ldrb	r2, [r2, #0]
 8004556:	b2d2      	uxtb	r2, r2
 8004558:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	1c5a      	adds	r2, r3, #1
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800456a:	b29b      	uxth	r3, r3
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004576:	2301      	movs	r3, #1
 8004578:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800457a:	f7fc ff97 	bl	80014ac <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004586:	429a      	cmp	r2, r3
 8004588:	d803      	bhi.n	8004592 <HAL_SPI_TransmitReceive+0x3c2>
 800458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004590:	d102      	bne.n	8004598 <HAL_SPI_TransmitReceive+0x3c8>
 8004592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004594:	2b00      	cmp	r3, #0
 8004596:	d103      	bne.n	80045a0 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800459e:	e01c      	b.n	80045da <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f47f af5b 	bne.w	8004462 <HAL_SPI_TransmitReceive+0x292>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f47f af54 	bne.w	8004462 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045ba:	69fa      	ldr	r2, [r7, #28]
 80045bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f000 f956 	bl	8004870 <SPI_EndRxTxTransaction>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d006      	beq.n	80045d8 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2220      	movs	r2, #32
 80045d4:	661a      	str	r2, [r3, #96]	; 0x60
 80045d6:	e000      	b.n	80045da <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80045d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80045ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3728      	adds	r7, #40	; 0x28
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004604:	b2db      	uxtb	r3, r3
}
 8004606:	4618      	mov	r0, r3
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b084      	sub	sp, #16
 8004616:	af00      	add	r7, sp, #0
 8004618:	60f8      	str	r0, [r7, #12]
 800461a:	60b9      	str	r1, [r7, #8]
 800461c:	603b      	str	r3, [r7, #0]
 800461e:	4613      	mov	r3, r2
 8004620:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004622:	e04c      	b.n	80046be <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462a:	d048      	beq.n	80046be <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800462c:	f7fc ff3e 	bl	80014ac <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	429a      	cmp	r2, r3
 800463a:	d902      	bls.n	8004642 <SPI_WaitFlagStateUntilTimeout+0x30>
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d13d      	bne.n	80046be <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004650:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800465a:	d111      	bne.n	8004680 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004664:	d004      	beq.n	8004670 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800466e:	d107      	bne.n	8004680 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800467e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004684:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004688:	d10f      	bne.n	80046aa <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e00f      	b.n	80046de <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	4013      	ands	r3, r2
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	bf0c      	ite	eq
 80046ce:	2301      	moveq	r3, #1
 80046d0:	2300      	movne	r3, #0
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	461a      	mov	r2, r3
 80046d6:	79fb      	ldrb	r3, [r7, #7]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d1a3      	bne.n	8004624 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b084      	sub	sp, #16
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	60f8      	str	r0, [r7, #12]
 80046ee:	60b9      	str	r1, [r7, #8]
 80046f0:	607a      	str	r2, [r7, #4]
 80046f2:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80046f4:	e057      	b.n	80047a6 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80046fc:	d106      	bne.n	800470c <SPI_WaitFifoStateUntilTimeout+0x26>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d103      	bne.n	800470c <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	330c      	adds	r3, #12
 800470a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004712:	d048      	beq.n	80047a6 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004714:	f7fc feca 	bl	80014ac <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	429a      	cmp	r2, r3
 8004722:	d902      	bls.n	800472a <SPI_WaitFifoStateUntilTimeout+0x44>
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d13d      	bne.n	80047a6 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004738:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004742:	d111      	bne.n	8004768 <SPI_WaitFifoStateUntilTimeout+0x82>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800474c:	d004      	beq.n	8004758 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004756:	d107      	bne.n	8004768 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004766:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004770:	d10f      	bne.n	8004792 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004780:	601a      	str	r2, [r3, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004790:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e008      	b.n	80047b8 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	4013      	ands	r3, r2
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d19f      	bne.n	80046f6 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af02      	add	r7, sp, #8
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047d4:	d111      	bne.n	80047fa <SPI_EndRxTransaction+0x3a>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047de:	d004      	beq.n	80047ea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047e8:	d107      	bne.n	80047fa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047f8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	2200      	movs	r2, #0
 8004802:	2180      	movs	r1, #128	; 0x80
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f7ff ff04 	bl	8004612 <SPI_WaitFlagStateUntilTimeout>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d007      	beq.n	8004820 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004814:	f043 0220 	orr.w	r2, r3, #32
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e023      	b.n	8004868 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004828:	d11d      	bne.n	8004866 <SPI_EndRxTransaction+0xa6>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004832:	d004      	beq.n	800483e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800483c:	d113      	bne.n	8004866 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	2200      	movs	r2, #0
 8004846:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f7ff ff4b 	bl	80046e6 <SPI_WaitFifoStateUntilTimeout>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d007      	beq.n	8004866 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800485a:	f043 0220 	orr.w	r2, r3, #32
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e000      	b.n	8004868 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af02      	add	r7, sp, #8
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	2200      	movs	r2, #0
 8004884:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f7ff ff2c 	bl	80046e6 <SPI_WaitFifoStateUntilTimeout>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d007      	beq.n	80048a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004898:	f043 0220 	orr.w	r2, r3, #32
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e027      	b.n	80048f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	2200      	movs	r2, #0
 80048ac:	2180      	movs	r1, #128	; 0x80
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f7ff feaf 	bl	8004612 <SPI_WaitFlagStateUntilTimeout>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d007      	beq.n	80048ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048be:	f043 0220 	orr.w	r2, r3, #32
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e014      	b.n	80048f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	9300      	str	r3, [sp, #0]
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f7ff ff05 	bl	80046e6 <SPI_WaitFifoStateUntilTimeout>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d007      	beq.n	80048f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048e6:	f043 0220 	orr.w	r2, r3, #32
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e000      	b.n	80048f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e01d      	b.n	800494a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d106      	bne.n	8004928 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7fc fc78 	bl	8001218 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2202      	movs	r2, #2
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	3304      	adds	r3, #4
 8004938:	4619      	mov	r1, r3
 800493a:	4610      	mov	r0, r2
 800493c:	f000 f9dc 	bl	8004cf8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
	...

08004954 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68da      	ldr	r2, [r3, #12]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 0201 	orr.w	r2, r2, #1
 800496a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689a      	ldr	r2, [r3, #8]
 8004972:	4b0c      	ldr	r3, [pc, #48]	; (80049a4 <HAL_TIM_Base_Start_IT+0x50>)
 8004974:	4013      	ands	r3, r2
 8004976:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2b06      	cmp	r3, #6
 800497c:	d00b      	beq.n	8004996 <HAL_TIM_Base_Start_IT+0x42>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004984:	d007      	beq.n	8004996 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f042 0201 	orr.w	r2, r2, #1
 8004994:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3714      	adds	r7, #20
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr
 80049a4:	00010007 	.word	0x00010007

080049a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d122      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d11b      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f06f 0202 	mvn.w	r2, #2
 80049d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	f003 0303 	and.w	r3, r3, #3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f965 	bl	8004cba <HAL_TIM_IC_CaptureCallback>
 80049f0:	e005      	b.n	80049fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f957 	bl	8004ca6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 f968 	bl	8004cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f003 0304 	and.w	r3, r3, #4
 8004a0e:	2b04      	cmp	r3, #4
 8004a10:	d122      	bne.n	8004a58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d11b      	bne.n	8004a58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0204 	mvn.w	r2, #4
 8004a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f93b 	bl	8004cba <HAL_TIM_IC_CaptureCallback>
 8004a44:	e005      	b.n	8004a52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f92d 	bl	8004ca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f93e 	bl	8004cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	f003 0308 	and.w	r3, r3, #8
 8004a62:	2b08      	cmp	r3, #8
 8004a64:	d122      	bne.n	8004aac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	f003 0308 	and.w	r3, r3, #8
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d11b      	bne.n	8004aac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f06f 0208 	mvn.w	r2, #8
 8004a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2204      	movs	r2, #4
 8004a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	f003 0303 	and.w	r3, r3, #3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d003      	beq.n	8004a9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f911 	bl	8004cba <HAL_TIM_IC_CaptureCallback>
 8004a98:	e005      	b.n	8004aa6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f903 	bl	8004ca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f914 	bl	8004cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	f003 0310 	and.w	r3, r3, #16
 8004ab6:	2b10      	cmp	r3, #16
 8004ab8:	d122      	bne.n	8004b00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	f003 0310 	and.w	r3, r3, #16
 8004ac4:	2b10      	cmp	r3, #16
 8004ac6:	d11b      	bne.n	8004b00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f06f 0210 	mvn.w	r2, #16
 8004ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2208      	movs	r2, #8
 8004ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f8e7 	bl	8004cba <HAL_TIM_IC_CaptureCallback>
 8004aec:	e005      	b.n	8004afa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f8d9 	bl	8004ca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f8ea 	bl	8004cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d10e      	bne.n	8004b2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d107      	bne.n	8004b2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f06f 0201 	mvn.w	r2, #1
 8004b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7fb ffec 	bl	8000b04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b36:	2b80      	cmp	r3, #128	; 0x80
 8004b38:	d10e      	bne.n	8004b58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b44:	2b80      	cmp	r3, #128	; 0x80
 8004b46:	d107      	bne.n	8004b58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f982 	bl	8004e5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b66:	d10e      	bne.n	8004b86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b72:	2b80      	cmp	r3, #128	; 0x80
 8004b74:	d107      	bne.n	8004b86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f975 	bl	8004e70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b90:	2b40      	cmp	r3, #64	; 0x40
 8004b92:	d10e      	bne.n	8004bb2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9e:	2b40      	cmp	r3, #64	; 0x40
 8004ba0:	d107      	bne.n	8004bb2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004baa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f898 	bl	8004ce2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	f003 0320 	and.w	r3, r3, #32
 8004bbc:	2b20      	cmp	r3, #32
 8004bbe:	d10e      	bne.n	8004bde <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f003 0320 	and.w	r3, r3, #32
 8004bca:	2b20      	cmp	r3, #32
 8004bcc:	d107      	bne.n	8004bde <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f06f 0220 	mvn.w	r2, #32
 8004bd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f935 	bl	8004e48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004be8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bec:	d10f      	bne.n	8004c0e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bfc:	d107      	bne.n	8004c0e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f93b 	bl	8004e84 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c1c:	d10f      	bne.n	8004c3e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c2c:	d107      	bne.n	8004c3e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 f92d 	bl	8004e98 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c4c:	d10f      	bne.n	8004c6e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c5c:	d107      	bne.n	8004c6e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 f91f 	bl	8004eac <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c7c:	d10f      	bne.n	8004c9e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c8c:	d107      	bne.n	8004c9e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 f911 	bl	8004ec0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c9e:	bf00      	nop
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b083      	sub	sp, #12
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cae:	bf00      	nop
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b083      	sub	sp, #12
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cc2:	bf00      	nop
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b083      	sub	sp, #12
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cd6:	bf00      	nop
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cea:	bf00      	nop
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
	...

08004cf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a46      	ldr	r2, [pc, #280]	; (8004e24 <TIM_Base_SetConfig+0x12c>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d017      	beq.n	8004d40 <TIM_Base_SetConfig+0x48>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d16:	d013      	beq.n	8004d40 <TIM_Base_SetConfig+0x48>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a43      	ldr	r2, [pc, #268]	; (8004e28 <TIM_Base_SetConfig+0x130>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d00f      	beq.n	8004d40 <TIM_Base_SetConfig+0x48>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a42      	ldr	r2, [pc, #264]	; (8004e2c <TIM_Base_SetConfig+0x134>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d00b      	beq.n	8004d40 <TIM_Base_SetConfig+0x48>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a41      	ldr	r2, [pc, #260]	; (8004e30 <TIM_Base_SetConfig+0x138>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d007      	beq.n	8004d40 <TIM_Base_SetConfig+0x48>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a40      	ldr	r2, [pc, #256]	; (8004e34 <TIM_Base_SetConfig+0x13c>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d003      	beq.n	8004d40 <TIM_Base_SetConfig+0x48>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a3f      	ldr	r2, [pc, #252]	; (8004e38 <TIM_Base_SetConfig+0x140>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d108      	bne.n	8004d52 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a33      	ldr	r2, [pc, #204]	; (8004e24 <TIM_Base_SetConfig+0x12c>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d023      	beq.n	8004da2 <TIM_Base_SetConfig+0xaa>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d60:	d01f      	beq.n	8004da2 <TIM_Base_SetConfig+0xaa>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a30      	ldr	r2, [pc, #192]	; (8004e28 <TIM_Base_SetConfig+0x130>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d01b      	beq.n	8004da2 <TIM_Base_SetConfig+0xaa>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a2f      	ldr	r2, [pc, #188]	; (8004e2c <TIM_Base_SetConfig+0x134>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d017      	beq.n	8004da2 <TIM_Base_SetConfig+0xaa>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a2e      	ldr	r2, [pc, #184]	; (8004e30 <TIM_Base_SetConfig+0x138>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d013      	beq.n	8004da2 <TIM_Base_SetConfig+0xaa>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a2d      	ldr	r2, [pc, #180]	; (8004e34 <TIM_Base_SetConfig+0x13c>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d00f      	beq.n	8004da2 <TIM_Base_SetConfig+0xaa>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a2d      	ldr	r2, [pc, #180]	; (8004e3c <TIM_Base_SetConfig+0x144>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d00b      	beq.n	8004da2 <TIM_Base_SetConfig+0xaa>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a2c      	ldr	r2, [pc, #176]	; (8004e40 <TIM_Base_SetConfig+0x148>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d007      	beq.n	8004da2 <TIM_Base_SetConfig+0xaa>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a2b      	ldr	r2, [pc, #172]	; (8004e44 <TIM_Base_SetConfig+0x14c>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d003      	beq.n	8004da2 <TIM_Base_SetConfig+0xaa>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a26      	ldr	r2, [pc, #152]	; (8004e38 <TIM_Base_SetConfig+0x140>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d108      	bne.n	8004db4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a12      	ldr	r2, [pc, #72]	; (8004e24 <TIM_Base_SetConfig+0x12c>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d013      	beq.n	8004e08 <TIM_Base_SetConfig+0x110>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a14      	ldr	r2, [pc, #80]	; (8004e34 <TIM_Base_SetConfig+0x13c>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d00f      	beq.n	8004e08 <TIM_Base_SetConfig+0x110>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a14      	ldr	r2, [pc, #80]	; (8004e3c <TIM_Base_SetConfig+0x144>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d00b      	beq.n	8004e08 <TIM_Base_SetConfig+0x110>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a13      	ldr	r2, [pc, #76]	; (8004e40 <TIM_Base_SetConfig+0x148>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d007      	beq.n	8004e08 <TIM_Base_SetConfig+0x110>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a12      	ldr	r2, [pc, #72]	; (8004e44 <TIM_Base_SetConfig+0x14c>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d003      	beq.n	8004e08 <TIM_Base_SetConfig+0x110>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a0d      	ldr	r2, [pc, #52]	; (8004e38 <TIM_Base_SetConfig+0x140>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d103      	bne.n	8004e10 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	691a      	ldr	r2, [r3, #16]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	615a      	str	r2, [r3, #20]
}
 8004e16:	bf00      	nop
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	40012c00 	.word	0x40012c00
 8004e28:	40000400 	.word	0x40000400
 8004e2c:	40000800 	.word	0x40000800
 8004e30:	40000c00 	.word	0x40000c00
 8004e34:	40013400 	.word	0x40013400
 8004e38:	40015000 	.word	0x40015000
 8004e3c:	40014000 	.word	0x40014000
 8004e40:	40014400 	.word	0x40014400
 8004e44:	40014800 	.word	0x40014800

08004e48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e042      	b.n	8004f6c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d106      	bne.n	8004efe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f7fc fa07 	bl	800130c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2224      	movs	r2, #36	; 0x24
 8004f02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 0201 	bic.w	r2, r2, #1
 8004f14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f82e 	bl	8004f78 <UART_SetConfig>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d101      	bne.n	8004f26 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e022      	b.n	8004f6c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d002      	beq.n	8004f34 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f001 fa10 	bl	8006354 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689a      	ldr	r2, [r3, #8]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f001 fa97 	bl	8006498 <UART_CheckIdleState>
 8004f6a:	4603      	mov	r3, r0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3708      	adds	r7, #8
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	0000      	movs	r0, r0
	...

08004f78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f78:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004f7c:	b08a      	sub	sp, #40	; 0x28
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004f82:	2300      	movs	r3, #0
 8004f84:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f86:	2300      	movs	r3, #0
 8004f88:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689a      	ldr	r2, [r3, #8]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	431a      	orrs	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	431a      	orrs	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fac:	4313      	orrs	r3, r2
 8004fae:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	4baa      	ldr	r3, [pc, #680]	; (8005260 <UART_SetConfig+0x2e8>)
 8004fb8:	4013      	ands	r3, r2
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	6812      	ldr	r2, [r2, #0]
 8004fbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fc0:	430b      	orrs	r3, r1
 8004fc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68da      	ldr	r2, [r3, #12]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a9f      	ldr	r2, [pc, #636]	; (8005264 <UART_SetConfig+0x2ec>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d004      	beq.n	8004ff4 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004ffe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	6812      	ldr	r2, [r2, #0]
 8005006:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005008:	430b      	orrs	r3, r1
 800500a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005012:	f023 010f 	bic.w	r1, r3, #15
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a90      	ldr	r2, [pc, #576]	; (8005268 <UART_SetConfig+0x2f0>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d126      	bne.n	800507a <UART_SetConfig+0x102>
 800502c:	4b8f      	ldr	r3, [pc, #572]	; (800526c <UART_SetConfig+0x2f4>)
 800502e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005032:	f003 0303 	and.w	r3, r3, #3
 8005036:	2b03      	cmp	r3, #3
 8005038:	d81a      	bhi.n	8005070 <UART_SetConfig+0xf8>
 800503a:	a201      	add	r2, pc, #4	; (adr r2, 8005040 <UART_SetConfig+0xc8>)
 800503c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005040:	08005051 	.word	0x08005051
 8005044:	08005061 	.word	0x08005061
 8005048:	08005059 	.word	0x08005059
 800504c:	08005069 	.word	0x08005069
 8005050:	2301      	movs	r3, #1
 8005052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005056:	e116      	b.n	8005286 <UART_SetConfig+0x30e>
 8005058:	2302      	movs	r3, #2
 800505a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800505e:	e112      	b.n	8005286 <UART_SetConfig+0x30e>
 8005060:	2304      	movs	r3, #4
 8005062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005066:	e10e      	b.n	8005286 <UART_SetConfig+0x30e>
 8005068:	2308      	movs	r3, #8
 800506a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800506e:	e10a      	b.n	8005286 <UART_SetConfig+0x30e>
 8005070:	2310      	movs	r3, #16
 8005072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005076:	bf00      	nop
 8005078:	e105      	b.n	8005286 <UART_SetConfig+0x30e>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a7c      	ldr	r2, [pc, #496]	; (8005270 <UART_SetConfig+0x2f8>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d138      	bne.n	80050f6 <UART_SetConfig+0x17e>
 8005084:	4b79      	ldr	r3, [pc, #484]	; (800526c <UART_SetConfig+0x2f4>)
 8005086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508a:	f003 030c 	and.w	r3, r3, #12
 800508e:	2b0c      	cmp	r3, #12
 8005090:	d82c      	bhi.n	80050ec <UART_SetConfig+0x174>
 8005092:	a201      	add	r2, pc, #4	; (adr r2, 8005098 <UART_SetConfig+0x120>)
 8005094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005098:	080050cd 	.word	0x080050cd
 800509c:	080050ed 	.word	0x080050ed
 80050a0:	080050ed 	.word	0x080050ed
 80050a4:	080050ed 	.word	0x080050ed
 80050a8:	080050dd 	.word	0x080050dd
 80050ac:	080050ed 	.word	0x080050ed
 80050b0:	080050ed 	.word	0x080050ed
 80050b4:	080050ed 	.word	0x080050ed
 80050b8:	080050d5 	.word	0x080050d5
 80050bc:	080050ed 	.word	0x080050ed
 80050c0:	080050ed 	.word	0x080050ed
 80050c4:	080050ed 	.word	0x080050ed
 80050c8:	080050e5 	.word	0x080050e5
 80050cc:	2300      	movs	r3, #0
 80050ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050d2:	e0d8      	b.n	8005286 <UART_SetConfig+0x30e>
 80050d4:	2302      	movs	r3, #2
 80050d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050da:	e0d4      	b.n	8005286 <UART_SetConfig+0x30e>
 80050dc:	2304      	movs	r3, #4
 80050de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050e2:	e0d0      	b.n	8005286 <UART_SetConfig+0x30e>
 80050e4:	2308      	movs	r3, #8
 80050e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ea:	e0cc      	b.n	8005286 <UART_SetConfig+0x30e>
 80050ec:	2310      	movs	r3, #16
 80050ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050f2:	bf00      	nop
 80050f4:	e0c7      	b.n	8005286 <UART_SetConfig+0x30e>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a5e      	ldr	r2, [pc, #376]	; (8005274 <UART_SetConfig+0x2fc>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d125      	bne.n	800514c <UART_SetConfig+0x1d4>
 8005100:	4b5a      	ldr	r3, [pc, #360]	; (800526c <UART_SetConfig+0x2f4>)
 8005102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005106:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800510a:	2b10      	cmp	r3, #16
 800510c:	d011      	beq.n	8005132 <UART_SetConfig+0x1ba>
 800510e:	2b10      	cmp	r3, #16
 8005110:	d802      	bhi.n	8005118 <UART_SetConfig+0x1a0>
 8005112:	2b00      	cmp	r3, #0
 8005114:	d005      	beq.n	8005122 <UART_SetConfig+0x1aa>
 8005116:	e014      	b.n	8005142 <UART_SetConfig+0x1ca>
 8005118:	2b20      	cmp	r3, #32
 800511a:	d006      	beq.n	800512a <UART_SetConfig+0x1b2>
 800511c:	2b30      	cmp	r3, #48	; 0x30
 800511e:	d00c      	beq.n	800513a <UART_SetConfig+0x1c2>
 8005120:	e00f      	b.n	8005142 <UART_SetConfig+0x1ca>
 8005122:	2300      	movs	r3, #0
 8005124:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005128:	e0ad      	b.n	8005286 <UART_SetConfig+0x30e>
 800512a:	2302      	movs	r3, #2
 800512c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005130:	e0a9      	b.n	8005286 <UART_SetConfig+0x30e>
 8005132:	2304      	movs	r3, #4
 8005134:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005138:	e0a5      	b.n	8005286 <UART_SetConfig+0x30e>
 800513a:	2308      	movs	r3, #8
 800513c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005140:	e0a1      	b.n	8005286 <UART_SetConfig+0x30e>
 8005142:	2310      	movs	r3, #16
 8005144:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005148:	bf00      	nop
 800514a:	e09c      	b.n	8005286 <UART_SetConfig+0x30e>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a49      	ldr	r2, [pc, #292]	; (8005278 <UART_SetConfig+0x300>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d125      	bne.n	80051a2 <UART_SetConfig+0x22a>
 8005156:	4b45      	ldr	r3, [pc, #276]	; (800526c <UART_SetConfig+0x2f4>)
 8005158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800515c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005160:	2b40      	cmp	r3, #64	; 0x40
 8005162:	d011      	beq.n	8005188 <UART_SetConfig+0x210>
 8005164:	2b40      	cmp	r3, #64	; 0x40
 8005166:	d802      	bhi.n	800516e <UART_SetConfig+0x1f6>
 8005168:	2b00      	cmp	r3, #0
 800516a:	d005      	beq.n	8005178 <UART_SetConfig+0x200>
 800516c:	e014      	b.n	8005198 <UART_SetConfig+0x220>
 800516e:	2b80      	cmp	r3, #128	; 0x80
 8005170:	d006      	beq.n	8005180 <UART_SetConfig+0x208>
 8005172:	2bc0      	cmp	r3, #192	; 0xc0
 8005174:	d00c      	beq.n	8005190 <UART_SetConfig+0x218>
 8005176:	e00f      	b.n	8005198 <UART_SetConfig+0x220>
 8005178:	2300      	movs	r3, #0
 800517a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800517e:	e082      	b.n	8005286 <UART_SetConfig+0x30e>
 8005180:	2302      	movs	r3, #2
 8005182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005186:	e07e      	b.n	8005286 <UART_SetConfig+0x30e>
 8005188:	2304      	movs	r3, #4
 800518a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800518e:	e07a      	b.n	8005286 <UART_SetConfig+0x30e>
 8005190:	2308      	movs	r3, #8
 8005192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005196:	e076      	b.n	8005286 <UART_SetConfig+0x30e>
 8005198:	2310      	movs	r3, #16
 800519a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800519e:	bf00      	nop
 80051a0:	e071      	b.n	8005286 <UART_SetConfig+0x30e>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a35      	ldr	r2, [pc, #212]	; (800527c <UART_SetConfig+0x304>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d129      	bne.n	8005200 <UART_SetConfig+0x288>
 80051ac:	4b2f      	ldr	r3, [pc, #188]	; (800526c <UART_SetConfig+0x2f4>)
 80051ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ba:	d014      	beq.n	80051e6 <UART_SetConfig+0x26e>
 80051bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051c0:	d802      	bhi.n	80051c8 <UART_SetConfig+0x250>
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d007      	beq.n	80051d6 <UART_SetConfig+0x25e>
 80051c6:	e016      	b.n	80051f6 <UART_SetConfig+0x27e>
 80051c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051cc:	d007      	beq.n	80051de <UART_SetConfig+0x266>
 80051ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051d2:	d00c      	beq.n	80051ee <UART_SetConfig+0x276>
 80051d4:	e00f      	b.n	80051f6 <UART_SetConfig+0x27e>
 80051d6:	2300      	movs	r3, #0
 80051d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051dc:	e053      	b.n	8005286 <UART_SetConfig+0x30e>
 80051de:	2302      	movs	r3, #2
 80051e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051e4:	e04f      	b.n	8005286 <UART_SetConfig+0x30e>
 80051e6:	2304      	movs	r3, #4
 80051e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ec:	e04b      	b.n	8005286 <UART_SetConfig+0x30e>
 80051ee:	2308      	movs	r3, #8
 80051f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051f4:	e047      	b.n	8005286 <UART_SetConfig+0x30e>
 80051f6:	2310      	movs	r3, #16
 80051f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051fc:	bf00      	nop
 80051fe:	e042      	b.n	8005286 <UART_SetConfig+0x30e>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a17      	ldr	r2, [pc, #92]	; (8005264 <UART_SetConfig+0x2ec>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d13a      	bne.n	8005280 <UART_SetConfig+0x308>
 800520a:	4b18      	ldr	r3, [pc, #96]	; (800526c <UART_SetConfig+0x2f4>)
 800520c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005210:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005218:	d014      	beq.n	8005244 <UART_SetConfig+0x2cc>
 800521a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800521e:	d802      	bhi.n	8005226 <UART_SetConfig+0x2ae>
 8005220:	2b00      	cmp	r3, #0
 8005222:	d007      	beq.n	8005234 <UART_SetConfig+0x2bc>
 8005224:	e016      	b.n	8005254 <UART_SetConfig+0x2dc>
 8005226:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800522a:	d007      	beq.n	800523c <UART_SetConfig+0x2c4>
 800522c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005230:	d00c      	beq.n	800524c <UART_SetConfig+0x2d4>
 8005232:	e00f      	b.n	8005254 <UART_SetConfig+0x2dc>
 8005234:	2300      	movs	r3, #0
 8005236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800523a:	e024      	b.n	8005286 <UART_SetConfig+0x30e>
 800523c:	2302      	movs	r3, #2
 800523e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005242:	e020      	b.n	8005286 <UART_SetConfig+0x30e>
 8005244:	2304      	movs	r3, #4
 8005246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800524a:	e01c      	b.n	8005286 <UART_SetConfig+0x30e>
 800524c:	2308      	movs	r3, #8
 800524e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005252:	e018      	b.n	8005286 <UART_SetConfig+0x30e>
 8005254:	2310      	movs	r3, #16
 8005256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800525a:	bf00      	nop
 800525c:	e013      	b.n	8005286 <UART_SetConfig+0x30e>
 800525e:	bf00      	nop
 8005260:	cfff69f3 	.word	0xcfff69f3
 8005264:	40008000 	.word	0x40008000
 8005268:	40013800 	.word	0x40013800
 800526c:	40021000 	.word	0x40021000
 8005270:	40004400 	.word	0x40004400
 8005274:	40004800 	.word	0x40004800
 8005278:	40004c00 	.word	0x40004c00
 800527c:	40005000 	.word	0x40005000
 8005280:	2310      	movs	r3, #16
 8005282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a86      	ldr	r2, [pc, #536]	; (80054a4 <UART_SetConfig+0x52c>)
 800528c:	4293      	cmp	r3, r2
 800528e:	f040 8422 	bne.w	8005ad6 <UART_SetConfig+0xb5e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005292:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005296:	2b08      	cmp	r3, #8
 8005298:	f200 8173 	bhi.w	8005582 <UART_SetConfig+0x60a>
 800529c:	a201      	add	r2, pc, #4	; (adr r2, 80052a4 <UART_SetConfig+0x32c>)
 800529e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a2:	bf00      	nop
 80052a4:	080052c9 	.word	0x080052c9
 80052a8:	08005583 	.word	0x08005583
 80052ac:	0800536b 	.word	0x0800536b
 80052b0:	08005583 	.word	0x08005583
 80052b4:	08005403 	.word	0x08005403
 80052b8:	08005583 	.word	0x08005583
 80052bc:	08005583 	.word	0x08005583
 80052c0:	08005583 	.word	0x08005583
 80052c4:	080054d5 	.word	0x080054d5
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80052c8:	f7fd ff62 	bl	8003190 <HAL_RCC_GetPCLK1Freq>
 80052cc:	4602      	mov	r2, r0
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d044      	beq.n	8005360 <UART_SetConfig+0x3e8>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d03e      	beq.n	800535c <UART_SetConfig+0x3e4>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d038      	beq.n	8005358 <UART_SetConfig+0x3e0>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ea:	2b03      	cmp	r3, #3
 80052ec:	d032      	beq.n	8005354 <UART_SetConfig+0x3dc>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	2b04      	cmp	r3, #4
 80052f4:	d02c      	beq.n	8005350 <UART_SetConfig+0x3d8>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fa:	2b05      	cmp	r3, #5
 80052fc:	d026      	beq.n	800534c <UART_SetConfig+0x3d4>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005302:	2b06      	cmp	r3, #6
 8005304:	d020      	beq.n	8005348 <UART_SetConfig+0x3d0>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	2b07      	cmp	r3, #7
 800530c:	d01a      	beq.n	8005344 <UART_SetConfig+0x3cc>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005312:	2b08      	cmp	r3, #8
 8005314:	d014      	beq.n	8005340 <UART_SetConfig+0x3c8>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531a:	2b09      	cmp	r3, #9
 800531c:	d00e      	beq.n	800533c <UART_SetConfig+0x3c4>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005322:	2b0a      	cmp	r3, #10
 8005324:	d008      	beq.n	8005338 <UART_SetConfig+0x3c0>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	2b0b      	cmp	r3, #11
 800532c:	d102      	bne.n	8005334 <UART_SetConfig+0x3bc>
 800532e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005332:	e016      	b.n	8005362 <UART_SetConfig+0x3ea>
 8005334:	2301      	movs	r3, #1
 8005336:	e014      	b.n	8005362 <UART_SetConfig+0x3ea>
 8005338:	2380      	movs	r3, #128	; 0x80
 800533a:	e012      	b.n	8005362 <UART_SetConfig+0x3ea>
 800533c:	2340      	movs	r3, #64	; 0x40
 800533e:	e010      	b.n	8005362 <UART_SetConfig+0x3ea>
 8005340:	2320      	movs	r3, #32
 8005342:	e00e      	b.n	8005362 <UART_SetConfig+0x3ea>
 8005344:	2310      	movs	r3, #16
 8005346:	e00c      	b.n	8005362 <UART_SetConfig+0x3ea>
 8005348:	230c      	movs	r3, #12
 800534a:	e00a      	b.n	8005362 <UART_SetConfig+0x3ea>
 800534c:	230a      	movs	r3, #10
 800534e:	e008      	b.n	8005362 <UART_SetConfig+0x3ea>
 8005350:	2308      	movs	r3, #8
 8005352:	e006      	b.n	8005362 <UART_SetConfig+0x3ea>
 8005354:	2306      	movs	r3, #6
 8005356:	e004      	b.n	8005362 <UART_SetConfig+0x3ea>
 8005358:	2304      	movs	r3, #4
 800535a:	e002      	b.n	8005362 <UART_SetConfig+0x3ea>
 800535c:	2302      	movs	r3, #2
 800535e:	e000      	b.n	8005362 <UART_SetConfig+0x3ea>
 8005360:	2301      	movs	r3, #1
 8005362:	fbb2 f3f3 	udiv	r3, r2, r3
 8005366:	617b      	str	r3, [r7, #20]
        break;
 8005368:	e10e      	b.n	8005588 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	2b00      	cmp	r3, #0
 8005370:	d044      	beq.n	80053fc <UART_SetConfig+0x484>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005376:	2b01      	cmp	r3, #1
 8005378:	d03e      	beq.n	80053f8 <UART_SetConfig+0x480>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537e:	2b02      	cmp	r3, #2
 8005380:	d038      	beq.n	80053f4 <UART_SetConfig+0x47c>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	2b03      	cmp	r3, #3
 8005388:	d032      	beq.n	80053f0 <UART_SetConfig+0x478>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538e:	2b04      	cmp	r3, #4
 8005390:	d02c      	beq.n	80053ec <UART_SetConfig+0x474>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005396:	2b05      	cmp	r3, #5
 8005398:	d026      	beq.n	80053e8 <UART_SetConfig+0x470>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	2b06      	cmp	r3, #6
 80053a0:	d020      	beq.n	80053e4 <UART_SetConfig+0x46c>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a6:	2b07      	cmp	r3, #7
 80053a8:	d01a      	beq.n	80053e0 <UART_SetConfig+0x468>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ae:	2b08      	cmp	r3, #8
 80053b0:	d014      	beq.n	80053dc <UART_SetConfig+0x464>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b6:	2b09      	cmp	r3, #9
 80053b8:	d00e      	beq.n	80053d8 <UART_SetConfig+0x460>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053be:	2b0a      	cmp	r3, #10
 80053c0:	d008      	beq.n	80053d4 <UART_SetConfig+0x45c>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c6:	2b0b      	cmp	r3, #11
 80053c8:	d102      	bne.n	80053d0 <UART_SetConfig+0x458>
 80053ca:	f24f 4324 	movw	r3, #62500	; 0xf424
 80053ce:	e016      	b.n	80053fe <UART_SetConfig+0x486>
 80053d0:	4b35      	ldr	r3, [pc, #212]	; (80054a8 <UART_SetConfig+0x530>)
 80053d2:	e014      	b.n	80053fe <UART_SetConfig+0x486>
 80053d4:	4b35      	ldr	r3, [pc, #212]	; (80054ac <UART_SetConfig+0x534>)
 80053d6:	e012      	b.n	80053fe <UART_SetConfig+0x486>
 80053d8:	4b35      	ldr	r3, [pc, #212]	; (80054b0 <UART_SetConfig+0x538>)
 80053da:	e010      	b.n	80053fe <UART_SetConfig+0x486>
 80053dc:	4b35      	ldr	r3, [pc, #212]	; (80054b4 <UART_SetConfig+0x53c>)
 80053de:	e00e      	b.n	80053fe <UART_SetConfig+0x486>
 80053e0:	4b35      	ldr	r3, [pc, #212]	; (80054b8 <UART_SetConfig+0x540>)
 80053e2:	e00c      	b.n	80053fe <UART_SetConfig+0x486>
 80053e4:	4b35      	ldr	r3, [pc, #212]	; (80054bc <UART_SetConfig+0x544>)
 80053e6:	e00a      	b.n	80053fe <UART_SetConfig+0x486>
 80053e8:	4b35      	ldr	r3, [pc, #212]	; (80054c0 <UART_SetConfig+0x548>)
 80053ea:	e008      	b.n	80053fe <UART_SetConfig+0x486>
 80053ec:	4b35      	ldr	r3, [pc, #212]	; (80054c4 <UART_SetConfig+0x54c>)
 80053ee:	e006      	b.n	80053fe <UART_SetConfig+0x486>
 80053f0:	4b35      	ldr	r3, [pc, #212]	; (80054c8 <UART_SetConfig+0x550>)
 80053f2:	e004      	b.n	80053fe <UART_SetConfig+0x486>
 80053f4:	4b35      	ldr	r3, [pc, #212]	; (80054cc <UART_SetConfig+0x554>)
 80053f6:	e002      	b.n	80053fe <UART_SetConfig+0x486>
 80053f8:	4b35      	ldr	r3, [pc, #212]	; (80054d0 <UART_SetConfig+0x558>)
 80053fa:	e000      	b.n	80053fe <UART_SetConfig+0x486>
 80053fc:	4b2a      	ldr	r3, [pc, #168]	; (80054a8 <UART_SetConfig+0x530>)
 80053fe:	617b      	str	r3, [r7, #20]
        break;
 8005400:	e0c2      	b.n	8005588 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005402:	f7fd fe57 	bl	80030b4 <HAL_RCC_GetSysClockFreq>
 8005406:	4602      	mov	r2, r0
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540c:	2b00      	cmp	r3, #0
 800540e:	d044      	beq.n	800549a <UART_SetConfig+0x522>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005414:	2b01      	cmp	r3, #1
 8005416:	d03e      	beq.n	8005496 <UART_SetConfig+0x51e>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541c:	2b02      	cmp	r3, #2
 800541e:	d038      	beq.n	8005492 <UART_SetConfig+0x51a>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005424:	2b03      	cmp	r3, #3
 8005426:	d032      	beq.n	800548e <UART_SetConfig+0x516>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542c:	2b04      	cmp	r3, #4
 800542e:	d02c      	beq.n	800548a <UART_SetConfig+0x512>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005434:	2b05      	cmp	r3, #5
 8005436:	d026      	beq.n	8005486 <UART_SetConfig+0x50e>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543c:	2b06      	cmp	r3, #6
 800543e:	d020      	beq.n	8005482 <UART_SetConfig+0x50a>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	2b07      	cmp	r3, #7
 8005446:	d01a      	beq.n	800547e <UART_SetConfig+0x506>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544c:	2b08      	cmp	r3, #8
 800544e:	d014      	beq.n	800547a <UART_SetConfig+0x502>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005454:	2b09      	cmp	r3, #9
 8005456:	d00e      	beq.n	8005476 <UART_SetConfig+0x4fe>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	2b0a      	cmp	r3, #10
 800545e:	d008      	beq.n	8005472 <UART_SetConfig+0x4fa>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	2b0b      	cmp	r3, #11
 8005466:	d102      	bne.n	800546e <UART_SetConfig+0x4f6>
 8005468:	f44f 7380 	mov.w	r3, #256	; 0x100
 800546c:	e016      	b.n	800549c <UART_SetConfig+0x524>
 800546e:	2301      	movs	r3, #1
 8005470:	e014      	b.n	800549c <UART_SetConfig+0x524>
 8005472:	2380      	movs	r3, #128	; 0x80
 8005474:	e012      	b.n	800549c <UART_SetConfig+0x524>
 8005476:	2340      	movs	r3, #64	; 0x40
 8005478:	e010      	b.n	800549c <UART_SetConfig+0x524>
 800547a:	2320      	movs	r3, #32
 800547c:	e00e      	b.n	800549c <UART_SetConfig+0x524>
 800547e:	2310      	movs	r3, #16
 8005480:	e00c      	b.n	800549c <UART_SetConfig+0x524>
 8005482:	230c      	movs	r3, #12
 8005484:	e00a      	b.n	800549c <UART_SetConfig+0x524>
 8005486:	230a      	movs	r3, #10
 8005488:	e008      	b.n	800549c <UART_SetConfig+0x524>
 800548a:	2308      	movs	r3, #8
 800548c:	e006      	b.n	800549c <UART_SetConfig+0x524>
 800548e:	2306      	movs	r3, #6
 8005490:	e004      	b.n	800549c <UART_SetConfig+0x524>
 8005492:	2304      	movs	r3, #4
 8005494:	e002      	b.n	800549c <UART_SetConfig+0x524>
 8005496:	2302      	movs	r3, #2
 8005498:	e000      	b.n	800549c <UART_SetConfig+0x524>
 800549a:	2301      	movs	r3, #1
 800549c:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a0:	617b      	str	r3, [r7, #20]
        break;
 80054a2:	e071      	b.n	8005588 <UART_SetConfig+0x610>
 80054a4:	40008000 	.word	0x40008000
 80054a8:	00f42400 	.word	0x00f42400
 80054ac:	0001e848 	.word	0x0001e848
 80054b0:	0003d090 	.word	0x0003d090
 80054b4:	0007a120 	.word	0x0007a120
 80054b8:	000f4240 	.word	0x000f4240
 80054bc:	00145855 	.word	0x00145855
 80054c0:	00186a00 	.word	0x00186a00
 80054c4:	001e8480 	.word	0x001e8480
 80054c8:	0028b0aa 	.word	0x0028b0aa
 80054cc:	003d0900 	.word	0x003d0900
 80054d0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d04e      	beq.n	800557a <UART_SetConfig+0x602>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d047      	beq.n	8005574 <UART_SetConfig+0x5fc>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d040      	beq.n	800556e <UART_SetConfig+0x5f6>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	2b03      	cmp	r3, #3
 80054f2:	d039      	beq.n	8005568 <UART_SetConfig+0x5f0>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f8:	2b04      	cmp	r3, #4
 80054fa:	d032      	beq.n	8005562 <UART_SetConfig+0x5ea>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005500:	2b05      	cmp	r3, #5
 8005502:	d02b      	beq.n	800555c <UART_SetConfig+0x5e4>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	2b06      	cmp	r3, #6
 800550a:	d024      	beq.n	8005556 <UART_SetConfig+0x5de>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005510:	2b07      	cmp	r3, #7
 8005512:	d01d      	beq.n	8005550 <UART_SetConfig+0x5d8>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005518:	2b08      	cmp	r3, #8
 800551a:	d016      	beq.n	800554a <UART_SetConfig+0x5d2>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005520:	2b09      	cmp	r3, #9
 8005522:	d00f      	beq.n	8005544 <UART_SetConfig+0x5cc>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005528:	2b0a      	cmp	r3, #10
 800552a:	d008      	beq.n	800553e <UART_SetConfig+0x5c6>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005530:	2b0b      	cmp	r3, #11
 8005532:	d101      	bne.n	8005538 <UART_SetConfig+0x5c0>
 8005534:	2380      	movs	r3, #128	; 0x80
 8005536:	e022      	b.n	800557e <UART_SetConfig+0x606>
 8005538:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800553c:	e01f      	b.n	800557e <UART_SetConfig+0x606>
 800553e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005542:	e01c      	b.n	800557e <UART_SetConfig+0x606>
 8005544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005548:	e019      	b.n	800557e <UART_SetConfig+0x606>
 800554a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800554e:	e016      	b.n	800557e <UART_SetConfig+0x606>
 8005550:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005554:	e013      	b.n	800557e <UART_SetConfig+0x606>
 8005556:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800555a:	e010      	b.n	800557e <UART_SetConfig+0x606>
 800555c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005560:	e00d      	b.n	800557e <UART_SetConfig+0x606>
 8005562:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005566:	e00a      	b.n	800557e <UART_SetConfig+0x606>
 8005568:	f241 5355 	movw	r3, #5461	; 0x1555
 800556c:	e007      	b.n	800557e <UART_SetConfig+0x606>
 800556e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005572:	e004      	b.n	800557e <UART_SetConfig+0x606>
 8005574:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005578:	e001      	b.n	800557e <UART_SetConfig+0x606>
 800557a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800557e:	617b      	str	r3, [r7, #20]
        break;
 8005580:	e002      	b.n	8005588 <UART_SetConfig+0x610>
      default:
        ret = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	76fb      	strb	r3, [r7, #27]
        break;
 8005586:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	2b00      	cmp	r3, #0
 800558c:	f000 86b7 	beq.w	80062fe <UART_SetConfig+0x1386>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	4613      	mov	r3, r2
 8005596:	005b      	lsls	r3, r3, #1
 8005598:	4413      	add	r3, r2
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	429a      	cmp	r2, r3
 800559e:	d305      	bcc.n	80055ac <UART_SetConfig+0x634>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d903      	bls.n	80055b4 <UART_SetConfig+0x63c>
      {
        ret = HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	76fb      	strb	r3, [r7, #27]
 80055b0:	f000 bea5 	b.w	80062fe <UART_SetConfig+0x1386>
      }
      else
      {
        switch (clocksource)
 80055b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055b8:	2b08      	cmp	r3, #8
 80055ba:	f200 8277 	bhi.w	8005aac <UART_SetConfig+0xb34>
 80055be:	a201      	add	r2, pc, #4	; (adr r2, 80055c4 <UART_SetConfig+0x64c>)
 80055c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c4:	080055e9 	.word	0x080055e9
 80055c8:	08005aad 	.word	0x08005aad
 80055cc:	08005727 	.word	0x08005727
 80055d0:	08005aad 	.word	0x08005aad
 80055d4:	0800581d 	.word	0x0800581d
 80055d8:	08005aad 	.word	0x08005aad
 80055dc:	08005aad 	.word	0x08005aad
 80055e0:	08005aad 	.word	0x08005aad
 80055e4:	0800595b 	.word	0x0800595b
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80055e8:	f7fd fdd2 	bl	8003190 <HAL_RCC_GetPCLK1Freq>
 80055ec:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f04f 0100 	mov.w	r1, #0
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d067      	beq.n	80056ce <UART_SetConfig+0x756>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005602:	2b01      	cmp	r3, #1
 8005604:	d05e      	beq.n	80056c4 <UART_SetConfig+0x74c>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560a:	2b02      	cmp	r3, #2
 800560c:	d055      	beq.n	80056ba <UART_SetConfig+0x742>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005612:	2b03      	cmp	r3, #3
 8005614:	d04c      	beq.n	80056b0 <UART_SetConfig+0x738>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561a:	2b04      	cmp	r3, #4
 800561c:	d043      	beq.n	80056a6 <UART_SetConfig+0x72e>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005622:	2b05      	cmp	r3, #5
 8005624:	d03a      	beq.n	800569c <UART_SetConfig+0x724>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562a:	2b06      	cmp	r3, #6
 800562c:	d031      	beq.n	8005692 <UART_SetConfig+0x71a>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005632:	2b07      	cmp	r3, #7
 8005634:	d028      	beq.n	8005688 <UART_SetConfig+0x710>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563a:	2b08      	cmp	r3, #8
 800563c:	d01f      	beq.n	800567e <UART_SetConfig+0x706>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005642:	2b09      	cmp	r3, #9
 8005644:	d016      	beq.n	8005674 <UART_SetConfig+0x6fc>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564a:	2b0a      	cmp	r3, #10
 800564c:	d00d      	beq.n	800566a <UART_SetConfig+0x6f2>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005652:	2b0b      	cmp	r3, #11
 8005654:	d104      	bne.n	8005660 <UART_SetConfig+0x6e8>
 8005656:	f44f 7380 	mov.w	r3, #256	; 0x100
 800565a:	f04f 0400 	mov.w	r4, #0
 800565e:	e03a      	b.n	80056d6 <UART_SetConfig+0x75e>
 8005660:	f04f 0301 	mov.w	r3, #1
 8005664:	f04f 0400 	mov.w	r4, #0
 8005668:	e035      	b.n	80056d6 <UART_SetConfig+0x75e>
 800566a:	f04f 0380 	mov.w	r3, #128	; 0x80
 800566e:	f04f 0400 	mov.w	r4, #0
 8005672:	e030      	b.n	80056d6 <UART_SetConfig+0x75e>
 8005674:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005678:	f04f 0400 	mov.w	r4, #0
 800567c:	e02b      	b.n	80056d6 <UART_SetConfig+0x75e>
 800567e:	f04f 0320 	mov.w	r3, #32
 8005682:	f04f 0400 	mov.w	r4, #0
 8005686:	e026      	b.n	80056d6 <UART_SetConfig+0x75e>
 8005688:	f04f 0310 	mov.w	r3, #16
 800568c:	f04f 0400 	mov.w	r4, #0
 8005690:	e021      	b.n	80056d6 <UART_SetConfig+0x75e>
 8005692:	f04f 030c 	mov.w	r3, #12
 8005696:	f04f 0400 	mov.w	r4, #0
 800569a:	e01c      	b.n	80056d6 <UART_SetConfig+0x75e>
 800569c:	f04f 030a 	mov.w	r3, #10
 80056a0:	f04f 0400 	mov.w	r4, #0
 80056a4:	e017      	b.n	80056d6 <UART_SetConfig+0x75e>
 80056a6:	f04f 0308 	mov.w	r3, #8
 80056aa:	f04f 0400 	mov.w	r4, #0
 80056ae:	e012      	b.n	80056d6 <UART_SetConfig+0x75e>
 80056b0:	f04f 0306 	mov.w	r3, #6
 80056b4:	f04f 0400 	mov.w	r4, #0
 80056b8:	e00d      	b.n	80056d6 <UART_SetConfig+0x75e>
 80056ba:	f04f 0304 	mov.w	r3, #4
 80056be:	f04f 0400 	mov.w	r4, #0
 80056c2:	e008      	b.n	80056d6 <UART_SetConfig+0x75e>
 80056c4:	f04f 0302 	mov.w	r3, #2
 80056c8:	f04f 0400 	mov.w	r4, #0
 80056cc:	e003      	b.n	80056d6 <UART_SetConfig+0x75e>
 80056ce:	f04f 0301 	mov.w	r3, #1
 80056d2:	f04f 0400 	mov.w	r4, #0
 80056d6:	461a      	mov	r2, r3
 80056d8:	4623      	mov	r3, r4
 80056da:	f7fa fd9d 	bl	8000218 <__aeabi_uldivmod>
 80056de:	4603      	mov	r3, r0
 80056e0:	460c      	mov	r4, r1
 80056e2:	4619      	mov	r1, r3
 80056e4:	4622      	mov	r2, r4
 80056e6:	f04f 0300 	mov.w	r3, #0
 80056ea:	f04f 0400 	mov.w	r4, #0
 80056ee:	0214      	lsls	r4, r2, #8
 80056f0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80056f4:	020b      	lsls	r3, r1, #8
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	6852      	ldr	r2, [r2, #4]
 80056fa:	0852      	lsrs	r2, r2, #1
 80056fc:	4611      	mov	r1, r2
 80056fe:	f04f 0200 	mov.w	r2, #0
 8005702:	eb13 0b01 	adds.w	fp, r3, r1
 8005706:	eb44 0c02 	adc.w	ip, r4, r2
 800570a:	4658      	mov	r0, fp
 800570c:	4661      	mov	r1, ip
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f04f 0400 	mov.w	r4, #0
 8005716:	461a      	mov	r2, r3
 8005718:	4623      	mov	r3, r4
 800571a:	f7fa fd7d 	bl	8000218 <__aeabi_uldivmod>
 800571e:	4603      	mov	r3, r0
 8005720:	460c      	mov	r4, r1
 8005722:	61fb      	str	r3, [r7, #28]
            break;
 8005724:	e1c5      	b.n	8005ab2 <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572a:	2b00      	cmp	r3, #0
 800572c:	d05b      	beq.n	80057e6 <UART_SetConfig+0x86e>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005732:	2b01      	cmp	r3, #1
 8005734:	d053      	beq.n	80057de <UART_SetConfig+0x866>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573a:	2b02      	cmp	r3, #2
 800573c:	d04b      	beq.n	80057d6 <UART_SetConfig+0x85e>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005742:	2b03      	cmp	r3, #3
 8005744:	d043      	beq.n	80057ce <UART_SetConfig+0x856>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574a:	2b04      	cmp	r3, #4
 800574c:	d03b      	beq.n	80057c6 <UART_SetConfig+0x84e>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005752:	2b05      	cmp	r3, #5
 8005754:	d033      	beq.n	80057be <UART_SetConfig+0x846>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	2b06      	cmp	r3, #6
 800575c:	d02b      	beq.n	80057b6 <UART_SetConfig+0x83e>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005762:	2b07      	cmp	r3, #7
 8005764:	d023      	beq.n	80057ae <UART_SetConfig+0x836>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576a:	2b08      	cmp	r3, #8
 800576c:	d01b      	beq.n	80057a6 <UART_SetConfig+0x82e>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	2b09      	cmp	r3, #9
 8005774:	d013      	beq.n	800579e <UART_SetConfig+0x826>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	2b0a      	cmp	r3, #10
 800577c:	d00b      	beq.n	8005796 <UART_SetConfig+0x81e>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	2b0b      	cmp	r3, #11
 8005784:	d103      	bne.n	800578e <UART_SetConfig+0x816>
 8005786:	4bae      	ldr	r3, [pc, #696]	; (8005a40 <UART_SetConfig+0xac8>)
 8005788:	f04f 0400 	mov.w	r4, #0
 800578c:	e02e      	b.n	80057ec <UART_SetConfig+0x874>
 800578e:	4bad      	ldr	r3, [pc, #692]	; (8005a44 <UART_SetConfig+0xacc>)
 8005790:	f04f 0400 	mov.w	r4, #0
 8005794:	e02a      	b.n	80057ec <UART_SetConfig+0x874>
 8005796:	4bac      	ldr	r3, [pc, #688]	; (8005a48 <UART_SetConfig+0xad0>)
 8005798:	f04f 0400 	mov.w	r4, #0
 800579c:	e026      	b.n	80057ec <UART_SetConfig+0x874>
 800579e:	4bab      	ldr	r3, [pc, #684]	; (8005a4c <UART_SetConfig+0xad4>)
 80057a0:	f04f 0400 	mov.w	r4, #0
 80057a4:	e022      	b.n	80057ec <UART_SetConfig+0x874>
 80057a6:	4baa      	ldr	r3, [pc, #680]	; (8005a50 <UART_SetConfig+0xad8>)
 80057a8:	f04f 0400 	mov.w	r4, #0
 80057ac:	e01e      	b.n	80057ec <UART_SetConfig+0x874>
 80057ae:	4ba9      	ldr	r3, [pc, #676]	; (8005a54 <UART_SetConfig+0xadc>)
 80057b0:	f04f 0400 	mov.w	r4, #0
 80057b4:	e01a      	b.n	80057ec <UART_SetConfig+0x874>
 80057b6:	a49e      	add	r4, pc, #632	; (adr r4, 8005a30 <UART_SetConfig+0xab8>)
 80057b8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80057bc:	e016      	b.n	80057ec <UART_SetConfig+0x874>
 80057be:	4ba6      	ldr	r3, [pc, #664]	; (8005a58 <UART_SetConfig+0xae0>)
 80057c0:	f04f 0400 	mov.w	r4, #0
 80057c4:	e012      	b.n	80057ec <UART_SetConfig+0x874>
 80057c6:	4ba5      	ldr	r3, [pc, #660]	; (8005a5c <UART_SetConfig+0xae4>)
 80057c8:	f04f 0400 	mov.w	r4, #0
 80057cc:	e00e      	b.n	80057ec <UART_SetConfig+0x874>
 80057ce:	a49a      	add	r4, pc, #616	; (adr r4, 8005a38 <UART_SetConfig+0xac0>)
 80057d0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80057d4:	e00a      	b.n	80057ec <UART_SetConfig+0x874>
 80057d6:	4ba2      	ldr	r3, [pc, #648]	; (8005a60 <UART_SetConfig+0xae8>)
 80057d8:	f04f 0400 	mov.w	r4, #0
 80057dc:	e006      	b.n	80057ec <UART_SetConfig+0x874>
 80057de:	4ba1      	ldr	r3, [pc, #644]	; (8005a64 <UART_SetConfig+0xaec>)
 80057e0:	f04f 0400 	mov.w	r4, #0
 80057e4:	e002      	b.n	80057ec <UART_SetConfig+0x874>
 80057e6:	4b97      	ldr	r3, [pc, #604]	; (8005a44 <UART_SetConfig+0xacc>)
 80057e8:	f04f 0400 	mov.w	r4, #0
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	6852      	ldr	r2, [r2, #4]
 80057f0:	0852      	lsrs	r2, r2, #1
 80057f2:	4611      	mov	r1, r2
 80057f4:	f04f 0200 	mov.w	r2, #0
 80057f8:	eb13 0b01 	adds.w	fp, r3, r1
 80057fc:	eb44 0c02 	adc.w	ip, r4, r2
 8005800:	4658      	mov	r0, fp
 8005802:	4661      	mov	r1, ip
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f04f 0400 	mov.w	r4, #0
 800580c:	461a      	mov	r2, r3
 800580e:	4623      	mov	r3, r4
 8005810:	f7fa fd02 	bl	8000218 <__aeabi_uldivmod>
 8005814:	4603      	mov	r3, r0
 8005816:	460c      	mov	r4, r1
 8005818:	61fb      	str	r3, [r7, #28]
            break;
 800581a:	e14a      	b.n	8005ab2 <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800581c:	f7fd fc4a 	bl	80030b4 <HAL_RCC_GetSysClockFreq>
 8005820:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	4618      	mov	r0, r3
 8005826:	f04f 0100 	mov.w	r1, #0
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582e:	2b00      	cmp	r3, #0
 8005830:	d067      	beq.n	8005902 <UART_SetConfig+0x98a>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005836:	2b01      	cmp	r3, #1
 8005838:	d05e      	beq.n	80058f8 <UART_SetConfig+0x980>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583e:	2b02      	cmp	r3, #2
 8005840:	d055      	beq.n	80058ee <UART_SetConfig+0x976>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005846:	2b03      	cmp	r3, #3
 8005848:	d04c      	beq.n	80058e4 <UART_SetConfig+0x96c>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584e:	2b04      	cmp	r3, #4
 8005850:	d043      	beq.n	80058da <UART_SetConfig+0x962>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005856:	2b05      	cmp	r3, #5
 8005858:	d03a      	beq.n	80058d0 <UART_SetConfig+0x958>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	2b06      	cmp	r3, #6
 8005860:	d031      	beq.n	80058c6 <UART_SetConfig+0x94e>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005866:	2b07      	cmp	r3, #7
 8005868:	d028      	beq.n	80058bc <UART_SetConfig+0x944>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586e:	2b08      	cmp	r3, #8
 8005870:	d01f      	beq.n	80058b2 <UART_SetConfig+0x93a>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005876:	2b09      	cmp	r3, #9
 8005878:	d016      	beq.n	80058a8 <UART_SetConfig+0x930>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587e:	2b0a      	cmp	r3, #10
 8005880:	d00d      	beq.n	800589e <UART_SetConfig+0x926>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005886:	2b0b      	cmp	r3, #11
 8005888:	d104      	bne.n	8005894 <UART_SetConfig+0x91c>
 800588a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800588e:	f04f 0400 	mov.w	r4, #0
 8005892:	e03a      	b.n	800590a <UART_SetConfig+0x992>
 8005894:	f04f 0301 	mov.w	r3, #1
 8005898:	f04f 0400 	mov.w	r4, #0
 800589c:	e035      	b.n	800590a <UART_SetConfig+0x992>
 800589e:	f04f 0380 	mov.w	r3, #128	; 0x80
 80058a2:	f04f 0400 	mov.w	r4, #0
 80058a6:	e030      	b.n	800590a <UART_SetConfig+0x992>
 80058a8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80058ac:	f04f 0400 	mov.w	r4, #0
 80058b0:	e02b      	b.n	800590a <UART_SetConfig+0x992>
 80058b2:	f04f 0320 	mov.w	r3, #32
 80058b6:	f04f 0400 	mov.w	r4, #0
 80058ba:	e026      	b.n	800590a <UART_SetConfig+0x992>
 80058bc:	f04f 0310 	mov.w	r3, #16
 80058c0:	f04f 0400 	mov.w	r4, #0
 80058c4:	e021      	b.n	800590a <UART_SetConfig+0x992>
 80058c6:	f04f 030c 	mov.w	r3, #12
 80058ca:	f04f 0400 	mov.w	r4, #0
 80058ce:	e01c      	b.n	800590a <UART_SetConfig+0x992>
 80058d0:	f04f 030a 	mov.w	r3, #10
 80058d4:	f04f 0400 	mov.w	r4, #0
 80058d8:	e017      	b.n	800590a <UART_SetConfig+0x992>
 80058da:	f04f 0308 	mov.w	r3, #8
 80058de:	f04f 0400 	mov.w	r4, #0
 80058e2:	e012      	b.n	800590a <UART_SetConfig+0x992>
 80058e4:	f04f 0306 	mov.w	r3, #6
 80058e8:	f04f 0400 	mov.w	r4, #0
 80058ec:	e00d      	b.n	800590a <UART_SetConfig+0x992>
 80058ee:	f04f 0304 	mov.w	r3, #4
 80058f2:	f04f 0400 	mov.w	r4, #0
 80058f6:	e008      	b.n	800590a <UART_SetConfig+0x992>
 80058f8:	f04f 0302 	mov.w	r3, #2
 80058fc:	f04f 0400 	mov.w	r4, #0
 8005900:	e003      	b.n	800590a <UART_SetConfig+0x992>
 8005902:	f04f 0301 	mov.w	r3, #1
 8005906:	f04f 0400 	mov.w	r4, #0
 800590a:	461a      	mov	r2, r3
 800590c:	4623      	mov	r3, r4
 800590e:	f7fa fc83 	bl	8000218 <__aeabi_uldivmod>
 8005912:	4603      	mov	r3, r0
 8005914:	460c      	mov	r4, r1
 8005916:	4619      	mov	r1, r3
 8005918:	4622      	mov	r2, r4
 800591a:	f04f 0300 	mov.w	r3, #0
 800591e:	f04f 0400 	mov.w	r4, #0
 8005922:	0214      	lsls	r4, r2, #8
 8005924:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005928:	020b      	lsls	r3, r1, #8
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	6852      	ldr	r2, [r2, #4]
 800592e:	0852      	lsrs	r2, r2, #1
 8005930:	4611      	mov	r1, r2
 8005932:	f04f 0200 	mov.w	r2, #0
 8005936:	eb13 0b01 	adds.w	fp, r3, r1
 800593a:	eb44 0c02 	adc.w	ip, r4, r2
 800593e:	4658      	mov	r0, fp
 8005940:	4661      	mov	r1, ip
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f04f 0400 	mov.w	r4, #0
 800594a:	461a      	mov	r2, r3
 800594c:	4623      	mov	r3, r4
 800594e:	f7fa fc63 	bl	8000218 <__aeabi_uldivmod>
 8005952:	4603      	mov	r3, r0
 8005954:	460c      	mov	r4, r1
 8005956:	61fb      	str	r3, [r7, #28]
            break;
 8005958:	e0ab      	b.n	8005ab2 <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595e:	2b00      	cmp	r3, #0
 8005960:	f000 8088 	beq.w	8005a74 <UART_SetConfig+0xafc>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	2b01      	cmp	r3, #1
 800596a:	d05b      	beq.n	8005a24 <UART_SetConfig+0xaac>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005970:	2b02      	cmp	r3, #2
 8005972:	d052      	beq.n	8005a1a <UART_SetConfig+0xaa2>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005978:	2b03      	cmp	r3, #3
 800597a:	d04a      	beq.n	8005a12 <UART_SetConfig+0xa9a>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005980:	2b04      	cmp	r3, #4
 8005982:	d041      	beq.n	8005a08 <UART_SetConfig+0xa90>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005988:	2b05      	cmp	r3, #5
 800598a:	d039      	beq.n	8005a00 <UART_SetConfig+0xa88>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005990:	2b06      	cmp	r3, #6
 8005992:	d031      	beq.n	80059f8 <UART_SetConfig+0xa80>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005998:	2b07      	cmp	r3, #7
 800599a:	d028      	beq.n	80059ee <UART_SetConfig+0xa76>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a0:	2b08      	cmp	r3, #8
 80059a2:	d01f      	beq.n	80059e4 <UART_SetConfig+0xa6c>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a8:	2b09      	cmp	r3, #9
 80059aa:	d016      	beq.n	80059da <UART_SetConfig+0xa62>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b0:	2b0a      	cmp	r3, #10
 80059b2:	d00d      	beq.n	80059d0 <UART_SetConfig+0xa58>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b8:	2b0b      	cmp	r3, #11
 80059ba:	d104      	bne.n	80059c6 <UART_SetConfig+0xa4e>
 80059bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059c0:	f04f 0400 	mov.w	r4, #0
 80059c4:	e05a      	b.n	8005a7c <UART_SetConfig+0xb04>
 80059c6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80059ca:	f04f 0400 	mov.w	r4, #0
 80059ce:	e055      	b.n	8005a7c <UART_SetConfig+0xb04>
 80059d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80059d4:	f04f 0400 	mov.w	r4, #0
 80059d8:	e050      	b.n	8005a7c <UART_SetConfig+0xb04>
 80059da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059de:	f04f 0400 	mov.w	r4, #0
 80059e2:	e04b      	b.n	8005a7c <UART_SetConfig+0xb04>
 80059e4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80059e8:	f04f 0400 	mov.w	r4, #0
 80059ec:	e046      	b.n	8005a7c <UART_SetConfig+0xb04>
 80059ee:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80059f2:	f04f 0400 	mov.w	r4, #0
 80059f6:	e041      	b.n	8005a7c <UART_SetConfig+0xb04>
 80059f8:	4b1b      	ldr	r3, [pc, #108]	; (8005a68 <UART_SetConfig+0xaf0>)
 80059fa:	f04f 0400 	mov.w	r4, #0
 80059fe:	e03d      	b.n	8005a7c <UART_SetConfig+0xb04>
 8005a00:	4b1a      	ldr	r3, [pc, #104]	; (8005a6c <UART_SetConfig+0xaf4>)
 8005a02:	f04f 0400 	mov.w	r4, #0
 8005a06:	e039      	b.n	8005a7c <UART_SetConfig+0xb04>
 8005a08:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005a0c:	f04f 0400 	mov.w	r4, #0
 8005a10:	e034      	b.n	8005a7c <UART_SetConfig+0xb04>
 8005a12:	4b17      	ldr	r3, [pc, #92]	; (8005a70 <UART_SetConfig+0xaf8>)
 8005a14:	f04f 0400 	mov.w	r4, #0
 8005a18:	e030      	b.n	8005a7c <UART_SetConfig+0xb04>
 8005a1a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005a1e:	f04f 0400 	mov.w	r4, #0
 8005a22:	e02b      	b.n	8005a7c <UART_SetConfig+0xb04>
 8005a24:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005a28:	f04f 0400 	mov.w	r4, #0
 8005a2c:	e026      	b.n	8005a7c <UART_SetConfig+0xb04>
 8005a2e:	bf00      	nop
 8005a30:	14585500 	.word	0x14585500
 8005a34:	00000000 	.word	0x00000000
 8005a38:	28b0aa00 	.word	0x28b0aa00
 8005a3c:	00000000 	.word	0x00000000
 8005a40:	00f42400 	.word	0x00f42400
 8005a44:	f4240000 	.word	0xf4240000
 8005a48:	01e84800 	.word	0x01e84800
 8005a4c:	03d09000 	.word	0x03d09000
 8005a50:	07a12000 	.word	0x07a12000
 8005a54:	0f424000 	.word	0x0f424000
 8005a58:	186a0000 	.word	0x186a0000
 8005a5c:	1e848000 	.word	0x1e848000
 8005a60:	3d090000 	.word	0x3d090000
 8005a64:	7a120000 	.word	0x7a120000
 8005a68:	000aaa00 	.word	0x000aaa00
 8005a6c:	000ccc00 	.word	0x000ccc00
 8005a70:	00155500 	.word	0x00155500
 8005a74:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005a78:	f04f 0400 	mov.w	r4, #0
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	6852      	ldr	r2, [r2, #4]
 8005a80:	0852      	lsrs	r2, r2, #1
 8005a82:	4611      	mov	r1, r2
 8005a84:	f04f 0200 	mov.w	r2, #0
 8005a88:	eb13 0b01 	adds.w	fp, r3, r1
 8005a8c:	eb44 0c02 	adc.w	ip, r4, r2
 8005a90:	4658      	mov	r0, fp
 8005a92:	4661      	mov	r1, ip
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f04f 0400 	mov.w	r4, #0
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	4623      	mov	r3, r4
 8005aa0:	f7fa fbba 	bl	8000218 <__aeabi_uldivmod>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	460c      	mov	r4, r1
 8005aa8:	61fb      	str	r3, [r7, #28]
            break;
 8005aaa:	e002      	b.n	8005ab2 <UART_SetConfig+0xb3a>
          default:
            ret = HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	76fb      	strb	r3, [r7, #27]
            break;
 8005ab0:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ab8:	d309      	bcc.n	8005ace <UART_SetConfig+0xb56>
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ac0:	d205      	bcs.n	8005ace <UART_SetConfig+0xb56>
        {
          huart->Instance->BRR = usartdiv;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	69fa      	ldr	r2, [r7, #28]
 8005ac8:	60da      	str	r2, [r3, #12]
 8005aca:	f000 bc18 	b.w	80062fe <UART_SetConfig+0x1386>
        }
        else
        {
          ret = HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	76fb      	strb	r3, [r7, #27]
 8005ad2:	f000 bc14 	b.w	80062fe <UART_SetConfig+0x1386>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ade:	f040 8204 	bne.w	8005eea <UART_SetConfig+0xf72>
  {
    switch (clocksource)
 8005ae2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ae6:	2b08      	cmp	r3, #8
 8005ae8:	f200 81df 	bhi.w	8005eaa <UART_SetConfig+0xf32>
 8005aec:	a201      	add	r2, pc, #4	; (adr r2, 8005af4 <UART_SetConfig+0xb7c>)
 8005aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af2:	bf00      	nop
 8005af4:	08005b19 	.word	0x08005b19
 8005af8:	08005bd1 	.word	0x08005bd1
 8005afc:	08005c89 	.word	0x08005c89
 8005b00:	08005eab 	.word	0x08005eab
 8005b04:	08005d31 	.word	0x08005d31
 8005b08:	08005eab 	.word	0x08005eab
 8005b0c:	08005eab 	.word	0x08005eab
 8005b10:	08005eab 	.word	0x08005eab
 8005b14:	08005de9 	.word	0x08005de9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b18:	f7fd fb3a 	bl	8003190 <HAL_RCC_GetPCLK1Freq>
 8005b1c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d044      	beq.n	8005bb0 <UART_SetConfig+0xc38>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d03e      	beq.n	8005bac <UART_SetConfig+0xc34>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d038      	beq.n	8005ba8 <UART_SetConfig+0xc30>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3a:	2b03      	cmp	r3, #3
 8005b3c:	d032      	beq.n	8005ba4 <UART_SetConfig+0xc2c>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b42:	2b04      	cmp	r3, #4
 8005b44:	d02c      	beq.n	8005ba0 <UART_SetConfig+0xc28>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4a:	2b05      	cmp	r3, #5
 8005b4c:	d026      	beq.n	8005b9c <UART_SetConfig+0xc24>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b52:	2b06      	cmp	r3, #6
 8005b54:	d020      	beq.n	8005b98 <UART_SetConfig+0xc20>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5a:	2b07      	cmp	r3, #7
 8005b5c:	d01a      	beq.n	8005b94 <UART_SetConfig+0xc1c>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b62:	2b08      	cmp	r3, #8
 8005b64:	d014      	beq.n	8005b90 <UART_SetConfig+0xc18>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6a:	2b09      	cmp	r3, #9
 8005b6c:	d00e      	beq.n	8005b8c <UART_SetConfig+0xc14>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b72:	2b0a      	cmp	r3, #10
 8005b74:	d008      	beq.n	8005b88 <UART_SetConfig+0xc10>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7a:	2b0b      	cmp	r3, #11
 8005b7c:	d102      	bne.n	8005b84 <UART_SetConfig+0xc0c>
 8005b7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b82:	e016      	b.n	8005bb2 <UART_SetConfig+0xc3a>
 8005b84:	2301      	movs	r3, #1
 8005b86:	e014      	b.n	8005bb2 <UART_SetConfig+0xc3a>
 8005b88:	2380      	movs	r3, #128	; 0x80
 8005b8a:	e012      	b.n	8005bb2 <UART_SetConfig+0xc3a>
 8005b8c:	2340      	movs	r3, #64	; 0x40
 8005b8e:	e010      	b.n	8005bb2 <UART_SetConfig+0xc3a>
 8005b90:	2320      	movs	r3, #32
 8005b92:	e00e      	b.n	8005bb2 <UART_SetConfig+0xc3a>
 8005b94:	2310      	movs	r3, #16
 8005b96:	e00c      	b.n	8005bb2 <UART_SetConfig+0xc3a>
 8005b98:	230c      	movs	r3, #12
 8005b9a:	e00a      	b.n	8005bb2 <UART_SetConfig+0xc3a>
 8005b9c:	230a      	movs	r3, #10
 8005b9e:	e008      	b.n	8005bb2 <UART_SetConfig+0xc3a>
 8005ba0:	2308      	movs	r3, #8
 8005ba2:	e006      	b.n	8005bb2 <UART_SetConfig+0xc3a>
 8005ba4:	2306      	movs	r3, #6
 8005ba6:	e004      	b.n	8005bb2 <UART_SetConfig+0xc3a>
 8005ba8:	2304      	movs	r3, #4
 8005baa:	e002      	b.n	8005bb2 <UART_SetConfig+0xc3a>
 8005bac:	2302      	movs	r3, #2
 8005bae:	e000      	b.n	8005bb2 <UART_SetConfig+0xc3a>
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb8:	005a      	lsls	r2, r3, #1
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	085b      	lsrs	r3, r3, #1
 8005bc0:	441a      	add	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	61fb      	str	r3, [r7, #28]
        break;
 8005bce:	e16f      	b.n	8005eb0 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bd0:	f7fd faf4 	bl	80031bc <HAL_RCC_GetPCLK2Freq>
 8005bd4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d044      	beq.n	8005c68 <UART_SetConfig+0xcf0>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d03e      	beq.n	8005c64 <UART_SetConfig+0xcec>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d038      	beq.n	8005c60 <UART_SetConfig+0xce8>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf2:	2b03      	cmp	r3, #3
 8005bf4:	d032      	beq.n	8005c5c <UART_SetConfig+0xce4>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	2b04      	cmp	r3, #4
 8005bfc:	d02c      	beq.n	8005c58 <UART_SetConfig+0xce0>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c02:	2b05      	cmp	r3, #5
 8005c04:	d026      	beq.n	8005c54 <UART_SetConfig+0xcdc>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0a:	2b06      	cmp	r3, #6
 8005c0c:	d020      	beq.n	8005c50 <UART_SetConfig+0xcd8>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c12:	2b07      	cmp	r3, #7
 8005c14:	d01a      	beq.n	8005c4c <UART_SetConfig+0xcd4>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1a:	2b08      	cmp	r3, #8
 8005c1c:	d014      	beq.n	8005c48 <UART_SetConfig+0xcd0>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c22:	2b09      	cmp	r3, #9
 8005c24:	d00e      	beq.n	8005c44 <UART_SetConfig+0xccc>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	2b0a      	cmp	r3, #10
 8005c2c:	d008      	beq.n	8005c40 <UART_SetConfig+0xcc8>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c32:	2b0b      	cmp	r3, #11
 8005c34:	d102      	bne.n	8005c3c <UART_SetConfig+0xcc4>
 8005c36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c3a:	e016      	b.n	8005c6a <UART_SetConfig+0xcf2>
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e014      	b.n	8005c6a <UART_SetConfig+0xcf2>
 8005c40:	2380      	movs	r3, #128	; 0x80
 8005c42:	e012      	b.n	8005c6a <UART_SetConfig+0xcf2>
 8005c44:	2340      	movs	r3, #64	; 0x40
 8005c46:	e010      	b.n	8005c6a <UART_SetConfig+0xcf2>
 8005c48:	2320      	movs	r3, #32
 8005c4a:	e00e      	b.n	8005c6a <UART_SetConfig+0xcf2>
 8005c4c:	2310      	movs	r3, #16
 8005c4e:	e00c      	b.n	8005c6a <UART_SetConfig+0xcf2>
 8005c50:	230c      	movs	r3, #12
 8005c52:	e00a      	b.n	8005c6a <UART_SetConfig+0xcf2>
 8005c54:	230a      	movs	r3, #10
 8005c56:	e008      	b.n	8005c6a <UART_SetConfig+0xcf2>
 8005c58:	2308      	movs	r3, #8
 8005c5a:	e006      	b.n	8005c6a <UART_SetConfig+0xcf2>
 8005c5c:	2306      	movs	r3, #6
 8005c5e:	e004      	b.n	8005c6a <UART_SetConfig+0xcf2>
 8005c60:	2304      	movs	r3, #4
 8005c62:	e002      	b.n	8005c6a <UART_SetConfig+0xcf2>
 8005c64:	2302      	movs	r3, #2
 8005c66:	e000      	b.n	8005c6a <UART_SetConfig+0xcf2>
 8005c68:	2301      	movs	r3, #1
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c70:	005a      	lsls	r2, r3, #1
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	085b      	lsrs	r3, r3, #1
 8005c78:	441a      	add	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	61fb      	str	r3, [r7, #28]
        break;
 8005c86:	e113      	b.n	8005eb0 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d043      	beq.n	8005d18 <UART_SetConfig+0xda0>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d03d      	beq.n	8005d14 <UART_SetConfig+0xd9c>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d037      	beq.n	8005d10 <UART_SetConfig+0xd98>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca4:	2b03      	cmp	r3, #3
 8005ca6:	d031      	beq.n	8005d0c <UART_SetConfig+0xd94>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cac:	2b04      	cmp	r3, #4
 8005cae:	d02b      	beq.n	8005d08 <UART_SetConfig+0xd90>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb4:	2b05      	cmp	r3, #5
 8005cb6:	d025      	beq.n	8005d04 <UART_SetConfig+0xd8c>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbc:	2b06      	cmp	r3, #6
 8005cbe:	d01f      	beq.n	8005d00 <UART_SetConfig+0xd88>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc4:	2b07      	cmp	r3, #7
 8005cc6:	d019      	beq.n	8005cfc <UART_SetConfig+0xd84>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ccc:	2b08      	cmp	r3, #8
 8005cce:	d013      	beq.n	8005cf8 <UART_SetConfig+0xd80>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd4:	2b09      	cmp	r3, #9
 8005cd6:	d00d      	beq.n	8005cf4 <UART_SetConfig+0xd7c>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cdc:	2b0a      	cmp	r3, #10
 8005cde:	d007      	beq.n	8005cf0 <UART_SetConfig+0xd78>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce4:	2b0b      	cmp	r3, #11
 8005ce6:	d101      	bne.n	8005cec <UART_SetConfig+0xd74>
 8005ce8:	4b8d      	ldr	r3, [pc, #564]	; (8005f20 <UART_SetConfig+0xfa8>)
 8005cea:	e016      	b.n	8005d1a <UART_SetConfig+0xda2>
 8005cec:	4b8d      	ldr	r3, [pc, #564]	; (8005f24 <UART_SetConfig+0xfac>)
 8005cee:	e014      	b.n	8005d1a <UART_SetConfig+0xda2>
 8005cf0:	4b8d      	ldr	r3, [pc, #564]	; (8005f28 <UART_SetConfig+0xfb0>)
 8005cf2:	e012      	b.n	8005d1a <UART_SetConfig+0xda2>
 8005cf4:	4b8d      	ldr	r3, [pc, #564]	; (8005f2c <UART_SetConfig+0xfb4>)
 8005cf6:	e010      	b.n	8005d1a <UART_SetConfig+0xda2>
 8005cf8:	4b8d      	ldr	r3, [pc, #564]	; (8005f30 <UART_SetConfig+0xfb8>)
 8005cfa:	e00e      	b.n	8005d1a <UART_SetConfig+0xda2>
 8005cfc:	4b8d      	ldr	r3, [pc, #564]	; (8005f34 <UART_SetConfig+0xfbc>)
 8005cfe:	e00c      	b.n	8005d1a <UART_SetConfig+0xda2>
 8005d00:	4b8d      	ldr	r3, [pc, #564]	; (8005f38 <UART_SetConfig+0xfc0>)
 8005d02:	e00a      	b.n	8005d1a <UART_SetConfig+0xda2>
 8005d04:	4b8d      	ldr	r3, [pc, #564]	; (8005f3c <UART_SetConfig+0xfc4>)
 8005d06:	e008      	b.n	8005d1a <UART_SetConfig+0xda2>
 8005d08:	4b8d      	ldr	r3, [pc, #564]	; (8005f40 <UART_SetConfig+0xfc8>)
 8005d0a:	e006      	b.n	8005d1a <UART_SetConfig+0xda2>
 8005d0c:	4b8d      	ldr	r3, [pc, #564]	; (8005f44 <UART_SetConfig+0xfcc>)
 8005d0e:	e004      	b.n	8005d1a <UART_SetConfig+0xda2>
 8005d10:	4b8d      	ldr	r3, [pc, #564]	; (8005f48 <UART_SetConfig+0xfd0>)
 8005d12:	e002      	b.n	8005d1a <UART_SetConfig+0xda2>
 8005d14:	4b8d      	ldr	r3, [pc, #564]	; (8005f4c <UART_SetConfig+0xfd4>)
 8005d16:	e000      	b.n	8005d1a <UART_SetConfig+0xda2>
 8005d18:	4b82      	ldr	r3, [pc, #520]	; (8005f24 <UART_SetConfig+0xfac>)
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	6852      	ldr	r2, [r2, #4]
 8005d1e:	0852      	lsrs	r2, r2, #1
 8005d20:	441a      	add	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	61fb      	str	r3, [r7, #28]
        break;
 8005d2e:	e0bf      	b.n	8005eb0 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d30:	f7fd f9c0 	bl	80030b4 <HAL_RCC_GetSysClockFreq>
 8005d34:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d044      	beq.n	8005dc8 <UART_SetConfig+0xe50>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d03e      	beq.n	8005dc4 <UART_SetConfig+0xe4c>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d038      	beq.n	8005dc0 <UART_SetConfig+0xe48>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d52:	2b03      	cmp	r3, #3
 8005d54:	d032      	beq.n	8005dbc <UART_SetConfig+0xe44>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	2b04      	cmp	r3, #4
 8005d5c:	d02c      	beq.n	8005db8 <UART_SetConfig+0xe40>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d62:	2b05      	cmp	r3, #5
 8005d64:	d026      	beq.n	8005db4 <UART_SetConfig+0xe3c>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6a:	2b06      	cmp	r3, #6
 8005d6c:	d020      	beq.n	8005db0 <UART_SetConfig+0xe38>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d72:	2b07      	cmp	r3, #7
 8005d74:	d01a      	beq.n	8005dac <UART_SetConfig+0xe34>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7a:	2b08      	cmp	r3, #8
 8005d7c:	d014      	beq.n	8005da8 <UART_SetConfig+0xe30>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d82:	2b09      	cmp	r3, #9
 8005d84:	d00e      	beq.n	8005da4 <UART_SetConfig+0xe2c>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8a:	2b0a      	cmp	r3, #10
 8005d8c:	d008      	beq.n	8005da0 <UART_SetConfig+0xe28>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d92:	2b0b      	cmp	r3, #11
 8005d94:	d102      	bne.n	8005d9c <UART_SetConfig+0xe24>
 8005d96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d9a:	e016      	b.n	8005dca <UART_SetConfig+0xe52>
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e014      	b.n	8005dca <UART_SetConfig+0xe52>
 8005da0:	2380      	movs	r3, #128	; 0x80
 8005da2:	e012      	b.n	8005dca <UART_SetConfig+0xe52>
 8005da4:	2340      	movs	r3, #64	; 0x40
 8005da6:	e010      	b.n	8005dca <UART_SetConfig+0xe52>
 8005da8:	2320      	movs	r3, #32
 8005daa:	e00e      	b.n	8005dca <UART_SetConfig+0xe52>
 8005dac:	2310      	movs	r3, #16
 8005dae:	e00c      	b.n	8005dca <UART_SetConfig+0xe52>
 8005db0:	230c      	movs	r3, #12
 8005db2:	e00a      	b.n	8005dca <UART_SetConfig+0xe52>
 8005db4:	230a      	movs	r3, #10
 8005db6:	e008      	b.n	8005dca <UART_SetConfig+0xe52>
 8005db8:	2308      	movs	r3, #8
 8005dba:	e006      	b.n	8005dca <UART_SetConfig+0xe52>
 8005dbc:	2306      	movs	r3, #6
 8005dbe:	e004      	b.n	8005dca <UART_SetConfig+0xe52>
 8005dc0:	2304      	movs	r3, #4
 8005dc2:	e002      	b.n	8005dca <UART_SetConfig+0xe52>
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	e000      	b.n	8005dca <UART_SetConfig+0xe52>
 8005dc8:	2301      	movs	r3, #1
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd0:	005a      	lsls	r2, r3, #1
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	085b      	lsrs	r3, r3, #1
 8005dd8:	441a      	add	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	61fb      	str	r3, [r7, #28]
        break;
 8005de6:	e063      	b.n	8005eb0 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d04f      	beq.n	8005e90 <UART_SetConfig+0xf18>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d048      	beq.n	8005e8a <UART_SetConfig+0xf12>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d041      	beq.n	8005e84 <UART_SetConfig+0xf0c>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e04:	2b03      	cmp	r3, #3
 8005e06:	d03a      	beq.n	8005e7e <UART_SetConfig+0xf06>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0c:	2b04      	cmp	r3, #4
 8005e0e:	d033      	beq.n	8005e78 <UART_SetConfig+0xf00>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e14:	2b05      	cmp	r3, #5
 8005e16:	d02c      	beq.n	8005e72 <UART_SetConfig+0xefa>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1c:	2b06      	cmp	r3, #6
 8005e1e:	d025      	beq.n	8005e6c <UART_SetConfig+0xef4>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e24:	2b07      	cmp	r3, #7
 8005e26:	d01e      	beq.n	8005e66 <UART_SetConfig+0xeee>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	2b08      	cmp	r3, #8
 8005e2e:	d017      	beq.n	8005e60 <UART_SetConfig+0xee8>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e34:	2b09      	cmp	r3, #9
 8005e36:	d010      	beq.n	8005e5a <UART_SetConfig+0xee2>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3c:	2b0a      	cmp	r3, #10
 8005e3e:	d009      	beq.n	8005e54 <UART_SetConfig+0xedc>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e44:	2b0b      	cmp	r3, #11
 8005e46:	d102      	bne.n	8005e4e <UART_SetConfig+0xed6>
 8005e48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e4c:	e022      	b.n	8005e94 <UART_SetConfig+0xf1c>
 8005e4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e52:	e01f      	b.n	8005e94 <UART_SetConfig+0xf1c>
 8005e54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e58:	e01c      	b.n	8005e94 <UART_SetConfig+0xf1c>
 8005e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e5e:	e019      	b.n	8005e94 <UART_SetConfig+0xf1c>
 8005e60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e64:	e016      	b.n	8005e94 <UART_SetConfig+0xf1c>
 8005e66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e6a:	e013      	b.n	8005e94 <UART_SetConfig+0xf1c>
 8005e6c:	f241 5354 	movw	r3, #5460	; 0x1554
 8005e70:	e010      	b.n	8005e94 <UART_SetConfig+0xf1c>
 8005e72:	f641 1398 	movw	r3, #6552	; 0x1998
 8005e76:	e00d      	b.n	8005e94 <UART_SetConfig+0xf1c>
 8005e78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e7c:	e00a      	b.n	8005e94 <UART_SetConfig+0xf1c>
 8005e7e:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8005e82:	e007      	b.n	8005e94 <UART_SetConfig+0xf1c>
 8005e84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e88:	e004      	b.n	8005e94 <UART_SetConfig+0xf1c>
 8005e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e8e:	e001      	b.n	8005e94 <UART_SetConfig+0xf1c>
 8005e90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	6852      	ldr	r2, [r2, #4]
 8005e98:	0852      	lsrs	r2, r2, #1
 8005e9a:	441a      	add	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	61fb      	str	r3, [r7, #28]
        break;
 8005ea8:	e002      	b.n	8005eb0 <UART_SetConfig+0xf38>
      default:
        ret = HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	76fb      	strb	r3, [r7, #27]
        break;
 8005eae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	2b0f      	cmp	r3, #15
 8005eb4:	d916      	bls.n	8005ee4 <UART_SetConfig+0xf6c>
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ebc:	d212      	bcs.n	8005ee4 <UART_SetConfig+0xf6c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	f023 030f 	bic.w	r3, r3, #15
 8005ec6:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	085b      	lsrs	r3, r3, #1
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	f003 0307 	and.w	r3, r3, #7
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	89fb      	ldrh	r3, [r7, #14]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	89fa      	ldrh	r2, [r7, #14]
 8005ee0:	60da      	str	r2, [r3, #12]
 8005ee2:	e20c      	b.n	80062fe <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	76fb      	strb	r3, [r7, #27]
 8005ee8:	e209      	b.n	80062fe <UART_SetConfig+0x1386>
    }
  }
  else
  {
    switch (clocksource)
 8005eea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005eee:	2b08      	cmp	r3, #8
 8005ef0:	f200 81f4 	bhi.w	80062dc <UART_SetConfig+0x1364>
 8005ef4:	a201      	add	r2, pc, #4	; (adr r2, 8005efc <UART_SetConfig+0xf84>)
 8005ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005efa:	bf00      	nop
 8005efc:	08005f51 	.word	0x08005f51
 8005f00:	08006007 	.word	0x08006007
 8005f04:	080060bd 	.word	0x080060bd
 8005f08:	080062dd 	.word	0x080062dd
 8005f0c:	08006167 	.word	0x08006167
 8005f10:	080062dd 	.word	0x080062dd
 8005f14:	080062dd 	.word	0x080062dd
 8005f18:	080062dd 	.word	0x080062dd
 8005f1c:	0800621d 	.word	0x0800621d
 8005f20:	0001e848 	.word	0x0001e848
 8005f24:	01e84800 	.word	0x01e84800
 8005f28:	0003d090 	.word	0x0003d090
 8005f2c:	0007a120 	.word	0x0007a120
 8005f30:	000f4240 	.word	0x000f4240
 8005f34:	001e8480 	.word	0x001e8480
 8005f38:	0028b0aa 	.word	0x0028b0aa
 8005f3c:	0030d400 	.word	0x0030d400
 8005f40:	003d0900 	.word	0x003d0900
 8005f44:	00516154 	.word	0x00516154
 8005f48:	007a1200 	.word	0x007a1200
 8005f4c:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f50:	f7fd f91e 	bl	8003190 <HAL_RCC_GetPCLK1Freq>
 8005f54:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d044      	beq.n	8005fe8 <UART_SetConfig+0x1070>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d03e      	beq.n	8005fe4 <UART_SetConfig+0x106c>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d038      	beq.n	8005fe0 <UART_SetConfig+0x1068>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f72:	2b03      	cmp	r3, #3
 8005f74:	d032      	beq.n	8005fdc <UART_SetConfig+0x1064>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7a:	2b04      	cmp	r3, #4
 8005f7c:	d02c      	beq.n	8005fd8 <UART_SetConfig+0x1060>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	2b05      	cmp	r3, #5
 8005f84:	d026      	beq.n	8005fd4 <UART_SetConfig+0x105c>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8a:	2b06      	cmp	r3, #6
 8005f8c:	d020      	beq.n	8005fd0 <UART_SetConfig+0x1058>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f92:	2b07      	cmp	r3, #7
 8005f94:	d01a      	beq.n	8005fcc <UART_SetConfig+0x1054>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9a:	2b08      	cmp	r3, #8
 8005f9c:	d014      	beq.n	8005fc8 <UART_SetConfig+0x1050>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa2:	2b09      	cmp	r3, #9
 8005fa4:	d00e      	beq.n	8005fc4 <UART_SetConfig+0x104c>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005faa:	2b0a      	cmp	r3, #10
 8005fac:	d008      	beq.n	8005fc0 <UART_SetConfig+0x1048>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb2:	2b0b      	cmp	r3, #11
 8005fb4:	d102      	bne.n	8005fbc <UART_SetConfig+0x1044>
 8005fb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fba:	e016      	b.n	8005fea <UART_SetConfig+0x1072>
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e014      	b.n	8005fea <UART_SetConfig+0x1072>
 8005fc0:	2380      	movs	r3, #128	; 0x80
 8005fc2:	e012      	b.n	8005fea <UART_SetConfig+0x1072>
 8005fc4:	2340      	movs	r3, #64	; 0x40
 8005fc6:	e010      	b.n	8005fea <UART_SetConfig+0x1072>
 8005fc8:	2320      	movs	r3, #32
 8005fca:	e00e      	b.n	8005fea <UART_SetConfig+0x1072>
 8005fcc:	2310      	movs	r3, #16
 8005fce:	e00c      	b.n	8005fea <UART_SetConfig+0x1072>
 8005fd0:	230c      	movs	r3, #12
 8005fd2:	e00a      	b.n	8005fea <UART_SetConfig+0x1072>
 8005fd4:	230a      	movs	r3, #10
 8005fd6:	e008      	b.n	8005fea <UART_SetConfig+0x1072>
 8005fd8:	2308      	movs	r3, #8
 8005fda:	e006      	b.n	8005fea <UART_SetConfig+0x1072>
 8005fdc:	2306      	movs	r3, #6
 8005fde:	e004      	b.n	8005fea <UART_SetConfig+0x1072>
 8005fe0:	2304      	movs	r3, #4
 8005fe2:	e002      	b.n	8005fea <UART_SetConfig+0x1072>
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	e000      	b.n	8005fea <UART_SetConfig+0x1072>
 8005fe8:	2301      	movs	r3, #1
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	085b      	lsrs	r3, r3, #1
 8005ff6:	441a      	add	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006000:	b29b      	uxth	r3, r3
 8006002:	61fb      	str	r3, [r7, #28]
        break;
 8006004:	e16d      	b.n	80062e2 <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006006:	f7fd f8d9 	bl	80031bc <HAL_RCC_GetPCLK2Freq>
 800600a:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006010:	2b00      	cmp	r3, #0
 8006012:	d044      	beq.n	800609e <UART_SetConfig+0x1126>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006018:	2b01      	cmp	r3, #1
 800601a:	d03e      	beq.n	800609a <UART_SetConfig+0x1122>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006020:	2b02      	cmp	r3, #2
 8006022:	d038      	beq.n	8006096 <UART_SetConfig+0x111e>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006028:	2b03      	cmp	r3, #3
 800602a:	d032      	beq.n	8006092 <UART_SetConfig+0x111a>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006030:	2b04      	cmp	r3, #4
 8006032:	d02c      	beq.n	800608e <UART_SetConfig+0x1116>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006038:	2b05      	cmp	r3, #5
 800603a:	d026      	beq.n	800608a <UART_SetConfig+0x1112>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006040:	2b06      	cmp	r3, #6
 8006042:	d020      	beq.n	8006086 <UART_SetConfig+0x110e>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006048:	2b07      	cmp	r3, #7
 800604a:	d01a      	beq.n	8006082 <UART_SetConfig+0x110a>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006050:	2b08      	cmp	r3, #8
 8006052:	d014      	beq.n	800607e <UART_SetConfig+0x1106>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006058:	2b09      	cmp	r3, #9
 800605a:	d00e      	beq.n	800607a <UART_SetConfig+0x1102>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006060:	2b0a      	cmp	r3, #10
 8006062:	d008      	beq.n	8006076 <UART_SetConfig+0x10fe>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006068:	2b0b      	cmp	r3, #11
 800606a:	d102      	bne.n	8006072 <UART_SetConfig+0x10fa>
 800606c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006070:	e016      	b.n	80060a0 <UART_SetConfig+0x1128>
 8006072:	2301      	movs	r3, #1
 8006074:	e014      	b.n	80060a0 <UART_SetConfig+0x1128>
 8006076:	2380      	movs	r3, #128	; 0x80
 8006078:	e012      	b.n	80060a0 <UART_SetConfig+0x1128>
 800607a:	2340      	movs	r3, #64	; 0x40
 800607c:	e010      	b.n	80060a0 <UART_SetConfig+0x1128>
 800607e:	2320      	movs	r3, #32
 8006080:	e00e      	b.n	80060a0 <UART_SetConfig+0x1128>
 8006082:	2310      	movs	r3, #16
 8006084:	e00c      	b.n	80060a0 <UART_SetConfig+0x1128>
 8006086:	230c      	movs	r3, #12
 8006088:	e00a      	b.n	80060a0 <UART_SetConfig+0x1128>
 800608a:	230a      	movs	r3, #10
 800608c:	e008      	b.n	80060a0 <UART_SetConfig+0x1128>
 800608e:	2308      	movs	r3, #8
 8006090:	e006      	b.n	80060a0 <UART_SetConfig+0x1128>
 8006092:	2306      	movs	r3, #6
 8006094:	e004      	b.n	80060a0 <UART_SetConfig+0x1128>
 8006096:	2304      	movs	r3, #4
 8006098:	e002      	b.n	80060a0 <UART_SetConfig+0x1128>
 800609a:	2302      	movs	r3, #2
 800609c:	e000      	b.n	80060a0 <UART_SetConfig+0x1128>
 800609e:	2301      	movs	r3, #1
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	085b      	lsrs	r3, r3, #1
 80060ac:	441a      	add	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	61fb      	str	r3, [r7, #28]
        break;
 80060ba:	e112      	b.n	80062e2 <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d044      	beq.n	800614e <UART_SetConfig+0x11d6>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d03e      	beq.n	800614a <UART_SetConfig+0x11d2>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d038      	beq.n	8006146 <UART_SetConfig+0x11ce>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d8:	2b03      	cmp	r3, #3
 80060da:	d032      	beq.n	8006142 <UART_SetConfig+0x11ca>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e0:	2b04      	cmp	r3, #4
 80060e2:	d02c      	beq.n	800613e <UART_SetConfig+0x11c6>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e8:	2b05      	cmp	r3, #5
 80060ea:	d026      	beq.n	800613a <UART_SetConfig+0x11c2>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f0:	2b06      	cmp	r3, #6
 80060f2:	d020      	beq.n	8006136 <UART_SetConfig+0x11be>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f8:	2b07      	cmp	r3, #7
 80060fa:	d01a      	beq.n	8006132 <UART_SetConfig+0x11ba>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006100:	2b08      	cmp	r3, #8
 8006102:	d014      	beq.n	800612e <UART_SetConfig+0x11b6>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006108:	2b09      	cmp	r3, #9
 800610a:	d00e      	beq.n	800612a <UART_SetConfig+0x11b2>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006110:	2b0a      	cmp	r3, #10
 8006112:	d008      	beq.n	8006126 <UART_SetConfig+0x11ae>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006118:	2b0b      	cmp	r3, #11
 800611a:	d102      	bne.n	8006122 <UART_SetConfig+0x11aa>
 800611c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006120:	e016      	b.n	8006150 <UART_SetConfig+0x11d8>
 8006122:	4b81      	ldr	r3, [pc, #516]	; (8006328 <UART_SetConfig+0x13b0>)
 8006124:	e014      	b.n	8006150 <UART_SetConfig+0x11d8>
 8006126:	4b81      	ldr	r3, [pc, #516]	; (800632c <UART_SetConfig+0x13b4>)
 8006128:	e012      	b.n	8006150 <UART_SetConfig+0x11d8>
 800612a:	4b81      	ldr	r3, [pc, #516]	; (8006330 <UART_SetConfig+0x13b8>)
 800612c:	e010      	b.n	8006150 <UART_SetConfig+0x11d8>
 800612e:	4b81      	ldr	r3, [pc, #516]	; (8006334 <UART_SetConfig+0x13bc>)
 8006130:	e00e      	b.n	8006150 <UART_SetConfig+0x11d8>
 8006132:	4b81      	ldr	r3, [pc, #516]	; (8006338 <UART_SetConfig+0x13c0>)
 8006134:	e00c      	b.n	8006150 <UART_SetConfig+0x11d8>
 8006136:	4b81      	ldr	r3, [pc, #516]	; (800633c <UART_SetConfig+0x13c4>)
 8006138:	e00a      	b.n	8006150 <UART_SetConfig+0x11d8>
 800613a:	4b81      	ldr	r3, [pc, #516]	; (8006340 <UART_SetConfig+0x13c8>)
 800613c:	e008      	b.n	8006150 <UART_SetConfig+0x11d8>
 800613e:	4b81      	ldr	r3, [pc, #516]	; (8006344 <UART_SetConfig+0x13cc>)
 8006140:	e006      	b.n	8006150 <UART_SetConfig+0x11d8>
 8006142:	4b81      	ldr	r3, [pc, #516]	; (8006348 <UART_SetConfig+0x13d0>)
 8006144:	e004      	b.n	8006150 <UART_SetConfig+0x11d8>
 8006146:	4b81      	ldr	r3, [pc, #516]	; (800634c <UART_SetConfig+0x13d4>)
 8006148:	e002      	b.n	8006150 <UART_SetConfig+0x11d8>
 800614a:	4b81      	ldr	r3, [pc, #516]	; (8006350 <UART_SetConfig+0x13d8>)
 800614c:	e000      	b.n	8006150 <UART_SetConfig+0x11d8>
 800614e:	4b76      	ldr	r3, [pc, #472]	; (8006328 <UART_SetConfig+0x13b0>)
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	6852      	ldr	r2, [r2, #4]
 8006154:	0852      	lsrs	r2, r2, #1
 8006156:	441a      	add	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006160:	b29b      	uxth	r3, r3
 8006162:	61fb      	str	r3, [r7, #28]
        break;
 8006164:	e0bd      	b.n	80062e2 <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006166:	f7fc ffa5 	bl	80030b4 <HAL_RCC_GetSysClockFreq>
 800616a:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006170:	2b00      	cmp	r3, #0
 8006172:	d044      	beq.n	80061fe <UART_SetConfig+0x1286>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006178:	2b01      	cmp	r3, #1
 800617a:	d03e      	beq.n	80061fa <UART_SetConfig+0x1282>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006180:	2b02      	cmp	r3, #2
 8006182:	d038      	beq.n	80061f6 <UART_SetConfig+0x127e>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006188:	2b03      	cmp	r3, #3
 800618a:	d032      	beq.n	80061f2 <UART_SetConfig+0x127a>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006190:	2b04      	cmp	r3, #4
 8006192:	d02c      	beq.n	80061ee <UART_SetConfig+0x1276>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006198:	2b05      	cmp	r3, #5
 800619a:	d026      	beq.n	80061ea <UART_SetConfig+0x1272>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a0:	2b06      	cmp	r3, #6
 80061a2:	d020      	beq.n	80061e6 <UART_SetConfig+0x126e>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a8:	2b07      	cmp	r3, #7
 80061aa:	d01a      	beq.n	80061e2 <UART_SetConfig+0x126a>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b0:	2b08      	cmp	r3, #8
 80061b2:	d014      	beq.n	80061de <UART_SetConfig+0x1266>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b8:	2b09      	cmp	r3, #9
 80061ba:	d00e      	beq.n	80061da <UART_SetConfig+0x1262>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c0:	2b0a      	cmp	r3, #10
 80061c2:	d008      	beq.n	80061d6 <UART_SetConfig+0x125e>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c8:	2b0b      	cmp	r3, #11
 80061ca:	d102      	bne.n	80061d2 <UART_SetConfig+0x125a>
 80061cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061d0:	e016      	b.n	8006200 <UART_SetConfig+0x1288>
 80061d2:	2301      	movs	r3, #1
 80061d4:	e014      	b.n	8006200 <UART_SetConfig+0x1288>
 80061d6:	2380      	movs	r3, #128	; 0x80
 80061d8:	e012      	b.n	8006200 <UART_SetConfig+0x1288>
 80061da:	2340      	movs	r3, #64	; 0x40
 80061dc:	e010      	b.n	8006200 <UART_SetConfig+0x1288>
 80061de:	2320      	movs	r3, #32
 80061e0:	e00e      	b.n	8006200 <UART_SetConfig+0x1288>
 80061e2:	2310      	movs	r3, #16
 80061e4:	e00c      	b.n	8006200 <UART_SetConfig+0x1288>
 80061e6:	230c      	movs	r3, #12
 80061e8:	e00a      	b.n	8006200 <UART_SetConfig+0x1288>
 80061ea:	230a      	movs	r3, #10
 80061ec:	e008      	b.n	8006200 <UART_SetConfig+0x1288>
 80061ee:	2308      	movs	r3, #8
 80061f0:	e006      	b.n	8006200 <UART_SetConfig+0x1288>
 80061f2:	2306      	movs	r3, #6
 80061f4:	e004      	b.n	8006200 <UART_SetConfig+0x1288>
 80061f6:	2304      	movs	r3, #4
 80061f8:	e002      	b.n	8006200 <UART_SetConfig+0x1288>
 80061fa:	2302      	movs	r3, #2
 80061fc:	e000      	b.n	8006200 <UART_SetConfig+0x1288>
 80061fe:	2301      	movs	r3, #1
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	fbb2 f2f3 	udiv	r2, r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	085b      	lsrs	r3, r3, #1
 800620c:	441a      	add	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	fbb2 f3f3 	udiv	r3, r2, r3
 8006216:	b29b      	uxth	r3, r3
 8006218:	61fb      	str	r3, [r7, #28]
        break;
 800621a:	e062      	b.n	80062e2 <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006220:	2b00      	cmp	r3, #0
 8006222:	d04e      	beq.n	80062c2 <UART_SetConfig+0x134a>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006228:	2b01      	cmp	r3, #1
 800622a:	d047      	beq.n	80062bc <UART_SetConfig+0x1344>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006230:	2b02      	cmp	r3, #2
 8006232:	d040      	beq.n	80062b6 <UART_SetConfig+0x133e>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006238:	2b03      	cmp	r3, #3
 800623a:	d039      	beq.n	80062b0 <UART_SetConfig+0x1338>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006240:	2b04      	cmp	r3, #4
 8006242:	d032      	beq.n	80062aa <UART_SetConfig+0x1332>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006248:	2b05      	cmp	r3, #5
 800624a:	d02b      	beq.n	80062a4 <UART_SetConfig+0x132c>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006250:	2b06      	cmp	r3, #6
 8006252:	d024      	beq.n	800629e <UART_SetConfig+0x1326>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006258:	2b07      	cmp	r3, #7
 800625a:	d01d      	beq.n	8006298 <UART_SetConfig+0x1320>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006260:	2b08      	cmp	r3, #8
 8006262:	d016      	beq.n	8006292 <UART_SetConfig+0x131a>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006268:	2b09      	cmp	r3, #9
 800626a:	d00f      	beq.n	800628c <UART_SetConfig+0x1314>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006270:	2b0a      	cmp	r3, #10
 8006272:	d008      	beq.n	8006286 <UART_SetConfig+0x130e>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006278:	2b0b      	cmp	r3, #11
 800627a:	d101      	bne.n	8006280 <UART_SetConfig+0x1308>
 800627c:	2380      	movs	r3, #128	; 0x80
 800627e:	e022      	b.n	80062c6 <UART_SetConfig+0x134e>
 8006280:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006284:	e01f      	b.n	80062c6 <UART_SetConfig+0x134e>
 8006286:	f44f 7380 	mov.w	r3, #256	; 0x100
 800628a:	e01c      	b.n	80062c6 <UART_SetConfig+0x134e>
 800628c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006290:	e019      	b.n	80062c6 <UART_SetConfig+0x134e>
 8006292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006296:	e016      	b.n	80062c6 <UART_SetConfig+0x134e>
 8006298:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800629c:	e013      	b.n	80062c6 <UART_SetConfig+0x134e>
 800629e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80062a2:	e010      	b.n	80062c6 <UART_SetConfig+0x134e>
 80062a4:	f640 43cc 	movw	r3, #3276	; 0xccc
 80062a8:	e00d      	b.n	80062c6 <UART_SetConfig+0x134e>
 80062aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062ae:	e00a      	b.n	80062c6 <UART_SetConfig+0x134e>
 80062b0:	f241 5355 	movw	r3, #5461	; 0x1555
 80062b4:	e007      	b.n	80062c6 <UART_SetConfig+0x134e>
 80062b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80062ba:	e004      	b.n	80062c6 <UART_SetConfig+0x134e>
 80062bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80062c0:	e001      	b.n	80062c6 <UART_SetConfig+0x134e>
 80062c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	6852      	ldr	r2, [r2, #4]
 80062ca:	0852      	lsrs	r2, r2, #1
 80062cc:	441a      	add	r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	61fb      	str	r3, [r7, #28]
        break;
 80062da:	e002      	b.n	80062e2 <UART_SetConfig+0x136a>
      default:
        ret = HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	76fb      	strb	r3, [r7, #27]
        break;
 80062e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	2b0f      	cmp	r3, #15
 80062e6:	d908      	bls.n	80062fa <UART_SetConfig+0x1382>
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062ee:	d204      	bcs.n	80062fa <UART_SetConfig+0x1382>
    {
      huart->Instance->BRR = usartdiv;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	69fa      	ldr	r2, [r7, #28]
 80062f6:	60da      	str	r2, [r3, #12]
 80062f8:	e001      	b.n	80062fe <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2201      	movs	r2, #1
 8006302:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2201      	movs	r2, #1
 800630a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800631a:	7efb      	ldrb	r3, [r7, #27]
}
 800631c:	4618      	mov	r0, r3
 800631e:	3728      	adds	r7, #40	; 0x28
 8006320:	46bd      	mov	sp, r7
 8006322:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006326:	bf00      	nop
 8006328:	00f42400 	.word	0x00f42400
 800632c:	0001e848 	.word	0x0001e848
 8006330:	0003d090 	.word	0x0003d090
 8006334:	0007a120 	.word	0x0007a120
 8006338:	000f4240 	.word	0x000f4240
 800633c:	00145855 	.word	0x00145855
 8006340:	00186a00 	.word	0x00186a00
 8006344:	001e8480 	.word	0x001e8480
 8006348:	0028b0aa 	.word	0x0028b0aa
 800634c:	003d0900 	.word	0x003d0900
 8006350:	007a1200 	.word	0x007a1200

08006354 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006360:	f003 0301 	and.w	r3, r3, #1
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00a      	beq.n	800637e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006382:	f003 0302 	and.w	r3, r3, #2
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00a      	beq.n	80063a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	430a      	orrs	r2, r1
 800639e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a4:	f003 0304 	and.w	r3, r3, #4
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00a      	beq.n	80063c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	430a      	orrs	r2, r1
 80063c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c6:	f003 0308 	and.w	r3, r3, #8
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00a      	beq.n	80063e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	430a      	orrs	r2, r1
 80063e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e8:	f003 0310 	and.w	r3, r3, #16
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00a      	beq.n	8006406 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	430a      	orrs	r2, r1
 8006404:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640a:	f003 0320 	and.w	r3, r3, #32
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00a      	beq.n	8006428 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	430a      	orrs	r2, r1
 8006426:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006430:	2b00      	cmp	r3, #0
 8006432:	d01a      	beq.n	800646a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	430a      	orrs	r2, r1
 8006448:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800644e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006452:	d10a      	bne.n	800646a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	430a      	orrs	r2, r1
 8006468:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00a      	beq.n	800648c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	430a      	orrs	r2, r1
 800648a:	605a      	str	r2, [r3, #4]
  }
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af02      	add	r7, sp, #8
 800649e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80064a8:	f7fb f800 	bl	80014ac <HAL_GetTick>
 80064ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0308 	and.w	r3, r3, #8
 80064b8:	2b08      	cmp	r3, #8
 80064ba:	d10e      	bne.n	80064da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 f82c 	bl	8006528 <UART_WaitOnFlagUntilTimeout>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e022      	b.n	8006520 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0304 	and.w	r3, r3, #4
 80064e4:	2b04      	cmp	r3, #4
 80064e6:	d10e      	bne.n	8006506 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064ec:	9300      	str	r3, [sp, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f816 	bl	8006528 <UART_WaitOnFlagUntilTimeout>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d001      	beq.n	8006506 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e00c      	b.n	8006520 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2220      	movs	r2, #32
 800650a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2220      	movs	r2, #32
 8006512:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3710      	adds	r7, #16
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	603b      	str	r3, [r7, #0]
 8006534:	4613      	mov	r3, r2
 8006536:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006538:	e02c      	b.n	8006594 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006540:	d028      	beq.n	8006594 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006542:	f7fa ffb3 	bl	80014ac <HAL_GetTick>
 8006546:	4602      	mov	r2, r0
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	69ba      	ldr	r2, [r7, #24]
 800654e:	429a      	cmp	r2, r3
 8006550:	d302      	bcc.n	8006558 <UART_WaitOnFlagUntilTimeout+0x30>
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d11d      	bne.n	8006594 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006566:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	689a      	ldr	r2, [r3, #8]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f022 0201 	bic.w	r2, r2, #1
 8006576:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2220      	movs	r2, #32
 800657c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2220      	movs	r2, #32
 8006584:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e00f      	b.n	80065b4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	69da      	ldr	r2, [r3, #28]
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	4013      	ands	r3, r2
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	bf0c      	ite	eq
 80065a4:	2301      	moveq	r3, #1
 80065a6:	2300      	movne	r3, #0
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	461a      	mov	r2, r3
 80065ac:	79fb      	ldrb	r3, [r7, #7]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d0c3      	beq.n	800653a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d101      	bne.n	80065d2 <HAL_UARTEx_DisableFifoMode+0x16>
 80065ce:	2302      	movs	r3, #2
 80065d0:	e027      	b.n	8006622 <HAL_UARTEx_DisableFifoMode+0x66>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2224      	movs	r2, #36	; 0x24
 80065de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f022 0201 	bic.w	r2, r2, #1
 80065f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006600:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2220      	movs	r2, #32
 8006614:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3714      	adds	r7, #20
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr

0800662e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b084      	sub	sp, #16
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
 8006636:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800663e:	2b01      	cmp	r3, #1
 8006640:	d101      	bne.n	8006646 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006642:	2302      	movs	r3, #2
 8006644:	e02d      	b.n	80066a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2224      	movs	r2, #36	; 0x24
 8006652:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f022 0201 	bic.w	r2, r2, #1
 800666c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	683a      	ldr	r2, [r7, #0]
 800667e:	430a      	orrs	r2, r1
 8006680:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f850 	bl	8006728 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2220      	movs	r2, #32
 8006694:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b084      	sub	sp, #16
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
 80066b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d101      	bne.n	80066c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80066be:	2302      	movs	r3, #2
 80066c0:	e02d      	b.n	800671e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2201      	movs	r2, #1
 80066c6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2224      	movs	r2, #36	; 0x24
 80066ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f022 0201 	bic.w	r2, r2, #1
 80066e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	430a      	orrs	r2, r1
 80066fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f812 	bl	8006728 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2220      	movs	r2, #32
 8006710:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3710      	adds	r7, #16
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
	...

08006728 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006728:	b480      	push	{r7}
 800672a:	b089      	sub	sp, #36	; 0x24
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006730:	4a2f      	ldr	r2, [pc, #188]	; (80067f0 <UARTEx_SetNbDataToProcess+0xc8>)
 8006732:	f107 0314 	add.w	r3, r7, #20
 8006736:	e892 0003 	ldmia.w	r2, {r0, r1}
 800673a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800673e:	4a2d      	ldr	r2, [pc, #180]	; (80067f4 <UARTEx_SetNbDataToProcess+0xcc>)
 8006740:	f107 030c 	add.w	r3, r7, #12
 8006744:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006748:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006750:	2b00      	cmp	r3, #0
 8006752:	d108      	bne.n	8006766 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006764:	e03d      	b.n	80067e2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006766:	2308      	movs	r3, #8
 8006768:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800676a:	2308      	movs	r3, #8
 800676c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	0e5b      	lsrs	r3, r3, #25
 8006776:	b2db      	uxtb	r3, r3
 8006778:	f003 0307 	and.w	r3, r3, #7
 800677c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	0f5b      	lsrs	r3, r3, #29
 8006786:	b2db      	uxtb	r3, r3
 8006788:	f003 0307 	and.w	r3, r3, #7
 800678c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800678e:	7fbb      	ldrb	r3, [r7, #30]
 8006790:	7f3a      	ldrb	r2, [r7, #28]
 8006792:	f107 0120 	add.w	r1, r7, #32
 8006796:	440a      	add	r2, r1
 8006798:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800679c:	fb02 f303 	mul.w	r3, r2, r3
 80067a0:	7f3a      	ldrb	r2, [r7, #28]
 80067a2:	f107 0120 	add.w	r1, r7, #32
 80067a6:	440a      	add	r2, r1
 80067a8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80067ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80067b8:	7ffb      	ldrb	r3, [r7, #31]
 80067ba:	7f7a      	ldrb	r2, [r7, #29]
 80067bc:	f107 0120 	add.w	r1, r7, #32
 80067c0:	440a      	add	r2, r1
 80067c2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80067c6:	fb02 f303 	mul.w	r3, r2, r3
 80067ca:	7f7a      	ldrb	r2, [r7, #29]
 80067cc:	f107 0120 	add.w	r1, r7, #32
 80067d0:	440a      	add	r2, r1
 80067d2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80067d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80067da:	b29a      	uxth	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80067e2:	bf00      	nop
 80067e4:	3724      	adds	r7, #36	; 0x24
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	08007f58 	.word	0x08007f58
 80067f4:	08007f60 	.word	0x08007f60

080067f8 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result 
  */
int32_t MX_FATFS_Init(void) 
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
 
if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 80067fc:	4907      	ldr	r1, [pc, #28]	; (800681c <MX_FATFS_Init+0x24>)
 80067fe:	4808      	ldr	r0, [pc, #32]	; (8006820 <MX_FATFS_Init+0x28>)
 8006800:	f001 fb62 	bl	8007ec8 <FATFS_LinkDriver>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d002      	beq.n	8006810 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 800680a:	f04f 33ff 	mov.w	r3, #4294967295
 800680e:	e003      	b.n	8006818 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8006810:	4b04      	ldr	r3, [pc, #16]	; (8006824 <MX_FATFS_Init+0x2c>)
 8006812:	2201      	movs	r2, #1
 8006814:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 8006816:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 8006818:	4618      	mov	r0, r3
 800681a:	bd80      	pop	{r7, pc}
 800681c:	2000063c 	.word	0x2000063c
 8006820:	20000010 	.word	0x20000010
 8006824:	20000048 	.word	0x20000048

08006828 <MY_SD_Init>:
  * @brief  Initializes the SD card device.
  * @param  Instance      SD Instance
  * @retval BSP status
  */
int32_t MY_SD_Init(uint32_t Instance)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8006830:	2300      	movs	r3, #0
 8006832:	60fb      	str	r3, [r7, #12]

  if(Instance >= SD_INSTANCES_NBR)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d003      	beq.n	8006842 <MY_SD_Init+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800683a:	f06f 0301 	mvn.w	r3, #1
 800683e:	60fb      	str	r3, [r7, #12]
 8006840:	e010      	b.n	8006864 <MY_SD_Init+0x3c>
  } /* Configure IO functionalities for SD pin */
  else if(SD_IO_Init() != BSP_ERROR_NONE)
 8006842:	f000 fa9b 	bl	8006d7c <SD_IO_Init>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d003      	beq.n	8006854 <MY_SD_Init+0x2c>
  {
    ret = BSP_ERROR_NO_INIT;
 800684c:	f04f 33ff 	mov.w	r3, #4294967295
 8006850:	60fb      	str	r3, [r7, #12]
 8006852:	e007      	b.n	8006864 <MY_SD_Init+0x3c>
  }
  else
  {
    /* SD initialized and set to SPI mode properly */
    if(SD_GoIdleState() != BSP_ERROR_NONE)
 8006854:	f000 ff74 	bl	8007740 <SD_GoIdleState>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d002      	beq.n	8006864 <MY_SD_Init+0x3c>
    {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 800685e:	f06f 0305 	mvn.w	r3, #5
 8006862:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8006864:	68fb      	ldr	r3, [r7, #12]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
	...

08006870 <MY_SD_ReadBlocks>:
  * @param  BlockIdx   Block index from where data is to be read
  * @param  BlocksNbr  Number of SD blocks to read
  * @retval BSP status
  */
int32_t MY_SD_ReadBlocks(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b088      	sub	sp, #32
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
 800687c:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800687e:	2300      	movs	r3, #0
 8006880:	61fb      	str	r3, [r7, #28]
  uint32_t response, offset = 0;
 8006882:	2300      	movs	r3, #0
 8006884:	61bb      	str	r3, [r7, #24]
  uint8_t tmp;

  if(Instance >= SD_INSTANCES_NBR)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d003      	beq.n	8006894 <MY_SD_ReadBlocks+0x24>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800688c:	f06f 0301 	mvn.w	r3, #1
 8006890:	61fb      	str	r3, [r7, #28]
 8006892:	e0b2      	b.n	80069fa <MY_SD_ReadBlocks+0x18a>
  }
  else
  {
    /* Send CMD16 (SD_CMD_SET_BLOCKLEN) to set the size of the block and
    Check if the SD acknowledged the set block length command: R1 response (0x00: no errors) */
    response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, MY_SD_BLOCK_SIZE, 0xFF, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8006894:	2300      	movs	r3, #0
 8006896:	22ff      	movs	r2, #255	; 0xff
 8006898:	f44f 7100 	mov.w	r1, #512	; 0x200
 800689c:	2010      	movs	r0, #16
 800689e:	f000 fdd1 	bl	8007444 <SD_SendCmd>
 80068a2:	6178      	str	r0, [r7, #20]
    SD_IO_CSState(1);
 80068a4:	2001      	movs	r0, #1
 80068a6:	f000 fab5 	bl	8006e14 <SD_IO_CSState>
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80068aa:	f107 0313 	add.w	r3, r7, #19
 80068ae:	2101      	movs	r1, #1
 80068b0:	4618      	mov	r0, r3
 80068b2:	f001 f915 	bl	8007ae0 <BSP_SPI2_Send>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d003      	beq.n	80068c4 <MY_SD_ReadBlocks+0x54>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80068bc:	f06f 0303 	mvn.w	r3, #3
 80068c0:	61fb      	str	r3, [r7, #28]
 80068c2:	e09a      	b.n	80069fa <MY_SD_ReadBlocks+0x18a>
    }
    else
    {
      if ((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00e      	beq.n	80068ea <MY_SD_ReadBlocks+0x7a>
      {
        /* Send dummy byte: 8 Clock pulses of delay */
        SD_IO_CSState(1);
 80068cc:	2001      	movs	r0, #1
 80068ce:	f000 faa1 	bl	8006e14 <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80068d2:	f107 0313 	add.w	r3, r7, #19
 80068d6:	2101      	movs	r1, #1
 80068d8:	4618      	mov	r0, r3
 80068da:	f001 f901 	bl	8007ae0 <BSP_SPI2_Send>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d002      	beq.n	80068ea <MY_SD_ReadBlocks+0x7a>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 80068e4:	f06f 0303 	mvn.w	r3, #3
 80068e8:	61fb      	str	r3, [r7, #28]
        }
      }

      if(ret == BSP_ERROR_NONE)
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f040 8084 	bne.w	80069fa <MY_SD_ReadBlocks+0x18a>
        /* Data transfer */
        do
        {
          /* Send CMD17 (SD_CMD_READ_SINGLE_BLOCK) to read one block */
          /* Check if the SD acknowledged the read block command: R1 response (0x00: no errors) */
          response = SD_SendCmd(SD_CMD_READ_SINGLE_BLOCK, (BlockIdx + offset) * (CardType == MY_CARD_SDHC ? 1U: MY_SD_BLOCK_SIZE), 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	441a      	add	r2, r3
 80068f8:	4b42      	ldr	r3, [pc, #264]	; (8006a04 <MY_SD_ReadBlocks+0x194>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d101      	bne.n	8006904 <MY_SD_ReadBlocks+0x94>
 8006900:	2301      	movs	r3, #1
 8006902:	e001      	b.n	8006908 <MY_SD_ReadBlocks+0x98>
 8006904:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006908:	fb02 f103 	mul.w	r1, r2, r3
 800690c:	2300      	movs	r3, #0
 800690e:	22ff      	movs	r2, #255	; 0xff
 8006910:	2011      	movs	r0, #17
 8006912:	f000 fd97 	bl	8007444 <SD_SendCmd>
 8006916:	6178      	str	r0, [r7, #20]
          if ((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	b2db      	uxtb	r3, r3
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00f      	beq.n	8006940 <MY_SD_ReadBlocks+0xd0>
          {
            /* Send dummy byte: 8 Clock pulses of delay */
            SD_IO_CSState(1);
 8006920:	2001      	movs	r0, #1
 8006922:	f000 fa77 	bl	8006e14 <SD_IO_CSState>
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006926:	f107 0313 	add.w	r3, r7, #19
 800692a:	2101      	movs	r1, #1
 800692c:	4618      	mov	r0, r3
 800692e:	f001 f8d7 	bl	8007ae0 <BSP_SPI2_Send>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d003      	beq.n	8006940 <MY_SD_ReadBlocks+0xd0>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8006938:	f06f 0303 	mvn.w	r3, #3
 800693c:	61fb      	str	r3, [r7, #28]
              break;
 800693e:	e05c      	b.n	80069fa <MY_SD_ReadBlocks+0x18a>
            }
          }

          /* Now look for the data token to signify the start of the data */
          if (SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_ERROR_NONE)
 8006940:	20fe      	movs	r0, #254	; 0xfe
 8006942:	f001 f83b 	bl	80079bc <SD_WaitData>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d12f      	bne.n	80069ac <MY_SD_ReadBlocks+0x13c>
          {
            /* Read the SD block data : read NumByteToRead data */
            if(BUS_SPIx_Recv((uint8_t*)pData + offset, MY_SD_BLOCK_SIZE) != BSP_ERROR_NONE)
 800694c:	68ba      	ldr	r2, [r7, #8]
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	4413      	add	r3, r2
 8006952:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006956:	4618      	mov	r0, r3
 8006958:	f001 f8de 	bl	8007b18 <BSP_SPI2_Recv>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <MY_SD_ReadBlocks+0xfa>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8006962:	f06f 0303 	mvn.w	r3, #3
 8006966:	61fb      	str	r3, [r7, #28]
              break;
 8006968:	e047      	b.n	80069fa <MY_SD_ReadBlocks+0x18a>
            }

            /* Set next read address*/
            offset += MY_SD_BLOCK_SIZE;
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006970:	61bb      	str	r3, [r7, #24]
            BlocksNbr--;
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	3b01      	subs	r3, #1
 8006976:	603b      	str	r3, [r7, #0]

            /* get CRC bytes (not really needed by us, but required by SD) */
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006978:	f107 0313 	add.w	r3, r7, #19
 800697c:	2101      	movs	r1, #1
 800697e:	4618      	mov	r0, r3
 8006980:	f001 f8ae 	bl	8007ae0 <BSP_SPI2_Send>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d003      	beq.n	8006992 <MY_SD_ReadBlocks+0x122>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 800698a:	f06f 0303 	mvn.w	r3, #3
 800698e:	61fb      	str	r3, [r7, #28]
              break;
 8006990:	e033      	b.n	80069fa <MY_SD_ReadBlocks+0x18a>
            }
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006992:	f107 0313 	add.w	r3, r7, #19
 8006996:	2101      	movs	r1, #1
 8006998:	4618      	mov	r0, r3
 800699a:	f001 f8a1 	bl	8007ae0 <BSP_SPI2_Send>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d013      	beq.n	80069cc <MY_SD_ReadBlocks+0x15c>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 80069a4:	f06f 0303 	mvn.w	r3, #3
 80069a8:	61fb      	str	r3, [r7, #28]
              break;
 80069aa:	e026      	b.n	80069fa <MY_SD_ReadBlocks+0x18a>
            }
          }
          else
          {
            /* Send dummy byte: 8 Clock pulses of delay */
            SD_IO_CSState(1);
 80069ac:	2001      	movs	r0, #1
 80069ae:	f000 fa31 	bl	8006e14 <SD_IO_CSState>
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80069b2:	f107 0313 	add.w	r3, r7, #19
 80069b6:	2101      	movs	r1, #1
 80069b8:	4618      	mov	r0, r3
 80069ba:	f001 f891 	bl	8007ae0 <BSP_SPI2_Send>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d003      	beq.n	80069cc <MY_SD_ReadBlocks+0x15c>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 80069c4:	f06f 0303 	mvn.w	r3, #3
 80069c8:	61fb      	str	r3, [r7, #28]
              break;
 80069ca:	e016      	b.n	80069fa <MY_SD_ReadBlocks+0x18a>
            }
          }

          /* End the command data read cycle */
          SD_IO_CSState(1);
 80069cc:	2001      	movs	r0, #1
 80069ce:	f000 fa21 	bl	8006e14 <SD_IO_CSState>
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80069d2:	f107 0313 	add.w	r3, r7, #19
 80069d6:	2101      	movs	r1, #1
 80069d8:	4618      	mov	r0, r3
 80069da:	f001 f881 	bl	8007ae0 <BSP_SPI2_Send>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d003      	beq.n	80069ec <MY_SD_ReadBlocks+0x17c>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 80069e4:	f06f 0303 	mvn.w	r3, #3
 80069e8:	61fb      	str	r3, [r7, #28]
            break;
 80069ea:	e006      	b.n	80069fa <MY_SD_ReadBlocks+0x18a>
          }
        }while ((BlocksNbr != 0U) && (ret == BSP_ERROR_NONE));
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d003      	beq.n	80069fa <MY_SD_ReadBlocks+0x18a>
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f43f af7c 	beq.w	80068f2 <MY_SD_ReadBlocks+0x82>
      }
    }
  }

  /* Return BSP status */
  return ret;
 80069fa:	69fb      	ldr	r3, [r7, #28]
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3720      	adds	r7, #32
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	2000004c 	.word	0x2000004c

08006a08 <MY_SD_WriteBlocks>:
  * @param  BlockIdx   Block index from where data is to be written
  * @param  BlocksNbr  Number of SD blocks to write
  * @retval BSP status
  */
int32_t MY_SD_WriteBlocks(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b088      	sub	sp, #32
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
 8006a14:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8006a16:	2300      	movs	r3, #0
 8006a18:	61fb      	str	r3, [r7, #28]
  uint32_t response, offset = 0;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	61bb      	str	r3, [r7, #24]
  uint8_t tmp, data_response;

  if(Instance >= SD_INSTANCES_NBR)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d003      	beq.n	8006a2c <MY_SD_WriteBlocks+0x24>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006a24:	f06f 0301 	mvn.w	r3, #1
 8006a28:	61fb      	str	r3, [r7, #28]
 8006a2a:	e0e8      	b.n	8006bfe <MY_SD_WriteBlocks+0x1f6>
  }
  else
  {
    /* Send CMD16 (SD_CMD_SET_BLOCKLEN) to set the size of the block and
    Check if the SD acknowledged the set block length command: R1 response (0x00: no errors) */
    response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, MY_SD_BLOCK_SIZE, 0xFF, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	22ff      	movs	r2, #255	; 0xff
 8006a30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a34:	2010      	movs	r0, #16
 8006a36:	f000 fd05 	bl	8007444 <SD_SendCmd>
 8006a3a:	6178      	str	r0, [r7, #20]
    SD_IO_CSState(1);
 8006a3c:	2001      	movs	r0, #1
 8006a3e:	f000 f9e9 	bl	8006e14 <SD_IO_CSState>
    tmp = SD_DUMMY_BYTE;
 8006a42:	23ff      	movs	r3, #255	; 0xff
 8006a44:	74fb      	strb	r3, [r7, #19]
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006a46:	f107 0313 	add.w	r3, r7, #19
 8006a4a:	2101      	movs	r1, #1
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f001 f847 	bl	8007ae0 <BSP_SPI2_Send>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d003      	beq.n	8006a60 <MY_SD_WriteBlocks+0x58>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006a58:	f06f 0303 	mvn.w	r3, #3
 8006a5c:	61fb      	str	r3, [r7, #28]
 8006a5e:	e0ce      	b.n	8006bfe <MY_SD_WriteBlocks+0x1f6>
    }
    else
    {
      if ((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00e      	beq.n	8006a86 <MY_SD_WriteBlocks+0x7e>
      {
        /* Send dummy byte: 8 Clock pulses of delay */
        SD_IO_CSState(1);
 8006a68:	2001      	movs	r0, #1
 8006a6a:	f000 f9d3 	bl	8006e14 <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006a6e:	f107 0313 	add.w	r3, r7, #19
 8006a72:	2101      	movs	r1, #1
 8006a74:	4618      	mov	r0, r3
 8006a76:	f001 f833 	bl	8007ae0 <BSP_SPI2_Send>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d002      	beq.n	8006a86 <MY_SD_WriteBlocks+0x7e>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8006a80:	f06f 0303 	mvn.w	r3, #3
 8006a84:	61fb      	str	r3, [r7, #28]
        }
      }

      if(ret == BSP_ERROR_NONE)
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f040 80b8 	bne.w	8006bfe <MY_SD_WriteBlocks+0x1f6>
        /* Data transfer */
        do
        {
          /* Send CMD24 (SD_CMD_WRITE_SINGLE_BLOCK) to write blocks  and
          Check if the SD acknowledged the write block command: R1 response (0x00: no errors) */
          response = SD_SendCmd(SD_CMD_WRITE_SINGLE_BLOCK, (BlockIdx + offset) * (CardType == MY_CARD_SDHC ? 1U : MY_SD_BLOCK_SIZE), 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	441a      	add	r2, r3
 8006a94:	4b5c      	ldr	r3, [pc, #368]	; (8006c08 <MY_SD_WriteBlocks+0x200>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d101      	bne.n	8006aa0 <MY_SD_WriteBlocks+0x98>
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e001      	b.n	8006aa4 <MY_SD_WriteBlocks+0x9c>
 8006aa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006aa4:	fb02 f103 	mul.w	r1, r2, r3
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	22ff      	movs	r2, #255	; 0xff
 8006aac:	2018      	movs	r0, #24
 8006aae:	f000 fcc9 	bl	8007444 <SD_SendCmd>
 8006ab2:	6178      	str	r0, [r7, #20]
          if ((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00f      	beq.n	8006adc <MY_SD_WriteBlocks+0xd4>
          {
            /* Send dummy byte: 8 Clock pulses of delay */
            SD_IO_CSState(1);
 8006abc:	2001      	movs	r0, #1
 8006abe:	f000 f9a9 	bl	8006e14 <SD_IO_CSState>
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006ac2:	f107 0313 	add.w	r3, r7, #19
 8006ac6:	2101      	movs	r1, #1
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f001 f809 	bl	8007ae0 <BSP_SPI2_Send>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d003      	beq.n	8006adc <MY_SD_WriteBlocks+0xd4>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8006ad4:	f06f 0303 	mvn.w	r3, #3
 8006ad8:	61fb      	str	r3, [r7, #28]
              break;
 8006ada:	e090      	b.n	8006bfe <MY_SD_WriteBlocks+0x1f6>
            }
          }

          /* Send dummy byte for NWR timing : one byte between CMDWRITE and TOKEN */
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006adc:	f107 0313 	add.w	r3, r7, #19
 8006ae0:	2101      	movs	r1, #1
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 fffc 	bl	8007ae0 <BSP_SPI2_Send>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d003      	beq.n	8006af6 <MY_SD_WriteBlocks+0xee>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8006aee:	f06f 0303 	mvn.w	r3, #3
 8006af2:	61fb      	str	r3, [r7, #28]
            break;
 8006af4:	e083      	b.n	8006bfe <MY_SD_WriteBlocks+0x1f6>
          }
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006af6:	f107 0313 	add.w	r3, r7, #19
 8006afa:	2101      	movs	r1, #1
 8006afc:	4618      	mov	r0, r3
 8006afe:	f000 ffef 	bl	8007ae0 <BSP_SPI2_Send>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d003      	beq.n	8006b10 <MY_SD_WriteBlocks+0x108>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8006b08:	f06f 0303 	mvn.w	r3, #3
 8006b0c:	61fb      	str	r3, [r7, #28]
            break;
 8006b0e:	e076      	b.n	8006bfe <MY_SD_WriteBlocks+0x1f6>
          }

          /* Send the data token to signify the start of the data */
          tmp = SD_TOKEN_START_DATA_SINGLE_BLOCK_WRITE;
 8006b10:	23fe      	movs	r3, #254	; 0xfe
 8006b12:	74fb      	strb	r3, [r7, #19]
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006b14:	f107 0313 	add.w	r3, r7, #19
 8006b18:	2101      	movs	r1, #1
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 ffe0 	bl	8007ae0 <BSP_SPI2_Send>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d003      	beq.n	8006b2e <MY_SD_WriteBlocks+0x126>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8006b26:	f06f 0303 	mvn.w	r3, #3
 8006b2a:	61fb      	str	r3, [r7, #28]
            break;
 8006b2c:	e067      	b.n	8006bfe <MY_SD_WriteBlocks+0x1f6>
          }

          /* Write the block data to SD */
          if(BUS_SPIx_Send((uint8_t*)pData + offset, MY_SD_BLOCK_SIZE) != BSP_ERROR_NONE)
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	4413      	add	r3, r2
 8006b34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f000 ffd1 	bl	8007ae0 <BSP_SPI2_Send>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d003      	beq.n	8006b4c <MY_SD_WriteBlocks+0x144>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8006b44:	f06f 0303 	mvn.w	r3, #3
 8006b48:	61fb      	str	r3, [r7, #28]
            break;
 8006b4a:	e058      	b.n	8006bfe <MY_SD_WriteBlocks+0x1f6>
          }

          /* Set next write address */
          offset += MY_SD_BLOCK_SIZE;
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006b52:	61bb      	str	r3, [r7, #24]
          BlocksNbr--;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	3b01      	subs	r3, #1
 8006b58:	603b      	str	r3, [r7, #0]

          /* get CRC bytes (not really needed by us, but required by SD) */
          tmp = SD_DUMMY_BYTE;
 8006b5a:	23ff      	movs	r3, #255	; 0xff
 8006b5c:	74fb      	strb	r3, [r7, #19]
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006b5e:	f107 0313 	add.w	r3, r7, #19
 8006b62:	2101      	movs	r1, #1
 8006b64:	4618      	mov	r0, r3
 8006b66:	f000 ffbb 	bl	8007ae0 <BSP_SPI2_Send>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d003      	beq.n	8006b78 <MY_SD_WriteBlocks+0x170>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8006b70:	f06f 0303 	mvn.w	r3, #3
 8006b74:	61fb      	str	r3, [r7, #28]
            break;
 8006b76:	e042      	b.n	8006bfe <MY_SD_WriteBlocks+0x1f6>
          }
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006b78:	f107 0313 	add.w	r3, r7, #19
 8006b7c:	2101      	movs	r1, #1
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f000 ffae 	bl	8007ae0 <BSP_SPI2_Send>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d003      	beq.n	8006b92 <MY_SD_WriteBlocks+0x18a>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8006b8a:	f06f 0303 	mvn.w	r3, #3
 8006b8e:	61fb      	str	r3, [r7, #28]
            break;
 8006b90:	e035      	b.n	8006bfe <MY_SD_WriteBlocks+0x1f6>
          }

          /* Read data response */
          if(SD_GetDataResponse(&data_response) != BSP_ERROR_NONE)
 8006b92:	f107 0312 	add.w	r3, r7, #18
 8006b96:	4618      	mov	r0, r3
 8006b98:	f000 fd6c 	bl	8007674 <SD_GetDataResponse>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d003      	beq.n	8006baa <MY_SD_WriteBlocks+0x1a2>
          {
            ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006ba2:	f06f 0305 	mvn.w	r3, #5
 8006ba6:	61fb      	str	r3, [r7, #28]
            break;
 8006ba8:	e029      	b.n	8006bfe <MY_SD_WriteBlocks+0x1f6>
          }

          if (data_response != (uint8_t)SD_DATA_OK)
 8006baa:	7cbb      	ldrb	r3, [r7, #18]
 8006bac:	2b05      	cmp	r3, #5
 8006bae:	d00f      	beq.n	8006bd0 <MY_SD_WriteBlocks+0x1c8>
          {
            /* Set response value to failure */
            /* Send dummy byte: 8 Clock pulses of delay */
            SD_IO_CSState(1);
 8006bb0:	2001      	movs	r0, #1
 8006bb2:	f000 f92f 	bl	8006e14 <SD_IO_CSState>
            if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006bb6:	f107 0313 	add.w	r3, r7, #19
 8006bba:	2101      	movs	r1, #1
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f000 ff8f 	bl	8007ae0 <BSP_SPI2_Send>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d003      	beq.n	8006bd0 <MY_SD_WriteBlocks+0x1c8>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8006bc8:	f06f 0303 	mvn.w	r3, #3
 8006bcc:	61fb      	str	r3, [r7, #28]
              break;
 8006bce:	e016      	b.n	8006bfe <MY_SD_WriteBlocks+0x1f6>
            }
          }

          SD_IO_CSState(1);
 8006bd0:	2001      	movs	r0, #1
 8006bd2:	f000 f91f 	bl	8006e14 <SD_IO_CSState>
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006bd6:	f107 0313 	add.w	r3, r7, #19
 8006bda:	2101      	movs	r1, #1
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f000 ff7f 	bl	8007ae0 <BSP_SPI2_Send>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d003      	beq.n	8006bf0 <MY_SD_WriteBlocks+0x1e8>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8006be8:	f06f 0303 	mvn.w	r3, #3
 8006bec:	61fb      	str	r3, [r7, #28]
            break;
 8006bee:	e006      	b.n	8006bfe <MY_SD_WriteBlocks+0x1f6>
          }
        }while ((BlocksNbr != 0U) && (ret == BSP_ERROR_NONE));
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d003      	beq.n	8006bfe <MY_SD_WriteBlocks+0x1f6>
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f43f af48 	beq.w	8006a8e <MY_SD_WriteBlocks+0x86>
      }
    }
  }

  /* Return BSP status */
  return ret;
 8006bfe:	69fb      	ldr	r3, [r7, #28]
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3720      	adds	r7, #32
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	2000004c 	.word	0x2000004c

08006c0c <MY_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
int32_t MY_SD_GetCardState(uint32_t Instance)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b086      	sub	sp, #24
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint32_t response;
  uint8_t tmp;

  if(Instance >= SD_INSTANCES_NBR)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d003      	beq.n	8006c22 <MY_SD_GetCardState+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006c1a:	f06f 0301 	mvn.w	r3, #1
 8006c1e:	617b      	str	r3, [r7, #20]
 8006c20:	e026      	b.n	8006c70 <MY_SD_GetCardState+0x64>
  }
  else
  {
    /* Send CMD13 (SD_SEND_STATUS) to get SD status */
    response = SD_SendCmd(SD_CMD_SEND_STATUS, 0, 0xFF, (uint8_t)SD_ANSWER_R2_EXPECTED);
 8006c22:	2302      	movs	r3, #2
 8006c24:	22ff      	movs	r2, #255	; 0xff
 8006c26:	2100      	movs	r1, #0
 8006c28:	200d      	movs	r0, #13
 8006c2a:	f000 fc0b 	bl	8007444 <SD_SendCmd>
 8006c2e:	6138      	str	r0, [r7, #16]
    SD_IO_CSState(1);
 8006c30:	2001      	movs	r0, #1
 8006c32:	f000 f8ef 	bl	8006e14 <SD_IO_CSState>
    tmp = SD_DUMMY_BYTE;
 8006c36:	23ff      	movs	r3, #255	; 0xff
 8006c38:	73fb      	strb	r3, [r7, #15]
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006c3a:	f107 030f 	add.w	r3, r7, #15
 8006c3e:	2101      	movs	r1, #1
 8006c40:	4618      	mov	r0, r3
 8006c42:	f000 ff4d 	bl	8007ae0 <BSP_SPI2_Send>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d003      	beq.n	8006c54 <MY_SD_GetCardState+0x48>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006c4c:	f06f 0303 	mvn.w	r3, #3
 8006c50:	617b      	str	r3, [r7, #20]
 8006c52:	e00d      	b.n	8006c70 <MY_SD_GetCardState+0x64>
    }/* Find SD status according to card state */
    else if(((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_NO_ERROR) && ((uint8_t)((response & 0xFF00UL) >> 8) == (uint8_t)SD_R2_NO_ERROR))
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d107      	bne.n	8006c6c <MY_SD_GetCardState+0x60>
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	0a1b      	lsrs	r3, r3, #8
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d102      	bne.n	8006c6c <MY_SD_GetCardState+0x60>
    {
      ret = (int32_t)SD_TRANSFER_OK;
 8006c66:	2300      	movs	r3, #0
 8006c68:	617b      	str	r3, [r7, #20]
 8006c6a:	e001      	b.n	8006c70 <MY_SD_GetCardState+0x64>
    }
    else
    {
      //ret = (int32_t)SD_TRANSFER_BUSY;
      ret = (int32_t)SD_TRANSFER_OK;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return Status */
  return ret;
 8006c70:	697b      	ldr	r3, [r7, #20]
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3718      	adds	r7, #24
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
	...

08006c7c <MY_SD_GetCardInfo>:
  * @retval The SD Response:
  *         - MSD_ERROR: Sequence failed
  *         - MSD_OK: Sequence succeed
  */
int32_t MY_SD_GetCardInfo(uint32_t Instance, MY_SD_CardInfo_t *CardInfo)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8006c86:	2300      	movs	r3, #0
 8006c88:	60fb      	str	r3, [r7, #12]

  if(Instance >= SD_INSTANCES_NBR)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d003      	beq.n	8006c98 <MY_SD_GetCardInfo+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006c90:	f06f 0301 	mvn.w	r3, #1
 8006c94:	60fb      	str	r3, [r7, #12]
 8006c96:	e069      	b.n	8006d6c <MY_SD_GetCardInfo+0xf0>
  }
  else if(SD_GetCSDRegister(&(CardInfo->Csd)) != BSP_ERROR_NONE)
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f000 f8d2 	bl	8006e44 <SD_GetCSDRegister>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d003      	beq.n	8006cae <MY_SD_GetCardInfo+0x32>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006ca6:	f06f 0305 	mvn.w	r3, #5
 8006caa:	60fb      	str	r3, [r7, #12]
 8006cac:	e05e      	b.n	8006d6c <MY_SD_GetCardInfo+0xf0>
  }
  else if(SD_GetCIDRegister(&(CardInfo->Cid)) != BSP_ERROR_NONE)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	3314      	adds	r3, #20
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 faf4 	bl	80072a0 <SD_GetCIDRegister>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d003      	beq.n	8006cc6 <MY_SD_GetCardInfo+0x4a>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006cbe:	f06f 0305 	mvn.w	r3, #5
 8006cc2:	60fb      	str	r3, [r7, #12]
 8006cc4:	e052      	b.n	8006d6c <MY_SD_GetCardInfo+0xf0>
  }
  else if(CardType == MY_CARD_SDHC)
 8006cc6:	4b2c      	ldr	r3, [pc, #176]	; (8006d78 <MY_SD_GetCardInfo+0xfc>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d11c      	bne.n	8006d08 <MY_SD_GetCardInfo+0x8c>
  {
    CardInfo->LogBlockSize = 512U;
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cd4:	649a      	str	r2, [r3, #72]	; 0x48
    CardInfo->CardBlockSize = 512U;
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cdc:	641a      	str	r2, [r3, #64]	; 0x40
    CardInfo->CardCapacity = (CardInfo->Csd.version.v2.DeviceSize + 1U) * 1024U * CardInfo->LogBlockSize;
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	f3c3 1395 	ubfx	r3, r3, #6, #22
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	683a      	ldr	r2, [r7, #0]
 8006cea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006cec:	fb02 f303 	mul.w	r3, r2, r3
 8006cf0:	029a      	lsls	r2, r3, #10
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	63da      	str	r2, [r3, #60]	; 0x3c
    CardInfo->LogBlockNbr = (CardInfo->CardCapacity) / (CardInfo->LogBlockSize);
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cfe:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	645a      	str	r2, [r3, #68]	; 0x44
 8006d06:	e031      	b.n	8006d6c <MY_SD_GetCardInfo+0xf0>
  }
  else
  {
    CardInfo->CardCapacity = ((uint32_t)CardInfo->Csd.version.v1.DeviceSize + 1U) ;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	891b      	ldrh	r3, [r3, #8]
 8006d0c:	f3c3 038b 	ubfx	r3, r3, #2, #12
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	1c5a      	adds	r2, r3, #1
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	63da      	str	r2, [r3, #60]	; 0x3c
    CardInfo->CardCapacity *= (1UL << (CardInfo->Csd.version.v1.DeviceSizeMul + 2U));
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	7adb      	ldrb	r3, [r3, #11]
 8006d20:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	3302      	adds	r3, #2
 8006d28:	409a      	lsls	r2, r3
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	63da      	str	r2, [r3, #60]	; 0x3c
    CardInfo->LogBlockSize = 512U;
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d34:	649a      	str	r2, [r3, #72]	; 0x48
    CardInfo->CardBlockSize = (1UL << (uint32_t)CardInfo->Csd.RdBlockLen);
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	795b      	ldrb	r3, [r3, #5]
 8006d3a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	461a      	mov	r2, r3
 8006d42:	2301      	movs	r3, #1
 8006d44:	fa03 f202 	lsl.w	r2, r3, r2
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	641a      	str	r2, [r3, #64]	; 0x40
    CardInfo->CardCapacity *= CardInfo->CardBlockSize;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d50:	683a      	ldr	r2, [r7, #0]
 8006d52:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006d54:	fb02 f203 	mul.w	r2, r2, r3
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	63da      	str	r2, [r3, #60]	; 0x3c
    CardInfo->LogBlockNbr = (CardInfo->CardCapacity) / (CardInfo->LogBlockSize);
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d64:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return ret;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	2000004c 	.word	0x2000004c

08006d7c <SD_IO_Init>:
  * @brief  Initializes the SD Card and put it into StandBy State (Ready for
  *         data transfer).
  * @retval BSP status
  */
static int32_t SD_IO_Init(void)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b088      	sub	sp, #32
 8006d80:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8006d82:	2300      	movs	r3, #0
 8006d84:	61fb      	str	r3, [r7, #28]
  uint8_t counter = 0, tmp;
 8006d86:	2300      	movs	r3, #0
 8006d88:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* SD_CS_GPIO Periph clock enable */
  MY_SD_CS_GPIO_CLK_ENABLE();
 8006d8a:	4b20      	ldr	r3, [pc, #128]	; (8006e0c <SD_IO_Init+0x90>)
 8006d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d8e:	4a1f      	ldr	r2, [pc, #124]	; (8006e0c <SD_IO_Init+0x90>)
 8006d90:	f043 0302 	orr.w	r3, r3, #2
 8006d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d96:	4b1d      	ldr	r3, [pc, #116]	; (8006e0c <SD_IO_Init+0x90>)
 8006d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d9a:	f003 0302 	and.w	r3, r3, #2
 8006d9e:	603b      	str	r3, [r7, #0]
 8006da0:	683b      	ldr	r3, [r7, #0]

  /* Configure SD_CS_PIN pin: SD Card CS pin */
  GPIO_InitStruct.Pin   = MY_SD_CS_PIN;
 8006da2:	2304      	movs	r3, #4
 8006da4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8006da6:	2301      	movs	r3, #1
 8006da8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8006daa:	2301      	movs	r3, #1
 8006dac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006dae:	2302      	movs	r3, #2
 8006db0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(MY_SD_CS_GPIO_PORT, &GPIO_InitStruct);
 8006db2:	1d3b      	adds	r3, r7, #4
 8006db4:	4619      	mov	r1, r3
 8006db6:	4816      	ldr	r0, [pc, #88]	; (8006e10 <SD_IO_Init+0x94>)
 8006db8:	f7fb fac6 	bl	8002348 <HAL_GPIO_Init>

  /*------------Put SD in SPI mode--------------*/
  /* SD SPI Config */
  if(BUS_SPIx_Init() != BSP_ERROR_NONE)
 8006dbc:	f000 fe40 	bl	8007a40 <BSP_SPI2_Init>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d003      	beq.n	8006dce <SD_IO_Init+0x52>
  {
    ret = BSP_ERROR_NO_INIT;
 8006dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8006dca:	61fb      	str	r3, [r7, #28]
 8006dcc:	e019      	b.n	8006e02 <SD_IO_Init+0x86>
  }
  else
  {
    /* SD chip select high */
    MY_SD_CS_HIGH();
 8006dce:	2201      	movs	r2, #1
 8006dd0:	2104      	movs	r1, #4
 8006dd2:	480f      	ldr	r0, [pc, #60]	; (8006e10 <SD_IO_Init+0x94>)
 8006dd4:	f7fb fc3a 	bl	800264c <HAL_GPIO_WritePin>

    /* Send dummy byte 0xFF, 10 times with CS high */
    /* Rise CS and MOSI for 80 clocks cycles */
    tmp = SD_DUMMY_BYTE;
 8006dd8:	23ff      	movs	r3, #255	; 0xff
 8006dda:	76bb      	strb	r3, [r7, #26]

    do
    {
      /* Send dummy byte 0xFF */
      if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006ddc:	f107 031a 	add.w	r3, r7, #26
 8006de0:	2101      	movs	r1, #1
 8006de2:	4618      	mov	r0, r3
 8006de4:	f000 fe7c 	bl	8007ae0 <BSP_SPI2_Send>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <SD_IO_Init+0x7a>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8006dee:	f06f 0303 	mvn.w	r3, #3
 8006df2:	61fb      	str	r3, [r7, #28]
        break;
 8006df4:	e005      	b.n	8006e02 <SD_IO_Init+0x86>
      }
      counter++;
 8006df6:	7efb      	ldrb	r3, [r7, #27]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	76fb      	strb	r3, [r7, #27]
    }while(counter <= 9U);
 8006dfc:	7efb      	ldrb	r3, [r7, #27]
 8006dfe:	2b09      	cmp	r3, #9
 8006e00:	d9ec      	bls.n	8006ddc <SD_IO_Init+0x60>
  }

  return ret;
 8006e02:	69fb      	ldr	r3, [r7, #28]
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3720      	adds	r7, #32
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	40021000 	.word	0x40021000
 8006e10:	48000400 	.word	0x48000400

08006e14 <SD_IO_CSState>:
  * @brief  Set the SD_CS pin.
  * @param  Value pin's value.
  * @retval None
  */
static void SD_IO_CSState(uint32_t Value)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  if(Value == 1U)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d105      	bne.n	8006e2e <SD_IO_CSState+0x1a>
  {
    MY_SD_CS_HIGH();
 8006e22:	2201      	movs	r2, #1
 8006e24:	2104      	movs	r1, #4
 8006e26:	4806      	ldr	r0, [pc, #24]	; (8006e40 <SD_IO_CSState+0x2c>)
 8006e28:	f7fb fc10 	bl	800264c <HAL_GPIO_WritePin>
  }
  else
  {
    MY_SD_CS_LOW();
  }
}
 8006e2c:	e004      	b.n	8006e38 <SD_IO_CSState+0x24>
    MY_SD_CS_LOW();
 8006e2e:	2200      	movs	r2, #0
 8006e30:	2104      	movs	r1, #4
 8006e32:	4803      	ldr	r0, [pc, #12]	; (8006e40 <SD_IO_CSState+0x2c>)
 8006e34:	f7fb fc0a 	bl	800264c <HAL_GPIO_WritePin>
}
 8006e38:	bf00      	nop
 8006e3a:	3708      	adds	r7, #8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	48000400 	.word	0x48000400

08006e44 <SD_GetCSDRegister>:
  *         read-block transaction.
  * @param  Csd pointer on an SCD register structure
  * @retval SD status
  */
static int32_t SD_GetCSDRegister(SD_CardSpecificData_t* Csd)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b096      	sub	sp, #88	; 0x58
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t CSD_Tab[16];
  uint32_t response;
  uint8_t tmp;

  /* Send CMD9 (CSD register) or CMD10(CSD register) and Wait for response in the R1 format (0x00 is no errors) */
  response = SD_SendCmd(SD_CMD_SEND_CSD, 0U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8006e50:	2300      	movs	r3, #0
 8006e52:	22ff      	movs	r2, #255	; 0xff
 8006e54:	2100      	movs	r1, #0
 8006e56:	2009      	movs	r0, #9
 8006e58:	f000 faf4 	bl	8007444 <SD_SendCmd>
 8006e5c:	64f8      	str	r0, [r7, #76]	; 0x4c
  if((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_NO_ERROR)
 8006e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f040 8202 	bne.w	800726c <SD_GetCSDRegister+0x428>
  {
    if(SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_ERROR_NONE)
 8006e68:	20fe      	movs	r0, #254	; 0xfe
 8006e6a:	f000 fda7 	bl	80079bc <SD_WaitData>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f040 81fe 	bne.w	8007272 <SD_GetCSDRegister+0x42e>
    {
      tmp = SD_DUMMY_BYTE;
 8006e76:	23ff      	movs	r3, #255	; 0xff
 8006e78:	72fb      	strb	r3, [r7, #11]
      for (counter = 0U; counter < 16U; counter++)
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	653b      	str	r3, [r7, #80]	; 0x50
 8006e7e:	e014      	b.n	8006eaa <SD_GetCSDRegister+0x66>
      {
        /* Store CSD register value on CSD_Tab */
        if(BUS_SPIx_SendRecv(&tmp, (uint8_t*)&CSD_Tab[counter], 1U) != BSP_ERROR_NONE)
 8006e80:	f107 020c 	add.w	r2, r7, #12
 8006e84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	18d1      	adds	r1, r2, r3
 8006e8a:	f107 030b 	add.w	r3, r7, #11
 8006e8e:	2201      	movs	r2, #1
 8006e90:	4618      	mov	r0, r3
 8006e92:	f000 fe5d 	bl	8007b50 <BSP_SPI2_SendRecv>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d003      	beq.n	8006ea4 <SD_GetCSDRegister+0x60>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8006e9c:	f06f 0303 	mvn.w	r3, #3
 8006ea0:	657b      	str	r3, [r7, #84]	; 0x54
          break;
 8006ea2:	e005      	b.n	8006eb0 <SD_GetCSDRegister+0x6c>
      for (counter = 0U; counter < 16U; counter++)
 8006ea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	653b      	str	r3, [r7, #80]	; 0x50
 8006eaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006eac:	2b0f      	cmp	r3, #15
 8006eae:	d9e7      	bls.n	8006e80 <SD_GetCSDRegister+0x3c>
        }
      }

      if(ret == BSP_ERROR_NONE)
 8006eb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f040 81dd 	bne.w	8007272 <SD_GetCSDRegister+0x42e>
      {
        /* Get CRC bytes (not really needed by us, but required by SD) */
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006eb8:	f107 030b 	add.w	r3, r7, #11
 8006ebc:	2101      	movs	r1, #1
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 fe0e 	bl	8007ae0 <BSP_SPI2_Send>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d003      	beq.n	8006ed2 <SD_GetCSDRegister+0x8e>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8006eca:	f06f 0303 	mvn.w	r3, #3
 8006ece:	657b      	str	r3, [r7, #84]	; 0x54
 8006ed0:	e1cf      	b.n	8007272 <SD_GetCSDRegister+0x42e>
        }
        else if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8006ed2:	f107 030b 	add.w	r3, r7, #11
 8006ed6:	2101      	movs	r1, #1
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f000 fe01 	bl	8007ae0 <BSP_SPI2_Send>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d003      	beq.n	8006eec <SD_GetCSDRegister+0xa8>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8006ee4:	f06f 0303 	mvn.w	r3, #3
 8006ee8:	657b      	str	r3, [r7, #84]	; 0x54
 8006eea:	e1c2      	b.n	8007272 <SD_GetCSDRegister+0x42e>
          /*************************************************************************
          CSD header decoding
          *************************************************************************/

          /* Byte 0 */
          Csd->CSDStruct = (CSD_Tab[0] & 0xC0U) >> 6U;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	099b      	lsrs	r3, r3, #6
 8006ef0:	f003 0303 	and.w	r3, r3, #3
 8006ef4:	b2d9      	uxtb	r1, r3
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	7813      	ldrb	r3, [r2, #0]
 8006efa:	f361 0301 	bfi	r3, r1, #0, #2
 8006efe:	7013      	strb	r3, [r2, #0]
          Csd->Reserved1 =  CSD_Tab[0] & 0x3FU;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f06:	b2d9      	uxtb	r1, r3
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	7813      	ldrb	r3, [r2, #0]
 8006f0c:	f361 0387 	bfi	r3, r1, #2, #6
 8006f10:	7013      	strb	r3, [r2, #0]

          /* Byte 1 */
          Csd->TAAC = CSD_Tab[1];
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	b2da      	uxtb	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	705a      	strb	r2, [r3, #1]

          /* Byte 2 */
          Csd->NSAC = CSD_Tab[2];
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	b2da      	uxtb	r2, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	709a      	strb	r2, [r3, #2]

          /* Byte 3 */
          Csd->MaxBusClkFrec = CSD_Tab[3];
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	b2da      	uxtb	r2, r3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	70da      	strb	r2, [r3, #3]

          /* Byte 4/5 */
          Csd->CardComdClasses = (uint16_t)(((uint16_t)CSD_Tab[4] << 4U) | ((uint16_t)(CSD_Tab[5] & 0xF0U) >> 4U));
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	011b      	lsls	r3, r3, #4
 8006f30:	b21a      	sxth	r2, r3
 8006f32:	6a3b      	ldr	r3, [r7, #32]
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	111b      	asrs	r3, r3, #4
 8006f38:	b21b      	sxth	r3, r3
 8006f3a:	f003 030f 	and.w	r3, r3, #15
 8006f3e:	b21b      	sxth	r3, r3
 8006f40:	4313      	orrs	r3, r2
 8006f42:	b21b      	sxth	r3, r3
 8006f44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f48:	b299      	uxth	r1, r3
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	8893      	ldrh	r3, [r2, #4]
 8006f4e:	f361 030b 	bfi	r3, r1, #0, #12
 8006f52:	8093      	strh	r3, [r2, #4]
          Csd->RdBlockLen = CSD_Tab[5] & 0x0FU;
 8006f54:	6a3b      	ldr	r3, [r7, #32]
 8006f56:	f003 030f 	and.w	r3, r3, #15
 8006f5a:	b2d9      	uxtb	r1, r3
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	7953      	ldrb	r3, [r2, #5]
 8006f60:	f361 1307 	bfi	r3, r1, #4, #4
 8006f64:	7153      	strb	r3, [r2, #5]

          /* Byte 6 */
          Csd->PartBlockRead   = (CSD_Tab[6] & 0x80U) >> 7U;
 8006f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f68:	09db      	lsrs	r3, r3, #7
 8006f6a:	f003 0301 	and.w	r3, r3, #1
 8006f6e:	b2d9      	uxtb	r1, r3
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	7993      	ldrb	r3, [r2, #6]
 8006f74:	f361 0300 	bfi	r3, r1, #0, #1
 8006f78:	7193      	strb	r3, [r2, #6]
          Csd->WrBlockMisalign = (CSD_Tab[6] & 0x40U) >> 6U;
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7c:	099b      	lsrs	r3, r3, #6
 8006f7e:	f003 0301 	and.w	r3, r3, #1
 8006f82:	b2d9      	uxtb	r1, r3
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	7993      	ldrb	r3, [r2, #6]
 8006f88:	f361 0341 	bfi	r3, r1, #1, #1
 8006f8c:	7193      	strb	r3, [r2, #6]
          Csd->RdBlockMisalign = (CSD_Tab[6] & 0x20U) >> 5U;
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f90:	095b      	lsrs	r3, r3, #5
 8006f92:	f003 0301 	and.w	r3, r3, #1
 8006f96:	b2d9      	uxtb	r1, r3
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	7993      	ldrb	r3, [r2, #6]
 8006f9c:	f361 0382 	bfi	r3, r1, #2, #1
 8006fa0:	7193      	strb	r3, [r2, #6]
          Csd->DSRImpl         = (CSD_Tab[6] & 0x10U) >> 4U;
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa4:	091b      	lsrs	r3, r3, #4
 8006fa6:	f003 0301 	and.w	r3, r3, #1
 8006faa:	b2d9      	uxtb	r1, r3
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	7993      	ldrb	r3, [r2, #6]
 8006fb0:	f361 03c3 	bfi	r3, r1, #3, #1
 8006fb4:	7193      	strb	r3, [r2, #6]

          /*************************************************************************
          CSD v1/v2 decoding
          *************************************************************************/

          if(CardType == MY_CARD_SDSC)
 8006fb6:	4bac      	ldr	r3, [pc, #688]	; (8007268 <SD_GetCSDRegister+0x424>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d165      	bne.n	800708a <SD_GetCSDRegister+0x246>
          {
            Csd->version.v1.Reserved1 = ((CSD_Tab[6] & 0x0CU) >> 2U);
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc0:	089b      	lsrs	r3, r3, #2
 8006fc2:	f003 0303 	and.w	r3, r3, #3
 8006fc6:	b2d9      	uxtb	r1, r3
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	7a13      	ldrb	r3, [r2, #8]
 8006fcc:	f361 0301 	bfi	r3, r1, #0, #2
 8006fd0:	7213      	strb	r3, [r2, #8]

            Csd->version.v1.DeviceSize =  ((CSD_Tab[6] & 0x03U) << 10U) | (CSD_Tab[7] << 2U) | ((CSD_Tab[8] & 0xC0U) >> 6U);
 8006fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	029b      	lsls	r3, r3, #10
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006fde:	b29a      	uxth	r2, r3
 8006fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fee:	099b      	lsrs	r3, r3, #6
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	f003 0303 	and.w	r3, r3, #3
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007000:	b299      	uxth	r1, r3
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	8913      	ldrh	r3, [r2, #8]
 8007006:	f361 038d 	bfi	r3, r1, #2, #12
 800700a:	8113      	strh	r3, [r2, #8]
            Csd->version.v1.MaxRdCurrentVDDMin = (CSD_Tab[8] & 0x38U) >> 3U;
 800700c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700e:	08db      	lsrs	r3, r3, #3
 8007010:	f003 0307 	and.w	r3, r3, #7
 8007014:	b2d9      	uxtb	r1, r3
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	6893      	ldr	r3, [r2, #8]
 800701a:	f361 3390 	bfi	r3, r1, #14, #3
 800701e:	6093      	str	r3, [r2, #8]
            Csd->version.v1.MaxRdCurrentVDDMax = (CSD_Tab[8] & 0x07U);
 8007020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007022:	f003 0307 	and.w	r3, r3, #7
 8007026:	b2d9      	uxtb	r1, r3
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	7a93      	ldrb	r3, [r2, #10]
 800702c:	f361 0343 	bfi	r3, r1, #1, #3
 8007030:	7293      	strb	r3, [r2, #10]
            Csd->version.v1.MaxWrCurrentVDDMin = (CSD_Tab[9] & 0xE0U) >> 5U;
 8007032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007034:	095b      	lsrs	r3, r3, #5
 8007036:	f003 0307 	and.w	r3, r3, #7
 800703a:	b2d9      	uxtb	r1, r3
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	7a93      	ldrb	r3, [r2, #10]
 8007040:	f361 1306 	bfi	r3, r1, #4, #3
 8007044:	7293      	strb	r3, [r2, #10]
            Csd->version.v1.MaxWrCurrentVDDMax = (CSD_Tab[9] & 0x1CU) >> 2U;
 8007046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007048:	089b      	lsrs	r3, r3, #2
 800704a:	f003 0307 	and.w	r3, r3, #7
 800704e:	b2d9      	uxtb	r1, r3
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	8953      	ldrh	r3, [r2, #10]
 8007054:	f361 13c9 	bfi	r3, r1, #7, #3
 8007058:	8153      	strh	r3, [r2, #10]
            Csd->version.v1.DeviceSizeMul = ((CSD_Tab[9] & 0x03U) << 1U) | ((CSD_Tab[10] & 0x80U) >> 7U);
 800705a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705c:	b2db      	uxtb	r3, r3
 800705e:	005b      	lsls	r3, r3, #1
 8007060:	b2db      	uxtb	r3, r3
 8007062:	f003 0306 	and.w	r3, r3, #6
 8007066:	b2da      	uxtb	r2, r3
 8007068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800706a:	09db      	lsrs	r3, r3, #7
 800706c:	b2db      	uxtb	r3, r3
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	b2db      	uxtb	r3, r3
 8007074:	4313      	orrs	r3, r2
 8007076:	b2db      	uxtb	r3, r3
 8007078:	f003 0307 	and.w	r3, r3, #7
 800707c:	b2d9      	uxtb	r1, r3
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	7ad3      	ldrb	r3, [r2, #11]
 8007082:	f361 0384 	bfi	r3, r1, #2, #3
 8007086:	72d3      	strb	r3, [r2, #11]
 8007088:	e02b      	b.n	80070e2 <SD_GetCSDRegister+0x29e>
          }
          else
          {
            Csd->version.v2.Reserved1 = ((CSD_Tab[6] & 0x0FU) << 2U) | ((CSD_Tab[7] & 0xC0U) >> 6U);
 800708a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708c:	b2db      	uxtb	r3, r3
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	b2db      	uxtb	r3, r3
 8007092:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8007096:	b2da      	uxtb	r2, r3
 8007098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709a:	099b      	lsrs	r3, r3, #6
 800709c:	b2db      	uxtb	r3, r3
 800709e:	f003 0303 	and.w	r3, r3, #3
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	4313      	orrs	r3, r2
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070ac:	b2d9      	uxtb	r1, r3
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	7a13      	ldrb	r3, [r2, #8]
 80070b2:	f361 0305 	bfi	r3, r1, #0, #6
 80070b6:	7213      	strb	r3, [r2, #8]
            Csd->version.v2.DeviceSize= ((CSD_Tab[7] & 0x3FU) << 16U) | (CSD_Tab[8] << 8U) | CSD_Tab[9];
 80070b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ba:	041b      	lsls	r3, r3, #16
 80070bc:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80070c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c2:	021b      	lsls	r3, r3, #8
 80070c4:	431a      	orrs	r2, r3
 80070c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c8:	4313      	orrs	r3, r2
 80070ca:	f3c3 0115 	ubfx	r1, r3, #0, #22
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	6893      	ldr	r3, [r2, #8]
 80070d2:	f361 139b 	bfi	r3, r1, #6, #22
 80070d6:	6093      	str	r3, [r2, #8]
            Csd->version.v2.Reserved2 = ((CSD_Tab[10] & 0x80U) >> 8U);
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	7ad3      	ldrb	r3, [r2, #11]
 80070dc:	f36f 1304 	bfc	r3, #4, #1
 80070e0:	72d3      	strb	r3, [r2, #11]
          }

          Csd->EraseSingleBlockEnable = (CSD_Tab[10] & 0x40U) >> 6U;
 80070e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070e4:	099b      	lsrs	r3, r3, #6
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	b2d9      	uxtb	r1, r3
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	7b13      	ldrb	r3, [r2, #12]
 80070f0:	f361 0300 	bfi	r3, r1, #0, #1
 80070f4:	7313      	strb	r3, [r2, #12]
          Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3FU) << 1U) | ((CSD_Tab[11] & 0x80U) >> 7U);
 80070f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	005b      	lsls	r3, r3, #1
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8007102:	b2da      	uxtb	r2, r3
 8007104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007106:	09db      	lsrs	r3, r3, #7
 8007108:	b2db      	uxtb	r3, r3
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	b2db      	uxtb	r3, r3
 8007110:	4313      	orrs	r3, r2
 8007112:	b2db      	uxtb	r3, r3
 8007114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007118:	b2d9      	uxtb	r1, r3
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	7b13      	ldrb	r3, [r2, #12]
 800711e:	f361 0347 	bfi	r3, r1, #1, #7
 8007122:	7313      	strb	r3, [r2, #12]
          Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7FU);
 8007124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800712a:	b2d9      	uxtb	r1, r3
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	7b53      	ldrb	r3, [r2, #13]
 8007130:	f361 0306 	bfi	r3, r1, #0, #7
 8007134:	7353      	strb	r3, [r2, #13]
          Csd->WrProtectGrEnable = (CSD_Tab[12] & 0x80U) >> 7U;
 8007136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007138:	09db      	lsrs	r3, r3, #7
 800713a:	f003 0301 	and.w	r3, r3, #1
 800713e:	b2d9      	uxtb	r1, r3
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	7b53      	ldrb	r3, [r2, #13]
 8007144:	f361 13c7 	bfi	r3, r1, #7, #1
 8007148:	7353      	strb	r3, [r2, #13]
          Csd->Reserved2         = (CSD_Tab[12] & 0x60U) >> 5U;
 800714a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800714c:	095b      	lsrs	r3, r3, #5
 800714e:	f003 0303 	and.w	r3, r3, #3
 8007152:	b2d9      	uxtb	r1, r3
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	7b93      	ldrb	r3, [r2, #14]
 8007158:	f361 0301 	bfi	r3, r1, #0, #2
 800715c:	7393      	strb	r3, [r2, #14]
          Csd->WrSpeedFact       = (CSD_Tab[12] & 0x1CU) >> 2U;
 800715e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007160:	089b      	lsrs	r3, r3, #2
 8007162:	f003 0307 	and.w	r3, r3, #7
 8007166:	b2d9      	uxtb	r1, r3
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	7b93      	ldrb	r3, [r2, #14]
 800716c:	f361 0384 	bfi	r3, r1, #2, #3
 8007170:	7393      	strb	r3, [r2, #14]
          Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03U) << 2U) | ((CSD_Tab[13] & 0xC0U) >> 6U);
 8007172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007174:	b2db      	uxtb	r3, r3
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	b2db      	uxtb	r3, r3
 800717a:	f003 030c 	and.w	r3, r3, #12
 800717e:	b2da      	uxtb	r2, r3
 8007180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007182:	099b      	lsrs	r3, r3, #6
 8007184:	b2db      	uxtb	r3, r3
 8007186:	f003 0303 	and.w	r3, r3, #3
 800718a:	b2db      	uxtb	r3, r3
 800718c:	4313      	orrs	r3, r2
 800718e:	b2db      	uxtb	r3, r3
 8007190:	f003 030f 	and.w	r3, r3, #15
 8007194:	b2d9      	uxtb	r1, r3
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	89d3      	ldrh	r3, [r2, #14]
 800719a:	f361 1348 	bfi	r3, r1, #5, #4
 800719e:	81d3      	strh	r3, [r2, #14]
          Csd->WriteBlockPartial = (CSD_Tab[13] & 0x20U) >> 5U;
 80071a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071a2:	095b      	lsrs	r3, r3, #5
 80071a4:	f003 0301 	and.w	r3, r3, #1
 80071a8:	b2d9      	uxtb	r1, r3
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	7bd3      	ldrb	r3, [r2, #15]
 80071ae:	f361 0341 	bfi	r3, r1, #1, #1
 80071b2:	73d3      	strb	r3, [r2, #15]
          Csd->Reserved3         = (CSD_Tab[13] & 0x1FU);
 80071b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071b6:	f003 031f 	and.w	r3, r3, #31
 80071ba:	b2d9      	uxtb	r1, r3
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	7bd3      	ldrb	r3, [r2, #15]
 80071c0:	f361 0386 	bfi	r3, r1, #2, #5
 80071c4:	73d3      	strb	r3, [r2, #15]
          Csd->FileFormatGrouop  = (CSD_Tab[14] & 0x80U) >> 7U;
 80071c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071c8:	09db      	lsrs	r3, r3, #7
 80071ca:	f003 0301 	and.w	r3, r3, #1
 80071ce:	b2d9      	uxtb	r1, r3
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	7bd3      	ldrb	r3, [r2, #15]
 80071d4:	f361 13c7 	bfi	r3, r1, #7, #1
 80071d8:	73d3      	strb	r3, [r2, #15]
          Csd->CopyFlag          = (CSD_Tab[14] & 0x40U) >> 6U;
 80071da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071dc:	099b      	lsrs	r3, r3, #6
 80071de:	f003 0301 	and.w	r3, r3, #1
 80071e2:	b2d9      	uxtb	r1, r3
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	7c13      	ldrb	r3, [r2, #16]
 80071e8:	f361 0300 	bfi	r3, r1, #0, #1
 80071ec:	7413      	strb	r3, [r2, #16]
          Csd->PermWrProtect     = (CSD_Tab[14] & 0x20U) >> 5U;
 80071ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071f0:	095b      	lsrs	r3, r3, #5
 80071f2:	f003 0301 	and.w	r3, r3, #1
 80071f6:	b2d9      	uxtb	r1, r3
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	7c13      	ldrb	r3, [r2, #16]
 80071fc:	f361 0341 	bfi	r3, r1, #1, #1
 8007200:	7413      	strb	r3, [r2, #16]
          Csd->TempWrProtect     = (CSD_Tab[14] & 0x10U) >> 4U;
 8007202:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007204:	091b      	lsrs	r3, r3, #4
 8007206:	f003 0301 	and.w	r3, r3, #1
 800720a:	b2d9      	uxtb	r1, r3
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	7c13      	ldrb	r3, [r2, #16]
 8007210:	f361 0382 	bfi	r3, r1, #2, #1
 8007214:	7413      	strb	r3, [r2, #16]
          Csd->FileFormat        = (CSD_Tab[14] & 0x0CU) >> 2U;
 8007216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007218:	089b      	lsrs	r3, r3, #2
 800721a:	f003 0303 	and.w	r3, r3, #3
 800721e:	b2d9      	uxtb	r1, r3
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	7c13      	ldrb	r3, [r2, #16]
 8007224:	f361 03c4 	bfi	r3, r1, #3, #2
 8007228:	7413      	strb	r3, [r2, #16]
          Csd->Reserved4         = (CSD_Tab[14] & 0x03U);
 800722a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800722c:	f003 0303 	and.w	r3, r3, #3
 8007230:	b2d9      	uxtb	r1, r3
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	7c13      	ldrb	r3, [r2, #16]
 8007236:	f361 1346 	bfi	r3, r1, #5, #2
 800723a:	7413      	strb	r3, [r2, #16]
          Csd->crc               = (CSD_Tab[15] & 0xFEU) >> 1U;
 800723c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800723e:	085b      	lsrs	r3, r3, #1
 8007240:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007244:	b2d9      	uxtb	r1, r3
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	8a13      	ldrh	r3, [r2, #16]
 800724a:	f361 13cd 	bfi	r3, r1, #7, #7
 800724e:	8213      	strh	r3, [r2, #16]
          Csd->Reserved5         = (CSD_Tab[15] & 0x01U);
 8007250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	b2d9      	uxtb	r1, r3
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	7c53      	ldrb	r3, [r2, #17]
 800725c:	f361 1386 	bfi	r3, r1, #6, #1
 8007260:	7453      	strb	r3, [r2, #17]

          ret = BSP_ERROR_NONE;
 8007262:	2300      	movs	r3, #0
 8007264:	657b      	str	r3, [r7, #84]	; 0x54
 8007266:	e004      	b.n	8007272 <SD_GetCSDRegister+0x42e>
 8007268:	2000004c 	.word	0x2000004c
      }
    }
  }
  else
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800726c:	f06f 0305 	mvn.w	r3, #5
 8007270:	657b      	str	r3, [r7, #84]	; 0x54
  }

  if(ret == BSP_ERROR_NONE)
 8007272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10e      	bne.n	8007296 <SD_GetCSDRegister+0x452>
  {
    /* Send dummy byte: 8 Clock pulses of delay */
    SD_IO_CSState(1);
 8007278:	2001      	movs	r0, #1
 800727a:	f7ff fdcb 	bl	8006e14 <SD_IO_CSState>

    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800727e:	f107 030b 	add.w	r3, r7, #11
 8007282:	2101      	movs	r1, #1
 8007284:	4618      	mov	r0, r3
 8007286:	f000 fc2b 	bl	8007ae0 <BSP_SPI2_Send>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d002      	beq.n	8007296 <SD_GetCSDRegister+0x452>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8007290:	f06f 0303 	mvn.w	r3, #3
 8007294:	657b      	str	r3, [r7, #84]	; 0x54
    }
  }

  /* Return the reponse */
  return ret;
 8007296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 8007298:	4618      	mov	r0, r3
 800729a:	3758      	adds	r7, #88	; 0x58
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <SD_GetCIDRegister>:
  *         read-block transaction.
  * @param  Cid: pointer on an CID register structure
  * @retval SD status
  */
static int32_t SD_GetCIDRegister(SD_CardIdData_t* Cid)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b096      	sub	sp, #88	; 0x58
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80072a8:	2300      	movs	r3, #0
 80072aa:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t response;
  uint32_t counter;
  uint8_t tmp;

  /* Send CMD10 (CID register) and Wait for response in the R1 format (0x00 is no errors) */
  response = SD_SendCmd(SD_CMD_SEND_CID, 0U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 80072ac:	2300      	movs	r3, #0
 80072ae:	22ff      	movs	r2, #255	; 0xff
 80072b0:	2100      	movs	r1, #0
 80072b2:	200a      	movs	r0, #10
 80072b4:	f000 f8c6 	bl	8007444 <SD_SendCmd>
 80072b8:	64f8      	str	r0, [r7, #76]	; 0x4c
  if((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_NO_ERROR)
 80072ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f040 80a6 	bne.w	8007410 <SD_GetCIDRegister+0x170>
  {
    if(SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_ERROR_NONE)
 80072c4:	20fe      	movs	r0, #254	; 0xfe
 80072c6:	f000 fb79 	bl	80079bc <SD_WaitData>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f040 80a2 	bne.w	8007416 <SD_GetCIDRegister+0x176>
    {
      tmp = SD_DUMMY_BYTE;
 80072d2:	23ff      	movs	r3, #255	; 0xff
 80072d4:	72fb      	strb	r3, [r7, #11]

      /* Store CID register value on CID_Tab */
      for (counter = 0U; counter < 16U; counter++)
 80072d6:	2300      	movs	r3, #0
 80072d8:	653b      	str	r3, [r7, #80]	; 0x50
 80072da:	e014      	b.n	8007306 <SD_GetCIDRegister+0x66>
      {
        if(BUS_SPIx_SendRecv(&tmp, (uint8_t*)&CID_Tab[counter], 1U) != BSP_ERROR_NONE)
 80072dc:	f107 020c 	add.w	r2, r7, #12
 80072e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	18d1      	adds	r1, r2, r3
 80072e6:	f107 030b 	add.w	r3, r7, #11
 80072ea:	2201      	movs	r2, #1
 80072ec:	4618      	mov	r0, r3
 80072ee:	f000 fc2f 	bl	8007b50 <BSP_SPI2_SendRecv>
 80072f2:	4603      	mov	r3, r0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d003      	beq.n	8007300 <SD_GetCIDRegister+0x60>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 80072f8:	f06f 0303 	mvn.w	r3, #3
 80072fc:	657b      	str	r3, [r7, #84]	; 0x54
          break;
 80072fe:	e005      	b.n	800730c <SD_GetCIDRegister+0x6c>
      for (counter = 0U; counter < 16U; counter++)
 8007300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007302:	3301      	adds	r3, #1
 8007304:	653b      	str	r3, [r7, #80]	; 0x50
 8007306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007308:	2b0f      	cmp	r3, #15
 800730a:	d9e7      	bls.n	80072dc <SD_GetCIDRegister+0x3c>
        }
      }

      if(ret == BSP_ERROR_NONE)
 800730c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800730e:	2b00      	cmp	r3, #0
 8007310:	f040 8081 	bne.w	8007416 <SD_GetCIDRegister+0x176>
      {
        /* Get CRC bytes (not really needed by us, but required by SD) */
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8007314:	f107 030b 	add.w	r3, r7, #11
 8007318:	2101      	movs	r1, #1
 800731a:	4618      	mov	r0, r3
 800731c:	f000 fbe0 	bl	8007ae0 <BSP_SPI2_Send>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d003      	beq.n	800732e <SD_GetCIDRegister+0x8e>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8007326:	f06f 0303 	mvn.w	r3, #3
 800732a:	657b      	str	r3, [r7, #84]	; 0x54
 800732c:	e073      	b.n	8007416 <SD_GetCIDRegister+0x176>
        }
        else if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800732e:	f107 030b 	add.w	r3, r7, #11
 8007332:	2101      	movs	r1, #1
 8007334:	4618      	mov	r0, r3
 8007336:	f000 fbd3 	bl	8007ae0 <BSP_SPI2_Send>
 800733a:	4603      	mov	r3, r0
 800733c:	2b00      	cmp	r3, #0
 800733e:	d003      	beq.n	8007348 <SD_GetCIDRegister+0xa8>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8007340:	f06f 0303 	mvn.w	r3, #3
 8007344:	657b      	str	r3, [r7, #84]	; 0x54
 8007346:	e066      	b.n	8007416 <SD_GetCIDRegister+0x176>
        }
        else
        {
          /* Byte 0 */
          Cid->ManufacturerID = CID_Tab[0];
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	601a      	str	r2, [r3, #0]

          /* Byte 1 */
          Cid->OEM_AppliID = CID_Tab[1] << 8U;
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	021a      	lsls	r2, r3, #8
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	605a      	str	r2, [r3, #4]

          /* Byte 2 */
          Cid->OEM_AppliID |= CID_Tab[2];
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	685a      	ldr	r2, [r3, #4]
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	431a      	orrs	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	605a      	str	r2, [r3, #4]

          /* Byte 3 */
          Cid->ProdName1 = CID_Tab[3] << 24U;
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	061a      	lsls	r2, r3, #24
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	609a      	str	r2, [r3, #8]

          /* Byte 4 */
          Cid->ProdName1 |= CID_Tab[4] << 16U;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	689a      	ldr	r2, [r3, #8]
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	041b      	lsls	r3, r3, #16
 8007372:	431a      	orrs	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	609a      	str	r2, [r3, #8]

          /* Byte 5 */
          Cid->ProdName1 |= CID_Tab[5] << 8U;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	689a      	ldr	r2, [r3, #8]
 800737c:	6a3b      	ldr	r3, [r7, #32]
 800737e:	021b      	lsls	r3, r3, #8
 8007380:	431a      	orrs	r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	609a      	str	r2, [r3, #8]

          /* Byte 6 */
          Cid->ProdName1 |= CID_Tab[6];
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	689a      	ldr	r2, [r3, #8]
 800738a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738c:	431a      	orrs	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	609a      	str	r2, [r3, #8]

          /* Byte 7 */
          Cid->ProdName2 = CID_Tab[7];
 8007392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	60da      	str	r2, [r3, #12]

          /* Byte 8 */
          Cid->ProdRev = CID_Tab[8];
 8007398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	611a      	str	r2, [r3, #16]

          /* Byte 9 */
          Cid->ProdSN = CID_Tab[9] << 24U;
 800739e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a0:	061a      	lsls	r2, r3, #24
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	615a      	str	r2, [r3, #20]

          /* Byte 10 */
          Cid->ProdSN |= CID_Tab[10] << 16U;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	695a      	ldr	r2, [r3, #20]
 80073aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ac:	041b      	lsls	r3, r3, #16
 80073ae:	431a      	orrs	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	615a      	str	r2, [r3, #20]

          /* Byte 11 */
          Cid->ProdSN |= CID_Tab[11] << 8U;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	695a      	ldr	r2, [r3, #20]
 80073b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ba:	021b      	lsls	r3, r3, #8
 80073bc:	431a      	orrs	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	615a      	str	r2, [r3, #20]

          /* Byte 12 */
          Cid->ProdSN |= CID_Tab[12];
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	695a      	ldr	r2, [r3, #20]
 80073c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073c8:	431a      	orrs	r2, r3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	615a      	str	r2, [r3, #20]

          /* Byte 13 */
          Cid->Reserved1 |= (CID_Tab[13] & 0xF0U) >> 4U;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	699a      	ldr	r2, [r3, #24]
 80073d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073d4:	091b      	lsrs	r3, r3, #4
 80073d6:	f003 030f 	and.w	r3, r3, #15
 80073da:	431a      	orrs	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	619a      	str	r2, [r3, #24]
          Cid->ManufactDate = (CID_Tab[13] & 0x0FU) << 8U;
 80073e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073e2:	021b      	lsls	r3, r3, #8
 80073e4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	61da      	str	r2, [r3, #28]

          /* Byte 14 */
          Cid->ManufactDate |= CID_Tab[14];
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	69da      	ldr	r2, [r3, #28]
 80073f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073f2:	431a      	orrs	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	61da      	str	r2, [r3, #28]

          /* Byte 15 */
          Cid->CID_CRC = (CID_Tab[15] & 0xFEU) >> 1U;
 80073f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073fa:	085b      	lsrs	r3, r3, #1
 80073fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	621a      	str	r2, [r3, #32]
          Cid->Reserved2 = 1U;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	625a      	str	r2, [r3, #36]	; 0x24

          ret = BSP_ERROR_NONE;
 800740a:	2300      	movs	r3, #0
 800740c:	657b      	str	r3, [r7, #84]	; 0x54
 800740e:	e002      	b.n	8007416 <SD_GetCIDRegister+0x176>
      }
    }
  }
  else
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8007410:	f06f 0305 	mvn.w	r3, #5
 8007414:	657b      	str	r3, [r7, #84]	; 0x54
  }

  if(ret == BSP_ERROR_NONE)
 8007416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007418:	2b00      	cmp	r3, #0
 800741a:	d10e      	bne.n	800743a <SD_GetCIDRegister+0x19a>
  {
    /* Send dummy byte: 8 Clock pulses of delay */
    SD_IO_CSState(1);
 800741c:	2001      	movs	r0, #1
 800741e:	f7ff fcf9 	bl	8006e14 <SD_IO_CSState>

    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8007422:	f107 030b 	add.w	r3, r7, #11
 8007426:	2101      	movs	r1, #1
 8007428:	4618      	mov	r0, r3
 800742a:	f000 fb59 	bl	8007ae0 <BSP_SPI2_Send>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d002      	beq.n	800743a <SD_GetCIDRegister+0x19a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8007434:	f06f 0303 	mvn.w	r3, #3
 8007438:	657b      	str	r3, [r7, #84]	; 0x54
    }
  }

  /* Return the reponse */
  return ret;
 800743a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 800743c:	4618      	mov	r0, r3
 800743e:	3758      	adds	r7, #88	; 0x58
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <SD_SendCmd>:
  * @param  Crc The CRC.
  * @param  Answer SD_ANSWER_NOT_EXPECTED or SD_ANSWER_EXPECTED
  * @retval SD response or 0xFFFF in case of error
  */
static uint32_t SD_SendCmd(uint8_t Cmd, uint32_t Arg, uint8_t Crc, uint8_t Answer)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b088      	sub	sp, #32
 8007448:	af00      	add	r7, sp, #0
 800744a:	6039      	str	r1, [r7, #0]
 800744c:	4611      	mov	r1, r2
 800744e:	461a      	mov	r2, r3
 8007450:	4603      	mov	r3, r0
 8007452:	71fb      	strb	r3, [r7, #7]
 8007454:	460b      	mov	r3, r1
 8007456:	71bb      	strb	r3, [r7, #6]
 8007458:	4613      	mov	r3, r2
 800745a:	717b      	strb	r3, [r7, #5]
  uint8_t frame[SD_CMD_LENGTH], frameout[SD_CMD_LENGTH];
  uint32_t response = 0xFFFF;
 800745c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007460:	61fb      	str	r3, [r7, #28]
  /* R1 Lenght = NCS(0)+ 6 Bytes command + NCR(min1 max8) + 1 Bytes answer + NEC(0) = 15bytes */
  /* R1b identical to R1 + Busy information                                                   */
  /* R2 Lenght = NCS(0)+ 6 Bytes command + NCR(min1 max8) + 2 Bytes answer + NEC(0) = 16bytes */

  /* Prepare Frame to send */
  frame[0] = (Cmd | 0x40U);         /* Construct byte 1 */
 8007462:	79fb      	ldrb	r3, [r7, #7]
 8007464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007468:	b2db      	uxtb	r3, r3
 800746a:	753b      	strb	r3, [r7, #20]
  frame[1] = (uint8_t)(Arg >> 24U); /* Construct byte 2 */
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	0e1b      	lsrs	r3, r3, #24
 8007470:	b2db      	uxtb	r3, r3
 8007472:	757b      	strb	r3, [r7, #21]
  frame[2] = (uint8_t)(Arg >> 16U); /* Construct byte 3 */
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	0c1b      	lsrs	r3, r3, #16
 8007478:	b2db      	uxtb	r3, r3
 800747a:	75bb      	strb	r3, [r7, #22]
  frame[3] = (uint8_t)(Arg >> 8U);  /* Construct byte 4 */
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	0a1b      	lsrs	r3, r3, #8
 8007480:	b2db      	uxtb	r3, r3
 8007482:	75fb      	strb	r3, [r7, #23]
  frame[4] = (uint8_t)(Arg);        /* Construct byte 5 */
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	b2db      	uxtb	r3, r3
 8007488:	763b      	strb	r3, [r7, #24]
  frame[5] = (Crc | 0x01U);         /* Construct byte 6 */
 800748a:	79bb      	ldrb	r3, [r7, #6]
 800748c:	f043 0301 	orr.w	r3, r3, #1
 8007490:	b2db      	uxtb	r3, r3
 8007492:	767b      	strb	r3, [r7, #25]

  /* Send the command */
  SD_IO_CSState(0);
 8007494:	2000      	movs	r0, #0
 8007496:	f7ff fcbd 	bl	8006e14 <SD_IO_CSState>
  /* Send the Cmd bytes */
  if(BUS_SPIx_SendRecv(frame, frameout, SD_CMD_LENGTH) != BSP_ERROR_NONE)
 800749a:	f107 010c 	add.w	r1, r7, #12
 800749e:	f107 0314 	add.w	r3, r7, #20
 80074a2:	2206      	movs	r2, #6
 80074a4:	4618      	mov	r0, r3
 80074a6:	f000 fb53 	bl	8007b50 <BSP_SPI2_SendRecv>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d002      	beq.n	80074b6 <SD_SendCmd+0x72>
  {
    return 0xFFFF;
 80074b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80074b4:	e0da      	b.n	800766c <SD_SendCmd+0x228>
  }
  tmp = SD_DUMMY_BYTE;
 80074b6:	23ff      	movs	r3, #255	; 0xff
 80074b8:	72fb      	strb	r3, [r7, #11]
  switch(Answer)
 80074ba:	797b      	ldrb	r3, [r7, #5]
 80074bc:	2b05      	cmp	r3, #5
 80074be:	f200 80d1 	bhi.w	8007664 <SD_SendCmd+0x220>
 80074c2:	a201      	add	r2, pc, #4	; (adr r2, 80074c8 <SD_SendCmd+0x84>)
 80074c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c8:	080074e1 	.word	0x080074e1
 80074cc:	080074fd 	.word	0x080074fd
 80074d0:	0800758f 	.word	0x0800758f
 80074d4:	080075d1 	.word	0x080075d1
 80074d8:	08007665 	.word	0x08007665
 80074dc:	080075d1 	.word	0x080075d1
  {
  case SD_ANSWER_R1_EXPECTED :
    /* Sends one byte command to the SD card and get response */
    if(SD_ReadData(&response_tmp) != BSP_ERROR_NONE)
 80074e0:	f107 030a 	add.w	r3, r7, #10
 80074e4:	4618      	mov	r0, r3
 80074e6:	f000 fa3f 	bl	8007968 <SD_ReadData>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d002      	beq.n	80074f6 <SD_SendCmd+0xb2>
    {
      return 0xFFFF;
 80074f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80074f4:	e0ba      	b.n	800766c <SD_SendCmd+0x228>
    }
    response = response_tmp;
 80074f6:	7abb      	ldrb	r3, [r7, #10]
 80074f8:	61fb      	str	r3, [r7, #28]
    break;
 80074fa:	e0b6      	b.n	800766a <SD_SendCmd+0x226>
  case SD_ANSWER_R1B_EXPECTED :
    /* Sends first byte command to the SD card and get response */
    if(SD_ReadData(&response_tmp) != BSP_ERROR_NONE)
 80074fc:	f107 030a 	add.w	r3, r7, #10
 8007500:	4618      	mov	r0, r3
 8007502:	f000 fa31 	bl	8007968 <SD_ReadData>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d002      	beq.n	8007512 <SD_SendCmd+0xce>
    {
      return 0xFFFF;
 800750c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007510:	e0ac      	b.n	800766c <SD_SendCmd+0x228>
    }
    response = response_tmp;
 8007512:	7abb      	ldrb	r3, [r7, #10]
 8007514:	61fb      	str	r3, [r7, #28]
    /* Sends second byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 8007516:	f107 010a 	add.w	r1, r7, #10
 800751a:	f107 030b 	add.w	r3, r7, #11
 800751e:	2201      	movs	r2, #1
 8007520:	4618      	mov	r0, r3
 8007522:	f000 fb15 	bl	8007b50 <BSP_SPI2_SendRecv>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d002      	beq.n	8007532 <SD_SendCmd+0xee>
    {
      return 0xFFFF;
 800752c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007530:	e09c      	b.n	800766c <SD_SendCmd+0x228>
    }
    response |= response_tmp;
 8007532:	7abb      	ldrb	r3, [r7, #10]
 8007534:	461a      	mov	r2, r3
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	4313      	orrs	r3, r2
 800753a:	61fb      	str	r3, [r7, #28]
    /* Set CS High */
    SD_IO_CSState(1);
 800753c:	2001      	movs	r0, #1
 800753e:	f7ff fc69 	bl	8006e14 <SD_IO_CSState>
    SPI_IO_Delay(1);
 8007542:	2001      	movs	r0, #1
 8007544:	f000 fa67 	bl	8007a16 <SPI_IO_Delay>
    /* Set CS Low */
    SD_IO_CSState(0);
 8007548:	2000      	movs	r0, #0
 800754a:	f7ff fc63 	bl	8006e14 <SD_IO_CSState>

    /* Wait IO line return 0xFF */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 800754e:	f107 010a 	add.w	r1, r7, #10
 8007552:	f107 030b 	add.w	r3, r7, #11
 8007556:	2201      	movs	r2, #1
 8007558:	4618      	mov	r0, r3
 800755a:	f000 faf9 	bl	8007b50 <BSP_SPI2_SendRecv>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d010      	beq.n	8007586 <SD_SendCmd+0x142>
    {
      return 0xFFFF;
 8007564:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007568:	e080      	b.n	800766c <SD_SendCmd+0x228>
    }
    while(response_tmp != 0xFFU)
    {
      if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 800756a:	f107 010a 	add.w	r1, r7, #10
 800756e:	f107 030b 	add.w	r3, r7, #11
 8007572:	2201      	movs	r2, #1
 8007574:	4618      	mov	r0, r3
 8007576:	f000 faeb 	bl	8007b50 <BSP_SPI2_SendRecv>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d002      	beq.n	8007586 <SD_SendCmd+0x142>
      {
        return 0xFFFF;
 8007580:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007584:	e072      	b.n	800766c <SD_SendCmd+0x228>
    while(response_tmp != 0xFFU)
 8007586:	7abb      	ldrb	r3, [r7, #10]
 8007588:	2bff      	cmp	r3, #255	; 0xff
 800758a:	d1ee      	bne.n	800756a <SD_SendCmd+0x126>
      }
    }
    break;
 800758c:	e06d      	b.n	800766a <SD_SendCmd+0x226>
  case SD_ANSWER_R2_EXPECTED :
    /* Sends first byte command to the SD card and get response */
    if(SD_ReadData(&response_tmp) != BSP_ERROR_NONE)
 800758e:	f107 030a 	add.w	r3, r7, #10
 8007592:	4618      	mov	r0, r3
 8007594:	f000 f9e8 	bl	8007968 <SD_ReadData>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d002      	beq.n	80075a4 <SD_SendCmd+0x160>
    {
      return 0xFFFF;
 800759e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80075a2:	e063      	b.n	800766c <SD_SendCmd+0x228>
    }
    response = response_tmp;
 80075a4:	7abb      	ldrb	r3, [r7, #10]
 80075a6:	61fb      	str	r3, [r7, #28]
    /* Sends second byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 80075a8:	f107 010a 	add.w	r1, r7, #10
 80075ac:	f107 030b 	add.w	r3, r7, #11
 80075b0:	2201      	movs	r2, #1
 80075b2:	4618      	mov	r0, r3
 80075b4:	f000 facc 	bl	8007b50 <BSP_SPI2_SendRecv>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d002      	beq.n	80075c4 <SD_SendCmd+0x180>
    {
      return 0xFFFF;
 80075be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80075c2:	e053      	b.n	800766c <SD_SendCmd+0x228>
    }
    response |= ((uint32_t)response_tmp << 8);
 80075c4:	7abb      	ldrb	r3, [r7, #10]
 80075c6:	021b      	lsls	r3, r3, #8
 80075c8:	69fa      	ldr	r2, [r7, #28]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	61fb      	str	r3, [r7, #28]
    break;
 80075ce:	e04c      	b.n	800766a <SD_SendCmd+0x226>
  case SD_ANSWER_R3_EXPECTED :
  case SD_ANSWER_R7_EXPECTED :
    /* Sends first byte command to the SD card and get response */
    if(SD_ReadData(&response_tmp) != BSP_ERROR_NONE)
 80075d0:	f107 030a 	add.w	r3, r7, #10
 80075d4:	4618      	mov	r0, r3
 80075d6:	f000 f9c7 	bl	8007968 <SD_ReadData>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d002      	beq.n	80075e6 <SD_SendCmd+0x1a2>
    {
      return 0xFFFF;
 80075e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80075e4:	e042      	b.n	800766c <SD_SendCmd+0x228>
    }
    response = response_tmp;
 80075e6:	7abb      	ldrb	r3, [r7, #10]
 80075e8:	61fb      	str	r3, [r7, #28]
    /* Sends second byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 80075ea:	f107 010a 	add.w	r1, r7, #10
 80075ee:	f107 030b 	add.w	r3, r7, #11
 80075f2:	2201      	movs	r2, #1
 80075f4:	4618      	mov	r0, r3
 80075f6:	f000 faab 	bl	8007b50 <BSP_SPI2_SendRecv>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d002      	beq.n	8007606 <SD_SendCmd+0x1c2>
    {
      return 0xFFFF;
 8007600:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007604:	e032      	b.n	800766c <SD_SendCmd+0x228>
    }
    /* Only first and second responses are required */
    response |= ((uint32_t)response_tmp << 8U);
 8007606:	7abb      	ldrb	r3, [r7, #10]
 8007608:	021b      	lsls	r3, r3, #8
 800760a:	69fa      	ldr	r2, [r7, #28]
 800760c:	4313      	orrs	r3, r2
 800760e:	61fb      	str	r3, [r7, #28]
    /* Sends third byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 8007610:	f107 010a 	add.w	r1, r7, #10
 8007614:	f107 030b 	add.w	r3, r7, #11
 8007618:	2201      	movs	r2, #1
 800761a:	4618      	mov	r0, r3
 800761c:	f000 fa98 	bl	8007b50 <BSP_SPI2_SendRecv>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d002      	beq.n	800762c <SD_SendCmd+0x1e8>
    {
      return 0xFFFF;
 8007626:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800762a:	e01f      	b.n	800766c <SD_SendCmd+0x228>
    }
    /* Sends fourth byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 800762c:	f107 010a 	add.w	r1, r7, #10
 8007630:	f107 030b 	add.w	r3, r7, #11
 8007634:	2201      	movs	r2, #1
 8007636:	4618      	mov	r0, r3
 8007638:	f000 fa8a 	bl	8007b50 <BSP_SPI2_SendRecv>
 800763c:	4603      	mov	r3, r0
 800763e:	2b00      	cmp	r3, #0
 8007640:	d002      	beq.n	8007648 <SD_SendCmd+0x204>
    {
      return 0xFFFF;
 8007642:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007646:	e011      	b.n	800766c <SD_SendCmd+0x228>
    }
    /* Sends fifth byte command to the SD card and get response */
    if(BUS_SPIx_SendRecv(&tmp, &response_tmp, 1U) != BSP_ERROR_NONE)
 8007648:	f107 010a 	add.w	r1, r7, #10
 800764c:	f107 030b 	add.w	r3, r7, #11
 8007650:	2201      	movs	r2, #1
 8007652:	4618      	mov	r0, r3
 8007654:	f000 fa7c 	bl	8007b50 <BSP_SPI2_SendRecv>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d004      	beq.n	8007668 <SD_SendCmd+0x224>
    {
      return 0xFFFF;
 800765e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007662:	e003      	b.n	800766c <SD_SendCmd+0x228>
    }

    break;
  default :
    break;
 8007664:	bf00      	nop
 8007666:	e000      	b.n	800766a <SD_SendCmd+0x226>
    break;
 8007668:	bf00      	nop
  }
  return response;
 800766a:	69fb      	ldr	r3, [r7, #28]
}
 800766c:	4618      	mov	r0, r3
 800766e:	3720      	adds	r7, #32
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <SD_GetDataResponse>:
  *         - status 101: Data rejected due to a crc error
  *         - status 110: Data rejected due to a Write error.
  *         - status 111: Data rejected due to other error.
  */
static int32_t SD_GetDataResponse(uint8_t *DataResponse)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  uint8_t dataresponse, tmp, tmp1;
  *DataResponse = (uint8_t)SD_DATA_OTHER_ERROR;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	22ff      	movs	r2, #255	; 0xff
 8007680:	701a      	strb	r2, [r3, #0]

  tmp = SD_DUMMY_BYTE;
 8007682:	23ff      	movs	r3, #255	; 0xff
 8007684:	73bb      	strb	r3, [r7, #14]
  if(BUS_SPIx_SendRecv(&tmp, &dataresponse, 1U) != BSP_ERROR_NONE)
 8007686:	f107 010f 	add.w	r1, r7, #15
 800768a:	f107 030e 	add.w	r3, r7, #14
 800768e:	2201      	movs	r2, #1
 8007690:	4618      	mov	r0, r3
 8007692:	f000 fa5d 	bl	8007b50 <BSP_SPI2_SendRecv>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d002      	beq.n	80076a2 <SD_GetDataResponse+0x2e>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 800769c:	f06f 0303 	mvn.w	r3, #3
 80076a0:	e049      	b.n	8007736 <SD_GetDataResponse+0xc2>
  }
  /* read the busy response byte*/
  if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80076a2:	f107 030e 	add.w	r3, r7, #14
 80076a6:	2101      	movs	r1, #1
 80076a8:	4618      	mov	r0, r3
 80076aa:	f000 fa19 	bl	8007ae0 <BSP_SPI2_Send>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d002      	beq.n	80076ba <SD_GetDataResponse+0x46>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 80076b4:	f06f 0303 	mvn.w	r3, #3
 80076b8:	e03d      	b.n	8007736 <SD_GetDataResponse+0xc2>
  }
  else
  {
    /* Mask unused bits */
    switch (dataresponse & 0x1FU)
 80076ba:	7bfb      	ldrb	r3, [r7, #15]
 80076bc:	f003 031f 	and.w	r3, r3, #31
 80076c0:	2b0b      	cmp	r3, #11
 80076c2:	d02f      	beq.n	8007724 <SD_GetDataResponse+0xb0>
 80076c4:	2b0d      	cmp	r3, #13
 80076c6:	d031      	beq.n	800772c <SD_GetDataResponse+0xb8>
 80076c8:	2b05      	cmp	r3, #5
 80076ca:	d000      	beq.n	80076ce <SD_GetDataResponse+0x5a>
      break;
    case SD_DATA_WRITE_ERROR:
      *DataResponse = (uint8_t)SD_DATA_WRITE_ERROR;
      break;
    default:
      break;
 80076cc:	e032      	b.n	8007734 <SD_GetDataResponse+0xc0>
      *DataResponse = (uint8_t)SD_DATA_OK;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2205      	movs	r2, #5
 80076d2:	701a      	strb	r2, [r3, #0]
      SD_IO_CSState(1);
 80076d4:	2001      	movs	r0, #1
 80076d6:	f7ff fb9d 	bl	8006e14 <SD_IO_CSState>
      SD_IO_CSState(0);
 80076da:	2000      	movs	r0, #0
 80076dc:	f7ff fb9a 	bl	8006e14 <SD_IO_CSState>
      tmp = SD_DUMMY_BYTE;
 80076e0:	23ff      	movs	r3, #255	; 0xff
 80076e2:	73bb      	strb	r3, [r7, #14]
        if(BUS_SPIx_SendRecv(&tmp, &tmp1, 1U) != BSP_ERROR_NONE)
 80076e4:	f107 010d 	add.w	r1, r7, #13
 80076e8:	f107 030e 	add.w	r3, r7, #14
 80076ec:	2201      	movs	r2, #1
 80076ee:	4618      	mov	r0, r3
 80076f0:	f000 fa2e 	bl	8007b50 <BSP_SPI2_SendRecv>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d010      	beq.n	800771c <SD_GetDataResponse+0xa8>
          return BSP_ERROR_PERIPH_FAILURE;
 80076fa:	f06f 0303 	mvn.w	r3, #3
 80076fe:	e01a      	b.n	8007736 <SD_GetDataResponse+0xc2>
        if(BUS_SPIx_SendRecv(&tmp, &tmp1, 1U) != BSP_ERROR_NONE)
 8007700:	f107 010d 	add.w	r1, r7, #13
 8007704:	f107 030e 	add.w	r3, r7, #14
 8007708:	2201      	movs	r2, #1
 800770a:	4618      	mov	r0, r3
 800770c:	f000 fa20 	bl	8007b50 <BSP_SPI2_SendRecv>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d002      	beq.n	800771c <SD_GetDataResponse+0xa8>
          return BSP_ERROR_PERIPH_FAILURE;
 8007716:	f06f 0303 	mvn.w	r3, #3
 800771a:	e00c      	b.n	8007736 <SD_GetDataResponse+0xc2>
      while(tmp1 != 0xFFU)
 800771c:	7b7b      	ldrb	r3, [r7, #13]
 800771e:	2bff      	cmp	r3, #255	; 0xff
 8007720:	d1ee      	bne.n	8007700 <SD_GetDataResponse+0x8c>
      break;
 8007722:	e007      	b.n	8007734 <SD_GetDataResponse+0xc0>
      *DataResponse =  (uint8_t)SD_DATA_CRC_ERROR;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	220b      	movs	r2, #11
 8007728:	701a      	strb	r2, [r3, #0]
      break;
 800772a:	e003      	b.n	8007734 <SD_GetDataResponse+0xc0>
      *DataResponse = (uint8_t)SD_DATA_WRITE_ERROR;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	220d      	movs	r2, #13
 8007730:	701a      	strb	r2, [r3, #0]
      break;
 8007732:	bf00      	nop
    }
  }

  /* Return response */
  return BSP_ERROR_NONE;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
	...

08007740 <SD_GoIdleState>:
  * @brief  Put the SD in Idle state.
  * @param  None
  * @retval SD status
  */
static int32_t SD_GoIdleState(void)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
  uint32_t response;
  __IO uint8_t counter = 0;
 8007746:	2300      	movs	r3, #0
 8007748:	70fb      	strb	r3, [r7, #3]
  uint8_t tmp = SD_DUMMY_BYTE;
 800774a:	23ff      	movs	r3, #255	; 0xff
 800774c:	70bb      	strb	r3, [r7, #2]

  /* Send CMD0 (SD_CMD_GO_IDLE_STATE) to put SD in SPI mode and
  wait for In Idle State Response (R1 Format) equal to 0x01 */
  do
  {
    counter++;
 800774e:	78fb      	ldrb	r3, [r7, #3]
 8007750:	b2db      	uxtb	r3, r3
 8007752:	3301      	adds	r3, #1
 8007754:	b2db      	uxtb	r3, r3
 8007756:	70fb      	strb	r3, [r7, #3]
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0U, 0x95U, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8007758:	2300      	movs	r3, #0
 800775a:	2295      	movs	r2, #149	; 0x95
 800775c:	2100      	movs	r1, #0
 800775e:	2000      	movs	r0, #0
 8007760:	f7ff fe70 	bl	8007444 <SD_SendCmd>
 8007764:	6078      	str	r0, [r7, #4]
    SD_IO_CSState(1);
 8007766:	2001      	movs	r0, #1
 8007768:	f7ff fb54 	bl	8006e14 <SD_IO_CSState>
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800776c:	1cbb      	adds	r3, r7, #2
 800776e:	2101      	movs	r1, #1
 8007770:	4618      	mov	r0, r3
 8007772:	f000 f9b5 	bl	8007ae0 <BSP_SPI2_Send>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d002      	beq.n	8007782 <SD_GoIdleState+0x42>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 800777c:	f06f 0303 	mvn.w	r3, #3
 8007780:	e0ec      	b.n	800795c <SD_GoIdleState+0x21c>
    }
    else
    {
      if(counter >= SD_MAX_TRY)
 8007782:	78fb      	ldrb	r3, [r7, #3]
 8007784:	b2db      	uxtb	r3, r3
 8007786:	2b63      	cmp	r3, #99	; 0x63
 8007788:	d902      	bls.n	8007790 <SD_GoIdleState+0x50>
      {
        return BSP_ERROR_UNKNOWN_FAILURE;
 800778a:	f06f 0305 	mvn.w	r3, #5
 800778e:	e0e5      	b.n	800795c <SD_GoIdleState+0x21c>
      }
    }
  }while((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_IN_IDLE_STATE);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	b2db      	uxtb	r3, r3
 8007794:	2b01      	cmp	r3, #1
 8007796:	d1da      	bne.n	800774e <SD_GoIdleState+0xe>

  /* Send CMD8 (SD_CMD_SEND_IF_COND) to check the power supply status
  and wait until response (R7 Format) equal to 0xAA and */
  response = SD_SendCmd(SD_CMD_SEND_IF_COND, 0x1AAU, 0x87U, (uint8_t)SD_ANSWER_R7_EXPECTED);
 8007798:	2305      	movs	r3, #5
 800779a:	2287      	movs	r2, #135	; 0x87
 800779c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80077a0:	2008      	movs	r0, #8
 80077a2:	f7ff fe4f 	bl	8007444 <SD_SendCmd>
 80077a6:	6078      	str	r0, [r7, #4]
  SD_IO_CSState(1);
 80077a8:	2001      	movs	r0, #1
 80077aa:	f7ff fb33 	bl	8006e14 <SD_IO_CSState>
  if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80077ae:	1cbb      	adds	r3, r7, #2
 80077b0:	2101      	movs	r1, #1
 80077b2:	4618      	mov	r0, r3
 80077b4:	f000 f994 	bl	8007ae0 <BSP_SPI2_Send>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d002      	beq.n	80077c4 <SD_GoIdleState+0x84>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 80077be:	f06f 0303 	mvn.w	r3, #3
 80077c2:	e0cb      	b.n	800795c <SD_GoIdleState+0x21c>
  }
  else if(((uint8_t)(response & 0xFFU)  & (uint8_t)SD_R1_ILLEGAL_COMMAND) == (uint8_t)SD_R1_ILLEGAL_COMMAND)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	f003 0304 	and.w	r3, r3, #4
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d030      	beq.n	8007832 <SD_GoIdleState+0xf2>
    /* initialise card V1 */
    do
    {
      /* initialise card V1 */
      /* Send CMD55 (SD_CMD_APP_CMD) before any ACMD command: R1 response (0x00: no errors) */
      (void)SD_SendCmd(SD_CMD_APP_CMD, 0x00U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 80077d0:	2300      	movs	r3, #0
 80077d2:	22ff      	movs	r2, #255	; 0xff
 80077d4:	2100      	movs	r1, #0
 80077d6:	2037      	movs	r0, #55	; 0x37
 80077d8:	f7ff fe34 	bl	8007444 <SD_SendCmd>
      SD_IO_CSState(1);
 80077dc:	2001      	movs	r0, #1
 80077de:	f7ff fb19 	bl	8006e14 <SD_IO_CSState>
      if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80077e2:	1cbb      	adds	r3, r7, #2
 80077e4:	2101      	movs	r1, #1
 80077e6:	4618      	mov	r0, r3
 80077e8:	f000 f97a 	bl	8007ae0 <BSP_SPI2_Send>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d002      	beq.n	80077f8 <SD_GoIdleState+0xb8>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 80077f2:	f06f 0303 	mvn.w	r3, #3
 80077f6:	e0b1      	b.n	800795c <SD_GoIdleState+0x21c>
      }
      else
      {
        /* Send ACMD41 (SD_CMD_SD_APP_OP_COND) to initialize SDHC or SDXC cards: R1 response (0x00: no errors) */
        response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 80077f8:	2300      	movs	r3, #0
 80077fa:	22ff      	movs	r2, #255	; 0xff
 80077fc:	2100      	movs	r1, #0
 80077fe:	2029      	movs	r0, #41	; 0x29
 8007800:	f7ff fe20 	bl	8007444 <SD_SendCmd>
 8007804:	6078      	str	r0, [r7, #4]
        SD_IO_CSState(1);
 8007806:	2001      	movs	r0, #1
 8007808:	f7ff fb04 	bl	8006e14 <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800780c:	1cbb      	adds	r3, r7, #2
 800780e:	2101      	movs	r1, #1
 8007810:	4618      	mov	r0, r3
 8007812:	f000 f965 	bl	8007ae0 <BSP_SPI2_Send>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d002      	beq.n	8007822 <SD_GoIdleState+0xe2>
        {
          return BSP_ERROR_PERIPH_FAILURE;
 800781c:	f06f 0303 	mvn.w	r3, #3
 8007820:	e09c      	b.n	800795c <SD_GoIdleState+0x21c>
        }
      }
    }
    while((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_IN_IDLE_STATE);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	b2db      	uxtb	r3, r3
 8007826:	2b01      	cmp	r3, #1
 8007828:	d0d2      	beq.n	80077d0 <SD_GoIdleState+0x90>
    CardType = MY_CARD_SDSC;
 800782a:	4b4e      	ldr	r3, [pc, #312]	; (8007964 <SD_GoIdleState+0x224>)
 800782c:	2200      	movs	r2, #0
 800782e:	601a      	str	r2, [r3, #0]
 8007830:	e093      	b.n	800795a <SD_GoIdleState+0x21a>
  }
  else if((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_IN_IDLE_STATE)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b01      	cmp	r3, #1
 8007838:	f040 808c 	bne.w	8007954 <SD_GoIdleState+0x214>
  {
    /* initialise card V2 */
    do {
      /* Send CMD55 (SD_CMD_APP_CMD) before any ACMD command: R1 response (0x00: no errors) */
      (void)SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 800783c:	2300      	movs	r3, #0
 800783e:	22ff      	movs	r2, #255	; 0xff
 8007840:	2100      	movs	r1, #0
 8007842:	2037      	movs	r0, #55	; 0x37
 8007844:	f7ff fdfe 	bl	8007444 <SD_SendCmd>
      SD_IO_CSState(1);
 8007848:	2001      	movs	r0, #1
 800784a:	f7ff fae3 	bl	8006e14 <SD_IO_CSState>
      if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800784e:	1cbb      	adds	r3, r7, #2
 8007850:	2101      	movs	r1, #1
 8007852:	4618      	mov	r0, r3
 8007854:	f000 f944 	bl	8007ae0 <BSP_SPI2_Send>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d002      	beq.n	8007864 <SD_GoIdleState+0x124>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 800785e:	f06f 0303 	mvn.w	r3, #3
 8007862:	e07b      	b.n	800795c <SD_GoIdleState+0x21c>
      }
      else
      {
        /* Send ACMD41 (SD_CMD_SD_APP_OP_COND) to initialize SDHC or SDXC cards: R1 response (0x00: no errors) */
        response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x40000000U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 8007864:	2300      	movs	r3, #0
 8007866:	22ff      	movs	r2, #255	; 0xff
 8007868:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800786c:	2029      	movs	r0, #41	; 0x29
 800786e:	f7ff fde9 	bl	8007444 <SD_SendCmd>
 8007872:	6078      	str	r0, [r7, #4]
        SD_IO_CSState(1);
 8007874:	2001      	movs	r0, #1
 8007876:	f7ff facd 	bl	8006e14 <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 800787a:	1cbb      	adds	r3, r7, #2
 800787c:	2101      	movs	r1, #1
 800787e:	4618      	mov	r0, r3
 8007880:	f000 f92e 	bl	8007ae0 <BSP_SPI2_Send>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d002      	beq.n	8007890 <SD_GoIdleState+0x150>
        {
          return BSP_ERROR_PERIPH_FAILURE;
 800788a:	f06f 0303 	mvn.w	r3, #3
 800788e:	e065      	b.n	800795c <SD_GoIdleState+0x21c>
        }
      }
    }
    while(((uint8_t)response & 0xFFU) == (uint8_t)SD_R1_IN_IDLE_STATE);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	b2db      	uxtb	r3, r3
 8007894:	2b01      	cmp	r3, #1
 8007896:	d0d1      	beq.n	800783c <SD_GoIdleState+0xfc>

    if(((uint8_t)(response & 0xFFU) & (uint8_t)SD_R1_ILLEGAL_COMMAND) == (uint8_t)SD_R1_ILLEGAL_COMMAND)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	b2db      	uxtb	r3, r3
 800789c:	f003 0304 	and.w	r3, r3, #4
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d033      	beq.n	800790c <SD_GoIdleState+0x1cc>
    {
      do {
        /* Send CMD55 (SD_CMD_APP_CMD) before any ACMD command: R1 response (0x00: no errors) */
        (void)SD_SendCmd(SD_CMD_APP_CMD, 0U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 80078a4:	2300      	movs	r3, #0
 80078a6:	22ff      	movs	r2, #255	; 0xff
 80078a8:	2100      	movs	r1, #0
 80078aa:	2037      	movs	r0, #55	; 0x37
 80078ac:	f7ff fdca 	bl	8007444 <SD_SendCmd>
        SD_IO_CSState(1);
 80078b0:	2001      	movs	r0, #1
 80078b2:	f7ff faaf 	bl	8006e14 <SD_IO_CSState>
        if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80078b6:	1cbb      	adds	r3, r7, #2
 80078b8:	2101      	movs	r1, #1
 80078ba:	4618      	mov	r0, r3
 80078bc:	f000 f910 	bl	8007ae0 <BSP_SPI2_Send>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d002      	beq.n	80078cc <SD_GoIdleState+0x18c>
        {
          return BSP_ERROR_PERIPH_FAILURE;
 80078c6:	f06f 0303 	mvn.w	r3, #3
 80078ca:	e047      	b.n	800795c <SD_GoIdleState+0x21c>
        }
        else
        {
          if((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_IN_IDLE_STATE)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d002      	beq.n	80078da <SD_GoIdleState+0x19a>
          {
            return BSP_ERROR_UNKNOWN_FAILURE;
 80078d4:	f06f 0305 	mvn.w	r3, #5
 80078d8:	e040      	b.n	800795c <SD_GoIdleState+0x21c>
          }
          /* Send ACMD41 (SD_CMD_SD_APP_OP_COND) to initialize SDHC or SDXC cards: R1 response (0x00: no errors) */
          response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00U, 0xFFU, (uint8_t)SD_ANSWER_R1_EXPECTED);
 80078da:	2300      	movs	r3, #0
 80078dc:	22ff      	movs	r2, #255	; 0xff
 80078de:	2100      	movs	r1, #0
 80078e0:	2029      	movs	r0, #41	; 0x29
 80078e2:	f7ff fdaf 	bl	8007444 <SD_SendCmd>
 80078e6:	6078      	str	r0, [r7, #4]
          SD_IO_CSState(1);
 80078e8:	2001      	movs	r0, #1
 80078ea:	f7ff fa93 	bl	8006e14 <SD_IO_CSState>
          if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 80078ee:	1cbb      	adds	r3, r7, #2
 80078f0:	2101      	movs	r1, #1
 80078f2:	4618      	mov	r0, r3
 80078f4:	f000 f8f4 	bl	8007ae0 <BSP_SPI2_Send>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d002      	beq.n	8007904 <SD_GoIdleState+0x1c4>
          {
            return BSP_ERROR_PERIPH_FAILURE;
 80078fe:	f06f 0303 	mvn.w	r3, #3
 8007902:	e02b      	b.n	800795c <SD_GoIdleState+0x21c>
          }
        }
      }
      while((uint8_t)(response & 0xFFU) == (uint8_t)SD_R1_IN_IDLE_STATE);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	b2db      	uxtb	r3, r3
 8007908:	2b01      	cmp	r3, #1
 800790a:	d0cb      	beq.n	80078a4 <SD_GoIdleState+0x164>
    }

    /* Send CMD58 (SD_CMD_READ_OCR) to initialize SDHC or SDXC cards: R3 response (0x00: no errors) */
    response = SD_SendCmd(SD_CMD_READ_OCR, 0x00U, 0xFFU, (uint8_t)SD_ANSWER_R3_EXPECTED);
 800790c:	2303      	movs	r3, #3
 800790e:	22ff      	movs	r2, #255	; 0xff
 8007910:	2100      	movs	r1, #0
 8007912:	203a      	movs	r0, #58	; 0x3a
 8007914:	f7ff fd96 	bl	8007444 <SD_SendCmd>
 8007918:	6078      	str	r0, [r7, #4]
    SD_IO_CSState(1);
 800791a:	2001      	movs	r0, #1
 800791c:	f7ff fa7a 	bl	8006e14 <SD_IO_CSState>
    if(BUS_SPIx_Send(&tmp, 1U) != BSP_ERROR_NONE)
 8007920:	1cbb      	adds	r3, r7, #2
 8007922:	2101      	movs	r1, #1
 8007924:	4618      	mov	r0, r3
 8007926:	f000 f8db 	bl	8007ae0 <BSP_SPI2_Send>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d002      	beq.n	8007936 <SD_GoIdleState+0x1f6>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8007930:	f06f 0303 	mvn.w	r3, #3
 8007934:	e012      	b.n	800795c <SD_GoIdleState+0x21c>
    }
    else
    {
      if((uint8_t)(response & 0xFFU) != (uint8_t)SD_R1_NO_ERROR)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	b2db      	uxtb	r3, r3
 800793a:	2b00      	cmp	r3, #0
 800793c:	d002      	beq.n	8007944 <SD_GoIdleState+0x204>
      {
        return BSP_ERROR_UNKNOWN_FAILURE;
 800793e:	f06f 0305 	mvn.w	r3, #5
 8007942:	e00b      	b.n	800795c <SD_GoIdleState+0x21c>
      }
      CardType = (uint32_t)(((response >> 8U) & 0x40U) >> 6U);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	0a1b      	lsrs	r3, r3, #8
 8007948:	099b      	lsrs	r3, r3, #6
 800794a:	f003 0301 	and.w	r3, r3, #1
 800794e:	4a05      	ldr	r2, [pc, #20]	; (8007964 <SD_GoIdleState+0x224>)
 8007950:	6013      	str	r3, [r2, #0]
 8007952:	e002      	b.n	800795a <SD_GoIdleState+0x21a>
    }
  }
  else
  {
    return BSP_ERROR_BUSY;
 8007954:	f06f 0302 	mvn.w	r3, #2
 8007958:	e000      	b.n	800795c <SD_GoIdleState+0x21c>
  }

  return BSP_ERROR_NONE;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	3708      	adds	r7, #8
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	2000004c 	.word	0x2000004c

08007968 <SD_ReadData>:
  * @brief  Waits a data until a value different from SD_DUMMY_BITE
  * @param  Data data to be read
  * @retval BSP status
  */
static int32_t SD_ReadData(uint8_t *Data)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  uint8_t timeout = 0x08U;
 8007970:	2308      	movs	r3, #8
 8007972:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  tmp = SD_DUMMY_BYTE;
 8007974:	23ff      	movs	r3, #255	; 0xff
 8007976:	73bb      	strb	r3, [r7, #14]
  /* Check if response is got or a timeout is happen */
  do
  {
    if(BUS_SPIx_SendRecv(&tmp, Data, 1) != BSP_ERROR_NONE)
 8007978:	f107 030e 	add.w	r3, r7, #14
 800797c:	2201      	movs	r2, #1
 800797e:	6879      	ldr	r1, [r7, #4]
 8007980:	4618      	mov	r0, r3
 8007982:	f000 f8e5 	bl	8007b50 <BSP_SPI2_SendRecv>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d002      	beq.n	8007992 <SD_ReadData+0x2a>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 800798c:	f06f 0303 	mvn.w	r3, #3
 8007990:	e010      	b.n	80079b4 <SD_ReadData+0x4c>
    }
    timeout--;
 8007992:	7bfb      	ldrb	r3, [r7, #15]
 8007994:	3b01      	subs	r3, #1
 8007996:	73fb      	strb	r3, [r7, #15]

  }while ((*Data == SD_DUMMY_BYTE) && (timeout != 0U));
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	2bff      	cmp	r3, #255	; 0xff
 800799e:	d102      	bne.n	80079a6 <SD_ReadData+0x3e>
 80079a0:	7bfb      	ldrb	r3, [r7, #15]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d1e8      	bne.n	8007978 <SD_ReadData+0x10>

  if (timeout == 0U)
 80079a6:	7bfb      	ldrb	r3, [r7, #15]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d102      	bne.n	80079b2 <SD_ReadData+0x4a>
  {
    /* After time out */
    return BSP_ERROR_BUSY;
 80079ac:	f06f 0302 	mvn.w	r3, #2
 80079b0:	e000      	b.n	80079b4 <SD_ReadData+0x4c>
  }

  /* Right response got */
  return BSP_ERROR_NONE;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3710      	adds	r7, #16
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <SD_WaitData>:
  * @brief  Waits a data from the SD card
  * @param  data  Expected data from the SD card
  * @retval BSP status
  */
static int32_t SD_WaitData(uint8_t Data)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	4603      	mov	r3, r0
 80079c4:	71fb      	strb	r3, [r7, #7]
  uint16_t timeout = 0xFFFF;
 80079c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80079ca:	81fb      	strh	r3, [r7, #14]
  uint8_t readvalue, tmp;

  tmp = SD_DUMMY_BYTE;
 80079cc:	23ff      	movs	r3, #255	; 0xff
 80079ce:	733b      	strb	r3, [r7, #12]

  /* Check if response is got or a timeout is happen */
  do
  {
    if(BUS_SPIx_SendRecv(&tmp, &readvalue, 1) != BSP_ERROR_NONE)
 80079d0:	f107 010d 	add.w	r1, r7, #13
 80079d4:	f107 030c 	add.w	r3, r7, #12
 80079d8:	2201      	movs	r2, #1
 80079da:	4618      	mov	r0, r3
 80079dc:	f000 f8b8 	bl	8007b50 <BSP_SPI2_SendRecv>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d002      	beq.n	80079ec <SD_WaitData+0x30>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 80079e6:	f06f 0303 	mvn.w	r3, #3
 80079ea:	e010      	b.n	8007a0e <SD_WaitData+0x52>
    }
    timeout--;
 80079ec:	89fb      	ldrh	r3, [r7, #14]
 80079ee:	3b01      	subs	r3, #1
 80079f0:	81fb      	strh	r3, [r7, #14]
  }while ((readvalue != Data) && (timeout != 0U));
 80079f2:	7b7b      	ldrb	r3, [r7, #13]
 80079f4:	79fa      	ldrb	r2, [r7, #7]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d002      	beq.n	8007a00 <SD_WaitData+0x44>
 80079fa:	89fb      	ldrh	r3, [r7, #14]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d1e7      	bne.n	80079d0 <SD_WaitData+0x14>

  if (timeout == 0U)
 8007a00:	89fb      	ldrh	r3, [r7, #14]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d102      	bne.n	8007a0c <SD_WaitData+0x50>
  {
    /* After time out */
    return BSP_ERROR_BUSY;
 8007a06:	f06f 0302 	mvn.w	r3, #2
 8007a0a:	e000      	b.n	8007a0e <SD_WaitData+0x52>
  }

  /* Right response got */
  return BSP_ERROR_NONE;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <SPI_IO_Delay>:
  * @brief  SPI IO delay
  * @param  Delay  Delay in ms
  * @retval None
  */
static void SPI_IO_Delay(uint32_t Delay)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b084      	sub	sp, #16
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  int32_t tickstart;
  tickstart = BSP_GetTick();
 8007a1e:	f000 f8b7 	bl	8007b90 <BSP_GetTick>
 8007a22:	60f8      	str	r0, [r7, #12]
  while((BSP_GetTick() - tickstart) < (int32_t)Delay)
 8007a24:	bf00      	nop
 8007a26:	f000 f8b3 	bl	8007b90 <BSP_GetTick>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	1ad2      	subs	r2, r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	dbf7      	blt.n	8007a26 <SPI_IO_Delay+0x10>
  {
  }
}
 8007a36:	bf00      	nop
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
	...

08007a40 <BSP_SPI2_Init>:

static void SPI_MspInit(SPI_HandleTypeDef *hspi);
static void SPI_MspDeInit(SPI_HandleTypeDef *hspi);

int32_t BSP_SPI2_Init(void)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&hSpiHandle) == HAL_SPI_STATE_RESET)
 8007a44:	480a      	ldr	r0, [pc, #40]	; (8007a70 <BSP_SPI2_Init+0x30>)
 8007a46:	f7fc fdd6 	bl	80045f6 <HAL_SPI_GetState>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d10b      	bne.n	8007a68 <BSP_SPI2_Init+0x28>
  {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
    /* Init the SPI Msp */
    SPI_MspInit(&hSpiHandle);
 8007a50:	4807      	ldr	r0, [pc, #28]	; (8007a70 <BSP_SPI2_Init+0x30>)
 8007a52:	f000 f8a5 	bl	8007ba0 <SPI_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_BSP_SPI2_Init(&hSpiHandle) != HAL_OK)
 8007a56:	4806      	ldr	r0, [pc, #24]	; (8007a70 <BSP_SPI2_Init+0x30>)
 8007a58:	f000 f80c 	bl	8007a74 <MX_BSP_SPI2_Init>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d002      	beq.n	8007a68 <BSP_SPI2_Init+0x28>
    {
      return BSP_ERROR_BUS_FAILURE;
 8007a62:	f06f 0307 	mvn.w	r3, #7
 8007a66:	e000      	b.n	8007a6a <BSP_SPI2_Init+0x2a>
    }
  }
  return BSP_ERROR_NONE;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	20000a70 	.word	0x20000a70

08007a74 <MX_BSP_SPI2_Init>:
  * @brief  MX SPI initialization.
  * @param  hspi SPI handle
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_BSP_SPI2_Init(SPI_HandleTypeDef *hspi)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  /* SPI Config */
  hspi->Instance               = NUCLEO_SPI;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a17      	ldr	r2, [pc, #92]	; (8007adc <MX_BSP_SPI2_Init+0x68>)
 8007a80:	601a      	str	r2, [r3, #0]
  hspi->Init.BaudRatePrescaler = NUCLEO_SPI_BAUDRATEPRESCALER;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2210      	movs	r2, #16
 8007a86:	61da      	str	r2, [r3, #28]
  hspi->Init.Direction         = SPI_DIRECTION_2LINES;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	609a      	str	r2, [r3, #8]
  hspi->Init.CLKPhase          = SPI_PHASE_2EDGE;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2201      	movs	r2, #1
 8007a92:	615a      	str	r2, [r3, #20]
  hspi->Init.CLKPolarity       = SPI_POLARITY_HIGH;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2202      	movs	r2, #2
 8007a98:	611a      	str	r2, [r3, #16]
  hspi->Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial     = 7;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2207      	movs	r2, #7
 8007aa4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.DataSize          = SPI_DATASIZE_8BIT;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007aac:	60da      	str	r2, [r3, #12]
  hspi->Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	621a      	str	r2, [r3, #32]
  hspi->Init.NSS               = SPI_NSS_SOFT;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007aba:	619a      	str	r2, [r3, #24]
  hspi->Init.TIMode            = SPI_TIMODE_DISABLE;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.Mode              = SPI_MODE_MASTER;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007ac8:	605a      	str	r2, [r3, #4]

  return HAL_SPI_Init(hspi);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f7fc f860 	bl	8003b90 <HAL_SPI_Init>
 8007ad0:	4603      	mov	r3, r0
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3708      	adds	r7, #8
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	40003800 	.word	0x40003800

08007ae0 <BSP_SPI2_Send>:
  * @param  pTxData pointer to TX buffer
  * @param  Length data length
  * @retval BSP status
  */
int32_t BSP_SPI2_Send(uint8_t *pTxData, uint32_t Length)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007aea:	2300      	movs	r3, #0
 8007aec:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Transmit(&hSpiHandle, pTxData, (uint16_t)Length, NUCLEO_SPI_TIMEOUT_MAX) != HAL_OK)
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	b29a      	uxth	r2, r3
 8007af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007af6:	6879      	ldr	r1, [r7, #4]
 8007af8:	4806      	ldr	r0, [pc, #24]	; (8007b14 <BSP_SPI2_Send+0x34>)
 8007afa:	f7fc f8db 	bl	8003cb4 <HAL_SPI_Transmit>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d002      	beq.n	8007b0a <BSP_SPI2_Send+0x2a>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8007b04:	f06f 0307 	mvn.w	r3, #7
 8007b08:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	20000a70 	.word	0x20000a70

08007b18 <BSP_SPI2_Recv>:
  * @param  pRxData pointer to RX buffer
  * @param  Length data length
  * @retval BSP status
  */
int32_t BSP_SPI2_Recv(uint8_t *pRxData, uint32_t Length)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007b22:	2300      	movs	r3, #0
 8007b24:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Receive(&hSpiHandle, pRxData, (uint16_t)Length, NUCLEO_SPI_TIMEOUT_MAX) != HAL_OK)
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	b29a      	uxth	r2, r3
 8007b2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b2e:	6879      	ldr	r1, [r7, #4]
 8007b30:	4806      	ldr	r0, [pc, #24]	; (8007b4c <BSP_SPI2_Recv+0x34>)
 8007b32:	f7fc fa25 	bl	8003f80 <HAL_SPI_Receive>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d002      	beq.n	8007b42 <BSP_SPI2_Recv+0x2a>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8007b3c:	f06f 0307 	mvn.w	r3, #7
 8007b40:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007b42:	68fb      	ldr	r3, [r7, #12]
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3710      	adds	r7, #16
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	20000a70 	.word	0x20000a70

08007b50 <BSP_SPI2_SendRecv>:
  * @param  pRxData pointer to RX buffer
  * @param  Length data length
  * @retval BSP status
  */
int32_t BSP_SPI2_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint32_t Legnth)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b088      	sub	sp, #32
 8007b54:	af02      	add	r7, sp, #8
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hSpiHandle, pTxData, pRxData, (uint16_t)Legnth, NUCLEO_SPI_TIMEOUT_MAX) != HAL_OK)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	b29a      	uxth	r2, r3
 8007b64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b68:	9300      	str	r3, [sp, #0]
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	68f9      	ldr	r1, [r7, #12]
 8007b70:	4806      	ldr	r0, [pc, #24]	; (8007b8c <BSP_SPI2_SendRecv+0x3c>)
 8007b72:	f7fc fb2d 	bl	80041d0 <HAL_SPI_TransmitReceive>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d002      	beq.n	8007b82 <BSP_SPI2_SendRecv+0x32>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8007b7c:	f06f 0307 	mvn.w	r3, #7
 8007b80:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8007b82:	697b      	ldr	r3, [r7, #20]
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3718      	adds	r7, #24
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	20000a70 	.word	0x20000a70

08007b90 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8007b94:	f7f9 fc8a 	bl	80014ac <HAL_GetTick>
 8007b98:	4603      	mov	r3, r0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	bd80      	pop	{r7, pc}
	...

08007ba0 <SPI_MspInit>:
  * @brief  Initializes SPI MSP.
  * @param  hspi SPI handler
  * @retval None
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b08c      	sub	sp, #48	; 0x30
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /*** Configure the SPI peripheral ***/
  /* Enable SPI clock */
  NUCLEO_SPI_CLK_ENABLE();
 8007ba8:	4b2e      	ldr	r3, [pc, #184]	; (8007c64 <SPI_MspInit+0xc4>)
 8007baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bac:	4a2d      	ldr	r2, [pc, #180]	; (8007c64 <SPI_MspInit+0xc4>)
 8007bae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007bb2:	6593      	str	r3, [r2, #88]	; 0x58
 8007bb4:	4b2b      	ldr	r3, [pc, #172]	; (8007c64 <SPI_MspInit+0xc4>)
 8007bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bbc:	61bb      	str	r3, [r7, #24]
 8007bbe:	69bb      	ldr	r3, [r7, #24]

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  NUCLEO_SPI_SCK_GPIO_CLK_ENABLE();
 8007bc0:	4b28      	ldr	r3, [pc, #160]	; (8007c64 <SPI_MspInit+0xc4>)
 8007bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bc4:	4a27      	ldr	r2, [pc, #156]	; (8007c64 <SPI_MspInit+0xc4>)
 8007bc6:	f043 0301 	orr.w	r3, r3, #1
 8007bca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007bcc:	4b25      	ldr	r3, [pc, #148]	; (8007c64 <SPI_MspInit+0xc4>)
 8007bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bd0:	f003 0301 	and.w	r3, r3, #1
 8007bd4:	617b      	str	r3, [r7, #20]
 8007bd6:	697b      	ldr	r3, [r7, #20]
  NUCLEO_SPI_MOSI_GPIO_CLK_ENABLE();
 8007bd8:	4b22      	ldr	r3, [pc, #136]	; (8007c64 <SPI_MspInit+0xc4>)
 8007bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bdc:	4a21      	ldr	r2, [pc, #132]	; (8007c64 <SPI_MspInit+0xc4>)
 8007bde:	f043 0301 	orr.w	r3, r3, #1
 8007be2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007be4:	4b1f      	ldr	r3, [pc, #124]	; (8007c64 <SPI_MspInit+0xc4>)
 8007be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007be8:	f003 0301 	and.w	r3, r3, #1
 8007bec:	613b      	str	r3, [r7, #16]
 8007bee:	693b      	ldr	r3, [r7, #16]
  NUCLEO_SPI_MISO_GPIO_CLK_ENABLE();
 8007bf0:	4b1c      	ldr	r3, [pc, #112]	; (8007c64 <SPI_MspInit+0xc4>)
 8007bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bf4:	4a1b      	ldr	r2, [pc, #108]	; (8007c64 <SPI_MspInit+0xc4>)
 8007bf6:	f043 0301 	orr.w	r3, r3, #1
 8007bfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007bfc:	4b19      	ldr	r3, [pc, #100]	; (8007c64 <SPI_MspInit+0xc4>)
 8007bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c00:	f003 0301 	and.w	r3, r3, #1
 8007c04:	60fb      	str	r3, [r7, #12]
 8007c06:	68fb      	ldr	r3, [r7, #12]

  /* Configure SPI SCK */
  GPIO_InitStruct.Pin       = NUCLEO_SPI_SCK_PIN;
 8007c08:	2320      	movs	r3, #32
 8007c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8007c0c:	2302      	movs	r3, #2
 8007c0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8007c10:	2301      	movs	r3, #1
 8007c12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c14:	2303      	movs	r3, #3
 8007c16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = NUCLEO_SPI_SCK_AF;
 8007c18:	2305      	movs	r3, #5
 8007c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NUCLEO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8007c1c:	f107 031c 	add.w	r3, r7, #28
 8007c20:	4619      	mov	r1, r3
 8007c22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007c26:	f7fa fb8f 	bl	8002348 <HAL_GPIO_Init>

  /* Configure SPI MOSI */
  GPIO_InitStruct.Pin       = NUCLEO_SPI_MOSI_PIN;
 8007c2a:	2380      	movs	r3, #128	; 0x80
 8007c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = NUCLEO_SPI_MOSI_AF;
 8007c2e:	2305      	movs	r3, #5
 8007c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 8007c32:	2302      	movs	r3, #2
 8007c34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(NUCLEO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8007c36:	f107 031c 	add.w	r3, r7, #28
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007c40:	f7fa fb82 	bl	8002348 <HAL_GPIO_Init>

  /* Configure SPI MISO */
  GPIO_InitStruct.Pin = NUCLEO_SPI_MISO_PIN;
 8007c44:	2340      	movs	r3, #64	; 0x40
 8007c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = NUCLEO_SPI_MISO_AF;
 8007c48:	2305      	movs	r3, #5
 8007c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NUCLEO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8007c4c:	f107 031c 	add.w	r3, r7, #28
 8007c50:	4619      	mov	r1, r3
 8007c52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007c56:	f7fa fb77 	bl	8002348 <HAL_GPIO_Init>
}
 8007c5a:	bf00      	nop
 8007c5c:	3730      	adds	r7, #48	; 0x30
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	40021000 	.word	0x40021000

08007c68 <USER_CheckStatus>:
#define DISABLE_SD_INIT
/* Private variables ---------------------------------------------------------*/
/* Disk status */
static volatile DSTATUS Stat = STA_NOINIT;
static DSTATUS USER_CheckStatus(BYTE lun)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	4603      	mov	r3, r0
 8007c70:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007c72:	4b0c      	ldr	r3, [pc, #48]	; (8007ca4 <USER_CheckStatus+0x3c>)
 8007c74:	2201      	movs	r2, #1
 8007c76:	701a      	strb	r2, [r3, #0]
  // TO DO:
  if(MY_SD_GetCardState(0) == BSP_ERROR_NONE)
 8007c78:	2000      	movs	r0, #0
 8007c7a:	f7fe ffc7 	bl	8006c0c <MY_SD_GetCardState>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d107      	bne.n	8007c94 <USER_CheckStatus+0x2c>
  {
    Stat &= ~STA_NOINIT;
 8007c84:	4b07      	ldr	r3, [pc, #28]	; (8007ca4 <USER_CheckStatus+0x3c>)
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	f023 0301 	bic.w	r3, r3, #1
 8007c8e:	b2da      	uxtb	r2, r3
 8007c90:	4b04      	ldr	r3, [pc, #16]	; (8007ca4 <USER_CheckStatus+0x3c>)
 8007c92:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007c94:	4b03      	ldr	r3, [pc, #12]	; (8007ca4 <USER_CheckStatus+0x3c>)
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	b2db      	uxtb	r3, r3
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3708      	adds	r7, #8
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	2000000c 	.word	0x2000000c

08007ca8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	4603      	mov	r3, r0
 8007cb0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8007cb2:	4b09      	ldr	r3, [pc, #36]	; (8007cd8 <USER_initialize+0x30>)
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	701a      	strb	r2, [r3, #0]
	  if(MY_SD_Init(0) == BSP_ERROR_NONE)
	  {
		Stat = USER_CheckStatus(pdrv);
	  }
	#else
	  Stat = USER_CheckStatus(pdrv);
 8007cb8:	79fb      	ldrb	r3, [r7, #7]
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7ff ffd4 	bl	8007c68 <USER_CheckStatus>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	4b04      	ldr	r3, [pc, #16]	; (8007cd8 <USER_initialize+0x30>)
 8007cc6:	701a      	strb	r2, [r3, #0]
	#endif
    return Stat;
 8007cc8:	4b03      	ldr	r3, [pc, #12]	; (8007cd8 <USER_initialize+0x30>)
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3708      	adds	r7, #8
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	2000000c 	.word	0x2000000c

08007cdc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_CheckStatus(pdrv);
 8007ce6:	79fb      	ldrb	r3, [r7, #7]
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f7ff ffbd 	bl	8007c68 <USER_CheckStatus>
 8007cee:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3708      	adds	r7, #8
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b086      	sub	sp, #24
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60b9      	str	r1, [r7, #8]
 8007d00:	607a      	str	r2, [r7, #4]
 8007d02:	603b      	str	r3, [r7, #0]
 8007d04:	4603      	mov	r3, r0
 8007d06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	DRESULT res = RES_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	75fb      	strb	r3, [r7, #23]
	  if(MY_SD_ReadBlocks(0, (uint32_t*)buff,
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	68b9      	ldr	r1, [r7, #8]
 8007d12:	2000      	movs	r0, #0
 8007d14:	f7fe fdac 	bl	8006870 <MY_SD_ReadBlocks>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d108      	bne.n	8007d30 <USER_read+0x38>
						   (uint32_t) (sector),
						   count) == BSP_ERROR_NONE)
	  {
		/* wait until the read operation is finished */
		while( MY_SD_GetCardState(0)!= BSP_ERROR_NONE)
 8007d1e:	bf00      	nop
 8007d20:	2000      	movs	r0, #0
 8007d22:	f7fe ff73 	bl	8006c0c <MY_SD_GetCardState>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1f9      	bne.n	8007d20 <USER_read+0x28>
		{
		}
		res = RES_OK;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	75fb      	strb	r3, [r7, #23]
	  }
	  return res;
 8007d30:	7dfb      	ldrb	r3, [r7, #23]
  /* USER CODE END READ */
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3718      	adds	r7, #24
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}

08007d3a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b086      	sub	sp, #24
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	607a      	str	r2, [r7, #4]
 8007d44:	603b      	str	r3, [r7, #0]
 8007d46:	4603      	mov	r3, r0
 8007d48:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	DRESULT res = RES_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	75fb      	strb	r3, [r7, #23]
	  if(MY_SD_WriteBlocks(0, (uint32_t*)buff,
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	68b9      	ldr	r1, [r7, #8]
 8007d54:	2000      	movs	r0, #0
 8007d56:	f7fe fe57 	bl	8006a08 <MY_SD_WriteBlocks>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d108      	bne.n	8007d72 <USER_write+0x38>
	                        (uint32_t)(sector),
	                        count) == BSP_ERROR_NONE)
	  {
	  /* wait until the Write operation is finished */
	    while(MY_SD_GetCardState(0) != BSP_ERROR_NONE)
 8007d60:	bf00      	nop
 8007d62:	2000      	movs	r0, #0
 8007d64:	f7fe ff52 	bl	8006c0c <MY_SD_GetCardState>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1f9      	bne.n	8007d62 <USER_write+0x28>
	    {
	    }
	    res = RES_OK;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	75fb      	strb	r3, [r7, #23]
	  }

	  return res;
 8007d72:	7dfb      	ldrb	r3, [r7, #23]
  /* USER CODE END WRITE */
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3718      	adds	r7, #24
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b096      	sub	sp, #88	; 0x58
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	4603      	mov	r3, r0
 8007d84:	603a      	str	r2, [r7, #0]
 8007d86:	71fb      	strb	r3, [r7, #7]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res = RES_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  SD_CardInfo_t CardInfo;

	  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007d92:	4b26      	ldr	r3, [pc, #152]	; (8007e2c <USER_ioctl+0xb0>)
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	f003 0301 	and.w	r3, r3, #1
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d001      	beq.n	8007da4 <USER_ioctl+0x28>
 8007da0:	2303      	movs	r3, #3
 8007da2:	e03f      	b.n	8007e24 <USER_ioctl+0xa8>

	  switch (cmd)
 8007da4:	79bb      	ldrb	r3, [r7, #6]
 8007da6:	2b03      	cmp	r3, #3
 8007da8:	d837      	bhi.n	8007e1a <USER_ioctl+0x9e>
 8007daa:	a201      	add	r2, pc, #4	; (adr r2, 8007db0 <USER_ioctl+0x34>)
 8007dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db0:	08007dc1 	.word	0x08007dc1
 8007db4:	08007dc9 	.word	0x08007dc9
 8007db8:	08007de3 	.word	0x08007de3
 8007dbc:	08007dff 	.word	0x08007dff
	  {
	  /* Make sure that no pending write process */
	  case CTRL_SYNC :
	    res = RES_OK;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	    break;
 8007dc6:	e02b      	b.n	8007e20 <USER_ioctl+0xa4>

	  /* Get number of sectors on the disk (DWORD) */
	  case GET_SECTOR_COUNT :
	    MY_SD_GetCardInfo(0, &CardInfo);
 8007dc8:	f107 0308 	add.w	r3, r7, #8
 8007dcc:	4619      	mov	r1, r3
 8007dce:	2000      	movs	r0, #0
 8007dd0:	f7fe ff54 	bl	8006c7c <MY_SD_GetCardInfo>
	    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007dd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	601a      	str	r2, [r3, #0]
	    res = RES_OK;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	    break;
 8007de0:	e01e      	b.n	8007e20 <USER_ioctl+0xa4>

	  /* Get R/W sector size (WORD) */
	  case GET_SECTOR_SIZE :
	    MY_SD_GetCardInfo(0, &CardInfo);
 8007de2:	f107 0308 	add.w	r3, r7, #8
 8007de6:	4619      	mov	r1, r3
 8007de8:	2000      	movs	r0, #0
 8007dea:	f7fe ff47 	bl	8006c7c <MY_SD_GetCardInfo>
	    *(WORD*)buff = CardInfo.LogBlockSize;
 8007dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007df0:	b29a      	uxth	r2, r3
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	801a      	strh	r2, [r3, #0]
	    res = RES_OK;
 8007df6:	2300      	movs	r3, #0
 8007df8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	    break;
 8007dfc:	e010      	b.n	8007e20 <USER_ioctl+0xa4>

	  /* Get erase block size in unit of sector (DWORD) */
	  case GET_BLOCK_SIZE :
	    MY_SD_GetCardInfo(0, &CardInfo);
 8007dfe:	f107 0308 	add.w	r3, r7, #8
 8007e02:	4619      	mov	r1, r3
 8007e04:	2000      	movs	r0, #0
 8007e06:	f7fe ff39 	bl	8006c7c <MY_SD_GetCardInfo>
	    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007e0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e0c:	0a5a      	lsrs	r2, r3, #9
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	601a      	str	r2, [r3, #0]
		res = RES_OK;
 8007e12:	2300      	movs	r3, #0
 8007e14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	    break;
 8007e18:	e002      	b.n	8007e20 <USER_ioctl+0xa4>

	  default:
	    res = RES_PARERR;
 8007e1a:	2304      	movs	r3, #4
 8007e1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  }

	  return res;
 8007e20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
  /* USER CODE END IOCTL */
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3758      	adds	r7, #88	; 0x58
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	2000000c 	.word	0x2000000c

08007e30 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b087      	sub	sp, #28
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007e42:	2300      	movs	r3, #0
 8007e44:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007e46:	4b1f      	ldr	r3, [pc, #124]	; (8007ec4 <FATFS_LinkDriverEx+0x94>)
 8007e48:	7a5b      	ldrb	r3, [r3, #9]
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d131      	bne.n	8007eb4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007e50:	4b1c      	ldr	r3, [pc, #112]	; (8007ec4 <FATFS_LinkDriverEx+0x94>)
 8007e52:	7a5b      	ldrb	r3, [r3, #9]
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	461a      	mov	r2, r3
 8007e58:	4b1a      	ldr	r3, [pc, #104]	; (8007ec4 <FATFS_LinkDriverEx+0x94>)
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007e5e:	4b19      	ldr	r3, [pc, #100]	; (8007ec4 <FATFS_LinkDriverEx+0x94>)
 8007e60:	7a5b      	ldrb	r3, [r3, #9]
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	4a17      	ldr	r2, [pc, #92]	; (8007ec4 <FATFS_LinkDriverEx+0x94>)
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	4413      	add	r3, r2
 8007e6a:	68fa      	ldr	r2, [r7, #12]
 8007e6c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007e6e:	4b15      	ldr	r3, [pc, #84]	; (8007ec4 <FATFS_LinkDriverEx+0x94>)
 8007e70:	7a5b      	ldrb	r3, [r3, #9]
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	461a      	mov	r2, r3
 8007e76:	4b13      	ldr	r3, [pc, #76]	; (8007ec4 <FATFS_LinkDriverEx+0x94>)
 8007e78:	4413      	add	r3, r2
 8007e7a:	79fa      	ldrb	r2, [r7, #7]
 8007e7c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007e7e:	4b11      	ldr	r3, [pc, #68]	; (8007ec4 <FATFS_LinkDriverEx+0x94>)
 8007e80:	7a5b      	ldrb	r3, [r3, #9]
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	1c5a      	adds	r2, r3, #1
 8007e86:	b2d1      	uxtb	r1, r2
 8007e88:	4a0e      	ldr	r2, [pc, #56]	; (8007ec4 <FATFS_LinkDriverEx+0x94>)
 8007e8a:	7251      	strb	r1, [r2, #9]
 8007e8c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007e8e:	7dbb      	ldrb	r3, [r7, #22]
 8007e90:	3330      	adds	r3, #48	; 0x30
 8007e92:	b2da      	uxtb	r2, r3
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	223a      	movs	r2, #58	; 0x3a
 8007e9e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	3302      	adds	r3, #2
 8007ea4:	222f      	movs	r2, #47	; 0x2f
 8007ea6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	3303      	adds	r3, #3
 8007eac:	2200      	movs	r2, #0
 8007eae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007eb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	371c      	adds	r7, #28
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr
 8007ec2:	bf00      	nop
 8007ec4:	20000050 	.word	0x20000050

08007ec8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	6839      	ldr	r1, [r7, #0]
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f7ff ffaa 	bl	8007e30 <FATFS_LinkDriverEx>
 8007edc:	4603      	mov	r3, r0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3708      	adds	r7, #8
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
	...

08007ee8 <__libc_init_array>:
 8007ee8:	b570      	push	{r4, r5, r6, lr}
 8007eea:	4e0d      	ldr	r6, [pc, #52]	; (8007f20 <__libc_init_array+0x38>)
 8007eec:	4c0d      	ldr	r4, [pc, #52]	; (8007f24 <__libc_init_array+0x3c>)
 8007eee:	1ba4      	subs	r4, r4, r6
 8007ef0:	10a4      	asrs	r4, r4, #2
 8007ef2:	2500      	movs	r5, #0
 8007ef4:	42a5      	cmp	r5, r4
 8007ef6:	d109      	bne.n	8007f0c <__libc_init_array+0x24>
 8007ef8:	4e0b      	ldr	r6, [pc, #44]	; (8007f28 <__libc_init_array+0x40>)
 8007efa:	4c0c      	ldr	r4, [pc, #48]	; (8007f2c <__libc_init_array+0x44>)
 8007efc:	f000 f820 	bl	8007f40 <_init>
 8007f00:	1ba4      	subs	r4, r4, r6
 8007f02:	10a4      	asrs	r4, r4, #2
 8007f04:	2500      	movs	r5, #0
 8007f06:	42a5      	cmp	r5, r4
 8007f08:	d105      	bne.n	8007f16 <__libc_init_array+0x2e>
 8007f0a:	bd70      	pop	{r4, r5, r6, pc}
 8007f0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f10:	4798      	blx	r3
 8007f12:	3501      	adds	r5, #1
 8007f14:	e7ee      	b.n	8007ef4 <__libc_init_array+0xc>
 8007f16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f1a:	4798      	blx	r3
 8007f1c:	3501      	adds	r5, #1
 8007f1e:	e7f2      	b.n	8007f06 <__libc_init_array+0x1e>
 8007f20:	08007f98 	.word	0x08007f98
 8007f24:	08007f98 	.word	0x08007f98
 8007f28:	08007f98 	.word	0x08007f98
 8007f2c:	08007f9c 	.word	0x08007f9c

08007f30 <memset>:
 8007f30:	4402      	add	r2, r0
 8007f32:	4603      	mov	r3, r0
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d100      	bne.n	8007f3a <memset+0xa>
 8007f38:	4770      	bx	lr
 8007f3a:	f803 1b01 	strb.w	r1, [r3], #1
 8007f3e:	e7f9      	b.n	8007f34 <memset+0x4>

08007f40 <_init>:
 8007f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f42:	bf00      	nop
 8007f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f46:	bc08      	pop	{r3}
 8007f48:	469e      	mov	lr, r3
 8007f4a:	4770      	bx	lr

08007f4c <_fini>:
 8007f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f4e:	bf00      	nop
 8007f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f52:	bc08      	pop	{r3}
 8007f54:	469e      	mov	lr, r3
 8007f56:	4770      	bx	lr
